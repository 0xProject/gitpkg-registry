{
    "schemaVersion": "2.0.0",
    "contractName": "LibTransactionDecoder",
    "compilerOutput": {
        "abi": [
            {
                "constant": true,
                "inputs": [
                    {
                        "internalType": "bytes",
                        "name": "transactionData",
                        "type": "bytes"
                    }
                ],
                "name": "decodeZeroExTransactionData",
                "outputs": [
                    {
                        "internalType": "string",
                        "name": "functionName",
                        "type": "string"
                    },
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "makerAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "takerAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "feeRecipientAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "senderAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "uint256",
                                "name": "makerAssetAmount",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "takerAssetAmount",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "makerFee",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "takerFee",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "expirationTimeSeconds",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "salt",
                                "type": "uint256"
                            },
                            {
                                "internalType": "bytes",
                                "name": "makerAssetData",
                                "type": "bytes"
                            },
                            {
                                "internalType": "bytes",
                                "name": "takerAssetData",
                                "type": "bytes"
                            },
                            {
                                "internalType": "bytes",
                                "name": "makerFeeAssetData",
                                "type": "bytes"
                            },
                            {
                                "internalType": "bytes",
                                "name": "takerFeeAssetData",
                                "type": "bytes"
                            }
                        ],
                        "internalType": "struct LibOrder.Order[]",
                        "name": "orders",
                        "type": "tuple[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerAssetFillAmounts",
                        "type": "uint256[]"
                    },
                    {
                        "internalType": "bytes[]",
                        "name": "signatures",
                        "type": "bytes[]"
                    }
                ],
                "payable": false,
                "stateMutability": "pure",
                "type": "function"
            }
        ],
        "devdoc": {
            "methods": {
                "decodeZeroExTransactionData(bytes)": {
                    "details": "Decodes the call data for an Exchange contract method call.",
                    "params": {
                        "transactionData": "ABI-encoded calldata for an Exchange     contract method call."
                    },
                    "return": "The name of the function called, and the parameters it was     given.  For single-order fills and cancels, the arrays will have     just one element."
                }
            }
        },
        "evm": {
            "bytecode": {
                "linkReferences": {},
                "object": "0x61197c610026600b82828239805160001a60731461001957fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100355760003560e01c80636f83188e1461003a575b600080fd5b61004d6100483660046113fe565b610066565b60405161005d94939291906116aa565b60405180910390f35b6060808080600061007d868263ffffffff610bb016565b90506001600160e01b031981167fdedfc1f10000000000000000000000000000000000000000000000000000000014156100ee576040518060400160405280601181526020017f626174636843616e63656c4f72646572730000000000000000000000000000008152509450610686565b6001600160e01b031981167f9694a40200000000000000000000000000000000000000000000000000000000141561015d576040518060400160405280600f81526020017f626174636846696c6c4f726465727300000000000000000000000000000000008152509450610686565b6001600160e01b031981167f8ea8dfe40000000000000000000000000000000000000000000000000000000014156101cc576040518060400160405280601681526020017f626174636846696c6c4f72646572734e6f5468726f77000000000000000000008152509450610686565b6001600160e01b031981167fbeee2e1400000000000000000000000000000000000000000000000000000000141561023b576040518060400160405280601581526020017f626174636846696c6c4f724b696c6c4f726465727300000000000000000000008152509450610686565b6001600160e01b031981167f2da629870000000000000000000000000000000000000000000000000000000014156102aa576040518060400160405280600b81526020017f63616e63656c4f726465720000000000000000000000000000000000000000008152509450610686565b6001600160e01b031981167f9b44d556000000000000000000000000000000000000000000000000000000001415610319576040518060400160405280600981526020017f66696c6c4f7264657200000000000000000000000000000000000000000000008152509450610686565b6001600160e01b031981167fe14b58c4000000000000000000000000000000000000000000000000000000001415610388576040518060400160405280600f81526020017f66696c6c4f724b696c6c4f7264657200000000000000000000000000000000008152509450610686565b6001600160e01b031981167f78d29ac10000000000000000000000000000000000000000000000000000000014156103f7576040518060400160405280601681526020017f6d61726b65744275794f72646572734e6f5468726f77000000000000000000008152509450610686565b6001600160e01b031981167f369da099000000000000000000000000000000000000000000000000000000001415610466576040518060400160405280601781526020017f6d61726b657453656c6c4f72646572734e6f5468726f770000000000000000008152509450610686565b6001600160e01b031981167f8bc8efb30000000000000000000000000000000000000000000000000000000014156104d5576040518060400160405280601981526020017f6d61726b65744275794f726465727346696c6c4f724b696c6c000000000000008152509450610686565b6001600160e01b031981167fa6c3bf33000000000000000000000000000000000000000000000000000000001415610544576040518060400160405280601a81526020017f6d61726b657453656c6c4f726465727346696c6c4f724b696c6c0000000000008152509450610686565b6001600160e01b031981167f88ec79fb0000000000000000000000000000000000000000000000000000000014156105b3576040518060400160405280600b81526020017f6d617463684f72646572730000000000000000000000000000000000000000008152509450610686565b6001600160e01b031981167f4f9559b100000000000000000000000000000000000000000000000000000000148061061457506001600160e01b031981167f2280c91000000000000000000000000000000000000000000000000000000000145b15610654576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161064b90611867565b60405180910390fd5b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161064b90611830565b6001600160e01b031981167fdedfc1f100000000000000000000000000000000000000000000000000000000141561072b5785516106ce90879060049063ffffffff610bf316565b8060200190516106e19190810190611293565b604080516000808252602082019092529195505b5060408051600080825260208201909252919450610723565b606081526020019060019003908161070e5790505b509150610ba8565b6001600160e01b031981167fbeee2e1400000000000000000000000000000000000000000000000000000000148061078c57506001600160e01b031981167f9694a40200000000000000000000000000000000000000000000000000000000145b806107c057506001600160e01b031981167f8ea8dfe400000000000000000000000000000000000000000000000000000000145b156107da576107ce86610c7a565b91955093509150610ba8565b6001600160e01b031981167f2da629870000000000000000000000000000000000000000000000000000000014156108c25760408051600180825281830190925290816020015b610829610f47565b815260200190600190039081610821575050865190945061085490879060049063ffffffff610bf316565b8060200190516108679190810190611475565b8460008151811061087457fe5b602002602001018190525060006040519080825280602002602001820160405280156106f5578160200160208202803883390190505060408051600080825260208201909252919450610723565b6001600160e01b031981167fe14b58c400000000000000000000000000000000000000000000000000000000148061092357506001600160e01b031981167f9b44d55600000000000000000000000000000000000000000000000000000000145b15610931576107ce86610cb6565b6001600160e01b031981167f78d29ac100000000000000000000000000000000000000000000000000000000148061099257506001600160e01b031981167f369da09900000000000000000000000000000000000000000000000000000000145b806109c657506001600160e01b031981167f8bc8efb300000000000000000000000000000000000000000000000000000000145b806109fa57506001600160e01b031981167fa6c3bf3300000000000000000000000000000000000000000000000000000000145b15610a08576107ce86610db0565b6001600160e01b031981167f88ec79fb000000000000000000000000000000000000000000000000000000001415610ba857610a42610f47565b610a4a610f47565b606080610a6460048b518c610bf39092919063ffffffff16565b806020019051610a7791908101906114a8565b604080516002808252606082019092529498509296509094509250816020015b610a9f610f47565b815260200190600190039081610a975790505097508388600081518110610ac257fe5b60200260200101819052508288600181518110610adb57fe5b602090810291909101015260408051600280825260608201909252908160200160208202803883390190505096508360a0015187600081518110610b1b57fe5b6020026020010181815250508260a0015187600181518110610b3957fe5b60209081029190910101526040805160028082526060820190925290816020015b6060815260200190600190039081610b5a5790505095508186600081518110610b7f57fe5b60200260200101819052508086600181518110610b9857fe5b6020026020010181905250505050505b509193509193565b60008160040183511015610bd657610bd6610bd16003855185600401610e24565b610e93565b5060208183018101519101906001600160e01b0319165b92915050565b606081831115610c0c57610c0c610bd160008585610e24565b8351821115610c2557610c25610bd16001848751610e24565b8282036040519080825280601f01601f191660200182016040528015610c52576020820181803883390190505b509050610c73610c6182610e9b565b84610c6b87610e9b565b018351610ea1565b9392505050565b6060806060610c966004855186610bf39092919063ffffffff16565b806020019051610ca991908101906112ce565b9196909550909350915050565b60408051600180825281830190925260609182918291816020015b610cd9610f47565b815260200190600190039081610cd15750506040805160018082528183019092529194506020808301908038833901905050604080516001808252818301909252919350816020015b6060815260200190600190039081610d225750508451909150610d4f90859060049063ffffffff610bf316565b806020019051610d629190810190611550565b85600081518110610d6f57fe5b6020026020010185600081518110610d8357fe5b6020026020010185600081518110610d9757fe5b6020908102919091010192909252919052529193909250565b604080516001808252818301909252606091829182916020808301908038833950508551919350610dec9186915060049063ffffffff610bf316565b806020019051610dff91908101906113ab565b84518590600090610e0c57fe5b60209081029190910101919091529095929450925050565b6060632800659560e01b848484604051602401610e4393929190611688565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b03199093169290921790915290509392505050565b805160208201fd5b60200190565b6020811015610ecb576001816020036101000a038019835116818551168082178652505050610f42565b82821415610ed857610f42565b82821115610f125760208103905080820181840181515b82851015610f0a578451865260209586019590940193610eef565b905250610f42565b60208103905080820181840183515b81861215610f3d5782518252601f199283019290910190610f21565b855250505b505050565b604051806101c00160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001606081526020016060815260200160608152602001606081525090565b805173ffffffffffffffffffffffffffffffffffffffff81168114610bed57600080fd5b600082601f830112611042578081fd5b8151611055611050826118c5565b61189e565b8181529150602080830190840160005b838110156110925761107d87602084518901016110f7565b83526020928301929190910190600101611065565b5050505092915050565b600082601f8301126110ac578081fd5b81516110ba611050826118c5565b8181529150602080830190840160005b83811015611092576110e28760208451890101611144565b835260209283019291909101906001016110ca565b600082601f830112611107578081fd5b8151611115611050826118e5565b915080825283602082850101111561112c57600080fd5b61113d816020840160208601611909565b5092915050565b60006101c0808385031215611157578182fd5b6111608161189e565b91505061116d838361100e565b815261117c836020840161100e565b602082015261118e836040840161100e565b60408201526111a0836060840161100e565b60608201526080820151608082015260a082015160a082015260c082015160c082015260e082015160e08201526101008083015181830152506101208083015181830152506101408083015167ffffffffffffffff8082111561120257600080fd5b61120e868387016110f7565b8385015261016092508285015191508082111561122a57600080fd5b611236868387016110f7565b8385015261018092508285015191508082111561125257600080fd5b61125e868387016110f7565b838501526101a092508285015191508082111561127a57600080fd5b50611287858286016110f7565b82840152505092915050565b6000602082840312156112a4578081fd5b815167ffffffffffffffff8111156112ba578182fd5b6112c68482850161109c565b949350505050565b6000806000606084860312156112e2578182fd5b835167ffffffffffffffff808211156112f9578384fd5b6113058783880161109c565b945060209150818601518181111561131b578485fd5b80870188601f82011261132c578586fd5b8051915061133c611050836118c5565b82815284810190828601868502840187018c1015611358578889fd5b8893505b8484101561137a57805183526001939093019291860191860161135c565b5060408a0151909750945050505080821115611394578283fd5b506113a186828701611032565b9150509250925092565b6000806000606084860312156113bf578283fd5b835167ffffffffffffffff808211156113d6578485fd5b6113e28783880161109c565b9450602086015193506040860151915080821115611394578283fd5b60006020828403121561140f578081fd5b813567ffffffffffffffff811115611425578182fd5b80830184601f820112611436578283fd5b80359150611446611050836118e5565b82815285602084840101111561145a578384fd5b82602083016020830137918201602001929092529392505050565b600060208284031215611486578081fd5b815167ffffffffffffffff81111561149c578182fd5b6112c684828501611144565b600080600080608085870312156114bd578081fd5b845167ffffffffffffffff808211156114d4578283fd5b6114e088838901611144565b955060208701519150808211156114f5578283fd5b61150188838901611144565b94506040870151915080821115611516578283fd5b611522888389016110f7565b93506060870151915080821115611537578283fd5b50611544878288016110f7565b91505092959194509250565b600080600060608486031215611564578283fd5b835167ffffffffffffffff8082111561157b578485fd5b61158787838801611144565b94506020860151935060408601519150808211156115a3578283fd5b506113a1868287016110f7565b73ffffffffffffffffffffffffffffffffffffffff169052565b600081518084526020840180819550602083028101915060208501845b848110156116155782840388526115ff84835161165c565b60209889019890945091909101906001016115e7565b50919695505050505050565b6000815180845260208401935060208301825b82811015611652578151865260209586019590910190600101611634565b5093949350505050565b60008151808452611674816020860160208601611909565b601f01601f19169290920160200192915050565b606081016008851061169657fe5b938152602081019290925260409091015290565b6000608082526116bd608083018761165c565b602083820381850152818751808452828401915082838202850101838a01865b838110156117f957601f1987840301855281516101c06116fe8583516115b0565b8782015161170e898701826115b0565b50604082015161172160408701826115b0565b50606082015161173460608701826115b0565b506080820151608086015260a082015160a086015260c082015160c086015260e082015160e086015261010080830151818701525061012080830151818701525061014080830151828288015261178d8388018261165c565b915050610160915081830151868203838801526117aa828261165c565b9250505061018080830151868303828801526117c6838261165c565b9150506101a0915081830151868203838801526117e3828261165c565b988a0198965050509287019250506001016116dd565b5050868103604088015261180d818a611621565b945050505050828103606084015261182581856115ca565b979650505050505050565b60208082526019908201527f554e4b4e4f574e5f46554e4354494f4e5f53454c4543544f5200000000000000604082015260600190565b6020808252600d908201527f554e494d504c454d454e54454400000000000000000000000000000000000000604082015260600190565b60405181810167ffffffffffffffff811182821017156118bd57600080fd5b604052919050565b600067ffffffffffffffff8211156118db578081fd5b5060209081020190565b600067ffffffffffffffff8211156118fb578081fd5b50601f01601f191660200190565b60005b8381101561192457818101518382015260200161190c565b83811115611933576000848401525b5050505056fea365627a7a723158207c921e22e73d7f54cacaee11f59ab7fad6673673d4a1910a9d80ec5845470c3c6c6578706572696d656e74616cf564736f6c63430005110040",
                "opcodes": "PUSH2 0x197C PUSH2 0x26 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH2 0x19 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x35 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6F83188E EQ PUSH2 0x3A JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4D PUSH2 0x48 CALLDATASIZE PUSH1 0x4 PUSH2 0x13FE JUMP JUMPDEST PUSH2 0x66 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x5D SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x16AA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x60 DUP1 DUP1 DUP1 PUSH1 0x0 PUSH2 0x7D DUP7 DUP3 PUSH4 0xFFFFFFFF PUSH2 0xBB0 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH32 0xDEDFC1F100000000000000000000000000000000000000000000000000000000 EQ ISZERO PUSH2 0xEE JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x11 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x626174636843616E63656C4F7264657273000000000000000000000000000000 DUP2 MSTORE POP SWAP5 POP PUSH2 0x686 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH32 0x9694A40200000000000000000000000000000000000000000000000000000000 EQ ISZERO PUSH2 0x15D JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xF DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x626174636846696C6C4F72646572730000000000000000000000000000000000 DUP2 MSTORE POP SWAP5 POP PUSH2 0x686 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH32 0x8EA8DFE400000000000000000000000000000000000000000000000000000000 EQ ISZERO PUSH2 0x1CC JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x16 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x626174636846696C6C4F72646572734E6F5468726F7700000000000000000000 DUP2 MSTORE POP SWAP5 POP PUSH2 0x686 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH32 0xBEEE2E1400000000000000000000000000000000000000000000000000000000 EQ ISZERO PUSH2 0x23B JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x15 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x626174636846696C6C4F724B696C6C4F72646572730000000000000000000000 DUP2 MSTORE POP SWAP5 POP PUSH2 0x686 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH32 0x2DA6298700000000000000000000000000000000000000000000000000000000 EQ ISZERO PUSH2 0x2AA JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xB DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x63616E63656C4F72646572000000000000000000000000000000000000000000 DUP2 MSTORE POP SWAP5 POP PUSH2 0x686 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH32 0x9B44D55600000000000000000000000000000000000000000000000000000000 EQ ISZERO PUSH2 0x319 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x9 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x66696C6C4F726465720000000000000000000000000000000000000000000000 DUP2 MSTORE POP SWAP5 POP PUSH2 0x686 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH32 0xE14B58C400000000000000000000000000000000000000000000000000000000 EQ ISZERO PUSH2 0x388 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xF DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x66696C6C4F724B696C6C4F726465720000000000000000000000000000000000 DUP2 MSTORE POP SWAP5 POP PUSH2 0x686 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH32 0x78D29AC100000000000000000000000000000000000000000000000000000000 EQ ISZERO PUSH2 0x3F7 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x16 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x6D61726B65744275794F72646572734E6F5468726F7700000000000000000000 DUP2 MSTORE POP SWAP5 POP PUSH2 0x686 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH32 0x369DA09900000000000000000000000000000000000000000000000000000000 EQ ISZERO PUSH2 0x466 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x17 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x6D61726B657453656C6C4F72646572734E6F5468726F77000000000000000000 DUP2 MSTORE POP SWAP5 POP PUSH2 0x686 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH32 0x8BC8EFB300000000000000000000000000000000000000000000000000000000 EQ ISZERO PUSH2 0x4D5 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x19 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x6D61726B65744275794F726465727346696C6C4F724B696C6C00000000000000 DUP2 MSTORE POP SWAP5 POP PUSH2 0x686 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH32 0xA6C3BF3300000000000000000000000000000000000000000000000000000000 EQ ISZERO PUSH2 0x544 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1A DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x6D61726B657453656C6C4F726465727346696C6C4F724B696C6C000000000000 DUP2 MSTORE POP SWAP5 POP PUSH2 0x686 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH32 0x88EC79FB00000000000000000000000000000000000000000000000000000000 EQ ISZERO PUSH2 0x5B3 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xB DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x6D617463684F7264657273000000000000000000000000000000000000000000 DUP2 MSTORE POP SWAP5 POP PUSH2 0x686 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH32 0x4F9559B100000000000000000000000000000000000000000000000000000000 EQ DUP1 PUSH2 0x614 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH32 0x2280C91000000000000000000000000000000000000000000000000000000000 EQ JUMPDEST ISZERO PUSH2 0x654 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x64B SWAP1 PUSH2 0x1867 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x64B SWAP1 PUSH2 0x1830 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH32 0xDEDFC1F100000000000000000000000000000000000000000000000000000000 EQ ISZERO PUSH2 0x72B JUMPI DUP6 MLOAD PUSH2 0x6CE SWAP1 DUP8 SWAP1 PUSH1 0x4 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xBF3 AND JUMP JUMPDEST DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x6E1 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1293 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 SWAP3 MSTORE SWAP2 SWAP6 POP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 SWAP3 MSTORE SWAP2 SWAP5 POP PUSH2 0x723 JUMP JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x70E JUMPI SWAP1 POP JUMPDEST POP SWAP2 POP PUSH2 0xBA8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH32 0xBEEE2E1400000000000000000000000000000000000000000000000000000000 EQ DUP1 PUSH2 0x78C JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH32 0x9694A40200000000000000000000000000000000000000000000000000000000 EQ JUMPDEST DUP1 PUSH2 0x7C0 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH32 0x8EA8DFE400000000000000000000000000000000000000000000000000000000 EQ JUMPDEST ISZERO PUSH2 0x7DA JUMPI PUSH2 0x7CE DUP7 PUSH2 0xC7A JUMP JUMPDEST SWAP2 SWAP6 POP SWAP4 POP SWAP2 POP PUSH2 0xBA8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH32 0x2DA6298700000000000000000000000000000000000000000000000000000000 EQ ISZERO PUSH2 0x8C2 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE SWAP1 DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x829 PUSH2 0xF47 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x821 JUMPI POP POP DUP7 MLOAD SWAP1 SWAP5 POP PUSH2 0x854 SWAP1 DUP8 SWAP1 PUSH1 0x4 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xBF3 AND JUMP JUMPDEST DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x867 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1475 JUMP JUMPDEST DUP5 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x874 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x6F5 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 SWAP3 MSTORE SWAP2 SWAP5 POP PUSH2 0x723 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH32 0xE14B58C400000000000000000000000000000000000000000000000000000000 EQ DUP1 PUSH2 0x923 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH32 0x9B44D55600000000000000000000000000000000000000000000000000000000 EQ JUMPDEST ISZERO PUSH2 0x931 JUMPI PUSH2 0x7CE DUP7 PUSH2 0xCB6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH32 0x78D29AC100000000000000000000000000000000000000000000000000000000 EQ DUP1 PUSH2 0x992 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH32 0x369DA09900000000000000000000000000000000000000000000000000000000 EQ JUMPDEST DUP1 PUSH2 0x9C6 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH32 0x8BC8EFB300000000000000000000000000000000000000000000000000000000 EQ JUMPDEST DUP1 PUSH2 0x9FA JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH32 0xA6C3BF3300000000000000000000000000000000000000000000000000000000 EQ JUMPDEST ISZERO PUSH2 0xA08 JUMPI PUSH2 0x7CE DUP7 PUSH2 0xDB0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH32 0x88EC79FB00000000000000000000000000000000000000000000000000000000 EQ ISZERO PUSH2 0xBA8 JUMPI PUSH2 0xA42 PUSH2 0xF47 JUMP JUMPDEST PUSH2 0xA4A PUSH2 0xF47 JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH2 0xA64 PUSH1 0x4 DUP12 MLOAD DUP13 PUSH2 0xBF3 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0xA77 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x14A8 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x2 DUP1 DUP3 MSTORE PUSH1 0x60 DUP3 ADD SWAP1 SWAP3 MSTORE SWAP5 SWAP9 POP SWAP3 SWAP7 POP SWAP1 SWAP5 POP SWAP3 POP DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0xA9F PUSH2 0xF47 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0xA97 JUMPI SWAP1 POP POP SWAP8 POP DUP4 DUP9 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xAC2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP3 DUP9 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0xADB JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x40 DUP1 MLOAD PUSH1 0x2 DUP1 DUP3 MSTORE PUSH1 0x60 DUP3 ADD SWAP1 SWAP3 MSTORE SWAP1 DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP POP SWAP7 POP DUP4 PUSH1 0xA0 ADD MLOAD DUP8 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xB1B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP3 PUSH1 0xA0 ADD MLOAD DUP8 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0xB39 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x40 DUP1 MLOAD PUSH1 0x2 DUP1 DUP3 MSTORE PUSH1 0x60 DUP3 ADD SWAP1 SWAP3 MSTORE SWAP1 DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0xB5A JUMPI SWAP1 POP POP SWAP6 POP DUP2 DUP7 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xB7F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP1 DUP7 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0xB98 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP POP POP POP POP JUMPDEST POP SWAP2 SWAP4 POP SWAP2 SWAP4 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x4 ADD DUP4 MLOAD LT ISZERO PUSH2 0xBD6 JUMPI PUSH2 0xBD6 PUSH2 0xBD1 PUSH1 0x3 DUP6 MLOAD DUP6 PUSH1 0x4 ADD PUSH2 0xE24 JUMP JUMPDEST PUSH2 0xE93 JUMP JUMPDEST POP PUSH1 0x20 DUP2 DUP4 ADD DUP2 ADD MLOAD SWAP2 ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 DUP4 GT ISZERO PUSH2 0xC0C JUMPI PUSH2 0xC0C PUSH2 0xBD1 PUSH1 0x0 DUP6 DUP6 PUSH2 0xE24 JUMP JUMPDEST DUP4 MLOAD DUP3 GT ISZERO PUSH2 0xC25 JUMPI PUSH2 0xC25 PUSH2 0xBD1 PUSH1 0x1 DUP5 DUP8 MLOAD PUSH2 0xE24 JUMP JUMPDEST DUP3 DUP3 SUB PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xC52 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH2 0xC73 PUSH2 0xC61 DUP3 PUSH2 0xE9B JUMP JUMPDEST DUP5 PUSH2 0xC6B DUP8 PUSH2 0xE9B JUMP JUMPDEST ADD DUP4 MLOAD PUSH2 0xEA1 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH1 0x60 PUSH2 0xC96 PUSH1 0x4 DUP6 MLOAD DUP7 PUSH2 0xBF3 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0xCA9 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x12CE JUMP JUMPDEST SWAP2 SWAP7 SWAP1 SWAP6 POP SWAP1 SWAP4 POP SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP2 DUP3 SWAP2 DUP3 SWAP2 DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0xCD9 PUSH2 0xF47 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0xCD1 JUMPI POP POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE SWAP2 SWAP5 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE SWAP2 SWAP4 POP DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0xD22 JUMPI POP POP DUP5 MLOAD SWAP1 SWAP2 POP PUSH2 0xD4F SWAP1 DUP6 SWAP1 PUSH1 0x4 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xBF3 AND JUMP JUMPDEST DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0xD62 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1550 JUMP JUMPDEST DUP6 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xD6F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP6 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xD83 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP6 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xD97 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP2 SWAP1 MSTORE MSTORE SWAP2 SWAP4 SWAP1 SWAP3 POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP2 DUP3 SWAP2 DUP3 SWAP2 PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP1 CODESIZE DUP4 CODECOPY POP POP DUP6 MLOAD SWAP2 SWAP4 POP PUSH2 0xDEC SWAP2 DUP7 SWAP2 POP PUSH1 0x4 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xBF3 AND JUMP JUMPDEST DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0xDFF SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x13AB JUMP JUMPDEST DUP5 MLOAD DUP6 SWAP1 PUSH1 0x0 SWAP1 PUSH2 0xE0C JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 SWAP6 SWAP3 SWAP5 POP SWAP3 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH4 0x28006595 PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xE43 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1688 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xECB JUMPI PUSH1 0x1 DUP2 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP4 MLOAD AND DUP2 DUP6 MLOAD AND DUP1 DUP3 OR DUP7 MSTORE POP POP POP PUSH2 0xF42 JUMP JUMPDEST DUP3 DUP3 EQ ISZERO PUSH2 0xED8 JUMPI PUSH2 0xF42 JUMP JUMPDEST DUP3 DUP3 GT ISZERO PUSH2 0xF12 JUMPI PUSH1 0x20 DUP2 SUB SWAP1 POP DUP1 DUP3 ADD DUP2 DUP5 ADD DUP2 MLOAD JUMPDEST DUP3 DUP6 LT ISZERO PUSH2 0xF0A JUMPI DUP5 MLOAD DUP7 MSTORE PUSH1 0x20 SWAP6 DUP7 ADD SWAP6 SWAP1 SWAP5 ADD SWAP4 PUSH2 0xEEF JUMP JUMPDEST SWAP1 MSTORE POP PUSH2 0xF42 JUMP JUMPDEST PUSH1 0x20 DUP2 SUB SWAP1 POP DUP1 DUP3 ADD DUP2 DUP5 ADD DUP4 MLOAD JUMPDEST DUP2 DUP7 SLT ISZERO PUSH2 0xF3D JUMPI DUP3 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP3 DUP4 ADD SWAP3 SWAP1 SWAP2 ADD SWAP1 PUSH2 0xF21 JUMP JUMPDEST DUP6 MSTORE POP POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x1C0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xBED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1042 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x1055 PUSH2 0x1050 DUP3 PUSH2 0x18C5 JUMP JUMPDEST PUSH2 0x189E JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 ADD PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1092 JUMPI PUSH2 0x107D DUP8 PUSH1 0x20 DUP5 MLOAD DUP10 ADD ADD PUSH2 0x10F7 JUMP JUMPDEST DUP4 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x1065 JUMP JUMPDEST POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x10AC JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x10BA PUSH2 0x1050 DUP3 PUSH2 0x18C5 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 ADD PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1092 JUMPI PUSH2 0x10E2 DUP8 PUSH1 0x20 DUP5 MLOAD DUP10 ADD ADD PUSH2 0x1144 JUMP JUMPDEST DUP4 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x10CA JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1107 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x1115 PUSH2 0x1050 DUP3 PUSH2 0x18E5 JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x112C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x113D DUP2 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x1909 JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C0 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1157 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x1160 DUP2 PUSH2 0x189E JUMP JUMPDEST SWAP2 POP POP PUSH2 0x116D DUP4 DUP4 PUSH2 0x100E JUMP JUMPDEST DUP2 MSTORE PUSH2 0x117C DUP4 PUSH1 0x20 DUP5 ADD PUSH2 0x100E JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x118E DUP4 PUSH1 0x40 DUP5 ADD PUSH2 0x100E JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x11A0 DUP4 PUSH1 0x60 DUP5 ADD PUSH2 0x100E JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP3 ADD MLOAD PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 DUP3 ADD MLOAD PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 DUP3 ADD MLOAD PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0xE0 DUP3 ADD MLOAD PUSH1 0xE0 DUP3 ADD MSTORE PUSH2 0x100 DUP1 DUP4 ADD MLOAD DUP2 DUP4 ADD MSTORE POP PUSH2 0x120 DUP1 DUP4 ADD MLOAD DUP2 DUP4 ADD MSTORE POP PUSH2 0x140 DUP1 DUP4 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1202 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x120E DUP7 DUP4 DUP8 ADD PUSH2 0x10F7 JUMP JUMPDEST DUP4 DUP6 ADD MSTORE PUSH2 0x160 SWAP3 POP DUP3 DUP6 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x122A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1236 DUP7 DUP4 DUP8 ADD PUSH2 0x10F7 JUMP JUMPDEST DUP4 DUP6 ADD MSTORE PUSH2 0x180 SWAP3 POP DUP3 DUP6 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1252 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x125E DUP7 DUP4 DUP8 ADD PUSH2 0x10F7 JUMP JUMPDEST DUP4 DUP6 ADD MSTORE PUSH2 0x1A0 SWAP3 POP DUP3 DUP6 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x127A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1287 DUP6 DUP3 DUP7 ADD PUSH2 0x10F7 JUMP JUMPDEST DUP3 DUP5 ADD MSTORE POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x12A4 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x12BA JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x12C6 DUP5 DUP3 DUP6 ADD PUSH2 0x109C JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x12E2 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP4 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x12F9 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x1305 DUP8 DUP4 DUP9 ADD PUSH2 0x109C JUMP JUMPDEST SWAP5 POP PUSH1 0x20 SWAP2 POP DUP2 DUP7 ADD MLOAD DUP2 DUP2 GT ISZERO PUSH2 0x131B JUMPI DUP5 DUP6 REVERT JUMPDEST DUP1 DUP8 ADD DUP9 PUSH1 0x1F DUP3 ADD SLT PUSH2 0x132C JUMPI DUP6 DUP7 REVERT JUMPDEST DUP1 MLOAD SWAP2 POP PUSH2 0x133C PUSH2 0x1050 DUP4 PUSH2 0x18C5 JUMP JUMPDEST DUP3 DUP2 MSTORE DUP5 DUP2 ADD SWAP1 DUP3 DUP7 ADD DUP7 DUP6 MUL DUP5 ADD DUP8 ADD DUP13 LT ISZERO PUSH2 0x1358 JUMPI DUP9 DUP10 REVERT JUMPDEST DUP9 SWAP4 POP JUMPDEST DUP5 DUP5 LT ISZERO PUSH2 0x137A JUMPI DUP1 MLOAD DUP4 MSTORE PUSH1 0x1 SWAP4 SWAP1 SWAP4 ADD SWAP3 SWAP2 DUP7 ADD SWAP2 DUP7 ADD PUSH2 0x135C JUMP JUMPDEST POP PUSH1 0x40 DUP11 ADD MLOAD SWAP1 SWAP8 POP SWAP5 POP POP POP POP DUP1 DUP3 GT ISZERO PUSH2 0x1394 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x13A1 DUP7 DUP3 DUP8 ADD PUSH2 0x1032 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x13BF JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x13D6 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x13E2 DUP8 DUP4 DUP9 ADD PUSH2 0x109C JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD MLOAD SWAP4 POP PUSH1 0x40 DUP7 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1394 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x140F JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1425 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP1 DUP4 ADD DUP5 PUSH1 0x1F DUP3 ADD SLT PUSH2 0x1436 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP2 POP PUSH2 0x1446 PUSH2 0x1050 DUP4 PUSH2 0x18E5 JUMP JUMPDEST DUP3 DUP2 MSTORE DUP6 PUSH1 0x20 DUP5 DUP5 ADD ADD GT ISZERO PUSH2 0x145A JUMPI DUP4 DUP5 REVERT JUMPDEST DUP3 PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY SWAP2 DUP3 ADD PUSH1 0x20 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1486 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x149C JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x12C6 DUP5 DUP3 DUP6 ADD PUSH2 0x1144 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x14BD JUMPI DUP1 DUP2 REVERT JUMPDEST DUP5 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x14D4 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x14E0 DUP9 DUP4 DUP10 ADD PUSH2 0x1144 JUMP JUMPDEST SWAP6 POP PUSH1 0x20 DUP8 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x14F5 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x1501 DUP9 DUP4 DUP10 ADD PUSH2 0x1144 JUMP JUMPDEST SWAP5 POP PUSH1 0x40 DUP8 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1516 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x1522 DUP9 DUP4 DUP10 ADD PUSH2 0x10F7 JUMP JUMPDEST SWAP4 POP PUSH1 0x60 DUP8 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1537 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x1544 DUP8 DUP3 DUP9 ADD PUSH2 0x10F7 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1564 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x157B JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x1587 DUP8 DUP4 DUP9 ADD PUSH2 0x1144 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD MLOAD SWAP4 POP PUSH1 0x40 DUP7 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x15A3 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x13A1 DUP7 DUP3 DUP8 ADD PUSH2 0x10F7 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP5 ADD DUP1 DUP2 SWAP6 POP PUSH1 0x20 DUP4 MUL DUP2 ADD SWAP2 POP PUSH1 0x20 DUP6 ADD DUP5 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x1615 JUMPI DUP3 DUP5 SUB DUP9 MSTORE PUSH2 0x15FF DUP5 DUP4 MLOAD PUSH2 0x165C JUMP JUMPDEST PUSH1 0x20 SWAP9 DUP10 ADD SWAP9 SWAP1 SWAP5 POP SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x15E7 JUMP JUMPDEST POP SWAP2 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x20 DUP4 ADD DUP3 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x1652 JUMPI DUP2 MLOAD DUP7 MSTORE PUSH1 0x20 SWAP6 DUP7 ADD SWAP6 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x1634 JUMP JUMPDEST POP SWAP4 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x1674 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x1909 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH1 0x8 DUP6 LT PUSH2 0x1696 JUMPI INVALID JUMPDEST SWAP4 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 MSTORE PUSH2 0x16BD PUSH1 0x80 DUP4 ADD DUP8 PUSH2 0x165C JUMP JUMPDEST PUSH1 0x20 DUP4 DUP3 SUB DUP2 DUP6 ADD MSTORE DUP2 DUP8 MLOAD DUP1 DUP5 MSTORE DUP3 DUP5 ADD SWAP2 POP DUP3 DUP4 DUP3 MUL DUP6 ADD ADD DUP4 DUP11 ADD DUP7 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x17F9 JUMPI PUSH1 0x1F NOT DUP8 DUP5 SUB ADD DUP6 MSTORE DUP2 MLOAD PUSH2 0x1C0 PUSH2 0x16FE DUP6 DUP4 MLOAD PUSH2 0x15B0 JUMP JUMPDEST DUP8 DUP3 ADD MLOAD PUSH2 0x170E DUP10 DUP8 ADD DUP3 PUSH2 0x15B0 JUMP JUMPDEST POP PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0x1721 PUSH1 0x40 DUP8 ADD DUP3 PUSH2 0x15B0 JUMP JUMPDEST POP PUSH1 0x60 DUP3 ADD MLOAD PUSH2 0x1734 PUSH1 0x60 DUP8 ADD DUP3 PUSH2 0x15B0 JUMP JUMPDEST POP PUSH1 0x80 DUP3 ADD MLOAD PUSH1 0x80 DUP7 ADD MSTORE PUSH1 0xA0 DUP3 ADD MLOAD PUSH1 0xA0 DUP7 ADD MSTORE PUSH1 0xC0 DUP3 ADD MLOAD PUSH1 0xC0 DUP7 ADD MSTORE PUSH1 0xE0 DUP3 ADD MLOAD PUSH1 0xE0 DUP7 ADD MSTORE PUSH2 0x100 DUP1 DUP4 ADD MLOAD DUP2 DUP8 ADD MSTORE POP PUSH2 0x120 DUP1 DUP4 ADD MLOAD DUP2 DUP8 ADD MSTORE POP PUSH2 0x140 DUP1 DUP4 ADD MLOAD DUP3 DUP3 DUP9 ADD MSTORE PUSH2 0x178D DUP4 DUP9 ADD DUP3 PUSH2 0x165C JUMP JUMPDEST SWAP2 POP POP PUSH2 0x160 SWAP2 POP DUP2 DUP4 ADD MLOAD DUP7 DUP3 SUB DUP4 DUP9 ADD MSTORE PUSH2 0x17AA DUP3 DUP3 PUSH2 0x165C JUMP JUMPDEST SWAP3 POP POP POP PUSH2 0x180 DUP1 DUP4 ADD MLOAD DUP7 DUP4 SUB DUP3 DUP9 ADD MSTORE PUSH2 0x17C6 DUP4 DUP3 PUSH2 0x165C JUMP JUMPDEST SWAP2 POP POP PUSH2 0x1A0 SWAP2 POP DUP2 DUP4 ADD MLOAD DUP7 DUP3 SUB DUP4 DUP9 ADD MSTORE PUSH2 0x17E3 DUP3 DUP3 PUSH2 0x165C JUMP JUMPDEST SWAP9 DUP11 ADD SWAP9 SWAP7 POP POP POP SWAP3 DUP8 ADD SWAP3 POP POP PUSH1 0x1 ADD PUSH2 0x16DD JUMP JUMPDEST POP POP DUP7 DUP2 SUB PUSH1 0x40 DUP9 ADD MSTORE PUSH2 0x180D DUP2 DUP11 PUSH2 0x1621 JUMP JUMPDEST SWAP5 POP POP POP POP POP DUP3 DUP2 SUB PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0x1825 DUP2 DUP6 PUSH2 0x15CA JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x19 SWAP1 DUP3 ADD MSTORE PUSH32 0x554E4B4E4F574E5F46554E4354494F4E5F53454C4543544F5200000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xD SWAP1 DUP3 ADD MSTORE PUSH32 0x554E494D504C454D454E54454400000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x18BD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x18DB JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x18FB JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1924 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x190C JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x1933 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP INVALID LOG3 PUSH6 0x627A7A723158 KECCAK256 PUSH29 0x921E22E73D7F54CACAEE11F59AB7FAD6673673D4A1910A9D80EC584547 0xC EXTCODECOPY PUSH13 0x6578706572696D656E74616CF5 PUSH5 0x736F6C6343 STOP SDIV GT STOP BLOCKHASH ",
                "sourceMap": "836:7372:8:-;;132:2:-1;166:7;155:9;146:7;137:37;255:7;249:14;246:1;241:23;235:4;232:33;222:2;;269:9;222:2;293:9;290:1;283:20;323:4;314:7;306:22;347:7;338;331:24"
            },
            "deployedBytecode": {
                "linkReferences": {},
                "object": "",
                "opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x35 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6F83188E EQ PUSH2 0x3A JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4D PUSH2 0x48 CALLDATASIZE PUSH1 0x4 PUSH2 0x13FE JUMP JUMPDEST PUSH2 0x66 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x5D SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x16AA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x60 DUP1 DUP1 DUP1 PUSH1 0x0 PUSH2 0x7D DUP7 DUP3 PUSH4 0xFFFFFFFF PUSH2 0xBB0 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH32 0xDEDFC1F100000000000000000000000000000000000000000000000000000000 EQ ISZERO PUSH2 0xEE JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x11 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x626174636843616E63656C4F7264657273000000000000000000000000000000 DUP2 MSTORE POP SWAP5 POP PUSH2 0x686 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH32 0x9694A40200000000000000000000000000000000000000000000000000000000 EQ ISZERO PUSH2 0x15D JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xF DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x626174636846696C6C4F72646572730000000000000000000000000000000000 DUP2 MSTORE POP SWAP5 POP PUSH2 0x686 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH32 0x8EA8DFE400000000000000000000000000000000000000000000000000000000 EQ ISZERO PUSH2 0x1CC JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x16 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x626174636846696C6C4F72646572734E6F5468726F7700000000000000000000 DUP2 MSTORE POP SWAP5 POP PUSH2 0x686 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH32 0xBEEE2E1400000000000000000000000000000000000000000000000000000000 EQ ISZERO PUSH2 0x23B JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x15 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x626174636846696C6C4F724B696C6C4F72646572730000000000000000000000 DUP2 MSTORE POP SWAP5 POP PUSH2 0x686 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH32 0x2DA6298700000000000000000000000000000000000000000000000000000000 EQ ISZERO PUSH2 0x2AA JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xB DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x63616E63656C4F72646572000000000000000000000000000000000000000000 DUP2 MSTORE POP SWAP5 POP PUSH2 0x686 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH32 0x9B44D55600000000000000000000000000000000000000000000000000000000 EQ ISZERO PUSH2 0x319 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x9 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x66696C6C4F726465720000000000000000000000000000000000000000000000 DUP2 MSTORE POP SWAP5 POP PUSH2 0x686 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH32 0xE14B58C400000000000000000000000000000000000000000000000000000000 EQ ISZERO PUSH2 0x388 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xF DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x66696C6C4F724B696C6C4F726465720000000000000000000000000000000000 DUP2 MSTORE POP SWAP5 POP PUSH2 0x686 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH32 0x78D29AC100000000000000000000000000000000000000000000000000000000 EQ ISZERO PUSH2 0x3F7 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x16 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x6D61726B65744275794F72646572734E6F5468726F7700000000000000000000 DUP2 MSTORE POP SWAP5 POP PUSH2 0x686 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH32 0x369DA09900000000000000000000000000000000000000000000000000000000 EQ ISZERO PUSH2 0x466 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x17 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x6D61726B657453656C6C4F72646572734E6F5468726F77000000000000000000 DUP2 MSTORE POP SWAP5 POP PUSH2 0x686 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH32 0x8BC8EFB300000000000000000000000000000000000000000000000000000000 EQ ISZERO PUSH2 0x4D5 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x19 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x6D61726B65744275794F726465727346696C6C4F724B696C6C00000000000000 DUP2 MSTORE POP SWAP5 POP PUSH2 0x686 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH32 0xA6C3BF3300000000000000000000000000000000000000000000000000000000 EQ ISZERO PUSH2 0x544 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1A DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x6D61726B657453656C6C4F726465727346696C6C4F724B696C6C000000000000 DUP2 MSTORE POP SWAP5 POP PUSH2 0x686 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH32 0x88EC79FB00000000000000000000000000000000000000000000000000000000 EQ ISZERO PUSH2 0x5B3 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xB DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x6D617463684F7264657273000000000000000000000000000000000000000000 DUP2 MSTORE POP SWAP5 POP PUSH2 0x686 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH32 0x4F9559B100000000000000000000000000000000000000000000000000000000 EQ DUP1 PUSH2 0x614 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH32 0x2280C91000000000000000000000000000000000000000000000000000000000 EQ JUMPDEST ISZERO PUSH2 0x654 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x64B SWAP1 PUSH2 0x1867 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x64B SWAP1 PUSH2 0x1830 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH32 0xDEDFC1F100000000000000000000000000000000000000000000000000000000 EQ ISZERO PUSH2 0x72B JUMPI DUP6 MLOAD PUSH2 0x6CE SWAP1 DUP8 SWAP1 PUSH1 0x4 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xBF3 AND JUMP JUMPDEST DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x6E1 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1293 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 SWAP3 MSTORE SWAP2 SWAP6 POP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 SWAP3 MSTORE SWAP2 SWAP5 POP PUSH2 0x723 JUMP JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x70E JUMPI SWAP1 POP JUMPDEST POP SWAP2 POP PUSH2 0xBA8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH32 0xBEEE2E1400000000000000000000000000000000000000000000000000000000 EQ DUP1 PUSH2 0x78C JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH32 0x9694A40200000000000000000000000000000000000000000000000000000000 EQ JUMPDEST DUP1 PUSH2 0x7C0 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH32 0x8EA8DFE400000000000000000000000000000000000000000000000000000000 EQ JUMPDEST ISZERO PUSH2 0x7DA JUMPI PUSH2 0x7CE DUP7 PUSH2 0xC7A JUMP JUMPDEST SWAP2 SWAP6 POP SWAP4 POP SWAP2 POP PUSH2 0xBA8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH32 0x2DA6298700000000000000000000000000000000000000000000000000000000 EQ ISZERO PUSH2 0x8C2 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE SWAP1 DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x829 PUSH2 0xF47 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x821 JUMPI POP POP DUP7 MLOAD SWAP1 SWAP5 POP PUSH2 0x854 SWAP1 DUP8 SWAP1 PUSH1 0x4 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xBF3 AND JUMP JUMPDEST DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x867 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1475 JUMP JUMPDEST DUP5 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x874 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x6F5 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 SWAP3 MSTORE SWAP2 SWAP5 POP PUSH2 0x723 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH32 0xE14B58C400000000000000000000000000000000000000000000000000000000 EQ DUP1 PUSH2 0x923 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH32 0x9B44D55600000000000000000000000000000000000000000000000000000000 EQ JUMPDEST ISZERO PUSH2 0x931 JUMPI PUSH2 0x7CE DUP7 PUSH2 0xCB6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH32 0x78D29AC100000000000000000000000000000000000000000000000000000000 EQ DUP1 PUSH2 0x992 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH32 0x369DA09900000000000000000000000000000000000000000000000000000000 EQ JUMPDEST DUP1 PUSH2 0x9C6 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH32 0x8BC8EFB300000000000000000000000000000000000000000000000000000000 EQ JUMPDEST DUP1 PUSH2 0x9FA JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH32 0xA6C3BF3300000000000000000000000000000000000000000000000000000000 EQ JUMPDEST ISZERO PUSH2 0xA08 JUMPI PUSH2 0x7CE DUP7 PUSH2 0xDB0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH32 0x88EC79FB00000000000000000000000000000000000000000000000000000000 EQ ISZERO PUSH2 0xBA8 JUMPI PUSH2 0xA42 PUSH2 0xF47 JUMP JUMPDEST PUSH2 0xA4A PUSH2 0xF47 JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH2 0xA64 PUSH1 0x4 DUP12 MLOAD DUP13 PUSH2 0xBF3 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0xA77 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x14A8 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x2 DUP1 DUP3 MSTORE PUSH1 0x60 DUP3 ADD SWAP1 SWAP3 MSTORE SWAP5 SWAP9 POP SWAP3 SWAP7 POP SWAP1 SWAP5 POP SWAP3 POP DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0xA9F PUSH2 0xF47 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0xA97 JUMPI SWAP1 POP POP SWAP8 POP DUP4 DUP9 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xAC2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP3 DUP9 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0xADB JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x40 DUP1 MLOAD PUSH1 0x2 DUP1 DUP3 MSTORE PUSH1 0x60 DUP3 ADD SWAP1 SWAP3 MSTORE SWAP1 DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP POP SWAP7 POP DUP4 PUSH1 0xA0 ADD MLOAD DUP8 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xB1B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP3 PUSH1 0xA0 ADD MLOAD DUP8 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0xB39 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x40 DUP1 MLOAD PUSH1 0x2 DUP1 DUP3 MSTORE PUSH1 0x60 DUP3 ADD SWAP1 SWAP3 MSTORE SWAP1 DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0xB5A JUMPI SWAP1 POP POP SWAP6 POP DUP2 DUP7 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xB7F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP1 DUP7 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0xB98 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP POP POP POP POP JUMPDEST POP SWAP2 SWAP4 POP SWAP2 SWAP4 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x4 ADD DUP4 MLOAD LT ISZERO PUSH2 0xBD6 JUMPI PUSH2 0xBD6 PUSH2 0xBD1 PUSH1 0x3 DUP6 MLOAD DUP6 PUSH1 0x4 ADD PUSH2 0xE24 JUMP JUMPDEST PUSH2 0xE93 JUMP JUMPDEST POP PUSH1 0x20 DUP2 DUP4 ADD DUP2 ADD MLOAD SWAP2 ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 DUP4 GT ISZERO PUSH2 0xC0C JUMPI PUSH2 0xC0C PUSH2 0xBD1 PUSH1 0x0 DUP6 DUP6 PUSH2 0xE24 JUMP JUMPDEST DUP4 MLOAD DUP3 GT ISZERO PUSH2 0xC25 JUMPI PUSH2 0xC25 PUSH2 0xBD1 PUSH1 0x1 DUP5 DUP8 MLOAD PUSH2 0xE24 JUMP JUMPDEST DUP3 DUP3 SUB PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xC52 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH2 0xC73 PUSH2 0xC61 DUP3 PUSH2 0xE9B JUMP JUMPDEST DUP5 PUSH2 0xC6B DUP8 PUSH2 0xE9B JUMP JUMPDEST ADD DUP4 MLOAD PUSH2 0xEA1 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH1 0x60 PUSH2 0xC96 PUSH1 0x4 DUP6 MLOAD DUP7 PUSH2 0xBF3 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0xCA9 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x12CE JUMP JUMPDEST SWAP2 SWAP7 SWAP1 SWAP6 POP SWAP1 SWAP4 POP SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP2 DUP3 SWAP2 DUP3 SWAP2 DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0xCD9 PUSH2 0xF47 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0xCD1 JUMPI POP POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE SWAP2 SWAP5 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE SWAP2 SWAP4 POP DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0xD22 JUMPI POP POP DUP5 MLOAD SWAP1 SWAP2 POP PUSH2 0xD4F SWAP1 DUP6 SWAP1 PUSH1 0x4 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xBF3 AND JUMP JUMPDEST DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0xD62 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1550 JUMP JUMPDEST DUP6 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xD6F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP6 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xD83 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP6 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xD97 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP2 SWAP1 MSTORE MSTORE SWAP2 SWAP4 SWAP1 SWAP3 POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP2 DUP3 SWAP2 DUP3 SWAP2 PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP1 CODESIZE DUP4 CODECOPY POP POP DUP6 MLOAD SWAP2 SWAP4 POP PUSH2 0xDEC SWAP2 DUP7 SWAP2 POP PUSH1 0x4 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xBF3 AND JUMP JUMPDEST DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0xDFF SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x13AB JUMP JUMPDEST DUP5 MLOAD DUP6 SWAP1 PUSH1 0x0 SWAP1 PUSH2 0xE0C JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 SWAP6 SWAP3 SWAP5 POP SWAP3 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH4 0x28006595 PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xE43 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1688 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xECB JUMPI PUSH1 0x1 DUP2 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP4 MLOAD AND DUP2 DUP6 MLOAD AND DUP1 DUP3 OR DUP7 MSTORE POP POP POP PUSH2 0xF42 JUMP JUMPDEST DUP3 DUP3 EQ ISZERO PUSH2 0xED8 JUMPI PUSH2 0xF42 JUMP JUMPDEST DUP3 DUP3 GT ISZERO PUSH2 0xF12 JUMPI PUSH1 0x20 DUP2 SUB SWAP1 POP DUP1 DUP3 ADD DUP2 DUP5 ADD DUP2 MLOAD JUMPDEST DUP3 DUP6 LT ISZERO PUSH2 0xF0A JUMPI DUP5 MLOAD DUP7 MSTORE PUSH1 0x20 SWAP6 DUP7 ADD SWAP6 SWAP1 SWAP5 ADD SWAP4 PUSH2 0xEEF JUMP JUMPDEST SWAP1 MSTORE POP PUSH2 0xF42 JUMP JUMPDEST PUSH1 0x20 DUP2 SUB SWAP1 POP DUP1 DUP3 ADD DUP2 DUP5 ADD DUP4 MLOAD JUMPDEST DUP2 DUP7 SLT ISZERO PUSH2 0xF3D JUMPI DUP3 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP3 DUP4 ADD SWAP3 SWAP1 SWAP2 ADD SWAP1 PUSH2 0xF21 JUMP JUMPDEST DUP6 MSTORE POP POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x1C0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xBED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1042 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x1055 PUSH2 0x1050 DUP3 PUSH2 0x18C5 JUMP JUMPDEST PUSH2 0x189E JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 ADD PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1092 JUMPI PUSH2 0x107D DUP8 PUSH1 0x20 DUP5 MLOAD DUP10 ADD ADD PUSH2 0x10F7 JUMP JUMPDEST DUP4 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x1065 JUMP JUMPDEST POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x10AC JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x10BA PUSH2 0x1050 DUP3 PUSH2 0x18C5 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 ADD PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1092 JUMPI PUSH2 0x10E2 DUP8 PUSH1 0x20 DUP5 MLOAD DUP10 ADD ADD PUSH2 0x1144 JUMP JUMPDEST DUP4 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x10CA JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1107 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x1115 PUSH2 0x1050 DUP3 PUSH2 0x18E5 JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x112C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x113D DUP2 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x1909 JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C0 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1157 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x1160 DUP2 PUSH2 0x189E JUMP JUMPDEST SWAP2 POP POP PUSH2 0x116D DUP4 DUP4 PUSH2 0x100E JUMP JUMPDEST DUP2 MSTORE PUSH2 0x117C DUP4 PUSH1 0x20 DUP5 ADD PUSH2 0x100E JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x118E DUP4 PUSH1 0x40 DUP5 ADD PUSH2 0x100E JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x11A0 DUP4 PUSH1 0x60 DUP5 ADD PUSH2 0x100E JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP3 ADD MLOAD PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 DUP3 ADD MLOAD PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 DUP3 ADD MLOAD PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0xE0 DUP3 ADD MLOAD PUSH1 0xE0 DUP3 ADD MSTORE PUSH2 0x100 DUP1 DUP4 ADD MLOAD DUP2 DUP4 ADD MSTORE POP PUSH2 0x120 DUP1 DUP4 ADD MLOAD DUP2 DUP4 ADD MSTORE POP PUSH2 0x140 DUP1 DUP4 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1202 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x120E DUP7 DUP4 DUP8 ADD PUSH2 0x10F7 JUMP JUMPDEST DUP4 DUP6 ADD MSTORE PUSH2 0x160 SWAP3 POP DUP3 DUP6 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x122A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1236 DUP7 DUP4 DUP8 ADD PUSH2 0x10F7 JUMP JUMPDEST DUP4 DUP6 ADD MSTORE PUSH2 0x180 SWAP3 POP DUP3 DUP6 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1252 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x125E DUP7 DUP4 DUP8 ADD PUSH2 0x10F7 JUMP JUMPDEST DUP4 DUP6 ADD MSTORE PUSH2 0x1A0 SWAP3 POP DUP3 DUP6 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x127A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1287 DUP6 DUP3 DUP7 ADD PUSH2 0x10F7 JUMP JUMPDEST DUP3 DUP5 ADD MSTORE POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x12A4 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x12BA JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x12C6 DUP5 DUP3 DUP6 ADD PUSH2 0x109C JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x12E2 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP4 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x12F9 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x1305 DUP8 DUP4 DUP9 ADD PUSH2 0x109C JUMP JUMPDEST SWAP5 POP PUSH1 0x20 SWAP2 POP DUP2 DUP7 ADD MLOAD DUP2 DUP2 GT ISZERO PUSH2 0x131B JUMPI DUP5 DUP6 REVERT JUMPDEST DUP1 DUP8 ADD DUP9 PUSH1 0x1F DUP3 ADD SLT PUSH2 0x132C JUMPI DUP6 DUP7 REVERT JUMPDEST DUP1 MLOAD SWAP2 POP PUSH2 0x133C PUSH2 0x1050 DUP4 PUSH2 0x18C5 JUMP JUMPDEST DUP3 DUP2 MSTORE DUP5 DUP2 ADD SWAP1 DUP3 DUP7 ADD DUP7 DUP6 MUL DUP5 ADD DUP8 ADD DUP13 LT ISZERO PUSH2 0x1358 JUMPI DUP9 DUP10 REVERT JUMPDEST DUP9 SWAP4 POP JUMPDEST DUP5 DUP5 LT ISZERO PUSH2 0x137A JUMPI DUP1 MLOAD DUP4 MSTORE PUSH1 0x1 SWAP4 SWAP1 SWAP4 ADD SWAP3 SWAP2 DUP7 ADD SWAP2 DUP7 ADD PUSH2 0x135C JUMP JUMPDEST POP PUSH1 0x40 DUP11 ADD MLOAD SWAP1 SWAP8 POP SWAP5 POP POP POP POP DUP1 DUP3 GT ISZERO PUSH2 0x1394 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x13A1 DUP7 DUP3 DUP8 ADD PUSH2 0x1032 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x13BF JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x13D6 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x13E2 DUP8 DUP4 DUP9 ADD PUSH2 0x109C JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD MLOAD SWAP4 POP PUSH1 0x40 DUP7 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1394 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x140F JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1425 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP1 DUP4 ADD DUP5 PUSH1 0x1F DUP3 ADD SLT PUSH2 0x1436 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP2 POP PUSH2 0x1446 PUSH2 0x1050 DUP4 PUSH2 0x18E5 JUMP JUMPDEST DUP3 DUP2 MSTORE DUP6 PUSH1 0x20 DUP5 DUP5 ADD ADD GT ISZERO PUSH2 0x145A JUMPI DUP4 DUP5 REVERT JUMPDEST DUP3 PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY SWAP2 DUP3 ADD PUSH1 0x20 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1486 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x149C JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x12C6 DUP5 DUP3 DUP6 ADD PUSH2 0x1144 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x14BD JUMPI DUP1 DUP2 REVERT JUMPDEST DUP5 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x14D4 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x14E0 DUP9 DUP4 DUP10 ADD PUSH2 0x1144 JUMP JUMPDEST SWAP6 POP PUSH1 0x20 DUP8 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x14F5 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x1501 DUP9 DUP4 DUP10 ADD PUSH2 0x1144 JUMP JUMPDEST SWAP5 POP PUSH1 0x40 DUP8 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1516 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x1522 DUP9 DUP4 DUP10 ADD PUSH2 0x10F7 JUMP JUMPDEST SWAP4 POP PUSH1 0x60 DUP8 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1537 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x1544 DUP8 DUP3 DUP9 ADD PUSH2 0x10F7 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1564 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x157B JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x1587 DUP8 DUP4 DUP9 ADD PUSH2 0x1144 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD MLOAD SWAP4 POP PUSH1 0x40 DUP7 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x15A3 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x13A1 DUP7 DUP3 DUP8 ADD PUSH2 0x10F7 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP5 ADD DUP1 DUP2 SWAP6 POP PUSH1 0x20 DUP4 MUL DUP2 ADD SWAP2 POP PUSH1 0x20 DUP6 ADD DUP5 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x1615 JUMPI DUP3 DUP5 SUB DUP9 MSTORE PUSH2 0x15FF DUP5 DUP4 MLOAD PUSH2 0x165C JUMP JUMPDEST PUSH1 0x20 SWAP9 DUP10 ADD SWAP9 SWAP1 SWAP5 POP SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x15E7 JUMP JUMPDEST POP SWAP2 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x20 DUP4 ADD DUP3 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x1652 JUMPI DUP2 MLOAD DUP7 MSTORE PUSH1 0x20 SWAP6 DUP7 ADD SWAP6 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x1634 JUMP JUMPDEST POP SWAP4 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x1674 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x1909 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH1 0x8 DUP6 LT PUSH2 0x1696 JUMPI INVALID JUMPDEST SWAP4 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 MSTORE PUSH2 0x16BD PUSH1 0x80 DUP4 ADD DUP8 PUSH2 0x165C JUMP JUMPDEST PUSH1 0x20 DUP4 DUP3 SUB DUP2 DUP6 ADD MSTORE DUP2 DUP8 MLOAD DUP1 DUP5 MSTORE DUP3 DUP5 ADD SWAP2 POP DUP3 DUP4 DUP3 MUL DUP6 ADD ADD DUP4 DUP11 ADD DUP7 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x17F9 JUMPI PUSH1 0x1F NOT DUP8 DUP5 SUB ADD DUP6 MSTORE DUP2 MLOAD PUSH2 0x1C0 PUSH2 0x16FE DUP6 DUP4 MLOAD PUSH2 0x15B0 JUMP JUMPDEST DUP8 DUP3 ADD MLOAD PUSH2 0x170E DUP10 DUP8 ADD DUP3 PUSH2 0x15B0 JUMP JUMPDEST POP PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0x1721 PUSH1 0x40 DUP8 ADD DUP3 PUSH2 0x15B0 JUMP JUMPDEST POP PUSH1 0x60 DUP3 ADD MLOAD PUSH2 0x1734 PUSH1 0x60 DUP8 ADD DUP3 PUSH2 0x15B0 JUMP JUMPDEST POP PUSH1 0x80 DUP3 ADD MLOAD PUSH1 0x80 DUP7 ADD MSTORE PUSH1 0xA0 DUP3 ADD MLOAD PUSH1 0xA0 DUP7 ADD MSTORE PUSH1 0xC0 DUP3 ADD MLOAD PUSH1 0xC0 DUP7 ADD MSTORE PUSH1 0xE0 DUP3 ADD MLOAD PUSH1 0xE0 DUP7 ADD MSTORE PUSH2 0x100 DUP1 DUP4 ADD MLOAD DUP2 DUP8 ADD MSTORE POP PUSH2 0x120 DUP1 DUP4 ADD MLOAD DUP2 DUP8 ADD MSTORE POP PUSH2 0x140 DUP1 DUP4 ADD MLOAD DUP3 DUP3 DUP9 ADD MSTORE PUSH2 0x178D DUP4 DUP9 ADD DUP3 PUSH2 0x165C JUMP JUMPDEST SWAP2 POP POP PUSH2 0x160 SWAP2 POP DUP2 DUP4 ADD MLOAD DUP7 DUP3 SUB DUP4 DUP9 ADD MSTORE PUSH2 0x17AA DUP3 DUP3 PUSH2 0x165C JUMP JUMPDEST SWAP3 POP POP POP PUSH2 0x180 DUP1 DUP4 ADD MLOAD DUP7 DUP4 SUB DUP3 DUP9 ADD MSTORE PUSH2 0x17C6 DUP4 DUP3 PUSH2 0x165C JUMP JUMPDEST SWAP2 POP POP PUSH2 0x1A0 SWAP2 POP DUP2 DUP4 ADD MLOAD DUP7 DUP3 SUB DUP4 DUP9 ADD MSTORE PUSH2 0x17E3 DUP3 DUP3 PUSH2 0x165C JUMP JUMPDEST SWAP9 DUP11 ADD SWAP9 SWAP7 POP POP POP SWAP3 DUP8 ADD SWAP3 POP POP PUSH1 0x1 ADD PUSH2 0x16DD JUMP JUMPDEST POP POP DUP7 DUP2 SUB PUSH1 0x40 DUP9 ADD MSTORE PUSH2 0x180D DUP2 DUP11 PUSH2 0x1621 JUMP JUMPDEST SWAP5 POP POP POP POP POP DUP3 DUP2 SUB PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0x1825 DUP2 DUP6 PUSH2 0x15CA JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x19 SWAP1 DUP3 ADD MSTORE PUSH32 0x554E4B4E4F574E5F46554E4354494F4E5F53454C4543544F5200000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xD SWAP1 DUP3 ADD MSTORE PUSH32 0x554E494D504C454D454E54454400000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x18BD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x18DB JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x18FB JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1924 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x190C JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x1933 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP INVALID LOG3 PUSH6 0x627A7A723158 KECCAK256 PUSH29 0x921E22E73D7F54CACAEE11F59AB7FAD6673673D4A1910A9D80EC584547 0xC EXTCODECOPY PUSH13 0x6578706572696D656E74616CF5 PUSH5 0x736F6C6343 STOP SDIV GT STOP BLOCKHASH ",
                "sourceMap": "836:7372:8:-;;;;;;;;;;;;;;;;;;;;;;;;1261:5129;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;1385:26;;;;1571:23;1597:29;:15;1571:23;1597:29;:26;:29;:::i;:::-;1571:55;-1:-1:-1;;;;;;;1641:68:8;;1661:48;1641:68;1637:1988;;;1725:34;;;;;;;;;;;;;;;;;;;1637:1988;;;-1:-1:-1;;;;;;1780:66:8;;1800:46;1780:66;1776:1849;;;1862:32;;;;;;;;;;;;;;;;;;;1776:1849;;;-1:-1:-1;;;;;;1915:73:8;;1935:53;1915:73;1911:1714;;;2004:39;;;;;;;;;;;;;;;;;;;1911:1714;;;-1:-1:-1;;;;;;2064:72:8;;2084:52;2064:72;2060:1565;;;2152:38;;;;;;;;;;;;;;;;;;;2060:1565;;;-1:-1:-1;;;;;;2211:62:8;;2231:42;2211:62;2207:1418;;;2289:28;;;;;;;;;;;;;;;;;;;2207:1418;;;-1:-1:-1;;;;;;2338:60:8;;2358:40;2338:60;2334:1291;;;2414:26;;;;;;;;;;;;;;;;;;;2334:1291;;;-1:-1:-1;;;;;;2461:66:8;;2481:46;2461:66;2457:1168;;;2543:32;;;;;;;;;;;;;;;;;;;2457:1168;;;-1:-1:-1;;;;;;2596:73:8;;2616:53;2596:73;2592:1033;;;2685:39;;;;;;;;;;;;;;;;;;;2592:1033;;;-1:-1:-1;;;;;;2745:74:8;;2765:54;2745:74;2741:884;;;2835:40;;;;;;;;;;;;;;;;;;;2741:884;;;-1:-1:-1;;;;;;2896:76:8;;2916:56;2896:76;2892:733;;;2988:42;;;;;;;;;;;;;;;;;;;2892:733;;;-1:-1:-1;;;;;;3051:77:8;;3071:57;3051:77;3047:578;;;3144:43;;;;;;;;;;;;;;;;;;;3047:578;;;-1:-1:-1;;;;;;3208:62:8;;3228:42;3208:62;3204:421;;;3286:28;;;;;;;;;;;;;;;;;;;3204:421;;;-1:-1:-1;;;;;;3348:67:8;;3368:47;3348:67;;:152;;-1:-1:-1;;;;;;;3431:69:8;;3451:49;3431:69;3348:152;3331:294;;;3525:23;;;;;;;;;;;;;;;;;;;3331:294;3579:35;;;;;;;;;;;3331:294;-1:-1:-1;;;;;;3639:68:8;;3659:48;3639:68;3635:2749;;;3816:22;;3791:48;;3816:15;;3813:1;;3791:48;:21;:48;:::i;:::-;3780:80;;;;;;;;;;;;;;3898:16;;;3912:1;3898:16;;;;;;;;;3771:89;;-1:-1:-1;3898:16:8;-1:-1:-1;3941:14:8;;;3953:1;3941:14;;;;;;;;;3874:40;;-1:-1:-1;3941:14:8;;;;;;;;;;;;;;;;;;;;3928:27;;3635:2749;;;-1:-1:-1;;;;;;3989:72:8;;4009:52;3989:72;;:154;;-1:-1:-1;;;;;;;4077:66:8;;4097:46;4077:66;3989:154;:243;;;-1:-1:-1;;;;;;;4159:73:8;;4179:53;4159:73;3989:243;3972:2412;;;4303:46;4333:15;4303:29;:46::i;:::-;4257:92;;-1:-1:-1;4257:92:8;-1:-1:-1;4257:92:8;-1:-1:-1;3972:2412:8;;;-1:-1:-1;;;;;;4370:62:8;;4390:42;4370:62;4366:2018;;;4457:23;;;4478:1;4457:23;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;-1:-1:-1;;4542:22:8;;4448:32;;-1:-1:-1;4517:48:8;;4542:15;;4539:1;;4517:48;:21;:48;:::i;:::-;4506:78;;;;;;;;;;;;;;4494:6;4501:1;4494:9;;;;;;;;;;;;;:90;;;;4636:1;4622:16;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;;4665:14:8;;;4677:1;4665:14;;;;;;;;;4598:40;;-1:-1:-1;4665:14:8;;4366:2018;-1:-1:-1;;;;;;4713:66:8;;4733:46;4713:66;;:142;;-1:-1:-1;;;;;;;4795:60:8;;4815:40;4795:60;4713:142;4696:1688;;;4926:52;4962:15;4926:35;:52::i;4696:1688::-;-1:-1:-1;;;;;;5012:73:8;;5032:53;5012:73;;:163;;-1:-1:-1;;;;;;;5101:74:8;;5121:54;5101:74;5012:163;:255;;;-1:-1:-1;;;;;;;5191:76:8;;5211:56;5191:76;5012:255;:348;;;-1:-1:-1;;;;;;;5283:77:8;;5303:57;5283:77;5012:348;4995:1389;;;5431:47;5462:15;5431:30;:47::i;4995:1389::-;-1:-1:-1;;;;;;5499:62:8;;5519:42;5499:62;5495:889;;;5595:31;;:::i;:::-;5644:32;;:::i;:::-;5694:26;5738:27;5810:48;5832:1;5835:15;:22;5810:15;:21;;:48;;;;;:::i;:::-;5782:154;;;;;;;;;;;;;;5960:23;;;5981:1;5960:23;;;;;;;;;5577:359;;-1:-1:-1;5577:359:8;;-1:-1:-1;5577:359:8;;-1:-1:-1;5577:359:8;-1:-1:-1;5960:23:8;;;;;;:::i;:::-;;;;;;;;;;;;;;;;5951:32;;6009:9;5997:6;6004:1;5997:9;;;;;;;;;;;;;:21;;;;6044:10;6032:6;6039:1;6032:9;;;;;;;;;;;;;;;;;:22;6093:16;;;6107:1;6093:16;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;6093:16:8;6069:40;;6150:9;:26;;;6123:21;6145:1;6123:24;;;;;;;;;;;;;:53;;;;;6217:10;:27;;;6190:21;6212:1;6190:24;;;;;;;;;;;;;;;;;:54;6272:14;;;6284:1;6272:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6259:27;;6316:13;6300:10;6311:1;6300:13;;;;;;;;;;;;;:29;;;;6359:14;6343:10;6354:1;6343:13;;;;;;;;;;;;;:30;;;;5495:889;;;;;1261:5129;;;;;;:::o;16814:871:41:-;16934:13;16978:5;16986:1;16978:9;16967:1;:8;:20;16963:290;;;17003:239;17025:216;17087:87;17192:1;:8;17218:5;17226:1;17218:9;17025:44;:216::i;:::-;17003:21;:239::i;:::-;-1:-1:-1;17329:2:41;17426:13;;;;;17420:20;17320:11;;;-1:-1:-1;;;;;;17567:79:41;16814:871;;;;;:::o;6475:1101::-;6609:19;6789:2;6782:4;:9;6778:261;;;6807:221;6829:198;6891:80;6989:4;7011:2;6829:44;:198::i;6807:221::-;7057:1;:8;7052:2;:13;7048:271;;;7081:227;7103:204;7165:82;7265:2;7285:1;:8;7103:44;:204::i;7081:227::-;7411:4;7406:2;:9;7396:20;;;;;;;;;;;;;;;;;;;;;;;;;21:6:-1;;104:10;7396:20:41;87:34:-1;135:17;;-1:-1;7396:20:41;;7387:29;;7426:120;7447:23;:6;:21;:23::i;:::-;7505:4;7484:18;:1;:16;:18::i;:::-;:25;7523:6;:13;7426:7;:120::i;:::-;6475:1101;;;;;:::o;7044:552:8:-;7171:30;7215:38;7267:25;7431:48;7453:1;7456:15;:22;7431:15;:21;;:48;;;;;:::i;:::-;7407:182;;;;;;;;;;;;;;7361:228;;;;-1:-1:-1;7361:228:8;;-1:-1:-1;7044:552:8;-1:-1:-1;;7044:552:8:o;6396:642::-;6684:23;;;6705:1;6684:23;;;;;;;;;6529:30;;;;;;6684:23;;;;;;:::i;:::-;;;;;;;;;;;;;-1:-1:-1;;6741:16:8;;;6755:1;6741:16;;;;;;;;;6675:32;;-1:-1:-1;6741:16:8;;;;;;105:10:-1;6741:16:8;88:34:-1;136:17;;-1:-1;;6780:14:8;;;6792:1;6780:14;;;;;;;;;6717:40;;-1:-1:-1;6780:14:8;;;;;;;;;;;;;;;;;-1:-1:-1;;6952:22:8;;6767:27;;-1:-1:-1;6927:48:8;;6952:15;;6949:1;;6927:48;:21;:48;:::i;:::-;6903:128;;;;;;;;;;;;;;6849:6;6856:1;6849:9;;;;;;;;;;;;;6860:21;6882:1;6860:24;;;;;;;;;;;;;6886:10;6897:1;6886:13;;;;;;;;;;;;;;;;;6848:183;;;;;;;;6396:642;;;;-1:-1:-1;6396:642:8:o;7602:604::-;7900:16;;;7914:1;7900:16;;;;;;;;;7730:30;;;;;;7900:16;;;;;;105:10:-1;7900:16:8;88:34:-1;-1:-1;;8068:22:8;;7876:40;;-1:-1:-1;8043:48:8;;8068:15;;-1:-1:-1;8065:1:8;;8043:48;:21;:48;:::i;:::-;8019:180;;;;;;;;;;;;;;7979:24;;:21;;8001:1;;7979:24;;;;;;;;;;;;;7970:229;;;;;;7602:604;;-1:-1:-1;7970:229:8;-1:-1:-1;;7602:604:8:o;1292:378:42:-;1480:12;1232:10;1551:37;;1602:9;1625:6;1645:8;1515:148;;;;;;;;;;;;;;;-1:-1:-1;;26:21;;;22:32;6:49;;1515:148:42;;;49:4:-1;25:18;;61:17;;1515:148:42;182:15:-1;-1:-1;;;;;;1515:148:42;;;179:29:-1;;;;160:49;;;1515:148:42;-1:-1:-1;1292:378:42;;;;;:::o;1511:170:44:-;1654:9;1648:16;1641:4;1630:9;1626:20;1619:46;1403:228:41;1582:2;1571:14;;1403:228::o;1870:4297::-;2020:2;2011:6;:11;2007:4154;;;2309:1;2299:6;2295:2;2291:15;2286:3;2282:25;2278:33;2360:4;2356:9;2347:6;2341:13;2337:29;2409:4;2402;2396:11;2392:22;2450:1;2447;2444:8;2438:4;2431:22;;;;2248:219;;;2571:4;2561:6;:14;2557:59;;;2595:7;;2557:59;3305:4;3296:6;:13;3292:2859;;;3631:2;3623:6;3619:15;3609:25;;3679:6;3671;3667:19;3729:6;3723:4;3719:17;4036:4;4030:11;4304:198;4322:4;4314:6;4311:16;4304:198;;;4370:13;;4357:27;;4431:2;4467:13;;;;4419:15;;;;4304:198;;;4571:18;;-1:-1:-1;3338:1269:41;;;4852:2;4844:6;4840:15;4830:25;;4900:6;4892;4888:19;4950:6;4944:4;4940:17;5260:6;5254:13;5839:191;5856:4;5850;5846:15;5839:191;;;5904:11;;5891:25;;-1:-1:-1;;5949:13:41;;;;5995;;;;5839:191;;;6100:19;;-1:-1:-1;;4654:1483:41;1870:4297;;;:::o;836:7372:8:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;5:134:-1:-;83:13;;26887:42;26876:54;;27935:35;;27925:2;;27984:1;;27974:12;162:693;;291:3;284:4;276:6;272:17;268:27;258:2;;-1:-1;;299:12;258:2;339:6;333:13;361:81;376:65;434:6;376:65;;;361:81;;;470:21;;;352:90;-1:-1;514:4;527:14;;;;502:17;;622:1;607:242;632:6;629:1;626:13;607:242;;;732:53;781:3;514:4;708:3;702:10;506:6;690:23;;732:53;;;720:66;;514:4;800:14;;;;828;;;;;654:1;647:9;607:242;;;611:14;;;;251:604;;;;;895:735;;1038:3;1031:4;1023:6;1019:17;1015:27;1005:2;;-1:-1;;1046:12;1005:2;1086:6;1080:13;1108:95;1123:79;1195:6;1123:79;;1108:95;1231:21;;;1099:104;-1:-1;1275:4;1288:14;;;;1263:17;;1383:1;1368:256;1393:6;1390:1;1387:13;1368:256;;;1493:67;1556:3;1275:4;1469:3;1463:10;1267:6;1451:23;;1493:67;;;1481:80;;1275:4;1575:14;;;;1603;;;;;1415:1;1408:9;1368:256;;2379:434;;2487:3;2480:4;2472:6;2468:17;2464:27;2454:2;;-1:-1;;2495:12;2454:2;2535:6;2529:13;2557:60;2572:44;2609:6;2572:44;;2557:60;2548:69;;2637:6;2630:5;2623:21;2741:3;2673:4;2732:6;2665;2723:16;;2720:25;2717:2;;;2758:1;;2748:12;2717:2;2768:39;2800:6;2673:4;2699:5;2695:16;2673:4;2665:6;2661:17;2768:39;;;;2447:366;;;;;3298:2851;;3417:6;;3405:9;3400:3;3396:19;3392:32;3389:2;;;-1:-1;;3427:12;3389:2;3455:22;3417:6;3455:22;;;3446:31;;;3567:60;3623:3;3599:22;3567:60;;;3549:16;3542:86;3730:60;3786:3;3697:2;3766:9;3762:22;3730:60;;;3697:2;3716:5;3712:16;3705:86;3900:60;3956:3;3867:2;3936:9;3932:22;3900:60;;;3867:2;3886:5;3882:16;3875:86;4064:60;4120:3;4031:2;4100:9;4096:22;4064:60;;;4031:2;4050:5;4046:16;4039:86;4198:3;4268:9;4264:22;6234:13;4198:3;4218:5;4214:16;4207:86;4366:3;4436:9;4432:22;6234:13;4366:3;4386:5;4382:16;4375:86;4526:3;4596:9;4592:22;6234:13;4526:3;4546:5;4542:16;4535:86;4686:3;4756:9;4752:22;6234:13;4686:3;4706:5;4702:16;4695:86;4859:3;;4931:9;4927:22;6234:13;4859:3;4879:5;4875:18;4868:88;;5017:3;;5089:9;5085:22;6234:13;5017:3;5037:5;5033:18;5026:88;;5206:3;;5195:9;5191:19;5185:26;5231:18;;5223:6;5220:30;5217:2;;;3535:1;;5253:12;5217:2;5300:65;5361:3;5352:6;5341:9;5337:22;5300:65;;;5206:3;5284:5;5280:18;5273:93;5458:3;;;;5447:9;5443:19;5437:26;5423:40;;5231:18;5475:6;5472:30;5469:2;;;3535:1;;5505:12;5469:2;5552:65;5613:3;5604:6;5593:9;5589:22;5552:65;;;5458:3;5536:5;5532:18;5525:93;5713:3;;;;5702:9;5698:19;5692:26;5678:40;;5231:18;5730:6;5727:30;5724:2;;;3535:1;;5760:12;5724:2;5807:65;5868:3;5859:6;5848:9;5844:22;5807:65;;;5713:3;5791:5;5787:18;5780:93;5968:3;;;;5957:9;5953:19;5947:26;5933:40;;5231:18;5985:6;5982:30;5979:2;;;3535:1;;6015:12;5979:2;;6062:65;6123:3;6114:6;6103:9;6099:22;6062:65;;;5968:3;6046:5;6042:18;6035:93;;;3383:2766;;;;;6297:422;;6452:2;6440:9;6431:7;6427:23;6423:32;6420:2;;;-1:-1;;6458:12;6420:2;6509:17;6503:24;6547:18;6539:6;6536:30;6533:2;;;-1:-1;;6569:12;6533:2;6599:104;6695:7;6686:6;6675:9;6671:22;6599:104;;;6589:114;6414:305;-1:-1;;;;6414:305;6726:946;;;;6962:2;6950:9;6941:7;6937:23;6933:32;6930:2;;;-1:-1;;6968:12;6930:2;7019:17;7013:24;7057:18;;7049:6;7046:30;7043:2;;;-1:-1;;7079:12;7043:2;7109:104;7205:7;7196:6;7185:9;7181:22;7109:104;;;7099:114;;7271:2;;;;7260:9;7256:18;7250:25;7057:18;7287:6;7284:30;7281:2;;;-1:-1;;7317:12;7281:2;7415:6;7404:9;7400:22;1780:3;1773:4;1765:6;1761:17;1757:27;1747:2;;-1:-1;;1788:12;1747:2;1828:6;1822:13;1808:27;;1850:76;1865:60;1918:6;1865:60;;1850:76;1954:21;;;2011:14;;;;1986:17;;;2100;;;2091:27;;;;2088:36;-1:-1;2085:2;;;-1:-1;;2127:12;2085:2;-1:-1;2153:10;;2147:217;2172:6;2169:1;2166:13;2147:217;;;6234:13;;2240:61;;2194:1;2187:9;;;;;2315:14;;;;2343;;2147:217;;;-1:-1;7490:2;7475:18;;7469:25;7337:95;;-1:-1;7469:25;-1:-1;;;;7503:30;;;7500:2;;;-1:-1;;7536:12;7500:2;;7566:90;7648:7;7639:6;7628:9;7624:22;7566:90;;;7556:100;;;6924:748;;;;;;7679:825;;;;7894:2;7882:9;7873:7;7869:23;7865:32;7862:2;;;-1:-1;;7900:12;7862:2;7951:17;7945:24;7989:18;;7981:6;7978:30;7975:2;;;-1:-1;;8011:12;7975:2;8041:104;8137:7;8128:6;8117:9;8113:22;8041:104;;;8031:114;;8182:2;8236:9;8232:22;6234:13;8190:74;;8322:2;8311:9;8307:18;8301:25;8287:39;;7989:18;8338:6;8335:30;8332:2;;;-1:-1;;8368:12;8511:345;;8624:2;8612:9;8603:7;8599:23;8595:32;8592:2;;;-1:-1;;8630:12;8592:2;8688:17;8675:31;8726:18;8718:6;8715:30;8712:2;;;-1:-1;;8748:12;8712:2;8823:6;8812:9;8808:22;2923:3;2916:4;2908:6;2904:17;2900:27;2890:2;;-1:-1;;2931:12;2890:2;2978:6;2965:20;2951:34;;3000:64;3015:48;3056:6;3015:48;;3000:64;3084:6;3077:5;3070:21;3188:3;8624:2;3179:6;3112;3170:16;;3167:25;3164:2;;;-1:-1;;3195:12;3164:2;27288:6;8624:2;3112:6;3108:17;8624:2;3146:5;3142:16;27265:30;27326:16;;;8624:2;27326:16;27319:27;;;;3146:5;8586:270;-1:-1;;;8586:270;8863:380;;8997:2;8985:9;8976:7;8972:23;8968:32;8965:2;;;-1:-1;;9003:12;8965:2;9054:17;9048:24;9092:18;9084:6;9081:30;9078:2;;;-1:-1;;9114:12;9078:2;9144:83;9219:7;9210:6;9199:9;9195:22;9144:83;;9250:1084;;;;;9464:3;9452:9;9443:7;9439:23;9435:33;9432:2;;;-1:-1;;9471:12;9432:2;9522:17;9516:24;9560:18;;9552:6;9549:30;9546:2;;;-1:-1;;9582:12;9546:2;9612:83;9687:7;9678:6;9667:9;9663:22;9612:83;;;9602:93;;9753:2;9742:9;9738:18;9732:25;9718:39;;9560:18;9769:6;9766:30;9763:2;;;-1:-1;;9799:12;9763:2;9829:83;9904:7;9895:6;9884:9;9880:22;9829:83;;;9819:93;;9970:2;9959:9;9955:18;9949:25;9935:39;;9560:18;9986:6;9983:30;9980:2;;;-1:-1;;10016:12;9980:2;10046:69;10107:7;10098:6;10087:9;10083:22;10046:69;;;10036:79;;10173:2;10162:9;10158:18;10152:25;10138:39;;9560:18;10189:6;10186:30;10183:2;;;-1:-1;;10219:12;10183:2;;10249:69;10310:7;10301:6;10290:9;10286:22;10249:69;;;10239:79;;;9426:908;;;;;;;;10341:741;;;;10514:2;10502:9;10493:7;10489:23;10485:32;10482:2;;;-1:-1;;10520:12;10482:2;10571:17;10565:24;10609:18;;10601:6;10598:30;10595:2;;;-1:-1;;10631:12;10595:2;10661:83;10736:7;10727:6;10716:9;10712:22;10661:83;;;10651:93;;10781:2;10835:9;10831:22;6234:13;10789:74;;10921:2;10910:9;10906:18;10900:25;10886:39;;10609:18;10937:6;10934:30;10931:2;;;-1:-1;;10967:12;10931:2;;10997:69;11058:7;11049:6;11038:9;11034:22;10997:69;;11747:111;26887:42;26876:54;11816:37;;11810:48;11892:912;;12108:5;24431:12;25545:6;25540:3;25533:19;25582:4;25577:3;25573:14;12120:106;;;;25582:4;12283:6;12279:17;12274:3;12270:27;12258:39;;25582:4;12373:5;23945:14;-1:-1;12412:353;12437:6;12434:1;12431:13;12412:353;;;12499:9;12493:4;12489:20;12484:3;12477:33;11209:68;11273:3;12544:6;12538:13;11209:68;;;25582:4;12744:14;;;;12558:90;;-1:-1;25126:14;;;;;12459:1;12452:9;12412:353;;;-1:-1;12788:10;;12034:770;-1:-1;;;;;;12034:770;13934:714;;14135:5;24431:12;25545:6;25540:3;25533:19;25582:4;25577:3;25573:14;14147:101;;25582:4;14319:5;23945:14;-1:-1;14358:268;14383:6;14380:1;14377:13;14358:268;;;14444:13;;19238:37;;25582:4;11719:14;;;;25126;;;;14405:1;14398:9;14358:268;;;-1:-1;14632:10;;14066:582;-1:-1;;;;14066:582;14656:331;;14788:5;24431:12;25545:6;25540:3;25533:19;14879:52;14924:6;25582:4;25577:3;25573:14;25582:4;14905:5;14901:16;14879:52;;;27725:2;27705:14;-1:-1;;27701:28;14943:39;;;;25582:4;14943:39;;14740:247;-1:-1;;14740:247;19405:503;19613:2;19598:18;;27847:1;27837:12;;27827:2;;27853:9;27827:2;15099:84;;;19811:2;19796:18;;19238:37;;;;19894:2;19879:18;;;19238:37;19584:324;;19915:1215;;20343:3;20365:17;20358:47;20419:86;20343:3;20332:9;20328:19;20491:6;20419:86;;;20538:2;20553:9;20547:4;20543:20;20538:2;20527:9;20523:18;20516:48;20578:154;13129:5;24431:12;25545:6;25540:3;25533:19;20538:2;25577:3;25573:14;13141:120;;20538:2;;13318:6;13314:17;25577:3;13305:27;;20538:2;13422:5;23945:14;-1:-1;13461:395;13486:6;13483:1;13480:13;13461:395;;;-1:-1;;25577:3;13542:4;13538:20;;13533:3;13526:33;13593:6;13587:13;16415:6;16520:71;16576:14;16497:16;16491:23;16520:71;;;20538:2;16671:5;16667:16;16661:23;16690:71;20538:2;16750:3;16746:14;16732:12;16690:71;;;;16855:4;16848:5;16844:16;16838:23;16867:71;16855:4;16927:3;16923:14;16909:12;16867:71;;;;17026:4;17019:5;17015:16;17009:23;17038:71;17026:4;17098:3;17094:14;17080:12;17038:71;;;;20343:3;17193:5;17189:16;17183:23;20343:3;17272;17268:14;19238:37;17374:4;17367:5;17363:16;17357:23;17374:4;17446:3;17442:14;19238:37;17540:4;17533:5;17529:16;17523:23;17540:4;17612:3;17608:14;19238:37;17706:4;17699:5;17695:16;17689:23;17706:4;17778:3;17774:14;19238:37;17885:6;;17878:5;17874:18;17868:25;17885:6;17959:3;17955:16;19238:37;;18051:6;;18044:5;18040:18;18034:25;18051:6;18125:3;18121:16;19238:37;;18227:6;;18220:5;18216:18;18210:25;16415:6;18227;18259:3;18255:16;18248:40;18303:75;16415:6;16410:3;16406:16;18359:12;18303:75;;;18295:83;;;18473:6;;;;18466:5;18462:18;18456:25;18529:3;18523:4;18519:14;18473:6;18505:3;18501:16;18494:40;18549:75;18619:4;18605:12;18549:75;;;18541:83;;;;18722:6;;18715:5;18711:18;18705:25;18778:3;18772:4;18768:14;18722:6;18754:3;18750:16;18743:40;18798:75;18868:4;18854:12;18798:75;;;18790:83;;;18971:6;;;;18964:5;18960:18;18954:25;19027:3;19021:4;19017:14;18971:6;19003:3;18999:16;18992:40;19047:75;19117:4;19103:12;19047:75;;;13835:14;;;;13607:118;-1:-1;;;25126:14;;;;-1:-1;;13508:1;13501:9;13461:395;;;13465:14;;20780:9;20774:4;20770:20;16855:4;20754:9;20750:18;20743:48;20805:116;20916:4;20907:6;20805:116;;;20797:124;;;;;;20969:9;20963:4;20959:20;17026:4;20943:9;20939:18;20932:48;20994:126;21115:4;21106:6;20994:126;;;20986:134;20314:816;-1:-1;;;;;;;20314:816;21137:407;21328:2;21342:47;;;15790:2;21313:18;;;25533:19;15826:27;25573:14;;;15806:48;15873:12;;;21299:245;21551:407;21742:2;21756:47;;;16124:2;21727:18;;;25533:19;16160:15;25573:14;;;16140:36;16195:12;;;21713:245;21965:256;22027:2;22021:9;22053:17;;;22128:18;22113:34;;22149:22;;;22110:62;22107:2;;;22185:1;;22175:12;22107:2;22027;22194:22;22005:216;;-1:-1;22005:216;22228:305;;22388:18;22380:6;22377:30;22374:2;;;-1:-1;;22410:12;22374:2;-1:-1;22455:4;22443:17;;;22508:15;;22311:222;23173:317;;23312:18;23304:6;23301:30;23298:2;;;-1:-1;;23334:12;23298:2;-1:-1;23411:4;23388:17;-1:-1;;23384:33;23475:4;23465:15;;23235:255;27361:268;27426:1;27433:101;27447:6;27444:1;27441:13;27433:101;;;27514:11;;;27508:18;27495:11;;;27488:39;27469:2;27462:10;27433:101;;;27549:6;27546:1;27543:13;27540:2;;;27426:1;27605:6;27600:3;27596:16;27589:27;27540:2;;27410:219;;;"
            }
        }
    },
    "sourceTreeHashHex": "0x27599393f95c2c98d473a9e9b1d4fc58fe3e4f34d57fef87bc2a3f5a9821a7a8",
    "sources": {
        "./LibTransactionDecoder.sol": {
            "id": 8
        },
        "@0x/contracts-exchange/contracts/src/interfaces/IExchange.sol": {
            "id": 30
        },
        "@0x/contracts-exchange/contracts/src/interfaces/IExchangeCore.sol": {
            "id": 31
        },
        "@0x/contracts-exchange-libs/contracts/src/LibOrder.sol": {
            "id": 27
        },
        "@0x/contracts-utils/contracts/src/LibEIP712.sol": {
            "id": 43
        },
        "@0x/contracts-exchange-libs/contracts/src/LibFillResults.sol": {
            "id": 24
        },
        "@0x/contracts-utils/contracts/src/LibSafeMath.sol": {
            "id": 45
        },
        "@0x/contracts-utils/contracts/src/LibRichErrors.sol": {
            "id": 44
        },
        "@0x/contracts-utils/contracts/src/LibSafeMathRichErrors.sol": {
            "id": 46
        },
        "@0x/contracts-exchange-libs/contracts/src/LibMath.sol": {
            "id": 25
        },
        "@0x/contracts-exchange-libs/contracts/src/LibMathRichErrors.sol": {
            "id": 26
        },
        "@0x/contracts-exchange/contracts/src/interfaces/IProtocolFees.sol": {
            "id": 33
        },
        "@0x/contracts-exchange/contracts/src/interfaces/IMatchOrders.sol": {
            "id": 32
        },
        "@0x/contracts-exchange/contracts/src/interfaces/ISignatureValidator.sol": {
            "id": 34
        },
        "@0x/contracts-exchange-libs/contracts/src/LibZeroExTransaction.sol": {
            "id": 28
        },
        "@0x/contracts-exchange/contracts/src/interfaces/ITransactions.sol": {
            "id": 35
        },
        "@0x/contracts-exchange/contracts/src/interfaces/IAssetProxyDispatcher.sol": {
            "id": 29
        },
        "@0x/contracts-exchange/contracts/src/interfaces/IWrapperFunctions.sol": {
            "id": 37
        },
        "@0x/contracts-exchange/contracts/src/interfaces/ITransferSimulator.sol": {
            "id": 36
        },
        "@0x/contracts-utils/contracts/src/LibBytes.sol": {
            "id": 41
        },
        "@0x/contracts-utils/contracts/src/LibBytesRichErrors.sol": {
            "id": 42
        }
    },
    "sourceCodes": {
        "./LibTransactionDecoder.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.16;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-exchange/contracts/src/interfaces/IExchange.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/LibOrder.sol\";\nimport \"@0x/contracts-utils/contracts/src/LibBytes.sol\";\n\n\nlibrary LibTransactionDecoder {\n\n    using LibBytes for bytes;\n\n    /// @dev Decodes the call data for an Exchange contract method call.\n    /// @param transactionData ABI-encoded calldata for an Exchange\n    ///     contract method call.\n    /// @return The name of the function called, and the parameters it was\n    ///     given.  For single-order fills and cancels, the arrays will have\n    ///     just one element.\n    function decodeZeroExTransactionData(bytes memory transactionData)\n        public\n        pure\n        returns(\n            string memory functionName,\n            LibOrder.Order[] memory orders,\n            uint256[] memory takerAssetFillAmounts,\n            bytes[] memory signatures\n        )\n    {\n        bytes4 functionSelector = transactionData.readBytes4(0);\n\n        if (functionSelector == IExchange(address(0)).batchCancelOrders.selector) {\n            functionName = \"batchCancelOrders\";\n        } else if (functionSelector == IExchange(address(0)).batchFillOrders.selector) {\n            functionName = \"batchFillOrders\";\n        } else if (functionSelector == IExchange(address(0)).batchFillOrdersNoThrow.selector) {\n            functionName = \"batchFillOrdersNoThrow\";\n        } else if (functionSelector == IExchange(address(0)).batchFillOrKillOrders.selector) {\n            functionName = \"batchFillOrKillOrders\";\n        } else if (functionSelector == IExchange(address(0)).cancelOrder.selector) {\n            functionName = \"cancelOrder\";\n        } else if (functionSelector == IExchange(address(0)).fillOrder.selector) {\n            functionName = \"fillOrder\";\n        } else if (functionSelector == IExchange(address(0)).fillOrKillOrder.selector) {\n            functionName = \"fillOrKillOrder\";\n        } else if (functionSelector == IExchange(address(0)).marketBuyOrdersNoThrow.selector) {\n            functionName = \"marketBuyOrdersNoThrow\";\n        } else if (functionSelector == IExchange(address(0)).marketSellOrdersNoThrow.selector) {\n            functionName = \"marketSellOrdersNoThrow\";\n        } else if (functionSelector == IExchange(address(0)).marketBuyOrdersFillOrKill.selector) {\n            functionName = \"marketBuyOrdersFillOrKill\";\n        } else if (functionSelector == IExchange(address(0)).marketSellOrdersFillOrKill.selector) {\n            functionName = \"marketSellOrdersFillOrKill\";\n        } else if (functionSelector == IExchange(address(0)).matchOrders.selector) {\n            functionName = \"matchOrders\";\n        } else if (\n            functionSelector == IExchange(address(0)).cancelOrdersUpTo.selector ||\n            functionSelector == IExchange(address(0)).executeTransaction.selector\n        ) {\n            revert(\"UNIMPLEMENTED\");\n        } else {\n            revert(\"UNKNOWN_FUNCTION_SELECTOR\");\n        }\n\n        if (functionSelector == IExchange(address(0)).batchCancelOrders.selector) {\n            // solhint-disable-next-line indent\n            orders = abi.decode(transactionData.slice(4, transactionData.length), (LibOrder.Order[]));\n            takerAssetFillAmounts = new uint256[](0);\n            signatures = new bytes[](0);\n        } else if (\n            functionSelector == IExchange(address(0)).batchFillOrKillOrders.selector ||\n            functionSelector == IExchange(address(0)).batchFillOrders.selector ||\n            functionSelector == IExchange(address(0)).batchFillOrdersNoThrow.selector\n        ) {\n            (orders, takerAssetFillAmounts, signatures) = _makeReturnValuesForBatchFill(transactionData);\n        } else if (functionSelector == IExchange(address(0)).cancelOrder.selector) {\n            orders = new LibOrder.Order[](1);\n            orders[0] = abi.decode(transactionData.slice(4, transactionData.length), (LibOrder.Order));\n            takerAssetFillAmounts = new uint256[](0);\n            signatures = new bytes[](0);\n        } else if (\n            functionSelector == IExchange(address(0)).fillOrKillOrder.selector ||\n            functionSelector == IExchange(address(0)).fillOrder.selector\n        ) {\n            (orders, takerAssetFillAmounts, signatures) = _makeReturnValuesForSingleOrderFill(transactionData);\n        } else if (\n            functionSelector == IExchange(address(0)).marketBuyOrdersNoThrow.selector ||\n            functionSelector == IExchange(address(0)).marketSellOrdersNoThrow.selector ||\n            functionSelector == IExchange(address(0)).marketBuyOrdersFillOrKill.selector ||\n            functionSelector == IExchange(address(0)).marketSellOrdersFillOrKill.selector\n        ) {\n            (orders, takerAssetFillAmounts, signatures) = _makeReturnValuesForMarketFill(transactionData);\n        } else if (functionSelector == IExchange(address(0)).matchOrders.selector) {\n            (\n                LibOrder.Order memory leftOrder,\n                LibOrder.Order memory rightOrder,\n                bytes memory leftSignature,\n                bytes memory rightSignature\n            ) = abi.decode(\n                transactionData.slice(4, transactionData.length),\n                (LibOrder.Order, LibOrder.Order, bytes, bytes)\n            );\n\n            orders = new LibOrder.Order[](2);\n            orders[0] = leftOrder;\n            orders[1] = rightOrder;\n\n            takerAssetFillAmounts = new uint256[](2);\n            takerAssetFillAmounts[0] = leftOrder.takerAssetAmount;\n            takerAssetFillAmounts[1] = rightOrder.takerAssetAmount;\n\n            signatures = new bytes[](2);\n            signatures[0] = leftSignature;\n            signatures[1] = rightSignature;\n        }\n    }\n\n    function _makeReturnValuesForSingleOrderFill(bytes memory transactionData)\n        private\n        pure\n        returns(\n            LibOrder.Order[] memory orders,\n            uint256[] memory takerAssetFillAmounts,\n            bytes[] memory signatures\n        )\n    {\n        orders = new LibOrder.Order[](1);\n        takerAssetFillAmounts = new uint256[](1);\n        signatures = new bytes[](1);\n        // solhint-disable-next-line indent\n        (orders[0], takerAssetFillAmounts[0], signatures[0]) = abi.decode(\n            transactionData.slice(4, transactionData.length),\n            (LibOrder.Order, uint256, bytes)\n        );\n    }\n\n    function _makeReturnValuesForBatchFill(bytes memory transactionData)\n        private\n        pure\n        returns(\n            LibOrder.Order[] memory orders,\n            uint256[] memory takerAssetFillAmounts,\n            bytes[] memory signatures\n        )\n    {\n        // solhint-disable-next-line indent\n        (orders, takerAssetFillAmounts, signatures) = abi.decode(\n            transactionData.slice(4, transactionData.length),\n            // solhint-disable-next-line indent\n            (LibOrder.Order[], uint256[], bytes[])\n        );\n    }\n\n    function _makeReturnValuesForMarketFill(bytes memory transactionData)\n        private\n        pure\n        returns(\n            LibOrder.Order[] memory orders,\n            uint256[] memory takerAssetFillAmounts,\n            bytes[] memory signatures\n        )\n    {\n        takerAssetFillAmounts = new uint256[](1);\n        // solhint-disable-next-line indent\n        (orders, takerAssetFillAmounts[0], signatures) = abi.decode(\n            transactionData.slice(4, transactionData.length),\n            // solhint-disable-next-line indent\n            (LibOrder.Order[], uint256, bytes[])\n        );\n    }\n}\n",
        "@0x/contracts-exchange/contracts/src/interfaces/IExchange.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"./IExchangeCore.sol\";\nimport \"./IProtocolFees.sol\";\nimport \"./IMatchOrders.sol\";\nimport \"./ISignatureValidator.sol\";\nimport \"./ITransactions.sol\";\nimport \"./IAssetProxyDispatcher.sol\";\nimport \"./IWrapperFunctions.sol\";\nimport \"./ITransferSimulator.sol\";\n\n\n// solhint-disable no-empty-blocks\ncontract IExchange is\n    IProtocolFees,\n    IExchangeCore,\n    IMatchOrders,\n    ISignatureValidator,\n    ITransactions,\n    IAssetProxyDispatcher,\n    ITransferSimulator,\n    IWrapperFunctions\n{}\n",
        "@0x/contracts-exchange/contracts/src/interfaces/IExchangeCore.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-exchange-libs/contracts/src/LibOrder.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/LibFillResults.sol\";\n\n\ncontract IExchangeCore {\n\n    // Fill event is emitted whenever an order is filled.\n    event Fill(\n        address indexed makerAddress,         // Address that created the order.\n        address indexed feeRecipientAddress,  // Address that received fees.\n        bytes makerAssetData,                 // Encoded data specific to makerAsset.\n        bytes takerAssetData,                 // Encoded data specific to takerAsset.\n        bytes makerFeeAssetData,              // Encoded data specific to makerFeeAsset.\n        bytes takerFeeAssetData,              // Encoded data specific to takerFeeAsset.\n        bytes32 indexed orderHash,            // EIP712 hash of order (see LibOrder.getTypedDataHash).\n        address takerAddress,                 // Address that filled the order.\n        address senderAddress,                // Address that called the Exchange contract (msg.sender).\n        uint256 makerAssetFilledAmount,       // Amount of makerAsset sold by maker and bought by taker.\n        uint256 takerAssetFilledAmount,       // Amount of takerAsset sold by taker and bought by maker.\n        uint256 makerFeePaid,                 // Amount of makerFeeAssetData paid to feeRecipient by maker.\n        uint256 takerFeePaid,                 // Amount of takerFeeAssetData paid to feeRecipient by taker.\n        uint256 protocolFeePaid               // Amount of eth or weth paid to the staking contract.\n    );\n\n    // Cancel event is emitted whenever an individual order is cancelled.\n    event Cancel(\n        address indexed makerAddress,         // Address that created the order.\n        address indexed feeRecipientAddress,  // Address that would have recieved fees if order was filled.\n        bytes makerAssetData,                 // Encoded data specific to makerAsset.\n        bytes takerAssetData,                 // Encoded data specific to takerAsset.\n        address senderAddress,                // Address that called the Exchange contract (msg.sender).\n        bytes32 indexed orderHash             // EIP712 hash of order (see LibOrder.getTypedDataHash).\n    );\n\n    // CancelUpTo event is emitted whenever `cancelOrdersUpTo` is executed succesfully.\n    event CancelUpTo(\n        address indexed makerAddress,         // Orders cancelled must have been created by this address.\n        address indexed orderSenderAddress,   // Orders cancelled must have a `senderAddress` equal to this address.\n        uint256 orderEpoch                    // Orders with specified makerAddress and senderAddress with a salt less than this value are considered cancelled.\n    );\n\n    /// @dev Cancels all orders created by makerAddress with a salt less than or equal to the targetOrderEpoch\n    ///      and senderAddress equal to msg.sender (or null address if msg.sender == makerAddress).\n    /// @param targetOrderEpoch Orders created with a salt less or equal to this value will be cancelled.\n    function cancelOrdersUpTo(uint256 targetOrderEpoch)\n        external\n        payable;\n\n    /// @dev Fills the input order.\n    /// @param order Order struct containing order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signature Proof that order has been created by maker.\n    /// @return Amounts filled and fees paid by maker and taker.\n    function fillOrder(\n        LibOrder.Order memory order,\n        uint256 takerAssetFillAmount,\n        bytes memory signature\n    )\n        public\n        payable\n        returns (LibFillResults.FillResults memory fillResults);\n\n    /// @dev After calling, the order can not be filled anymore.\n    /// @param order Order struct containing order specifications.\n    function cancelOrder(LibOrder.Order memory order)\n        public\n        payable;\n\n    /// @dev Gets information about an order: status, hash, and amount filled.\n    /// @param order Order to gather information on.\n    /// @return OrderInfo Information about the order and its state.\n    ///                   See LibOrder.OrderInfo for a complete description.\n    function getOrderInfo(LibOrder.Order memory order)\n        public\n        view\n        returns (LibOrder.OrderInfo memory orderInfo);\n}\n",
        "@0x/contracts-exchange-libs/contracts/src/LibOrder.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\nimport \"@0x/contracts-utils/contracts/src/LibEIP712.sol\";\n\n\nlibrary LibOrder {\n\n    using LibOrder for Order;\n\n    // Hash for the EIP712 Order Schema:\n    // keccak256(abi.encodePacked(\n    //     \"Order(\",\n    //     \"address makerAddress,\",\n    //     \"address takerAddress,\",\n    //     \"address feeRecipientAddress,\",\n    //     \"address senderAddress,\",\n    //     \"uint256 makerAssetAmount,\",\n    //     \"uint256 takerAssetAmount,\",\n    //     \"uint256 makerFee,\",\n    //     \"uint256 takerFee,\",\n    //     \"uint256 expirationTimeSeconds,\",\n    //     \"uint256 salt,\",\n    //     \"bytes makerAssetData,\",\n    //     \"bytes takerAssetData,\",\n    //     \"bytes makerFeeAssetData,\",\n    //     \"bytes takerFeeAssetData\",\n    //     \")\"\n    // ))\n    bytes32 constant internal _EIP712_ORDER_SCHEMA_HASH =\n        0xf80322eb8376aafb64eadf8f0d7623f22130fd9491a221e902b713cb984a7534;\n\n    // A valid order remains fillable until it is expired, fully filled, or cancelled.\n    // An order's status is unaffected by external factors, like account balances.\n    enum OrderStatus {\n        INVALID,                     // Default value\n        INVALID_MAKER_ASSET_AMOUNT,  // Order does not have a valid maker asset amount\n        INVALID_TAKER_ASSET_AMOUNT,  // Order does not have a valid taker asset amount\n        FILLABLE,                    // Order is fillable\n        EXPIRED,                     // Order has already expired\n        FULLY_FILLED,                // Order is fully filled\n        CANCELLED                    // Order has been cancelled\n    }\n\n    // solhint-disable max-line-length\n    /// @dev Canonical order structure.\n    struct Order {\n        address makerAddress;           // Address that created the order.\n        address takerAddress;           // Address that is allowed to fill the order. If set to 0, any address is allowed to fill the order.\n        address feeRecipientAddress;    // Address that will recieve fees when order is filled.\n        address senderAddress;          // Address that is allowed to call Exchange contract methods that affect this order. If set to 0, any address is allowed to call these methods.\n        uint256 makerAssetAmount;       // Amount of makerAsset being offered by maker. Must be greater than 0.\n        uint256 takerAssetAmount;       // Amount of takerAsset being bid on by maker. Must be greater than 0.\n        uint256 makerFee;               // Fee paid to feeRecipient by maker when order is filled.\n        uint256 takerFee;               // Fee paid to feeRecipient by taker when order is filled.\n        uint256 expirationTimeSeconds;  // Timestamp in seconds at which order expires.\n        uint256 salt;                   // Arbitrary number to facilitate uniqueness of the order's hash.\n        bytes makerAssetData;           // Encoded data that can be decoded by a specified proxy contract when transferring makerAsset. The leading bytes4 references the id of the asset proxy.\n        bytes takerAssetData;           // Encoded data that can be decoded by a specified proxy contract when transferring takerAsset. The leading bytes4 references the id of the asset proxy.\n        bytes makerFeeAssetData;        // Encoded data that can be decoded by a specified proxy contract when transferring makerFeeAsset. The leading bytes4 references the id of the asset proxy.\n        bytes takerFeeAssetData;        // Encoded data that can be decoded by a specified proxy contract when transferring takerFeeAsset. The leading bytes4 references the id of the asset proxy.\n    }\n    // solhint-enable max-line-length\n\n    /// @dev Order information returned by `getOrderInfo()`.\n    struct OrderInfo {\n        OrderStatus orderStatus;                    // Status that describes order's validity and fillability.\n        bytes32 orderHash;                    // EIP712 typed data hash of the order (see LibOrder.getTypedDataHash).\n        uint256 orderTakerAssetFilledAmount;  // Amount of order that has already been filled.\n    }\n\n    /// @dev Calculates the EIP712 typed data hash of an order with a given domain separator.\n    /// @param order The order structure.\n    /// @return EIP712 typed data hash of the order.\n    function getTypedDataHash(Order memory order, bytes32 eip712ExchangeDomainHash)\n        internal\n        pure\n        returns (bytes32 orderHash)\n    {\n        orderHash = LibEIP712.hashEIP712Message(\n            eip712ExchangeDomainHash,\n            order.getStructHash()\n        );\n        return orderHash;\n    }\n\n    /// @dev Calculates EIP712 hash of the order struct.\n    /// @param order The order structure.\n    /// @return EIP712 hash of the order struct.\n    function getStructHash(Order memory order)\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        bytes32 schemaHash = _EIP712_ORDER_SCHEMA_HASH;\n        bytes memory makerAssetData = order.makerAssetData;\n        bytes memory takerAssetData = order.takerAssetData;\n        bytes memory makerFeeAssetData = order.makerFeeAssetData;\n        bytes memory takerFeeAssetData = order.takerFeeAssetData;\n\n        // Assembly for more efficiently computing:\n        // keccak256(abi.encodePacked(\n        //     EIP712_ORDER_SCHEMA_HASH,\n        //     uint256(order.makerAddress),\n        //     uint256(order.takerAddress),\n        //     uint256(order.feeRecipientAddress),\n        //     uint256(order.senderAddress),\n        //     order.makerAssetAmount,\n        //     order.takerAssetAmount,\n        //     order.makerFee,\n        //     order.takerFee,\n        //     order.expirationTimeSeconds,\n        //     order.salt,\n        //     keccak256(order.makerAssetData),\n        //     keccak256(order.takerAssetData),\n        //     keccak256(order.makerFeeAssetData),\n        //     keccak256(order.takerFeeAssetData)\n        // ));\n\n        assembly {\n            // Assert order offset (this is an internal error that should never be triggered)\n            if lt(order, 32) {\n                invalid()\n            }\n\n            // Calculate memory addresses that will be swapped out before hashing\n            let pos1 := sub(order, 32)\n            let pos2 := add(order, 320)\n            let pos3 := add(order, 352)\n            let pos4 := add(order, 384)\n            let pos5 := add(order, 416)\n\n            // Backup\n            let temp1 := mload(pos1)\n            let temp2 := mload(pos2)\n            let temp3 := mload(pos3)\n            let temp4 := mload(pos4)\n            let temp5 := mload(pos5)\n\n            // Hash in place\n            mstore(pos1, schemaHash)\n            mstore(pos2, keccak256(add(makerAssetData, 32), mload(makerAssetData)))        // store hash of makerAssetData\n            mstore(pos3, keccak256(add(takerAssetData, 32), mload(takerAssetData)))        // store hash of takerAssetData\n            mstore(pos4, keccak256(add(makerFeeAssetData, 32), mload(makerFeeAssetData)))  // store hash of makerFeeAssetData\n            mstore(pos5, keccak256(add(takerFeeAssetData, 32), mload(takerFeeAssetData)))  // store hash of takerFeeAssetData\n            result := keccak256(pos1, 480)\n\n            // Restore\n            mstore(pos1, temp1)\n            mstore(pos2, temp2)\n            mstore(pos3, temp3)\n            mstore(pos4, temp4)\n            mstore(pos5, temp5)\n        }\n        return result;\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/LibEIP712.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\nlibrary LibEIP712 {\n\n    // Hash of the EIP712 Domain Separator Schema\n    // keccak256(abi.encodePacked(\n    //     \"EIP712Domain(\",\n    //     \"string name,\",\n    //     \"string version,\",\n    //     \"uint256 chainId,\",\n    //     \"address verifyingContract\",\n    //     \")\"\n    // ))\n    bytes32 constant internal _EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH = 0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f;\n\n    /// @dev Calculates a EIP712 domain separator.\n    /// @param name The EIP712 domain name.\n    /// @param version The EIP712 domain version.\n    /// @param verifyingContract The EIP712 verifying contract.\n    /// @return EIP712 domain separator.\n    function hashEIP712Domain(\n        string memory name,\n        string memory version,\n        uint256 chainId,\n        address verifyingContract\n    )\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        bytes32 schemaHash = _EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH;\n\n        // Assembly for more efficient computing:\n        // keccak256(abi.encodePacked(\n        //     _EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH,\n        //     keccak256(bytes(name)),\n        //     keccak256(bytes(version)),\n        //     chainId,\n        //     uint256(verifyingContract)\n        // ))\n\n        assembly {\n            // Calculate hashes of dynamic data\n            let nameHash := keccak256(add(name, 32), mload(name))\n            let versionHash := keccak256(add(version, 32), mload(version))\n\n            // Load free memory pointer\n            let memPtr := mload(64)\n\n            // Store params in memory\n            mstore(memPtr, schemaHash)\n            mstore(add(memPtr, 32), nameHash)\n            mstore(add(memPtr, 64), versionHash)\n            mstore(add(memPtr, 96), chainId)\n            mstore(add(memPtr, 128), verifyingContract)\n\n            // Compute hash\n            result := keccak256(memPtr, 160)\n        }\n        return result;\n    }\n\n    /// @dev Calculates EIP712 encoding for a hash struct with a given domain hash.\n    /// @param eip712DomainHash Hash of the domain domain separator data, computed\n    ///                         with getDomainHash().\n    /// @param hashStruct The EIP712 hash struct.\n    /// @return EIP712 hash applied to the given EIP712 Domain.\n    function hashEIP712Message(bytes32 eip712DomainHash, bytes32 hashStruct)\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        // Assembly for more efficient computing:\n        // keccak256(abi.encodePacked(\n        //     EIP191_HEADER,\n        //     EIP712_DOMAIN_HASH,\n        //     hashStruct\n        // ));\n\n        assembly {\n            // Load free memory pointer\n            let memPtr := mload(64)\n\n            mstore(memPtr, 0x1901000000000000000000000000000000000000000000000000000000000000)  // EIP191 header\n            mstore(add(memPtr, 2), eip712DomainHash)                                            // EIP712 domain hash\n            mstore(add(memPtr, 34), hashStruct)                                                 // Hash of struct\n\n            // Compute hash\n            result := keccak256(memPtr, 66)\n        }\n        return result;\n    }\n}\n",
        "@0x/contracts-exchange-libs/contracts/src/LibFillResults.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\nimport \"@0x/contracts-utils/contracts/src/LibSafeMath.sol\";\nimport \"./LibMath.sol\";\nimport \"./LibOrder.sol\";\n\n\nlibrary LibFillResults {\n\n    using LibSafeMath for uint256;\n\n    struct BatchMatchedFillResults {\n        FillResults[] left;              // Fill results for left orders\n        FillResults[] right;             // Fill results for right orders\n        uint256 profitInLeftMakerAsset;  // Profit taken from left makers\n        uint256 profitInRightMakerAsset; // Profit taken from right makers\n    }\n\n    struct FillResults {\n        uint256 makerAssetFilledAmount;  // Total amount of makerAsset(s) filled.\n        uint256 takerAssetFilledAmount;  // Total amount of takerAsset(s) filled.\n        uint256 makerFeePaid;            // Total amount of fees paid by maker(s) to feeRecipient(s).\n        uint256 takerFeePaid;            // Total amount of fees paid by taker to feeRecipients(s).\n        uint256 protocolFeePaid;         // Total amount of fees paid by taker to the staking contract.\n    }\n\n    struct MatchedFillResults {\n        FillResults left;                // Amounts filled and fees paid of left order.\n        FillResults right;               // Amounts filled and fees paid of right order.\n        uint256 profitInLeftMakerAsset;  // Profit taken from the left maker\n        uint256 profitInRightMakerAsset; // Profit taken from the right maker\n    }\n\n    /// @dev Calculates amounts filled and fees paid by maker and taker.\n    /// @param order to be filled.\n    /// @param takerAssetFilledAmount Amount of takerAsset that will be filled.\n    /// @param protocolFeeMultiplier The current protocol fee of the exchange contract.\n    /// @param gasPrice The gasprice of the transaction. This is provided so that the function call can continue\n    ///        to be pure rather than view.\n    /// @return fillResults Amounts filled and fees paid by maker and taker.\n    function calculateFillResults(\n        LibOrder.Order memory order,\n        uint256 takerAssetFilledAmount,\n        uint256 protocolFeeMultiplier,\n        uint256 gasPrice\n    )\n        internal\n        pure\n        returns (FillResults memory fillResults)\n    {\n        // Compute proportional transfer amounts\n        fillResults.takerAssetFilledAmount = takerAssetFilledAmount;\n        fillResults.makerAssetFilledAmount = LibMath.safeGetPartialAmountFloor(\n            takerAssetFilledAmount,\n            order.takerAssetAmount,\n            order.makerAssetAmount\n        );\n        fillResults.makerFeePaid = LibMath.safeGetPartialAmountFloor(\n            takerAssetFilledAmount,\n            order.takerAssetAmount,\n            order.makerFee\n        );\n        fillResults.takerFeePaid = LibMath.safeGetPartialAmountFloor(\n            takerAssetFilledAmount,\n            order.takerAssetAmount,\n            order.takerFee\n        );\n\n        // Compute the protocol fee that should be paid for a single fill.\n        fillResults.protocolFeePaid = gasPrice.safeMul(protocolFeeMultiplier);\n\n        return fillResults;\n    }\n\n    /// @dev Calculates fill amounts for the matched orders.\n    ///      Each order is filled at their respective price point. However, the calculations are\n    ///      carried out as though the orders are both being filled at the right order's price point.\n    ///      The profit made by the leftOrder order goes to the taker (who matched the two orders).\n    /// @param leftOrder First order to match.\n    /// @param rightOrder Second order to match.\n    /// @param leftOrderTakerAssetFilledAmount Amount of left order already filled.\n    /// @param rightOrderTakerAssetFilledAmount Amount of right order already filled.\n    /// @param protocolFeeMultiplier The current protocol fee of the exchange contract.\n    /// @param gasPrice The gasprice of the transaction. This is provided so that the function call can continue\n    ///        to be pure rather than view.\n    /// @param shouldMaximallyFillOrders A value that indicates whether or not this calculation should use\n    ///                                  the maximal fill order matching strategy.\n    /// @param matchedFillResults Amounts to fill and fees to pay by maker and taker of matched orders.\n    function calculateMatchedFillResults(\n        LibOrder.Order memory leftOrder,\n        LibOrder.Order memory rightOrder,\n        uint256 leftOrderTakerAssetFilledAmount,\n        uint256 rightOrderTakerAssetFilledAmount,\n        uint256 protocolFeeMultiplier,\n        uint256 gasPrice,\n        bool shouldMaximallyFillOrders\n    )\n        internal\n        pure\n        returns (MatchedFillResults memory matchedFillResults)\n    {\n        // Derive maker asset amounts for left & right orders, given store taker assert amounts\n        uint256 leftTakerAssetAmountRemaining = leftOrder.takerAssetAmount.safeSub(leftOrderTakerAssetFilledAmount);\n        uint256 leftMakerAssetAmountRemaining = LibMath.safeGetPartialAmountFloor(\n            leftOrder.makerAssetAmount,\n            leftOrder.takerAssetAmount,\n            leftTakerAssetAmountRemaining\n        );\n        uint256 rightTakerAssetAmountRemaining = rightOrder.takerAssetAmount.safeSub(rightOrderTakerAssetFilledAmount);\n        uint256 rightMakerAssetAmountRemaining = LibMath.safeGetPartialAmountFloor(\n            rightOrder.makerAssetAmount,\n            rightOrder.takerAssetAmount,\n            rightTakerAssetAmountRemaining\n        );\n\n        // Maximally fill the orders and pay out profits to the matcher in one or both of the maker assets.\n        if (shouldMaximallyFillOrders) {\n            matchedFillResults = _calculateMatchedFillResultsWithMaximalFill(\n                leftOrder,\n                rightOrder,\n                leftMakerAssetAmountRemaining,\n                leftTakerAssetAmountRemaining,\n                rightMakerAssetAmountRemaining,\n                rightTakerAssetAmountRemaining\n            );\n        } else {\n            matchedFillResults = _calculateMatchedFillResults(\n                leftOrder,\n                rightOrder,\n                leftMakerAssetAmountRemaining,\n                leftTakerAssetAmountRemaining,\n                rightMakerAssetAmountRemaining,\n                rightTakerAssetAmountRemaining\n            );\n        }\n\n        // Compute fees for left order\n        matchedFillResults.left.makerFeePaid = LibMath.safeGetPartialAmountFloor(\n            matchedFillResults.left.makerAssetFilledAmount,\n            leftOrder.makerAssetAmount,\n            leftOrder.makerFee\n        );\n        matchedFillResults.left.takerFeePaid = LibMath.safeGetPartialAmountFloor(\n            matchedFillResults.left.takerAssetFilledAmount,\n            leftOrder.takerAssetAmount,\n            leftOrder.takerFee\n        );\n\n        // Compute fees for right order\n        matchedFillResults.right.makerFeePaid = LibMath.safeGetPartialAmountFloor(\n            matchedFillResults.right.makerAssetFilledAmount,\n            rightOrder.makerAssetAmount,\n            rightOrder.makerFee\n        );\n        matchedFillResults.right.takerFeePaid = LibMath.safeGetPartialAmountFloor(\n            matchedFillResults.right.takerAssetFilledAmount,\n            rightOrder.takerAssetAmount,\n            rightOrder.takerFee\n        );\n\n        // Compute the protocol fee that should be paid for a single fill. In this\n        // case this should be made the protocol fee for both the left and right orders.\n        uint256 protocolFee = gasPrice.safeMul(protocolFeeMultiplier);\n        matchedFillResults.left.protocolFeePaid = protocolFee;\n        matchedFillResults.right.protocolFeePaid = protocolFee;\n\n        // Return fill results\n        return matchedFillResults;\n    }\n\n    /// @dev Adds properties of both FillResults instances.\n    /// @param fillResults1 The first FillResults.\n    /// @param fillResults2 The second FillResults.\n    /// @return The sum of both fill results.\n    function addFillResults(\n        FillResults memory fillResults1,\n        FillResults memory fillResults2\n    )\n        internal\n        pure\n        returns (FillResults memory totalFillResults)\n    {\n        totalFillResults.makerAssetFilledAmount = fillResults1.makerAssetFilledAmount.safeAdd(fillResults2.makerAssetFilledAmount);\n        totalFillResults.takerAssetFilledAmount = fillResults1.takerAssetFilledAmount.safeAdd(fillResults2.takerAssetFilledAmount);\n        totalFillResults.makerFeePaid = fillResults1.makerFeePaid.safeAdd(fillResults2.makerFeePaid);\n        totalFillResults.takerFeePaid = fillResults1.takerFeePaid.safeAdd(fillResults2.takerFeePaid);\n        totalFillResults.protocolFeePaid = fillResults1.protocolFeePaid.safeAdd(fillResults2.protocolFeePaid);\n\n        return totalFillResults;\n    }\n\n    /// @dev Calculates part of the matched fill results for a given situation using the fill strategy that only\n    ///      awards profit denominated in the left maker asset.\n    /// @param leftOrder The left order in the order matching situation.\n    /// @param rightOrder The right order in the order matching situation.\n    /// @param leftMakerAssetAmountRemaining The amount of the left order maker asset that can still be filled.\n    /// @param leftTakerAssetAmountRemaining The amount of the left order taker asset that can still be filled.\n    /// @param rightMakerAssetAmountRemaining The amount of the right order maker asset that can still be filled.\n    /// @param rightTakerAssetAmountRemaining The amount of the right order taker asset that can still be filled.\n    /// @return MatchFillResults struct that does not include fees paid.\n    function _calculateMatchedFillResults(\n        LibOrder.Order memory leftOrder,\n        LibOrder.Order memory rightOrder,\n        uint256 leftMakerAssetAmountRemaining,\n        uint256 leftTakerAssetAmountRemaining,\n        uint256 rightMakerAssetAmountRemaining,\n        uint256 rightTakerAssetAmountRemaining\n    )\n        private\n        pure\n        returns (MatchedFillResults memory matchedFillResults)\n    {\n        // Calculate fill results for maker and taker assets: at least one order will be fully filled.\n        // The maximum amount the left maker can buy is `leftTakerAssetAmountRemaining`\n        // The maximum amount the right maker can sell is `rightMakerAssetAmountRemaining`\n        // We have two distinct cases for calculating the fill results:\n        // Case 1.\n        //   If the left maker can buy more than the right maker can sell, then only the right order is fully filled.\n        //   If the left maker can buy exactly what the right maker can sell, then both orders are fully filled.\n        // Case 2.\n        //   If the left maker cannot buy more than the right maker can sell, then only the left order is fully filled.\n        // Case 3.\n        //   If the left maker can buy exactly as much as the right maker can sell, then both orders are fully filled.\n        if (leftTakerAssetAmountRemaining > rightMakerAssetAmountRemaining) {\n            // Case 1: Right order is fully filled\n            matchedFillResults = _calculateCompleteRightFill(\n                leftOrder,\n                rightMakerAssetAmountRemaining,\n                rightTakerAssetAmountRemaining\n            );\n        } else if (leftTakerAssetAmountRemaining < rightMakerAssetAmountRemaining) {\n            // Case 2: Left order is fully filled\n            matchedFillResults.left.makerAssetFilledAmount = leftMakerAssetAmountRemaining;\n            matchedFillResults.left.takerAssetFilledAmount = leftTakerAssetAmountRemaining;\n            matchedFillResults.right.makerAssetFilledAmount = leftTakerAssetAmountRemaining;\n            // Round up to ensure the maker's exchange rate does not exceed the price specified by the order.\n            // We favor the maker when the exchange rate must be rounded.\n            matchedFillResults.right.takerAssetFilledAmount = LibMath.safeGetPartialAmountCeil(\n                rightOrder.takerAssetAmount,\n                rightOrder.makerAssetAmount,\n                leftTakerAssetAmountRemaining // matchedFillResults.right.makerAssetFilledAmount\n            );\n        } else {\n            // leftTakerAssetAmountRemaining == rightMakerAssetAmountRemaining\n            // Case 3: Both orders are fully filled. Technically, this could be captured by the above cases, but\n            //         this calculation will be more precise since it does not include rounding.\n            matchedFillResults = _calculateCompleteFillBoth(\n                leftMakerAssetAmountRemaining,\n                leftTakerAssetAmountRemaining,\n                rightMakerAssetAmountRemaining,\n                rightTakerAssetAmountRemaining\n            );\n        }\n\n        // Calculate amount given to taker\n        matchedFillResults.profitInLeftMakerAsset = matchedFillResults.left.makerAssetFilledAmount.safeSub(\n            matchedFillResults.right.takerAssetFilledAmount\n        );\n\n        return matchedFillResults;\n    }\n\n    /// @dev Calculates part of the matched fill results for a given situation using the maximal fill order matching\n    ///      strategy.\n    /// @param leftOrder The left order in the order matching situation.\n    /// @param rightOrder The right order in the order matching situation.\n    /// @param leftMakerAssetAmountRemaining The amount of the left order maker asset that can still be filled.\n    /// @param leftTakerAssetAmountRemaining The amount of the left order taker asset that can still be filled.\n    /// @param rightMakerAssetAmountRemaining The amount of the right order maker asset that can still be filled.\n    /// @param rightTakerAssetAmountRemaining The amount of the right order taker asset that can still be filled.\n    /// @return MatchFillResults struct that does not include fees paid.\n    function _calculateMatchedFillResultsWithMaximalFill(\n        LibOrder.Order memory leftOrder,\n        LibOrder.Order memory rightOrder,\n        uint256 leftMakerAssetAmountRemaining,\n        uint256 leftTakerAssetAmountRemaining,\n        uint256 rightMakerAssetAmountRemaining,\n        uint256 rightTakerAssetAmountRemaining\n    )\n        private\n        pure\n        returns (MatchedFillResults memory matchedFillResults)\n    {\n        // If a maker asset is greater than the opposite taker asset, than there will be a spread denominated in that maker asset.\n        bool doesLeftMakerAssetProfitExist = leftMakerAssetAmountRemaining > rightTakerAssetAmountRemaining;\n        bool doesRightMakerAssetProfitExist = rightMakerAssetAmountRemaining > leftTakerAssetAmountRemaining;\n\n        // Calculate the maximum fill results for the maker and taker assets. At least one of the orders will be fully filled.\n        //\n        // The maximum that the left maker can possibly buy is the amount that the right order can sell.\n        // The maximum that the right maker can possibly buy is the amount that the left order can sell.\n        //\n        // If the left order is fully filled, profit will be paid out in the left maker asset. If the right order is fully filled,\n        // the profit will be out in the right maker asset.\n        //\n        // There are three cases to consider:\n        // Case 1.\n        //   If the left maker can buy more than the right maker can sell, then only the right order is fully filled.\n        // Case 2.\n        //   If the right maker can buy more than the left maker can sell, then only the right order is fully filled.\n        // Case 3.\n        //   If the right maker can sell the max of what the left maker can buy and the left maker can sell the max of\n        //   what the right maker can buy, then both orders are fully filled.\n        if (leftTakerAssetAmountRemaining > rightMakerAssetAmountRemaining) {\n            // Case 1: Right order is fully filled with the profit paid in the left makerAsset\n            matchedFillResults = _calculateCompleteRightFill(\n                leftOrder,\n                rightMakerAssetAmountRemaining,\n                rightTakerAssetAmountRemaining\n            );\n        } else if (rightTakerAssetAmountRemaining > leftMakerAssetAmountRemaining) {\n            // Case 2: Left order is fully filled with the profit paid in the right makerAsset.\n            matchedFillResults.left.makerAssetFilledAmount = leftMakerAssetAmountRemaining;\n            matchedFillResults.left.takerAssetFilledAmount = leftTakerAssetAmountRemaining;\n            // Round down to ensure the right maker's exchange rate does not exceed the price specified by the order.\n            // We favor the right maker when the exchange rate must be rounded and the profit is being paid in the\n            // right maker asset.\n            matchedFillResults.right.makerAssetFilledAmount = LibMath.safeGetPartialAmountFloor(\n                rightOrder.makerAssetAmount,\n                rightOrder.takerAssetAmount,\n                leftMakerAssetAmountRemaining\n            );\n            matchedFillResults.right.takerAssetFilledAmount = leftMakerAssetAmountRemaining;\n        } else {\n            // Case 3: The right and left orders are fully filled\n            matchedFillResults = _calculateCompleteFillBoth(\n                leftMakerAssetAmountRemaining,\n                leftTakerAssetAmountRemaining,\n                rightMakerAssetAmountRemaining,\n                rightTakerAssetAmountRemaining\n            );\n        }\n\n        // Calculate amount given to taker in the left order's maker asset if the left spread will be part of the profit.\n        if (doesLeftMakerAssetProfitExist) {\n            matchedFillResults.profitInLeftMakerAsset = matchedFillResults.left.makerAssetFilledAmount.safeSub(\n                matchedFillResults.right.takerAssetFilledAmount\n            );\n        }\n\n        // Calculate amount given to taker in the right order's maker asset if the right spread will be part of the profit.\n        if (doesRightMakerAssetProfitExist) {\n            matchedFillResults.profitInRightMakerAsset = matchedFillResults.right.makerAssetFilledAmount.safeSub(\n                matchedFillResults.left.takerAssetFilledAmount\n            );\n        }\n\n        return matchedFillResults;\n    }\n\n    /// @dev Calculates the fill results for the maker and taker in the order matching and writes the results\n    ///      to the fillResults that are being collected on the order. Both orders will be fully filled in this\n    ///      case.\n    /// @param leftMakerAssetAmountRemaining The amount of the left maker asset that is remaining to be filled.\n    /// @param leftTakerAssetAmountRemaining The amount of the left taker asset that is remaining to be filled.\n    /// @param rightMakerAssetAmountRemaining The amount of the right maker asset that is remaining to be filled.\n    /// @param rightTakerAssetAmountRemaining The amount of the right taker asset that is remaining to be filled.\n    /// @return MatchFillResults struct that does not include fees paid or spreads taken.\n    function _calculateCompleteFillBoth(\n        uint256 leftMakerAssetAmountRemaining,\n        uint256 leftTakerAssetAmountRemaining,\n        uint256 rightMakerAssetAmountRemaining,\n        uint256 rightTakerAssetAmountRemaining\n    )\n        private\n        pure\n        returns (MatchedFillResults memory matchedFillResults)\n    {\n        // Calculate the fully filled results for both orders.\n        matchedFillResults.left.makerAssetFilledAmount = leftMakerAssetAmountRemaining;\n        matchedFillResults.left.takerAssetFilledAmount = leftTakerAssetAmountRemaining;\n        matchedFillResults.right.makerAssetFilledAmount = rightMakerAssetAmountRemaining;\n        matchedFillResults.right.takerAssetFilledAmount = rightTakerAssetAmountRemaining;\n\n        return matchedFillResults;\n    }\n\n    /// @dev Calculates the fill results for the maker and taker in the order matching and writes the results\n    ///      to the fillResults that are being collected on the order.\n    /// @param leftOrder The left order that is being maximally filled. All of the information about fill amounts\n    ///                  can be derived from this order and the right asset remaining fields.\n    /// @param rightMakerAssetAmountRemaining The amount of the right maker asset that is remaining to be filled.\n    /// @param rightTakerAssetAmountRemaining The amount of the right taker asset that is remaining to be filled.\n    /// @return MatchFillResults struct that does not include fees paid or spreads taken.\n    function _calculateCompleteRightFill(\n        LibOrder.Order memory leftOrder,\n        uint256 rightMakerAssetAmountRemaining,\n        uint256 rightTakerAssetAmountRemaining\n    )\n        private\n        pure\n        returns (MatchedFillResults memory matchedFillResults)\n    {\n        matchedFillResults.right.makerAssetFilledAmount = rightMakerAssetAmountRemaining;\n        matchedFillResults.right.takerAssetFilledAmount = rightTakerAssetAmountRemaining;\n        matchedFillResults.left.takerAssetFilledAmount = rightMakerAssetAmountRemaining;\n        // Round down to ensure the left maker's exchange rate does not exceed the price specified by the order.\n        // We favor the left maker when the exchange rate must be rounded and the profit is being paid in the\n        // left maker asset.\n        matchedFillResults.left.makerAssetFilledAmount = LibMath.safeGetPartialAmountFloor(\n            leftOrder.makerAssetAmount,\n            leftOrder.takerAssetAmount,\n            rightMakerAssetAmountRemaining\n        );\n\n        return matchedFillResults;\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/LibSafeMath.sol": "pragma solidity ^0.5.9;\n\nimport \"./LibRichErrors.sol\";\nimport \"./LibSafeMathRichErrors.sol\";\n\n\nlibrary LibSafeMath {\n\n    function safeMul(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        if (c / a != b) {\n            LibRichErrors.rrevert(LibSafeMathRichErrors.Uint256BinOpError(\n                LibSafeMathRichErrors.BinOpErrorCodes.MULTIPLICATION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function safeDiv(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b == 0) {\n            LibRichErrors.rrevert(LibSafeMathRichErrors.Uint256BinOpError(\n                LibSafeMathRichErrors.BinOpErrorCodes.DIVISION_BY_ZERO,\n                a,\n                b\n            ));\n        }\n        uint256 c = a / b;\n        return c;\n    }\n\n    function safeSub(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b > a) {\n            LibRichErrors.rrevert(LibSafeMathRichErrors.Uint256BinOpError(\n                LibSafeMathRichErrors.BinOpErrorCodes.SUBTRACTION_UNDERFLOW,\n                a,\n                b\n            ));\n        }\n        return a - b;\n    }\n\n    function safeAdd(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint256 c = a + b;\n        if (c < a) {\n            LibRichErrors.rrevert(LibSafeMathRichErrors.Uint256BinOpError(\n                LibSafeMathRichErrors.BinOpErrorCodes.ADDITION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function max256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a < b ? a : b;\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/LibRichErrors.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\nlibrary LibRichErrors {\n\n    // bytes4(keccak256(\"Error(string)\"))\n    bytes4 internal constant STANDARD_ERROR_SELECTOR =\n        0x08c379a0;\n\n    // solhint-disable func-name-mixedcase\n    /// @dev ABI encode a standard, string revert error payload.\n    ///      This is the same payload that would be included by a `revert(string)`\n    ///      solidity statement. It has the function signature `Error(string)`.\n    /// @param message The error string.\n    /// @return The ABI encoded error.\n    function StandardError(\n        string memory message\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            STANDARD_ERROR_SELECTOR,\n            bytes(message)\n        );\n    }\n    // solhint-enable func-name-mixedcase\n\n    /// @dev Reverts an encoded rich revert reason `errorData`.\n    /// @param errorData ABI encoded error data.\n    function rrevert(bytes memory errorData)\n        internal\n        pure\n    {\n        assembly {\n            revert(add(errorData, 0x20), mload(errorData))\n        }\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/LibSafeMathRichErrors.sol": "pragma solidity ^0.5.9;\n\n\nlibrary LibSafeMathRichErrors {\n\n    // bytes4(keccak256(\"Uint256BinOpError(uint8,uint256,uint256)\"))\n    bytes4 internal constant UINT256_BINOP_ERROR_SELECTOR =\n        0xe946c1bb;\n\n    // bytes4(keccak256(\"Uint256DowncastError(uint8,uint256)\"))\n    bytes4 internal constant UINT256_DOWNCAST_ERROR_SELECTOR =\n        0xc996af7b;\n\n    enum BinOpErrorCodes {\n        ADDITION_OVERFLOW,\n        MULTIPLICATION_OVERFLOW,\n        SUBTRACTION_UNDERFLOW,\n        DIVISION_BY_ZERO\n    }\n\n    enum DowncastErrorCodes {\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT32,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT64,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT96\n    }\n\n    // solhint-disable func-name-mixedcase\n    function Uint256BinOpError(\n        BinOpErrorCodes errorCode,\n        uint256 a,\n        uint256 b\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            UINT256_BINOP_ERROR_SELECTOR,\n            errorCode,\n            a,\n            b\n        );\n    }\n\n    function Uint256DowncastError(\n        DowncastErrorCodes errorCode,\n        uint256 a\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            UINT256_DOWNCAST_ERROR_SELECTOR,\n            errorCode,\n            a\n        );\n    }\n}\n",
        "@0x/contracts-exchange-libs/contracts/src/LibMath.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\nimport \"@0x/contracts-utils/contracts/src/LibSafeMath.sol\";\nimport \"@0x/contracts-utils/contracts/src/LibRichErrors.sol\";\nimport \"./LibMathRichErrors.sol\";\n\n\nlibrary LibMath {\n\n    using LibSafeMath for uint256;\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    ///      Reverts if rounding error is >= 0.1%\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return Partial value of target rounded down.\n    function safeGetPartialAmountFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        if (isRoundingErrorFloor(\n                numerator,\n                denominator,\n                target\n        )) {\n            LibRichErrors.rrevert(LibMathRichErrors.RoundingError(\n                numerator,\n                denominator,\n                target\n            ));\n        }\n\n        partialAmount = numerator.safeMul(target).safeDiv(denominator);\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    ///      Reverts if rounding error is >= 0.1%\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return Partial value of target rounded up.\n    function safeGetPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        if (isRoundingErrorCeil(\n                numerator,\n                denominator,\n                target\n        )) {\n            LibRichErrors.rrevert(LibMathRichErrors.RoundingError(\n                numerator,\n                denominator,\n                target\n            ));\n        }\n\n        // safeDiv computes `floor(a / b)`. We use the identity (a, b integer):\n        //       ceil(a / b) = floor((a + b - 1) / b)\n        // To implement `ceil(a / b)` using safeDiv.\n        partialAmount = numerator.safeMul(target)\n            .safeAdd(denominator.safeSub(1))\n            .safeDiv(denominator);\n\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return Partial value of target rounded down.\n    function getPartialAmountFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        partialAmount = numerator.safeMul(target).safeDiv(denominator);\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return Partial value of target rounded up.\n    function getPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        // safeDiv computes `floor(a / b)`. We use the identity (a, b integer):\n        //       ceil(a / b) = floor((a + b - 1) / b)\n        // To implement `ceil(a / b)` using safeDiv.\n        partialAmount = numerator.safeMul(target)\n            .safeAdd(denominator.safeSub(1))\n            .safeDiv(denominator);\n\n        return partialAmount;\n    }\n\n    /// @dev Checks if rounding error >= 0.1% when rounding down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to multiply with numerator/denominator.\n    /// @return Rounding error is present.\n    function isRoundingErrorFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bool isError)\n    {\n        if (denominator == 0) {\n            LibRichErrors.rrevert(LibMathRichErrors.DivisionByZeroError());\n        }\n\n        // The absolute rounding error is the difference between the rounded\n        // value and the ideal value. The relative rounding error is the\n        // absolute rounding error divided by the absolute value of the\n        // ideal value. This is undefined when the ideal value is zero.\n        //\n        // The ideal value is `numerator * target / denominator`.\n        // Let's call `numerator * target % denominator` the remainder.\n        // The absolute error is `remainder / denominator`.\n        //\n        // When the ideal value is zero, we require the absolute error to\n        // be zero. Fortunately, this is always the case. The ideal value is\n        // zero iff `numerator == 0` and/or `target == 0`. In this case the\n        // remainder and absolute error are also zero.\n        if (target == 0 || numerator == 0) {\n            return false;\n        }\n\n        // Otherwise, we want the relative rounding error to be strictly\n        // less than 0.1%.\n        // The relative error is `remainder / (numerator * target)`.\n        // We want the relative error less than 1 / 1000:\n        //        remainder / (numerator * denominator)  <  1 / 1000\n        // or equivalently:\n        //        1000 * remainder  <  numerator * target\n        // so we have a rounding error iff:\n        //        1000 * remainder  >=  numerator * target\n        uint256 remainder = mulmod(\n            target,\n            numerator,\n            denominator\n        );\n        isError = remainder.safeMul(1000) >= numerator.safeMul(target);\n        return isError;\n    }\n\n    /// @dev Checks if rounding error >= 0.1% when rounding up.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to multiply with numerator/denominator.\n    /// @return Rounding error is present.\n    function isRoundingErrorCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bool isError)\n    {\n        if (denominator == 0) {\n            LibRichErrors.rrevert(LibMathRichErrors.DivisionByZeroError());\n        }\n\n        // See the comments in `isRoundingError`.\n        if (target == 0 || numerator == 0) {\n            // When either is zero, the ideal value and rounded value are zero\n            // and there is no rounding error. (Although the relative error\n            // is undefined.)\n            return false;\n        }\n        // Compute remainder as before\n        uint256 remainder = mulmod(\n            target,\n            numerator,\n            denominator\n        );\n        remainder = denominator.safeSub(remainder) % denominator;\n        isError = remainder.safeMul(1000) >= numerator.safeMul(target);\n        return isError;\n    }\n}\n",
        "@0x/contracts-exchange-libs/contracts/src/LibMathRichErrors.sol": "pragma solidity ^0.5.9;\n\n\nlibrary LibMathRichErrors {\n\n    // bytes4(keccak256(\"DivisionByZeroError()\"))\n    bytes internal constant DIVISION_BY_ZERO_ERROR =\n        hex\"a791837c\";\n\n    // bytes4(keccak256(\"RoundingError(uint256,uint256,uint256)\"))\n    bytes4 internal constant ROUNDING_ERROR_SELECTOR =\n        0x339f3de2;\n\n    // solhint-disable func-name-mixedcase\n    function DivisionByZeroError()\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return DIVISION_BY_ZERO_ERROR;\n    }\n\n    function RoundingError(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            ROUNDING_ERROR_SELECTOR,\n            numerator,\n            denominator,\n            target\n        );\n    }\n}\n",
        "@0x/contracts-exchange/contracts/src/interfaces/IProtocolFees.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\ncontract IProtocolFees {\n\n    // Logs updates to the protocol fee multiplier.\n    event ProtocolFeeMultiplier(uint256 oldProtocolFeeMultiplier, uint256 updatedProtocolFeeMultiplier);\n\n    // Logs updates to the protocolFeeCollector address.\n    event ProtocolFeeCollectorAddress(address oldProtocolFeeCollector, address updatedProtocolFeeCollector);\n\n    /// @dev Allows the owner to update the protocol fee multiplier.\n    /// @param updatedProtocolFeeMultiplier The updated protocol fee multiplier.\n    function setProtocolFeeMultiplier(uint256 updatedProtocolFeeMultiplier)\n        external;\n\n    /// @dev Allows the owner to update the protocolFeeCollector address.\n    /// @param updatedProtocolFeeCollector The updated protocolFeeCollector contract address.\n    function setProtocolFeeCollectorAddress(address updatedProtocolFeeCollector)\n        external;\n\n    /// @dev Returns the protocolFeeMultiplier\n    function protocolFeeMultiplier()\n        external\n        view\n        returns (uint256);\n\n    /// @dev Returns the protocolFeeCollector address\n    function protocolFeeCollector()\n        external\n        view\n        returns (address);\n}\n",
        "@0x/contracts-exchange/contracts/src/interfaces/IMatchOrders.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-exchange-libs/contracts/src/LibOrder.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/LibFillResults.sol\";\n\n\ncontract IMatchOrders {\n\n    /// @dev Match complementary orders that have a profitable spread.\n    ///      Each order is filled at their respective price point, and\n    ///      the matcher receives a profit denominated in the left maker asset.\n    /// @param leftOrders Set of orders with the same maker / taker asset.\n    /// @param rightOrders Set of orders to match against `leftOrders`\n    /// @param leftSignatures Proof that left orders were created by the left makers.\n    /// @param rightSignatures Proof that right orders were created by the right makers.\n    /// @return batchMatchedFillResults Amounts filled and profit generated.\n    function batchMatchOrders(\n        LibOrder.Order[] memory leftOrders,\n        LibOrder.Order[] memory rightOrders,\n        bytes[] memory leftSignatures,\n        bytes[] memory rightSignatures\n    )\n        public\n        payable\n        returns (LibFillResults.BatchMatchedFillResults memory batchMatchedFillResults);\n\n    /// @dev Match complementary orders that have a profitable spread.\n    ///      Each order is maximally filled at their respective price point, and\n    ///      the matcher receives a profit denominated in either the left maker asset,\n    ///      right maker asset, or a combination of both.\n    /// @param leftOrders Set of orders with the same maker / taker asset.\n    /// @param rightOrders Set of orders to match against `leftOrders`\n    /// @param leftSignatures Proof that left orders were created by the left makers.\n    /// @param rightSignatures Proof that right orders were created by the right makers.\n    /// @return batchMatchedFillResults Amounts filled and profit generated.\n    function batchMatchOrdersWithMaximalFill(\n        LibOrder.Order[] memory leftOrders,\n        LibOrder.Order[] memory rightOrders,\n        bytes[] memory leftSignatures,\n        bytes[] memory rightSignatures\n    )\n        public\n        payable\n        returns (LibFillResults.BatchMatchedFillResults memory batchMatchedFillResults);\n\n    /// @dev Match two complementary orders that have a profitable spread.\n    ///      Each order is filled at their respective price point. However, the calculations are\n    ///      carried out as though the orders are both being filled at the right order's price point.\n    ///      The profit made by the left order goes to the taker (who matched the two orders).\n    /// @param leftOrder First order to match.\n    /// @param rightOrder Second order to match.\n    /// @param leftSignature Proof that order was created by the left maker.\n    /// @param rightSignature Proof that order was created by the right maker.\n    /// @return matchedFillResults Amounts filled and fees paid by maker and taker of matched orders.\n    function matchOrders(\n        LibOrder.Order memory leftOrder,\n        LibOrder.Order memory rightOrder,\n        bytes memory leftSignature,\n        bytes memory rightSignature\n    )\n        public\n        payable\n        returns (LibFillResults.MatchedFillResults memory matchedFillResults);\n\n    /// @dev Match two complementary orders that have a profitable spread.\n    ///      Each order is maximally filled at their respective price point, and\n    ///      the matcher receives a profit denominated in either the left maker asset,\n    ///      right maker asset, or a combination of both.\n    /// @param leftOrder First order to match.\n    /// @param rightOrder Second order to match.\n    /// @param leftSignature Proof that order was created by the left maker.\n    /// @param rightSignature Proof that order was created by the right maker.\n    /// @return matchedFillResults Amounts filled by maker and taker of matched orders.\n    function matchOrdersWithMaximalFill(\n        LibOrder.Order memory leftOrder,\n        LibOrder.Order memory rightOrder,\n        bytes memory leftSignature,\n        bytes memory rightSignature\n    )\n        public\n        payable\n        returns (LibFillResults.MatchedFillResults memory matchedFillResults);\n}\n",
        "@0x/contracts-exchange/contracts/src/interfaces/ISignatureValidator.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-exchange-libs/contracts/src/LibOrder.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/LibZeroExTransaction.sol\";\n\n\ncontract ISignatureValidator {\n\n   // Allowed signature types.\n    enum SignatureType {\n        Illegal,                     // 0x00, default value\n        Invalid,                     // 0x01\n        EIP712,                      // 0x02\n        EthSign,                     // 0x03\n        Wallet,                      // 0x04\n        Validator,                   // 0x05\n        PreSigned,                   // 0x06\n        EIP1271Wallet,               // 0x07\n        NSignatureTypes              // 0x08, number of signature types. Always leave at end.\n    }\n\n    event SignatureValidatorApproval(\n        address indexed signerAddress,     // Address that approves or disapproves a contract to verify signatures.\n        address indexed validatorAddress,  // Address of signature validator contract.\n        bool isApproved                    // Approval or disapproval of validator contract.\n    );\n\n    /// @dev Approves a hash on-chain.\n    ///      After presigning a hash, the preSign signature type will become valid for that hash and signer.\n    /// @param hash Any 32-byte hash.\n    function preSign(bytes32 hash)\n        external\n        payable;\n\n    /// @dev Approves/unnapproves a Validator contract to verify signatures on signer's behalf.\n    /// @param validatorAddress Address of Validator contract.\n    /// @param approval Approval or disapproval of  Validator contract.\n    function setSignatureValidatorApproval(\n        address validatorAddress,\n        bool approval\n    )\n        external\n        payable;\n\n    /// @dev Verifies that a hash has been signed by the given signer.\n    /// @param hash Any 32-byte hash.\n    /// @param signature Proof that the hash has been signed by signer.\n    /// @return isValid `true` if the signature is valid for the given hash and signer.\n    function isValidHashSignature(\n        bytes32 hash,\n        address signerAddress,\n        bytes memory signature\n    )\n        public\n        view\n        returns (bool isValid);\n\n    /// @dev Verifies that a signature for an order is valid.\n    /// @param order The order.\n    /// @param signature Proof that the order has been signed by signer.\n    /// @return isValid true if the signature is valid for the given order and signer.\n    function isValidOrderSignature(\n        LibOrder.Order memory order,\n        bytes memory signature\n    )\n        public\n        view\n        returns (bool isValid);\n\n    /// @dev Verifies that a signature for a transaction is valid.\n    /// @param transaction The transaction.\n    /// @param signature Proof that the order has been signed by signer.\n    /// @return isValid true if the signature is valid for the given transaction and signer.\n    function isValidTransactionSignature(\n        LibZeroExTransaction.ZeroExTransaction memory transaction,\n        bytes memory signature\n    )\n        public\n        view\n        returns (bool isValid);\n\n    /// @dev Verifies that an order, with provided order hash, has been signed\n    ///      by the given signer.\n    /// @param order The order.\n    /// @param orderHash The hash of the order.\n    /// @param signature Proof that the hash has been signed by signer.\n    /// @return isValid True if the signature is valid for the given order and signer.\n    function _isValidOrderWithHashSignature(\n        LibOrder.Order memory order,\n        bytes32 orderHash,\n        bytes memory signature\n    )\n        internal\n        view\n        returns (bool isValid);\n\n    /// @dev Verifies that a transaction, with provided order hash, has been signed\n    ///      by the given signer.\n    /// @param transaction The transaction.\n    /// @param transactionHash The hash of the transaction.\n    /// @param signature Proof that the hash has been signed by signer.\n    /// @return isValid True if the signature is valid for the given transaction and signer.\n    function _isValidTransactionWithHashSignature(\n        LibZeroExTransaction.ZeroExTransaction memory transaction,\n        bytes32 transactionHash,\n        bytes memory signature\n    )\n        internal\n        view\n        returns (bool isValid);\n}\n",
        "@0x/contracts-exchange-libs/contracts/src/LibZeroExTransaction.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/LibEIP712.sol\";\n\n\nlibrary LibZeroExTransaction {\n\n    using LibZeroExTransaction for ZeroExTransaction;\n\n    // Hash for the EIP712 0x transaction schema\n    // keccak256(abi.encodePacked(\n    //    \"ZeroExTransaction(\",\n    //    \"uint256 salt,\",\n    //    \"uint256 expirationTimeSeconds,\",\n    //    \"uint256 gasPrice,\",\n    //    \"address signerAddress,\",\n    //    \"bytes data\",\n    //    \")\"\n    // ));\n    bytes32 constant internal _EIP712_ZEROEX_TRANSACTION_SCHEMA_HASH = 0xec69816980a3a3ca4554410e60253953e9ff375ba4536a98adfa15cc71541508;\n\n    struct ZeroExTransaction {\n        uint256 salt;                   // Arbitrary number to ensure uniqueness of transaction hash.\n        uint256 expirationTimeSeconds;  // Timestamp in seconds at which transaction expires.\n        uint256 gasPrice;               // gasPrice that transaction is required to be executed with.\n        address signerAddress;          // Address of transaction signer.\n        bytes data;                     // AbiV2 encoded calldata.\n    }\n\n    /// @dev Calculates the EIP712 typed data hash of a transaction with a given domain separator.\n    /// @param transaction 0x transaction structure.\n    /// @return EIP712 typed data hash of the transaction.\n    function getTypedDataHash(ZeroExTransaction memory transaction, bytes32 eip712ExchangeDomainHash)\n        internal\n        pure\n        returns (bytes32 transactionHash)\n    {\n        // Hash the transaction with the domain separator of the Exchange contract.\n        transactionHash = LibEIP712.hashEIP712Message(\n            eip712ExchangeDomainHash,\n            transaction.getStructHash()\n        );\n        return transactionHash;\n    }\n\n    /// @dev Calculates EIP712 hash of the 0x transaction struct.\n    /// @param transaction 0x transaction structure.\n    /// @return EIP712 hash of the transaction struct.\n    function getStructHash(ZeroExTransaction memory transaction)\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        bytes32 schemaHash = _EIP712_ZEROEX_TRANSACTION_SCHEMA_HASH;\n        bytes memory data = transaction.data;\n        uint256 salt = transaction.salt;\n        uint256 expirationTimeSeconds = transaction.expirationTimeSeconds;\n        uint256 gasPrice = transaction.gasPrice;\n        address signerAddress = transaction.signerAddress;\n\n        // Assembly for more efficiently computing:\n        // result = keccak256(abi.encodePacked(\n        //     schemaHash,\n        //     salt,\n        //     expirationTimeSeconds,\n        //     gasPrice,\n        //     uint256(signerAddress),\n        //     keccak256(data)\n        // ));\n\n        assembly {\n            // Compute hash of data\n            let dataHash := keccak256(add(data, 32), mload(data))\n\n            // Load free memory pointer\n            let memPtr := mload(64)\n\n            mstore(memPtr, schemaHash)                                                                // hash of schema\n            mstore(add(memPtr, 32), salt)                                                             // salt\n            mstore(add(memPtr, 64), expirationTimeSeconds)                                            // expirationTimeSeconds\n            mstore(add(memPtr, 96), gasPrice)                                                         // gasPrice\n            mstore(add(memPtr, 128), and(signerAddress, 0xffffffffffffffffffffffffffffffffffffffff))  // signerAddress\n            mstore(add(memPtr, 160), dataHash)                                                        // hash of data\n\n            // Compute hash\n            result := keccak256(memPtr, 192)\n        }\n        return result;\n    }\n}\n",
        "@0x/contracts-exchange/contracts/src/interfaces/ITransactions.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-exchange-libs/contracts/src/LibZeroExTransaction.sol\";\n\n\ncontract ITransactions {\n\n    // TransactionExecution event is emitted when a ZeroExTransaction is executed.\n    event TransactionExecution(bytes32 indexed transactionHash);\n\n    /// @dev Executes an Exchange method call in the context of signer.\n    /// @param transaction 0x transaction containing salt, signerAddress, and data.\n    /// @param signature Proof that transaction has been signed by signer.\n    /// @return ABI encoded return data of the underlying Exchange function call.\n    function executeTransaction(\n        LibZeroExTransaction.ZeroExTransaction memory transaction,\n        bytes memory signature\n    )\n        public\n        payable\n        returns (bytes memory);\n\n    /// @dev Executes a batch of Exchange method calls in the context of signer(s).\n    /// @param transactions Array of 0x transactions containing salt, signerAddress, and data.\n    /// @param signatures Array of proofs that transactions have been signed by signer(s).\n    /// @return Array containing ABI encoded return data for each of the underlying Exchange function calls.\n    function batchExecuteTransactions(\n        LibZeroExTransaction.ZeroExTransaction[] memory transactions,\n        bytes[] memory signatures\n    )\n        public\n        payable\n        returns (bytes[] memory);\n\n    /// @dev The current function will be called in the context of this address (either 0x transaction signer or `msg.sender`).\n    ///      If calling a fill function, this address will represent the taker.\n    ///      If calling a cancel function, this address will represent the maker.\n    /// @return Signer of 0x transaction if entry point is `executeTransaction`.\n    ///         `msg.sender` if entry point is any other function.\n    function _getCurrentContextAddress()\n        internal\n        view\n        returns (address);\n}\n",
        "@0x/contracts-exchange/contracts/src/interfaces/IAssetProxyDispatcher.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\ncontract IAssetProxyDispatcher {\n\n    // Logs registration of new asset proxy\n    event AssetProxyRegistered(\n        bytes4 id,              // Id of new registered AssetProxy.\n        address assetProxy      // Address of new registered AssetProxy.\n    );\n\n    /// @dev Registers an asset proxy to its asset proxy id.\n    ///      Once an asset proxy is registered, it cannot be unregistered.\n    /// @param assetProxy Address of new asset proxy to register.\n    function registerAssetProxy(address assetProxy)\n        external;\n\n    /// @dev Gets an asset proxy.\n    /// @param assetProxyId Id of the asset proxy.\n    /// @return The asset proxy registered to assetProxyId. Returns 0x0 if no proxy is registered.\n    function getAssetProxy(bytes4 assetProxyId)\n        external\n        view\n        returns (address);\n}\n",
        "@0x/contracts-exchange/contracts/src/interfaces/IWrapperFunctions.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-exchange-libs/contracts/src/LibOrder.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/LibFillResults.sol\";\n\n\ncontract IWrapperFunctions {\n\n    /// @dev Fills the input order. Reverts if exact takerAssetFillAmount not filled.\n    /// @param order Order struct containing order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signature Proof that order has been created by maker.\n    function fillOrKillOrder(\n        LibOrder.Order memory order,\n        uint256 takerAssetFillAmount,\n        bytes memory signature\n    )\n        public\n        payable\n        returns (LibFillResults.FillResults memory fillResults);\n\n    /// @dev Executes multiple calls of fillOrder.\n    /// @param orders Array of order specifications.\n    /// @param takerAssetFillAmounts Array of desired amounts of takerAsset to sell in orders.\n    /// @param signatures Proofs that orders have been created by makers.\n    /// @return Array of amounts filled and fees paid by makers and taker.\n    function batchFillOrders(\n        LibOrder.Order[] memory orders,\n        uint256[] memory takerAssetFillAmounts,\n        bytes[] memory signatures\n    )\n        public\n        payable\n        returns (LibFillResults.FillResults[] memory fillResults);\n\n    /// @dev Executes multiple calls of fillOrKillOrder.\n    /// @param orders Array of order specifications.\n    /// @param takerAssetFillAmounts Array of desired amounts of takerAsset to sell in orders.\n    /// @param signatures Proofs that orders have been created by makers.\n    /// @return Array of amounts filled and fees paid by makers and taker.\n    function batchFillOrKillOrders(\n        LibOrder.Order[] memory orders,\n        uint256[] memory takerAssetFillAmounts,\n        bytes[] memory signatures\n    )\n        public\n        payable\n        returns (LibFillResults.FillResults[] memory fillResults);\n\n    /// @dev Executes multiple calls of fillOrder. If any fill reverts, the error is caught and ignored.\n    /// @param orders Array of order specifications.\n    /// @param takerAssetFillAmounts Array of desired amounts of takerAsset to sell in orders.\n    /// @param signatures Proofs that orders have been created by makers.\n    /// @return Array of amounts filled and fees paid by makers and taker.\n    function batchFillOrdersNoThrow(\n        LibOrder.Order[] memory orders,\n        uint256[] memory takerAssetFillAmounts,\n        bytes[] memory signatures\n    )\n        public\n        payable\n        returns (LibFillResults.FillResults[] memory fillResults);\n\n    /// @dev Executes multiple calls of fillOrder until total amount of takerAsset is sold by taker.\n    ///      If any fill reverts, the error is caught and ignored.\n    ///      NOTE: This function does not enforce that the takerAsset is the same for each order.\n    /// @param orders Array of order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signatures Proofs that orders have been signed by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    function marketSellOrdersNoThrow(\n        LibOrder.Order[] memory orders,\n        uint256 takerAssetFillAmount,\n        bytes[] memory signatures\n    )\n        public\n        payable\n        returns (LibFillResults.FillResults memory fillResults);\n\n    /// @dev Executes multiple calls of fillOrder until total amount of makerAsset is bought by taker.\n    ///      If any fill reverts, the error is caught and ignored.\n    ///      NOTE: This function does not enforce that the makerAsset is the same for each order.\n    /// @param orders Array of order specifications.\n    /// @param makerAssetFillAmount Desired amount of makerAsset to buy.\n    /// @param signatures Proofs that orders have been signed by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    function marketBuyOrdersNoThrow(\n        LibOrder.Order[] memory orders,\n        uint256 makerAssetFillAmount,\n        bytes[] memory signatures\n    )\n        public\n        payable\n        returns (LibFillResults.FillResults memory fillResults);\n\n    /// @dev Calls marketSellOrdersNoThrow then reverts if < takerAssetFillAmount has been sold.\n    ///      NOTE: This function does not enforce that the takerAsset is the same for each order.\n    /// @param orders Array of order specifications.\n    /// @param takerAssetFillAmount Minimum amount of takerAsset to sell.\n    /// @param signatures Proofs that orders have been signed by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    function marketSellOrdersFillOrKill(\n        LibOrder.Order[] memory orders,\n        uint256 takerAssetFillAmount,\n        bytes[] memory signatures\n    )\n        public\n        payable\n        returns (LibFillResults.FillResults memory fillResults);\n\n    /// @dev Calls marketBuyOrdersNoThrow then reverts if < makerAssetFillAmount has been bought.\n    ///      NOTE: This function does not enforce that the makerAsset is the same for each order.\n    /// @param orders Array of order specifications.\n    /// @param makerAssetFillAmount Minimum amount of makerAsset to buy.\n    /// @param signatures Proofs that orders have been signed by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    function marketBuyOrdersFillOrKill(\n        LibOrder.Order[] memory orders,\n        uint256 makerAssetFillAmount,\n        bytes[] memory signatures\n    )\n        public\n        payable\n        returns (LibFillResults.FillResults memory fillResults);\n\n    /// @dev Executes multiple calls of cancelOrder.\n    /// @param orders Array of order specifications.\n    function batchCancelOrders(LibOrder.Order[] memory orders)\n        public\n        payable;\n}\n",
        "@0x/contracts-exchange/contracts/src/interfaces/ITransferSimulator.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\n\ncontract ITransferSimulator {\n\n    /// @dev This function may be used to simulate any amount of transfers\n    /// As they would occur through the Exchange contract. Note that this function\n    /// will always revert, even if all transfers are successful. However, it may\n    /// be used with eth_call or with a try/catch pattern in order to simulate\n    /// the results of the transfers.\n    /// @param assetData Array of asset details, each encoded per the AssetProxy contract specification.\n    /// @param fromAddresses Array containing the `from` addresses that correspond with each transfer.\n    /// @param toAddresses Array containing the `to` addresses that correspond with each transfer.\n    /// @param amounts Array containing the amounts that correspond to each transfer.\n    /// @return This function does not return a value. However, it will always revert with\n    /// `Error(\"TRANSFERS_SUCCESSFUL\")` if all of the transfers were successful.\n    function simulateDispatchTransferFromCalls(\n        bytes[] memory assetData,\n        address[] memory fromAddresses,\n        address[] memory toAddresses,\n        uint256[] memory amounts\n    )\n        public;\n}\n",
        "@0x/contracts-utils/contracts/src/LibBytes.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\nimport \"./LibBytesRichErrors.sol\";\nimport \"./LibRichErrors.sol\";\n\n\nlibrary LibBytes {\n\n    using LibBytes for bytes;\n\n    /// @dev Gets the memory address for a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of byte array. This\n    ///         points to the header of the byte array which contains\n    ///         the length.\n    function rawAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := input\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Gets the memory address for the contents of a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of the contents of the byte array.\n    function contentAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := add(input, 32)\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Copies `length` bytes from memory location `source` to `dest`.\n    /// @param dest memory address to copy bytes to.\n    /// @param source memory address to copy bytes from.\n    /// @param length number of bytes to copy.\n    function memCopy(\n        uint256 dest,\n        uint256 source,\n        uint256 length\n    )\n        internal\n        pure\n    {\n        if (length < 32) {\n            // Handle a partial word by reading destination and masking\n            // off the bits we are interested in.\n            // This correctly handles overlap, zero lengths and source == dest\n            assembly {\n                let mask := sub(exp(256, sub(32, length)), 1)\n                let s := and(mload(source), not(mask))\n                let d := and(mload(dest), mask)\n                mstore(dest, or(s, d))\n            }\n        } else {\n            // Skip the O(length) loop when source == dest.\n            if (source == dest) {\n                return;\n            }\n\n            // For large copies we copy whole words at a time. The final\n            // word is aligned to the end of the range (instead of after the\n            // previous) to handle partial words. So a copy will look like this:\n            //\n            //  ####\n            //      ####\n            //          ####\n            //            ####\n            //\n            // We handle overlap in the source and destination range by\n            // changing the copying direction. This prevents us from\n            // overwriting parts of source that we still need to copy.\n            //\n            // This correctly handles source == dest\n            //\n            if (source > dest) {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because it\n                    // is easier to compare with in the loop, and these\n                    // are also the addresses we need for copying the\n                    // last bytes.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the last 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the last bytes in\n                    // source already due to overlap.\n                    let last := mload(sEnd)\n\n                    // Copy whole words front to back\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} lt(source, sEnd) {} {\n                        mstore(dest, mload(source))\n                        source := add(source, 32)\n                        dest := add(dest, 32)\n                    }\n\n                    // Write the last 32 bytes\n                    mstore(dEnd, last)\n                }\n            } else {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because those\n                    // are the starting points when copying a word at the end.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the first 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the first bytes in\n                    // source already due to overlap.\n                    let first := mload(source)\n\n                    // Copy whole words back to front\n                    // We use a signed comparisson here to allow dEnd to become\n                    // negative (happens when source and dest < 32). Valid\n                    // addresses in local memory will never be larger than\n                    // 2**255, so they can be safely re-interpreted as signed.\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} slt(dest, dEnd) {} {\n                        mstore(dEnd, mload(sEnd))\n                        sEnd := sub(sEnd, 32)\n                        dEnd := sub(dEnd, 32)\n                    }\n\n                    // Write the first 32 bytes\n                    mstore(dest, first)\n                }\n            }\n        }\n    }\n\n    /// @dev Returns a slices from a byte array.\n    /// @param b The byte array to take a slice from.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function slice(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure and copy contents\n        result = new bytes(to - from);\n        memCopy(\n            result.contentAddress(),\n            b.contentAddress() + from,\n            result.length\n        );\n        return result;\n    }\n\n    /// @dev Returns a slice from a byte array without preserving the input.\n    /// @param b The byte array to take a slice from. Will be destroyed in the process.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    /// @dev When `from == 0`, the original array will match the slice. In other cases its state will be corrupted.\n    function sliceDestructive(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure around [from, to) in-place.\n        assembly {\n            result := add(b, from)\n            mstore(result, sub(to, from))\n        }\n        return result;\n    }\n\n    /// @dev Pops the last byte off of a byte array by modifying its length.\n    /// @param b Byte array that will be modified.\n    /// @return The byte that was popped off.\n    function popLastByte(bytes memory b)\n        internal\n        pure\n        returns (bytes1 result)\n    {\n        if (b.length == 0) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.LengthGreaterThanZeroRequired,\n                b.length,\n                0\n            ));\n        }\n\n        // Store last byte.\n        result = b[b.length - 1];\n\n        assembly {\n            // Decrement length of byte array.\n            let newLen := sub(mload(b), 1)\n            mstore(b, newLen)\n        }\n        return result;\n    }\n\n    /// @dev Tests equality of two byte arrays.\n    /// @param lhs First byte array to compare.\n    /// @param rhs Second byte array to compare.\n    /// @return True if arrays are the same. False otherwise.\n    function equals(\n        bytes memory lhs,\n        bytes memory rhs\n    )\n        internal\n        pure\n        returns (bool equal)\n    {\n        // Keccak gas cost is 30 + numWords * 6. This is a cheap way to compare.\n        // We early exit on unequal lengths, but keccak would also correctly\n        // handle this.\n        return lhs.length == rhs.length && keccak256(lhs) == keccak256(rhs);\n    }\n\n    /// @dev Reads an address from a position in a byte array.\n    /// @param b Byte array containing an address.\n    /// @param index Index in byte array of address.\n    /// @return address from byte array.\n    function readAddress(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (address result)\n    {\n        if (b.length < index + 20) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Read address from array memory\n        assembly {\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 20-byte mask to obtain address\n            result := and(mload(add(b, index)), 0xffffffffffffffffffffffffffffffffffffffff)\n        }\n        return result;\n    }\n\n    /// @dev Writes an address into a specific position in a byte array.\n    /// @param b Byte array to insert address into.\n    /// @param index Index in byte array of address.\n    /// @param input Address to put into byte array.\n    function writeAddress(\n        bytes memory b,\n        uint256 index,\n        address input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 20) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Store address into array memory\n        assembly {\n            // The address occupies 20 bytes and mstore stores 32 bytes.\n            // First fetch the 32-byte word where we'll be storing the address, then\n            // apply a mask so we have only the bytes in the word that the address will not occupy.\n            // Then combine these bytes with the address and store the 32 bytes back to memory with mstore.\n\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 12-byte mask to obtain extra bytes occupying word of memory where we'll store the address\n            let neighbors := and(\n                mload(add(b, index)),\n                0xffffffffffffffffffffffff0000000000000000000000000000000000000000\n            )\n\n            // Make sure input address is clean.\n            // (Solidity does not guarantee this)\n            input := and(input, 0xffffffffffffffffffffffffffffffffffffffff)\n\n            // Store the neighbors and address into memory\n            mstore(add(b, index), xor(input, neighbors))\n        }\n    }\n\n    /// @dev Reads a bytes32 value from a position in a byte array.\n    /// @param b Byte array containing a bytes32 value.\n    /// @param index Index in byte array of bytes32 value.\n    /// @return bytes32 value from byte array.\n    function readBytes32(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        if (b.length < index + 32) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            result := mload(add(b, index))\n        }\n        return result;\n    }\n\n    /// @dev Writes a bytes32 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input bytes32 to put into byte array.\n    function writeBytes32(\n        bytes memory b,\n        uint256 index,\n        bytes32 input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 32) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            mstore(add(b, index), input)\n        }\n    }\n\n    /// @dev Reads a uint256 value from a position in a byte array.\n    /// @param b Byte array containing a uint256 value.\n    /// @param index Index in byte array of uint256 value.\n    /// @return uint256 value from byte array.\n    function readUint256(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (uint256 result)\n    {\n        result = uint256(readBytes32(b, index));\n        return result;\n    }\n\n    /// @dev Writes a uint256 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input uint256 to put into byte array.\n    function writeUint256(\n        bytes memory b,\n        uint256 index,\n        uint256 input\n    )\n        internal\n        pure\n    {\n        writeBytes32(b, index, bytes32(input));\n    }\n\n    /// @dev Reads an unpadded bytes4 value from a position in a byte array.\n    /// @param b Byte array containing a bytes4 value.\n    /// @param index Index in byte array of bytes4 value.\n    /// @return bytes4 value from byte array.\n    function readBytes4(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes4 result)\n    {\n        if (b.length < index + 4) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsFourRequired,\n                b.length,\n                index + 4\n            ));\n        }\n\n        // Arrays are prefixed by a 32 byte length field\n        index += 32;\n\n        // Read the bytes4 from array memory\n        assembly {\n            result := mload(add(b, index))\n            // Solidity does not require us to clean the trailing bytes.\n            // We do it anyway\n            result := and(result, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)\n        }\n        return result;\n    }\n\n    /// @dev Writes a new length to a byte array.\n    ///      Decreasing length will lead to removing the corresponding lower order bytes from the byte array.\n    ///      Increasing length may lead to appending adjacent in-memory bytes to the end of the byte array.\n    /// @param b Bytes array to write new length to.\n    /// @param length New length of byte array.\n    function writeLength(bytes memory b, uint256 length)\n        internal\n        pure\n    {\n        assembly {\n            mstore(b, length)\n        }\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/LibBytesRichErrors.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\nlibrary LibBytesRichErrors {\n\n    enum InvalidByteOperationErrorCodes {\n        FromLessThanOrEqualsToRequired,\n        ToLessThanOrEqualsLengthRequired,\n        LengthGreaterThanZeroRequired,\n        LengthGreaterThanOrEqualsFourRequired,\n        LengthGreaterThanOrEqualsTwentyRequired,\n        LengthGreaterThanOrEqualsThirtyTwoRequired,\n        LengthGreaterThanOrEqualsNestedBytesLengthRequired,\n        DestinationLengthGreaterThanOrEqualSourceLengthRequired\n    }\n\n    // bytes4(keccak256(\"InvalidByteOperationError(uint8,uint256,uint256)\"))\n    bytes4 internal constant INVALID_BYTE_OPERATION_ERROR_SELECTOR =\n        0x28006595;\n\n    // solhint-disable func-name-mixedcase\n    function InvalidByteOperationError(\n        InvalidByteOperationErrorCodes errorCode,\n        uint256 offset,\n        uint256 required\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            INVALID_BYTE_OPERATION_ERROR_SELECTOR,\n            errorCode,\n            offset,\n            required\n        );\n    }\n}\n"
    },
    "compiler": {
        "name": "solc",
        "version": "0.5.17+commit.d19bba13",
        "settings": {
            "remappings": [
                "@0x/contracts-asset-proxy=/Users/rickmorty/Documents/projects/0x/0x-monorepo/node_modules/@0x/contracts-asset-proxy",
                "@0x/contracts-exchange=/Users/rickmorty/Documents/projects/0x/0x-monorepo/node_modules/@0x/contracts-exchange",
                "@0x/contracts-exchange-libs=/Users/rickmorty/Documents/projects/0x/0x-monorepo/node_modules/@0x/contracts-exchange-libs",
                "@0x/contracts-utils=/Users/rickmorty/Documents/projects/0x/0x-monorepo/node_modules/@0x/contracts-utils",
                "@0x/contracts-erc20=/Users/rickmorty/Documents/projects/0x/0x-monorepo/node_modules/@0x/contracts-erc20",
                "@0x/contracts-erc721=/Users/rickmorty/Documents/projects/0x/0x-monorepo/node_modules/@0x/contracts-erc721",
                "@0x/contracts-erc1155=/Users/rickmorty/Documents/projects/0x/0x-monorepo/node_modules/@0x/contracts-erc1155"
            ],
            "optimizer": {
                "enabled": true,
                "runs": 5000,
                "details": {
                    "yul": true,
                    "deduplicate": true,
                    "cse": true,
                    "constantOptimizer": true
                }
            },
            "outputSelection": {
                "*": {
                    "*": [
                        "abi",
                        "devdoc",
                        "evm.bytecode.object",
                        "evm.bytecode.sourceMap",
                        "evm.deployedBytecode.object",
                        "evm.deployedBytecode.sourceMap"
                    ]
                }
            },
            "evmVersion": "istanbul"
        }
    },
    "chains": {}
}
