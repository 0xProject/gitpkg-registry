{
    "schemaVersion": "2.0.0",
    "contractName": "TestEth2DaiBridge",
    "compilerOutput": {
        "abi": [
            {
                "anonymous": false,
                "inputs": [
                    {
                        "indexed": false,
                        "internalType": "address",
                        "name": "inputToken",
                        "type": "address"
                    },
                    {
                        "indexed": false,
                        "internalType": "address",
                        "name": "outputToken",
                        "type": "address"
                    },
                    {
                        "indexed": false,
                        "internalType": "uint256",
                        "name": "inputTokenAmount",
                        "type": "uint256"
                    },
                    {
                        "indexed": false,
                        "internalType": "uint256",
                        "name": "outputTokenAmount",
                        "type": "uint256"
                    },
                    {
                        "indexed": false,
                        "internalType": "address",
                        "name": "from",
                        "type": "address"
                    },
                    {
                        "indexed": false,
                        "internalType": "address",
                        "name": "to",
                        "type": "address"
                    }
                ],
                "name": "ERC20BridgeTransfer",
                "type": "event"
            },
            {
                "anonymous": false,
                "inputs": [
                    {
                        "indexed": false,
                        "internalType": "address",
                        "name": "sellToken",
                        "type": "address"
                    },
                    {
                        "indexed": false,
                        "internalType": "uint256",
                        "name": "sellTokenAmount",
                        "type": "uint256"
                    },
                    {
                        "indexed": false,
                        "internalType": "address",
                        "name": "buyToken",
                        "type": "address"
                    },
                    {
                        "indexed": false,
                        "internalType": "uint256",
                        "name": "minimumFillAmount",
                        "type": "uint256"
                    }
                ],
                "name": "SellAllAmount",
                "type": "event"
            },
            {
                "anonymous": false,
                "inputs": [
                    {
                        "indexed": false,
                        "internalType": "address",
                        "name": "token",
                        "type": "address"
                    },
                    {
                        "indexed": false,
                        "internalType": "address",
                        "name": "spender",
                        "type": "address"
                    },
                    {
                        "indexed": false,
                        "internalType": "uint256",
                        "name": "allowance",
                        "type": "uint256"
                    }
                ],
                "name": "TokenApprove",
                "type": "event"
            },
            {
                "anonymous": false,
                "inputs": [
                    {
                        "indexed": false,
                        "internalType": "address",
                        "name": "token",
                        "type": "address"
                    },
                    {
                        "indexed": false,
                        "internalType": "address",
                        "name": "from",
                        "type": "address"
                    },
                    {
                        "indexed": false,
                        "internalType": "address",
                        "name": "to",
                        "type": "address"
                    },
                    {
                        "indexed": false,
                        "internalType": "uint256",
                        "name": "amount",
                        "type": "uint256"
                    }
                ],
                "name": "TokenTransfer",
                "type": "event"
            },
            {
                "constant": false,
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "toTokenAddress",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "from",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "to",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256",
                        "name": "amount",
                        "type": "uint256"
                    },
                    {
                        "internalType": "bytes",
                        "name": "bridgeData",
                        "type": "bytes"
                    }
                ],
                "name": "bridgeTransferFrom",
                "outputs": [
                    {
                        "internalType": "bytes4",
                        "name": "success",
                        "type": "bytes4"
                    }
                ],
                "payable": false,
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "constant": false,
                "inputs": [
                    {
                        "internalType": "uint256",
                        "name": "balance",
                        "type": "uint256"
                    }
                ],
                "name": "createToken",
                "outputs": [
                    {
                        "internalType": "address",
                        "name": "tokenAddress",
                        "type": "address"
                    }
                ],
                "payable": false,
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "internalType": "bytes32",
                        "name": "",
                        "type": "bytes32"
                    },
                    {
                        "internalType": "bytes",
                        "name": "",
                        "type": "bytes"
                    }
                ],
                "name": "isValidSignature",
                "outputs": [
                    {
                        "internalType": "bytes4",
                        "name": "magicValue",
                        "type": "bytes4"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            },
            {
                "constant": false,
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "spender",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256",
                        "name": "allowance",
                        "type": "uint256"
                    }
                ],
                "name": "raiseTokenApprove",
                "outputs": [],
                "payable": false,
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "constant": false,
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "from",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "to",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256",
                        "name": "amount",
                        "type": "uint256"
                    }
                ],
                "name": "raiseTokenTransfer",
                "outputs": [],
                "payable": false,
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "constant": false,
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "sellTokenAddress",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256",
                        "name": "sellTokenAmount",
                        "type": "uint256"
                    },
                    {
                        "internalType": "address",
                        "name": "buyTokenAddress",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256",
                        "name": "minimumFillAmount",
                        "type": "uint256"
                    }
                ],
                "name": "sellAllAmount",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "fillAmount",
                        "type": "uint256"
                    }
                ],
                "payable": false,
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "constant": false,
                "inputs": [
                    {
                        "internalType": "string",
                        "name": "revertReason",
                        "type": "string"
                    },
                    {
                        "internalType": "uint256",
                        "name": "fillAmount",
                        "type": "uint256"
                    }
                ],
                "name": "setFillBehavior",
                "outputs": [],
                "payable": false,
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "constant": false,
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "tokenAddress",
                        "type": "address"
                    },
                    {
                        "internalType": "string",
                        "name": "revertReason",
                        "type": "string"
                    },
                    {
                        "internalType": "bytes",
                        "name": "returnData",
                        "type": "bytes"
                    }
                ],
                "name": "setTransferBehavior",
                "outputs": [],
                "payable": false,
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "",
                        "type": "address"
                    }
                ],
                "name": "testTokens",
                "outputs": [
                    {
                        "internalType": "contract TestToken",
                        "name": "",
                        "type": "address"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            }
        ],
        "devdoc": {
            "details": "Eth2DaiBridge overridden to mock tokens and      implement IEth2Dai.",
            "methods": {
                "bridgeTransferFrom(address,address,address,uint256,bytes)": {
                    "details": "Callback for `IERC20Bridge`. Tries to buy `amount` of      `toTokenAddress` tokens by selling the entirety of the opposing asset      (DAI or WETH) to the Eth2Dai contract, then transfers the bought      tokens to `to`.",
                    "params": {
                        "amount": "Minimum amount of `toTokenAddress` tokens to buy.",
                        "bridgeData": "The abi-encoeded \"from\" token address.",
                        "from": "The maker (this contract).",
                        "to": "The recipient of the bought tokens.",
                        "toTokenAddress": "The token to give to `to` (either DAI or WETH)."
                    },
                    "return": "success The magic bytes if successful."
                },
                "createToken(uint256)": {
                    "details": "Create a token and set this contract's balance."
                },
                "isValidSignature(bytes32,bytes)": {
                    "details": "`SignatureType.Wallet` callback, so that this bridge can be the maker      and sign for itself in orders. Always succeeds.",
                    "return": "magicValue Magic success bytes, always."
                },
                "sellAllAmount(address,uint256,address,uint256)": {
                    "details": "Implementation of `IEth2Dai.sellAllAmount()`"
                },
                "setFillBehavior(string,uint256)": {
                    "details": "Set the behavior for `IEth2Dai.sellAllAmount()`."
                },
                "setTransferBehavior(address,string,bytes)": {
                    "details": "Set the behavior of a token's `transfer()`."
                }
            }
        },
        "evm": {
            "bytecode": {
                "linkReferences": {},
                "object": "0x608060405234801561001057600080fd5b50611841806100206000396000f3fe608060405234801561001057600080fd5b50600436106100a35760003560e01c806339dd7d09116100765780639535741f1161005b5780639535741f1461014c578063c2df82e61461015f578063c665855414610172576100a3565b806339dd7d091461012657806353e62a8a14610139576100a3565b80630621b4f6146100a85780631626ba7e146100d15780632d571cc4146100f157806336c8c27d14610111575b600080fd5b6100bb6100b6366004610c8c565b610185565b6040516100c89190611093565b60405180910390f35b6100e46100df366004610cd3565b61022c565b6040516100c89190610f6c565b6101046100ff366004610d67565b610254565b6040516100c89190610e18565b61012461011f366004610c61565b610346565b005b610124610134366004610ba1565b610385565b610124610147366004610d1d565b6103c7565b61012461015a366004610be1565b6103db565b6100e461016d366004610b1e565b61047f565b610104610180366004610b02565b610645565b60007f58fcce941223961af7539efabef8618a01059ef3ddfb5e7d1b9e7f2a1e9e2157858585856040516101bc9493929190610f35565b60405180910390a160018054600181600116156101000203166002900490506000146102205760016040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102179190610fed565b60405180910390fd5b50600254949350505050565b7fb0671381000000000000000000000000000000000000000000000000000000009392505050565b600080604051610263906109f8565b604051809103906000f08015801561027f573d6000803e3d6000fd5b5073ffffffffffffffffffffffffffffffffffffffff81166000818152602081905260409081902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001683179055517fe30443bc0000000000000000000000000000000000000000000000000000000081529192509063e30443bc9061030d9030908790600401610f0f565b600060405180830381600087803b15801561032757600080fd5b505af115801561033b573d6000803e3d6000fd5b509295945050505050565b7f299c8a47f84d20859a5a5e9f386149ce2411c38f8a07444fc2811f073b57908433838360405161037993929190610e70565b60405180910390a15050565b7fae33cb06d7303f889d953bb09540983050163c1c4c98b330db432a911cfb63fd338484846040516103ba9493929190610e39565b60405180910390a1505050565b6103d360018484610a05565b506002555050565b73ffffffffffffffffffffffffffffffffffffffff808616600090815260208190526040908190205490517fd863e20200000000000000000000000000000000000000000000000000000000815291169063d863e20290610446908790879087908790600401610fbb565b600060405180830381600087803b15801561046057600080fd5b505af1158015610474573d6000803e3d6000fd5b505050505050505050565b60008061048e83850185610b02565b9050600061049a61066d565b905060008273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016104d79190610e18565b60206040518083038186803b1580156104ef57600080fd5b505afa158015610503573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506105279190810190610d7f565b9050610534838383610672565b60008273ffffffffffffffffffffffffffffffffffffffff16630621b4f685848e8c6040518563ffffffff1660e01b81526004016105759493929190610f35565b602060405180830381600087803b15801561058f57600080fd5b505af11580156105a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506105c79190810190610d7f565b90506105d48b8a8361074e565b7f349fc08071558d8e3aa92dec9396e4e9f2dfecd6bb9065759d1932e7da43b8a9848c84848e8e60405161060d96959493929190610ec8565b60405180910390a1507fdc1600f3000000000000000000000000000000000000000000000000000000009a9950505050505050505050565b60006020819052908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b305b90565b6040517fdd62ed3e000000000000000000000000000000000000000000000000000000008152819073ffffffffffffffffffffffffffffffffffffffff85169063dd62ed3e906106c89030908790600401610ea1565b60206040518083038186803b1580156106e057600080fd5b505afa1580156106f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506107189190810190610d7f565b10156107495761074983837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610815565b505050565b6040516060907fa9059cbb00000000000000000000000000000000000000000000000000000000906107869085908590602401610f0f565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152905061080f848261084d565b50505050565b6040516060907f095ea7b300000000000000000000000000000000000000000000000000000000906107869085908590602401610f0f565b600060608373ffffffffffffffffffffffffffffffffffffffff16836040516108769190610ddf565b6000604051808303816000865af19150503d80600081146108b3576040519150601f19603f3d011682016040523d82523d6000602084013e6108b8565b606091505b509150915081156108fc5780516108d0575050610905565b8051602014156108fc5760006108e7826000610909565b905080600114156108fa57505050610905565b505b61080f8161091c565b5050565b60006109158383610924565b9392505050565b805160208201fd5b6000816020018351101561094a5761094a6109456005855185602001610953565b61091c565b50016020015190565b6060632800659560e01b84848460405160240161097293929190610f99565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915290509392505050565b61073d806110c283390190565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610a64578280017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00823516178555610a91565b82800160010185558215610a91579182015b82811115610a91578235825591602001919060010190610a76565b50610a9d929150610aa1565b5090565b61066f91905b80821115610a9d5760008155600101610aa7565b60008083601f840112610acc578182fd5b50813567ffffffffffffffff811115610ae3578182fd5b602083019150836020828501011115610afb57600080fd5b9250929050565b600060208284031215610b13578081fd5b81356109158161109c565b60008060008060008060a08789031215610b36578182fd5b8635610b418161109c565b95506020870135610b518161109c565b94506040870135610b618161109c565b935060608701359250608087013567ffffffffffffffff811115610b83578283fd5b610b8f89828a01610abb565b979a9699509497509295939492505050565b600080600060608486031215610bb5578283fd5b8335610bc08161109c565b92506020840135610bd08161109c565b929592945050506040919091013590565b600080600080600060608688031215610bf8578081fd5b8535610c038161109c565b9450602086013567ffffffffffffffff80821115610c1f578283fd5b610c2b89838a01610abb565b90965094506040880135915080821115610c43578283fd5b50610c5088828901610abb565b969995985093965092949392505050565b60008060408385031215610c73578182fd5b8235610c7e8161109c565b946020939093013593505050565b60008060008060808587031215610ca1578384fd5b8435610cac8161109c565b9350602085013592506040850135610cc38161109c565b9396929550929360600135925050565b600080600060408486031215610ce7578283fd5b83359250602084013567ffffffffffffffff811115610d04578283fd5b610d1086828701610abb565b9497909650939450505050565b600080600060408486031215610d31578283fd5b833567ffffffffffffffff811115610d47578384fd5b610d5386828701610abb565b909790965060209590950135949350505050565b600060208284031215610d78578081fd5b5035919050565b600060208284031215610d90578081fd5b5051919050565b600082845282826020860137806020848601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f85011685010190509392505050565b60008251815b81811015610dff5760208186018101518583015201610de5565b81811115610e0d5782828501525b509190910192915050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff9485168152928416602084015292166040820152606081019190915260800190565b73ffffffffffffffffffffffffffffffffffffffff9384168152919092166020820152604081019190915260600190565b73ffffffffffffffffffffffffffffffffffffffff92831681529116602082015260400190565b73ffffffffffffffffffffffffffffffffffffffff96871681529486166020860152604085019390935260608401919091528316608083015290911660a082015260c00190565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b73ffffffffffffffffffffffffffffffffffffffff9485168152602081019390935292166040820152606081019190915260800190565b7fffffffff0000000000000000000000000000000000000000000000000000000091909116815260200190565b6060810160088510610fa757fe5b938152602081019290925260409091015290565b600060408252610fcf604083018688610d97565b8281036020840152610fe2818587610d97565b979650505050505050565b600060208201602083528184546001811660008114611013576001811461104f57611088565b607f600283041684527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0082166040870152606086019250611088565b6002820480855287865260208620865b8281101561107e5781548982016040015260019091019060200161105f565b8801604001945050505b509095945050505050565b90815260200190565b73ffffffffffffffffffffffffffffffffffffffff811681146110be57600080fd5b5056fe608060405234801561001057600080fd5b5061071d806100206000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063a9059cbb1161005b578063a9059cbb146100de578063d863e202146100f1578063dd62ed3e14610106578063e30443bc146101195761007d565b8063095ea7b31461008257806327e235e3146100ab57806370a08231146100cb575b600080fd5b610095610090366004610536565b61012c565b6040516100a29190610620565b60405180910390f35b6100be6100b93660046104e0565b6101aa565b6040516100a291906106d1565b6100be6100d93660046104e0565b6101bc565b6100956100ec366004610536565b6101e4565b6101046100ff366004610560565b61036b565b005b6100be610114366004610502565b61038b565b610104610127366004610536565b610393565b6040517f36c8c27d00000000000000000000000000000000000000000000000000000000815260009033906336c8c27d9061016d90869086906004016105fa565b600060405180830381600087803b15801561018757600080fd5b505af115801561019b573d6000803e3d6000fd5b50505050600190505b92915050565b60006020819052908152604090205481565b73ffffffffffffffffffffffffffffffffffffffff1660009081526020819052604090205490565b6040517f39dd7d0900000000000000000000000000000000000000000000000000000000815260009033906339dd7d0990610227908390879087906004016105c9565b600060405180830381600087803b15801561024157600080fd5b505af1158015610255573d6000803e3d6000fd5b5050505060018054600181600116156101000203166002900490506000146102b55760016040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ac919061062b565b60405180910390fd5b60028054604080516020601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610100600187161502019094168590049384018190048102820181019092528281526060939092909183018282801561035c5780601f106103315761010080835404028352916020019161035c565b820191906000526020600020905b81548152906001019060200180831161033f57829003601f168201915b50505050509050805160208201f35b610377600185856103bc565b50610384600283836103bc565b5050505050565b600092915050565b73ffffffffffffffffffffffffffffffffffffffff909116600090815260208190526040902055565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061041b578280017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00823516178555610448565b82800160010185558215610448579182015b8281111561044857823582559160200191906001019061042d565b50610454929150610458565b5090565b61047291905b80821115610454576000815560010161045e565b90565b803573ffffffffffffffffffffffffffffffffffffffff811681146101a457600080fd5b60008083601f8401126104aa578182fd5b50813567ffffffffffffffff8111156104c1578182fd5b6020830191508360208285010111156104d957600080fd5b9250929050565b6000602082840312156104f1578081fd5b6104fb8383610475565b9392505050565b60008060408385031215610514578081fd5b61051e8484610475565b915061052d8460208501610475565b90509250929050565b60008060408385031215610548578182fd5b6105528484610475565b946020939093013593505050565b60008060008060408587031215610575578182fd5b843567ffffffffffffffff8082111561058c578384fd5b61059888838901610499565b909650945060208701359150808211156105b0578384fd5b506105bd87828801610499565b95989497509550505050565b73ffffffffffffffffffffffffffffffffffffffff9384168152919092166020820152604081019190915260600190565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b901515815260200190565b600060208201602083528184546001811660008114610651576001811461068d576106c6565b607f600283041684527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00821660408701526060860192506106c6565b6002820480855287865260208620865b828110156106bc5781548982016040015260019091019060200161069d565b8801604001945050505b509095945050505050565b9081526020019056fea365627a7a723158206e739f960b540de11fd3f93045d16f7771b5a3738cefe34fce781202f6eb4d6f6c6578706572696d656e74616cf564736f6c63430005110040a365627a7a72315820f4e80a13493079e06128f2780cd5a0695d035e414f256da34c9b785dea5d363b6c6578706572696d656e74616cf564736f6c63430005110040",
                "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1841 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA3 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x39DD7D09 GT PUSH2 0x76 JUMPI DUP1 PUSH4 0x9535741F GT PUSH2 0x5B JUMPI DUP1 PUSH4 0x9535741F EQ PUSH2 0x14C JUMPI DUP1 PUSH4 0xC2DF82E6 EQ PUSH2 0x15F JUMPI DUP1 PUSH4 0xC6658554 EQ PUSH2 0x172 JUMPI PUSH2 0xA3 JUMP JUMPDEST DUP1 PUSH4 0x39DD7D09 EQ PUSH2 0x126 JUMPI DUP1 PUSH4 0x53E62A8A EQ PUSH2 0x139 JUMPI PUSH2 0xA3 JUMP JUMPDEST DUP1 PUSH4 0x621B4F6 EQ PUSH2 0xA8 JUMPI DUP1 PUSH4 0x1626BA7E EQ PUSH2 0xD1 JUMPI DUP1 PUSH4 0x2D571CC4 EQ PUSH2 0xF1 JUMPI DUP1 PUSH4 0x36C8C27D EQ PUSH2 0x111 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xBB PUSH2 0xB6 CALLDATASIZE PUSH1 0x4 PUSH2 0xC8C JUMP JUMPDEST PUSH2 0x185 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC8 SWAP2 SWAP1 PUSH2 0x1093 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xE4 PUSH2 0xDF CALLDATASIZE PUSH1 0x4 PUSH2 0xCD3 JUMP JUMPDEST PUSH2 0x22C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC8 SWAP2 SWAP1 PUSH2 0xF6C JUMP JUMPDEST PUSH2 0x104 PUSH2 0xFF CALLDATASIZE PUSH1 0x4 PUSH2 0xD67 JUMP JUMPDEST PUSH2 0x254 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC8 SWAP2 SWAP1 PUSH2 0xE18 JUMP JUMPDEST PUSH2 0x124 PUSH2 0x11F CALLDATASIZE PUSH1 0x4 PUSH2 0xC61 JUMP JUMPDEST PUSH2 0x346 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x124 PUSH2 0x134 CALLDATASIZE PUSH1 0x4 PUSH2 0xBA1 JUMP JUMPDEST PUSH2 0x385 JUMP JUMPDEST PUSH2 0x124 PUSH2 0x147 CALLDATASIZE PUSH1 0x4 PUSH2 0xD1D JUMP JUMPDEST PUSH2 0x3C7 JUMP JUMPDEST PUSH2 0x124 PUSH2 0x15A CALLDATASIZE PUSH1 0x4 PUSH2 0xBE1 JUMP JUMPDEST PUSH2 0x3DB JUMP JUMPDEST PUSH2 0xE4 PUSH2 0x16D CALLDATASIZE PUSH1 0x4 PUSH2 0xB1E JUMP JUMPDEST PUSH2 0x47F JUMP JUMPDEST PUSH2 0x104 PUSH2 0x180 CALLDATASIZE PUSH1 0x4 PUSH2 0xB02 JUMP JUMPDEST PUSH2 0x645 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x58FCCE941223961AF7539EFABEF8618A01059EF3DDFB5E7D1B9E7F2A1E9E2157 DUP6 DUP6 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH2 0x1BC SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xF35 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV SWAP1 POP PUSH1 0x0 EQ PUSH2 0x220 JUMPI PUSH1 0x1 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x217 SWAP2 SWAP1 PUSH2 0xFED JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x2 SLOAD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH32 0xB067138100000000000000000000000000000000000000000000000000000000 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 MLOAD PUSH2 0x263 SWAP1 PUSH2 0x9F8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 PUSH1 0x0 CREATE DUP1 ISZERO DUP1 ISZERO PUSH2 0x27F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND DUP4 OR SWAP1 SSTORE MLOAD PUSH32 0xE30443BC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP2 SWAP3 POP SWAP1 PUSH4 0xE30443BC SWAP1 PUSH2 0x30D SWAP1 ADDRESS SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0xF0F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x327 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x33B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP SWAP3 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH32 0x299C8A47F84D20859A5A5E9F386149CE2411C38F8A07444FC2811F073B579084 CALLER DUP4 DUP4 PUSH1 0x40 MLOAD PUSH2 0x379 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xE70 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH32 0xAE33CB06D7303F889D953BB09540983050163C1C4C98B330DB432A911CFB63FD CALLER DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH2 0x3BA SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xE39 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH2 0x3D3 PUSH1 0x1 DUP5 DUP5 PUSH2 0xA05 JUMP JUMPDEST POP PUSH1 0x2 SSTORE POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 SLOAD SWAP1 MLOAD PUSH32 0xD863E20200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP2 AND SWAP1 PUSH4 0xD863E202 SWAP1 PUSH2 0x446 SWAP1 DUP8 SWAP1 DUP8 SWAP1 DUP8 SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0xFBB JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x460 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x474 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x48E DUP4 DUP6 ADD DUP6 PUSH2 0xB02 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x49A PUSH2 0x66D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x70A08231 ADDRESS PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4D7 SWAP2 SWAP1 PUSH2 0xE18 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x503 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x527 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0xD7F JUMP JUMPDEST SWAP1 POP PUSH2 0x534 DUP4 DUP4 DUP4 PUSH2 0x672 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x621B4F6 DUP6 DUP5 DUP15 DUP13 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x575 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xF35 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x58F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x5A3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x5C7 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0xD7F JUMP JUMPDEST SWAP1 POP PUSH2 0x5D4 DUP12 DUP11 DUP4 PUSH2 0x74E JUMP JUMPDEST PUSH32 0x349FC08071558D8E3AA92DEC9396E4E9F2DFECD6BB9065759D1932E7DA43B8A9 DUP5 DUP13 DUP5 DUP5 DUP15 DUP15 PUSH1 0x40 MLOAD PUSH2 0x60D SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xEC8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP PUSH32 0xDC1600F300000000000000000000000000000000000000000000000000000000 SWAP11 SWAP10 POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP2 SWAP1 MSTORE SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST ADDRESS JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xDD62ED3E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE DUP2 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND SWAP1 PUSH4 0xDD62ED3E SWAP1 PUSH2 0x6C8 SWAP1 ADDRESS SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0xEA1 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6E0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x6F4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x718 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0xD7F JUMP JUMPDEST LT ISZERO PUSH2 0x749 JUMPI PUSH2 0x749 DUP4 DUP4 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x815 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x60 SWAP1 PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 SWAP1 PUSH2 0x786 SWAP1 DUP6 SWAP1 DUP6 SWAP1 PUSH1 0x24 ADD PUSH2 0xF0F JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP PUSH2 0x80F DUP5 DUP3 PUSH2 0x84D JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x60 SWAP1 PUSH32 0x95EA7B300000000000000000000000000000000000000000000000000000000 SWAP1 PUSH2 0x786 SWAP1 DUP6 SWAP1 DUP6 SWAP1 PUSH1 0x24 ADD PUSH2 0xF0F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x40 MLOAD PUSH2 0x876 SWAP2 SWAP1 PUSH2 0xDDF JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x8B3 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x8B8 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0x8FC JUMPI DUP1 MLOAD PUSH2 0x8D0 JUMPI POP POP PUSH2 0x905 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 EQ ISZERO PUSH2 0x8FC JUMPI PUSH1 0x0 PUSH2 0x8E7 DUP3 PUSH1 0x0 PUSH2 0x909 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 EQ ISZERO PUSH2 0x8FA JUMPI POP POP POP PUSH2 0x905 JUMP JUMPDEST POP JUMPDEST PUSH2 0x80F DUP2 PUSH2 0x91C JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x915 DUP4 DUP4 PUSH2 0x924 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO PUSH2 0x94A JUMPI PUSH2 0x94A PUSH2 0x945 PUSH1 0x5 DUP6 MLOAD DUP6 PUSH1 0x20 ADD PUSH2 0x953 JUMP JUMPDEST PUSH2 0x91C JUMP JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH4 0x28006595 PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x972 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xF99 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x73D DUP1 PUSH2 0x10C2 DUP4 CODECOPY ADD SWAP1 JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH1 0x1F LT PUSH2 0xA64 JUMPI DUP3 DUP1 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 DUP3 CALLDATALOAD AND OR DUP6 SSTORE PUSH2 0xA91 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 0xA91 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0xA91 JUMPI DUP3 CALLDATALOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0xA76 JUMP JUMPDEST POP PUSH2 0xA9D SWAP3 SWAP2 POP PUSH2 0xAA1 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x66F SWAP2 SWAP1 JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0xA9D JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0xAA7 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0xACC JUMPI DUP2 DUP3 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xAE3 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0xAFB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xB13 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x915 DUP2 PUSH2 0x109C JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0xB36 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP7 CALLDATALOAD PUSH2 0xB41 DUP2 PUSH2 0x109C JUMP JUMPDEST SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD PUSH2 0xB51 DUP2 PUSH2 0x109C JUMP JUMPDEST SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD PUSH2 0xB61 DUP2 PUSH2 0x109C JUMP JUMPDEST SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP3 POP PUSH1 0x80 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xB83 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0xB8F DUP10 DUP3 DUP11 ADD PUSH2 0xABB JUMP JUMPDEST SWAP8 SWAP11 SWAP7 SWAP10 POP SWAP5 SWAP8 POP SWAP3 SWAP6 SWAP4 SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xBB5 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0xBC0 DUP2 PUSH2 0x109C JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0xBD0 DUP2 PUSH2 0x109C JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP7 DUP9 SUB SLT ISZERO PUSH2 0xBF8 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0xC03 DUP2 PUSH2 0x109C JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xC1F JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0xC2B DUP10 DUP4 DUP11 ADD PUSH2 0xABB JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x40 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0xC43 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0xC50 DUP9 DUP3 DUP10 ADD PUSH2 0xABB JUMP JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 POP SWAP3 SWAP5 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xC73 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0xC7E DUP2 PUSH2 0x109C JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xCA1 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0xCAC DUP2 PUSH2 0x109C JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0xCC3 DUP2 PUSH2 0x109C JUMP JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP3 SWAP4 PUSH1 0x60 ADD CALLDATALOAD SWAP3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x40 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xCE7 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xD04 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0xD10 DUP7 DUP3 DUP8 ADD PUSH2 0xABB JUMP JUMPDEST SWAP5 SWAP8 SWAP1 SWAP7 POP SWAP4 SWAP5 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x40 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xD31 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xD47 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0xD53 DUP7 DUP3 DUP8 ADD PUSH2 0xABB JUMP JUMPDEST SWAP1 SWAP8 SWAP1 SWAP7 POP PUSH1 0x20 SWAP6 SWAP1 SWAP6 ADD CALLDATALOAD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xD78 JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xD90 JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 MSTORE DUP3 DUP3 PUSH1 0x20 DUP7 ADD CALLDATACOPY DUP1 PUSH1 0x20 DUP5 DUP7 ADD ADD MSTORE PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F DUP6 ADD AND DUP6 ADD ADD SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD DUP2 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xDFF JUMPI PUSH1 0x20 DUP2 DUP7 ADD DUP2 ADD MLOAD DUP6 DUP4 ADD MSTORE ADD PUSH2 0xDE5 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0xE0D JUMPI DUP3 DUP3 DUP6 ADD MSTORE JUMPDEST POP SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP5 DUP6 AND DUP2 MSTORE SWAP3 DUP5 AND PUSH1 0x20 DUP5 ADD MSTORE SWAP3 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP7 DUP8 AND DUP2 MSTORE SWAP5 DUP7 AND PUSH1 0x20 DUP7 ADD MSTORE PUSH1 0x40 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x60 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP4 AND PUSH1 0x80 DUP4 ADD MSTORE SWAP1 SWAP2 AND PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP5 DUP6 AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE SWAP3 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH1 0x8 DUP6 LT PUSH2 0xFA7 JUMPI INVALID JUMPDEST SWAP4 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 MSTORE PUSH2 0xFCF PUSH1 0x40 DUP4 ADD DUP7 DUP9 PUSH2 0xD97 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0xFE2 DUP2 DUP6 DUP8 PUSH2 0xD97 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD PUSH1 0x20 DUP4 MSTORE DUP2 DUP5 SLOAD PUSH1 0x1 DUP2 AND PUSH1 0x0 DUP2 EQ PUSH2 0x1013 JUMPI PUSH1 0x1 DUP2 EQ PUSH2 0x104F JUMPI PUSH2 0x1088 JUMP JUMPDEST PUSH1 0x7F PUSH1 0x2 DUP4 DIV AND DUP5 MSTORE PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 DUP3 AND PUSH1 0x40 DUP8 ADD MSTORE PUSH1 0x60 DUP7 ADD SWAP3 POP PUSH2 0x1088 JUMP JUMPDEST PUSH1 0x2 DUP3 DIV DUP1 DUP6 MSTORE DUP8 DUP7 MSTORE PUSH1 0x20 DUP7 KECCAK256 DUP7 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x107E JUMPI DUP2 SLOAD DUP10 DUP3 ADD PUSH1 0x40 ADD MSTORE PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x20 ADD PUSH2 0x105F JUMP JUMPDEST DUP9 ADD PUSH1 0x40 ADD SWAP5 POP POP POP JUMPDEST POP SWAP1 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x10BE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x71D DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x7D JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xA9059CBB GT PUSH2 0x5B JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0xDE JUMPI DUP1 PUSH4 0xD863E202 EQ PUSH2 0xF1 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x106 JUMPI DUP1 PUSH4 0xE30443BC EQ PUSH2 0x119 JUMPI PUSH2 0x7D JUMP JUMPDEST DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x82 JUMPI DUP1 PUSH4 0x27E235E3 EQ PUSH2 0xAB JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0xCB JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x95 PUSH2 0x90 CALLDATASIZE PUSH1 0x4 PUSH2 0x536 JUMP JUMPDEST PUSH2 0x12C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xA2 SWAP2 SWAP1 PUSH2 0x620 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xBE PUSH2 0xB9 CALLDATASIZE PUSH1 0x4 PUSH2 0x4E0 JUMP JUMPDEST PUSH2 0x1AA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xA2 SWAP2 SWAP1 PUSH2 0x6D1 JUMP JUMPDEST PUSH2 0xBE PUSH2 0xD9 CALLDATASIZE PUSH1 0x4 PUSH2 0x4E0 JUMP JUMPDEST PUSH2 0x1BC JUMP JUMPDEST PUSH2 0x95 PUSH2 0xEC CALLDATASIZE PUSH1 0x4 PUSH2 0x536 JUMP JUMPDEST PUSH2 0x1E4 JUMP JUMPDEST PUSH2 0x104 PUSH2 0xFF CALLDATASIZE PUSH1 0x4 PUSH2 0x560 JUMP JUMPDEST PUSH2 0x36B JUMP JUMPDEST STOP JUMPDEST PUSH2 0xBE PUSH2 0x114 CALLDATASIZE PUSH1 0x4 PUSH2 0x502 JUMP JUMPDEST PUSH2 0x38B JUMP JUMPDEST PUSH2 0x104 PUSH2 0x127 CALLDATASIZE PUSH1 0x4 PUSH2 0x536 JUMP JUMPDEST PUSH2 0x393 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x36C8C27D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x0 SWAP1 CALLER SWAP1 PUSH4 0x36C8C27D SWAP1 PUSH2 0x16D SWAP1 DUP7 SWAP1 DUP7 SWAP1 PUSH1 0x4 ADD PUSH2 0x5FA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x187 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x19B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x1 SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP2 SWAP1 MSTORE SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x39DD7D0900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x0 SWAP1 CALLER SWAP1 PUSH4 0x39DD7D09 SWAP1 PUSH2 0x227 SWAP1 DUP4 SWAP1 DUP8 SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x5C9 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x241 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x255 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV SWAP1 POP PUSH1 0x0 EQ PUSH2 0x2B5 JUMPI PUSH1 0x1 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2AC SWAP2 SWAP1 PUSH2 0x62B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 PUSH1 0x1F PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x100 PUSH1 0x1 DUP8 AND ISZERO MUL ADD SWAP1 SWAP5 AND DUP6 SWAP1 DIV SWAP4 DUP5 ADD DUP2 SWAP1 DIV DUP2 MUL DUP3 ADD DUP2 ADD SWAP1 SWAP3 MSTORE DUP3 DUP2 MSTORE PUSH1 0x60 SWAP4 SWAP1 SWAP3 SWAP1 SWAP2 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x35C JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x331 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x35C JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x33F JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP DUP1 MLOAD PUSH1 0x20 DUP3 ADD RETURN JUMPDEST PUSH2 0x377 PUSH1 0x1 DUP6 DUP6 PUSH2 0x3BC JUMP JUMPDEST POP PUSH2 0x384 PUSH1 0x2 DUP4 DUP4 PUSH2 0x3BC JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH1 0x1F LT PUSH2 0x41B JUMPI DUP3 DUP1 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 DUP3 CALLDATALOAD AND OR DUP6 SSTORE PUSH2 0x448 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 0x448 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x448 JUMPI DUP3 CALLDATALOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x42D JUMP JUMPDEST POP PUSH2 0x454 SWAP3 SWAP2 POP PUSH2 0x458 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x472 SWAP2 SWAP1 JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x454 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x45E JUMP JUMPDEST SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x1A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x4AA JUMPI DUP2 DUP3 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x4C1 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x4D9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4F1 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x4FB DUP4 DUP4 PUSH2 0x475 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x514 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x51E DUP5 DUP5 PUSH2 0x475 JUMP JUMPDEST SWAP2 POP PUSH2 0x52D DUP5 PUSH1 0x20 DUP6 ADD PUSH2 0x475 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x548 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x552 DUP5 DUP5 PUSH2 0x475 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x40 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x575 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x58C JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x598 DUP9 DUP4 DUP10 ADD PUSH2 0x499 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x5B0 JUMPI DUP4 DUP5 REVERT JUMPDEST POP PUSH2 0x5BD DUP8 DUP3 DUP9 ADD PUSH2 0x499 JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD PUSH1 0x20 DUP4 MSTORE DUP2 DUP5 SLOAD PUSH1 0x1 DUP2 AND PUSH1 0x0 DUP2 EQ PUSH2 0x651 JUMPI PUSH1 0x1 DUP2 EQ PUSH2 0x68D JUMPI PUSH2 0x6C6 JUMP JUMPDEST PUSH1 0x7F PUSH1 0x2 DUP4 DIV AND DUP5 MSTORE PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 DUP3 AND PUSH1 0x40 DUP8 ADD MSTORE PUSH1 0x60 DUP7 ADD SWAP3 POP PUSH2 0x6C6 JUMP JUMPDEST PUSH1 0x2 DUP3 DIV DUP1 DUP6 MSTORE DUP8 DUP7 MSTORE PUSH1 0x20 DUP7 KECCAK256 DUP7 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x6BC JUMPI DUP2 SLOAD DUP10 DUP3 ADD PUSH1 0x40 ADD MSTORE PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x20 ADD PUSH2 0x69D JUMP JUMPDEST DUP9 ADD PUSH1 0x40 ADD SWAP5 POP POP POP JUMPDEST POP SWAP1 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP INVALID LOG3 PUSH6 0x627A7A723158 KECCAK256 PUSH15 0x739F960B540DE11FD3F93045D16F77 PUSH18 0xB5A3738CEFE34FCE781202F6EB4D6F6C6578 PUSH17 0x6572696D656E74616CF564736F6C634300 SDIV GT STOP BLOCKHASH LOG3 PUSH6 0x627A7A723158 KECCAK256 DELEGATECALL 0xE8 EXP SGT 0x49 ADDRESS PUSH26 0xE06128F2780CD5A0695D035E414F256DA34C9B785DEA5D363B6C PUSH6 0x78706572696D PUSH6 0x6E74616CF564 PUSH20 0x6F6C634300051100400000000000000000000000 ",
                "sourceMap": "3273:2043:42:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3273:2043:42;;;;;;;"
            },
            "deployedBytecode": {
                "linkReferences": {},
                "object": "0x608060405234801561001057600080fd5b50600436106100a35760003560e01c806339dd7d09116100765780639535741f1161005b5780639535741f1461014c578063c2df82e61461015f578063c665855414610172576100a3565b806339dd7d091461012657806353e62a8a14610139576100a3565b80630621b4f6146100a85780631626ba7e146100d15780632d571cc4146100f157806336c8c27d14610111575b600080fd5b6100bb6100b6366004610c8c565b610185565b6040516100c89190611093565b60405180910390f35b6100e46100df366004610cd3565b61022c565b6040516100c89190610f6c565b6101046100ff366004610d67565b610254565b6040516100c89190610e18565b61012461011f366004610c61565b610346565b005b610124610134366004610ba1565b610385565b610124610147366004610d1d565b6103c7565b61012461015a366004610be1565b6103db565b6100e461016d366004610b1e565b61047f565b610104610180366004610b02565b610645565b60007f58fcce941223961af7539efabef8618a01059ef3ddfb5e7d1b9e7f2a1e9e2157858585856040516101bc9493929190610f35565b60405180910390a160018054600181600116156101000203166002900490506000146102205760016040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102179190610fed565b60405180910390fd5b50600254949350505050565b7fb0671381000000000000000000000000000000000000000000000000000000009392505050565b600080604051610263906109f8565b604051809103906000f08015801561027f573d6000803e3d6000fd5b5073ffffffffffffffffffffffffffffffffffffffff81166000818152602081905260409081902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001683179055517fe30443bc0000000000000000000000000000000000000000000000000000000081529192509063e30443bc9061030d9030908790600401610f0f565b600060405180830381600087803b15801561032757600080fd5b505af115801561033b573d6000803e3d6000fd5b509295945050505050565b7f299c8a47f84d20859a5a5e9f386149ce2411c38f8a07444fc2811f073b57908433838360405161037993929190610e70565b60405180910390a15050565b7fae33cb06d7303f889d953bb09540983050163c1c4c98b330db432a911cfb63fd338484846040516103ba9493929190610e39565b60405180910390a1505050565b6103d360018484610a05565b506002555050565b73ffffffffffffffffffffffffffffffffffffffff808616600090815260208190526040908190205490517fd863e20200000000000000000000000000000000000000000000000000000000815291169063d863e20290610446908790879087908790600401610fbb565b600060405180830381600087803b15801561046057600080fd5b505af1158015610474573d6000803e3d6000fd5b505050505050505050565b60008061048e83850185610b02565b9050600061049a61066d565b905060008273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016104d79190610e18565b60206040518083038186803b1580156104ef57600080fd5b505afa158015610503573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506105279190810190610d7f565b9050610534838383610672565b60008273ffffffffffffffffffffffffffffffffffffffff16630621b4f685848e8c6040518563ffffffff1660e01b81526004016105759493929190610f35565b602060405180830381600087803b15801561058f57600080fd5b505af11580156105a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506105c79190810190610d7f565b90506105d48b8a8361074e565b7f349fc08071558d8e3aa92dec9396e4e9f2dfecd6bb9065759d1932e7da43b8a9848c84848e8e60405161060d96959493929190610ec8565b60405180910390a1507fdc1600f3000000000000000000000000000000000000000000000000000000009a9950505050505050505050565b60006020819052908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b305b90565b6040517fdd62ed3e000000000000000000000000000000000000000000000000000000008152819073ffffffffffffffffffffffffffffffffffffffff85169063dd62ed3e906106c89030908790600401610ea1565b60206040518083038186803b1580156106e057600080fd5b505afa1580156106f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506107189190810190610d7f565b10156107495761074983837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610815565b505050565b6040516060907fa9059cbb00000000000000000000000000000000000000000000000000000000906107869085908590602401610f0f565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152905061080f848261084d565b50505050565b6040516060907f095ea7b300000000000000000000000000000000000000000000000000000000906107869085908590602401610f0f565b600060608373ffffffffffffffffffffffffffffffffffffffff16836040516108769190610ddf565b6000604051808303816000865af19150503d80600081146108b3576040519150601f19603f3d011682016040523d82523d6000602084013e6108b8565b606091505b509150915081156108fc5780516108d0575050610905565b8051602014156108fc5760006108e7826000610909565b905080600114156108fa57505050610905565b505b61080f8161091c565b5050565b60006109158383610924565b9392505050565b805160208201fd5b6000816020018351101561094a5761094a6109456005855185602001610953565b61091c565b50016020015190565b6060632800659560e01b84848460405160240161097293929190610f99565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915290509392505050565b61073d806110c283390190565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610a64578280017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00823516178555610a91565b82800160010185558215610a91579182015b82811115610a91578235825591602001919060010190610a76565b50610a9d929150610aa1565b5090565b61066f91905b80821115610a9d5760008155600101610aa7565b60008083601f840112610acc578182fd5b50813567ffffffffffffffff811115610ae3578182fd5b602083019150836020828501011115610afb57600080fd5b9250929050565b600060208284031215610b13578081fd5b81356109158161109c565b60008060008060008060a08789031215610b36578182fd5b8635610b418161109c565b95506020870135610b518161109c565b94506040870135610b618161109c565b935060608701359250608087013567ffffffffffffffff811115610b83578283fd5b610b8f89828a01610abb565b979a9699509497509295939492505050565b600080600060608486031215610bb5578283fd5b8335610bc08161109c565b92506020840135610bd08161109c565b929592945050506040919091013590565b600080600080600060608688031215610bf8578081fd5b8535610c038161109c565b9450602086013567ffffffffffffffff80821115610c1f578283fd5b610c2b89838a01610abb565b90965094506040880135915080821115610c43578283fd5b50610c5088828901610abb565b969995985093965092949392505050565b60008060408385031215610c73578182fd5b8235610c7e8161109c565b946020939093013593505050565b60008060008060808587031215610ca1578384fd5b8435610cac8161109c565b9350602085013592506040850135610cc38161109c565b9396929550929360600135925050565b600080600060408486031215610ce7578283fd5b83359250602084013567ffffffffffffffff811115610d04578283fd5b610d1086828701610abb565b9497909650939450505050565b600080600060408486031215610d31578283fd5b833567ffffffffffffffff811115610d47578384fd5b610d5386828701610abb565b909790965060209590950135949350505050565b600060208284031215610d78578081fd5b5035919050565b600060208284031215610d90578081fd5b5051919050565b600082845282826020860137806020848601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f85011685010190509392505050565b60008251815b81811015610dff5760208186018101518583015201610de5565b81811115610e0d5782828501525b509190910192915050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff9485168152928416602084015292166040820152606081019190915260800190565b73ffffffffffffffffffffffffffffffffffffffff9384168152919092166020820152604081019190915260600190565b73ffffffffffffffffffffffffffffffffffffffff92831681529116602082015260400190565b73ffffffffffffffffffffffffffffffffffffffff96871681529486166020860152604085019390935260608401919091528316608083015290911660a082015260c00190565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b73ffffffffffffffffffffffffffffffffffffffff9485168152602081019390935292166040820152606081019190915260800190565b7fffffffff0000000000000000000000000000000000000000000000000000000091909116815260200190565b6060810160088510610fa757fe5b938152602081019290925260409091015290565b600060408252610fcf604083018688610d97565b8281036020840152610fe2818587610d97565b979650505050505050565b600060208201602083528184546001811660008114611013576001811461104f57611088565b607f600283041684527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0082166040870152606086019250611088565b6002820480855287865260208620865b8281101561107e5781548982016040015260019091019060200161105f565b8801604001945050505b509095945050505050565b90815260200190565b73ffffffffffffffffffffffffffffffffffffffff811681146110be57600080fd5b5056fe608060405234801561001057600080fd5b5061071d806100206000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063a9059cbb1161005b578063a9059cbb146100de578063d863e202146100f1578063dd62ed3e14610106578063e30443bc146101195761007d565b8063095ea7b31461008257806327e235e3146100ab57806370a08231146100cb575b600080fd5b610095610090366004610536565b61012c565b6040516100a29190610620565b60405180910390f35b6100be6100b93660046104e0565b6101aa565b6040516100a291906106d1565b6100be6100d93660046104e0565b6101bc565b6100956100ec366004610536565b6101e4565b6101046100ff366004610560565b61036b565b005b6100be610114366004610502565b61038b565b610104610127366004610536565b610393565b6040517f36c8c27d00000000000000000000000000000000000000000000000000000000815260009033906336c8c27d9061016d90869086906004016105fa565b600060405180830381600087803b15801561018757600080fd5b505af115801561019b573d6000803e3d6000fd5b50505050600190505b92915050565b60006020819052908152604090205481565b73ffffffffffffffffffffffffffffffffffffffff1660009081526020819052604090205490565b6040517f39dd7d0900000000000000000000000000000000000000000000000000000000815260009033906339dd7d0990610227908390879087906004016105c9565b600060405180830381600087803b15801561024157600080fd5b505af1158015610255573d6000803e3d6000fd5b5050505060018054600181600116156101000203166002900490506000146102b55760016040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ac919061062b565b60405180910390fd5b60028054604080516020601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610100600187161502019094168590049384018190048102820181019092528281526060939092909183018282801561035c5780601f106103315761010080835404028352916020019161035c565b820191906000526020600020905b81548152906001019060200180831161033f57829003601f168201915b50505050509050805160208201f35b610377600185856103bc565b50610384600283836103bc565b5050505050565b600092915050565b73ffffffffffffffffffffffffffffffffffffffff909116600090815260208190526040902055565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061041b578280017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00823516178555610448565b82800160010185558215610448579182015b8281111561044857823582559160200191906001019061042d565b50610454929150610458565b5090565b61047291905b80821115610454576000815560010161045e565b90565b803573ffffffffffffffffffffffffffffffffffffffff811681146101a457600080fd5b60008083601f8401126104aa578182fd5b50813567ffffffffffffffff8111156104c1578182fd5b6020830191508360208285010111156104d957600080fd5b9250929050565b6000602082840312156104f1578081fd5b6104fb8383610475565b9392505050565b60008060408385031215610514578081fd5b61051e8484610475565b915061052d8460208501610475565b90509250929050565b60008060408385031215610548578182fd5b6105528484610475565b946020939093013593505050565b60008060008060408587031215610575578182fd5b843567ffffffffffffffff8082111561058c578384fd5b61059888838901610499565b909650945060208701359150808211156105b0578384fd5b506105bd87828801610499565b95989497509550505050565b73ffffffffffffffffffffffffffffffffffffffff9384168152919092166020820152604081019190915260600190565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b901515815260200190565b600060208201602083528184546001811660008114610651576001811461068d576106c6565b607f600283041684527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00821660408701526060860192506106c6565b6002820480855287865260208620865b828110156106bc5781548982016040015260019091019060200161069d565b8801604001945050505b509095945050505050565b9081526020019056fea365627a7a723158206e739f960b540de11fd3f93045d16f7771b5a3738cefe34fce781202f6eb4d6f6c6578706572696d656e74616cf564736f6c63430005110040a365627a7a72315820f4e80a13493079e06128f2780cd5a0695d035e414f256da34c9b785dea5d363b6c6578706572696d656e74616cf564736f6c63430005110040",
                "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA3 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x39DD7D09 GT PUSH2 0x76 JUMPI DUP1 PUSH4 0x9535741F GT PUSH2 0x5B JUMPI DUP1 PUSH4 0x9535741F EQ PUSH2 0x14C JUMPI DUP1 PUSH4 0xC2DF82E6 EQ PUSH2 0x15F JUMPI DUP1 PUSH4 0xC6658554 EQ PUSH2 0x172 JUMPI PUSH2 0xA3 JUMP JUMPDEST DUP1 PUSH4 0x39DD7D09 EQ PUSH2 0x126 JUMPI DUP1 PUSH4 0x53E62A8A EQ PUSH2 0x139 JUMPI PUSH2 0xA3 JUMP JUMPDEST DUP1 PUSH4 0x621B4F6 EQ PUSH2 0xA8 JUMPI DUP1 PUSH4 0x1626BA7E EQ PUSH2 0xD1 JUMPI DUP1 PUSH4 0x2D571CC4 EQ PUSH2 0xF1 JUMPI DUP1 PUSH4 0x36C8C27D EQ PUSH2 0x111 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xBB PUSH2 0xB6 CALLDATASIZE PUSH1 0x4 PUSH2 0xC8C JUMP JUMPDEST PUSH2 0x185 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC8 SWAP2 SWAP1 PUSH2 0x1093 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xE4 PUSH2 0xDF CALLDATASIZE PUSH1 0x4 PUSH2 0xCD3 JUMP JUMPDEST PUSH2 0x22C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC8 SWAP2 SWAP1 PUSH2 0xF6C JUMP JUMPDEST PUSH2 0x104 PUSH2 0xFF CALLDATASIZE PUSH1 0x4 PUSH2 0xD67 JUMP JUMPDEST PUSH2 0x254 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC8 SWAP2 SWAP1 PUSH2 0xE18 JUMP JUMPDEST PUSH2 0x124 PUSH2 0x11F CALLDATASIZE PUSH1 0x4 PUSH2 0xC61 JUMP JUMPDEST PUSH2 0x346 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x124 PUSH2 0x134 CALLDATASIZE PUSH1 0x4 PUSH2 0xBA1 JUMP JUMPDEST PUSH2 0x385 JUMP JUMPDEST PUSH2 0x124 PUSH2 0x147 CALLDATASIZE PUSH1 0x4 PUSH2 0xD1D JUMP JUMPDEST PUSH2 0x3C7 JUMP JUMPDEST PUSH2 0x124 PUSH2 0x15A CALLDATASIZE PUSH1 0x4 PUSH2 0xBE1 JUMP JUMPDEST PUSH2 0x3DB JUMP JUMPDEST PUSH2 0xE4 PUSH2 0x16D CALLDATASIZE PUSH1 0x4 PUSH2 0xB1E JUMP JUMPDEST PUSH2 0x47F JUMP JUMPDEST PUSH2 0x104 PUSH2 0x180 CALLDATASIZE PUSH1 0x4 PUSH2 0xB02 JUMP JUMPDEST PUSH2 0x645 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x58FCCE941223961AF7539EFABEF8618A01059EF3DDFB5E7D1B9E7F2A1E9E2157 DUP6 DUP6 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH2 0x1BC SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xF35 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV SWAP1 POP PUSH1 0x0 EQ PUSH2 0x220 JUMPI PUSH1 0x1 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x217 SWAP2 SWAP1 PUSH2 0xFED JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x2 SLOAD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH32 0xB067138100000000000000000000000000000000000000000000000000000000 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 MLOAD PUSH2 0x263 SWAP1 PUSH2 0x9F8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 PUSH1 0x0 CREATE DUP1 ISZERO DUP1 ISZERO PUSH2 0x27F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND DUP4 OR SWAP1 SSTORE MLOAD PUSH32 0xE30443BC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP2 SWAP3 POP SWAP1 PUSH4 0xE30443BC SWAP1 PUSH2 0x30D SWAP1 ADDRESS SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0xF0F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x327 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x33B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP SWAP3 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH32 0x299C8A47F84D20859A5A5E9F386149CE2411C38F8A07444FC2811F073B579084 CALLER DUP4 DUP4 PUSH1 0x40 MLOAD PUSH2 0x379 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xE70 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH32 0xAE33CB06D7303F889D953BB09540983050163C1C4C98B330DB432A911CFB63FD CALLER DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH2 0x3BA SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xE39 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH2 0x3D3 PUSH1 0x1 DUP5 DUP5 PUSH2 0xA05 JUMP JUMPDEST POP PUSH1 0x2 SSTORE POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 SLOAD SWAP1 MLOAD PUSH32 0xD863E20200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP2 AND SWAP1 PUSH4 0xD863E202 SWAP1 PUSH2 0x446 SWAP1 DUP8 SWAP1 DUP8 SWAP1 DUP8 SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0xFBB JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x460 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x474 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x48E DUP4 DUP6 ADD DUP6 PUSH2 0xB02 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x49A PUSH2 0x66D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x70A08231 ADDRESS PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4D7 SWAP2 SWAP1 PUSH2 0xE18 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x503 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x527 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0xD7F JUMP JUMPDEST SWAP1 POP PUSH2 0x534 DUP4 DUP4 DUP4 PUSH2 0x672 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x621B4F6 DUP6 DUP5 DUP15 DUP13 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x575 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xF35 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x58F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x5A3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x5C7 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0xD7F JUMP JUMPDEST SWAP1 POP PUSH2 0x5D4 DUP12 DUP11 DUP4 PUSH2 0x74E JUMP JUMPDEST PUSH32 0x349FC08071558D8E3AA92DEC9396E4E9F2DFECD6BB9065759D1932E7DA43B8A9 DUP5 DUP13 DUP5 DUP5 DUP15 DUP15 PUSH1 0x40 MLOAD PUSH2 0x60D SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xEC8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP PUSH32 0xDC1600F300000000000000000000000000000000000000000000000000000000 SWAP11 SWAP10 POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP2 SWAP1 MSTORE SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST ADDRESS JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xDD62ED3E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE DUP2 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND SWAP1 PUSH4 0xDD62ED3E SWAP1 PUSH2 0x6C8 SWAP1 ADDRESS SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0xEA1 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6E0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x6F4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x718 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0xD7F JUMP JUMPDEST LT ISZERO PUSH2 0x749 JUMPI PUSH2 0x749 DUP4 DUP4 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x815 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x60 SWAP1 PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 SWAP1 PUSH2 0x786 SWAP1 DUP6 SWAP1 DUP6 SWAP1 PUSH1 0x24 ADD PUSH2 0xF0F JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP PUSH2 0x80F DUP5 DUP3 PUSH2 0x84D JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x60 SWAP1 PUSH32 0x95EA7B300000000000000000000000000000000000000000000000000000000 SWAP1 PUSH2 0x786 SWAP1 DUP6 SWAP1 DUP6 SWAP1 PUSH1 0x24 ADD PUSH2 0xF0F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x40 MLOAD PUSH2 0x876 SWAP2 SWAP1 PUSH2 0xDDF JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x8B3 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x8B8 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0x8FC JUMPI DUP1 MLOAD PUSH2 0x8D0 JUMPI POP POP PUSH2 0x905 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 EQ ISZERO PUSH2 0x8FC JUMPI PUSH1 0x0 PUSH2 0x8E7 DUP3 PUSH1 0x0 PUSH2 0x909 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 EQ ISZERO PUSH2 0x8FA JUMPI POP POP POP PUSH2 0x905 JUMP JUMPDEST POP JUMPDEST PUSH2 0x80F DUP2 PUSH2 0x91C JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x915 DUP4 DUP4 PUSH2 0x924 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO PUSH2 0x94A JUMPI PUSH2 0x94A PUSH2 0x945 PUSH1 0x5 DUP6 MLOAD DUP6 PUSH1 0x20 ADD PUSH2 0x953 JUMP JUMPDEST PUSH2 0x91C JUMP JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH4 0x28006595 PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x972 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xF99 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x73D DUP1 PUSH2 0x10C2 DUP4 CODECOPY ADD SWAP1 JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH1 0x1F LT PUSH2 0xA64 JUMPI DUP3 DUP1 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 DUP3 CALLDATALOAD AND OR DUP6 SSTORE PUSH2 0xA91 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 0xA91 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0xA91 JUMPI DUP3 CALLDATALOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0xA76 JUMP JUMPDEST POP PUSH2 0xA9D SWAP3 SWAP2 POP PUSH2 0xAA1 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x66F SWAP2 SWAP1 JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0xA9D JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0xAA7 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0xACC JUMPI DUP2 DUP3 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xAE3 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0xAFB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xB13 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x915 DUP2 PUSH2 0x109C JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0xB36 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP7 CALLDATALOAD PUSH2 0xB41 DUP2 PUSH2 0x109C JUMP JUMPDEST SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD PUSH2 0xB51 DUP2 PUSH2 0x109C JUMP JUMPDEST SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD PUSH2 0xB61 DUP2 PUSH2 0x109C JUMP JUMPDEST SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP3 POP PUSH1 0x80 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xB83 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0xB8F DUP10 DUP3 DUP11 ADD PUSH2 0xABB JUMP JUMPDEST SWAP8 SWAP11 SWAP7 SWAP10 POP SWAP5 SWAP8 POP SWAP3 SWAP6 SWAP4 SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xBB5 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0xBC0 DUP2 PUSH2 0x109C JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0xBD0 DUP2 PUSH2 0x109C JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP7 DUP9 SUB SLT ISZERO PUSH2 0xBF8 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0xC03 DUP2 PUSH2 0x109C JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xC1F JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0xC2B DUP10 DUP4 DUP11 ADD PUSH2 0xABB JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x40 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0xC43 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0xC50 DUP9 DUP3 DUP10 ADD PUSH2 0xABB JUMP JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 POP SWAP3 SWAP5 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xC73 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0xC7E DUP2 PUSH2 0x109C JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xCA1 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0xCAC DUP2 PUSH2 0x109C JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0xCC3 DUP2 PUSH2 0x109C JUMP JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP3 SWAP4 PUSH1 0x60 ADD CALLDATALOAD SWAP3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x40 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xCE7 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xD04 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0xD10 DUP7 DUP3 DUP8 ADD PUSH2 0xABB JUMP JUMPDEST SWAP5 SWAP8 SWAP1 SWAP7 POP SWAP4 SWAP5 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x40 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xD31 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xD47 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0xD53 DUP7 DUP3 DUP8 ADD PUSH2 0xABB JUMP JUMPDEST SWAP1 SWAP8 SWAP1 SWAP7 POP PUSH1 0x20 SWAP6 SWAP1 SWAP6 ADD CALLDATALOAD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xD78 JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xD90 JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 MSTORE DUP3 DUP3 PUSH1 0x20 DUP7 ADD CALLDATACOPY DUP1 PUSH1 0x20 DUP5 DUP7 ADD ADD MSTORE PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F DUP6 ADD AND DUP6 ADD ADD SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD DUP2 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xDFF JUMPI PUSH1 0x20 DUP2 DUP7 ADD DUP2 ADD MLOAD DUP6 DUP4 ADD MSTORE ADD PUSH2 0xDE5 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0xE0D JUMPI DUP3 DUP3 DUP6 ADD MSTORE JUMPDEST POP SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP5 DUP6 AND DUP2 MSTORE SWAP3 DUP5 AND PUSH1 0x20 DUP5 ADD MSTORE SWAP3 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP7 DUP8 AND DUP2 MSTORE SWAP5 DUP7 AND PUSH1 0x20 DUP7 ADD MSTORE PUSH1 0x40 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x60 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP4 AND PUSH1 0x80 DUP4 ADD MSTORE SWAP1 SWAP2 AND PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP5 DUP6 AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE SWAP3 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH1 0x8 DUP6 LT PUSH2 0xFA7 JUMPI INVALID JUMPDEST SWAP4 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 MSTORE PUSH2 0xFCF PUSH1 0x40 DUP4 ADD DUP7 DUP9 PUSH2 0xD97 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0xFE2 DUP2 DUP6 DUP8 PUSH2 0xD97 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD PUSH1 0x20 DUP4 MSTORE DUP2 DUP5 SLOAD PUSH1 0x1 DUP2 AND PUSH1 0x0 DUP2 EQ PUSH2 0x1013 JUMPI PUSH1 0x1 DUP2 EQ PUSH2 0x104F JUMPI PUSH2 0x1088 JUMP JUMPDEST PUSH1 0x7F PUSH1 0x2 DUP4 DIV AND DUP5 MSTORE PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 DUP3 AND PUSH1 0x40 DUP8 ADD MSTORE PUSH1 0x60 DUP7 ADD SWAP3 POP PUSH2 0x1088 JUMP JUMPDEST PUSH1 0x2 DUP3 DIV DUP1 DUP6 MSTORE DUP8 DUP7 MSTORE PUSH1 0x20 DUP7 KECCAK256 DUP7 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x107E JUMPI DUP2 SLOAD DUP10 DUP3 ADD PUSH1 0x40 ADD MSTORE PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x20 ADD PUSH2 0x105F JUMP JUMPDEST DUP9 ADD PUSH1 0x40 ADD SWAP5 POP POP POP JUMPDEST POP SWAP1 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x10BE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x71D DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x7D JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xA9059CBB GT PUSH2 0x5B JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0xDE JUMPI DUP1 PUSH4 0xD863E202 EQ PUSH2 0xF1 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x106 JUMPI DUP1 PUSH4 0xE30443BC EQ PUSH2 0x119 JUMPI PUSH2 0x7D JUMP JUMPDEST DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x82 JUMPI DUP1 PUSH4 0x27E235E3 EQ PUSH2 0xAB JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0xCB JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x95 PUSH2 0x90 CALLDATASIZE PUSH1 0x4 PUSH2 0x536 JUMP JUMPDEST PUSH2 0x12C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xA2 SWAP2 SWAP1 PUSH2 0x620 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xBE PUSH2 0xB9 CALLDATASIZE PUSH1 0x4 PUSH2 0x4E0 JUMP JUMPDEST PUSH2 0x1AA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xA2 SWAP2 SWAP1 PUSH2 0x6D1 JUMP JUMPDEST PUSH2 0xBE PUSH2 0xD9 CALLDATASIZE PUSH1 0x4 PUSH2 0x4E0 JUMP JUMPDEST PUSH2 0x1BC JUMP JUMPDEST PUSH2 0x95 PUSH2 0xEC CALLDATASIZE PUSH1 0x4 PUSH2 0x536 JUMP JUMPDEST PUSH2 0x1E4 JUMP JUMPDEST PUSH2 0x104 PUSH2 0xFF CALLDATASIZE PUSH1 0x4 PUSH2 0x560 JUMP JUMPDEST PUSH2 0x36B JUMP JUMPDEST STOP JUMPDEST PUSH2 0xBE PUSH2 0x114 CALLDATASIZE PUSH1 0x4 PUSH2 0x502 JUMP JUMPDEST PUSH2 0x38B JUMP JUMPDEST PUSH2 0x104 PUSH2 0x127 CALLDATASIZE PUSH1 0x4 PUSH2 0x536 JUMP JUMPDEST PUSH2 0x393 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x36C8C27D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x0 SWAP1 CALLER SWAP1 PUSH4 0x36C8C27D SWAP1 PUSH2 0x16D SWAP1 DUP7 SWAP1 DUP7 SWAP1 PUSH1 0x4 ADD PUSH2 0x5FA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x187 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x19B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x1 SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP2 SWAP1 MSTORE SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x39DD7D0900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x0 SWAP1 CALLER SWAP1 PUSH4 0x39DD7D09 SWAP1 PUSH2 0x227 SWAP1 DUP4 SWAP1 DUP8 SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x5C9 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x241 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x255 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV SWAP1 POP PUSH1 0x0 EQ PUSH2 0x2B5 JUMPI PUSH1 0x1 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2AC SWAP2 SWAP1 PUSH2 0x62B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 PUSH1 0x1F PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x100 PUSH1 0x1 DUP8 AND ISZERO MUL ADD SWAP1 SWAP5 AND DUP6 SWAP1 DIV SWAP4 DUP5 ADD DUP2 SWAP1 DIV DUP2 MUL DUP3 ADD DUP2 ADD SWAP1 SWAP3 MSTORE DUP3 DUP2 MSTORE PUSH1 0x60 SWAP4 SWAP1 SWAP3 SWAP1 SWAP2 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x35C JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x331 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x35C JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x33F JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP DUP1 MLOAD PUSH1 0x20 DUP3 ADD RETURN JUMPDEST PUSH2 0x377 PUSH1 0x1 DUP6 DUP6 PUSH2 0x3BC JUMP JUMPDEST POP PUSH2 0x384 PUSH1 0x2 DUP4 DUP4 PUSH2 0x3BC JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH1 0x1F LT PUSH2 0x41B JUMPI DUP3 DUP1 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 DUP3 CALLDATALOAD AND OR DUP6 SSTORE PUSH2 0x448 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 0x448 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x448 JUMPI DUP3 CALLDATALOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x42D JUMP JUMPDEST POP PUSH2 0x454 SWAP3 SWAP2 POP PUSH2 0x458 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x472 SWAP2 SWAP1 JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x454 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x45E JUMP JUMPDEST SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x1A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x4AA JUMPI DUP2 DUP3 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x4C1 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x4D9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4F1 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x4FB DUP4 DUP4 PUSH2 0x475 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x514 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x51E DUP5 DUP5 PUSH2 0x475 JUMP JUMPDEST SWAP2 POP PUSH2 0x52D DUP5 PUSH1 0x20 DUP6 ADD PUSH2 0x475 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x548 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x552 DUP5 DUP5 PUSH2 0x475 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x40 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x575 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x58C JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x598 DUP9 DUP4 DUP10 ADD PUSH2 0x499 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x5B0 JUMPI DUP4 DUP5 REVERT JUMPDEST POP PUSH2 0x5BD DUP8 DUP3 DUP9 ADD PUSH2 0x499 JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD PUSH1 0x20 DUP4 MSTORE DUP2 DUP5 SLOAD PUSH1 0x1 DUP2 AND PUSH1 0x0 DUP2 EQ PUSH2 0x651 JUMPI PUSH1 0x1 DUP2 EQ PUSH2 0x68D JUMPI PUSH2 0x6C6 JUMP JUMPDEST PUSH1 0x7F PUSH1 0x2 DUP4 DIV AND DUP5 MSTORE PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 DUP3 AND PUSH1 0x40 DUP8 ADD MSTORE PUSH1 0x60 DUP7 ADD SWAP3 POP PUSH2 0x6C6 JUMP JUMPDEST PUSH1 0x2 DUP3 DIV DUP1 DUP6 MSTORE DUP8 DUP7 MSTORE PUSH1 0x20 DUP7 KECCAK256 DUP7 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x6BC JUMPI DUP2 SLOAD DUP10 DUP3 ADD PUSH1 0x40 ADD MSTORE PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x20 ADD PUSH2 0x69D JUMP JUMPDEST DUP9 ADD PUSH1 0x40 ADD SWAP5 POP POP POP JUMPDEST POP SWAP1 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP INVALID LOG3 PUSH6 0x627A7A723158 KECCAK256 PUSH15 0x739F960B540DE11FD3F93045D16F77 PUSH18 0xB5A3738CEFE34FCE781202F6EB4D6F6C6578 PUSH17 0x6572696D656E74616CF564736F6C634300 SDIV GT STOP BLOCKHASH LOG3 PUSH6 0x627A7A723158 KECCAK256 DELEGATECALL 0xE8 EXP SGT 0x49 ADDRESS PUSH26 0xE06128F2780CD5A0695D035E414F256DA34C9B785DEA5D363B6C PUSH6 0x78706572696D PUSH6 0x6E74616CF564 PUSH20 0x6F6C634300051100400000000000000000000000 ",
                "sourceMap": "3273:2043:42:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3273:2043:42;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4599:519;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;3231:192:15;;;;;;;;;:::i;:::-;;;;;;;;3702:273:42;;;;;;;;;:::i;:::-;;;;;;;;1345:150;;;;;;;;;:::i;:::-;;1095:244;;;;;;;;;:::i;4043:183::-;;;;;;;;;:::i;4289:246::-;;;;;;;;;:::i;1736:1289:15:-;;;;;;;;;:::i;3510:49:42:-;;;;;;;;;:::i;4599:519::-;4797:18;4836:142;4863:16;4893:15;4922;4951:17;4836:142;;;;;;;;;;;;;;;;;;4998:17;4992:31;;;;;;;;;;;;;;;;5027:1;4992:36;4988:92;;5051:17;5044:25;;;;;;;;;;;;;;;;;;;;4988:92;-1:-1:-1;5096:15:42;;4599:519;;;;;;:::o;3231:192:15:-;3391:25;3231:192;;;;;:::o;3702:273:42:-;3774:20;3810:15;3828;;;;;:::i;:::-;;;;;;;;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;-1:-1;3853:26:42;;;:10;:26;;;;;;;;;;;;:34;;;;;;;;3897:40;;;;3810:33;;-1:-1:-1;3853:26:42;3897:16;;:40;;3922:4;;3929:7;;3897:40;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3897:40:42;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;-1:-1;3962:5:42;;3702:273;-1:-1:-1;;;;;3702:273:42:o;1345:150::-;1444:44;1457:10;1469:7;1478:9;1444:44;;;;;;;;;;;;;;;;;1345:150;;:::o;1095:244::-;1231:101;1258:10;1282:4;1300:2;1316:6;1231:101;;;;;;;;;;;;;;;;;;1095:244;;;:::o;4043:183::-;4149:32;:17;4169:12;;4149:32;:::i;:::-;-1:-1:-1;4191:15:42;:28;-1:-1:-1;;4043:183:42:o;4289:246::-;4458:24;;;;:10;:24;;;;;;;;;;;;;:70;;;;;:24;;;:44;;:70;;4503:12;;;;4517:10;;;;4458:70;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4458:70:42;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;4458:70:42;;;;4289:246;;;;;:::o;1736:1289:15:-;1937:14;;2061:33;;;;2072:10;2061:33;;;2032:62;;2105:17;2134:20;:18;:20::i;:::-;2105:50;;2165:24;2204:16;2192:39;;;2240:4;2192:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2192:54:15;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2192:54:15;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;2192:54:15;;;;;;;;;2165:81;;2337:83;2366:16;2392:8;2403:16;2337:28;:83::i;:::-;2511:20;2534:8;:22;;;2570:16;2600;2630:14;2658:6;2534:140;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2534:140:15;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2534:140:15;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;2534:140:15;;;;;;;;;2511:163;;2738:56;2761:14;2777:2;2781:12;2738:22;:56::i;:::-;2810:177;2843:16;2873:14;2901:16;2931:12;2957:4;2975:2;2810:177;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3004:14:15;;1736:1289;-1:-1:-1;;;;;;;;;;1736:1289:15:o;3510:49:42:-;;;;;;;;;;;;;;;;:::o;5187:127::-;5302:4;5187:127;;:::o;1978:267:50:-;2115:52;;;;;2170:6;;2115:28;;;;;;:52;;2152:4;;2159:7;;2115:52;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2115:52:50;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2115:52:50;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;2115:52:50;;;;;;;;;:61;2111:128;;;2192:36;2200:5;2207:7;2224:2;2192:7;:36::i;:::-;1978:267;;;:::o;2581:324::-;2727:114;;2703:21;;2763:32;;2727:114;;2809:2;;2825:6;;2727:114;;;;;;;;22:32:-1;26:21;;;22:32;6:49;;2727:114:50;;;49:4:-1;25:18;;61:17;;2727:114:50;182:15:-1;2727:114:50;;;;179:29:-1;;;;160:49;;;2727:114:50;-1:-1:-1;2851:47:50;2882:5;2727:114;2851:30;:47::i;:::-;2581:324;;;;:::o;1194:338::-;1347:121;;1323:21;;1383:31;;1347:121;;1428:7;;1449:9;;1347:121;;;;6120:571;6252:15;6269:23;6296:6;:11;;6308:8;6296:21;;;;;;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;6251:66:50;;;;6331:10;6327:315;;;6361:17;;6357:67;;6403:7;;;;6357:67;6441:10;:17;6462:2;6441:23;6437:195;;;6484:14;6501:35;6522:10;6534:1;6501:20;:35::i;:::-;6484:52;;6558:6;6568:1;6558:11;6554:64;;;6593:7;;;;;6554:64;6437:195;;6651:33;6673:10;6651:21;:33::i;6120:571::-;;;:::o;15929:220:64:-;16050:14;16097:21;16109:1;16112:5;16097:11;:21::i;:::-;16089:30;15929:220;-1:-1:-1;;;15929:220:64:o;1511:170:69:-;1654:9;1648:16;1641:4;1630:9;1626:20;1619:46;14133:679:64;14254:14;14299:5;14307:2;14299:10;14288:1;:8;:21;14284:297;;;14325:245;14347:222;14409:92;14519:1;:8;14545:5;14553:2;14545:10;14347:44;:222::i;:::-;14325:21;:245::i;:::-;-1:-1:-1;14759:13:64;14661:2;14759:13;14753:20;;14133:679::o;1292:378:65:-;1480:12;1232:10;1551:37;;1602:9;1625:6;1645:8;1515:148;;;;;;;;;;;;;;;22:32:-1;26:21;;;22:32;6:49;;1515:148:65;;;49:4:-1;25:18;;61:17;;1515:148:65;182:15:-1;1515:148:65;;;;179:29:-1;;;;160:49;;;1515:148:65;-1:-1:-1;1292:378:65;;;;;:::o;3273:2043:42:-;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3273:2043:42;;;-1:-1:-1;3273:2043:42;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;446:336:-1;;;560:3;553:4;545:6;541:17;537:27;527:2;;-1:-1;;568:12;527:2;-1:-1;598:20;;638:18;627:30;;624:2;;;-1:-1;;660:12;624:2;704:4;696:6;692:17;680:29;;755:3;704:4;735:17;696:6;721:32;;718:41;715:2;;;772:1;;762:12;715:2;520:262;;;;;;1428:241;;1532:2;1520:9;1511:7;1507:23;1503:32;1500:2;;;-1:-1;;1538:12;1500:2;85:6;72:20;97:33;124:5;97:33;;1940:867;;;;;;;2131:3;2119:9;2110:7;2106:23;2102:33;2099:2;;;-1:-1;;2138:12;2099:2;85:6;72:20;97:33;124:5;97:33;;;2190:63;-1:-1;2290:2;2329:22;;72:20;97:33;72:20;97:33;;;2298:63;-1:-1;2398:2;2437:22;;72:20;97:33;72:20;97:33;;;2406:63;-1:-1;2506:2;2545:22;;1217:20;;-1:-1;2642:3;2627:19;;2614:33;2667:18;2656:30;;2653:2;;;-1:-1;;2689:12;2653:2;2727:64;2783:7;2774:6;2763:9;2759:22;2727:64;;;2093:714;;;;-1:-1;2093:714;;-1:-1;2093:714;;2717:74;;2093:714;-1:-1;;;2093:714;2814:491;;;;2952:2;2940:9;2931:7;2927:23;2923:32;2920:2;;;-1:-1;;2958:12;2920:2;85:6;72:20;97:33;124:5;97:33;;;3010:63;-1:-1;3110:2;3149:22;;72:20;97:33;72:20;97:33;;;2914:391;;3118:63;;-1:-1;;;3218:2;3257:22;;;;1217:20;;2914:391;3312:741;;;;;;3489:2;3477:9;3468:7;3464:23;3460:32;3457:2;;;-1:-1;;3495:12;3457:2;85:6;72:20;97:33;124:5;97:33;;;3547:63;-1:-1;3675:2;3660:18;;3647:32;3699:18;3688:30;;;3685:2;;;-1:-1;;3721:12;3685:2;3759:65;3816:7;3807:6;3796:9;3792:22;3759:65;;;3749:75;;-1:-1;3749:75;-1:-1;3889:2;3874:18;;3861:32;;-1:-1;3902:30;;;3899:2;;;-1:-1;;3935:12;3899:2;;3973:64;4029:7;4020:6;4009:9;4005:22;3973:64;;;3451:602;;;;-1:-1;3451:602;;-1:-1;3963:74;;;3451:602;-1:-1;;;3451:602;4060:366;;;4181:2;4169:9;4160:7;4156:23;4152:32;4149:2;;;-1:-1;;4187:12;4149:2;85:6;72:20;97:33;124:5;97:33;;;4239:63;4339:2;4378:22;;;;1217:20;;-1:-1;;;4143:283;4433:617;;;;;4588:3;4576:9;4567:7;4563:23;4559:33;4556:2;;;-1:-1;;4595:12;4556:2;85:6;72:20;97:33;124:5;97:33;;;4647:63;-1:-1;4747:2;4786:22;;1217:20;;-1:-1;4855:2;4894:22;;72:20;97:33;72:20;97:33;;;4550:500;;;;-1:-1;4863:63;;4963:2;5002:22;1217:20;;-1:-1;;4550:500;5057:490;;;;5197:2;5185:9;5176:7;5172:23;5168:32;5165:2;;;-1:-1;;5203:12;5165:2;375:6;362:20;5255:63;;5383:2;5372:9;5368:18;5355:32;5407:18;5399:6;5396:30;5393:2;;;-1:-1;;5429:12;5393:2;5467:64;5523:7;5514:6;5503:9;5499:22;5467:64;;;5159:388;;5457:74;;-1:-1;5457:74;;-1:-1;;;;5159:388;5554:492;;;;5695:2;5683:9;5674:7;5670:23;5666:32;5663:2;;;-1:-1;;5701:12;5663:2;5759:17;5746:31;5797:18;5789:6;5786:30;5783:2;;;-1:-1;;5819:12;5783:2;5857:65;5914:7;5905:6;5894:9;5890:22;5857:65;;;5847:75;;;;-1:-1;5959:2;5998:22;;;;1217:20;;5657:389;-1:-1;;;;5657:389;6053:241;;6157:2;6145:9;6136:7;6132:23;6128:32;6125:2;;;-1:-1;;6163:12;6125:2;-1:-1;1217:20;;6119:175;-1:-1;6119:175;6301:263;;6416:2;6404:9;6395:7;6391:23;6387:32;6384:2;;;-1:-1;;6422:12;6384:2;-1:-1;1365:13;;6378:186;-1:-1;6378:186;6980:297;;15293:6;15288:3;15281:19;17443:6;17438:3;15330:4;15325:3;15321:14;17420:30;-1:-1;15330:4;17490:6;15325:3;17481:16;;17474:27;15330:4;17876:7;17880:2;7263:6;17860:14;17856:28;15325:3;7232:39;;7225:46;;7080:197;;;;;;9327:262;;7445:5;15137:12;-1:-1;17588:101;17602:6;17599:1;17596:13;17588:101;;;7589:4;17669:11;;;;;17663:18;17650:11;;;17643:39;17617:10;17588:101;;;17704:6;17701:1;17698:13;17695:2;;;-1:-1;17760:6;17755:3;17751:16;17744:27;17695:2;-1:-1;7620:16;;;;;9452:137;-1:-1;;9452:137;9596:213;16366:42;16355:54;;;;6791:37;;9714:2;9699:18;;9685:124;9816:563;16366:42;16355:54;;;6650:58;;16355:54;;;10199:2;10184:18;;6791:37;16355:54;;10282:2;10267:18;;6791:37;10365:2;10350:18;;9278:37;;;;10026:3;10011:19;;9997:382;10386:451;16366:42;16355:54;;;6650:58;;16355:54;;;;10740:2;10725:18;;6791:37;10823:2;10808:18;;9278:37;;;;10568:2;10553:18;;10539:298;10844:324;16366:42;16355:54;;;6791:37;;16355:54;;11154:2;11139:18;;6791:37;10990:2;10975:18;;10961:207;11175:771;16366:42;16355:54;;;6791:37;;16355:54;;;11598:2;11583:18;;6791:37;11681:2;11666:18;;9278:37;;;;11764:2;11749:18;;9278:37;;;;16355:54;;11847:3;11832:19;;6791:37;16355:54;;;11931:3;11916:19;;6791:37;11433:3;11418:19;;11404:542;11953:324;16366:42;16355:54;;;;6791:37;;12263:2;12248:18;;9278:37;12099:2;12084:18;;12070:207;12284:547;16366:42;16355:54;;;6791:37;;12651:2;12636:18;;9278:37;;;;16355:54;;12734:2;12719:18;;6791:37;12817:2;12802:18;;9278:37;;;;12486:3;12471:19;;12457:374;12838:209;16029:66;16018:78;;;;6909:36;;12954:2;12939:18;;12925:122;13310:503;13518:2;13503:18;;18002:1;17992:12;;17982:2;;18008:9;17982:2;7922:84;;;13716:2;13701:18;;9278:37;;;;13799:2;13784:18;;;9278:37;13489:324;;13820:536;;14024:2;14045:17;14038:47;14099:88;14024:2;14013:9;14009:18;14173:6;14165;14099:88;;;14235:9;14229:4;14225:20;14220:2;14209:9;14205:18;14198:48;14260:86;14341:4;14332:6;14324;14260:86;;;14252:94;13995:361;-1:-1;;;;;;;13995:361;14363:295;;14498:2;14487:9;14483:18;14498:2;14519:17;14512:47;-1:-1;8495:5;8489:12;8529:1;8518:9;8514:17;8542:1;8537:248;;;;8796:1;8791:402;;;;8507:686;;8537:248;8615:4;8611:1;8600:9;8596:17;8592:28;15288:3;15281:19;8739:9;8728;8724:25;15321:14;14487:9;15321:14;8712:38;8764:14;14487:9;8764:14;8757:21;;8537:248;;8791:402;8860:1;8849:9;8845:17;15293:6;15288:3;15281:19;14990:3;-1:-1;14980:14;14498:2;-1:-1;15009:18;-1:-1;9031:130;9045:6;9042:1;9039:13;9031:130;;;9104:14;;9091:11;;;15321:14;9091:11;9084:35;8529:1;9138:15;;;;14498:2;9060:12;9031:130;;;9175:11;;15321:14;9175:11;;-1:-1;;;8507:686;-1:-1;14565:83;;14469:189;-1:-1;;;;;14469:189;14665:213;9278:37;;;14783:2;14768:18;;14754:124;18031:117;16366:42;18118:5;16355:54;18093:5;18090:35;18080:2;;18139:1;;18129:12;18080:2;18074:74;"
            }
        }
    },
    "sourceTreeHashHex": "0x25ac5fba94e48ee938fc1a791a8cd72f0abe1c93abf8287821cc6b8a27f70bdd",
    "sources": {
        "./TestEth2DaiBridge.sol": {
            "id": 42
        },
        "@0x/contracts-erc20/contracts/src/interfaces/IERC20Token.sol": {
            "id": 51
        },
        "../src/bridges/Eth2DaiBridge.sol": {
            "id": 15
        },
        "@0x/contracts-erc20/contracts/src/LibERC20Token.sol": {
            "id": 50
        },
        "@0x/contracts-utils/contracts/src/LibRichErrors.sol": {
            "id": 69
        },
        "@0x/contracts-utils/contracts/src/LibBytes.sol": {
            "id": 64
        },
        "@0x/contracts-utils/contracts/src/LibBytesRichErrors.sol": {
            "id": 65
        },
        "@0x/contracts-exchange-libs/contracts/src/IWallet.sol": {
            "id": 53
        },
        "@0x/contracts-utils/contracts/src/DeploymentConstants.sol": {
            "id": 60
        },
        "../src/interfaces/IERC20Bridge.sol": {
            "id": 31
        },
        "../src/interfaces/IEth2Dai.sol": {
            "id": 32
        }
    },
    "sourceCodes": {
        "./TestEth2DaiBridge.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/interfaces/IERC20Token.sol\";\nimport \"../src/bridges/Eth2DaiBridge.sol\";\nimport \"../src/interfaces/IEth2Dai.sol\";\n\n\n// solhint-disable no-simple-event-func-name\ncontract TestEvents {\n\n    event TokenTransfer(\n        address token,\n        address from,\n        address to,\n        uint256 amount\n    );\n\n    event TokenApprove(\n        address token,\n        address spender,\n        uint256 allowance\n    );\n\n    function raiseTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    )\n        external\n    {\n        emit TokenTransfer(\n            msg.sender,\n            from,\n            to,\n            amount\n        );\n    }\n\n    function raiseTokenApprove(address spender, uint256 allowance)\n        external\n    {\n        emit TokenApprove(msg.sender, spender, allowance);\n    }\n}\n\n\n/// @dev A minimalist ERC20 token.\ncontract TestToken {\n\n    mapping (address => uint256) public balances;\n    string private _nextTransferRevertReason;\n    bytes private _nextTransferReturnData;\n\n    /// @dev Just calls `raiseTokenTransfer()` on the caller.\n    function transfer(address to, uint256 amount)\n        external\n        returns (bool)\n    {\n        TestEvents(msg.sender).raiseTokenTransfer(msg.sender, to, amount);\n        if (bytes(_nextTransferRevertReason).length != 0) {\n            revert(_nextTransferRevertReason);\n        }\n        bytes memory returnData = _nextTransferReturnData;\n        assembly { return(add(returnData, 0x20), mload(returnData)) }\n    }\n\n    /// @dev Set the balance for `owner`.\n    function setBalance(address owner, uint256 balance)\n        external\n    {\n        balances[owner] = balance;\n    }\n\n    /// @dev Set the behavior of the `transfer()` call.\n    function setTransferBehavior(\n        string calldata revertReason,\n        bytes calldata returnData\n    )\n        external\n    {\n        _nextTransferRevertReason = revertReason;\n        _nextTransferReturnData = returnData;\n    }\n\n    /// @dev Just calls `raiseTokenApprove()` on the caller.\n    function approve(address spender, uint256 allowance)\n        external\n        returns (bool)\n    {\n        TestEvents(msg.sender).raiseTokenApprove(spender, allowance);\n        return true;\n    }\n\n    function allowance(address, address) external view returns (uint256) {\n        return 0;\n    }\n\n    /// @dev Retrieve the balance for `owner`.\n    function balanceOf(address owner)\n        external\n        view\n        returns (uint256)\n    {\n        return balances[owner];\n    }\n}\n\n\n/// @dev Eth2DaiBridge overridden to mock tokens and\n///      implement IEth2Dai.\ncontract TestEth2DaiBridge is\n    TestEvents,\n    IEth2Dai,\n    Eth2DaiBridge\n{\n    event SellAllAmount(\n        address sellToken,\n        uint256 sellTokenAmount,\n        address buyToken,\n        uint256 minimumFillAmount\n    );\n\n    mapping (address => TestToken)  public testTokens;\n    string private _nextRevertReason;\n    uint256 private _nextFillAmount;\n\n    /// @dev Create a token and set this contract's balance.\n    function createToken(uint256 balance)\n        external\n        returns (address tokenAddress)\n    {\n        TestToken token = new TestToken();\n        testTokens[address(token)] = token;\n        token.setBalance(address(this), balance);\n        return address(token);\n    }\n\n    /// @dev Set the behavior for `IEth2Dai.sellAllAmount()`.\n    function setFillBehavior(string calldata revertReason, uint256 fillAmount)\n        external\n    {\n        _nextRevertReason = revertReason;\n        _nextFillAmount = fillAmount;\n    }\n\n    /// @dev Set the behavior of a token's `transfer()`.\n    function setTransferBehavior(\n        address tokenAddress,\n        string calldata revertReason,\n        bytes calldata returnData\n    )\n        external\n    {\n        testTokens[tokenAddress].setTransferBehavior(revertReason, returnData);\n    }\n\n    /// @dev Implementation of `IEth2Dai.sellAllAmount()`\n    function sellAllAmount(\n        address sellTokenAddress,\n        uint256 sellTokenAmount,\n        address buyTokenAddress,\n        uint256 minimumFillAmount\n    )\n        external\n        returns (uint256 fillAmount)\n    {\n        emit SellAllAmount(\n            sellTokenAddress,\n            sellTokenAmount,\n            buyTokenAddress,\n            minimumFillAmount\n        );\n        if (bytes(_nextRevertReason).length != 0) {\n            revert(_nextRevertReason);\n        }\n        return _nextFillAmount;\n    }\n\n    // @dev This contract will double as the Eth2Dai contract.\n    function _getEth2DaiAddress()\n        internal\n        view\n        returns (address)\n    {\n        return address(this);\n    }\n}\n",
        "@0x/contracts-erc20/contracts/src/interfaces/IERC20Token.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\ncontract IERC20Token {\n\n    // solhint-disable no-simple-event-func-name\n    event Transfer(\n        address indexed _from,\n        address indexed _to,\n        uint256 _value\n    );\n\n    event Approval(\n        address indexed _owner,\n        address indexed _spender,\n        uint256 _value\n    );\n\n    /// @dev send `value` token to `to` from `msg.sender`\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transfer(address _to, uint256 _value)\n        external\n        returns (bool);\n\n    /// @dev send `value` token to `to` from `from` on the condition it is approved by `from`\n    /// @param _from The address of the sender\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _value\n    )\n        external\n        returns (bool);\n\n    /// @dev `msg.sender` approves `_spender` to spend `_value` tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @param _value The amount of wei to be approved for transfer\n    /// @return Always true if the call has enough gas to complete execution\n    function approve(address _spender, uint256 _value)\n        external\n        returns (bool);\n\n    /// @dev Query total supply of token\n    /// @return Total supply of token\n    function totalSupply()\n        external\n        view\n        returns (uint256);\n\n    /// @param _owner The address from which the balance will be retrieved\n    /// @return Balance of owner\n    function balanceOf(address _owner)\n        external\n        view\n        returns (uint256);\n\n    /// @param _owner The address of the account owning tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address _owner, address _spender)\n        external\n        view\n        returns (uint256);\n}\n",
        "../src/bridges/Eth2DaiBridge.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/interfaces/IERC20Token.sol\";\nimport \"@0x/contracts-erc20/contracts/src/LibERC20Token.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/IWallet.sol\";\nimport \"@0x/contracts-utils/contracts/src/DeploymentConstants.sol\";\nimport \"../interfaces/IERC20Bridge.sol\";\nimport \"../interfaces/IEth2Dai.sol\";\n\n\n// solhint-disable space-after-comma\ncontract Eth2DaiBridge is\n    IERC20Bridge,\n    IWallet,\n    DeploymentConstants\n{\n    /// @dev Callback for `IERC20Bridge`. Tries to buy `amount` of\n    ///      `toTokenAddress` tokens by selling the entirety of the opposing asset\n    ///      (DAI or WETH) to the Eth2Dai contract, then transfers the bought\n    ///      tokens to `to`.\n    /// @param toTokenAddress The token to give to `to` (either DAI or WETH).\n    /// @param from The maker (this contract).\n    /// @param to The recipient of the bought tokens.\n    /// @param amount Minimum amount of `toTokenAddress` tokens to buy.\n    /// @param bridgeData The abi-encoeded \"from\" token address.\n    /// @return success The magic bytes if successful.\n    function bridgeTransferFrom(\n        address toTokenAddress,\n        address from,\n        address to,\n        uint256 amount,\n        bytes calldata bridgeData\n    )\n        external\n        returns (bytes4 success)\n    {\n        // Decode the bridge data to get the `fromTokenAddress`.\n        (address fromTokenAddress) = abi.decode(bridgeData, (address));\n\n        IEth2Dai exchange = IEth2Dai(_getEth2DaiAddress());\n        uint256 fromTokenBalance = IERC20Token(fromTokenAddress).balanceOf(address(this));\n        // Grant an allowance to the exchange to spend `fromTokenAddress` token.\n        LibERC20Token.approveIfBelow(fromTokenAddress, address(exchange), fromTokenBalance);\n\n        // Try to sell all of this contract's `fromTokenAddress` token balance.\n        uint256 boughtAmount = exchange.sellAllAmount(\n            fromTokenAddress,\n            fromTokenBalance,\n            toTokenAddress,\n            amount\n        );\n        // Transfer the converted `toToken`s to `to`.\n        LibERC20Token.transfer(toTokenAddress, to, boughtAmount);\n\n        emit ERC20BridgeTransfer(\n            fromTokenAddress,\n            toTokenAddress,\n            fromTokenBalance,\n            boughtAmount,\n            from,\n            to\n        );\n        return BRIDGE_SUCCESS;\n    }\n\n    /// @dev `SignatureType.Wallet` callback, so that this bridge can be the maker\n    ///      and sign for itself in orders. Always succeeds.\n    /// @return magicValue Magic success bytes, always.\n    function isValidSignature(\n        bytes32,\n        bytes calldata\n    )\n        external\n        view\n        returns (bytes4 magicValue)\n    {\n        return LEGACY_WALLET_MAGIC_VALUE;\n    }\n}\n",
        "@0x/contracts-erc20/contracts/src/LibERC20Token.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\nimport \"@0x/contracts-utils/contracts/src/LibRichErrors.sol\";\nimport \"@0x/contracts-utils/contracts/src/LibBytes.sol\";\nimport \"../src/interfaces/IERC20Token.sol\";\n\n\nlibrary LibERC20Token {\n    bytes constant private DECIMALS_CALL_DATA = hex\"313ce567\";\n\n    /// @dev Calls `IERC20Token(token).approve()`.\n    ///      Reverts if `false` is returned or if the return\n    ///      data length is nonzero and not 32 bytes.\n    /// @param token The address of the token contract.\n    /// @param spender The address that receives an allowance.\n    /// @param allowance The allowance to set.\n    function approve(\n        address token,\n        address spender,\n        uint256 allowance\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            IERC20Token(0).approve.selector,\n            spender,\n            allowance\n        );\n        _callWithOptionalBooleanResult(token, callData);\n    }\n\n    /// @dev Calls `IERC20Token(token).approve()` and sets the allowance to the\n    ///      maximum if the current approval is not already >= an amount.\n    ///      Reverts if `false` is returned or if the return\n    ///      data length is nonzero and not 32 bytes.\n    /// @param token The address of the token contract.\n    /// @param spender The address that receives an allowance.\n    /// @param amount The minimum allowance needed.\n    function approveIfBelow(\n        address token,\n        address spender,\n        uint256 amount\n    )\n        internal\n    {\n        if (IERC20Token(token).allowance(address(this), spender) < amount) {\n            approve(token, spender, uint256(-1));\n        }\n    }\n\n    /// @dev Calls `IERC20Token(token).transfer()`.\n    ///      Reverts if `false` is returned or if the return\n    ///      data length is nonzero and not 32 bytes.\n    /// @param token The address of the token contract.\n    /// @param to The address that receives the tokens\n    /// @param amount Number of tokens to transfer.\n    function transfer(\n        address token,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            IERC20Token(0).transfer.selector,\n            to,\n            amount\n        );\n        _callWithOptionalBooleanResult(token, callData);\n    }\n\n    /// @dev Calls `IERC20Token(token).transferFrom()`.\n    ///      Reverts if `false` is returned or if the return\n    ///      data length is nonzero and not 32 bytes.\n    /// @param token The address of the token contract.\n    /// @param from The owner of the tokens.\n    /// @param to The address that receives the tokens\n    /// @param amount Number of tokens to transfer.\n    function transferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            IERC20Token(0).transferFrom.selector,\n            from,\n            to,\n            amount\n        );\n        _callWithOptionalBooleanResult(token, callData);\n    }\n\n    /// @dev Retrieves the number of decimals for a token.\n    ///      Returns `18` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @return tokenDecimals The number of decimals places for the token.\n    function decimals(address token)\n        internal\n        view\n        returns (uint8 tokenDecimals)\n    {\n        tokenDecimals = 18;\n        (bool didSucceed, bytes memory resultData) = token.staticcall(DECIMALS_CALL_DATA);\n        if (didSucceed && resultData.length == 32) {\n            tokenDecimals = uint8(LibBytes.readUint256(resultData, 0));\n        }\n    }\n\n    /// @dev Retrieves the allowance for a token, owner, and spender.\n    ///      Returns `0` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @param owner The owner of the tokens.\n    /// @param spender The address the spender.\n    /// @return allowance The allowance for a token, owner, and spender.\n    function allowance(address token, address owner, address spender)\n        internal\n        view\n        returns (uint256 allowance_)\n    {\n        (bool didSucceed, bytes memory resultData) = token.staticcall(\n            abi.encodeWithSelector(\n                IERC20Token(0).allowance.selector,\n                owner,\n                spender\n            )\n        );\n        if (didSucceed && resultData.length == 32) {\n            allowance_ = LibBytes.readUint256(resultData, 0);\n        }\n    }\n\n    /// @dev Retrieves the balance for a token owner.\n    ///      Returns `0` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @param owner The owner of the tokens.\n    /// @return balance The token balance of an owner.\n    function balanceOf(address token, address owner)\n        internal\n        view\n        returns (uint256 balance)\n    {\n        (bool didSucceed, bytes memory resultData) = token.staticcall(\n            abi.encodeWithSelector(\n                IERC20Token(0).balanceOf.selector,\n                owner\n            )\n        );\n        if (didSucceed && resultData.length == 32) {\n            balance = LibBytes.readUint256(resultData, 0);\n        }\n    }\n\n    /// @dev Executes a call on address `target` with calldata `callData`\n    ///      and asserts that either nothing was returned or a single boolean\n    ///      was returned equal to `true`.\n    /// @param target The call target.\n    /// @param callData The abi-encoded call data.\n    function _callWithOptionalBooleanResult(\n        address target,\n        bytes memory callData\n    )\n        private\n    {\n        (bool didSucceed, bytes memory resultData) = target.call(callData);\n        if (didSucceed) {\n            if (resultData.length == 0) {\n                return;\n            }\n            if (resultData.length == 32) {\n                uint256 result = LibBytes.readUint256(resultData, 0);\n                if (result == 1) {\n                    return;\n                }\n            }\n        }\n        LibRichErrors.rrevert(resultData);\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/LibRichErrors.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\nlibrary LibRichErrors {\n\n    // bytes4(keccak256(\"Error(string)\"))\n    bytes4 internal constant STANDARD_ERROR_SELECTOR =\n        0x08c379a0;\n\n    // solhint-disable func-name-mixedcase\n    /// @dev ABI encode a standard, string revert error payload.\n    ///      This is the same payload that would be included by a `revert(string)`\n    ///      solidity statement. It has the function signature `Error(string)`.\n    /// @param message The error string.\n    /// @return The ABI encoded error.\n    function StandardError(\n        string memory message\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            STANDARD_ERROR_SELECTOR,\n            bytes(message)\n        );\n    }\n    // solhint-enable func-name-mixedcase\n\n    /// @dev Reverts an encoded rich revert reason `errorData`.\n    /// @param errorData ABI encoded error data.\n    function rrevert(bytes memory errorData)\n        internal\n        pure\n    {\n        assembly {\n            revert(add(errorData, 0x20), mload(errorData))\n        }\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/LibBytes.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\nimport \"./LibBytesRichErrors.sol\";\nimport \"./LibRichErrors.sol\";\n\n\nlibrary LibBytes {\n\n    using LibBytes for bytes;\n\n    /// @dev Gets the memory address for a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of byte array. This\n    ///         points to the header of the byte array which contains\n    ///         the length.\n    function rawAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := input\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Gets the memory address for the contents of a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of the contents of the byte array.\n    function contentAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := add(input, 32)\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Copies `length` bytes from memory location `source` to `dest`.\n    /// @param dest memory address to copy bytes to.\n    /// @param source memory address to copy bytes from.\n    /// @param length number of bytes to copy.\n    function memCopy(\n        uint256 dest,\n        uint256 source,\n        uint256 length\n    )\n        internal\n        pure\n    {\n        if (length < 32) {\n            // Handle a partial word by reading destination and masking\n            // off the bits we are interested in.\n            // This correctly handles overlap, zero lengths and source == dest\n            assembly {\n                let mask := sub(exp(256, sub(32, length)), 1)\n                let s := and(mload(source), not(mask))\n                let d := and(mload(dest), mask)\n                mstore(dest, or(s, d))\n            }\n        } else {\n            // Skip the O(length) loop when source == dest.\n            if (source == dest) {\n                return;\n            }\n\n            // For large copies we copy whole words at a time. The final\n            // word is aligned to the end of the range (instead of after the\n            // previous) to handle partial words. So a copy will look like this:\n            //\n            //  ####\n            //      ####\n            //          ####\n            //            ####\n            //\n            // We handle overlap in the source and destination range by\n            // changing the copying direction. This prevents us from\n            // overwriting parts of source that we still need to copy.\n            //\n            // This correctly handles source == dest\n            //\n            if (source > dest) {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because it\n                    // is easier to compare with in the loop, and these\n                    // are also the addresses we need for copying the\n                    // last bytes.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the last 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the last bytes in\n                    // source already due to overlap.\n                    let last := mload(sEnd)\n\n                    // Copy whole words front to back\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} lt(source, sEnd) {} {\n                        mstore(dest, mload(source))\n                        source := add(source, 32)\n                        dest := add(dest, 32)\n                    }\n\n                    // Write the last 32 bytes\n                    mstore(dEnd, last)\n                }\n            } else {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because those\n                    // are the starting points when copying a word at the end.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the first 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the first bytes in\n                    // source already due to overlap.\n                    let first := mload(source)\n\n                    // Copy whole words back to front\n                    // We use a signed comparisson here to allow dEnd to become\n                    // negative (happens when source and dest < 32). Valid\n                    // addresses in local memory will never be larger than\n                    // 2**255, so they can be safely re-interpreted as signed.\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} slt(dest, dEnd) {} {\n                        mstore(dEnd, mload(sEnd))\n                        sEnd := sub(sEnd, 32)\n                        dEnd := sub(dEnd, 32)\n                    }\n\n                    // Write the first 32 bytes\n                    mstore(dest, first)\n                }\n            }\n        }\n    }\n\n    /// @dev Returns a slices from a byte array.\n    /// @param b The byte array to take a slice from.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function slice(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure and copy contents\n        result = new bytes(to - from);\n        memCopy(\n            result.contentAddress(),\n            b.contentAddress() + from,\n            result.length\n        );\n        return result;\n    }\n\n    /// @dev Returns a slice from a byte array without preserving the input.\n    /// @param b The byte array to take a slice from. Will be destroyed in the process.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    /// @dev When `from == 0`, the original array will match the slice. In other cases its state will be corrupted.\n    function sliceDestructive(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure around [from, to) in-place.\n        assembly {\n            result := add(b, from)\n            mstore(result, sub(to, from))\n        }\n        return result;\n    }\n\n    /// @dev Pops the last byte off of a byte array by modifying its length.\n    /// @param b Byte array that will be modified.\n    /// @return The byte that was popped off.\n    function popLastByte(bytes memory b)\n        internal\n        pure\n        returns (bytes1 result)\n    {\n        if (b.length == 0) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.LengthGreaterThanZeroRequired,\n                b.length,\n                0\n            ));\n        }\n\n        // Store last byte.\n        result = b[b.length - 1];\n\n        assembly {\n            // Decrement length of byte array.\n            let newLen := sub(mload(b), 1)\n            mstore(b, newLen)\n        }\n        return result;\n    }\n\n    /// @dev Tests equality of two byte arrays.\n    /// @param lhs First byte array to compare.\n    /// @param rhs Second byte array to compare.\n    /// @return True if arrays are the same. False otherwise.\n    function equals(\n        bytes memory lhs,\n        bytes memory rhs\n    )\n        internal\n        pure\n        returns (bool equal)\n    {\n        // Keccak gas cost is 30 + numWords * 6. This is a cheap way to compare.\n        // We early exit on unequal lengths, but keccak would also correctly\n        // handle this.\n        return lhs.length == rhs.length && keccak256(lhs) == keccak256(rhs);\n    }\n\n    /// @dev Reads an address from a position in a byte array.\n    /// @param b Byte array containing an address.\n    /// @param index Index in byte array of address.\n    /// @return address from byte array.\n    function readAddress(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (address result)\n    {\n        if (b.length < index + 20) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Read address from array memory\n        assembly {\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 20-byte mask to obtain address\n            result := and(mload(add(b, index)), 0xffffffffffffffffffffffffffffffffffffffff)\n        }\n        return result;\n    }\n\n    /// @dev Writes an address into a specific position in a byte array.\n    /// @param b Byte array to insert address into.\n    /// @param index Index in byte array of address.\n    /// @param input Address to put into byte array.\n    function writeAddress(\n        bytes memory b,\n        uint256 index,\n        address input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 20) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Store address into array memory\n        assembly {\n            // The address occupies 20 bytes and mstore stores 32 bytes.\n            // First fetch the 32-byte word where we'll be storing the address, then\n            // apply a mask so we have only the bytes in the word that the address will not occupy.\n            // Then combine these bytes with the address and store the 32 bytes back to memory with mstore.\n\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 12-byte mask to obtain extra bytes occupying word of memory where we'll store the address\n            let neighbors := and(\n                mload(add(b, index)),\n                0xffffffffffffffffffffffff0000000000000000000000000000000000000000\n            )\n\n            // Make sure input address is clean.\n            // (Solidity does not guarantee this)\n            input := and(input, 0xffffffffffffffffffffffffffffffffffffffff)\n\n            // Store the neighbors and address into memory\n            mstore(add(b, index), xor(input, neighbors))\n        }\n    }\n\n    /// @dev Reads a bytes32 value from a position in a byte array.\n    /// @param b Byte array containing a bytes32 value.\n    /// @param index Index in byte array of bytes32 value.\n    /// @return bytes32 value from byte array.\n    function readBytes32(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        if (b.length < index + 32) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            result := mload(add(b, index))\n        }\n        return result;\n    }\n\n    /// @dev Writes a bytes32 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input bytes32 to put into byte array.\n    function writeBytes32(\n        bytes memory b,\n        uint256 index,\n        bytes32 input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 32) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            mstore(add(b, index), input)\n        }\n    }\n\n    /// @dev Reads a uint256 value from a position in a byte array.\n    /// @param b Byte array containing a uint256 value.\n    /// @param index Index in byte array of uint256 value.\n    /// @return uint256 value from byte array.\n    function readUint256(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (uint256 result)\n    {\n        result = uint256(readBytes32(b, index));\n        return result;\n    }\n\n    /// @dev Writes a uint256 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input uint256 to put into byte array.\n    function writeUint256(\n        bytes memory b,\n        uint256 index,\n        uint256 input\n    )\n        internal\n        pure\n    {\n        writeBytes32(b, index, bytes32(input));\n    }\n\n    /// @dev Reads an unpadded bytes4 value from a position in a byte array.\n    /// @param b Byte array containing a bytes4 value.\n    /// @param index Index in byte array of bytes4 value.\n    /// @return bytes4 value from byte array.\n    function readBytes4(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes4 result)\n    {\n        if (b.length < index + 4) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsFourRequired,\n                b.length,\n                index + 4\n            ));\n        }\n\n        // Arrays are prefixed by a 32 byte length field\n        index += 32;\n\n        // Read the bytes4 from array memory\n        assembly {\n            result := mload(add(b, index))\n            // Solidity does not require us to clean the trailing bytes.\n            // We do it anyway\n            result := and(result, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)\n        }\n        return result;\n    }\n\n    /// @dev Writes a new length to a byte array.\n    ///      Decreasing length will lead to removing the corresponding lower order bytes from the byte array.\n    ///      Increasing length may lead to appending adjacent in-memory bytes to the end of the byte array.\n    /// @param b Bytes array to write new length to.\n    /// @param length New length of byte array.\n    function writeLength(bytes memory b, uint256 length)\n        internal\n        pure\n    {\n        assembly {\n            mstore(b, length)\n        }\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/LibBytesRichErrors.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\nlibrary LibBytesRichErrors {\n\n    enum InvalidByteOperationErrorCodes {\n        FromLessThanOrEqualsToRequired,\n        ToLessThanOrEqualsLengthRequired,\n        LengthGreaterThanZeroRequired,\n        LengthGreaterThanOrEqualsFourRequired,\n        LengthGreaterThanOrEqualsTwentyRequired,\n        LengthGreaterThanOrEqualsThirtyTwoRequired,\n        LengthGreaterThanOrEqualsNestedBytesLengthRequired,\n        DestinationLengthGreaterThanOrEqualSourceLengthRequired\n    }\n\n    // bytes4(keccak256(\"InvalidByteOperationError(uint8,uint256,uint256)\"))\n    bytes4 internal constant INVALID_BYTE_OPERATION_ERROR_SELECTOR =\n        0x28006595;\n\n    // solhint-disable func-name-mixedcase\n    function InvalidByteOperationError(\n        InvalidByteOperationErrorCodes errorCode,\n        uint256 offset,\n        uint256 required\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            INVALID_BYTE_OPERATION_ERROR_SELECTOR,\n            errorCode,\n            offset,\n            required\n        );\n    }\n}\n",
        "@0x/contracts-exchange-libs/contracts/src/IWallet.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\n\ncontract IWallet {\n\n    bytes4 internal constant LEGACY_WALLET_MAGIC_VALUE = 0xb0671381;\n\n    /// @dev Validates a hash with the `Wallet` signature type.\n    /// @param hash Message hash that is signed.\n    /// @param signature Proof of signing.\n    /// @return magicValue `bytes4(0xb0671381)` if the signature check succeeds.\n    function isValidSignature(\n        bytes32 hash,\n        bytes calldata signature\n    )\n        external\n        view\n        returns (bytes4 magicValue);\n}\n",
        "@0x/contracts-utils/contracts/src/DeploymentConstants.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\ncontract DeploymentConstants {\n\n    // solhint-disable separate-by-one-line-in-contract\n\n    // Mainnet addresses ///////////////////////////////////////////////////////\n    /// @dev Mainnet address of the WETH contract.\n    address constant private WETH_ADDRESS = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n    /// @dev Mainnet address of the KyberNetworkProxy contract.\n    address constant private KYBER_NETWORK_PROXY_ADDRESS = 0x9AAb3f75489902f3a48495025729a0AF77d4b11e;\n    /// @dev Mainnet address of the `UniswapExchangeFactory` contract.\n    address constant private UNISWAP_EXCHANGE_FACTORY_ADDRESS = 0xc0a47dFe034B400B47bDaD5FecDa2621de6c4d95;\n    /// @dev Mainnet address of the `UniswapV2Router01` contract.\n    address constant private UNISWAP_V2_ROUTER_01_ADDRESS = 0xf164fC0Ec4E93095b804a4795bBe1e041497b92a;\n    /// @dev Mainnet address of the Eth2Dai `MatchingMarket` contract.\n    address constant private ETH2DAI_ADDRESS = 0x794e6e91555438aFc3ccF1c5076A74F42133d08D;\n    /// @dev Mainnet address of the `ERC20BridgeProxy` contract\n    address constant private ERC20_BRIDGE_PROXY_ADDRESS = 0x8ED95d1746bf1E4dAb58d8ED4724f1Ef95B20Db0;\n    ///@dev Mainnet address of the `Dai` (multi-collateral) contract\n    address constant private DAI_ADDRESS = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\n    /// @dev Mainnet address of the `Chai` contract\n    address constant private CHAI_ADDRESS = 0x06AF07097C9Eeb7fD685c692751D5C66dB49c215;\n    /// @dev Mainnet address of the 0x DevUtils contract.\n    address constant private DEV_UTILS_ADDRESS = 0x74134CF88b21383713E096a5ecF59e297dc7f547;\n    /// @dev Kyber ETH pseudo-address.\n    address constant internal KYBER_ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n    /// @dev Mainnet address of the dYdX contract.\n    address constant private DYDX_ADDRESS = 0x1E0447b19BB6EcFdAe1e4AE1694b0C3659614e4e;\n    /// @dev Mainnet address of the GST2 contract\n    address constant private GST_ADDRESS = 0x0000000000b3F879cb30FE243b4Dfee438691c04;\n    /// @dev Mainnet address of the GST Collector\n    address constant private GST_COLLECTOR_ADDRESS = 0x000000D3b08566BE75A6DB803C03C85C0c1c5B96;\n\n    // Kovan addresses /////////////////////////////////////////////////////////\n    // /// @dev Kovan address of the WETH contract.\n    // address constant private WETH_ADDRESS = 0xd0A1E359811322d97991E03f863a0C30C2cF029C;\n    // /// @dev Kovan address of the KyberNetworkProxy contract.\n    // address constant private KYBER_NETWORK_PROXY_ADDRESS = 0x692f391bCc85cefCe8C237C01e1f636BbD70EA4D;\n    // /// @dev Kovan address of the `UniswapExchangeFactory` contract.\n    // address constant private UNISWAP_EXCHANGE_FACTORY_ADDRESS = 0xD3E51Ef092B2845f10401a0159B2B96e8B6c3D30;\n    // /// @dev Kovan address of the `UniswapV2Router01` contract.\n    // address constant private UNISWAP_V2_ROUTER_01_ADDRESS = 0xf164fC0Ec4E93095b804a4795bBe1e041497b92a;\n    // /// @dev Kovan address of the Eth2Dai `MatchingMarket` contract.\n    // address constant private ETH2DAI_ADDRESS = 0xe325acB9765b02b8b418199bf9650972299235F4;\n    // /// @dev Kovan address of the `ERC20BridgeProxy` contract\n    // address constant private ERC20_BRIDGE_PROXY_ADDRESS = 0xFb2DD2A1366dE37f7241C83d47DA58fd503E2C64;\n    // /// @dev Kovan address of the `Chai` contract\n    // address constant private CHAI_ADDRESS = address(0);\n    // /// @dev Kovan address of the `Dai` (multi-collateral) contract\n    // address constant private DAI_ADDRESS = 0x4F96Fe3b7A6Cf9725f59d353F723c1bDb64CA6Aa;\n    // /// @dev Kovan address of the 0x DevUtils contract.\n    // address constant private DEV_UTILS_ADDRESS = 0x9402639A828BdF4E9e4103ac3B69E1a6E522eB59;\n    // /// @dev Kyber ETH pseudo-address.\n    // address constant internal KYBER_ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n    // /// @dev Kovan address of the dYdX contract.\n    // address constant private DYDX_ADDRESS = address(0);\n    // /// @dev Kovan address of the GST2 contract\n    // address constant private GST_ADDRESS = address(0);\n    // /// @dev Kovan address of the GST Collector\n    // address constant private GST_COLLECTOR_ADDRESS = address(0);\n\n    /// @dev Overridable way to get the `KyberNetworkProxy` address.\n    /// @return kyberAddress The `IKyberNetworkProxy` address.\n    function _getKyberNetworkProxyAddress()\n        internal\n        view\n        returns (address kyberAddress)\n    {\n        return KYBER_NETWORK_PROXY_ADDRESS;\n    }\n\n    /// @dev Overridable way to get the WETH address.\n    /// @return wethAddress The WETH address.\n    function _getWethAddress()\n        internal\n        view\n        returns (address wethAddress)\n    {\n        return WETH_ADDRESS;\n    }\n\n    /// @dev Overridable way to get the `UniswapExchangeFactory` address.\n    /// @return uniswapAddress The `UniswapExchangeFactory` address.\n    function _getUniswapExchangeFactoryAddress()\n        internal\n        view\n        returns (address uniswapAddress)\n    {\n        return UNISWAP_EXCHANGE_FACTORY_ADDRESS;\n    }\n\n    /// @dev Overridable way to get the `UniswapV2Router01` address.\n    /// @return uniswapRouterAddress The `UniswapV2Router01` address.\n    function _getUniswapV2Router01Address()\n        internal\n        view\n        returns (address uniswapRouterAddress)\n    {\n        return UNISWAP_V2_ROUTER_01_ADDRESS;\n    }\n\n    /// @dev An overridable way to retrieve the Eth2Dai `MatchingMarket` contract.\n    /// @return eth2daiAddress The Eth2Dai `MatchingMarket` contract.\n    function _getEth2DaiAddress()\n        internal\n        view\n        returns (address eth2daiAddress)\n    {\n        return ETH2DAI_ADDRESS;\n    }\n\n    /// @dev An overridable way to retrieve the `ERC20BridgeProxy` contract.\n    /// @return erc20BridgeProxyAddress The `ERC20BridgeProxy` contract.\n    function _getERC20BridgeProxyAddress()\n        internal\n        view\n        returns (address erc20BridgeProxyAddress)\n    {\n        return ERC20_BRIDGE_PROXY_ADDRESS;\n    }\n\n    /// @dev An overridable way to retrieve the `Dai` contract.\n    /// @return daiAddress The `Dai` contract.\n    function _getDaiAddress()\n        internal\n        view\n        returns (address daiAddress)\n    {\n        return DAI_ADDRESS;\n    }\n\n    /// @dev An overridable way to retrieve the `Chai` contract.\n    /// @return chaiAddress The `Chai` contract.\n    function _getChaiAddress()\n        internal\n        view\n        returns (address chaiAddress)\n    {\n        return CHAI_ADDRESS;\n    }\n\n    /// @dev An overridable way to retrieve the 0x `DevUtils` contract address.\n    /// @return devUtils The 0x `DevUtils` contract address.\n    function _getDevUtilsAddress()\n        internal\n        view\n        returns (address devUtils)\n    {\n        return DEV_UTILS_ADDRESS;\n    }\n\n    /// @dev Overridable way to get the DyDx contract.\n    /// @return exchange The DyDx exchange contract.\n    function _getDydxAddress()\n        internal\n        view\n        returns (address dydxAddress)\n    {\n        return DYDX_ADDRESS;\n    }\n\n    /// @dev An overridable way to retrieve the GST2 contract address.\n    /// @return gst The GST contract.\n    function _getGstAddress()\n        internal\n        view\n        returns (address gst)\n    {\n        return GST_ADDRESS;\n    }\n\n    /// @dev An overridable way to retrieve the GST Collector address.\n    /// @return collector The GST collector address.\n    function _getGstCollectorAddress()\n        internal\n        view\n        returns (address collector)\n    {\n        return GST_COLLECTOR_ADDRESS;\n    }\n}\n",
        "../src/interfaces/IERC20Bridge.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\ncontract IERC20Bridge {\n\n    /// @dev Result of a successful bridge call.\n    bytes4 constant internal BRIDGE_SUCCESS = 0xdc1600f3;\n\n    /// @dev Emitted when a trade occurs.\n    /// @param inputToken The token the bridge is converting from.\n    /// @param outputToken The token the bridge is converting to.\n    /// @param inputTokenAmount Amount of input token.\n    /// @param outputTokenAmount Amount of output token.\n    /// @param from The `from` address in `bridgeTransferFrom()`\n    /// @param to The `to` address in `bridgeTransferFrom()`\n    event ERC20BridgeTransfer(\n        address inputToken,\n        address outputToken,\n        uint256 inputTokenAmount,\n        uint256 outputTokenAmount,\n        address from,\n        address to\n    );\n\n    /// @dev Transfers `amount` of the ERC20 `tokenAddress` from `from` to `to`.\n    /// @param tokenAddress The address of the ERC20 token to transfer.\n    /// @param from Address to transfer asset from.\n    /// @param to Address to transfer asset to.\n    /// @param amount Amount of asset to transfer.\n    /// @param bridgeData Arbitrary asset data needed by the bridge contract.\n    /// @return success The magic bytes `0xdc1600f3` if successful.\n    function bridgeTransferFrom(\n        address tokenAddress,\n        address from,\n        address to,\n        uint256 amount,\n        bytes calldata bridgeData\n    )\n        external\n        returns (bytes4 success);\n}\n",
        "../src/interfaces/IEth2Dai.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\ninterface IEth2Dai {\n\n    /// @dev Sell `sellAmount` of `fromToken` token and receive `toToken` token.\n    /// @param fromToken The token being sold.\n    /// @param sellAmount The amount of `fromToken` token being sold.\n    /// @param toToken The token being bought.\n    /// @param minFillAmount Minimum amount of `toToken` token to buy.\n    /// @return fillAmount Amount of `toToken` bought.\n    function sellAllAmount(\n        address fromToken,\n        uint256 sellAmount,\n        address toToken,\n        uint256 minFillAmount\n    )\n        external\n        returns (uint256 fillAmount);\n}\n"
    },
    "compiler": {
        "name": "solc",
        "version": "0.5.17+commit.d19bba13",
        "settings": {
            "remappings": [
                "@0x/contracts-utils=/Users/michaelzhu/monorepo/contracts/asset-proxy/node_modules/@0x/contracts-utils",
                "@0x/contracts-erc1155=/Users/michaelzhu/monorepo/contracts/asset-proxy/node_modules/@0x/contracts-erc1155",
                "@0x/contracts-erc20=/Users/michaelzhu/monorepo/contracts/asset-proxy/node_modules/@0x/contracts-erc20",
                "@0x/contracts-exchange-libs=/Users/michaelzhu/monorepo/contracts/asset-proxy/node_modules/@0x/contracts-exchange-libs",
                "@0x/contracts-exchange=/Users/michaelzhu/monorepo/node_modules/@0x/contracts-exchange"
            ],
            "optimizer": {
                "enabled": true,
                "runs": 1000000,
                "details": {
                    "yul": true,
                    "deduplicate": true,
                    "cse": true,
                    "constantOptimizer": true
                }
            },
            "outputSelection": {
                "*": {
                    "*": [
                        "abi",
                        "devdoc",
                        "evm.bytecode.object",
                        "evm.bytecode.sourceMap",
                        "evm.deployedBytecode.object",
                        "evm.deployedBytecode.sourceMap"
                    ]
                }
            },
            "evmVersion": "istanbul"
        }
    },
    "chains": {}
}
