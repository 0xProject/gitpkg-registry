{
    "schemaVersion": "2.0.0",
    "contractName": "ERC20BridgeSampler",
    "compilerOutput": {
        "abi": [
            {
                "inputs": [
                    {
                        "internalType": "bytes[]",
                        "name": "callDatas",
                        "type": "bytes[]"
                    }
                ],
                "name": "batchCall",
                "outputs": [
                    {
                        "components": [
                            {
                                "internalType": "bytes",
                                "name": "data",
                                "type": "bytes"
                            },
                            {
                                "internalType": "bool",
                                "name": "success",
                                "type": "bool"
                            }
                        ],
                        "internalType": "struct ERC20BridgeSampler.CallResults[]",
                        "name": "callResults",
                        "type": "tuple[]"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "uint256",
                                "name": "reserveOffset",
                                "type": "uint256"
                            },
                            {
                                "internalType": "address",
                                "name": "hintHandler",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "networkProxy",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "weth",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes",
                                "name": "hint",
                                "type": "bytes"
                            }
                        ],
                        "internalType": "struct KyberSampler.KyberSamplerOpts",
                        "name": "opts",
                        "type": "tuple"
                    },
                    {
                        "internalType": "bytes32",
                        "name": "reserveId",
                        "type": "bytes32"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    }
                ],
                "name": "encodeKyberHint",
                "outputs": [
                    {
                        "internalType": "bytes",
                        "name": "hint",
                        "type": "bytes"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "contract IERC20TokenV06[]",
                        "name": "tokens",
                        "type": "address[]"
                    },
                    {
                        "internalType": "address",
                        "name": "account",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "spender",
                        "type": "address"
                    }
                ],
                "name": "getAllowanceOf",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "allowances",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "contract IERC20TokenV06[]",
                        "name": "tokens",
                        "type": "address[]"
                    },
                    {
                        "internalType": "address",
                        "name": "account",
                        "type": "address"
                    }
                ],
                "name": "getBalanceOf",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "balances",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "contract IERC20TokenV06",
                                "name": "makerToken",
                                "type": "address"
                            },
                            {
                                "internalType": "contract IERC20TokenV06",
                                "name": "takerToken",
                                "type": "address"
                            },
                            {
                                "internalType": "uint128",
                                "name": "makerAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "uint128",
                                "name": "takerAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "uint128",
                                "name": "takerTokenFeeAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "address",
                                "name": "maker",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "taker",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "sender",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "feeRecipient",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "pool",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "uint64",
                                "name": "expiry",
                                "type": "uint64"
                            },
                            {
                                "internalType": "uint256",
                                "name": "salt",
                                "type": "uint256"
                            }
                        ],
                        "internalType": "struct IExchange.LimitOrder[]",
                        "name": "orders",
                        "type": "tuple[]"
                    },
                    {
                        "components": [
                            {
                                "internalType": "enum IExchange.SignatureType",
                                "name": "signatureType",
                                "type": "uint8"
                            },
                            {
                                "internalType": "uint8",
                                "name": "v",
                                "type": "uint8"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "r",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "s",
                                "type": "bytes32"
                            }
                        ],
                        "internalType": "struct IExchange.Signature[]",
                        "name": "orderSignatures",
                        "type": "tuple[]"
                    },
                    {
                        "internalType": "contract IExchange",
                        "name": "exchange",
                        "type": "address"
                    }
                ],
                "name": "getLimitOrderFillableMakerAssetAmounts",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "orderFillableMakerAssetAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "contract IERC20TokenV06",
                                "name": "makerToken",
                                "type": "address"
                            },
                            {
                                "internalType": "contract IERC20TokenV06",
                                "name": "takerToken",
                                "type": "address"
                            },
                            {
                                "internalType": "uint128",
                                "name": "makerAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "uint128",
                                "name": "takerAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "uint128",
                                "name": "takerTokenFeeAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "address",
                                "name": "maker",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "taker",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "sender",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "feeRecipient",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "pool",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "uint64",
                                "name": "expiry",
                                "type": "uint64"
                            },
                            {
                                "internalType": "uint256",
                                "name": "salt",
                                "type": "uint256"
                            }
                        ],
                        "internalType": "struct IExchange.LimitOrder",
                        "name": "order",
                        "type": "tuple"
                    },
                    {
                        "components": [
                            {
                                "internalType": "enum IExchange.SignatureType",
                                "name": "signatureType",
                                "type": "uint8"
                            },
                            {
                                "internalType": "uint8",
                                "name": "v",
                                "type": "uint8"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "r",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "s",
                                "type": "bytes32"
                            }
                        ],
                        "internalType": "struct IExchange.Signature",
                        "name": "signature",
                        "type": "tuple"
                    },
                    {
                        "internalType": "contract IExchange",
                        "name": "exchange",
                        "type": "address"
                    }
                ],
                "name": "getLimitOrderFillableTakerAmount",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "fillableTakerAmount",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "contract IERC20TokenV06",
                                "name": "makerToken",
                                "type": "address"
                            },
                            {
                                "internalType": "contract IERC20TokenV06",
                                "name": "takerToken",
                                "type": "address"
                            },
                            {
                                "internalType": "uint128",
                                "name": "makerAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "uint128",
                                "name": "takerAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "uint128",
                                "name": "takerTokenFeeAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "address",
                                "name": "maker",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "taker",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "sender",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "feeRecipient",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "pool",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "uint64",
                                "name": "expiry",
                                "type": "uint64"
                            },
                            {
                                "internalType": "uint256",
                                "name": "salt",
                                "type": "uint256"
                            }
                        ],
                        "internalType": "struct IExchange.LimitOrder[]",
                        "name": "orders",
                        "type": "tuple[]"
                    },
                    {
                        "components": [
                            {
                                "internalType": "enum IExchange.SignatureType",
                                "name": "signatureType",
                                "type": "uint8"
                            },
                            {
                                "internalType": "uint8",
                                "name": "v",
                                "type": "uint8"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "r",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "s",
                                "type": "bytes32"
                            }
                        ],
                        "internalType": "struct IExchange.Signature[]",
                        "name": "orderSignatures",
                        "type": "tuple[]"
                    },
                    {
                        "internalType": "contract IExchange",
                        "name": "exchange",
                        "type": "address"
                    }
                ],
                "name": "getLimitOrderFillableTakerAssetAmounts",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "orderFillableTakerAssetAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "contract IERC20TokenV06[]",
                        "name": "tokens",
                        "type": "address[]"
                    }
                ],
                "name": "getTokenDecimals",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "decimals",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "account",
                        "type": "address"
                    }
                ],
                "name": "isContract",
                "outputs": [
                    {
                        "internalType": "bool",
                        "name": "",
                        "type": "bool"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "poolAddress",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromBalancer",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "bytes32",
                                "name": "poolId",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "address",
                                "name": "vault",
                                "type": "address"
                            }
                        ],
                        "internalType": "struct BalancerV2Sampler.BalancerV2PoolInfo",
                        "name": "poolInfo",
                        "type": "tuple"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromBalancerV2",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "contract IBancorRegistry",
                                "name": "registry",
                                "type": "address"
                            },
                            {
                                "internalType": "address[][]",
                                "name": "paths",
                                "type": "address[][]"
                            }
                        ],
                        "internalType": "struct BancorSampler.BancorSamplerOpts",
                        "name": "opts",
                        "type": "tuple"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromBancor",
                "outputs": [
                    {
                        "internalType": "address",
                        "name": "bancorNetwork",
                        "type": "address"
                    },
                    {
                        "internalType": "address[]",
                        "name": "path",
                        "type": "address[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "poolAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes4",
                                "name": "sellQuoteFunctionSelector",
                                "type": "bytes4"
                            },
                            {
                                "internalType": "bytes4",
                                "name": "buyQuoteFunctionSelector",
                                "type": "bytes4"
                            }
                        ],
                        "internalType": "struct CurveSampler.CurveInfo",
                        "name": "curveInfo",
                        "type": "tuple"
                    },
                    {
                        "internalType": "int128",
                        "name": "fromTokenIdx",
                        "type": "int128"
                    },
                    {
                        "internalType": "int128",
                        "name": "toTokenIdx",
                        "type": "int128"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromCurve",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "registry",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "helper",
                                "type": "address"
                            }
                        ],
                        "internalType": "struct DODOSampler.DODOSamplerOpts",
                        "name": "opts",
                        "type": "tuple"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromDODO",
                "outputs": [
                    {
                        "internalType": "bool",
                        "name": "sellBase",
                        "type": "bool"
                    },
                    {
                        "internalType": "address",
                        "name": "pool",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "registry",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256",
                        "name": "offset",
                        "type": "uint256"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromDODOV2",
                "outputs": [
                    {
                        "internalType": "bool",
                        "name": "sellBase",
                        "type": "bool"
                    },
                    {
                        "internalType": "address",
                        "name": "pool",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "router",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromEth2Dai",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "router",
                        "type": "address"
                    },
                    {
                        "internalType": "address[]",
                        "name": "path",
                        "type": "address[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromKyberDmm",
                "outputs": [
                    {
                        "internalType": "address[]",
                        "name": "pools",
                        "type": "address[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "uint256",
                                "name": "reserveOffset",
                                "type": "uint256"
                            },
                            {
                                "internalType": "address",
                                "name": "hintHandler",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "networkProxy",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "weth",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes",
                                "name": "hint",
                                "type": "bytes"
                            }
                        ],
                        "internalType": "struct KyberSampler.KyberSamplerOpts",
                        "name": "opts",
                        "type": "tuple"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromKyberNetwork",
                "outputs": [
                    {
                        "internalType": "bytes32",
                        "name": "reserveId",
                        "type": "bytes32"
                    },
                    {
                        "internalType": "bytes",
                        "name": "hint",
                        "type": "bytes"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "stEthToken",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "wethToken",
                                "type": "address"
                            }
                        ],
                        "internalType": "struct LidoSampler.LidoInfo",
                        "name": "lidoInfo",
                        "type": "tuple"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromLido",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "pure",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "providerAddress",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromLiquidityProvider",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "router",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromMStable",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "psmAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "ilkIdentifier",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "address",
                                "name": "gemTokenAddress",
                                "type": "address"
                            }
                        ],
                        "internalType": "struct MakerPSMSampler.MakerPsmInfo",
                        "name": "psmInfo",
                        "type": "tuple"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromMakerPsm",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "registry",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromMooniswap",
                "outputs": [
                    {
                        "internalType": "contract IMooniswap",
                        "name": "pool",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "pool",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromShell",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "poolAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes4",
                                "name": "sellQuoteFunctionSelector",
                                "type": "bytes4"
                            },
                            {
                                "internalType": "bytes4",
                                "name": "buyQuoteFunctionSelector",
                                "type": "bytes4"
                            }
                        ],
                        "internalType": "struct SmoothySampler.SmoothyInfo",
                        "name": "smoothyInfo",
                        "type": "tuple"
                    },
                    {
                        "internalType": "int128",
                        "name": "fromTokenIdx",
                        "type": "int128"
                    },
                    {
                        "internalType": "int128",
                        "name": "toTokenIdx",
                        "type": "int128"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromSmoothy",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "router",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromUniswap",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "router",
                        "type": "address"
                    },
                    {
                        "internalType": "address[]",
                        "name": "path",
                        "type": "address[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromUniswapV2",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "contract IUniswapV3Quoter",
                        "name": "quoter",
                        "type": "address"
                    },
                    {
                        "internalType": "contract IERC20TokenV06[]",
                        "name": "path",
                        "type": "address[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromUniswapV3",
                "outputs": [
                    {
                        "internalType": "bytes[]",
                        "name": "uniswapPaths",
                        "type": "bytes[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "uint256",
                                "name": "reserveOffset",
                                "type": "uint256"
                            },
                            {
                                "internalType": "address",
                                "name": "hintHandler",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "networkProxy",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "weth",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes",
                                "name": "hint",
                                "type": "bytes"
                            }
                        ],
                        "internalType": "struct KyberSampler.KyberSamplerOpts",
                        "name": "opts",
                        "type": "tuple"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256",
                        "name": "takerTokenAmount",
                        "type": "uint256"
                    }
                ],
                "name": "sampleSellFromKyberNetwork",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "makerTokenAmount",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "poolAddress",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromBalancer",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "bytes32",
                                "name": "poolId",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "address",
                                "name": "vault",
                                "type": "address"
                            }
                        ],
                        "internalType": "struct BalancerV2Sampler.BalancerV2PoolInfo",
                        "name": "poolInfo",
                        "type": "tuple"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromBalancerV2",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "contract IBancorRegistry",
                                "name": "registry",
                                "type": "address"
                            },
                            {
                                "internalType": "address[][]",
                                "name": "paths",
                                "type": "address[][]"
                            }
                        ],
                        "internalType": "struct BancorSampler.BancorSamplerOpts",
                        "name": "opts",
                        "type": "tuple"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromBancor",
                "outputs": [
                    {
                        "internalType": "address",
                        "name": "bancorNetwork",
                        "type": "address"
                    },
                    {
                        "internalType": "address[]",
                        "name": "path",
                        "type": "address[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "poolAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes4",
                                "name": "sellQuoteFunctionSelector",
                                "type": "bytes4"
                            },
                            {
                                "internalType": "bytes4",
                                "name": "buyQuoteFunctionSelector",
                                "type": "bytes4"
                            }
                        ],
                        "internalType": "struct CurveSampler.CurveInfo",
                        "name": "curveInfo",
                        "type": "tuple"
                    },
                    {
                        "internalType": "int128",
                        "name": "fromTokenIdx",
                        "type": "int128"
                    },
                    {
                        "internalType": "int128",
                        "name": "toTokenIdx",
                        "type": "int128"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromCurve",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "registry",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "helper",
                                "type": "address"
                            }
                        ],
                        "internalType": "struct DODOSampler.DODOSamplerOpts",
                        "name": "opts",
                        "type": "tuple"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromDODO",
                "outputs": [
                    {
                        "internalType": "bool",
                        "name": "sellBase",
                        "type": "bool"
                    },
                    {
                        "internalType": "address",
                        "name": "pool",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "registry",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256",
                        "name": "offset",
                        "type": "uint256"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromDODOV2",
                "outputs": [
                    {
                        "internalType": "bool",
                        "name": "sellBase",
                        "type": "bool"
                    },
                    {
                        "internalType": "address",
                        "name": "pool",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "router",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromEth2Dai",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "router",
                        "type": "address"
                    },
                    {
                        "internalType": "address[]",
                        "name": "path",
                        "type": "address[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromKyberDmm",
                "outputs": [
                    {
                        "internalType": "address[]",
                        "name": "pools",
                        "type": "address[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "uint256",
                                "name": "reserveOffset",
                                "type": "uint256"
                            },
                            {
                                "internalType": "address",
                                "name": "hintHandler",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "networkProxy",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "weth",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes",
                                "name": "hint",
                                "type": "bytes"
                            }
                        ],
                        "internalType": "struct KyberSampler.KyberSamplerOpts",
                        "name": "opts",
                        "type": "tuple"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromKyberNetwork",
                "outputs": [
                    {
                        "internalType": "bytes32",
                        "name": "reserveId",
                        "type": "bytes32"
                    },
                    {
                        "internalType": "bytes",
                        "name": "hint",
                        "type": "bytes"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "stEthToken",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "wethToken",
                                "type": "address"
                            }
                        ],
                        "internalType": "struct LidoSampler.LidoInfo",
                        "name": "lidoInfo",
                        "type": "tuple"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromLido",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "pure",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "providerAddress",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromLiquidityProvider",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "router",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromMStable",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "psmAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "ilkIdentifier",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "address",
                                "name": "gemTokenAddress",
                                "type": "address"
                            }
                        ],
                        "internalType": "struct MakerPSMSampler.MakerPsmInfo",
                        "name": "psmInfo",
                        "type": "tuple"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromMakerPsm",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "registry",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromMooniswap",
                "outputs": [
                    {
                        "internalType": "contract IMooniswap",
                        "name": "pool",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "multibridge",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "intermediateToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromMultiBridge",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "pool",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromShell",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "poolAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes4",
                                "name": "sellQuoteFunctionSelector",
                                "type": "bytes4"
                            },
                            {
                                "internalType": "bytes4",
                                "name": "buyQuoteFunctionSelector",
                                "type": "bytes4"
                            }
                        ],
                        "internalType": "struct SmoothySampler.SmoothyInfo",
                        "name": "smoothyInfo",
                        "type": "tuple"
                    },
                    {
                        "internalType": "int128",
                        "name": "fromTokenIdx",
                        "type": "int128"
                    },
                    {
                        "internalType": "int128",
                        "name": "toTokenIdx",
                        "type": "int128"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromSmoothy",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "router",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromUniswap",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "router",
                        "type": "address"
                    },
                    {
                        "internalType": "address[]",
                        "name": "path",
                        "type": "address[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromUniswapV2",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "contract IUniswapV3Quoter",
                        "name": "quoter",
                        "type": "address"
                    },
                    {
                        "internalType": "contract IERC20TokenV06[]",
                        "name": "path",
                        "type": "address[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromUniswapV3",
                "outputs": [
                    {
                        "internalType": "bytes[]",
                        "name": "uniswapPaths",
                        "type": "bytes[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "registry",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "mooniswapTakerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "mooniswapMakerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256",
                        "name": "takerTokenAmount",
                        "type": "uint256"
                    }
                ],
                "name": "sampleSingleSellFromMooniswapPool",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "bytes[]",
                        "name": "firstHopCalls",
                        "type": "bytes[]"
                    },
                    {
                        "internalType": "bytes[]",
                        "name": "secondHopCalls",
                        "type": "bytes[]"
                    },
                    {
                        "internalType": "uint256",
                        "name": "buyAmount",
                        "type": "uint256"
                    }
                ],
                "name": "sampleTwoHopBuy",
                "outputs": [
                    {
                        "components": [
                            {
                                "internalType": "uint256",
                                "name": "sourceIndex",
                                "type": "uint256"
                            },
                            {
                                "internalType": "bytes",
                                "name": "returnData",
                                "type": "bytes"
                            }
                        ],
                        "internalType": "struct TwoHopSampler.HopInfo",
                        "name": "firstHop",
                        "type": "tuple"
                    },
                    {
                        "components": [
                            {
                                "internalType": "uint256",
                                "name": "sourceIndex",
                                "type": "uint256"
                            },
                            {
                                "internalType": "bytes",
                                "name": "returnData",
                                "type": "bytes"
                            }
                        ],
                        "internalType": "struct TwoHopSampler.HopInfo",
                        "name": "secondHop",
                        "type": "tuple"
                    },
                    {
                        "internalType": "uint256",
                        "name": "sellAmount",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "bytes[]",
                        "name": "firstHopCalls",
                        "type": "bytes[]"
                    },
                    {
                        "internalType": "bytes[]",
                        "name": "secondHopCalls",
                        "type": "bytes[]"
                    },
                    {
                        "internalType": "uint256",
                        "name": "sellAmount",
                        "type": "uint256"
                    }
                ],
                "name": "sampleTwoHopSell",
                "outputs": [
                    {
                        "components": [
                            {
                                "internalType": "uint256",
                                "name": "sourceIndex",
                                "type": "uint256"
                            },
                            {
                                "internalType": "bytes",
                                "name": "returnData",
                                "type": "bytes"
                            }
                        ],
                        "internalType": "struct TwoHopSampler.HopInfo",
                        "name": "firstHop",
                        "type": "tuple"
                    },
                    {
                        "components": [
                            {
                                "internalType": "uint256",
                                "name": "sourceIndex",
                                "type": "uint256"
                            },
                            {
                                "internalType": "bytes",
                                "name": "returnData",
                                "type": "bytes"
                            }
                        ],
                        "internalType": "struct TwoHopSampler.HopInfo",
                        "name": "secondHop",
                        "type": "tuple"
                    },
                    {
                        "internalType": "uint256",
                        "name": "buyAmount",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            }
        ],
        "devdoc": {
            "kind": "dev",
            "methods": {
                "batchCall(bytes[])": {
                    "details": "Call multiple public functions on this contract in a single transaction.",
                    "params": {
                        "callDatas": "ABI-encoded call data for each function call."
                    },
                    "returns": {
                        "callResults": "ABI-encoded results data for each call."
                    }
                },
                "getLimitOrderFillableMakerAssetAmounts((address,address,uint128,uint128,uint128,address,address,address,address,bytes32,uint64,uint256)[],(uint8,uint8,bytes32,bytes32)[],address)": {
                    "details": "Queries the fillable taker asset amounts of native orders.      Effectively ignores orders that have empty signatures or",
                    "params": {
                        "exchange": "The V4 exchange.",
                        "orderSignatures": "Signatures for each respective order in `orders`.",
                        "orders": "Native orders to query."
                    },
                    "returns": {
                        "orderFillableMakerAssetAmounts": "How much maker asset can be filled         by each order in `orders`."
                    }
                },
                "getLimitOrderFillableTakerAmount((address,address,uint128,uint128,uint128,address,address,address,address,bytes32,uint64,uint256),(uint8,uint8,bytes32,bytes32),address)": {
                    "details": "Get the fillable taker amount of an order, taking into account      order state, maker fees, and maker balances."
                },
                "getLimitOrderFillableTakerAssetAmounts((address,address,uint128,uint128,uint128,address,address,address,address,bytes32,uint64,uint256)[],(uint8,uint8,bytes32,bytes32)[],address)": {
                    "details": "Queries the fillable taker asset amounts of native orders.      Effectively ignores orders that have empty signatures or      maker/taker asset amounts (returning 0).",
                    "params": {
                        "exchange": "The V4 exchange.",
                        "orderSignatures": "Signatures for each respective order in `orders`.",
                        "orders": "Native limit orders to query."
                    },
                    "returns": {
                        "orderFillableTakerAssetAmounts": "How much taker asset can be filled         by each order in `orders`."
                    }
                },
                "sampleBuysFromBalancer(address,address,address,uint256[])": {
                    "details": "Sample buy quotes from Balancer.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "makerTokenAmounts": "Maker token buy amount for each sample.",
                        "poolAddress": "Address of the Balancer pool to query.",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromBalancerV2((bytes32,address),address,address,uint256[])": {
                    "details": "Sample buy quotes from Balancer V2.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "makerTokenAmounts": "Maker token buy amount for each sample.",
                        "poolInfo": "Struct with pool related data",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromBancor((address,address[][]),address,address,uint256[])": {
                    "details": "Sample buy quotes from Bancor. Unimplemented",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "makerTokenAmounts": "Maker token buy amount for each sample.",
                        "opts": "BancorSamplerOpts The Bancor registry contract address and paths",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "bancorNetwork": "the Bancor Network address",
                        "path": "the selected conversion path from bancor",
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromCurve((address,bytes4,bytes4),int128,int128,uint256[])": {
                    "details": "Sample buy quotes from Curve.",
                    "params": {
                        "curveInfo": "Curve information specific to this token pair.",
                        "fromTokenIdx": "Index of the taker token (what to sell).",
                        "makerTokenAmounts": "Maker token buy amount for each sample.",
                        "toTokenIdx": "Index of the maker token (what to buy)."
                    },
                    "returns": {
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromDODO((address,address),address,address,uint256[])": {
                    "details": "Sample buy quotes from DODO.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "makerTokenAmounts": "Maker token sell amount for each sample.",
                        "opts": "DODOSamplerOpts DODO Registry and helper addresses",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "pool": "the DODO pool address",
                        "sellBase": "whether the bridge needs to sell the base token",
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromDODOV2(address,uint256,address,address,uint256[])": {
                    "details": "Sample buy quotes from DODO.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "makerTokenAmounts": "Maker token sell amount for each sample.",
                        "offset": "offset index for the pool in the registry.",
                        "registry": "Address of the registry to look up.",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "pool": "the DODO pool address",
                        "sellBase": "whether the bridge needs to sell the base token",
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromEth2Dai(address,address,address,uint256[])": {
                    "details": "Sample buy quotes from Eth2Dai/Oasis.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "router": "Address of the Eth2Dai/Oasis contract",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Maker token sell amount for each sample."
                    },
                    "returns": {
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromKyberDmm(address,address[],uint256[])": {
                    "details": "Sample buy quotes from KyberDmm.",
                    "params": {
                        "makerTokenAmounts": "Maker token buy amount for each sample.",
                        "path": "Token route. Should be takerToken -> makerToken.",
                        "router": "Router to look up tokens and amounts"
                    },
                    "returns": {
                        "pools": "The pool addresses involved in the multi path trade",
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromKyberNetwork((uint256,address,address,address,bytes),address,address,uint256[])": {
                    "details": "Sample buy quotes from Kyber.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "makerTokenAmounts": "Maker token buy amount for each sample.",
                        "opts": "KyberSamplerOpts The nth reserve",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "hint": "The hint for the selected reserve",
                        "reserveId": "The id of the reserve found at reserveOffset",
                        "takerTokenAmounts": "Taker amounts sold at each maker token amount."
                    }
                },
                "sampleBuysFromLido((address,address),address,address,uint256[])": {
                    "details": "Sample buy quotes from Lido.",
                    "params": {
                        "lidoInfo": "Info regarding a specific Lido deployment",
                        "makerToken": "Address of the maker token (what to buy).",
                        "makerTokenAmounts": "Maker token buy amount for each sample.",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "_0": "takerTokenAmounts Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromLiquidityProvider(address,address,address,uint256[])": {
                    "details": "Sample buy quotes from an arbitrary on-chain liquidity provider.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "makerTokenAmounts": "Maker token buy amount for each sample.",
                        "providerAddress": "Address of the liquidity provider.",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromMStable(address,address,address,uint256[])": {
                    "details": "Sample buy quotes from MStable contract",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "makerTokenAmounts": "Maker token buy amount for each sample.",
                        "router": "Address of the mStable contract",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromMooniswap(address,address,address,uint256[])": {
                    "details": "Sample buy quotes from Mooniswap.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "makerTokenAmounts": "Maker token sell amount for each sample.",
                        "registry": "Address of the Mooniswap Registry.",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "pool": "The contract address for the pool",
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromShell(address,address,address,uint256[])": {
                    "details": "Sample buy quotes from Shell pool contract",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "makerTokenAmounts": "Maker token buy amount for each sample.",
                        "pool": "Address of the Shell pool contract",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromSmoothy((address,bytes4,bytes4),int128,int128,uint256[])": {
                    "details": "Sample buy quotes from Smoothy.",
                    "params": {
                        "fromTokenIdx": "Index of the taker token (what to sell).",
                        "makerTokenAmounts": "Maker token buy amount for each sample.",
                        "smoothyInfo": "Smoothy information specific to this token pair.",
                        "toTokenIdx": "Index of the maker token (what to buy)."
                    },
                    "returns": {
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromUniswap(address,address,address,uint256[])": {
                    "details": "Sample buy quotes from Uniswap.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "makerTokenAmounts": "Maker token sell amount for each sample.",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromUniswapV2(address,address[],uint256[])": {
                    "details": "Sample buy quotes from UniswapV2.",
                    "params": {
                        "makerTokenAmounts": "Maker token buy amount for each sample.",
                        "path": "Token route. Should be takerToken -> makerToken.",
                        "router": "Router to look up tokens and amounts"
                    },
                    "returns": {
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromUniswapV3(address,address[],uint256[])": {
                    "details": "Sample buy quotes from UniswapV3.",
                    "params": {
                        "makerTokenAmounts": "Maker token buy amount for each sample.",
                        "path": "Token route. Should be takerToken -> makerToken.",
                        "quoter": "UniswapV3 Quoter contract."
                    },
                    "returns": {
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount.",
                        "uniswapPaths": "The encoded uniswap path for each sample."
                    }
                },
                "sampleSellsFromBalancer(address,address,address,uint256[])": {
                    "details": "Sample sell quotes from Balancer.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "poolAddress": "Address of the Balancer pool to query.",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount."
                    }
                },
                "sampleSellsFromBalancerV2((bytes32,address),address,address,uint256[])": {
                    "details": "Sample sell quotes from Balancer V2.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "poolInfo": "Struct with pool related data",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount."
                    }
                },
                "sampleSellsFromBancor((address,address[][]),address,address,uint256[])": {
                    "details": "Sample sell quotes from Bancor.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "opts": "BancorSamplerOpts The Bancor registry contract address and paths",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "bancorNetwork": "the Bancor Network address",
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount.",
                        "path": "the selected conversion path from bancor"
                    }
                },
                "sampleSellsFromCurve((address,bytes4,bytes4),int128,int128,uint256[])": {
                    "details": "Sample sell quotes from Curve.",
                    "params": {
                        "curveInfo": "Curve information specific to this token pair.",
                        "fromTokenIdx": "Index of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample.",
                        "toTokenIdx": "Index of the maker token (what to buy)."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount."
                    }
                },
                "sampleSellsFromDODO((address,address),address,address,uint256[])": {
                    "details": "Sample sell quotes from DODO.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "opts": "DODOSamplerOpts DODO Registry and helper addresses",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount.",
                        "pool": "the DODO pool address",
                        "sellBase": "whether the bridge needs to sell the base token"
                    }
                },
                "sampleSellsFromDODOV2(address,uint256,address,address,uint256[])": {
                    "details": "Sample sell quotes from DODO V2.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "offset": "offset index for the pool in the registry.",
                        "registry": "Address of the registry to look up.",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount.",
                        "pool": "the DODO pool address",
                        "sellBase": "whether the bridge needs to sell the base token"
                    }
                },
                "sampleSellsFromEth2Dai(address,address,address,uint256[])": {
                    "details": "Sample sell quotes from Eth2Dai/Oasis.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "router": "Address of the Eth2Dai/Oasis contract",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount."
                    }
                },
                "sampleSellsFromKyberDmm(address,address[],uint256[])": {
                    "details": "Sample sell quotes from KyberDmm.",
                    "params": {
                        "path": "Token route. Should be takerToken -> makerToken",
                        "router": "Router to look up tokens and amounts",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount.",
                        "pools": "The pool addresses involved in the multi path trade"
                    }
                },
                "sampleSellsFromKyberNetwork((uint256,address,address,address,bytes),address,address,uint256[])": {
                    "details": "Sample sell quotes from Kyber.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "opts": "KyberSamplerOpts The nth reserve",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "hint": "The hint for the selected reserve",
                        "makerTokenAmounts": "Maker amounts bought at each taker token amount.",
                        "reserveId": "The id of the reserve found at reserveOffset"
                    }
                },
                "sampleSellsFromLido((address,address),address,address,uint256[])": {
                    "details": "Sample sell quotes from Lido",
                    "params": {
                        "lidoInfo": "Info regarding a specific Lido deployment",
                        "makerToken": "Address of the maker token (what to buy).",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "_0": "makerTokenAmounts Maker amounts bought at each taker token         amount."
                    }
                },
                "sampleSellsFromLiquidityProvider(address,address,address,uint256[])": {
                    "details": "Sample sell quotes from an arbitrary on-chain liquidity provider.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "providerAddress": "Address of the liquidity provider.",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount."
                    }
                },
                "sampleSellsFromMStable(address,address,address,uint256[])": {
                    "details": "Sample sell quotes from the mStable contract",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "router": "Address of the mStable contract",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount."
                    }
                },
                "sampleSellsFromMakerPsm((address,bytes32,address),address,address,uint256[])": {
                    "details": "Sample sell quotes from Maker PSM"
                },
                "sampleSellsFromMooniswap(address,address,address,uint256[])": {
                    "details": "Sample sell quotes from Mooniswap.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "registry": "Address of the Mooniswap Registry.",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount.",
                        "pool": "The contract address for the pool"
                    }
                },
                "sampleSellsFromMultiBridge(address,address,address,address,uint256[])": {
                    "details": "Sample sell quotes from MultiBridge.",
                    "params": {
                        "intermediateToken": "The address of the intermediate token to        use in an indirect route.",
                        "makerToken": "Address of the maker token (what to buy).",
                        "multibridge": "Address of the MultiBridge contract.",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount."
                    }
                },
                "sampleSellsFromShell(address,address,address,uint256[])": {
                    "details": "Sample sell quotes from the Shell pool contract",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "pool": "Address of the Shell pool contract",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount."
                    }
                },
                "sampleSellsFromSmoothy((address,bytes4,bytes4),int128,int128,uint256[])": {
                    "details": "Sample sell quotes from Smoothy.",
                    "params": {
                        "fromTokenIdx": "Index of the taker token (what to sell).",
                        "smoothyInfo": "Smoothy information specific to this token pair.",
                        "takerTokenAmounts": "Taker token sell amount for each sample.",
                        "toTokenIdx": "Index of the maker token (what to buy)."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount."
                    }
                },
                "sampleSellsFromUniswap(address,address,address,uint256[])": {
                    "details": "Sample sell quotes from Uniswap.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "router": "Address of the Uniswap Router",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount."
                    }
                },
                "sampleSellsFromUniswapV2(address,address[],uint256[])": {
                    "details": "Sample sell quotes from UniswapV2.",
                    "params": {
                        "path": "Token route. Should be takerToken -> makerToken",
                        "router": "Router to look up tokens and amounts",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount."
                    }
                },
                "sampleSellsFromUniswapV3(address,address[],uint256[])": {
                    "details": "Sample sell quotes from UniswapV3.",
                    "params": {
                        "path": "Token route. Should be takerToken -> makerToken",
                        "quoter": "UniswapV3 Quoter contract.",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount.",
                        "uniswapPaths": "The encoded uniswap path for each sample."
                    }
                }
            },
            "version": 1
        },
        "evm": {
            "bytecode": {
                "linkReferences": {},
                "object": "0x60a06040527feeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000006080523480156200003557600080fd5b5060805160601c61a4296200005e60003980612cf9528061491f5280615470525061a4296000f3fe608060405234801561001057600080fd5b506004361061030c5760003560e01c80638e5a0e071161019d578063c25c4138116100e9578063ddd5aa28116100a2578063f1ed7fa41161007c578063f1ed7fa414610751578063f3868e9c14610444578063f5a4994d14610764578063fc9fe41b146107775761030c565b8063ddd5aa2814610718578063e78ac0451461072b578063e8e4af091461073e5761030c565b8063c25c4138146106a6578063c8319084146106b9578063c8c74a37146106cc578063c94706d8146106df578063cc1621c9146106f2578063d9bca372146107055761030c565b8063a0295b8b11610156578063ab00027611610130578063ab0002761461064c578063adc636bf1461065f578063b90cd2fb14610680578063bd71ecf6146106935761030c565b8063a0295b8b14610613578063a469841714610626578063a75e744b146106395761030c565b80638e5a0e07146105765780639209483b1461059857806398777748146105ab5780639bf3ee35146105be5780639e3f05c3146105de5780639ea0ff13146106005761030c565b806340bc03ae1161025c5780635d5b674f11610215578063706e2f9b116101ef578063706e2f9b1461052a57806374c9d2551461053d5780637f7f4f13146105505780638b6d7b44146105635761030c565b80635d5b674f146104e457806366a1ac6b146104f757806368be3cf21461050a5761030c565b806340bc03ae14610457578063494569db1461046a5780634edfb5b21461047d5780635505000a1461049d57806357494b1d146104be5780635aae4e53146104d15761030c565b8063281e3432116102c95780632d753aa4116102a35780632d753aa41461040b57806330d6570d1461041e5780633105fec11461043157806336052391146104445761030c565b8063281e3432146103c357806329fa4aa0146103d65780632aa64319146103e95761030c565b80630496d5dc146103115780631022742b1461033b578063149dab0e1461035b578063162790551461037d5780632339078f1461039d578063252322b3146103b0575b600080fd5b61032461031f366004618c5b565b61078a565b604051610332929190619d15565b60405180910390f35b61034e61034936600461908e565b610930565b6040516103329190619e39565b61036e61036936600461930b565b610aa3565b60405161033293929190619be1565b61039061038b366004618932565b610c03565b6040516103329190619e4c565b61034e6103ab36600461928c565b610c0d565b61034e6103be366004618b99565b610e34565b61034e6103d13660046195a1565b61100a565b61034e6103e43660046193c4565b61125f565b6103fc6103f736600461941d565b6112ce565b60405161033293929190619e57565b61034e610419366004618b14565b6115ab565b61034e61042c366004618b99565b611734565b61034e61043f366004618c5b565b6118a8565b61034e61045236600461941d565b611a2c565b61034e6104653660046193c4565b611abe565b610324610478366004618c5b565b611c3f565b61049061048b366004619503565b611dcb565b6040516103329190619ea5565b6104b06104ab3660046191f5565b612048565b604051610332929190619d5c565b61034e6104cc366004618b99565b612293565b6104b06104df3660046191f5565b6127e5565b61034e6104f2366004618b99565b612a2a565b61034e61050536600461908e565b612a90565b61051d610518366004618e68565b612b45565b6040516103329190619dc4565b61034e610538366004618f3f565b612ca6565b61036e61054b36600461930b565b612d98565b61034e61055e3660046195a1565b612da7565b61034e6105713660046193c4565b612ff4565b610589610584366004618ed6565b613357565b6040516103329392919061a141565b61034e6105a63660046193c4565b613570565b61034e6105b9366004618b99565b613770565b6105d16105cc366004619561565b613ca7565b6040516103329190619e83565b6105f16105ec36600461944c565b613dee565b60405161033293929190619e8c565b6105d161060e366004618c0b565b613f14565b61034e61062136600461928c565b61412a565b61034e610634366004618b99565b614326565b6103fc610647366004618ccd565b61447b565b61034e61065a366004618b99565b6145b8565b61067261066d366004618b99565b614716565b604051610332929190619ef3565b61034e61068e366004618b99565b614866565b61034e6106a1366004618f71565b6148cc565b61034e6106b4366004618b99565b6149c8565b61034e6106c7366004618b99565b614a2e565b61034e6106da366004618c5b565b614beb565b61034e6106ed366004618b99565b614d57565b6105f161070036600461944c565b614eb5565b6103fc610713366004618ccd565b61509b565b6103fc61072636600461941d565b61518a565b61034e610739366004618fb5565b61541d565b61034e61074c366004618b99565b615512565b6105d161075f3660046194bc565b615645565b610672610772366004618b99565b6157e4565b610589610785366004618ed6565b6158d0565b80516060908190806001600160401b03811180156107a757600080fd5b506040519080825280602002602001820160405280156107d1578160200160208202803683370190505b5091506107de8686615ae5565b92508251600014156107f05750610928565b60005b8181101561092557866001600160a01b031663a8312b1d620249f087848151811061081a57fe5b6020026020010151878a6040518563ffffffff1660e01b81526004016108429392919061a253565b60006040518083038187803b15801561085a57600080fd5b5086fa9350505050801561089057506040513d6000823e601f3d908101601f1916820160405261088d919081019061915d565b60015b6108ca573d8080156108be576040519150601f19603f3d011682016040523d82523d6000602084013e6108c3565b606091505b5050610925565b806001885103815181106108da57fe5b60200260200101518483815181106108ee57fe5b60200260200101818152505083828151811061090657fe5b60200260200101516000141561091c5750610925565b506001016107f3565b50505b935093915050565b606083516001600160401b038111801561094957600080fd5b50604051908082528060200260200182016040528015610973578160200160208202803683370190505b50905060005b84518114610a9b57306001600160a01b0316639bf3ee3562030d408784815181106109a057fe5b60200260200101518785815181106109b457fe5b6020026020010151876040518563ffffffff1660e01b81526004016109db9392919061a203565b60206040518083038187803b1580156109f357600080fd5b5086fa93505050508015610a24575060408051601f3d908101601f19168201909252610a21918101906191ab565b60015b610a78573d808015610a52576040519150601f19603f3d011682016040523d82523d6000602084013e610a57565b606091505b506000838381518110610a6657fe5b60200260200101818152505050610a93565b80838381518110610a8557fe5b602002602001018181525050505b600101610979565b509392505050565b600060608086602001515160001415610abb57610bf9565b610ac787878787615dd4565b855191945092506001600160401b0381118015610ae357600080fd5b50604051908082528060200260200182016040528015610b0d578160200160208202803683370190505b50905060005b8151811015610bf757836001600160a01b0316637f9c0ecd620493e085888581518110610b3c57fe5b60200260200101516040518463ffffffff1660e01b8152600401610b61929190619d3a565b60206040518083038187803b158015610b7957600080fd5b5086fa93505050508015610baa575060408051601f3d908101601f19168201909252610ba7918101906191ab565b60015b610bb357610bf7565b80838381518110610bc057fe5b602002602001018181525050828281518110610bd857fe5b602002602001015160001415610bee5750610bf7565b50600101610b13565b505b9450945094915050565b803b15155b919050565b6060610c198385616006565b602085015160408051600280825260608281019093528160200160208202803683370190505090508581600081518110610c4f57fe5b60200260200101906001600160a01b031690816001600160a01b0316815250508481600181518110610c7d57fe5b6001600160a01b03909216602092830291909101909101528351806001600160401b0381118015610cad57600080fd5b50604051908082528060200260200182016040528015610cd7578160200160208202803683370190505b509350610ce2618181565b610cea61603c565b905060005b82811015610e27576060610d168b898481518110610d0957fe5b602002602001015161606b565b604051637c26833760e11b81529091506001600160a01b0387169063f84d066e90610d4c9060009085908a908990600401619f46565b600060405180830381600087803b158015610d6657600080fd5b505af1925050508015610d9b57506040513d6000823e601f3d908101601f19168201604052610d98919081019061900b565b60015b610dd6573d808015610dc9576040519150601f19603f3d011682016040523d82523d6000602084013e610dce565b606091505b505050610e27565b600081600181518110610de557fe5b602002602001015160001902905060008113610e0357505050610e27565b80898581518110610e1057fe5b602002602001018181525050505050600101610cef565b5050505050949350505050565b6060610e408385616006565b8151806001600160401b0381118015610e5857600080fd5b50604051908082528060200260200182016040528015610e82578160200160208202803683370190505b50915060006001600160a01b03861615610ea557610ea087876160fd565b610ea8565b60005b905060006001600160a01b03861615610eca57610ec588876160fd565b610ecd565b60005b905060005b83811015610ffe5760016001600160a01b038816610f3057610f0f84632640f62c60e01b898581518110610f0257fe5b602002602001015161617c565b878481518110610f1b57fe5b60200260200101819350828152505050610fca565b6001600160a01b038916610f5657610f0f836359e9486260e01b898581518110610f0257fe5b6000610f70846359e9486260e01b8a8681518110610f0257fe5b925090508015610fad57610f8c856309903d8b60e21b8361617c565b888581518110610f9857fe5b60200260200101819450828152505050610fc8565b6000878481518110610fbb57fe5b6020026020010181815250505b505b801580610fea5750858281518110610fde57fe5b60200260200101516000145b15610ff55750610ffe565b50600101610ed2565b50505050949350505050565b60606110168385616006565b6000856000015190506000816001600160a01b03166336569e776040518163ffffffff1660e01b815260040160206040518083038186803b15801561105a57600080fd5b505afa15801561106e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611092919061894e565b8451909150806001600160401b03811180156110ad57600080fd5b506040519080825280602002602001820160405280156110d7578160200160208202803683370190505b509350826001600160a01b031663f4b9fa756040518163ffffffff1660e01b815260040160206040518083038186803b15801561111357600080fd5b505afa158015611127573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061114b919061894e565b6001600160a01b0316866001600160a01b0316141580156111ee5750826001600160a01b031663f4b9fa756040518163ffffffff1660e01b815260040160206040518083038186803b1580156111a057600080fd5b505afa1580156111b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111d8919061894e565b6001600160a01b0316876001600160a01b031614155b156111fb57505050611257565b60005b81811015610ffe5760006112298a898b8a868151811061121a57fe5b6020026020010151898961625f565b9050806112365750610ffe565b8086838151811061124357fe5b6020908102919091010152506001016111fe565b949350505050565b6040805160608181019092526112c5908061127e868960808401619ff2565b604051602081830303815290604052815260200186886040516020016112a5929190619ff2565b604051602081830303815290604052815260200161652081525083616653565b95945050505050565b60008060606112dd8587616006565b8351806001600160401b03811180156112f557600080fd5b5060405190808252806020026020018201604052801561131f578160200160208202803683370190505b508851604051630939d86360e11b81529193506001600160a01b031690631273b0c690611352908a908a90600401619a7d565b60206040518083038186803b15801561136a57600080fd5b505afa15801561137e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113a2919061894e565b925060006001600160a01b038416156113c05750600193508661145f565b8851604051630939d86360e11b81526001600160a01b0390911690631273b0c6906113f1908a908c90600401619a7d565b60206040518083038186803b15801561140957600080fd5b505afa15801561141d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611441919061894e565b93506001600160a01b038416611458575050610bf9565b5060009350855b836001600160a01b031663dd58b41c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561149857600080fd5b505afa1580156114ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114d0919061918f565b6114db575050610bf9565b60005b8281101561159e5760006115588a87858e602001516040516020016115069493929190619a97565b6040516020818303038152906040528a88868f602001516040516020016115309493929190619a97565b6040516020818303038152906040528a858151811061154b57fe5b6020026020010151616850565b90508085838151811061156757fe5b60200260200101818152505084828151811061157f57fe5b602002602001015160001415611595575061159e565b506001016114de565b5050509450945094915050565b8051606090806001600160401b03811180156115c657600080fd5b506040519080825280602002602001820160405280156115f0578160200160208202803683370190505b5091506001600160a01b03871661160757506112c5565b60005b818110156117295760006060896001600160a01b031662061a80636e79e13360e01b8b8b8b8b898151811061163b57fe5b60200260200101516040516024016116569493929190619af6565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516116949190619a34565b6000604051808303818686fa925050503d80600081146116d0576040519150601f19603f3d011682016040523d82523d6000602084013e6116d5565b606091505b5091509150600082156116f957818060200190518101906116f691906191ab565b90505b8061170657505050611729565b8086858151811061171357fe5b602090810291909101015250505060010161160a565b505095945050505050565b60606117408385616006565b8151806001600160401b038111801561175857600080fd5b50604051908082528060200260200182016040528015611782578160200160208202803683370190505b50915060005b8181101561189e57866001600160a01b03166372ea9076620c350088888886815181106117b157fe5b60200260200101516040518563ffffffff1660e01b81526004016117d793929190619b78565b60206040518083038187803b1580156117ef57600080fd5b5086fa93505050508015611820575060408051601f3d908101601f1916820190925261181d918101906191ab565b60015b61185a573d80801561184e576040519150601f19603f3d011682016040523d82523d6000602084013e611853565b606091505b505061189e565b8084838151811061186757fe5b60200260200101818152505083828151811061187f57fe5b602002602001015160001415611895575061189e565b50600101611788565b5050949350505050565b8051606090806001600160401b03811180156118c357600080fd5b506040519080825280602002602001820160405280156118ed578160200160208202803683370190505b50915060005b81811015611a2357856001600160a01b031663d06ca61f620249f086848151811061191a57fe5b6020026020010151886040518463ffffffff1660e01b815260040161194092919061a23a565b60006040518083038187803b15801561195857600080fd5b5086fa9350505050801561198e57506040513d6000823e601f3d908101601f1916820160405261198b919081019061915d565b60015b6119c8573d8080156119bc576040519150601f19603f3d011682016040523d82523d6000602084013e6119c1565b606091505b5050611a23565b806001875103815181106119d857fe5b60200260200101518483815181106119ec57fe5b602002602001018181525050838281518110611a0457fe5b602002602001015160001415611a1a5750611a23565b506001016118f3565b50509392505050565b6060611a388385616006565b84602001516001600160a01b0316846001600160a01b0316141580611a6a575084516001600160a01b03848116911614155b15610a9b5781516060816001600160401b0381118015611a8957600080fd5b50604051908082528060200260200182016040528015611ab3578160200160208202803683370190505b509250611257915050565b8051606090806001600160401b0381118015611ad957600080fd5b50604051908082528060200260200182016040528015611b03578160200160208202803683370190505b50915060005b8181101561189e576000606088600001516001600160a01b0316621e84808a602001518a8a8a8881518110611b3a57fe5b6020026020010151604051602401611b5493929190619fd4565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051611b929190619a34565b6000604051808303818686fa925050503d8060008114611bce576040519150601f19603f3d011682016040523d82523d6000602084013e611bd3565b606091505b509150915060008215611bf75781806020019051810190611bf491906191ab565b90505b80868581518110611c0457fe5b602002602001018181525050858481518110611c1c57fe5b602002602001015160001415611c345750505061189e565b505050600101611b09565b80516060908190806001600160401b0381118015611c5c57600080fd5b50604051908082528060200260200182016040528015611c86578160200160208202803683370190505b509150611c938686615ae5565b9250825160001415611ca55750610928565b60005b8181101561092557866001600160a01b0316639e269b68620249f0878481518110611ccf57fe5b6020026020010151878a6040518563ffffffff1660e01b8152600401611cf79392919061a253565b60006040518083038187803b158015611d0f57600080fd5b5086fa93505050508015611d4557506040513d6000823e601f3d908101601f19168201604052611d42919081019061915d565b60015b611d73573d8080156108be576040519150601f19603f3d011682016040523d82523d6000602084013e6108c3565b80600081518110611d8057fe5b6020026020010151848381518110611d9457fe5b602002602001018181525050838281518110611dac57fe5b602002602001015160001415611dc25750610925565b50600101611ca8565b60208481015160408051600180825281830190925260609384929082810190803683370190505090508581600081518110611e0257fe5b602090810291909101015260606000604051908082528060200260200182016040528015611e3a578160200160208202803683370190505b50905087606001516001600160a01b0316866001600160a01b03161415611f2b576040516381efcbdd60e01b81526001600160a01b038416906381efcbdd906207a12090611e9390899060019088908890600401619c17565b60006040518083038187803b158015611eab57600080fd5b5086fa93505050508015611ee157506040513d6000823e601f3d908101601f19168201604052611ede91908101906191c3565b60015b611f1b573d808015611f0f576040519150601f19603f3d011682016040523d82523d6000602084013e611f14565b606091505b5050611f26565b935061125792505050565b61203d565b87606001516001600160a01b0316856001600160a01b03161415611f81576040516361e597f960e01b81526001600160a01b038416906361e597f9906207a12090611e93908a9060019088908890600401619c17565b6040516302b9a6cd60e11b81526001600160a01b038416906305734d9a906207a12090611fc1908a90600190889088908d90849084908490600401619c5a565b60006040518083038187803b158015611fd957600080fd5b5086fa9350505050801561200f57506040513d6000823e601f3d908101601f1916820160405261200c91908101906191c3565b60015b611f1b573d808015610e27576040519150601f19603f3d011682016040523d82523d6000602084013e610e27565b505050949350505050565b60608060606120c9866001600160a01b031663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b15801561208957600080fd5b505afa15801561209d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120c1919061894e565b866000616989565b905083516001600160401b03811180156120e257600080fd5b5060405190808252806020026020018201604052801561210c578160200160208202803683370190505b50915083516001600160401b038111801561212657600080fd5b5060405190808252806020026020018201604052801561215a57816020015b60608152602001906001900390816121455790505b50925060005b84518110156109255760606000805b845181101561224b5760606121978a87848151811061218a57fe5b6020026020010151616e1f565b90508a6001600160a01b031663cdca1753620493e0838c89815181106121b957fe5b60200260200101516040518463ffffffff1660e01b81526004016121de929190619eb8565b602060405180830381600088803b1580156121f857600080fd5b5087f193505050508015612229575060408051601f3d908101601f19168201909252612226918101906191ab565b60015b61223257612242565b808411612240578093508194505b505b5060010161216f565b5080612258575050610925565b8085848151811061226557fe5b6020026020010181815250508186848151811061227e57fe5b60209081029190910101525050600101612160565b80516060908590806001600160401b03811180156122b057600080fd5b506040519080825280602002602001820160405280156122da578160200160208202803683370190505b50604051630bcded8960e21b81529093506001600160a01b03831690632f37b6249061230a908990600401619a50565b60206040518083038186803b15801561232257600080fd5b505afa158015612336573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061235a919061918f565b15806123df5750604051630bcded8960e21b81526001600160a01b03831690632f37b6249061238d908890600401619a50565b60206040518083038186803b1580156123a557600080fd5b505afa1580156123b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123dd919061918f565b155b156123eb575050611257565b6123f36181a8565b60405163f8b2cb4f60e01b81526001600160a01b0384169063f8b2cb4f9061241f908a90600401619a50565b60206040518083038186803b15801561243757600080fd5b505afa15801561244b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061246f91906191ab565b815260405163f8b2cb4f60e01b81526001600160a01b0384169063f8b2cb4f9061249d908990600401619a50565b60206040518083038186803b1580156124b557600080fd5b505afa1580156124c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124ed91906191ab565b6020820152604051634a46c67360e11b81526001600160a01b0384169063948d8ce69061251e908a90600401619a50565b60206040518083038186803b15801561253657600080fd5b505afa15801561254a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061256e91906191ab565b60408083019190915251634a46c67360e11b81526001600160a01b0384169063948d8ce6906125a1908990600401619a50565b60206040518083038186803b1580156125b957600080fd5b505afa1580156125cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125f191906191ab565b816060018181525050826001600160a01b031663d4cadf686040518163ffffffff1660e01b815260040160206040518083038186803b15801561263357600080fd5b505afa158015612647573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061266b91906191ab565b608082015260005b82811015610ffe5761269e82602001516003670de0b6b3a76400008161269557fe5b04600101616f7a565b8682815181106126aa57fe5b602002602001015111156126bd57610ffe565b836001600160a01b031663f8d6aed4620493e084600001518560400151866020015187606001518c88815181106126f057fe5b602002602001015189608001516040518863ffffffff1660e01b815260040161271e9695949392919061a27e565b60206040518083038187803b15801561273657600080fd5b5086fa93505050508015612767575060408051601f3d908101601f19168201909252612764918101906191ab565b60015b6127a1573d808015612795576040519150601f19603f3d011682016040523d82523d6000602084013e61279a565b606091505b5050610ffe565b808683815181106127ae57fe5b6020026020010181815250508582815181106127c657fe5b6020026020010151600014156127dc5750610ffe565b50600101612673565b6060806060612826866001600160a01b031663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b15801561208957600080fd5b9050606061283386616fd7565b905084516001600160401b038111801561284c57600080fd5b50604051908082528060200260200182016040528015612876578160200160208202803683370190505b50925084516001600160401b038111801561289057600080fd5b506040519080825280602002602001820160405280156128c457816020015b60608152602001906001900390816128af5790505b50935060005b8551811015612a1f5760606000805b85518110156129d7576060612909866129048985815181106128f757fe5b602002602001015161706f565b616e1f565b90508b6001600160a01b0316632f80bb1d620493e0838d898151811061292b57fe5b60200260200101516040518463ffffffff1660e01b8152600401612950929190619eb8565b602060405180830381600088803b15801561296a57600080fd5b5087f19350505050801561299b575060408051601f3d908101601f19168201909252612998918101906191ab565b60015b6129a4576129ce565b8315806129b15750808410155b156129cc578093506129c98c89858151811061218a57fe5b94505b505b506001016128d9565b50806129e4575050612a1f565b808684815181106129f157fe5b60200260200101818152505081878481518110612a0a57fe5b602090810291909101015250506001016128ca565b505050935093915050565b6040805160608181019092526112c59080612a49868960808401619a7d565b60405160208183030381529060405281526020018688604051602001612a70929190619a7d565b604051602081830303815290604052815260200161710781525083616653565b6060612a9d848484610930565b905060005b8451811015610a9b57818181518110612ab757fe5b6020026020010151600014612b3d57612b24828281518110612ad557fe5b6020026020010151868381518110612ae957fe5b6020026020010151606001516001600160801b0316878481518110612b0a57fe5b6020026020010151604001516001600160801b031661721b565b828281518110612b3057fe5b6020026020010181815250505b600101612aa2565b6060816001600160401b0381118015612b5d57600080fd5b50604051908082528060200260200182016040528015612b9757816020015b612b846181d7565b815260200190600190039081612b7c5790505b50905060005b808314612c9f576001828281518110612bb257fe5b602090810291909101810151911515910152838382818110612bd057fe5b9050602002810190612be2919061a2a6565b15159050612bef57612c97565b30848483818110612bfc57fe5b9050602002810190612c0e919061a2a6565b604051612c1c929190619a24565b6000604051808303816000865af19150503d8060008114612c59576040519150601f19603f3d011682016040523d82523d6000602084013e612c5e565b606091505b50838381518110612c6b57fe5b6020026020010151602001848481518110612c8257fe5b60209081029190910101519190915290151590525b600101612b9d565b5092915050565b606081516001600160401b0381118015612cbf57600080fd5b50604051908082528060200260200182016040528015612ce9578160200160208202803683370190505b50905060005b82518114612d92577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316838281518110612d2d57fe5b60200260200101516001600160a01b031614612d6d57612d68838281518110612d5257fe5b60200260200101516001600160a01b031661723f565b612d70565b60125b60ff16828281518110612d7f57fe5b6020908102919091010152600101612cef565b50919050565b60006060809450945094915050565b6060612db38385616006565b6000856000015190506000816001600160a01b03166336569e776040518163ffffffff1660e01b815260040160206040518083038186803b158015612df757600080fd5b505afa158015612e0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e2f919061894e565b8451909150806001600160401b0381118015612e4a57600080fd5b50604051908082528060200260200182016040528015612e74578160200160208202803683370190505b509350826001600160a01b031663f4b9fa756040518163ffffffff1660e01b815260040160206040518083038186803b158015612eb057600080fd5b505afa158015612ec4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ee8919061894e565b6001600160a01b0316866001600160a01b031614158015612f8b5750826001600160a01b031663f4b9fa756040518163ffffffff1660e01b815260040160206040518083038186803b158015612f3d57600080fd5b505afa158015612f51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f75919061894e565b6001600160a01b0316876001600160a01b031614155b15612f9857505050611257565b60005b81811015610ffe576000612fc68a898b8a8681518110612fb757fe5b602002602001015189896172eb565b905080612fd35750610ffe565b80868381518110612fe057fe5b602090810291909101015250600101612f9b565b6060600085600001516001600160a01b031663bbd7f25585600f0b6040518263ffffffff1660e01b815260040161302b9190619e83565b60206040518083038186803b15801561304357600080fd5b505afa158015613057573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061307b91906191ab565b8651604051631e01043960e01b81526001600160a01b0390911690631e010439906130ae90600f89900b90600401619e83565b60206040518083038186803b1580156130c657600080fd5b505afa1580156130da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130fe91906191ab565b039050600086600001516001600160a01b031663c582951486600f0b6040518263ffffffff1660e01b81526004016131369190619e83565b60806040518083038186803b15801561314e57600080fd5b505afa158015613162573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061318691906196db565b935050505080601203600a0a828161319a57fe5b85519190049250806001600160401b03811180156131b757600080fd5b506040519080825280602002602001820160405280156131e1578160200160208202803683370190505b50935060005b81811015610ffe57600060608a600001516001600160a01b0316620927c08c602001518c8c8c888151811061321857fe5b602002602001015160405160240161323293929190619fd4565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516132709190619a34565b6000604051808303818686fa925050503d80600081146132ac576040519150601f19603f3d011682016040523d82523d6000602084013e6132b1565b606091505b5091509150600082156132d557818060200190518101906132d291906191ab565b90505b86811061330f57835b8581101561330657878982815181106132f357fe5b60209081029190910101526001016132de565b50505050610ffe565b8088858151811061331c57fe5b60200260200101818152505087848151811061333457fe5b60200260200101516000141561334c57505050610ffe565b5050506001016131e7565b61335f6181ef565b6133676181ef565b600080805b8751811461346c576133b3602089838151811061338557fe5b60200260200101515103878a848151811061339c57fe5b602002602001015161757d9092919063ffffffff16565b60006060306001600160a01b03168a84815181106133cd57fe5b60200260200101516040516133e29190619a34565b6000604051808303816000865af19150503d806000811461341f576040519150601f19603f3d011682016040523d82523d6000602084013e613424565b606091505b5091509150811561346257600061344860208351038361758d90919063ffffffff16565b90508481111561346057838852602088018290529350835b505b505060010161336c565b50806134785750613567565b60005b86518114613564576134ab602088838151811061349457fe5b602002602001015151038389848151811061339c57fe5b60006060306001600160a01b03168984815181106134c557fe5b60200260200101516040516134da9190619a34565b6000604051808303816000865af19150503d8060008114613517576040519150601f19603f3d011682016040523d82523d6000602084013e61351c565b606091505b5091509150811561355a57600061354060208351038361758d90919063ffffffff16565b90508581111561355857838752602087018290529450845b505b505060010161347b565b50505b93509350939050565b60408401516060906001600160e01b0319166135f25760408051606081019091526135eb90806135a4868960808401619ff2565b604051602081830303815290604052815260200186886040516020016135cb929190619ff2565b604051602081830303815290604052815260200161759981525083616653565b9050611257565b8151806001600160401b038111801561360a57600080fd5b50604051908082528060200260200182016040528015613634578160200160208202803683370190505b50915060005b8181101561189e576000606088600001516001600160a01b0316621e84808a604001518a8a8a888151811061366b57fe5b602002602001015160405160240161368593929190619fd4565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516136c39190619a34565b6000604051808303818686fa925050503d80600081146136ff576040519150601f19603f3d011682016040523d82523d6000602084013e613704565b606091505b509150915060008215613728578180602001905181019061372591906191ab565b90505b8086858151811061373557fe5b60200260200101818152505085848151811061374d57fe5b6020026020010151600014156137655750505061189e565b50505060010161363a565b80516060908590806001600160401b038111801561378d57600080fd5b506040519080825280602002602001820160405280156137b7578160200160208202803683370190505b50604051630bcded8960e21b81529093506001600160a01b03831690632f37b624906137e7908990600401619a50565b60206040518083038186803b1580156137ff57600080fd5b505afa158015613813573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613837919061918f565b15806138bc5750604051630bcded8960e21b81526001600160a01b03831690632f37b6249061386a908890600401619a50565b60206040518083038186803b15801561388257600080fd5b505afa158015613896573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138ba919061918f565b155b156138c8575050611257565b6138d06181a8565b60405163f8b2cb4f60e01b81526001600160a01b0384169063f8b2cb4f906138fc908a90600401619a50565b60206040518083038186803b15801561391457600080fd5b505afa158015613928573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061394c91906191ab565b815260405163f8b2cb4f60e01b81526001600160a01b0384169063f8b2cb4f9061397a908990600401619a50565b60206040518083038186803b15801561399257600080fd5b505afa1580156139a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139ca91906191ab565b6020820152604051634a46c67360e11b81526001600160a01b0384169063948d8ce6906139fb908a90600401619a50565b60206040518083038186803b158015613a1357600080fd5b505afa158015613a27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a4b91906191ab565b60408083019190915251634a46c67360e11b81526001600160a01b0384169063948d8ce690613a7e908990600401619a50565b60206040518083038186803b158015613a9657600080fd5b505afa158015613aaa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ace91906191ab565b816060018181525050826001600160a01b031663d4cadf686040518163ffffffff1660e01b815260040160206040518083038186803b158015613b1057600080fd5b505afa158015613b24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b4891906191ab565b608082015260005b82811015610ffe578151613b6c906706f05b59d3b20000616f7a565b868281518110613b7857fe5b60200260200101511115613b8b57610ffe565b836001600160a01b031663ba9530a6620493e084600001518560400151866020015187606001518c8881518110613bbe57fe5b602002602001015189608001516040518863ffffffff1660e01b8152600401613bec9695949392919061a27e565b60206040518083038187803b158015613c0457600080fd5b5086fa93505050508015613c35575060408051601f3d908101601f19168201909252613c32918101906191ab565b60015b613c63573d808015612795576040519150601f19603f3d011682016040523d82523d6000602084013e61279a565b80868381518110613c7057fe5b602002602001018181525050858281518110613c8857fe5b602002602001015160001415613c9e5750610ffe565b50600101613b50565b60008083516003811115613cb757fe5b1480613ccf5750600183516003811115613ccd57fe5b145b80613ce5575060408401516001600160801b0316155b80613cfb575060608401516001600160801b0316155b15613d0857506000613de7565b613d10618209565b600080846001600160a01b0316631fb0979588886040518363ffffffff1660e01b8152600401613d4192919061a1e6565b60a06040518083038186803b158015613d5957600080fd5b505afa158015613d6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d919190619619565b91945092509050600183602001516004811115613daa57fe5b141580613db5575080155b80613dc8575086516001600160a01b0316155b15613dd95760009350505050613de7565b506001600160801b03169150505b9392505050565b6000606080613dfd8587616006565b613e088787876175ed565b925082613e1457610bf9565b60405163276fdad960e11b81523090634edfb5b290613e3d908a9087908b908b9060040161a1ad565b60006040518083038186803b158015613e5557600080fd5b505afa158015613e69573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613e9191908101906191c3565b876080018190525086608001519150613f086040518060600160405280878a604051602001613ec1929190619cf1565b6040516020818303038152906040528152602001888a604051602001613ee8929190619cf1565b604051602081830303815290604052815260200161775481525085616653565b90509450945094915050565b600080856001600160a01b031663901754d786866040518363ffffffff1660e01b8152600401613f45929190619a7d565b60206040518083038186803b158015613f5d57600080fd5b505afa158015613f71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f95919061894e565b90506001600160a01b038116613faf576000915050611257565b60006001600160a01b03861615614041576040516370a0823160e01b81526001600160a01b038716906370a0823190613fec908590600401619a50565b60206040518083038186803b15801561400457600080fd5b505afa158015614018573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061403c91906191ab565b61404d565b816001600160a01b0316315b90508381101561406257600092505050611257565b6040516303c2803f60e31b81526001600160a01b03831690631e1401f890620249f090614097908a908a908a90600401619b78565b60206040518083038187803b1580156140af57600080fd5b5086fa935050505080156140e0575060408051601f3d908101601f191682019092526140dd918101906191ab565b60015b614120573d80801561410e576040519150601f19603f3d011682016040523d82523d6000602084013e614113565b606091505b5060009350505050611257565b9250611257915050565b60606141368385616006565b60208501516040805160028082526060828101909352816020016020820280368337019050509050858160008151811061416c57fe5b60200260200101906001600160a01b031690816001600160a01b031681525050848160018151811061419a57fe5b6001600160a01b03909216602092830291909101909101528351806001600160401b03811180156141ca57600080fd5b506040519080825280602002602001820160405280156141f4578160200160208202803683370190505b5093506141ff618181565b61420761603c565b905060005b82811015610e275760606142268b898481518110610d0957fe5b604051637c26833760e11b81529091506001600160a01b0387169063f84d066e9061425c9060019085908a908990600401619f46565b600060405180830381600087803b15801561427657600080fd5b505af19250505080156142ab57506040513d6000823e601f3d908101601f191682016040526142a8919081019061900b565b60015b6142d9573d808015610dc9576040519150601f19603f3d011682016040523d82523d6000602084013e610dce565b6000816000815181106142e857fe5b602002602001015190506000811361430257505050610e27565b8089858151811061430f57fe5b60200260200101818152505050505060010161420c565b8051606090806001600160401b038111801561434157600080fd5b5060405190808252806020026020018201604052801561436b578160200160208202803683370190505b50915060005b8181101561189e57866001600160a01b031663343fbcdd62061a80888888868151811061439a57fe5b60200260200101516040518563ffffffff1660e01b81526004016143c093929190619b78565b60206040518083038187803b1580156143d857600080fd5b5086fa93505050508015614409575060408051601f3d908101601f19168201909252614406918101906191ab565b60015b614437573d80801561184e576040519150601f19603f3d011682016040523d82523d6000602084013e611853565b8084838151811061444457fe5b60200260200101818152505083828151811061445c57fe5b602002602001015160001415614472575061189e565b50600101614371565b600080606061448a8587616006565b8351806001600160401b03811180156144a257600080fd5b506040519080825280602002602001820160405280156144cc578160200160208202803683370190505b5091506144db8989898961783b565b945092506001600160a01b0383166144f357506145ad565b60005b818110156145aa57600061456489868860405160200161451893929190619b20565b60405160208183030381529060405289878960405160200161453c93929190619b20565b60405160208183030381529060405289858151811061455757fe5b6020026020010151617990565b90508084838151811061457357fe5b60200260200101818152505083828151811061458b57fe5b6020026020010151600014156145a157506145aa565b506001016144f6565b50505b955095509592505050565b60606145c48385616006565b8151806001600160401b03811180156145dc57600080fd5b50604051908082528060200260200182016040528015614606578160200160208202803683370190505b50915060005b8181101561189e57866001600160a01b031663144a2752620f4240878988868151811061463557fe5b60200260200101516040518563ffffffff1660e01b815260040161465b93929190619b78565b60206040518083038187803b15801561467357600080fd5b5086fa935050505080156146a4575060408051601f3d908101601f191682019092526146a1918101906191ab565b60015b6146d2573d80801561184e576040519150601f19603f3d011682016040523d82523d6000602084013e611853565b808483815181106146df57fe5b6020026020010181815250508382815181106146f757fe5b60200260200101516000141561470d575061189e565b5060010161460c565b600060606147248486616006565b8251806001600160401b038111801561473c57600080fd5b50604051908082528060200260200182016040528015614766578160200160208202803683370190505b50915060005b818110156147db57600061479589898989868151811061478857fe5b6020026020010151613f14565b9050808483815181106147a457fe5b6020026020010181815250508382815181106147bc57fe5b6020026020010151600014156147d257506147db565b5060010161476c565b5060405163901754d760e01b81526001600160a01b0388169063901754d79061480a9089908990600401619a7d565b60206040518083038186803b15801561482257600080fd5b505afa158015614836573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061485a919061894e565b92505094509492505050565b6040805160608181019092526112c59080614885868960808401619a7d565b604051602081830303815290604052815260200186886040516020016148ac929190619a7d565b6040516020818303038152906040528152602001617a8281525083616653565b606082516001600160401b03811180156148e557600080fd5b5060405190808252806020026020018201604052801561490f578160200160208202803683370190505b50905060005b83518114612c9f577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031684828151811061495357fe5b60200260200101516001600160a01b03161461499d576149988385838151811061497957fe5b60200260200101516001600160a01b0316617ac990919063ffffffff16565b6149a9565b826001600160a01b0316315b8282815181106149b557fe5b6020908102919091010152600101614915565b6040805160608181019092526112c590806149e7868960808401619a7d565b60405160208183030381529060405281526020018688604051602001614a0e929190619a7d565b6040516020818303038152906040528152602001617b9381525083616653565b6060614a3a8385616006565b8151806001600160401b0381118015614a5257600080fd5b50604051908082528060200260200182016040528015614a7c578160200160208202803683370190505b50915060006001600160a01b03861615614a9f57614a9a87876160fd565b614aa2565b60005b905060006001600160a01b03861615614ac457614abf88876160fd565b614ac7565b60005b905060005b83811015610ffe5760016001600160a01b038816614b1d57614afc846395b68fe760e01b898581518110610f0257fe5b878481518110614b0857fe5b60200260200101819350828152505050614bb7565b6001600160a01b038916614b4357614afc8363cd7724c360e01b898581518110610f0257fe5b6000614b5d856395b68fe760e01b8a8681518110610f0257fe5b925090508015614b9a57614b798463cd7724c360e01b8361617c565b888581518110614b8557fe5b60200260200101819450828152505050614bb5565b6000878481518110614ba857fe5b6020026020010181815250505b505b801580614bd75750858281518110614bcb57fe5b60200260200101516000145b15614be25750610ffe565b50600101614acc565b8051606090806001600160401b0381118015614c0657600080fd5b50604051908082528060200260200182016040528015614c30578160200160208202803683370190505b50915060005b81811015611a2357856001600160a01b0316631f00ca74620249f0868481518110614c5d57fe5b6020026020010151886040518463ffffffff1660e01b8152600401614c8392919061a23a565b60006040518083038187803b158015614c9b57600080fd5b5086fa93505050508015614cd157506040513d6000823e601f3d908101601f19168201604052614cce919081019061915d565b60015b614cff573d8080156119bc576040519150601f19603f3d011682016040523d82523d6000602084013e6119c1565b80600081518110614d0c57fe5b6020026020010151848381518110614d2057fe5b602002602001018181525050838281518110614d3857fe5b602002602001015160001415614d4e5750611a23565b50600101614c36565b6060614d638385616006565b8151806001600160401b0381118015614d7b57600080fd5b50604051908082528060200260200182016040528015614da5578160200160208202803683370190505b50915060005b8181101561189e57866001600160a01b031663ff1fd974620f42408888888681518110614dd457fe5b60200260200101516040518563ffffffff1660e01b8152600401614dfa93929190619b78565b60206040518083038187803b158015614e1257600080fd5b5086fa93505050508015614e43575060408051601f3d908101601f19168201909252614e40918101906191ab565b60015b614e71573d80801561184e576040519150601f19603f3d011682016040523d82523d6000602084013e611853565b80848381518110614e7e57fe5b602002602001018181525050838281518110614e9657fe5b602002602001015160001415614eac575061189e565b50600101614dab565b6000606080614ec48587616006565b614ecf8787876175ed565b925082614edb57610bf9565b60405163276fdad960e11b81523090634edfb5b290614f04908a9087908b908b9060040161a1ad565b60006040518083038186803b158015614f1c57600080fd5b505afa158015614f30573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052614f5891908101906191c3565b608088018190528451909250806001600160401b0381118015614f7a57600080fd5b50604051908082528060200260200182016040528015614fa4578160200160208202803683370190505b50915060005b8181101561508f576000306001600160a01b031663f1ed7fa48b8b8b8b8781518110614fd257fe5b60200260200101516040518563ffffffff1660e01b8152600401614ff9949392919061a177565b60206040518083038186803b15801561501157600080fd5b505afa158015615025573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061504991906191ab565b90508084838151811061505857fe5b60200260200101818152505083828151811061507057fe5b602002602001015160001415615086575061508f565b50600101614faa565b50509450945094915050565b60008060606150aa8587616006565b6150b68888888861783b565b935091506001600160a01b0382166150cd576145ad565b8351806001600160401b03811180156150e557600080fd5b5060405190808252806020026020018201604052801561510f578160200160208202803683370190505b50604080516060810190915290925061517c90806151338987891560808501619b20565b604051602081830303815290604052815260200189868860405160200161515c93929190619b20565b604051602081830303815290604052815260200161799081525086616653565b915050955095509592505050565b60008060606151998587616006565b8351806001600160401b03811180156151b157600080fd5b506040519080825280602002602001820160405280156151db578160200160208202803683370190505b508851604051630939d86360e11b81529193506001600160a01b031690631273b0c69061520e908a908a90600401619a7d565b60206040518083038186803b15801561522657600080fd5b505afa15801561523a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061525e919061894e565b925060006001600160a01b0384161561527c5750600193508661531b565b8851604051630939d86360e11b81526001600160a01b0390911690631273b0c6906152ad908a908c90600401619a7d565b60206040518083038186803b1580156152c557600080fd5b505afa1580156152d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906152fd919061894e565b93506001600160a01b038416615314575050610bf9565b5060009350855b836001600160a01b031663dd58b41c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561535457600080fd5b505afa158015615368573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061538c919061918f565b615397575050610bf9565b61540f60405180606001604052808987858e602001516040516020016153c09493929190619a97565b60405160208183030381529060405281526020018a87858e602001516040516020016153ef9493929190619a97565b604051602081830303815290604052815260200161685081525087616653565b925050509450945094915050565b606083516001600160401b038111801561543657600080fd5b50604051908082528060200260200182016040528015615460578160200160208202803683370190505b50905060005b84518114610a9b577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168582815181106154a457fe5b60200260200101516001600160a01b0316146154f0576154eb84848784815181106154cb57fe5b60200260200101516001600160a01b0316617c489092919063ffffffff16565b6154f3565b60005b8282815181106154ff57fe5b6020908102919091010152600101615466565b8051606090806001600160401b038111801561552d57600080fd5b50604051908082528060200260200182016040528015615557578160200160208202803683370190505b50915060005b8181101561189e57866001600160a01b031663838e6a22620493e0888888868151811061558657fe5b60200260200101516040518563ffffffff1660e01b81526004016155ac93929190619b78565b60206040518083038187803b1580156155c457600080fd5b5086fa935050505080156155f5575060408051601f3d908101601f191682019092526155f2918101906191ab565b60015b615623573d80801561184e576040519150601f19603f3d011682016040523d82523d6000602084013e611853565b8084838151811061563057fe5b6020026020010181815250505060010161555d565b60008460800151516000141561565d57506000611257565b84604001516001600160a01b031663418436bc6207a12087606001516001600160a01b0316876001600160a01b03161461569757866156ad565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee5b88606001516001600160a01b0316876001600160a01b0316146156d057866156e6565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee5b8660008b608001516040518763ffffffff1660e01b815260040161570e959493929190619b9c565b60206040518083038187803b15801561572657600080fd5b5086fa93505050508015615757575060408051601f3d908101601f19168201909252615754918101906191ab565b60015b615795573d808015615785576040519150601f19603f3d011682016040523d82523d6000602084013e61578a565b606091505b506000915050611257565b60006157a085617d14565b60ff16905060006157b087617d14565b60ff169050670de0b6b3a764000081600a0a83600a0a87860202816157d157fe5b04816157d957fe5b049350505050611257565b600060606157f28486616006565b8251806001600160401b038111801561580a57600080fd5b50604051908082528060200260200182016040528015615834578160200160208202803683370190505b50915061589f60405180606001604052808988604051602001615858929190619a7d565b6040516020818303038152906040528152602001898960405160200161587f929190619a7d565b6040516020818303038152906040528152602001617d1f81525085616653565b60405163901754d760e01b81529092506001600160a01b0388169063901754d79061480a9089908990600401619a7d565b6158d86181ef565b6158e06181ef565b6000198060005b865181146159dc57615917602088838151811061590057fe5b602002602001015151038789848151811061339c57fe5b60006060306001600160a01b031689848151811061593157fe5b60200260200101516040516159469190619a34565b6000604051808303816000865af19150503d8060008114615983576040519150601f19603f3d011682016040523d82523d6000602084013e615988565b606091505b509150915081156159d25760006159ac60208351038361758d90919063ffffffff16565b90506000811180156159bd57508481105b156159d057838752602087018290529350835b505b50506001016158e7565b506000198114156159ed5750613567565b60005b8751811461356457615a206020898381518110615a0957fe5b60200260200101515103838a848151811061339c57fe5b60006060306001600160a01b03168a8481518110615a3a57fe5b6020026020010151604051615a4f9190619a34565b6000604051808303816000865af19150503d8060008114615a8c576040519150601f19603f3d011682016040523d82523d6000602084013e615a91565b606091505b50915091508115615adb576000615ab560208351038361758d90919063ffffffff16565b9050600081118015615ac657508581105b15615ad957838852602088018290529450845b505b50506001016159f0565b60606000836001600160a01b031663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b158015615b2257600080fd5b505afa158015615b36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190615b5a919061894e565b905060018351036001600160401b0381118015615b7657600080fd5b50604051908082528060200260200182016040528015615ba0578160200160208202803683370190505b50915060005b8251811015615dcb576060826001600160a01b0316635b1dc86f620249f0878581518110615bd057fe5b6020026020010151888660010181518110615be757fe5b60200260200101516040518463ffffffff1660e01b8152600401615c0c929190619a7d565b60006040518083038187803b158015615c2457600080fd5b5086fa93505050508015615c5a57506040513d6000823e601f3d908101601f19168201604052615c579190810190618d06565b60015b615ca9573d808015615c88576040519150601f19603f3d011682016040523d82523d6000602084013e615c8d565b606091505b50506040805160008152602081019091529350615dce92505050565b6000600182511015615cd65760405162461bcd60e51b8152600401615ccd9061a0d8565b60405180910390fd5b60005b8251811015615dbf576000838281518110615cf057fe5b60200260200101516001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015615d3057600080fd5b505afa158015615d44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190615d6891906191ab565b905082811115615db657809250838281518110615d8157fe5b6020026020010151888781518110615d9557fe5b60200260200101906001600160a01b031690816001600160a01b0316815250505b50600101615cd9565b50505050600101615ba6565b50505b92915050565b6000606085600001516001600160a01b03166321f8a72187600001516001600160a01b0316639232494e6040518163ffffffff1660e01b815260040160206040518083038186803b158015615e2857600080fd5b505afa158015615e3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190615e6091906191ab565b6040518263ffffffff1660e01b8152600401615e7c9190619e83565b60206040518083038186803b158015615e9457600080fd5b505afa158015615ea8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190615ecc919061894e565b915085602001515160001415615ee157615ffd565b6000805b876020015151811015615ffa57600288602001518281518110615f0457fe5b6020026020010151511015615f1857615ff2565b836001600160a01b0316637f9c0ecd620493e08a602001518481518110615f3b57fe5b60200260200101518860018a510381518110615f5357fe5b60200260200101516040518463ffffffff1660e01b8152600401615f78929190619d3a565b60206040518083038187803b158015615f9057600080fd5b5086fa93505050508015615fc1575060408051601f3d908101601f19168201909252615fbe918101906191ab565b60015b615fca57615ff2565b82811115615ff05780925088602001518281518110615fe557fe5b602002602001015193505b505b600101615ee5565b50505b94509492505050565b806001600160a01b0316826001600160a01b031614156160385760405162461bcd60e51b8152600401615ccd9061a04e565b5050565b616044618181565b50604080516080810182523080825260006020830181905292820152606081019190915290565b604080516001808252818301909252606091829190816020015b61608d61822b565b8152602001906001900390816160855790505090506040518060a0016040528085600001518152602001600081526020016001815260200184815260200160405180602001604052806000815250815250816000815181106160eb57fe5b60209081029190910101529392505050565b6040516303795fb160e11b81526000906001600160a01b038416906306f2bf629061612c908590600401619a50565b60206040518083038186803b15801561614457600080fd5b505afa158015616158573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613de7919061894e565b6000806001600160a01b03851661619257610928565b6060856001600160a01b0316620249f086866040516024016161b49190619e83565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516161f29190619a34565b6000604051808303818686fa925050503d806000811461622e576040519150601f19603f3d011682016040523d82523d6000602084013e616233565b606091505b5090925090508115616256578080602001905181019061625391906191ab565b92505b50935093915050565b600080600080846001600160a01b031663d9638d368b602001516040518263ffffffff1660e01b81526004016162959190619e83565b60a06040518083038186803b1580156162ad57600080fd5b505afa1580156162c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906162e59190619710565b94509450505092506000620f424090508a604001516001600160a01b0316896001600160a01b0316141561640d5760006163248964e8d4a51000617d6f565b905060006163486b033b2e3c9fd0803ce80000006163428885617da5565b90617d6f565b90508481106163605760009650505050505050616516565b60006163ef670de0b6b3a76400006163e98c6001600160a01b031663568d4b6f6040518163ffffffff1660e01b815260040160206040518083038186803b1580156163aa57600080fd5b505afa1580156163be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906163e291906191ab565b8690617d6f565b90617dc1565b905060006163fd8483617deb565b9850616516975050505050505050565b8a604001516001600160a01b03168a6001600160a01b0316141561650d57878481111561644257600095505050505050616516565b600061645e6b033b2e3c9fd0803ce80000006163428885617deb565b90508381116164765760009650505050505050616516565b60006164fb8a6001600160a01b031663fae036d56040518163ffffffff1660e01b815260040160206040518083038186803b1580156164b457600080fd5b505afa1580156164c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906164ec91906191ab565b670de0b6b3a764000090617da5565b905060006163fd826163e98688617d6f565b60009450505050505b9695505050505050565b60008061652b61825d565b8580602001905181019061653f9190619257565b91509150600085806020019051810190616559919061923b565b905060006060306322db5ed160e21b8587866165748c617e0a565b604051602401616587949392919061a10f565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516165c59190619a34565b600060405180830381855afa9150503d8060008114616600576040519150601f19603f3d011682016040523d82523d6000602084013e616605565b606091505b50915091508161661d57600095505050505050613de7565b80806020019051810190616631919061915d565b60008151811061663d57fe5b6020026020010151955050505050509392505050565b606081516001600160401b038111801561666c57600080fd5b50604051908082528060200260200182016040528015616696578160200160208202803683370190505b5090508151600014156166a857615dce565b60006166d984600001518560200151856000815181106166c457fe5b6020026020010151876040015163ffffffff16565b9050806166e65750615dce565b60006167038560200151866000015184886040015163ffffffff16565b905080616711575050615dce565b60005b84518110156168475760005b60058110156168095761674786838151811061673857fe5b60200260200101518486617e4b565b93508361675357616809565b61676261271561271086617e4b565b93508361676e57616809565b600061678b88602001518960000151878b6040015163ffffffff16565b9050806167985750616809565b8093508683815181106167a757fe5b602002602001015184106168005760008784815181106167c357fe5b60200260200101516127108986815181106167da57fe5b6020026020010151870302816167ec57fe5b049050600581116167fe575050616809565b505b50600101616720565b5061682885828151811061681957fe5b60200260200101518385617e4b565b84828151811061683457fe5b6020908102919091010152600101616714565b50505092915050565b60008060008060008780602001905181019061686c91906189a3565b9350935093509350816001600160a01b0316846001600160a01b03161415616956576040516351400f0b60e11b81526001600160a01b0384169063a2801e1690620493e0906168bf908a90600401619e83565b60206040518083038187803b1580156168d757600080fd5b5086fa93505050508015616908575060408051601f3d908101601f19168201909252616905918101906191ab565b60015b61694a573d808015616936576040519150601f19603f3d011682016040523d82523d6000602084013e61693b565b606091505b50600095505050505050613de7565b9450613de79350505050565b60405163ca19ebd960e01b81526001600160a01b0382169063ca19ebd990620493e0906168bf9087908b90600401619a64565b606060028284510310156169af5760405162461bcd60e51b8152600401615ccd9061a00a565b6169b761827d565b5060408051606080820183526101f48252610bb860208301526127108284015282516003808252608082019094529192909190816020016020820280368337019050509050600080868681518110616a0b57fe5b602002602001015190506000878760010181518110616a2657fe5b6020026020010151905060005b6003811015616b1b5760008a6001600160a01b0316631698ee8285858a8660038110616a5b57fe5b60200201516040518463ffffffff1660e01b8152600401616a7e93929190619ecb565b60206040518083038186803b158015616a9657600080fd5b505afa158015616aaa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190616ace919061894e565b9050616ad981617ea3565b15616b125780868680600101975081518110616af157fe5b60200260200101906001600160a01b031690816001600160a01b0316815250505b50600101616a33565b50505080616b2b57505050613de7565b8551856002011415616c2157806001600160401b0381118015616b4d57600080fd5b50604051908082528060200260200182016040528015616b8157816020015b6060815260200190600190039081616b6c5790505b50935060005b81811015616c1857604080516001808252818301909252906020808301908036833701905050858281518110616bb957fe5b6020026020010181905250828181518110616bd057fe5b6020026020010151858281518110616be457fe5b6020026020010151600081518110616bf857fe5b6001600160a01b0390921660209283029190910190910152600101616b87565b50505050613de7565b6060616c31888888600101616989565b9050805160001415616c465750505050613de7565b805182026001600160401b0381118015616c5f57600080fd5b50604051908082528060200260200182016040528015616c9357816020015b6060815260200190600190039081616c7e5790505b50945060005b82811015616e135760005b8251811015616e0a578251828102820190849083908110616cc157fe5b6020026020010151516001016001600160401b0381118015616ce257600080fd5b50604051908082528060200260200182016040528015616d0c578160200160208202803683370190505b50888281518110616d1957fe5b6020026020010181905250858381518110616d3057fe5b6020026020010151888281518110616d4457fe5b6020026020010151600081518110616d5857fe5b60200260200101906001600160a01b031690816001600160a01b03168152505060005b848381518110616d8757fe5b602002602001015151811015616e0057848381518110616da357fe5b60200260200101518181518110616db657fe5b6020026020010151898381518110616dca57fe5b60200260200101518260010181518110616de057fe5b6001600160a01b0390921660209283029190910190910152600101616d7b565b5050600101616ca4565b50600101616c99565b50505050509392505050565b60606002835110158015616e37575081516001018351145b616e535760405162461bcd60e51b8152600401615ccd9061a093565b81516003028351601402016001600160401b0381118015616e7357600080fd5b506040519080825280601f01601f191660200182016040528015616e9e576020820181803683370190505b5090506020810160005b8451811015615dcb578015616f4d576000846001830381518110616ec857fe5b60200260200101516001600160a01b031663ddca3f436040518163ffffffff1660e01b815260040160206040518083038186803b158015616f0857600080fd5b505afa158015616f1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190616f409190619695565b60e81b8352506003909101905b6000858281518110616f5b57fe5b602090810291909101015160601b835250601490910190600101616ea8565b60008282028315801590616f97575082848281616f9357fe5b0414155b15616fa6576000915050615dce565b6706f05b59d3b20000810181811015616fc457600092505050615dce565b670de0b6b3a76400009004949350505050565b606081516001600160401b0381118015616ff057600080fd5b5060405190808252806020026020018201604052801561701a578160200160208202803683370190505b50905060005b8251811015612d925782600182855103038151811061703b57fe5b602002602001015182828151811061704f57fe5b6001600160a01b0390921660209283029190910190910152600101617020565b606081516001600160401b038111801561708857600080fd5b506040519080825280602002602001820160405280156170b2578160200160208202803683370190505b50905060005b8251811015612d92578260018285510303815181106170d357fe5b60200260200101518282815181106170e757fe5b6001600160a01b03909216602092830291909101909101526001016170b8565b600080600085806020019051810190617120919061896a565b9150915060008580602001905181019061713a919061894e565b90503063e8e4af0983858461714e8a617e0a565b6040518563ffffffff1660e01b815260040161716d9493929190619ac2565b60006040518083038186803b15801561718557600080fd5b505afa9250505080156171ba57506040513d6000823e601f3d908101601f191682016040526171b7919081019061915d565b60015b6171fb573d8080156171e8576040519150601f19603f3d011682016040523d82523d6000602084013e6171ed565b606091505b506000945050505050613de7565b8060008151811061720857fe5b6020026020010151945050505050613de7565b6000611257836163e961722f826001617deb565b6172398887617d6f565b90617da5565b60006012905060006060836001600160a01b031660405180604001604052806004815260200163313ce56760e01b81525060405161727d9190619a34565b600060405180830381855afa9150503d80600081146172b8576040519150601f19603f3d011682016040523d82523d6000602084013e6172bd565b606091505b50915091508180156172d157506020815110155b156172e4576172e181600061758d565b92505b5050919050565b600080600080846001600160a01b031663d9638d368b602001516040518263ffffffff1660e01b81526004016173219190619e83565b60a06040518083038186803b15801561733957600080fd5b505afa15801561734d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906173719190619710565b945094505050925089604001516001600160a01b0316886001600160a01b031614156174885760008790506000617421886001600160a01b031663568d4b6f6040518163ffffffff1660e01b815260040160206040518083038186803b1580156173da57600080fd5b505afa1580156173ee573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061741291906191ab565b670de0b6b3a764000090617deb565b9050600061743b826163e985670de0b6b3a7640000617d6f565b905060006174596b033b2e3c9fd0803ce80000006163428985617da5565b9050858110617472576000975050505050505050616516565b60006163fd60016172398564e8d4a51000617dc1565b89604001516001600160a01b0316896001600160a01b0316141561756d5760006174b78864e8d4a51000617d6f565b905060006174f7886001600160a01b031663fae036d56040518163ffffffff1660e01b815260040160206040518083038186803b1580156164b457600080fd5b90506000617511670de0b6b3a76400006163e98585617d6f565b90508581111561752a5760009650505050505050616516565b60006175466b033b2e3c9fd0803ce80000006163428985617deb565b905084811161755f576000975050505050505050616516565b509550616516945050505050565b5060009998505050505050505050565b6175888383836180af565b505050565b6000613de783836180d6565b6000806175a461825d565b858060200190518101906175b89190619257565b915091506000858060200190518101906175d2919061923b565b9050600060603063205e01d760e11b8587866165748c617e0a565b600080846020015190506060816001600160a01b031663910ffc7187606001516001600160a01b0316876001600160a01b03161461762b5786617641565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee5b88606001516001600160a01b0316876001600160a01b031614617664578661767a565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee5b604080516000815260208101918290526001600160e01b031960e086901b169091526176ae92919060019060248101619b44565b60006040518083038186803b1580156176c657600080fd5b505afa1580156176da573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526177029190810190618d9e565b50509050805186600001511061771e575060009150613de79050565b8086600001518151811061772e57fe5b6020026020010151925060f883901c60001c60bb1415611a23575060009150613de79050565b60008061775f61829b565b848060200190518101906177739190618a51565b9150915060008680602001905181019061778d9190618a51565b50604051633c7b5fe960e21b8152909150309063f1ed7fa4906177ba908590859088908b9060040161a177565b60206040518083038186803b1580156177d257600080fd5b505afa925050508015617802575060408051601f3d908101601f191682019092526177ff918101906191ab565b60015b617830573d8080156171e8576040519150601f19603f3d011682016040523d82523d6000602084013e6171ed565b9350613de792505050565b6000806060866001600160a01b03166357a281dc86866040518363ffffffff1660e01b815260040161786e929190619a7d565b60006040518083038186803b15801561788657600080fd5b505afa15801561789a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526178c29190810190618d06565b90506001915080516000141561795b576040516315e8a07760e21b81526001600160a01b038816906357a281dc906179009087908990600401619a7d565b60006040518083038186803b15801561791857600080fd5b505afa15801561792c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526179549190810190618d06565b9050600091505b80518610617970576000809250925050615ffd565b80868151811061797c57fe5b602002602001015192505094509492505050565b600080600080868060200190518101906179aa9190618a01565b9250925092508015617a4e57604051633cd0243b60e11b81526001600160a01b038316906379a0487690620493e0906179ea906000908a90600401619a64565b604080518083038187803b158015617a0157600080fd5b5086fa93505050508015617a32575060408051601f3d908101601f19168201909252617a2f918101906196b8565b60015b617a425760009350505050613de7565b509350613de792505050565b6040516366410a2160e01b81526001600160a01b038316906366410a2190620493e0906179ea906000908a90600401619a64565b600080600085806020019051810190617a9b919061896a565b91509150600085806020019051810190617ab5919061894e565b9050306330d6570d83858461714e8a617e0a565b6000806060846001600160a01b03166370a0823160e01b85604051602401617af19190619a50565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051617b2f9190619a34565b600060405180830381855afa9150503d8060008114617b6a576040519150601f19603f3d011682016040523d82523d6000602084013e617b6f565b606091505b5091509150818015617b8357506020815110155b15615dcb576112c581600061758d565b600080600085806020019051810190617bac919061896a565b91509150600085806020019051810190617bc6919061894e565b90503063a469841762061a80848685617bde8b617e0a565b6040518663ffffffff1660e01b8152600401617bfd9493929190619ac2565b60006040518083038187803b158015617c1557600080fd5b5086fa935050505080156171ba57506040513d6000823e601f3d908101601f191682016040526171b7919081019061915d565b6000806060856001600160a01b031663dd62ed3e60e01b8686604051602401617c72929190619a7d565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051617cb09190619a34565b600060405180830381855afa9150503d8060008114617ceb576040519150601f19603f3d011682016040523d82523d6000602084013e617cf0565b606091505b5091509150818015617d0457506020815110155b15611a235761651681600061758d565b6000615dce8261723f565b600080600085806020019051810190617d38919061896a565b9150915060008086806020019051810190617d53919061896a565b91509150617d6384848389613f14565b98975050505050505050565b600082617d7e57506000615dce565b82820282848281617d8b57fe5b0414613de757613de7617da060018686618100565b61815a565b600082820183811015613de757613de7617da060008686618100565b600081617dd757617dd7617da060038585618100565b6000828481617de257fe5b04949350505050565b600082821115617e0457617e04617da060028585618100565b50900390565b604080516001808252818301909252606091602080830190803683370190505090508181600081518110617e3a57fe5b602002602001018181525050919050565b6000831580617e58575081155b80617e61575082155b15617e6e57506000613de7565b83820282858281617e7b57fe5b0414617e8b576000915050613de7565b8360018503820181617e9957fe5b0495945050505050565b6000813b80617eb6576000915050610c08565b50816001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b158015617ef057600080fd5b505afa158015617f04573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190617f28919061894e565b6001600160a01b03166370a08231836040518263ffffffff1660e01b8152600401617f539190619a50565b60206040518083038186803b158015617f6b57600080fd5b505afa158015617f7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190617fa391906191ab565b617faf57506000610c08565b816001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b158015617fe857600080fd5b505afa158015617ffc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190618020919061894e565b6001600160a01b03166370a08231836040518263ffffffff1660e01b815260040161804b9190619a50565b60206040518083038186803b15801561806357600080fd5b505afa158015618077573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061809b91906191ab565b6180a757506000610c08565b506001919050565b81602001835110156180ce576180ce617da06005855185602001618162565b910160200152565b600081602001835110156180f7576180f7617da06005855185602001618162565b50016020015190565b606063e946c1bb60e01b84848460405160240161811f93929190619f17565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915290509392505050565b805160208201fd5b6060632800659560e01b84848460405160240161811f93929190619f38565b60408051608081018252600080825260208201819052918101829052606081019190915290565b6040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b60408051808201909152606081526000602082015290565b604051806040016040528060008152602001606081525090565b6040805160608101909152600080825260208201908152600060209091015290565b6040518060a0016040528060008019168152602001600081526020016000815260200160008152602001606081525090565b604080516060810182526000808252602082018190529181019190915290565b60405180606001604052806003906020820280368337509192915050565b6040518060a001604052806000815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b03168152602001606081525090565b8035615dce8161a396565b600082601f830112618300578081fd5b813561831361830e8261a317565b61a2f1565b81815291506020808301908481018184028601820187101561833457600080fd5b60005b8481101561835c57813561834a8161a396565b84529282019290820190600101618337565b505050505092915050565b600082601f830112618377578081fd5b813561838561830e8261a317565b818152915060208083019084810160005b8481101561835c576183ad888484358a01016182f0565b84529282019290820190600101618396565b600082601f8301126183cf578081fd5b81356183dd61830e8261a317565b818152915060208083019084810160005b8481101561835c57618405888484358a01016185ae565b845292820192908201906001016183ee565b600082601f830112618427578081fd5b813561843561830e8261a317565b81815291506020808301908481018184028601820187101561845657600080fd5b60005b8481101561835c57813561846c8161a396565b84529282019290820190600101618459565b600082601f83011261848e578081fd5b813561849c61830e8261a317565b81815291506020808301908481016080808502870183018810156184bf57600080fd5b60005b858110156184e6576184d489846188ad565b855293830193918101916001016184c2565b50505050505092915050565b600082601f830112618502578081fd5b813561851061830e8261a317565b81815291506020808301908481018184028601820187101561853157600080fd5b60005b8481101561835c57813584529282019290820190600101618534565b600082601f830112618560578081fd5b815161856e61830e8261a317565b81815291506020808301908481018184028601820187101561858f57600080fd5b60005b8481101561835c57815184529282019290820190600101618592565b600082601f8301126185be578081fd5b81356185cc61830e8261a336565b91508082528360208285010111156185e357600080fd5b8060208401602084013760009082016020015292915050565b600082601f83011261860c578081fd5b815161861a61830e8261a336565b915080825283602082850101111561863157600080fd5b612c9f81602084016020860161a359565b805160028110615dce57600080fd5b600060608284031215618662578081fd5b61866c606061a2f1565b905081356186798161a396565b815260208201356186898161a3b9565b6020820152604082013561869c8161a3b9565b604082015292915050565b6000606082840312156186b8578081fd5b6186c2606061a2f1565b905081516186cf8161a396565b815260208201516186df8161a3b9565b6020820152604082015161869c8161a3b9565b600060408284031215618703578081fd5b61870d604061a2f1565b9050813561871a8161a396565b8152602082013561872a8161a396565b602082015292915050565b600060a08284031215618746578081fd5b61875060a061a2f1565b90508135815260208201356187648161a396565b602082015260408201356187778161a396565b6040820152606082013561878a8161a396565b606082015260808201356001600160401b038111156187a857600080fd5b6187b4848285016185ae565b60808301525092915050565b60006101808083850312156187d3578182fd5b6187dc8161a2f1565b9150506187e983836182e5565b81526187f883602084016182e5565b602082015261880a8360408401618910565b604082015261881c8360608401618910565b606082015261882e8360808401618910565b60808201526188408360a084016182e5565b60a08201526188528360c084016182e5565b60c08201526188648360e084016182e5565b60e0820152610100618878848285016182e5565b9082015261012082810135908201526101406188968482850161891b565b818301525061016080830135818301525092915050565b6000608082840312156188be578081fd5b6188c8608061a2f1565b90508135600481106188d957600080fd5b8152602082013560ff811681146188ef57600080fd5b80602083015250604082013560408201526060820135606082015292915050565b8035615dce8161a3de565b80356001600160401b0381168114615dce57600080fd5b600060208284031215618943578081fd5b8135613de78161a396565b60006020828403121561895f578081fd5b8151613de78161a396565b6000806040838503121561897c578081fd5b82516189878161a396565b60208401519092506189988161a396565b809150509250929050565b600080600080608085870312156189b8578182fd5b84516189c38161a396565b60208601519094506189d48161a396565b60408601519093506189e58161a396565b60608601519092506189f68161a396565b939692955090935050565b600080600060608486031215618a15578081fd5b8351618a208161a396565b6020850151909350618a318161a396565b60408501519092508015158114618a46578182fd5b809150509250925092565b60008060408385031215618a63578182fd5b8251618a6e8161a396565b60208401519092506001600160401b0380821115618a8a578283fd5b9084019060a08287031215618a9d578283fd5b618aa760a061a2f1565b825181526020830151618ab98161a396565b60208201526040830151618acc8161a396565b60408201526060830151618adf8161a396565b6060820152608083015182811115618af5578485fd5b618b01888286016185fc565b6080830152508093505050509250929050565b600080600080600060a08688031215618b2b578283fd5b8535618b368161a396565b94506020860135618b468161a396565b93506040860135618b568161a396565b92506060860135618b668161a396565b915060808601356001600160401b03811115618b80578182fd5b618b8c888289016184f2565b9150509295509295909350565b60008060008060808587031215618bae578182fd5b8435618bb98161a396565b93506020850135618bc98161a396565b92506040850135618bd98161a396565b915060608501356001600160401b03811115618bf3578182fd5b618bff878288016184f2565b91505092959194509250565b60008060008060808587031215618c20578182fd5b8435618c2b8161a396565b93506020850135618c3b8161a396565b92506040850135618c4b8161a396565b9396929550929360600135925050565b600080600060608486031215618c6f578081fd5b8335618c7a8161a396565b925060208401356001600160401b0380821115618c95578283fd5b618ca1878388016182f0565b93506040860135915080821115618cb6578283fd5b50618cc3868287016184f2565b9150509250925092565b600080600080600060a08688031215618ce4578283fd5b8535618cef8161a396565b9450602086013593506040860135618b568161a396565b60006020808385031215618d18578182fd5b82516001600160401b03811115618d2d578283fd5b8301601f81018513618d3d578283fd5b8051618d4b61830e8261a317565b8181528381019083850185840285018601891015618d67578687fd5b8694505b83851015618d92578051618d7e8161a396565b835260019490940193918501918501618d6b565b50979650505050505050565b600080600060608486031215618db2578081fd5b83516001600160401b0380821115618dc8578283fd5b818601915086601f830112618ddb578283fd5b8151618de961830e8261a317565b80828252602080830192508086018b828387028901011115618e09578788fd5b8796505b84871015618e2b578051845260019690960195928101928101618e0d565b508901519097509350505080821115618e42578283fd5b50618e4f86828701618550565b925050618e5f8560408601618642565b90509250925092565b60008060208385031215618e7a578182fd5b82356001600160401b0380821115618e90578384fd5b818501915085601f830112618ea3578384fd5b813581811115618eb1578485fd5b8660208083028501011115618ec4578485fd5b60209290920196919550909350505050565b600080600060608486031215618eea578081fd5b83356001600160401b0380821115618f00578283fd5b618f0c878388016183bf565b94506020860135915080821115618f21578283fd5b50618f2e868287016183bf565b925050604084013590509250925092565b600060208284031215618f50578081fd5b81356001600160401b03811115618f65578182fd5b61125784828501618417565b60008060408385031215618f83578182fd5b82356001600160401b03811115618f98578283fd5b618fa485828601618417565b92505060208301356189988161a396565b600080600060608486031215618fc9578081fd5b83356001600160401b03811115618fde578182fd5b618fea86828701618417565b9350506020840135618ffb8161a396565b91506040840135618a468161a396565b6000602080838503121561901d578182fd5b82516001600160401b03811115619032578283fd5b8301601f81018513619042578283fd5b805161905061830e8261a317565b818152838101908385018584028501860189101561906c578687fd5b8694505b83851015618d92578051835260019490940193918501918501619070565b6000806000606084860312156190a2578081fd5b83356001600160401b03808211156190b8578283fd5b818601915086601f8301126190cb578283fd5b81356190d961830e8261a317565b80828252602080830192508086016101808c838288028a010111156190fc578889fd5b8897505b85881015619128576191128d836187c0565b8552600197909701969382019390810190619100565b50919850890135945050505080821115619140578283fd5b5061914d8682870161847e565b925050618e5f85604086016182e5565b60006020828403121561916e578081fd5b81516001600160401b03811115619183578182fd5b61125784828501618550565b6000602082840312156191a0578081fd5b8151613de78161a3ab565b6000602082840312156191bc578081fd5b5051919050565b6000602082840312156191d4578081fd5b81516001600160401b038111156191e9578182fd5b611257848285016185fc565b600080600060608486031215619209578081fd5b83356192148161a396565b925060208401356001600160401b038082111561922f578283fd5b618ca187838801618417565b60006020828403121561924c578081fd5b8151613de78161a3cf565b60008060808385031215619269578182fd5b82516192748161a3cf565b915061928384602085016186a7565b90509250929050565b60008060008084860360a08112156192a2578283fd5b60408112156192af578283fd5b506192ba604061a2f1565b8535815260208601356192cc8161a396565b6020820152935060408501356192e18161a396565b925060608501356192f18161a396565b915060808501356001600160401b03811115618bf3578182fd5b60008060008060808587031215619320578182fd5b84356001600160401b0380821115619336578384fd5b9086019060408289031215619349578384fd5b619353604061a2f1565b61935d89846182e5565b8152602083013582811115619370578586fd5b61937c8a828601618367565b6020830152508096505061939388602089016182e5565b94506193a288604089016182e5565b935060608701359150808211156193b7578283fd5b50618bff878288016184f2565b60008060008060c085870312156193d9578182fd5b6193e38686618651565b935060608501356193f38161a3cf565b925060808501356194038161a3cf565b915060a08501356001600160401b03811115618bf3578182fd5b60008060008060a08587031215619432578182fd5b61943c86866186f2565b935060408501356192e18161a396565b60008060008060808587031215619461578182fd5b84356001600160401b0380821115619477578384fd5b61948388838901618735565b9550602087013591506194958261a396565b9093506040860135906194a78261a396565b909250606086013590808211156193b7578283fd5b600080600080608085870312156194d1578182fd5b84356001600160401b038111156194e6578283fd5b6194f287828801618735565b9450506020850135618c3b8161a396565b60008060008060808587031215619518578182fd5b84356001600160401b0381111561952d578283fd5b61953987828801618735565b9450506020850135925060408501356195518161a396565b915060608501356189f68161a396565b60008060006102208486031215619576578081fd5b61958085856187c0565b92506195908561018086016188ad565b9150610200840135618a468161a396565b60008060008084860360c08112156195b7578283fd5b60608112156195c4578283fd5b506195cf606061a2f1565b85356195da8161a396565b81526020868101359082015260408601356195f48161a396565b6040820152935060608501356196098161a396565b925060808501356194038161a396565b600080600083850360a081121561962e578182fd5b606081121561963b578182fd5b50619646606061a2f1565b8451815260208501516005811061965b578283fd5b6020820152604085015161966e8161a3de565b604082015260608501519093506196848161a3de565b6080850151909250618a468161a3ab565b6000602082840312156196a6578081fd5b815162ffffff81168114613de7578182fd5b600080604083850312156196ca578182fd5b505080516020909101519092909150565b600080600080608085870312156196f0578182fd5b505082516020840151604085015160609095015191969095509092509050565b600080600080600060a08688031215619727578283fd5b5050835160208501516040860151606087015160809097015192989197509594509092509050565b6001600160a01b03169052565b6000815180845260208085019450808401835b838110156197945781516001600160a01b03168752958201959082019060010161976f565b509495945050505050565b6000815180845260208085019450808401835b83811015619794578151875295820195908201906001016197b2565b600081518084526197e681602086016020860161a359565b601f01601f19169290920160200192915050565b600081518352602082015160208401526040820151604084015260608201516060840152608082015160a0608085015261125760a08501826197ce565b80516001600160a01b031682526020808201516001600160e01b03199081169184019190915260409182015116910152565b80516001600160a01b039081168352602080830151151590840152604080830151909116908301526060908101511515910152565b60008151835260208201516040602085015261125760408501826197ce565b600081518352602082015160018060a01b0380821660208601528060408501511660408601528060608501511660608601525050608082015160a0608085015261125760a08501826197ce565b61991582825161974f565b6020810151619927602084018261974f565b50604081015161993a6040840182619a0a565b50606081015161994d6060840182619a0a565b5060808101516199606080840182619a0a565b5060a081015161997360a084018261974f565b5060c081015161998660c084018261974f565b5060e081015161999960e084018261974f565b50610100808201516199ad8285018261974f565b50506101208181015190830152610140808201516199cd82850182619a17565b505061016090810151910152565b80516199e68161a389565b825260208181015160ff169083015260408082015190830152606090810151910152565b6001600160801b03169052565b6001600160401b03169052565b6000828483379101908152919050565b60008251619a4681846020870161a359565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b03948516815292841660208401529083166040830152909116606082015260800190565b6001600160a01b0385811682528481166020830152831660408201526080606082018190526000906165169083018461979f565b6001600160a01b039485168152928416602084015292166040820152606081019190915260800190565b6001600160a01b039384168152919092166020820152901515604082015260600190565b6001600160a01b038581168252841660208201528215156040820152608060608201819052600090616516908301846197ce565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090619bd6908301846197ce565b979650505050505050565b6001600160a01b0384168152606060208201819052600090619c059083018561975c565b8281036040840152616516818561979f565b6001600160a01b03851681526000619c2e8561a389565b84602083015260806040830152619c48608083018561979f565b8281036060840152619bd6818561979f565b6001600160a01b03898116825260009061010090619c778b61a389565b8a6020850152816040850152619c8f8285018b61979f565b91508382036060850152619ca3828a61979f565b90881660808501529050619cb68661a389565b8560a084015282810360c0840152619cce818661979f565b905082810360e0840152619ce2818561979f565b9b9a5050505050505050505050565b6001600160a01b0383168152604060208201819052600090611257908301846198bd565b600060408252619d28604083018561975c565b82810360208401526112c5818561979f565b600060408252619d4d604083018561975c565b90508260208301529392505050565b60006040820160408352808551808352606085019150602092506060838202860101838801855b83811015619db157605f19888403018552619d9f8383516197ce565b94860194925090850190600101619d83565b505085810384870152617d63818861979f565b60208082528251828201819052600091906040908185019080840286018301878501865b83811015619e2b57888303603f1901855281518051878552619e0c888601826197ce565b9189015115159489019490945294870194925090860190600101619de8565b509098975050505050505050565b600060208252613de7602083018461979f565b901515815260200190565b83151581526001600160a01b03831660208201526060604082018190526000906112c59083018461979f565b90815260200190565b600084825260606020830152619c0560608301856197ce565b600060208252613de760208301846197ce565b600060408252619d4d60408301856197ce565b6001600160a01b03938416815291909216602082015262ffffff909116604082015260600190565b6001600160a01b03831681526040602082018190526000906112579083018461979f565b60608101619f248561a389565b938152602081019290925260409091015290565b6060810160088510619f2457fe5b600060e0820160028710619f5657fe5b868352602060e08185015281875180845261010093508386019150838382028701019350828901855b82811015619fad5760ff19888703018452619f9b8683516197fa565b95509284019290840190600101619f7f565b50505050508281036040840152619fc4818661975c565b9150506112c56060830184619869565b600f93840b81529190920b6020820152604081019190915260600190565b600f83900b815260808101613de76020830184619837565b60208082526024908201527f556e6973776170563353616d706c65722f746f6b656e5061746820746f6f20736040820152631a1bdc9d60e21b606082015260800190565b60208082526025908201527f455243323042726964676553616d706c65722f494e56414c49445f544f4b454e6040820152642fa820a4a960d91b606082015260800190565b60208082526025908201527f556e6973776170563353616d706c65722f696e76616c69642070617468206c656040820152646e6774687360d81b606082015260800190565b6020808252601e908201527f4b79626572444d4d53616d706c65722f4e4f5f504f4f4c535f464f554e440000604082015260600190565b600061a11b8287619837565b84600f0b606083015283600f0b608083015260c060a083015261651660c083018461979f565b60006060825261a154606083018661989e565b828103602084015261a166818661989e565b915050826040830152949350505050565b60006080825261a18a60808301876198bd565b6001600160a01b0395861660208401529390941660408201526060015292915050565b60006080825261a1c060808301876198bd565b6020830195909552506001600160a01b0392831660408201529116606090910152919050565b610200810161a1f5828561990a565b613de76101808301846199db565b610220810161a212828661990a565b61a2206101808301856199db565b6001600160a01b0392909216610200919091015292915050565b600083825260406020830152611257604083018461975c565b60008482526060602083015261a26c606083018561975c565b8281036040840152616516818561975c565b958652602086019490945260408501929092526060840152608083015260a082015260c00190565b6000808335601e1984360301811261a2bc578283fd5b8301803591506001600160401b0382111561a2d5578283fd5b60200191503681900382131561a2ea57600080fd5b9250929050565b6040518181016001600160401b038111828210171561a30f57600080fd5b604052919050565b60006001600160401b0382111561a32c578081fd5b5060209081020190565b60006001600160401b0382111561a34b578081fd5b50601f01601f191660200190565b60005b8381101561a37457818101518382015260200161a35c565b8381111561a383576000848401525b50505050565b6004811061a39357fe5b50565b6001600160a01b038116811461a39357600080fd5b801515811461a39357600080fd5b6001600160e01b03198116811461a39357600080fd5b80600f0b811461a39357600080fd5b6001600160801b038116811461a39357600080fdfea2646970667358221220c4fc9a879c039c9205df02dd09113879a2d3dd5dca3545889b674c43319a45e964736f6c634300060c0033",
                "opcodes": "PUSH1 0xA0 PUSH1 0x40 MSTORE PUSH32 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE000000000000000000000000 PUSH1 0x80 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x35 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x80 MLOAD PUSH1 0x60 SHR PUSH2 0xA429 PUSH3 0x5E PUSH1 0x0 CODECOPY DUP1 PUSH2 0x2CF9 MSTORE DUP1 PUSH2 0x491F MSTORE DUP1 PUSH2 0x5470 MSTORE POP PUSH2 0xA429 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x30C JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8E5A0E07 GT PUSH2 0x19D JUMPI DUP1 PUSH4 0xC25C4138 GT PUSH2 0xE9 JUMPI DUP1 PUSH4 0xDDD5AA28 GT PUSH2 0xA2 JUMPI DUP1 PUSH4 0xF1ED7FA4 GT PUSH2 0x7C JUMPI DUP1 PUSH4 0xF1ED7FA4 EQ PUSH2 0x751 JUMPI DUP1 PUSH4 0xF3868E9C EQ PUSH2 0x444 JUMPI DUP1 PUSH4 0xF5A4994D EQ PUSH2 0x764 JUMPI DUP1 PUSH4 0xFC9FE41B EQ PUSH2 0x777 JUMPI PUSH2 0x30C JUMP JUMPDEST DUP1 PUSH4 0xDDD5AA28 EQ PUSH2 0x718 JUMPI DUP1 PUSH4 0xE78AC045 EQ PUSH2 0x72B JUMPI DUP1 PUSH4 0xE8E4AF09 EQ PUSH2 0x73E JUMPI PUSH2 0x30C JUMP JUMPDEST DUP1 PUSH4 0xC25C4138 EQ PUSH2 0x6A6 JUMPI DUP1 PUSH4 0xC8319084 EQ PUSH2 0x6B9 JUMPI DUP1 PUSH4 0xC8C74A37 EQ PUSH2 0x6CC JUMPI DUP1 PUSH4 0xC94706D8 EQ PUSH2 0x6DF JUMPI DUP1 PUSH4 0xCC1621C9 EQ PUSH2 0x6F2 JUMPI DUP1 PUSH4 0xD9BCA372 EQ PUSH2 0x705 JUMPI PUSH2 0x30C JUMP JUMPDEST DUP1 PUSH4 0xA0295B8B GT PUSH2 0x156 JUMPI DUP1 PUSH4 0xAB000276 GT PUSH2 0x130 JUMPI DUP1 PUSH4 0xAB000276 EQ PUSH2 0x64C JUMPI DUP1 PUSH4 0xADC636BF EQ PUSH2 0x65F JUMPI DUP1 PUSH4 0xB90CD2FB EQ PUSH2 0x680 JUMPI DUP1 PUSH4 0xBD71ECF6 EQ PUSH2 0x693 JUMPI PUSH2 0x30C JUMP JUMPDEST DUP1 PUSH4 0xA0295B8B EQ PUSH2 0x613 JUMPI DUP1 PUSH4 0xA4698417 EQ PUSH2 0x626 JUMPI DUP1 PUSH4 0xA75E744B EQ PUSH2 0x639 JUMPI PUSH2 0x30C JUMP JUMPDEST DUP1 PUSH4 0x8E5A0E07 EQ PUSH2 0x576 JUMPI DUP1 PUSH4 0x9209483B EQ PUSH2 0x598 JUMPI DUP1 PUSH4 0x98777748 EQ PUSH2 0x5AB JUMPI DUP1 PUSH4 0x9BF3EE35 EQ PUSH2 0x5BE JUMPI DUP1 PUSH4 0x9E3F05C3 EQ PUSH2 0x5DE JUMPI DUP1 PUSH4 0x9EA0FF13 EQ PUSH2 0x600 JUMPI PUSH2 0x30C JUMP JUMPDEST DUP1 PUSH4 0x40BC03AE GT PUSH2 0x25C JUMPI DUP1 PUSH4 0x5D5B674F GT PUSH2 0x215 JUMPI DUP1 PUSH4 0x706E2F9B GT PUSH2 0x1EF JUMPI DUP1 PUSH4 0x706E2F9B EQ PUSH2 0x52A JUMPI DUP1 PUSH4 0x74C9D255 EQ PUSH2 0x53D JUMPI DUP1 PUSH4 0x7F7F4F13 EQ PUSH2 0x550 JUMPI DUP1 PUSH4 0x8B6D7B44 EQ PUSH2 0x563 JUMPI PUSH2 0x30C JUMP JUMPDEST DUP1 PUSH4 0x5D5B674F EQ PUSH2 0x4E4 JUMPI DUP1 PUSH4 0x66A1AC6B EQ PUSH2 0x4F7 JUMPI DUP1 PUSH4 0x68BE3CF2 EQ PUSH2 0x50A JUMPI PUSH2 0x30C JUMP JUMPDEST DUP1 PUSH4 0x40BC03AE EQ PUSH2 0x457 JUMPI DUP1 PUSH4 0x494569DB EQ PUSH2 0x46A JUMPI DUP1 PUSH4 0x4EDFB5B2 EQ PUSH2 0x47D JUMPI DUP1 PUSH4 0x5505000A EQ PUSH2 0x49D JUMPI DUP1 PUSH4 0x57494B1D EQ PUSH2 0x4BE JUMPI DUP1 PUSH4 0x5AAE4E53 EQ PUSH2 0x4D1 JUMPI PUSH2 0x30C JUMP JUMPDEST DUP1 PUSH4 0x281E3432 GT PUSH2 0x2C9 JUMPI DUP1 PUSH4 0x2D753AA4 GT PUSH2 0x2A3 JUMPI DUP1 PUSH4 0x2D753AA4 EQ PUSH2 0x40B JUMPI DUP1 PUSH4 0x30D6570D EQ PUSH2 0x41E JUMPI DUP1 PUSH4 0x3105FEC1 EQ PUSH2 0x431 JUMPI DUP1 PUSH4 0x36052391 EQ PUSH2 0x444 JUMPI PUSH2 0x30C JUMP JUMPDEST DUP1 PUSH4 0x281E3432 EQ PUSH2 0x3C3 JUMPI DUP1 PUSH4 0x29FA4AA0 EQ PUSH2 0x3D6 JUMPI DUP1 PUSH4 0x2AA64319 EQ PUSH2 0x3E9 JUMPI PUSH2 0x30C JUMP JUMPDEST DUP1 PUSH4 0x496D5DC EQ PUSH2 0x311 JUMPI DUP1 PUSH4 0x1022742B EQ PUSH2 0x33B JUMPI DUP1 PUSH4 0x149DAB0E EQ PUSH2 0x35B JUMPI DUP1 PUSH4 0x16279055 EQ PUSH2 0x37D JUMPI DUP1 PUSH4 0x2339078F EQ PUSH2 0x39D JUMPI DUP1 PUSH4 0x252322B3 EQ PUSH2 0x3B0 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x324 PUSH2 0x31F CALLDATASIZE PUSH1 0x4 PUSH2 0x8C5B JUMP JUMPDEST PUSH2 0x78A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x332 SWAP3 SWAP2 SWAP1 PUSH2 0x9D15 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x34E PUSH2 0x349 CALLDATASIZE PUSH1 0x4 PUSH2 0x908E JUMP JUMPDEST PUSH2 0x930 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x332 SWAP2 SWAP1 PUSH2 0x9E39 JUMP JUMPDEST PUSH2 0x36E PUSH2 0x369 CALLDATASIZE PUSH1 0x4 PUSH2 0x930B JUMP JUMPDEST PUSH2 0xAA3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x332 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9BE1 JUMP JUMPDEST PUSH2 0x390 PUSH2 0x38B CALLDATASIZE PUSH1 0x4 PUSH2 0x8932 JUMP JUMPDEST PUSH2 0xC03 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x332 SWAP2 SWAP1 PUSH2 0x9E4C JUMP JUMPDEST PUSH2 0x34E PUSH2 0x3AB CALLDATASIZE PUSH1 0x4 PUSH2 0x928C JUMP JUMPDEST PUSH2 0xC0D JUMP JUMPDEST PUSH2 0x34E PUSH2 0x3BE CALLDATASIZE PUSH1 0x4 PUSH2 0x8B99 JUMP JUMPDEST PUSH2 0xE34 JUMP JUMPDEST PUSH2 0x34E PUSH2 0x3D1 CALLDATASIZE PUSH1 0x4 PUSH2 0x95A1 JUMP JUMPDEST PUSH2 0x100A JUMP JUMPDEST PUSH2 0x34E PUSH2 0x3E4 CALLDATASIZE PUSH1 0x4 PUSH2 0x93C4 JUMP JUMPDEST PUSH2 0x125F JUMP JUMPDEST PUSH2 0x3FC PUSH2 0x3F7 CALLDATASIZE PUSH1 0x4 PUSH2 0x941D JUMP JUMPDEST PUSH2 0x12CE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x332 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9E57 JUMP JUMPDEST PUSH2 0x34E PUSH2 0x419 CALLDATASIZE PUSH1 0x4 PUSH2 0x8B14 JUMP JUMPDEST PUSH2 0x15AB JUMP JUMPDEST PUSH2 0x34E PUSH2 0x42C CALLDATASIZE PUSH1 0x4 PUSH2 0x8B99 JUMP JUMPDEST PUSH2 0x1734 JUMP JUMPDEST PUSH2 0x34E PUSH2 0x43F CALLDATASIZE PUSH1 0x4 PUSH2 0x8C5B JUMP JUMPDEST PUSH2 0x18A8 JUMP JUMPDEST PUSH2 0x34E PUSH2 0x452 CALLDATASIZE PUSH1 0x4 PUSH2 0x941D JUMP JUMPDEST PUSH2 0x1A2C JUMP JUMPDEST PUSH2 0x34E PUSH2 0x465 CALLDATASIZE PUSH1 0x4 PUSH2 0x93C4 JUMP JUMPDEST PUSH2 0x1ABE JUMP JUMPDEST PUSH2 0x324 PUSH2 0x478 CALLDATASIZE PUSH1 0x4 PUSH2 0x8C5B JUMP JUMPDEST PUSH2 0x1C3F JUMP JUMPDEST PUSH2 0x490 PUSH2 0x48B CALLDATASIZE PUSH1 0x4 PUSH2 0x9503 JUMP JUMPDEST PUSH2 0x1DCB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x332 SWAP2 SWAP1 PUSH2 0x9EA5 JUMP JUMPDEST PUSH2 0x4B0 PUSH2 0x4AB CALLDATASIZE PUSH1 0x4 PUSH2 0x91F5 JUMP JUMPDEST PUSH2 0x2048 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x332 SWAP3 SWAP2 SWAP1 PUSH2 0x9D5C JUMP JUMPDEST PUSH2 0x34E PUSH2 0x4CC CALLDATASIZE PUSH1 0x4 PUSH2 0x8B99 JUMP JUMPDEST PUSH2 0x2293 JUMP JUMPDEST PUSH2 0x4B0 PUSH2 0x4DF CALLDATASIZE PUSH1 0x4 PUSH2 0x91F5 JUMP JUMPDEST PUSH2 0x27E5 JUMP JUMPDEST PUSH2 0x34E PUSH2 0x4F2 CALLDATASIZE PUSH1 0x4 PUSH2 0x8B99 JUMP JUMPDEST PUSH2 0x2A2A JUMP JUMPDEST PUSH2 0x34E PUSH2 0x505 CALLDATASIZE PUSH1 0x4 PUSH2 0x908E JUMP JUMPDEST PUSH2 0x2A90 JUMP JUMPDEST PUSH2 0x51D PUSH2 0x518 CALLDATASIZE PUSH1 0x4 PUSH2 0x8E68 JUMP JUMPDEST PUSH2 0x2B45 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x332 SWAP2 SWAP1 PUSH2 0x9DC4 JUMP JUMPDEST PUSH2 0x34E PUSH2 0x538 CALLDATASIZE PUSH1 0x4 PUSH2 0x8F3F JUMP JUMPDEST PUSH2 0x2CA6 JUMP JUMPDEST PUSH2 0x36E PUSH2 0x54B CALLDATASIZE PUSH1 0x4 PUSH2 0x930B JUMP JUMPDEST PUSH2 0x2D98 JUMP JUMPDEST PUSH2 0x34E PUSH2 0x55E CALLDATASIZE PUSH1 0x4 PUSH2 0x95A1 JUMP JUMPDEST PUSH2 0x2DA7 JUMP JUMPDEST PUSH2 0x34E PUSH2 0x571 CALLDATASIZE PUSH1 0x4 PUSH2 0x93C4 JUMP JUMPDEST PUSH2 0x2FF4 JUMP JUMPDEST PUSH2 0x589 PUSH2 0x584 CALLDATASIZE PUSH1 0x4 PUSH2 0x8ED6 JUMP JUMPDEST PUSH2 0x3357 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x332 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA141 JUMP JUMPDEST PUSH2 0x34E PUSH2 0x5A6 CALLDATASIZE PUSH1 0x4 PUSH2 0x93C4 JUMP JUMPDEST PUSH2 0x3570 JUMP JUMPDEST PUSH2 0x34E PUSH2 0x5B9 CALLDATASIZE PUSH1 0x4 PUSH2 0x8B99 JUMP JUMPDEST PUSH2 0x3770 JUMP JUMPDEST PUSH2 0x5D1 PUSH2 0x5CC CALLDATASIZE PUSH1 0x4 PUSH2 0x9561 JUMP JUMPDEST PUSH2 0x3CA7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x332 SWAP2 SWAP1 PUSH2 0x9E83 JUMP JUMPDEST PUSH2 0x5F1 PUSH2 0x5EC CALLDATASIZE PUSH1 0x4 PUSH2 0x944C JUMP JUMPDEST PUSH2 0x3DEE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x332 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9E8C JUMP JUMPDEST PUSH2 0x5D1 PUSH2 0x60E CALLDATASIZE PUSH1 0x4 PUSH2 0x8C0B JUMP JUMPDEST PUSH2 0x3F14 JUMP JUMPDEST PUSH2 0x34E PUSH2 0x621 CALLDATASIZE PUSH1 0x4 PUSH2 0x928C JUMP JUMPDEST PUSH2 0x412A JUMP JUMPDEST PUSH2 0x34E PUSH2 0x634 CALLDATASIZE PUSH1 0x4 PUSH2 0x8B99 JUMP JUMPDEST PUSH2 0x4326 JUMP JUMPDEST PUSH2 0x3FC PUSH2 0x647 CALLDATASIZE PUSH1 0x4 PUSH2 0x8CCD JUMP JUMPDEST PUSH2 0x447B JUMP JUMPDEST PUSH2 0x34E PUSH2 0x65A CALLDATASIZE PUSH1 0x4 PUSH2 0x8B99 JUMP JUMPDEST PUSH2 0x45B8 JUMP JUMPDEST PUSH2 0x672 PUSH2 0x66D CALLDATASIZE PUSH1 0x4 PUSH2 0x8B99 JUMP JUMPDEST PUSH2 0x4716 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x332 SWAP3 SWAP2 SWAP1 PUSH2 0x9EF3 JUMP JUMPDEST PUSH2 0x34E PUSH2 0x68E CALLDATASIZE PUSH1 0x4 PUSH2 0x8B99 JUMP JUMPDEST PUSH2 0x4866 JUMP JUMPDEST PUSH2 0x34E PUSH2 0x6A1 CALLDATASIZE PUSH1 0x4 PUSH2 0x8F71 JUMP JUMPDEST PUSH2 0x48CC JUMP JUMPDEST PUSH2 0x34E PUSH2 0x6B4 CALLDATASIZE PUSH1 0x4 PUSH2 0x8B99 JUMP JUMPDEST PUSH2 0x49C8 JUMP JUMPDEST PUSH2 0x34E PUSH2 0x6C7 CALLDATASIZE PUSH1 0x4 PUSH2 0x8B99 JUMP JUMPDEST PUSH2 0x4A2E JUMP JUMPDEST PUSH2 0x34E PUSH2 0x6DA CALLDATASIZE PUSH1 0x4 PUSH2 0x8C5B JUMP JUMPDEST PUSH2 0x4BEB JUMP JUMPDEST PUSH2 0x34E PUSH2 0x6ED CALLDATASIZE PUSH1 0x4 PUSH2 0x8B99 JUMP JUMPDEST PUSH2 0x4D57 JUMP JUMPDEST PUSH2 0x5F1 PUSH2 0x700 CALLDATASIZE PUSH1 0x4 PUSH2 0x944C JUMP JUMPDEST PUSH2 0x4EB5 JUMP JUMPDEST PUSH2 0x3FC PUSH2 0x713 CALLDATASIZE PUSH1 0x4 PUSH2 0x8CCD JUMP JUMPDEST PUSH2 0x509B JUMP JUMPDEST PUSH2 0x3FC PUSH2 0x726 CALLDATASIZE PUSH1 0x4 PUSH2 0x941D JUMP JUMPDEST PUSH2 0x518A JUMP JUMPDEST PUSH2 0x34E PUSH2 0x739 CALLDATASIZE PUSH1 0x4 PUSH2 0x8FB5 JUMP JUMPDEST PUSH2 0x541D JUMP JUMPDEST PUSH2 0x34E PUSH2 0x74C CALLDATASIZE PUSH1 0x4 PUSH2 0x8B99 JUMP JUMPDEST PUSH2 0x5512 JUMP JUMPDEST PUSH2 0x5D1 PUSH2 0x75F CALLDATASIZE PUSH1 0x4 PUSH2 0x94BC JUMP JUMPDEST PUSH2 0x5645 JUMP JUMPDEST PUSH2 0x672 PUSH2 0x772 CALLDATASIZE PUSH1 0x4 PUSH2 0x8B99 JUMP JUMPDEST PUSH2 0x57E4 JUMP JUMPDEST PUSH2 0x589 PUSH2 0x785 CALLDATASIZE PUSH1 0x4 PUSH2 0x8ED6 JUMP JUMPDEST PUSH2 0x58D0 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP2 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x7A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x7D1 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH2 0x7DE DUP7 DUP7 PUSH2 0x5AE5 JUMP JUMPDEST SWAP3 POP DUP3 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x7F0 JUMPI POP PUSH2 0x928 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x925 JUMPI DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xA8312B1D PUSH3 0x249F0 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x81A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP11 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x842 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA253 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x85A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x890 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x88D SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x915D JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x8CA JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x8BE JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x8C3 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP PUSH2 0x925 JUMP JUMPDEST DUP1 PUSH1 0x1 DUP9 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x8DA JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x8EE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x906 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x91C JUMPI POP PUSH2 0x925 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x7F3 JUMP JUMPDEST POP POP JUMPDEST SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x949 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x973 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 EQ PUSH2 0xA9B JUMPI ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x9BF3EE35 PUSH3 0x30D40 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x9A0 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x9B4 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9DB SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA203 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x9F3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0xA24 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0xA21 SWAP2 DUP2 ADD SWAP1 PUSH2 0x91AB JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0xA78 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0xA52 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xA57 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xA66 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP PUSH2 0xA93 JUMP JUMPDEST DUP1 DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xA85 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP JUMPDEST PUSH1 0x1 ADD PUSH2 0x979 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP1 DUP7 PUSH1 0x20 ADD MLOAD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0xABB JUMPI PUSH2 0xBF9 JUMP JUMPDEST PUSH2 0xAC7 DUP8 DUP8 DUP8 DUP8 PUSH2 0x5DD4 JUMP JUMPDEST DUP6 MLOAD SWAP2 SWAP5 POP SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0xAE3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xB0D JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0xBF7 JUMPI DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x7F9C0ECD PUSH3 0x493E0 DUP6 DUP9 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0xB3C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xB61 SWAP3 SWAP2 SWAP1 PUSH2 0x9D3A JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xB79 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0xBAA JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0xBA7 SWAP2 DUP2 ADD SWAP1 PUSH2 0x91AB JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0xBB3 JUMPI PUSH2 0xBF7 JUMP JUMPDEST DUP1 DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xBC0 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xBD8 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0xBEE JUMPI POP PUSH2 0xBF7 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0xB13 JUMP JUMPDEST POP JUMPDEST SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST DUP1 EXTCODESIZE ISZERO ISZERO JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0xC19 DUP4 DUP6 PUSH2 0x6006 JUMP JUMPDEST PUSH1 0x20 DUP6 ADD MLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x2 DUP1 DUP3 MSTORE PUSH1 0x60 DUP3 DUP2 ADD SWAP1 SWAP4 MSTORE DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP6 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xC4F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP DUP5 DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0xC7D JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE DUP4 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0xCAD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xCD7 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP4 POP PUSH2 0xCE2 PUSH2 0x8181 JUMP JUMPDEST PUSH2 0xCEA PUSH2 0x603C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0xE27 JUMPI PUSH1 0x60 PUSH2 0xD16 DUP12 DUP10 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xD09 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x606B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x7C268337 PUSH1 0xE1 SHL DUP2 MSTORE SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND SWAP1 PUSH4 0xF84D066E SWAP1 PUSH2 0xD4C SWAP1 PUSH1 0x0 SWAP1 DUP6 SWAP1 DUP11 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x9F46 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xD66 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0xD9B JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0xD98 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x900B JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0xDD6 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0xDC9 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xDCE JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP POP PUSH2 0xE27 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0xDE5 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 NOT MUL SWAP1 POP PUSH1 0x0 DUP2 SGT PUSH2 0xE03 JUMPI POP POP POP PUSH2 0xE27 JUMP JUMPDEST DUP1 DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0xE10 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP POP POP PUSH1 0x1 ADD PUSH2 0xCEF JUMP JUMPDEST POP POP POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0xE40 DUP4 DUP6 PUSH2 0x6006 JUMP JUMPDEST DUP2 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0xE58 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xE82 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND ISZERO PUSH2 0xEA5 JUMPI PUSH2 0xEA0 DUP8 DUP8 PUSH2 0x60FD JUMP JUMPDEST PUSH2 0xEA8 JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND ISZERO PUSH2 0xECA JUMPI PUSH2 0xEC5 DUP9 DUP8 PUSH2 0x60FD JUMP JUMPDEST PUSH2 0xECD JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xFFE JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH2 0xF30 JUMPI PUSH2 0xF0F DUP5 PUSH4 0x2640F62C PUSH1 0xE0 SHL DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0xF02 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x617C JUMP JUMPDEST DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xF1B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP4 POP DUP3 DUP2 MSTORE POP POP POP PUSH2 0xFCA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND PUSH2 0xF56 JUMPI PUSH2 0xF0F DUP4 PUSH4 0x59E94862 PUSH1 0xE0 SHL DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0xF02 JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH2 0xF70 DUP5 PUSH4 0x59E94862 PUSH1 0xE0 SHL DUP11 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0xF02 JUMPI INVALID JUMPDEST SWAP3 POP SWAP1 POP DUP1 ISZERO PUSH2 0xFAD JUMPI PUSH2 0xF8C DUP6 PUSH4 0x9903D8B PUSH1 0xE2 SHL DUP4 PUSH2 0x617C JUMP JUMPDEST DUP9 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0xF98 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP5 POP DUP3 DUP2 MSTORE POP POP POP PUSH2 0xFC8 JUMP JUMPDEST PUSH1 0x0 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xFBB JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP JUMPDEST POP JUMPDEST DUP1 ISZERO DUP1 PUSH2 0xFEA JUMPI POP DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xFDE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ JUMPDEST ISZERO PUSH2 0xFF5 JUMPI POP PUSH2 0xFFE JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0xED2 JUMP JUMPDEST POP POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1016 DUP4 DUP6 PUSH2 0x6006 JUMP JUMPDEST PUSH1 0x0 DUP6 PUSH1 0x0 ADD MLOAD SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x36569E77 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x105A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x106E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1092 SWAP2 SWAP1 PUSH2 0x894E JUMP JUMPDEST DUP5 MLOAD SWAP1 SWAP2 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x10AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x10D7 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP4 POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xF4B9FA75 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1113 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1127 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x114B SWAP2 SWAP1 PUSH2 0x894E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO DUP1 ISZERO PUSH2 0x11EE JUMPI POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xF4B9FA75 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x11A0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x11B4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x11D8 SWAP2 SWAP1 PUSH2 0x894E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x11FB JUMPI POP POP POP PUSH2 0x1257 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xFFE JUMPI PUSH1 0x0 PUSH2 0x1229 DUP11 DUP10 DUP12 DUP11 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x121A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP10 DUP10 PUSH2 0x625F JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x1236 JUMPI POP PUSH2 0xFFE JUMP JUMPDEST DUP1 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1243 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP PUSH1 0x1 ADD PUSH2 0x11FE JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 DUP2 ADD SWAP1 SWAP3 MSTORE PUSH2 0x12C5 SWAP1 DUP1 PUSH2 0x127E DUP7 DUP10 PUSH1 0x80 DUP5 ADD PUSH2 0x9FF2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x12A5 SWAP3 SWAP2 SWAP1 PUSH2 0x9FF2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x6520 DUP2 MSTORE POP DUP4 PUSH2 0x6653 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 PUSH2 0x12DD DUP6 DUP8 PUSH2 0x6006 JUMP JUMPDEST DUP4 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x12F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x131F JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP DUP9 MLOAD PUSH1 0x40 MLOAD PUSH4 0x939D863 PUSH1 0xE1 SHL DUP2 MSTORE SWAP2 SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x1273B0C6 SWAP1 PUSH2 0x1352 SWAP1 DUP11 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x9A7D JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x136A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x137E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x13A2 SWAP2 SWAP1 PUSH2 0x894E JUMP JUMPDEST SWAP3 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND ISZERO PUSH2 0x13C0 JUMPI POP PUSH1 0x1 SWAP4 POP DUP7 PUSH2 0x145F JUMP JUMPDEST DUP9 MLOAD PUSH1 0x40 MLOAD PUSH4 0x939D863 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x1273B0C6 SWAP1 PUSH2 0x13F1 SWAP1 DUP11 SWAP1 DUP13 SWAP1 PUSH1 0x4 ADD PUSH2 0x9A7D JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1409 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x141D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1441 SWAP2 SWAP1 PUSH2 0x894E JUMP JUMPDEST SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x1458 JUMPI POP POP PUSH2 0xBF9 JUMP JUMPDEST POP PUSH1 0x0 SWAP4 POP DUP6 JUMPDEST DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDD58B41C PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1498 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x14AC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x14D0 SWAP2 SWAP1 PUSH2 0x918F JUMP JUMPDEST PUSH2 0x14DB JUMPI POP POP PUSH2 0xBF9 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x159E JUMPI PUSH1 0x0 PUSH2 0x1558 DUP11 DUP8 DUP6 DUP15 PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1506 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9A97 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP11 DUP9 DUP7 DUP16 PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1530 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9A97 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP11 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x154B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x6850 JUMP JUMPDEST SWAP1 POP DUP1 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1567 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x157F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x1595 JUMPI POP PUSH2 0x159E JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x14DE JUMP JUMPDEST POP POP POP SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x15C6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x15F0 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH2 0x1607 JUMPI POP PUSH2 0x12C5 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1729 JUMPI PUSH1 0x0 PUSH1 0x60 DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH3 0x61A80 PUSH4 0x6E79E133 PUSH1 0xE0 SHL DUP12 DUP12 DUP12 DUP12 DUP10 DUP2 MLOAD DUP2 LT PUSH2 0x163B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1656 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9AF6 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x1694 SWAP2 SWAP1 PUSH2 0x9A34 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x16D0 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x16D5 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x16F9 JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x16F6 SWAP2 SWAP1 PUSH2 0x91AB JUMP JUMPDEST SWAP1 POP JUMPDEST DUP1 PUSH2 0x1706 JUMPI POP POP POP PUSH2 0x1729 JUMP JUMPDEST DUP1 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x1713 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x160A JUMP JUMPDEST POP POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1740 DUP4 DUP6 PUSH2 0x6006 JUMP JUMPDEST DUP2 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x1758 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1782 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x189E JUMPI DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x72EA9076 PUSH3 0xC3500 DUP9 DUP9 DUP9 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x17B1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x17D7 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9B78 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x17EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x1820 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x181D SWAP2 DUP2 ADD SWAP1 PUSH2 0x91AB JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x185A JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x184E JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1853 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP PUSH2 0x189E JUMP JUMPDEST DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1867 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x187F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x1895 JUMPI POP PUSH2 0x189E JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x1788 JUMP JUMPDEST POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x18C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x18ED JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1A23 JUMPI DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD06CA61F PUSH3 0x249F0 DUP7 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x191A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1940 SWAP3 SWAP2 SWAP1 PUSH2 0xA23A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1958 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x198E JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x198B SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x915D JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x19C8 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x19BC JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x19C1 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP PUSH2 0x1A23 JUMP JUMPDEST DUP1 PUSH1 0x1 DUP8 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x19D8 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x19EC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1A04 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x1A1A JUMPI POP PUSH2 0x1A23 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x18F3 JUMP JUMPDEST POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1A38 DUP4 DUP6 PUSH2 0x6006 JUMP JUMPDEST DUP5 PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO DUP1 PUSH2 0x1A6A JUMPI POP DUP5 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND SWAP2 AND EQ ISZERO JUMPDEST ISZERO PUSH2 0xA9B JUMPI DUP2 MLOAD PUSH1 0x60 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x1A89 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1AB3 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP3 POP PUSH2 0x1257 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x1AD9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1B03 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x189E JUMPI PUSH1 0x0 PUSH1 0x60 DUP9 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH3 0x1E8480 DUP11 PUSH1 0x20 ADD MLOAD DUP11 DUP11 DUP11 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x1B3A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1B54 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9FD4 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x1B92 SWAP2 SWAP1 PUSH2 0x9A34 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1BCE JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1BD3 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x1BF7 JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x1BF4 SWAP2 SWAP1 PUSH2 0x91AB JUMP JUMPDEST SWAP1 POP JUMPDEST DUP1 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x1C04 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x1C1C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x1C34 JUMPI POP POP POP PUSH2 0x189E JUMP JUMPDEST POP POP POP PUSH1 0x1 ADD PUSH2 0x1B09 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP2 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x1C5C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1C86 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH2 0x1C93 DUP7 DUP7 PUSH2 0x5AE5 JUMP JUMPDEST SWAP3 POP DUP3 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x1CA5 JUMPI POP PUSH2 0x928 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x925 JUMPI DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x9E269B68 PUSH3 0x249F0 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x1CCF JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP11 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1CF7 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA253 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1D0F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x1D45 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x1D42 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x915D JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1D73 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x8BE JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x8C3 JUMP JUMPDEST DUP1 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1D80 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1D94 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1DAC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x1DC2 JUMPI POP PUSH2 0x925 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x1CA8 JUMP JUMPDEST PUSH1 0x20 DUP5 DUP2 ADD MLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP4 DUP5 SWAP3 SWAP1 DUP3 DUP2 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP6 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1E02 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x60 PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1E3A JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP8 PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x1F2B JUMPI PUSH1 0x40 MLOAD PUSH4 0x81EFCBDD PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x81EFCBDD SWAP1 PUSH3 0x7A120 SWAP1 PUSH2 0x1E93 SWAP1 DUP10 SWAP1 PUSH1 0x1 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x9C17 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1EAB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x1EE1 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x1EDE SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x91C3 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1F1B JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x1F0F JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1F14 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP PUSH2 0x1F26 JUMP JUMPDEST SWAP4 POP PUSH2 0x1257 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x203D JUMP JUMPDEST DUP8 PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x1F81 JUMPI PUSH1 0x40 MLOAD PUSH4 0x61E597F9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x61E597F9 SWAP1 PUSH3 0x7A120 SWAP1 PUSH2 0x1E93 SWAP1 DUP11 SWAP1 PUSH1 0x1 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x9C17 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x2B9A6CD PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x5734D9A SWAP1 PUSH3 0x7A120 SWAP1 PUSH2 0x1FC1 SWAP1 DUP11 SWAP1 PUSH1 0x1 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP14 SWAP1 DUP5 SWAP1 DUP5 SWAP1 DUP5 SWAP1 PUSH1 0x4 ADD PUSH2 0x9C5A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1FD9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x200F JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x200C SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x91C3 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1F1B JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0xE27 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xE27 JUMP JUMPDEST POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH1 0x60 PUSH2 0x20C9 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xC45A0155 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2089 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x209D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x20C1 SWAP2 SWAP1 PUSH2 0x894E JUMP JUMPDEST DUP7 PUSH1 0x0 PUSH2 0x6989 JUMP JUMPDEST SWAP1 POP DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x20E2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x210C JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x2126 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x215A JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x2145 JUMPI SWAP1 POP JUMPDEST POP SWAP3 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x925 JUMPI PUSH1 0x60 PUSH1 0x0 DUP1 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x224B JUMPI PUSH1 0x60 PUSH2 0x2197 DUP11 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x218A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x6E1F JUMP JUMPDEST SWAP1 POP DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xCDCA1753 PUSH3 0x493E0 DUP4 DUP13 DUP10 DUP2 MLOAD DUP2 LT PUSH2 0x21B9 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x21DE SWAP3 SWAP2 SWAP1 PUSH2 0x9EB8 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x21F8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP8 CALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x2229 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x2226 SWAP2 DUP2 ADD SWAP1 PUSH2 0x91AB JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x2232 JUMPI PUSH2 0x2242 JUMP JUMPDEST DUP1 DUP5 GT PUSH2 0x2240 JUMPI DUP1 SWAP4 POP DUP2 SWAP5 POP JUMPDEST POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x216F JUMP JUMPDEST POP DUP1 PUSH2 0x2258 JUMPI POP POP PUSH2 0x925 JUMP JUMPDEST DUP1 DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2265 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP2 DUP7 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x227E JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP PUSH1 0x1 ADD PUSH2 0x2160 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP6 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x22B0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x22DA JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0xBCDED89 PUSH1 0xE2 SHL DUP2 MSTORE SWAP1 SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x2F37B624 SWAP1 PUSH2 0x230A SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x9A50 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2322 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2336 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x235A SWAP2 SWAP1 PUSH2 0x918F JUMP JUMPDEST ISZERO DUP1 PUSH2 0x23DF JUMPI POP PUSH1 0x40 MLOAD PUSH4 0xBCDED89 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x2F37B624 SWAP1 PUSH2 0x238D SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x9A50 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x23A5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x23B9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x23DD SWAP2 SWAP1 PUSH2 0x918F JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x23EB JUMPI POP POP PUSH2 0x1257 JUMP JUMPDEST PUSH2 0x23F3 PUSH2 0x81A8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xF8B2CB4F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0xF8B2CB4F SWAP1 PUSH2 0x241F SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x9A50 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2437 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x244B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x246F SWAP2 SWAP1 PUSH2 0x91AB JUMP JUMPDEST DUP2 MSTORE PUSH1 0x40 MLOAD PUSH4 0xF8B2CB4F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0xF8B2CB4F SWAP1 PUSH2 0x249D SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x9A50 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x24B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x24C9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x24ED SWAP2 SWAP1 PUSH2 0x91AB JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 MLOAD PUSH4 0x4A46C673 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x948D8CE6 SWAP1 PUSH2 0x251E SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x9A50 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2536 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x254A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x256E SWAP2 SWAP1 PUSH2 0x91AB JUMP JUMPDEST PUSH1 0x40 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE MLOAD PUSH4 0x4A46C673 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x948D8CE6 SWAP1 PUSH2 0x25A1 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x9A50 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x25B9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x25CD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x25F1 SWAP2 SWAP1 PUSH2 0x91AB JUMP JUMPDEST DUP2 PUSH1 0x60 ADD DUP2 DUP2 MSTORE POP POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD4CADF68 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2633 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2647 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x266B SWAP2 SWAP1 PUSH2 0x91AB JUMP JUMPDEST PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0xFFE JUMPI PUSH2 0x269E DUP3 PUSH1 0x20 ADD MLOAD PUSH1 0x3 PUSH8 0xDE0B6B3A7640000 DUP2 PUSH2 0x2695 JUMPI INVALID JUMPDEST DIV PUSH1 0x1 ADD PUSH2 0x6F7A JUMP JUMPDEST DUP7 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x26AA JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD GT ISZERO PUSH2 0x26BD JUMPI PUSH2 0xFFE JUMP JUMPDEST DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xF8D6AED4 PUSH3 0x493E0 DUP5 PUSH1 0x0 ADD MLOAD DUP6 PUSH1 0x40 ADD MLOAD DUP7 PUSH1 0x20 ADD MLOAD DUP8 PUSH1 0x60 ADD MLOAD DUP13 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x26F0 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP10 PUSH1 0x80 ADD MLOAD PUSH1 0x40 MLOAD DUP9 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x271E SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA27E JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2736 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x2767 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x2764 SWAP2 DUP2 ADD SWAP1 PUSH2 0x91AB JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x27A1 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x2795 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x279A JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP PUSH2 0xFFE JUMP JUMPDEST DUP1 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x27AE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x27C6 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x27DC JUMPI POP PUSH2 0xFFE JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x2673 JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH1 0x60 PUSH2 0x2826 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xC45A0155 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2089 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP PUSH1 0x60 PUSH2 0x2833 DUP7 PUSH2 0x6FD7 JUMP JUMPDEST SWAP1 POP DUP5 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x284C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2876 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP3 POP DUP5 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x2890 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x28C4 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x28AF JUMPI SWAP1 POP JUMPDEST POP SWAP4 POP PUSH1 0x0 JUMPDEST DUP6 MLOAD DUP2 LT ISZERO PUSH2 0x2A1F JUMPI PUSH1 0x60 PUSH1 0x0 DUP1 JUMPDEST DUP6 MLOAD DUP2 LT ISZERO PUSH2 0x29D7 JUMPI PUSH1 0x60 PUSH2 0x2909 DUP7 PUSH2 0x2904 DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x28F7 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x706F JUMP JUMPDEST PUSH2 0x6E1F JUMP JUMPDEST SWAP1 POP DUP12 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x2F80BB1D PUSH3 0x493E0 DUP4 DUP14 DUP10 DUP2 MLOAD DUP2 LT PUSH2 0x292B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2950 SWAP3 SWAP2 SWAP1 PUSH2 0x9EB8 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x296A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP8 CALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x299B JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x2998 SWAP2 DUP2 ADD SWAP1 PUSH2 0x91AB JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x29A4 JUMPI PUSH2 0x29CE JUMP JUMPDEST DUP4 ISZERO DUP1 PUSH2 0x29B1 JUMPI POP DUP1 DUP5 LT ISZERO JUMPDEST ISZERO PUSH2 0x29CC JUMPI DUP1 SWAP4 POP PUSH2 0x29C9 DUP13 DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x218A JUMPI INVALID JUMPDEST SWAP5 POP JUMPDEST POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x28D9 JUMP JUMPDEST POP DUP1 PUSH2 0x29E4 JUMPI POP POP PUSH2 0x2A1F JUMP JUMPDEST DUP1 DUP7 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x29F1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP2 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2A0A JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP PUSH1 0x1 ADD PUSH2 0x28CA JUMP JUMPDEST POP POP POP SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 DUP2 ADD SWAP1 SWAP3 MSTORE PUSH2 0x12C5 SWAP1 DUP1 PUSH2 0x2A49 DUP7 DUP10 PUSH1 0x80 DUP5 ADD PUSH2 0x9A7D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2A70 SWAP3 SWAP2 SWAP1 PUSH2 0x9A7D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x7107 DUP2 MSTORE POP DUP4 PUSH2 0x6653 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x2A9D DUP5 DUP5 DUP5 PUSH2 0x930 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0xA9B JUMPI DUP2 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x2AB7 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ PUSH2 0x2B3D JUMPI PUSH2 0x2B24 DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2AD5 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x2AE9 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2B0A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND PUSH2 0x721B JUMP JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2B30 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP JUMPDEST PUSH1 0x1 ADD PUSH2 0x2AA2 JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x2B5D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2B97 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x2B84 PUSH2 0x81D7 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x2B7C JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP1 DUP4 EQ PUSH2 0x2C9F JUMPI PUSH1 0x1 DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2BB2 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD SWAP2 ISZERO ISZERO SWAP2 ADD MSTORE DUP4 DUP4 DUP3 DUP2 DUP2 LT PUSH2 0x2BD0 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x2BE2 SWAP2 SWAP1 PUSH2 0xA2A6 JUMP JUMPDEST ISZERO ISZERO SWAP1 POP PUSH2 0x2BEF JUMPI PUSH2 0x2C97 JUMP JUMPDEST ADDRESS DUP5 DUP5 DUP4 DUP2 DUP2 LT PUSH2 0x2BFC JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x2C0E SWAP2 SWAP1 PUSH2 0xA2A6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2C1C SWAP3 SWAP2 SWAP1 PUSH2 0x9A24 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2C59 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2C5E JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x2C6B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2C82 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 ISZERO ISZERO SWAP1 MSTORE JUMPDEST PUSH1 0x1 ADD PUSH2 0x2B9D JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x2CBF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2CE9 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 EQ PUSH2 0x2D92 JUMPI PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2D2D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x2D6D JUMPI PUSH2 0x2D68 DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2D52 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x723F JUMP JUMPDEST PUSH2 0x2D70 JUMP JUMPDEST PUSH1 0x12 JUMPDEST PUSH1 0xFF AND DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2D7F JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x2CEF JUMP JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP1 SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x2DB3 DUP4 DUP6 PUSH2 0x6006 JUMP JUMPDEST PUSH1 0x0 DUP6 PUSH1 0x0 ADD MLOAD SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x36569E77 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2DF7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2E0B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2E2F SWAP2 SWAP1 PUSH2 0x894E JUMP JUMPDEST DUP5 MLOAD SWAP1 SWAP2 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x2E4A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2E74 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP4 POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xF4B9FA75 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2EB0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2EC4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2EE8 SWAP2 SWAP1 PUSH2 0x894E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO DUP1 ISZERO PUSH2 0x2F8B JUMPI POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xF4B9FA75 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2F3D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2F51 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2F75 SWAP2 SWAP1 PUSH2 0x894E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x2F98 JUMPI POP POP POP PUSH2 0x1257 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xFFE JUMPI PUSH1 0x0 PUSH2 0x2FC6 DUP11 DUP10 DUP12 DUP11 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x2FB7 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP10 DUP10 PUSH2 0x72EB JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x2FD3 JUMPI POP PUSH2 0xFFE JUMP JUMPDEST DUP1 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x2FE0 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP PUSH1 0x1 ADD PUSH2 0x2F9B JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP6 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xBBD7F255 DUP6 PUSH1 0xF SIGNEXTEND PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x302B SWAP2 SWAP1 PUSH2 0x9E83 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3043 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3057 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x307B SWAP2 SWAP1 PUSH2 0x91AB JUMP JUMPDEST DUP7 MLOAD PUSH1 0x40 MLOAD PUSH4 0x1E010439 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x1E010439 SWAP1 PUSH2 0x30AE SWAP1 PUSH1 0xF DUP10 SWAP1 SIGNEXTEND SWAP1 PUSH1 0x4 ADD PUSH2 0x9E83 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x30C6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x30DA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x30FE SWAP2 SWAP1 PUSH2 0x91AB JUMP JUMPDEST SUB SWAP1 POP PUSH1 0x0 DUP7 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xC5829514 DUP7 PUSH1 0xF SIGNEXTEND PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3136 SWAP2 SWAP1 PUSH2 0x9E83 JUMP JUMPDEST PUSH1 0x80 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x314E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3162 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3186 SWAP2 SWAP1 PUSH2 0x96DB JUMP JUMPDEST SWAP4 POP POP POP POP DUP1 PUSH1 0x12 SUB PUSH1 0xA EXP DUP3 DUP2 PUSH2 0x319A JUMPI INVALID JUMPDEST DUP6 MLOAD SWAP2 SWAP1 DIV SWAP3 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x31B7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x31E1 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP4 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xFFE JUMPI PUSH1 0x0 PUSH1 0x60 DUP11 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH3 0x927C0 DUP13 PUSH1 0x20 ADD MLOAD DUP13 DUP13 DUP13 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x3218 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x3232 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9FD4 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x3270 SWAP2 SWAP1 PUSH2 0x9A34 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x32AC JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x32B1 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x32D5 JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x32D2 SWAP2 SWAP1 PUSH2 0x91AB JUMP JUMPDEST SWAP1 POP JUMPDEST DUP7 DUP2 LT PUSH2 0x330F JUMPI DUP4 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x3306 JUMPI DUP8 DUP10 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x32F3 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x32DE JUMP JUMPDEST POP POP POP POP PUSH2 0xFFE JUMP JUMPDEST DUP1 DUP9 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x331C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x3334 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x334C JUMPI POP POP POP PUSH2 0xFFE JUMP JUMPDEST POP POP POP PUSH1 0x1 ADD PUSH2 0x31E7 JUMP JUMPDEST PUSH2 0x335F PUSH2 0x81EF JUMP JUMPDEST PUSH2 0x3367 PUSH2 0x81EF JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 JUMPDEST DUP8 MLOAD DUP2 EQ PUSH2 0x346C JUMPI PUSH2 0x33B3 PUSH1 0x20 DUP10 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x3385 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD SUB DUP8 DUP11 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x339C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x757D SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP11 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x33CD JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x33E2 SWAP2 SWAP1 PUSH2 0x9A34 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x341F JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x3424 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0x3462 JUMPI PUSH1 0x0 PUSH2 0x3448 PUSH1 0x20 DUP4 MLOAD SUB DUP4 PUSH2 0x758D SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP5 DUP2 GT ISZERO PUSH2 0x3460 JUMPI DUP4 DUP9 MSTORE PUSH1 0x20 DUP9 ADD DUP3 SWAP1 MSTORE SWAP4 POP DUP4 JUMPDEST POP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x336C JUMP JUMPDEST POP DUP1 PUSH2 0x3478 JUMPI POP PUSH2 0x3567 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP7 MLOAD DUP2 EQ PUSH2 0x3564 JUMPI PUSH2 0x34AB PUSH1 0x20 DUP9 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x3494 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD SUB DUP4 DUP10 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x339C JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP10 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x34C5 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x34DA SWAP2 SWAP1 PUSH2 0x9A34 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x3517 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x351C JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0x355A JUMPI PUSH1 0x0 PUSH2 0x3540 PUSH1 0x20 DUP4 MLOAD SUB DUP4 PUSH2 0x758D SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP6 DUP2 GT ISZERO PUSH2 0x3558 JUMPI DUP4 DUP8 MSTORE PUSH1 0x20 DUP8 ADD DUP3 SWAP1 MSTORE SWAP5 POP DUP5 JUMPDEST POP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x347B JUMP JUMPDEST POP POP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 DUP5 ADD MLOAD PUSH1 0x60 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH2 0x35F2 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH2 0x35EB SWAP1 DUP1 PUSH2 0x35A4 DUP7 DUP10 PUSH1 0x80 DUP5 ADD PUSH2 0x9FF2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x35CB SWAP3 SWAP2 SWAP1 PUSH2 0x9FF2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x7599 DUP2 MSTORE POP DUP4 PUSH2 0x6653 JUMP JUMPDEST SWAP1 POP PUSH2 0x1257 JUMP JUMPDEST DUP2 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x360A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x3634 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x189E JUMPI PUSH1 0x0 PUSH1 0x60 DUP9 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH3 0x1E8480 DUP11 PUSH1 0x40 ADD MLOAD DUP11 DUP11 DUP11 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x366B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x3685 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9FD4 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x36C3 SWAP2 SWAP1 PUSH2 0x9A34 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x36FF JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x3704 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x3728 JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x3725 SWAP2 SWAP1 PUSH2 0x91AB JUMP JUMPDEST SWAP1 POP JUMPDEST DUP1 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x3735 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x374D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x3765 JUMPI POP POP POP PUSH2 0x189E JUMP JUMPDEST POP POP POP PUSH1 0x1 ADD PUSH2 0x363A JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP6 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x378D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x37B7 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0xBCDED89 PUSH1 0xE2 SHL DUP2 MSTORE SWAP1 SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x2F37B624 SWAP1 PUSH2 0x37E7 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x9A50 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x37FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3813 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3837 SWAP2 SWAP1 PUSH2 0x918F JUMP JUMPDEST ISZERO DUP1 PUSH2 0x38BC JUMPI POP PUSH1 0x40 MLOAD PUSH4 0xBCDED89 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x2F37B624 SWAP1 PUSH2 0x386A SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x9A50 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3882 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3896 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x38BA SWAP2 SWAP1 PUSH2 0x918F JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x38C8 JUMPI POP POP PUSH2 0x1257 JUMP JUMPDEST PUSH2 0x38D0 PUSH2 0x81A8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xF8B2CB4F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0xF8B2CB4F SWAP1 PUSH2 0x38FC SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x9A50 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3914 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3928 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x394C SWAP2 SWAP1 PUSH2 0x91AB JUMP JUMPDEST DUP2 MSTORE PUSH1 0x40 MLOAD PUSH4 0xF8B2CB4F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0xF8B2CB4F SWAP1 PUSH2 0x397A SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x9A50 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3992 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x39A6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x39CA SWAP2 SWAP1 PUSH2 0x91AB JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 MLOAD PUSH4 0x4A46C673 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x948D8CE6 SWAP1 PUSH2 0x39FB SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x9A50 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3A13 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3A27 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3A4B SWAP2 SWAP1 PUSH2 0x91AB JUMP JUMPDEST PUSH1 0x40 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE MLOAD PUSH4 0x4A46C673 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x948D8CE6 SWAP1 PUSH2 0x3A7E SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x9A50 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3A96 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3AAA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3ACE SWAP2 SWAP1 PUSH2 0x91AB JUMP JUMPDEST DUP2 PUSH1 0x60 ADD DUP2 DUP2 MSTORE POP POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD4CADF68 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3B10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3B24 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3B48 SWAP2 SWAP1 PUSH2 0x91AB JUMP JUMPDEST PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0xFFE JUMPI DUP2 MLOAD PUSH2 0x3B6C SWAP1 PUSH8 0x6F05B59D3B20000 PUSH2 0x6F7A JUMP JUMPDEST DUP7 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3B78 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD GT ISZERO PUSH2 0x3B8B JUMPI PUSH2 0xFFE JUMP JUMPDEST DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xBA9530A6 PUSH3 0x493E0 DUP5 PUSH1 0x0 ADD MLOAD DUP6 PUSH1 0x40 ADD MLOAD DUP7 PUSH1 0x20 ADD MLOAD DUP8 PUSH1 0x60 ADD MLOAD DUP13 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x3BBE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP10 PUSH1 0x80 ADD MLOAD PUSH1 0x40 MLOAD DUP9 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3BEC SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA27E JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3C04 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x3C35 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x3C32 SWAP2 DUP2 ADD SWAP1 PUSH2 0x91AB JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x3C63 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x2795 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x279A JUMP JUMPDEST DUP1 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x3C70 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3C88 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x3C9E JUMPI POP PUSH2 0xFFE JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x3B50 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 MLOAD PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x3CB7 JUMPI INVALID JUMPDEST EQ DUP1 PUSH2 0x3CCF JUMPI POP PUSH1 0x1 DUP4 MLOAD PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x3CCD JUMPI INVALID JUMPDEST EQ JUMPDEST DUP1 PUSH2 0x3CE5 JUMPI POP PUSH1 0x40 DUP5 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND ISZERO JUMPDEST DUP1 PUSH2 0x3CFB JUMPI POP PUSH1 0x60 DUP5 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND ISZERO JUMPDEST ISZERO PUSH2 0x3D08 JUMPI POP PUSH1 0x0 PUSH2 0x3DE7 JUMP JUMPDEST PUSH2 0x3D10 PUSH2 0x8209 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x1FB09795 DUP9 DUP9 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3D41 SWAP3 SWAP2 SWAP1 PUSH2 0xA1E6 JUMP JUMPDEST PUSH1 0xA0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3D59 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3D6D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3D91 SWAP2 SWAP1 PUSH2 0x9619 JUMP JUMPDEST SWAP2 SWAP5 POP SWAP3 POP SWAP1 POP PUSH1 0x1 DUP4 PUSH1 0x20 ADD MLOAD PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x3DAA JUMPI INVALID JUMPDEST EQ ISZERO DUP1 PUSH2 0x3DB5 JUMPI POP DUP1 ISZERO JUMPDEST DUP1 PUSH2 0x3DC8 JUMPI POP DUP7 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO JUMPDEST ISZERO PUSH2 0x3DD9 JUMPI PUSH1 0x0 SWAP4 POP POP POP POP PUSH2 0x3DE7 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND SWAP2 POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP1 PUSH2 0x3DFD DUP6 DUP8 PUSH2 0x6006 JUMP JUMPDEST PUSH2 0x3E08 DUP8 DUP8 DUP8 PUSH2 0x75ED JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x3E14 JUMPI PUSH2 0xBF9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x276FDAD9 PUSH1 0xE1 SHL DUP2 MSTORE ADDRESS SWAP1 PUSH4 0x4EDFB5B2 SWAP1 PUSH2 0x3E3D SWAP1 DUP11 SWAP1 DUP8 SWAP1 DUP12 SWAP1 DUP12 SWAP1 PUSH1 0x4 ADD PUSH2 0xA1AD JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3E55 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3E69 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x3E91 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x91C3 JUMP JUMPDEST DUP8 PUSH1 0x80 ADD DUP2 SWAP1 MSTORE POP DUP7 PUSH1 0x80 ADD MLOAD SWAP2 POP PUSH2 0x3F08 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 DUP8 DUP11 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x3EC1 SWAP3 SWAP2 SWAP1 PUSH2 0x9CF1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP9 DUP11 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x3EE8 SWAP3 SWAP2 SWAP1 PUSH2 0x9CF1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x7754 DUP2 MSTORE POP DUP6 PUSH2 0x6653 JUMP JUMPDEST SWAP1 POP SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x901754D7 DUP7 DUP7 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3F45 SWAP3 SWAP2 SWAP1 PUSH2 0x9A7D JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3F5D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3F71 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3F95 SWAP2 SWAP1 PUSH2 0x894E JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x3FAF JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x1257 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND ISZERO PUSH2 0x4041 JUMPI PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH2 0x3FEC SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x9A50 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4004 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4018 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x403C SWAP2 SWAP1 PUSH2 0x91AB JUMP JUMPDEST PUSH2 0x404D JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND BALANCE JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x4062 JUMPI PUSH1 0x0 SWAP3 POP POP POP PUSH2 0x1257 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x3C2803F PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x1E1401F8 SWAP1 PUSH3 0x249F0 SWAP1 PUSH2 0x4097 SWAP1 DUP11 SWAP1 DUP11 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x9B78 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x40AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x40E0 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x40DD SWAP2 DUP2 ADD SWAP1 PUSH2 0x91AB JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x4120 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x410E JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x4113 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 SWAP4 POP POP POP POP PUSH2 0x1257 JUMP JUMPDEST SWAP3 POP PUSH2 0x1257 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x4136 DUP4 DUP6 PUSH2 0x6006 JUMP JUMPDEST PUSH1 0x20 DUP6 ADD MLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x2 DUP1 DUP3 MSTORE PUSH1 0x60 DUP3 DUP2 ADD SWAP1 SWAP4 MSTORE DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP6 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x416C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP DUP5 DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x419A JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE DUP4 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x41CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x41F4 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP4 POP PUSH2 0x41FF PUSH2 0x8181 JUMP JUMPDEST PUSH2 0x4207 PUSH2 0x603C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0xE27 JUMPI PUSH1 0x60 PUSH2 0x4226 DUP12 DUP10 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xD09 JUMPI INVALID JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x7C268337 PUSH1 0xE1 SHL DUP2 MSTORE SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND SWAP1 PUSH4 0xF84D066E SWAP1 PUSH2 0x425C SWAP1 PUSH1 0x1 SWAP1 DUP6 SWAP1 DUP11 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x9F46 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4276 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x42AB JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x42A8 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x900B JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x42D9 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0xDC9 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xDCE JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x42E8 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 DUP2 SGT PUSH2 0x4302 JUMPI POP POP POP PUSH2 0xE27 JUMP JUMPDEST DUP1 DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x430F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP POP POP PUSH1 0x1 ADD PUSH2 0x420C JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x4341 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x436B JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x189E JUMPI DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x343FBCDD PUSH3 0x61A80 DUP9 DUP9 DUP9 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x439A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x43C0 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9B78 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x43D8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x4409 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x4406 SWAP2 DUP2 ADD SWAP1 PUSH2 0x91AB JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x4437 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x184E JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1853 JUMP JUMPDEST DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x4444 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x445C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x4472 JUMPI POP PUSH2 0x189E JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x4371 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 PUSH2 0x448A DUP6 DUP8 PUSH2 0x6006 JUMP JUMPDEST DUP4 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x44A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x44CC JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH2 0x44DB DUP10 DUP10 DUP10 DUP10 PUSH2 0x783B JUMP JUMPDEST SWAP5 POP SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x44F3 JUMPI POP PUSH2 0x45AD JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x45AA JUMPI PUSH1 0x0 PUSH2 0x4564 DUP10 DUP7 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x4518 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9B20 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP10 DUP8 DUP10 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x453C SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9B20 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x4557 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x7990 JUMP JUMPDEST SWAP1 POP DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x4573 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x458B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x45A1 JUMPI POP PUSH2 0x45AA JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x44F6 JUMP JUMPDEST POP POP JUMPDEST SWAP6 POP SWAP6 POP SWAP6 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x45C4 DUP4 DUP6 PUSH2 0x6006 JUMP JUMPDEST DUP2 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x45DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x4606 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x189E JUMPI DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x144A2752 PUSH3 0xF4240 DUP8 DUP10 DUP9 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x4635 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x465B SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9B78 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4673 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x46A4 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x46A1 SWAP2 DUP2 ADD SWAP1 PUSH2 0x91AB JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x46D2 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x184E JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1853 JUMP JUMPDEST DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x46DF JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x46F7 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x470D JUMPI POP PUSH2 0x189E JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x460C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH2 0x4724 DUP5 DUP7 PUSH2 0x6006 JUMP JUMPDEST DUP3 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x473C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x4766 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x47DB JUMPI PUSH1 0x0 PUSH2 0x4795 DUP10 DUP10 DUP10 DUP10 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x4788 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x3F14 JUMP JUMPDEST SWAP1 POP DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x47A4 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x47BC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x47D2 JUMPI POP PUSH2 0x47DB JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x476C JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0x901754D7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND SWAP1 PUSH4 0x901754D7 SWAP1 PUSH2 0x480A SWAP1 DUP10 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x9A7D JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4822 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4836 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x485A SWAP2 SWAP1 PUSH2 0x894E JUMP JUMPDEST SWAP3 POP POP SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 DUP2 ADD SWAP1 SWAP3 MSTORE PUSH2 0x12C5 SWAP1 DUP1 PUSH2 0x4885 DUP7 DUP10 PUSH1 0x80 DUP5 ADD PUSH2 0x9A7D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x48AC SWAP3 SWAP2 SWAP1 PUSH2 0x9A7D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x7A82 DUP2 MSTORE POP DUP4 PUSH2 0x6653 JUMP JUMPDEST PUSH1 0x60 DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x48E5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x490F JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP4 MLOAD DUP2 EQ PUSH2 0x2C9F JUMPI PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x4953 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x499D JUMPI PUSH2 0x4998 DUP4 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x4979 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x7AC9 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x49A9 JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND BALANCE JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x49B5 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x4915 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 DUP2 ADD SWAP1 SWAP3 MSTORE PUSH2 0x12C5 SWAP1 DUP1 PUSH2 0x49E7 DUP7 DUP10 PUSH1 0x80 DUP5 ADD PUSH2 0x9A7D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x4A0E SWAP3 SWAP2 SWAP1 PUSH2 0x9A7D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x7B93 DUP2 MSTORE POP DUP4 PUSH2 0x6653 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x4A3A DUP4 DUP6 PUSH2 0x6006 JUMP JUMPDEST DUP2 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x4A52 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x4A7C JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND ISZERO PUSH2 0x4A9F JUMPI PUSH2 0x4A9A DUP8 DUP8 PUSH2 0x60FD JUMP JUMPDEST PUSH2 0x4AA2 JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND ISZERO PUSH2 0x4AC4 JUMPI PUSH2 0x4ABF DUP9 DUP8 PUSH2 0x60FD JUMP JUMPDEST PUSH2 0x4AC7 JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xFFE JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH2 0x4B1D JUMPI PUSH2 0x4AFC DUP5 PUSH4 0x95B68FE7 PUSH1 0xE0 SHL DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0xF02 JUMPI INVALID JUMPDEST DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x4B08 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP4 POP DUP3 DUP2 MSTORE POP POP POP PUSH2 0x4BB7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND PUSH2 0x4B43 JUMPI PUSH2 0x4AFC DUP4 PUSH4 0xCD7724C3 PUSH1 0xE0 SHL DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0xF02 JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH2 0x4B5D DUP6 PUSH4 0x95B68FE7 PUSH1 0xE0 SHL DUP11 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0xF02 JUMPI INVALID JUMPDEST SWAP3 POP SWAP1 POP DUP1 ISZERO PUSH2 0x4B9A JUMPI PUSH2 0x4B79 DUP5 PUSH4 0xCD7724C3 PUSH1 0xE0 SHL DUP4 PUSH2 0x617C JUMP JUMPDEST DUP9 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x4B85 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP5 POP DUP3 DUP2 MSTORE POP POP POP PUSH2 0x4BB5 JUMP JUMPDEST PUSH1 0x0 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x4BA8 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP JUMPDEST POP JUMPDEST DUP1 ISZERO DUP1 PUSH2 0x4BD7 JUMPI POP DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x4BCB JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ JUMPDEST ISZERO PUSH2 0x4BE2 JUMPI POP PUSH2 0xFFE JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x4ACC JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x4C06 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x4C30 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1A23 JUMPI DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x1F00CA74 PUSH3 0x249F0 DUP7 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x4C5D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4C83 SWAP3 SWAP2 SWAP1 PUSH2 0xA23A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4C9B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x4CD1 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x4CCE SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x915D JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x4CFF JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x19BC JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x19C1 JUMP JUMPDEST DUP1 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x4D0C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x4D20 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x4D38 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x4D4E JUMPI POP PUSH2 0x1A23 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x4C36 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x4D63 DUP4 DUP6 PUSH2 0x6006 JUMP JUMPDEST DUP2 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x4D7B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x4DA5 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x189E JUMPI DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xFF1FD974 PUSH3 0xF4240 DUP9 DUP9 DUP9 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x4DD4 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4DFA SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9B78 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4E12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x4E43 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x4E40 SWAP2 DUP2 ADD SWAP1 PUSH2 0x91AB JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x4E71 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x184E JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1853 JUMP JUMPDEST DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x4E7E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x4E96 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x4EAC JUMPI POP PUSH2 0x189E JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x4DAB JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP1 PUSH2 0x4EC4 DUP6 DUP8 PUSH2 0x6006 JUMP JUMPDEST PUSH2 0x4ECF DUP8 DUP8 DUP8 PUSH2 0x75ED JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x4EDB JUMPI PUSH2 0xBF9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x276FDAD9 PUSH1 0xE1 SHL DUP2 MSTORE ADDRESS SWAP1 PUSH4 0x4EDFB5B2 SWAP1 PUSH2 0x4F04 SWAP1 DUP11 SWAP1 DUP8 SWAP1 DUP12 SWAP1 DUP12 SWAP1 PUSH1 0x4 ADD PUSH2 0xA1AD JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4F1C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4F30 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x4F58 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x91C3 JUMP JUMPDEST PUSH1 0x80 DUP9 ADD DUP2 SWAP1 MSTORE DUP5 MLOAD SWAP1 SWAP3 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x4F7A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x4FA4 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x508F JUMPI PUSH1 0x0 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xF1ED7FA4 DUP12 DUP12 DUP12 DUP12 DUP8 DUP2 MLOAD DUP2 LT PUSH2 0x4FD2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4FF9 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA177 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5011 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5025 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5049 SWAP2 SWAP1 PUSH2 0x91AB JUMP JUMPDEST SWAP1 POP DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x5058 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x5070 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x5086 JUMPI POP PUSH2 0x508F JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x4FAA JUMP JUMPDEST POP POP SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 PUSH2 0x50AA DUP6 DUP8 PUSH2 0x6006 JUMP JUMPDEST PUSH2 0x50B6 DUP9 DUP9 DUP9 DUP9 PUSH2 0x783B JUMP JUMPDEST SWAP4 POP SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x50CD JUMPI PUSH2 0x45AD JUMP JUMPDEST DUP4 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x50E5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x510F JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD SWAP1 SWAP2 MSTORE SWAP1 SWAP3 POP PUSH2 0x517C SWAP1 DUP1 PUSH2 0x5133 DUP10 DUP8 DUP10 ISZERO PUSH1 0x80 DUP6 ADD PUSH2 0x9B20 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP10 DUP7 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x515C SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9B20 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x7990 DUP2 MSTORE POP DUP7 PUSH2 0x6653 JUMP JUMPDEST SWAP2 POP POP SWAP6 POP SWAP6 POP SWAP6 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 PUSH2 0x5199 DUP6 DUP8 PUSH2 0x6006 JUMP JUMPDEST DUP4 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x51B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x51DB JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP DUP9 MLOAD PUSH1 0x40 MLOAD PUSH4 0x939D863 PUSH1 0xE1 SHL DUP2 MSTORE SWAP2 SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x1273B0C6 SWAP1 PUSH2 0x520E SWAP1 DUP11 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x9A7D JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5226 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x523A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x525E SWAP2 SWAP1 PUSH2 0x894E JUMP JUMPDEST SWAP3 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND ISZERO PUSH2 0x527C JUMPI POP PUSH1 0x1 SWAP4 POP DUP7 PUSH2 0x531B JUMP JUMPDEST DUP9 MLOAD PUSH1 0x40 MLOAD PUSH4 0x939D863 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x1273B0C6 SWAP1 PUSH2 0x52AD SWAP1 DUP11 SWAP1 DUP13 SWAP1 PUSH1 0x4 ADD PUSH2 0x9A7D JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x52C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x52D9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x52FD SWAP2 SWAP1 PUSH2 0x894E JUMP JUMPDEST SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x5314 JUMPI POP POP PUSH2 0xBF9 JUMP JUMPDEST POP PUSH1 0x0 SWAP4 POP DUP6 JUMPDEST DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDD58B41C PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5354 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5368 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x538C SWAP2 SWAP1 PUSH2 0x918F JUMP JUMPDEST PUSH2 0x5397 JUMPI POP POP PUSH2 0xBF9 JUMP JUMPDEST PUSH2 0x540F PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 DUP10 DUP8 DUP6 DUP15 PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x53C0 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9A97 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP11 DUP8 DUP6 DUP15 PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x53EF SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9A97 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x6850 DUP2 MSTORE POP DUP8 PUSH2 0x6653 JUMP JUMPDEST SWAP3 POP POP POP SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x5436 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x5460 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 EQ PUSH2 0xA9B JUMPI PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x54A4 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x54F0 JUMPI PUSH2 0x54EB DUP5 DUP5 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x54CB JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x7C48 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x54F3 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x54FF JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x5466 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x552D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x5557 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x189E JUMPI DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x838E6A22 PUSH3 0x493E0 DUP9 DUP9 DUP9 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x5586 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x55AC SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9B78 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x55C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x55F5 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x55F2 SWAP2 DUP2 ADD SWAP1 PUSH2 0x91AB JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x5623 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x184E JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1853 JUMP JUMPDEST DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x5630 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x555D JUMP JUMPDEST PUSH1 0x0 DUP5 PUSH1 0x80 ADD MLOAD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x565D JUMPI POP PUSH1 0x0 PUSH2 0x1257 JUMP JUMPDEST DUP5 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x418436BC PUSH3 0x7A120 DUP8 PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x5697 JUMPI DUP7 PUSH2 0x56AD JUMP JUMPDEST PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE JUMPDEST DUP9 PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x56D0 JUMPI DUP7 PUSH2 0x56E6 JUMP JUMPDEST PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE JUMPDEST DUP7 PUSH1 0x0 DUP12 PUSH1 0x80 ADD MLOAD PUSH1 0x40 MLOAD DUP8 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x570E SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9B9C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5726 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x5757 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x5754 SWAP2 DUP2 ADD SWAP1 PUSH2 0x91AB JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x5795 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x5785 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x578A JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 SWAP2 POP POP PUSH2 0x1257 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x57A0 DUP6 PUSH2 0x7D14 JUMP JUMPDEST PUSH1 0xFF AND SWAP1 POP PUSH1 0x0 PUSH2 0x57B0 DUP8 PUSH2 0x7D14 JUMP JUMPDEST PUSH1 0xFF AND SWAP1 POP PUSH8 0xDE0B6B3A7640000 DUP2 PUSH1 0xA EXP DUP4 PUSH1 0xA EXP DUP8 DUP7 MUL MUL DUP2 PUSH2 0x57D1 JUMPI INVALID JUMPDEST DIV DUP2 PUSH2 0x57D9 JUMPI INVALID JUMPDEST DIV SWAP4 POP POP POP POP PUSH2 0x1257 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH2 0x57F2 DUP5 DUP7 PUSH2 0x6006 JUMP JUMPDEST DUP3 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x580A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x5834 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH2 0x589F PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 DUP10 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x5858 SWAP3 SWAP2 SWAP1 PUSH2 0x9A7D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP10 DUP10 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x587F SWAP3 SWAP2 SWAP1 PUSH2 0x9A7D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x7D1F DUP2 MSTORE POP DUP6 PUSH2 0x6653 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x901754D7 PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND SWAP1 PUSH4 0x901754D7 SWAP1 PUSH2 0x480A SWAP1 DUP10 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x9A7D JUMP JUMPDEST PUSH2 0x58D8 PUSH2 0x81EF JUMP JUMPDEST PUSH2 0x58E0 PUSH2 0x81EF JUMP JUMPDEST PUSH1 0x0 NOT DUP1 PUSH1 0x0 JUMPDEST DUP7 MLOAD DUP2 EQ PUSH2 0x59DC JUMPI PUSH2 0x5917 PUSH1 0x20 DUP9 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x5900 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD SUB DUP8 DUP10 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x339C JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP10 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x5931 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x5946 SWAP2 SWAP1 PUSH2 0x9A34 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x5983 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x5988 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0x59D2 JUMPI PUSH1 0x0 PUSH2 0x59AC PUSH1 0x20 DUP4 MLOAD SUB DUP4 PUSH2 0x758D SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 GT DUP1 ISZERO PUSH2 0x59BD JUMPI POP DUP5 DUP2 LT JUMPDEST ISZERO PUSH2 0x59D0 JUMPI DUP4 DUP8 MSTORE PUSH1 0x20 DUP8 ADD DUP3 SWAP1 MSTORE SWAP4 POP DUP4 JUMPDEST POP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x58E7 JUMP JUMPDEST POP PUSH1 0x0 NOT DUP2 EQ ISZERO PUSH2 0x59ED JUMPI POP PUSH2 0x3567 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP8 MLOAD DUP2 EQ PUSH2 0x3564 JUMPI PUSH2 0x5A20 PUSH1 0x20 DUP10 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x5A09 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD SUB DUP4 DUP11 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x339C JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP11 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x5A3A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x5A4F SWAP2 SWAP1 PUSH2 0x9A34 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x5A8C JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x5A91 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0x5ADB JUMPI PUSH1 0x0 PUSH2 0x5AB5 PUSH1 0x20 DUP4 MLOAD SUB DUP4 PUSH2 0x758D SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 GT DUP1 ISZERO PUSH2 0x5AC6 JUMPI POP DUP6 DUP2 LT JUMPDEST ISZERO PUSH2 0x5AD9 JUMPI DUP4 DUP9 MSTORE PUSH1 0x20 DUP9 ADD DUP3 SWAP1 MSTORE SWAP5 POP DUP5 JUMPDEST POP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x59F0 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xC45A0155 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5B22 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5B36 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5B5A SWAP2 SWAP1 PUSH2 0x894E JUMP JUMPDEST SWAP1 POP PUSH1 0x1 DUP4 MLOAD SUB PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x5B76 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x5BA0 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x5DCB JUMPI PUSH1 0x60 DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x5B1DC86F PUSH3 0x249F0 DUP8 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x5BD0 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 DUP7 PUSH1 0x1 ADD DUP2 MLOAD DUP2 LT PUSH2 0x5BE7 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5C0C SWAP3 SWAP2 SWAP1 PUSH2 0x9A7D JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5C24 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x5C5A JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x5C57 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x8D06 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x5CA9 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x5C88 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x5C8D JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE SWAP4 POP PUSH2 0x5DCE SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 MLOAD LT ISZERO PUSH2 0x5CD6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5CCD SWAP1 PUSH2 0xA0D8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x5DBF JUMPI PUSH1 0x0 DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x5CF0 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x18160DDD PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5D30 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5D44 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5D68 SWAP2 SWAP1 PUSH2 0x91AB JUMP JUMPDEST SWAP1 POP DUP3 DUP2 GT ISZERO PUSH2 0x5DB6 JUMPI DUP1 SWAP3 POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x5D81 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 DUP8 DUP2 MLOAD DUP2 LT PUSH2 0x5D95 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x5CD9 JUMP JUMPDEST POP POP POP POP PUSH1 0x1 ADD PUSH2 0x5BA6 JUMP JUMPDEST POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP6 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x21F8A721 DUP8 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x9232494E PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5E28 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5E3C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5E60 SWAP2 SWAP1 PUSH2 0x91AB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5E7C SWAP2 SWAP1 PUSH2 0x9E83 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5E94 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5EA8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5ECC SWAP2 SWAP1 PUSH2 0x894E JUMP JUMPDEST SWAP2 POP DUP6 PUSH1 0x20 ADD MLOAD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x5EE1 JUMPI PUSH2 0x5FFD JUMP JUMPDEST PUSH1 0x0 DUP1 JUMPDEST DUP8 PUSH1 0x20 ADD MLOAD MLOAD DUP2 LT ISZERO PUSH2 0x5FFA JUMPI PUSH1 0x2 DUP9 PUSH1 0x20 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x5F04 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD LT ISZERO PUSH2 0x5F18 JUMPI PUSH2 0x5FF2 JUMP JUMPDEST DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x7F9C0ECD PUSH3 0x493E0 DUP11 PUSH1 0x20 ADD MLOAD DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x5F3B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 PUSH1 0x1 DUP11 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x5F53 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5F78 SWAP3 SWAP2 SWAP1 PUSH2 0x9D3A JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5F90 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x5FC1 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x5FBE SWAP2 DUP2 ADD SWAP1 PUSH2 0x91AB JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x5FCA JUMPI PUSH2 0x5FF2 JUMP JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x5FF0 JUMPI DUP1 SWAP3 POP DUP9 PUSH1 0x20 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x5FE5 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP4 POP JUMPDEST POP JUMPDEST PUSH1 0x1 ADD PUSH2 0x5EE5 JUMP JUMPDEST POP POP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x6038 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5CCD SWAP1 PUSH2 0xA04E JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x6044 PUSH2 0x8181 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP2 ADD DUP3 MSTORE ADDRESS DUP1 DUP3 MSTORE PUSH1 0x0 PUSH1 0x20 DUP4 ADD DUP2 SWAP1 MSTORE SWAP3 DUP3 ADD MSTORE PUSH1 0x60 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP2 DUP3 SWAP2 SWAP1 DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x608D PUSH2 0x822B JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x6085 JUMPI SWAP1 POP POP SWAP1 POP PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP6 PUSH1 0x0 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP DUP2 MSTORE POP DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x60EB JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x3795FB1 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x6F2BF62 SWAP1 PUSH2 0x612C SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x9A50 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6144 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x6158 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3DE7 SWAP2 SWAP1 PUSH2 0x894E JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH2 0x6192 JUMPI PUSH2 0x928 JUMP JUMPDEST PUSH1 0x60 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH3 0x249F0 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x61B4 SWAP2 SWAP1 PUSH2 0x9E83 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x61F2 SWAP2 SWAP1 PUSH2 0x9A34 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x622E JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x6233 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP DUP2 ISZERO PUSH2 0x6256 JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x6253 SWAP2 SWAP1 PUSH2 0x91AB JUMP JUMPDEST SWAP3 POP JUMPDEST POP SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD9638D36 DUP12 PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6295 SWAP2 SWAP1 PUSH2 0x9E83 JUMP JUMPDEST PUSH1 0xA0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x62AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x62C1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x62E5 SWAP2 SWAP1 PUSH2 0x9710 JUMP JUMPDEST SWAP5 POP SWAP5 POP POP POP SWAP3 POP PUSH1 0x0 PUSH3 0xF4240 SWAP1 POP DUP11 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x640D JUMPI PUSH1 0x0 PUSH2 0x6324 DUP10 PUSH5 0xE8D4A51000 PUSH2 0x7D6F JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x6348 PUSH12 0x33B2E3C9FD0803CE8000000 PUSH2 0x6342 DUP9 DUP6 PUSH2 0x7DA5 JUMP JUMPDEST SWAP1 PUSH2 0x7D6F JUMP JUMPDEST SWAP1 POP DUP5 DUP2 LT PUSH2 0x6360 JUMPI PUSH1 0x0 SWAP7 POP POP POP POP POP POP POP PUSH2 0x6516 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x63EF PUSH8 0xDE0B6B3A7640000 PUSH2 0x63E9 DUP13 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x568D4B6F PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x63AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x63BE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x63E2 SWAP2 SWAP1 PUSH2 0x91AB JUMP JUMPDEST DUP7 SWAP1 PUSH2 0x7D6F JUMP JUMPDEST SWAP1 PUSH2 0x7DC1 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x63FD DUP5 DUP4 PUSH2 0x7DEB JUMP JUMPDEST SWAP9 POP PUSH2 0x6516 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP11 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x650D JUMPI DUP8 DUP5 DUP2 GT ISZERO PUSH2 0x6442 JUMPI PUSH1 0x0 SWAP6 POP POP POP POP POP POP PUSH2 0x6516 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x645E PUSH12 0x33B2E3C9FD0803CE8000000 PUSH2 0x6342 DUP9 DUP6 PUSH2 0x7DEB JUMP JUMPDEST SWAP1 POP DUP4 DUP2 GT PUSH2 0x6476 JUMPI PUSH1 0x0 SWAP7 POP POP POP POP POP POP POP PUSH2 0x6516 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x64FB DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xFAE036D5 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x64B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x64C8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x64EC SWAP2 SWAP1 PUSH2 0x91AB JUMP JUMPDEST PUSH8 0xDE0B6B3A7640000 SWAP1 PUSH2 0x7DA5 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x63FD DUP3 PUSH2 0x63E9 DUP7 DUP9 PUSH2 0x7D6F JUMP JUMPDEST PUSH1 0x0 SWAP5 POP POP POP POP POP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x652B PUSH2 0x825D JUMP JUMPDEST DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x653F SWAP2 SWAP1 PUSH2 0x9257 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x6559 SWAP2 SWAP1 PUSH2 0x923B JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH4 0x22DB5ED1 PUSH1 0xE2 SHL DUP6 DUP8 DUP7 PUSH2 0x6574 DUP13 PUSH2 0x7E0A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x6587 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA10F JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x65C5 SWAP2 SWAP1 PUSH2 0x9A34 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x6600 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x6605 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH2 0x661D JUMPI PUSH1 0x0 SWAP6 POP POP POP POP POP POP PUSH2 0x3DE7 JUMP JUMPDEST DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x6631 SWAP2 SWAP1 PUSH2 0x915D JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x663D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP6 POP POP POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x666C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x6696 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP2 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x66A8 JUMPI PUSH2 0x5DCE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x66D9 DUP5 PUSH1 0x0 ADD MLOAD DUP6 PUSH1 0x20 ADD MLOAD DUP6 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x66C4 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 PUSH1 0x40 ADD MLOAD PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x66E6 JUMPI POP PUSH2 0x5DCE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6703 DUP6 PUSH1 0x20 ADD MLOAD DUP7 PUSH1 0x0 ADD MLOAD DUP5 DUP9 PUSH1 0x40 ADD MLOAD PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x6711 JUMPI POP POP PUSH2 0x5DCE JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x6847 JUMPI PUSH1 0x0 JUMPDEST PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x6809 JUMPI PUSH2 0x6747 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x6738 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 DUP7 PUSH2 0x7E4B JUMP JUMPDEST SWAP4 POP DUP4 PUSH2 0x6753 JUMPI PUSH2 0x6809 JUMP JUMPDEST PUSH2 0x6762 PUSH2 0x2715 PUSH2 0x2710 DUP7 PUSH2 0x7E4B JUMP JUMPDEST SWAP4 POP DUP4 PUSH2 0x676E JUMPI PUSH2 0x6809 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x678B DUP9 PUSH1 0x20 ADD MLOAD DUP10 PUSH1 0x0 ADD MLOAD DUP8 DUP12 PUSH1 0x40 ADD MLOAD PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x6798 JUMPI POP PUSH2 0x6809 JUMP JUMPDEST DUP1 SWAP4 POP DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x67A7 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 LT PUSH2 0x6800 JUMPI PUSH1 0x0 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x67C3 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x2710 DUP10 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x67DA JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 SUB MUL DUP2 PUSH2 0x67EC JUMPI INVALID JUMPDEST DIV SWAP1 POP PUSH1 0x5 DUP2 GT PUSH2 0x67FE JUMPI POP POP PUSH2 0x6809 JUMP JUMPDEST POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x6720 JUMP JUMPDEST POP PUSH2 0x6828 DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x6819 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP4 DUP6 PUSH2 0x7E4B JUMP JUMPDEST DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x6834 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x6714 JUMP JUMPDEST POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP8 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x686C SWAP2 SWAP1 PUSH2 0x89A3 JUMP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 POP SWAP4 POP DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x6956 JUMPI PUSH1 0x40 MLOAD PUSH4 0x51400F0B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0xA2801E16 SWAP1 PUSH3 0x493E0 SWAP1 PUSH2 0x68BF SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x9E83 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x68D7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x6908 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x6905 SWAP2 DUP2 ADD SWAP1 PUSH2 0x91AB JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x694A JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x6936 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x693B JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 SWAP6 POP POP POP POP POP POP PUSH2 0x3DE7 JUMP JUMPDEST SWAP5 POP PUSH2 0x3DE7 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xCA19EBD9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH4 0xCA19EBD9 SWAP1 PUSH3 0x493E0 SWAP1 PUSH2 0x68BF SWAP1 DUP8 SWAP1 DUP12 SWAP1 PUSH1 0x4 ADD PUSH2 0x9A64 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x2 DUP3 DUP5 MLOAD SUB LT ISZERO PUSH2 0x69AF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5CCD SWAP1 PUSH2 0xA00A JUMP JUMPDEST PUSH2 0x69B7 PUSH2 0x827D JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP1 DUP3 ADD DUP4 MSTORE PUSH2 0x1F4 DUP3 MSTORE PUSH2 0xBB8 PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x2710 DUP3 DUP5 ADD MSTORE DUP3 MLOAD PUSH1 0x3 DUP1 DUP3 MSTORE PUSH1 0x80 DUP3 ADD SWAP1 SWAP5 MSTORE SWAP2 SWAP3 SWAP1 SWAP2 SWAP1 DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP PUSH1 0x0 DUP1 DUP7 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x6A0B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 DUP8 DUP8 PUSH1 0x1 ADD DUP2 MLOAD DUP2 LT PUSH2 0x6A26 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 JUMPDEST PUSH1 0x3 DUP2 LT ISZERO PUSH2 0x6B1B JUMPI PUSH1 0x0 DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x1698EE82 DUP6 DUP6 DUP11 DUP7 PUSH1 0x3 DUP2 LT PUSH2 0x6A5B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A7E SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9ECB JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6A96 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x6AAA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x6ACE SWAP2 SWAP1 PUSH2 0x894E JUMP JUMPDEST SWAP1 POP PUSH2 0x6AD9 DUP2 PUSH2 0x7EA3 JUMP JUMPDEST ISZERO PUSH2 0x6B12 JUMPI DUP1 DUP7 DUP7 DUP1 PUSH1 0x1 ADD SWAP8 POP DUP2 MLOAD DUP2 LT PUSH2 0x6AF1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x6A33 JUMP JUMPDEST POP POP POP DUP1 PUSH2 0x6B2B JUMPI POP POP POP PUSH2 0x3DE7 JUMP JUMPDEST DUP6 MLOAD DUP6 PUSH1 0x2 ADD EQ ISZERO PUSH2 0x6C21 JUMPI DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x6B4D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x6B81 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x6B6C JUMPI SWAP1 POP JUMPDEST POP SWAP4 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x6C18 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE SWAP1 PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x6BB9 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP3 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x6BD0 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x6BE4 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x6BF8 JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE PUSH1 0x1 ADD PUSH2 0x6B87 JUMP JUMPDEST POP POP POP POP PUSH2 0x3DE7 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x6C31 DUP9 DUP9 DUP9 PUSH1 0x1 ADD PUSH2 0x6989 JUMP JUMPDEST SWAP1 POP DUP1 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x6C46 JUMPI POP POP POP POP PUSH2 0x3DE7 JUMP JUMPDEST DUP1 MLOAD DUP3 MUL PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x6C5F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x6C93 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x6C7E JUMPI SWAP1 POP JUMPDEST POP SWAP5 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x6E13 JUMPI PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x6E0A JUMPI DUP3 MLOAD DUP3 DUP2 MUL DUP3 ADD SWAP1 DUP5 SWAP1 DUP4 SWAP1 DUP2 LT PUSH2 0x6CC1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD PUSH1 0x1 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x6CE2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x6D0C JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP DUP9 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x6D19 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x6D30 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x6D44 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x6D58 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP PUSH1 0x0 JUMPDEST DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x6D87 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD DUP2 LT ISZERO PUSH2 0x6E00 JUMPI DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x6DA3 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x6DB6 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP10 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x6DCA JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 PUSH1 0x1 ADD DUP2 MLOAD DUP2 LT PUSH2 0x6DE0 JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE PUSH1 0x1 ADD PUSH2 0x6D7B JUMP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x6CA4 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x6C99 JUMP JUMPDEST POP POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x2 DUP4 MLOAD LT ISZERO DUP1 ISZERO PUSH2 0x6E37 JUMPI POP DUP2 MLOAD PUSH1 0x1 ADD DUP4 MLOAD EQ JUMPDEST PUSH2 0x6E53 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5CCD SWAP1 PUSH2 0xA093 JUMP JUMPDEST DUP2 MLOAD PUSH1 0x3 MUL DUP4 MLOAD PUSH1 0x14 MUL ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x6E73 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x6E9E JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x20 DUP2 ADD PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x5DCB JUMPI DUP1 ISZERO PUSH2 0x6F4D JUMPI PUSH1 0x0 DUP5 PUSH1 0x1 DUP4 SUB DUP2 MLOAD DUP2 LT PUSH2 0x6EC8 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDDCA3F43 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6F08 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x6F1C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x6F40 SWAP2 SWAP1 PUSH2 0x9695 JUMP JUMPDEST PUSH1 0xE8 SHL DUP4 MSTORE POP PUSH1 0x3 SWAP1 SWAP2 ADD SWAP1 JUMPDEST PUSH1 0x0 DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x6F5B JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD PUSH1 0x60 SHL DUP4 MSTORE POP PUSH1 0x14 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x6EA8 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MUL DUP4 ISZERO DUP1 ISZERO SWAP1 PUSH2 0x6F97 JUMPI POP DUP3 DUP5 DUP3 DUP2 PUSH2 0x6F93 JUMPI INVALID JUMPDEST DIV EQ ISZERO JUMPDEST ISZERO PUSH2 0x6FA6 JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x5DCE JUMP JUMPDEST PUSH8 0x6F05B59D3B20000 DUP2 ADD DUP2 DUP2 LT ISZERO PUSH2 0x6FC4 JUMPI PUSH1 0x0 SWAP3 POP POP POP PUSH2 0x5DCE JUMP JUMPDEST PUSH8 0xDE0B6B3A7640000 SWAP1 DIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x6FF0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x701A JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x2D92 JUMPI DUP3 PUSH1 0x1 DUP3 DUP6 MLOAD SUB SUB DUP2 MLOAD DUP2 LT PUSH2 0x703B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x704F JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE PUSH1 0x1 ADD PUSH2 0x7020 JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x7088 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x70B2 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x2D92 JUMPI DUP3 PUSH1 0x1 DUP3 DUP6 MLOAD SUB SUB DUP2 MLOAD DUP2 LT PUSH2 0x70D3 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x70E7 JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE PUSH1 0x1 ADD PUSH2 0x70B8 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x7120 SWAP2 SWAP1 PUSH2 0x896A JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x713A SWAP2 SWAP1 PUSH2 0x894E JUMP JUMPDEST SWAP1 POP ADDRESS PUSH4 0xE8E4AF09 DUP4 DUP6 DUP5 PUSH2 0x714E DUP11 PUSH2 0x7E0A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x716D SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9AC2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7185 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x71BA JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x71B7 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x915D JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x71FB JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x71E8 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x71ED JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 SWAP5 POP POP POP POP POP PUSH2 0x3DE7 JUMP JUMPDEST DUP1 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x7208 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP5 POP POP POP POP POP PUSH2 0x3DE7 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1257 DUP4 PUSH2 0x63E9 PUSH2 0x722F DUP3 PUSH1 0x1 PUSH2 0x7DEB JUMP JUMPDEST PUSH2 0x7239 DUP9 DUP8 PUSH2 0x7D6F JUMP JUMPDEST SWAP1 PUSH2 0x7DA5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x12 SWAP1 POP PUSH1 0x0 PUSH1 0x60 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x4 DUP2 MSTORE PUSH1 0x20 ADD PUSH4 0x313CE567 PUSH1 0xE0 SHL DUP2 MSTORE POP PUSH1 0x40 MLOAD PUSH2 0x727D SWAP2 SWAP1 PUSH2 0x9A34 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x72B8 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x72BD JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x72D1 JUMPI POP PUSH1 0x20 DUP2 MLOAD LT ISZERO JUMPDEST ISZERO PUSH2 0x72E4 JUMPI PUSH2 0x72E1 DUP2 PUSH1 0x0 PUSH2 0x758D JUMP JUMPDEST SWAP3 POP JUMPDEST POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD9638D36 DUP12 PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7321 SWAP2 SWAP1 PUSH2 0x9E83 JUMP JUMPDEST PUSH1 0xA0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7339 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x734D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x7371 SWAP2 SWAP1 PUSH2 0x9710 JUMP JUMPDEST SWAP5 POP SWAP5 POP POP POP SWAP3 POP DUP10 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x7488 JUMPI PUSH1 0x0 DUP8 SWAP1 POP PUSH1 0x0 PUSH2 0x7421 DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x568D4B6F PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x73DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x73EE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x7412 SWAP2 SWAP1 PUSH2 0x91AB JUMP JUMPDEST PUSH8 0xDE0B6B3A7640000 SWAP1 PUSH2 0x7DEB JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x743B DUP3 PUSH2 0x63E9 DUP6 PUSH8 0xDE0B6B3A7640000 PUSH2 0x7D6F JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x7459 PUSH12 0x33B2E3C9FD0803CE8000000 PUSH2 0x6342 DUP10 DUP6 PUSH2 0x7DA5 JUMP JUMPDEST SWAP1 POP DUP6 DUP2 LT PUSH2 0x7472 JUMPI PUSH1 0x0 SWAP8 POP POP POP POP POP POP POP POP PUSH2 0x6516 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x63FD PUSH1 0x1 PUSH2 0x7239 DUP6 PUSH5 0xE8D4A51000 PUSH2 0x7DC1 JUMP JUMPDEST DUP10 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x756D JUMPI PUSH1 0x0 PUSH2 0x74B7 DUP9 PUSH5 0xE8D4A51000 PUSH2 0x7D6F JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x74F7 DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xFAE036D5 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x64B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x7511 PUSH8 0xDE0B6B3A7640000 PUSH2 0x63E9 DUP6 DUP6 PUSH2 0x7D6F JUMP JUMPDEST SWAP1 POP DUP6 DUP2 GT ISZERO PUSH2 0x752A JUMPI PUSH1 0x0 SWAP7 POP POP POP POP POP POP POP PUSH2 0x6516 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7546 PUSH12 0x33B2E3C9FD0803CE8000000 PUSH2 0x6342 DUP10 DUP6 PUSH2 0x7DEB JUMP JUMPDEST SWAP1 POP DUP5 DUP2 GT PUSH2 0x755F JUMPI PUSH1 0x0 SWAP8 POP POP POP POP POP POP POP POP PUSH2 0x6516 JUMP JUMPDEST POP SWAP6 POP PUSH2 0x6516 SWAP5 POP POP POP POP POP JUMP JUMPDEST POP PUSH1 0x0 SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x7588 DUP4 DUP4 DUP4 PUSH2 0x80AF JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3DE7 DUP4 DUP4 PUSH2 0x80D6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x75A4 PUSH2 0x825D JUMP JUMPDEST DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x75B8 SWAP2 SWAP1 PUSH2 0x9257 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x75D2 SWAP2 SWAP1 PUSH2 0x923B JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH4 0x205E01D7 PUSH1 0xE1 SHL DUP6 DUP8 DUP7 PUSH2 0x6574 DUP13 PUSH2 0x7E0A JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH1 0x20 ADD MLOAD SWAP1 POP PUSH1 0x60 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x910FFC71 DUP8 PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x762B JUMPI DUP7 PUSH2 0x7641 JUMP JUMPDEST PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE JUMPDEST DUP9 PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x7664 JUMPI DUP7 PUSH2 0x767A JUMP JUMPDEST PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP2 DUP3 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP7 SWAP1 SHL AND SWAP1 SWAP2 MSTORE PUSH2 0x76AE SWAP3 SWAP2 SWAP1 PUSH1 0x1 SWAP1 PUSH1 0x24 DUP2 ADD PUSH2 0x9B44 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x76C6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x76DA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x7702 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x8D9E JUMP JUMPDEST POP POP SWAP1 POP DUP1 MLOAD DUP7 PUSH1 0x0 ADD MLOAD LT PUSH2 0x771E JUMPI POP PUSH1 0x0 SWAP2 POP PUSH2 0x3DE7 SWAP1 POP JUMP JUMPDEST DUP1 DUP7 PUSH1 0x0 ADD MLOAD DUP2 MLOAD DUP2 LT PUSH2 0x772E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP3 POP PUSH1 0xF8 DUP4 SWAP1 SHR PUSH1 0x0 SHR PUSH1 0xBB EQ ISZERO PUSH2 0x1A23 JUMPI POP PUSH1 0x0 SWAP2 POP PUSH2 0x3DE7 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x775F PUSH2 0x829B JUMP JUMPDEST DUP5 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x7773 SWAP2 SWAP1 PUSH2 0x8A51 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP7 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x778D SWAP2 SWAP1 PUSH2 0x8A51 JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0x3C7B5FE9 PUSH1 0xE2 SHL DUP2 MSTORE SWAP1 SWAP2 POP ADDRESS SWAP1 PUSH4 0xF1ED7FA4 SWAP1 PUSH2 0x77BA SWAP1 DUP6 SWAP1 DUP6 SWAP1 DUP9 SWAP1 DUP12 SWAP1 PUSH1 0x4 ADD PUSH2 0xA177 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x77D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x7802 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x77FF SWAP2 DUP2 ADD SWAP1 PUSH2 0x91AB JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x7830 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x71E8 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x71ED JUMP JUMPDEST SWAP4 POP PUSH2 0x3DE7 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x57A281DC DUP7 DUP7 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x786E SWAP3 SWAP2 SWAP1 PUSH2 0x9A7D JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7886 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x789A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x78C2 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x8D06 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 SWAP2 POP DUP1 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x795B JUMPI PUSH1 0x40 MLOAD PUSH4 0x15E8A077 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND SWAP1 PUSH4 0x57A281DC SWAP1 PUSH2 0x7900 SWAP1 DUP8 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x9A7D JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7918 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x792C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x7954 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x8D06 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 SWAP2 POP JUMPDEST DUP1 MLOAD DUP7 LT PUSH2 0x7970 JUMPI PUSH1 0x0 DUP1 SWAP3 POP SWAP3 POP POP PUSH2 0x5FFD JUMP JUMPDEST DUP1 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x797C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP3 POP POP SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP7 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x79AA SWAP2 SWAP1 PUSH2 0x8A01 JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP DUP1 ISZERO PUSH2 0x7A4E JUMPI PUSH1 0x40 MLOAD PUSH4 0x3CD0243B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x79A04876 SWAP1 PUSH3 0x493E0 SWAP1 PUSH2 0x79EA SWAP1 PUSH1 0x0 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x9A64 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7A01 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x7A32 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x7A2F SWAP2 DUP2 ADD SWAP1 PUSH2 0x96B8 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x7A42 JUMPI PUSH1 0x0 SWAP4 POP POP POP POP PUSH2 0x3DE7 JUMP JUMPDEST POP SWAP4 POP PUSH2 0x3DE7 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x66410A21 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x66410A21 SWAP1 PUSH3 0x493E0 SWAP1 PUSH2 0x79EA SWAP1 PUSH1 0x0 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x9A64 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x7A9B SWAP2 SWAP1 PUSH2 0x896A JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x7AB5 SWAP2 SWAP1 PUSH2 0x894E JUMP JUMPDEST SWAP1 POP ADDRESS PUSH4 0x30D6570D DUP4 DUP6 DUP5 PUSH2 0x714E DUP11 PUSH2 0x7E0A JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP6 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x7AF1 SWAP2 SWAP1 PUSH2 0x9A50 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x7B2F SWAP2 SWAP1 PUSH2 0x9A34 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x7B6A JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x7B6F JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x7B83 JUMPI POP PUSH1 0x20 DUP2 MLOAD LT ISZERO JUMPDEST ISZERO PUSH2 0x5DCB JUMPI PUSH2 0x12C5 DUP2 PUSH1 0x0 PUSH2 0x758D JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x7BAC SWAP2 SWAP1 PUSH2 0x896A JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x7BC6 SWAP2 SWAP1 PUSH2 0x894E JUMP JUMPDEST SWAP1 POP ADDRESS PUSH4 0xA4698417 PUSH3 0x61A80 DUP5 DUP7 DUP6 PUSH2 0x7BDE DUP12 PUSH2 0x7E0A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP7 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7BFD SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9AC2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7C15 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x71BA JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x71B7 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x915D JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDD62ED3E PUSH1 0xE0 SHL DUP7 DUP7 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x7C72 SWAP3 SWAP2 SWAP1 PUSH2 0x9A7D JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x7CB0 SWAP2 SWAP1 PUSH2 0x9A34 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x7CEB JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x7CF0 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x7D04 JUMPI POP PUSH1 0x20 DUP2 MLOAD LT ISZERO JUMPDEST ISZERO PUSH2 0x1A23 JUMPI PUSH2 0x6516 DUP2 PUSH1 0x0 PUSH2 0x758D JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5DCE DUP3 PUSH2 0x723F JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x7D38 SWAP2 SWAP1 PUSH2 0x896A JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP1 DUP7 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x7D53 SWAP2 SWAP1 PUSH2 0x896A JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x7D63 DUP5 DUP5 DUP4 DUP10 PUSH2 0x3F14 JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x7D7E JUMPI POP PUSH1 0x0 PUSH2 0x5DCE JUMP JUMPDEST DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 PUSH2 0x7D8B JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x3DE7 JUMPI PUSH2 0x3DE7 PUSH2 0x7DA0 PUSH1 0x1 DUP7 DUP7 PUSH2 0x8100 JUMP JUMPDEST PUSH2 0x815A JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x3DE7 JUMPI PUSH2 0x3DE7 PUSH2 0x7DA0 PUSH1 0x0 DUP7 DUP7 PUSH2 0x8100 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x7DD7 JUMPI PUSH2 0x7DD7 PUSH2 0x7DA0 PUSH1 0x3 DUP6 DUP6 PUSH2 0x8100 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP2 PUSH2 0x7DE2 JUMPI INVALID JUMPDEST DIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x7E04 JUMPI PUSH2 0x7E04 PUSH2 0x7DA0 PUSH1 0x2 DUP6 DUP6 PUSH2 0x8100 JUMP JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP2 PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP2 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x7E3A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP4 ISZERO DUP1 PUSH2 0x7E58 JUMPI POP DUP2 ISZERO JUMPDEST DUP1 PUSH2 0x7E61 JUMPI POP DUP3 ISZERO JUMPDEST ISZERO PUSH2 0x7E6E JUMPI POP PUSH1 0x0 PUSH2 0x3DE7 JUMP JUMPDEST DUP4 DUP3 MUL DUP3 DUP6 DUP3 DUP2 PUSH2 0x7E7B JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x7E8B JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x3DE7 JUMP JUMPDEST DUP4 PUSH1 0x1 DUP6 SUB DUP3 ADD DUP2 PUSH2 0x7E99 JUMPI INVALID JUMPDEST DIV SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 EXTCODESIZE DUP1 PUSH2 0x7EB6 JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0xC08 JUMP JUMPDEST POP DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDFE1681 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7EF0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x7F04 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x7F28 SWAP2 SWAP1 PUSH2 0x894E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x70A08231 DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7F53 SWAP2 SWAP1 PUSH2 0x9A50 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7F6B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x7F7F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x7FA3 SWAP2 SWAP1 PUSH2 0x91AB JUMP JUMPDEST PUSH2 0x7FAF JUMPI POP PUSH1 0x0 PUSH2 0xC08 JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD21220A7 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7FE8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x7FFC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x8020 SWAP2 SWAP1 PUSH2 0x894E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x70A08231 DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x804B SWAP2 SWAP1 PUSH2 0x9A50 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x8063 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x8077 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x809B SWAP2 SWAP1 PUSH2 0x91AB JUMP JUMPDEST PUSH2 0x80A7 JUMPI POP PUSH1 0x0 PUSH2 0xC08 JUMP JUMPDEST POP PUSH1 0x1 SWAP2 SWAP1 POP JUMP JUMPDEST DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO PUSH2 0x80CE JUMPI PUSH2 0x80CE PUSH2 0x7DA0 PUSH1 0x5 DUP6 MLOAD DUP6 PUSH1 0x20 ADD PUSH2 0x8162 JUMP JUMPDEST SWAP2 ADD PUSH1 0x20 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO PUSH2 0x80F7 JUMPI PUSH2 0x80F7 PUSH2 0x7DA0 PUSH1 0x5 DUP6 MLOAD DUP6 PUSH1 0x20 ADD PUSH2 0x8162 JUMP JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH4 0xE946C1BB PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x811F SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9F17 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH1 0x60 PUSH4 0x28006595 PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x811F SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9F38 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP1 NOT AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 SWAP1 PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY POP SWAP2 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x5DCE DUP2 PUSH2 0xA396 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x8300 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x8313 PUSH2 0x830E DUP3 PUSH2 0xA317 JUMP JUMPDEST PUSH2 0xA2F1 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x8334 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x835C JUMPI DUP2 CALLDATALOAD PUSH2 0x834A DUP2 PUSH2 0xA396 JUMP JUMPDEST DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x8337 JUMP JUMPDEST POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x8377 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x8385 PUSH2 0x830E DUP3 PUSH2 0xA317 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x835C JUMPI PUSH2 0x83AD DUP9 DUP5 DUP5 CALLDATALOAD DUP11 ADD ADD PUSH2 0x82F0 JUMP JUMPDEST DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x8396 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x83CF JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x83DD PUSH2 0x830E DUP3 PUSH2 0xA317 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x835C JUMPI PUSH2 0x8405 DUP9 DUP5 DUP5 CALLDATALOAD DUP11 ADD ADD PUSH2 0x85AE JUMP JUMPDEST DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x83EE JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x8427 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x8435 PUSH2 0x830E DUP3 PUSH2 0xA317 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x8456 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x835C JUMPI DUP2 CALLDATALOAD PUSH2 0x846C DUP2 PUSH2 0xA396 JUMP JUMPDEST DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x8459 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x848E JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x849C PUSH2 0x830E DUP3 PUSH2 0xA317 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD PUSH1 0x80 DUP1 DUP6 MUL DUP8 ADD DUP4 ADD DUP9 LT ISZERO PUSH2 0x84BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x84E6 JUMPI PUSH2 0x84D4 DUP10 DUP5 PUSH2 0x88AD JUMP JUMPDEST DUP6 MSTORE SWAP4 DUP4 ADD SWAP4 SWAP2 DUP2 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x84C2 JUMP JUMPDEST POP POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x8502 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x8510 PUSH2 0x830E DUP3 PUSH2 0xA317 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x8531 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x835C JUMPI DUP2 CALLDATALOAD DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x8534 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x8560 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x856E PUSH2 0x830E DUP3 PUSH2 0xA317 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x858F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x835C JUMPI DUP2 MLOAD DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x8592 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x85BE JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x85CC PUSH2 0x830E DUP3 PUSH2 0xA336 JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x85E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP5 ADD CALLDATACOPY PUSH1 0x0 SWAP1 DUP3 ADD PUSH1 0x20 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x860C JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x861A PUSH2 0x830E DUP3 PUSH2 0xA336 JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x8631 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2C9F DUP2 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP7 ADD PUSH2 0xA359 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x2 DUP2 LT PUSH2 0x5DCE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x8662 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x866C PUSH1 0x60 PUSH2 0xA2F1 JUMP JUMPDEST SWAP1 POP DUP2 CALLDATALOAD PUSH2 0x8679 DUP2 PUSH2 0xA396 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH2 0x8689 DUP2 PUSH2 0xA3B9 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP3 ADD CALLDATALOAD PUSH2 0x869C DUP2 PUSH2 0xA3B9 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x86B8 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x86C2 PUSH1 0x60 PUSH2 0xA2F1 JUMP JUMPDEST SWAP1 POP DUP2 MLOAD PUSH2 0x86CF DUP2 PUSH2 0xA396 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x86DF DUP2 PUSH2 0xA3B9 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0x869C DUP2 PUSH2 0xA3B9 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x8703 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x870D PUSH1 0x40 PUSH2 0xA2F1 JUMP JUMPDEST SWAP1 POP DUP2 CALLDATALOAD PUSH2 0x871A DUP2 PUSH2 0xA396 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH2 0x872A DUP2 PUSH2 0xA396 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x8746 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x8750 PUSH1 0xA0 PUSH2 0xA2F1 JUMP JUMPDEST SWAP1 POP DUP2 CALLDATALOAD DUP2 MSTORE PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH2 0x8764 DUP2 PUSH2 0xA396 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP3 ADD CALLDATALOAD PUSH2 0x8777 DUP2 PUSH2 0xA396 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP3 ADD CALLDATALOAD PUSH2 0x878A DUP2 PUSH2 0xA396 JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP3 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x87A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x87B4 DUP5 DUP3 DUP6 ADD PUSH2 0x85AE JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x180 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x87D3 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x87DC DUP2 PUSH2 0xA2F1 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x87E9 DUP4 DUP4 PUSH2 0x82E5 JUMP JUMPDEST DUP2 MSTORE PUSH2 0x87F8 DUP4 PUSH1 0x20 DUP5 ADD PUSH2 0x82E5 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x880A DUP4 PUSH1 0x40 DUP5 ADD PUSH2 0x8910 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x881C DUP4 PUSH1 0x60 DUP5 ADD PUSH2 0x8910 JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH2 0x882E DUP4 PUSH1 0x80 DUP5 ADD PUSH2 0x8910 JUMP JUMPDEST PUSH1 0x80 DUP3 ADD MSTORE PUSH2 0x8840 DUP4 PUSH1 0xA0 DUP5 ADD PUSH2 0x82E5 JUMP JUMPDEST PUSH1 0xA0 DUP3 ADD MSTORE PUSH2 0x8852 DUP4 PUSH1 0xC0 DUP5 ADD PUSH2 0x82E5 JUMP JUMPDEST PUSH1 0xC0 DUP3 ADD MSTORE PUSH2 0x8864 DUP4 PUSH1 0xE0 DUP5 ADD PUSH2 0x82E5 JUMP JUMPDEST PUSH1 0xE0 DUP3 ADD MSTORE PUSH2 0x100 PUSH2 0x8878 DUP5 DUP3 DUP6 ADD PUSH2 0x82E5 JUMP JUMPDEST SWAP1 DUP3 ADD MSTORE PUSH2 0x120 DUP3 DUP2 ADD CALLDATALOAD SWAP1 DUP3 ADD MSTORE PUSH2 0x140 PUSH2 0x8896 DUP5 DUP3 DUP6 ADD PUSH2 0x891B JUMP JUMPDEST DUP2 DUP4 ADD MSTORE POP PUSH2 0x160 DUP1 DUP4 ADD CALLDATALOAD DUP2 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x88BE JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x88C8 PUSH1 0x80 PUSH2 0xA2F1 JUMP JUMPDEST SWAP1 POP DUP2 CALLDATALOAD PUSH1 0x4 DUP2 LT PUSH2 0x88D9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x88EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 DUP3 ADD CALLDATALOAD PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP3 ADD CALLDATALOAD PUSH1 0x60 DUP3 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x5DCE DUP2 PUSH2 0xA3DE JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x5DCE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x8943 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x3DE7 DUP2 PUSH2 0xA396 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x895F JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x3DE7 DUP2 PUSH2 0xA396 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x897C JUMPI DUP1 DUP2 REVERT JUMPDEST DUP3 MLOAD PUSH2 0x8987 DUP2 PUSH2 0xA396 JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 SWAP3 POP PUSH2 0x8998 DUP2 PUSH2 0xA396 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x89B8 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 MLOAD PUSH2 0x89C3 DUP2 PUSH2 0xA396 JUMP JUMPDEST PUSH1 0x20 DUP7 ADD MLOAD SWAP1 SWAP5 POP PUSH2 0x89D4 DUP2 PUSH2 0xA396 JUMP JUMPDEST PUSH1 0x40 DUP7 ADD MLOAD SWAP1 SWAP4 POP PUSH2 0x89E5 DUP2 PUSH2 0xA396 JUMP JUMPDEST PUSH1 0x60 DUP7 ADD MLOAD SWAP1 SWAP3 POP PUSH2 0x89F6 DUP2 PUSH2 0xA396 JUMP JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP1 SWAP4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x8A15 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 MLOAD PUSH2 0x8A20 DUP2 PUSH2 0xA396 JUMP JUMPDEST PUSH1 0x20 DUP6 ADD MLOAD SWAP1 SWAP4 POP PUSH2 0x8A31 DUP2 PUSH2 0xA396 JUMP JUMPDEST PUSH1 0x40 DUP6 ADD MLOAD SWAP1 SWAP3 POP DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x8A46 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x8A63 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH2 0x8A6E DUP2 PUSH2 0xA396 JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x8A8A JUMPI DUP3 DUP4 REVERT JUMPDEST SWAP1 DUP5 ADD SWAP1 PUSH1 0xA0 DUP3 DUP8 SUB SLT ISZERO PUSH2 0x8A9D JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x8AA7 PUSH1 0xA0 PUSH2 0xA2F1 JUMP JUMPDEST DUP3 MLOAD DUP2 MSTORE PUSH1 0x20 DUP4 ADD MLOAD PUSH2 0x8AB9 DUP2 PUSH2 0xA396 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP4 ADD MLOAD PUSH2 0x8ACC DUP2 PUSH2 0xA396 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP4 ADD MLOAD PUSH2 0x8ADF DUP2 PUSH2 0xA396 JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP4 ADD MLOAD DUP3 DUP2 GT ISZERO PUSH2 0x8AF5 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x8B01 DUP9 DUP3 DUP7 ADD PUSH2 0x85FC JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE POP DUP1 SWAP4 POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x8B2B JUMPI DUP3 DUP4 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x8B36 DUP2 PUSH2 0xA396 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x8B46 DUP2 PUSH2 0xA396 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH2 0x8B56 DUP2 PUSH2 0xA396 JUMP JUMPDEST SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH2 0x8B66 DUP2 PUSH2 0xA396 JUMP JUMPDEST SWAP2 POP PUSH1 0x80 DUP7 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x8B80 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x8B8C DUP9 DUP3 DUP10 ADD PUSH2 0x84F2 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x8BAE JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x8BB9 DUP2 PUSH2 0xA396 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x8BC9 DUP2 PUSH2 0xA396 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x8BD9 DUP2 PUSH2 0xA396 JUMP JUMPDEST SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x8BF3 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x8BFF DUP8 DUP3 DUP9 ADD PUSH2 0x84F2 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x8C20 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x8C2B DUP2 PUSH2 0xA396 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x8C3B DUP2 PUSH2 0xA396 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x8C4B DUP2 PUSH2 0xA396 JUMP JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP3 SWAP4 PUSH1 0x60 ADD CALLDATALOAD SWAP3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x8C6F JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x8C7A DUP2 PUSH2 0xA396 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x8C95 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x8CA1 DUP8 DUP4 DUP9 ADD PUSH2 0x82F0 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x8CB6 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x8CC3 DUP7 DUP3 DUP8 ADD PUSH2 0x84F2 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x8CE4 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x8CEF DUP2 PUSH2 0xA396 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH2 0x8B56 DUP2 PUSH2 0xA396 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x8D18 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x8D2D JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 ADD PUSH1 0x1F DUP2 ADD DUP6 SGT PUSH2 0x8D3D JUMPI DUP3 DUP4 REVERT JUMPDEST DUP1 MLOAD PUSH2 0x8D4B PUSH2 0x830E DUP3 PUSH2 0xA317 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP4 DUP2 ADD SWAP1 DUP4 DUP6 ADD DUP6 DUP5 MUL DUP6 ADD DUP7 ADD DUP10 LT ISZERO PUSH2 0x8D67 JUMPI DUP7 DUP8 REVERT JUMPDEST DUP7 SWAP5 POP JUMPDEST DUP4 DUP6 LT ISZERO PUSH2 0x8D92 JUMPI DUP1 MLOAD PUSH2 0x8D7E DUP2 PUSH2 0xA396 JUMP JUMPDEST DUP4 MSTORE PUSH1 0x1 SWAP5 SWAP1 SWAP5 ADD SWAP4 SWAP2 DUP6 ADD SWAP2 DUP6 ADD PUSH2 0x8D6B JUMP JUMPDEST POP SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x8DB2 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x8DC8 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 DUP7 ADD SWAP2 POP DUP7 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x8DDB JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x8DE9 PUSH2 0x830E DUP3 PUSH2 0xA317 JUMP JUMPDEST DUP1 DUP3 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD SWAP3 POP DUP1 DUP7 ADD DUP12 DUP3 DUP4 DUP8 MUL DUP10 ADD ADD GT ISZERO PUSH2 0x8E09 JUMPI DUP8 DUP9 REVERT JUMPDEST DUP8 SWAP7 POP JUMPDEST DUP5 DUP8 LT ISZERO PUSH2 0x8E2B JUMPI DUP1 MLOAD DUP5 MSTORE PUSH1 0x1 SWAP7 SWAP1 SWAP7 ADD SWAP6 SWAP3 DUP2 ADD SWAP3 DUP2 ADD PUSH2 0x8E0D JUMP JUMPDEST POP DUP10 ADD MLOAD SWAP1 SWAP8 POP SWAP4 POP POP POP DUP1 DUP3 GT ISZERO PUSH2 0x8E42 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x8E4F DUP7 DUP3 DUP8 ADD PUSH2 0x8550 JUMP JUMPDEST SWAP3 POP POP PUSH2 0x8E5F DUP6 PUSH1 0x40 DUP7 ADD PUSH2 0x8642 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x8E7A JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x8E90 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x8EA3 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x8EB1 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP7 PUSH1 0x20 DUP1 DUP4 MUL DUP6 ADD ADD GT ISZERO PUSH2 0x8EC4 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH1 0x20 SWAP3 SWAP1 SWAP3 ADD SWAP7 SWAP2 SWAP6 POP SWAP1 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x8EEA JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x8F00 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x8F0C DUP8 DUP4 DUP9 ADD PUSH2 0x83BF JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x8F21 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x8F2E DUP7 DUP3 DUP8 ADD PUSH2 0x83BF JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x8F50 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x8F65 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x1257 DUP5 DUP3 DUP6 ADD PUSH2 0x8417 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x8F83 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x8F98 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x8FA4 DUP6 DUP3 DUP7 ADD PUSH2 0x8417 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x8998 DUP2 PUSH2 0xA396 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x8FC9 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x8FDE JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x8FEA DUP7 DUP3 DUP8 ADD PUSH2 0x8417 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x8FFB DUP2 PUSH2 0xA396 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH2 0x8A46 DUP2 PUSH2 0xA396 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x901D JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x9032 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 ADD PUSH1 0x1F DUP2 ADD DUP6 SGT PUSH2 0x9042 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP1 MLOAD PUSH2 0x9050 PUSH2 0x830E DUP3 PUSH2 0xA317 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP4 DUP2 ADD SWAP1 DUP4 DUP6 ADD DUP6 DUP5 MUL DUP6 ADD DUP7 ADD DUP10 LT ISZERO PUSH2 0x906C JUMPI DUP7 DUP8 REVERT JUMPDEST DUP7 SWAP5 POP JUMPDEST DUP4 DUP6 LT ISZERO PUSH2 0x8D92 JUMPI DUP1 MLOAD DUP4 MSTORE PUSH1 0x1 SWAP5 SWAP1 SWAP5 ADD SWAP4 SWAP2 DUP6 ADD SWAP2 DUP6 ADD PUSH2 0x9070 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x90A2 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x90B8 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 DUP7 ADD SWAP2 POP DUP7 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x90CB JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x90D9 PUSH2 0x830E DUP3 PUSH2 0xA317 JUMP JUMPDEST DUP1 DUP3 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD SWAP3 POP DUP1 DUP7 ADD PUSH2 0x180 DUP13 DUP4 DUP3 DUP9 MUL DUP11 ADD ADD GT ISZERO PUSH2 0x90FC JUMPI DUP9 DUP10 REVERT JUMPDEST DUP9 SWAP8 POP JUMPDEST DUP6 DUP9 LT ISZERO PUSH2 0x9128 JUMPI PUSH2 0x9112 DUP14 DUP4 PUSH2 0x87C0 JUMP JUMPDEST DUP6 MSTORE PUSH1 0x1 SWAP8 SWAP1 SWAP8 ADD SWAP7 SWAP4 DUP3 ADD SWAP4 SWAP1 DUP2 ADD SWAP1 PUSH2 0x9100 JUMP JUMPDEST POP SWAP2 SWAP9 POP DUP10 ADD CALLDATALOAD SWAP5 POP POP POP POP DUP1 DUP3 GT ISZERO PUSH2 0x9140 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x914D DUP7 DUP3 DUP8 ADD PUSH2 0x847E JUMP JUMPDEST SWAP3 POP POP PUSH2 0x8E5F DUP6 PUSH1 0x40 DUP7 ADD PUSH2 0x82E5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x916E JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x9183 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x1257 DUP5 DUP3 DUP6 ADD PUSH2 0x8550 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x91A0 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x3DE7 DUP2 PUSH2 0xA3AB JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x91BC JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x91D4 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x91E9 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x1257 DUP5 DUP3 DUP6 ADD PUSH2 0x85FC JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x9209 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x9214 DUP2 PUSH2 0xA396 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x922F JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x8CA1 DUP8 DUP4 DUP9 ADD PUSH2 0x8417 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x924C JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x3DE7 DUP2 PUSH2 0xA3CF JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x80 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x9269 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH2 0x9274 DUP2 PUSH2 0xA3CF JUMP JUMPDEST SWAP2 POP PUSH2 0x9283 DUP5 PUSH1 0x20 DUP6 ADD PUSH2 0x86A7 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP5 DUP7 SUB PUSH1 0xA0 DUP2 SLT ISZERO PUSH2 0x92A2 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x40 DUP2 SLT ISZERO PUSH2 0x92AF JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x92BA PUSH1 0x40 PUSH2 0xA2F1 JUMP JUMPDEST DUP6 CALLDATALOAD DUP2 MSTORE PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x92CC DUP2 PUSH2 0xA396 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE SWAP4 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x92E1 DUP2 PUSH2 0xA396 JUMP JUMPDEST SWAP3 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH2 0x92F1 DUP2 PUSH2 0xA396 JUMP JUMPDEST SWAP2 POP PUSH1 0x80 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x8BF3 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x9320 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x9336 JUMPI DUP4 DUP5 REVERT JUMPDEST SWAP1 DUP7 ADD SWAP1 PUSH1 0x40 DUP3 DUP10 SUB SLT ISZERO PUSH2 0x9349 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x9353 PUSH1 0x40 PUSH2 0xA2F1 JUMP JUMPDEST PUSH2 0x935D DUP10 DUP5 PUSH2 0x82E5 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP3 DUP2 GT ISZERO PUSH2 0x9370 JUMPI DUP6 DUP7 REVERT JUMPDEST PUSH2 0x937C DUP11 DUP3 DUP7 ADD PUSH2 0x8367 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP DUP1 SWAP7 POP POP PUSH2 0x9393 DUP9 PUSH1 0x20 DUP10 ADD PUSH2 0x82E5 JUMP JUMPDEST SWAP5 POP PUSH2 0x93A2 DUP9 PUSH1 0x40 DUP10 ADD PUSH2 0x82E5 JUMP JUMPDEST SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x93B7 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x8BFF DUP8 DUP3 DUP9 ADD PUSH2 0x84F2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x93D9 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x93E3 DUP7 DUP7 PUSH2 0x8651 JUMP JUMPDEST SWAP4 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH2 0x93F3 DUP2 PUSH2 0xA3CF JUMP JUMPDEST SWAP3 POP PUSH1 0x80 DUP6 ADD CALLDATALOAD PUSH2 0x9403 DUP2 PUSH2 0xA3CF JUMP JUMPDEST SWAP2 POP PUSH1 0xA0 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x8BF3 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x9432 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x943C DUP7 DUP7 PUSH2 0x86F2 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x92E1 DUP2 PUSH2 0xA396 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x9461 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x9477 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x9483 DUP9 DUP4 DUP10 ADD PUSH2 0x8735 JUMP JUMPDEST SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP2 POP PUSH2 0x9495 DUP3 PUSH2 0xA396 JUMP JUMPDEST SWAP1 SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP1 PUSH2 0x94A7 DUP3 PUSH2 0xA396 JUMP JUMPDEST SWAP1 SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD SWAP1 DUP1 DUP3 GT ISZERO PUSH2 0x93B7 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x94D1 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x94E6 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x94F2 DUP8 DUP3 DUP9 ADD PUSH2 0x8735 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x8C3B DUP2 PUSH2 0xA396 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x9518 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x952D JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x9539 DUP8 DUP3 DUP9 ADD PUSH2 0x8735 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x9551 DUP2 PUSH2 0xA396 JUMP JUMPDEST SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH2 0x89F6 DUP2 PUSH2 0xA396 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x220 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x9576 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x9580 DUP6 DUP6 PUSH2 0x87C0 JUMP JUMPDEST SWAP3 POP PUSH2 0x9590 DUP6 PUSH2 0x180 DUP7 ADD PUSH2 0x88AD JUMP JUMPDEST SWAP2 POP PUSH2 0x200 DUP5 ADD CALLDATALOAD PUSH2 0x8A46 DUP2 PUSH2 0xA396 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP5 DUP7 SUB PUSH1 0xC0 DUP2 SLT ISZERO PUSH2 0x95B7 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x60 DUP2 SLT ISZERO PUSH2 0x95C4 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x95CF PUSH1 0x60 PUSH2 0xA2F1 JUMP JUMPDEST DUP6 CALLDATALOAD PUSH2 0x95DA DUP2 PUSH2 0xA396 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP7 DUP2 ADD CALLDATALOAD SWAP1 DUP3 ADD MSTORE PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH2 0x95F4 DUP2 PUSH2 0xA396 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE SWAP4 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH2 0x9609 DUP2 PUSH2 0xA396 JUMP JUMPDEST SWAP3 POP PUSH1 0x80 DUP6 ADD CALLDATALOAD PUSH2 0x9403 DUP2 PUSH2 0xA396 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 DUP6 SUB PUSH1 0xA0 DUP2 SLT ISZERO PUSH2 0x962E JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x60 DUP2 SLT ISZERO PUSH2 0x963B JUMPI DUP2 DUP3 REVERT JUMPDEST POP PUSH2 0x9646 PUSH1 0x60 PUSH2 0xA2F1 JUMP JUMPDEST DUP5 MLOAD DUP2 MSTORE PUSH1 0x20 DUP6 ADD MLOAD PUSH1 0x5 DUP2 LT PUSH2 0x965B JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP6 ADD MLOAD PUSH2 0x966E DUP2 PUSH2 0xA3DE JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP6 ADD MLOAD SWAP1 SWAP4 POP PUSH2 0x9684 DUP2 PUSH2 0xA3DE JUMP JUMPDEST PUSH1 0x80 DUP6 ADD MLOAD SWAP1 SWAP3 POP PUSH2 0x8A46 DUP2 PUSH2 0xA3AB JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x96A6 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH3 0xFFFFFF DUP2 AND DUP2 EQ PUSH2 0x3DE7 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x96CA JUMPI DUP2 DUP3 REVERT JUMPDEST POP POP DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD MLOAD SWAP1 SWAP3 SWAP1 SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x96F0 JUMPI DUP2 DUP3 REVERT JUMPDEST POP POP DUP3 MLOAD PUSH1 0x20 DUP5 ADD MLOAD PUSH1 0x40 DUP6 ADD MLOAD PUSH1 0x60 SWAP1 SWAP6 ADD MLOAD SWAP2 SWAP7 SWAP1 SWAP6 POP SWAP1 SWAP3 POP SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x9727 JUMPI DUP3 DUP4 REVERT JUMPDEST POP POP DUP4 MLOAD PUSH1 0x20 DUP6 ADD MLOAD PUSH1 0x40 DUP7 ADD MLOAD PUSH1 0x60 DUP8 ADD MLOAD PUSH1 0x80 SWAP1 SWAP8 ADD MLOAD SWAP3 SWAP9 SWAP2 SWAP8 POP SWAP6 SWAP5 POP SWAP1 SWAP3 POP SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD DUP4 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x9794 JUMPI DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x976F JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD DUP4 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x9794 JUMPI DUP2 MLOAD DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x97B2 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x97E6 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0xA359 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP4 MSTORE PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x60 DUP3 ADD MLOAD PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP3 ADD MLOAD PUSH1 0xA0 PUSH1 0x80 DUP6 ADD MSTORE PUSH2 0x1257 PUSH1 0xA0 DUP6 ADD DUP3 PUSH2 0x97CE JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 MSTORE PUSH1 0x20 DUP1 DUP3 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 DUP2 AND SWAP2 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP2 DUP3 ADD MLOAD AND SWAP2 ADD MSTORE JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP4 MSTORE PUSH1 0x20 DUP1 DUP4 ADD MLOAD ISZERO ISZERO SWAP1 DUP5 ADD MSTORE PUSH1 0x40 DUP1 DUP4 ADD MLOAD SWAP1 SWAP2 AND SWAP1 DUP4 ADD MSTORE PUSH1 0x60 SWAP1 DUP2 ADD MLOAD ISZERO ISZERO SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP4 MSTORE PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x40 PUSH1 0x20 DUP6 ADD MSTORE PUSH2 0x1257 PUSH1 0x40 DUP6 ADD DUP3 PUSH2 0x97CE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP4 MSTORE PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 DUP3 AND PUSH1 0x20 DUP7 ADD MSTORE DUP1 PUSH1 0x40 DUP6 ADD MLOAD AND PUSH1 0x40 DUP7 ADD MSTORE DUP1 PUSH1 0x60 DUP6 ADD MLOAD AND PUSH1 0x60 DUP7 ADD MSTORE POP POP PUSH1 0x80 DUP3 ADD MLOAD PUSH1 0xA0 PUSH1 0x80 DUP6 ADD MSTORE PUSH2 0x1257 PUSH1 0xA0 DUP6 ADD DUP3 PUSH2 0x97CE JUMP JUMPDEST PUSH2 0x9915 DUP3 DUP3 MLOAD PUSH2 0x974F JUMP JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD PUSH2 0x9927 PUSH1 0x20 DUP5 ADD DUP3 PUSH2 0x974F JUMP JUMPDEST POP PUSH1 0x40 DUP2 ADD MLOAD PUSH2 0x993A PUSH1 0x40 DUP5 ADD DUP3 PUSH2 0x9A0A JUMP JUMPDEST POP PUSH1 0x60 DUP2 ADD MLOAD PUSH2 0x994D PUSH1 0x60 DUP5 ADD DUP3 PUSH2 0x9A0A JUMP JUMPDEST POP PUSH1 0x80 DUP2 ADD MLOAD PUSH2 0x9960 PUSH1 0x80 DUP5 ADD DUP3 PUSH2 0x9A0A JUMP JUMPDEST POP PUSH1 0xA0 DUP2 ADD MLOAD PUSH2 0x9973 PUSH1 0xA0 DUP5 ADD DUP3 PUSH2 0x974F JUMP JUMPDEST POP PUSH1 0xC0 DUP2 ADD MLOAD PUSH2 0x9986 PUSH1 0xC0 DUP5 ADD DUP3 PUSH2 0x974F JUMP JUMPDEST POP PUSH1 0xE0 DUP2 ADD MLOAD PUSH2 0x9999 PUSH1 0xE0 DUP5 ADD DUP3 PUSH2 0x974F JUMP JUMPDEST POP PUSH2 0x100 DUP1 DUP3 ADD MLOAD PUSH2 0x99AD DUP3 DUP6 ADD DUP3 PUSH2 0x974F JUMP JUMPDEST POP POP PUSH2 0x120 DUP2 DUP2 ADD MLOAD SWAP1 DUP4 ADD MSTORE PUSH2 0x140 DUP1 DUP3 ADD MLOAD PUSH2 0x99CD DUP3 DUP6 ADD DUP3 PUSH2 0x9A17 JUMP JUMPDEST POP POP PUSH2 0x160 SWAP1 DUP2 ADD MLOAD SWAP2 ADD MSTORE JUMP JUMPDEST DUP1 MLOAD PUSH2 0x99E6 DUP2 PUSH2 0xA389 JUMP JUMPDEST DUP3 MSTORE PUSH1 0x20 DUP2 DUP2 ADD MLOAD PUSH1 0xFF AND SWAP1 DUP4 ADD MSTORE PUSH1 0x40 DUP1 DUP3 ADD MLOAD SWAP1 DUP4 ADD MSTORE PUSH1 0x60 SWAP1 DUP2 ADD MLOAD SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP4 CALLDATACOPY SWAP2 ADD SWAP1 DUP2 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x9A46 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0xA359 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND DUP2 MSTORE SWAP3 DUP5 AND PUSH1 0x20 DUP5 ADD MSTORE SWAP1 DUP4 AND PUSH1 0x40 DUP4 ADD MSTORE SWAP1 SWAP2 AND PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 DUP2 AND PUSH1 0x20 DUP4 ADD MSTORE DUP4 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x6516 SWAP1 DUP4 ADD DUP5 PUSH2 0x979F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND DUP2 MSTORE SWAP3 DUP5 AND PUSH1 0x20 DUP5 ADD MSTORE SWAP3 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE SWAP1 ISZERO ISZERO PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE DUP3 ISZERO ISZERO PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x6516 SWAP1 DUP4 ADD DUP5 PUSH2 0x97CE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND DUP3 MSTORE DUP6 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0xA0 PUSH1 0x80 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x9BD6 SWAP1 DUP4 ADD DUP5 PUSH2 0x97CE JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND DUP2 MSTORE PUSH1 0x60 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x9C05 SWAP1 DUP4 ADD DUP6 PUSH2 0x975C JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x6516 DUP2 DUP6 PUSH2 0x979F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP2 MSTORE PUSH1 0x0 PUSH2 0x9C2E DUP6 PUSH2 0xA389 JUMP JUMPDEST DUP5 PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x80 PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x9C48 PUSH1 0x80 DUP4 ADD DUP6 PUSH2 0x979F JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0x9BD6 DUP2 DUP6 PUSH2 0x979F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 DUP2 AND DUP3 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x100 SWAP1 PUSH2 0x9C77 DUP12 PUSH2 0xA389 JUMP JUMPDEST DUP11 PUSH1 0x20 DUP6 ADD MSTORE DUP2 PUSH1 0x40 DUP6 ADD MSTORE PUSH2 0x9C8F DUP3 DUP6 ADD DUP12 PUSH2 0x979F JUMP JUMPDEST SWAP2 POP DUP4 DUP3 SUB PUSH1 0x60 DUP6 ADD MSTORE PUSH2 0x9CA3 DUP3 DUP11 PUSH2 0x979F JUMP JUMPDEST SWAP1 DUP9 AND PUSH1 0x80 DUP6 ADD MSTORE SWAP1 POP PUSH2 0x9CB6 DUP7 PUSH2 0xA389 JUMP JUMPDEST DUP6 PUSH1 0xA0 DUP5 ADD MSTORE DUP3 DUP2 SUB PUSH1 0xC0 DUP5 ADD MSTORE PUSH2 0x9CCE DUP2 DUP7 PUSH2 0x979F JUMP JUMPDEST SWAP1 POP DUP3 DUP2 SUB PUSH1 0xE0 DUP5 ADD MSTORE PUSH2 0x9CE2 DUP2 DUP6 PUSH2 0x979F JUMP JUMPDEST SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND DUP2 MSTORE PUSH1 0x40 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x1257 SWAP1 DUP4 ADD DUP5 PUSH2 0x98BD JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 MSTORE PUSH2 0x9D28 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x975C JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x12C5 DUP2 DUP6 PUSH2 0x979F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 MSTORE PUSH2 0x9D4D PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x975C JUMP JUMPDEST SWAP1 POP DUP3 PUSH1 0x20 DUP4 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD PUSH1 0x40 DUP4 MSTORE DUP1 DUP6 MLOAD DUP1 DUP4 MSTORE PUSH1 0x60 DUP6 ADD SWAP2 POP PUSH1 0x20 SWAP3 POP PUSH1 0x60 DUP4 DUP3 MUL DUP7 ADD ADD DUP4 DUP9 ADD DUP6 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x9DB1 JUMPI PUSH1 0x5F NOT DUP9 DUP5 SUB ADD DUP6 MSTORE PUSH2 0x9D9F DUP4 DUP4 MLOAD PUSH2 0x97CE JUMP JUMPDEST SWAP5 DUP7 ADD SWAP5 SWAP3 POP SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x9D83 JUMP JUMPDEST POP POP DUP6 DUP2 SUB DUP5 DUP8 ADD MSTORE PUSH2 0x7D63 DUP2 DUP9 PUSH2 0x979F JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 PUSH1 0x40 SWAP1 DUP2 DUP6 ADD SWAP1 DUP1 DUP5 MUL DUP7 ADD DUP4 ADD DUP8 DUP6 ADD DUP7 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x9E2B JUMPI DUP9 DUP4 SUB PUSH1 0x3F NOT ADD DUP6 MSTORE DUP2 MLOAD DUP1 MLOAD DUP8 DUP6 MSTORE PUSH2 0x9E0C DUP9 DUP7 ADD DUP3 PUSH2 0x97CE JUMP JUMPDEST SWAP2 DUP10 ADD MLOAD ISZERO ISZERO SWAP5 DUP10 ADD SWAP5 SWAP1 SWAP5 MSTORE SWAP5 DUP8 ADD SWAP5 SWAP3 POP SWAP1 DUP7 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x9DE8 JUMP JUMPDEST POP SWAP1 SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x3DE7 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x979F JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST DUP4 ISZERO ISZERO DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x60 PUSH1 0x40 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x12C5 SWAP1 DUP4 ADD DUP5 PUSH2 0x979F JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP3 MSTORE PUSH1 0x60 PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x9C05 PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0x97CE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x3DE7 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x97CE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 MSTORE PUSH2 0x9D4D PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x97CE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH3 0xFFFFFF SWAP1 SWAP2 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND DUP2 MSTORE PUSH1 0x40 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x1257 SWAP1 DUP4 ADD DUP5 PUSH2 0x979F JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH2 0x9F24 DUP6 PUSH2 0xA389 JUMP JUMPDEST SWAP4 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH1 0x8 DUP6 LT PUSH2 0x9F24 JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH1 0xE0 DUP3 ADD PUSH1 0x2 DUP8 LT PUSH2 0x9F56 JUMPI INVALID JUMPDEST DUP7 DUP4 MSTORE PUSH1 0x20 PUSH1 0xE0 DUP2 DUP6 ADD MSTORE DUP2 DUP8 MLOAD DUP1 DUP5 MSTORE PUSH2 0x100 SWAP4 POP DUP4 DUP7 ADD SWAP2 POP DUP4 DUP4 DUP3 MUL DUP8 ADD ADD SWAP4 POP DUP3 DUP10 ADD DUP6 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x9FAD JUMPI PUSH1 0xFF NOT DUP9 DUP8 SUB ADD DUP5 MSTORE PUSH2 0x9F9B DUP7 DUP4 MLOAD PUSH2 0x97FA JUMP JUMPDEST SWAP6 POP SWAP3 DUP5 ADD SWAP3 SWAP1 DUP5 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x9F7F JUMP JUMPDEST POP POP POP POP POP DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x9FC4 DUP2 DUP7 PUSH2 0x975C JUMP JUMPDEST SWAP2 POP POP PUSH2 0x12C5 PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x9869 JUMP JUMPDEST PUSH1 0xF SWAP4 DUP5 SIGNEXTEND DUP2 MSTORE SWAP2 SWAP1 SWAP3 SIGNEXTEND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0xF DUP4 SWAP1 SIGNEXTEND DUP2 MSTORE PUSH1 0x80 DUP2 ADD PUSH2 0x3DE7 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x9837 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x24 SWAP1 DUP3 ADD MSTORE PUSH32 0x556E6973776170563353616D706C65722F746F6B656E5061746820746F6F2073 PUSH1 0x40 DUP3 ADD MSTORE PUSH4 0x1A1BDC9D PUSH1 0xE2 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x455243323042726964676553616D706C65722F494E56414C49445F544F4B454E PUSH1 0x40 DUP3 ADD MSTORE PUSH5 0x2FA820A4A9 PUSH1 0xD9 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x556E6973776170563353616D706C65722F696E76616C69642070617468206C65 PUSH1 0x40 DUP3 ADD MSTORE PUSH5 0x6E67746873 PUSH1 0xD8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1E SWAP1 DUP3 ADD MSTORE PUSH32 0x4B79626572444D4D53616D706C65722F4E4F5F504F4F4C535F464F554E440000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA11B DUP3 DUP8 PUSH2 0x9837 JUMP JUMPDEST DUP5 PUSH1 0xF SIGNEXTEND PUSH1 0x60 DUP4 ADD MSTORE DUP4 PUSH1 0xF SIGNEXTEND PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xC0 PUSH1 0xA0 DUP4 ADD MSTORE PUSH2 0x6516 PUSH1 0xC0 DUP4 ADD DUP5 PUSH2 0x979F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 MSTORE PUSH2 0xA154 PUSH1 0x60 DUP4 ADD DUP7 PUSH2 0x989E JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0xA166 DUP2 DUP7 PUSH2 0x989E JUMP JUMPDEST SWAP2 POP POP DUP3 PUSH1 0x40 DUP4 ADD MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 MSTORE PUSH2 0xA18A PUSH1 0x80 DUP4 ADD DUP8 PUSH2 0x98BD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP6 DUP7 AND PUSH1 0x20 DUP5 ADD MSTORE SWAP4 SWAP1 SWAP5 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 MSTORE PUSH2 0xA1C0 PUSH1 0x80 DUP4 ADD DUP8 PUSH2 0x98BD JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP6 SWAP1 SWAP6 MSTORE POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x40 DUP3 ADD MSTORE SWAP2 AND PUSH1 0x60 SWAP1 SWAP2 ADD MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x200 DUP2 ADD PUSH2 0xA1F5 DUP3 DUP6 PUSH2 0x990A JUMP JUMPDEST PUSH2 0x3DE7 PUSH2 0x180 DUP4 ADD DUP5 PUSH2 0x99DB JUMP JUMPDEST PUSH2 0x220 DUP2 ADD PUSH2 0xA212 DUP3 DUP7 PUSH2 0x990A JUMP JUMPDEST PUSH2 0xA220 PUSH2 0x180 DUP4 ADD DUP6 PUSH2 0x99DB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND PUSH2 0x200 SWAP2 SWAP1 SWAP2 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 DUP3 MSTORE PUSH1 0x40 PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x1257 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x975C JUMP JUMPDEST PUSH1 0x0 DUP5 DUP3 MSTORE PUSH1 0x60 PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0xA26C PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0x975C JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x6516 DUP2 DUP6 PUSH2 0x975C JUMP JUMPDEST SWAP6 DUP7 MSTORE PUSH1 0x20 DUP7 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0x40 DUP6 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH1 0x1E NOT DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0xA2BC JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 ADD DUP1 CALLDATALOAD SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0xA2D5 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x20 ADD SWAP2 POP CALLDATASIZE DUP2 SWAP1 SUB DUP3 SGT ISZERO PUSH2 0xA2EA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0xA30F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0xA32C JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0xA34B JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xA374 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xA35C JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0xA383 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x4 DUP2 LT PUSH2 0xA393 JUMPI INVALID JUMPDEST POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xA393 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xA393 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0xA393 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0xF SIGNEXTEND DUP2 EQ PUSH2 0xA393 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xA393 JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC4 0xFC SWAP11 DUP8 SWAP13 SUB SWAP13 SWAP3 SDIV 0xDF MUL 0xDD MULMOD GT CODESIZE PUSH26 0xA2D3DD5DCA3545889B674C43319A45E964736F6C634300060C00 CALLER ",
                "sourceMap": "1406:1287:7:-:0;;;826:113:25;;;1406:1287:7;;;;;;;;;;;;;;;;;;;;;"
            },
            "deployedBytecode": {
                "immutableReferences": {
                    "8223": [
                        {
                            "length": 32,
                            "start": 11513
                        },
                        {
                            "length": 32,
                            "start": 18719
                        },
                        {
                            "length": 32,
                            "start": 21616
                        }
                    ]
                },
                "linkReferences": {},
                "object": "0x608060405234801561001057600080fd5b506004361061030c5760003560e01c80638e5a0e071161019d578063c25c4138116100e9578063ddd5aa28116100a2578063f1ed7fa41161007c578063f1ed7fa414610751578063f3868e9c14610444578063f5a4994d14610764578063fc9fe41b146107775761030c565b8063ddd5aa2814610718578063e78ac0451461072b578063e8e4af091461073e5761030c565b8063c25c4138146106a6578063c8319084146106b9578063c8c74a37146106cc578063c94706d8146106df578063cc1621c9146106f2578063d9bca372146107055761030c565b8063a0295b8b11610156578063ab00027611610130578063ab0002761461064c578063adc636bf1461065f578063b90cd2fb14610680578063bd71ecf6146106935761030c565b8063a0295b8b14610613578063a469841714610626578063a75e744b146106395761030c565b80638e5a0e07146105765780639209483b1461059857806398777748146105ab5780639bf3ee35146105be5780639e3f05c3146105de5780639ea0ff13146106005761030c565b806340bc03ae1161025c5780635d5b674f11610215578063706e2f9b116101ef578063706e2f9b1461052a57806374c9d2551461053d5780637f7f4f13146105505780638b6d7b44146105635761030c565b80635d5b674f146104e457806366a1ac6b146104f757806368be3cf21461050a5761030c565b806340bc03ae14610457578063494569db1461046a5780634edfb5b21461047d5780635505000a1461049d57806357494b1d146104be5780635aae4e53146104d15761030c565b8063281e3432116102c95780632d753aa4116102a35780632d753aa41461040b57806330d6570d1461041e5780633105fec11461043157806336052391146104445761030c565b8063281e3432146103c357806329fa4aa0146103d65780632aa64319146103e95761030c565b80630496d5dc146103115780631022742b1461033b578063149dab0e1461035b578063162790551461037d5780632339078f1461039d578063252322b3146103b0575b600080fd5b61032461031f366004618c5b565b61078a565b604051610332929190619d15565b60405180910390f35b61034e61034936600461908e565b610930565b6040516103329190619e39565b61036e61036936600461930b565b610aa3565b60405161033293929190619be1565b61039061038b366004618932565b610c03565b6040516103329190619e4c565b61034e6103ab36600461928c565b610c0d565b61034e6103be366004618b99565b610e34565b61034e6103d13660046195a1565b61100a565b61034e6103e43660046193c4565b61125f565b6103fc6103f736600461941d565b6112ce565b60405161033293929190619e57565b61034e610419366004618b14565b6115ab565b61034e61042c366004618b99565b611734565b61034e61043f366004618c5b565b6118a8565b61034e61045236600461941d565b611a2c565b61034e6104653660046193c4565b611abe565b610324610478366004618c5b565b611c3f565b61049061048b366004619503565b611dcb565b6040516103329190619ea5565b6104b06104ab3660046191f5565b612048565b604051610332929190619d5c565b61034e6104cc366004618b99565b612293565b6104b06104df3660046191f5565b6127e5565b61034e6104f2366004618b99565b612a2a565b61034e61050536600461908e565b612a90565b61051d610518366004618e68565b612b45565b6040516103329190619dc4565b61034e610538366004618f3f565b612ca6565b61036e61054b36600461930b565b612d98565b61034e61055e3660046195a1565b612da7565b61034e6105713660046193c4565b612ff4565b610589610584366004618ed6565b613357565b6040516103329392919061a141565b61034e6105a63660046193c4565b613570565b61034e6105b9366004618b99565b613770565b6105d16105cc366004619561565b613ca7565b6040516103329190619e83565b6105f16105ec36600461944c565b613dee565b60405161033293929190619e8c565b6105d161060e366004618c0b565b613f14565b61034e61062136600461928c565b61412a565b61034e610634366004618b99565b614326565b6103fc610647366004618ccd565b61447b565b61034e61065a366004618b99565b6145b8565b61067261066d366004618b99565b614716565b604051610332929190619ef3565b61034e61068e366004618b99565b614866565b61034e6106a1366004618f71565b6148cc565b61034e6106b4366004618b99565b6149c8565b61034e6106c7366004618b99565b614a2e565b61034e6106da366004618c5b565b614beb565b61034e6106ed366004618b99565b614d57565b6105f161070036600461944c565b614eb5565b6103fc610713366004618ccd565b61509b565b6103fc61072636600461941d565b61518a565b61034e610739366004618fb5565b61541d565b61034e61074c366004618b99565b615512565b6105d161075f3660046194bc565b615645565b610672610772366004618b99565b6157e4565b610589610785366004618ed6565b6158d0565b80516060908190806001600160401b03811180156107a757600080fd5b506040519080825280602002602001820160405280156107d1578160200160208202803683370190505b5091506107de8686615ae5565b92508251600014156107f05750610928565b60005b8181101561092557866001600160a01b031663a8312b1d620249f087848151811061081a57fe5b6020026020010151878a6040518563ffffffff1660e01b81526004016108429392919061a253565b60006040518083038187803b15801561085a57600080fd5b5086fa9350505050801561089057506040513d6000823e601f3d908101601f1916820160405261088d919081019061915d565b60015b6108ca573d8080156108be576040519150601f19603f3d011682016040523d82523d6000602084013e6108c3565b606091505b5050610925565b806001885103815181106108da57fe5b60200260200101518483815181106108ee57fe5b60200260200101818152505083828151811061090657fe5b60200260200101516000141561091c5750610925565b506001016107f3565b50505b935093915050565b606083516001600160401b038111801561094957600080fd5b50604051908082528060200260200182016040528015610973578160200160208202803683370190505b50905060005b84518114610a9b57306001600160a01b0316639bf3ee3562030d408784815181106109a057fe5b60200260200101518785815181106109b457fe5b6020026020010151876040518563ffffffff1660e01b81526004016109db9392919061a203565b60206040518083038187803b1580156109f357600080fd5b5086fa93505050508015610a24575060408051601f3d908101601f19168201909252610a21918101906191ab565b60015b610a78573d808015610a52576040519150601f19603f3d011682016040523d82523d6000602084013e610a57565b606091505b506000838381518110610a6657fe5b60200260200101818152505050610a93565b80838381518110610a8557fe5b602002602001018181525050505b600101610979565b509392505050565b600060608086602001515160001415610abb57610bf9565b610ac787878787615dd4565b855191945092506001600160401b0381118015610ae357600080fd5b50604051908082528060200260200182016040528015610b0d578160200160208202803683370190505b50905060005b8151811015610bf757836001600160a01b0316637f9c0ecd620493e085888581518110610b3c57fe5b60200260200101516040518463ffffffff1660e01b8152600401610b61929190619d3a565b60206040518083038187803b158015610b7957600080fd5b5086fa93505050508015610baa575060408051601f3d908101601f19168201909252610ba7918101906191ab565b60015b610bb357610bf7565b80838381518110610bc057fe5b602002602001018181525050828281518110610bd857fe5b602002602001015160001415610bee5750610bf7565b50600101610b13565b505b9450945094915050565b803b15155b919050565b6060610c198385616006565b602085015160408051600280825260608281019093528160200160208202803683370190505090508581600081518110610c4f57fe5b60200260200101906001600160a01b031690816001600160a01b0316815250508481600181518110610c7d57fe5b6001600160a01b03909216602092830291909101909101528351806001600160401b0381118015610cad57600080fd5b50604051908082528060200260200182016040528015610cd7578160200160208202803683370190505b509350610ce2618181565b610cea61603c565b905060005b82811015610e27576060610d168b898481518110610d0957fe5b602002602001015161606b565b604051637c26833760e11b81529091506001600160a01b0387169063f84d066e90610d4c9060009085908a908990600401619f46565b600060405180830381600087803b158015610d6657600080fd5b505af1925050508015610d9b57506040513d6000823e601f3d908101601f19168201604052610d98919081019061900b565b60015b610dd6573d808015610dc9576040519150601f19603f3d011682016040523d82523d6000602084013e610dce565b606091505b505050610e27565b600081600181518110610de557fe5b602002602001015160001902905060008113610e0357505050610e27565b80898581518110610e1057fe5b602002602001018181525050505050600101610cef565b5050505050949350505050565b6060610e408385616006565b8151806001600160401b0381118015610e5857600080fd5b50604051908082528060200260200182016040528015610e82578160200160208202803683370190505b50915060006001600160a01b03861615610ea557610ea087876160fd565b610ea8565b60005b905060006001600160a01b03861615610eca57610ec588876160fd565b610ecd565b60005b905060005b83811015610ffe5760016001600160a01b038816610f3057610f0f84632640f62c60e01b898581518110610f0257fe5b602002602001015161617c565b878481518110610f1b57fe5b60200260200101819350828152505050610fca565b6001600160a01b038916610f5657610f0f836359e9486260e01b898581518110610f0257fe5b6000610f70846359e9486260e01b8a8681518110610f0257fe5b925090508015610fad57610f8c856309903d8b60e21b8361617c565b888581518110610f9857fe5b60200260200101819450828152505050610fc8565b6000878481518110610fbb57fe5b6020026020010181815250505b505b801580610fea5750858281518110610fde57fe5b60200260200101516000145b15610ff55750610ffe565b50600101610ed2565b50505050949350505050565b60606110168385616006565b6000856000015190506000816001600160a01b03166336569e776040518163ffffffff1660e01b815260040160206040518083038186803b15801561105a57600080fd5b505afa15801561106e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611092919061894e565b8451909150806001600160401b03811180156110ad57600080fd5b506040519080825280602002602001820160405280156110d7578160200160208202803683370190505b509350826001600160a01b031663f4b9fa756040518163ffffffff1660e01b815260040160206040518083038186803b15801561111357600080fd5b505afa158015611127573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061114b919061894e565b6001600160a01b0316866001600160a01b0316141580156111ee5750826001600160a01b031663f4b9fa756040518163ffffffff1660e01b815260040160206040518083038186803b1580156111a057600080fd5b505afa1580156111b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111d8919061894e565b6001600160a01b0316876001600160a01b031614155b156111fb57505050611257565b60005b81811015610ffe5760006112298a898b8a868151811061121a57fe5b6020026020010151898961625f565b9050806112365750610ffe565b8086838151811061124357fe5b6020908102919091010152506001016111fe565b949350505050565b6040805160608181019092526112c5908061127e868960808401619ff2565b604051602081830303815290604052815260200186886040516020016112a5929190619ff2565b604051602081830303815290604052815260200161652081525083616653565b95945050505050565b60008060606112dd8587616006565b8351806001600160401b03811180156112f557600080fd5b5060405190808252806020026020018201604052801561131f578160200160208202803683370190505b508851604051630939d86360e11b81529193506001600160a01b031690631273b0c690611352908a908a90600401619a7d565b60206040518083038186803b15801561136a57600080fd5b505afa15801561137e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113a2919061894e565b925060006001600160a01b038416156113c05750600193508661145f565b8851604051630939d86360e11b81526001600160a01b0390911690631273b0c6906113f1908a908c90600401619a7d565b60206040518083038186803b15801561140957600080fd5b505afa15801561141d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611441919061894e565b93506001600160a01b038416611458575050610bf9565b5060009350855b836001600160a01b031663dd58b41c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561149857600080fd5b505afa1580156114ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114d0919061918f565b6114db575050610bf9565b60005b8281101561159e5760006115588a87858e602001516040516020016115069493929190619a97565b6040516020818303038152906040528a88868f602001516040516020016115309493929190619a97565b6040516020818303038152906040528a858151811061154b57fe5b6020026020010151616850565b90508085838151811061156757fe5b60200260200101818152505084828151811061157f57fe5b602002602001015160001415611595575061159e565b506001016114de565b5050509450945094915050565b8051606090806001600160401b03811180156115c657600080fd5b506040519080825280602002602001820160405280156115f0578160200160208202803683370190505b5091506001600160a01b03871661160757506112c5565b60005b818110156117295760006060896001600160a01b031662061a80636e79e13360e01b8b8b8b8b898151811061163b57fe5b60200260200101516040516024016116569493929190619af6565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516116949190619a34565b6000604051808303818686fa925050503d80600081146116d0576040519150601f19603f3d011682016040523d82523d6000602084013e6116d5565b606091505b5091509150600082156116f957818060200190518101906116f691906191ab565b90505b8061170657505050611729565b8086858151811061171357fe5b602090810291909101015250505060010161160a565b505095945050505050565b60606117408385616006565b8151806001600160401b038111801561175857600080fd5b50604051908082528060200260200182016040528015611782578160200160208202803683370190505b50915060005b8181101561189e57866001600160a01b03166372ea9076620c350088888886815181106117b157fe5b60200260200101516040518563ffffffff1660e01b81526004016117d793929190619b78565b60206040518083038187803b1580156117ef57600080fd5b5086fa93505050508015611820575060408051601f3d908101601f1916820190925261181d918101906191ab565b60015b61185a573d80801561184e576040519150601f19603f3d011682016040523d82523d6000602084013e611853565b606091505b505061189e565b8084838151811061186757fe5b60200260200101818152505083828151811061187f57fe5b602002602001015160001415611895575061189e565b50600101611788565b5050949350505050565b8051606090806001600160401b03811180156118c357600080fd5b506040519080825280602002602001820160405280156118ed578160200160208202803683370190505b50915060005b81811015611a2357856001600160a01b031663d06ca61f620249f086848151811061191a57fe5b6020026020010151886040518463ffffffff1660e01b815260040161194092919061a23a565b60006040518083038187803b15801561195857600080fd5b5086fa9350505050801561198e57506040513d6000823e601f3d908101601f1916820160405261198b919081019061915d565b60015b6119c8573d8080156119bc576040519150601f19603f3d011682016040523d82523d6000602084013e6119c1565b606091505b5050611a23565b806001875103815181106119d857fe5b60200260200101518483815181106119ec57fe5b602002602001018181525050838281518110611a0457fe5b602002602001015160001415611a1a5750611a23565b506001016118f3565b50509392505050565b6060611a388385616006565b84602001516001600160a01b0316846001600160a01b0316141580611a6a575084516001600160a01b03848116911614155b15610a9b5781516060816001600160401b0381118015611a8957600080fd5b50604051908082528060200260200182016040528015611ab3578160200160208202803683370190505b509250611257915050565b8051606090806001600160401b0381118015611ad957600080fd5b50604051908082528060200260200182016040528015611b03578160200160208202803683370190505b50915060005b8181101561189e576000606088600001516001600160a01b0316621e84808a602001518a8a8a8881518110611b3a57fe5b6020026020010151604051602401611b5493929190619fd4565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051611b929190619a34565b6000604051808303818686fa925050503d8060008114611bce576040519150601f19603f3d011682016040523d82523d6000602084013e611bd3565b606091505b509150915060008215611bf75781806020019051810190611bf491906191ab565b90505b80868581518110611c0457fe5b602002602001018181525050858481518110611c1c57fe5b602002602001015160001415611c345750505061189e565b505050600101611b09565b80516060908190806001600160401b0381118015611c5c57600080fd5b50604051908082528060200260200182016040528015611c86578160200160208202803683370190505b509150611c938686615ae5565b9250825160001415611ca55750610928565b60005b8181101561092557866001600160a01b0316639e269b68620249f0878481518110611ccf57fe5b6020026020010151878a6040518563ffffffff1660e01b8152600401611cf79392919061a253565b60006040518083038187803b158015611d0f57600080fd5b5086fa93505050508015611d4557506040513d6000823e601f3d908101601f19168201604052611d42919081019061915d565b60015b611d73573d8080156108be576040519150601f19603f3d011682016040523d82523d6000602084013e6108c3565b80600081518110611d8057fe5b6020026020010151848381518110611d9457fe5b602002602001018181525050838281518110611dac57fe5b602002602001015160001415611dc25750610925565b50600101611ca8565b60208481015160408051600180825281830190925260609384929082810190803683370190505090508581600081518110611e0257fe5b602090810291909101015260606000604051908082528060200260200182016040528015611e3a578160200160208202803683370190505b50905087606001516001600160a01b0316866001600160a01b03161415611f2b576040516381efcbdd60e01b81526001600160a01b038416906381efcbdd906207a12090611e9390899060019088908890600401619c17565b60006040518083038187803b158015611eab57600080fd5b5086fa93505050508015611ee157506040513d6000823e601f3d908101601f19168201604052611ede91908101906191c3565b60015b611f1b573d808015611f0f576040519150601f19603f3d011682016040523d82523d6000602084013e611f14565b606091505b5050611f26565b935061125792505050565b61203d565b87606001516001600160a01b0316856001600160a01b03161415611f81576040516361e597f960e01b81526001600160a01b038416906361e597f9906207a12090611e93908a9060019088908890600401619c17565b6040516302b9a6cd60e11b81526001600160a01b038416906305734d9a906207a12090611fc1908a90600190889088908d90849084908490600401619c5a565b60006040518083038187803b158015611fd957600080fd5b5086fa9350505050801561200f57506040513d6000823e601f3d908101601f1916820160405261200c91908101906191c3565b60015b611f1b573d808015610e27576040519150601f19603f3d011682016040523d82523d6000602084013e610e27565b505050949350505050565b60608060606120c9866001600160a01b031663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b15801561208957600080fd5b505afa15801561209d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120c1919061894e565b866000616989565b905083516001600160401b03811180156120e257600080fd5b5060405190808252806020026020018201604052801561210c578160200160208202803683370190505b50915083516001600160401b038111801561212657600080fd5b5060405190808252806020026020018201604052801561215a57816020015b60608152602001906001900390816121455790505b50925060005b84518110156109255760606000805b845181101561224b5760606121978a87848151811061218a57fe5b6020026020010151616e1f565b90508a6001600160a01b031663cdca1753620493e0838c89815181106121b957fe5b60200260200101516040518463ffffffff1660e01b81526004016121de929190619eb8565b602060405180830381600088803b1580156121f857600080fd5b5087f193505050508015612229575060408051601f3d908101601f19168201909252612226918101906191ab565b60015b61223257612242565b808411612240578093508194505b505b5060010161216f565b5080612258575050610925565b8085848151811061226557fe5b6020026020010181815250508186848151811061227e57fe5b60209081029190910101525050600101612160565b80516060908590806001600160401b03811180156122b057600080fd5b506040519080825280602002602001820160405280156122da578160200160208202803683370190505b50604051630bcded8960e21b81529093506001600160a01b03831690632f37b6249061230a908990600401619a50565b60206040518083038186803b15801561232257600080fd5b505afa158015612336573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061235a919061918f565b15806123df5750604051630bcded8960e21b81526001600160a01b03831690632f37b6249061238d908890600401619a50565b60206040518083038186803b1580156123a557600080fd5b505afa1580156123b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123dd919061918f565b155b156123eb575050611257565b6123f36181a8565b60405163f8b2cb4f60e01b81526001600160a01b0384169063f8b2cb4f9061241f908a90600401619a50565b60206040518083038186803b15801561243757600080fd5b505afa15801561244b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061246f91906191ab565b815260405163f8b2cb4f60e01b81526001600160a01b0384169063f8b2cb4f9061249d908990600401619a50565b60206040518083038186803b1580156124b557600080fd5b505afa1580156124c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124ed91906191ab565b6020820152604051634a46c67360e11b81526001600160a01b0384169063948d8ce69061251e908a90600401619a50565b60206040518083038186803b15801561253657600080fd5b505afa15801561254a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061256e91906191ab565b60408083019190915251634a46c67360e11b81526001600160a01b0384169063948d8ce6906125a1908990600401619a50565b60206040518083038186803b1580156125b957600080fd5b505afa1580156125cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125f191906191ab565b816060018181525050826001600160a01b031663d4cadf686040518163ffffffff1660e01b815260040160206040518083038186803b15801561263357600080fd5b505afa158015612647573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061266b91906191ab565b608082015260005b82811015610ffe5761269e82602001516003670de0b6b3a76400008161269557fe5b04600101616f7a565b8682815181106126aa57fe5b602002602001015111156126bd57610ffe565b836001600160a01b031663f8d6aed4620493e084600001518560400151866020015187606001518c88815181106126f057fe5b602002602001015189608001516040518863ffffffff1660e01b815260040161271e9695949392919061a27e565b60206040518083038187803b15801561273657600080fd5b5086fa93505050508015612767575060408051601f3d908101601f19168201909252612764918101906191ab565b60015b6127a1573d808015612795576040519150601f19603f3d011682016040523d82523d6000602084013e61279a565b606091505b5050610ffe565b808683815181106127ae57fe5b6020026020010181815250508582815181106127c657fe5b6020026020010151600014156127dc5750610ffe565b50600101612673565b6060806060612826866001600160a01b031663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b15801561208957600080fd5b9050606061283386616fd7565b905084516001600160401b038111801561284c57600080fd5b50604051908082528060200260200182016040528015612876578160200160208202803683370190505b50925084516001600160401b038111801561289057600080fd5b506040519080825280602002602001820160405280156128c457816020015b60608152602001906001900390816128af5790505b50935060005b8551811015612a1f5760606000805b85518110156129d7576060612909866129048985815181106128f757fe5b602002602001015161706f565b616e1f565b90508b6001600160a01b0316632f80bb1d620493e0838d898151811061292b57fe5b60200260200101516040518463ffffffff1660e01b8152600401612950929190619eb8565b602060405180830381600088803b15801561296a57600080fd5b5087f19350505050801561299b575060408051601f3d908101601f19168201909252612998918101906191ab565b60015b6129a4576129ce565b8315806129b15750808410155b156129cc578093506129c98c89858151811061218a57fe5b94505b505b506001016128d9565b50806129e4575050612a1f565b808684815181106129f157fe5b60200260200101818152505081878481518110612a0a57fe5b602090810291909101015250506001016128ca565b505050935093915050565b6040805160608181019092526112c59080612a49868960808401619a7d565b60405160208183030381529060405281526020018688604051602001612a70929190619a7d565b604051602081830303815290604052815260200161710781525083616653565b6060612a9d848484610930565b905060005b8451811015610a9b57818181518110612ab757fe5b6020026020010151600014612b3d57612b24828281518110612ad557fe5b6020026020010151868381518110612ae957fe5b6020026020010151606001516001600160801b0316878481518110612b0a57fe5b6020026020010151604001516001600160801b031661721b565b828281518110612b3057fe5b6020026020010181815250505b600101612aa2565b6060816001600160401b0381118015612b5d57600080fd5b50604051908082528060200260200182016040528015612b9757816020015b612b846181d7565b815260200190600190039081612b7c5790505b50905060005b808314612c9f576001828281518110612bb257fe5b602090810291909101810151911515910152838382818110612bd057fe5b9050602002810190612be2919061a2a6565b15159050612bef57612c97565b30848483818110612bfc57fe5b9050602002810190612c0e919061a2a6565b604051612c1c929190619a24565b6000604051808303816000865af19150503d8060008114612c59576040519150601f19603f3d011682016040523d82523d6000602084013e612c5e565b606091505b50838381518110612c6b57fe5b6020026020010151602001848481518110612c8257fe5b60209081029190910101519190915290151590525b600101612b9d565b5092915050565b606081516001600160401b0381118015612cbf57600080fd5b50604051908082528060200260200182016040528015612ce9578160200160208202803683370190505b50905060005b82518114612d92577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316838281518110612d2d57fe5b60200260200101516001600160a01b031614612d6d57612d68838281518110612d5257fe5b60200260200101516001600160a01b031661723f565b612d70565b60125b60ff16828281518110612d7f57fe5b6020908102919091010152600101612cef565b50919050565b60006060809450945094915050565b6060612db38385616006565b6000856000015190506000816001600160a01b03166336569e776040518163ffffffff1660e01b815260040160206040518083038186803b158015612df757600080fd5b505afa158015612e0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e2f919061894e565b8451909150806001600160401b0381118015612e4a57600080fd5b50604051908082528060200260200182016040528015612e74578160200160208202803683370190505b509350826001600160a01b031663f4b9fa756040518163ffffffff1660e01b815260040160206040518083038186803b158015612eb057600080fd5b505afa158015612ec4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ee8919061894e565b6001600160a01b0316866001600160a01b031614158015612f8b5750826001600160a01b031663f4b9fa756040518163ffffffff1660e01b815260040160206040518083038186803b158015612f3d57600080fd5b505afa158015612f51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f75919061894e565b6001600160a01b0316876001600160a01b031614155b15612f9857505050611257565b60005b81811015610ffe576000612fc68a898b8a8681518110612fb757fe5b602002602001015189896172eb565b905080612fd35750610ffe565b80868381518110612fe057fe5b602090810291909101015250600101612f9b565b6060600085600001516001600160a01b031663bbd7f25585600f0b6040518263ffffffff1660e01b815260040161302b9190619e83565b60206040518083038186803b15801561304357600080fd5b505afa158015613057573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061307b91906191ab565b8651604051631e01043960e01b81526001600160a01b0390911690631e010439906130ae90600f89900b90600401619e83565b60206040518083038186803b1580156130c657600080fd5b505afa1580156130da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130fe91906191ab565b039050600086600001516001600160a01b031663c582951486600f0b6040518263ffffffff1660e01b81526004016131369190619e83565b60806040518083038186803b15801561314e57600080fd5b505afa158015613162573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061318691906196db565b935050505080601203600a0a828161319a57fe5b85519190049250806001600160401b03811180156131b757600080fd5b506040519080825280602002602001820160405280156131e1578160200160208202803683370190505b50935060005b81811015610ffe57600060608a600001516001600160a01b0316620927c08c602001518c8c8c888151811061321857fe5b602002602001015160405160240161323293929190619fd4565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516132709190619a34565b6000604051808303818686fa925050503d80600081146132ac576040519150601f19603f3d011682016040523d82523d6000602084013e6132b1565b606091505b5091509150600082156132d557818060200190518101906132d291906191ab565b90505b86811061330f57835b8581101561330657878982815181106132f357fe5b60209081029190910101526001016132de565b50505050610ffe565b8088858151811061331c57fe5b60200260200101818152505087848151811061333457fe5b60200260200101516000141561334c57505050610ffe565b5050506001016131e7565b61335f6181ef565b6133676181ef565b600080805b8751811461346c576133b3602089838151811061338557fe5b60200260200101515103878a848151811061339c57fe5b602002602001015161757d9092919063ffffffff16565b60006060306001600160a01b03168a84815181106133cd57fe5b60200260200101516040516133e29190619a34565b6000604051808303816000865af19150503d806000811461341f576040519150601f19603f3d011682016040523d82523d6000602084013e613424565b606091505b5091509150811561346257600061344860208351038361758d90919063ffffffff16565b90508481111561346057838852602088018290529350835b505b505060010161336c565b50806134785750613567565b60005b86518114613564576134ab602088838151811061349457fe5b602002602001015151038389848151811061339c57fe5b60006060306001600160a01b03168984815181106134c557fe5b60200260200101516040516134da9190619a34565b6000604051808303816000865af19150503d8060008114613517576040519150601f19603f3d011682016040523d82523d6000602084013e61351c565b606091505b5091509150811561355a57600061354060208351038361758d90919063ffffffff16565b90508581111561355857838752602087018290529450845b505b505060010161347b565b50505b93509350939050565b60408401516060906001600160e01b0319166135f25760408051606081019091526135eb90806135a4868960808401619ff2565b604051602081830303815290604052815260200186886040516020016135cb929190619ff2565b604051602081830303815290604052815260200161759981525083616653565b9050611257565b8151806001600160401b038111801561360a57600080fd5b50604051908082528060200260200182016040528015613634578160200160208202803683370190505b50915060005b8181101561189e576000606088600001516001600160a01b0316621e84808a604001518a8a8a888151811061366b57fe5b602002602001015160405160240161368593929190619fd4565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516136c39190619a34565b6000604051808303818686fa925050503d80600081146136ff576040519150601f19603f3d011682016040523d82523d6000602084013e613704565b606091505b509150915060008215613728578180602001905181019061372591906191ab565b90505b8086858151811061373557fe5b60200260200101818152505085848151811061374d57fe5b6020026020010151600014156137655750505061189e565b50505060010161363a565b80516060908590806001600160401b038111801561378d57600080fd5b506040519080825280602002602001820160405280156137b7578160200160208202803683370190505b50604051630bcded8960e21b81529093506001600160a01b03831690632f37b624906137e7908990600401619a50565b60206040518083038186803b1580156137ff57600080fd5b505afa158015613813573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613837919061918f565b15806138bc5750604051630bcded8960e21b81526001600160a01b03831690632f37b6249061386a908890600401619a50565b60206040518083038186803b15801561388257600080fd5b505afa158015613896573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138ba919061918f565b155b156138c8575050611257565b6138d06181a8565b60405163f8b2cb4f60e01b81526001600160a01b0384169063f8b2cb4f906138fc908a90600401619a50565b60206040518083038186803b15801561391457600080fd5b505afa158015613928573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061394c91906191ab565b815260405163f8b2cb4f60e01b81526001600160a01b0384169063f8b2cb4f9061397a908990600401619a50565b60206040518083038186803b15801561399257600080fd5b505afa1580156139a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139ca91906191ab565b6020820152604051634a46c67360e11b81526001600160a01b0384169063948d8ce6906139fb908a90600401619a50565b60206040518083038186803b158015613a1357600080fd5b505afa158015613a27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a4b91906191ab565b60408083019190915251634a46c67360e11b81526001600160a01b0384169063948d8ce690613a7e908990600401619a50565b60206040518083038186803b158015613a9657600080fd5b505afa158015613aaa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ace91906191ab565b816060018181525050826001600160a01b031663d4cadf686040518163ffffffff1660e01b815260040160206040518083038186803b158015613b1057600080fd5b505afa158015613b24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b4891906191ab565b608082015260005b82811015610ffe578151613b6c906706f05b59d3b20000616f7a565b868281518110613b7857fe5b60200260200101511115613b8b57610ffe565b836001600160a01b031663ba9530a6620493e084600001518560400151866020015187606001518c8881518110613bbe57fe5b602002602001015189608001516040518863ffffffff1660e01b8152600401613bec9695949392919061a27e565b60206040518083038187803b158015613c0457600080fd5b5086fa93505050508015613c35575060408051601f3d908101601f19168201909252613c32918101906191ab565b60015b613c63573d808015612795576040519150601f19603f3d011682016040523d82523d6000602084013e61279a565b80868381518110613c7057fe5b602002602001018181525050858281518110613c8857fe5b602002602001015160001415613c9e5750610ffe565b50600101613b50565b60008083516003811115613cb757fe5b1480613ccf5750600183516003811115613ccd57fe5b145b80613ce5575060408401516001600160801b0316155b80613cfb575060608401516001600160801b0316155b15613d0857506000613de7565b613d10618209565b600080846001600160a01b0316631fb0979588886040518363ffffffff1660e01b8152600401613d4192919061a1e6565b60a06040518083038186803b158015613d5957600080fd5b505afa158015613d6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d919190619619565b91945092509050600183602001516004811115613daa57fe5b141580613db5575080155b80613dc8575086516001600160a01b0316155b15613dd95760009350505050613de7565b506001600160801b03169150505b9392505050565b6000606080613dfd8587616006565b613e088787876175ed565b925082613e1457610bf9565b60405163276fdad960e11b81523090634edfb5b290613e3d908a9087908b908b9060040161a1ad565b60006040518083038186803b158015613e5557600080fd5b505afa158015613e69573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613e9191908101906191c3565b876080018190525086608001519150613f086040518060600160405280878a604051602001613ec1929190619cf1565b6040516020818303038152906040528152602001888a604051602001613ee8929190619cf1565b604051602081830303815290604052815260200161775481525085616653565b90509450945094915050565b600080856001600160a01b031663901754d786866040518363ffffffff1660e01b8152600401613f45929190619a7d565b60206040518083038186803b158015613f5d57600080fd5b505afa158015613f71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f95919061894e565b90506001600160a01b038116613faf576000915050611257565b60006001600160a01b03861615614041576040516370a0823160e01b81526001600160a01b038716906370a0823190613fec908590600401619a50565b60206040518083038186803b15801561400457600080fd5b505afa158015614018573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061403c91906191ab565b61404d565b816001600160a01b0316315b90508381101561406257600092505050611257565b6040516303c2803f60e31b81526001600160a01b03831690631e1401f890620249f090614097908a908a908a90600401619b78565b60206040518083038187803b1580156140af57600080fd5b5086fa935050505080156140e0575060408051601f3d908101601f191682019092526140dd918101906191ab565b60015b614120573d80801561410e576040519150601f19603f3d011682016040523d82523d6000602084013e614113565b606091505b5060009350505050611257565b9250611257915050565b60606141368385616006565b60208501516040805160028082526060828101909352816020016020820280368337019050509050858160008151811061416c57fe5b60200260200101906001600160a01b031690816001600160a01b031681525050848160018151811061419a57fe5b6001600160a01b03909216602092830291909101909101528351806001600160401b03811180156141ca57600080fd5b506040519080825280602002602001820160405280156141f4578160200160208202803683370190505b5093506141ff618181565b61420761603c565b905060005b82811015610e275760606142268b898481518110610d0957fe5b604051637c26833760e11b81529091506001600160a01b0387169063f84d066e9061425c9060019085908a908990600401619f46565b600060405180830381600087803b15801561427657600080fd5b505af19250505080156142ab57506040513d6000823e601f3d908101601f191682016040526142a8919081019061900b565b60015b6142d9573d808015610dc9576040519150601f19603f3d011682016040523d82523d6000602084013e610dce565b6000816000815181106142e857fe5b602002602001015190506000811361430257505050610e27565b8089858151811061430f57fe5b60200260200101818152505050505060010161420c565b8051606090806001600160401b038111801561434157600080fd5b5060405190808252806020026020018201604052801561436b578160200160208202803683370190505b50915060005b8181101561189e57866001600160a01b031663343fbcdd62061a80888888868151811061439a57fe5b60200260200101516040518563ffffffff1660e01b81526004016143c093929190619b78565b60206040518083038187803b1580156143d857600080fd5b5086fa93505050508015614409575060408051601f3d908101601f19168201909252614406918101906191ab565b60015b614437573d80801561184e576040519150601f19603f3d011682016040523d82523d6000602084013e611853565b8084838151811061444457fe5b60200260200101818152505083828151811061445c57fe5b602002602001015160001415614472575061189e565b50600101614371565b600080606061448a8587616006565b8351806001600160401b03811180156144a257600080fd5b506040519080825280602002602001820160405280156144cc578160200160208202803683370190505b5091506144db8989898961783b565b945092506001600160a01b0383166144f357506145ad565b60005b818110156145aa57600061456489868860405160200161451893929190619b20565b60405160208183030381529060405289878960405160200161453c93929190619b20565b60405160208183030381529060405289858151811061455757fe5b6020026020010151617990565b90508084838151811061457357fe5b60200260200101818152505083828151811061458b57fe5b6020026020010151600014156145a157506145aa565b506001016144f6565b50505b955095509592505050565b60606145c48385616006565b8151806001600160401b03811180156145dc57600080fd5b50604051908082528060200260200182016040528015614606578160200160208202803683370190505b50915060005b8181101561189e57866001600160a01b031663144a2752620f4240878988868151811061463557fe5b60200260200101516040518563ffffffff1660e01b815260040161465b93929190619b78565b60206040518083038187803b15801561467357600080fd5b5086fa935050505080156146a4575060408051601f3d908101601f191682019092526146a1918101906191ab565b60015b6146d2573d80801561184e576040519150601f19603f3d011682016040523d82523d6000602084013e611853565b808483815181106146df57fe5b6020026020010181815250508382815181106146f757fe5b60200260200101516000141561470d575061189e565b5060010161460c565b600060606147248486616006565b8251806001600160401b038111801561473c57600080fd5b50604051908082528060200260200182016040528015614766578160200160208202803683370190505b50915060005b818110156147db57600061479589898989868151811061478857fe5b6020026020010151613f14565b9050808483815181106147a457fe5b6020026020010181815250508382815181106147bc57fe5b6020026020010151600014156147d257506147db565b5060010161476c565b5060405163901754d760e01b81526001600160a01b0388169063901754d79061480a9089908990600401619a7d565b60206040518083038186803b15801561482257600080fd5b505afa158015614836573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061485a919061894e565b92505094509492505050565b6040805160608181019092526112c59080614885868960808401619a7d565b604051602081830303815290604052815260200186886040516020016148ac929190619a7d565b6040516020818303038152906040528152602001617a8281525083616653565b606082516001600160401b03811180156148e557600080fd5b5060405190808252806020026020018201604052801561490f578160200160208202803683370190505b50905060005b83518114612c9f577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031684828151811061495357fe5b60200260200101516001600160a01b03161461499d576149988385838151811061497957fe5b60200260200101516001600160a01b0316617ac990919063ffffffff16565b6149a9565b826001600160a01b0316315b8282815181106149b557fe5b6020908102919091010152600101614915565b6040805160608181019092526112c590806149e7868960808401619a7d565b60405160208183030381529060405281526020018688604051602001614a0e929190619a7d565b6040516020818303038152906040528152602001617b9381525083616653565b6060614a3a8385616006565b8151806001600160401b0381118015614a5257600080fd5b50604051908082528060200260200182016040528015614a7c578160200160208202803683370190505b50915060006001600160a01b03861615614a9f57614a9a87876160fd565b614aa2565b60005b905060006001600160a01b03861615614ac457614abf88876160fd565b614ac7565b60005b905060005b83811015610ffe5760016001600160a01b038816614b1d57614afc846395b68fe760e01b898581518110610f0257fe5b878481518110614b0857fe5b60200260200101819350828152505050614bb7565b6001600160a01b038916614b4357614afc8363cd7724c360e01b898581518110610f0257fe5b6000614b5d856395b68fe760e01b8a8681518110610f0257fe5b925090508015614b9a57614b798463cd7724c360e01b8361617c565b888581518110614b8557fe5b60200260200101819450828152505050614bb5565b6000878481518110614ba857fe5b6020026020010181815250505b505b801580614bd75750858281518110614bcb57fe5b60200260200101516000145b15614be25750610ffe565b50600101614acc565b8051606090806001600160401b0381118015614c0657600080fd5b50604051908082528060200260200182016040528015614c30578160200160208202803683370190505b50915060005b81811015611a2357856001600160a01b0316631f00ca74620249f0868481518110614c5d57fe5b6020026020010151886040518463ffffffff1660e01b8152600401614c8392919061a23a565b60006040518083038187803b158015614c9b57600080fd5b5086fa93505050508015614cd157506040513d6000823e601f3d908101601f19168201604052614cce919081019061915d565b60015b614cff573d8080156119bc576040519150601f19603f3d011682016040523d82523d6000602084013e6119c1565b80600081518110614d0c57fe5b6020026020010151848381518110614d2057fe5b602002602001018181525050838281518110614d3857fe5b602002602001015160001415614d4e5750611a23565b50600101614c36565b6060614d638385616006565b8151806001600160401b0381118015614d7b57600080fd5b50604051908082528060200260200182016040528015614da5578160200160208202803683370190505b50915060005b8181101561189e57866001600160a01b031663ff1fd974620f42408888888681518110614dd457fe5b60200260200101516040518563ffffffff1660e01b8152600401614dfa93929190619b78565b60206040518083038187803b158015614e1257600080fd5b5086fa93505050508015614e43575060408051601f3d908101601f19168201909252614e40918101906191ab565b60015b614e71573d80801561184e576040519150601f19603f3d011682016040523d82523d6000602084013e611853565b80848381518110614e7e57fe5b602002602001018181525050838281518110614e9657fe5b602002602001015160001415614eac575061189e565b50600101614dab565b6000606080614ec48587616006565b614ecf8787876175ed565b925082614edb57610bf9565b60405163276fdad960e11b81523090634edfb5b290614f04908a9087908b908b9060040161a1ad565b60006040518083038186803b158015614f1c57600080fd5b505afa158015614f30573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052614f5891908101906191c3565b608088018190528451909250806001600160401b0381118015614f7a57600080fd5b50604051908082528060200260200182016040528015614fa4578160200160208202803683370190505b50915060005b8181101561508f576000306001600160a01b031663f1ed7fa48b8b8b8b8781518110614fd257fe5b60200260200101516040518563ffffffff1660e01b8152600401614ff9949392919061a177565b60206040518083038186803b15801561501157600080fd5b505afa158015615025573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061504991906191ab565b90508084838151811061505857fe5b60200260200101818152505083828151811061507057fe5b602002602001015160001415615086575061508f565b50600101614faa565b50509450945094915050565b60008060606150aa8587616006565b6150b68888888861783b565b935091506001600160a01b0382166150cd576145ad565b8351806001600160401b03811180156150e557600080fd5b5060405190808252806020026020018201604052801561510f578160200160208202803683370190505b50604080516060810190915290925061517c90806151338987891560808501619b20565b604051602081830303815290604052815260200189868860405160200161515c93929190619b20565b604051602081830303815290604052815260200161799081525086616653565b915050955095509592505050565b60008060606151998587616006565b8351806001600160401b03811180156151b157600080fd5b506040519080825280602002602001820160405280156151db578160200160208202803683370190505b508851604051630939d86360e11b81529193506001600160a01b031690631273b0c69061520e908a908a90600401619a7d565b60206040518083038186803b15801561522657600080fd5b505afa15801561523a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061525e919061894e565b925060006001600160a01b0384161561527c5750600193508661531b565b8851604051630939d86360e11b81526001600160a01b0390911690631273b0c6906152ad908a908c90600401619a7d565b60206040518083038186803b1580156152c557600080fd5b505afa1580156152d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906152fd919061894e565b93506001600160a01b038416615314575050610bf9565b5060009350855b836001600160a01b031663dd58b41c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561535457600080fd5b505afa158015615368573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061538c919061918f565b615397575050610bf9565b61540f60405180606001604052808987858e602001516040516020016153c09493929190619a97565b60405160208183030381529060405281526020018a87858e602001516040516020016153ef9493929190619a97565b604051602081830303815290604052815260200161685081525087616653565b925050509450945094915050565b606083516001600160401b038111801561543657600080fd5b50604051908082528060200260200182016040528015615460578160200160208202803683370190505b50905060005b84518114610a9b577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168582815181106154a457fe5b60200260200101516001600160a01b0316146154f0576154eb84848784815181106154cb57fe5b60200260200101516001600160a01b0316617c489092919063ffffffff16565b6154f3565b60005b8282815181106154ff57fe5b6020908102919091010152600101615466565b8051606090806001600160401b038111801561552d57600080fd5b50604051908082528060200260200182016040528015615557578160200160208202803683370190505b50915060005b8181101561189e57866001600160a01b031663838e6a22620493e0888888868151811061558657fe5b60200260200101516040518563ffffffff1660e01b81526004016155ac93929190619b78565b60206040518083038187803b1580156155c457600080fd5b5086fa935050505080156155f5575060408051601f3d908101601f191682019092526155f2918101906191ab565b60015b615623573d80801561184e576040519150601f19603f3d011682016040523d82523d6000602084013e611853565b8084838151811061563057fe5b6020026020010181815250505060010161555d565b60008460800151516000141561565d57506000611257565b84604001516001600160a01b031663418436bc6207a12087606001516001600160a01b0316876001600160a01b03161461569757866156ad565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee5b88606001516001600160a01b0316876001600160a01b0316146156d057866156e6565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee5b8660008b608001516040518763ffffffff1660e01b815260040161570e959493929190619b9c565b60206040518083038187803b15801561572657600080fd5b5086fa93505050508015615757575060408051601f3d908101601f19168201909252615754918101906191ab565b60015b615795573d808015615785576040519150601f19603f3d011682016040523d82523d6000602084013e61578a565b606091505b506000915050611257565b60006157a085617d14565b60ff16905060006157b087617d14565b60ff169050670de0b6b3a764000081600a0a83600a0a87860202816157d157fe5b04816157d957fe5b049350505050611257565b600060606157f28486616006565b8251806001600160401b038111801561580a57600080fd5b50604051908082528060200260200182016040528015615834578160200160208202803683370190505b50915061589f60405180606001604052808988604051602001615858929190619a7d565b6040516020818303038152906040528152602001898960405160200161587f929190619a7d565b6040516020818303038152906040528152602001617d1f81525085616653565b60405163901754d760e01b81529092506001600160a01b0388169063901754d79061480a9089908990600401619a7d565b6158d86181ef565b6158e06181ef565b6000198060005b865181146159dc57615917602088838151811061590057fe5b602002602001015151038789848151811061339c57fe5b60006060306001600160a01b031689848151811061593157fe5b60200260200101516040516159469190619a34565b6000604051808303816000865af19150503d8060008114615983576040519150601f19603f3d011682016040523d82523d6000602084013e615988565b606091505b509150915081156159d25760006159ac60208351038361758d90919063ffffffff16565b90506000811180156159bd57508481105b156159d057838752602087018290529350835b505b50506001016158e7565b506000198114156159ed5750613567565b60005b8751811461356457615a206020898381518110615a0957fe5b60200260200101515103838a848151811061339c57fe5b60006060306001600160a01b03168a8481518110615a3a57fe5b6020026020010151604051615a4f9190619a34565b6000604051808303816000865af19150503d8060008114615a8c576040519150601f19603f3d011682016040523d82523d6000602084013e615a91565b606091505b50915091508115615adb576000615ab560208351038361758d90919063ffffffff16565b9050600081118015615ac657508581105b15615ad957838852602088018290529450845b505b50506001016159f0565b60606000836001600160a01b031663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b158015615b2257600080fd5b505afa158015615b36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190615b5a919061894e565b905060018351036001600160401b0381118015615b7657600080fd5b50604051908082528060200260200182016040528015615ba0578160200160208202803683370190505b50915060005b8251811015615dcb576060826001600160a01b0316635b1dc86f620249f0878581518110615bd057fe5b6020026020010151888660010181518110615be757fe5b60200260200101516040518463ffffffff1660e01b8152600401615c0c929190619a7d565b60006040518083038187803b158015615c2457600080fd5b5086fa93505050508015615c5a57506040513d6000823e601f3d908101601f19168201604052615c579190810190618d06565b60015b615ca9573d808015615c88576040519150601f19603f3d011682016040523d82523d6000602084013e615c8d565b606091505b50506040805160008152602081019091529350615dce92505050565b6000600182511015615cd65760405162461bcd60e51b8152600401615ccd9061a0d8565b60405180910390fd5b60005b8251811015615dbf576000838281518110615cf057fe5b60200260200101516001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015615d3057600080fd5b505afa158015615d44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190615d6891906191ab565b905082811115615db657809250838281518110615d8157fe5b6020026020010151888781518110615d9557fe5b60200260200101906001600160a01b031690816001600160a01b0316815250505b50600101615cd9565b50505050600101615ba6565b50505b92915050565b6000606085600001516001600160a01b03166321f8a72187600001516001600160a01b0316639232494e6040518163ffffffff1660e01b815260040160206040518083038186803b158015615e2857600080fd5b505afa158015615e3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190615e6091906191ab565b6040518263ffffffff1660e01b8152600401615e7c9190619e83565b60206040518083038186803b158015615e9457600080fd5b505afa158015615ea8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190615ecc919061894e565b915085602001515160001415615ee157615ffd565b6000805b876020015151811015615ffa57600288602001518281518110615f0457fe5b6020026020010151511015615f1857615ff2565b836001600160a01b0316637f9c0ecd620493e08a602001518481518110615f3b57fe5b60200260200101518860018a510381518110615f5357fe5b60200260200101516040518463ffffffff1660e01b8152600401615f78929190619d3a565b60206040518083038187803b158015615f9057600080fd5b5086fa93505050508015615fc1575060408051601f3d908101601f19168201909252615fbe918101906191ab565b60015b615fca57615ff2565b82811115615ff05780925088602001518281518110615fe557fe5b602002602001015193505b505b600101615ee5565b50505b94509492505050565b806001600160a01b0316826001600160a01b031614156160385760405162461bcd60e51b8152600401615ccd9061a04e565b5050565b616044618181565b50604080516080810182523080825260006020830181905292820152606081019190915290565b604080516001808252818301909252606091829190816020015b61608d61822b565b8152602001906001900390816160855790505090506040518060a0016040528085600001518152602001600081526020016001815260200184815260200160405180602001604052806000815250815250816000815181106160eb57fe5b60209081029190910101529392505050565b6040516303795fb160e11b81526000906001600160a01b038416906306f2bf629061612c908590600401619a50565b60206040518083038186803b15801561614457600080fd5b505afa158015616158573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613de7919061894e565b6000806001600160a01b03851661619257610928565b6060856001600160a01b0316620249f086866040516024016161b49190619e83565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516161f29190619a34565b6000604051808303818686fa925050503d806000811461622e576040519150601f19603f3d011682016040523d82523d6000602084013e616233565b606091505b5090925090508115616256578080602001905181019061625391906191ab565b92505b50935093915050565b600080600080846001600160a01b031663d9638d368b602001516040518263ffffffff1660e01b81526004016162959190619e83565b60a06040518083038186803b1580156162ad57600080fd5b505afa1580156162c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906162e59190619710565b94509450505092506000620f424090508a604001516001600160a01b0316896001600160a01b0316141561640d5760006163248964e8d4a51000617d6f565b905060006163486b033b2e3c9fd0803ce80000006163428885617da5565b90617d6f565b90508481106163605760009650505050505050616516565b60006163ef670de0b6b3a76400006163e98c6001600160a01b031663568d4b6f6040518163ffffffff1660e01b815260040160206040518083038186803b1580156163aa57600080fd5b505afa1580156163be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906163e291906191ab565b8690617d6f565b90617dc1565b905060006163fd8483617deb565b9850616516975050505050505050565b8a604001516001600160a01b03168a6001600160a01b0316141561650d57878481111561644257600095505050505050616516565b600061645e6b033b2e3c9fd0803ce80000006163428885617deb565b90508381116164765760009650505050505050616516565b60006164fb8a6001600160a01b031663fae036d56040518163ffffffff1660e01b815260040160206040518083038186803b1580156164b457600080fd5b505afa1580156164c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906164ec91906191ab565b670de0b6b3a764000090617da5565b905060006163fd826163e98688617d6f565b60009450505050505b9695505050505050565b60008061652b61825d565b8580602001905181019061653f9190619257565b91509150600085806020019051810190616559919061923b565b905060006060306322db5ed160e21b8587866165748c617e0a565b604051602401616587949392919061a10f565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516165c59190619a34565b600060405180830381855afa9150503d8060008114616600576040519150601f19603f3d011682016040523d82523d6000602084013e616605565b606091505b50915091508161661d57600095505050505050613de7565b80806020019051810190616631919061915d565b60008151811061663d57fe5b6020026020010151955050505050509392505050565b606081516001600160401b038111801561666c57600080fd5b50604051908082528060200260200182016040528015616696578160200160208202803683370190505b5090508151600014156166a857615dce565b60006166d984600001518560200151856000815181106166c457fe5b6020026020010151876040015163ffffffff16565b9050806166e65750615dce565b60006167038560200151866000015184886040015163ffffffff16565b905080616711575050615dce565b60005b84518110156168475760005b60058110156168095761674786838151811061673857fe5b60200260200101518486617e4b565b93508361675357616809565b61676261271561271086617e4b565b93508361676e57616809565b600061678b88602001518960000151878b6040015163ffffffff16565b9050806167985750616809565b8093508683815181106167a757fe5b602002602001015184106168005760008784815181106167c357fe5b60200260200101516127108986815181106167da57fe5b6020026020010151870302816167ec57fe5b049050600581116167fe575050616809565b505b50600101616720565b5061682885828151811061681957fe5b60200260200101518385617e4b565b84828151811061683457fe5b6020908102919091010152600101616714565b50505092915050565b60008060008060008780602001905181019061686c91906189a3565b9350935093509350816001600160a01b0316846001600160a01b03161415616956576040516351400f0b60e11b81526001600160a01b0384169063a2801e1690620493e0906168bf908a90600401619e83565b60206040518083038187803b1580156168d757600080fd5b5086fa93505050508015616908575060408051601f3d908101601f19168201909252616905918101906191ab565b60015b61694a573d808015616936576040519150601f19603f3d011682016040523d82523d6000602084013e61693b565b606091505b50600095505050505050613de7565b9450613de79350505050565b60405163ca19ebd960e01b81526001600160a01b0382169063ca19ebd990620493e0906168bf9087908b90600401619a64565b606060028284510310156169af5760405162461bcd60e51b8152600401615ccd9061a00a565b6169b761827d565b5060408051606080820183526101f48252610bb860208301526127108284015282516003808252608082019094529192909190816020016020820280368337019050509050600080868681518110616a0b57fe5b602002602001015190506000878760010181518110616a2657fe5b6020026020010151905060005b6003811015616b1b5760008a6001600160a01b0316631698ee8285858a8660038110616a5b57fe5b60200201516040518463ffffffff1660e01b8152600401616a7e93929190619ecb565b60206040518083038186803b158015616a9657600080fd5b505afa158015616aaa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190616ace919061894e565b9050616ad981617ea3565b15616b125780868680600101975081518110616af157fe5b60200260200101906001600160a01b031690816001600160a01b0316815250505b50600101616a33565b50505080616b2b57505050613de7565b8551856002011415616c2157806001600160401b0381118015616b4d57600080fd5b50604051908082528060200260200182016040528015616b8157816020015b6060815260200190600190039081616b6c5790505b50935060005b81811015616c1857604080516001808252818301909252906020808301908036833701905050858281518110616bb957fe5b6020026020010181905250828181518110616bd057fe5b6020026020010151858281518110616be457fe5b6020026020010151600081518110616bf857fe5b6001600160a01b0390921660209283029190910190910152600101616b87565b50505050613de7565b6060616c31888888600101616989565b9050805160001415616c465750505050613de7565b805182026001600160401b0381118015616c5f57600080fd5b50604051908082528060200260200182016040528015616c9357816020015b6060815260200190600190039081616c7e5790505b50945060005b82811015616e135760005b8251811015616e0a578251828102820190849083908110616cc157fe5b6020026020010151516001016001600160401b0381118015616ce257600080fd5b50604051908082528060200260200182016040528015616d0c578160200160208202803683370190505b50888281518110616d1957fe5b6020026020010181905250858381518110616d3057fe5b6020026020010151888281518110616d4457fe5b6020026020010151600081518110616d5857fe5b60200260200101906001600160a01b031690816001600160a01b03168152505060005b848381518110616d8757fe5b602002602001015151811015616e0057848381518110616da357fe5b60200260200101518181518110616db657fe5b6020026020010151898381518110616dca57fe5b60200260200101518260010181518110616de057fe5b6001600160a01b0390921660209283029190910190910152600101616d7b565b5050600101616ca4565b50600101616c99565b50505050509392505050565b60606002835110158015616e37575081516001018351145b616e535760405162461bcd60e51b8152600401615ccd9061a093565b81516003028351601402016001600160401b0381118015616e7357600080fd5b506040519080825280601f01601f191660200182016040528015616e9e576020820181803683370190505b5090506020810160005b8451811015615dcb578015616f4d576000846001830381518110616ec857fe5b60200260200101516001600160a01b031663ddca3f436040518163ffffffff1660e01b815260040160206040518083038186803b158015616f0857600080fd5b505afa158015616f1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190616f409190619695565b60e81b8352506003909101905b6000858281518110616f5b57fe5b602090810291909101015160601b835250601490910190600101616ea8565b60008282028315801590616f97575082848281616f9357fe5b0414155b15616fa6576000915050615dce565b6706f05b59d3b20000810181811015616fc457600092505050615dce565b670de0b6b3a76400009004949350505050565b606081516001600160401b0381118015616ff057600080fd5b5060405190808252806020026020018201604052801561701a578160200160208202803683370190505b50905060005b8251811015612d925782600182855103038151811061703b57fe5b602002602001015182828151811061704f57fe5b6001600160a01b0390921660209283029190910190910152600101617020565b606081516001600160401b038111801561708857600080fd5b506040519080825280602002602001820160405280156170b2578160200160208202803683370190505b50905060005b8251811015612d92578260018285510303815181106170d357fe5b60200260200101518282815181106170e757fe5b6001600160a01b03909216602092830291909101909101526001016170b8565b600080600085806020019051810190617120919061896a565b9150915060008580602001905181019061713a919061894e565b90503063e8e4af0983858461714e8a617e0a565b6040518563ffffffff1660e01b815260040161716d9493929190619ac2565b60006040518083038186803b15801561718557600080fd5b505afa9250505080156171ba57506040513d6000823e601f3d908101601f191682016040526171b7919081019061915d565b60015b6171fb573d8080156171e8576040519150601f19603f3d011682016040523d82523d6000602084013e6171ed565b606091505b506000945050505050613de7565b8060008151811061720857fe5b6020026020010151945050505050613de7565b6000611257836163e961722f826001617deb565b6172398887617d6f565b90617da5565b60006012905060006060836001600160a01b031660405180604001604052806004815260200163313ce56760e01b81525060405161727d9190619a34565b600060405180830381855afa9150503d80600081146172b8576040519150601f19603f3d011682016040523d82523d6000602084013e6172bd565b606091505b50915091508180156172d157506020815110155b156172e4576172e181600061758d565b92505b5050919050565b600080600080846001600160a01b031663d9638d368b602001516040518263ffffffff1660e01b81526004016173219190619e83565b60a06040518083038186803b15801561733957600080fd5b505afa15801561734d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906173719190619710565b945094505050925089604001516001600160a01b0316886001600160a01b031614156174885760008790506000617421886001600160a01b031663568d4b6f6040518163ffffffff1660e01b815260040160206040518083038186803b1580156173da57600080fd5b505afa1580156173ee573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061741291906191ab565b670de0b6b3a764000090617deb565b9050600061743b826163e985670de0b6b3a7640000617d6f565b905060006174596b033b2e3c9fd0803ce80000006163428985617da5565b9050858110617472576000975050505050505050616516565b60006163fd60016172398564e8d4a51000617dc1565b89604001516001600160a01b0316896001600160a01b0316141561756d5760006174b78864e8d4a51000617d6f565b905060006174f7886001600160a01b031663fae036d56040518163ffffffff1660e01b815260040160206040518083038186803b1580156164b457600080fd5b90506000617511670de0b6b3a76400006163e98585617d6f565b90508581111561752a5760009650505050505050616516565b60006175466b033b2e3c9fd0803ce80000006163428985617deb565b905084811161755f576000975050505050505050616516565b509550616516945050505050565b5060009998505050505050505050565b6175888383836180af565b505050565b6000613de783836180d6565b6000806175a461825d565b858060200190518101906175b89190619257565b915091506000858060200190518101906175d2919061923b565b9050600060603063205e01d760e11b8587866165748c617e0a565b600080846020015190506060816001600160a01b031663910ffc7187606001516001600160a01b0316876001600160a01b03161461762b5786617641565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee5b88606001516001600160a01b0316876001600160a01b031614617664578661767a565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee5b604080516000815260208101918290526001600160e01b031960e086901b169091526176ae92919060019060248101619b44565b60006040518083038186803b1580156176c657600080fd5b505afa1580156176da573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526177029190810190618d9e565b50509050805186600001511061771e575060009150613de79050565b8086600001518151811061772e57fe5b6020026020010151925060f883901c60001c60bb1415611a23575060009150613de79050565b60008061775f61829b565b848060200190518101906177739190618a51565b9150915060008680602001905181019061778d9190618a51565b50604051633c7b5fe960e21b8152909150309063f1ed7fa4906177ba908590859088908b9060040161a177565b60206040518083038186803b1580156177d257600080fd5b505afa925050508015617802575060408051601f3d908101601f191682019092526177ff918101906191ab565b60015b617830573d8080156171e8576040519150601f19603f3d011682016040523d82523d6000602084013e6171ed565b9350613de792505050565b6000806060866001600160a01b03166357a281dc86866040518363ffffffff1660e01b815260040161786e929190619a7d565b60006040518083038186803b15801561788657600080fd5b505afa15801561789a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526178c29190810190618d06565b90506001915080516000141561795b576040516315e8a07760e21b81526001600160a01b038816906357a281dc906179009087908990600401619a7d565b60006040518083038186803b15801561791857600080fd5b505afa15801561792c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526179549190810190618d06565b9050600091505b80518610617970576000809250925050615ffd565b80868151811061797c57fe5b602002602001015192505094509492505050565b600080600080868060200190518101906179aa9190618a01565b9250925092508015617a4e57604051633cd0243b60e11b81526001600160a01b038316906379a0487690620493e0906179ea906000908a90600401619a64565b604080518083038187803b158015617a0157600080fd5b5086fa93505050508015617a32575060408051601f3d908101601f19168201909252617a2f918101906196b8565b60015b617a425760009350505050613de7565b509350613de792505050565b6040516366410a2160e01b81526001600160a01b038316906366410a2190620493e0906179ea906000908a90600401619a64565b600080600085806020019051810190617a9b919061896a565b91509150600085806020019051810190617ab5919061894e565b9050306330d6570d83858461714e8a617e0a565b6000806060846001600160a01b03166370a0823160e01b85604051602401617af19190619a50565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051617b2f9190619a34565b600060405180830381855afa9150503d8060008114617b6a576040519150601f19603f3d011682016040523d82523d6000602084013e617b6f565b606091505b5091509150818015617b8357506020815110155b15615dcb576112c581600061758d565b600080600085806020019051810190617bac919061896a565b91509150600085806020019051810190617bc6919061894e565b90503063a469841762061a80848685617bde8b617e0a565b6040518663ffffffff1660e01b8152600401617bfd9493929190619ac2565b60006040518083038187803b158015617c1557600080fd5b5086fa935050505080156171ba57506040513d6000823e601f3d908101601f191682016040526171b7919081019061915d565b6000806060856001600160a01b031663dd62ed3e60e01b8686604051602401617c72929190619a7d565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051617cb09190619a34565b600060405180830381855afa9150503d8060008114617ceb576040519150601f19603f3d011682016040523d82523d6000602084013e617cf0565b606091505b5091509150818015617d0457506020815110155b15611a235761651681600061758d565b6000615dce8261723f565b600080600085806020019051810190617d38919061896a565b9150915060008086806020019051810190617d53919061896a565b91509150617d6384848389613f14565b98975050505050505050565b600082617d7e57506000615dce565b82820282848281617d8b57fe5b0414613de757613de7617da060018686618100565b61815a565b600082820183811015613de757613de7617da060008686618100565b600081617dd757617dd7617da060038585618100565b6000828481617de257fe5b04949350505050565b600082821115617e0457617e04617da060028585618100565b50900390565b604080516001808252818301909252606091602080830190803683370190505090508181600081518110617e3a57fe5b602002602001018181525050919050565b6000831580617e58575081155b80617e61575082155b15617e6e57506000613de7565b83820282858281617e7b57fe5b0414617e8b576000915050613de7565b8360018503820181617e9957fe5b0495945050505050565b6000813b80617eb6576000915050610c08565b50816001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b158015617ef057600080fd5b505afa158015617f04573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190617f28919061894e565b6001600160a01b03166370a08231836040518263ffffffff1660e01b8152600401617f539190619a50565b60206040518083038186803b158015617f6b57600080fd5b505afa158015617f7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190617fa391906191ab565b617faf57506000610c08565b816001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b158015617fe857600080fd5b505afa158015617ffc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190618020919061894e565b6001600160a01b03166370a08231836040518263ffffffff1660e01b815260040161804b9190619a50565b60206040518083038186803b15801561806357600080fd5b505afa158015618077573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061809b91906191ab565b6180a757506000610c08565b506001919050565b81602001835110156180ce576180ce617da06005855185602001618162565b910160200152565b600081602001835110156180f7576180f7617da06005855185602001618162565b50016020015190565b606063e946c1bb60e01b84848460405160240161811f93929190619f17565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915290509392505050565b805160208201fd5b6060632800659560e01b84848460405160240161811f93929190619f38565b60408051608081018252600080825260208201819052918101829052606081019190915290565b6040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b60408051808201909152606081526000602082015290565b604051806040016040528060008152602001606081525090565b6040805160608101909152600080825260208201908152600060209091015290565b6040518060a0016040528060008019168152602001600081526020016000815260200160008152602001606081525090565b604080516060810182526000808252602082018190529181019190915290565b60405180606001604052806003906020820280368337509192915050565b6040518060a001604052806000815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b03168152602001606081525090565b8035615dce8161a396565b600082601f830112618300578081fd5b813561831361830e8261a317565b61a2f1565b81815291506020808301908481018184028601820187101561833457600080fd5b60005b8481101561835c57813561834a8161a396565b84529282019290820190600101618337565b505050505092915050565b600082601f830112618377578081fd5b813561838561830e8261a317565b818152915060208083019084810160005b8481101561835c576183ad888484358a01016182f0565b84529282019290820190600101618396565b600082601f8301126183cf578081fd5b81356183dd61830e8261a317565b818152915060208083019084810160005b8481101561835c57618405888484358a01016185ae565b845292820192908201906001016183ee565b600082601f830112618427578081fd5b813561843561830e8261a317565b81815291506020808301908481018184028601820187101561845657600080fd5b60005b8481101561835c57813561846c8161a396565b84529282019290820190600101618459565b600082601f83011261848e578081fd5b813561849c61830e8261a317565b81815291506020808301908481016080808502870183018810156184bf57600080fd5b60005b858110156184e6576184d489846188ad565b855293830193918101916001016184c2565b50505050505092915050565b600082601f830112618502578081fd5b813561851061830e8261a317565b81815291506020808301908481018184028601820187101561853157600080fd5b60005b8481101561835c57813584529282019290820190600101618534565b600082601f830112618560578081fd5b815161856e61830e8261a317565b81815291506020808301908481018184028601820187101561858f57600080fd5b60005b8481101561835c57815184529282019290820190600101618592565b600082601f8301126185be578081fd5b81356185cc61830e8261a336565b91508082528360208285010111156185e357600080fd5b8060208401602084013760009082016020015292915050565b600082601f83011261860c578081fd5b815161861a61830e8261a336565b915080825283602082850101111561863157600080fd5b612c9f81602084016020860161a359565b805160028110615dce57600080fd5b600060608284031215618662578081fd5b61866c606061a2f1565b905081356186798161a396565b815260208201356186898161a3b9565b6020820152604082013561869c8161a3b9565b604082015292915050565b6000606082840312156186b8578081fd5b6186c2606061a2f1565b905081516186cf8161a396565b815260208201516186df8161a3b9565b6020820152604082015161869c8161a3b9565b600060408284031215618703578081fd5b61870d604061a2f1565b9050813561871a8161a396565b8152602082013561872a8161a396565b602082015292915050565b600060a08284031215618746578081fd5b61875060a061a2f1565b90508135815260208201356187648161a396565b602082015260408201356187778161a396565b6040820152606082013561878a8161a396565b606082015260808201356001600160401b038111156187a857600080fd5b6187b4848285016185ae565b60808301525092915050565b60006101808083850312156187d3578182fd5b6187dc8161a2f1565b9150506187e983836182e5565b81526187f883602084016182e5565b602082015261880a8360408401618910565b604082015261881c8360608401618910565b606082015261882e8360808401618910565b60808201526188408360a084016182e5565b60a08201526188528360c084016182e5565b60c08201526188648360e084016182e5565b60e0820152610100618878848285016182e5565b9082015261012082810135908201526101406188968482850161891b565b818301525061016080830135818301525092915050565b6000608082840312156188be578081fd5b6188c8608061a2f1565b90508135600481106188d957600080fd5b8152602082013560ff811681146188ef57600080fd5b80602083015250604082013560408201526060820135606082015292915050565b8035615dce8161a3de565b80356001600160401b0381168114615dce57600080fd5b600060208284031215618943578081fd5b8135613de78161a396565b60006020828403121561895f578081fd5b8151613de78161a396565b6000806040838503121561897c578081fd5b82516189878161a396565b60208401519092506189988161a396565b809150509250929050565b600080600080608085870312156189b8578182fd5b84516189c38161a396565b60208601519094506189d48161a396565b60408601519093506189e58161a396565b60608601519092506189f68161a396565b939692955090935050565b600080600060608486031215618a15578081fd5b8351618a208161a396565b6020850151909350618a318161a396565b60408501519092508015158114618a46578182fd5b809150509250925092565b60008060408385031215618a63578182fd5b8251618a6e8161a396565b60208401519092506001600160401b0380821115618a8a578283fd5b9084019060a08287031215618a9d578283fd5b618aa760a061a2f1565b825181526020830151618ab98161a396565b60208201526040830151618acc8161a396565b60408201526060830151618adf8161a396565b6060820152608083015182811115618af5578485fd5b618b01888286016185fc565b6080830152508093505050509250929050565b600080600080600060a08688031215618b2b578283fd5b8535618b368161a396565b94506020860135618b468161a396565b93506040860135618b568161a396565b92506060860135618b668161a396565b915060808601356001600160401b03811115618b80578182fd5b618b8c888289016184f2565b9150509295509295909350565b60008060008060808587031215618bae578182fd5b8435618bb98161a396565b93506020850135618bc98161a396565b92506040850135618bd98161a396565b915060608501356001600160401b03811115618bf3578182fd5b618bff878288016184f2565b91505092959194509250565b60008060008060808587031215618c20578182fd5b8435618c2b8161a396565b93506020850135618c3b8161a396565b92506040850135618c4b8161a396565b9396929550929360600135925050565b600080600060608486031215618c6f578081fd5b8335618c7a8161a396565b925060208401356001600160401b0380821115618c95578283fd5b618ca1878388016182f0565b93506040860135915080821115618cb6578283fd5b50618cc3868287016184f2565b9150509250925092565b600080600080600060a08688031215618ce4578283fd5b8535618cef8161a396565b9450602086013593506040860135618b568161a396565b60006020808385031215618d18578182fd5b82516001600160401b03811115618d2d578283fd5b8301601f81018513618d3d578283fd5b8051618d4b61830e8261a317565b8181528381019083850185840285018601891015618d67578687fd5b8694505b83851015618d92578051618d7e8161a396565b835260019490940193918501918501618d6b565b50979650505050505050565b600080600060608486031215618db2578081fd5b83516001600160401b0380821115618dc8578283fd5b818601915086601f830112618ddb578283fd5b8151618de961830e8261a317565b80828252602080830192508086018b828387028901011115618e09578788fd5b8796505b84871015618e2b578051845260019690960195928101928101618e0d565b508901519097509350505080821115618e42578283fd5b50618e4f86828701618550565b925050618e5f8560408601618642565b90509250925092565b60008060208385031215618e7a578182fd5b82356001600160401b0380821115618e90578384fd5b818501915085601f830112618ea3578384fd5b813581811115618eb1578485fd5b8660208083028501011115618ec4578485fd5b60209290920196919550909350505050565b600080600060608486031215618eea578081fd5b83356001600160401b0380821115618f00578283fd5b618f0c878388016183bf565b94506020860135915080821115618f21578283fd5b50618f2e868287016183bf565b925050604084013590509250925092565b600060208284031215618f50578081fd5b81356001600160401b03811115618f65578182fd5b61125784828501618417565b60008060408385031215618f83578182fd5b82356001600160401b03811115618f98578283fd5b618fa485828601618417565b92505060208301356189988161a396565b600080600060608486031215618fc9578081fd5b83356001600160401b03811115618fde578182fd5b618fea86828701618417565b9350506020840135618ffb8161a396565b91506040840135618a468161a396565b6000602080838503121561901d578182fd5b82516001600160401b03811115619032578283fd5b8301601f81018513619042578283fd5b805161905061830e8261a317565b818152838101908385018584028501860189101561906c578687fd5b8694505b83851015618d92578051835260019490940193918501918501619070565b6000806000606084860312156190a2578081fd5b83356001600160401b03808211156190b8578283fd5b818601915086601f8301126190cb578283fd5b81356190d961830e8261a317565b80828252602080830192508086016101808c838288028a010111156190fc578889fd5b8897505b85881015619128576191128d836187c0565b8552600197909701969382019390810190619100565b50919850890135945050505080821115619140578283fd5b5061914d8682870161847e565b925050618e5f85604086016182e5565b60006020828403121561916e578081fd5b81516001600160401b03811115619183578182fd5b61125784828501618550565b6000602082840312156191a0578081fd5b8151613de78161a3ab565b6000602082840312156191bc578081fd5b5051919050565b6000602082840312156191d4578081fd5b81516001600160401b038111156191e9578182fd5b611257848285016185fc565b600080600060608486031215619209578081fd5b83356192148161a396565b925060208401356001600160401b038082111561922f578283fd5b618ca187838801618417565b60006020828403121561924c578081fd5b8151613de78161a3cf565b60008060808385031215619269578182fd5b82516192748161a3cf565b915061928384602085016186a7565b90509250929050565b60008060008084860360a08112156192a2578283fd5b60408112156192af578283fd5b506192ba604061a2f1565b8535815260208601356192cc8161a396565b6020820152935060408501356192e18161a396565b925060608501356192f18161a396565b915060808501356001600160401b03811115618bf3578182fd5b60008060008060808587031215619320578182fd5b84356001600160401b0380821115619336578384fd5b9086019060408289031215619349578384fd5b619353604061a2f1565b61935d89846182e5565b8152602083013582811115619370578586fd5b61937c8a828601618367565b6020830152508096505061939388602089016182e5565b94506193a288604089016182e5565b935060608701359150808211156193b7578283fd5b50618bff878288016184f2565b60008060008060c085870312156193d9578182fd5b6193e38686618651565b935060608501356193f38161a3cf565b925060808501356194038161a3cf565b915060a08501356001600160401b03811115618bf3578182fd5b60008060008060a08587031215619432578182fd5b61943c86866186f2565b935060408501356192e18161a396565b60008060008060808587031215619461578182fd5b84356001600160401b0380821115619477578384fd5b61948388838901618735565b9550602087013591506194958261a396565b9093506040860135906194a78261a396565b909250606086013590808211156193b7578283fd5b600080600080608085870312156194d1578182fd5b84356001600160401b038111156194e6578283fd5b6194f287828801618735565b9450506020850135618c3b8161a396565b60008060008060808587031215619518578182fd5b84356001600160401b0381111561952d578283fd5b61953987828801618735565b9450506020850135925060408501356195518161a396565b915060608501356189f68161a396565b60008060006102208486031215619576578081fd5b61958085856187c0565b92506195908561018086016188ad565b9150610200840135618a468161a396565b60008060008084860360c08112156195b7578283fd5b60608112156195c4578283fd5b506195cf606061a2f1565b85356195da8161a396565b81526020868101359082015260408601356195f48161a396565b6040820152935060608501356196098161a396565b925060808501356194038161a396565b600080600083850360a081121561962e578182fd5b606081121561963b578182fd5b50619646606061a2f1565b8451815260208501516005811061965b578283fd5b6020820152604085015161966e8161a3de565b604082015260608501519093506196848161a3de565b6080850151909250618a468161a3ab565b6000602082840312156196a6578081fd5b815162ffffff81168114613de7578182fd5b600080604083850312156196ca578182fd5b505080516020909101519092909150565b600080600080608085870312156196f0578182fd5b505082516020840151604085015160609095015191969095509092509050565b600080600080600060a08688031215619727578283fd5b5050835160208501516040860151606087015160809097015192989197509594509092509050565b6001600160a01b03169052565b6000815180845260208085019450808401835b838110156197945781516001600160a01b03168752958201959082019060010161976f565b509495945050505050565b6000815180845260208085019450808401835b83811015619794578151875295820195908201906001016197b2565b600081518084526197e681602086016020860161a359565b601f01601f19169290920160200192915050565b600081518352602082015160208401526040820151604084015260608201516060840152608082015160a0608085015261125760a08501826197ce565b80516001600160a01b031682526020808201516001600160e01b03199081169184019190915260409182015116910152565b80516001600160a01b039081168352602080830151151590840152604080830151909116908301526060908101511515910152565b60008151835260208201516040602085015261125760408501826197ce565b600081518352602082015160018060a01b0380821660208601528060408501511660408601528060608501511660608601525050608082015160a0608085015261125760a08501826197ce565b61991582825161974f565b6020810151619927602084018261974f565b50604081015161993a6040840182619a0a565b50606081015161994d6060840182619a0a565b5060808101516199606080840182619a0a565b5060a081015161997360a084018261974f565b5060c081015161998660c084018261974f565b5060e081015161999960e084018261974f565b50610100808201516199ad8285018261974f565b50506101208181015190830152610140808201516199cd82850182619a17565b505061016090810151910152565b80516199e68161a389565b825260208181015160ff169083015260408082015190830152606090810151910152565b6001600160801b03169052565b6001600160401b03169052565b6000828483379101908152919050565b60008251619a4681846020870161a359565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b03948516815292841660208401529083166040830152909116606082015260800190565b6001600160a01b0385811682528481166020830152831660408201526080606082018190526000906165169083018461979f565b6001600160a01b039485168152928416602084015292166040820152606081019190915260800190565b6001600160a01b039384168152919092166020820152901515604082015260600190565b6001600160a01b038581168252841660208201528215156040820152608060608201819052600090616516908301846197ce565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090619bd6908301846197ce565b979650505050505050565b6001600160a01b0384168152606060208201819052600090619c059083018561975c565b8281036040840152616516818561979f565b6001600160a01b03851681526000619c2e8561a389565b84602083015260806040830152619c48608083018561979f565b8281036060840152619bd6818561979f565b6001600160a01b03898116825260009061010090619c778b61a389565b8a6020850152816040850152619c8f8285018b61979f565b91508382036060850152619ca3828a61979f565b90881660808501529050619cb68661a389565b8560a084015282810360c0840152619cce818661979f565b905082810360e0840152619ce2818561979f565b9b9a5050505050505050505050565b6001600160a01b0383168152604060208201819052600090611257908301846198bd565b600060408252619d28604083018561975c565b82810360208401526112c5818561979f565b600060408252619d4d604083018561975c565b90508260208301529392505050565b60006040820160408352808551808352606085019150602092506060838202860101838801855b83811015619db157605f19888403018552619d9f8383516197ce565b94860194925090850190600101619d83565b505085810384870152617d63818861979f565b60208082528251828201819052600091906040908185019080840286018301878501865b83811015619e2b57888303603f1901855281518051878552619e0c888601826197ce565b9189015115159489019490945294870194925090860190600101619de8565b509098975050505050505050565b600060208252613de7602083018461979f565b901515815260200190565b83151581526001600160a01b03831660208201526060604082018190526000906112c59083018461979f565b90815260200190565b600084825260606020830152619c0560608301856197ce565b600060208252613de760208301846197ce565b600060408252619d4d60408301856197ce565b6001600160a01b03938416815291909216602082015262ffffff909116604082015260600190565b6001600160a01b03831681526040602082018190526000906112579083018461979f565b60608101619f248561a389565b938152602081019290925260409091015290565b6060810160088510619f2457fe5b600060e0820160028710619f5657fe5b868352602060e08185015281875180845261010093508386019150838382028701019350828901855b82811015619fad5760ff19888703018452619f9b8683516197fa565b95509284019290840190600101619f7f565b50505050508281036040840152619fc4818661975c565b9150506112c56060830184619869565b600f93840b81529190920b6020820152604081019190915260600190565b600f83900b815260808101613de76020830184619837565b60208082526024908201527f556e6973776170563353616d706c65722f746f6b656e5061746820746f6f20736040820152631a1bdc9d60e21b606082015260800190565b60208082526025908201527f455243323042726964676553616d706c65722f494e56414c49445f544f4b454e6040820152642fa820a4a960d91b606082015260800190565b60208082526025908201527f556e6973776170563353616d706c65722f696e76616c69642070617468206c656040820152646e6774687360d81b606082015260800190565b6020808252601e908201527f4b79626572444d4d53616d706c65722f4e4f5f504f4f4c535f464f554e440000604082015260600190565b600061a11b8287619837565b84600f0b606083015283600f0b608083015260c060a083015261651660c083018461979f565b60006060825261a154606083018661989e565b828103602084015261a166818661989e565b915050826040830152949350505050565b60006080825261a18a60808301876198bd565b6001600160a01b0395861660208401529390941660408201526060015292915050565b60006080825261a1c060808301876198bd565b6020830195909552506001600160a01b0392831660408201529116606090910152919050565b610200810161a1f5828561990a565b613de76101808301846199db565b610220810161a212828661990a565b61a2206101808301856199db565b6001600160a01b0392909216610200919091015292915050565b600083825260406020830152611257604083018461975c565b60008482526060602083015261a26c606083018561975c565b8281036040840152616516818561975c565b958652602086019490945260408501929092526060840152608083015260a082015260c00190565b6000808335601e1984360301811261a2bc578283fd5b8301803591506001600160401b0382111561a2d5578283fd5b60200191503681900382131561a2ea57600080fd5b9250929050565b6040518181016001600160401b038111828210171561a30f57600080fd5b604052919050565b60006001600160401b0382111561a32c578081fd5b5060209081020190565b60006001600160401b0382111561a34b578081fd5b50601f01601f191660200190565b60005b8381101561a37457818101518382015260200161a35c565b8381111561a383576000848401525b50505050565b6004811061a39357fe5b50565b6001600160a01b038116811461a39357600080fd5b801515811461a39357600080fd5b6001600160e01b03198116811461a39357600080fd5b80600f0b811461a39357600080fd5b6001600160801b038116811461a39357600080fdfea2646970667358221220c4fc9a879c039c9205df02dd09113879a2d3dd5dca3545889b674c43319a45e964736f6c634300060c0033",
                "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x30C JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8E5A0E07 GT PUSH2 0x19D JUMPI DUP1 PUSH4 0xC25C4138 GT PUSH2 0xE9 JUMPI DUP1 PUSH4 0xDDD5AA28 GT PUSH2 0xA2 JUMPI DUP1 PUSH4 0xF1ED7FA4 GT PUSH2 0x7C JUMPI DUP1 PUSH4 0xF1ED7FA4 EQ PUSH2 0x751 JUMPI DUP1 PUSH4 0xF3868E9C EQ PUSH2 0x444 JUMPI DUP1 PUSH4 0xF5A4994D EQ PUSH2 0x764 JUMPI DUP1 PUSH4 0xFC9FE41B EQ PUSH2 0x777 JUMPI PUSH2 0x30C JUMP JUMPDEST DUP1 PUSH4 0xDDD5AA28 EQ PUSH2 0x718 JUMPI DUP1 PUSH4 0xE78AC045 EQ PUSH2 0x72B JUMPI DUP1 PUSH4 0xE8E4AF09 EQ PUSH2 0x73E JUMPI PUSH2 0x30C JUMP JUMPDEST DUP1 PUSH4 0xC25C4138 EQ PUSH2 0x6A6 JUMPI DUP1 PUSH4 0xC8319084 EQ PUSH2 0x6B9 JUMPI DUP1 PUSH4 0xC8C74A37 EQ PUSH2 0x6CC JUMPI DUP1 PUSH4 0xC94706D8 EQ PUSH2 0x6DF JUMPI DUP1 PUSH4 0xCC1621C9 EQ PUSH2 0x6F2 JUMPI DUP1 PUSH4 0xD9BCA372 EQ PUSH2 0x705 JUMPI PUSH2 0x30C JUMP JUMPDEST DUP1 PUSH4 0xA0295B8B GT PUSH2 0x156 JUMPI DUP1 PUSH4 0xAB000276 GT PUSH2 0x130 JUMPI DUP1 PUSH4 0xAB000276 EQ PUSH2 0x64C JUMPI DUP1 PUSH4 0xADC636BF EQ PUSH2 0x65F JUMPI DUP1 PUSH4 0xB90CD2FB EQ PUSH2 0x680 JUMPI DUP1 PUSH4 0xBD71ECF6 EQ PUSH2 0x693 JUMPI PUSH2 0x30C JUMP JUMPDEST DUP1 PUSH4 0xA0295B8B EQ PUSH2 0x613 JUMPI DUP1 PUSH4 0xA4698417 EQ PUSH2 0x626 JUMPI DUP1 PUSH4 0xA75E744B EQ PUSH2 0x639 JUMPI PUSH2 0x30C JUMP JUMPDEST DUP1 PUSH4 0x8E5A0E07 EQ PUSH2 0x576 JUMPI DUP1 PUSH4 0x9209483B EQ PUSH2 0x598 JUMPI DUP1 PUSH4 0x98777748 EQ PUSH2 0x5AB JUMPI DUP1 PUSH4 0x9BF3EE35 EQ PUSH2 0x5BE JUMPI DUP1 PUSH4 0x9E3F05C3 EQ PUSH2 0x5DE JUMPI DUP1 PUSH4 0x9EA0FF13 EQ PUSH2 0x600 JUMPI PUSH2 0x30C JUMP JUMPDEST DUP1 PUSH4 0x40BC03AE GT PUSH2 0x25C JUMPI DUP1 PUSH4 0x5D5B674F GT PUSH2 0x215 JUMPI DUP1 PUSH4 0x706E2F9B GT PUSH2 0x1EF JUMPI DUP1 PUSH4 0x706E2F9B EQ PUSH2 0x52A JUMPI DUP1 PUSH4 0x74C9D255 EQ PUSH2 0x53D JUMPI DUP1 PUSH4 0x7F7F4F13 EQ PUSH2 0x550 JUMPI DUP1 PUSH4 0x8B6D7B44 EQ PUSH2 0x563 JUMPI PUSH2 0x30C JUMP JUMPDEST DUP1 PUSH4 0x5D5B674F EQ PUSH2 0x4E4 JUMPI DUP1 PUSH4 0x66A1AC6B EQ PUSH2 0x4F7 JUMPI DUP1 PUSH4 0x68BE3CF2 EQ PUSH2 0x50A JUMPI PUSH2 0x30C JUMP JUMPDEST DUP1 PUSH4 0x40BC03AE EQ PUSH2 0x457 JUMPI DUP1 PUSH4 0x494569DB EQ PUSH2 0x46A JUMPI DUP1 PUSH4 0x4EDFB5B2 EQ PUSH2 0x47D JUMPI DUP1 PUSH4 0x5505000A EQ PUSH2 0x49D JUMPI DUP1 PUSH4 0x57494B1D EQ PUSH2 0x4BE JUMPI DUP1 PUSH4 0x5AAE4E53 EQ PUSH2 0x4D1 JUMPI PUSH2 0x30C JUMP JUMPDEST DUP1 PUSH4 0x281E3432 GT PUSH2 0x2C9 JUMPI DUP1 PUSH4 0x2D753AA4 GT PUSH2 0x2A3 JUMPI DUP1 PUSH4 0x2D753AA4 EQ PUSH2 0x40B JUMPI DUP1 PUSH4 0x30D6570D EQ PUSH2 0x41E JUMPI DUP1 PUSH4 0x3105FEC1 EQ PUSH2 0x431 JUMPI DUP1 PUSH4 0x36052391 EQ PUSH2 0x444 JUMPI PUSH2 0x30C JUMP JUMPDEST DUP1 PUSH4 0x281E3432 EQ PUSH2 0x3C3 JUMPI DUP1 PUSH4 0x29FA4AA0 EQ PUSH2 0x3D6 JUMPI DUP1 PUSH4 0x2AA64319 EQ PUSH2 0x3E9 JUMPI PUSH2 0x30C JUMP JUMPDEST DUP1 PUSH4 0x496D5DC EQ PUSH2 0x311 JUMPI DUP1 PUSH4 0x1022742B EQ PUSH2 0x33B JUMPI DUP1 PUSH4 0x149DAB0E EQ PUSH2 0x35B JUMPI DUP1 PUSH4 0x16279055 EQ PUSH2 0x37D JUMPI DUP1 PUSH4 0x2339078F EQ PUSH2 0x39D JUMPI DUP1 PUSH4 0x252322B3 EQ PUSH2 0x3B0 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x324 PUSH2 0x31F CALLDATASIZE PUSH1 0x4 PUSH2 0x8C5B JUMP JUMPDEST PUSH2 0x78A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x332 SWAP3 SWAP2 SWAP1 PUSH2 0x9D15 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x34E PUSH2 0x349 CALLDATASIZE PUSH1 0x4 PUSH2 0x908E JUMP JUMPDEST PUSH2 0x930 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x332 SWAP2 SWAP1 PUSH2 0x9E39 JUMP JUMPDEST PUSH2 0x36E PUSH2 0x369 CALLDATASIZE PUSH1 0x4 PUSH2 0x930B JUMP JUMPDEST PUSH2 0xAA3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x332 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9BE1 JUMP JUMPDEST PUSH2 0x390 PUSH2 0x38B CALLDATASIZE PUSH1 0x4 PUSH2 0x8932 JUMP JUMPDEST PUSH2 0xC03 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x332 SWAP2 SWAP1 PUSH2 0x9E4C JUMP JUMPDEST PUSH2 0x34E PUSH2 0x3AB CALLDATASIZE PUSH1 0x4 PUSH2 0x928C JUMP JUMPDEST PUSH2 0xC0D JUMP JUMPDEST PUSH2 0x34E PUSH2 0x3BE CALLDATASIZE PUSH1 0x4 PUSH2 0x8B99 JUMP JUMPDEST PUSH2 0xE34 JUMP JUMPDEST PUSH2 0x34E PUSH2 0x3D1 CALLDATASIZE PUSH1 0x4 PUSH2 0x95A1 JUMP JUMPDEST PUSH2 0x100A JUMP JUMPDEST PUSH2 0x34E PUSH2 0x3E4 CALLDATASIZE PUSH1 0x4 PUSH2 0x93C4 JUMP JUMPDEST PUSH2 0x125F JUMP JUMPDEST PUSH2 0x3FC PUSH2 0x3F7 CALLDATASIZE PUSH1 0x4 PUSH2 0x941D JUMP JUMPDEST PUSH2 0x12CE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x332 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9E57 JUMP JUMPDEST PUSH2 0x34E PUSH2 0x419 CALLDATASIZE PUSH1 0x4 PUSH2 0x8B14 JUMP JUMPDEST PUSH2 0x15AB JUMP JUMPDEST PUSH2 0x34E PUSH2 0x42C CALLDATASIZE PUSH1 0x4 PUSH2 0x8B99 JUMP JUMPDEST PUSH2 0x1734 JUMP JUMPDEST PUSH2 0x34E PUSH2 0x43F CALLDATASIZE PUSH1 0x4 PUSH2 0x8C5B JUMP JUMPDEST PUSH2 0x18A8 JUMP JUMPDEST PUSH2 0x34E PUSH2 0x452 CALLDATASIZE PUSH1 0x4 PUSH2 0x941D JUMP JUMPDEST PUSH2 0x1A2C JUMP JUMPDEST PUSH2 0x34E PUSH2 0x465 CALLDATASIZE PUSH1 0x4 PUSH2 0x93C4 JUMP JUMPDEST PUSH2 0x1ABE JUMP JUMPDEST PUSH2 0x324 PUSH2 0x478 CALLDATASIZE PUSH1 0x4 PUSH2 0x8C5B JUMP JUMPDEST PUSH2 0x1C3F JUMP JUMPDEST PUSH2 0x490 PUSH2 0x48B CALLDATASIZE PUSH1 0x4 PUSH2 0x9503 JUMP JUMPDEST PUSH2 0x1DCB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x332 SWAP2 SWAP1 PUSH2 0x9EA5 JUMP JUMPDEST PUSH2 0x4B0 PUSH2 0x4AB CALLDATASIZE PUSH1 0x4 PUSH2 0x91F5 JUMP JUMPDEST PUSH2 0x2048 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x332 SWAP3 SWAP2 SWAP1 PUSH2 0x9D5C JUMP JUMPDEST PUSH2 0x34E PUSH2 0x4CC CALLDATASIZE PUSH1 0x4 PUSH2 0x8B99 JUMP JUMPDEST PUSH2 0x2293 JUMP JUMPDEST PUSH2 0x4B0 PUSH2 0x4DF CALLDATASIZE PUSH1 0x4 PUSH2 0x91F5 JUMP JUMPDEST PUSH2 0x27E5 JUMP JUMPDEST PUSH2 0x34E PUSH2 0x4F2 CALLDATASIZE PUSH1 0x4 PUSH2 0x8B99 JUMP JUMPDEST PUSH2 0x2A2A JUMP JUMPDEST PUSH2 0x34E PUSH2 0x505 CALLDATASIZE PUSH1 0x4 PUSH2 0x908E JUMP JUMPDEST PUSH2 0x2A90 JUMP JUMPDEST PUSH2 0x51D PUSH2 0x518 CALLDATASIZE PUSH1 0x4 PUSH2 0x8E68 JUMP JUMPDEST PUSH2 0x2B45 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x332 SWAP2 SWAP1 PUSH2 0x9DC4 JUMP JUMPDEST PUSH2 0x34E PUSH2 0x538 CALLDATASIZE PUSH1 0x4 PUSH2 0x8F3F JUMP JUMPDEST PUSH2 0x2CA6 JUMP JUMPDEST PUSH2 0x36E PUSH2 0x54B CALLDATASIZE PUSH1 0x4 PUSH2 0x930B JUMP JUMPDEST PUSH2 0x2D98 JUMP JUMPDEST PUSH2 0x34E PUSH2 0x55E CALLDATASIZE PUSH1 0x4 PUSH2 0x95A1 JUMP JUMPDEST PUSH2 0x2DA7 JUMP JUMPDEST PUSH2 0x34E PUSH2 0x571 CALLDATASIZE PUSH1 0x4 PUSH2 0x93C4 JUMP JUMPDEST PUSH2 0x2FF4 JUMP JUMPDEST PUSH2 0x589 PUSH2 0x584 CALLDATASIZE PUSH1 0x4 PUSH2 0x8ED6 JUMP JUMPDEST PUSH2 0x3357 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x332 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA141 JUMP JUMPDEST PUSH2 0x34E PUSH2 0x5A6 CALLDATASIZE PUSH1 0x4 PUSH2 0x93C4 JUMP JUMPDEST PUSH2 0x3570 JUMP JUMPDEST PUSH2 0x34E PUSH2 0x5B9 CALLDATASIZE PUSH1 0x4 PUSH2 0x8B99 JUMP JUMPDEST PUSH2 0x3770 JUMP JUMPDEST PUSH2 0x5D1 PUSH2 0x5CC CALLDATASIZE PUSH1 0x4 PUSH2 0x9561 JUMP JUMPDEST PUSH2 0x3CA7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x332 SWAP2 SWAP1 PUSH2 0x9E83 JUMP JUMPDEST PUSH2 0x5F1 PUSH2 0x5EC CALLDATASIZE PUSH1 0x4 PUSH2 0x944C JUMP JUMPDEST PUSH2 0x3DEE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x332 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9E8C JUMP JUMPDEST PUSH2 0x5D1 PUSH2 0x60E CALLDATASIZE PUSH1 0x4 PUSH2 0x8C0B JUMP JUMPDEST PUSH2 0x3F14 JUMP JUMPDEST PUSH2 0x34E PUSH2 0x621 CALLDATASIZE PUSH1 0x4 PUSH2 0x928C JUMP JUMPDEST PUSH2 0x412A JUMP JUMPDEST PUSH2 0x34E PUSH2 0x634 CALLDATASIZE PUSH1 0x4 PUSH2 0x8B99 JUMP JUMPDEST PUSH2 0x4326 JUMP JUMPDEST PUSH2 0x3FC PUSH2 0x647 CALLDATASIZE PUSH1 0x4 PUSH2 0x8CCD JUMP JUMPDEST PUSH2 0x447B JUMP JUMPDEST PUSH2 0x34E PUSH2 0x65A CALLDATASIZE PUSH1 0x4 PUSH2 0x8B99 JUMP JUMPDEST PUSH2 0x45B8 JUMP JUMPDEST PUSH2 0x672 PUSH2 0x66D CALLDATASIZE PUSH1 0x4 PUSH2 0x8B99 JUMP JUMPDEST PUSH2 0x4716 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x332 SWAP3 SWAP2 SWAP1 PUSH2 0x9EF3 JUMP JUMPDEST PUSH2 0x34E PUSH2 0x68E CALLDATASIZE PUSH1 0x4 PUSH2 0x8B99 JUMP JUMPDEST PUSH2 0x4866 JUMP JUMPDEST PUSH2 0x34E PUSH2 0x6A1 CALLDATASIZE PUSH1 0x4 PUSH2 0x8F71 JUMP JUMPDEST PUSH2 0x48CC JUMP JUMPDEST PUSH2 0x34E PUSH2 0x6B4 CALLDATASIZE PUSH1 0x4 PUSH2 0x8B99 JUMP JUMPDEST PUSH2 0x49C8 JUMP JUMPDEST PUSH2 0x34E PUSH2 0x6C7 CALLDATASIZE PUSH1 0x4 PUSH2 0x8B99 JUMP JUMPDEST PUSH2 0x4A2E JUMP JUMPDEST PUSH2 0x34E PUSH2 0x6DA CALLDATASIZE PUSH1 0x4 PUSH2 0x8C5B JUMP JUMPDEST PUSH2 0x4BEB JUMP JUMPDEST PUSH2 0x34E PUSH2 0x6ED CALLDATASIZE PUSH1 0x4 PUSH2 0x8B99 JUMP JUMPDEST PUSH2 0x4D57 JUMP JUMPDEST PUSH2 0x5F1 PUSH2 0x700 CALLDATASIZE PUSH1 0x4 PUSH2 0x944C JUMP JUMPDEST PUSH2 0x4EB5 JUMP JUMPDEST PUSH2 0x3FC PUSH2 0x713 CALLDATASIZE PUSH1 0x4 PUSH2 0x8CCD JUMP JUMPDEST PUSH2 0x509B JUMP JUMPDEST PUSH2 0x3FC PUSH2 0x726 CALLDATASIZE PUSH1 0x4 PUSH2 0x941D JUMP JUMPDEST PUSH2 0x518A JUMP JUMPDEST PUSH2 0x34E PUSH2 0x739 CALLDATASIZE PUSH1 0x4 PUSH2 0x8FB5 JUMP JUMPDEST PUSH2 0x541D JUMP JUMPDEST PUSH2 0x34E PUSH2 0x74C CALLDATASIZE PUSH1 0x4 PUSH2 0x8B99 JUMP JUMPDEST PUSH2 0x5512 JUMP JUMPDEST PUSH2 0x5D1 PUSH2 0x75F CALLDATASIZE PUSH1 0x4 PUSH2 0x94BC JUMP JUMPDEST PUSH2 0x5645 JUMP JUMPDEST PUSH2 0x672 PUSH2 0x772 CALLDATASIZE PUSH1 0x4 PUSH2 0x8B99 JUMP JUMPDEST PUSH2 0x57E4 JUMP JUMPDEST PUSH2 0x589 PUSH2 0x785 CALLDATASIZE PUSH1 0x4 PUSH2 0x8ED6 JUMP JUMPDEST PUSH2 0x58D0 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP2 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x7A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x7D1 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH2 0x7DE DUP7 DUP7 PUSH2 0x5AE5 JUMP JUMPDEST SWAP3 POP DUP3 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x7F0 JUMPI POP PUSH2 0x928 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x925 JUMPI DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xA8312B1D PUSH3 0x249F0 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x81A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP11 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x842 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA253 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x85A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x890 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x88D SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x915D JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x8CA JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x8BE JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x8C3 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP PUSH2 0x925 JUMP JUMPDEST DUP1 PUSH1 0x1 DUP9 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x8DA JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x8EE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x906 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x91C JUMPI POP PUSH2 0x925 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x7F3 JUMP JUMPDEST POP POP JUMPDEST SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x949 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x973 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 EQ PUSH2 0xA9B JUMPI ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x9BF3EE35 PUSH3 0x30D40 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x9A0 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x9B4 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9DB SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA203 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x9F3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0xA24 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0xA21 SWAP2 DUP2 ADD SWAP1 PUSH2 0x91AB JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0xA78 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0xA52 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xA57 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xA66 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP PUSH2 0xA93 JUMP JUMPDEST DUP1 DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xA85 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP JUMPDEST PUSH1 0x1 ADD PUSH2 0x979 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP1 DUP7 PUSH1 0x20 ADD MLOAD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0xABB JUMPI PUSH2 0xBF9 JUMP JUMPDEST PUSH2 0xAC7 DUP8 DUP8 DUP8 DUP8 PUSH2 0x5DD4 JUMP JUMPDEST DUP6 MLOAD SWAP2 SWAP5 POP SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0xAE3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xB0D JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0xBF7 JUMPI DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x7F9C0ECD PUSH3 0x493E0 DUP6 DUP9 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0xB3C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xB61 SWAP3 SWAP2 SWAP1 PUSH2 0x9D3A JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xB79 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0xBAA JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0xBA7 SWAP2 DUP2 ADD SWAP1 PUSH2 0x91AB JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0xBB3 JUMPI PUSH2 0xBF7 JUMP JUMPDEST DUP1 DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xBC0 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xBD8 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0xBEE JUMPI POP PUSH2 0xBF7 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0xB13 JUMP JUMPDEST POP JUMPDEST SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST DUP1 EXTCODESIZE ISZERO ISZERO JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0xC19 DUP4 DUP6 PUSH2 0x6006 JUMP JUMPDEST PUSH1 0x20 DUP6 ADD MLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x2 DUP1 DUP3 MSTORE PUSH1 0x60 DUP3 DUP2 ADD SWAP1 SWAP4 MSTORE DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP6 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xC4F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP DUP5 DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0xC7D JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE DUP4 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0xCAD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xCD7 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP4 POP PUSH2 0xCE2 PUSH2 0x8181 JUMP JUMPDEST PUSH2 0xCEA PUSH2 0x603C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0xE27 JUMPI PUSH1 0x60 PUSH2 0xD16 DUP12 DUP10 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xD09 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x606B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x7C268337 PUSH1 0xE1 SHL DUP2 MSTORE SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND SWAP1 PUSH4 0xF84D066E SWAP1 PUSH2 0xD4C SWAP1 PUSH1 0x0 SWAP1 DUP6 SWAP1 DUP11 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x9F46 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xD66 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0xD9B JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0xD98 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x900B JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0xDD6 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0xDC9 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xDCE JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP POP PUSH2 0xE27 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0xDE5 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 NOT MUL SWAP1 POP PUSH1 0x0 DUP2 SGT PUSH2 0xE03 JUMPI POP POP POP PUSH2 0xE27 JUMP JUMPDEST DUP1 DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0xE10 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP POP POP PUSH1 0x1 ADD PUSH2 0xCEF JUMP JUMPDEST POP POP POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0xE40 DUP4 DUP6 PUSH2 0x6006 JUMP JUMPDEST DUP2 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0xE58 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xE82 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND ISZERO PUSH2 0xEA5 JUMPI PUSH2 0xEA0 DUP8 DUP8 PUSH2 0x60FD JUMP JUMPDEST PUSH2 0xEA8 JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND ISZERO PUSH2 0xECA JUMPI PUSH2 0xEC5 DUP9 DUP8 PUSH2 0x60FD JUMP JUMPDEST PUSH2 0xECD JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xFFE JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH2 0xF30 JUMPI PUSH2 0xF0F DUP5 PUSH4 0x2640F62C PUSH1 0xE0 SHL DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0xF02 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x617C JUMP JUMPDEST DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xF1B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP4 POP DUP3 DUP2 MSTORE POP POP POP PUSH2 0xFCA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND PUSH2 0xF56 JUMPI PUSH2 0xF0F DUP4 PUSH4 0x59E94862 PUSH1 0xE0 SHL DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0xF02 JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH2 0xF70 DUP5 PUSH4 0x59E94862 PUSH1 0xE0 SHL DUP11 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0xF02 JUMPI INVALID JUMPDEST SWAP3 POP SWAP1 POP DUP1 ISZERO PUSH2 0xFAD JUMPI PUSH2 0xF8C DUP6 PUSH4 0x9903D8B PUSH1 0xE2 SHL DUP4 PUSH2 0x617C JUMP JUMPDEST DUP9 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0xF98 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP5 POP DUP3 DUP2 MSTORE POP POP POP PUSH2 0xFC8 JUMP JUMPDEST PUSH1 0x0 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xFBB JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP JUMPDEST POP JUMPDEST DUP1 ISZERO DUP1 PUSH2 0xFEA JUMPI POP DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xFDE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ JUMPDEST ISZERO PUSH2 0xFF5 JUMPI POP PUSH2 0xFFE JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0xED2 JUMP JUMPDEST POP POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1016 DUP4 DUP6 PUSH2 0x6006 JUMP JUMPDEST PUSH1 0x0 DUP6 PUSH1 0x0 ADD MLOAD SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x36569E77 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x105A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x106E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1092 SWAP2 SWAP1 PUSH2 0x894E JUMP JUMPDEST DUP5 MLOAD SWAP1 SWAP2 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x10AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x10D7 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP4 POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xF4B9FA75 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1113 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1127 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x114B SWAP2 SWAP1 PUSH2 0x894E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO DUP1 ISZERO PUSH2 0x11EE JUMPI POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xF4B9FA75 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x11A0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x11B4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x11D8 SWAP2 SWAP1 PUSH2 0x894E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x11FB JUMPI POP POP POP PUSH2 0x1257 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xFFE JUMPI PUSH1 0x0 PUSH2 0x1229 DUP11 DUP10 DUP12 DUP11 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x121A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP10 DUP10 PUSH2 0x625F JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x1236 JUMPI POP PUSH2 0xFFE JUMP JUMPDEST DUP1 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1243 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP PUSH1 0x1 ADD PUSH2 0x11FE JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 DUP2 ADD SWAP1 SWAP3 MSTORE PUSH2 0x12C5 SWAP1 DUP1 PUSH2 0x127E DUP7 DUP10 PUSH1 0x80 DUP5 ADD PUSH2 0x9FF2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x12A5 SWAP3 SWAP2 SWAP1 PUSH2 0x9FF2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x6520 DUP2 MSTORE POP DUP4 PUSH2 0x6653 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 PUSH2 0x12DD DUP6 DUP8 PUSH2 0x6006 JUMP JUMPDEST DUP4 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x12F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x131F JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP DUP9 MLOAD PUSH1 0x40 MLOAD PUSH4 0x939D863 PUSH1 0xE1 SHL DUP2 MSTORE SWAP2 SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x1273B0C6 SWAP1 PUSH2 0x1352 SWAP1 DUP11 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x9A7D JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x136A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x137E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x13A2 SWAP2 SWAP1 PUSH2 0x894E JUMP JUMPDEST SWAP3 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND ISZERO PUSH2 0x13C0 JUMPI POP PUSH1 0x1 SWAP4 POP DUP7 PUSH2 0x145F JUMP JUMPDEST DUP9 MLOAD PUSH1 0x40 MLOAD PUSH4 0x939D863 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x1273B0C6 SWAP1 PUSH2 0x13F1 SWAP1 DUP11 SWAP1 DUP13 SWAP1 PUSH1 0x4 ADD PUSH2 0x9A7D JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1409 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x141D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1441 SWAP2 SWAP1 PUSH2 0x894E JUMP JUMPDEST SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x1458 JUMPI POP POP PUSH2 0xBF9 JUMP JUMPDEST POP PUSH1 0x0 SWAP4 POP DUP6 JUMPDEST DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDD58B41C PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1498 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x14AC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x14D0 SWAP2 SWAP1 PUSH2 0x918F JUMP JUMPDEST PUSH2 0x14DB JUMPI POP POP PUSH2 0xBF9 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x159E JUMPI PUSH1 0x0 PUSH2 0x1558 DUP11 DUP8 DUP6 DUP15 PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1506 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9A97 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP11 DUP9 DUP7 DUP16 PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1530 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9A97 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP11 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x154B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x6850 JUMP JUMPDEST SWAP1 POP DUP1 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1567 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x157F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x1595 JUMPI POP PUSH2 0x159E JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x14DE JUMP JUMPDEST POP POP POP SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x15C6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x15F0 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH2 0x1607 JUMPI POP PUSH2 0x12C5 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1729 JUMPI PUSH1 0x0 PUSH1 0x60 DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH3 0x61A80 PUSH4 0x6E79E133 PUSH1 0xE0 SHL DUP12 DUP12 DUP12 DUP12 DUP10 DUP2 MLOAD DUP2 LT PUSH2 0x163B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1656 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9AF6 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x1694 SWAP2 SWAP1 PUSH2 0x9A34 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x16D0 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x16D5 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x16F9 JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x16F6 SWAP2 SWAP1 PUSH2 0x91AB JUMP JUMPDEST SWAP1 POP JUMPDEST DUP1 PUSH2 0x1706 JUMPI POP POP POP PUSH2 0x1729 JUMP JUMPDEST DUP1 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x1713 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x160A JUMP JUMPDEST POP POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1740 DUP4 DUP6 PUSH2 0x6006 JUMP JUMPDEST DUP2 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x1758 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1782 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x189E JUMPI DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x72EA9076 PUSH3 0xC3500 DUP9 DUP9 DUP9 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x17B1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x17D7 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9B78 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x17EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x1820 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x181D SWAP2 DUP2 ADD SWAP1 PUSH2 0x91AB JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x185A JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x184E JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1853 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP PUSH2 0x189E JUMP JUMPDEST DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1867 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x187F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x1895 JUMPI POP PUSH2 0x189E JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x1788 JUMP JUMPDEST POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x18C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x18ED JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1A23 JUMPI DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD06CA61F PUSH3 0x249F0 DUP7 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x191A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1940 SWAP3 SWAP2 SWAP1 PUSH2 0xA23A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1958 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x198E JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x198B SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x915D JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x19C8 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x19BC JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x19C1 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP PUSH2 0x1A23 JUMP JUMPDEST DUP1 PUSH1 0x1 DUP8 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x19D8 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x19EC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1A04 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x1A1A JUMPI POP PUSH2 0x1A23 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x18F3 JUMP JUMPDEST POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1A38 DUP4 DUP6 PUSH2 0x6006 JUMP JUMPDEST DUP5 PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO DUP1 PUSH2 0x1A6A JUMPI POP DUP5 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND SWAP2 AND EQ ISZERO JUMPDEST ISZERO PUSH2 0xA9B JUMPI DUP2 MLOAD PUSH1 0x60 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x1A89 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1AB3 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP3 POP PUSH2 0x1257 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x1AD9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1B03 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x189E JUMPI PUSH1 0x0 PUSH1 0x60 DUP9 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH3 0x1E8480 DUP11 PUSH1 0x20 ADD MLOAD DUP11 DUP11 DUP11 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x1B3A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1B54 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9FD4 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x1B92 SWAP2 SWAP1 PUSH2 0x9A34 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1BCE JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1BD3 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x1BF7 JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x1BF4 SWAP2 SWAP1 PUSH2 0x91AB JUMP JUMPDEST SWAP1 POP JUMPDEST DUP1 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x1C04 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x1C1C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x1C34 JUMPI POP POP POP PUSH2 0x189E JUMP JUMPDEST POP POP POP PUSH1 0x1 ADD PUSH2 0x1B09 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP2 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x1C5C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1C86 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH2 0x1C93 DUP7 DUP7 PUSH2 0x5AE5 JUMP JUMPDEST SWAP3 POP DUP3 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x1CA5 JUMPI POP PUSH2 0x928 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x925 JUMPI DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x9E269B68 PUSH3 0x249F0 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x1CCF JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP11 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1CF7 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA253 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1D0F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x1D45 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x1D42 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x915D JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1D73 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x8BE JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x8C3 JUMP JUMPDEST DUP1 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1D80 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1D94 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1DAC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x1DC2 JUMPI POP PUSH2 0x925 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x1CA8 JUMP JUMPDEST PUSH1 0x20 DUP5 DUP2 ADD MLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP4 DUP5 SWAP3 SWAP1 DUP3 DUP2 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP6 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1E02 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x60 PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1E3A JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP8 PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x1F2B JUMPI PUSH1 0x40 MLOAD PUSH4 0x81EFCBDD PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x81EFCBDD SWAP1 PUSH3 0x7A120 SWAP1 PUSH2 0x1E93 SWAP1 DUP10 SWAP1 PUSH1 0x1 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x9C17 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1EAB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x1EE1 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x1EDE SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x91C3 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1F1B JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x1F0F JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1F14 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP PUSH2 0x1F26 JUMP JUMPDEST SWAP4 POP PUSH2 0x1257 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x203D JUMP JUMPDEST DUP8 PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x1F81 JUMPI PUSH1 0x40 MLOAD PUSH4 0x61E597F9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x61E597F9 SWAP1 PUSH3 0x7A120 SWAP1 PUSH2 0x1E93 SWAP1 DUP11 SWAP1 PUSH1 0x1 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x9C17 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x2B9A6CD PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x5734D9A SWAP1 PUSH3 0x7A120 SWAP1 PUSH2 0x1FC1 SWAP1 DUP11 SWAP1 PUSH1 0x1 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP14 SWAP1 DUP5 SWAP1 DUP5 SWAP1 DUP5 SWAP1 PUSH1 0x4 ADD PUSH2 0x9C5A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1FD9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x200F JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x200C SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x91C3 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1F1B JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0xE27 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xE27 JUMP JUMPDEST POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH1 0x60 PUSH2 0x20C9 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xC45A0155 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2089 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x209D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x20C1 SWAP2 SWAP1 PUSH2 0x894E JUMP JUMPDEST DUP7 PUSH1 0x0 PUSH2 0x6989 JUMP JUMPDEST SWAP1 POP DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x20E2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x210C JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x2126 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x215A JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x2145 JUMPI SWAP1 POP JUMPDEST POP SWAP3 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x925 JUMPI PUSH1 0x60 PUSH1 0x0 DUP1 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x224B JUMPI PUSH1 0x60 PUSH2 0x2197 DUP11 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x218A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x6E1F JUMP JUMPDEST SWAP1 POP DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xCDCA1753 PUSH3 0x493E0 DUP4 DUP13 DUP10 DUP2 MLOAD DUP2 LT PUSH2 0x21B9 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x21DE SWAP3 SWAP2 SWAP1 PUSH2 0x9EB8 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x21F8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP8 CALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x2229 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x2226 SWAP2 DUP2 ADD SWAP1 PUSH2 0x91AB JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x2232 JUMPI PUSH2 0x2242 JUMP JUMPDEST DUP1 DUP5 GT PUSH2 0x2240 JUMPI DUP1 SWAP4 POP DUP2 SWAP5 POP JUMPDEST POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x216F JUMP JUMPDEST POP DUP1 PUSH2 0x2258 JUMPI POP POP PUSH2 0x925 JUMP JUMPDEST DUP1 DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2265 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP2 DUP7 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x227E JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP PUSH1 0x1 ADD PUSH2 0x2160 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP6 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x22B0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x22DA JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0xBCDED89 PUSH1 0xE2 SHL DUP2 MSTORE SWAP1 SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x2F37B624 SWAP1 PUSH2 0x230A SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x9A50 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2322 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2336 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x235A SWAP2 SWAP1 PUSH2 0x918F JUMP JUMPDEST ISZERO DUP1 PUSH2 0x23DF JUMPI POP PUSH1 0x40 MLOAD PUSH4 0xBCDED89 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x2F37B624 SWAP1 PUSH2 0x238D SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x9A50 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x23A5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x23B9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x23DD SWAP2 SWAP1 PUSH2 0x918F JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x23EB JUMPI POP POP PUSH2 0x1257 JUMP JUMPDEST PUSH2 0x23F3 PUSH2 0x81A8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xF8B2CB4F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0xF8B2CB4F SWAP1 PUSH2 0x241F SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x9A50 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2437 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x244B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x246F SWAP2 SWAP1 PUSH2 0x91AB JUMP JUMPDEST DUP2 MSTORE PUSH1 0x40 MLOAD PUSH4 0xF8B2CB4F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0xF8B2CB4F SWAP1 PUSH2 0x249D SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x9A50 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x24B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x24C9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x24ED SWAP2 SWAP1 PUSH2 0x91AB JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 MLOAD PUSH4 0x4A46C673 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x948D8CE6 SWAP1 PUSH2 0x251E SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x9A50 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2536 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x254A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x256E SWAP2 SWAP1 PUSH2 0x91AB JUMP JUMPDEST PUSH1 0x40 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE MLOAD PUSH4 0x4A46C673 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x948D8CE6 SWAP1 PUSH2 0x25A1 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x9A50 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x25B9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x25CD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x25F1 SWAP2 SWAP1 PUSH2 0x91AB JUMP JUMPDEST DUP2 PUSH1 0x60 ADD DUP2 DUP2 MSTORE POP POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD4CADF68 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2633 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2647 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x266B SWAP2 SWAP1 PUSH2 0x91AB JUMP JUMPDEST PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0xFFE JUMPI PUSH2 0x269E DUP3 PUSH1 0x20 ADD MLOAD PUSH1 0x3 PUSH8 0xDE0B6B3A7640000 DUP2 PUSH2 0x2695 JUMPI INVALID JUMPDEST DIV PUSH1 0x1 ADD PUSH2 0x6F7A JUMP JUMPDEST DUP7 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x26AA JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD GT ISZERO PUSH2 0x26BD JUMPI PUSH2 0xFFE JUMP JUMPDEST DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xF8D6AED4 PUSH3 0x493E0 DUP5 PUSH1 0x0 ADD MLOAD DUP6 PUSH1 0x40 ADD MLOAD DUP7 PUSH1 0x20 ADD MLOAD DUP8 PUSH1 0x60 ADD MLOAD DUP13 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x26F0 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP10 PUSH1 0x80 ADD MLOAD PUSH1 0x40 MLOAD DUP9 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x271E SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA27E JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2736 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x2767 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x2764 SWAP2 DUP2 ADD SWAP1 PUSH2 0x91AB JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x27A1 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x2795 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x279A JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP PUSH2 0xFFE JUMP JUMPDEST DUP1 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x27AE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x27C6 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x27DC JUMPI POP PUSH2 0xFFE JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x2673 JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH1 0x60 PUSH2 0x2826 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xC45A0155 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2089 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP PUSH1 0x60 PUSH2 0x2833 DUP7 PUSH2 0x6FD7 JUMP JUMPDEST SWAP1 POP DUP5 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x284C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2876 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP3 POP DUP5 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x2890 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x28C4 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x28AF JUMPI SWAP1 POP JUMPDEST POP SWAP4 POP PUSH1 0x0 JUMPDEST DUP6 MLOAD DUP2 LT ISZERO PUSH2 0x2A1F JUMPI PUSH1 0x60 PUSH1 0x0 DUP1 JUMPDEST DUP6 MLOAD DUP2 LT ISZERO PUSH2 0x29D7 JUMPI PUSH1 0x60 PUSH2 0x2909 DUP7 PUSH2 0x2904 DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x28F7 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x706F JUMP JUMPDEST PUSH2 0x6E1F JUMP JUMPDEST SWAP1 POP DUP12 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x2F80BB1D PUSH3 0x493E0 DUP4 DUP14 DUP10 DUP2 MLOAD DUP2 LT PUSH2 0x292B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2950 SWAP3 SWAP2 SWAP1 PUSH2 0x9EB8 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x296A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP8 CALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x299B JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x2998 SWAP2 DUP2 ADD SWAP1 PUSH2 0x91AB JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x29A4 JUMPI PUSH2 0x29CE JUMP JUMPDEST DUP4 ISZERO DUP1 PUSH2 0x29B1 JUMPI POP DUP1 DUP5 LT ISZERO JUMPDEST ISZERO PUSH2 0x29CC JUMPI DUP1 SWAP4 POP PUSH2 0x29C9 DUP13 DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x218A JUMPI INVALID JUMPDEST SWAP5 POP JUMPDEST POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x28D9 JUMP JUMPDEST POP DUP1 PUSH2 0x29E4 JUMPI POP POP PUSH2 0x2A1F JUMP JUMPDEST DUP1 DUP7 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x29F1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP2 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2A0A JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP PUSH1 0x1 ADD PUSH2 0x28CA JUMP JUMPDEST POP POP POP SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 DUP2 ADD SWAP1 SWAP3 MSTORE PUSH2 0x12C5 SWAP1 DUP1 PUSH2 0x2A49 DUP7 DUP10 PUSH1 0x80 DUP5 ADD PUSH2 0x9A7D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2A70 SWAP3 SWAP2 SWAP1 PUSH2 0x9A7D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x7107 DUP2 MSTORE POP DUP4 PUSH2 0x6653 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x2A9D DUP5 DUP5 DUP5 PUSH2 0x930 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0xA9B JUMPI DUP2 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x2AB7 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ PUSH2 0x2B3D JUMPI PUSH2 0x2B24 DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2AD5 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x2AE9 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2B0A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND PUSH2 0x721B JUMP JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2B30 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP JUMPDEST PUSH1 0x1 ADD PUSH2 0x2AA2 JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x2B5D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2B97 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x2B84 PUSH2 0x81D7 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x2B7C JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP1 DUP4 EQ PUSH2 0x2C9F JUMPI PUSH1 0x1 DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2BB2 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD SWAP2 ISZERO ISZERO SWAP2 ADD MSTORE DUP4 DUP4 DUP3 DUP2 DUP2 LT PUSH2 0x2BD0 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x2BE2 SWAP2 SWAP1 PUSH2 0xA2A6 JUMP JUMPDEST ISZERO ISZERO SWAP1 POP PUSH2 0x2BEF JUMPI PUSH2 0x2C97 JUMP JUMPDEST ADDRESS DUP5 DUP5 DUP4 DUP2 DUP2 LT PUSH2 0x2BFC JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x2C0E SWAP2 SWAP1 PUSH2 0xA2A6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2C1C SWAP3 SWAP2 SWAP1 PUSH2 0x9A24 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2C59 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2C5E JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x2C6B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2C82 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 ISZERO ISZERO SWAP1 MSTORE JUMPDEST PUSH1 0x1 ADD PUSH2 0x2B9D JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x2CBF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2CE9 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 EQ PUSH2 0x2D92 JUMPI PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2D2D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x2D6D JUMPI PUSH2 0x2D68 DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2D52 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x723F JUMP JUMPDEST PUSH2 0x2D70 JUMP JUMPDEST PUSH1 0x12 JUMPDEST PUSH1 0xFF AND DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2D7F JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x2CEF JUMP JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP1 SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x2DB3 DUP4 DUP6 PUSH2 0x6006 JUMP JUMPDEST PUSH1 0x0 DUP6 PUSH1 0x0 ADD MLOAD SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x36569E77 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2DF7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2E0B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2E2F SWAP2 SWAP1 PUSH2 0x894E JUMP JUMPDEST DUP5 MLOAD SWAP1 SWAP2 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x2E4A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2E74 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP4 POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xF4B9FA75 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2EB0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2EC4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2EE8 SWAP2 SWAP1 PUSH2 0x894E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO DUP1 ISZERO PUSH2 0x2F8B JUMPI POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xF4B9FA75 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2F3D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2F51 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2F75 SWAP2 SWAP1 PUSH2 0x894E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x2F98 JUMPI POP POP POP PUSH2 0x1257 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xFFE JUMPI PUSH1 0x0 PUSH2 0x2FC6 DUP11 DUP10 DUP12 DUP11 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x2FB7 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP10 DUP10 PUSH2 0x72EB JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x2FD3 JUMPI POP PUSH2 0xFFE JUMP JUMPDEST DUP1 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x2FE0 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP PUSH1 0x1 ADD PUSH2 0x2F9B JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP6 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xBBD7F255 DUP6 PUSH1 0xF SIGNEXTEND PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x302B SWAP2 SWAP1 PUSH2 0x9E83 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3043 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3057 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x307B SWAP2 SWAP1 PUSH2 0x91AB JUMP JUMPDEST DUP7 MLOAD PUSH1 0x40 MLOAD PUSH4 0x1E010439 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x1E010439 SWAP1 PUSH2 0x30AE SWAP1 PUSH1 0xF DUP10 SWAP1 SIGNEXTEND SWAP1 PUSH1 0x4 ADD PUSH2 0x9E83 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x30C6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x30DA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x30FE SWAP2 SWAP1 PUSH2 0x91AB JUMP JUMPDEST SUB SWAP1 POP PUSH1 0x0 DUP7 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xC5829514 DUP7 PUSH1 0xF SIGNEXTEND PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3136 SWAP2 SWAP1 PUSH2 0x9E83 JUMP JUMPDEST PUSH1 0x80 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x314E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3162 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3186 SWAP2 SWAP1 PUSH2 0x96DB JUMP JUMPDEST SWAP4 POP POP POP POP DUP1 PUSH1 0x12 SUB PUSH1 0xA EXP DUP3 DUP2 PUSH2 0x319A JUMPI INVALID JUMPDEST DUP6 MLOAD SWAP2 SWAP1 DIV SWAP3 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x31B7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x31E1 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP4 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xFFE JUMPI PUSH1 0x0 PUSH1 0x60 DUP11 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH3 0x927C0 DUP13 PUSH1 0x20 ADD MLOAD DUP13 DUP13 DUP13 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x3218 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x3232 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9FD4 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x3270 SWAP2 SWAP1 PUSH2 0x9A34 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x32AC JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x32B1 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x32D5 JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x32D2 SWAP2 SWAP1 PUSH2 0x91AB JUMP JUMPDEST SWAP1 POP JUMPDEST DUP7 DUP2 LT PUSH2 0x330F JUMPI DUP4 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x3306 JUMPI DUP8 DUP10 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x32F3 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x32DE JUMP JUMPDEST POP POP POP POP PUSH2 0xFFE JUMP JUMPDEST DUP1 DUP9 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x331C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x3334 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x334C JUMPI POP POP POP PUSH2 0xFFE JUMP JUMPDEST POP POP POP PUSH1 0x1 ADD PUSH2 0x31E7 JUMP JUMPDEST PUSH2 0x335F PUSH2 0x81EF JUMP JUMPDEST PUSH2 0x3367 PUSH2 0x81EF JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 JUMPDEST DUP8 MLOAD DUP2 EQ PUSH2 0x346C JUMPI PUSH2 0x33B3 PUSH1 0x20 DUP10 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x3385 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD SUB DUP8 DUP11 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x339C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x757D SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP11 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x33CD JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x33E2 SWAP2 SWAP1 PUSH2 0x9A34 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x341F JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x3424 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0x3462 JUMPI PUSH1 0x0 PUSH2 0x3448 PUSH1 0x20 DUP4 MLOAD SUB DUP4 PUSH2 0x758D SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP5 DUP2 GT ISZERO PUSH2 0x3460 JUMPI DUP4 DUP9 MSTORE PUSH1 0x20 DUP9 ADD DUP3 SWAP1 MSTORE SWAP4 POP DUP4 JUMPDEST POP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x336C JUMP JUMPDEST POP DUP1 PUSH2 0x3478 JUMPI POP PUSH2 0x3567 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP7 MLOAD DUP2 EQ PUSH2 0x3564 JUMPI PUSH2 0x34AB PUSH1 0x20 DUP9 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x3494 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD SUB DUP4 DUP10 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x339C JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP10 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x34C5 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x34DA SWAP2 SWAP1 PUSH2 0x9A34 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x3517 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x351C JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0x355A JUMPI PUSH1 0x0 PUSH2 0x3540 PUSH1 0x20 DUP4 MLOAD SUB DUP4 PUSH2 0x758D SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP6 DUP2 GT ISZERO PUSH2 0x3558 JUMPI DUP4 DUP8 MSTORE PUSH1 0x20 DUP8 ADD DUP3 SWAP1 MSTORE SWAP5 POP DUP5 JUMPDEST POP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x347B JUMP JUMPDEST POP POP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 DUP5 ADD MLOAD PUSH1 0x60 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH2 0x35F2 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH2 0x35EB SWAP1 DUP1 PUSH2 0x35A4 DUP7 DUP10 PUSH1 0x80 DUP5 ADD PUSH2 0x9FF2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x35CB SWAP3 SWAP2 SWAP1 PUSH2 0x9FF2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x7599 DUP2 MSTORE POP DUP4 PUSH2 0x6653 JUMP JUMPDEST SWAP1 POP PUSH2 0x1257 JUMP JUMPDEST DUP2 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x360A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x3634 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x189E JUMPI PUSH1 0x0 PUSH1 0x60 DUP9 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH3 0x1E8480 DUP11 PUSH1 0x40 ADD MLOAD DUP11 DUP11 DUP11 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x366B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x3685 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9FD4 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x36C3 SWAP2 SWAP1 PUSH2 0x9A34 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x36FF JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x3704 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x3728 JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x3725 SWAP2 SWAP1 PUSH2 0x91AB JUMP JUMPDEST SWAP1 POP JUMPDEST DUP1 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x3735 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x374D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x3765 JUMPI POP POP POP PUSH2 0x189E JUMP JUMPDEST POP POP POP PUSH1 0x1 ADD PUSH2 0x363A JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP6 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x378D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x37B7 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0xBCDED89 PUSH1 0xE2 SHL DUP2 MSTORE SWAP1 SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x2F37B624 SWAP1 PUSH2 0x37E7 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x9A50 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x37FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3813 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3837 SWAP2 SWAP1 PUSH2 0x918F JUMP JUMPDEST ISZERO DUP1 PUSH2 0x38BC JUMPI POP PUSH1 0x40 MLOAD PUSH4 0xBCDED89 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x2F37B624 SWAP1 PUSH2 0x386A SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x9A50 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3882 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3896 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x38BA SWAP2 SWAP1 PUSH2 0x918F JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x38C8 JUMPI POP POP PUSH2 0x1257 JUMP JUMPDEST PUSH2 0x38D0 PUSH2 0x81A8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xF8B2CB4F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0xF8B2CB4F SWAP1 PUSH2 0x38FC SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x9A50 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3914 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3928 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x394C SWAP2 SWAP1 PUSH2 0x91AB JUMP JUMPDEST DUP2 MSTORE PUSH1 0x40 MLOAD PUSH4 0xF8B2CB4F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0xF8B2CB4F SWAP1 PUSH2 0x397A SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x9A50 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3992 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x39A6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x39CA SWAP2 SWAP1 PUSH2 0x91AB JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 MLOAD PUSH4 0x4A46C673 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x948D8CE6 SWAP1 PUSH2 0x39FB SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x9A50 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3A13 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3A27 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3A4B SWAP2 SWAP1 PUSH2 0x91AB JUMP JUMPDEST PUSH1 0x40 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE MLOAD PUSH4 0x4A46C673 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x948D8CE6 SWAP1 PUSH2 0x3A7E SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x9A50 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3A96 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3AAA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3ACE SWAP2 SWAP1 PUSH2 0x91AB JUMP JUMPDEST DUP2 PUSH1 0x60 ADD DUP2 DUP2 MSTORE POP POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD4CADF68 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3B10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3B24 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3B48 SWAP2 SWAP1 PUSH2 0x91AB JUMP JUMPDEST PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0xFFE JUMPI DUP2 MLOAD PUSH2 0x3B6C SWAP1 PUSH8 0x6F05B59D3B20000 PUSH2 0x6F7A JUMP JUMPDEST DUP7 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3B78 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD GT ISZERO PUSH2 0x3B8B JUMPI PUSH2 0xFFE JUMP JUMPDEST DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xBA9530A6 PUSH3 0x493E0 DUP5 PUSH1 0x0 ADD MLOAD DUP6 PUSH1 0x40 ADD MLOAD DUP7 PUSH1 0x20 ADD MLOAD DUP8 PUSH1 0x60 ADD MLOAD DUP13 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x3BBE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP10 PUSH1 0x80 ADD MLOAD PUSH1 0x40 MLOAD DUP9 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3BEC SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA27E JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3C04 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x3C35 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x3C32 SWAP2 DUP2 ADD SWAP1 PUSH2 0x91AB JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x3C63 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x2795 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x279A JUMP JUMPDEST DUP1 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x3C70 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3C88 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x3C9E JUMPI POP PUSH2 0xFFE JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x3B50 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 MLOAD PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x3CB7 JUMPI INVALID JUMPDEST EQ DUP1 PUSH2 0x3CCF JUMPI POP PUSH1 0x1 DUP4 MLOAD PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x3CCD JUMPI INVALID JUMPDEST EQ JUMPDEST DUP1 PUSH2 0x3CE5 JUMPI POP PUSH1 0x40 DUP5 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND ISZERO JUMPDEST DUP1 PUSH2 0x3CFB JUMPI POP PUSH1 0x60 DUP5 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND ISZERO JUMPDEST ISZERO PUSH2 0x3D08 JUMPI POP PUSH1 0x0 PUSH2 0x3DE7 JUMP JUMPDEST PUSH2 0x3D10 PUSH2 0x8209 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x1FB09795 DUP9 DUP9 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3D41 SWAP3 SWAP2 SWAP1 PUSH2 0xA1E6 JUMP JUMPDEST PUSH1 0xA0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3D59 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3D6D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3D91 SWAP2 SWAP1 PUSH2 0x9619 JUMP JUMPDEST SWAP2 SWAP5 POP SWAP3 POP SWAP1 POP PUSH1 0x1 DUP4 PUSH1 0x20 ADD MLOAD PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x3DAA JUMPI INVALID JUMPDEST EQ ISZERO DUP1 PUSH2 0x3DB5 JUMPI POP DUP1 ISZERO JUMPDEST DUP1 PUSH2 0x3DC8 JUMPI POP DUP7 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO JUMPDEST ISZERO PUSH2 0x3DD9 JUMPI PUSH1 0x0 SWAP4 POP POP POP POP PUSH2 0x3DE7 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND SWAP2 POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP1 PUSH2 0x3DFD DUP6 DUP8 PUSH2 0x6006 JUMP JUMPDEST PUSH2 0x3E08 DUP8 DUP8 DUP8 PUSH2 0x75ED JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x3E14 JUMPI PUSH2 0xBF9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x276FDAD9 PUSH1 0xE1 SHL DUP2 MSTORE ADDRESS SWAP1 PUSH4 0x4EDFB5B2 SWAP1 PUSH2 0x3E3D SWAP1 DUP11 SWAP1 DUP8 SWAP1 DUP12 SWAP1 DUP12 SWAP1 PUSH1 0x4 ADD PUSH2 0xA1AD JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3E55 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3E69 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x3E91 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x91C3 JUMP JUMPDEST DUP8 PUSH1 0x80 ADD DUP2 SWAP1 MSTORE POP DUP7 PUSH1 0x80 ADD MLOAD SWAP2 POP PUSH2 0x3F08 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 DUP8 DUP11 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x3EC1 SWAP3 SWAP2 SWAP1 PUSH2 0x9CF1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP9 DUP11 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x3EE8 SWAP3 SWAP2 SWAP1 PUSH2 0x9CF1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x7754 DUP2 MSTORE POP DUP6 PUSH2 0x6653 JUMP JUMPDEST SWAP1 POP SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x901754D7 DUP7 DUP7 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3F45 SWAP3 SWAP2 SWAP1 PUSH2 0x9A7D JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3F5D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3F71 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3F95 SWAP2 SWAP1 PUSH2 0x894E JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x3FAF JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x1257 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND ISZERO PUSH2 0x4041 JUMPI PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH2 0x3FEC SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x9A50 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4004 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4018 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x403C SWAP2 SWAP1 PUSH2 0x91AB JUMP JUMPDEST PUSH2 0x404D JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND BALANCE JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x4062 JUMPI PUSH1 0x0 SWAP3 POP POP POP PUSH2 0x1257 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x3C2803F PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x1E1401F8 SWAP1 PUSH3 0x249F0 SWAP1 PUSH2 0x4097 SWAP1 DUP11 SWAP1 DUP11 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x9B78 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x40AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x40E0 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x40DD SWAP2 DUP2 ADD SWAP1 PUSH2 0x91AB JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x4120 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x410E JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x4113 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 SWAP4 POP POP POP POP PUSH2 0x1257 JUMP JUMPDEST SWAP3 POP PUSH2 0x1257 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x4136 DUP4 DUP6 PUSH2 0x6006 JUMP JUMPDEST PUSH1 0x20 DUP6 ADD MLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x2 DUP1 DUP3 MSTORE PUSH1 0x60 DUP3 DUP2 ADD SWAP1 SWAP4 MSTORE DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP6 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x416C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP DUP5 DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x419A JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE DUP4 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x41CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x41F4 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP4 POP PUSH2 0x41FF PUSH2 0x8181 JUMP JUMPDEST PUSH2 0x4207 PUSH2 0x603C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0xE27 JUMPI PUSH1 0x60 PUSH2 0x4226 DUP12 DUP10 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xD09 JUMPI INVALID JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x7C268337 PUSH1 0xE1 SHL DUP2 MSTORE SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND SWAP1 PUSH4 0xF84D066E SWAP1 PUSH2 0x425C SWAP1 PUSH1 0x1 SWAP1 DUP6 SWAP1 DUP11 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x9F46 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4276 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x42AB JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x42A8 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x900B JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x42D9 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0xDC9 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xDCE JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x42E8 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 DUP2 SGT PUSH2 0x4302 JUMPI POP POP POP PUSH2 0xE27 JUMP JUMPDEST DUP1 DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x430F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP POP POP PUSH1 0x1 ADD PUSH2 0x420C JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x4341 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x436B JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x189E JUMPI DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x343FBCDD PUSH3 0x61A80 DUP9 DUP9 DUP9 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x439A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x43C0 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9B78 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x43D8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x4409 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x4406 SWAP2 DUP2 ADD SWAP1 PUSH2 0x91AB JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x4437 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x184E JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1853 JUMP JUMPDEST DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x4444 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x445C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x4472 JUMPI POP PUSH2 0x189E JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x4371 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 PUSH2 0x448A DUP6 DUP8 PUSH2 0x6006 JUMP JUMPDEST DUP4 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x44A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x44CC JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH2 0x44DB DUP10 DUP10 DUP10 DUP10 PUSH2 0x783B JUMP JUMPDEST SWAP5 POP SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x44F3 JUMPI POP PUSH2 0x45AD JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x45AA JUMPI PUSH1 0x0 PUSH2 0x4564 DUP10 DUP7 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x4518 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9B20 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP10 DUP8 DUP10 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x453C SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9B20 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x4557 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x7990 JUMP JUMPDEST SWAP1 POP DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x4573 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x458B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x45A1 JUMPI POP PUSH2 0x45AA JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x44F6 JUMP JUMPDEST POP POP JUMPDEST SWAP6 POP SWAP6 POP SWAP6 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x45C4 DUP4 DUP6 PUSH2 0x6006 JUMP JUMPDEST DUP2 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x45DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x4606 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x189E JUMPI DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x144A2752 PUSH3 0xF4240 DUP8 DUP10 DUP9 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x4635 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x465B SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9B78 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4673 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x46A4 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x46A1 SWAP2 DUP2 ADD SWAP1 PUSH2 0x91AB JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x46D2 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x184E JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1853 JUMP JUMPDEST DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x46DF JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x46F7 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x470D JUMPI POP PUSH2 0x189E JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x460C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH2 0x4724 DUP5 DUP7 PUSH2 0x6006 JUMP JUMPDEST DUP3 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x473C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x4766 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x47DB JUMPI PUSH1 0x0 PUSH2 0x4795 DUP10 DUP10 DUP10 DUP10 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x4788 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x3F14 JUMP JUMPDEST SWAP1 POP DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x47A4 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x47BC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x47D2 JUMPI POP PUSH2 0x47DB JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x476C JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0x901754D7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND SWAP1 PUSH4 0x901754D7 SWAP1 PUSH2 0x480A SWAP1 DUP10 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x9A7D JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4822 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4836 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x485A SWAP2 SWAP1 PUSH2 0x894E JUMP JUMPDEST SWAP3 POP POP SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 DUP2 ADD SWAP1 SWAP3 MSTORE PUSH2 0x12C5 SWAP1 DUP1 PUSH2 0x4885 DUP7 DUP10 PUSH1 0x80 DUP5 ADD PUSH2 0x9A7D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x48AC SWAP3 SWAP2 SWAP1 PUSH2 0x9A7D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x7A82 DUP2 MSTORE POP DUP4 PUSH2 0x6653 JUMP JUMPDEST PUSH1 0x60 DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x48E5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x490F JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP4 MLOAD DUP2 EQ PUSH2 0x2C9F JUMPI PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x4953 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x499D JUMPI PUSH2 0x4998 DUP4 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x4979 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x7AC9 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x49A9 JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND BALANCE JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x49B5 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x4915 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 DUP2 ADD SWAP1 SWAP3 MSTORE PUSH2 0x12C5 SWAP1 DUP1 PUSH2 0x49E7 DUP7 DUP10 PUSH1 0x80 DUP5 ADD PUSH2 0x9A7D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x4A0E SWAP3 SWAP2 SWAP1 PUSH2 0x9A7D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x7B93 DUP2 MSTORE POP DUP4 PUSH2 0x6653 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x4A3A DUP4 DUP6 PUSH2 0x6006 JUMP JUMPDEST DUP2 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x4A52 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x4A7C JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND ISZERO PUSH2 0x4A9F JUMPI PUSH2 0x4A9A DUP8 DUP8 PUSH2 0x60FD JUMP JUMPDEST PUSH2 0x4AA2 JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND ISZERO PUSH2 0x4AC4 JUMPI PUSH2 0x4ABF DUP9 DUP8 PUSH2 0x60FD JUMP JUMPDEST PUSH2 0x4AC7 JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xFFE JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH2 0x4B1D JUMPI PUSH2 0x4AFC DUP5 PUSH4 0x95B68FE7 PUSH1 0xE0 SHL DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0xF02 JUMPI INVALID JUMPDEST DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x4B08 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP4 POP DUP3 DUP2 MSTORE POP POP POP PUSH2 0x4BB7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND PUSH2 0x4B43 JUMPI PUSH2 0x4AFC DUP4 PUSH4 0xCD7724C3 PUSH1 0xE0 SHL DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0xF02 JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH2 0x4B5D DUP6 PUSH4 0x95B68FE7 PUSH1 0xE0 SHL DUP11 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0xF02 JUMPI INVALID JUMPDEST SWAP3 POP SWAP1 POP DUP1 ISZERO PUSH2 0x4B9A JUMPI PUSH2 0x4B79 DUP5 PUSH4 0xCD7724C3 PUSH1 0xE0 SHL DUP4 PUSH2 0x617C JUMP JUMPDEST DUP9 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x4B85 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP5 POP DUP3 DUP2 MSTORE POP POP POP PUSH2 0x4BB5 JUMP JUMPDEST PUSH1 0x0 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x4BA8 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP JUMPDEST POP JUMPDEST DUP1 ISZERO DUP1 PUSH2 0x4BD7 JUMPI POP DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x4BCB JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ JUMPDEST ISZERO PUSH2 0x4BE2 JUMPI POP PUSH2 0xFFE JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x4ACC JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x4C06 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x4C30 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1A23 JUMPI DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x1F00CA74 PUSH3 0x249F0 DUP7 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x4C5D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4C83 SWAP3 SWAP2 SWAP1 PUSH2 0xA23A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4C9B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x4CD1 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x4CCE SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x915D JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x4CFF JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x19BC JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x19C1 JUMP JUMPDEST DUP1 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x4D0C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x4D20 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x4D38 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x4D4E JUMPI POP PUSH2 0x1A23 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x4C36 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x4D63 DUP4 DUP6 PUSH2 0x6006 JUMP JUMPDEST DUP2 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x4D7B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x4DA5 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x189E JUMPI DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xFF1FD974 PUSH3 0xF4240 DUP9 DUP9 DUP9 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x4DD4 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4DFA SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9B78 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4E12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x4E43 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x4E40 SWAP2 DUP2 ADD SWAP1 PUSH2 0x91AB JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x4E71 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x184E JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1853 JUMP JUMPDEST DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x4E7E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x4E96 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x4EAC JUMPI POP PUSH2 0x189E JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x4DAB JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP1 PUSH2 0x4EC4 DUP6 DUP8 PUSH2 0x6006 JUMP JUMPDEST PUSH2 0x4ECF DUP8 DUP8 DUP8 PUSH2 0x75ED JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x4EDB JUMPI PUSH2 0xBF9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x276FDAD9 PUSH1 0xE1 SHL DUP2 MSTORE ADDRESS SWAP1 PUSH4 0x4EDFB5B2 SWAP1 PUSH2 0x4F04 SWAP1 DUP11 SWAP1 DUP8 SWAP1 DUP12 SWAP1 DUP12 SWAP1 PUSH1 0x4 ADD PUSH2 0xA1AD JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4F1C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4F30 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x4F58 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x91C3 JUMP JUMPDEST PUSH1 0x80 DUP9 ADD DUP2 SWAP1 MSTORE DUP5 MLOAD SWAP1 SWAP3 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x4F7A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x4FA4 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x508F JUMPI PUSH1 0x0 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xF1ED7FA4 DUP12 DUP12 DUP12 DUP12 DUP8 DUP2 MLOAD DUP2 LT PUSH2 0x4FD2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4FF9 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA177 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5011 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5025 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5049 SWAP2 SWAP1 PUSH2 0x91AB JUMP JUMPDEST SWAP1 POP DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x5058 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x5070 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x5086 JUMPI POP PUSH2 0x508F JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x4FAA JUMP JUMPDEST POP POP SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 PUSH2 0x50AA DUP6 DUP8 PUSH2 0x6006 JUMP JUMPDEST PUSH2 0x50B6 DUP9 DUP9 DUP9 DUP9 PUSH2 0x783B JUMP JUMPDEST SWAP4 POP SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x50CD JUMPI PUSH2 0x45AD JUMP JUMPDEST DUP4 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x50E5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x510F JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD SWAP1 SWAP2 MSTORE SWAP1 SWAP3 POP PUSH2 0x517C SWAP1 DUP1 PUSH2 0x5133 DUP10 DUP8 DUP10 ISZERO PUSH1 0x80 DUP6 ADD PUSH2 0x9B20 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP10 DUP7 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x515C SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9B20 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x7990 DUP2 MSTORE POP DUP7 PUSH2 0x6653 JUMP JUMPDEST SWAP2 POP POP SWAP6 POP SWAP6 POP SWAP6 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 PUSH2 0x5199 DUP6 DUP8 PUSH2 0x6006 JUMP JUMPDEST DUP4 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x51B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x51DB JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP DUP9 MLOAD PUSH1 0x40 MLOAD PUSH4 0x939D863 PUSH1 0xE1 SHL DUP2 MSTORE SWAP2 SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x1273B0C6 SWAP1 PUSH2 0x520E SWAP1 DUP11 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x9A7D JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5226 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x523A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x525E SWAP2 SWAP1 PUSH2 0x894E JUMP JUMPDEST SWAP3 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND ISZERO PUSH2 0x527C JUMPI POP PUSH1 0x1 SWAP4 POP DUP7 PUSH2 0x531B JUMP JUMPDEST DUP9 MLOAD PUSH1 0x40 MLOAD PUSH4 0x939D863 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x1273B0C6 SWAP1 PUSH2 0x52AD SWAP1 DUP11 SWAP1 DUP13 SWAP1 PUSH1 0x4 ADD PUSH2 0x9A7D JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x52C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x52D9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x52FD SWAP2 SWAP1 PUSH2 0x894E JUMP JUMPDEST SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x5314 JUMPI POP POP PUSH2 0xBF9 JUMP JUMPDEST POP PUSH1 0x0 SWAP4 POP DUP6 JUMPDEST DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDD58B41C PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5354 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5368 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x538C SWAP2 SWAP1 PUSH2 0x918F JUMP JUMPDEST PUSH2 0x5397 JUMPI POP POP PUSH2 0xBF9 JUMP JUMPDEST PUSH2 0x540F PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 DUP10 DUP8 DUP6 DUP15 PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x53C0 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9A97 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP11 DUP8 DUP6 DUP15 PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x53EF SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9A97 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x6850 DUP2 MSTORE POP DUP8 PUSH2 0x6653 JUMP JUMPDEST SWAP3 POP POP POP SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x5436 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x5460 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 EQ PUSH2 0xA9B JUMPI PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x54A4 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x54F0 JUMPI PUSH2 0x54EB DUP5 DUP5 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x54CB JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x7C48 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x54F3 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x54FF JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x5466 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x552D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x5557 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x189E JUMPI DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x838E6A22 PUSH3 0x493E0 DUP9 DUP9 DUP9 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x5586 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x55AC SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9B78 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x55C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x55F5 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x55F2 SWAP2 DUP2 ADD SWAP1 PUSH2 0x91AB JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x5623 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x184E JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1853 JUMP JUMPDEST DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x5630 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x555D JUMP JUMPDEST PUSH1 0x0 DUP5 PUSH1 0x80 ADD MLOAD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x565D JUMPI POP PUSH1 0x0 PUSH2 0x1257 JUMP JUMPDEST DUP5 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x418436BC PUSH3 0x7A120 DUP8 PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x5697 JUMPI DUP7 PUSH2 0x56AD JUMP JUMPDEST PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE JUMPDEST DUP9 PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x56D0 JUMPI DUP7 PUSH2 0x56E6 JUMP JUMPDEST PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE JUMPDEST DUP7 PUSH1 0x0 DUP12 PUSH1 0x80 ADD MLOAD PUSH1 0x40 MLOAD DUP8 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x570E SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9B9C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5726 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x5757 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x5754 SWAP2 DUP2 ADD SWAP1 PUSH2 0x91AB JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x5795 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x5785 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x578A JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 SWAP2 POP POP PUSH2 0x1257 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x57A0 DUP6 PUSH2 0x7D14 JUMP JUMPDEST PUSH1 0xFF AND SWAP1 POP PUSH1 0x0 PUSH2 0x57B0 DUP8 PUSH2 0x7D14 JUMP JUMPDEST PUSH1 0xFF AND SWAP1 POP PUSH8 0xDE0B6B3A7640000 DUP2 PUSH1 0xA EXP DUP4 PUSH1 0xA EXP DUP8 DUP7 MUL MUL DUP2 PUSH2 0x57D1 JUMPI INVALID JUMPDEST DIV DUP2 PUSH2 0x57D9 JUMPI INVALID JUMPDEST DIV SWAP4 POP POP POP POP PUSH2 0x1257 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH2 0x57F2 DUP5 DUP7 PUSH2 0x6006 JUMP JUMPDEST DUP3 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x580A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x5834 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH2 0x589F PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 DUP10 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x5858 SWAP3 SWAP2 SWAP1 PUSH2 0x9A7D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP10 DUP10 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x587F SWAP3 SWAP2 SWAP1 PUSH2 0x9A7D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x7D1F DUP2 MSTORE POP DUP6 PUSH2 0x6653 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x901754D7 PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND SWAP1 PUSH4 0x901754D7 SWAP1 PUSH2 0x480A SWAP1 DUP10 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x9A7D JUMP JUMPDEST PUSH2 0x58D8 PUSH2 0x81EF JUMP JUMPDEST PUSH2 0x58E0 PUSH2 0x81EF JUMP JUMPDEST PUSH1 0x0 NOT DUP1 PUSH1 0x0 JUMPDEST DUP7 MLOAD DUP2 EQ PUSH2 0x59DC JUMPI PUSH2 0x5917 PUSH1 0x20 DUP9 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x5900 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD SUB DUP8 DUP10 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x339C JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP10 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x5931 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x5946 SWAP2 SWAP1 PUSH2 0x9A34 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x5983 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x5988 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0x59D2 JUMPI PUSH1 0x0 PUSH2 0x59AC PUSH1 0x20 DUP4 MLOAD SUB DUP4 PUSH2 0x758D SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 GT DUP1 ISZERO PUSH2 0x59BD JUMPI POP DUP5 DUP2 LT JUMPDEST ISZERO PUSH2 0x59D0 JUMPI DUP4 DUP8 MSTORE PUSH1 0x20 DUP8 ADD DUP3 SWAP1 MSTORE SWAP4 POP DUP4 JUMPDEST POP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x58E7 JUMP JUMPDEST POP PUSH1 0x0 NOT DUP2 EQ ISZERO PUSH2 0x59ED JUMPI POP PUSH2 0x3567 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP8 MLOAD DUP2 EQ PUSH2 0x3564 JUMPI PUSH2 0x5A20 PUSH1 0x20 DUP10 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x5A09 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD SUB DUP4 DUP11 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x339C JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP11 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x5A3A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x5A4F SWAP2 SWAP1 PUSH2 0x9A34 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x5A8C JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x5A91 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0x5ADB JUMPI PUSH1 0x0 PUSH2 0x5AB5 PUSH1 0x20 DUP4 MLOAD SUB DUP4 PUSH2 0x758D SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 GT DUP1 ISZERO PUSH2 0x5AC6 JUMPI POP DUP6 DUP2 LT JUMPDEST ISZERO PUSH2 0x5AD9 JUMPI DUP4 DUP9 MSTORE PUSH1 0x20 DUP9 ADD DUP3 SWAP1 MSTORE SWAP5 POP DUP5 JUMPDEST POP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x59F0 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xC45A0155 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5B22 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5B36 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5B5A SWAP2 SWAP1 PUSH2 0x894E JUMP JUMPDEST SWAP1 POP PUSH1 0x1 DUP4 MLOAD SUB PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x5B76 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x5BA0 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x5DCB JUMPI PUSH1 0x60 DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x5B1DC86F PUSH3 0x249F0 DUP8 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x5BD0 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 DUP7 PUSH1 0x1 ADD DUP2 MLOAD DUP2 LT PUSH2 0x5BE7 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5C0C SWAP3 SWAP2 SWAP1 PUSH2 0x9A7D JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5C24 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x5C5A JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x5C57 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x8D06 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x5CA9 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x5C88 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x5C8D JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE SWAP4 POP PUSH2 0x5DCE SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 MLOAD LT ISZERO PUSH2 0x5CD6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5CCD SWAP1 PUSH2 0xA0D8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x5DBF JUMPI PUSH1 0x0 DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x5CF0 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x18160DDD PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5D30 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5D44 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5D68 SWAP2 SWAP1 PUSH2 0x91AB JUMP JUMPDEST SWAP1 POP DUP3 DUP2 GT ISZERO PUSH2 0x5DB6 JUMPI DUP1 SWAP3 POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x5D81 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 DUP8 DUP2 MLOAD DUP2 LT PUSH2 0x5D95 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x5CD9 JUMP JUMPDEST POP POP POP POP PUSH1 0x1 ADD PUSH2 0x5BA6 JUMP JUMPDEST POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP6 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x21F8A721 DUP8 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x9232494E PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5E28 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5E3C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5E60 SWAP2 SWAP1 PUSH2 0x91AB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5E7C SWAP2 SWAP1 PUSH2 0x9E83 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5E94 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5EA8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5ECC SWAP2 SWAP1 PUSH2 0x894E JUMP JUMPDEST SWAP2 POP DUP6 PUSH1 0x20 ADD MLOAD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x5EE1 JUMPI PUSH2 0x5FFD JUMP JUMPDEST PUSH1 0x0 DUP1 JUMPDEST DUP8 PUSH1 0x20 ADD MLOAD MLOAD DUP2 LT ISZERO PUSH2 0x5FFA JUMPI PUSH1 0x2 DUP9 PUSH1 0x20 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x5F04 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD LT ISZERO PUSH2 0x5F18 JUMPI PUSH2 0x5FF2 JUMP JUMPDEST DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x7F9C0ECD PUSH3 0x493E0 DUP11 PUSH1 0x20 ADD MLOAD DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x5F3B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 PUSH1 0x1 DUP11 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x5F53 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5F78 SWAP3 SWAP2 SWAP1 PUSH2 0x9D3A JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5F90 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x5FC1 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x5FBE SWAP2 DUP2 ADD SWAP1 PUSH2 0x91AB JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x5FCA JUMPI PUSH2 0x5FF2 JUMP JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x5FF0 JUMPI DUP1 SWAP3 POP DUP9 PUSH1 0x20 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x5FE5 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP4 POP JUMPDEST POP JUMPDEST PUSH1 0x1 ADD PUSH2 0x5EE5 JUMP JUMPDEST POP POP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x6038 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5CCD SWAP1 PUSH2 0xA04E JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x6044 PUSH2 0x8181 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP2 ADD DUP3 MSTORE ADDRESS DUP1 DUP3 MSTORE PUSH1 0x0 PUSH1 0x20 DUP4 ADD DUP2 SWAP1 MSTORE SWAP3 DUP3 ADD MSTORE PUSH1 0x60 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP2 DUP3 SWAP2 SWAP1 DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x608D PUSH2 0x822B JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x6085 JUMPI SWAP1 POP POP SWAP1 POP PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP6 PUSH1 0x0 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP DUP2 MSTORE POP DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x60EB JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x3795FB1 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x6F2BF62 SWAP1 PUSH2 0x612C SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x9A50 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6144 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x6158 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3DE7 SWAP2 SWAP1 PUSH2 0x894E JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH2 0x6192 JUMPI PUSH2 0x928 JUMP JUMPDEST PUSH1 0x60 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH3 0x249F0 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x61B4 SWAP2 SWAP1 PUSH2 0x9E83 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x61F2 SWAP2 SWAP1 PUSH2 0x9A34 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x622E JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x6233 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP DUP2 ISZERO PUSH2 0x6256 JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x6253 SWAP2 SWAP1 PUSH2 0x91AB JUMP JUMPDEST SWAP3 POP JUMPDEST POP SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD9638D36 DUP12 PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6295 SWAP2 SWAP1 PUSH2 0x9E83 JUMP JUMPDEST PUSH1 0xA0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x62AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x62C1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x62E5 SWAP2 SWAP1 PUSH2 0x9710 JUMP JUMPDEST SWAP5 POP SWAP5 POP POP POP SWAP3 POP PUSH1 0x0 PUSH3 0xF4240 SWAP1 POP DUP11 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x640D JUMPI PUSH1 0x0 PUSH2 0x6324 DUP10 PUSH5 0xE8D4A51000 PUSH2 0x7D6F JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x6348 PUSH12 0x33B2E3C9FD0803CE8000000 PUSH2 0x6342 DUP9 DUP6 PUSH2 0x7DA5 JUMP JUMPDEST SWAP1 PUSH2 0x7D6F JUMP JUMPDEST SWAP1 POP DUP5 DUP2 LT PUSH2 0x6360 JUMPI PUSH1 0x0 SWAP7 POP POP POP POP POP POP POP PUSH2 0x6516 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x63EF PUSH8 0xDE0B6B3A7640000 PUSH2 0x63E9 DUP13 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x568D4B6F PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x63AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x63BE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x63E2 SWAP2 SWAP1 PUSH2 0x91AB JUMP JUMPDEST DUP7 SWAP1 PUSH2 0x7D6F JUMP JUMPDEST SWAP1 PUSH2 0x7DC1 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x63FD DUP5 DUP4 PUSH2 0x7DEB JUMP JUMPDEST SWAP9 POP PUSH2 0x6516 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP11 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x650D JUMPI DUP8 DUP5 DUP2 GT ISZERO PUSH2 0x6442 JUMPI PUSH1 0x0 SWAP6 POP POP POP POP POP POP PUSH2 0x6516 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x645E PUSH12 0x33B2E3C9FD0803CE8000000 PUSH2 0x6342 DUP9 DUP6 PUSH2 0x7DEB JUMP JUMPDEST SWAP1 POP DUP4 DUP2 GT PUSH2 0x6476 JUMPI PUSH1 0x0 SWAP7 POP POP POP POP POP POP POP PUSH2 0x6516 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x64FB DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xFAE036D5 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x64B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x64C8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x64EC SWAP2 SWAP1 PUSH2 0x91AB JUMP JUMPDEST PUSH8 0xDE0B6B3A7640000 SWAP1 PUSH2 0x7DA5 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x63FD DUP3 PUSH2 0x63E9 DUP7 DUP9 PUSH2 0x7D6F JUMP JUMPDEST PUSH1 0x0 SWAP5 POP POP POP POP POP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x652B PUSH2 0x825D JUMP JUMPDEST DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x653F SWAP2 SWAP1 PUSH2 0x9257 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x6559 SWAP2 SWAP1 PUSH2 0x923B JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH4 0x22DB5ED1 PUSH1 0xE2 SHL DUP6 DUP8 DUP7 PUSH2 0x6574 DUP13 PUSH2 0x7E0A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x6587 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA10F JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x65C5 SWAP2 SWAP1 PUSH2 0x9A34 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x6600 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x6605 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH2 0x661D JUMPI PUSH1 0x0 SWAP6 POP POP POP POP POP POP PUSH2 0x3DE7 JUMP JUMPDEST DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x6631 SWAP2 SWAP1 PUSH2 0x915D JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x663D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP6 POP POP POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x666C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x6696 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP2 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x66A8 JUMPI PUSH2 0x5DCE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x66D9 DUP5 PUSH1 0x0 ADD MLOAD DUP6 PUSH1 0x20 ADD MLOAD DUP6 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x66C4 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 PUSH1 0x40 ADD MLOAD PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x66E6 JUMPI POP PUSH2 0x5DCE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6703 DUP6 PUSH1 0x20 ADD MLOAD DUP7 PUSH1 0x0 ADD MLOAD DUP5 DUP9 PUSH1 0x40 ADD MLOAD PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x6711 JUMPI POP POP PUSH2 0x5DCE JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x6847 JUMPI PUSH1 0x0 JUMPDEST PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x6809 JUMPI PUSH2 0x6747 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x6738 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 DUP7 PUSH2 0x7E4B JUMP JUMPDEST SWAP4 POP DUP4 PUSH2 0x6753 JUMPI PUSH2 0x6809 JUMP JUMPDEST PUSH2 0x6762 PUSH2 0x2715 PUSH2 0x2710 DUP7 PUSH2 0x7E4B JUMP JUMPDEST SWAP4 POP DUP4 PUSH2 0x676E JUMPI PUSH2 0x6809 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x678B DUP9 PUSH1 0x20 ADD MLOAD DUP10 PUSH1 0x0 ADD MLOAD DUP8 DUP12 PUSH1 0x40 ADD MLOAD PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x6798 JUMPI POP PUSH2 0x6809 JUMP JUMPDEST DUP1 SWAP4 POP DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x67A7 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 LT PUSH2 0x6800 JUMPI PUSH1 0x0 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x67C3 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x2710 DUP10 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x67DA JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 SUB MUL DUP2 PUSH2 0x67EC JUMPI INVALID JUMPDEST DIV SWAP1 POP PUSH1 0x5 DUP2 GT PUSH2 0x67FE JUMPI POP POP PUSH2 0x6809 JUMP JUMPDEST POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x6720 JUMP JUMPDEST POP PUSH2 0x6828 DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x6819 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP4 DUP6 PUSH2 0x7E4B JUMP JUMPDEST DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x6834 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x6714 JUMP JUMPDEST POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP8 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x686C SWAP2 SWAP1 PUSH2 0x89A3 JUMP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 POP SWAP4 POP DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x6956 JUMPI PUSH1 0x40 MLOAD PUSH4 0x51400F0B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0xA2801E16 SWAP1 PUSH3 0x493E0 SWAP1 PUSH2 0x68BF SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x9E83 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x68D7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x6908 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x6905 SWAP2 DUP2 ADD SWAP1 PUSH2 0x91AB JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x694A JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x6936 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x693B JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 SWAP6 POP POP POP POP POP POP PUSH2 0x3DE7 JUMP JUMPDEST SWAP5 POP PUSH2 0x3DE7 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xCA19EBD9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH4 0xCA19EBD9 SWAP1 PUSH3 0x493E0 SWAP1 PUSH2 0x68BF SWAP1 DUP8 SWAP1 DUP12 SWAP1 PUSH1 0x4 ADD PUSH2 0x9A64 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x2 DUP3 DUP5 MLOAD SUB LT ISZERO PUSH2 0x69AF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5CCD SWAP1 PUSH2 0xA00A JUMP JUMPDEST PUSH2 0x69B7 PUSH2 0x827D JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP1 DUP3 ADD DUP4 MSTORE PUSH2 0x1F4 DUP3 MSTORE PUSH2 0xBB8 PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x2710 DUP3 DUP5 ADD MSTORE DUP3 MLOAD PUSH1 0x3 DUP1 DUP3 MSTORE PUSH1 0x80 DUP3 ADD SWAP1 SWAP5 MSTORE SWAP2 SWAP3 SWAP1 SWAP2 SWAP1 DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP PUSH1 0x0 DUP1 DUP7 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x6A0B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 DUP8 DUP8 PUSH1 0x1 ADD DUP2 MLOAD DUP2 LT PUSH2 0x6A26 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 JUMPDEST PUSH1 0x3 DUP2 LT ISZERO PUSH2 0x6B1B JUMPI PUSH1 0x0 DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x1698EE82 DUP6 DUP6 DUP11 DUP7 PUSH1 0x3 DUP2 LT PUSH2 0x6A5B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A7E SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9ECB JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6A96 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x6AAA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x6ACE SWAP2 SWAP1 PUSH2 0x894E JUMP JUMPDEST SWAP1 POP PUSH2 0x6AD9 DUP2 PUSH2 0x7EA3 JUMP JUMPDEST ISZERO PUSH2 0x6B12 JUMPI DUP1 DUP7 DUP7 DUP1 PUSH1 0x1 ADD SWAP8 POP DUP2 MLOAD DUP2 LT PUSH2 0x6AF1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x6A33 JUMP JUMPDEST POP POP POP DUP1 PUSH2 0x6B2B JUMPI POP POP POP PUSH2 0x3DE7 JUMP JUMPDEST DUP6 MLOAD DUP6 PUSH1 0x2 ADD EQ ISZERO PUSH2 0x6C21 JUMPI DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x6B4D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x6B81 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x6B6C JUMPI SWAP1 POP JUMPDEST POP SWAP4 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x6C18 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE SWAP1 PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x6BB9 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP3 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x6BD0 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x6BE4 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x6BF8 JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE PUSH1 0x1 ADD PUSH2 0x6B87 JUMP JUMPDEST POP POP POP POP PUSH2 0x3DE7 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x6C31 DUP9 DUP9 DUP9 PUSH1 0x1 ADD PUSH2 0x6989 JUMP JUMPDEST SWAP1 POP DUP1 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x6C46 JUMPI POP POP POP POP PUSH2 0x3DE7 JUMP JUMPDEST DUP1 MLOAD DUP3 MUL PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x6C5F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x6C93 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x6C7E JUMPI SWAP1 POP JUMPDEST POP SWAP5 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x6E13 JUMPI PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x6E0A JUMPI DUP3 MLOAD DUP3 DUP2 MUL DUP3 ADD SWAP1 DUP5 SWAP1 DUP4 SWAP1 DUP2 LT PUSH2 0x6CC1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD PUSH1 0x1 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x6CE2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x6D0C JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP DUP9 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x6D19 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x6D30 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x6D44 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x6D58 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP PUSH1 0x0 JUMPDEST DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x6D87 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD DUP2 LT ISZERO PUSH2 0x6E00 JUMPI DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x6DA3 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x6DB6 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP10 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x6DCA JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 PUSH1 0x1 ADD DUP2 MLOAD DUP2 LT PUSH2 0x6DE0 JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE PUSH1 0x1 ADD PUSH2 0x6D7B JUMP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x6CA4 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x6C99 JUMP JUMPDEST POP POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x2 DUP4 MLOAD LT ISZERO DUP1 ISZERO PUSH2 0x6E37 JUMPI POP DUP2 MLOAD PUSH1 0x1 ADD DUP4 MLOAD EQ JUMPDEST PUSH2 0x6E53 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5CCD SWAP1 PUSH2 0xA093 JUMP JUMPDEST DUP2 MLOAD PUSH1 0x3 MUL DUP4 MLOAD PUSH1 0x14 MUL ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x6E73 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x6E9E JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x20 DUP2 ADD PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x5DCB JUMPI DUP1 ISZERO PUSH2 0x6F4D JUMPI PUSH1 0x0 DUP5 PUSH1 0x1 DUP4 SUB DUP2 MLOAD DUP2 LT PUSH2 0x6EC8 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDDCA3F43 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6F08 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x6F1C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x6F40 SWAP2 SWAP1 PUSH2 0x9695 JUMP JUMPDEST PUSH1 0xE8 SHL DUP4 MSTORE POP PUSH1 0x3 SWAP1 SWAP2 ADD SWAP1 JUMPDEST PUSH1 0x0 DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x6F5B JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD PUSH1 0x60 SHL DUP4 MSTORE POP PUSH1 0x14 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x6EA8 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MUL DUP4 ISZERO DUP1 ISZERO SWAP1 PUSH2 0x6F97 JUMPI POP DUP3 DUP5 DUP3 DUP2 PUSH2 0x6F93 JUMPI INVALID JUMPDEST DIV EQ ISZERO JUMPDEST ISZERO PUSH2 0x6FA6 JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x5DCE JUMP JUMPDEST PUSH8 0x6F05B59D3B20000 DUP2 ADD DUP2 DUP2 LT ISZERO PUSH2 0x6FC4 JUMPI PUSH1 0x0 SWAP3 POP POP POP PUSH2 0x5DCE JUMP JUMPDEST PUSH8 0xDE0B6B3A7640000 SWAP1 DIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x6FF0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x701A JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x2D92 JUMPI DUP3 PUSH1 0x1 DUP3 DUP6 MLOAD SUB SUB DUP2 MLOAD DUP2 LT PUSH2 0x703B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x704F JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE PUSH1 0x1 ADD PUSH2 0x7020 JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x7088 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x70B2 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x2D92 JUMPI DUP3 PUSH1 0x1 DUP3 DUP6 MLOAD SUB SUB DUP2 MLOAD DUP2 LT PUSH2 0x70D3 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x70E7 JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE PUSH1 0x1 ADD PUSH2 0x70B8 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x7120 SWAP2 SWAP1 PUSH2 0x896A JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x713A SWAP2 SWAP1 PUSH2 0x894E JUMP JUMPDEST SWAP1 POP ADDRESS PUSH4 0xE8E4AF09 DUP4 DUP6 DUP5 PUSH2 0x714E DUP11 PUSH2 0x7E0A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x716D SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9AC2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7185 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x71BA JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x71B7 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x915D JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x71FB JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x71E8 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x71ED JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 SWAP5 POP POP POP POP POP PUSH2 0x3DE7 JUMP JUMPDEST DUP1 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x7208 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP5 POP POP POP POP POP PUSH2 0x3DE7 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1257 DUP4 PUSH2 0x63E9 PUSH2 0x722F DUP3 PUSH1 0x1 PUSH2 0x7DEB JUMP JUMPDEST PUSH2 0x7239 DUP9 DUP8 PUSH2 0x7D6F JUMP JUMPDEST SWAP1 PUSH2 0x7DA5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x12 SWAP1 POP PUSH1 0x0 PUSH1 0x60 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x4 DUP2 MSTORE PUSH1 0x20 ADD PUSH4 0x313CE567 PUSH1 0xE0 SHL DUP2 MSTORE POP PUSH1 0x40 MLOAD PUSH2 0x727D SWAP2 SWAP1 PUSH2 0x9A34 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x72B8 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x72BD JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x72D1 JUMPI POP PUSH1 0x20 DUP2 MLOAD LT ISZERO JUMPDEST ISZERO PUSH2 0x72E4 JUMPI PUSH2 0x72E1 DUP2 PUSH1 0x0 PUSH2 0x758D JUMP JUMPDEST SWAP3 POP JUMPDEST POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD9638D36 DUP12 PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7321 SWAP2 SWAP1 PUSH2 0x9E83 JUMP JUMPDEST PUSH1 0xA0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7339 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x734D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x7371 SWAP2 SWAP1 PUSH2 0x9710 JUMP JUMPDEST SWAP5 POP SWAP5 POP POP POP SWAP3 POP DUP10 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x7488 JUMPI PUSH1 0x0 DUP8 SWAP1 POP PUSH1 0x0 PUSH2 0x7421 DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x568D4B6F PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x73DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x73EE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x7412 SWAP2 SWAP1 PUSH2 0x91AB JUMP JUMPDEST PUSH8 0xDE0B6B3A7640000 SWAP1 PUSH2 0x7DEB JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x743B DUP3 PUSH2 0x63E9 DUP6 PUSH8 0xDE0B6B3A7640000 PUSH2 0x7D6F JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x7459 PUSH12 0x33B2E3C9FD0803CE8000000 PUSH2 0x6342 DUP10 DUP6 PUSH2 0x7DA5 JUMP JUMPDEST SWAP1 POP DUP6 DUP2 LT PUSH2 0x7472 JUMPI PUSH1 0x0 SWAP8 POP POP POP POP POP POP POP POP PUSH2 0x6516 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x63FD PUSH1 0x1 PUSH2 0x7239 DUP6 PUSH5 0xE8D4A51000 PUSH2 0x7DC1 JUMP JUMPDEST DUP10 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x756D JUMPI PUSH1 0x0 PUSH2 0x74B7 DUP9 PUSH5 0xE8D4A51000 PUSH2 0x7D6F JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x74F7 DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xFAE036D5 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x64B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x7511 PUSH8 0xDE0B6B3A7640000 PUSH2 0x63E9 DUP6 DUP6 PUSH2 0x7D6F JUMP JUMPDEST SWAP1 POP DUP6 DUP2 GT ISZERO PUSH2 0x752A JUMPI PUSH1 0x0 SWAP7 POP POP POP POP POP POP POP PUSH2 0x6516 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7546 PUSH12 0x33B2E3C9FD0803CE8000000 PUSH2 0x6342 DUP10 DUP6 PUSH2 0x7DEB JUMP JUMPDEST SWAP1 POP DUP5 DUP2 GT PUSH2 0x755F JUMPI PUSH1 0x0 SWAP8 POP POP POP POP POP POP POP POP PUSH2 0x6516 JUMP JUMPDEST POP SWAP6 POP PUSH2 0x6516 SWAP5 POP POP POP POP POP JUMP JUMPDEST POP PUSH1 0x0 SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x7588 DUP4 DUP4 DUP4 PUSH2 0x80AF JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3DE7 DUP4 DUP4 PUSH2 0x80D6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x75A4 PUSH2 0x825D JUMP JUMPDEST DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x75B8 SWAP2 SWAP1 PUSH2 0x9257 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x75D2 SWAP2 SWAP1 PUSH2 0x923B JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH4 0x205E01D7 PUSH1 0xE1 SHL DUP6 DUP8 DUP7 PUSH2 0x6574 DUP13 PUSH2 0x7E0A JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH1 0x20 ADD MLOAD SWAP1 POP PUSH1 0x60 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x910FFC71 DUP8 PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x762B JUMPI DUP7 PUSH2 0x7641 JUMP JUMPDEST PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE JUMPDEST DUP9 PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x7664 JUMPI DUP7 PUSH2 0x767A JUMP JUMPDEST PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP2 DUP3 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP7 SWAP1 SHL AND SWAP1 SWAP2 MSTORE PUSH2 0x76AE SWAP3 SWAP2 SWAP1 PUSH1 0x1 SWAP1 PUSH1 0x24 DUP2 ADD PUSH2 0x9B44 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x76C6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x76DA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x7702 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x8D9E JUMP JUMPDEST POP POP SWAP1 POP DUP1 MLOAD DUP7 PUSH1 0x0 ADD MLOAD LT PUSH2 0x771E JUMPI POP PUSH1 0x0 SWAP2 POP PUSH2 0x3DE7 SWAP1 POP JUMP JUMPDEST DUP1 DUP7 PUSH1 0x0 ADD MLOAD DUP2 MLOAD DUP2 LT PUSH2 0x772E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP3 POP PUSH1 0xF8 DUP4 SWAP1 SHR PUSH1 0x0 SHR PUSH1 0xBB EQ ISZERO PUSH2 0x1A23 JUMPI POP PUSH1 0x0 SWAP2 POP PUSH2 0x3DE7 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x775F PUSH2 0x829B JUMP JUMPDEST DUP5 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x7773 SWAP2 SWAP1 PUSH2 0x8A51 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP7 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x778D SWAP2 SWAP1 PUSH2 0x8A51 JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0x3C7B5FE9 PUSH1 0xE2 SHL DUP2 MSTORE SWAP1 SWAP2 POP ADDRESS SWAP1 PUSH4 0xF1ED7FA4 SWAP1 PUSH2 0x77BA SWAP1 DUP6 SWAP1 DUP6 SWAP1 DUP9 SWAP1 DUP12 SWAP1 PUSH1 0x4 ADD PUSH2 0xA177 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x77D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x7802 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x77FF SWAP2 DUP2 ADD SWAP1 PUSH2 0x91AB JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x7830 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x71E8 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x71ED JUMP JUMPDEST SWAP4 POP PUSH2 0x3DE7 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x57A281DC DUP7 DUP7 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x786E SWAP3 SWAP2 SWAP1 PUSH2 0x9A7D JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7886 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x789A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x78C2 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x8D06 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 SWAP2 POP DUP1 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x795B JUMPI PUSH1 0x40 MLOAD PUSH4 0x15E8A077 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND SWAP1 PUSH4 0x57A281DC SWAP1 PUSH2 0x7900 SWAP1 DUP8 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x9A7D JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7918 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x792C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x7954 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x8D06 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 SWAP2 POP JUMPDEST DUP1 MLOAD DUP7 LT PUSH2 0x7970 JUMPI PUSH1 0x0 DUP1 SWAP3 POP SWAP3 POP POP PUSH2 0x5FFD JUMP JUMPDEST DUP1 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x797C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP3 POP POP SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP7 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x79AA SWAP2 SWAP1 PUSH2 0x8A01 JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP DUP1 ISZERO PUSH2 0x7A4E JUMPI PUSH1 0x40 MLOAD PUSH4 0x3CD0243B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x79A04876 SWAP1 PUSH3 0x493E0 SWAP1 PUSH2 0x79EA SWAP1 PUSH1 0x0 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x9A64 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7A01 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x7A32 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x7A2F SWAP2 DUP2 ADD SWAP1 PUSH2 0x96B8 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x7A42 JUMPI PUSH1 0x0 SWAP4 POP POP POP POP PUSH2 0x3DE7 JUMP JUMPDEST POP SWAP4 POP PUSH2 0x3DE7 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x66410A21 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x66410A21 SWAP1 PUSH3 0x493E0 SWAP1 PUSH2 0x79EA SWAP1 PUSH1 0x0 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x9A64 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x7A9B SWAP2 SWAP1 PUSH2 0x896A JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x7AB5 SWAP2 SWAP1 PUSH2 0x894E JUMP JUMPDEST SWAP1 POP ADDRESS PUSH4 0x30D6570D DUP4 DUP6 DUP5 PUSH2 0x714E DUP11 PUSH2 0x7E0A JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP6 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x7AF1 SWAP2 SWAP1 PUSH2 0x9A50 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x7B2F SWAP2 SWAP1 PUSH2 0x9A34 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x7B6A JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x7B6F JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x7B83 JUMPI POP PUSH1 0x20 DUP2 MLOAD LT ISZERO JUMPDEST ISZERO PUSH2 0x5DCB JUMPI PUSH2 0x12C5 DUP2 PUSH1 0x0 PUSH2 0x758D JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x7BAC SWAP2 SWAP1 PUSH2 0x896A JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x7BC6 SWAP2 SWAP1 PUSH2 0x894E JUMP JUMPDEST SWAP1 POP ADDRESS PUSH4 0xA4698417 PUSH3 0x61A80 DUP5 DUP7 DUP6 PUSH2 0x7BDE DUP12 PUSH2 0x7E0A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP7 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7BFD SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9AC2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7C15 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x71BA JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x71B7 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x915D JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDD62ED3E PUSH1 0xE0 SHL DUP7 DUP7 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x7C72 SWAP3 SWAP2 SWAP1 PUSH2 0x9A7D JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x7CB0 SWAP2 SWAP1 PUSH2 0x9A34 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x7CEB JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x7CF0 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x7D04 JUMPI POP PUSH1 0x20 DUP2 MLOAD LT ISZERO JUMPDEST ISZERO PUSH2 0x1A23 JUMPI PUSH2 0x6516 DUP2 PUSH1 0x0 PUSH2 0x758D JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5DCE DUP3 PUSH2 0x723F JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x7D38 SWAP2 SWAP1 PUSH2 0x896A JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP1 DUP7 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x7D53 SWAP2 SWAP1 PUSH2 0x896A JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x7D63 DUP5 DUP5 DUP4 DUP10 PUSH2 0x3F14 JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x7D7E JUMPI POP PUSH1 0x0 PUSH2 0x5DCE JUMP JUMPDEST DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 PUSH2 0x7D8B JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x3DE7 JUMPI PUSH2 0x3DE7 PUSH2 0x7DA0 PUSH1 0x1 DUP7 DUP7 PUSH2 0x8100 JUMP JUMPDEST PUSH2 0x815A JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x3DE7 JUMPI PUSH2 0x3DE7 PUSH2 0x7DA0 PUSH1 0x0 DUP7 DUP7 PUSH2 0x8100 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x7DD7 JUMPI PUSH2 0x7DD7 PUSH2 0x7DA0 PUSH1 0x3 DUP6 DUP6 PUSH2 0x8100 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP2 PUSH2 0x7DE2 JUMPI INVALID JUMPDEST DIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x7E04 JUMPI PUSH2 0x7E04 PUSH2 0x7DA0 PUSH1 0x2 DUP6 DUP6 PUSH2 0x8100 JUMP JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP2 PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP2 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x7E3A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP4 ISZERO DUP1 PUSH2 0x7E58 JUMPI POP DUP2 ISZERO JUMPDEST DUP1 PUSH2 0x7E61 JUMPI POP DUP3 ISZERO JUMPDEST ISZERO PUSH2 0x7E6E JUMPI POP PUSH1 0x0 PUSH2 0x3DE7 JUMP JUMPDEST DUP4 DUP3 MUL DUP3 DUP6 DUP3 DUP2 PUSH2 0x7E7B JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x7E8B JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x3DE7 JUMP JUMPDEST DUP4 PUSH1 0x1 DUP6 SUB DUP3 ADD DUP2 PUSH2 0x7E99 JUMPI INVALID JUMPDEST DIV SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 EXTCODESIZE DUP1 PUSH2 0x7EB6 JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0xC08 JUMP JUMPDEST POP DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDFE1681 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7EF0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x7F04 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x7F28 SWAP2 SWAP1 PUSH2 0x894E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x70A08231 DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7F53 SWAP2 SWAP1 PUSH2 0x9A50 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7F6B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x7F7F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x7FA3 SWAP2 SWAP1 PUSH2 0x91AB JUMP JUMPDEST PUSH2 0x7FAF JUMPI POP PUSH1 0x0 PUSH2 0xC08 JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD21220A7 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7FE8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x7FFC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x8020 SWAP2 SWAP1 PUSH2 0x894E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x70A08231 DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x804B SWAP2 SWAP1 PUSH2 0x9A50 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x8063 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x8077 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x809B SWAP2 SWAP1 PUSH2 0x91AB JUMP JUMPDEST PUSH2 0x80A7 JUMPI POP PUSH1 0x0 PUSH2 0xC08 JUMP JUMPDEST POP PUSH1 0x1 SWAP2 SWAP1 POP JUMP JUMPDEST DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO PUSH2 0x80CE JUMPI PUSH2 0x80CE PUSH2 0x7DA0 PUSH1 0x5 DUP6 MLOAD DUP6 PUSH1 0x20 ADD PUSH2 0x8162 JUMP JUMPDEST SWAP2 ADD PUSH1 0x20 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO PUSH2 0x80F7 JUMPI PUSH2 0x80F7 PUSH2 0x7DA0 PUSH1 0x5 DUP6 MLOAD DUP6 PUSH1 0x20 ADD PUSH2 0x8162 JUMP JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH4 0xE946C1BB PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x811F SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9F17 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH1 0x60 PUSH4 0x28006595 PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x811F SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9F38 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP1 NOT AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 SWAP1 PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY POP SWAP2 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x5DCE DUP2 PUSH2 0xA396 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x8300 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x8313 PUSH2 0x830E DUP3 PUSH2 0xA317 JUMP JUMPDEST PUSH2 0xA2F1 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x8334 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x835C JUMPI DUP2 CALLDATALOAD PUSH2 0x834A DUP2 PUSH2 0xA396 JUMP JUMPDEST DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x8337 JUMP JUMPDEST POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x8377 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x8385 PUSH2 0x830E DUP3 PUSH2 0xA317 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x835C JUMPI PUSH2 0x83AD DUP9 DUP5 DUP5 CALLDATALOAD DUP11 ADD ADD PUSH2 0x82F0 JUMP JUMPDEST DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x8396 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x83CF JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x83DD PUSH2 0x830E DUP3 PUSH2 0xA317 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x835C JUMPI PUSH2 0x8405 DUP9 DUP5 DUP5 CALLDATALOAD DUP11 ADD ADD PUSH2 0x85AE JUMP JUMPDEST DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x83EE JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x8427 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x8435 PUSH2 0x830E DUP3 PUSH2 0xA317 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x8456 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x835C JUMPI DUP2 CALLDATALOAD PUSH2 0x846C DUP2 PUSH2 0xA396 JUMP JUMPDEST DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x8459 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x848E JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x849C PUSH2 0x830E DUP3 PUSH2 0xA317 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD PUSH1 0x80 DUP1 DUP6 MUL DUP8 ADD DUP4 ADD DUP9 LT ISZERO PUSH2 0x84BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x84E6 JUMPI PUSH2 0x84D4 DUP10 DUP5 PUSH2 0x88AD JUMP JUMPDEST DUP6 MSTORE SWAP4 DUP4 ADD SWAP4 SWAP2 DUP2 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x84C2 JUMP JUMPDEST POP POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x8502 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x8510 PUSH2 0x830E DUP3 PUSH2 0xA317 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x8531 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x835C JUMPI DUP2 CALLDATALOAD DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x8534 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x8560 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x856E PUSH2 0x830E DUP3 PUSH2 0xA317 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x858F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x835C JUMPI DUP2 MLOAD DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x8592 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x85BE JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x85CC PUSH2 0x830E DUP3 PUSH2 0xA336 JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x85E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP5 ADD CALLDATACOPY PUSH1 0x0 SWAP1 DUP3 ADD PUSH1 0x20 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x860C JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x861A PUSH2 0x830E DUP3 PUSH2 0xA336 JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x8631 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2C9F DUP2 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP7 ADD PUSH2 0xA359 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x2 DUP2 LT PUSH2 0x5DCE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x8662 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x866C PUSH1 0x60 PUSH2 0xA2F1 JUMP JUMPDEST SWAP1 POP DUP2 CALLDATALOAD PUSH2 0x8679 DUP2 PUSH2 0xA396 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH2 0x8689 DUP2 PUSH2 0xA3B9 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP3 ADD CALLDATALOAD PUSH2 0x869C DUP2 PUSH2 0xA3B9 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x86B8 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x86C2 PUSH1 0x60 PUSH2 0xA2F1 JUMP JUMPDEST SWAP1 POP DUP2 MLOAD PUSH2 0x86CF DUP2 PUSH2 0xA396 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x86DF DUP2 PUSH2 0xA3B9 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0x869C DUP2 PUSH2 0xA3B9 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x8703 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x870D PUSH1 0x40 PUSH2 0xA2F1 JUMP JUMPDEST SWAP1 POP DUP2 CALLDATALOAD PUSH2 0x871A DUP2 PUSH2 0xA396 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH2 0x872A DUP2 PUSH2 0xA396 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x8746 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x8750 PUSH1 0xA0 PUSH2 0xA2F1 JUMP JUMPDEST SWAP1 POP DUP2 CALLDATALOAD DUP2 MSTORE PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH2 0x8764 DUP2 PUSH2 0xA396 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP3 ADD CALLDATALOAD PUSH2 0x8777 DUP2 PUSH2 0xA396 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP3 ADD CALLDATALOAD PUSH2 0x878A DUP2 PUSH2 0xA396 JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP3 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x87A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x87B4 DUP5 DUP3 DUP6 ADD PUSH2 0x85AE JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x180 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x87D3 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x87DC DUP2 PUSH2 0xA2F1 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x87E9 DUP4 DUP4 PUSH2 0x82E5 JUMP JUMPDEST DUP2 MSTORE PUSH2 0x87F8 DUP4 PUSH1 0x20 DUP5 ADD PUSH2 0x82E5 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x880A DUP4 PUSH1 0x40 DUP5 ADD PUSH2 0x8910 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x881C DUP4 PUSH1 0x60 DUP5 ADD PUSH2 0x8910 JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH2 0x882E DUP4 PUSH1 0x80 DUP5 ADD PUSH2 0x8910 JUMP JUMPDEST PUSH1 0x80 DUP3 ADD MSTORE PUSH2 0x8840 DUP4 PUSH1 0xA0 DUP5 ADD PUSH2 0x82E5 JUMP JUMPDEST PUSH1 0xA0 DUP3 ADD MSTORE PUSH2 0x8852 DUP4 PUSH1 0xC0 DUP5 ADD PUSH2 0x82E5 JUMP JUMPDEST PUSH1 0xC0 DUP3 ADD MSTORE PUSH2 0x8864 DUP4 PUSH1 0xE0 DUP5 ADD PUSH2 0x82E5 JUMP JUMPDEST PUSH1 0xE0 DUP3 ADD MSTORE PUSH2 0x100 PUSH2 0x8878 DUP5 DUP3 DUP6 ADD PUSH2 0x82E5 JUMP JUMPDEST SWAP1 DUP3 ADD MSTORE PUSH2 0x120 DUP3 DUP2 ADD CALLDATALOAD SWAP1 DUP3 ADD MSTORE PUSH2 0x140 PUSH2 0x8896 DUP5 DUP3 DUP6 ADD PUSH2 0x891B JUMP JUMPDEST DUP2 DUP4 ADD MSTORE POP PUSH2 0x160 DUP1 DUP4 ADD CALLDATALOAD DUP2 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x88BE JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x88C8 PUSH1 0x80 PUSH2 0xA2F1 JUMP JUMPDEST SWAP1 POP DUP2 CALLDATALOAD PUSH1 0x4 DUP2 LT PUSH2 0x88D9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x88EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 DUP3 ADD CALLDATALOAD PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP3 ADD CALLDATALOAD PUSH1 0x60 DUP3 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x5DCE DUP2 PUSH2 0xA3DE JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x5DCE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x8943 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x3DE7 DUP2 PUSH2 0xA396 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x895F JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x3DE7 DUP2 PUSH2 0xA396 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x897C JUMPI DUP1 DUP2 REVERT JUMPDEST DUP3 MLOAD PUSH2 0x8987 DUP2 PUSH2 0xA396 JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 SWAP3 POP PUSH2 0x8998 DUP2 PUSH2 0xA396 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x89B8 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 MLOAD PUSH2 0x89C3 DUP2 PUSH2 0xA396 JUMP JUMPDEST PUSH1 0x20 DUP7 ADD MLOAD SWAP1 SWAP5 POP PUSH2 0x89D4 DUP2 PUSH2 0xA396 JUMP JUMPDEST PUSH1 0x40 DUP7 ADD MLOAD SWAP1 SWAP4 POP PUSH2 0x89E5 DUP2 PUSH2 0xA396 JUMP JUMPDEST PUSH1 0x60 DUP7 ADD MLOAD SWAP1 SWAP3 POP PUSH2 0x89F6 DUP2 PUSH2 0xA396 JUMP JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP1 SWAP4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x8A15 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 MLOAD PUSH2 0x8A20 DUP2 PUSH2 0xA396 JUMP JUMPDEST PUSH1 0x20 DUP6 ADD MLOAD SWAP1 SWAP4 POP PUSH2 0x8A31 DUP2 PUSH2 0xA396 JUMP JUMPDEST PUSH1 0x40 DUP6 ADD MLOAD SWAP1 SWAP3 POP DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x8A46 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x8A63 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH2 0x8A6E DUP2 PUSH2 0xA396 JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x8A8A JUMPI DUP3 DUP4 REVERT JUMPDEST SWAP1 DUP5 ADD SWAP1 PUSH1 0xA0 DUP3 DUP8 SUB SLT ISZERO PUSH2 0x8A9D JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x8AA7 PUSH1 0xA0 PUSH2 0xA2F1 JUMP JUMPDEST DUP3 MLOAD DUP2 MSTORE PUSH1 0x20 DUP4 ADD MLOAD PUSH2 0x8AB9 DUP2 PUSH2 0xA396 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP4 ADD MLOAD PUSH2 0x8ACC DUP2 PUSH2 0xA396 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP4 ADD MLOAD PUSH2 0x8ADF DUP2 PUSH2 0xA396 JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP4 ADD MLOAD DUP3 DUP2 GT ISZERO PUSH2 0x8AF5 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x8B01 DUP9 DUP3 DUP7 ADD PUSH2 0x85FC JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE POP DUP1 SWAP4 POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x8B2B JUMPI DUP3 DUP4 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x8B36 DUP2 PUSH2 0xA396 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x8B46 DUP2 PUSH2 0xA396 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH2 0x8B56 DUP2 PUSH2 0xA396 JUMP JUMPDEST SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH2 0x8B66 DUP2 PUSH2 0xA396 JUMP JUMPDEST SWAP2 POP PUSH1 0x80 DUP7 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x8B80 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x8B8C DUP9 DUP3 DUP10 ADD PUSH2 0x84F2 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x8BAE JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x8BB9 DUP2 PUSH2 0xA396 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x8BC9 DUP2 PUSH2 0xA396 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x8BD9 DUP2 PUSH2 0xA396 JUMP JUMPDEST SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x8BF3 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x8BFF DUP8 DUP3 DUP9 ADD PUSH2 0x84F2 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x8C20 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x8C2B DUP2 PUSH2 0xA396 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x8C3B DUP2 PUSH2 0xA396 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x8C4B DUP2 PUSH2 0xA396 JUMP JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP3 SWAP4 PUSH1 0x60 ADD CALLDATALOAD SWAP3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x8C6F JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x8C7A DUP2 PUSH2 0xA396 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x8C95 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x8CA1 DUP8 DUP4 DUP9 ADD PUSH2 0x82F0 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x8CB6 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x8CC3 DUP7 DUP3 DUP8 ADD PUSH2 0x84F2 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x8CE4 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x8CEF DUP2 PUSH2 0xA396 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH2 0x8B56 DUP2 PUSH2 0xA396 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x8D18 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x8D2D JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 ADD PUSH1 0x1F DUP2 ADD DUP6 SGT PUSH2 0x8D3D JUMPI DUP3 DUP4 REVERT JUMPDEST DUP1 MLOAD PUSH2 0x8D4B PUSH2 0x830E DUP3 PUSH2 0xA317 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP4 DUP2 ADD SWAP1 DUP4 DUP6 ADD DUP6 DUP5 MUL DUP6 ADD DUP7 ADD DUP10 LT ISZERO PUSH2 0x8D67 JUMPI DUP7 DUP8 REVERT JUMPDEST DUP7 SWAP5 POP JUMPDEST DUP4 DUP6 LT ISZERO PUSH2 0x8D92 JUMPI DUP1 MLOAD PUSH2 0x8D7E DUP2 PUSH2 0xA396 JUMP JUMPDEST DUP4 MSTORE PUSH1 0x1 SWAP5 SWAP1 SWAP5 ADD SWAP4 SWAP2 DUP6 ADD SWAP2 DUP6 ADD PUSH2 0x8D6B JUMP JUMPDEST POP SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x8DB2 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x8DC8 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 DUP7 ADD SWAP2 POP DUP7 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x8DDB JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x8DE9 PUSH2 0x830E DUP3 PUSH2 0xA317 JUMP JUMPDEST DUP1 DUP3 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD SWAP3 POP DUP1 DUP7 ADD DUP12 DUP3 DUP4 DUP8 MUL DUP10 ADD ADD GT ISZERO PUSH2 0x8E09 JUMPI DUP8 DUP9 REVERT JUMPDEST DUP8 SWAP7 POP JUMPDEST DUP5 DUP8 LT ISZERO PUSH2 0x8E2B JUMPI DUP1 MLOAD DUP5 MSTORE PUSH1 0x1 SWAP7 SWAP1 SWAP7 ADD SWAP6 SWAP3 DUP2 ADD SWAP3 DUP2 ADD PUSH2 0x8E0D JUMP JUMPDEST POP DUP10 ADD MLOAD SWAP1 SWAP8 POP SWAP4 POP POP POP DUP1 DUP3 GT ISZERO PUSH2 0x8E42 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x8E4F DUP7 DUP3 DUP8 ADD PUSH2 0x8550 JUMP JUMPDEST SWAP3 POP POP PUSH2 0x8E5F DUP6 PUSH1 0x40 DUP7 ADD PUSH2 0x8642 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x8E7A JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x8E90 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x8EA3 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x8EB1 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP7 PUSH1 0x20 DUP1 DUP4 MUL DUP6 ADD ADD GT ISZERO PUSH2 0x8EC4 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH1 0x20 SWAP3 SWAP1 SWAP3 ADD SWAP7 SWAP2 SWAP6 POP SWAP1 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x8EEA JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x8F00 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x8F0C DUP8 DUP4 DUP9 ADD PUSH2 0x83BF JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x8F21 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x8F2E DUP7 DUP3 DUP8 ADD PUSH2 0x83BF JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x8F50 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x8F65 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x1257 DUP5 DUP3 DUP6 ADD PUSH2 0x8417 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x8F83 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x8F98 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x8FA4 DUP6 DUP3 DUP7 ADD PUSH2 0x8417 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x8998 DUP2 PUSH2 0xA396 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x8FC9 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x8FDE JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x8FEA DUP7 DUP3 DUP8 ADD PUSH2 0x8417 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x8FFB DUP2 PUSH2 0xA396 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH2 0x8A46 DUP2 PUSH2 0xA396 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x901D JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x9032 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 ADD PUSH1 0x1F DUP2 ADD DUP6 SGT PUSH2 0x9042 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP1 MLOAD PUSH2 0x9050 PUSH2 0x830E DUP3 PUSH2 0xA317 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP4 DUP2 ADD SWAP1 DUP4 DUP6 ADD DUP6 DUP5 MUL DUP6 ADD DUP7 ADD DUP10 LT ISZERO PUSH2 0x906C JUMPI DUP7 DUP8 REVERT JUMPDEST DUP7 SWAP5 POP JUMPDEST DUP4 DUP6 LT ISZERO PUSH2 0x8D92 JUMPI DUP1 MLOAD DUP4 MSTORE PUSH1 0x1 SWAP5 SWAP1 SWAP5 ADD SWAP4 SWAP2 DUP6 ADD SWAP2 DUP6 ADD PUSH2 0x9070 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x90A2 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x90B8 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 DUP7 ADD SWAP2 POP DUP7 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x90CB JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x90D9 PUSH2 0x830E DUP3 PUSH2 0xA317 JUMP JUMPDEST DUP1 DUP3 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD SWAP3 POP DUP1 DUP7 ADD PUSH2 0x180 DUP13 DUP4 DUP3 DUP9 MUL DUP11 ADD ADD GT ISZERO PUSH2 0x90FC JUMPI DUP9 DUP10 REVERT JUMPDEST DUP9 SWAP8 POP JUMPDEST DUP6 DUP9 LT ISZERO PUSH2 0x9128 JUMPI PUSH2 0x9112 DUP14 DUP4 PUSH2 0x87C0 JUMP JUMPDEST DUP6 MSTORE PUSH1 0x1 SWAP8 SWAP1 SWAP8 ADD SWAP7 SWAP4 DUP3 ADD SWAP4 SWAP1 DUP2 ADD SWAP1 PUSH2 0x9100 JUMP JUMPDEST POP SWAP2 SWAP9 POP DUP10 ADD CALLDATALOAD SWAP5 POP POP POP POP DUP1 DUP3 GT ISZERO PUSH2 0x9140 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x914D DUP7 DUP3 DUP8 ADD PUSH2 0x847E JUMP JUMPDEST SWAP3 POP POP PUSH2 0x8E5F DUP6 PUSH1 0x40 DUP7 ADD PUSH2 0x82E5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x916E JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x9183 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x1257 DUP5 DUP3 DUP6 ADD PUSH2 0x8550 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x91A0 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x3DE7 DUP2 PUSH2 0xA3AB JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x91BC JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x91D4 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x91E9 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x1257 DUP5 DUP3 DUP6 ADD PUSH2 0x85FC JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x9209 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x9214 DUP2 PUSH2 0xA396 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x922F JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x8CA1 DUP8 DUP4 DUP9 ADD PUSH2 0x8417 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x924C JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x3DE7 DUP2 PUSH2 0xA3CF JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x80 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x9269 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH2 0x9274 DUP2 PUSH2 0xA3CF JUMP JUMPDEST SWAP2 POP PUSH2 0x9283 DUP5 PUSH1 0x20 DUP6 ADD PUSH2 0x86A7 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP5 DUP7 SUB PUSH1 0xA0 DUP2 SLT ISZERO PUSH2 0x92A2 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x40 DUP2 SLT ISZERO PUSH2 0x92AF JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x92BA PUSH1 0x40 PUSH2 0xA2F1 JUMP JUMPDEST DUP6 CALLDATALOAD DUP2 MSTORE PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x92CC DUP2 PUSH2 0xA396 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE SWAP4 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x92E1 DUP2 PUSH2 0xA396 JUMP JUMPDEST SWAP3 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH2 0x92F1 DUP2 PUSH2 0xA396 JUMP JUMPDEST SWAP2 POP PUSH1 0x80 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x8BF3 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x9320 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x9336 JUMPI DUP4 DUP5 REVERT JUMPDEST SWAP1 DUP7 ADD SWAP1 PUSH1 0x40 DUP3 DUP10 SUB SLT ISZERO PUSH2 0x9349 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x9353 PUSH1 0x40 PUSH2 0xA2F1 JUMP JUMPDEST PUSH2 0x935D DUP10 DUP5 PUSH2 0x82E5 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP3 DUP2 GT ISZERO PUSH2 0x9370 JUMPI DUP6 DUP7 REVERT JUMPDEST PUSH2 0x937C DUP11 DUP3 DUP7 ADD PUSH2 0x8367 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP DUP1 SWAP7 POP POP PUSH2 0x9393 DUP9 PUSH1 0x20 DUP10 ADD PUSH2 0x82E5 JUMP JUMPDEST SWAP5 POP PUSH2 0x93A2 DUP9 PUSH1 0x40 DUP10 ADD PUSH2 0x82E5 JUMP JUMPDEST SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x93B7 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x8BFF DUP8 DUP3 DUP9 ADD PUSH2 0x84F2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x93D9 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x93E3 DUP7 DUP7 PUSH2 0x8651 JUMP JUMPDEST SWAP4 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH2 0x93F3 DUP2 PUSH2 0xA3CF JUMP JUMPDEST SWAP3 POP PUSH1 0x80 DUP6 ADD CALLDATALOAD PUSH2 0x9403 DUP2 PUSH2 0xA3CF JUMP JUMPDEST SWAP2 POP PUSH1 0xA0 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x8BF3 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x9432 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x943C DUP7 DUP7 PUSH2 0x86F2 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x92E1 DUP2 PUSH2 0xA396 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x9461 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x9477 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x9483 DUP9 DUP4 DUP10 ADD PUSH2 0x8735 JUMP JUMPDEST SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP2 POP PUSH2 0x9495 DUP3 PUSH2 0xA396 JUMP JUMPDEST SWAP1 SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP1 PUSH2 0x94A7 DUP3 PUSH2 0xA396 JUMP JUMPDEST SWAP1 SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD SWAP1 DUP1 DUP3 GT ISZERO PUSH2 0x93B7 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x94D1 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x94E6 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x94F2 DUP8 DUP3 DUP9 ADD PUSH2 0x8735 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x8C3B DUP2 PUSH2 0xA396 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x9518 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x952D JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x9539 DUP8 DUP3 DUP9 ADD PUSH2 0x8735 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x9551 DUP2 PUSH2 0xA396 JUMP JUMPDEST SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH2 0x89F6 DUP2 PUSH2 0xA396 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x220 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x9576 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x9580 DUP6 DUP6 PUSH2 0x87C0 JUMP JUMPDEST SWAP3 POP PUSH2 0x9590 DUP6 PUSH2 0x180 DUP7 ADD PUSH2 0x88AD JUMP JUMPDEST SWAP2 POP PUSH2 0x200 DUP5 ADD CALLDATALOAD PUSH2 0x8A46 DUP2 PUSH2 0xA396 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP5 DUP7 SUB PUSH1 0xC0 DUP2 SLT ISZERO PUSH2 0x95B7 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x60 DUP2 SLT ISZERO PUSH2 0x95C4 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x95CF PUSH1 0x60 PUSH2 0xA2F1 JUMP JUMPDEST DUP6 CALLDATALOAD PUSH2 0x95DA DUP2 PUSH2 0xA396 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP7 DUP2 ADD CALLDATALOAD SWAP1 DUP3 ADD MSTORE PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH2 0x95F4 DUP2 PUSH2 0xA396 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE SWAP4 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH2 0x9609 DUP2 PUSH2 0xA396 JUMP JUMPDEST SWAP3 POP PUSH1 0x80 DUP6 ADD CALLDATALOAD PUSH2 0x9403 DUP2 PUSH2 0xA396 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 DUP6 SUB PUSH1 0xA0 DUP2 SLT ISZERO PUSH2 0x962E JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x60 DUP2 SLT ISZERO PUSH2 0x963B JUMPI DUP2 DUP3 REVERT JUMPDEST POP PUSH2 0x9646 PUSH1 0x60 PUSH2 0xA2F1 JUMP JUMPDEST DUP5 MLOAD DUP2 MSTORE PUSH1 0x20 DUP6 ADD MLOAD PUSH1 0x5 DUP2 LT PUSH2 0x965B JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP6 ADD MLOAD PUSH2 0x966E DUP2 PUSH2 0xA3DE JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP6 ADD MLOAD SWAP1 SWAP4 POP PUSH2 0x9684 DUP2 PUSH2 0xA3DE JUMP JUMPDEST PUSH1 0x80 DUP6 ADD MLOAD SWAP1 SWAP3 POP PUSH2 0x8A46 DUP2 PUSH2 0xA3AB JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x96A6 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH3 0xFFFFFF DUP2 AND DUP2 EQ PUSH2 0x3DE7 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x96CA JUMPI DUP2 DUP3 REVERT JUMPDEST POP POP DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD MLOAD SWAP1 SWAP3 SWAP1 SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x96F0 JUMPI DUP2 DUP3 REVERT JUMPDEST POP POP DUP3 MLOAD PUSH1 0x20 DUP5 ADD MLOAD PUSH1 0x40 DUP6 ADD MLOAD PUSH1 0x60 SWAP1 SWAP6 ADD MLOAD SWAP2 SWAP7 SWAP1 SWAP6 POP SWAP1 SWAP3 POP SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x9727 JUMPI DUP3 DUP4 REVERT JUMPDEST POP POP DUP4 MLOAD PUSH1 0x20 DUP6 ADD MLOAD PUSH1 0x40 DUP7 ADD MLOAD PUSH1 0x60 DUP8 ADD MLOAD PUSH1 0x80 SWAP1 SWAP8 ADD MLOAD SWAP3 SWAP9 SWAP2 SWAP8 POP SWAP6 SWAP5 POP SWAP1 SWAP3 POP SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD DUP4 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x9794 JUMPI DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x976F JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD DUP4 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x9794 JUMPI DUP2 MLOAD DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x97B2 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x97E6 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0xA359 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP4 MSTORE PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x60 DUP3 ADD MLOAD PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP3 ADD MLOAD PUSH1 0xA0 PUSH1 0x80 DUP6 ADD MSTORE PUSH2 0x1257 PUSH1 0xA0 DUP6 ADD DUP3 PUSH2 0x97CE JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 MSTORE PUSH1 0x20 DUP1 DUP3 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 DUP2 AND SWAP2 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP2 DUP3 ADD MLOAD AND SWAP2 ADD MSTORE JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP4 MSTORE PUSH1 0x20 DUP1 DUP4 ADD MLOAD ISZERO ISZERO SWAP1 DUP5 ADD MSTORE PUSH1 0x40 DUP1 DUP4 ADD MLOAD SWAP1 SWAP2 AND SWAP1 DUP4 ADD MSTORE PUSH1 0x60 SWAP1 DUP2 ADD MLOAD ISZERO ISZERO SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP4 MSTORE PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x40 PUSH1 0x20 DUP6 ADD MSTORE PUSH2 0x1257 PUSH1 0x40 DUP6 ADD DUP3 PUSH2 0x97CE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP4 MSTORE PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 DUP3 AND PUSH1 0x20 DUP7 ADD MSTORE DUP1 PUSH1 0x40 DUP6 ADD MLOAD AND PUSH1 0x40 DUP7 ADD MSTORE DUP1 PUSH1 0x60 DUP6 ADD MLOAD AND PUSH1 0x60 DUP7 ADD MSTORE POP POP PUSH1 0x80 DUP3 ADD MLOAD PUSH1 0xA0 PUSH1 0x80 DUP6 ADD MSTORE PUSH2 0x1257 PUSH1 0xA0 DUP6 ADD DUP3 PUSH2 0x97CE JUMP JUMPDEST PUSH2 0x9915 DUP3 DUP3 MLOAD PUSH2 0x974F JUMP JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD PUSH2 0x9927 PUSH1 0x20 DUP5 ADD DUP3 PUSH2 0x974F JUMP JUMPDEST POP PUSH1 0x40 DUP2 ADD MLOAD PUSH2 0x993A PUSH1 0x40 DUP5 ADD DUP3 PUSH2 0x9A0A JUMP JUMPDEST POP PUSH1 0x60 DUP2 ADD MLOAD PUSH2 0x994D PUSH1 0x60 DUP5 ADD DUP3 PUSH2 0x9A0A JUMP JUMPDEST POP PUSH1 0x80 DUP2 ADD MLOAD PUSH2 0x9960 PUSH1 0x80 DUP5 ADD DUP3 PUSH2 0x9A0A JUMP JUMPDEST POP PUSH1 0xA0 DUP2 ADD MLOAD PUSH2 0x9973 PUSH1 0xA0 DUP5 ADD DUP3 PUSH2 0x974F JUMP JUMPDEST POP PUSH1 0xC0 DUP2 ADD MLOAD PUSH2 0x9986 PUSH1 0xC0 DUP5 ADD DUP3 PUSH2 0x974F JUMP JUMPDEST POP PUSH1 0xE0 DUP2 ADD MLOAD PUSH2 0x9999 PUSH1 0xE0 DUP5 ADD DUP3 PUSH2 0x974F JUMP JUMPDEST POP PUSH2 0x100 DUP1 DUP3 ADD MLOAD PUSH2 0x99AD DUP3 DUP6 ADD DUP3 PUSH2 0x974F JUMP JUMPDEST POP POP PUSH2 0x120 DUP2 DUP2 ADD MLOAD SWAP1 DUP4 ADD MSTORE PUSH2 0x140 DUP1 DUP3 ADD MLOAD PUSH2 0x99CD DUP3 DUP6 ADD DUP3 PUSH2 0x9A17 JUMP JUMPDEST POP POP PUSH2 0x160 SWAP1 DUP2 ADD MLOAD SWAP2 ADD MSTORE JUMP JUMPDEST DUP1 MLOAD PUSH2 0x99E6 DUP2 PUSH2 0xA389 JUMP JUMPDEST DUP3 MSTORE PUSH1 0x20 DUP2 DUP2 ADD MLOAD PUSH1 0xFF AND SWAP1 DUP4 ADD MSTORE PUSH1 0x40 DUP1 DUP3 ADD MLOAD SWAP1 DUP4 ADD MSTORE PUSH1 0x60 SWAP1 DUP2 ADD MLOAD SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP4 CALLDATACOPY SWAP2 ADD SWAP1 DUP2 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x9A46 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0xA359 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND DUP2 MSTORE SWAP3 DUP5 AND PUSH1 0x20 DUP5 ADD MSTORE SWAP1 DUP4 AND PUSH1 0x40 DUP4 ADD MSTORE SWAP1 SWAP2 AND PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 DUP2 AND PUSH1 0x20 DUP4 ADD MSTORE DUP4 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x6516 SWAP1 DUP4 ADD DUP5 PUSH2 0x979F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND DUP2 MSTORE SWAP3 DUP5 AND PUSH1 0x20 DUP5 ADD MSTORE SWAP3 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE SWAP1 ISZERO ISZERO PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE DUP3 ISZERO ISZERO PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x6516 SWAP1 DUP4 ADD DUP5 PUSH2 0x97CE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND DUP3 MSTORE DUP6 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0xA0 PUSH1 0x80 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x9BD6 SWAP1 DUP4 ADD DUP5 PUSH2 0x97CE JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND DUP2 MSTORE PUSH1 0x60 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x9C05 SWAP1 DUP4 ADD DUP6 PUSH2 0x975C JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x6516 DUP2 DUP6 PUSH2 0x979F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP2 MSTORE PUSH1 0x0 PUSH2 0x9C2E DUP6 PUSH2 0xA389 JUMP JUMPDEST DUP5 PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x80 PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x9C48 PUSH1 0x80 DUP4 ADD DUP6 PUSH2 0x979F JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0x9BD6 DUP2 DUP6 PUSH2 0x979F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 DUP2 AND DUP3 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x100 SWAP1 PUSH2 0x9C77 DUP12 PUSH2 0xA389 JUMP JUMPDEST DUP11 PUSH1 0x20 DUP6 ADD MSTORE DUP2 PUSH1 0x40 DUP6 ADD MSTORE PUSH2 0x9C8F DUP3 DUP6 ADD DUP12 PUSH2 0x979F JUMP JUMPDEST SWAP2 POP DUP4 DUP3 SUB PUSH1 0x60 DUP6 ADD MSTORE PUSH2 0x9CA3 DUP3 DUP11 PUSH2 0x979F JUMP JUMPDEST SWAP1 DUP9 AND PUSH1 0x80 DUP6 ADD MSTORE SWAP1 POP PUSH2 0x9CB6 DUP7 PUSH2 0xA389 JUMP JUMPDEST DUP6 PUSH1 0xA0 DUP5 ADD MSTORE DUP3 DUP2 SUB PUSH1 0xC0 DUP5 ADD MSTORE PUSH2 0x9CCE DUP2 DUP7 PUSH2 0x979F JUMP JUMPDEST SWAP1 POP DUP3 DUP2 SUB PUSH1 0xE0 DUP5 ADD MSTORE PUSH2 0x9CE2 DUP2 DUP6 PUSH2 0x979F JUMP JUMPDEST SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND DUP2 MSTORE PUSH1 0x40 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x1257 SWAP1 DUP4 ADD DUP5 PUSH2 0x98BD JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 MSTORE PUSH2 0x9D28 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x975C JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x12C5 DUP2 DUP6 PUSH2 0x979F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 MSTORE PUSH2 0x9D4D PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x975C JUMP JUMPDEST SWAP1 POP DUP3 PUSH1 0x20 DUP4 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD PUSH1 0x40 DUP4 MSTORE DUP1 DUP6 MLOAD DUP1 DUP4 MSTORE PUSH1 0x60 DUP6 ADD SWAP2 POP PUSH1 0x20 SWAP3 POP PUSH1 0x60 DUP4 DUP3 MUL DUP7 ADD ADD DUP4 DUP9 ADD DUP6 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x9DB1 JUMPI PUSH1 0x5F NOT DUP9 DUP5 SUB ADD DUP6 MSTORE PUSH2 0x9D9F DUP4 DUP4 MLOAD PUSH2 0x97CE JUMP JUMPDEST SWAP5 DUP7 ADD SWAP5 SWAP3 POP SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x9D83 JUMP JUMPDEST POP POP DUP6 DUP2 SUB DUP5 DUP8 ADD MSTORE PUSH2 0x7D63 DUP2 DUP9 PUSH2 0x979F JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 PUSH1 0x40 SWAP1 DUP2 DUP6 ADD SWAP1 DUP1 DUP5 MUL DUP7 ADD DUP4 ADD DUP8 DUP6 ADD DUP7 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x9E2B JUMPI DUP9 DUP4 SUB PUSH1 0x3F NOT ADD DUP6 MSTORE DUP2 MLOAD DUP1 MLOAD DUP8 DUP6 MSTORE PUSH2 0x9E0C DUP9 DUP7 ADD DUP3 PUSH2 0x97CE JUMP JUMPDEST SWAP2 DUP10 ADD MLOAD ISZERO ISZERO SWAP5 DUP10 ADD SWAP5 SWAP1 SWAP5 MSTORE SWAP5 DUP8 ADD SWAP5 SWAP3 POP SWAP1 DUP7 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x9DE8 JUMP JUMPDEST POP SWAP1 SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x3DE7 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x979F JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST DUP4 ISZERO ISZERO DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x60 PUSH1 0x40 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x12C5 SWAP1 DUP4 ADD DUP5 PUSH2 0x979F JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP3 MSTORE PUSH1 0x60 PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x9C05 PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0x97CE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x3DE7 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x97CE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 MSTORE PUSH2 0x9D4D PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x97CE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH3 0xFFFFFF SWAP1 SWAP2 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND DUP2 MSTORE PUSH1 0x40 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x1257 SWAP1 DUP4 ADD DUP5 PUSH2 0x979F JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH2 0x9F24 DUP6 PUSH2 0xA389 JUMP JUMPDEST SWAP4 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH1 0x8 DUP6 LT PUSH2 0x9F24 JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH1 0xE0 DUP3 ADD PUSH1 0x2 DUP8 LT PUSH2 0x9F56 JUMPI INVALID JUMPDEST DUP7 DUP4 MSTORE PUSH1 0x20 PUSH1 0xE0 DUP2 DUP6 ADD MSTORE DUP2 DUP8 MLOAD DUP1 DUP5 MSTORE PUSH2 0x100 SWAP4 POP DUP4 DUP7 ADD SWAP2 POP DUP4 DUP4 DUP3 MUL DUP8 ADD ADD SWAP4 POP DUP3 DUP10 ADD DUP6 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x9FAD JUMPI PUSH1 0xFF NOT DUP9 DUP8 SUB ADD DUP5 MSTORE PUSH2 0x9F9B DUP7 DUP4 MLOAD PUSH2 0x97FA JUMP JUMPDEST SWAP6 POP SWAP3 DUP5 ADD SWAP3 SWAP1 DUP5 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x9F7F JUMP JUMPDEST POP POP POP POP POP DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x9FC4 DUP2 DUP7 PUSH2 0x975C JUMP JUMPDEST SWAP2 POP POP PUSH2 0x12C5 PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x9869 JUMP JUMPDEST PUSH1 0xF SWAP4 DUP5 SIGNEXTEND DUP2 MSTORE SWAP2 SWAP1 SWAP3 SIGNEXTEND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0xF DUP4 SWAP1 SIGNEXTEND DUP2 MSTORE PUSH1 0x80 DUP2 ADD PUSH2 0x3DE7 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x9837 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x24 SWAP1 DUP3 ADD MSTORE PUSH32 0x556E6973776170563353616D706C65722F746F6B656E5061746820746F6F2073 PUSH1 0x40 DUP3 ADD MSTORE PUSH4 0x1A1BDC9D PUSH1 0xE2 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x455243323042726964676553616D706C65722F494E56414C49445F544F4B454E PUSH1 0x40 DUP3 ADD MSTORE PUSH5 0x2FA820A4A9 PUSH1 0xD9 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x556E6973776170563353616D706C65722F696E76616C69642070617468206C65 PUSH1 0x40 DUP3 ADD MSTORE PUSH5 0x6E67746873 PUSH1 0xD8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1E SWAP1 DUP3 ADD MSTORE PUSH32 0x4B79626572444D4D53616D706C65722F4E4F5F504F4F4C535F464F554E440000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA11B DUP3 DUP8 PUSH2 0x9837 JUMP JUMPDEST DUP5 PUSH1 0xF SIGNEXTEND PUSH1 0x60 DUP4 ADD MSTORE DUP4 PUSH1 0xF SIGNEXTEND PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xC0 PUSH1 0xA0 DUP4 ADD MSTORE PUSH2 0x6516 PUSH1 0xC0 DUP4 ADD DUP5 PUSH2 0x979F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 MSTORE PUSH2 0xA154 PUSH1 0x60 DUP4 ADD DUP7 PUSH2 0x989E JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0xA166 DUP2 DUP7 PUSH2 0x989E JUMP JUMPDEST SWAP2 POP POP DUP3 PUSH1 0x40 DUP4 ADD MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 MSTORE PUSH2 0xA18A PUSH1 0x80 DUP4 ADD DUP8 PUSH2 0x98BD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP6 DUP7 AND PUSH1 0x20 DUP5 ADD MSTORE SWAP4 SWAP1 SWAP5 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 MSTORE PUSH2 0xA1C0 PUSH1 0x80 DUP4 ADD DUP8 PUSH2 0x98BD JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP6 SWAP1 SWAP6 MSTORE POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x40 DUP3 ADD MSTORE SWAP2 AND PUSH1 0x60 SWAP1 SWAP2 ADD MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x200 DUP2 ADD PUSH2 0xA1F5 DUP3 DUP6 PUSH2 0x990A JUMP JUMPDEST PUSH2 0x3DE7 PUSH2 0x180 DUP4 ADD DUP5 PUSH2 0x99DB JUMP JUMPDEST PUSH2 0x220 DUP2 ADD PUSH2 0xA212 DUP3 DUP7 PUSH2 0x990A JUMP JUMPDEST PUSH2 0xA220 PUSH2 0x180 DUP4 ADD DUP6 PUSH2 0x99DB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND PUSH2 0x200 SWAP2 SWAP1 SWAP2 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 DUP3 MSTORE PUSH1 0x40 PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x1257 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x975C JUMP JUMPDEST PUSH1 0x0 DUP5 DUP3 MSTORE PUSH1 0x60 PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0xA26C PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0x975C JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x6516 DUP2 DUP6 PUSH2 0x975C JUMP JUMPDEST SWAP6 DUP7 MSTORE PUSH1 0x20 DUP7 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0x40 DUP6 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH1 0x1E NOT DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0xA2BC JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 ADD DUP1 CALLDATALOAD SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0xA2D5 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x20 ADD SWAP2 POP CALLDATASIZE DUP2 SWAP1 SUB DUP3 SGT ISZERO PUSH2 0xA2EA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0xA30F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0xA32C JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0xA34B JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xA374 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xA35C JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0xA383 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x4 DUP2 LT PUSH2 0xA393 JUMPI INVALID JUMPDEST POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xA393 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xA393 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0xA393 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0xF SIGNEXTEND DUP2 EQ PUSH2 0xA393 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xA393 JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC4 0xFC SWAP11 DUP8 SWAP13 SUB SWAP13 SWAP3 SDIV 0xDF MUL 0xDD MULMOD GT CODESIZE PUSH26 0xA2D3DD5DCA3545889B674C43319A45E964736F6C634300060C00 CALLER ",
                "sourceMap": "1406:1287:7:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1948:1154:9;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;4230:977:17;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;1535:1290:3:-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;:::i;2195:196:25:-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;2131:1734:2:-;;;;;;:::i;:::-;;:::i;4274:2338:22:-;;;;;;:::i;:::-;;:::i;3549:919:14:-;;;;;;:::i;:::-;;:::i;4133:670:20:-;;;;;;:::i;:::-;;:::i;1936:1742:5:-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;:::i;1410:1411:16:-;;;;;;:::i;:::-;;:::i;1382:1092:13:-;;;;;;:::i;:::-;;:::i;1214:988:23:-;;;;;;:::i;:::-;;:::i;2429:755:11:-;;;;;;:::i;:::-;;:::i;1731:1130:4:-;;;;;;:::i;:::-;;:::i;3526:1138:9:-;;;;;;:::i;:::-;;:::i;4509:2595:10:-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;2047:1569:24:-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;4265:2076:1:-;;;;;;:::i;:::-;;:::i;4028:1924:24:-;;;;;;:::i;:::-;;:::i;2751:583:19:-;;;;;;:::i;:::-;;:::i;5648:955:17:-;;;;;;:::i;:::-;;:::i;2217:474:7:-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;946:381:25:-;;;;;;:::i;:::-;;:::i;3400:313:3:-;;;;;;:::i;:::-;;:::i;4474:920:14:-;;;;;;:::i;:::-;;:::i;1621:2080:20:-;;;;;;:::i;:::-;;:::i;888:1649:21:-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;:::i;3287:1650:4:-;;;;;;:::i;:::-;;:::i;1764:2076:1:-;;;;;;:::i;:::-;;:::i;6743:1029:17:-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;3464:1039:10:-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;:::i;2424:1290:15:-;;;;;;:::i;:::-;;:::i;4281:1535:2:-;;;;;;:::i;:::-;;:::i;1540:1205:12:-;;;;;;:::i;:::-;;:::i;2025:1175:6:-;;;;;;:::i;:::-;;:::i;1325:1038:8:-;;;;;;:::i;:::-;;:::i;1432:986:15:-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;2894:593:13:-;;;;;;:::i;:::-;;:::i;1333:415:25:-;;;;;;:::i;:::-;;:::i;3202:653:12:-;;;;;;:::i;:::-;;:::i;1572:2343:22:-;;;;;;:::i;:::-;;:::i;2553:972:23:-;;;;;;:::i;:::-;;:::i;2788:1037:8:-;;;;;;:::i;:::-;;:::i;1770:1175:10:-;;;;;;:::i;:::-;;:::i;3797:1026:6:-;;;;;;:::i;:::-;;:::i;4221:1750:5:-;;;;;;:::i;:::-;;:::i;1754:435:25:-;;;;;;:::i;:::-;;:::i;1440:887:19:-;;;;;;:::i;:::-;;:::i;7885:1337:10:-;;;;;;:::i;:::-;;:::i;4189:904:15:-;;;;;;:::i;:::-;;:::i;2543:1848:21:-;;;;;;:::i;:::-;;:::i;1948:1154:9:-;2226:24;;2131:22;;;;2226:24;-1:-1:-1;;;;;2280:25:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2280:25:9;;2260:45;;2323:31;2341:6;2349:4;2323:17;:31::i;:::-;2315:39;;2368:5;:12;2384:1;2368:17;2364:81;;;2401:33;;;2364:81;2459:9;2454:642;2478:10;2474:1;:14;2454:642;;;2545:6;-1:-1:-1;;;;;2529:37:9;;1507:5;2634:17;2652:1;2634:20;;;;;;;;;;;;;;2656:5;2663:4;2529:139;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;2529:139:9;;;;;;;;;;;;:::i;:::-;;;2509:577;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3066:5;;;2509:577;2773:7;2795:1;2781:4;:11;:15;2773:24;;;;;;;;;;;;;;2750:17;2768:1;2750:20;;;;;;;;;;;;;:47;;;;;2873:17;2891:1;2873:20;;;;;;;;;;;;;;2897:1;2873:25;2869:77;;;2922:5;;;2869:77;2685:275;2490:3;;2454:642;;;;1948:1154;;;;;;;;:::o;4230:977:17:-;4457:47;4567:6;:13;-1:-1:-1;;;;;4553:28:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4553:28:17;;4520:61;;4596:9;4591:610;4616:6;:13;4611:1;:18;4591:610;;4670:4;-1:-1:-1;;;;;4670:37:17;;3715:5;4797:6;4804:1;4797:9;;;;;;;;;;;;;;4831:15;4847:1;4831:18;;;;;;;;;;;;;;4874:8;4670:234;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4670:234:17;;;;;;;;-1:-1:-1;;4670:234:17;;;;;;;;;;;;:::i;:::-;;;4650:541;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5175:1;5139:30;5170:1;5139:33;;;;;;;;;;;;;:37;;;;;5034:157;4650:541;;;5012:6;4976:30;5007:1;4976:33;;;;;;;;;;;;;:42;;;;;4921:112;4650:541;4631:3;;4591:610;;;;4230:977;;;;;:::o;1535:1290:3:-;1756:21;1779;1802:34;1856:4;:10;;;:17;1877:1;1856:22;1852:100;;;1894:47;;1852:100;1985:62;1999:4;2005:10;2017;2029:17;1985:13;:62::i;:::-;2091:24;;1961:86;;-1:-1:-1;1961:86:3;-1:-1:-1;;;;;;2077:39:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2077:39:3;;2057:59;;2132:9;2127:635;2151:17;:24;2147:1;:28;2127:635;;;2231:13;-1:-1:-1;;;;;2216:61:3;;857:5;2350:4;2356:17;2374:1;2356:20;;;;;;;;;;;;;;2216:161;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2216:161:3;;;;;;;;-1:-1:-1;;2216:161:3;;;;;;;;;;;;:::i;:::-;;;2196:556;;2732:5;;2196:556;2472:6;2449:17;2467:1;2449:20;;;;;;;;;;;;;:29;;;;;2554:17;2572:1;2554:20;;;;;;;;;;;;;;2578:1;2554:25;2550:77;;;2603:5;;;2550:77;2394:247;2177:3;;2127:635;;;;1535:1290;;;;;;;;;:::o;2195:196:25:-;2338:20;;2376:8;;2195:196;;;;:::o;2131:1734:2:-;2348:34;2398:40;2415:10;2427;2398:16;:40::i;:::-;2490:14;;;;2544:15;;;2557:1;2544:15;;;2515:26;2544:15;;;;;;;;;;;;;;;;;;-1:-1:-1;2544:15:2;2515:44;;2592:10;2569;2580:1;2569:13;;;;;;;;;;;;;:34;-1:-1:-1;;;;;2569:34:2;;;-1:-1:-1;;;;;2569:34:2;;;;;2636:10;2613;2624:1;2613:13;;;;;;;;-1:-1:-1;;;;;2613:34:2;;;:13;;;;;;;;;;;:34;2679:24;;;-1:-1:-1;;;;;2733:25:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2733:25:2;;2713:45;;2768:48;;:::i;:::-;2831:18;:16;:18::i;:::-;2768:81;;2865:9;2860:999;2884:10;2880:1;:14;2860:999;;;2915:49;2983:48;3000:8;3010:17;3028:1;3010:20;;;;;;;;;;;;;;2983:16;:48::i;:::-;3173:90;;-1:-1:-1;;;3173:90:2;;2915:116;;-1:-1:-1;;;;;;3173:20:2;;;;;:90;;3194:34;;2915:116;;3241:10;;3253:9;;3173:90;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;3173:90:2;;;;;;;;;;;;:::i;:::-;;;3046:803;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3829:5;;;;3046:803;3508:24;3535:7;3543:1;3535:10;;;;;;;;;;;;;;-1:-1:-1;;3535:15:2;3508:42;;3593:1;3572:17;:22;3568:74;;3618:5;;;;;3568:74;3690:17;3659;3677:1;3659:20;;;;;;;;;;;;;:49;;;;;3380:343;;-1:-1:-1;2896:3:2;;2860:999;;;;2131:1734;;;;;;;;;;:::o;4274:2338:22:-;4480:34;4530:40;4547:10;4559;4530:16;:40::i;:::-;4601:24;;;-1:-1:-1;;;;;4655:25:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4655:25:22;-1:-1:-1;4635:45:22;-1:-1:-1;4691:41:22;-1:-1:-1;;;;;4735:24:22;;;:106;;4802:39;4822:6;4830:10;4802:19;:39::i;:::-;4735:106;;;4797:1;4735:106;4691:150;-1:-1:-1;4851:41:22;-1:-1:-1;;;;;4895:24:22;;;:106;;4962:39;4982:6;4990:10;4962:19;:39::i;:::-;4895:106;;;4957:1;4895:106;4851:150;;5016:9;5011:1595;5035:10;5031:1;:14;5011:1595;;;5084:4;-1:-1:-1;;;;;5106:24:22;;5102:1353;;5187:216;5250:18;5291:52;;;5365:17;5383:1;5365:20;;;;;;;;;;;;;;5187:33;:216::i;:::-;5151:17;5169:1;5151:20;;;;;;;;;;;;;5150:253;;;;;;;;;5102:1353;;;-1:-1:-1;;;;;5428:24:22;;5424:1031;;5509:216;5572:18;5613:52;;;5687:17;5705:1;5687:20;;;;;;;5424:1031;5764:15;5821:216;5884:18;5925:52;;;5999:17;6017:1;5999:20;;;;;;;5821:216;5797:240;-1:-1:-1;5797:240:22;-1:-1:-1;6059:12:22;;6055:386;;6132:219;6199:18;-1:-1:-1;;;6322:7:22;6132:33;:219::i;:::-;6096:17;6114:1;6096:20;;;;;;;;;;;;;6095:256;;;;;;;;;6055:386;;;6421:1;6398:17;6416:1;6398:20;;;;;;;;;;;;;:24;;;;;6055:386;5424:1031;;6517:10;6516:11;:40;;;;6531:17;6549:1;6531:20;;;;;;;;;;;;;;6555:1;6531:25;6516:40;6512:84;;;6576:5;;;6512:84;-1:-1:-1;5047:3:22;;5011:1595;;;;4274:2338;;;;;;;;;:::o;3549:919:14:-;3770:34;3820:40;3837:10;3849;3820:16;:40::i;:::-;3870:8;3886:7;:18;;;3870:35;;3915:8;3931:3;-1:-1:-1;;;;;3931:7:14;;:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3974:24;;3915:26;;-1:-1:-1;3974:24:14;-1:-1:-1;;;;;4028:25:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4028:25:14;;4008:45;;4082:3;-1:-1:-1;;;;;4082:7:14;;:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;4068:23:14;:10;-1:-1:-1;;;;;4068:23:14;;;:50;;;;;4109:3;-1:-1:-1;;;;;4109:7:14;;:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;4095:23:14;:10;-1:-1:-1;;;;;4095:23:14;;;4068:50;4064:105;;;4134:24;;;;;4064:105;4184:9;4179:283;4203:10;4199:1;:14;4179:283;;;4234:17;4254:79;4269:7;4278:10;4290;4302:17;4320:1;4302:20;;;;;;;;;;;;;;4324:3;4329;4254:14;:79::i;:::-;4234:99;-1:-1:-1;4352:14:14;4348:58;;4386:5;;;4348:58;4442:9;4419:17;4437:1;4419:20;;;;;;;;;;;;;;;;;:32;-1:-1:-1;4215:3:14;;4179:283;;3549:919;;;;;;;:::o;4133:670:20:-;4497:258;;;4355:34;4497:258;;;;;;4461:335;;4497:258;4555:35;4566:10;4578:11;4555:35;;;;:::i;:::-;;;;;;;;;;;;;4497:258;;;;4635:12;4649:11;4624:37;;;;;;;;;:::i;:::-;;;;;;;;;;;;;4497:258;;;;4701:39;4497:258;;;4769:17;4461:22;:335::i;:::-;4454:342;4133:670;-1:-1:-1;;;;;4133:670:20:o;1936:1742:5:-;2153:13;2168:12;2182:34;2232:40;2249:10;2261;2232:16;:40::i;:::-;2303:24;;;-1:-1:-1;;;;;2357:25:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2357:25:5;-1:-1:-1;2409:13:5;;2400:55;;-1:-1:-1;;;2400:55:5;;2337:45;;-1:-1:-1;;;;;;2400:31:5;;;;:55;;2432:10;;2444;;2400:55;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2393:62;-1:-1:-1;2465:17:5;-1:-1:-1;;;;;2562:18:5;;;2558:420;;-1:-1:-1;2643:4:5;;-1:-1:-1;2608:10:5;2558:420;;;2694:13;;2685:55;;-1:-1:-1;;;2685:55:5;;-1:-1:-1;;;;;2685:31:5;;;;;;:55;;2717:10;;2729;;2685:55;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2678:62;-1:-1:-1;;;;;;2798:27:5;;2794:108;;2845:42;;;;2794:108;-1:-1:-1;2962:5:5;;-1:-1:-1;2927:10:5;2558:420;3038:4;-1:-1:-1;;;;;3032:27:5;;:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3027:103;;3077:42;;;;3027:103;3145:9;3140:532;3164:10;3160:1;:14;3140:532;;;3195:17;3215:268;3280:10;3292:4;3298:9;3309:4;:11;;;3269:52;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;3370:10;3382:4;3388:9;3399:4;:11;;;3359:52;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;3449:17;3467:1;3449:20;;;;;;;;;;;;;;3215:36;:268::i;:::-;3195:288;;3520:9;3497:17;3515:1;3497:20;;;;;;;;;;;;;:32;;;;;3597:17;3615:1;3597:20;;;;;;;;;;;;;;3621:1;3597:25;3593:69;;;3642:5;;;3593:69;-1:-1:-1;3176:3:5;;3140:532;;;;1936:1742;;;;;;;;;;:::o;1410:1411:16:-;1784:24;;1661:34;;1784:24;-1:-1:-1;;;;;1838:25:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1838:25:16;-1:-1:-1;1818:45:16;-1:-1:-1;;;;;;1931:25:16;;1927:80;;1972:24;;;1927:80;2022:9;2017:798;2041:10;2037:1;:14;2017:798;;;2073:15;2090:23;2133:11;-1:-1:-1;;;;;2133:22:16;851:5;2247:37;;;2310:10;2346:17;2389:10;2425:17;2443:1;2425:20;;;;;;;;;;;;;;2199:268;;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;2199:268:16;;;;;;;;;;;;;;-1:-1:-1;;;;;2199:268:16;-1:-1:-1;;;;;;2199:268:16;;;;;;;;;;2133:335;;;;2199:268;2133:335;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2072:396;;;;2482:17;2521:10;2517:94;;;2574:10;2563:33;;;;;;;;;;;;:::i;:::-;2551:45;;2517:94;2704:14;2700:58;;2738:5;;;;;2700:58;2795:9;2772:17;2790:1;2772:20;;;;;;;;;;;;;;;;;:32;-1:-1:-1;;;2053:3:16;;2017:798;;;;1410:1411;;;;;;;;:::o;1382:1092:13:-;1589:34;1639:40;1656:10;1668;1639:16;:40::i;:::-;1762:24;;;-1:-1:-1;;;;;1816:25:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1816:25:13;;1796:45;;1857:9;1852:616;1876:10;1872:1;:14;1852:616;;;1936:6;-1:-1:-1;;;;;1927:30:13;;940:5;2023:10;2035;2047:17;2065:1;2047:20;;;;;;;;;;;;;;1927:141;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1927:141:13;;;;;;;;-1:-1:-1;;1927:141:13;;;;;;;;;;;;:::i;:::-;;;1907:551;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2438:5;;;1907:551;2163:6;2140:17;2158:1;2140:20;;;;;;;;;;;;;:29;;;;;2245:17;2263:1;2245:20;;;;;;;;;;;;;;2269:1;2245:25;2241:77;;;2294:5;;;2241:77;2085:247;1888:3;;1852:616;;;;1382:1092;;;;;;;:::o;1214:988:23:-;1469:24;;1398:34;;1469:24;-1:-1:-1;;;;;1523:25:23;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1523:25:23;;1503:45;;1563:9;1558:638;1582:10;1578:1;:14;1558:638;;;1652:6;-1:-1:-1;;;;;1633:40:23;;846:5;1741:17;1759:1;1741:20;;;;;;;;;;;;;;1763:4;1633:135;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1633:135:23;;;;;;;;;;;;:::i;:::-;;;1613:573;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2166:5;;;1613:573;1873:7;1895:1;1881:4;:11;:15;1873:24;;;;;;;;;;;;;;1850:17;1868:1;1850:20;;;;;;;;;;;;;:47;;;;;1973:17;1991:1;1973:20;;;;;;;;;;;;;;1997:1;1973:25;1969:77;;;2022:5;;;1969:77;1785:275;1594:3;;1558:638;;;;1214:988;;;;;;:::o;2429:755:11:-;2642:16;2674:40;2691:10;2703;2674:16;:40::i;:::-;2743:8;:18;;;-1:-1:-1;;;;;2729:32:11;:10;-1:-1:-1;;;;;2729:32:11;;;:78;;;-1:-1:-1;2787:19:11;;-1:-1:-1;;;;;2765:42:11;;;;;;;2729:78;2725:328;;;2904:24;;2942:34;2904:24;-1:-1:-1;;;;;2979:25:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2979:25:11;-1:-1:-1;2942:62:11;-1:-1:-1;3018:24:11;;-1:-1:-1;;3018:24:11;1731:1130:4;2019:24;;1948:34;;2019:24;-1:-1:-1;;;;;2073:25:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2073:25:4;;2053:45;;2113:9;2108:747;2132:10;2128:1;:14;2108:747;;;2164:15;2181:23;2224:9;:21;;;-1:-1:-1;;;;;2224:32:4;1243:6;2346:9;:35;;;2407:12;2445:10;2481:17;2499:1;2481:20;;;;;;;;;;;;;;2298:225;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;2298:225:4;;;;;;;;;;;;;;-1:-1:-1;;;;;2298:225:4;-1:-1:-1;;;;;;2298:225:4;;;;;;;;;;2224:300;;;;2298:225;2224:300;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2163:361;;;;2538:17;2577:10;2573:94;;;2630:10;2619:33;;;;;;;;;;;;:::i;:::-;2607:45;;2573:94;2703:9;2680:17;2698:1;2680:20;;;;;;;;;;;;;:32;;;;;2780:17;2798:1;2780:20;;;;;;;;;;;;;;2804:1;2780:25;2776:69;;;2825:5;;;;;2776:69;-1:-1:-1;;;2144:3:4;;2108:747;;3526:1138:9;3803:24;;3708:22;;;;3803:24;-1:-1:-1;;;;;3857:25:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3857:25:9;;3837:45;;3900:31;3918:6;3926:4;3900:17;:31::i;:::-;3892:39;;3945:5;:12;3961:1;3945:17;3941:81;;;3978:33;;;3941:81;4036:9;4031:627;4055:10;4051:1;:14;4031:627;;;4122:6;-1:-1:-1;;;;;4106:36:9;;1507:5;4210:17;4228:1;4210:20;;;;;;;;;;;;;;4232:5;4239:4;4106:138;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;4106:138:9;;;;;;;;;;;;:::i;:::-;;;4086:562;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4349:7;4357:1;4349:10;;;;;;;;;;;;;;4326:17;4344:1;4326:20;;;;;;;;;;;;;:33;;;;;4435:17;4453:1;4435:20;;;;;;;;;;;;;;4459:1;4435:25;4431:77;;;4484:5;;;4431:77;4261:261;4067:3;;4031:627;;4509:2595:10;4840:16;;;;;4967;;;4981:1;4967:16;;;;;;;;;4706:17;;;;4981:1;4967:16;;;;4840;4967;;;;;-1:-1:-1;4967:16:10;4931:52;;5015:9;4993:16;5010:1;4993:19;;;;;;;;;;;;;;;;;:31;5034:28;5079:1;5065:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5065:16:10;;5034:47;;5110:4;:9;;;-1:-1:-1;;;;;5096:23:10;:10;-1:-1:-1;;;;;5096:23:10;;5092:2006;;;5183:289;;-1:-1:-1;;;5183:289:10;;-1:-1:-1;;;;;5183:29:10;;;;;931:5;;5183:289;;5301:10;;5337:34;;5397:16;;5439:11;;5183:289;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;5183:289:10;;;;;;;;;;;;:::i;:::-;;;5163:517;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5578:102;5163:517;;;5556:6;-1:-1:-1;5549:13:10;;-1:-1:-1;;;5549:13:10;5163:517;5092:2006;;;5714:4;:9;;;-1:-1:-1;;;;;5700:23:10;:10;-1:-1:-1;;;;;5700:23:10;;5696:1402;;;5787:289;;-1:-1:-1;;;5787:289:10;;-1:-1:-1;;;;;5787:29:10;;;;;931:5;;5787:289;;5905:10;;5941:34;;6001:16;;6043:11;;5787:289;;;:::i;5696:1402::-;6414:466;;-1:-1:-1;;;6414:466:10;;-1:-1:-1;;;;;6414:31:10;;;;;931:5;;6414:466;;6534:10;;6570:34;;6630:16;;6672:11;;6709:10;;6570:34;;6630:16;;6672:11;;6414:466;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;6414:466:10;;;;;;;;;;;;:::i;:::-;;;6394:694;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4509:2595;;;;;;;;;:::o;2047:1569:24:-;2247:27;2288:34;2347:35;2397:45;2416:6;-1:-1:-1;;;;;2416:14:24;;:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2434:4;2440:1;2397:18;:45::i;:::-;2347:95;;2487:17;:24;-1:-1:-1;;;;;2473:39:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2473:39:24;;2453:59;;2549:17;:24;-1:-1:-1;;;;;2537:37:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2522:52;;2590:9;2585:1025;2609:17;:24;2605:1;:28;2585:1025;;;2710:27;2751:20;2794:9;2789:584;2813:9;:16;2809:1;:20;2789:584;;;2854:24;2881:34;2896:4;2902:9;2912:1;2902:12;;;;;;;;;;;;;;2881:14;:34::i;:::-;2854:61;;2957:6;-1:-1:-1;;;;;2957:22:24;;1626:5;3048:11;3061:17;3079:1;3061:20;;;;;;;;;;;;;;2957:125;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2957:125:24;;;;;;;;-1:-1:-1;;2957:125:24;;;;;;;;;;;;:::i;:::-;;;2933:426;;;;;3193:9;3177:12;:25;3173:158;;3245:9;3230:24;;3297:11;3280:28;;3173:158;3107:242;2933:426;-1:-1:-1;2831:3:24;;2789:584;;;-1:-1:-1;3448:17:24;3444:61;;3485:5;;;;3444:61;3541:12;3518:17;3536:1;3518:20;;;;;;;;;;;;;:35;;;;;3585:14;3567:12;3580:1;3567:15;;;;;;;;;;;;;;;;;:32;-1:-1:-1;;2635:3:24;;2585:1025;;4265:2076:1;4597:24;;4477:34;;4554:11;;4597:24;-1:-1:-1;;;;;4651:25:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4651:25:1;-1:-1:-1;4691:24:1;;-1:-1:-1;;;4691:24:1;;4631:45;;-1:-1:-1;;;;;;4691:12:1;;;;;:24;;4704:10;;4691:24;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4690:25;:54;;;-1:-1:-1;4720:24:1;;-1:-1:-1;;;4720:24:1;;-1:-1:-1;;;;;4720:12:1;;;;;:24;;4733:10;;4720:24;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4719:25;4690:54;4686:109;;;4760:24;;;;4686:109;4805:30;;:::i;:::-;4875:27;;-1:-1:-1;;;4875:27:1;;-1:-1:-1;;;;;4875:15:1;;;;;:27;;4891:10;;4875:27;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4845:57;;4942:27;;-1:-1:-1;;;4942:27:1;;-1:-1:-1;;;;;4942:15:1;;;;;:27;;4958:10;;4942:27;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4912;;;:57;5008:38;;-1:-1:-1;;;5008:38:1;;-1:-1:-1;;;;;5008:26:1;;;;;:38;;5035:10;;5008:38;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4979:26;;;;:67;;;;5085:38;-1:-1:-1;;;5085:38:1;;-1:-1:-1;;;;;5085:26:1;;;;;:38;;5112:10;;5085:38;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;5056:9;:26;;:67;;;;;5153:4;-1:-1:-1;;;;;5153:15:1;;:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;5133;;;:37;5186:9;5181:1154;5205:10;5201:1;:14;5181:1154;;;5407:49;5413:9;:27;;;1127:1;1010:8;1120;;;;;;1132:5;1119:18;5407:5;:49::i;:::-;5384:17;5402:1;5384:20;;;;;;;;;;;;;;:72;5380:116;;;5476:5;;5380:116;5529:4;-1:-1:-1;;;;;5529:19:1;;840:5;5640:9;:27;;;5693:9;:26;;;5745:9;:27;;;5798:9;:26;;;5850:17;5868:1;5850:20;;;;;;;;;;;;;;5896:9;:17;;;5529:406;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5529:406:1;;;;;;;;-1:-1:-1;;5529:406:1;;;;;;;;;;;;:::i;:::-;;;5509:816;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6305:5;;;5509:816;6030:6;6007:17;6025:1;6007:20;;;;;;;;;;;;;:29;;;;;6112:17;6130:1;6112:20;;;;;;;;;;;;;;6136:1;6112:25;6108:77;;;6161:5;;;6108:77;5952:247;5217:3;;5181:1154;;4028:1924:24;4227:27;4268:34;4327:35;4377:45;4396:6;-1:-1:-1;;;;;4396:14:24;;:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4377:45;4327:95;;4432:36;4471:23;4489:4;4471:17;:23::i;:::-;4432:62;;4539:17;:24;-1:-1:-1;;;;;4525:39:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4525:39:24;;4505:59;;4601:17;:24;-1:-1:-1;;;;;4589:37:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4574:52;;4642:9;4637:1309;4661:17;:24;4657:1;:28;4637:1309;;;4762:27;4803:21;4847:9;4842:865;4866:9;:16;4862:1;:20;4842:865;;;4972:24;4999:118;5035:12;5069:30;5086:9;5096:1;5086:12;;;;;;;;;;;;;;5069:16;:30::i;:::-;4999:14;:118::i;:::-;4972:145;;5159:6;-1:-1:-1;;;;;5159:23:24;;1626:5;5251:11;5264:17;5282:1;5264:20;;;;;;;;;;;;;;5159:126;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5159:126:24;;;;;;;;-1:-1:-1;;5159:126:24;;;;;;;;;;;;:::i;:::-;;;5135:558;;;;;5381:18;;;:49;;;5420:10;5403:13;:27;;5381:49;5377:289;;;5474:10;5458:26;;5609:34;5624:4;5630:9;5640:1;5630:12;;;;;;;5609:34;5592:51;;5377:289;5310:374;5135:558;-1:-1:-1;4884:3:24;;4842:865;;;-1:-1:-1;5782:18:24;5778:62;;5820:5;;;;5778:62;5876:13;5853:17;5871:1;5853:20;;;;;;;;;;;;;:36;;;;;5921:14;5903:12;5916:1;5903:15;;;;;;;;;;;;;;;;;:32;-1:-1:-1;;4687:3:24;;4637:1309;;;;4028:1924;;;;;;;;:::o;2751:583:19:-;3046:240;;;2953:34;3046:240;;;;;;3010:317;;3046:240;3104:28;3115:10;3127:4;3104:28;;;;:::i;:::-;;;;;;;;;;;;;3046:240;;;;3177:10;3189:4;3166:28;;;;;;;;;:::i;:::-;;;;;;;;;;;;;3046:240;;;;3234:37;3046:240;;;3300:17;3010:22;:317::i;5648:955:17:-;5875:47;5971:119;6023:6;6043:15;6072:8;5971:38;:119::i;:::-;5938:152;;6231:9;6226:371;6250:6;:13;6246:1;:17;6226:371;;;6288:30;6319:1;6288:33;;;;;;;;;;;;;;6325:1;6288:38;6284:303;;6382:190;6435:30;6466:1;6435:33;;;;;;;;;;;;;;6490:6;6497:1;6490:9;;;;;;;;;;;;;;:21;;;-1:-1:-1;;;;;6382:190:17;6533:6;6540:1;6533:9;;;;;;;;;;;;;;:21;;;-1:-1:-1;;;;;6382:190:17;:31;:190::i;:::-;6346:30;6377:1;6346:33;;;;;;;;;;;;;:226;;;;;6284:303;6265:3;;6226:371;;2217:474:7;2298:32;2378:9;-1:-1:-1;;;;;2360:35:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;2346:49;;2410:9;2405:280;2425:21;;;2405:280;;2492:4;2467:11;2479:1;2467:14;;;;;;;;;;;;;;;;;;;:29;;;:22;;:29;2514:9;;2524:1;2514:12;;;;;;;;;;;;;;;;;;:::i;:::-;:24;2510:71;;-1:-1:-1;2510:71:7;;2558:8;;2510:71;2650:4;2661:9;;2671:1;2661:12;;;;;;;;;;;;;;;;;;:::i;:::-;2642:32;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2595:11;2607:1;2595:14;;;;;;;;;;;;;;:22;;2619:11;2631:1;2619:14;;;;;;;;;;;;;;;;;;2594:80;;;;;;;;;2405:280;2448:3;;2405:280;;;;2217:474;;;;:::o;946:381:25:-;1049:25;1115:6;:13;-1:-1:-1;;;;;1101:28:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1101:28:25;;1090:39;;1144:9;1139:182;1164:6;:13;1159:1;:18;1139:182;;1225:19;-1:-1:-1;;;;;1212:32:25;:6;1219:1;1212:9;;;;;;;;;;;;;;-1:-1:-1;;;;;1212:32:25;;:98;;1284:26;:6;1291:1;1284:9;;;;;;;;;;;;;;-1:-1:-1;;;;;1284:24:25;;:26::i;:::-;1212:98;;;1263:2;1212:98;1198:112;;:8;1207:1;1198:11;;;;;;;;;;;;;;;;;:112;1179:3;;1139:182;;;;946:381;;;:::o;3400:313:3:-;3620:21;3643;3666:34;3400:313;;;;;;;;:::o;4474:920:14:-;4694:34;4744:40;4761:10;4773;4744:16;:40::i;:::-;4794:8;4810:7;:18;;;4794:35;;4839:8;4855:3;-1:-1:-1;;;;;4855:7:14;;:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4897:24;;4839:26;;-1:-1:-1;4897:24:14;-1:-1:-1;;;;;4951:25:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4951:25:14;;4931:45;;5004:3;-1:-1:-1;;;;;5004:7:14;;:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;4990:23:14;:10;-1:-1:-1;;;;;4990:23:14;;;:50;;;;;5031:3;-1:-1:-1;;;;;5031:7:14;;:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;5017:23:14;:10;-1:-1:-1;;;;;5017:23:14;;;4990:50;4986:105;;;5056:24;;;;;4986:105;5106:9;5101:286;5125:10;5121:1;:14;5101:286;;;5156:18;5177:78;5191:7;5200:10;5212;5224:17;5242:1;5224:20;;;;;;;;;;;;;;5246:3;5251;5177:13;:78::i;:::-;5156:99;-1:-1:-1;5274:15:14;5270:59;;5309:5;;;5270:59;5366:10;5343:17;5361:1;5343:20;;;;;;;;;;;;;;;;;:33;-1:-1:-1;5137:3:14;;5101:286;;1621:2080:20;1844:34;2006:30;2157:11;:23;;;-1:-1:-1;;;;;2148:44:20;;2201:10;2193:19;;2148:65;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2048:23;;2039:65;;-1:-1:-1;;;2039:65:20;;-1:-1:-1;;;;;2039:44:20;;;;;;:65;;2084:19;;;;;2039:65;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:174;2006:207;;2230:16;2259:11;:23;;;-1:-1:-1;;;;;2250:47:20;;2306:10;2298:19;;2250:68;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2223:95;;;;;2385:8;2382:2;:11;2377:2;:17;2353:22;:42;;;;;2427:24;;2353:42;;;;-1:-1:-1;2427:24:20;-1:-1:-1;;;;;2481:25:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2481:25:20;;2461:45;;2521:9;2516:1179;2540:10;2536:1;:14;2516:1179;;;2572:15;2589:23;2632:11;:23;;;-1:-1:-1;;;;;2632:34:20;1179:5;2758:11;:37;;;2821:12;2859:10;2895:17;2913:1;2895:20;;;;;;;;;;;;;;2710:227;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;2710:227:20;;;;;;;;;;;;;;-1:-1:-1;;;;;2710:227:20;-1:-1:-1;;;;;;2710:227:20;;;;;;;;;;2632:306;;;;2710:227;2632:306;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2571:367;;;;2952:17;2991:10;2987:94;;;3044:10;3033:33;;;;;;;;;;;;:::i;:::-;3021:45;;2987:94;3191:22;3178:9;:35;3174:378;;3334:1;3317:127;3341:10;3337:1;:14;3317:127;;;3403:22;3380:17;3398:1;3380:20;;;;;;;;;;;;;;;;;:45;3353:3;;3317:127;;;;3461:5;;;;;3174:378;3528:9;3505:17;3523:1;3505:20;;;;;;;;;;;;;:32;;;;;3620:17;3638:1;3620:20;;;;;;;;;;;;;;3644:1;3620:25;3616:69;;;3665:5;;;;;3616:69;-1:-1:-1;;;2552:3:20;;2516:1179;;888:1649:21;1070:23;;:::i;:::-;1107:24;;:::i;:::-;1145:17;;;1232:596;1257:13;:20;1252:1;:25;1232:596;;1298:71;1354:2;1328:13;1342:1;1328:16;;;;;;;;;;;;;;:23;:28;1358:10;1298:13;1312:1;1298:16;;;;;;;;;;;;;;:29;;:71;;;;;:::i;:::-;1384:15;1401:23;1436:4;-1:-1:-1;;;;;1428:18:21;1447:13;1461:1;1447:16;;;;;;;;;;;;;;1428:36;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1383:81;;;;1482:10;1478:340;;;1512:14;1529:46;1572:2;1552:10;:17;:22;1529:10;:22;;:46;;;;:::i;:::-;1512:63;;1606:23;1597:6;:32;1593:211;;;1707:24;;;1753:19;;;:32;;;1679:6;-1:-1:-1;1679:6:21;1593:211;1478:340;;-1:-1:-1;;1279:3:21;;1232:596;;;-1:-1:-1;1841:28:21;1837:98;;1885:39;;;1837:98;1949:9;1944:587;1969:14;:21;1964:1;:26;1944:587;;2011:86;2069:2;2042:14;2057:1;2042:17;;;;;;;;;;;;;;:24;:29;2073:23;2011:14;2026:1;2011:17;;;;;;;:86;2112:15;2129:23;2164:4;-1:-1:-1;;;;;2156:18:21;2175:14;2190:1;2175:17;;;;;;;;;;;;;;2156:37;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2111:82;;;;2211:10;2207:314;;;2241:14;2258:46;2301:2;2281:10;:17;:22;2258:10;:22;;:46;;;;:::i;:::-;2241:63;;2335:9;2326:6;:18;2322:185;;;2408:25;;;2455:20;;;:33;;;2380:6;-1:-1:-1;2380:6:21;2322:185;2207:314;;-1:-1:-1;;1992:3:21;;1944:587;;;;888:1649;;;;;;;;;:::o;3287:1650:4:-;3557:34;;;;3503;;-1:-1:-1;;;;;;3557:47:4;3553:510;;3735:268;;;;;;;;;3695:357;;3735:268;3797:33;3808:10;3820:9;3797:33;;;;:::i;:::-;;;;;;;;;;;;;3735:268;;;;3879:12;3893:9;3868:35;;;;;;;;;:::i;:::-;;;;;;;;;;;;;3735:268;;;;3947:37;3735:268;;;4021:17;3695:22;:357::i;:::-;3688:364;;;;3553:510;4093:24;;;-1:-1:-1;;;;;4147:25:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4147:25:4;;4127:45;;4187:9;4182:749;4206:10;4202:1;:14;4182:749;;;4238:15;4255:23;4298:9;:21;;;-1:-1:-1;;;;;4298:32:4;1243:6;4420:9;:34;;;4480:12;4518:10;4554:17;4572:1;4554:20;;;;;;;;;;;;;;4372:224;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;4372:224:4;;;;;;;;;;;;;;-1:-1:-1;;;;;4372:224:4;-1:-1:-1;;;;;;4372:224:4;;;;;;;;;;4298:299;;;;4372:224;4298:299;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4237:360;;;;4611:18;4651:10;4647:95;;;4705:10;4694:33;;;;;;;;;;;;:::i;:::-;4681:46;;4647:95;4778:10;4755:17;4773:1;4755:20;;;;;;;;;;;;;:33;;;;;4856:17;4874:1;4856:20;;;;;;;;;;;;;;4880:1;4856:25;4852:69;;;4901:5;;;;;4852:69;-1:-1:-1;;;4218:3:4;;4182:749;;1764:2076:1;2097:24;;1977:34;;2054:11;;2097:24;-1:-1:-1;;;;;2151:25:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2151:25:1;-1:-1:-1;2191:24:1;;-1:-1:-1;;;2191:24:1;;2131:45;;-1:-1:-1;;;;;;2191:12:1;;;;;:24;;2204:10;;2191:24;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2190:25;:54;;;-1:-1:-1;2220:24:1;;-1:-1:-1;;;2220:24:1;;-1:-1:-1;;;;;2220:12:1;;;;;:24;;2233:10;;2220:24;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2219:25;2190:54;2186:109;;;2260:24;;;;2186:109;2305:30;;:::i;:::-;2375:27;;-1:-1:-1;;;2375:27:1;;-1:-1:-1;;;;;2375:15:1;;;;;:27;;2391:10;;2375:27;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2345:57;;2442:27;;-1:-1:-1;;;2442:27:1;;-1:-1:-1;;;;;2442:15:1;;;;;:27;;2458:10;;2442:27;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2412;;;:57;2508:38;;-1:-1:-1;;;2508:38:1;;-1:-1:-1;;;;;2508:26:1;;;;;:38;;2535:10;;2508:38;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2479:26;;;;:67;;;;2585:38;-1:-1:-1;;;2585:38:1;;-1:-1:-1;;;;;2585:26:1;;;;;:38;;2612:10;;2585:38;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2556:9;:26;;:67;;;;;2653:4;-1:-1:-1;;;;;2653:15:1;;:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2633;;;:37;2686:9;2681:1153;2705:10;2701:1;:14;2681:1153;;;2913:27;;2907:48;;1064:8;2907:5;:48::i;:::-;2884:17;2902:1;2884:20;;;;;;;;;;;;;;:71;2880:115;;;2975:5;;2880:115;3028:4;-1:-1:-1;;;;;3028:19:1;;840:5;3139:9;:27;;;3192:9;:26;;;3244:9;:27;;;3297:9;:26;;;3349:17;3367:1;3349:20;;;;;;;;;;;;;;3395:9;:17;;;3028:406;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3028:406:1;;;;;;;;-1:-1:-1;;3028:406:1;;;;;;;;;;;;:::i;:::-;;;3008:816;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3529:6;3506:17;3524:1;3506:20;;;;;;;;;;;;;:29;;;;;3611:17;3629:1;3611:20;;;;;;;;;;;;;;3635:1;3611:25;3607:77;;;3660:5;;;3607:77;3451:247;2717:3;;2681:1153;;6743:1029:17;6969:27;;7016:23;;:58;;;;;;;;;:132;;;-1:-1:-1;7117:31:17;7090:23;;:58;;;;;;;;;7016:132;:170;;;-1:-1:-1;7164:17:17;;;;-1:-1:-1;;;;;7164:22:17;;7016:170;:208;;;-1:-1:-1;7202:17:17;;;;-1:-1:-1;;;;;7202:22:17;;7016:208;7012:255;;;-1:-1:-1;7255:1:17;7248:8;;7012:255;7291:36;;:::i;:::-;7341;7391:21;7425:8;-1:-1:-1;;;;;7425:35:17;;7461:5;7468:9;7425:53;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;7277:201;;-1:-1:-1;7277:201:17;-1:-1:-1;7277:201:17;-1:-1:-1;7528:30:17;7508:9;:16;;;:50;;;;;;;;;;:85;;;;7577:16;7576:17;7508:85;:140;;;-1:-1:-1;7611:16:17;;-1:-1:-1;;;;;7611:37:17;;7508:140;7489:207;;;7684:1;7677:8;;;;;;;7489:207;-1:-1:-1;;;;;;7728:37:17;;-1:-1:-1;;6743:1029:17;;;;;;:::o;3464:1039:10:-;3689:17;3708;3727:34;3777:40;3794:10;3806;3777:16;:40::i;:::-;3840:47;3858:4;3864:10;3876;3840:17;:47::i;:::-;3828:59;-1:-1:-1;3901:16:10;3897:90;;3933:43;;3897:90;4008:61;;-1:-1:-1;;;4008:61:10;;:4;;:20;;:61;;4029:4;;4035:9;;4046:10;;4058;;4008:61;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;4008:61:10;;;;;;;;;;;;:::i;:::-;3996:4;:9;;:73;;;;4086:4;:9;;;4079:16;;4126:317;4162:240;;;;;;;;4231:10;4243:4;4220:28;;;;;;;;;:::i;:::-;;;;;;;;;;;;;4162:240;;;;4293:10;4305:4;4282:28;;;;;;;;;:::i;:::-;;;;;;;;;;;;;4162:240;;;;4350:37;4162:240;;;4416:17;4126:22;:317::i;:::-;4106:337;;3464:1039;;;;;;;;:::o;2424:1290:15:-;2652:7;2714:15;2775:8;-1:-1:-1;;;;;2756:34:15;;2791:19;2812;2756:76;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2714:128;-1:-1:-1;;;;;;2905:27:15;;2901:66;;2955:1;2948:8;;;;;2901:66;2976:19;-1:-1:-1;;;;;2998:33:15;;;:144;;3082:60;;-1:-1:-1;;;3082:60:15;;-1:-1:-1;;;;;3082:45:15;;;;;:60;;3136:4;;3082:60;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2998:144;;;3054:4;-1:-1:-1;;;;;3046:21:15;;2998:144;2976:166;;3298:16;3284:11;:30;3280:69;;;3337:1;3330:8;;;;;;3280:69;3374:133;;-1:-1:-1;;;3374:133:15;;-1:-1:-1;;;;;3374:14:15;;;;;940:5;;3374:133;;3448:19;;3469;;3490:16;;3374:133;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3374:133:15;;;;;;;;-1:-1:-1;;3374:133:15;;;;;;;;;;;;:::i;:::-;;;3358:350;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3696:1;3689:8;;;;;;;3358:350;3574:6;-1:-1:-1;3567:13:15;;-1:-1:-1;;3567:13:15;4281:1535:2;4497:34;4547:40;4564:10;4576;4547:16;:40::i;:::-;4639:14;;;;4693:15;;;4706:1;4693:15;;;4664:26;4693:15;;;;;;;;;;;;;;;;;;-1:-1:-1;4693:15:2;4664:44;;4741:10;4718;4729:1;4718:13;;;;;;;;;;;;;:34;-1:-1:-1;;;;;4718:34:2;;;-1:-1:-1;;;;;4718:34:2;;;;;4785:10;4762;4773:1;4762:13;;;;;;;;-1:-1:-1;;;;;4762:34:2;;;:13;;;;;;;;;;;:34;4828:24;;;-1:-1:-1;;;;;4882:25:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4882:25:2;;4862:45;;4917:48;;:::i;:::-;4980:18;:16;:18::i;:::-;4917:81;;5014:9;5009:801;5033:10;5029:1;:14;5009:801;;;5064:49;5132:48;5149:8;5159:17;5177:1;5159:20;;;;;;;5132:48;5317:91;;-1:-1:-1;;;5317:91:2;;5064:116;;-1:-1:-1;;;;;;5317:20:2;;;;;:91;;5338:35;;5064:116;;5386:10;;5398:9;;5317:91;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;5317:91:2;;;;;;;;;;;;:::i;:::-;;;5195:605;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5473:21;5497:7;5505:1;5497:10;;;;;;;;;;;;;;5473:34;;5547:1;5529:14;:19;5525:71;;5572:5;;;;;5525:71;5644:14;5613:17;5631:1;5613:20;;;;;;;;;;;;;:46;;;;;5421:253;;-1:-1:-1;5045:3:2;;5009:801;;1540:1205:12;1889:24;;1766:34;;1889:24;-1:-1:-1;;;;;1943:25:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1943:25:12;;1923:45;;1984:9;1979:760;2003:10;1999:1;:14;1979:760;;;2073:15;-1:-1:-1;;;;;2054:48:12;;1065:5;2208:10;2260;2297:17;2315:1;2297:20;;;;;;;;;;;;;;2054:285;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2054:285:12;;;;;;;;-1:-1:-1;;2054:285:12;;;;;;;;;;;;:::i;:::-;;;2034:695;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2434:6;2411:17;2429:1;2411:20;;;;;;;;;;;;;:29;;;;;2516:17;2534:1;2516:20;;;;;;;;;;;;;;2540:1;2516:25;2512:77;;;2565:5;;;2512:77;2356:247;2015:3;;1979:760;;2025:1175:6;2257:13;2272:12;2286:34;2336:40;2353:10;2365;2336:16;:40::i;:::-;2408:24;;;-1:-1:-1;;;;;2462:25:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2462:25:6;;2442:45;;2517:60;2536:8;2546:6;2554:10;2566;2517:18;:60::i;:::-;2498:79;-1:-1:-1;2498:79:6;-1:-1:-1;;;;;;2591:18:6;;2587:91;;2625:42;;;2587:91;2693:9;2688:506;2712:10;2708:1;:14;2688:506;;;2743:17;2763:242;2830:10;2842:4;2848:8;2819:38;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;2906:10;2918:4;2924:8;2895:38;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;2971:17;2989:1;2971:20;;;;;;;;;;;;;;2763:38;:242::i;:::-;2743:262;;3042:9;3019:17;3037:1;3019:20;;;;;;;;;;;;;:32;;;;;3119:17;3137:1;3119:20;;;;;;;;;;;;;;3143:1;3119:25;3115:69;;;3164:5;;;3115:69;-1:-1:-1;2724:3:6;;2688:506;;;;2025:1175;;;;;;;;;;;:::o;1325:1038:8:-;1532:34;1582:40;1599:10;1611;1582:16;:40::i;:::-;1653:24;;;-1:-1:-1;;;;;1707:25:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1707:25:8;;1687:45;;1747:9;1742:615;1766:10;1762:1;:14;1742:615;;;1826:6;-1:-1:-1;;;;;1817:29:8;;884:6;1912:10;1924;1936:17;1954:1;1936:20;;;;;;;;;;;;;;1817:140;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1817:140:8;;;;;;;;-1:-1:-1;;1817:140:8;;;;;;;;;;;;:::i;:::-;;;1797:550;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2052:6;2029:17;2047:1;2029:20;;;;;;;;;;;;;:29;;;;;2134:17;2152:1;2134:20;;;;;;;;;;;;;;2158:1;2134:25;2130:77;;;2183:5;;;2130:77;1974:247;1778:3;;1742:615;;1432:986:15;1643:15;1660:34;1710:40;1727:10;1739;1710:16;:40::i;:::-;1781:24;;;-1:-1:-1;;;;;1835:25:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1835:25:15;;1815:45;;1876:9;1871:431;1895:10;1891:1;:14;1871:431;;;1926:17;1946:167;1997:8;2023:10;2051;2079:17;2097:1;2079:20;;;;;;;;;;;;;;1946:33;:167::i;:::-;1926:187;;2150:9;2127:17;2145:1;2127:20;;;;;;;;;;;;;:32;;;;;2227:17;2245:1;2227:20;;;;;;;;;;;;;;2251:1;2227:25;2223:69;;;2272:5;;;2223:69;-1:-1:-1;1907:3:15;;1871:431;;;-1:-1:-1;2343:58:15;;-1:-1:-1;;;2343:58:15;;-1:-1:-1;;;;;2343:34:15;;;;;:58;;2378:10;;2390;;2343:58;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2312:99;;1432:986;;;;;;;;:::o;2894:593:13:-;3193:246;;;3100:34;3193:246;;;;;;3157:323;;3193:246;3251:30;3262:10;3274:6;3251:30;;;;:::i;:::-;;;;;;;;;;;;;3193:246;;;;3326:10;3338:6;3315:30;;;;;;;;;:::i;:::-;;;;;;;;;;;;;3193:246;;;;3385:39;3193:246;;;3453:17;3157:22;:323::i;1333:415:25:-;1449:25;1515:6;:13;-1:-1:-1;;;;;1501:28:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1501:28:25;;1490:39;;1544:9;1539:203;1564:6;:13;1559:1;:18;1539:203;;1625:19;-1:-1:-1;;;;;1612:32:25;:6;1619:1;1612:9;;;;;;;;;;;;;;-1:-1:-1;;;;;1612:32:25;;:119;;1697:34;1723:7;1697:6;1704:1;1697:9;;;;;;;;;;;;;;-1:-1:-1;;;;;1697:25:25;;;:34;;;;:::i;:::-;1612:119;;;1663:7;-1:-1:-1;;;;;1663:15:25;;1612:119;1598:8;1607:1;1598:11;;;;;;;;;;;;;;;;;:133;1579:3;;1539:203;;3202:653:12;3533:274;;;3427:34;3533:274;;;;;;3497:351;;3533:274;3591:39;3602:10;3614:15;3591:39;;;;:::i;:::-;;;;;;;;;;;;;3533:274;;;;3675:10;3687:15;3664:39;;;;;;;;;:::i;:::-;;;;;;;;;;;;;3533:274;;;;3743:49;3533:274;;;3821:17;3497:22;:351::i;1572:2343:22:-;1779:34;1829:40;1846:10;1858;1829:16;:40::i;:::-;1900:24;;;-1:-1:-1;;;;;1954:25:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1954:25:22;-1:-1:-1;1934:45:22;-1:-1:-1;1990:41:22;-1:-1:-1;;;;;2034:24:22;;;:106;;2101:39;2121:6;2129:10;2101:19;:39::i;:::-;2034:106;;;2096:1;2034:106;1990:150;-1:-1:-1;2150:41:22;-1:-1:-1;;;;;2194:24:22;;;:106;;2261:39;2281:6;2289:10;2261:19;:39::i;:::-;2194:106;;;2256:1;2194:106;2150:150;;2315:9;2310:1599;2334:10;2330:1;:14;2310:1599;;;2383:4;-1:-1:-1;;;;;2405:24:22;;2401:1357;;2486:215;2549:18;2590:51;;;2663:17;2681:1;2663:20;;;;;;;2486:215;2450:17;2468:1;2450:20;;;;;;;;;;;;;2449:252;;;;;;;;;2401:1357;;;-1:-1:-1;;;;;2726:24:22;;2722:1036;;2807:215;2870:18;2911:51;;;2984:17;3002:1;2984:20;;;;;;;2722:1036;3061:17;3122:215;3185:18;3226:51;;;3299:17;3317:1;3299:20;;;;;;;3122:215;3096:241;-1:-1:-1;3096:241:22;-1:-1:-1;3359:14:22;;3355:389;;3434:220;3501:18;-1:-1:-1;;;3623:9:22;3434:33;:220::i;:::-;3398:17;3416:1;3398:20;;;;;;;;;;;;;3397:257;;;;;;;;;3355:389;;;3724:1;3701:17;3719:1;3701:20;;;;;;;;;;;;;:24;;;;;3355:389;2722:1036;;3820:10;3819:11;:40;;;;3834:17;3852:1;3834:20;;;;;;;;;;;;;;3858:1;3834:25;3819:40;3815:84;;;3879:5;;;3815:84;-1:-1:-1;2346:3:22;;2310:1599;;2553:972:23;2807:24;;2736:34;;2807:24;-1:-1:-1;;;;;2861:25:23;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2861:25:23;;2841:45;;2901:9;2896:623;2920:10;2916:1;:14;2896:623;;;2990:6;-1:-1:-1;;;;;2971:39:23;;846:5;3078:17;3096:1;3078:20;;;;;;;;;;;;;;3100:4;2971:134;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;2971:134:23;;;;;;;;;;;;:::i;:::-;;;2951:558;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3210:7;3218:1;3210:10;;;;;;;;;;;;;;3187:17;3205:1;3187:20;;;;;;;;;;;;;:33;;;;;3296:17;3314:1;3296:20;;;;;;;;;;;;;;3320:1;3296:25;3292:77;;;3345:5;;;3292:77;3122:261;2932:3;;2896:623;;2788:1037:8;2994:34;3044:40;3061:10;3073;3044:16;:40::i;:::-;3115:24;;;-1:-1:-1;;;;;3169:25:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3169:25:8;;3149:45;;3209:9;3204:615;3228:10;3224:1;:14;3204:615;;;3288:6;-1:-1:-1;;;;;3279:29:8;;884:6;3374:10;3386;3398:17;3416:1;3398:20;;;;;;;;;;;;;;3279:140;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3279:140:8;;;;;;;;-1:-1:-1;;3279:140:8;;;;;;;;;;;;:::i;:::-;;;3259:550;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3514:6;3491:17;3509:1;3491:20;;;;;;;;;;;;;:29;;;;;3596:17;3614:1;3596:20;;;;;;;;;;;;;;3620:1;3596:25;3592:77;;;3645:5;;;3592:77;3436:247;3240:3;;3204:615;;1770:1175:10;1996:17;2015;2034:34;2084:40;2101:10;2113;2084:16;:40::i;:::-;2146:47;2164:4;2170:10;2182;2146:17;:47::i;:::-;2134:59;-1:-1:-1;2207:16:10;2203:90;;2239:43;;2203:90;2314:61;;-1:-1:-1;;;2314:61:10;;:4;;:20;;:61;;2335:4;;2341:9;;2352:10;;2364;;2314:61;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;2314:61:10;;;;;;;;;;;;:::i;:::-;2302:9;;;:73;;;2433:24;;2302:73;;-1:-1:-1;2433:24:10;-1:-1:-1;;;;;2487:25:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2487:25:10;;2467:45;;2527:9;2522:417;2546:10;2542:1;:14;2522:417;;;2577:13;2593:4;-1:-1:-1;;;;;2593:31:10;;2642:4;2664:10;2692;2720:17;2738:1;2720:20;;;;;;;;;;;;;;2593:161;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2577:177;;2791:5;2768:17;2786:1;2768:20;;;;;;;;;;;;;:28;;;;;2864:17;2882:1;2864:20;;;;;;;;;;;;;;2888:1;2864:25;2860:69;;;2909:5;;;2860:69;-1:-1:-1;2558:3:10;;2522:417;;;;1770:1175;;;;;;;;;:::o;3797:1026:6:-;4028:13;4043:12;4057:34;4107:40;4124:10;4136;4107:16;:40::i;:::-;4176:60;4195:8;4205:6;4213:10;4225;4176:18;:60::i;:::-;4157:79;-1:-1:-1;4157:79:6;-1:-1:-1;;;;;;4250:18:6;;4246:91;;4284:42;;4246:91;4367:24;;;-1:-1:-1;;;;;4421:25:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4421:25:6;-1:-1:-1;4513:262:6;;;;;;;;;4401:45;;-1:-1:-1;4477:339:6;;4513:262;4571:39;4582:10;4594:4;4600:9;;4571:39;;;;:::i;:::-;;;;;;;;;;;;;4513:262;;;;4655:10;4667:4;4673:8;4644:38;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;4513:262;;;;4722:38;4513:262;;;4789:17;4477:22;:339::i;:::-;4457:359;;3797:1026;;;;;;;;;;:::o;4221:1750:5:-;4437:13;4452:12;4466:34;4516:40;4533:10;4545;4516:16;:40::i;:::-;4587:24;;;-1:-1:-1;;;;;4641:25:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4641:25:5;-1:-1:-1;4784:13:5;;4775:55;;-1:-1:-1;;;4775:55:5;;4621:45;;-1:-1:-1;;;;;;4775:31:5;;;;:55;;4807:10;;4819;;4775:55;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4768:62;-1:-1:-1;4840:17:5;-1:-1:-1;;;;;4937:18:5;;;4933:485;;-1:-1:-1;5018:4:5;;-1:-1:-1;4983:10:5;4933:485;;;5134:13;;5125:55;;-1:-1:-1;;;5125:55:5;;-1:-1:-1;;;;;5125:31:5;;;;;;:55;;5157:10;;5169;;5125:55;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;5118:62;-1:-1:-1;;;;;;5238:27:5;;5234:108;;5285:42;;;;5234:108;-1:-1:-1;5402:5:5;;-1:-1:-1;5367:10:5;4933:485;5478:4;-1:-1:-1;;;;;5472:27:5;;:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;5467:103;;5517:42;;;;5467:103;5600:364;5636:287;;;;;;;;5705:10;5717:4;5723:9;5734:4;:11;;;5694:52;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;5636:287;;;;5791:10;5803:4;5809:9;5820:4;:11;;;5780:52;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;5636:287;;;;5872:36;5636:287;;;5937:17;5600:22;:364::i;:::-;5580:384;;4221:1750;;;;;;;;;;:::o;1754:435:25:-;1889:27;1959:6;:13;-1:-1:-1;;;;;1945:28:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1945:28:25;;1932:41;;1988:9;1983:200;2008:6;:13;2003:1;:18;1983:200;;2071:19;-1:-1:-1;;;;;2058:32:25;:6;2065:1;2058:9;;;;;;;;;;;;;;-1:-1:-1;;;;;2058:32:25;;:114;;2129:43;2155:7;2164;2129:6;2136:1;2129:9;;;;;;;;;;;;;;-1:-1:-1;;;;;2129:25:25;;;:43;;;;;:::i;:::-;2058:114;;;2109:1;2058:114;2042:10;2053:1;2042:13;;;;;;;;;;;;;;;;;:130;2023:3;;1983:200;;1440:887:19;1766:24;;1643:34;;1766:24;-1:-1:-1;;;;;1820:25:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1820:25:19;;1800:45;;1861:9;1856:465;1880:10;1876:1;:14;1856:465;;;1938:4;-1:-1:-1;;;;;1931:27:19;;994:5;2024:10;2036;2048:17;2066:1;2048:20;;;;;;;;;;;;;;1931:138;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1931:138:19;;;;;;;;-1:-1:-1;;1931:138:19;;;;;;;;;;;;:::i;:::-;;;1911:400;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2164:6;2141:17;2159:1;2141:20;;;;;;;;;;;;;:29;;;;;2086:99;1892:3;;1856:465;;7885:1337:10;8100:24;8191:4;:9;;;:16;8211:1;8191:21;8187:60;;;-1:-1:-1;8235:1:10;8228:8;;8187:60;8292:4;:17;;;-1:-1:-1;;;;;8273:61:10;;931:5;8425:4;:9;;;-1:-1:-1;;;;;8411:23:10;:10;-1:-1:-1;;;;;8411:23:10;;:56;;8457:10;8411:56;;;1035:42;8411:56;8503:4;:9;;;-1:-1:-1;;;;;8489:23:10;:10;-1:-1:-1;;;;;8489:23:10;;:56;;8535:10;8489:56;;;1035:42;8489:56;8567:16;8605:1;8635:4;:9;;;8273:389;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;8273:389:10;;;;;;;;-1:-1:-1;;8273:389:10;;;;;;;;;;;;:::i;:::-;;;8257:959;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9204:1;9197:8;;;;;8257:959;8720:26;8749:29;8767:10;8749:17;:29::i;:::-;8720:58;;;;8792:26;8821:29;8839:10;8821:17;:29::i;:::-;8792:58;;;;9043:8;9006:18;9000:2;:24;8963:18;8957:2;:24;8922:16;8899:4;:39;:82;:125;;;;;;:152;;;;;;8864:187;;9065:23;;;;;4189:904:15;4399:15;4416:34;4466:40;4483:10;4495;4466:16;:40::i;:::-;4537:24;;;-1:-1:-1;;;;;4591:25:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4591:25:15;;4571:45;;4647:329;4683:252;;;;;;;;4752:8;4762:10;4741:32;;;;;;;;;:::i;:::-;;;;;;;;;;;;;4683:252;;;;4818:8;4828:10;4807:32;;;;;;;;;:::i;:::-;;;;;;;;;;;;;4683:252;;;;4879:41;4683:252;;;4949:17;4647:22;:329::i;:::-;5018:58;;-1:-1:-1;;;5018:58:15;;4627:349;;-1:-1:-1;;;;;;5018:34:15;;;;;:58;;5053:10;;5065;;5018:58;;;:::i;2543:1848:21:-;2723:23;;:::i;:::-;2760:24;;:::i;:::-;-1:-1:-1;;2862:2:21;2798:18;2930:673;2955:14;:21;2950:1;:26;2930:673;;2997:72;3055:2;3028:14;3043:1;3028:17;;;;;;;;;;;;;;:24;:29;3059:9;2997:14;3012:1;2997:17;;;;;;;:72;3084:15;3101:23;3136:4;-1:-1:-1;;;;;3128:18:21;3147:14;3162:1;3147:17;;;;;;;;;;;;;;3128:37;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3083:82;;;;3183:10;3179:414;;;3213:14;3230:46;3273:2;3253:10;:17;:22;3230:10;:22;;:46;;;;:::i;:::-;3213:63;;3328:1;3319:6;:10;:66;;;;;3362:23;3353:6;:32;3319:66;3294:285;;;3480:25;;;3527:20;;;:33;;;3452:6;-1:-1:-1;3452:6:21;3294:285;3179:414;;-1:-1:-1;;2978:3:21;;2930:673;;;;-1:-1:-1;;3616:23:21;:38;3612:109;;;3670:40;;;3612:109;3735:9;3730:655;3755:13;:20;3750:1;:25;3730:655;;3796:84;3852:2;3826:13;3840:1;3826:16;;;;;;;;;;;;;;:23;:28;3856:23;3796:13;3810:1;3796:16;;;;;;;:84;3895:15;3912:23;3947:4;-1:-1:-1;;;;;3939:18:21;3958:13;3972:1;3958:16;;;;;;;;;;;;;;3939:36;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3894:81;;;;3993:10;3989:386;;;4023:14;4040:46;4083:2;4063:10;:17;:22;4040:10;:22;;:46;;;;:::i;:::-;4023:63;;4138:1;4129:6;:10;:53;;;;;4172:10;4163:6;:19;4129:53;4104:257;;;4264:24;;;4310:19;;;:32;;;4236:6;-1:-1:-1;4236:6:21;4104:257;3989:386;;-1:-1:-1;;3777:3:21;;3730:655;;4670:1193:9;4804:22;4842:24;4902:6;-1:-1:-1;;;;;4886:31:9;;:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4842:78;;4966:1;4952:4;:11;:15;-1:-1:-1;;;;;4938:30:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4938:30:9;;4930:38;;4983:9;4978:879;5002:5;:12;4998:1;:16;4978:879;;;5069:25;5128:7;-1:-1:-1;;;;;5128:16:9;;1507:5;5212:4;5217:1;5212:7;;;;;;;;;;;;;;5221:4;5226:1;5230;5226:5;5221:11;;;;;;;;;;;;;;5128:105;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;5128:105:9;;;;;;;;;;;;:::i;:::-;;;5108:739;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;5816:16:9;;;5830:1;5816:16;;;;;;;;;-1:-1:-1;5809:23:9;;-1:-1:-1;;;5809:23:9;5108:739;5316:17;5382:1;5363:8;:15;:20;;5355:63;;;;-1:-1:-1;;;5355:63:9;;;;;;;:::i;:::-;;;;;;;;;5441:9;5436:319;5460:8;:15;5456:1;:19;5436:319;;;5504:19;5540:8;5549:1;5540:11;;;;;;;;;;;;;;-1:-1:-1;;;;;5526:38:9;;:40;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;5504:62;;5606:9;5592:11;:23;5588:149;;;5655:11;5643:23;;5703:8;5712:1;5703:11;;;;;;;;;;;;;;5692:5;5698:1;5692:8;;;;;;;;;;;;;:22;-1:-1:-1;;;;;5692:22:9;;;-1:-1:-1;;;;;5692:22:9;;;;;5588:149;-1:-1:-1;5477:3:9;;5436:319;;;;5250:519;;-1:-1:-1;5016:3:9;;4978:879;;;;4670:1193;;;;;;:::o;3719:1265:3:-;3934:21;3957;4010:4;:13;;;-1:-1:-1;;;;;4010:24:3;;4035:4;:13;;;-1:-1:-1;;;;;4035:28:3;;:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4010:56;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3994:72;;4080:4;:10;;;:17;4101:1;4080:22;4076:81;;;4118:28;;4076:81;4166:23;4274:9;4269:709;4293:4;:10;;;:17;4289:1;:21;4269:709;;;4358:1;4335:4;:10;;;4346:1;4335:13;;;;;;;;;;;;;;:20;:24;4331:71;;;4379:8;;4331:71;4451:13;-1:-1:-1;;;;;4436:61:3;;857:5;4570:4;:10;;;4581:1;4570:13;;;;;;;;;;;;;;4585:17;4628:1;4603:17;:24;:26;4585:45;;;;;;;;;;;;;;4436:195;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4436:195:3;;;;;;;;-1:-1:-1;;4436:195:3;;;;;;;;;;;;:::i;:::-;;;4416:552;;4945:8;;4416:552;4716:15;4707:6;:24;4703:137;;;4773:6;4755:24;;4808:4;:10;;;4819:1;4808:13;;;;;;;;;;;;;;4801:20;;4703:137;4648:206;4416:552;4312:3;;4269:709;;;;3719:1265;;;;;;;;;:::o;1509:191:18:-;1641:10;-1:-1:-1;;;;;1627:24:18;:10;-1:-1:-1;;;;;1627:24:18;;;1619:74;;;;-1:-1:-1;;;1619:74:18;;;;;;;:::i;:::-;1509:191;;:::o;6355:377:2:-;6429:38;;:::i;:::-;-1:-1:-1;6502:223:2;;;;;;;;6568:4;6502:223;;;-1:-1:-1;6502:223:2;;;;;;;;;;;;;;;;;6355:377;:::o;5822:527::-;6059:39;;;6096:1;6059:39;;;;;;;;;5944;;;;6059;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;5995:103;;6123:192;;;;;;;;6176:8;:15;;;6123:192;;;;6219:1;6123:192;;;;6249:1;6123:192;;;;6272:6;6123:192;;;;;;;;;;;;;;;;;;;6108:9;6118:1;6108:12;;;;;;;;;;;;;;;;;:207;6333:9;5822:527;-1:-1:-1;;;5822:527:2:o;8086:303:22:-;8301:70;;-1:-1:-1;;;8301:70:22;;8199:31;;-1:-1:-1;;;;;8301:56:22;;;;;:70;;8358:12;;8301:70;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;7070:721::-;7267:20;;-1:-1:-1;;;;;7324:36:22;;7320:100;;7376:33;;7320:100;7429:23;7501:22;-1:-1:-1;;;;;7501:33:22;1144:5;7618:16;7656:11;7574:111;;;;;;;;:::i;:::-;;;;-1:-1:-1;;7574:111:22;;;;;;;;;;;;;;-1:-1:-1;;;;;7574:111:22;-1:-1:-1;;;;;;7574:111:22;;;;;;;;;;7501:185;;;;7574:111;7501:185;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;7462:224:22;;-1:-1:-1;7462:224:22;-1:-1:-1;7696:89:22;;;;7752:10;7741:33;;;;;;;;;;;;:::i;:::-;7726:48;;7696:89;7070:721;;;;;;;:::o;5400:2077:14:-;5585:7;5609:22;5635:24;5661:22;5687:3;-1:-1:-1;;;;;5687:8:14;;5696:7;:21;;;5687:31;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;5608:110;;;;;;;;5728:24;5763:3;5728:39;;5796:7;:23;;;-1:-1:-1;;;;;5782:37:14;:10;-1:-1:-1;;;;;5782:37:14;;5778:1674;;;5993:29;6025:30;:16;6050:4;6025:24;:30::i;:::-;5993:62;-1:-1:-1;6070:25:14;6098:58;3269:8;6098:45;:14;5993:62;6098:22;:45::i;:::-;:53;;:58::i;:::-;6070:86;;6234:16;6213:17;:37;6209:84;;6277:1;6270:8;;;;;;;;;;6209:84;6307:16;6326:53;3138:8;6326:40;6356:3;-1:-1:-1;;;;;6356:7:14;;:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;6326:21;;:29;:40::i;:::-;:48;;:53::i;:::-;6307:72;-1:-1:-1;6393:29:14;6425:39;:21;6307:72;6425:29;:39::i;:::-;6393:71;-1:-1:-1;6479:28:14;;-1:-1:-1;;;;;;;;6479:28:14;5778:1674;6542:7;:23;;;-1:-1:-1;;;;;6528:37:14;:10;-1:-1:-1;;;;;6528:37:14;;6524:928;;;6777:16;6811:38;;;6807:85;;;6876:1;6869:8;;;;;;;;;6807:85;6905:25;6933:58;3269:8;6933:45;:14;6956:21;6933:22;:45::i;:58::-;6905:86;;7091:14;7070:17;:35;7066:82;;7132:1;7125:8;;;;;;;;;;7066:82;7162:23;7188;7200:3;-1:-1:-1;;;;;7200:8:14;;:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3138:8;;7188:11;:23::i;:::-;7162:49;-1:-1:-1;7265:43:14;7312:72;7162:49;7312:47;:21;7342:16;7312:29;:47::i;6524:928::-;7469:1;7462:8;;;;;;5400:2077;;;;;;;;;:::o;4809:919:20:-;5012:17;5046:20;5068:30;;:::i;:::-;5125:14;5114:49;;;;;;;;;;;;:::i;:::-;5045:118;;;;5174:20;5221:14;5210:36;;;;;;;;;;;;:::i;:::-;5173:73;-1:-1:-1;5257:12:20;5271:23;5318:4;-1:-1:-1;;;5429:11:20;5458:13;5173:73;5520:31;5540:10;5520:19;:31::i;:::-;5335:230;;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;5335:230:20;;;;;;;;;;;;;;-1:-1:-1;;;;;5335:230:20;-1:-1:-1;;;;;;5335:230:20;;;;;;;;;;5310:256;;;;5335:230;5310:256;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5256:310;;;;5581:7;5576:47;;5611:1;5604:8;;;;;;;;;5576:47;5694:10;5683:35;;;;;;;;;;;;:::i;:::-;5719:1;5683:38;;;;;;;;;;;;;;5676:45;;;;;;;4809:919;;;;;:::o;1691:2958:0:-;1865:34;1949:17;:24;-1:-1:-1;;;;;1935:39:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1935:39:0;;1915:59;;1988:17;:24;2016:1;1988:29;1984:84;;;2033:24;;1984:84;2078:18;2099:135;2138:4;:19;;;2171:4;:19;;;2204:17;2222:1;2204:20;;;;;;;;;;;;;;2099:4;:25;;;:135;;:::i;:::-;2078:156;-1:-1:-1;2248:15:0;2244:70;;2279:24;;;2244:70;2324:17;2344:125;2383:4;:19;;;2416:4;:19;;;2449:10;2344:4;:25;;;:125;;:::i;:::-;2324:145;-1:-1:-1;2483:14:0;2479:69;;2513:24;;;;2479:69;2563:9;2558:2085;2582:17;:24;2578:1;:28;2558:2085;;;2632:12;2627:1604;1683:1;2650:4;:37;2627:1604;;;2823:148;2870:17;2888:1;2870:20;;;;;;;;;;;;;;2912:9;2943:10;2823:25;:148::i;:::-;2810:161;-1:-1:-1;2993:15:0;2989:67;;3032:5;;2989:67;3086:202;3134:59;1378:3;3260:10;3086:25;:202::i;:::-;3073:215;-1:-1:-1;3310:15:0;3306:67;;3349:5;;3306:67;3390:18;3411:157;3458:4;:19;;;3499:4;:19;;;3540:10;3411:4;:25;;;:157;;:::i;:::-;3390:178;-1:-1:-1;3590:15:0;3586:67;;3629:5;;;3586:67;3786:10;3774:22;;3888:17;3906:1;3888:20;;;;;;;;;;;;;;3875:9;:33;3871:346;;3932:11;4056:17;4074:1;4056:20;;;;;;;;;;;;;;1378:3;3983:17;4001:1;3983:20;;;;;;;;;;;;;;3971:9;:32;3970:59;:106;;;;;;3932:144;;1536:8;4102:3;:41;4098:101;;4171:5;;;;4098:101;3871:346;;-1:-1:-1;2689:6:0;;2627:1604;;;;4500:132;4543:17;4561:1;4543:20;;;;;;;;;;;;;;4581:9;4608:10;4500:25;:132::i;:::-;4477:17;4495:1;4477:20;;;;;;;;;;;;;;;;;:155;2608:3;;2558:2085;;;;1691:2958;;;;;;:::o;5977:1450:5:-;6183:7;6207:18;6227:12;6241:17;6260:14;6302;6278:98;;;;;;;;;;;;:::i;:::-;6206:170;;;;;;;;6497:9;-1:-1:-1;;;;;6483:23:5;:10;-1:-1:-1;;;;;6483:23:5;;6479:942;;;6611:104;;-1:-1:-1;;;6611:104:5;;-1:-1:-1;;;;;6611:30:5;;;;;1291:5;;6611:104;;6704:10;;6611:104;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;6611:104:5;;;;;;;;-1:-1:-1;;6611:104:5;;;;;;;;;;;;:::i;:::-;;;6591:353;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6928:1;6921:8;;;;;;;;;6591:353;6794:6;-1:-1:-1;6787:13:5;;-1:-1:-1;;;;6787:13:5;6479:942;7063:119;;-1:-1:-1;;;7063:119:5;;-1:-1:-1;;;;;7063:39:5;;;;;1291:5;;7063:119;;7165:4;;7171:10;;7063:119;;;:::i;5958:2724:24:-;6144:35;6249:1;6235:10;6216:9;:16;:29;:34;;6195:117;;;;-1:-1:-1;;;6195:117:24;;;;;;;:::i;:::-;6322:30;;:::i;:::-;-1:-1:-1;6322:203:24;;;;;;;;;6449:8;6322:203;;6479:7;6322:203;;;;6508:6;6322:203;;;;6584:42;;6605:20;6584:42;;;;;;;;;6322:203;;;;6584:42;;;;;;;;;;;;;-1:-1:-1;6584:42:24;6535:91;;6636:21;6685:25;6713:9;6723:10;6713:21;;;;;;;;;;;;;;6685:49;;6748:26;6777:9;6787:10;6800:1;6787:14;6777:25;;;;;;;;;;;;;;6748:54;;6821:9;6816:296;6840:20;6836:1;:24;6816:296;;;6885:19;6923:7;-1:-1:-1;;;;;6923:15:24;;6939:10;6951:11;6964:13;6978:1;6964:16;;;;;;;;;;;6923:58;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;6885:96;;7003:18;7016:4;7003:12;:18::i;:::-;6999:99;;;7075:4;7045:10;7056:15;;;;;;7045:27;;;;;;;;;;;;;:34;-1:-1:-1;;;;;7045:34:24;;;-1:-1:-1;;;;;7045:34:24;;;;;6999:99;-1:-1:-1;6862:3:24;;6816:296;;;-1:-1:-1;;;7135:18:24;7131:109;;7213:16;;;;;7131:109;7271:9;:16;7253:10;7266:1;7253:14;:34;7249:349;;;7366:13;-1:-1:-1;;;;;7343:37:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7331:49;;7399:9;7394:164;7418:13;7414:1;:17;7394:164;;;7471:23;;;7492:1;7471:23;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;7471:23:24;7456:9;7466:1;7456:12;;;;;;;;;;;;;:38;;;;7530:10;7541:1;7530:13;;;;;;;;;;;;;;7512:9;7522:1;7512:12;;;;;;;;;;;;;;7525:1;7512:15;;;;;;;;-1:-1:-1;;;;;7512:31:24;;;:15;;;;;;;;;;;:31;7433:3;;7394:164;;;;7571:16;;;;;7249:349;7649:45;7709:54;7728:7;7737:9;7748:10;7761:1;7748:14;7709:18;:54::i;:::-;7649:114;;7777:19;:26;7807:1;7777:31;7773:122;;;7868:16;;;;;;7773:122;8022:19;:26;8006:13;:42;-1:-1:-1;;;;;7970:88:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7958:100;;8073:9;8068:582;8092:13;8088:1;:17;8068:582;;;8131:9;8126:514;8150:19;:26;8146:1;:30;8126:514;;;8217:26;;8213:30;;;:34;;;8217:19;;8246:1;;8381:22;;;;;;;;;;;;:29;8377:1;:33;-1:-1:-1;;;;;8356:55:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;8356:55:24;;8321:9;8331:1;8321:12;;;;;;;;;;;;;:90;;;;8447:10;8458:1;8447:13;;;;;;;;;;;;;;8429:9;8439:1;8429:12;;;;;;;;;;;;;;8442:1;8429:15;;;;;;;;;;;;;:31;-1:-1:-1;;;;;8429:31:24;;;-1:-1:-1;;;;;8429:31:24;;;;;8483:9;8478:148;8502:19;8522:1;8502:22;;;;;;;;;;;;;;:29;8498:1;:33;8478:148;;;8582:19;8602:1;8582:22;;;;;;;;;;;;;;8605:1;8582:25;;;;;;;;;;;;;;8560:9;8570:1;8560:12;;;;;;;;;;;;;;8577:1;8573;:5;8560:19;;;;;;;;-1:-1:-1;;;;;8560:47:24;;;:19;;;;;;;;;;;:47;8533:3;;8478:148;;;-1:-1:-1;;8178:3:24;;8126:514;;;-1:-1:-1;8107:3:24;;8068:582;;;;8659:16;;;;5958:2724;;;;;:::o;9982:1082::-;10143:24;10224:1;10204:9;:16;:21;;:64;;;;;10249:8;:15;10267:1;10249:19;10229:9;:16;:39;10204:64;10183:148;;;;-1:-1:-1;;;10183:148:24;;;;;;;:::i;:::-;10520:8;:15;10538:1;10520:19;10496:9;:16;10515:2;10496:21;:43;-1:-1:-1;;;;;10486:54:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;10486:54:24;-1:-1:-1;10472:68:24;-1:-1:-1;10602:2:24;10585:20;;10550:9;10616:442;10640:9;:16;10636:1;:20;10616:442;;;10681:5;;10677:211;;10706:14;10723:8;10736:1;10732;:5;10723:15;;;;;;;;;;;;;;-1:-1:-1;;;;;10723:19:24;;:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;10807:3;10803:17;10793:28;;-1:-1:-1;10854:1:24;10847:9;;;;10771:103;10901:20;10924:9;10934:1;10924:12;;;;;;;;;;;;;;;;;;10991:2;10987:14;10977:25;;-1:-1:-1;11031:2:24;11024:10;;;;10658:3;;10616:442;;6710:337:1;6793:9;6828:5;;;6847:6;;;;;:21;;;6867:1;6862;6857:2;:6;;;;;;:11;;6847:21;6843:60;;;6891:1;6884:8;;;;;6843:60;6928:8;6922:15;;6951:7;;;6947:46;;;6981:1;6974:8;;;;;;6947:46;1010:8;7012:9;;;;-1:-1:-1;;;;6710:337:1:o;8688:329:24:-;8783:32;8863:9;:16;-1:-1:-1;;;;;8842:38:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;8842:38:24;;8831:49;;8895:9;8890:121;8914:9;:16;8910:1;:20;8890:121;;;8965:9;8998:1;8994;8975:9;:16;:20;:24;8965:35;;;;;;;;;;;;;;8951:8;8960:1;8951:11;;;;;;;;-1:-1:-1;;;;;8951:49:24;;;:11;;;;;;;;;;;:49;8932:3;;8890:121;;9023:323;9116:32;9196:8;:15;-1:-1:-1;;;;;9175:37:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;9175:37:24;;9164:48;;9227:9;9222:118;9246:8;:15;9242:1;:19;9222:118;;;9296:8;9327:1;9323;9305:8;:15;:19;:23;9296:33;;;;;;;;;;;;;;9282:8;9291:1;9282:11;;;;;;;;-1:-1:-1;;;;;9282:47:24;;;:11;;;;;;;;;;;:47;9263:3;;9222:118;;3340:740:19;3541:17;3575:18;3595:12;3622:14;3611:46;;;;;;;;;;;;:::i;:::-;3574:83;;;;3668:18;3701:14;3690:37;;;;;;;;;;;;:::i;:::-;3667:60;-1:-1:-1;3754:4:19;:25;3797:4;3803:10;3667:60;3827:31;3847:10;3827:19;:31::i;:::-;3754:105;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;3754:105:19;;;;;;;;;;;;:::i;:::-;;;3738:336;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4062:1;4055:8;;;;;;;;3738:336;3936:7;3944:1;3936:10;;;;;;;;;;;;;;3929:17;;;;;;;;3834:545:43;3997:21;4237:104;4329:11;4237:70;4284:22;4329:11;4304:1;4284:19;:22::i;:::-;4237:25;:9;4255:6;4237:17;:25::i;:::-;:46;;:70::i;3834:391:41:-;3927:19;3978:2;3962:18;;3991:15;4008:23;4043:5;-1:-1:-1;;;;;4035:25:41;4061:18;;;;;;;;;;;;;-1:-1:-1;;;4061:18:41;;;4035:45;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3990:90;;;;4094:10;:37;;;;;4129:2;4108:10;:17;:23;;4094:37;4090:129;;;4169:38;4193:10;4205:1;4169:23;:38::i;:::-;4147:61;;4090:129;3834:391;;;;;:::o;7483:2082:14:-;7667:7;7691:22;7717:24;7743:22;7769:3;-1:-1:-1;;;;;7769:8:14;;7778:7;:21;;;7769:31;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;7690:110;;;;;;;;7829:7;:23;;;-1:-1:-1;;;;;7815:37:14;:10;-1:-1:-1;;;;;7815:37:14;;7811:1729;;;7966:29;7998:16;7966:48;;8028:23;8054:22;8066:3;-1:-1:-1;;;;;8066:7:14;;:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3138:8;;8054:11;:22::i;:::-;8028:48;-1:-1:-1;8129:29:14;8161:59;8028:48;8161:34;:21;3138:8;8161:29;:34::i;:59::-;8129:91;-1:-1:-1;8234:25:14;8262:58;3269:8;8262:45;:14;8129:91;8262:22;:45::i;:58::-;8234:86;;8398:16;8377:17;:37;8373:84;;8441:1;8434:8;;;;;;;;;;;8373:84;8471:43;8517:48;8563:1;8518:35;:21;8548:4;8518:29;:35::i;7811:1729::-;8725:7;:23;;;-1:-1:-1;;;;;8711:37:14;:10;-1:-1:-1;;;;;8711:37:14;;8707:833;;;8862:29;8894:30;:16;8919:4;8894:24;:30::i;:::-;8862:62;;8938:26;8967:23;8979:3;-1:-1:-1;;;;;8979:8:14;;:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8967:23;8938:52;-1:-1:-1;9044:29:14;9077:62;3138:8;9077:49;:21;8938:52;9077:29;:49::i;:62::-;9044:95;;9181:14;9157:21;:38;9153:85;;;9222:1;9215:8;;;;;;;;;;9153:85;9251:25;9279:58;3269:8;9279:45;:14;9302:21;9279:22;:45::i;:58::-;9251:86;;9429:14;9408:17;:35;9404:82;;9470:1;9463:8;;;;;;;;;;;9404:82;-1:-1:-1;9508:21:14;-1:-1:-1;9501:28:14;;-1:-1:-1;;;;;9501:28:14;8707:833;-1:-1:-1;9557:1:14;;7483:2082;-1:-1:-1;;;;;;;;;7483:2082:14:o;16578:187:42:-;16720:38;16733:1;16736:5;16751;16720:12;:38::i;:::-;16578:187;;;:::o;16122:220::-;16243:14;16290:21;16302:1;16305:5;16290:11;:21::i;4943:907:4:-;5144:17;5178:20;5200:26;;:::i;:::-;5253:14;5242:47;;;;;;;;;;;;:::i;:::-;5177:112;;;;5300:20;5347:14;5336:36;;;;;;;;;;;;:::i;:::-;5299:73;-1:-1:-1;5383:12:4;5397:23;5444:4;-1:-1:-1;;;5553:9:4;5580:13;5299:73;5642:31;5662:10;5642:19;:31::i;9228:916:10:-;9402:17;9490:27;9538:4;:16;;;9490:65;;9566:27;9600:9;-1:-1:-1;;;;;9600:28:10;;9656:4;:9;;;-1:-1:-1;;;;;9642:23:10;:10;-1:-1:-1;;;;;9642:23:10;;:56;;9688:10;9642:56;;;1035:42;9642:56;9726:4;:9;;;-1:-1:-1;;;;;9712:23:10;:10;-1:-1:-1;;;;;9712:23:10;;:56;;9758:10;9712:56;;;1035:42;9712:56;9800:12;;;9810:1;9800:12;;;;;;;;;-1:-1:-1;;;;;;9600:236:10;;;;;;;;;;;;9782:4;;9600:236;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;9600:236:10;;;;;;;;;;;;:::i;:::-;9565:271;;;;9873:10;:17;9851:4;:18;;;:39;9847:80;;-1:-1:-1;9913:3:10;;-1:-1:-1;9906:10:10;;-1:-1:-1;9906:10:10;9847:80;9949:10;9960:4;:18;;;9949:30;;;;;;;;;;;;;;9937:42;;10062:3;10049:9;:16;;10041:25;;10070:4;10041:33;10037:74;;;-1:-1:-1;10097:3:10;;-1:-1:-1;10090:10:10;;-1:-1:-1;10090:10:10;7110:769;7311:7;7335:18;7355:28;;:::i;:::-;7410:14;7399:55;;;;;;;;;;;;:::i;:::-;7334:120;;;;7465:18;7512:14;7501:55;;;;;;;;;;;;:::i;:::-;-1:-1:-1;7582:90:10;;-1:-1:-1;;;7582:90:10;;7464:92;;-1:-1:-1;7582:4:10;;:31;;:90;;7631:4;;7464:92;;7649:10;;7661;;7582:90;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;7582:90:10;;;;;;;;-1:-1:-1;;7582:90:10;;;;;;;;;;;;:::i;:::-;;;7566:307;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7739:6;-1:-1:-1;7732:13:10;;-1:-1:-1;;;7732:13:10;6047:836:6;6234:15;6251:13;6373:25;6417:8;-1:-1:-1;;;;;6401:37:6;;6439:10;6451;6401:61;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;6401:61:6;;;;;;;;;;;;:::i;:::-;6373:89;;6483:4;6472:15;;6501:8;:15;6520:1;6501:20;6497:251;;;6646:61;;-1:-1:-1;;;6646:61:6;;-1:-1:-1;;;;;6646:37:6;;;;;:61;;6684:10;;6696;;6646:61;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;6646:61:6;;;;;;;;;;;;:::i;:::-;6635:72;;6732:5;6721:16;;6497:251;6772:8;:15;6762:6;:25;6758:82;;6819:1;6823:5;6803:26;;;;;;;6758:82;6860:8;6869:6;6860:16;;;;;;;;;;;;;;6850:26;;6047:836;;;;;;;;:::o;4829:1212::-;5037:7;5061:18;5081:12;5095:13;5136:14;5112:86;;;;;;;;;;;;:::i;:::-;5060:138;;;;;;5372:8;5368:667;;;5416:122;;-1:-1:-1;;;5416:122:6;;-1:-1:-1;;;;;5416:31:6;;;;;1408:5;;5416:122;;5523:1;;5527:10;;5416:122;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5416:122:6;;;;;;;;-1:-1:-1;;5416:122:6;;;;;;;;;;;;:::i;:::-;;;5396:299;;5679:1;5672:8;;;;;;;5396:299;-1:-1:-1;5626:6:6;-1:-1:-1;5619:13:6;;-1:-1:-1;;;5619:13:6;5368:667;5745:123;;-1:-1:-1;;;5745:123:6;;-1:-1:-1;;;;;5745:32:6;;;;;1408:5;;5745:123;;5853:1;;5857:10;;5745:123;;;:::i;3493:771:13:-;3696:17;3730:18;3750:14;3791;3780:46;;;;;;;;;;;;:::i;:::-;3729:97;;;;3837:18;3882:14;3871:37;;;;;;;;;;;;:::i;:::-;3836:72;-1:-1:-1;3934:4:13;:27;3979:6;3987:10;3836:72;4011:31;4031:10;4011:19;:31::i;5349:467:41:-;5458:15;5490;5507:23;5542:5;-1:-1:-1;;;;;5534:25:41;5613:24;;;5655:5;5573:101;;;;;;;;:::i;:::-;;;;-1:-1:-1;;5573:101:41;;;;;;;;;;;;;;-1:-1:-1;;;;;5573:101:41;-1:-1:-1;;;;;;5573:101:41;;;;;;;;;;5534:150;;;;5573:101;5534:150;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5489:195;;;;5698:10;:37;;;;;5733:2;5712:10;:17;:23;;5698:37;5694:116;;;5761:38;5785:10;5797:1;5761:23;:38::i;3861:849:12:-;4074:17;4108:18;4128:23;4178:14;4167:46;;;;;;;;;;;;:::i;:::-;4107:106;;;;4224:18;4269:14;4258:37;;;;;;;;;;;;:::i;:::-;4223:72;-1:-1:-1;4321:4:12;:37;1065:5;4416:15;4433:10;4223:72;4457:31;4477:10;4457:19;:31::i;:::-;4321:168;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;4321:168:12;;;;;;;;;;;;:::i;4571:515:41:-;4697:18;4732:15;4749:23;4784:5;-1:-1:-1;;;;;4776:25:41;4855:24;;;4897:5;4920:7;4815:126;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;4815:126:41;;;;;;;;;;;;;;-1:-1:-1;;;;;4815:126:41;-1:-1:-1;;;;;;4815:126:41;;;;;;;;;;4776:175;;;;4815:126;4776:175;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4731:220;;;;4965:10;:37;;;;;5000:2;4979:10;:17;:23;;4965:37;4961:119;;;5031:38;5055:10;5067:1;5031:23;:38::i;937:217:18:-;1049:14;1086:61;1133:12;1086:31;:61::i;5099:620:15:-;5304:17;5338:16;5356:27;5398:14;5387:46;;;;;;;;;;;;:::i;:::-;5337:96;;;;5444:17;5463:27;5505:14;5494:46;;;;;;;;;;;;:::i;:::-;5443:97;;;;5557:155;5604:8;5626:19;5659;5692:10;5557:33;:155::i;:::-;5550:162;5099:620;-1:-1:-1;;;;;;;;5099:620:15:o;764:457:44:-;850:7;877:6;873:45;;-1:-1:-1;906:1:44;899:8;;873:45;939:5;;;943:1;939;:5;:1;958:5;;;;;:10;954:243;;984:202;1009:176;1069:64;1151:1;1170;1009:42;:176::i;:::-;984:24;:202::i;2004:392::-;2090:7;2125:5;;;2144;;;2140:232;;;2165:196;2190:170;2250:58;2326:1;2345;2190:42;:170::i;1227:392::-;1313:7;1340:6;1336:232;;1362:195;1387:169;1447:57;1522:1;1541;1387:42;:169::i;1362:195::-;1577:9;1593:1;1589;:5;;;;;;;1227:392;-1:-1:-1;;;;1227:392:44:o;1625:373::-;1711:7;1742:1;1738;:5;1734:236;;;1759:200;1784:174;1844:62;1924:1;1943;1784:42;:174::i;1759:200::-;-1:-1:-1;1986:5:44;;;1625:373::o;1160:172:18:-;1289:16;;;1303:1;1289:16;;;;;;;;;1247:20;;1289:16;;;;;;;;;;;-1:-1:-1;1289:16:18;1283:22;;1324:1;1315:3;1319:1;1315:6;;;;;;;;;;;;;:10;;;;;1160:172;;;:::o;4655:416:0:-;4823:21;4864:14;;;:29;;-1:-1:-1;4882:11:0;;4864:29;:49;;;-1:-1:-1;4897:16:0;;4864:49;4860:63;;;-1:-1:-1;4922:1:0;4915:8;;4860:63;4945:18;;;4957:6;4945:9;:18;:9;4977:13;;;;;:23;4973:37;;5009:1;5002:8;;;;;4973:37;5053:11;5047:1;5033:11;:15;5028:1;:21;5027:37;;;;;;;4655:416;-1:-1:-1;;;;;4655:416:0:o;9352:624:24:-;9441:12;9594:17;;9642:13;9638:64;;9682:5;9675:12;;;;;9638:64;9352:624;9772:4;-1:-1:-1;;;;;9772:11:24;;:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;9772:23:24;;9804:4;9772:38;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;9768:86;;-1:-1:-1;9838:5:24;9831:12;;9768:86;9867:4;-1:-1:-1;;;;;9867:11:24;;:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;9867:23:24;;9899:4;9867:38;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;9863:86;;-1:-1:-1;9933:5:24;9926:12;;9863:86;-1:-1:-1;9965:4:24;9352:624;;;:::o;15225:654:42:-;15382:5;15390:2;15382:10;15371:1;:8;:21;15367:306;;;15408:254;15433:228;15498:95;15611:1;:8;15637:5;15645:2;15637:10;15433:47;:228::i;15408:254::-;15842:13;;15753:2;15842:13;15835:28;15821:52::o;14301:688::-;14422:14;14467:5;14475:2;14467:10;14456:1;:8;:21;14452:306;;;14493:254;14518:228;14583:95;14696:1;:8;14722:5;14730:2;14722:10;14518:47;:228::i;14493:254::-;-1:-1:-1;14936:13:42;14838:2;14936:13;14930:20;;14301:688::o;1401:322:48:-;1554:12;818:10;1625:28;;1667:9;1690:1;1705;1589:127;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;1589:127:48;;;;;;;;;;;;;;-1:-1:-1;;;;;1589:127:48;-1:-1:-1;;;;;;1589:127:48;;;;;;;;;;;-1:-1:-1;1401:322:48;;;;;:::o;1531:170:47:-;1674:9;1668:16;1661:4;1650:9;1646:20;1639:46;1334:378:45;1522:12;1274:10;1593:37;;1644:9;1667:6;1687:8;1557:148;;;;;;;;;;:::i;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;5:130::-;72:20;;97:33;72:20;97:33;:::i;458:707::-;;575:3;568:4;560:6;556:17;552:27;542:2;;-1:-1;;583:12;542:2;630:6;617:20;652:80;667:64;724:6;667:64;:::i;:::-;652:80;:::i;:::-;760:21;;;643:89;-1:-1;804:4;817:14;;;;792:17;;;906;;;897:27;;;;894:36;-1:-1;891:2;;;943:1;;933:12;891:2;968:1;953:206;978:6;975:1;972:13;953:206;;;85:6;72:20;97:33;124:5;97:33;:::i;:::-;1046:50;;1110:14;;;;1138;;;;1000:1;993:9;953:206;;;957:14;;;;;535:630;;;;:::o;1941:753::-;;2083:3;2076:4;2068:6;2064:17;2060:27;2050:2;;-1:-1;;2091:12;2050:2;2138:6;2125:20;2160:105;2175:89;2257:6;2175:89;:::i;2160:105::-;2293:21;;;2151:114;-1:-1;2337:4;2350:14;;;;2325:17;;;2445:1;2430:258;2455:6;2452:1;2449:13;2430:258;;;2562:62;2620:3;2337:4;2538:3;2525:17;2329:6;2513:30;;2562:62;:::i;:::-;2550:75;;2639:14;;;;2667;;;;2477:1;2470:9;2430:258;;3853:705;;3979:3;3972:4;3964:6;3960:17;3956:27;3946:2;;-1:-1;;3987:12;3946:2;4034:6;4021:20;4056:89;4071:73;4137:6;4071:73;:::i;4056:89::-;4173:21;;;4047:98;-1:-1;4217:4;4230:14;;;;4205:17;;;4325:1;4310:242;4335:6;4332:1;4329:13;4310:242;;;4442:46;4484:3;4217:4;4418:3;4405:17;4209:6;4393:30;;4442:46;:::i;:::-;4430:59;;4503:14;;;;4531;;;;4357:1;4350:9;4310:242;;4600:779;;4741:3;4734:4;4726:6;4722:17;4718:27;4708:2;;-1:-1;;4749:12;4708:2;4796:6;4783:20;4818:104;4833:88;4914:6;4833:88;:::i;4818:104::-;4950:21;;;4809:113;-1:-1;4994:4;5007:14;;;;4982:17;;;5096;;;5087:27;;;;5084:36;-1:-1;5081:2;;;5133:1;;5123:12;5081:2;5158:1;5143:230;5168:6;5165:1;5162:13;5143:230;;;11162:6;11149:20;11174:57;11225:5;11174:57;:::i;:::-;5236:74;;5324:14;;;;5352;;;;5190:1;5183:9;5143:230;;7009:788;;7153:3;7146:4;7138:6;7134:17;7130:27;7120:2;;-1:-1;;7161:12;7120:2;7208:6;7195:20;7230:107;7245:91;7329:6;7245:91;:::i;7230:107::-;7365:21;;;7221:116;-1:-1;7409:4;7422:14;;;;7397:17;;;7523:4;7511:17;;;7502:27;;;;7499:36;-1:-1;7496:2;;;7548:1;;7538:12;7496:2;7573:1;7558:233;7583:6;7580:1;7577:13;7558:233;;;7663:64;7723:3;7711:10;7663:64;:::i;:::-;7651:77;;7742:14;;;;7770;;;;7605:1;7598:9;7558:233;;;7562:14;;;;;;7113:684;;;;:::o;7823:707::-;;7940:3;7933:4;7925:6;7921:17;7917:27;7907:2;;-1:-1;;7948:12;7907:2;7995:6;7982:20;8017:80;8032:64;8089:6;8032:64;:::i;8017:80::-;8125:21;;;8008:89;-1:-1;8169:4;8182:14;;;;8157:17;;;8271;;;8262:27;;;;8259:36;-1:-1;8256:2;;;8308:1;;8298:12;8256:2;8333:1;8318:206;8343:6;8340:1;8337:13;8318:206;;;25314:20;;8411:50;;8475:14;;;;8503;;;;8365:1;8358:9;8318:206;;8556:722;;8684:3;8677:4;8669:6;8665:17;8661:27;8651:2;;-1:-1;;8692:12;8651:2;8732:6;8726:13;8754:80;8769:64;8826:6;8769:64;:::i;8754:80::-;8862:21;;;8745:89;-1:-1;8906:4;8919:14;;;;8894:17;;;9008;;;8999:27;;;;8996:36;-1:-1;8993:2;;;9045:1;;9035:12;8993:2;9070:1;9055:217;9080:6;9077:1;9074:13;9055:217;;;25462:13;;9148:61;;9223:14;;;;9251;;;;9102:1;9095:9;9055:217;;9974:440;;10075:3;10068:4;10060:6;10056:17;10052:27;10042:2;;-1:-1;;10083:12;10042:2;10130:6;10117:20;10152:64;10167:48;10208:6;10167:48;:::i;10152:64::-;10143:73;;10236:6;10229:5;10222:21;10340:3;10272:4;10331:6;10264;10322:16;;10319:25;10316:2;;;10357:1;;10347:12;10316:2;121741:6;10272:4;10264:6;10260:17;10272:4;10298:5;10294:16;121718:30;121797:1;121779:16;;;10272:4;121779:16;121772:27;10298:5;10035:379;-1:-1;;10035:379::o;10423:442::-;;10535:3;10528:4;10520:6;10516:17;10512:27;10502:2;;-1:-1;;10543:12;10502:2;10583:6;10577:13;10605:64;10620:48;10661:6;10620:48;:::i;10605:64::-;10596:73;;10689:6;10682:5;10675:21;10793:3;10725:4;10784:6;10717;10775:16;;10772:25;10769:2;;;10810:1;;10800:12;10769:2;10820:39;10852:6;10725:4;10751:5;10747:16;10725:4;10717:6;10713:17;10820:39;:::i;12345:174::-;12443:13;;124644:1;124634:12;;124624:2;;124660:1;;124650:12;14379:659;;14495:4;14483:9;14478:3;14474:19;14470:30;14467:2;;;-1:-1;;14503:12;14467:2;14531:20;14495:4;14531:20;:::i;:::-;14522:29;;85:6;72:20;97:33;124:5;97:33;:::i;:::-;14615:75;;14772:2;14825:22;;9765:20;9790:32;9765:20;9790:32;:::i;:::-;14772:2;14787:16;;14780:74;14935:2;14988:22;;9765:20;9790:32;9765:20;9790:32;:::i;:::-;14935:2;14950:16;;14943:74;14954:5;14461:577;-1:-1;;14461:577::o;15081:703::-;;15208:4;15196:9;15191:3;15187:19;15183:30;15180:2;;;-1:-1;;15216:12;15180:2;15244:20;15208:4;15244:20;:::i;:::-;15235:29;;226:6;220:13;238:33;265:5;238:33;:::i;:::-;15328:86;;15496:2;15560:22;;9911:13;9929:32;9911:13;9929:32;:::i;:::-;15496:2;15511:16;;15504:85;15670:2;15734:22;;9911:13;9929:32;9911:13;9929:32;:::i;15832:481::-;;15954:4;15942:9;15937:3;15933:19;15929:30;15926:2;;;-1:-1;;15962:12;15926:2;15990:20;15954:4;15990:20;:::i;:::-;15981:29;;85:6;72:20;97:33;124:5;97:33;:::i;:::-;16071:75;;16209:2;16263:22;;72:20;97:33;72:20;97:33;:::i;:::-;16209:2;16224:16;;16217:75;16228:5;15920:393;-1:-1;;15920:393::o;16363:1028::-;;16486:4;16474:9;16469:3;16465:19;16461:30;16458:2;;;-1:-1;;16494:12;16458:2;16522:20;16486:4;16522:20;:::i;:::-;16513:29;;25327:6;25314:20;16615:16;16608:75;16751:2;16809:9;16805:22;72:20;97:33;124:5;97:33;:::i;:::-;16751:2;16766:16;;16759:75;16903:2;16957:22;;72:20;97:33;72:20;97:33;:::i;:::-;16903:2;16918:16;;16911:75;17047:2;17101:22;;72:20;97:33;72:20;97:33;:::i;:::-;17047:2;17062:16;;17055:75;17219:3;17204:19;;17191:33;-1:-1;;;;;17233:30;;17230:2;;;-1:-1;;17266:12;17230:2;17311:58;17365:3;17356:6;17345:9;17341:22;17311:58;:::i;:::-;17219:3;17297:5;17293:16;17286:84;;16452:939;;;;:::o;19089:2032::-;;19206:6;;19194:9;19189:3;19185:19;19181:32;19178:2;;;-1:-1;;19216:12;19178:2;19244:22;19206:6;19244:22;:::i;:::-;19235:31;;;19354:73;19423:3;19399:22;19354:73;:::i;:::-;19336:16;19329:99;19528:73;19597:3;19495:2;19577:9;19573:22;19528:73;:::i;:::-;19495:2;19514:5;19510:16;19503:99;19703:49;19748:3;19670:2;19728:9;19724:22;19703:49;:::i;:::-;19670:2;19689:5;19685:16;19678:75;19854:49;19899:3;19821:2;19879:9;19875:22;19854:49;:::i;:::-;19821:2;19840:5;19836:16;19829:75;20014:49;20059:3;19980;20039:9;20035:22;20014:49;:::i;:::-;19980:3;20000:5;19996:16;19989:75;20160:49;20205:3;20126;20185:9;20181:22;20160:49;:::i;:::-;20126:3;20146:5;20142:16;20135:75;20306:49;20351:3;20272;20331:9;20327:22;20306:49;:::i;:::-;20272:3;20292:5;20288:16;20281:75;20453:49;20498:3;20419;20478:9;20474:22;20453:49;:::i;:::-;20419:3;20439:5;20435:16;20428:75;20572:3;20608:49;20653:3;20572;20633:9;20629:22;20608:49;:::i;:::-;20588:18;;;20581:77;20719:3;20776:22;;;9488:20;20735:18;;;20728:77;20868:3;20904:48;20948:3;20924:22;;;20904:48;:::i;:::-;20868:3;20888:5;20884:18;20877:76;;21014:3;;21075:9;21071:22;25314:20;21014:3;21034:5;21030:18;21023:77;;19172:1949;;;;:::o;22590:773::-;;22706:4;22694:9;22689:3;22685:19;22681:30;22678:2;;;-1:-1;;22714:12;22678:2;22742:20;22706:4;22742:20;:::i;:::-;22733:29;;12624:6;12611:20;124763:1;124756:5;124753:12;124743:2;;-1:-1;;124769:12;124743:2;22828:93;;22979:2;23031:22;;25725:20;119176:4;119165:16;;125588:33;;125578:2;;-1:-1;;125625:12;125578:2;23012:47;22979:2;22998:5;22994:16;22987:73;;23118:2;23176:9;23172:22;9488:20;23118:2;23137:5;23133:16;23126:75;23259:2;23317:9;23313:22;9488:20;23259:2;23278:5;23274:16;23267:75;22672:691;;;;:::o;24830:130::-;24897:20;;24922:33;24897:20;24922:33;:::i;25525:128::-;25591:20;;-1:-1;;;;;119063:30;;125467:34;;125457:2;;125515:1;;125505:12;25793:241;;25897:2;25885:9;25876:7;25872:23;25868:32;25865:2;;;-1:-1;;25903:12;25865:2;85:6;72:20;97:33;124:5;97:33;:::i;26041:263::-;;26156:2;26144:9;26135:7;26131:23;26127:32;26124:2;;;-1:-1;;26162:12;26124:2;226:6;220:13;238:33;265:5;238:33;:::i;26597:431::-;;;26745:2;26733:9;26724:7;26720:23;26716:32;26713:2;;;-1:-1;;26751:12;26713:2;375:6;369:13;387:41;422:5;387:41;:::i;:::-;26922:2;26980:22;;369:13;26803:82;;-1:-1;387:41;369:13;387:41;:::i;:::-;26930:82;;;;26707:321;;;;;:::o;27035:736::-;;;;;27233:3;27221:9;27212:7;27208:23;27204:33;27201:2;;;-1:-1;;27240:12;27201:2;375:6;369:13;387:41;422:5;387:41;:::i;:::-;27411:2;27469:22;;369:13;27292:82;;-1:-1;387:41;369:13;387:41;:::i;:::-;27538:2;27596:22;;369:13;27419:82;;-1:-1;387:41;369:13;387:41;:::i;:::-;27665:2;27723:22;;369:13;27546:82;;-1:-1;387:41;369:13;387:41;:::i;:::-;27195:576;;;;-1:-1;27195:576;;-1:-1;;27195:576::o;27778:561::-;;;;27940:2;27928:9;27919:7;27915:23;27911:32;27908:2;;;-1:-1;;27946:12;27908:2;375:6;369:13;387:41;422:5;387:41;:::i;:::-;28117:2;28175:22;;369:13;27998:82;;-1:-1;387:41;369:13;387:41;:::i;:::-;28244:2;28291:22;;9361:13;28125:82;;-1:-1;116659:13;;116652:21;123106:32;;123096:2;;-1:-1;;123142:12;123096:2;28252:71;;;;27902:437;;;;;:::o;28346:562::-;;;28520:2;28508:9;28499:7;28495:23;28491:32;28488:2;;;-1:-1;;28526:12;28488:2;375:6;369:13;387:41;422:5;387:41;:::i;:::-;28718:2;28703:18;;28697:25;28578:82;;-1:-1;;;;;;28731:30;;;28728:2;;;-1:-1;;28764:12;28728:2;28860:22;;;;17575:4;17554:19;;;17550:30;17547:2;;;-1:-1;;17583:12;17547:2;17611:20;17575:4;17611:20;:::i;:::-;25468:6;25462:13;17704:16;17697:86;28718:2;17920:9;17916:22;220:13;238:33;265:5;238:33;:::i;:::-;28718:2;17866:16;;17859:86;28520:2;18079:22;;220:13;238:33;220:13;238:33;:::i;:::-;28520:2;18029:16;;18022:86;18169:2;18234:22;;220:13;238:33;220:13;238:33;:::i;:::-;18169:2;18184:16;;18177:86;18345:3;18330:19;;18324:26;18359:30;;;18356:2;;;-1:-1;;18392:12;18356:2;18437:69;18502:3;18493:6;18482:9;18478:22;18437:69;:::i;:::-;18345:3;18423:5;18419:16;18412:95;;28784:108;;;;;;28482:426;;;;;:::o;28915:879::-;;;;;;29112:3;29100:9;29091:7;29087:23;29083:33;29080:2;;;-1:-1;;29119:12;29080:2;85:6;72:20;97:33;124:5;97:33;:::i;:::-;29171:63;-1:-1;29271:2;29310:22;;72:20;97:33;72:20;97:33;:::i;:::-;29279:63;-1:-1;29379:2;29418:22;;72:20;97:33;72:20;97:33;:::i;:::-;29387:63;-1:-1;29487:2;29526:22;;72:20;97:33;72:20;97:33;:::i;:::-;29495:63;-1:-1;29623:3;29608:19;;29595:33;-1:-1;;;;;29637:30;;29634:2;;;-1:-1;;29670:12;29634:2;29700:78;29770:7;29761:6;29750:9;29746:22;29700:78;:::i;:::-;29690:88;;;29074:720;;;;;;;;:::o;29801:753::-;;;;;29981:3;29969:9;29960:7;29956:23;29952:33;29949:2;;;-1:-1;;29988:12;29949:2;85:6;72:20;97:33;124:5;97:33;:::i;:::-;30040:63;-1:-1;30140:2;30179:22;;72:20;97:33;72:20;97:33;:::i;:::-;30148:63;-1:-1;30248:2;30287:22;;72:20;97:33;72:20;97:33;:::i;:::-;30256:63;-1:-1;30384:2;30369:18;;30356:32;-1:-1;;;;;30397:30;;30394:2;;;-1:-1;;30430:12;30394:2;30460:78;30530:7;30521:6;30510:9;30506:22;30460:78;:::i;:::-;30450:88;;;29943:611;;;;;;;:::o;30561:617::-;;;;;30716:3;30704:9;30695:7;30691:23;30687:33;30684:2;;;-1:-1;;30723:12;30684:2;85:6;72:20;97:33;124:5;97:33;:::i;:::-;30775:63;-1:-1;30875:2;30914:22;;72:20;97:33;72:20;97:33;:::i;:::-;30883:63;-1:-1;30983:2;31022:22;;72:20;97:33;72:20;97:33;:::i;:::-;30678:500;;;;-1:-1;30991:63;;31091:2;31130:22;25314:20;;-1:-1;;30678:500::o;31185:763::-;;;;31373:2;31361:9;31352:7;31348:23;31344:32;31341:2;;;-1:-1;;31379:12;31341:2;85:6;72:20;97:33;124:5;97:33;:::i;:::-;31431:63;-1:-1;31559:2;31544:18;;31531:32;-1:-1;;;;;31572:30;;;31569:2;;;-1:-1;;31605:12;31569:2;31635:78;31705:7;31696:6;31685:9;31681:22;31635:78;:::i;:::-;31625:88;;31778:2;31767:9;31763:18;31750:32;31736:46;;31583:18;31794:6;31791:30;31788:2;;;-1:-1;;31824:12;31788:2;;31854:78;31924:7;31915:6;31904:9;31900:22;31854:78;:::i;:::-;31844:88;;;31335:613;;;;;:::o;31955:879::-;;;;;;32152:3;32140:9;32131:7;32127:23;32123:33;32120:2;;;-1:-1;;32159:12;32120:2;85:6;72:20;97:33;124:5;97:33;:::i;:::-;32211:63;-1:-1;32311:2;32350:22;;25314:20;;-1:-1;32419:2;32458:22;;72:20;97:33;72:20;97:33;:::i;32841:392::-;;32981:2;;32969:9;32960:7;32956:23;32952:32;32949:2;;;-1:-1;;32987:12;32949:2;33038:17;33032:24;-1:-1;;;;;33068:6;33065:30;33062:2;;;-1:-1;;33098:12;33062:2;33185:22;;1312:4;1300:17;;1296:27;-1:-1;1286:2;;-1:-1;;1327:12;1286:2;1367:6;1361:13;1389:80;1404:64;1461:6;1404:64;:::i;1389:80::-;1497:21;;;1554:14;;;;1529:17;;;1643;;;1634:27;;;;1631:36;-1:-1;1628:2;;;-1:-1;;1670:12;1628:2;-1:-1;1696:10;;1690:217;1715:6;1712:1;1709:13;1690:217;;;226:6;220:13;238:33;265:5;238:33;:::i;:::-;1783:61;;1737:1;1730:9;;;;;1858:14;;;;1886;;1690:217;;;-1:-1;33118:99;32943:290;-1:-1;;;;;;;32943:290::o;33240:833::-;;;;33459:2;33447:9;33438:7;33434:23;33430:32;33427:2;;;-1:-1;;33465:12;33427:2;33516:17;33510:24;-1:-1;;;;;33554:18;33546:6;33543:30;33540:2;;;-1:-1;;33576:12;33540:2;33678:6;33667:9;33663:22;;;2848:3;2841:4;2833:6;2829:17;2825:27;2815:2;;-1:-1;;2856:12;2815:2;2896:6;2890:13;2918:80;2933:64;2990:6;2933:64;:::i;2918:80::-;3004:16;3040:6;3033:5;3026:21;3070:4;;3087:3;3083:14;3076:21;;3070:4;3062:6;3058:17;3192:3;3070:4;;3176:6;3172:17;3062:6;3163:27;;3160:36;3157:2;;;-1:-1;;3199:12;3157:2;-1:-1;3225:10;;3219:217;3244:6;3241:1;3238:13;3219:217;;;9636:13;;3312:61;;3266:1;3259:9;;;;;3387:14;;;;3415;;3219:217;;;-1:-1;33738:18;;33732:25;33596:99;;-1:-1;33732:25;-1:-1;;;33766:30;;;33763:2;;;-1:-1;;33799:12;33763:2;;33829:89;33910:7;33901:6;33890:9;33886:22;33829:89;:::i;:::-;33819:99;;;33973:84;34049:7;33955:2;34029:9;34025:22;33973:84;:::i;:::-;33963:94;;33421:652;;;;;:::o;34080:419::-;;;34230:2;34218:9;34209:7;34205:23;34201:32;34198:2;;;-1:-1;;34236:12;34198:2;34294:17;34281:31;-1:-1;;;;;34332:18;34324:6;34321:30;34318:2;;;-1:-1;;34354:12;34318:2;34466:6;34455:9;34451:22;;;3607:3;3600:4;3592:6;3588:17;3584:27;3574:2;;-1:-1;;3615:12;3574:2;3658:6;3645:20;34332:18;3677:6;3674:30;3671:2;;;-1:-1;;3707:12;3671:2;3802:3;34230:2;;3786:6;3782:17;3743:6;3768:32;;3765:41;3762:2;;;-1:-1;;3809:12;3762:2;34230;3739:17;;;;;34374:109;;-1:-1;34192:307;;-1:-1;;;;34192:307::o;34506:799::-;;;;34712:2;34700:9;34691:7;34687:23;34683:32;34680:2;;;-1:-1;;34718:12;34680:2;34776:17;34763:31;-1:-1;;;;;34814:18;34806:6;34803:30;34800:2;;;-1:-1;;34836:12;34800:2;34866:87;34945:7;34936:6;34925:9;34921:22;34866:87;:::i;:::-;34856:97;;35018:2;35007:9;35003:18;34990:32;34976:46;;34814:18;35034:6;35031:30;35028:2;;;-1:-1;;35064:12;35028:2;;35094:87;35173:7;35164:6;35153:9;35149:22;35094:87;:::i;:::-;35084:97;;;35218:2;35261:9;35257:22;25314:20;35226:63;;34674:631;;;;;:::o;35312:425::-;;35465:2;35453:9;35444:7;35440:23;35436:32;35433:2;;;-1:-1;;35471:12;35433:2;35529:17;35516:31;-1:-1;;;;;35559:6;35556:30;35553:2;;;-1:-1;;35589:12;35553:2;35619:102;35713:7;35704:6;35693:9;35689:22;35619:102;:::i;35744:550::-;;;35914:2;35902:9;35893:7;35889:23;35885:32;35882:2;;;-1:-1;;35920:12;35882:2;35978:17;35965:31;-1:-1;;;;;36008:6;36005:30;36002:2;;;-1:-1;;36038:12;36002:2;36068:102;36162:7;36153:6;36142:9;36138:22;36068:102;:::i;:::-;36058:112;;;36207:2;36250:9;36246:22;72:20;97:33;124:5;97:33;:::i;36301:675::-;;;;36488:2;36476:9;36467:7;36463:23;36459:32;36456:2;;;-1:-1;;36494:12;36456:2;36552:17;36539:31;-1:-1;;;;;36582:6;36579:30;36576:2;;;-1:-1;;36612:12;36576:2;36642:102;36736:7;36727:6;36716:9;36712:22;36642:102;:::i;:::-;36632:112;;;36781:2;36824:9;36820:22;72:20;97:33;124:5;97:33;:::i;:::-;36789:63;-1:-1;36889:2;36928:22;;72:20;97:33;72:20;97:33;:::i;36983:390::-;;37122:2;;37110:9;37101:7;37097:23;37093:32;37090:2;;;-1:-1;;37128:12;37090:2;37179:17;37173:24;-1:-1;;;;;37209:6;37206:30;37203:2;;;-1:-1;;37239:12;37203:2;37325:22;;5524:4;5512:17;;5508:27;-1:-1;5498:2;;-1:-1;;5539:12;5498:2;5579:6;5573:13;5601:79;5616:63;5672:6;5616:63;:::i;5601:79::-;5708:21;;;5765:14;;;;5740:17;;;5854;;;5845:27;;;;5842:36;-1:-1;5839:2;;;-1:-1;;5881:12;5839:2;-1:-1;5907:10;;5901:216;5926:6;5923:1;5920:13;5901:216;;;13050:13;;5994:60;;5948:1;5941:9;;;;;6068:14;;;;6096;;5901:216;;37380:909;;;;37641:2;37629:9;37620:7;37616:23;37612:32;37609:2;;;-1:-1;;37647:12;37609:2;37705:17;37692:31;-1:-1;;;;;37743:18;37735:6;37732:30;37729:2;;;-1:-1;;37765:12;37729:2;37884:6;37873:9;37869:22;;;6314:3;6307:4;6299:6;6295:17;6291:27;6281:2;;-1:-1;;6322:12;6281:2;6369:6;6356:20;6391:108;6406:92;6491:6;6406:92;:::i;6391:108::-;6505:16;6541:6;6534:5;6527:21;6571:4;;6588:3;6584:14;6577:21;;6571:4;6563:6;6559:17;6685:6;6695:3;6571:4;6685:6;6677;6673:19;6563:6;6664:29;;6661:38;6658:2;;;-1:-1;;6702:12;6658:2;-1:-1;6728:10;;6722:236;6747:6;6744:1;6741:13;6722:236;;;6827:65;6888:3;6876:10;6827:65;:::i;:::-;6815:78;;6769:1;6762:9;;;;;6907:14;;;;6935:16;;;;6722:236;;;-1:-1;37785:116;;-1:-1;37951:18;;37938:32;;-1:-1;;;;37979:30;;;37976:2;;;-1:-1;;38012:12;37976:2;;38042:105;38139:7;38130:6;38119:9;38115:22;38042:105;:::i;:::-;38032:115;;;38202:71;38265:7;38184:2;38245:9;38241:22;38202:71;:::i;38296:392::-;;38436:2;38424:9;38415:7;38411:23;38407:32;38404:2;;;-1:-1;;38442:12;38404:2;38493:17;38487:24;-1:-1;;;;;38523:6;38520:30;38517:2;;;-1:-1;;38553:12;38517:2;38583:89;38664:7;38655:6;38644:9;38640:22;38583:89;:::i;38695:257::-;;38807:2;38795:9;38786:7;38782:23;38778:32;38775:2;;;-1:-1;;38813:12;38775:2;9367:6;9361:13;9379:30;9403:5;9379:30;:::i;38959:263::-;;39074:2;39062:9;39053:7;39049:23;39045:32;39042:2;;;-1:-1;;39080:12;39042:2;-1:-1;9636:13;;39036:186;-1:-1;39036:186::o;39229:360::-;;39353:2;39341:9;39332:7;39328:23;39324:32;39321:2;;;-1:-1;;39359:12;39321:2;39410:17;39404:24;-1:-1;;;;;39440:6;39437:30;39434:2;;;-1:-1;;39470:12;39434:2;39500:73;39565:7;39556:6;39545:9;39541:22;39500:73;:::i;40552:861::-;;;;40789:2;40777:9;40768:7;40764:23;40760:32;40757:2;;;-1:-1;;40795:12;40757:2;12090:6;12077:20;12102:58;12154:5;12102:58;:::i;:::-;40847:88;-1:-1;41000:2;40985:18;;40972:32;-1:-1;;;;;41013:30;;;41010:2;;;-1:-1;;41046:12;41010:2;41076:102;41170:7;41161:6;41150:9;41146:22;41076:102;:::i;41420:261::-;;41534:2;41522:9;41513:7;41509:23;41505:32;41502:2;;;-1:-1;;41540:12;41502:2;12917:6;12911:13;12929:32;12955:5;12929:32;:::i;41688:452::-;;;41846:3;41834:9;41825:7;41821:23;41817:33;41814:2;;;-1:-1;;41853:12;41814:2;12917:6;12911:13;12929:32;12955:5;12929:32;:::i;:::-;41905:73;-1:-1;42033:91;42116:7;42015:2;42092:22;;42033:91;:::i;:::-;42023:101;;41808:332;;;;;:::o;42610:824::-;;;;;42813:9;42804:7;42800:23;42825:3;42800:23;42796:33;42793:2;;;-1:-1;;42832:12;42793:2;13286:4;13265:19;13261:30;13258:2;;;-1:-1;;13294:12;13258:2;;13322:20;13286:4;13322:20;:::i;:::-;13447:22;9488:20;13408:16;13401:75;13538:2;13596:9;13592:22;72:20;97:33;124:5;97:33;:::i;:::-;13538:2;13553:16;;13546:75;13557:5;-1:-1;13286:4;43058:22;;72:20;97:33;72:20;97:33;:::i;:::-;43027:63;-1:-1;43127:2;43166:22;;72:20;97:33;72:20;97:33;:::i;:::-;43135:63;-1:-1;43263:3;43248:19;;43235:33;-1:-1;;;;;43277:30;;43274:2;;;-1:-1;;43310:12;43441:909;;;;;43656:3;43644:9;43635:7;43631:23;43627:33;43624:2;;;-1:-1;;43663:12;43624:2;43721:17;43708:31;-1:-1;;;;;43759:18;43751:6;43748:30;43745:2;;;-1:-1;;43781:12;43745:2;43867:22;;;;13818:4;13797:19;;;13793:30;13790:2;;;-1:-1;;13826:12;13790:2;13854:20;13818:4;13854:20;:::i;:::-;13960:73;14029:3;14005:22;13960:73;:::i;:::-;13942:16;13935:99;14124:2;14113:9;14109:18;14096:32;43759:18;14140:6;14137:30;14134:2;;;-1:-1;;14170:12;14134:2;14215:99;14310:3;14301:6;14290:9;14286:22;14215:99;:::i;:::-;14124:2;14201:5;14197:16;14190:125;;43801:98;;;;43954:53;43999:7;14124:2;43979:9;43975:22;43954:53;:::i;:::-;43944:63;;44062:53;44107:7;13818:4;44087:9;44083:22;44062:53;:::i;:::-;44052:63;;44180:2;44169:9;44165:18;44152:32;44138:46;;43759:18;44196:6;44193:30;44190:2;;;-1:-1;;44226:12;44190:2;;44256:78;44326:7;44317:6;44306:9;44302:22;44256:78;:::i;44357:805::-;;;;;44562:3;44550:9;44541:7;44537:23;44533:33;44530:2;;;-1:-1;;44569:12;44530:2;44631:80;44703:7;44679:22;44631:80;:::i;:::-;44621:90;;44748:2;44790:9;44786:22;12765:20;12790:32;12816:5;12790:32;:::i;:::-;44756:62;-1:-1;44855:3;44894:22;;12765:20;12790:32;12765:20;12790:32;:::i;:::-;44864:62;-1:-1;44991:3;44976:19;;44963:33;-1:-1;;;;;45005:30;;45002:2;;;-1:-1;;45038:12;45169:820;;;;;45382:3;45370:9;45361:7;45357:23;45353:33;45350:2;;;-1:-1;;45389:12;45350:2;45451:86;45529:7;45505:22;45451:86;:::i;:::-;45441:96;;45574:2;45617:9;45613:22;72:20;97:33;124:5;97:33;:::i;45996:907::-;;;;;46210:3;46198:9;46189:7;46185:23;46181:33;46178:2;;;-1:-1;;46217:12;46178:2;46275:17;46262:31;-1:-1;;;;;46313:18;46305:6;46302:30;46299:2;;;-1:-1;;46335:12;46299:2;46365:87;46444:7;46435:6;46424:9;46420:22;46365:87;:::i;:::-;46355:97;;46489:2;46532:9;46528:22;72:20;63:29;;97:33;124:5;97:33;:::i;:::-;46497:63;;-1:-1;46597:2;46636:22;;72:20;;97:33;72:20;97:33;:::i;:::-;46605:63;;-1:-1;46733:2;46718:18;;46705:32;;46746:30;;;46743:2;;;-1:-1;;46779:12;46910:771;;;;;47099:3;47087:9;47078:7;47074:23;47070:33;47067:2;;;-1:-1;;47106:12;47067:2;47164:17;47151:31;-1:-1;;;;;47194:6;47191:30;47188:2;;;-1:-1;;47224:12;47188:2;47254:87;47333:7;47324:6;47313:9;47309:22;47254:87;:::i;:::-;47244:97;;;47378:2;47421:9;47417:22;72:20;97:33;124:5;97:33;:::i;47688:771::-;;;;;47877:3;47865:9;47856:7;47852:23;47848:33;47845:2;;;-1:-1;;47884:12;47845:2;47942:17;47929:31;-1:-1;;;;;47972:6;47969:30;47966:2;;;-1:-1;;48002:12;47966:2;48032:87;48111:7;48102:6;48091:9;48087:22;48032:87;:::i;:::-;48022:97;;;48156:2;48199:9;48195:22;9488:20;48164:63;;48264:2;48307:9;48303:22;72:20;97:33;124:5;97:33;:::i;:::-;48272:63;-1:-1;48372:2;48411:22;;72:20;97:33;72:20;97:33;:::i;49279:640::-;;;;49490:3;49478:9;49469:7;49465:23;49461:33;49458:2;;;-1:-1;;49497:12;49458:2;49559:81;49632:7;49608:22;49559:81;:::i;:::-;49549:91;;49696:80;49768:7;49677:3;49748:9;49744:22;49696:80;:::i;:::-;49686:90;;49813:3;49875:9;49871:22;11517:20;11542:51;11587:5;11542:51;:::i;49926:815::-;;;;;50124:9;50115:7;50111:23;50136:3;50111:23;50107:33;50104:2;;;-1:-1;;50143:12;50104:2;21289:4;21268:19;21264:30;21261:2;;;-1:-1;;21297:12;21261:2;;21325:20;21289:4;21325:20;:::i;:::-;85:6;72:20;97:33;124:5;97:33;:::i;:::-;21408:75;;21553:2;21607:22;;;9488:20;21568:16;;;21561:75;21708:2;21762:22;;72:20;97:33;72:20;97:33;:::i;:::-;21708:2;21723:16;;21716:75;21727:5;-1:-1;21289:4;50364:22;;72:20;97:33;72:20;97:33;:::i;:::-;50333:63;-1:-1;50433:3;50473:22;;72:20;97:33;72:20;97:33;:::i;50748:585::-;;;;50909:9;50900:7;50896:23;50921:3;50896:23;50892:33;50889:2;;;-1:-1;;50928:12;50889:2;21979:4;21958:19;21954:30;21951:2;;;-1:-1;;21987:12;21951:2;;22015:20;21979:4;22015:20;:::i;:::-;22154:22;9636:13;22104:16;22097:86;22246:2;22331:9;22327:22;12266:13;124523:1;124516:5;124513:12;124503:2;;-1:-1;;124529:12;124503:2;22246;22261:16;;22254:102;22435:2;22500:22;;25045:13;25063:33;25045:13;25063:33;:::i;:::-;22435:2;22450:16;;22443:86;21979:4;51168:22;;25045:13;22454:5;;-1:-1;25063:33;25045:13;25063:33;:::i;:::-;51237:3;51285:22;;9361:13;51126:74;;-1:-1;9379:30;9361:13;9379:30;:::i;52156:261::-;;52270:2;52258:9;52249:7;52245:23;52241:32;52238:2;;;-1:-1;;52276:12;52238:2;25191:6;25185:13;118902:8;125248:5;118891:20;125224:5;125221:34;125211:2;;-1:-1;;125259:12;52694:399;;;52826:2;52814:9;52805:7;52801:23;52797:32;52794:2;;;-1:-1;;52832:12;52794:2;-1:-1;;25462:13;;52995:2;53045:22;;;25462:13;;;;;-1:-1;52788:305::o;53100:672::-;;;;;53266:3;53254:9;53245:7;53241:23;53237:33;53234:2;;;-1:-1;;53273:12;53234:2;-1:-1;;25462:13;;53436:2;53486:22;;25462:13;53555:2;53605:22;;25462:13;53674:2;53724:22;;;25462:13;;;;;-1:-1;25462:13;;-1:-1;53228:544;-1:-1;53228:544::o;53779:809::-;;;;;;53962:3;53950:9;53941:7;53937:23;53933:33;53930:2;;;-1:-1;;53969:12;53930:2;-1:-1;;25462:13;;54132:2;54182:22;;25462:13;54251:2;54301:22;;25462:13;54370:2;54420:22;;25462:13;54489:3;54540:22;;;25462:13;;;;;-1:-1;25462:13;;-1:-1;25462:13;;-1:-1;53924:664;-1:-1;53924:664::o;56258:127::-;-1:-1;;;;;118764:54;56335:45;;56329:56::o;56653:690::-;;56846:5;112540:12;114673:6;114668:3;114661:19;114710:4;;114705:3;114701:14;56858:93;;114710:4;57022:5;111364:14;-1:-1;57061:260;57086:6;57083:1;57080:13;57061:260;;;57147:13;;-1:-1;;;;;118764:54;56335:45;;54749:14;;;;113744;;;;17244:18;57101:9;57061:260;;;-1:-1;57327:10;;56777:566;-1:-1;;;;;56777:566::o;57382:690::-;;57575:5;112540:12;114673:6;114668:3;114661:19;114710:4;;114705:3;114701:14;57587:93;;114710:4;57751:5;111364:14;-1:-1;57790:260;57815:6;57812:1;57809:13;57790:260;;;57876:13;;63210:37;;54931:14;;;;113744;;;;57837:1;57830:9;57790:260;;63827:323;;63959:5;112540:12;114673:6;114668:3;114661:19;64042:52;64087:6;114710:4;114705:3;114701:14;114710:4;64068:5;64064:16;64042:52;:::i;:::-;122174:7;122158:14;-1:-1;;122154:28;64106:39;;;;114710:4;64106:39;;63907:243;-1:-1;;63907:243::o;68388:1056::-;;68613:16;68607:23;63217:3;63210:37;68786:4;68779:5;68775:16;68769:23;68786:4;68850:3;68846:14;63210:37;68949:4;68942:5;68938:16;68932:23;68949:4;69013:3;69009:14;63210:37;69105:4;69098:5;69094:16;69088:23;69105:4;69169:3;69165:14;63210:37;69263:4;69256:5;69252:16;69246:23;68539:4;69263;69293:3;69289:14;69282:38;69335:71;68539:4;68534:3;68530:14;69387:12;69335:71;:::i;70176:678::-;70396:23;;-1:-1;;;;;118764:54;56335:45;;70588:4;70577:16;;;70571:23;-1:-1;;;;;;116825:78;;;70646:14;;;63438:36;;;;70760:4;70749:16;;;70743:23;116825:78;70818:14;;63438:36;70296:558::o;70948:835::-;71171:23;;-1:-1;;;;;118764:54;;;56335:45;;71357:4;71346:16;;;71340:23;116659:13;116652:21;71411:14;;;62992:34;71510:4;71499:16;;;71493:23;118764:54;;;71586:14;;;56335:45;71693:4;71682:16;;;71676:23;116659:13;116652:21;71747:14;;62992:34;71076:707::o;71857:582::-;;72087:16;72081:23;63217:3;63210:37;72258:4;72251:5;72247:16;72241:23;72008:4;72258;72288:3;72284:14;72277:38;72330:71;72008:4;72003:3;71999:14;72382:12;72330:71;:::i;72529:1073::-;;72779:16;72773:23;63217:3;63210:37;72951:4;72944:5;72940:16;72934:23;17244:18;;118775:42;;;;56373:5;118764:54;72951:4;73015:3;73011:14;56335:45;118775:42;73113:4;73106:5;73102:16;73096:23;118764:54;73113:4;73177:3;73173:14;56335:45;118775:42;73267:4;73260:5;73256:16;73250:23;118764:54;73267:4;73331:3;73327:14;56335:45;;;73421:4;73414:5;73410:16;73404:23;72698:4;73421;73451:3;73447:14;73440:38;73493:71;72698:4;72693:3;72689:14;73545:12;73493:71;:::i;73674:2141::-;73926:87;73998:14;73903:16;73897:23;73926:87;:::i;:::-;74098:4;74091:5;74087:16;74081:23;74110:87;74098:4;74186:3;74182:14;74168:12;74110:87;:::i;:::-;;74283:4;74276:5;74272:16;74266:23;74295:63;74283:4;74347:3;74343:14;74329:12;74295:63;:::i;:::-;;74444:4;74437:5;74433:16;74427:23;74456:63;74444:4;74508:3;74504:14;74490:12;74456:63;:::i;:::-;;74613:4;74606:5;74602:16;74596:23;74625:63;74613:4;74677:3;74673:14;74659:12;74625:63;:::i;:::-;;74768:4;74761:5;74757:16;74751:23;74780:63;74768:4;74832:3;74828:14;74814:12;74780:63;:::i;:::-;;74923:4;74916:5;74912:16;74906:23;74935:63;74923:4;74987:3;74983:14;74969:12;74935:63;:::i;:::-;;75079:4;75072:5;75068:16;75062:23;75091:63;75079:4;75143:3;75139:14;75125:12;75091:63;:::i;:::-;;75241:6;;75234:5;75230:18;75224:25;75255:65;75241:6;75307:3;75303:16;75289:12;75255:65;:::i;:::-;-1:-1;;75399:6;75388:18;;;75382:25;75461:16;;;63210:37;75559:6;75548:18;;;75542:25;75573:63;75619:16;;;75542:25;75573:63;:::i;:::-;-1:-1;;75715:6;75704:18;;;75698:25;75777:16;;63210:37;73796:2019::o;75885:800::-;76113:16;76107:23;117732:54;117780:5;117732:54;:::i;:::-;66162:66;;76291:4;76280:16;;;76274:23;119176:4;119165:16;76347:14;;;78079:35;76438:4;76427:16;;;76421:23;76498:14;;;63210:37;76589:4;76578:16;;;76572:23;76649:14;;63210:37;76005:680::o;77458:103::-;-1:-1;;;;;118644:46;77519:37;;77513:48::o;77915:100::-;-1:-1;;;;;119063:30;77974:36;;77968:47::o;78126:291::-;;121741:6;121736:3;121731;121718:30;121779:16;;121772:27;;;121779:16;78270:147;-1:-1;78270:147::o;78424:271::-;;64667:5;112540:12;64778:52;64823:6;64818:3;64811:4;64804:5;64800:16;64778:52;:::i;:::-;64842:16;;;;;78558:137;-1:-1;;78558:137::o;78702:222::-;-1:-1;;;;;118764:54;;;;56335:45;;78829:2;78814:18;;78800:124::o;78931:349::-;-1:-1;;;;;118764:54;;;;56188:58;;79266:2;79251:18;;63210:37;79094:2;79079:18;;79065:215::o;79287:333::-;-1:-1;;;;;118764:54;;;56335:45;;118764:54;;79606:2;79591:18;;56335:45;79442:2;79427:18;;79413:207::o;79627:556::-;-1:-1;;;;;118764:54;;;56335:45;;118764:54;;;80003:2;79988:18;;56335:45;118764:54;;;80086:2;80071:18;;56335:45;118764:54;;;80169:2;80154:18;;56335:45;79838:3;79823:19;;79809:374::o;80190:704::-;-1:-1;;;;;118764:54;;;56335:45;;118764:54;;;80616:2;80601:18;;56335:45;118764:54;;80699:2;80684:18;;56335:45;80451:3;80736:2;80721:18;;80714:48;;;80190:704;;80776:108;;80436:19;;80870:6;80776:108;:::i;80901:556::-;-1:-1;;;;;118764:54;;;56335:45;;118764:54;;;81277:2;81262:18;;56335:45;118764:54;;81360:2;81345:18;;56335:45;81443:2;81428:18;;63210:37;;;;81112:3;81097:19;;81083:374::o;81464:432::-;-1:-1;;;;;118764:54;;;56335:45;;118764:54;;;;81805:2;81790:18;;56335:45;116659:13;;116652:21;81882:2;81867:18;;62992:34;81641:2;81626:18;;81612:284::o;81903:628::-;-1:-1;;;;;118764:54;;;56335:45;;118764:54;;82291:2;82276:18;;56335:45;116659:13;;116652:21;82368:2;82353:18;;62992:34;82126:3;82405:2;82390:18;;82383:48;;;81903:628;;82445:76;;82111:19;;82507:6;82445:76;:::i;82538:444::-;-1:-1;;;;;118764:54;;;56335:45;;118764:54;;;;82885:2;82870:18;;56335:45;82968:2;82953:18;;63210:37;;;;82721:2;82706:18;;82692:290::o;82989:768::-;-1:-1;;;;;118764:54;;;56335:45;;118764:54;;83419:2;83404:18;;56335:45;83502:2;83487:18;;63210:37;;;83593:2;83578:18;;66746:58;;;118775:42;83630:3;83615:19;;83608:49;;;82989:768;;83671:76;;83239:19;;83733:6;83671:76;:::i;:::-;83663:84;83225:532;-1:-1;;;;;;;83225:532::o;83764:740::-;-1:-1;;;;;118764:54;;56335:45;;84047:2;84165;84150:18;;84143:48;;;83764:740;;84205:108;;84032:18;;84299:6;84205:108;:::i;:::-;84361:9;84355:4;84351:20;84346:2;84335:9;84331:18;84324:48;84386:108;84489:4;84480:6;84386:108;:::i;84511:876::-;-1:-1;;;;;118764:54;;56335:45;;84511:876;117732:54;117780:5;117732:54;:::i;:::-;121243:38;85011:2;85000:9;84996:18;66476:62;84834:3;85048:2;85037:9;85033:18;85026:48;85088:108;84834:3;84823:9;84819:19;85182:6;85088:108;:::i;:::-;85244:9;85238:4;85234:20;85229:2;85218:9;85214:18;85207:48;85269:108;85372:4;85363:6;85269:108;:::i;85394:1644::-;-1:-1;;;;;118764:54;;;56335:45;;85394:1644;;85941:3;;117732:54;117780:5;117732:54;:::i;:::-;121243:38;86118:2;86107:9;86103:18;66476:62;85941:3;86155:2;86144:9;86140:18;86133:48;86195:108;85941:3;85930:9;85926:19;86289:6;86195:108;:::i;:::-;86187:116;;86351:9;86345:4;86341:20;86336:2;86325:9;86321:18;86314:48;86376:108;86479:4;86470:6;86376:108;:::i;:::-;118764:54;;;86563:3;86548:19;;56335:45;86368:116;-1:-1;117732:54;117780:5;117732:54;:::i;:::-;121243:38;86659:3;86648:9;86644:19;66476:62;86713:9;86707:4;86703:20;86697:3;86686:9;86682:19;86675:49;86738:108;86841:4;86832:6;86738:108;:::i;:::-;86730:116;;86895:9;86889:4;86885:20;86879:3;86868:9;86864:19;86857:49;86920:108;87023:4;87014:6;86920:108;:::i;:::-;86912:116;85912:1126;-1:-1;;;;;;;;;;;85912:1126::o;87045:517::-;-1:-1;;;;;118764:54;;56335:45;;87268:2;87386;87371:18;;87364:48;;;87045:517;;87426:126;;87253:18;;87538:6;87426:126;:::i;87909:629::-;;88164:2;88185:17;88178:47;88239:108;88164:2;88153:9;88149:18;88333:6;88239:108;:::i;:::-;88395:9;88389:4;88385:20;88380:2;88369:9;88365:18;88358:48;88420:108;88523:4;88514:6;88420:108;:::i;88545:481::-;;88750:2;88771:17;88764:47;88825:108;88750:2;88739:9;88735:18;88919:6;88825:108;:::i;:::-;88817:116;;63240:5;89012:2;89001:9;88997:18;63210:37;88721:305;;;;;:::o;89033:665::-;;89306:2;89295:9;89291:18;89306:2;89327:17;89320:47;89381:126;58327:5;112540:12;114673:6;114668:3;114661:19;114701:14;89295:9;114701:14;58339:102;;114710:4;;;114701:14;114710:4;58498:6;58494:17;89295:9;58485:27;;114710:4;58592:5;111364:14;-1:-1;58631:357;58656:6;58653:1;58650:13;58631:357;;;58708:20;;89295:9;58712:4;58708:20;;58703:3;58696:33;55079:64;55139:3;58763:6;58757:13;55079:64;:::i;:::-;58967:14;;;;58777:90;-1:-1;113744:14;;;;58678:1;58671:9;58631:357;;;58635:14;;89555:9;89549:4;89545:20;114710:4;89529:9;89525:18;89518:48;89580:108;89683:4;89674:6;89580:108;:::i;89705:486::-;89940:2;89954:47;;;112540:12;;89925:18;;;114661:19;;;89705:486;;89940:2;114701:14;;;;;;61587:17;;;61578:27;;;;111364:14;;;89705:486;61744:417;61769:6;61766:1;61763:13;61744:417;;;61821:20;;;-1:-1;;61821:20;61809:33;;61870:13;;69751:23;;69787:38;;;69840:71;69676:14;;;69751:23;69840:71;:::i;:::-;69988:16;;;69982:23;116659:13;116652:21;70053:14;;;62992:34;;;;62140:14;;;;69832:79;-1:-1;113744:14;;;;61791:1;61784:9;61744:417;;;-1:-1;90007:174;;89911:280;-1:-1;;;;;;;;89911:280::o;90198:370::-;;90375:2;90396:17;90389:47;90450:108;90375:2;90364:9;90360:18;90544:6;90450:108;:::i;90575:210::-;116659:13;;116652:21;62992:34;;90696:2;90681:18;;90667:118::o;90792:580::-;116659:13;;116652:21;62992:34;;-1:-1;;;;;118764:54;;91177:2;91162:18;;56335:45;91019:2;91214;91199:18;;91192:48;;;90792:580;;91254:108;;91004:18;;91348:6;91254:108;:::i;91379:222::-;63210:37;;;91506:2;91491:18;;91477:124::o;91608:676::-;;63240:5;63217:3;63210:37;91859:2;91977;91966:9;91962:18;91955:48;92017:76;91859:2;91848:9;91844:18;92079:6;92017:76;:::i;92291:306::-;;92436:2;92457:17;92450:47;92511:76;92436:2;92425:9;92421:18;92573:6;92511:76;:::i;92604:417::-;;92777:2;92798:17;92791:47;92852:76;92777:2;92766:9;92762:18;92914:6;92852:76;:::i;93028:536::-;-1:-1;;;;;118764:54;;;64945:64;;118764:54;;;;93469:2;93454:18;;64945:64;118902:8;118891:20;;;93550:2;93535:18;;77637:36;93257:2;93242:18;;93228:336::o;94118:519::-;-1:-1;;;;;118764:54;;64945:64;;94342:2;94479;94464:18;;94457:48;;;94118:519;;94519:108;;94327:18;;94613:6;94519:108;:::i;94644:482::-;94846:2;94831:18;;117732:54;117780:5;117732:54;:::i;:::-;65803:69;;;95029:2;95014:18;;63210:37;;;;95112:2;95097:18;;;63210:37;94817:309;:::o;95133:512::-;95350:2;95335:18;;122419:1;122409:12;;122399:2;;122425:9;95652:1144;;96109:3;96098:9;96094:19;122645:1;122638:5;122635:12;122625:2;;122651:9;122625:2;121104:36;66328:3;66321:60;96238:2;96109:3;96238:2;96227:9;96223:18;96216:48;96278:168;60216:5;112540:12;114673:6;114668:3;114661:19;114701:14;;;;96098:9;114701:14;60228:123;;114701:14;96238:2;60408:6;60404:17;96098:9;60395:27;;60383:39;;96238:2;60523:5;111364:14;-1:-1;60562:420;60587:6;60584:1;60581:13;60562:420;;;60639:20;;96098:9;60643:4;60639:20;;60634:3;60627:33;55529:106;55631:3;60694:6;60688:13;55529:106;:::i;:::-;60708:132;-1:-1;60961:14;;;;113744;;;;60609:1;60602:9;60562:420;;;60566:14;;;;;96494:9;96488:4;96484:20;96479:2;96468:9;96464:18;96457:48;96519:122;96636:4;96627:6;96519:122;:::i;:::-;96511:130;;;96652:134;96782:2;96771:9;96767:18;96758:6;96652:134;:::i;96803:436::-;118482:2;118471:21;;;66619:36;;118471:21;;;;97142:2;97127:18;;66619:36;97225:2;97210:18;;63210:37;;;;96982:2;96967:18;;96953:286::o;97246:438::-;118482:2;118471:21;;;66619:36;;97453:3;97438:19;;97548:126;97670:2;97655:18;;97646:6;97548:126;:::i;98144:416::-;98344:2;98358:47;;;67041:2;98329:18;;;114661:19;67077:34;114701:14;;;67057:55;-1:-1;;;67132:12;;;67125:28;67172:12;;;98315:245::o;98567:416::-;98767:2;98781:47;;;67423:2;98752:18;;;114661:19;67459:34;114701:14;;;67439:55;-1:-1;;;67514:12;;;67507:29;67555:12;;;98738:245::o;98990:416::-;99190:2;99204:47;;;67806:2;99175:18;;;114661:19;67842:34;114701:14;;;67822:55;-1:-1;;;67897:12;;;67890:29;67938:12;;;99161:245::o;99413:416::-;99613:2;99627:47;;;68189:2;99598:18;;;114661:19;68225:32;114701:14;;;68205:53;68277:12;;;99584:245::o;99836:806::-;;100162:125;100269:17;100260:6;100162:125;:::i;:::-;66648:5;118482:2;118471:21;100364:2;100353:9;100349:18;66619:36;66648:5;118482:2;118471:21;100445:3;100434:9;100430:19;66619:36;100147:3;100483;100472:9;100468:19;100461:49;100524:108;100147:3;100136:9;100132:19;100618:6;100524:108;:::i;100649:740::-;;100932:2;100953:17;100946:47;101007:108;100932:2;100921:9;100917:18;101101:6;101007:108;:::i;:::-;101163:9;101157:4;101153:20;101148:2;101137:9;101133:18;101126:48;101188:108;101291:4;101282:6;101188:108;:::i;:::-;101180:116;;;63240:5;101375:2;101364:9;101360:18;63210:37;100903:486;;;;;;:::o;101396:740::-;;101675:3;101697:17;101690:47;101751:126;101675:3;101664:9;101660:19;101863:6;101751:126;:::i;:::-;-1:-1;;;;;118764:54;;;101956:2;101941:18;;56335:45;118764:54;;;;102039:2;102024:18;;56335:45;102122:2;102107:18;63210:37;101743:134;101646:490;-1:-1;;101646:490::o;102143:740::-;;102422:3;102444:17;102437:47;102498:126;102422:3;102411:9;102407:19;102610:6;102498:126;:::i;:::-;102703:2;102688:18;;63210:37;;;;-1:-1;;;;;;118764:54;;;102786:2;102771:18;;56335:45;118764:54;;102869:2;102854:18;;;56335:45;102490:134;102393:490;-1:-1;102393:490::o;102890:555::-;103155:3;103140:19;;103170:127;103144:9;103270:6;103170:127;:::i;:::-;103308;103430:3;103419:9;103415:19;103406:6;103308:127;:::i;103452:703::-;103763:3;103748:19;;103778:127;103752:9;103878:6;103778:127;:::i;:::-;103916;104038:3;104027:9;104023:19;104014:6;103916:127;:::i;:::-;-1:-1;;;;;118764:54;;;;104140:3;104125:19;;;;64945:64;103734:421;;-1:-1;;103734:421::o;105212:481::-;;63240:5;63217:3;63210:37;105417:2;105535;105524:9;105520:18;105513:48;105575:108;105417:2;105406:9;105402:18;105669:6;105575:108;:::i;105700:740::-;;63240:5;63217:3;63210:37;105983:2;106101;106090:9;106086:18;106079:48;106141:108;105983:2;105972:9;105968:18;106235:6;106141:108;:::i;:::-;106297:9;106291:4;106287:20;106282:2;106271:9;106267:18;106260:48;106322:108;106425:4;106416:6;106322:108;:::i;106447:780::-;63210:37;;;106879:2;106864:18;;63210:37;;;;106962:2;106947:18;;63210:37;;;;107045:2;107030:18;;63210:37;107128:3;107113:19;;63210:37;107212:3;107197:19;;63210:37;106714:3;106699:19;;106685:542::o;107234:506::-;;;107369:11;107356:25;107420:48;;107444:8;107428:14;107424:29;107420:48;107400:18;107396:73;107386:2;;-1:-1;;107473:12;107386:2;107500:33;;107554:18;;;-1:-1;;;;;;107581:30;;107578:2;;;-1:-1;;107614:12;107578:2;107459:4;107642:13;;-1:-1;107428:14;107674:38;;;107664:49;;107661:2;;;107726:1;;107716:12;107661:2;107324:416;;;;;:::o;107747:256::-;107809:2;107803:9;107835:17;;;-1:-1;;;;;107895:34;;107931:22;;;107892:62;107889:2;;;107967:1;;107957:12;107889:2;107809;107976:22;107787:216;;-1:-1;107787:216::o;108010:304::-;;-1:-1;;;;;108161:6;108158:30;108155:2;;;-1:-1;;108191:12;108155:2;-1:-1;108236:4;108224:17;;;108289:15;;108092:222::o;110921:321::-;;-1:-1;;;;;111056:6;111053:30;111050:2;;;-1:-1;;111086:12;111050:2;-1:-1;122174:7;111140:17;-1:-1;;111136:33;111227:4;111217:15;;110987:255::o;121814:268::-;121879:1;121886:101;121900:6;121897:1;121894:13;121886:101;;;121967:11;;;121961:18;121948:11;;;121941:39;121922:2;121915:10;121886:101;;;122002:6;121999:1;121996:13;121993:2;;;121879:1;122058:6;122053:3;122049:16;122042:27;121993:2;;121863:219;;;:::o;122195:112::-;122285:1;122278:5;122275:12;122265:2;;122291:9;122265:2;122259:48;:::o;122786:117::-;-1:-1;;;;;118764:54;;122845:35;;122835:2;;122894:1;;122884:12;123050:111;123131:5;116659:13;116652:21;123109:5;123106:32;123096:2;;123152:1;;123142:12;123292:115;-1:-1;;;;;;116825:78;;123350:34;;123340:2;;123398:1;;123388:12;124795:115;124880:5;118482:2;118471:21;124856:5;124853:34;124843:2;;124901:1;;124891:12;125039:117;-1:-1;;;;;125126:5;118644:46;125101:5;125098:35;125088:2;;125147:1;;125137:12"
            }
        }
    },
    "sourceTreeHashHex": "0x4e02ca5d33ac4bc1d58717c12280e076820d7b078be339e4dddf1b5993e85e8a",
    "sources": {
        "./ERC20BridgeSampler.sol": {
            "id": 7,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./BalancerSampler.sol\";\nimport \"./BalancerV2Sampler.sol\";\nimport \"./BancorSampler.sol\";\nimport \"./CurveSampler.sol\";\nimport \"./DODOSampler.sol\";\nimport \"./DODOV2Sampler.sol\";\nimport \"./Eth2DaiSampler.sol\";\nimport \"./KyberSampler.sol\";\nimport \"./KyberDmmSampler.sol\";\nimport \"./LidoSampler.sol\";\nimport \"./LiquidityProviderSampler.sol\";\nimport \"./MakerPSMSampler.sol\";\nimport \"./MultiBridgeSampler.sol\";\nimport \"./MStableSampler.sol\";\nimport \"./MooniswapSampler.sol\";\nimport \"./NativeOrderSampler.sol\";\nimport \"./ShellSampler.sol\";\nimport \"./SmoothySampler.sol\";\nimport \"./TwoHopSampler.sol\";\nimport \"./UniswapSampler.sol\";\nimport \"./UniswapV2Sampler.sol\";\nimport \"./UniswapV3Sampler.sol\";\nimport \"./UtilitySampler.sol\";\n\n\ncontract ERC20BridgeSampler is\n    BalancerSampler,\n    BalancerV2Sampler,\n    BancorSampler,\n    CurveSampler,\n    DODOSampler,\n    DODOV2Sampler,\n    Eth2DaiSampler,\n    KyberSampler,\n    KyberDmmSampler,\n    LidoSampler,\n    LiquidityProviderSampler,\n    MakerPSMSampler,\n    MStableSampler,\n    MooniswapSampler,\n    MultiBridgeSampler,\n    NativeOrderSampler,\n    ShellSampler,\n    SmoothySampler,\n    TwoHopSampler,\n    UniswapSampler,\n    UniswapV2Sampler,\n    UniswapV3Sampler,\n    UtilitySampler\n{\n\n    struct CallResults {\n        bytes data;\n        bool success;\n    }\n\n    /// @dev Call multiple public functions on this contract in a single transaction.\n    /// @param callDatas ABI-encoded call data for each function call.\n    /// @return callResults ABI-encoded results data for each call.\n    function batchCall(bytes[] calldata callDatas)\n        external\n        returns (CallResults[] memory callResults)\n    {\n        callResults = new CallResults[](callDatas.length);\n        for (uint256 i = 0; i != callDatas.length; ++i) {\n            callResults[i].success = true;\n            if (callDatas[i].length == 0) {\n                continue;\n            }\n            (callResults[i].success, callResults[i].data) = address(this).call(callDatas[i]);\n        }\n    }\n}\n"
        },
        "./BalancerSampler.sol": {
            "id": 1,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IBalancer.sol\";\n\n\ncontract BalancerSampler {\n\n    /// @dev Base gas limit for Balancer calls.\n    uint256 constant private BALANCER_CALL_GAS = 300e3; // 300k\n\n    // Balancer math constants\n    // https://github.com/balancer-labs/balancer-core/blob/master/contracts/BConst.sol\n    uint256 constant private BONE = 10 ** 18;\n    uint256 constant private MAX_IN_RATIO = BONE / 2;\n    uint256 constant private MAX_OUT_RATIO = (BONE / 3) + 1 wei;\n\n    struct BalancerState {\n        uint256 takerTokenBalance;\n        uint256 makerTokenBalance;\n        uint256 takerTokenWeight;\n        uint256 makerTokenWeight;\n        uint256 swapFee;\n    }\n\n    /// @dev Sample sell quotes from Balancer.\n    /// @param poolAddress Address of the Balancer pool to query.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromBalancer(\n        address poolAddress,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        IBalancer pool = IBalancer(poolAddress);\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        if (!pool.isBound(takerToken) || !pool.isBound(makerToken)) {\n            return makerTokenAmounts;\n        }\n\n        BalancerState memory poolState;\n        poolState.takerTokenBalance = pool.getBalance(takerToken);\n        poolState.makerTokenBalance = pool.getBalance(makerToken);\n        poolState.takerTokenWeight = pool.getDenormalizedWeight(takerToken);\n        poolState.makerTokenWeight = pool.getDenormalizedWeight(makerToken);\n        poolState.swapFee = pool.getSwapFee();\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            // Handles this revert scenario:\n            // https://github.com/balancer-labs/balancer-core/blob/master/contracts/BPool.sol#L443\n            if (takerTokenAmounts[i] > _bmul(poolState.takerTokenBalance, MAX_IN_RATIO)) {\n                break;\n            }\n            try\n                pool.calcOutGivenIn\n                    {gas: BALANCER_CALL_GAS}\n                    (\n                        poolState.takerTokenBalance,\n                        poolState.takerTokenWeight,\n                        poolState.makerTokenBalance,\n                        poolState.makerTokenWeight,\n                        takerTokenAmounts[i],\n                        poolState.swapFee\n                    )\n                returns (uint256 amount)\n            {\n                makerTokenAmounts[i] = amount;\n                // Break early if there are 0 amounts\n                if (makerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from Balancer.\n    /// @param poolAddress Address of the Balancer pool to query.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromBalancer(\n        address poolAddress,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        IBalancer pool = IBalancer(poolAddress);\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n        if (!pool.isBound(takerToken) || !pool.isBound(makerToken)) {\n            return takerTokenAmounts;\n        }\n\n        BalancerState memory poolState;\n        poolState.takerTokenBalance = pool.getBalance(takerToken);\n        poolState.makerTokenBalance = pool.getBalance(makerToken);\n        poolState.takerTokenWeight = pool.getDenormalizedWeight(takerToken);\n        poolState.makerTokenWeight = pool.getDenormalizedWeight(makerToken);\n        poolState.swapFee = pool.getSwapFee();\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            // Handles this revert scenario:\n            // https://github.com/balancer-labs/balancer-core/blob/master/contracts/BPool.sol#L505\n            if (makerTokenAmounts[i] > _bmul(poolState.makerTokenBalance, MAX_OUT_RATIO)) {\n                break;\n            }\n            try\n                pool.calcInGivenOut\n                    {gas: BALANCER_CALL_GAS}\n                    (\n                        poolState.takerTokenBalance,\n                        poolState.takerTokenWeight,\n                        poolState.makerTokenBalance,\n                        poolState.makerTokenWeight,\n                        makerTokenAmounts[i],\n                        poolState.swapFee\n                    )\n                returns (uint256 amount)\n            {\n                takerTokenAmounts[i] = amount;\n                // Break early if there are 0 amounts\n                if (takerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    /// @dev Hacked version of Balancer's `bmul` function, returning 0 instead\n    ///      of reverting.\n    ///      https://github.com/balancer-labs/balancer-core/blob/master/contracts/BNum.sol#L63-L73\n    /// @param a The first operand.\n    /// @param b The second operand.\n    /// @param c The result of the multiplication, or 0 if `bmul` would've reverted.\n    function _bmul(uint256 a, uint256 b)\n        private\n        pure\n        returns (uint256 c)\n    {\n        uint c0 = a * b;\n        if (a != 0 && c0 / a != b) {\n            return 0;\n        }\n        uint c1 = c0 + (BONE / 2);\n        if (c1 < c0) {\n            return 0;\n        }\n        uint c2 = c1 / BONE;\n        return c2;\n    }\n}\n"
        },
        "./interfaces/IBalancer.sol": {
            "id": 26,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface IBalancer {\n    function isBound(address t) external view returns (bool);\n    function getDenormalizedWeight(address token) external view returns (uint256);\n    function getBalance(address token) external view returns (uint256);\n    function getSwapFee() external view returns (uint256);\n    function calcOutGivenIn(\n        uint256 tokenBalanceIn,\n        uint256 tokenWeightIn,\n        uint256 tokenBalanceOut,\n        uint256 tokenWeightOut,\n        uint256 tokenAmountIn,\n        uint256 swapFee\n    ) external pure returns (uint256 tokenAmountOut);\n    function calcInGivenOut(\n        uint256 tokenBalanceIn,\n        uint256 tokenWeightIn,\n        uint256 tokenBalanceOut,\n        uint256 tokenWeightOut,\n        uint256 tokenAmountOut,\n        uint256 swapFee\n    ) external pure returns (uint256 tokenAmountIn);\n}\n"
        },
        "./BalancerV2Sampler.sol": {
            "id": 2,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./SamplerUtils.sol\";\n\n/// @dev Minimal Balancer V2 Vault interface\n///      for documentation refer to https://github.com/balancer-labs/balancer-core-v2/blob/master/contracts/vault/interfaces/IVault.sol\ninterface IBalancerV2Vault {\n    enum SwapKind { GIVEN_IN, GIVEN_OUT }\n\n    struct BatchSwapStep {\n        bytes32 poolId;\n        uint256 assetInIndex;\n        uint256 assetOutIndex;\n        uint256 amount;\n        bytes userData;\n    }\n\n    struct FundManagement {\n        address sender;\n        bool fromInternalBalance;\n        address payable recipient;\n        bool toInternalBalance;\n    }\n\n    function queryBatchSwap(\n        SwapKind kind,\n        BatchSwapStep[] calldata swaps,\n        IAsset[] calldata assets,\n        FundManagement calldata funds\n    ) external returns (int256[] memory assetDeltas);\n}\ninterface IAsset {\n    // solhint-disable-previous-line no-empty-blocks\n}\n\ncontract BalancerV2Sampler is SamplerUtils {\n\n    struct BalancerV2PoolInfo {\n        bytes32 poolId;\n        address vault;\n    }\n\n    /// @dev Sample sell quotes from Balancer V2.\n    /// @param poolInfo Struct with pool related data\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromBalancerV2(\n        BalancerV2PoolInfo memory poolInfo,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        IBalancerV2Vault vault = IBalancerV2Vault(poolInfo.vault);\n        IAsset[] memory swapAssets = new IAsset[](2);\n        swapAssets[0] = IAsset(takerToken);\n        swapAssets[1] = IAsset(makerToken);\n\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        IBalancerV2Vault.FundManagement memory swapFunds =\n            _createSwapFunds();\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            IBalancerV2Vault.BatchSwapStep[] memory swapSteps =\n                _createSwapSteps(poolInfo, takerTokenAmounts[i]);\n\n            try\n                // For sells we specify the takerToken which is what the vault will receive from the trade\n                vault.queryBatchSwap(IBalancerV2Vault.SwapKind.GIVEN_IN, swapSteps, swapAssets, swapFunds)\n            // amounts represent pool balance deltas from the swap (incoming balance, outgoing balance)\n            returns (int256[] memory amounts) {\n                // Outgoing balance is negative so we need to flip the sign\n                int256 amountOutFromPool = amounts[1] * -1;\n                if (amountOutFromPool <= 0) {\n                    break;\n                }\n                makerTokenAmounts[i] = uint256(amountOutFromPool);\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from Balancer V2.\n    /// @param poolInfo Struct with pool related data\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromBalancerV2(\n        BalancerV2PoolInfo memory poolInfo,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        IBalancerV2Vault vault = IBalancerV2Vault(poolInfo.vault);\n        IAsset[] memory swapAssets = new IAsset[](2);\n        swapAssets[0] = IAsset(takerToken);\n        swapAssets[1] = IAsset(makerToken);\n\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n        IBalancerV2Vault.FundManagement memory swapFunds =\n            _createSwapFunds();\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            IBalancerV2Vault.BatchSwapStep[] memory swapSteps =\n                _createSwapSteps(poolInfo, makerTokenAmounts[i]);\n\n            try\n                // For buys we specify the makerToken which is what taker will receive from the trade\n                vault.queryBatchSwap(IBalancerV2Vault.SwapKind.GIVEN_OUT, swapSteps, swapAssets, swapFunds)\n            returns (int256[] memory amounts) {\n                int256 amountIntoPool = amounts[0];\n                if (amountIntoPool <= 0) {\n                    break;\n                }\n                takerTokenAmounts[i] = uint256(amountIntoPool);\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    function _createSwapSteps(\n        BalancerV2PoolInfo memory poolInfo,\n        uint256 amount\n    ) private pure returns (IBalancerV2Vault.BatchSwapStep[] memory) {\n        IBalancerV2Vault.BatchSwapStep[] memory swapSteps =\n            new IBalancerV2Vault.BatchSwapStep[](1);\n        swapSteps[0] = IBalancerV2Vault.BatchSwapStep({\n            poolId: poolInfo.poolId,\n            assetInIndex: 0,\n            assetOutIndex: 1,\n            amount: amount,\n            userData: \"\"\n        });\n\n        return swapSteps;\n    }\n\n    function _createSwapFunds()\n        private\n        view\n        returns (IBalancerV2Vault.FundManagement memory)\n    {\n        return\n            IBalancerV2Vault.FundManagement({\n                sender: address(this),\n                fromInternalBalance: false,\n                recipient: payable(address(this)),\n                toInternalBalance: false\n            });\n    }\n}\n"
        },
        "./SamplerUtils.sol": {
            "id": 18,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\n\n\ncontract SamplerUtils {\n\n    /// @dev Overridable way to get token decimals.\n    /// @param tokenAddress Address of the token.\n    /// @return decimals The decimal places for the token.\n    function _getTokenDecimals(address tokenAddress)\n        virtual\n        internal\n        view\n        returns (uint8 decimals)\n    {\n        return LibERC20TokenV06.compatDecimals(IERC20TokenV06(tokenAddress));\n    }\n\n    function _toSingleValueArray(uint256 v)\n        internal\n        pure\n        returns (uint256[] memory arr)\n    {\n        arr = new uint256[](1);\n        arr[0] = v;\n    }\n\n    /// @dev Assert that the tokens in a trade pair are valid.\n    /// @param makerToken Address of the maker token.\n    /// @param takerToken Address of the taker token.\n    function _assertValidPair(address makerToken, address takerToken)\n        internal\n        pure\n    {\n        require(makerToken != takerToken, \"ERC20BridgeSampler/INVALID_TOKEN_PAIR\");\n    }\n}\n"
        },
        "@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol": {
            "id": 41,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol\";\nimport \"./IERC20TokenV06.sol\";\n\n\nlibrary LibERC20TokenV06 {\n    bytes constant private DECIMALS_CALL_DATA = hex\"313ce567\";\n\n    /// @dev Calls `IERC20TokenV06(token).approve()`.\n    ///      Reverts if the return data is invalid or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param spender The address that receives an allowance.\n    /// @param allowance The allowance to set.\n    function compatApprove(\n        IERC20TokenV06 token,\n        address spender,\n        uint256 allowance\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.approve.selector,\n            spender,\n            allowance\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).approve()` and sets the allowance to the\n    ///      maximum if the current approval is not already >= an amount.\n    ///      Reverts if the return data is invalid or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param spender The address that receives an allowance.\n    /// @param amount The minimum allowance needed.\n    function approveIfBelow(\n        IERC20TokenV06 token,\n        address spender,\n        uint256 amount\n    )\n        internal\n    {\n        if (token.allowance(address(this), spender) < amount) {\n            compatApprove(token, spender, uint256(-1));\n        }\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).transfer()`.\n    ///      Reverts if the return data is invalid or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param to The address that receives the tokens\n    /// @param amount Number of tokens to transfer.\n    function compatTransfer(\n        IERC20TokenV06 token,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.transfer.selector,\n            to,\n            amount\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).transferFrom()`.\n    ///      Reverts if the return data is invalid or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param from The owner of the tokens.\n    /// @param to The address that receives the tokens\n    /// @param amount Number of tokens to transfer.\n    function compatTransferFrom(\n        IERC20TokenV06 token,\n        address from,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.transferFrom.selector,\n            from,\n            to,\n            amount\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Retrieves the number of decimals for a token.\n    ///      Returns `18` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @return tokenDecimals The number of decimals places for the token.\n    function compatDecimals(IERC20TokenV06 token)\n        internal\n        view\n        returns (uint8 tokenDecimals)\n    {\n        tokenDecimals = 18;\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(DECIMALS_CALL_DATA);\n        if (didSucceed && resultData.length >= 32) {\n            tokenDecimals = uint8(LibBytesV06.readUint256(resultData, 0));\n        }\n    }\n\n    /// @dev Retrieves the allowance for a token, owner, and spender.\n    ///      Returns `0` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @param owner The owner of the tokens.\n    /// @param spender The address the spender.\n    /// @return allowance_ The allowance for a token, owner, and spender.\n    function compatAllowance(IERC20TokenV06 token, address owner, address spender)\n        internal\n        view\n        returns (uint256 allowance_)\n    {\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(\n            abi.encodeWithSelector(\n                token.allowance.selector,\n                owner,\n                spender\n            )\n        );\n        if (didSucceed && resultData.length >= 32) {\n            allowance_ = LibBytesV06.readUint256(resultData, 0);\n        }\n    }\n\n    /// @dev Retrieves the balance for a token owner.\n    ///      Returns `0` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @param owner The owner of the tokens.\n    /// @return balance The token balance of an owner.\n    function compatBalanceOf(IERC20TokenV06 token, address owner)\n        internal\n        view\n        returns (uint256 balance)\n    {\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(\n            abi.encodeWithSelector(\n                token.balanceOf.selector,\n                owner\n            )\n        );\n        if (didSucceed && resultData.length >= 32) {\n            balance = LibBytesV06.readUint256(resultData, 0);\n        }\n    }\n\n    /// @dev Executes a call on address `target` with calldata `callData`\n    ///      and asserts that either nothing was returned or a single boolean\n    ///      was returned equal to `true`.\n    /// @param target The call target.\n    /// @param callData The abi-encoded call data.\n    function _callWithOptionalBooleanResult(\n        address target,\n        bytes memory callData\n    )\n        private\n    {\n        (bool didSucceed, bytes memory resultData) = target.call(callData);\n        // Revert if the call reverted.\n        if (!didSucceed) {\n            LibRichErrorsV06.rrevert(resultData);\n        }\n        // If we get back 0 returndata, this may be a non-standard ERC-20 that\n        // does not return a boolean. Check that it at least contains code.\n        if (resultData.length == 0) {\n            uint256 size;\n            assembly { size := extcodesize(target) }\n            require(size > 0, \"invalid token address, contains no code\");\n            return;\n        }\n        // If we get back at least 32 bytes, we know the target address\n        // contains code, and we assume it is a token that returned a boolean\n        // success value, which must be true.\n        if (resultData.length >= 32) {\n            uint256 result = LibBytesV06.readUint256(resultData, 0);\n            if (result == 1) {\n                return;\n            } else {\n                LibRichErrorsV06.rrevert(resultData);\n            }\n        }\n        // If 0 < returndatasize < 32, the target is a contract, but not a\n        // valid token.\n        LibRichErrorsV06.rrevert(resultData);\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol": {
            "id": 47,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibRichErrorsV06 {\n\n    // bytes4(keccak256(\"Error(string)\"))\n    bytes4 internal constant STANDARD_ERROR_SELECTOR = 0x08c379a0;\n\n    // solhint-disable func-name-mixedcase\n    /// @dev ABI encode a standard, string revert error payload.\n    ///      This is the same payload that would be included by a `revert(string)`\n    ///      solidity statement. It has the function signature `Error(string)`.\n    /// @param message The error string.\n    /// @return The ABI encoded error.\n    function StandardError(string memory message)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            STANDARD_ERROR_SELECTOR,\n            bytes(message)\n        );\n    }\n    // solhint-enable func-name-mixedcase\n\n    /// @dev Reverts an encoded rich revert reason `errorData`.\n    /// @param errorData ABI encoded error data.\n    function rrevert(bytes memory errorData)\n        internal\n        pure\n    {\n        assembly {\n            revert(add(errorData, 0x20), mload(errorData))\n        }\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol": {
            "id": 42,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./errors/LibBytesRichErrorsV06.sol\";\nimport \"./errors/LibRichErrorsV06.sol\";\n\n\nlibrary LibBytesV06 {\n\n    using LibBytesV06 for bytes;\n\n    /// @dev Gets the memory address for a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of byte array. This\n    ///         points to the header of the byte array which contains\n    ///         the length.\n    function rawAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := input\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Gets the memory address for the contents of a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of the contents of the byte array.\n    function contentAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := add(input, 32)\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Copies `length` bytes from memory location `source` to `dest`.\n    /// @param dest memory address to copy bytes to.\n    /// @param source memory address to copy bytes from.\n    /// @param length number of bytes to copy.\n    function memCopy(\n        uint256 dest,\n        uint256 source,\n        uint256 length\n    )\n        internal\n        pure\n    {\n        if (length < 32) {\n            // Handle a partial word by reading destination and masking\n            // off the bits we are interested in.\n            // This correctly handles overlap, zero lengths and source == dest\n            assembly {\n                let mask := sub(exp(256, sub(32, length)), 1)\n                let s := and(mload(source), not(mask))\n                let d := and(mload(dest), mask)\n                mstore(dest, or(s, d))\n            }\n        } else {\n            // Skip the O(length) loop when source == dest.\n            if (source == dest) {\n                return;\n            }\n\n            // For large copies we copy whole words at a time. The final\n            // word is aligned to the end of the range (instead of after the\n            // previous) to handle partial words. So a copy will look like this:\n            //\n            //  ####\n            //      ####\n            //          ####\n            //            ####\n            //\n            // We handle overlap in the source and destination range by\n            // changing the copying direction. This prevents us from\n            // overwriting parts of source that we still need to copy.\n            //\n            // This correctly handles source == dest\n            //\n            if (source > dest) {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because it\n                    // is easier to compare with in the loop, and these\n                    // are also the addresses we need for copying the\n                    // last bytes.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the last 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the last bytes in\n                    // source already due to overlap.\n                    let last := mload(sEnd)\n\n                    // Copy whole words front to back\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} lt(source, sEnd) {} {\n                        mstore(dest, mload(source))\n                        source := add(source, 32)\n                        dest := add(dest, 32)\n                    }\n\n                    // Write the last 32 bytes\n                    mstore(dEnd, last)\n                }\n            } else {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because those\n                    // are the starting points when copying a word at the end.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the first 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the first bytes in\n                    // source already due to overlap.\n                    let first := mload(source)\n\n                    // Copy whole words back to front\n                    // We use a signed comparisson here to allow dEnd to become\n                    // negative (happens when source and dest < 32). Valid\n                    // addresses in local memory will never be larger than\n                    // 2**255, so they can be safely re-interpreted as signed.\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} slt(dest, dEnd) {} {\n                        mstore(dEnd, mload(sEnd))\n                        sEnd := sub(sEnd, 32)\n                        dEnd := sub(dEnd, 32)\n                    }\n\n                    // Write the first 32 bytes\n                    mstore(dest, first)\n                }\n            }\n        }\n    }\n\n    /// @dev Returns a slices from a byte array.\n    /// @param b The byte array to take a slice from.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function slice(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure and copy contents\n        result = new bytes(to - from);\n        memCopy(\n            result.contentAddress(),\n            b.contentAddress() + from,\n            result.length\n        );\n        return result;\n    }\n\n    /// @dev Returns a slice from a byte array without preserving the input.\n    ///      When `from == 0`, the original array will match the slice.\n    ///      In other cases its state will be corrupted.\n    /// @param b The byte array to take a slice from. Will be destroyed in the process.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function sliceDestructive(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure around [from, to) in-place.\n        assembly {\n            result := add(b, from)\n            mstore(result, sub(to, from))\n        }\n        return result;\n    }\n\n    /// @dev Pops the last byte off of a byte array by modifying its length.\n    /// @param b Byte array that will be modified.\n    /// @return result The byte that was popped off.\n    function popLastByte(bytes memory b)\n        internal\n        pure\n        returns (bytes1 result)\n    {\n        if (b.length == 0) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanZeroRequired,\n                b.length,\n                0\n            ));\n        }\n\n        // Store last byte.\n        result = b[b.length - 1];\n\n        assembly {\n            // Decrement length of byte array.\n            let newLen := sub(mload(b), 1)\n            mstore(b, newLen)\n        }\n        return result;\n    }\n\n    /// @dev Tests equality of two byte arrays.\n    /// @param lhs First byte array to compare.\n    /// @param rhs Second byte array to compare.\n    /// @return equal True if arrays are the same. False otherwise.\n    function equals(\n        bytes memory lhs,\n        bytes memory rhs\n    )\n        internal\n        pure\n        returns (bool equal)\n    {\n        // Keccak gas cost is 30 + numWords * 6. This is a cheap way to compare.\n        // We early exit on unequal lengths, but keccak would also correctly\n        // handle this.\n        return lhs.length == rhs.length && keccak256(lhs) == keccak256(rhs);\n    }\n\n    /// @dev Reads an address from a position in a byte array.\n    /// @param b Byte array containing an address.\n    /// @param index Index in byte array of address.\n    /// @return result address from byte array.\n    function readAddress(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (address result)\n    {\n        if (b.length < index + 20) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Read address from array memory\n        assembly {\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 20-byte mask to obtain address\n            result := and(mload(add(b, index)), 0xffffffffffffffffffffffffffffffffffffffff)\n        }\n        return result;\n    }\n\n    /// @dev Writes an address into a specific position in a byte array.\n    /// @param b Byte array to insert address into.\n    /// @param index Index in byte array of address.\n    /// @param input Address to put into byte array.\n    function writeAddress(\n        bytes memory b,\n        uint256 index,\n        address input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 20) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Store address into array memory\n        assembly {\n            // The address occupies 20 bytes and mstore stores 32 bytes.\n            // First fetch the 32-byte word where we'll be storing the address, then\n            // apply a mask so we have only the bytes in the word that the address will not occupy.\n            // Then combine these bytes with the address and store the 32 bytes back to memory with mstore.\n\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 12-byte mask to obtain extra bytes occupying word of memory where we'll store the address\n            let neighbors := and(\n                mload(add(b, index)),\n                0xffffffffffffffffffffffff0000000000000000000000000000000000000000\n            )\n\n            // Make sure input address is clean.\n            // (Solidity does not guarantee this)\n            input := and(input, 0xffffffffffffffffffffffffffffffffffffffff)\n\n            // Store the neighbors and address into memory\n            mstore(add(b, index), xor(input, neighbors))\n        }\n    }\n\n    /// @dev Reads a bytes32 value from a position in a byte array.\n    /// @param b Byte array containing a bytes32 value.\n    /// @param index Index in byte array of bytes32 value.\n    /// @return result bytes32 value from byte array.\n    function readBytes32(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        if (b.length < index + 32) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            result := mload(add(b, index))\n        }\n        return result;\n    }\n\n    /// @dev Writes a bytes32 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input bytes32 to put into byte array.\n    function writeBytes32(\n        bytes memory b,\n        uint256 index,\n        bytes32 input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 32) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            mstore(add(b, index), input)\n        }\n    }\n\n    /// @dev Reads a uint256 value from a position in a byte array.\n    /// @param b Byte array containing a uint256 value.\n    /// @param index Index in byte array of uint256 value.\n    /// @return result uint256 value from byte array.\n    function readUint256(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (uint256 result)\n    {\n        result = uint256(readBytes32(b, index));\n        return result;\n    }\n\n    /// @dev Writes a uint256 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input uint256 to put into byte array.\n    function writeUint256(\n        bytes memory b,\n        uint256 index,\n        uint256 input\n    )\n        internal\n        pure\n    {\n        writeBytes32(b, index, bytes32(input));\n    }\n\n    /// @dev Reads an unpadded bytes4 value from a position in a byte array.\n    /// @param b Byte array containing a bytes4 value.\n    /// @param index Index in byte array of bytes4 value.\n    /// @return result bytes4 value from byte array.\n    function readBytes4(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes4 result)\n    {\n        if (b.length < index + 4) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsFourRequired,\n                b.length,\n                index + 4\n            ));\n        }\n\n        // Arrays are prefixed by a 32 byte length field\n        index += 32;\n\n        // Read the bytes4 from array memory\n        assembly {\n            result := mload(add(b, index))\n            // Solidity does not require us to clean the trailing bytes.\n            // We do it anyway\n            result := and(result, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)\n        }\n        return result;\n    }\n\n    /// @dev Writes a new length to a byte array.\n    ///      Decreasing length will lead to removing the corresponding lower order bytes from the byte array.\n    ///      Increasing length may lead to appending adjacent in-memory bytes to the end of the byte array.\n    /// @param b Bytes array to write new length to.\n    /// @param length New length of byte array.\n    function writeLength(bytes memory b, uint256 length)\n        internal\n        pure\n    {\n        assembly {\n            mstore(b, length)\n        }\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/errors/LibBytesRichErrorsV06.sol": {
            "id": 45,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibBytesRichErrorsV06 {\n\n    enum InvalidByteOperationErrorCodes {\n        FromLessThanOrEqualsToRequired,\n        ToLessThanOrEqualsLengthRequired,\n        LengthGreaterThanZeroRequired,\n        LengthGreaterThanOrEqualsFourRequired,\n        LengthGreaterThanOrEqualsTwentyRequired,\n        LengthGreaterThanOrEqualsThirtyTwoRequired,\n        LengthGreaterThanOrEqualsNestedBytesLengthRequired,\n        DestinationLengthGreaterThanOrEqualSourceLengthRequired\n    }\n\n    // bytes4(keccak256(\"InvalidByteOperationError(uint8,uint256,uint256)\"))\n    bytes4 internal constant INVALID_BYTE_OPERATION_ERROR_SELECTOR =\n        0x28006595;\n\n    // solhint-disable func-name-mixedcase\n    function InvalidByteOperationError(\n        InvalidByteOperationErrorCodes errorCode,\n        uint256 offset,\n        uint256 required\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            INVALID_BYTE_OPERATION_ERROR_SELECTOR,\n            errorCode,\n            offset,\n            required\n        );\n    }\n}\n"
        },
        "@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol": {
            "id": 40,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\ninterface IERC20TokenV06 {\n\n    // solhint-disable no-simple-event-func-name\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 value\n    );\n\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n\n    /// @dev send `value` token to `to` from `msg.sender`\n    /// @param to The address of the recipient\n    /// @param value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transfer(address to, uint256 value)\n        external\n        returns (bool);\n\n    /// @dev send `value` token to `to` from `from` on the condition it is approved by `from`\n    /// @param from The address of the sender\n    /// @param to The address of the recipient\n    /// @param value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    )\n        external\n        returns (bool);\n\n    /// @dev `msg.sender` approves `spender` to spend `value` tokens\n    /// @param spender The address of the account able to transfer the tokens\n    /// @param value The amount of wei to be approved for transfer\n    /// @return Always true if the call has enough gas to complete execution\n    function approve(address spender, uint256 value)\n        external\n        returns (bool);\n\n    /// @dev Query total supply of token\n    /// @return Total supply of token\n    function totalSupply()\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the balance of `owner`.\n    /// @param owner The address from which the balance will be retrieved\n    /// @return Balance of owner\n    function balanceOf(address owner)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the allowance for `spender` to spend from `owner`.\n    /// @param owner The address of the account owning tokens\n    /// @param spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the number of decimals this token has.\n    function decimals()\n        external\n        view\n        returns (uint8);\n}\n"
        },
        "./BancorSampler.sol": {
            "id": 3,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IBancor.sol\";\n\ncontract CompilerHack {}\n\ncontract BancorSampler {\n\n    /// @dev Base gas limit for Bancor calls.\n    uint256 constant private BANCOR_CALL_GAS = 300e3; // 300k\n\n    struct BancorSamplerOpts {\n        IBancorRegistry registry;\n        address[][] paths;\n    }\n\n    /// @dev Sample sell quotes from Bancor.\n    /// @param opts BancorSamplerOpts The Bancor registry contract address and paths\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return bancorNetwork the Bancor Network address\n    /// @return path the selected conversion path from bancor\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromBancor(\n        BancorSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (address bancorNetwork, address[] memory path, uint256[] memory makerTokenAmounts)\n    {\n        if (opts.paths.length == 0) {\n            return (bancorNetwork, path, makerTokenAmounts);\n        }\n        (bancorNetwork, path) = _findBestPath(opts, takerToken, makerToken, takerTokenAmounts);\n        makerTokenAmounts = new uint256[](takerTokenAmounts.length);\n\n        for (uint256 i = 0; i < makerTokenAmounts.length; i++) {\n            try\n                IBancorNetwork(bancorNetwork)\n                    .rateByPath\n                        {gas: BANCOR_CALL_GAS}\n                        (path, takerTokenAmounts[i])\n                returns (uint256 amount)\n            {\n                makerTokenAmounts[i] = amount;\n                // Break early if there are 0 amounts\n                if (makerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n        return (bancorNetwork, path, makerTokenAmounts);\n    }\n\n    /// @dev Sample buy quotes from Bancor. Unimplemented\n    /// @param opts BancorSamplerOpts The Bancor registry contract address and paths\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return bancorNetwork the Bancor Network address\n    /// @return path the selected conversion path from bancor\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromBancor(\n        BancorSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (address bancorNetwork, address[] memory path, uint256[] memory takerTokenAmounts)\n    {\n    }\n\n    function _findBestPath(\n        BancorSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        internal\n        view\n        returns (address bancorNetwork, address[] memory path)\n    {\n        bancorNetwork = opts.registry.getAddress(opts.registry.BANCOR_NETWORK());\n        if (opts.paths.length == 0) {\n            return (bancorNetwork, path);\n        }\n        uint256 maxBoughtAmount = 0;\n        // Find the best path by selling the largest taker amount\n        for (uint256 i = 0; i < opts.paths.length; i++) {\n            if (opts.paths[i].length < 2) {\n                continue;\n            }\n\n            try\n                IBancorNetwork(bancorNetwork)\n                    .rateByPath\n                        {gas: BANCOR_CALL_GAS}\n                        (opts.paths[i], takerTokenAmounts[takerTokenAmounts.length-1])\n                returns (uint256 amount)\n            {\n                if (amount > maxBoughtAmount) {\n                    maxBoughtAmount = amount;\n                    path = opts.paths[i];\n                }\n            } catch {\n                // Swallow failures, leaving all results as zero.\n                continue;\n            }\n        }\n    }\n}\n"
        },
        "./interfaces/IBancor.sol": {
            "id": 27,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface IBancor {}\n\ninterface IBancorNetwork {\n  function conversionPath(address _sourceToken, address _targetToken) external view returns (address[] memory);\n  function rateByPath(address[] memory _path, uint256 _amount) external view returns (uint256);\n}\n\ninterface IBancorRegistry {\n    function getAddress(bytes32 _contractName) external view returns (address);\n    function BANCOR_NETWORK() external view returns (bytes32);\n}\n"
        },
        "./CurveSampler.sol": {
            "id": 4,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/ICurve.sol\";\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\n\n\ncontract CurveSampler is\n    SamplerUtils,\n    ApproximateBuys\n{\n    /// @dev Information for sampling from curve sources.\n    struct CurveInfo {\n        address poolAddress;\n        bytes4 sellQuoteFunctionSelector;\n        bytes4 buyQuoteFunctionSelector;\n    }\n\n    /// @dev Base gas limit for Curve calls. Some Curves have multiple tokens\n    ///      So a reasonable ceil is 150k per token. Biggest Curve has 4 tokens.\n    uint256 constant private CURVE_CALL_GAS = 2000e3; // Was 600k for Curve but SnowSwap is using 1500k+\n\n    /// @dev Sample sell quotes from Curve.\n    /// @param curveInfo Curve information specific to this token pair.\n    /// @param fromTokenIdx Index of the taker token (what to sell).\n    /// @param toTokenIdx Index of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromCurve(\n        CurveInfo memory curveInfo,\n        int128 fromTokenIdx,\n        int128 toTokenIdx,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            (bool didSucceed, bytes memory resultData) =\n                curveInfo.poolAddress.staticcall.gas(CURVE_CALL_GAS)(\n                    abi.encodeWithSelector(\n                        curveInfo.sellQuoteFunctionSelector,\n                        fromTokenIdx,\n                        toTokenIdx,\n                        takerTokenAmounts[i]\n                    ));\n            uint256 buyAmount = 0;\n            if (didSucceed) {\n                buyAmount = abi.decode(resultData, (uint256));\n            }\n            makerTokenAmounts[i] = buyAmount;\n            // Break early if there are 0 amounts\n            if (makerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from Curve.\n    /// @param curveInfo Curve information specific to this token pair.\n    /// @param fromTokenIdx Index of the taker token (what to sell).\n    /// @param toTokenIdx Index of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromCurve(\n        CurveInfo memory curveInfo,\n        int128 fromTokenIdx,\n        int128 toTokenIdx,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        if (curveInfo.buyQuoteFunctionSelector == bytes4(0)) {\n            // Buys not supported on this curve, so approximate it.\n            return _sampleApproximateBuys(\n                ApproximateBuyQuoteOpts({\n                    makerTokenData: abi.encode(toTokenIdx, curveInfo),\n                    takerTokenData: abi.encode(fromTokenIdx, curveInfo),\n                    getSellQuoteCallback: _sampleSellForApproximateBuyFromCurve\n                }),\n                makerTokenAmounts\n            );\n        }\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            (bool didSucceed, bytes memory resultData) =\n                curveInfo.poolAddress.staticcall.gas(CURVE_CALL_GAS)(\n                    abi.encodeWithSelector(\n                        curveInfo.buyQuoteFunctionSelector,\n                        fromTokenIdx,\n                        toTokenIdx,\n                        makerTokenAmounts[i]\n                    ));\n            uint256 sellAmount = 0;\n            if (didSucceed) {\n                sellAmount = abi.decode(resultData, (uint256));\n            }\n            takerTokenAmounts[i] = sellAmount;\n            // Break early if there are 0 amounts\n            if (takerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n    }\n\n    function _sampleSellForApproximateBuyFromCurve(\n        bytes memory takerTokenData,\n        bytes memory makerTokenData,\n        uint256 sellAmount\n    )\n        private\n        view\n        returns (uint256 buyAmount)\n    {\n        (int128 takerTokenIdx, CurveInfo memory curveInfo) =\n            abi.decode(takerTokenData, (int128, CurveInfo));\n        (int128 makerTokenIdx) =\n            abi.decode(makerTokenData, (int128));\n        (bool success, bytes memory resultData) =\n            address(this).staticcall(abi.encodeWithSelector(\n                this.sampleSellsFromCurve.selector,\n                curveInfo,\n                takerTokenIdx,\n                makerTokenIdx,\n                _toSingleValueArray(sellAmount)\n            ));\n        if (!success) {\n            return 0;\n        }\n        // solhint-disable-next-line indent\n        return abi.decode(resultData, (uint256[]))[0];\n    }\n}\n"
        },
        "./interfaces/ICurve.sol": {
            "id": 28,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\n// solhint-disable func-name-mixedcase\ninterface ICurve {\n\n    /// @dev Sell `sellAmount` of `fromToken` token and receive `toToken` token.\n    ///      This function exists on later versions of Curve (USDC/DAI/USDT)\n    /// @param i The token index being sold.\n    /// @param j The token index being bought.\n    /// @param sellAmount The amount of token being bought.\n    /// @param minBuyAmount The minimum buy amount of the token being bought.\n    function exchange_underlying(\n        int128 i,\n        int128 j,\n        uint256 sellAmount,\n        uint256 minBuyAmount\n    )\n        external;\n\n    /// @dev Get the amount of `toToken` by selling `sellAmount` of `fromToken`\n    /// @param i The token index being sold.\n    /// @param j The token index being bought.\n    /// @param sellAmount The amount of token being bought.\n    function get_dy_underlying(\n        int128 i,\n        int128 j,\n        uint256 sellAmount\n    )\n        external\n        returns (uint256 dy);\n\n    /// @dev Get the amount of `fromToken` by buying `buyAmount` of `toToken`\n    ///      This function exists on later versions of Curve (USDC/DAI/USDT)\n    /// @param i The token index being sold.\n    /// @param j The token index being bought.\n    /// @param buyAmount The amount of token being bought.\n    function get_dx_underlying(\n        int128 i,\n        int128 j,\n        uint256 buyAmount\n    )\n        external\n        returns (uint256 dx);\n\n    /// @dev Get the underlying token address from the token index\n    /// @param i The token index.\n    function underlying_coins(\n        int128 i\n    )\n        external\n        returns (address tokenAddress);\n}\n"
        },
        "./ApproximateBuys.sol": {
            "id": 0,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/LibMathV06.sol\";\n\n\ncontract ApproximateBuys {\n\n    /// @dev Information computing buy quotes for sources that do not have native\n    ///      buy quote support.\n    struct ApproximateBuyQuoteOpts {\n        // Arbitrary maker token data to pass to `getSellQuoteCallback`.\n        bytes makerTokenData;\n        // Arbitrary taker token data to pass to `getSellQuoteCallback`.\n        bytes takerTokenData;\n        // Callback to retrieve a sell quote.\n        function (bytes memory, bytes memory, uint256)\n            internal\n            view\n            returns (uint256) getSellQuoteCallback;\n    }\n\n    uint256 private constant ONE_HUNDED_PERCENT_BPS = 1e4;\n    /// @dev Maximum approximate (positive) error rate when approximating a buy quote.\n    uint256 private constant APPROXIMATE_BUY_TARGET_EPSILON_BPS = 0.0005e4;\n    /// @dev Maximum iterations to perform when approximating a buy quote.\n    uint256 private constant APPROXIMATE_BUY_MAX_ITERATIONS = 5;\n\n    function _sampleApproximateBuys(\n        ApproximateBuyQuoteOpts memory opts,\n        uint256[] memory makerTokenAmounts\n    )\n        internal\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        takerTokenAmounts = new uint256[](makerTokenAmounts.length);\n        if (makerTokenAmounts.length == 0) {\n            return takerTokenAmounts;\n        }\n\n        uint256 sellAmount = opts.getSellQuoteCallback(\n            opts.makerTokenData,\n            opts.takerTokenData,\n            makerTokenAmounts[0]\n        );\n        if (sellAmount == 0) {\n            return takerTokenAmounts;\n        }\n\n        uint256 buyAmount = opts.getSellQuoteCallback(\n            opts.takerTokenData,\n            opts.makerTokenData,\n            sellAmount\n        );\n        if (buyAmount == 0) {\n            return takerTokenAmounts;\n        }\n\n        for (uint256 i = 0; i < makerTokenAmounts.length; i++) {\n            for (uint256 iter = 0; iter < APPROXIMATE_BUY_MAX_ITERATIONS; iter++) {\n                // adjustedSellAmount = previousSellAmount * (target/actual) * JUMP_MULTIPLIER\n                sellAmount = _safeGetPartialAmountCeil(\n                    makerTokenAmounts[i],\n                    buyAmount,\n                    sellAmount\n                );\n                if (sellAmount == 0) {\n                    break;\n                }\n                sellAmount = _safeGetPartialAmountCeil(\n                    (ONE_HUNDED_PERCENT_BPS + APPROXIMATE_BUY_TARGET_EPSILON_BPS),\n                    ONE_HUNDED_PERCENT_BPS,\n                    sellAmount\n                );\n                if (sellAmount == 0) {\n                    break;\n                }\n                uint256 _buyAmount = opts.getSellQuoteCallback(\n                    opts.takerTokenData,\n                    opts.makerTokenData,\n                    sellAmount\n                );\n                if (_buyAmount == 0) {\n                    break;\n                }\n                // We re-use buyAmount next iteration, only assign if it is\n                // non zero\n                buyAmount = _buyAmount;\n                // If we've reached our goal, exit early\n                if (buyAmount >= makerTokenAmounts[i]) {\n                    uint256 eps =\n                        (buyAmount - makerTokenAmounts[i]) * ONE_HUNDED_PERCENT_BPS /\n                        makerTokenAmounts[i];\n                    if (eps <= APPROXIMATE_BUY_TARGET_EPSILON_BPS) {\n                        break;\n                    }\n                }\n            }\n            // We do our best to close in on the requested amount, but we can either over buy or under buy and exit\n            // if we hit a max iteration limit\n            // We scale the sell amount to get the approximate target\n            takerTokenAmounts[i] = _safeGetPartialAmountCeil(\n                makerTokenAmounts[i],\n                buyAmount,\n                sellAmount\n            );\n        }\n    }\n\n    function _safeGetPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        view\n        returns (uint256 partialAmount)\n    {\n        if (numerator == 0 || target == 0 || denominator == 0) return 0;\n        uint256 c = numerator * target;\n        if (c / numerator != target) return 0;\n        return (c + (denominator - 1)) / denominator;\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/LibMathV06.sol": {
            "id": 43,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./LibSafeMathV06.sol\";\nimport \"./errors/LibRichErrorsV06.sol\";\nimport \"./errors/LibMathRichErrorsV06.sol\";\n\n\nlibrary LibMathV06 {\n\n    using LibSafeMathV06 for uint256;\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    ///      Reverts if rounding error is >= 0.1%\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded down.\n    function safeGetPartialAmountFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        if (isRoundingErrorFloor(\n                numerator,\n                denominator,\n                target\n        )) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.RoundingError(\n                numerator,\n                denominator,\n                target\n            ));\n        }\n\n        partialAmount = numerator.safeMul(target).safeDiv(denominator);\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    ///      Reverts if rounding error is >= 0.1%\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded up.\n    function safeGetPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        if (isRoundingErrorCeil(\n                numerator,\n                denominator,\n                target\n        )) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.RoundingError(\n                numerator,\n                denominator,\n                target\n            ));\n        }\n\n        // safeDiv computes `floor(a / b)`. We use the identity (a, b integer):\n        //       ceil(a / b) = floor((a + b - 1) / b)\n        // To implement `ceil(a / b)` using safeDiv.\n        partialAmount = numerator.safeMul(target)\n            .safeAdd(denominator.safeSub(1))\n            .safeDiv(denominator);\n\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded down.\n    function getPartialAmountFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        partialAmount = numerator.safeMul(target).safeDiv(denominator);\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded up.\n    function getPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        // safeDiv computes `floor(a / b)`. We use the identity (a, b integer):\n        //       ceil(a / b) = floor((a + b - 1) / b)\n        // To implement `ceil(a / b)` using safeDiv.\n        partialAmount = numerator.safeMul(target)\n            .safeAdd(denominator.safeSub(1))\n            .safeDiv(denominator);\n\n        return partialAmount;\n    }\n\n    /// @dev Checks if rounding error >= 0.1% when rounding down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to multiply with numerator/denominator.\n    /// @return isError Rounding error is present.\n    function isRoundingErrorFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bool isError)\n    {\n        if (denominator == 0) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.DivisionByZeroError());\n        }\n\n        // The absolute rounding error is the difference between the rounded\n        // value and the ideal value. The relative rounding error is the\n        // absolute rounding error divided by the absolute value of the\n        // ideal value. This is undefined when the ideal value is zero.\n        //\n        // The ideal value is `numerator * target / denominator`.\n        // Let's call `numerator * target % denominator` the remainder.\n        // The absolute error is `remainder / denominator`.\n        //\n        // When the ideal value is zero, we require the absolute error to\n        // be zero. Fortunately, this is always the case. The ideal value is\n        // zero iff `numerator == 0` and/or `target == 0`. In this case the\n        // remainder and absolute error are also zero.\n        if (target == 0 || numerator == 0) {\n            return false;\n        }\n\n        // Otherwise, we want the relative rounding error to be strictly\n        // less than 0.1%.\n        // The relative error is `remainder / (numerator * target)`.\n        // We want the relative error less than 1 / 1000:\n        //        remainder / (numerator * denominator)  <  1 / 1000\n        // or equivalently:\n        //        1000 * remainder  <  numerator * target\n        // so we have a rounding error iff:\n        //        1000 * remainder  >=  numerator * target\n        uint256 remainder = mulmod(\n            target,\n            numerator,\n            denominator\n        );\n        isError = remainder.safeMul(1000) >= numerator.safeMul(target);\n        return isError;\n    }\n\n    /// @dev Checks if rounding error >= 0.1% when rounding up.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to multiply with numerator/denominator.\n    /// @return isError Rounding error is present.\n    function isRoundingErrorCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bool isError)\n    {\n        if (denominator == 0) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.DivisionByZeroError());\n        }\n\n        // See the comments in `isRoundingError`.\n        if (target == 0 || numerator == 0) {\n            // When either is zero, the ideal value and rounded value are zero\n            // and there is no rounding error. (Although the relative error\n            // is undefined.)\n            return false;\n        }\n        // Compute remainder as before\n        uint256 remainder = mulmod(\n            target,\n            numerator,\n            denominator\n        );\n        remainder = denominator.safeSub(remainder) % denominator;\n        isError = remainder.safeMul(1000) >= numerator.safeMul(target);\n        return isError;\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol": {
            "id": 44,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./errors/LibRichErrorsV06.sol\";\nimport \"./errors/LibSafeMathRichErrorsV06.sol\";\n\n\nlibrary LibSafeMathV06 {\n\n    function safeMul(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        if (c / a != b) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.MULTIPLICATION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function safeDiv(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b == 0) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.DIVISION_BY_ZERO,\n                a,\n                b\n            ));\n        }\n        uint256 c = a / b;\n        return c;\n    }\n\n    function safeSub(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b > a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.SUBTRACTION_UNDERFLOW,\n                a,\n                b\n            ));\n        }\n        return a - b;\n    }\n\n    function safeAdd(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint256 c = a + b;\n        if (c < a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.ADDITION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function max256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a < b ? a : b;\n    }\n\n    function safeMul128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (a == 0) {\n            return 0;\n        }\n        uint128 c = a * b;\n        if (c / a != b) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.MULTIPLICATION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function safeDiv128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (b == 0) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.DIVISION_BY_ZERO,\n                a,\n                b\n            ));\n        }\n        uint128 c = a / b;\n        return c;\n    }\n\n    function safeSub128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (b > a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.SUBTRACTION_UNDERFLOW,\n                a,\n                b\n            ));\n        }\n        return a - b;\n    }\n\n    function safeAdd128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        uint128 c = a + b;\n        if (c < a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.ADDITION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function max128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        return a < b ? a : b;\n    }\n\n    function safeDowncastToUint128(uint256 a)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (a > type(uint128).max) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256DowncastError(\n                LibSafeMathRichErrorsV06.DowncastErrorCodes.VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT128,\n                a\n            ));\n        }\n        return uint128(a);\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/errors/LibSafeMathRichErrorsV06.sol": {
            "id": 48,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibSafeMathRichErrorsV06 {\n\n    // bytes4(keccak256(\"Uint256BinOpError(uint8,uint256,uint256)\"))\n    bytes4 internal constant UINT256_BINOP_ERROR_SELECTOR =\n        0xe946c1bb;\n\n    // bytes4(keccak256(\"Uint256DowncastError(uint8,uint256)\"))\n    bytes4 internal constant UINT256_DOWNCAST_ERROR_SELECTOR =\n        0xc996af7b;\n\n    enum BinOpErrorCodes {\n        ADDITION_OVERFLOW,\n        MULTIPLICATION_OVERFLOW,\n        SUBTRACTION_UNDERFLOW,\n        DIVISION_BY_ZERO\n    }\n\n    enum DowncastErrorCodes {\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT32,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT64,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT96,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT128\n    }\n\n    // solhint-disable func-name-mixedcase\n    function Uint256BinOpError(\n        BinOpErrorCodes errorCode,\n        uint256 a,\n        uint256 b\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            UINT256_BINOP_ERROR_SELECTOR,\n            errorCode,\n            a,\n            b\n        );\n    }\n\n    function Uint256DowncastError(\n        DowncastErrorCodes errorCode,\n        uint256 a\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            UINT256_DOWNCAST_ERROR_SELECTOR,\n            errorCode,\n            a\n        );\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/errors/LibMathRichErrorsV06.sol": {
            "id": 46,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibMathRichErrorsV06 {\n\n    // bytes4(keccak256(\"DivisionByZeroError()\"))\n    bytes internal constant DIVISION_BY_ZERO_ERROR =\n        hex\"a791837c\";\n\n    // bytes4(keccak256(\"RoundingError(uint256,uint256,uint256)\"))\n    bytes4 internal constant ROUNDING_ERROR_SELECTOR =\n        0x339f3de2;\n\n    // solhint-disable func-name-mixedcase\n    function DivisionByZeroError()\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return DIVISION_BY_ZERO_ERROR;\n    }\n\n    function RoundingError(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            ROUNDING_ERROR_SELECTOR,\n            numerator,\n            denominator,\n            target\n        );\n    }\n}\n"
        },
        "./DODOSampler.sol": {
            "id": 5,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\n\n\ninterface IDODOZoo {\n    function getDODO(address baseToken, address quoteToken) external view returns (address);\n}\n\ninterface IDODOHelper {\n    function querySellQuoteToken(address dodo, uint256 amount) external view returns (uint256);\n}\n\ninterface IDODO {\n    function querySellBaseToken(uint256 amount) external view returns (uint256);\n    function _TRADE_ALLOWED_() external view returns (bool);\n}\n\ncontract DODOSampler is\n    SamplerUtils,\n    ApproximateBuys\n{\n\n    /// @dev Gas limit for DODO calls.\n    uint256 constant private DODO_CALL_GAS = 300e3; // 300k\n    struct DODOSamplerOpts {\n        address registry;\n        address helper;\n    }\n\n    /// @dev Sample sell quotes from DODO.\n    /// @param opts DODOSamplerOpts DODO Registry and helper addresses\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return sellBase whether the bridge needs to sell the base token\n    /// @return pool the DODO pool address\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromDODO(\n        DODOSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (bool sellBase, address pool, uint256[] memory makerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        pool = IDODOZoo(opts.registry).getDODO(takerToken, makerToken);\n        address baseToken;\n        // If pool exists we have the correct order of Base/Quote\n        if (pool != address(0)) {\n            baseToken = takerToken;\n            sellBase = true;\n        } else {\n            pool = IDODOZoo(opts.registry).getDODO(makerToken, takerToken);\n            // No pool either direction\n            if (address(pool) == address(0)) {\n                return (sellBase, pool, makerTokenAmounts);\n            }\n            baseToken = makerToken;\n            sellBase = false;\n        }\n\n        // DODO Pool has been disabled\n        if (!IDODO(pool)._TRADE_ALLOWED_()) {\n            return (sellBase, pool, makerTokenAmounts);\n        }\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            uint256 buyAmount = _sampleSellForApproximateBuyFromDODO(\n                abi.encode(takerToken, pool, baseToken, opts.helper), // taker token data\n                abi.encode(makerToken, pool, baseToken, opts.helper), // maker token data\n                takerTokenAmounts[i]\n            );\n            makerTokenAmounts[i] = buyAmount;\n            // Break early if there are 0 amounts\n            if (makerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from DODO.\n    /// @param opts DODOSamplerOpts DODO Registry and helper addresses\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token sell amount for each sample.\n    /// @return sellBase whether the bridge needs to sell the base token\n    /// @return pool the DODO pool address\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromDODO(\n        DODOSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (bool sellBase, address pool, uint256[] memory takerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n\n        // Pool is BASE/QUOTE\n        // Look up the pool from the taker/maker combination\n        pool = IDODOZoo(opts.registry).getDODO(takerToken, makerToken);\n        address baseToken;\n        // If pool exists we have the correct order of Base/Quote\n        if (pool != address(0)) {\n            baseToken = takerToken;\n            sellBase = true;\n        } else {\n            // Look up the pool from the maker/taker combination\n            pool = IDODOZoo(opts.registry).getDODO(makerToken, takerToken);\n            // No pool either direction\n            if (address(pool) == address(0)) {\n                return (sellBase, pool, takerTokenAmounts);\n            }\n            baseToken = makerToken;\n            sellBase = false;\n        }\n\n        // DODO Pool has been disabled\n        if (!IDODO(pool)._TRADE_ALLOWED_()) {\n            return (sellBase, pool, takerTokenAmounts);\n        }\n\n        takerTokenAmounts = _sampleApproximateBuys(\n            ApproximateBuyQuoteOpts({\n                makerTokenData: abi.encode(makerToken, pool, baseToken, opts.helper),\n                takerTokenData: abi.encode(takerToken, pool, baseToken, opts.helper),\n                getSellQuoteCallback: _sampleSellForApproximateBuyFromDODO\n            }),\n            makerTokenAmounts\n        );\n    }\n\n    function _sampleSellForApproximateBuyFromDODO(\n        bytes memory takerTokenData,\n        bytes memory /* makerTokenData */,\n        uint256 sellAmount\n    )\n        private\n        view\n        returns (uint256)\n    {\n        (address takerToken, address pool, address baseToken, address helper) = abi.decode(\n            takerTokenData,\n            (address, address, address, address)\n        );\n\n        // We will get called to sell both the taker token and also to sell the maker token\n        if (takerToken == baseToken) {\n            // If base token then use the original query on the pool\n            try\n                IDODO(pool).querySellBaseToken\n                    {gas: DODO_CALL_GAS}\n                    (sellAmount)\n                returns (uint256 amount)\n            {\n                return amount;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                return 0;\n            }\n        } else {\n            // If quote token then use helper, this is less accurate\n            try\n                IDODOHelper(helper).querySellQuoteToken\n                    {gas: DODO_CALL_GAS}\n                    (pool, sellAmount)\n                returns (uint256 amount)\n            {\n                return amount;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                return 0;\n            }\n        }\n    }\n\n}\n"
        },
        "./DODOV2Sampler.sol": {
            "id": 6,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\n\ninterface IDODOV2Registry {\n    function getDODOPool(address baseToken, address quoteToken)\n        external\n        view\n        returns (address[] memory machines);\n}\n\ninterface IDODOV2Pool {\n    function querySellBase(address trader, uint256 payBaseAmount)\n        external\n        view\n        returns (uint256 receiveQuoteAmount, uint256 mtFee);\n\n    function querySellQuote(address trader, uint256 payQuoteAmount)\n        external\n        view\n        returns (uint256 receiveBaseAmount, uint256 mtFee);\n}\n\ncontract DODOV2Sampler is\n    SamplerUtils,\n    ApproximateBuys\n{\n\n    /// @dev Gas limit for DODO V2 calls.\n    uint256 constant private DODO_V2_CALL_GAS = 300e3; // 300k\n\n    /// @dev Sample sell quotes from DODO V2.\n    /// @param registry Address of the registry to look up.\n    /// @param offset offset index for the pool in the registry.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return sellBase whether the bridge needs to sell the base token\n    /// @return pool the DODO pool address\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromDODOV2(\n        address registry,\n        uint256 offset,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (bool sellBase, address pool, uint256[] memory makerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        (pool, sellBase) = _getNextDODOV2Pool(registry, offset, takerToken, makerToken);\n        if (pool == address(0)) {\n            return (sellBase, pool, makerTokenAmounts);\n        }\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            uint256 buyAmount = _sampleSellForApproximateBuyFromDODOV2(\n                abi.encode(takerToken, pool, sellBase), // taker token data\n                abi.encode(makerToken, pool, sellBase), // maker token data\n                takerTokenAmounts[i]\n            );\n            makerTokenAmounts[i] = buyAmount;\n            // Break early if there are 0 amounts\n            if (makerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from DODO.\n    /// @param registry Address of the registry to look up.\n    /// @param offset offset index for the pool in the registry.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token sell amount for each sample.\n    /// @return sellBase whether the bridge needs to sell the base token\n    /// @return pool the DODO pool address\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromDODOV2(\n        address registry,\n        uint256 offset,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (bool sellBase, address pool, uint256[] memory takerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        (pool, sellBase) = _getNextDODOV2Pool(registry, offset, takerToken, makerToken);\n        if (pool == address(0)) {\n            return (sellBase, pool, takerTokenAmounts);\n        }\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n\n        takerTokenAmounts = _sampleApproximateBuys(\n            ApproximateBuyQuoteOpts({\n                makerTokenData: abi.encode(makerToken, pool, !sellBase),\n                takerTokenData: abi.encode(takerToken, pool, sellBase),\n                getSellQuoteCallback: _sampleSellForApproximateBuyFromDODOV2\n            }),\n            makerTokenAmounts\n        );\n    }\n\n    function _sampleSellForApproximateBuyFromDODOV2(\n        bytes memory takerTokenData,\n        bytes memory /* makerTokenData */,\n        uint256 sellAmount\n    )\n        private\n        view\n        returns (uint256)\n    {\n        (address takerToken, address pool, bool sellBase) = abi.decode(\n            takerTokenData,\n            (address, address, bool)\n        );\n\n        // We will get called to sell both the taker token and also to sell the maker token\n        // since we use approximate buy for sell and buy functions\n        if (sellBase) {\n            try\n                IDODOV2Pool(pool).querySellBase\n                    { gas: DODO_V2_CALL_GAS }\n                    (address(0), sellAmount)\n                returns (uint256 amount, uint256)\n            {\n                return amount;\n            } catch {\n                return 0;\n            }\n        } else {\n            try\n                IDODOV2Pool(pool).querySellQuote\n                    { gas: DODO_V2_CALL_GAS }\n                    (address(0), sellAmount)\n                returns (uint256 amount, uint256)\n            {\n                return amount;\n            } catch {\n                return 0;\n            }\n        }\n    }\n\n    function _getNextDODOV2Pool(\n        address registry,\n        uint256 offset,\n        address takerToken,\n        address makerToken\n    )\n        internal\n        view\n        returns (address machine, bool sellBase)\n    {\n        // Query in base -> quote direction, if a pool is found then we are selling the base\n        address[] memory machines = IDODOV2Registry(registry).getDODOPool(takerToken, makerToken);\n        sellBase = true;\n        if (machines.length == 0) {\n            // Query in quote -> base direction, if a pool is found then we are selling the quote\n            machines = IDODOV2Registry(registry).getDODOPool(makerToken, takerToken);\n            sellBase = false;\n        }\n\n        if (offset >= machines.length) {\n            return (address(0), false);\n        }\n\n        machine = machines[offset];\n    }\n\n}\n"
        },
        "./Eth2DaiSampler.sol": {
            "id": 8,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IEth2Dai.sol\";\nimport \"./SamplerUtils.sol\";\n\n\ncontract Eth2DaiSampler is\n    SamplerUtils\n{\n    /// @dev Base gas limit for Eth2Dai calls.\n    uint256 constant private ETH2DAI_CALL_GAS = 1000e3; // 1m\n\n    /// @dev Sample sell quotes from Eth2Dai/Oasis.\n    /// @param router Address of the Eth2Dai/Oasis contract\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromEth2Dai(\n        address router,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            try\n                IEth2Dai(router).getBuyAmount\n                    {gas: ETH2DAI_CALL_GAS}\n                    (makerToken, takerToken, takerTokenAmounts[i])\n                returns (uint256 amount)\n            {\n                makerTokenAmounts[i] = amount;\n                // Break early if there are 0 amounts\n                if (makerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from Eth2Dai/Oasis.\n    /// @param router Address of the Eth2Dai/Oasis contract\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Maker token sell amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromEth2Dai(\n        address router,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            try\n                IEth2Dai(router).getPayAmount\n                    {gas: ETH2DAI_CALL_GAS}\n                    (takerToken, makerToken, makerTokenAmounts[i])\n                returns (uint256 amount)\n            {\n                takerTokenAmounts[i] = amount;\n                // Break early if there are 0 amounts\n                if (takerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n}\n"
        },
        "./interfaces/IEth2Dai.sol": {
            "id": 29,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface IEth2Dai {\n\n    function getBuyAmount(\n        address buyToken,\n        address payToken,\n        uint256 payAmount\n    )\n        external\n        view\n        returns (uint256 buyAmount);\n\n    function getPayAmount(\n        address payToken,\n        address buyToken,\n        uint256 buyAmount\n    )\n        external\n        view\n        returns (uint256 payAmount);\n}\n"
        },
        "./KyberSampler.sol": {
            "id": 10,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IKyberNetwork.sol\";\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\n\n\ncontract KyberSampler is\n    SamplerUtils,\n    ApproximateBuys\n{\n    /// @dev Gas limit for Kyber calls.\n    uint256 constant private KYBER_CALL_GAS = 500e3; // 500k\n    /// @dev Kyber ETH pseudo-address.\n    address constant internal KYBER_ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n\n    struct KyberSamplerOpts {\n        uint256 reserveOffset;\n        address hintHandler;\n        address networkProxy;\n        address weth;\n        bytes hint;\n    }\n\n    /// @dev Sample sell quotes from Kyber.\n    /// @param opts KyberSamplerOpts The nth reserve\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return reserveId The id of the reserve found at reserveOffset\n    /// @return hint The hint for the selected reserve\n    /// @return makerTokenAmounts Maker amounts bought at each taker token amount.\n    function sampleSellsFromKyberNetwork(\n        KyberSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (bytes32 reserveId, bytes memory hint, uint256[] memory makerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        reserveId = _getNextReserveId(opts, takerToken, makerToken);\n        if (reserveId == 0x0) {\n            return (reserveId, hint, makerTokenAmounts);\n        }\n        opts.hint = this.encodeKyberHint(opts, reserveId, takerToken, makerToken);\n        hint = opts.hint;\n\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            uint256 value = this.sampleSellFromKyberNetwork(\n                opts,\n                takerToken,\n                makerToken,\n                takerTokenAmounts[i]\n            );\n            makerTokenAmounts[i] = value;\n            // Break early if there are 0 amounts\n            if (makerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from Kyber.\n    /// @param opts KyberSamplerOpts The nth reserve\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return reserveId The id of the reserve found at reserveOffset\n    /// @return hint The hint for the selected reserve\n    /// @return takerTokenAmounts Taker amounts sold at each maker token amount.\n    function sampleBuysFromKyberNetwork(\n        KyberSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (bytes32 reserveId, bytes memory hint, uint256[] memory takerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n\n        reserveId = _getNextReserveId(opts, takerToken, makerToken);\n        if (reserveId == 0x0) {\n            return (reserveId, hint, takerTokenAmounts);\n        }\n        opts.hint = this.encodeKyberHint(opts, reserveId, takerToken, makerToken);\n        hint = opts.hint;\n\n        takerTokenAmounts = _sampleApproximateBuys(\n            ApproximateBuyQuoteOpts({\n                makerTokenData: abi.encode(makerToken, opts),\n                takerTokenData: abi.encode(takerToken, opts),\n                getSellQuoteCallback: _sampleSellForApproximateBuyFromKyber\n            }),\n            makerTokenAmounts\n        );\n        return (reserveId, hint, takerTokenAmounts);\n    }\n\n    function encodeKyberHint(\n        KyberSamplerOpts memory opts,\n        bytes32 reserveId,\n        address takerToken,\n        address makerToken\n    )\n        public\n        view\n        returns (bytes memory hint)\n    {\n        // Build a hint selecting the single reserve\n        IKyberHintHandler kyberHint = IKyberHintHandler(opts.hintHandler);\n\n        // All other reserves should be ignored with this hint\n        bytes32[] memory selectedReserves = new bytes32[](1);\n        selectedReserves[0] = reserveId;\n        uint256[] memory emptySplits = new uint256[](0);\n\n        if (takerToken == opts.weth) {\n            // ETH to Token\n            try\n                kyberHint.buildEthToTokenHint\n                    {gas: KYBER_CALL_GAS}\n                    (\n                        makerToken,\n                        IKyberHintHandler.TradeType.MaskIn,\n                        selectedReserves,\n                        emptySplits\n                    )\n                returns (bytes memory result)\n            {\n                return result;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n            }\n        } else if (makerToken == opts.weth) {\n            // Token to ETH\n            try\n                kyberHint.buildTokenToEthHint\n                    {gas: KYBER_CALL_GAS}\n                    (\n                        takerToken,\n                        IKyberHintHandler.TradeType.MaskIn,\n                        selectedReserves,\n                        emptySplits\n                    )\n                returns (bytes memory result)\n            {\n                return result;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n            }\n\n        } else {\n            // Token to Token\n            // We use the same reserve both ways\n            try\n                kyberHint.buildTokenToTokenHint\n                    {gas: KYBER_CALL_GAS}\n                    (\n                        takerToken,\n                        IKyberHintHandler.TradeType.MaskIn,\n                        selectedReserves,\n                        emptySplits,\n                        makerToken,\n                        IKyberHintHandler.TradeType.MaskIn,\n                        selectedReserves,\n                        emptySplits\n                    )\n                returns (bytes memory result)\n            {\n                return result;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n            }\n        }\n    }\n\n    function _sampleSellForApproximateBuyFromKyber(\n        bytes memory takerTokenData,\n        bytes memory makerTokenData,\n        uint256 sellAmount\n    )\n        private\n        view\n        returns (uint256)\n    {\n        (address makerToken, KyberSamplerOpts memory opts) =\n            abi.decode(makerTokenData, (address, KyberSamplerOpts));\n        (address takerToken, ) =\n            abi.decode(takerTokenData, (address, KyberSamplerOpts));\n        try\n            this.sampleSellFromKyberNetwork\n                (opts, takerToken, makerToken, sellAmount)\n            returns (uint256 amount)\n        {\n            return amount;\n        } catch (bytes memory) {\n            // Swallow failures, leaving all results as zero.\n            return 0;\n        }\n    }\n\n    function sampleSellFromKyberNetwork(\n        KyberSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256 takerTokenAmount\n    )\n        public\n        view\n        returns (uint256 makerTokenAmount)\n    {\n        // If there is no hint do not continue\n        if (opts.hint.length == 0) {\n            return 0;\n        }\n\n        try\n            IKyberNetworkProxy(opts.networkProxy).getExpectedRateAfterFee\n                {gas: KYBER_CALL_GAS}\n                (\n                    takerToken == opts.weth ? KYBER_ETH_ADDRESS : takerToken,\n                    makerToken == opts.weth ? KYBER_ETH_ADDRESS : makerToken,\n                    takerTokenAmount,\n                    0, // fee\n                    opts.hint\n                )\n            returns (uint256 rate)\n        {\n            uint256 makerTokenDecimals = _getTokenDecimals(makerToken);\n            uint256 takerTokenDecimals = _getTokenDecimals(takerToken);\n            makerTokenAmount =\n                rate *\n                takerTokenAmount *\n                10 ** makerTokenDecimals /\n                10 ** takerTokenDecimals /\n                10 ** 18;\n            return makerTokenAmount;\n        } catch (bytes memory) {\n            // Swallow failures, leaving all results as zero.\n            return 0;\n        }\n    }\n\n    function _getNextReserveId(\n        KyberSamplerOpts memory opts,\n        address takerToken,\n        address makerToken\n    )\n        internal\n        view\n        returns (bytes32 reserveId)\n    {\n        // Fetch the registered reserves for this pair\n        IKyberHintHandler kyberHint = IKyberHintHandler(opts.hintHandler);\n        (bytes32[] memory reserveIds, ,) = kyberHint.getTradingReserves(\n            takerToken == opts.weth ? KYBER_ETH_ADDRESS : takerToken,\n            makerToken == opts.weth ? KYBER_ETH_ADDRESS : makerToken,\n            true,\n            new bytes(0) // empty hint\n        );\n\n        if (opts.reserveOffset >= reserveIds.length) {\n            return 0x0;\n        }\n\n        reserveId = reserveIds[opts.reserveOffset];\n        // Ignore Kyber Bridged Reserves (0xbb)\n        if (uint256(reserveId >> 248) == 0xbb) {\n            return 0x0;\n        }\n\n        return reserveId;\n    }\n}\n"
        },
        "./interfaces/IKyberNetwork.sol": {
            "id": 30,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n// Keepin everything together\ninterface IKyberNetwork {\n\n\n}\n\n\ninterface IKyberNetworkProxy {\n\n    function getExpectedRateAfterFee(\n        address src,\n        address dest,\n        uint256 srcQty,\n        uint256 platformFeeBps,\n        bytes calldata hint\n    )\n        external\n        view\n        returns (uint256 expectedRate);\n}\n\ninterface IKyberHintHandler {\n\n    enum TradeType {BestOfAll, MaskIn, MaskOut, Split}\n\n    enum ProcessWithRate {NotRequired, Required}\n\n    function getTradingReserves(\n        address tokenSrc,\n        address tokenDest,\n        bool isTokenToToken,\n        bytes calldata hint\n    )\n        external\n        view\n        returns (\n            bytes32[] memory reserveIds,\n            uint256[] memory splitValuesBps,\n            ProcessWithRate processWithRate\n        );\n\n    function buildTokenToEthHint(\n        address tokenSrc,\n        TradeType tokenToEthType,\n        bytes32[] calldata tokenToEthReserveIds,\n        uint256[] calldata tokenToEthSplits\n    )\n        external\n        view\n        returns (bytes memory hint);\n\n    function buildEthToTokenHint(\n        address tokenDest,\n        TradeType ethToTokenType,\n        bytes32[] calldata ethToTokenReserveIds,\n        uint256[] calldata ethToTokenSplits\n    )\n        external\n        view\n        returns (bytes memory hint);\n\n    function buildTokenToTokenHint(\n        address tokenSrc,\n        TradeType tokenToEthType,\n        bytes32[] calldata tokenToEthReserveIds,\n        uint256[] calldata tokenToEthSplits,\n        address tokenDest,\n        TradeType ethToTokenType,\n        bytes32[] calldata ethToTokenReserveIds,\n        uint256[] calldata ethToTokenSplits\n    )\n        external\n        view\n        returns (bytes memory hint);\n}\n"
        },
        "./KyberDmmSampler.sol": {
            "id": 9,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\ninterface IKyberDmmPool {\n\n    function totalSupply()\n        external\n        view\n        returns (uint256);\n}\n\ninterface IKyberDmmFactory {\n\n    function getPools(address token0, address token1)\n        external\n        view\n        returns (address[] memory _tokenPools);\n}\n\ninterface IKyberDmmRouter {\n\n    function factory() external view returns (address);\n\n    function getAmountsOut(uint256 amountIn, address[] calldata pools, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts);\n\n    function getAmountsIn(uint256 amountOut, address[] calldata pools, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts);\n}\n\n\n\ncontract KyberDmmSampler\n{\n    /// @dev Gas limit for KyberDmm calls.\n    uint256 constant private KYBER_DMM_CALL_GAS = 150e3; // 150k\n\n    /// @dev Sample sell quotes from KyberDmm.\n    /// @param router Router to look up tokens and amounts\n    /// @param path Token route. Should be takerToken -> makerToken\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return pools The pool addresses involved in the multi path trade\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromKyberDmm(\n        address router,\n        address[] memory path,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (address[] memory pools, uint256[] memory makerTokenAmounts)\n    {\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        pools = _getKyberDmmPools(router, path);\n        if (pools.length == 0) {\n            return (pools, makerTokenAmounts);\n        }\n        for (uint256 i = 0; i < numSamples; i++) {\n            try\n                IKyberDmmRouter(router).getAmountsOut\n                    {gas: KYBER_DMM_CALL_GAS}\n                    (takerTokenAmounts[i], pools, path)\n                returns (uint256[] memory amounts)\n            {\n                makerTokenAmounts[i] = amounts[path.length - 1];\n                // Break early if there are 0 amounts\n                if (makerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from KyberDmm.\n    /// @param router Router to look up tokens and amounts\n    /// @param path Token route. Should be takerToken -> makerToken.\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return pools The pool addresses involved in the multi path trade\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromKyberDmm(\n        address router,\n        address[] memory path,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (address[] memory pools, uint256[] memory takerTokenAmounts)\n    {\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n        pools = _getKyberDmmPools(router, path);\n        if (pools.length == 0) {\n            return (pools, takerTokenAmounts);\n        }\n        for (uint256 i = 0; i < numSamples; i++) {\n            try\n                IKyberDmmRouter(router).getAmountsIn\n                    {gas: KYBER_DMM_CALL_GAS}\n                    (makerTokenAmounts[i], pools, path)\n                returns (uint256[] memory amounts)\n            {\n                takerTokenAmounts[i] = amounts[0];\n                // Break early if there are 0 amounts\n                if (takerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    function _getKyberDmmPools(\n        address router,\n        address[] memory path\n    )\n        private\n        view\n        returns (address[] memory pools)\n    {\n        IKyberDmmFactory factory = IKyberDmmFactory(IKyberDmmRouter(router).factory());\n        pools = new address[](path.length - 1);\n        for (uint256 i = 0; i < pools.length; i++) {\n            // find the best pool\n            address[] memory allPools;\n            try\n                factory.getPools\n                    {gas: KYBER_DMM_CALL_GAS}\n                    (path[i], path[i + 1])\n                returns (address[] memory allPools)\n            {\n                uint256 maxSupply = 0;\n                require(allPools.length >= 1, \"KyberDMMSampler/NO_POOLS_FOUND\");\n                for (uint256 j = 0; j < allPools.length; j++) {\n                    uint256 totalSupply = IKyberDmmPool(allPools[j]).totalSupply();\n                    if (totalSupply > maxSupply) {\n                        maxSupply = totalSupply;\n                        pools[i] = allPools[j];\n                    }\n                }\n            } catch (bytes memory) {\n                return new address[](0);\n            }\n        }\n    }\n}\n"
        },
        "./LidoSampler.sol": {
            "id": 11,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./SamplerUtils.sol\";\n\ncontract LidoSampler is SamplerUtils {\n    struct LidoInfo {\n        address stEthToken;\n        address wethToken;\n    }\n\n    /// @dev Sample sell quotes from Lido\n    /// @param lidoInfo Info regarding a specific Lido deployment\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromLido(\n        LidoInfo memory lidoInfo,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        pure\n        returns (uint256[] memory)\n    {\n        _assertValidPair(makerToken, takerToken);\n\n        if (takerToken != lidoInfo.wethToken || makerToken != address(lidoInfo.stEthToken)) {\n            // Return 0 values if not selling WETH for stETH\n            uint256 numSamples = takerTokenAmounts.length;\n            uint256[] memory makerTokenAmounts = new uint256[](numSamples);\n            return makerTokenAmounts;\n        }\n\n        // Minting stETH is always 1:1 therefore we can just return the same amounts back\n        return takerTokenAmounts;\n    }\n\n    /// @dev Sample buy quotes from Lido.\n    /// @param lidoInfo Info regarding a specific Lido deployment\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromLido(\n        LidoInfo memory lidoInfo,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        pure\n        returns (uint256[] memory)\n    {\n        _assertValidPair(makerToken, takerToken);\n\n        if (takerToken != lidoInfo.wethToken || makerToken != address(lidoInfo.stEthToken)) {\n            // Return 0 values if not buying stETH for WETH\n            uint256 numSamples = makerTokenAmounts.length;\n            uint256[] memory takerTokenAmounts = new uint256[](numSamples);\n            return takerTokenAmounts;\n        }\n\n        // Minting stETH is always 1:1 therefore we can just return the same amounts back\n        return makerTokenAmounts;\n    }\n\n}\n"
        },
        "./LiquidityProviderSampler.sol": {
            "id": 12,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol\";\nimport \"@0x/contracts-zero-ex/contracts/src/vendor/ILiquidityProvider.sol\";\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\n\n\ncontract LiquidityProviderSampler is\n    SamplerUtils,\n    ApproximateBuys\n{\n    /// @dev Default gas limit for liquidity provider calls.\n    uint256 constant private DEFAULT_CALL_GAS = 400e3; // 400k\n\n    /// @dev Sample sell quotes from an arbitrary on-chain liquidity provider.\n    /// @param providerAddress Address of the liquidity provider.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromLiquidityProvider(\n        address providerAddress,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        // Initialize array of maker token amounts.\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            try\n                ILiquidityProvider(providerAddress).getSellQuote\n                    {gas: DEFAULT_CALL_GAS}\n                    (\n                        IERC20TokenV06(takerToken),\n                        IERC20TokenV06(makerToken),\n                        takerTokenAmounts[i]\n                    )\n                returns (uint256 amount)\n            {\n                makerTokenAmounts[i] = amount;\n                // Break early if there are 0 amounts\n                if (makerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from an arbitrary on-chain liquidity provider.\n    /// @param providerAddress Address of the liquidity provider.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromLiquidityProvider(\n        address providerAddress,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        takerTokenAmounts = _sampleApproximateBuys(\n            ApproximateBuyQuoteOpts({\n                makerTokenData: abi.encode(makerToken, providerAddress),\n                takerTokenData: abi.encode(takerToken, providerAddress),\n                getSellQuoteCallback: _sampleSellForApproximateBuyFromLiquidityProvider\n            }),\n            makerTokenAmounts\n        );\n    }\n\n    function _sampleSellForApproximateBuyFromLiquidityProvider(\n        bytes memory takerTokenData,\n        bytes memory makerTokenData,\n        uint256 sellAmount\n    )\n        private\n        view\n        returns (uint256 buyAmount)\n    {\n        (address takerToken, address providerAddress) =\n            abi.decode(takerTokenData, (address, address));\n        (address makerToken) =\n            abi.decode(makerTokenData, (address));\n        try\n            this.sampleSellsFromLiquidityProvider\n                {gas: DEFAULT_CALL_GAS}\n                (providerAddress, takerToken, makerToken, _toSingleValueArray(sellAmount))\n            returns (uint256[] memory amounts)\n        {\n            return amounts[0];\n        } catch (bytes memory) {\n            // Swallow failures, leaving all results as zero.\n            return 0;\n        }\n    }\n}\n"
        },
        "@0x/contracts-zero-ex/contracts/src/vendor/ILiquidityProvider.sol": {
            "id": 49,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\n\n\ninterface ILiquidityProvider {\n\n    /// @dev An optional event an LP can emit for each fill against a source.\n    /// @param inputToken The input token.\n    /// @param outputToken The output token.\n    /// @param inputTokenAmount How much input token was sold.\n    /// @param outputTokenAmount How much output token was bought.\n    /// @param sourceId A bytes32 encoded ascii source ID. E.g., `bytes32('Curve')`/\n    /// @param sourceAddress An optional address associated with the source (e.g, a curve pool).\n    /// @param sourceId A bytes32 encoded ascii source ID. E.g., `bytes32('Curve')`/\n    /// @param sourceAddress An optional address associated with the source (e.g, a curve pool).\n    /// @param sender The caller of the LP.\n    /// @param recipient The recipient of the output tokens.\n    event LiquidityProviderFill(\n        IERC20TokenV06 inputToken,\n        IERC20TokenV06 outputToken,\n        uint256 inputTokenAmount,\n        uint256 outputTokenAmount,\n        bytes32 sourceId,\n        address sourceAddress,\n        address sender,\n        address recipient\n    );\n\n    /// @dev Trades `inputToken` for `outputToken`. The amount of `inputToken`\n    ///      to sell must be transferred to the contract prior to calling this\n    ///      function to trigger the trade.\n    /// @param inputToken The token being sold.\n    /// @param outputToken The token being bought.\n    /// @param recipient The recipient of the bought tokens.\n    /// @param minBuyAmount The minimum acceptable amount of `outputToken` to buy.\n    /// @param auxiliaryData Arbitrary auxiliary data supplied to the contract.\n    /// @return boughtAmount The amount of `outputToken` bought.\n    function sellTokenForToken(\n        IERC20TokenV06 inputToken,\n        IERC20TokenV06 outputToken,\n        address recipient,\n        uint256 minBuyAmount,\n        bytes calldata auxiliaryData\n    )\n        external\n        returns (uint256 boughtAmount);\n\n    /// @dev Trades ETH for token. ETH must either be attached to this function\n    ///      call or sent to the contract prior to calling this function to\n    ///      trigger the trade.\n    /// @param outputToken The token being bought.\n    /// @param recipient The recipient of the bought tokens.\n    /// @param minBuyAmount The minimum acceptable amount of `outputToken` to buy.\n    /// @param auxiliaryData Arbitrary auxiliary data supplied to the contract.\n    /// @return boughtAmount The amount of `outputToken` bought.\n    function sellEthForToken(\n        IERC20TokenV06 outputToken,\n        address recipient,\n        uint256 minBuyAmount,\n        bytes calldata auxiliaryData\n    )\n        external\n        payable\n        returns (uint256 boughtAmount);\n\n    /// @dev Trades token for ETH. The token must be sent to the contract prior\n    ///      to calling this function to trigger the trade.\n    /// @param inputToken The token being sold.\n    /// @param recipient The recipient of the bought tokens.\n    /// @param minBuyAmount The minimum acceptable amount of ETH to buy.\n    /// @param auxiliaryData Arbitrary auxiliary data supplied to the contract.\n    /// @return boughtAmount The amount of ETH bought.\n    function sellTokenForEth(\n        IERC20TokenV06 inputToken,\n        address payable recipient,\n        uint256 minBuyAmount,\n        bytes calldata auxiliaryData\n    )\n        external\n        returns (uint256 boughtAmount);\n\n    /// @dev Quotes the amount of `outputToken` that would be obtained by\n    ///      selling `sellAmount` of `inputToken`.\n    /// @param inputToken Address of the taker token (what to sell). Use\n    ///        the wETH address if selling ETH.\n    /// @param outputToken Address of the maker token (what to buy). Use\n    ///        the wETH address if buying ETH.\n    /// @param sellAmount Amount of `inputToken` to sell.\n    /// @return outputTokenAmount Amount of `outputToken` that would be obtained.\n    function getSellQuote(\n        IERC20TokenV06 inputToken,\n        IERC20TokenV06 outputToken,\n        uint256 sellAmount\n    )\n        external\n        view\n        returns (uint256 outputTokenAmount);\n}\n"
        },
        "./MakerPSMSampler.sol": {
            "id": 14,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./SamplerUtils.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibMathV06.sol\";\n\ninterface IPSM {\n    // @dev Get the fee for selling USDC to DAI in PSM\n    // @return tin toll in [wad]\n    function tin() external view returns (uint256);\n    // @dev Get the fee for selling DAI to USDC in PSM\n    // @return tout toll out [wad]\n    function tout() external view returns (uint256);\n\n    // @dev Get the address of the PSM state Vat\n    // @return address of the Vat\n    function vat() external view returns (address);\n\n    // @dev Get the address of the underlying vault powering PSM\n    // @return address of gemJoin contract\n    function gemJoin() external view returns (address);\n\n    // @dev Get the address of DAI\n    // @return address of DAI contract\n    function dai() external view returns (address);\n\n    // @dev Sell USDC for DAI\n    // @param usr The address of the account trading USDC for DAI.\n    // @param gemAmt The amount of USDC to sell in USDC base units\n    function sellGem(\n        address usr,\n        uint256 gemAmt\n    ) external;\n    // @dev Buy USDC for DAI\n    // @param usr The address of the account trading DAI for USDC\n    // @param gemAmt The amount of USDC to buy in USDC base units\n    function buyGem(\n        address usr,\n        uint256 gemAmt\n    ) external;\n}\n\ninterface IVAT {\n    // @dev Get a collateral type by identifier\n    // @param ilkIdentifier bytes32 identifier. Example: ethers.utils.formatBytes32String(\"PSM-USDC-A\")\n    // @return ilk\n    // @return ilk.Art Total Normalised Debt in wad\n    // @return ilk.rate Accumulated Rates in ray\n    // @return ilk.spot Price with Safety Margin in ray\n    // @return ilk.line Debt Ceiling in rad\n    // @return ilk.dust Urn Debt Floor in rad\n    function ilks(\n        bytes32 ilkIdentifier\n    ) external view returns (\n        uint256 Art,\n        uint256 rate,\n        uint256 spot,\n        uint256 line,\n        uint256 dust\n    );\n}\n\ncontract MakerPSMSampler is\n    SamplerUtils\n{\n    using LibSafeMathV06 for uint256;\n\n    /// @dev Information about which PSM module to use\n    struct MakerPsmInfo {\n        address psmAddress;\n        bytes32 ilkIdentifier;\n        address gemTokenAddress;\n    }\n\n    /// @dev Gas limit for MakerPsm calls.\n    uint256 constant private MAKER_PSM_CALL_GAS = 300e3; // 300k\n\n\n    // Maker units\n    // wad: fixed point decimal with 18 decimals (for basic quantities, e.g. balances)\n    uint256 constant private WAD = 10 ** 18;\n    // ray: fixed point decimal with 27 decimals (for precise quantites, e.g. ratios)\n    uint256 constant private RAY = 10 ** 27;\n    // rad: fixed point decimal with 45 decimals (result of integer multiplication with a wad and a ray)\n    uint256 constant private RAD = 10 ** 45;\n    // See https://github.com/makerdao/dss/blob/master/DEVELOPING.m\n\n    /// @dev Sample sell quotes from Maker PSM\n    function sampleSellsFromMakerPsm(\n        MakerPsmInfo memory psmInfo,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        IPSM psm = IPSM(psmInfo.psmAddress);\n        IVAT vat = IVAT(psm.vat());\n\n\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        if (makerToken != psm.dai() && takerToken != psm.dai()) {\n            return makerTokenAmounts;\n        }\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            uint256 buyAmount = _samplePSMSell(psmInfo, makerToken, takerToken, takerTokenAmounts[i], psm, vat);\n\n            if (buyAmount == 0) {\n                break;\n            }\n            makerTokenAmounts[i] = buyAmount;\n        }\n    }\n\n    function sampleBuysFromMakerPsm(\n        MakerPsmInfo memory psmInfo,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        IPSM psm = IPSM(psmInfo.psmAddress);\n        IVAT vat = IVAT(psm.vat());\n\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n        if (makerToken != psm.dai() && takerToken != psm.dai()) {\n            return takerTokenAmounts;\n        }\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            uint256 sellAmount = _samplePSMBuy(psmInfo, makerToken, takerToken, makerTokenAmounts[i], psm, vat);\n\n            if (sellAmount == 0) {\n                break;\n            }\n\n            takerTokenAmounts[i] = sellAmount;\n        }\n\n    }\n\n    function _samplePSMSell(MakerPsmInfo memory psmInfo, address makerToken, address takerToken, uint256 takerTokenAmount, IPSM psm, IVAT vat)\n        private\n        view\n        returns (uint256)\n    {\n        (uint256 totalDebtInWad,,, uint256 debtCeilingInRad, uint256 debtFloorInRad) = vat.ilks(psmInfo.ilkIdentifier);\n        uint256 gemTokenBaseUnit = uint256(1e6);\n\n        if (takerToken == psmInfo.gemTokenAddress) {\n            // Simulate sellGem\n            // Selling USDC to the PSM, increasing the total debt\n            // Convert USDC 6 decimals to 18 decimals [wad]\n            uint256 takerTokenAmountInWad = takerTokenAmount.safeMul(1e12);\n\n            uint256 newTotalDebtInRad = totalDebtInWad.safeAdd(takerTokenAmountInWad).safeMul(RAY);\n\n            // PSM is too full to fit\n            if (newTotalDebtInRad >= debtCeilingInRad) {\n                return 0;\n            }\n\n            uint256 feeInWad = takerTokenAmountInWad.safeMul(psm.tin()).safeDiv(WAD);\n            uint256 makerTokenAmountInWad = takerTokenAmountInWad.safeSub(feeInWad);\n\n            return makerTokenAmountInWad;\n        } else if (makerToken == psmInfo.gemTokenAddress) {\n            // Simulate buyGem\n            // Buying USDC from the PSM, decreasing the total debt\n            // Selling DAI for USDC, already in 18 decimals [wad]\n            uint256 takerTokenAmountInWad = takerTokenAmount;\n            if (takerTokenAmountInWad > totalDebtInWad) {\n                return 0;\n            }\n            uint256 newTotalDebtInRad = totalDebtInWad.safeSub(takerTokenAmountInWad).safeMul(RAY);\n\n            // PSM is empty, not enough USDC to buy from it\n            if (newTotalDebtInRad <= debtFloorInRad) {\n                return 0;\n            }\n\n            uint256 feeDivisorInWad = WAD.safeAdd(psm.tout()); // eg. 1.001 * 10 ** 18 with 0.1% tout;\n            uint256 makerTokenAmountInGemTokenBaseUnits =  takerTokenAmountInWad.safeMul(gemTokenBaseUnit).safeDiv(feeDivisorInWad);\n\n            return makerTokenAmountInGemTokenBaseUnits;\n        }\n\n        return 0;\n    }\n\n    function _samplePSMBuy(MakerPsmInfo memory psmInfo, address makerToken, address takerToken, uint256 makerTokenAmount, IPSM psm, IVAT vat)\n        private\n        view\n        returns (uint256)\n    {\n        (uint256 totalDebtInWad,,, uint256 debtCeilingInRad, uint256 debtFloorInRad) = vat.ilks(psmInfo.ilkIdentifier);\n\n        if (takerToken == psmInfo.gemTokenAddress) {\n            // Simulate sellGem\n            // Selling USDC to the PSM, increasing the total debt\n            uint256 makerTokenAmountInWad = makerTokenAmount;\n            uint256 feeDivisorInWad = WAD.safeSub(psm.tin()); // eg. 0.999 * 10 ** 18 with 0.1% tin;\n            uint256 takerTokenAmountInWad = makerTokenAmountInWad.safeMul(WAD).safeDiv(feeDivisorInWad);\n            uint256 newTotalDebtInRad = totalDebtInWad.safeAdd(takerTokenAmountInWad).safeMul(RAY);\n\n            // PSM is too full to fit\n            if (newTotalDebtInRad >= debtCeilingInRad) {\n                return 0;\n            }\n\n            uint256 takerTokenAmountInGemInGemBaseUnits = (takerTokenAmountInWad.safeDiv(1e12)).safeAdd(1); // Add 1 to deal with cut off decimals converting to lower decimals\n\n            return takerTokenAmountInGemInGemBaseUnits;\n        } else if (makerToken == psmInfo.gemTokenAddress) {\n            // Simulate buyGem\n            // Buying USDC from the PSM, decreasing the total debt\n            uint256 makerTokenAmountInWad = makerTokenAmount.safeMul(1e12);\n            uint256 feeMultiplierInWad = WAD.safeAdd(psm.tout()); // eg. 1.001 * 10 ** 18 with 0.1% tout;\n            uint256 takerTokenAmountInWad =  makerTokenAmountInWad.safeMul(feeMultiplierInWad).safeDiv(WAD);\n            if (takerTokenAmountInWad > totalDebtInWad) {\n                return 0;\n            }\n            uint256 newTotalDebtInRad = totalDebtInWad.safeSub(takerTokenAmountInWad).safeMul(RAY);\n\n            // PSM is empty, not enough USDC to buy\n            if (newTotalDebtInRad <= debtFloorInRad) {\n                return 0;\n            }\n\n\n            return takerTokenAmountInWad;\n        }\n\n        return 0;\n    }\n\n}\n"
        },
        "./MultiBridgeSampler.sol": {
            "id": 16,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IMultiBridge.sol\";\n\n\ncontract MultiBridgeSampler {\n\n    /// @dev Default gas limit for multibridge calls.\n    uint256 constant private DEFAULT_CALL_GAS = 400e3; // 400k\n\n    /// @dev Sample sell quotes from MultiBridge.\n    /// @param multibridge Address of the MultiBridge contract.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param intermediateToken The address of the intermediate token to\n    ///        use in an indirect route.\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromMultiBridge(\n        address multibridge,\n        address takerToken,\n        address intermediateToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        // Initialize array of maker token amounts.\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        // If no address provided, return all zeros.\n        if (multibridge == address(0)) {\n            return makerTokenAmounts;\n        }\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            (bool didSucceed, bytes memory resultData) =\n                multibridge.staticcall.gas(DEFAULT_CALL_GAS)(\n                    abi.encodeWithSelector(\n                        IMultiBridge(0).getSellQuote.selector,\n                        takerToken,\n                        intermediateToken,\n                        makerToken,\n                        takerTokenAmounts[i]\n                    ));\n            uint256 buyAmount = 0;\n            if (didSucceed) {\n                buyAmount = abi.decode(resultData, (uint256));\n            }\n            // Exit early if the amount is too high for the source to serve\n            if (buyAmount == 0) {\n                break;\n            }\n\n            makerTokenAmounts[i] = buyAmount;\n        }\n    }\n}\n"
        },
        "./interfaces/IMultiBridge.sol": {
            "id": 33,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface IMultiBridge {\n\n    /// @dev Transfers `amount` of the ERC20 `tokenAddress` from `from` to `to`.\n    /// @param tokenAddress The address of the ERC20 token to transfer.\n    /// @param from Address to transfer asset from.\n    /// @param to Address to transfer asset to.\n    /// @param amount Amount of asset to transfer.\n    /// @param bridgeData Arbitrary asset data needed by the bridge contract.\n    /// @return success The magic bytes `0xdc1600f3` if successful.\n    function bridgeTransferFrom(\n        address tokenAddress,\n        address from,\n        address to,\n        uint256 amount,\n        bytes calldata bridgeData\n    )\n        external\n        returns (bytes4 success);\n\n    /// @dev Quotes the amount of `makerToken` that would be obtained by\n    ///      selling `sellAmount` of `takerToken`.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param intermediateToken The address of the intermediate token to\n    ///        use in an indirect route.\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param sellAmount Amount of `takerToken` to sell.\n    /// @return makerTokenAmount Amount of `makerToken` that would be obtained.\n    function getSellQuote(\n        address takerToken,\n        address intermediateToken,\n        address makerToken,\n        uint256 sellAmount\n    )\n        external\n        view\n        returns (uint256 makerTokenAmount);\n}\n"
        },
        "./MStableSampler.sol": {
            "id": 13,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IMStable.sol\";\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\n\n\ncontract MStableSampler is\n    SamplerUtils,\n    ApproximateBuys\n{\n    /// @dev Default gas limit for mStable calls.\n    uint256 constant private DEFAULT_CALL_GAS = 800e3; // 800k\n\n    /// @dev Sample sell quotes from the mStable contract\n    /// @param router Address of the mStable contract\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromMStable(\n        address router,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        // Initialize array of maker token amounts.\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            try\n                IMStable(router).getSwapOutput\n                    {gas: DEFAULT_CALL_GAS}\n                    (takerToken, makerToken, takerTokenAmounts[i])\n                returns (uint256 amount)\n            {\n                makerTokenAmounts[i] = amount;\n                // Break early if there are 0 amounts\n                if (makerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from MStable contract\n    /// @param router Address of the mStable contract\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromMStable(\n        address router,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        return _sampleApproximateBuys(\n            ApproximateBuyQuoteOpts({\n                makerTokenData: abi.encode(makerToken, router),\n                takerTokenData: abi.encode(takerToken, router),\n                getSellQuoteCallback: _sampleSellForApproximateBuyFromMStable\n            }),\n            makerTokenAmounts\n        );\n    }\n\n    function _sampleSellForApproximateBuyFromMStable(\n        bytes memory takerTokenData,\n        bytes memory makerTokenData,\n        uint256 sellAmount\n    )\n        private\n        view\n        returns (uint256 buyAmount)\n    {\n        (address takerToken, address router) =\n            abi.decode(takerTokenData, (address, address));\n        (address makerToken) =\n            abi.decode(makerTokenData, (address));\n        try\n            this.sampleSellsFromMStable\n                (router, takerToken, makerToken, _toSingleValueArray(sellAmount))\n            returns (uint256[] memory amounts)\n        {\n            return amounts[0];\n        } catch (bytes memory) {\n            // Swallow failures, leaving all results as zero.\n            return 0;\n        }\n    }\n}\n"
        },
        "./interfaces/IMStable.sol": {
            "id": 31,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface IMStable {\n\n    function getSwapOutput(\n        address _input,\n        address _output,\n        uint256 _quantity\n    )\n        external\n        view\n        returns (uint256 swapOutput);\n}\n"
        },
        "./MooniswapSampler.sol": {
            "id": 15,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IMooniswap.sol\";\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\n\n\ncontract MooniswapSampler is\n    SamplerUtils,\n    ApproximateBuys\n{\n    /// @dev Gas limit for Mooniswap calls.\n    uint256 constant private MOONISWAP_CALL_GAS = 150e3; // 150k\n\n    /// @dev Sample sell quotes from Mooniswap.\n    /// @param registry Address of the Mooniswap Registry.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return pool The contract address for the pool\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromMooniswap(\n        address registry,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (IMooniswap pool, uint256[] memory makerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            uint256 buyAmount = sampleSingleSellFromMooniswapPool(\n                registry,\n                takerToken,\n                makerToken,\n                takerTokenAmounts[i]\n            );\n            makerTokenAmounts[i] = buyAmount;\n            // Break early if there are 0 amounts\n            if (makerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n\n        pool = IMooniswap(\n            IMooniswapRegistry(registry).pools(takerToken, makerToken)\n        );\n    }\n\n    function sampleSingleSellFromMooniswapPool(\n        address registry,\n        address mooniswapTakerToken,\n        address mooniswapMakerToken,\n        uint256 takerTokenAmount\n    )\n        public\n        view\n        returns (uint256)\n    {\n        // Find the pool for the pair.\n        IMooniswap pool = IMooniswap(\n            IMooniswapRegistry(registry).pools(mooniswapTakerToken, mooniswapMakerToken)\n        );\n        // If there is no pool then return early\n        if (address(pool) == address(0)) {\n            return 0;\n        }\n        uint256 poolBalance = mooniswapTakerToken == address(0)\n            ? address(pool).balance\n            : IERC20TokenV06(mooniswapTakerToken).balanceOf(address(pool));\n        // If the pool balance is smaller than the sell amount\n        // don't sample to avoid multiplication overflow in buys\n        if (poolBalance < takerTokenAmount) {\n            return 0;\n        }\n        try\n            pool.getReturn\n                {gas: MOONISWAP_CALL_GAS}\n                (mooniswapTakerToken, mooniswapMakerToken, takerTokenAmount)\n            returns (uint256 amount)\n        {\n            return amount;\n        } catch (bytes memory) {\n            // Swallow failures, leaving all results as zero.\n            return 0;\n        }\n    }\n\n    /// @dev Sample buy quotes from Mooniswap.\n    /// @param registry Address of the Mooniswap Registry.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token sell amount for each sample.\n    /// @return pool The contract address for the pool\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromMooniswap(\n        address registry,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (IMooniswap pool, uint256[] memory takerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n\n        takerTokenAmounts = _sampleApproximateBuys(\n            ApproximateBuyQuoteOpts({\n                makerTokenData: abi.encode(registry, makerToken),\n                takerTokenData: abi.encode(registry, takerToken),\n                getSellQuoteCallback: _sampleSellForApproximateBuyFromMooniswap\n            }),\n            makerTokenAmounts\n        );\n\n        pool = IMooniswap(\n            IMooniswapRegistry(registry).pools(takerToken, makerToken)\n        );\n    }\n\n    function _sampleSellForApproximateBuyFromMooniswap(\n        bytes memory takerTokenData,\n        bytes memory makerTokenData,\n        uint256 sellAmount\n    )\n        private\n        view\n        returns (uint256 buyAmount)\n    {\n        (address registry, address mooniswapTakerToken) = abi.decode(takerTokenData, (address, address));\n        (address _registry, address mooniswapMakerToken) = abi.decode(makerTokenData, (address, address));\n        return sampleSingleSellFromMooniswapPool(\n            registry,\n            mooniswapTakerToken,\n            mooniswapMakerToken,\n            sellAmount\n        );\n    }\n}\n"
        },
        "./interfaces/IMooniswap.sol": {
            "id": 32,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface IMooniswapRegistry {\n\n    function pools(address token1, address token2) external view returns(address);\n}\n\ninterface IMooniswap {\n\n    function getReturn(\n        address fromToken,\n        address destToken,\n        uint256 amount\n    )\n        external\n        view\n        returns(uint256 returnAmount);\n}\n"
        },
        "./NativeOrderSampler.sol": {
            "id": 17,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibMathV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol\";\n\n\ninterface IExchange {\n\n    enum OrderStatus {\n        INVALID,\n        FILLABLE,\n        FILLED,\n        CANCELLED,\n        EXPIRED\n    }\n\n    /// @dev A standard OTC or OO limit order.\n    struct LimitOrder {\n        IERC20TokenV06 makerToken;\n        IERC20TokenV06 takerToken;\n        uint128 makerAmount;\n        uint128 takerAmount;\n        uint128 takerTokenFeeAmount;\n        address maker;\n        address taker;\n        address sender;\n        address feeRecipient;\n        bytes32 pool;\n        uint64 expiry;\n        uint256 salt;\n    }\n\n    /// @dev An RFQ limit order.\n    struct RfqOrder {\n        IERC20TokenV06 makerToken;\n        IERC20TokenV06 takerToken;\n        uint128 makerAmount;\n        uint128 takerAmount;\n        address maker;\n        address taker;\n        address txOrigin;\n        bytes32 pool;\n        uint64 expiry;\n        uint256 salt;\n    }\n\n    /// @dev Info on a limit or RFQ order.\n    struct OrderInfo {\n        bytes32 orderHash;\n        OrderStatus status;\n        uint128 takerTokenFilledAmount;\n    }\n\n    /// @dev Allowed signature types.\n    enum SignatureType {\n        ILLEGAL,\n        INVALID,\n        EIP712,\n        ETHSIGN\n    }\n\n    /// @dev Encoded EC signature.\n    struct Signature {\n        // How to validate the signature.\n        SignatureType signatureType;\n        // EC Signature data.\n        uint8 v;\n        // EC Signature data.\n        bytes32 r;\n        // EC Signature data.\n        bytes32 s;\n    }\n\n    /// @dev Get the order info for a limit order.\n    /// @param order The limit order.\n    /// @return orderInfo Info about the order.\n    function getLimitOrderInfo(LimitOrder memory order)\n        external\n        view\n        returns (OrderInfo memory orderInfo);\n\n    /// @dev Get order info, fillable amount, and signature validity for a limit order.\n    ///      Fillable amount is determined using balances and allowances of the maker.\n    /// @param order The limit order.\n    /// @param signature The order signature.\n    /// @return orderInfo Info about the order.\n    /// @return actualFillableTakerTokenAmount How much of the order is fillable\n    ///         based on maker funds, in taker tokens.\n    /// @return isSignatureValid Whether the signature is valid.\n    function getLimitOrderRelevantState(\n        LimitOrder memory order,\n        Signature calldata signature\n    )\n        external\n        view\n        returns (\n            OrderInfo memory orderInfo,\n            uint128 actualFillableTakerTokenAmount,\n            bool isSignatureValid\n        );\n}\n\ncontract NativeOrderSampler {\n    using LibSafeMathV06 for uint256;\n    using LibBytesV06 for bytes;\n\n    /// @dev Gas limit for calls to `getOrderFillableTakerAmount()`.\n    uint256 constant internal DEFAULT_CALL_GAS = 200e3; // 200k\n\n    /// @dev Queries the fillable taker asset amounts of native orders.\n    ///      Effectively ignores orders that have empty signatures or\n    ///      maker/taker asset amounts (returning 0).\n    /// @param orders Native limit orders to query.\n    /// @param orderSignatures Signatures for each respective order in `orders`.\n    /// @param exchange The V4 exchange.\n    /// @return orderFillableTakerAssetAmounts How much taker asset can be filled\n    ///         by each order in `orders`.\n    function getLimitOrderFillableTakerAssetAmounts(\n        IExchange.LimitOrder[] memory orders,\n        IExchange.Signature[] memory orderSignatures,\n        IExchange exchange\n    )\n        public\n        view\n        returns (uint256[] memory orderFillableTakerAssetAmounts)\n    {\n        orderFillableTakerAssetAmounts = new uint256[](orders.length);\n        for (uint256 i = 0; i != orders.length; i++) {\n            try\n                this.getLimitOrderFillableTakerAmount\n                    {gas: DEFAULT_CALL_GAS}\n                    (\n                       orders[i],\n                       orderSignatures[i],\n                       exchange\n                    )\n                returns (uint256 amount)\n            {\n                orderFillableTakerAssetAmounts[i] = amount;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                orderFillableTakerAssetAmounts[i] = 0;\n            }\n        }\n    }\n\n    /// @dev Queries the fillable taker asset amounts of native orders.\n    ///      Effectively ignores orders that have empty signatures or\n    /// @param orders Native orders to query.\n    /// @param orderSignatures Signatures for each respective order in `orders`.\n    /// @param exchange The V4 exchange.\n    /// @return orderFillableMakerAssetAmounts How much maker asset can be filled\n    ///         by each order in `orders`.\n    function getLimitOrderFillableMakerAssetAmounts(\n        IExchange.LimitOrder[] memory orders,\n        IExchange.Signature[] memory orderSignatures,\n        IExchange exchange\n    )\n        public\n        view\n        returns (uint256[] memory orderFillableMakerAssetAmounts)\n    {\n        orderFillableMakerAssetAmounts = getLimitOrderFillableTakerAssetAmounts(\n            orders,\n            orderSignatures,\n            exchange\n        );\n        // `orderFillableMakerAssetAmounts` now holds taker asset amounts, so\n        // convert them to maker asset amounts.\n        for (uint256 i = 0; i < orders.length; ++i) {\n            if (orderFillableMakerAssetAmounts[i] != 0) {\n                orderFillableMakerAssetAmounts[i] = LibMathV06.getPartialAmountCeil(\n                    orderFillableMakerAssetAmounts[i],\n                    orders[i].takerAmount,\n                    orders[i].makerAmount\n                );\n            }\n        }\n    }\n\n    /// @dev Get the fillable taker amount of an order, taking into account\n    ///      order state, maker fees, and maker balances.\n    function getLimitOrderFillableTakerAmount(\n        IExchange.LimitOrder memory order,\n        IExchange.Signature memory signature,\n        IExchange exchange\n    )\n        virtual\n        public\n        view\n        returns (uint256 fillableTakerAmount)\n    {\n        if (signature.signatureType == IExchange.SignatureType.ILLEGAL ||\n            signature.signatureType == IExchange.SignatureType.INVALID ||\n            order.makerAmount == 0 ||\n            order.takerAmount == 0)\n        {\n            return 0;\n        }\n\n        (\n            IExchange.OrderInfo memory orderInfo,\n            uint128 remainingFillableTakerAmount,\n            bool isSignatureValid\n        ) = exchange.getLimitOrderRelevantState(order, signature);\n\n        if (\n              orderInfo.status != IExchange.OrderStatus.FILLABLE ||\n              !isSignatureValid ||\n              order.makerToken == IERC20TokenV06(0)\n            ) {\n            return 0;\n        }\n\n        fillableTakerAmount = uint256(remainingFillableTakerAmount);\n    }\n}\n"
        },
        "./ShellSampler.sol": {
            "id": 19,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./ApproximateBuys.sol\";\nimport \"./interfaces/IShell.sol\";\nimport \"./SamplerUtils.sol\";\n\n\ncontract ShellSampler is\n    SamplerUtils,\n    ApproximateBuys\n{\n\n    struct ShellInfo {\n        address poolAddress;\n    }\n\n    /// @dev Default gas limit for Shell calls.\n    uint256 constant private DEFAULT_CALL_GAS = 300e3; // 300k\n\n    /// @dev Sample sell quotes from the Shell pool contract\n    /// @param pool Address of the Shell pool contract\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromShell(\n        address pool,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        // Initialize array of maker token amounts.\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            try\n                IShell(pool).viewOriginSwap\n                    {gas: DEFAULT_CALL_GAS}\n                    (takerToken, makerToken, takerTokenAmounts[i])\n                returns (uint256 amount)\n            {\n                makerTokenAmounts[i] = amount;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from Shell pool contract\n    /// @param pool Address of the Shell pool contract\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromShell(\n        address pool,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        return _sampleApproximateBuys(\n            ApproximateBuyQuoteOpts({\n                makerTokenData: abi.encode(makerToken, pool),\n                takerTokenData: abi.encode(takerToken, pool),\n                getSellQuoteCallback: _sampleSellForApproximateBuyFromShell\n            }),\n            makerTokenAmounts\n        );\n    }\n\n    function _sampleSellForApproximateBuyFromShell(\n        bytes memory takerTokenData,\n        bytes memory makerTokenData,\n        uint256 sellAmount\n    )\n        private\n        view\n        returns (uint256 buyAmount)\n    {\n        (address takerToken, address pool) = abi.decode(takerTokenData, (address, address));\n        (address makerToken) = abi.decode(makerTokenData, (address));\n\n        try\n            this.sampleSellsFromShell\n                (pool, takerToken, makerToken, _toSingleValueArray(sellAmount))\n            returns (uint256[] memory amounts)\n        {\n            return amounts[0];\n        } catch (bytes memory) {\n            // Swallow failures, leaving all results as zero.\n            return 0;\n        }\n    }\n}\n"
        },
        "./interfaces/IShell.sol": {
            "id": 34,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface IShell {\n\n    function viewOriginSwap (\n        address from,\n        address to,\n        uint256 fromAmount\n    )\n        external\n        view\n        returns (uint256 toAmount);\n\n    function viewTargetSwap (\n        address from,\n        address to,\n        uint256 toAmount\n    )\n        external\n        view\n        returns (uint256 fromAmount);\n}\n\n"
        },
        "./SmoothySampler.sol": {
            "id": 20,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\n// import \"./interfaces/ISmoothy.sol\";\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\nimport \"./interfaces/ISmoothy.sol\";\n\ncontract SmoothySampler is\n    SamplerUtils,\n    ApproximateBuys\n{\n    /// @dev Information for sampling from smoothy sources.\n    struct SmoothyInfo {\n        address poolAddress;\n        bytes4 sellQuoteFunctionSelector;\n        bytes4 buyQuoteFunctionSelector;\n    }\n\n    /// @dev Base gas limit for Smoothy calls.\n    uint256 constant private SMOOTHY_CALL_GAS = 600e3;\n\n    /// @dev Sample sell quotes from Smoothy.\n    /// @param smoothyInfo Smoothy information specific to this token pair.\n    /// @param fromTokenIdx Index of the taker token (what to sell).\n    /// @param toTokenIdx Index of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromSmoothy(\n        SmoothyInfo memory smoothyInfo,\n        int128 fromTokenIdx,\n        int128 toTokenIdx,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        // Basically a Curve fork\n\n        // Smoothy only keep a percentage of its tokens available in reserve\n        uint256 poolReserveMakerAmount = ISmoothy(smoothyInfo.poolAddress).getBalance(uint256(toTokenIdx)) -\n                                         ISmoothy(smoothyInfo.poolAddress)._yBalances(uint256(toTokenIdx));\n        (, , , uint256 decimals) = ISmoothy(smoothyInfo.poolAddress).getTokenStats(uint256(toTokenIdx));\n        poolReserveMakerAmount = poolReserveMakerAmount/(10**(18-decimals));\n\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            (bool didSucceed, bytes memory resultData) =\n                smoothyInfo.poolAddress.staticcall.gas(SMOOTHY_CALL_GAS)(\n                    abi.encodeWithSelector(\n                        smoothyInfo.sellQuoteFunctionSelector,\n                        fromTokenIdx,\n                        toTokenIdx,\n                        takerTokenAmounts[i]\n                    ));\n            uint256 buyAmount = 0;\n            if (didSucceed) {\n                buyAmount = abi.decode(resultData, (uint256));\n            }\n\n            // Make sure the quoted buyAmount is available in the pool reserve\n            if (buyAmount >= poolReserveMakerAmount) {\n                // Assign pool reserve amount for all higher samples to break early\n                for (uint256 j = i; j < numSamples; j++) {\n                    makerTokenAmounts[j] = poolReserveMakerAmount;\n                }\n                break;\n            } else {\n                makerTokenAmounts[i] = buyAmount;\n            }\n\n            // Break early if there are 0 amounts\n            if (makerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from Smoothy.\n    /// @param smoothyInfo Smoothy information specific to this token pair.\n    /// @param fromTokenIdx Index of the taker token (what to sell).\n    /// @param toTokenIdx Index of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromSmoothy(\n        SmoothyInfo memory smoothyInfo,\n        int128 fromTokenIdx,\n        int128 toTokenIdx,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        // Buys not supported so approximate it.\n        return _sampleApproximateBuys(\n            ApproximateBuyQuoteOpts({\n                makerTokenData: abi.encode(toTokenIdx, smoothyInfo),\n                takerTokenData: abi.encode(fromTokenIdx, smoothyInfo),\n                getSellQuoteCallback: _sampleSellForApproximateBuyFromSmoothy\n            }),\n            makerTokenAmounts\n        );\n    }\n\n    function _sampleSellForApproximateBuyFromSmoothy(\n        bytes memory takerTokenData,\n        bytes memory makerTokenData,\n        uint256 sellAmount\n    )\n        private\n        view\n        returns (uint256 buyAmount)\n    {\n        (int128 takerTokenIdx, SmoothyInfo memory smoothyInfo) =\n            abi.decode(takerTokenData, (int128, SmoothyInfo));\n        (int128 makerTokenIdx) =\n            abi.decode(makerTokenData, (int128));\n        (bool success, bytes memory resultData) =\n            address(this).staticcall(abi.encodeWithSelector(\n                this.sampleSellsFromSmoothy.selector,\n                smoothyInfo,\n                takerTokenIdx,\n                makerTokenIdx,\n                _toSingleValueArray(sellAmount)\n            ));\n        if (!success) {\n            return 0;\n        }\n        // solhint-disable-next-line indent\n        return abi.decode(resultData, (uint256[]))[0];\n    }\n}\n"
        },
        "./interfaces/ISmoothy.sol": {
            "id": 35,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface ISmoothy {\n\n    function getBalance (\n        uint256 tid\n    )\n        external\n        view\n        returns (uint256 balance);\n\n    function _yBalances (\n        uint256 tid\n    )\n        external\n        view\n        returns (uint256 balance);\n\n    function getTokenStats (\n        uint256 tid\n    )\n        external\n        view\n        returns (uint256 softWeight, uint256 hardWeight, uint256 balance, uint256 decimals);\n}\n"
        },
        "./TwoHopSampler.sol": {
            "id": 21,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol\";\n\n\ncontract TwoHopSampler {\n    using LibBytesV06 for bytes;\n\n    struct HopInfo {\n        uint256 sourceIndex;\n        bytes returnData;\n    }\n\n    function sampleTwoHopSell(\n        bytes[] memory firstHopCalls,\n        bytes[] memory secondHopCalls,\n        uint256 sellAmount\n    )\n        public\n        returns (\n            HopInfo memory firstHop,\n            HopInfo memory secondHop,\n            uint256 buyAmount\n        )\n    {\n        uint256 intermediateAssetAmount = 0;\n        for (uint256 i = 0; i != firstHopCalls.length; ++i) {\n            firstHopCalls[i].writeUint256(firstHopCalls[i].length - 32, sellAmount);\n            (bool didSucceed, bytes memory returnData) = address(this).call(firstHopCalls[i]);\n            if (didSucceed) {\n                uint256 amount = returnData.readUint256(returnData.length - 32);\n                if (amount > intermediateAssetAmount) {\n                    intermediateAssetAmount = amount;\n                    firstHop.sourceIndex = i;\n                    firstHop.returnData = returnData;\n                }\n            }\n        }\n        if (intermediateAssetAmount == 0) {\n            return (firstHop, secondHop, buyAmount);\n        }\n        for (uint256 j = 0; j != secondHopCalls.length; ++j) {\n            secondHopCalls[j].writeUint256(secondHopCalls[j].length - 32, intermediateAssetAmount);\n            (bool didSucceed, bytes memory returnData) = address(this).call(secondHopCalls[j]);\n            if (didSucceed) {\n                uint256 amount = returnData.readUint256(returnData.length - 32);\n                if (amount > buyAmount) {\n                    buyAmount = amount;\n                    secondHop.sourceIndex = j;\n                    secondHop.returnData = returnData;\n                }\n            }\n        }\n    }\n\n    function sampleTwoHopBuy(\n        bytes[] memory firstHopCalls,\n        bytes[] memory secondHopCalls,\n        uint256 buyAmount\n    )\n        public\n        returns (\n            HopInfo memory firstHop,\n            HopInfo memory secondHop,\n            uint256 sellAmount\n        )\n    {\n        sellAmount = uint256(-1);\n        uint256 intermediateAssetAmount = uint256(-1);\n        for (uint256 j = 0; j != secondHopCalls.length; ++j) {\n            secondHopCalls[j].writeUint256(secondHopCalls[j].length - 32, buyAmount);\n            (bool didSucceed, bytes memory returnData) = address(this).call(secondHopCalls[j]);\n            if (didSucceed) {\n                uint256 amount = returnData.readUint256(returnData.length - 32);\n                if (\n                    amount > 0 &&\n                    amount < intermediateAssetAmount\n                ) {\n                    intermediateAssetAmount = amount;\n                    secondHop.sourceIndex = j;\n                    secondHop.returnData = returnData;\n                }\n            }\n        }\n        if (intermediateAssetAmount == uint256(-1)) {\n            return (firstHop, secondHop, sellAmount);\n        }\n        for (uint256 i = 0; i != firstHopCalls.length; ++i) {\n            firstHopCalls[i].writeUint256(firstHopCalls[i].length - 32, intermediateAssetAmount);\n            (bool didSucceed, bytes memory returnData) = address(this).call(firstHopCalls[i]);\n            if (didSucceed) {\n                uint256 amount = returnData.readUint256(returnData.length - 32);\n                if (\n                    amount > 0 &&\n                    amount < sellAmount\n                ) {\n                    sellAmount = amount;\n                    firstHop.sourceIndex = i;\n                    firstHop.returnData = returnData;\n                }\n            }\n        }\n    }\n}\n"
        },
        "./UniswapSampler.sol": {
            "id": 22,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IUniswapExchangeQuotes.sol\";\nimport \"./SamplerUtils.sol\";\n\n\ninterface IUniswapExchangeFactory {\n\n    /// @dev Get the exchange for a token.\n    /// @param tokenAddress The address of the token contract.\n    function getExchange(address tokenAddress)\n        external\n        view\n        returns (address);\n}\n\n\ncontract UniswapSampler is\n    SamplerUtils\n{\n    /// @dev Gas limit for Uniswap calls.\n    uint256 constant private UNISWAP_CALL_GAS = 150e3; // 150k\n\n    /// @dev Sample sell quotes from Uniswap.\n    /// @param router Address of the Uniswap Router\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromUniswap(\n        address router,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        IUniswapExchangeQuotes takerTokenExchange = takerToken == address(0) ?\n            IUniswapExchangeQuotes(0) : _getUniswapExchange(router, takerToken);\n        IUniswapExchangeQuotes makerTokenExchange = makerToken == address(0) ?\n            IUniswapExchangeQuotes(0) : _getUniswapExchange(router, makerToken);\n        for (uint256 i = 0; i < numSamples; i++) {\n            bool didSucceed = true;\n            if (makerToken == address(0)) {\n                (makerTokenAmounts[i], didSucceed) = _callUniswapExchangePriceFunction(\n                    address(takerTokenExchange),\n                    takerTokenExchange.getTokenToEthInputPrice.selector,\n                    takerTokenAmounts[i]\n                );\n            } else if (takerToken == address(0)) {\n                (makerTokenAmounts[i], didSucceed) = _callUniswapExchangePriceFunction(\n                    address(makerTokenExchange),\n                    makerTokenExchange.getEthToTokenInputPrice.selector,\n                    takerTokenAmounts[i]\n                );\n            } else {\n                uint256 ethBought;\n                (ethBought, didSucceed) = _callUniswapExchangePriceFunction(\n                    address(takerTokenExchange),\n                    takerTokenExchange.getTokenToEthInputPrice.selector,\n                    takerTokenAmounts[i]\n                );\n                if (ethBought != 0) {\n                    (makerTokenAmounts[i], didSucceed) = _callUniswapExchangePriceFunction(\n                        address(makerTokenExchange),\n                        makerTokenExchange.getEthToTokenInputPrice.selector,\n                        ethBought\n                    );\n                } else {\n                    makerTokenAmounts[i] = 0;\n                }\n            }\n            // Break early if amounts are 0\n            if (!didSucceed || makerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from Uniswap.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token sell amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromUniswap(\n        address router,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n\n        IUniswapExchangeQuotes takerTokenExchange = takerToken == address(0) ?\n            IUniswapExchangeQuotes(0) : _getUniswapExchange(router, takerToken);\n        IUniswapExchangeQuotes makerTokenExchange = makerToken == address(0) ?\n            IUniswapExchangeQuotes(0) : _getUniswapExchange(router, makerToken);\n        for (uint256 i = 0; i < numSamples; i++) {\n            bool didSucceed = true;\n            if (makerToken == address(0)) {\n                (takerTokenAmounts[i], didSucceed) = _callUniswapExchangePriceFunction(\n                    address(takerTokenExchange),\n                    takerTokenExchange.getTokenToEthOutputPrice.selector,\n                    makerTokenAmounts[i]\n                );\n            } else if (takerToken == address(0)) {\n                (takerTokenAmounts[i], didSucceed) = _callUniswapExchangePriceFunction(\n                    address(makerTokenExchange),\n                    makerTokenExchange.getEthToTokenOutputPrice.selector,\n                    makerTokenAmounts[i]\n                );\n            } else {\n                uint256 ethSold;\n                (ethSold, didSucceed) = _callUniswapExchangePriceFunction(\n                    address(makerTokenExchange),\n                    makerTokenExchange.getEthToTokenOutputPrice.selector,\n                    makerTokenAmounts[i]\n                );\n                if (ethSold != 0) {\n                    (takerTokenAmounts[i], didSucceed) = _callUniswapExchangePriceFunction(\n                        address(takerTokenExchange),\n                        takerTokenExchange.getTokenToEthOutputPrice.selector,\n                        ethSold\n                    );\n                } else {\n                    takerTokenAmounts[i] = 0;\n                }\n            }\n            // Break early if amounts are 0\n            if (!didSucceed || takerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n    }\n\n    /// @dev Gracefully calls a Uniswap pricing function.\n    /// @param uniswapExchangeAddress Address of an `IUniswapExchangeQuotes` exchange.\n    /// @param functionSelector Selector of the target function.\n    /// @param inputAmount Quantity parameter particular to the pricing function.\n    /// @return outputAmount The returned amount from the function call. Will be\n    ///         zero if the call fails or if `uniswapExchangeAddress` is zero.\n    function _callUniswapExchangePriceFunction(\n        address uniswapExchangeAddress,\n        bytes4 functionSelector,\n        uint256 inputAmount\n    )\n        private\n        view\n        returns (uint256 outputAmount, bool didSucceed)\n    {\n        if (uniswapExchangeAddress == address(0)) {\n            return (outputAmount, didSucceed);\n        }\n        bytes memory resultData;\n        (didSucceed, resultData) =\n            uniswapExchangeAddress.staticcall.gas(UNISWAP_CALL_GAS)(\n                abi.encodeWithSelector(\n                    functionSelector,\n                    inputAmount\n                ));\n        if (didSucceed) {\n            outputAmount = abi.decode(resultData, (uint256));\n        }\n    }\n\n    /// @dev Retrive an existing Uniswap exchange contract.\n    ///      Throws if the exchange does not exist.\n    /// @param router Address of the Uniswap router.\n    /// @param tokenAddress Address of the token contract.\n    /// @return exchange `IUniswapExchangeQuotes` for the token.\n    function _getUniswapExchange(address router, address tokenAddress)\n        private\n        view\n        returns (IUniswapExchangeQuotes exchange)\n    {\n        exchange = IUniswapExchangeQuotes(\n            address(IUniswapExchangeFactory(router)\n            .getExchange(tokenAddress))\n        );\n    }\n}\n"
        },
        "./interfaces/IUniswapExchangeQuotes.sol": {
            "id": 36,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface IUniswapExchangeQuotes {\n\n    function getEthToTokenInputPrice(\n        uint256 ethSold\n    )\n        external\n        view\n        returns (uint256 tokensBought);\n\n    function getEthToTokenOutputPrice(\n        uint256 tokensBought\n    )\n        external\n        view\n        returns (uint256 ethSold);\n\n    function getTokenToEthInputPrice(\n        uint256 tokensSold\n    )\n        external\n        view\n        returns (uint256 ethBought);\n\n    function getTokenToEthOutputPrice(\n        uint256 ethBought\n    )\n        external\n        view\n        returns (uint256 tokensSold);\n}\n"
        },
        "./UniswapV2Sampler.sol": {
            "id": 23,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IUniswapV2Router01.sol\";\n\n\ncontract UniswapV2Sampler\n{\n    /// @dev Gas limit for UniswapV2 calls.\n    uint256 constant private UNISWAPV2_CALL_GAS = 150e3; // 150k\n\n    /// @dev Sample sell quotes from UniswapV2.\n    /// @param router Router to look up tokens and amounts\n    /// @param path Token route. Should be takerToken -> makerToken\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromUniswapV2(\n        address router,\n        address[] memory path,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            try\n                IUniswapV2Router01(router).getAmountsOut\n                    {gas: UNISWAPV2_CALL_GAS}\n                    (takerTokenAmounts[i], path)\n                returns (uint256[] memory amounts)\n            {\n                makerTokenAmounts[i] = amounts[path.length - 1];\n                // Break early if there are 0 amounts\n                if (makerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from UniswapV2.\n    /// @param router Router to look up tokens and amounts\n    /// @param path Token route. Should be takerToken -> makerToken.\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromUniswapV2(\n        address router,\n        address[] memory path,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            try\n                IUniswapV2Router01(router).getAmountsIn\n                    {gas: UNISWAPV2_CALL_GAS}\n                    (makerTokenAmounts[i], path)\n                returns (uint256[] memory amounts)\n            {\n                takerTokenAmounts[i] = amounts[0];\n                // Break early if there are 0 amounts\n                if (takerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n}\n"
        },
        "./interfaces/IUniswapV2Router01.sol": {
            "id": 37,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface IUniswapV2Router01 {\n\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts);\n\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts);\n}\n"
        },
        "./UniswapV3Sampler.sol": {
            "id": 24,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\n\ninterface IUniswapV3Quoter {\n    function factory()\n        external\n        view\n        returns (IUniswapV3Factory factory);\n    function quoteExactInput(bytes memory path, uint256 amountIn)\n        external\n        returns (uint256 amountOut);\n    function quoteExactOutput(bytes memory path, uint256 amountOut)\n        external\n        returns (uint256 amountIn);\n}\n\ninterface IUniswapV3Factory {\n    function getPool(IERC20TokenV06 a, IERC20TokenV06 b, uint24 fee)\n        external\n        view\n        returns (IUniswapV3Pool pool);\n}\n\ninterface IUniswapV3Pool {\n    function token0() external view returns (IERC20TokenV06);\n    function token1() external view returns (IERC20TokenV06);\n    function fee() external view returns (uint24);\n}\n\ncontract UniswapV3Sampler\n{\n    /// @dev Gas limit for UniswapV3 calls. This is 100% a guess.\n    uint256 constant private QUOTE_GAS = 300e3;\n\n    /// @dev Sample sell quotes from UniswapV3.\n    /// @param quoter UniswapV3 Quoter contract.\n    /// @param path Token route. Should be takerToken -> makerToken\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return uniswapPaths The encoded uniswap path for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromUniswapV3(\n        IUniswapV3Quoter quoter,\n        IERC20TokenV06[] memory path,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        returns (\n            bytes[] memory uniswapPaths,\n            uint256[] memory makerTokenAmounts\n        )\n    {\n        IUniswapV3Pool[][] memory poolPaths =\n            _getValidPoolPaths(quoter.factory(), path, 0);\n\n        makerTokenAmounts = new uint256[](takerTokenAmounts.length);\n        uniswapPaths = new bytes[](takerTokenAmounts.length);\n\n        for (uint256 i = 0; i < takerTokenAmounts.length; ++i) {\n            // Pick the best result from all the paths.\n            bytes memory topUniswapPath;\n            uint256 topBuyAmount = 0;\n            for (uint256 j = 0; j < poolPaths.length; ++j) {\n                bytes memory uniswapPath = _toUniswapPath(path, poolPaths[j]);\n                try\n                    quoter.quoteExactInput\n                        { gas: QUOTE_GAS }\n                        (uniswapPath, takerTokenAmounts[i])\n                        returns (uint256 buyAmount)\n                {\n                    if (topBuyAmount <= buyAmount) {\n                        topBuyAmount = buyAmount;\n                        topUniswapPath = uniswapPath;\n                    }\n                } catch { }\n            }\n            // Break early if we can't complete the buys.\n            if (topBuyAmount == 0) {\n                break;\n            }\n            makerTokenAmounts[i] = topBuyAmount;\n            uniswapPaths[i] = topUniswapPath;\n        }\n    }\n\n    /// @dev Sample buy quotes from UniswapV3.\n    /// @param quoter UniswapV3 Quoter contract.\n    /// @param path Token route. Should be takerToken -> makerToken.\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return uniswapPaths The encoded uniswap path for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromUniswapV3(\n        IUniswapV3Quoter quoter,\n        IERC20TokenV06[] memory path,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        returns (\n            bytes[] memory uniswapPaths,\n            uint256[] memory takerTokenAmounts\n        )\n    {\n        IUniswapV3Pool[][] memory poolPaths =\n            _getValidPoolPaths(quoter.factory(), path, 0);\n        IERC20TokenV06[] memory reversedPath = _reverseTokenPath(path);\n\n        takerTokenAmounts = new uint256[](makerTokenAmounts.length);\n        uniswapPaths = new bytes[](makerTokenAmounts.length);\n\n        for (uint256 i = 0; i < makerTokenAmounts.length; ++i) {\n            // Pick the best result from all the paths.\n            bytes memory topUniswapPath;\n            uint256 topSellAmount = 0;\n            for (uint256 j = 0; j < poolPaths.length; ++j) {\n                // quoter requires path to be reversed for buys.\n                bytes memory uniswapPath = _toUniswapPath(\n                    reversedPath,\n                    _reversePoolPath(poolPaths[j])\n                );\n                try\n                    quoter.quoteExactOutput\n                        { gas: QUOTE_GAS }\n                        (uniswapPath, makerTokenAmounts[i])\n                        returns (uint256 sellAmount)\n                {\n                    if (topSellAmount == 0 || topSellAmount >= sellAmount) {\n                        topSellAmount = sellAmount;\n                        // But the output path should still be encoded for sells.\n                        topUniswapPath = _toUniswapPath(path, poolPaths[j]);\n                    }\n                } catch {}\n            }\n            // Break early if we can't complete the buys.\n            if (topSellAmount == 0) {\n                break;\n            }\n            takerTokenAmounts[i] = topSellAmount;\n            uniswapPaths[i] = topUniswapPath;\n        }\n    }\n\n    function _getValidPoolPaths(\n        IUniswapV3Factory factory,\n        IERC20TokenV06[] memory tokenPath,\n        uint256 startIndex\n    )\n        private\n        view\n        returns (IUniswapV3Pool[][] memory poolPaths)\n    {\n        require(\n            tokenPath.length - startIndex >= 2,\n            \"UniswapV3Sampler/tokenPath too short\"\n        );\n        uint24[3] memory validPoolFees = [\n            // The launch pool fees. Could get hairier if they add more.\n            uint24(0.0005e6),\n            uint24(0.003e6),\n            uint24(0.01e6)\n        ];\n        IUniswapV3Pool[] memory validPools =\n            new IUniswapV3Pool[](validPoolFees.length);\n        uint256 numValidPools = 0;\n        {\n            IERC20TokenV06 inputToken = tokenPath[startIndex];\n            IERC20TokenV06 outputToken = tokenPath[startIndex + 1];\n            for (uint256 i = 0; i < validPoolFees.length; ++i) {\n                IUniswapV3Pool pool =\n                factory.getPool(inputToken, outputToken, validPoolFees[i]);\n                if (_isValidPool(pool)) {\n                    validPools[numValidPools++] = pool;\n                }\n            }\n        }\n        if (numValidPools == 0) {\n            // No valid pools for this hop.\n            return poolPaths;\n        }\n        if (startIndex + 2 == tokenPath.length) {\n            // End of path.\n            poolPaths = new IUniswapV3Pool[][](numValidPools);\n            for (uint256 i = 0; i < numValidPools; ++i) {\n                poolPaths[i] = new IUniswapV3Pool[](1);\n                poolPaths[i][0] = validPools[i];\n            }\n            return poolPaths;\n        }\n        // Get paths for subsequent hops.\n        IUniswapV3Pool[][] memory subsequentPoolPaths =\n            _getValidPoolPaths(factory, tokenPath, startIndex + 1);\n        if (subsequentPoolPaths.length == 0) {\n            // Could not complete the path.\n            return poolPaths;\n        }\n        // Combine our pools with the next hop paths.\n        poolPaths = new IUniswapV3Pool[][](\n            numValidPools * subsequentPoolPaths.length\n        );\n        for (uint256 i = 0; i < numValidPools; ++i) {\n            for (uint256 j = 0; j < subsequentPoolPaths.length; ++j) {\n                uint256 o = i * subsequentPoolPaths.length + j;\n                // Prepend pool to the subsequent path.\n                poolPaths[o] =\n                    new IUniswapV3Pool[](1 + subsequentPoolPaths[j].length);\n                poolPaths[o][0] = validPools[i];\n                for (uint256 k = 0; k < subsequentPoolPaths[j].length; ++k) {\n                    poolPaths[o][1 + k] = subsequentPoolPaths[j][k];\n                }\n            }\n        }\n        return poolPaths;\n    }\n\n    function _reverseTokenPath(IERC20TokenV06[] memory tokenPath)\n        private\n        returns (IERC20TokenV06[] memory reversed)\n    {\n        reversed = new IERC20TokenV06[](tokenPath.length);\n        for (uint256 i = 0; i < tokenPath.length; ++i) {\n            reversed[i] = tokenPath[tokenPath.length - i - 1];\n        }\n    }\n\n    function _reversePoolPath(IUniswapV3Pool[] memory poolPath)\n        private\n        returns (IUniswapV3Pool[] memory reversed)\n    {\n        reversed = new IUniswapV3Pool[](poolPath.length);\n        for (uint256 i = 0; i < poolPath.length; ++i) {\n            reversed[i] = poolPath[poolPath.length - i - 1];\n        }\n    }\n\n    function _isValidPool(IUniswapV3Pool pool)\n        private\n        view\n        returns (bool isValid)\n    {\n        // Check if it has been deployed.\n        {\n            uint256 codeSize;\n            assembly {\n                codeSize := extcodesize(pool)\n            }\n            if (codeSize == 0) {\n                return false;\n            }\n        }\n        // Must have a balance of both tokens.\n        if (pool.token0().balanceOf(address(pool)) == 0) {\n            return false;\n        }\n        if (pool.token1().balanceOf(address(pool)) == 0) {\n            return false;\n        }\n        return true;\n    }\n\n    function _toUniswapPath(\n        IERC20TokenV06[] memory tokenPath,\n        IUniswapV3Pool[] memory poolPath\n    )\n        private\n        view\n        returns (bytes memory uniswapPath)\n    {\n        require(\n            tokenPath.length >= 2 && tokenPath.length == poolPath.length + 1,\n            \"UniswapV3Sampler/invalid path lengths\"\n        );\n        // Uniswap paths are tightly packed as:\n        // [token0, token0token1PairFee, token1, token1Token2PairFee, token2, ...]\n        uniswapPath = new bytes(tokenPath.length * 20 + poolPath.length * 3);\n        uint256 o;\n        assembly { o := add(uniswapPath, 32) }\n        for (uint256 i = 0; i < tokenPath.length; ++i) {\n            if (i > 0) {\n                uint24 poolFee = poolPath[i - 1].fee();\n                assembly {\n                    mstore(o, shl(232, poolFee))\n                    o := add(o, 3)\n                }\n            }\n            IERC20TokenV06 token = tokenPath[i];\n            assembly {\n                mstore(o, shl(96, token))\n                o := add(o, 20)\n            }\n        }\n    }\n}\n"
        },
        "./UtilitySampler.sol": {
            "id": 25,
            "content": "\n// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\n\ncontract UtilitySampler {\n\n    using LibERC20TokenV06 for IERC20TokenV06;\n\n    IERC20TokenV06 private immutable UTILITY_ETH_ADDRESS = IERC20TokenV06(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\n\n    function getTokenDecimals(IERC20TokenV06[] memory tokens)\n        public\n        view\n        returns (uint256[] memory decimals)\n    {\n        decimals = new uint256[](tokens.length);\n        for (uint256 i = 0; i != tokens.length; i++) {\n            decimals[i] = tokens[i] == UTILITY_ETH_ADDRESS\n                ? 18\n                : tokens[i].compatDecimals();\n        }\n    }\n\n    function getBalanceOf(IERC20TokenV06[] memory tokens, address account)\n        public\n        view\n        returns (uint256[] memory balances)\n    {\n        balances = new uint256[](tokens.length);\n        for (uint256 i = 0; i != tokens.length; i++) {\n            balances[i] = tokens[i] == UTILITY_ETH_ADDRESS\n                ? account.balance\n                : tokens[i].compatBalanceOf(account);\n        }\n    }\n\n    function getAllowanceOf(IERC20TokenV06[] memory tokens, address account, address spender)\n        public\n        view\n        returns (uint256[] memory allowances)\n    {\n        allowances = new uint256[](tokens.length);\n        for (uint256 i = 0; i != tokens.length; i++) {\n            allowances[i] = tokens[i] == UTILITY_ETH_ADDRESS\n                ? 0\n                : tokens[i].compatAllowance(account, spender);\n        }\n    }\n\n    function isContract(address account)\n        public\n        view\n        returns (bool)\n    {\n        uint256 size;\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n}"
        }
    },
    "sourceCodes": {
        "./ERC20BridgeSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./BalancerSampler.sol\";\nimport \"./BalancerV2Sampler.sol\";\nimport \"./BancorSampler.sol\";\nimport \"./CurveSampler.sol\";\nimport \"./DODOSampler.sol\";\nimport \"./DODOV2Sampler.sol\";\nimport \"./Eth2DaiSampler.sol\";\nimport \"./KyberSampler.sol\";\nimport \"./KyberDmmSampler.sol\";\nimport \"./LidoSampler.sol\";\nimport \"./LiquidityProviderSampler.sol\";\nimport \"./MakerPSMSampler.sol\";\nimport \"./MultiBridgeSampler.sol\";\nimport \"./MStableSampler.sol\";\nimport \"./MooniswapSampler.sol\";\nimport \"./NativeOrderSampler.sol\";\nimport \"./ShellSampler.sol\";\nimport \"./SmoothySampler.sol\";\nimport \"./TwoHopSampler.sol\";\nimport \"./UniswapSampler.sol\";\nimport \"./UniswapV2Sampler.sol\";\nimport \"./UniswapV3Sampler.sol\";\nimport \"./UtilitySampler.sol\";\n\n\ncontract ERC20BridgeSampler is\n    BalancerSampler,\n    BalancerV2Sampler,\n    BancorSampler,\n    CurveSampler,\n    DODOSampler,\n    DODOV2Sampler,\n    Eth2DaiSampler,\n    KyberSampler,\n    KyberDmmSampler,\n    LidoSampler,\n    LiquidityProviderSampler,\n    MakerPSMSampler,\n    MStableSampler,\n    MooniswapSampler,\n    MultiBridgeSampler,\n    NativeOrderSampler,\n    ShellSampler,\n    SmoothySampler,\n    TwoHopSampler,\n    UniswapSampler,\n    UniswapV2Sampler,\n    UniswapV3Sampler,\n    UtilitySampler\n{\n\n    struct CallResults {\n        bytes data;\n        bool success;\n    }\n\n    /// @dev Call multiple public functions on this contract in a single transaction.\n    /// @param callDatas ABI-encoded call data for each function call.\n    /// @return callResults ABI-encoded results data for each call.\n    function batchCall(bytes[] calldata callDatas)\n        external\n        returns (CallResults[] memory callResults)\n    {\n        callResults = new CallResults[](callDatas.length);\n        for (uint256 i = 0; i != callDatas.length; ++i) {\n            callResults[i].success = true;\n            if (callDatas[i].length == 0) {\n                continue;\n            }\n            (callResults[i].success, callResults[i].data) = address(this).call(callDatas[i]);\n        }\n    }\n}\n",
        "./BalancerSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IBalancer.sol\";\n\n\ncontract BalancerSampler {\n\n    /// @dev Base gas limit for Balancer calls.\n    uint256 constant private BALANCER_CALL_GAS = 300e3; // 300k\n\n    // Balancer math constants\n    // https://github.com/balancer-labs/balancer-core/blob/master/contracts/BConst.sol\n    uint256 constant private BONE = 10 ** 18;\n    uint256 constant private MAX_IN_RATIO = BONE / 2;\n    uint256 constant private MAX_OUT_RATIO = (BONE / 3) + 1 wei;\n\n    struct BalancerState {\n        uint256 takerTokenBalance;\n        uint256 makerTokenBalance;\n        uint256 takerTokenWeight;\n        uint256 makerTokenWeight;\n        uint256 swapFee;\n    }\n\n    /// @dev Sample sell quotes from Balancer.\n    /// @param poolAddress Address of the Balancer pool to query.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromBalancer(\n        address poolAddress,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        IBalancer pool = IBalancer(poolAddress);\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        if (!pool.isBound(takerToken) || !pool.isBound(makerToken)) {\n            return makerTokenAmounts;\n        }\n\n        BalancerState memory poolState;\n        poolState.takerTokenBalance = pool.getBalance(takerToken);\n        poolState.makerTokenBalance = pool.getBalance(makerToken);\n        poolState.takerTokenWeight = pool.getDenormalizedWeight(takerToken);\n        poolState.makerTokenWeight = pool.getDenormalizedWeight(makerToken);\n        poolState.swapFee = pool.getSwapFee();\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            // Handles this revert scenario:\n            // https://github.com/balancer-labs/balancer-core/blob/master/contracts/BPool.sol#L443\n            if (takerTokenAmounts[i] > _bmul(poolState.takerTokenBalance, MAX_IN_RATIO)) {\n                break;\n            }\n            try\n                pool.calcOutGivenIn\n                    {gas: BALANCER_CALL_GAS}\n                    (\n                        poolState.takerTokenBalance,\n                        poolState.takerTokenWeight,\n                        poolState.makerTokenBalance,\n                        poolState.makerTokenWeight,\n                        takerTokenAmounts[i],\n                        poolState.swapFee\n                    )\n                returns (uint256 amount)\n            {\n                makerTokenAmounts[i] = amount;\n                // Break early if there are 0 amounts\n                if (makerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from Balancer.\n    /// @param poolAddress Address of the Balancer pool to query.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromBalancer(\n        address poolAddress,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        IBalancer pool = IBalancer(poolAddress);\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n        if (!pool.isBound(takerToken) || !pool.isBound(makerToken)) {\n            return takerTokenAmounts;\n        }\n\n        BalancerState memory poolState;\n        poolState.takerTokenBalance = pool.getBalance(takerToken);\n        poolState.makerTokenBalance = pool.getBalance(makerToken);\n        poolState.takerTokenWeight = pool.getDenormalizedWeight(takerToken);\n        poolState.makerTokenWeight = pool.getDenormalizedWeight(makerToken);\n        poolState.swapFee = pool.getSwapFee();\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            // Handles this revert scenario:\n            // https://github.com/balancer-labs/balancer-core/blob/master/contracts/BPool.sol#L505\n            if (makerTokenAmounts[i] > _bmul(poolState.makerTokenBalance, MAX_OUT_RATIO)) {\n                break;\n            }\n            try\n                pool.calcInGivenOut\n                    {gas: BALANCER_CALL_GAS}\n                    (\n                        poolState.takerTokenBalance,\n                        poolState.takerTokenWeight,\n                        poolState.makerTokenBalance,\n                        poolState.makerTokenWeight,\n                        makerTokenAmounts[i],\n                        poolState.swapFee\n                    )\n                returns (uint256 amount)\n            {\n                takerTokenAmounts[i] = amount;\n                // Break early if there are 0 amounts\n                if (takerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    /// @dev Hacked version of Balancer's `bmul` function, returning 0 instead\n    ///      of reverting.\n    ///      https://github.com/balancer-labs/balancer-core/blob/master/contracts/BNum.sol#L63-L73\n    /// @param a The first operand.\n    /// @param b The second operand.\n    /// @param c The result of the multiplication, or 0 if `bmul` would've reverted.\n    function _bmul(uint256 a, uint256 b)\n        private\n        pure\n        returns (uint256 c)\n    {\n        uint c0 = a * b;\n        if (a != 0 && c0 / a != b) {\n            return 0;\n        }\n        uint c1 = c0 + (BONE / 2);\n        if (c1 < c0) {\n            return 0;\n        }\n        uint c2 = c1 / BONE;\n        return c2;\n    }\n}\n",
        "./interfaces/IBalancer.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface IBalancer {\n    function isBound(address t) external view returns (bool);\n    function getDenormalizedWeight(address token) external view returns (uint256);\n    function getBalance(address token) external view returns (uint256);\n    function getSwapFee() external view returns (uint256);\n    function calcOutGivenIn(\n        uint256 tokenBalanceIn,\n        uint256 tokenWeightIn,\n        uint256 tokenBalanceOut,\n        uint256 tokenWeightOut,\n        uint256 tokenAmountIn,\n        uint256 swapFee\n    ) external pure returns (uint256 tokenAmountOut);\n    function calcInGivenOut(\n        uint256 tokenBalanceIn,\n        uint256 tokenWeightIn,\n        uint256 tokenBalanceOut,\n        uint256 tokenWeightOut,\n        uint256 tokenAmountOut,\n        uint256 swapFee\n    ) external pure returns (uint256 tokenAmountIn);\n}\n",
        "./BalancerV2Sampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./SamplerUtils.sol\";\n\n/// @dev Minimal Balancer V2 Vault interface\n///      for documentation refer to https://github.com/balancer-labs/balancer-core-v2/blob/master/contracts/vault/interfaces/IVault.sol\ninterface IBalancerV2Vault {\n    enum SwapKind { GIVEN_IN, GIVEN_OUT }\n\n    struct BatchSwapStep {\n        bytes32 poolId;\n        uint256 assetInIndex;\n        uint256 assetOutIndex;\n        uint256 amount;\n        bytes userData;\n    }\n\n    struct FundManagement {\n        address sender;\n        bool fromInternalBalance;\n        address payable recipient;\n        bool toInternalBalance;\n    }\n\n    function queryBatchSwap(\n        SwapKind kind,\n        BatchSwapStep[] calldata swaps,\n        IAsset[] calldata assets,\n        FundManagement calldata funds\n    ) external returns (int256[] memory assetDeltas);\n}\ninterface IAsset {\n    // solhint-disable-previous-line no-empty-blocks\n}\n\ncontract BalancerV2Sampler is SamplerUtils {\n\n    struct BalancerV2PoolInfo {\n        bytes32 poolId;\n        address vault;\n    }\n\n    /// @dev Sample sell quotes from Balancer V2.\n    /// @param poolInfo Struct with pool related data\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromBalancerV2(\n        BalancerV2PoolInfo memory poolInfo,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        IBalancerV2Vault vault = IBalancerV2Vault(poolInfo.vault);\n        IAsset[] memory swapAssets = new IAsset[](2);\n        swapAssets[0] = IAsset(takerToken);\n        swapAssets[1] = IAsset(makerToken);\n\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        IBalancerV2Vault.FundManagement memory swapFunds =\n            _createSwapFunds();\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            IBalancerV2Vault.BatchSwapStep[] memory swapSteps =\n                _createSwapSteps(poolInfo, takerTokenAmounts[i]);\n\n            try\n                // For sells we specify the takerToken which is what the vault will receive from the trade\n                vault.queryBatchSwap(IBalancerV2Vault.SwapKind.GIVEN_IN, swapSteps, swapAssets, swapFunds)\n            // amounts represent pool balance deltas from the swap (incoming balance, outgoing balance)\n            returns (int256[] memory amounts) {\n                // Outgoing balance is negative so we need to flip the sign\n                int256 amountOutFromPool = amounts[1] * -1;\n                if (amountOutFromPool <= 0) {\n                    break;\n                }\n                makerTokenAmounts[i] = uint256(amountOutFromPool);\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from Balancer V2.\n    /// @param poolInfo Struct with pool related data\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromBalancerV2(\n        BalancerV2PoolInfo memory poolInfo,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        IBalancerV2Vault vault = IBalancerV2Vault(poolInfo.vault);\n        IAsset[] memory swapAssets = new IAsset[](2);\n        swapAssets[0] = IAsset(takerToken);\n        swapAssets[1] = IAsset(makerToken);\n\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n        IBalancerV2Vault.FundManagement memory swapFunds =\n            _createSwapFunds();\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            IBalancerV2Vault.BatchSwapStep[] memory swapSteps =\n                _createSwapSteps(poolInfo, makerTokenAmounts[i]);\n\n            try\n                // For buys we specify the makerToken which is what taker will receive from the trade\n                vault.queryBatchSwap(IBalancerV2Vault.SwapKind.GIVEN_OUT, swapSteps, swapAssets, swapFunds)\n            returns (int256[] memory amounts) {\n                int256 amountIntoPool = amounts[0];\n                if (amountIntoPool <= 0) {\n                    break;\n                }\n                takerTokenAmounts[i] = uint256(amountIntoPool);\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    function _createSwapSteps(\n        BalancerV2PoolInfo memory poolInfo,\n        uint256 amount\n    ) private pure returns (IBalancerV2Vault.BatchSwapStep[] memory) {\n        IBalancerV2Vault.BatchSwapStep[] memory swapSteps =\n            new IBalancerV2Vault.BatchSwapStep[](1);\n        swapSteps[0] = IBalancerV2Vault.BatchSwapStep({\n            poolId: poolInfo.poolId,\n            assetInIndex: 0,\n            assetOutIndex: 1,\n            amount: amount,\n            userData: \"\"\n        });\n\n        return swapSteps;\n    }\n\n    function _createSwapFunds()\n        private\n        view\n        returns (IBalancerV2Vault.FundManagement memory)\n    {\n        return\n            IBalancerV2Vault.FundManagement({\n                sender: address(this),\n                fromInternalBalance: false,\n                recipient: payable(address(this)),\n                toInternalBalance: false\n            });\n    }\n}\n",
        "./SamplerUtils.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\n\n\ncontract SamplerUtils {\n\n    /// @dev Overridable way to get token decimals.\n    /// @param tokenAddress Address of the token.\n    /// @return decimals The decimal places for the token.\n    function _getTokenDecimals(address tokenAddress)\n        virtual\n        internal\n        view\n        returns (uint8 decimals)\n    {\n        return LibERC20TokenV06.compatDecimals(IERC20TokenV06(tokenAddress));\n    }\n\n    function _toSingleValueArray(uint256 v)\n        internal\n        pure\n        returns (uint256[] memory arr)\n    {\n        arr = new uint256[](1);\n        arr[0] = v;\n    }\n\n    /// @dev Assert that the tokens in a trade pair are valid.\n    /// @param makerToken Address of the maker token.\n    /// @param takerToken Address of the taker token.\n    function _assertValidPair(address makerToken, address takerToken)\n        internal\n        pure\n    {\n        require(makerToken != takerToken, \"ERC20BridgeSampler/INVALID_TOKEN_PAIR\");\n    }\n}\n",
        "@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol\";\nimport \"./IERC20TokenV06.sol\";\n\n\nlibrary LibERC20TokenV06 {\n    bytes constant private DECIMALS_CALL_DATA = hex\"313ce567\";\n\n    /// @dev Calls `IERC20TokenV06(token).approve()`.\n    ///      Reverts if the return data is invalid or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param spender The address that receives an allowance.\n    /// @param allowance The allowance to set.\n    function compatApprove(\n        IERC20TokenV06 token,\n        address spender,\n        uint256 allowance\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.approve.selector,\n            spender,\n            allowance\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).approve()` and sets the allowance to the\n    ///      maximum if the current approval is not already >= an amount.\n    ///      Reverts if the return data is invalid or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param spender The address that receives an allowance.\n    /// @param amount The minimum allowance needed.\n    function approveIfBelow(\n        IERC20TokenV06 token,\n        address spender,\n        uint256 amount\n    )\n        internal\n    {\n        if (token.allowance(address(this), spender) < amount) {\n            compatApprove(token, spender, uint256(-1));\n        }\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).transfer()`.\n    ///      Reverts if the return data is invalid or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param to The address that receives the tokens\n    /// @param amount Number of tokens to transfer.\n    function compatTransfer(\n        IERC20TokenV06 token,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.transfer.selector,\n            to,\n            amount\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).transferFrom()`.\n    ///      Reverts if the return data is invalid or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param from The owner of the tokens.\n    /// @param to The address that receives the tokens\n    /// @param amount Number of tokens to transfer.\n    function compatTransferFrom(\n        IERC20TokenV06 token,\n        address from,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.transferFrom.selector,\n            from,\n            to,\n            amount\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Retrieves the number of decimals for a token.\n    ///      Returns `18` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @return tokenDecimals The number of decimals places for the token.\n    function compatDecimals(IERC20TokenV06 token)\n        internal\n        view\n        returns (uint8 tokenDecimals)\n    {\n        tokenDecimals = 18;\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(DECIMALS_CALL_DATA);\n        if (didSucceed && resultData.length >= 32) {\n            tokenDecimals = uint8(LibBytesV06.readUint256(resultData, 0));\n        }\n    }\n\n    /// @dev Retrieves the allowance for a token, owner, and spender.\n    ///      Returns `0` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @param owner The owner of the tokens.\n    /// @param spender The address the spender.\n    /// @return allowance_ The allowance for a token, owner, and spender.\n    function compatAllowance(IERC20TokenV06 token, address owner, address spender)\n        internal\n        view\n        returns (uint256 allowance_)\n    {\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(\n            abi.encodeWithSelector(\n                token.allowance.selector,\n                owner,\n                spender\n            )\n        );\n        if (didSucceed && resultData.length >= 32) {\n            allowance_ = LibBytesV06.readUint256(resultData, 0);\n        }\n    }\n\n    /// @dev Retrieves the balance for a token owner.\n    ///      Returns `0` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @param owner The owner of the tokens.\n    /// @return balance The token balance of an owner.\n    function compatBalanceOf(IERC20TokenV06 token, address owner)\n        internal\n        view\n        returns (uint256 balance)\n    {\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(\n            abi.encodeWithSelector(\n                token.balanceOf.selector,\n                owner\n            )\n        );\n        if (didSucceed && resultData.length >= 32) {\n            balance = LibBytesV06.readUint256(resultData, 0);\n        }\n    }\n\n    /// @dev Executes a call on address `target` with calldata `callData`\n    ///      and asserts that either nothing was returned or a single boolean\n    ///      was returned equal to `true`.\n    /// @param target The call target.\n    /// @param callData The abi-encoded call data.\n    function _callWithOptionalBooleanResult(\n        address target,\n        bytes memory callData\n    )\n        private\n    {\n        (bool didSucceed, bytes memory resultData) = target.call(callData);\n        // Revert if the call reverted.\n        if (!didSucceed) {\n            LibRichErrorsV06.rrevert(resultData);\n        }\n        // If we get back 0 returndata, this may be a non-standard ERC-20 that\n        // does not return a boolean. Check that it at least contains code.\n        if (resultData.length == 0) {\n            uint256 size;\n            assembly { size := extcodesize(target) }\n            require(size > 0, \"invalid token address, contains no code\");\n            return;\n        }\n        // If we get back at least 32 bytes, we know the target address\n        // contains code, and we assume it is a token that returned a boolean\n        // success value, which must be true.\n        if (resultData.length >= 32) {\n            uint256 result = LibBytesV06.readUint256(resultData, 0);\n            if (result == 1) {\n                return;\n            } else {\n                LibRichErrorsV06.rrevert(resultData);\n            }\n        }\n        // If 0 < returndatasize < 32, the target is a contract, but not a\n        // valid token.\n        LibRichErrorsV06.rrevert(resultData);\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibRichErrorsV06 {\n\n    // bytes4(keccak256(\"Error(string)\"))\n    bytes4 internal constant STANDARD_ERROR_SELECTOR = 0x08c379a0;\n\n    // solhint-disable func-name-mixedcase\n    /// @dev ABI encode a standard, string revert error payload.\n    ///      This is the same payload that would be included by a `revert(string)`\n    ///      solidity statement. It has the function signature `Error(string)`.\n    /// @param message The error string.\n    /// @return The ABI encoded error.\n    function StandardError(string memory message)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            STANDARD_ERROR_SELECTOR,\n            bytes(message)\n        );\n    }\n    // solhint-enable func-name-mixedcase\n\n    /// @dev Reverts an encoded rich revert reason `errorData`.\n    /// @param errorData ABI encoded error data.\n    function rrevert(bytes memory errorData)\n        internal\n        pure\n    {\n        assembly {\n            revert(add(errorData, 0x20), mload(errorData))\n        }\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./errors/LibBytesRichErrorsV06.sol\";\nimport \"./errors/LibRichErrorsV06.sol\";\n\n\nlibrary LibBytesV06 {\n\n    using LibBytesV06 for bytes;\n\n    /// @dev Gets the memory address for a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of byte array. This\n    ///         points to the header of the byte array which contains\n    ///         the length.\n    function rawAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := input\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Gets the memory address for the contents of a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of the contents of the byte array.\n    function contentAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := add(input, 32)\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Copies `length` bytes from memory location `source` to `dest`.\n    /// @param dest memory address to copy bytes to.\n    /// @param source memory address to copy bytes from.\n    /// @param length number of bytes to copy.\n    function memCopy(\n        uint256 dest,\n        uint256 source,\n        uint256 length\n    )\n        internal\n        pure\n    {\n        if (length < 32) {\n            // Handle a partial word by reading destination and masking\n            // off the bits we are interested in.\n            // This correctly handles overlap, zero lengths and source == dest\n            assembly {\n                let mask := sub(exp(256, sub(32, length)), 1)\n                let s := and(mload(source), not(mask))\n                let d := and(mload(dest), mask)\n                mstore(dest, or(s, d))\n            }\n        } else {\n            // Skip the O(length) loop when source == dest.\n            if (source == dest) {\n                return;\n            }\n\n            // For large copies we copy whole words at a time. The final\n            // word is aligned to the end of the range (instead of after the\n            // previous) to handle partial words. So a copy will look like this:\n            //\n            //  ####\n            //      ####\n            //          ####\n            //            ####\n            //\n            // We handle overlap in the source and destination range by\n            // changing the copying direction. This prevents us from\n            // overwriting parts of source that we still need to copy.\n            //\n            // This correctly handles source == dest\n            //\n            if (source > dest) {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because it\n                    // is easier to compare with in the loop, and these\n                    // are also the addresses we need for copying the\n                    // last bytes.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the last 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the last bytes in\n                    // source already due to overlap.\n                    let last := mload(sEnd)\n\n                    // Copy whole words front to back\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} lt(source, sEnd) {} {\n                        mstore(dest, mload(source))\n                        source := add(source, 32)\n                        dest := add(dest, 32)\n                    }\n\n                    // Write the last 32 bytes\n                    mstore(dEnd, last)\n                }\n            } else {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because those\n                    // are the starting points when copying a word at the end.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the first 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the first bytes in\n                    // source already due to overlap.\n                    let first := mload(source)\n\n                    // Copy whole words back to front\n                    // We use a signed comparisson here to allow dEnd to become\n                    // negative (happens when source and dest < 32). Valid\n                    // addresses in local memory will never be larger than\n                    // 2**255, so they can be safely re-interpreted as signed.\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} slt(dest, dEnd) {} {\n                        mstore(dEnd, mload(sEnd))\n                        sEnd := sub(sEnd, 32)\n                        dEnd := sub(dEnd, 32)\n                    }\n\n                    // Write the first 32 bytes\n                    mstore(dest, first)\n                }\n            }\n        }\n    }\n\n    /// @dev Returns a slices from a byte array.\n    /// @param b The byte array to take a slice from.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function slice(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure and copy contents\n        result = new bytes(to - from);\n        memCopy(\n            result.contentAddress(),\n            b.contentAddress() + from,\n            result.length\n        );\n        return result;\n    }\n\n    /// @dev Returns a slice from a byte array without preserving the input.\n    ///      When `from == 0`, the original array will match the slice.\n    ///      In other cases its state will be corrupted.\n    /// @param b The byte array to take a slice from. Will be destroyed in the process.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function sliceDestructive(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure around [from, to) in-place.\n        assembly {\n            result := add(b, from)\n            mstore(result, sub(to, from))\n        }\n        return result;\n    }\n\n    /// @dev Pops the last byte off of a byte array by modifying its length.\n    /// @param b Byte array that will be modified.\n    /// @return result The byte that was popped off.\n    function popLastByte(bytes memory b)\n        internal\n        pure\n        returns (bytes1 result)\n    {\n        if (b.length == 0) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanZeroRequired,\n                b.length,\n                0\n            ));\n        }\n\n        // Store last byte.\n        result = b[b.length - 1];\n\n        assembly {\n            // Decrement length of byte array.\n            let newLen := sub(mload(b), 1)\n            mstore(b, newLen)\n        }\n        return result;\n    }\n\n    /// @dev Tests equality of two byte arrays.\n    /// @param lhs First byte array to compare.\n    /// @param rhs Second byte array to compare.\n    /// @return equal True if arrays are the same. False otherwise.\n    function equals(\n        bytes memory lhs,\n        bytes memory rhs\n    )\n        internal\n        pure\n        returns (bool equal)\n    {\n        // Keccak gas cost is 30 + numWords * 6. This is a cheap way to compare.\n        // We early exit on unequal lengths, but keccak would also correctly\n        // handle this.\n        return lhs.length == rhs.length && keccak256(lhs) == keccak256(rhs);\n    }\n\n    /// @dev Reads an address from a position in a byte array.\n    /// @param b Byte array containing an address.\n    /// @param index Index in byte array of address.\n    /// @return result address from byte array.\n    function readAddress(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (address result)\n    {\n        if (b.length < index + 20) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Read address from array memory\n        assembly {\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 20-byte mask to obtain address\n            result := and(mload(add(b, index)), 0xffffffffffffffffffffffffffffffffffffffff)\n        }\n        return result;\n    }\n\n    /// @dev Writes an address into a specific position in a byte array.\n    /// @param b Byte array to insert address into.\n    /// @param index Index in byte array of address.\n    /// @param input Address to put into byte array.\n    function writeAddress(\n        bytes memory b,\n        uint256 index,\n        address input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 20) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Store address into array memory\n        assembly {\n            // The address occupies 20 bytes and mstore stores 32 bytes.\n            // First fetch the 32-byte word where we'll be storing the address, then\n            // apply a mask so we have only the bytes in the word that the address will not occupy.\n            // Then combine these bytes with the address and store the 32 bytes back to memory with mstore.\n\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 12-byte mask to obtain extra bytes occupying word of memory where we'll store the address\n            let neighbors := and(\n                mload(add(b, index)),\n                0xffffffffffffffffffffffff0000000000000000000000000000000000000000\n            )\n\n            // Make sure input address is clean.\n            // (Solidity does not guarantee this)\n            input := and(input, 0xffffffffffffffffffffffffffffffffffffffff)\n\n            // Store the neighbors and address into memory\n            mstore(add(b, index), xor(input, neighbors))\n        }\n    }\n\n    /// @dev Reads a bytes32 value from a position in a byte array.\n    /// @param b Byte array containing a bytes32 value.\n    /// @param index Index in byte array of bytes32 value.\n    /// @return result bytes32 value from byte array.\n    function readBytes32(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        if (b.length < index + 32) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            result := mload(add(b, index))\n        }\n        return result;\n    }\n\n    /// @dev Writes a bytes32 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input bytes32 to put into byte array.\n    function writeBytes32(\n        bytes memory b,\n        uint256 index,\n        bytes32 input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 32) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            mstore(add(b, index), input)\n        }\n    }\n\n    /// @dev Reads a uint256 value from a position in a byte array.\n    /// @param b Byte array containing a uint256 value.\n    /// @param index Index in byte array of uint256 value.\n    /// @return result uint256 value from byte array.\n    function readUint256(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (uint256 result)\n    {\n        result = uint256(readBytes32(b, index));\n        return result;\n    }\n\n    /// @dev Writes a uint256 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input uint256 to put into byte array.\n    function writeUint256(\n        bytes memory b,\n        uint256 index,\n        uint256 input\n    )\n        internal\n        pure\n    {\n        writeBytes32(b, index, bytes32(input));\n    }\n\n    /// @dev Reads an unpadded bytes4 value from a position in a byte array.\n    /// @param b Byte array containing a bytes4 value.\n    /// @param index Index in byte array of bytes4 value.\n    /// @return result bytes4 value from byte array.\n    function readBytes4(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes4 result)\n    {\n        if (b.length < index + 4) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsFourRequired,\n                b.length,\n                index + 4\n            ));\n        }\n\n        // Arrays are prefixed by a 32 byte length field\n        index += 32;\n\n        // Read the bytes4 from array memory\n        assembly {\n            result := mload(add(b, index))\n            // Solidity does not require us to clean the trailing bytes.\n            // We do it anyway\n            result := and(result, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)\n        }\n        return result;\n    }\n\n    /// @dev Writes a new length to a byte array.\n    ///      Decreasing length will lead to removing the corresponding lower order bytes from the byte array.\n    ///      Increasing length may lead to appending adjacent in-memory bytes to the end of the byte array.\n    /// @param b Bytes array to write new length to.\n    /// @param length New length of byte array.\n    function writeLength(bytes memory b, uint256 length)\n        internal\n        pure\n    {\n        assembly {\n            mstore(b, length)\n        }\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/errors/LibBytesRichErrorsV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibBytesRichErrorsV06 {\n\n    enum InvalidByteOperationErrorCodes {\n        FromLessThanOrEqualsToRequired,\n        ToLessThanOrEqualsLengthRequired,\n        LengthGreaterThanZeroRequired,\n        LengthGreaterThanOrEqualsFourRequired,\n        LengthGreaterThanOrEqualsTwentyRequired,\n        LengthGreaterThanOrEqualsThirtyTwoRequired,\n        LengthGreaterThanOrEqualsNestedBytesLengthRequired,\n        DestinationLengthGreaterThanOrEqualSourceLengthRequired\n    }\n\n    // bytes4(keccak256(\"InvalidByteOperationError(uint8,uint256,uint256)\"))\n    bytes4 internal constant INVALID_BYTE_OPERATION_ERROR_SELECTOR =\n        0x28006595;\n\n    // solhint-disable func-name-mixedcase\n    function InvalidByteOperationError(\n        InvalidByteOperationErrorCodes errorCode,\n        uint256 offset,\n        uint256 required\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            INVALID_BYTE_OPERATION_ERROR_SELECTOR,\n            errorCode,\n            offset,\n            required\n        );\n    }\n}\n",
        "@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\ninterface IERC20TokenV06 {\n\n    // solhint-disable no-simple-event-func-name\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 value\n    );\n\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n\n    /// @dev send `value` token to `to` from `msg.sender`\n    /// @param to The address of the recipient\n    /// @param value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transfer(address to, uint256 value)\n        external\n        returns (bool);\n\n    /// @dev send `value` token to `to` from `from` on the condition it is approved by `from`\n    /// @param from The address of the sender\n    /// @param to The address of the recipient\n    /// @param value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    )\n        external\n        returns (bool);\n\n    /// @dev `msg.sender` approves `spender` to spend `value` tokens\n    /// @param spender The address of the account able to transfer the tokens\n    /// @param value The amount of wei to be approved for transfer\n    /// @return Always true if the call has enough gas to complete execution\n    function approve(address spender, uint256 value)\n        external\n        returns (bool);\n\n    /// @dev Query total supply of token\n    /// @return Total supply of token\n    function totalSupply()\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the balance of `owner`.\n    /// @param owner The address from which the balance will be retrieved\n    /// @return Balance of owner\n    function balanceOf(address owner)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the allowance for `spender` to spend from `owner`.\n    /// @param owner The address of the account owning tokens\n    /// @param spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the number of decimals this token has.\n    function decimals()\n        external\n        view\n        returns (uint8);\n}\n",
        "./BancorSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IBancor.sol\";\n\ncontract CompilerHack {}\n\ncontract BancorSampler {\n\n    /// @dev Base gas limit for Bancor calls.\n    uint256 constant private BANCOR_CALL_GAS = 300e3; // 300k\n\n    struct BancorSamplerOpts {\n        IBancorRegistry registry;\n        address[][] paths;\n    }\n\n    /// @dev Sample sell quotes from Bancor.\n    /// @param opts BancorSamplerOpts The Bancor registry contract address and paths\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return bancorNetwork the Bancor Network address\n    /// @return path the selected conversion path from bancor\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromBancor(\n        BancorSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (address bancorNetwork, address[] memory path, uint256[] memory makerTokenAmounts)\n    {\n        if (opts.paths.length == 0) {\n            return (bancorNetwork, path, makerTokenAmounts);\n        }\n        (bancorNetwork, path) = _findBestPath(opts, takerToken, makerToken, takerTokenAmounts);\n        makerTokenAmounts = new uint256[](takerTokenAmounts.length);\n\n        for (uint256 i = 0; i < makerTokenAmounts.length; i++) {\n            try\n                IBancorNetwork(bancorNetwork)\n                    .rateByPath\n                        {gas: BANCOR_CALL_GAS}\n                        (path, takerTokenAmounts[i])\n                returns (uint256 amount)\n            {\n                makerTokenAmounts[i] = amount;\n                // Break early if there are 0 amounts\n                if (makerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n        return (bancorNetwork, path, makerTokenAmounts);\n    }\n\n    /// @dev Sample buy quotes from Bancor. Unimplemented\n    /// @param opts BancorSamplerOpts The Bancor registry contract address and paths\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return bancorNetwork the Bancor Network address\n    /// @return path the selected conversion path from bancor\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromBancor(\n        BancorSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (address bancorNetwork, address[] memory path, uint256[] memory takerTokenAmounts)\n    {\n    }\n\n    function _findBestPath(\n        BancorSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        internal\n        view\n        returns (address bancorNetwork, address[] memory path)\n    {\n        bancorNetwork = opts.registry.getAddress(opts.registry.BANCOR_NETWORK());\n        if (opts.paths.length == 0) {\n            return (bancorNetwork, path);\n        }\n        uint256 maxBoughtAmount = 0;\n        // Find the best path by selling the largest taker amount\n        for (uint256 i = 0; i < opts.paths.length; i++) {\n            if (opts.paths[i].length < 2) {\n                continue;\n            }\n\n            try\n                IBancorNetwork(bancorNetwork)\n                    .rateByPath\n                        {gas: BANCOR_CALL_GAS}\n                        (opts.paths[i], takerTokenAmounts[takerTokenAmounts.length-1])\n                returns (uint256 amount)\n            {\n                if (amount > maxBoughtAmount) {\n                    maxBoughtAmount = amount;\n                    path = opts.paths[i];\n                }\n            } catch {\n                // Swallow failures, leaving all results as zero.\n                continue;\n            }\n        }\n    }\n}\n",
        "./interfaces/IBancor.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface IBancor {}\n\ninterface IBancorNetwork {\n  function conversionPath(address _sourceToken, address _targetToken) external view returns (address[] memory);\n  function rateByPath(address[] memory _path, uint256 _amount) external view returns (uint256);\n}\n\ninterface IBancorRegistry {\n    function getAddress(bytes32 _contractName) external view returns (address);\n    function BANCOR_NETWORK() external view returns (bytes32);\n}\n",
        "./CurveSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/ICurve.sol\";\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\n\n\ncontract CurveSampler is\n    SamplerUtils,\n    ApproximateBuys\n{\n    /// @dev Information for sampling from curve sources.\n    struct CurveInfo {\n        address poolAddress;\n        bytes4 sellQuoteFunctionSelector;\n        bytes4 buyQuoteFunctionSelector;\n    }\n\n    /// @dev Base gas limit for Curve calls. Some Curves have multiple tokens\n    ///      So a reasonable ceil is 150k per token. Biggest Curve has 4 tokens.\n    uint256 constant private CURVE_CALL_GAS = 2000e3; // Was 600k for Curve but SnowSwap is using 1500k+\n\n    /// @dev Sample sell quotes from Curve.\n    /// @param curveInfo Curve information specific to this token pair.\n    /// @param fromTokenIdx Index of the taker token (what to sell).\n    /// @param toTokenIdx Index of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromCurve(\n        CurveInfo memory curveInfo,\n        int128 fromTokenIdx,\n        int128 toTokenIdx,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            (bool didSucceed, bytes memory resultData) =\n                curveInfo.poolAddress.staticcall.gas(CURVE_CALL_GAS)(\n                    abi.encodeWithSelector(\n                        curveInfo.sellQuoteFunctionSelector,\n                        fromTokenIdx,\n                        toTokenIdx,\n                        takerTokenAmounts[i]\n                    ));\n            uint256 buyAmount = 0;\n            if (didSucceed) {\n                buyAmount = abi.decode(resultData, (uint256));\n            }\n            makerTokenAmounts[i] = buyAmount;\n            // Break early if there are 0 amounts\n            if (makerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from Curve.\n    /// @param curveInfo Curve information specific to this token pair.\n    /// @param fromTokenIdx Index of the taker token (what to sell).\n    /// @param toTokenIdx Index of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromCurve(\n        CurveInfo memory curveInfo,\n        int128 fromTokenIdx,\n        int128 toTokenIdx,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        if (curveInfo.buyQuoteFunctionSelector == bytes4(0)) {\n            // Buys not supported on this curve, so approximate it.\n            return _sampleApproximateBuys(\n                ApproximateBuyQuoteOpts({\n                    makerTokenData: abi.encode(toTokenIdx, curveInfo),\n                    takerTokenData: abi.encode(fromTokenIdx, curveInfo),\n                    getSellQuoteCallback: _sampleSellForApproximateBuyFromCurve\n                }),\n                makerTokenAmounts\n            );\n        }\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            (bool didSucceed, bytes memory resultData) =\n                curveInfo.poolAddress.staticcall.gas(CURVE_CALL_GAS)(\n                    abi.encodeWithSelector(\n                        curveInfo.buyQuoteFunctionSelector,\n                        fromTokenIdx,\n                        toTokenIdx,\n                        makerTokenAmounts[i]\n                    ));\n            uint256 sellAmount = 0;\n            if (didSucceed) {\n                sellAmount = abi.decode(resultData, (uint256));\n            }\n            takerTokenAmounts[i] = sellAmount;\n            // Break early if there are 0 amounts\n            if (takerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n    }\n\n    function _sampleSellForApproximateBuyFromCurve(\n        bytes memory takerTokenData,\n        bytes memory makerTokenData,\n        uint256 sellAmount\n    )\n        private\n        view\n        returns (uint256 buyAmount)\n    {\n        (int128 takerTokenIdx, CurveInfo memory curveInfo) =\n            abi.decode(takerTokenData, (int128, CurveInfo));\n        (int128 makerTokenIdx) =\n            abi.decode(makerTokenData, (int128));\n        (bool success, bytes memory resultData) =\n            address(this).staticcall(abi.encodeWithSelector(\n                this.sampleSellsFromCurve.selector,\n                curveInfo,\n                takerTokenIdx,\n                makerTokenIdx,\n                _toSingleValueArray(sellAmount)\n            ));\n        if (!success) {\n            return 0;\n        }\n        // solhint-disable-next-line indent\n        return abi.decode(resultData, (uint256[]))[0];\n    }\n}\n",
        "./interfaces/ICurve.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\n// solhint-disable func-name-mixedcase\ninterface ICurve {\n\n    /// @dev Sell `sellAmount` of `fromToken` token and receive `toToken` token.\n    ///      This function exists on later versions of Curve (USDC/DAI/USDT)\n    /// @param i The token index being sold.\n    /// @param j The token index being bought.\n    /// @param sellAmount The amount of token being bought.\n    /// @param minBuyAmount The minimum buy amount of the token being bought.\n    function exchange_underlying(\n        int128 i,\n        int128 j,\n        uint256 sellAmount,\n        uint256 minBuyAmount\n    )\n        external;\n\n    /// @dev Get the amount of `toToken` by selling `sellAmount` of `fromToken`\n    /// @param i The token index being sold.\n    /// @param j The token index being bought.\n    /// @param sellAmount The amount of token being bought.\n    function get_dy_underlying(\n        int128 i,\n        int128 j,\n        uint256 sellAmount\n    )\n        external\n        returns (uint256 dy);\n\n    /// @dev Get the amount of `fromToken` by buying `buyAmount` of `toToken`\n    ///      This function exists on later versions of Curve (USDC/DAI/USDT)\n    /// @param i The token index being sold.\n    /// @param j The token index being bought.\n    /// @param buyAmount The amount of token being bought.\n    function get_dx_underlying(\n        int128 i,\n        int128 j,\n        uint256 buyAmount\n    )\n        external\n        returns (uint256 dx);\n\n    /// @dev Get the underlying token address from the token index\n    /// @param i The token index.\n    function underlying_coins(\n        int128 i\n    )\n        external\n        returns (address tokenAddress);\n}\n",
        "./ApproximateBuys.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/LibMathV06.sol\";\n\n\ncontract ApproximateBuys {\n\n    /// @dev Information computing buy quotes for sources that do not have native\n    ///      buy quote support.\n    struct ApproximateBuyQuoteOpts {\n        // Arbitrary maker token data to pass to `getSellQuoteCallback`.\n        bytes makerTokenData;\n        // Arbitrary taker token data to pass to `getSellQuoteCallback`.\n        bytes takerTokenData;\n        // Callback to retrieve a sell quote.\n        function (bytes memory, bytes memory, uint256)\n            internal\n            view\n            returns (uint256) getSellQuoteCallback;\n    }\n\n    uint256 private constant ONE_HUNDED_PERCENT_BPS = 1e4;\n    /// @dev Maximum approximate (positive) error rate when approximating a buy quote.\n    uint256 private constant APPROXIMATE_BUY_TARGET_EPSILON_BPS = 0.0005e4;\n    /// @dev Maximum iterations to perform when approximating a buy quote.\n    uint256 private constant APPROXIMATE_BUY_MAX_ITERATIONS = 5;\n\n    function _sampleApproximateBuys(\n        ApproximateBuyQuoteOpts memory opts,\n        uint256[] memory makerTokenAmounts\n    )\n        internal\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        takerTokenAmounts = new uint256[](makerTokenAmounts.length);\n        if (makerTokenAmounts.length == 0) {\n            return takerTokenAmounts;\n        }\n\n        uint256 sellAmount = opts.getSellQuoteCallback(\n            opts.makerTokenData,\n            opts.takerTokenData,\n            makerTokenAmounts[0]\n        );\n        if (sellAmount == 0) {\n            return takerTokenAmounts;\n        }\n\n        uint256 buyAmount = opts.getSellQuoteCallback(\n            opts.takerTokenData,\n            opts.makerTokenData,\n            sellAmount\n        );\n        if (buyAmount == 0) {\n            return takerTokenAmounts;\n        }\n\n        for (uint256 i = 0; i < makerTokenAmounts.length; i++) {\n            for (uint256 iter = 0; iter < APPROXIMATE_BUY_MAX_ITERATIONS; iter++) {\n                // adjustedSellAmount = previousSellAmount * (target/actual) * JUMP_MULTIPLIER\n                sellAmount = _safeGetPartialAmountCeil(\n                    makerTokenAmounts[i],\n                    buyAmount,\n                    sellAmount\n                );\n                if (sellAmount == 0) {\n                    break;\n                }\n                sellAmount = _safeGetPartialAmountCeil(\n                    (ONE_HUNDED_PERCENT_BPS + APPROXIMATE_BUY_TARGET_EPSILON_BPS),\n                    ONE_HUNDED_PERCENT_BPS,\n                    sellAmount\n                );\n                if (sellAmount == 0) {\n                    break;\n                }\n                uint256 _buyAmount = opts.getSellQuoteCallback(\n                    opts.takerTokenData,\n                    opts.makerTokenData,\n                    sellAmount\n                );\n                if (_buyAmount == 0) {\n                    break;\n                }\n                // We re-use buyAmount next iteration, only assign if it is\n                // non zero\n                buyAmount = _buyAmount;\n                // If we've reached our goal, exit early\n                if (buyAmount >= makerTokenAmounts[i]) {\n                    uint256 eps =\n                        (buyAmount - makerTokenAmounts[i]) * ONE_HUNDED_PERCENT_BPS /\n                        makerTokenAmounts[i];\n                    if (eps <= APPROXIMATE_BUY_TARGET_EPSILON_BPS) {\n                        break;\n                    }\n                }\n            }\n            // We do our best to close in on the requested amount, but we can either over buy or under buy and exit\n            // if we hit a max iteration limit\n            // We scale the sell amount to get the approximate target\n            takerTokenAmounts[i] = _safeGetPartialAmountCeil(\n                makerTokenAmounts[i],\n                buyAmount,\n                sellAmount\n            );\n        }\n    }\n\n    function _safeGetPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        view\n        returns (uint256 partialAmount)\n    {\n        if (numerator == 0 || target == 0 || denominator == 0) return 0;\n        uint256 c = numerator * target;\n        if (c / numerator != target) return 0;\n        return (c + (denominator - 1)) / denominator;\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/LibMathV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./LibSafeMathV06.sol\";\nimport \"./errors/LibRichErrorsV06.sol\";\nimport \"./errors/LibMathRichErrorsV06.sol\";\n\n\nlibrary LibMathV06 {\n\n    using LibSafeMathV06 for uint256;\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    ///      Reverts if rounding error is >= 0.1%\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded down.\n    function safeGetPartialAmountFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        if (isRoundingErrorFloor(\n                numerator,\n                denominator,\n                target\n        )) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.RoundingError(\n                numerator,\n                denominator,\n                target\n            ));\n        }\n\n        partialAmount = numerator.safeMul(target).safeDiv(denominator);\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    ///      Reverts if rounding error is >= 0.1%\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded up.\n    function safeGetPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        if (isRoundingErrorCeil(\n                numerator,\n                denominator,\n                target\n        )) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.RoundingError(\n                numerator,\n                denominator,\n                target\n            ));\n        }\n\n        // safeDiv computes `floor(a / b)`. We use the identity (a, b integer):\n        //       ceil(a / b) = floor((a + b - 1) / b)\n        // To implement `ceil(a / b)` using safeDiv.\n        partialAmount = numerator.safeMul(target)\n            .safeAdd(denominator.safeSub(1))\n            .safeDiv(denominator);\n\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded down.\n    function getPartialAmountFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        partialAmount = numerator.safeMul(target).safeDiv(denominator);\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded up.\n    function getPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        // safeDiv computes `floor(a / b)`. We use the identity (a, b integer):\n        //       ceil(a / b) = floor((a + b - 1) / b)\n        // To implement `ceil(a / b)` using safeDiv.\n        partialAmount = numerator.safeMul(target)\n            .safeAdd(denominator.safeSub(1))\n            .safeDiv(denominator);\n\n        return partialAmount;\n    }\n\n    /// @dev Checks if rounding error >= 0.1% when rounding down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to multiply with numerator/denominator.\n    /// @return isError Rounding error is present.\n    function isRoundingErrorFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bool isError)\n    {\n        if (denominator == 0) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.DivisionByZeroError());\n        }\n\n        // The absolute rounding error is the difference between the rounded\n        // value and the ideal value. The relative rounding error is the\n        // absolute rounding error divided by the absolute value of the\n        // ideal value. This is undefined when the ideal value is zero.\n        //\n        // The ideal value is `numerator * target / denominator`.\n        // Let's call `numerator * target % denominator` the remainder.\n        // The absolute error is `remainder / denominator`.\n        //\n        // When the ideal value is zero, we require the absolute error to\n        // be zero. Fortunately, this is always the case. The ideal value is\n        // zero iff `numerator == 0` and/or `target == 0`. In this case the\n        // remainder and absolute error are also zero.\n        if (target == 0 || numerator == 0) {\n            return false;\n        }\n\n        // Otherwise, we want the relative rounding error to be strictly\n        // less than 0.1%.\n        // The relative error is `remainder / (numerator * target)`.\n        // We want the relative error less than 1 / 1000:\n        //        remainder / (numerator * denominator)  <  1 / 1000\n        // or equivalently:\n        //        1000 * remainder  <  numerator * target\n        // so we have a rounding error iff:\n        //        1000 * remainder  >=  numerator * target\n        uint256 remainder = mulmod(\n            target,\n            numerator,\n            denominator\n        );\n        isError = remainder.safeMul(1000) >= numerator.safeMul(target);\n        return isError;\n    }\n\n    /// @dev Checks if rounding error >= 0.1% when rounding up.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to multiply with numerator/denominator.\n    /// @return isError Rounding error is present.\n    function isRoundingErrorCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bool isError)\n    {\n        if (denominator == 0) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.DivisionByZeroError());\n        }\n\n        // See the comments in `isRoundingError`.\n        if (target == 0 || numerator == 0) {\n            // When either is zero, the ideal value and rounded value are zero\n            // and there is no rounding error. (Although the relative error\n            // is undefined.)\n            return false;\n        }\n        // Compute remainder as before\n        uint256 remainder = mulmod(\n            target,\n            numerator,\n            denominator\n        );\n        remainder = denominator.safeSub(remainder) % denominator;\n        isError = remainder.safeMul(1000) >= numerator.safeMul(target);\n        return isError;\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./errors/LibRichErrorsV06.sol\";\nimport \"./errors/LibSafeMathRichErrorsV06.sol\";\n\n\nlibrary LibSafeMathV06 {\n\n    function safeMul(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        if (c / a != b) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.MULTIPLICATION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function safeDiv(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b == 0) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.DIVISION_BY_ZERO,\n                a,\n                b\n            ));\n        }\n        uint256 c = a / b;\n        return c;\n    }\n\n    function safeSub(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b > a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.SUBTRACTION_UNDERFLOW,\n                a,\n                b\n            ));\n        }\n        return a - b;\n    }\n\n    function safeAdd(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint256 c = a + b;\n        if (c < a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.ADDITION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function max256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a < b ? a : b;\n    }\n\n    function safeMul128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (a == 0) {\n            return 0;\n        }\n        uint128 c = a * b;\n        if (c / a != b) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.MULTIPLICATION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function safeDiv128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (b == 0) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.DIVISION_BY_ZERO,\n                a,\n                b\n            ));\n        }\n        uint128 c = a / b;\n        return c;\n    }\n\n    function safeSub128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (b > a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.SUBTRACTION_UNDERFLOW,\n                a,\n                b\n            ));\n        }\n        return a - b;\n    }\n\n    function safeAdd128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        uint128 c = a + b;\n        if (c < a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.ADDITION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function max128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        return a < b ? a : b;\n    }\n\n    function safeDowncastToUint128(uint256 a)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (a > type(uint128).max) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256DowncastError(\n                LibSafeMathRichErrorsV06.DowncastErrorCodes.VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT128,\n                a\n            ));\n        }\n        return uint128(a);\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/errors/LibSafeMathRichErrorsV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibSafeMathRichErrorsV06 {\n\n    // bytes4(keccak256(\"Uint256BinOpError(uint8,uint256,uint256)\"))\n    bytes4 internal constant UINT256_BINOP_ERROR_SELECTOR =\n        0xe946c1bb;\n\n    // bytes4(keccak256(\"Uint256DowncastError(uint8,uint256)\"))\n    bytes4 internal constant UINT256_DOWNCAST_ERROR_SELECTOR =\n        0xc996af7b;\n\n    enum BinOpErrorCodes {\n        ADDITION_OVERFLOW,\n        MULTIPLICATION_OVERFLOW,\n        SUBTRACTION_UNDERFLOW,\n        DIVISION_BY_ZERO\n    }\n\n    enum DowncastErrorCodes {\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT32,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT64,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT96,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT128\n    }\n\n    // solhint-disable func-name-mixedcase\n    function Uint256BinOpError(\n        BinOpErrorCodes errorCode,\n        uint256 a,\n        uint256 b\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            UINT256_BINOP_ERROR_SELECTOR,\n            errorCode,\n            a,\n            b\n        );\n    }\n\n    function Uint256DowncastError(\n        DowncastErrorCodes errorCode,\n        uint256 a\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            UINT256_DOWNCAST_ERROR_SELECTOR,\n            errorCode,\n            a\n        );\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/errors/LibMathRichErrorsV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibMathRichErrorsV06 {\n\n    // bytes4(keccak256(\"DivisionByZeroError()\"))\n    bytes internal constant DIVISION_BY_ZERO_ERROR =\n        hex\"a791837c\";\n\n    // bytes4(keccak256(\"RoundingError(uint256,uint256,uint256)\"))\n    bytes4 internal constant ROUNDING_ERROR_SELECTOR =\n        0x339f3de2;\n\n    // solhint-disable func-name-mixedcase\n    function DivisionByZeroError()\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return DIVISION_BY_ZERO_ERROR;\n    }\n\n    function RoundingError(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            ROUNDING_ERROR_SELECTOR,\n            numerator,\n            denominator,\n            target\n        );\n    }\n}\n",
        "./DODOSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\n\n\ninterface IDODOZoo {\n    function getDODO(address baseToken, address quoteToken) external view returns (address);\n}\n\ninterface IDODOHelper {\n    function querySellQuoteToken(address dodo, uint256 amount) external view returns (uint256);\n}\n\ninterface IDODO {\n    function querySellBaseToken(uint256 amount) external view returns (uint256);\n    function _TRADE_ALLOWED_() external view returns (bool);\n}\n\ncontract DODOSampler is\n    SamplerUtils,\n    ApproximateBuys\n{\n\n    /// @dev Gas limit for DODO calls.\n    uint256 constant private DODO_CALL_GAS = 300e3; // 300k\n    struct DODOSamplerOpts {\n        address registry;\n        address helper;\n    }\n\n    /// @dev Sample sell quotes from DODO.\n    /// @param opts DODOSamplerOpts DODO Registry and helper addresses\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return sellBase whether the bridge needs to sell the base token\n    /// @return pool the DODO pool address\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromDODO(\n        DODOSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (bool sellBase, address pool, uint256[] memory makerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        pool = IDODOZoo(opts.registry).getDODO(takerToken, makerToken);\n        address baseToken;\n        // If pool exists we have the correct order of Base/Quote\n        if (pool != address(0)) {\n            baseToken = takerToken;\n            sellBase = true;\n        } else {\n            pool = IDODOZoo(opts.registry).getDODO(makerToken, takerToken);\n            // No pool either direction\n            if (address(pool) == address(0)) {\n                return (sellBase, pool, makerTokenAmounts);\n            }\n            baseToken = makerToken;\n            sellBase = false;\n        }\n\n        // DODO Pool has been disabled\n        if (!IDODO(pool)._TRADE_ALLOWED_()) {\n            return (sellBase, pool, makerTokenAmounts);\n        }\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            uint256 buyAmount = _sampleSellForApproximateBuyFromDODO(\n                abi.encode(takerToken, pool, baseToken, opts.helper), // taker token data\n                abi.encode(makerToken, pool, baseToken, opts.helper), // maker token data\n                takerTokenAmounts[i]\n            );\n            makerTokenAmounts[i] = buyAmount;\n            // Break early if there are 0 amounts\n            if (makerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from DODO.\n    /// @param opts DODOSamplerOpts DODO Registry and helper addresses\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token sell amount for each sample.\n    /// @return sellBase whether the bridge needs to sell the base token\n    /// @return pool the DODO pool address\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromDODO(\n        DODOSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (bool sellBase, address pool, uint256[] memory takerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n\n        // Pool is BASE/QUOTE\n        // Look up the pool from the taker/maker combination\n        pool = IDODOZoo(opts.registry).getDODO(takerToken, makerToken);\n        address baseToken;\n        // If pool exists we have the correct order of Base/Quote\n        if (pool != address(0)) {\n            baseToken = takerToken;\n            sellBase = true;\n        } else {\n            // Look up the pool from the maker/taker combination\n            pool = IDODOZoo(opts.registry).getDODO(makerToken, takerToken);\n            // No pool either direction\n            if (address(pool) == address(0)) {\n                return (sellBase, pool, takerTokenAmounts);\n            }\n            baseToken = makerToken;\n            sellBase = false;\n        }\n\n        // DODO Pool has been disabled\n        if (!IDODO(pool)._TRADE_ALLOWED_()) {\n            return (sellBase, pool, takerTokenAmounts);\n        }\n\n        takerTokenAmounts = _sampleApproximateBuys(\n            ApproximateBuyQuoteOpts({\n                makerTokenData: abi.encode(makerToken, pool, baseToken, opts.helper),\n                takerTokenData: abi.encode(takerToken, pool, baseToken, opts.helper),\n                getSellQuoteCallback: _sampleSellForApproximateBuyFromDODO\n            }),\n            makerTokenAmounts\n        );\n    }\n\n    function _sampleSellForApproximateBuyFromDODO(\n        bytes memory takerTokenData,\n        bytes memory /* makerTokenData */,\n        uint256 sellAmount\n    )\n        private\n        view\n        returns (uint256)\n    {\n        (address takerToken, address pool, address baseToken, address helper) = abi.decode(\n            takerTokenData,\n            (address, address, address, address)\n        );\n\n        // We will get called to sell both the taker token and also to sell the maker token\n        if (takerToken == baseToken) {\n            // If base token then use the original query on the pool\n            try\n                IDODO(pool).querySellBaseToken\n                    {gas: DODO_CALL_GAS}\n                    (sellAmount)\n                returns (uint256 amount)\n            {\n                return amount;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                return 0;\n            }\n        } else {\n            // If quote token then use helper, this is less accurate\n            try\n                IDODOHelper(helper).querySellQuoteToken\n                    {gas: DODO_CALL_GAS}\n                    (pool, sellAmount)\n                returns (uint256 amount)\n            {\n                return amount;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                return 0;\n            }\n        }\n    }\n\n}\n",
        "./DODOV2Sampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\n\ninterface IDODOV2Registry {\n    function getDODOPool(address baseToken, address quoteToken)\n        external\n        view\n        returns (address[] memory machines);\n}\n\ninterface IDODOV2Pool {\n    function querySellBase(address trader, uint256 payBaseAmount)\n        external\n        view\n        returns (uint256 receiveQuoteAmount, uint256 mtFee);\n\n    function querySellQuote(address trader, uint256 payQuoteAmount)\n        external\n        view\n        returns (uint256 receiveBaseAmount, uint256 mtFee);\n}\n\ncontract DODOV2Sampler is\n    SamplerUtils,\n    ApproximateBuys\n{\n\n    /// @dev Gas limit for DODO V2 calls.\n    uint256 constant private DODO_V2_CALL_GAS = 300e3; // 300k\n\n    /// @dev Sample sell quotes from DODO V2.\n    /// @param registry Address of the registry to look up.\n    /// @param offset offset index for the pool in the registry.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return sellBase whether the bridge needs to sell the base token\n    /// @return pool the DODO pool address\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromDODOV2(\n        address registry,\n        uint256 offset,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (bool sellBase, address pool, uint256[] memory makerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        (pool, sellBase) = _getNextDODOV2Pool(registry, offset, takerToken, makerToken);\n        if (pool == address(0)) {\n            return (sellBase, pool, makerTokenAmounts);\n        }\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            uint256 buyAmount = _sampleSellForApproximateBuyFromDODOV2(\n                abi.encode(takerToken, pool, sellBase), // taker token data\n                abi.encode(makerToken, pool, sellBase), // maker token data\n                takerTokenAmounts[i]\n            );\n            makerTokenAmounts[i] = buyAmount;\n            // Break early if there are 0 amounts\n            if (makerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from DODO.\n    /// @param registry Address of the registry to look up.\n    /// @param offset offset index for the pool in the registry.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token sell amount for each sample.\n    /// @return sellBase whether the bridge needs to sell the base token\n    /// @return pool the DODO pool address\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromDODOV2(\n        address registry,\n        uint256 offset,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (bool sellBase, address pool, uint256[] memory takerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        (pool, sellBase) = _getNextDODOV2Pool(registry, offset, takerToken, makerToken);\n        if (pool == address(0)) {\n            return (sellBase, pool, takerTokenAmounts);\n        }\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n\n        takerTokenAmounts = _sampleApproximateBuys(\n            ApproximateBuyQuoteOpts({\n                makerTokenData: abi.encode(makerToken, pool, !sellBase),\n                takerTokenData: abi.encode(takerToken, pool, sellBase),\n                getSellQuoteCallback: _sampleSellForApproximateBuyFromDODOV2\n            }),\n            makerTokenAmounts\n        );\n    }\n\n    function _sampleSellForApproximateBuyFromDODOV2(\n        bytes memory takerTokenData,\n        bytes memory /* makerTokenData */,\n        uint256 sellAmount\n    )\n        private\n        view\n        returns (uint256)\n    {\n        (address takerToken, address pool, bool sellBase) = abi.decode(\n            takerTokenData,\n            (address, address, bool)\n        );\n\n        // We will get called to sell both the taker token and also to sell the maker token\n        // since we use approximate buy for sell and buy functions\n        if (sellBase) {\n            try\n                IDODOV2Pool(pool).querySellBase\n                    { gas: DODO_V2_CALL_GAS }\n                    (address(0), sellAmount)\n                returns (uint256 amount, uint256)\n            {\n                return amount;\n            } catch {\n                return 0;\n            }\n        } else {\n            try\n                IDODOV2Pool(pool).querySellQuote\n                    { gas: DODO_V2_CALL_GAS }\n                    (address(0), sellAmount)\n                returns (uint256 amount, uint256)\n            {\n                return amount;\n            } catch {\n                return 0;\n            }\n        }\n    }\n\n    function _getNextDODOV2Pool(\n        address registry,\n        uint256 offset,\n        address takerToken,\n        address makerToken\n    )\n        internal\n        view\n        returns (address machine, bool sellBase)\n    {\n        // Query in base -> quote direction, if a pool is found then we are selling the base\n        address[] memory machines = IDODOV2Registry(registry).getDODOPool(takerToken, makerToken);\n        sellBase = true;\n        if (machines.length == 0) {\n            // Query in quote -> base direction, if a pool is found then we are selling the quote\n            machines = IDODOV2Registry(registry).getDODOPool(makerToken, takerToken);\n            sellBase = false;\n        }\n\n        if (offset >= machines.length) {\n            return (address(0), false);\n        }\n\n        machine = machines[offset];\n    }\n\n}\n",
        "./Eth2DaiSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IEth2Dai.sol\";\nimport \"./SamplerUtils.sol\";\n\n\ncontract Eth2DaiSampler is\n    SamplerUtils\n{\n    /// @dev Base gas limit for Eth2Dai calls.\n    uint256 constant private ETH2DAI_CALL_GAS = 1000e3; // 1m\n\n    /// @dev Sample sell quotes from Eth2Dai/Oasis.\n    /// @param router Address of the Eth2Dai/Oasis contract\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromEth2Dai(\n        address router,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            try\n                IEth2Dai(router).getBuyAmount\n                    {gas: ETH2DAI_CALL_GAS}\n                    (makerToken, takerToken, takerTokenAmounts[i])\n                returns (uint256 amount)\n            {\n                makerTokenAmounts[i] = amount;\n                // Break early if there are 0 amounts\n                if (makerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from Eth2Dai/Oasis.\n    /// @param router Address of the Eth2Dai/Oasis contract\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Maker token sell amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromEth2Dai(\n        address router,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            try\n                IEth2Dai(router).getPayAmount\n                    {gas: ETH2DAI_CALL_GAS}\n                    (takerToken, makerToken, makerTokenAmounts[i])\n                returns (uint256 amount)\n            {\n                takerTokenAmounts[i] = amount;\n                // Break early if there are 0 amounts\n                if (takerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n}\n",
        "./interfaces/IEth2Dai.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface IEth2Dai {\n\n    function getBuyAmount(\n        address buyToken,\n        address payToken,\n        uint256 payAmount\n    )\n        external\n        view\n        returns (uint256 buyAmount);\n\n    function getPayAmount(\n        address payToken,\n        address buyToken,\n        uint256 buyAmount\n    )\n        external\n        view\n        returns (uint256 payAmount);\n}\n",
        "./KyberSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IKyberNetwork.sol\";\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\n\n\ncontract KyberSampler is\n    SamplerUtils,\n    ApproximateBuys\n{\n    /// @dev Gas limit for Kyber calls.\n    uint256 constant private KYBER_CALL_GAS = 500e3; // 500k\n    /// @dev Kyber ETH pseudo-address.\n    address constant internal KYBER_ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n\n    struct KyberSamplerOpts {\n        uint256 reserveOffset;\n        address hintHandler;\n        address networkProxy;\n        address weth;\n        bytes hint;\n    }\n\n    /// @dev Sample sell quotes from Kyber.\n    /// @param opts KyberSamplerOpts The nth reserve\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return reserveId The id of the reserve found at reserveOffset\n    /// @return hint The hint for the selected reserve\n    /// @return makerTokenAmounts Maker amounts bought at each taker token amount.\n    function sampleSellsFromKyberNetwork(\n        KyberSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (bytes32 reserveId, bytes memory hint, uint256[] memory makerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        reserveId = _getNextReserveId(opts, takerToken, makerToken);\n        if (reserveId == 0x0) {\n            return (reserveId, hint, makerTokenAmounts);\n        }\n        opts.hint = this.encodeKyberHint(opts, reserveId, takerToken, makerToken);\n        hint = opts.hint;\n\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            uint256 value = this.sampleSellFromKyberNetwork(\n                opts,\n                takerToken,\n                makerToken,\n                takerTokenAmounts[i]\n            );\n            makerTokenAmounts[i] = value;\n            // Break early if there are 0 amounts\n            if (makerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from Kyber.\n    /// @param opts KyberSamplerOpts The nth reserve\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return reserveId The id of the reserve found at reserveOffset\n    /// @return hint The hint for the selected reserve\n    /// @return takerTokenAmounts Taker amounts sold at each maker token amount.\n    function sampleBuysFromKyberNetwork(\n        KyberSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (bytes32 reserveId, bytes memory hint, uint256[] memory takerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n\n        reserveId = _getNextReserveId(opts, takerToken, makerToken);\n        if (reserveId == 0x0) {\n            return (reserveId, hint, takerTokenAmounts);\n        }\n        opts.hint = this.encodeKyberHint(opts, reserveId, takerToken, makerToken);\n        hint = opts.hint;\n\n        takerTokenAmounts = _sampleApproximateBuys(\n            ApproximateBuyQuoteOpts({\n                makerTokenData: abi.encode(makerToken, opts),\n                takerTokenData: abi.encode(takerToken, opts),\n                getSellQuoteCallback: _sampleSellForApproximateBuyFromKyber\n            }),\n            makerTokenAmounts\n        );\n        return (reserveId, hint, takerTokenAmounts);\n    }\n\n    function encodeKyberHint(\n        KyberSamplerOpts memory opts,\n        bytes32 reserveId,\n        address takerToken,\n        address makerToken\n    )\n        public\n        view\n        returns (bytes memory hint)\n    {\n        // Build a hint selecting the single reserve\n        IKyberHintHandler kyberHint = IKyberHintHandler(opts.hintHandler);\n\n        // All other reserves should be ignored with this hint\n        bytes32[] memory selectedReserves = new bytes32[](1);\n        selectedReserves[0] = reserveId;\n        uint256[] memory emptySplits = new uint256[](0);\n\n        if (takerToken == opts.weth) {\n            // ETH to Token\n            try\n                kyberHint.buildEthToTokenHint\n                    {gas: KYBER_CALL_GAS}\n                    (\n                        makerToken,\n                        IKyberHintHandler.TradeType.MaskIn,\n                        selectedReserves,\n                        emptySplits\n                    )\n                returns (bytes memory result)\n            {\n                return result;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n            }\n        } else if (makerToken == opts.weth) {\n            // Token to ETH\n            try\n                kyberHint.buildTokenToEthHint\n                    {gas: KYBER_CALL_GAS}\n                    (\n                        takerToken,\n                        IKyberHintHandler.TradeType.MaskIn,\n                        selectedReserves,\n                        emptySplits\n                    )\n                returns (bytes memory result)\n            {\n                return result;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n            }\n\n        } else {\n            // Token to Token\n            // We use the same reserve both ways\n            try\n                kyberHint.buildTokenToTokenHint\n                    {gas: KYBER_CALL_GAS}\n                    (\n                        takerToken,\n                        IKyberHintHandler.TradeType.MaskIn,\n                        selectedReserves,\n                        emptySplits,\n                        makerToken,\n                        IKyberHintHandler.TradeType.MaskIn,\n                        selectedReserves,\n                        emptySplits\n                    )\n                returns (bytes memory result)\n            {\n                return result;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n            }\n        }\n    }\n\n    function _sampleSellForApproximateBuyFromKyber(\n        bytes memory takerTokenData,\n        bytes memory makerTokenData,\n        uint256 sellAmount\n    )\n        private\n        view\n        returns (uint256)\n    {\n        (address makerToken, KyberSamplerOpts memory opts) =\n            abi.decode(makerTokenData, (address, KyberSamplerOpts));\n        (address takerToken, ) =\n            abi.decode(takerTokenData, (address, KyberSamplerOpts));\n        try\n            this.sampleSellFromKyberNetwork\n                (opts, takerToken, makerToken, sellAmount)\n            returns (uint256 amount)\n        {\n            return amount;\n        } catch (bytes memory) {\n            // Swallow failures, leaving all results as zero.\n            return 0;\n        }\n    }\n\n    function sampleSellFromKyberNetwork(\n        KyberSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256 takerTokenAmount\n    )\n        public\n        view\n        returns (uint256 makerTokenAmount)\n    {\n        // If there is no hint do not continue\n        if (opts.hint.length == 0) {\n            return 0;\n        }\n\n        try\n            IKyberNetworkProxy(opts.networkProxy).getExpectedRateAfterFee\n                {gas: KYBER_CALL_GAS}\n                (\n                    takerToken == opts.weth ? KYBER_ETH_ADDRESS : takerToken,\n                    makerToken == opts.weth ? KYBER_ETH_ADDRESS : makerToken,\n                    takerTokenAmount,\n                    0, // fee\n                    opts.hint\n                )\n            returns (uint256 rate)\n        {\n            uint256 makerTokenDecimals = _getTokenDecimals(makerToken);\n            uint256 takerTokenDecimals = _getTokenDecimals(takerToken);\n            makerTokenAmount =\n                rate *\n                takerTokenAmount *\n                10 ** makerTokenDecimals /\n                10 ** takerTokenDecimals /\n                10 ** 18;\n            return makerTokenAmount;\n        } catch (bytes memory) {\n            // Swallow failures, leaving all results as zero.\n            return 0;\n        }\n    }\n\n    function _getNextReserveId(\n        KyberSamplerOpts memory opts,\n        address takerToken,\n        address makerToken\n    )\n        internal\n        view\n        returns (bytes32 reserveId)\n    {\n        // Fetch the registered reserves for this pair\n        IKyberHintHandler kyberHint = IKyberHintHandler(opts.hintHandler);\n        (bytes32[] memory reserveIds, ,) = kyberHint.getTradingReserves(\n            takerToken == opts.weth ? KYBER_ETH_ADDRESS : takerToken,\n            makerToken == opts.weth ? KYBER_ETH_ADDRESS : makerToken,\n            true,\n            new bytes(0) // empty hint\n        );\n\n        if (opts.reserveOffset >= reserveIds.length) {\n            return 0x0;\n        }\n\n        reserveId = reserveIds[opts.reserveOffset];\n        // Ignore Kyber Bridged Reserves (0xbb)\n        if (uint256(reserveId >> 248) == 0xbb) {\n            return 0x0;\n        }\n\n        return reserveId;\n    }\n}\n",
        "./interfaces/IKyberNetwork.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n// Keepin everything together\ninterface IKyberNetwork {\n\n\n}\n\n\ninterface IKyberNetworkProxy {\n\n    function getExpectedRateAfterFee(\n        address src,\n        address dest,\n        uint256 srcQty,\n        uint256 platformFeeBps,\n        bytes calldata hint\n    )\n        external\n        view\n        returns (uint256 expectedRate);\n}\n\ninterface IKyberHintHandler {\n\n    enum TradeType {BestOfAll, MaskIn, MaskOut, Split}\n\n    enum ProcessWithRate {NotRequired, Required}\n\n    function getTradingReserves(\n        address tokenSrc,\n        address tokenDest,\n        bool isTokenToToken,\n        bytes calldata hint\n    )\n        external\n        view\n        returns (\n            bytes32[] memory reserveIds,\n            uint256[] memory splitValuesBps,\n            ProcessWithRate processWithRate\n        );\n\n    function buildTokenToEthHint(\n        address tokenSrc,\n        TradeType tokenToEthType,\n        bytes32[] calldata tokenToEthReserveIds,\n        uint256[] calldata tokenToEthSplits\n    )\n        external\n        view\n        returns (bytes memory hint);\n\n    function buildEthToTokenHint(\n        address tokenDest,\n        TradeType ethToTokenType,\n        bytes32[] calldata ethToTokenReserveIds,\n        uint256[] calldata ethToTokenSplits\n    )\n        external\n        view\n        returns (bytes memory hint);\n\n    function buildTokenToTokenHint(\n        address tokenSrc,\n        TradeType tokenToEthType,\n        bytes32[] calldata tokenToEthReserveIds,\n        uint256[] calldata tokenToEthSplits,\n        address tokenDest,\n        TradeType ethToTokenType,\n        bytes32[] calldata ethToTokenReserveIds,\n        uint256[] calldata ethToTokenSplits\n    )\n        external\n        view\n        returns (bytes memory hint);\n}\n",
        "./KyberDmmSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\ninterface IKyberDmmPool {\n\n    function totalSupply()\n        external\n        view\n        returns (uint256);\n}\n\ninterface IKyberDmmFactory {\n\n    function getPools(address token0, address token1)\n        external\n        view\n        returns (address[] memory _tokenPools);\n}\n\ninterface IKyberDmmRouter {\n\n    function factory() external view returns (address);\n\n    function getAmountsOut(uint256 amountIn, address[] calldata pools, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts);\n\n    function getAmountsIn(uint256 amountOut, address[] calldata pools, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts);\n}\n\n\n\ncontract KyberDmmSampler\n{\n    /// @dev Gas limit for KyberDmm calls.\n    uint256 constant private KYBER_DMM_CALL_GAS = 150e3; // 150k\n\n    /// @dev Sample sell quotes from KyberDmm.\n    /// @param router Router to look up tokens and amounts\n    /// @param path Token route. Should be takerToken -> makerToken\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return pools The pool addresses involved in the multi path trade\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromKyberDmm(\n        address router,\n        address[] memory path,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (address[] memory pools, uint256[] memory makerTokenAmounts)\n    {\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        pools = _getKyberDmmPools(router, path);\n        if (pools.length == 0) {\n            return (pools, makerTokenAmounts);\n        }\n        for (uint256 i = 0; i < numSamples; i++) {\n            try\n                IKyberDmmRouter(router).getAmountsOut\n                    {gas: KYBER_DMM_CALL_GAS}\n                    (takerTokenAmounts[i], pools, path)\n                returns (uint256[] memory amounts)\n            {\n                makerTokenAmounts[i] = amounts[path.length - 1];\n                // Break early if there are 0 amounts\n                if (makerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from KyberDmm.\n    /// @param router Router to look up tokens and amounts\n    /// @param path Token route. Should be takerToken -> makerToken.\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return pools The pool addresses involved in the multi path trade\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromKyberDmm(\n        address router,\n        address[] memory path,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (address[] memory pools, uint256[] memory takerTokenAmounts)\n    {\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n        pools = _getKyberDmmPools(router, path);\n        if (pools.length == 0) {\n            return (pools, takerTokenAmounts);\n        }\n        for (uint256 i = 0; i < numSamples; i++) {\n            try\n                IKyberDmmRouter(router).getAmountsIn\n                    {gas: KYBER_DMM_CALL_GAS}\n                    (makerTokenAmounts[i], pools, path)\n                returns (uint256[] memory amounts)\n            {\n                takerTokenAmounts[i] = amounts[0];\n                // Break early if there are 0 amounts\n                if (takerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    function _getKyberDmmPools(\n        address router,\n        address[] memory path\n    )\n        private\n        view\n        returns (address[] memory pools)\n    {\n        IKyberDmmFactory factory = IKyberDmmFactory(IKyberDmmRouter(router).factory());\n        pools = new address[](path.length - 1);\n        for (uint256 i = 0; i < pools.length; i++) {\n            // find the best pool\n            address[] memory allPools;\n            try\n                factory.getPools\n                    {gas: KYBER_DMM_CALL_GAS}\n                    (path[i], path[i + 1])\n                returns (address[] memory allPools)\n            {\n                uint256 maxSupply = 0;\n                require(allPools.length >= 1, \"KyberDMMSampler/NO_POOLS_FOUND\");\n                for (uint256 j = 0; j < allPools.length; j++) {\n                    uint256 totalSupply = IKyberDmmPool(allPools[j]).totalSupply();\n                    if (totalSupply > maxSupply) {\n                        maxSupply = totalSupply;\n                        pools[i] = allPools[j];\n                    }\n                }\n            } catch (bytes memory) {\n                return new address[](0);\n            }\n        }\n    }\n}\n",
        "./LidoSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./SamplerUtils.sol\";\n\ncontract LidoSampler is SamplerUtils {\n    struct LidoInfo {\n        address stEthToken;\n        address wethToken;\n    }\n\n    /// @dev Sample sell quotes from Lido\n    /// @param lidoInfo Info regarding a specific Lido deployment\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromLido(\n        LidoInfo memory lidoInfo,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        pure\n        returns (uint256[] memory)\n    {\n        _assertValidPair(makerToken, takerToken);\n\n        if (takerToken != lidoInfo.wethToken || makerToken != address(lidoInfo.stEthToken)) {\n            // Return 0 values if not selling WETH for stETH\n            uint256 numSamples = takerTokenAmounts.length;\n            uint256[] memory makerTokenAmounts = new uint256[](numSamples);\n            return makerTokenAmounts;\n        }\n\n        // Minting stETH is always 1:1 therefore we can just return the same amounts back\n        return takerTokenAmounts;\n    }\n\n    /// @dev Sample buy quotes from Lido.\n    /// @param lidoInfo Info regarding a specific Lido deployment\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromLido(\n        LidoInfo memory lidoInfo,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        pure\n        returns (uint256[] memory)\n    {\n        _assertValidPair(makerToken, takerToken);\n\n        if (takerToken != lidoInfo.wethToken || makerToken != address(lidoInfo.stEthToken)) {\n            // Return 0 values if not buying stETH for WETH\n            uint256 numSamples = makerTokenAmounts.length;\n            uint256[] memory takerTokenAmounts = new uint256[](numSamples);\n            return takerTokenAmounts;\n        }\n\n        // Minting stETH is always 1:1 therefore we can just return the same amounts back\n        return makerTokenAmounts;\n    }\n\n}\n",
        "./LiquidityProviderSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol\";\nimport \"@0x/contracts-zero-ex/contracts/src/vendor/ILiquidityProvider.sol\";\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\n\n\ncontract LiquidityProviderSampler is\n    SamplerUtils,\n    ApproximateBuys\n{\n    /// @dev Default gas limit for liquidity provider calls.\n    uint256 constant private DEFAULT_CALL_GAS = 400e3; // 400k\n\n    /// @dev Sample sell quotes from an arbitrary on-chain liquidity provider.\n    /// @param providerAddress Address of the liquidity provider.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromLiquidityProvider(\n        address providerAddress,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        // Initialize array of maker token amounts.\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            try\n                ILiquidityProvider(providerAddress).getSellQuote\n                    {gas: DEFAULT_CALL_GAS}\n                    (\n                        IERC20TokenV06(takerToken),\n                        IERC20TokenV06(makerToken),\n                        takerTokenAmounts[i]\n                    )\n                returns (uint256 amount)\n            {\n                makerTokenAmounts[i] = amount;\n                // Break early if there are 0 amounts\n                if (makerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from an arbitrary on-chain liquidity provider.\n    /// @param providerAddress Address of the liquidity provider.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromLiquidityProvider(\n        address providerAddress,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        takerTokenAmounts = _sampleApproximateBuys(\n            ApproximateBuyQuoteOpts({\n                makerTokenData: abi.encode(makerToken, providerAddress),\n                takerTokenData: abi.encode(takerToken, providerAddress),\n                getSellQuoteCallback: _sampleSellForApproximateBuyFromLiquidityProvider\n            }),\n            makerTokenAmounts\n        );\n    }\n\n    function _sampleSellForApproximateBuyFromLiquidityProvider(\n        bytes memory takerTokenData,\n        bytes memory makerTokenData,\n        uint256 sellAmount\n    )\n        private\n        view\n        returns (uint256 buyAmount)\n    {\n        (address takerToken, address providerAddress) =\n            abi.decode(takerTokenData, (address, address));\n        (address makerToken) =\n            abi.decode(makerTokenData, (address));\n        try\n            this.sampleSellsFromLiquidityProvider\n                {gas: DEFAULT_CALL_GAS}\n                (providerAddress, takerToken, makerToken, _toSingleValueArray(sellAmount))\n            returns (uint256[] memory amounts)\n        {\n            return amounts[0];\n        } catch (bytes memory) {\n            // Swallow failures, leaving all results as zero.\n            return 0;\n        }\n    }\n}\n",
        "@0x/contracts-zero-ex/contracts/src/vendor/ILiquidityProvider.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\n\n\ninterface ILiquidityProvider {\n\n    /// @dev An optional event an LP can emit for each fill against a source.\n    /// @param inputToken The input token.\n    /// @param outputToken The output token.\n    /// @param inputTokenAmount How much input token was sold.\n    /// @param outputTokenAmount How much output token was bought.\n    /// @param sourceId A bytes32 encoded ascii source ID. E.g., `bytes32('Curve')`/\n    /// @param sourceAddress An optional address associated with the source (e.g, a curve pool).\n    /// @param sourceId A bytes32 encoded ascii source ID. E.g., `bytes32('Curve')`/\n    /// @param sourceAddress An optional address associated with the source (e.g, a curve pool).\n    /// @param sender The caller of the LP.\n    /// @param recipient The recipient of the output tokens.\n    event LiquidityProviderFill(\n        IERC20TokenV06 inputToken,\n        IERC20TokenV06 outputToken,\n        uint256 inputTokenAmount,\n        uint256 outputTokenAmount,\n        bytes32 sourceId,\n        address sourceAddress,\n        address sender,\n        address recipient\n    );\n\n    /// @dev Trades `inputToken` for `outputToken`. The amount of `inputToken`\n    ///      to sell must be transferred to the contract prior to calling this\n    ///      function to trigger the trade.\n    /// @param inputToken The token being sold.\n    /// @param outputToken The token being bought.\n    /// @param recipient The recipient of the bought tokens.\n    /// @param minBuyAmount The minimum acceptable amount of `outputToken` to buy.\n    /// @param auxiliaryData Arbitrary auxiliary data supplied to the contract.\n    /// @return boughtAmount The amount of `outputToken` bought.\n    function sellTokenForToken(\n        IERC20TokenV06 inputToken,\n        IERC20TokenV06 outputToken,\n        address recipient,\n        uint256 minBuyAmount,\n        bytes calldata auxiliaryData\n    )\n        external\n        returns (uint256 boughtAmount);\n\n    /// @dev Trades ETH for token. ETH must either be attached to this function\n    ///      call or sent to the contract prior to calling this function to\n    ///      trigger the trade.\n    /// @param outputToken The token being bought.\n    /// @param recipient The recipient of the bought tokens.\n    /// @param minBuyAmount The minimum acceptable amount of `outputToken` to buy.\n    /// @param auxiliaryData Arbitrary auxiliary data supplied to the contract.\n    /// @return boughtAmount The amount of `outputToken` bought.\n    function sellEthForToken(\n        IERC20TokenV06 outputToken,\n        address recipient,\n        uint256 minBuyAmount,\n        bytes calldata auxiliaryData\n    )\n        external\n        payable\n        returns (uint256 boughtAmount);\n\n    /// @dev Trades token for ETH. The token must be sent to the contract prior\n    ///      to calling this function to trigger the trade.\n    /// @param inputToken The token being sold.\n    /// @param recipient The recipient of the bought tokens.\n    /// @param minBuyAmount The minimum acceptable amount of ETH to buy.\n    /// @param auxiliaryData Arbitrary auxiliary data supplied to the contract.\n    /// @return boughtAmount The amount of ETH bought.\n    function sellTokenForEth(\n        IERC20TokenV06 inputToken,\n        address payable recipient,\n        uint256 minBuyAmount,\n        bytes calldata auxiliaryData\n    )\n        external\n        returns (uint256 boughtAmount);\n\n    /// @dev Quotes the amount of `outputToken` that would be obtained by\n    ///      selling `sellAmount` of `inputToken`.\n    /// @param inputToken Address of the taker token (what to sell). Use\n    ///        the wETH address if selling ETH.\n    /// @param outputToken Address of the maker token (what to buy). Use\n    ///        the wETH address if buying ETH.\n    /// @param sellAmount Amount of `inputToken` to sell.\n    /// @return outputTokenAmount Amount of `outputToken` that would be obtained.\n    function getSellQuote(\n        IERC20TokenV06 inputToken,\n        IERC20TokenV06 outputToken,\n        uint256 sellAmount\n    )\n        external\n        view\n        returns (uint256 outputTokenAmount);\n}\n",
        "./MakerPSMSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./SamplerUtils.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibMathV06.sol\";\n\ninterface IPSM {\n    // @dev Get the fee for selling USDC to DAI in PSM\n    // @return tin toll in [wad]\n    function tin() external view returns (uint256);\n    // @dev Get the fee for selling DAI to USDC in PSM\n    // @return tout toll out [wad]\n    function tout() external view returns (uint256);\n\n    // @dev Get the address of the PSM state Vat\n    // @return address of the Vat\n    function vat() external view returns (address);\n\n    // @dev Get the address of the underlying vault powering PSM\n    // @return address of gemJoin contract\n    function gemJoin() external view returns (address);\n\n    // @dev Get the address of DAI\n    // @return address of DAI contract\n    function dai() external view returns (address);\n\n    // @dev Sell USDC for DAI\n    // @param usr The address of the account trading USDC for DAI.\n    // @param gemAmt The amount of USDC to sell in USDC base units\n    function sellGem(\n        address usr,\n        uint256 gemAmt\n    ) external;\n    // @dev Buy USDC for DAI\n    // @param usr The address of the account trading DAI for USDC\n    // @param gemAmt The amount of USDC to buy in USDC base units\n    function buyGem(\n        address usr,\n        uint256 gemAmt\n    ) external;\n}\n\ninterface IVAT {\n    // @dev Get a collateral type by identifier\n    // @param ilkIdentifier bytes32 identifier. Example: ethers.utils.formatBytes32String(\"PSM-USDC-A\")\n    // @return ilk\n    // @return ilk.Art Total Normalised Debt in wad\n    // @return ilk.rate Accumulated Rates in ray\n    // @return ilk.spot Price with Safety Margin in ray\n    // @return ilk.line Debt Ceiling in rad\n    // @return ilk.dust Urn Debt Floor in rad\n    function ilks(\n        bytes32 ilkIdentifier\n    ) external view returns (\n        uint256 Art,\n        uint256 rate,\n        uint256 spot,\n        uint256 line,\n        uint256 dust\n    );\n}\n\ncontract MakerPSMSampler is\n    SamplerUtils\n{\n    using LibSafeMathV06 for uint256;\n\n    /// @dev Information about which PSM module to use\n    struct MakerPsmInfo {\n        address psmAddress;\n        bytes32 ilkIdentifier;\n        address gemTokenAddress;\n    }\n\n    /// @dev Gas limit for MakerPsm calls.\n    uint256 constant private MAKER_PSM_CALL_GAS = 300e3; // 300k\n\n\n    // Maker units\n    // wad: fixed point decimal with 18 decimals (for basic quantities, e.g. balances)\n    uint256 constant private WAD = 10 ** 18;\n    // ray: fixed point decimal with 27 decimals (for precise quantites, e.g. ratios)\n    uint256 constant private RAY = 10 ** 27;\n    // rad: fixed point decimal with 45 decimals (result of integer multiplication with a wad and a ray)\n    uint256 constant private RAD = 10 ** 45;\n    // See https://github.com/makerdao/dss/blob/master/DEVELOPING.m\n\n    /// @dev Sample sell quotes from Maker PSM\n    function sampleSellsFromMakerPsm(\n        MakerPsmInfo memory psmInfo,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        IPSM psm = IPSM(psmInfo.psmAddress);\n        IVAT vat = IVAT(psm.vat());\n\n\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        if (makerToken != psm.dai() && takerToken != psm.dai()) {\n            return makerTokenAmounts;\n        }\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            uint256 buyAmount = _samplePSMSell(psmInfo, makerToken, takerToken, takerTokenAmounts[i], psm, vat);\n\n            if (buyAmount == 0) {\n                break;\n            }\n            makerTokenAmounts[i] = buyAmount;\n        }\n    }\n\n    function sampleBuysFromMakerPsm(\n        MakerPsmInfo memory psmInfo,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        IPSM psm = IPSM(psmInfo.psmAddress);\n        IVAT vat = IVAT(psm.vat());\n\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n        if (makerToken != psm.dai() && takerToken != psm.dai()) {\n            return takerTokenAmounts;\n        }\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            uint256 sellAmount = _samplePSMBuy(psmInfo, makerToken, takerToken, makerTokenAmounts[i], psm, vat);\n\n            if (sellAmount == 0) {\n                break;\n            }\n\n            takerTokenAmounts[i] = sellAmount;\n        }\n\n    }\n\n    function _samplePSMSell(MakerPsmInfo memory psmInfo, address makerToken, address takerToken, uint256 takerTokenAmount, IPSM psm, IVAT vat)\n        private\n        view\n        returns (uint256)\n    {\n        (uint256 totalDebtInWad,,, uint256 debtCeilingInRad, uint256 debtFloorInRad) = vat.ilks(psmInfo.ilkIdentifier);\n        uint256 gemTokenBaseUnit = uint256(1e6);\n\n        if (takerToken == psmInfo.gemTokenAddress) {\n            // Simulate sellGem\n            // Selling USDC to the PSM, increasing the total debt\n            // Convert USDC 6 decimals to 18 decimals [wad]\n            uint256 takerTokenAmountInWad = takerTokenAmount.safeMul(1e12);\n\n            uint256 newTotalDebtInRad = totalDebtInWad.safeAdd(takerTokenAmountInWad).safeMul(RAY);\n\n            // PSM is too full to fit\n            if (newTotalDebtInRad >= debtCeilingInRad) {\n                return 0;\n            }\n\n            uint256 feeInWad = takerTokenAmountInWad.safeMul(psm.tin()).safeDiv(WAD);\n            uint256 makerTokenAmountInWad = takerTokenAmountInWad.safeSub(feeInWad);\n\n            return makerTokenAmountInWad;\n        } else if (makerToken == psmInfo.gemTokenAddress) {\n            // Simulate buyGem\n            // Buying USDC from the PSM, decreasing the total debt\n            // Selling DAI for USDC, already in 18 decimals [wad]\n            uint256 takerTokenAmountInWad = takerTokenAmount;\n            if (takerTokenAmountInWad > totalDebtInWad) {\n                return 0;\n            }\n            uint256 newTotalDebtInRad = totalDebtInWad.safeSub(takerTokenAmountInWad).safeMul(RAY);\n\n            // PSM is empty, not enough USDC to buy from it\n            if (newTotalDebtInRad <= debtFloorInRad) {\n                return 0;\n            }\n\n            uint256 feeDivisorInWad = WAD.safeAdd(psm.tout()); // eg. 1.001 * 10 ** 18 with 0.1% tout;\n            uint256 makerTokenAmountInGemTokenBaseUnits =  takerTokenAmountInWad.safeMul(gemTokenBaseUnit).safeDiv(feeDivisorInWad);\n\n            return makerTokenAmountInGemTokenBaseUnits;\n        }\n\n        return 0;\n    }\n\n    function _samplePSMBuy(MakerPsmInfo memory psmInfo, address makerToken, address takerToken, uint256 makerTokenAmount, IPSM psm, IVAT vat)\n        private\n        view\n        returns (uint256)\n    {\n        (uint256 totalDebtInWad,,, uint256 debtCeilingInRad, uint256 debtFloorInRad) = vat.ilks(psmInfo.ilkIdentifier);\n\n        if (takerToken == psmInfo.gemTokenAddress) {\n            // Simulate sellGem\n            // Selling USDC to the PSM, increasing the total debt\n            uint256 makerTokenAmountInWad = makerTokenAmount;\n            uint256 feeDivisorInWad = WAD.safeSub(psm.tin()); // eg. 0.999 * 10 ** 18 with 0.1% tin;\n            uint256 takerTokenAmountInWad = makerTokenAmountInWad.safeMul(WAD).safeDiv(feeDivisorInWad);\n            uint256 newTotalDebtInRad = totalDebtInWad.safeAdd(takerTokenAmountInWad).safeMul(RAY);\n\n            // PSM is too full to fit\n            if (newTotalDebtInRad >= debtCeilingInRad) {\n                return 0;\n            }\n\n            uint256 takerTokenAmountInGemInGemBaseUnits = (takerTokenAmountInWad.safeDiv(1e12)).safeAdd(1); // Add 1 to deal with cut off decimals converting to lower decimals\n\n            return takerTokenAmountInGemInGemBaseUnits;\n        } else if (makerToken == psmInfo.gemTokenAddress) {\n            // Simulate buyGem\n            // Buying USDC from the PSM, decreasing the total debt\n            uint256 makerTokenAmountInWad = makerTokenAmount.safeMul(1e12);\n            uint256 feeMultiplierInWad = WAD.safeAdd(psm.tout()); // eg. 1.001 * 10 ** 18 with 0.1% tout;\n            uint256 takerTokenAmountInWad =  makerTokenAmountInWad.safeMul(feeMultiplierInWad).safeDiv(WAD);\n            if (takerTokenAmountInWad > totalDebtInWad) {\n                return 0;\n            }\n            uint256 newTotalDebtInRad = totalDebtInWad.safeSub(takerTokenAmountInWad).safeMul(RAY);\n\n            // PSM is empty, not enough USDC to buy\n            if (newTotalDebtInRad <= debtFloorInRad) {\n                return 0;\n            }\n\n\n            return takerTokenAmountInWad;\n        }\n\n        return 0;\n    }\n\n}\n",
        "./MultiBridgeSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IMultiBridge.sol\";\n\n\ncontract MultiBridgeSampler {\n\n    /// @dev Default gas limit for multibridge calls.\n    uint256 constant private DEFAULT_CALL_GAS = 400e3; // 400k\n\n    /// @dev Sample sell quotes from MultiBridge.\n    /// @param multibridge Address of the MultiBridge contract.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param intermediateToken The address of the intermediate token to\n    ///        use in an indirect route.\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromMultiBridge(\n        address multibridge,\n        address takerToken,\n        address intermediateToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        // Initialize array of maker token amounts.\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        // If no address provided, return all zeros.\n        if (multibridge == address(0)) {\n            return makerTokenAmounts;\n        }\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            (bool didSucceed, bytes memory resultData) =\n                multibridge.staticcall.gas(DEFAULT_CALL_GAS)(\n                    abi.encodeWithSelector(\n                        IMultiBridge(0).getSellQuote.selector,\n                        takerToken,\n                        intermediateToken,\n                        makerToken,\n                        takerTokenAmounts[i]\n                    ));\n            uint256 buyAmount = 0;\n            if (didSucceed) {\n                buyAmount = abi.decode(resultData, (uint256));\n            }\n            // Exit early if the amount is too high for the source to serve\n            if (buyAmount == 0) {\n                break;\n            }\n\n            makerTokenAmounts[i] = buyAmount;\n        }\n    }\n}\n",
        "./interfaces/IMultiBridge.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface IMultiBridge {\n\n    /// @dev Transfers `amount` of the ERC20 `tokenAddress` from `from` to `to`.\n    /// @param tokenAddress The address of the ERC20 token to transfer.\n    /// @param from Address to transfer asset from.\n    /// @param to Address to transfer asset to.\n    /// @param amount Amount of asset to transfer.\n    /// @param bridgeData Arbitrary asset data needed by the bridge contract.\n    /// @return success The magic bytes `0xdc1600f3` if successful.\n    function bridgeTransferFrom(\n        address tokenAddress,\n        address from,\n        address to,\n        uint256 amount,\n        bytes calldata bridgeData\n    )\n        external\n        returns (bytes4 success);\n\n    /// @dev Quotes the amount of `makerToken` that would be obtained by\n    ///      selling `sellAmount` of `takerToken`.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param intermediateToken The address of the intermediate token to\n    ///        use in an indirect route.\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param sellAmount Amount of `takerToken` to sell.\n    /// @return makerTokenAmount Amount of `makerToken` that would be obtained.\n    function getSellQuote(\n        address takerToken,\n        address intermediateToken,\n        address makerToken,\n        uint256 sellAmount\n    )\n        external\n        view\n        returns (uint256 makerTokenAmount);\n}\n",
        "./MStableSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IMStable.sol\";\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\n\n\ncontract MStableSampler is\n    SamplerUtils,\n    ApproximateBuys\n{\n    /// @dev Default gas limit for mStable calls.\n    uint256 constant private DEFAULT_CALL_GAS = 800e3; // 800k\n\n    /// @dev Sample sell quotes from the mStable contract\n    /// @param router Address of the mStable contract\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromMStable(\n        address router,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        // Initialize array of maker token amounts.\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            try\n                IMStable(router).getSwapOutput\n                    {gas: DEFAULT_CALL_GAS}\n                    (takerToken, makerToken, takerTokenAmounts[i])\n                returns (uint256 amount)\n            {\n                makerTokenAmounts[i] = amount;\n                // Break early if there are 0 amounts\n                if (makerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from MStable contract\n    /// @param router Address of the mStable contract\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromMStable(\n        address router,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        return _sampleApproximateBuys(\n            ApproximateBuyQuoteOpts({\n                makerTokenData: abi.encode(makerToken, router),\n                takerTokenData: abi.encode(takerToken, router),\n                getSellQuoteCallback: _sampleSellForApproximateBuyFromMStable\n            }),\n            makerTokenAmounts\n        );\n    }\n\n    function _sampleSellForApproximateBuyFromMStable(\n        bytes memory takerTokenData,\n        bytes memory makerTokenData,\n        uint256 sellAmount\n    )\n        private\n        view\n        returns (uint256 buyAmount)\n    {\n        (address takerToken, address router) =\n            abi.decode(takerTokenData, (address, address));\n        (address makerToken) =\n            abi.decode(makerTokenData, (address));\n        try\n            this.sampleSellsFromMStable\n                (router, takerToken, makerToken, _toSingleValueArray(sellAmount))\n            returns (uint256[] memory amounts)\n        {\n            return amounts[0];\n        } catch (bytes memory) {\n            // Swallow failures, leaving all results as zero.\n            return 0;\n        }\n    }\n}\n",
        "./interfaces/IMStable.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface IMStable {\n\n    function getSwapOutput(\n        address _input,\n        address _output,\n        uint256 _quantity\n    )\n        external\n        view\n        returns (uint256 swapOutput);\n}\n",
        "./MooniswapSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IMooniswap.sol\";\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\n\n\ncontract MooniswapSampler is\n    SamplerUtils,\n    ApproximateBuys\n{\n    /// @dev Gas limit for Mooniswap calls.\n    uint256 constant private MOONISWAP_CALL_GAS = 150e3; // 150k\n\n    /// @dev Sample sell quotes from Mooniswap.\n    /// @param registry Address of the Mooniswap Registry.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return pool The contract address for the pool\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromMooniswap(\n        address registry,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (IMooniswap pool, uint256[] memory makerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            uint256 buyAmount = sampleSingleSellFromMooniswapPool(\n                registry,\n                takerToken,\n                makerToken,\n                takerTokenAmounts[i]\n            );\n            makerTokenAmounts[i] = buyAmount;\n            // Break early if there are 0 amounts\n            if (makerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n\n        pool = IMooniswap(\n            IMooniswapRegistry(registry).pools(takerToken, makerToken)\n        );\n    }\n\n    function sampleSingleSellFromMooniswapPool(\n        address registry,\n        address mooniswapTakerToken,\n        address mooniswapMakerToken,\n        uint256 takerTokenAmount\n    )\n        public\n        view\n        returns (uint256)\n    {\n        // Find the pool for the pair.\n        IMooniswap pool = IMooniswap(\n            IMooniswapRegistry(registry).pools(mooniswapTakerToken, mooniswapMakerToken)\n        );\n        // If there is no pool then return early\n        if (address(pool) == address(0)) {\n            return 0;\n        }\n        uint256 poolBalance = mooniswapTakerToken == address(0)\n            ? address(pool).balance\n            : IERC20TokenV06(mooniswapTakerToken).balanceOf(address(pool));\n        // If the pool balance is smaller than the sell amount\n        // don't sample to avoid multiplication overflow in buys\n        if (poolBalance < takerTokenAmount) {\n            return 0;\n        }\n        try\n            pool.getReturn\n                {gas: MOONISWAP_CALL_GAS}\n                (mooniswapTakerToken, mooniswapMakerToken, takerTokenAmount)\n            returns (uint256 amount)\n        {\n            return amount;\n        } catch (bytes memory) {\n            // Swallow failures, leaving all results as zero.\n            return 0;\n        }\n    }\n\n    /// @dev Sample buy quotes from Mooniswap.\n    /// @param registry Address of the Mooniswap Registry.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token sell amount for each sample.\n    /// @return pool The contract address for the pool\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromMooniswap(\n        address registry,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (IMooniswap pool, uint256[] memory takerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n\n        takerTokenAmounts = _sampleApproximateBuys(\n            ApproximateBuyQuoteOpts({\n                makerTokenData: abi.encode(registry, makerToken),\n                takerTokenData: abi.encode(registry, takerToken),\n                getSellQuoteCallback: _sampleSellForApproximateBuyFromMooniswap\n            }),\n            makerTokenAmounts\n        );\n\n        pool = IMooniswap(\n            IMooniswapRegistry(registry).pools(takerToken, makerToken)\n        );\n    }\n\n    function _sampleSellForApproximateBuyFromMooniswap(\n        bytes memory takerTokenData,\n        bytes memory makerTokenData,\n        uint256 sellAmount\n    )\n        private\n        view\n        returns (uint256 buyAmount)\n    {\n        (address registry, address mooniswapTakerToken) = abi.decode(takerTokenData, (address, address));\n        (address _registry, address mooniswapMakerToken) = abi.decode(makerTokenData, (address, address));\n        return sampleSingleSellFromMooniswapPool(\n            registry,\n            mooniswapTakerToken,\n            mooniswapMakerToken,\n            sellAmount\n        );\n    }\n}\n",
        "./interfaces/IMooniswap.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface IMooniswapRegistry {\n\n    function pools(address token1, address token2) external view returns(address);\n}\n\ninterface IMooniswap {\n\n    function getReturn(\n        address fromToken,\n        address destToken,\n        uint256 amount\n    )\n        external\n        view\n        returns(uint256 returnAmount);\n}\n",
        "./NativeOrderSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibMathV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol\";\n\n\ninterface IExchange {\n\n    enum OrderStatus {\n        INVALID,\n        FILLABLE,\n        FILLED,\n        CANCELLED,\n        EXPIRED\n    }\n\n    /// @dev A standard OTC or OO limit order.\n    struct LimitOrder {\n        IERC20TokenV06 makerToken;\n        IERC20TokenV06 takerToken;\n        uint128 makerAmount;\n        uint128 takerAmount;\n        uint128 takerTokenFeeAmount;\n        address maker;\n        address taker;\n        address sender;\n        address feeRecipient;\n        bytes32 pool;\n        uint64 expiry;\n        uint256 salt;\n    }\n\n    /// @dev An RFQ limit order.\n    struct RfqOrder {\n        IERC20TokenV06 makerToken;\n        IERC20TokenV06 takerToken;\n        uint128 makerAmount;\n        uint128 takerAmount;\n        address maker;\n        address taker;\n        address txOrigin;\n        bytes32 pool;\n        uint64 expiry;\n        uint256 salt;\n    }\n\n    /// @dev Info on a limit or RFQ order.\n    struct OrderInfo {\n        bytes32 orderHash;\n        OrderStatus status;\n        uint128 takerTokenFilledAmount;\n    }\n\n    /// @dev Allowed signature types.\n    enum SignatureType {\n        ILLEGAL,\n        INVALID,\n        EIP712,\n        ETHSIGN\n    }\n\n    /// @dev Encoded EC signature.\n    struct Signature {\n        // How to validate the signature.\n        SignatureType signatureType;\n        // EC Signature data.\n        uint8 v;\n        // EC Signature data.\n        bytes32 r;\n        // EC Signature data.\n        bytes32 s;\n    }\n\n    /// @dev Get the order info for a limit order.\n    /// @param order The limit order.\n    /// @return orderInfo Info about the order.\n    function getLimitOrderInfo(LimitOrder memory order)\n        external\n        view\n        returns (OrderInfo memory orderInfo);\n\n    /// @dev Get order info, fillable amount, and signature validity for a limit order.\n    ///      Fillable amount is determined using balances and allowances of the maker.\n    /// @param order The limit order.\n    /// @param signature The order signature.\n    /// @return orderInfo Info about the order.\n    /// @return actualFillableTakerTokenAmount How much of the order is fillable\n    ///         based on maker funds, in taker tokens.\n    /// @return isSignatureValid Whether the signature is valid.\n    function getLimitOrderRelevantState(\n        LimitOrder memory order,\n        Signature calldata signature\n    )\n        external\n        view\n        returns (\n            OrderInfo memory orderInfo,\n            uint128 actualFillableTakerTokenAmount,\n            bool isSignatureValid\n        );\n}\n\ncontract NativeOrderSampler {\n    using LibSafeMathV06 for uint256;\n    using LibBytesV06 for bytes;\n\n    /// @dev Gas limit for calls to `getOrderFillableTakerAmount()`.\n    uint256 constant internal DEFAULT_CALL_GAS = 200e3; // 200k\n\n    /// @dev Queries the fillable taker asset amounts of native orders.\n    ///      Effectively ignores orders that have empty signatures or\n    ///      maker/taker asset amounts (returning 0).\n    /// @param orders Native limit orders to query.\n    /// @param orderSignatures Signatures for each respective order in `orders`.\n    /// @param exchange The V4 exchange.\n    /// @return orderFillableTakerAssetAmounts How much taker asset can be filled\n    ///         by each order in `orders`.\n    function getLimitOrderFillableTakerAssetAmounts(\n        IExchange.LimitOrder[] memory orders,\n        IExchange.Signature[] memory orderSignatures,\n        IExchange exchange\n    )\n        public\n        view\n        returns (uint256[] memory orderFillableTakerAssetAmounts)\n    {\n        orderFillableTakerAssetAmounts = new uint256[](orders.length);\n        for (uint256 i = 0; i != orders.length; i++) {\n            try\n                this.getLimitOrderFillableTakerAmount\n                    {gas: DEFAULT_CALL_GAS}\n                    (\n                       orders[i],\n                       orderSignatures[i],\n                       exchange\n                    )\n                returns (uint256 amount)\n            {\n                orderFillableTakerAssetAmounts[i] = amount;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                orderFillableTakerAssetAmounts[i] = 0;\n            }\n        }\n    }\n\n    /// @dev Queries the fillable taker asset amounts of native orders.\n    ///      Effectively ignores orders that have empty signatures or\n    /// @param orders Native orders to query.\n    /// @param orderSignatures Signatures for each respective order in `orders`.\n    /// @param exchange The V4 exchange.\n    /// @return orderFillableMakerAssetAmounts How much maker asset can be filled\n    ///         by each order in `orders`.\n    function getLimitOrderFillableMakerAssetAmounts(\n        IExchange.LimitOrder[] memory orders,\n        IExchange.Signature[] memory orderSignatures,\n        IExchange exchange\n    )\n        public\n        view\n        returns (uint256[] memory orderFillableMakerAssetAmounts)\n    {\n        orderFillableMakerAssetAmounts = getLimitOrderFillableTakerAssetAmounts(\n            orders,\n            orderSignatures,\n            exchange\n        );\n        // `orderFillableMakerAssetAmounts` now holds taker asset amounts, so\n        // convert them to maker asset amounts.\n        for (uint256 i = 0; i < orders.length; ++i) {\n            if (orderFillableMakerAssetAmounts[i] != 0) {\n                orderFillableMakerAssetAmounts[i] = LibMathV06.getPartialAmountCeil(\n                    orderFillableMakerAssetAmounts[i],\n                    orders[i].takerAmount,\n                    orders[i].makerAmount\n                );\n            }\n        }\n    }\n\n    /// @dev Get the fillable taker amount of an order, taking into account\n    ///      order state, maker fees, and maker balances.\n    function getLimitOrderFillableTakerAmount(\n        IExchange.LimitOrder memory order,\n        IExchange.Signature memory signature,\n        IExchange exchange\n    )\n        virtual\n        public\n        view\n        returns (uint256 fillableTakerAmount)\n    {\n        if (signature.signatureType == IExchange.SignatureType.ILLEGAL ||\n            signature.signatureType == IExchange.SignatureType.INVALID ||\n            order.makerAmount == 0 ||\n            order.takerAmount == 0)\n        {\n            return 0;\n        }\n\n        (\n            IExchange.OrderInfo memory orderInfo,\n            uint128 remainingFillableTakerAmount,\n            bool isSignatureValid\n        ) = exchange.getLimitOrderRelevantState(order, signature);\n\n        if (\n              orderInfo.status != IExchange.OrderStatus.FILLABLE ||\n              !isSignatureValid ||\n              order.makerToken == IERC20TokenV06(0)\n            ) {\n            return 0;\n        }\n\n        fillableTakerAmount = uint256(remainingFillableTakerAmount);\n    }\n}\n",
        "./ShellSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./ApproximateBuys.sol\";\nimport \"./interfaces/IShell.sol\";\nimport \"./SamplerUtils.sol\";\n\n\ncontract ShellSampler is\n    SamplerUtils,\n    ApproximateBuys\n{\n\n    struct ShellInfo {\n        address poolAddress;\n    }\n\n    /// @dev Default gas limit for Shell calls.\n    uint256 constant private DEFAULT_CALL_GAS = 300e3; // 300k\n\n    /// @dev Sample sell quotes from the Shell pool contract\n    /// @param pool Address of the Shell pool contract\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromShell(\n        address pool,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        // Initialize array of maker token amounts.\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            try\n                IShell(pool).viewOriginSwap\n                    {gas: DEFAULT_CALL_GAS}\n                    (takerToken, makerToken, takerTokenAmounts[i])\n                returns (uint256 amount)\n            {\n                makerTokenAmounts[i] = amount;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from Shell pool contract\n    /// @param pool Address of the Shell pool contract\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromShell(\n        address pool,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        return _sampleApproximateBuys(\n            ApproximateBuyQuoteOpts({\n                makerTokenData: abi.encode(makerToken, pool),\n                takerTokenData: abi.encode(takerToken, pool),\n                getSellQuoteCallback: _sampleSellForApproximateBuyFromShell\n            }),\n            makerTokenAmounts\n        );\n    }\n\n    function _sampleSellForApproximateBuyFromShell(\n        bytes memory takerTokenData,\n        bytes memory makerTokenData,\n        uint256 sellAmount\n    )\n        private\n        view\n        returns (uint256 buyAmount)\n    {\n        (address takerToken, address pool) = abi.decode(takerTokenData, (address, address));\n        (address makerToken) = abi.decode(makerTokenData, (address));\n\n        try\n            this.sampleSellsFromShell\n                (pool, takerToken, makerToken, _toSingleValueArray(sellAmount))\n            returns (uint256[] memory amounts)\n        {\n            return amounts[0];\n        } catch (bytes memory) {\n            // Swallow failures, leaving all results as zero.\n            return 0;\n        }\n    }\n}\n",
        "./interfaces/IShell.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface IShell {\n\n    function viewOriginSwap (\n        address from,\n        address to,\n        uint256 fromAmount\n    )\n        external\n        view\n        returns (uint256 toAmount);\n\n    function viewTargetSwap (\n        address from,\n        address to,\n        uint256 toAmount\n    )\n        external\n        view\n        returns (uint256 fromAmount);\n}\n\n",
        "./SmoothySampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\n// import \"./interfaces/ISmoothy.sol\";\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\nimport \"./interfaces/ISmoothy.sol\";\n\ncontract SmoothySampler is\n    SamplerUtils,\n    ApproximateBuys\n{\n    /// @dev Information for sampling from smoothy sources.\n    struct SmoothyInfo {\n        address poolAddress;\n        bytes4 sellQuoteFunctionSelector;\n        bytes4 buyQuoteFunctionSelector;\n    }\n\n    /// @dev Base gas limit for Smoothy calls.\n    uint256 constant private SMOOTHY_CALL_GAS = 600e3;\n\n    /// @dev Sample sell quotes from Smoothy.\n    /// @param smoothyInfo Smoothy information specific to this token pair.\n    /// @param fromTokenIdx Index of the taker token (what to sell).\n    /// @param toTokenIdx Index of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromSmoothy(\n        SmoothyInfo memory smoothyInfo,\n        int128 fromTokenIdx,\n        int128 toTokenIdx,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        // Basically a Curve fork\n\n        // Smoothy only keep a percentage of its tokens available in reserve\n        uint256 poolReserveMakerAmount = ISmoothy(smoothyInfo.poolAddress).getBalance(uint256(toTokenIdx)) -\n                                         ISmoothy(smoothyInfo.poolAddress)._yBalances(uint256(toTokenIdx));\n        (, , , uint256 decimals) = ISmoothy(smoothyInfo.poolAddress).getTokenStats(uint256(toTokenIdx));\n        poolReserveMakerAmount = poolReserveMakerAmount/(10**(18-decimals));\n\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            (bool didSucceed, bytes memory resultData) =\n                smoothyInfo.poolAddress.staticcall.gas(SMOOTHY_CALL_GAS)(\n                    abi.encodeWithSelector(\n                        smoothyInfo.sellQuoteFunctionSelector,\n                        fromTokenIdx,\n                        toTokenIdx,\n                        takerTokenAmounts[i]\n                    ));\n            uint256 buyAmount = 0;\n            if (didSucceed) {\n                buyAmount = abi.decode(resultData, (uint256));\n            }\n\n            // Make sure the quoted buyAmount is available in the pool reserve\n            if (buyAmount >= poolReserveMakerAmount) {\n                // Assign pool reserve amount for all higher samples to break early\n                for (uint256 j = i; j < numSamples; j++) {\n                    makerTokenAmounts[j] = poolReserveMakerAmount;\n                }\n                break;\n            } else {\n                makerTokenAmounts[i] = buyAmount;\n            }\n\n            // Break early if there are 0 amounts\n            if (makerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from Smoothy.\n    /// @param smoothyInfo Smoothy information specific to this token pair.\n    /// @param fromTokenIdx Index of the taker token (what to sell).\n    /// @param toTokenIdx Index of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromSmoothy(\n        SmoothyInfo memory smoothyInfo,\n        int128 fromTokenIdx,\n        int128 toTokenIdx,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        // Buys not supported so approximate it.\n        return _sampleApproximateBuys(\n            ApproximateBuyQuoteOpts({\n                makerTokenData: abi.encode(toTokenIdx, smoothyInfo),\n                takerTokenData: abi.encode(fromTokenIdx, smoothyInfo),\n                getSellQuoteCallback: _sampleSellForApproximateBuyFromSmoothy\n            }),\n            makerTokenAmounts\n        );\n    }\n\n    function _sampleSellForApproximateBuyFromSmoothy(\n        bytes memory takerTokenData,\n        bytes memory makerTokenData,\n        uint256 sellAmount\n    )\n        private\n        view\n        returns (uint256 buyAmount)\n    {\n        (int128 takerTokenIdx, SmoothyInfo memory smoothyInfo) =\n            abi.decode(takerTokenData, (int128, SmoothyInfo));\n        (int128 makerTokenIdx) =\n            abi.decode(makerTokenData, (int128));\n        (bool success, bytes memory resultData) =\n            address(this).staticcall(abi.encodeWithSelector(\n                this.sampleSellsFromSmoothy.selector,\n                smoothyInfo,\n                takerTokenIdx,\n                makerTokenIdx,\n                _toSingleValueArray(sellAmount)\n            ));\n        if (!success) {\n            return 0;\n        }\n        // solhint-disable-next-line indent\n        return abi.decode(resultData, (uint256[]))[0];\n    }\n}\n",
        "./interfaces/ISmoothy.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface ISmoothy {\n\n    function getBalance (\n        uint256 tid\n    )\n        external\n        view\n        returns (uint256 balance);\n\n    function _yBalances (\n        uint256 tid\n    )\n        external\n        view\n        returns (uint256 balance);\n\n    function getTokenStats (\n        uint256 tid\n    )\n        external\n        view\n        returns (uint256 softWeight, uint256 hardWeight, uint256 balance, uint256 decimals);\n}\n",
        "./TwoHopSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol\";\n\n\ncontract TwoHopSampler {\n    using LibBytesV06 for bytes;\n\n    struct HopInfo {\n        uint256 sourceIndex;\n        bytes returnData;\n    }\n\n    function sampleTwoHopSell(\n        bytes[] memory firstHopCalls,\n        bytes[] memory secondHopCalls,\n        uint256 sellAmount\n    )\n        public\n        returns (\n            HopInfo memory firstHop,\n            HopInfo memory secondHop,\n            uint256 buyAmount\n        )\n    {\n        uint256 intermediateAssetAmount = 0;\n        for (uint256 i = 0; i != firstHopCalls.length; ++i) {\n            firstHopCalls[i].writeUint256(firstHopCalls[i].length - 32, sellAmount);\n            (bool didSucceed, bytes memory returnData) = address(this).call(firstHopCalls[i]);\n            if (didSucceed) {\n                uint256 amount = returnData.readUint256(returnData.length - 32);\n                if (amount > intermediateAssetAmount) {\n                    intermediateAssetAmount = amount;\n                    firstHop.sourceIndex = i;\n                    firstHop.returnData = returnData;\n                }\n            }\n        }\n        if (intermediateAssetAmount == 0) {\n            return (firstHop, secondHop, buyAmount);\n        }\n        for (uint256 j = 0; j != secondHopCalls.length; ++j) {\n            secondHopCalls[j].writeUint256(secondHopCalls[j].length - 32, intermediateAssetAmount);\n            (bool didSucceed, bytes memory returnData) = address(this).call(secondHopCalls[j]);\n            if (didSucceed) {\n                uint256 amount = returnData.readUint256(returnData.length - 32);\n                if (amount > buyAmount) {\n                    buyAmount = amount;\n                    secondHop.sourceIndex = j;\n                    secondHop.returnData = returnData;\n                }\n            }\n        }\n    }\n\n    function sampleTwoHopBuy(\n        bytes[] memory firstHopCalls,\n        bytes[] memory secondHopCalls,\n        uint256 buyAmount\n    )\n        public\n        returns (\n            HopInfo memory firstHop,\n            HopInfo memory secondHop,\n            uint256 sellAmount\n        )\n    {\n        sellAmount = uint256(-1);\n        uint256 intermediateAssetAmount = uint256(-1);\n        for (uint256 j = 0; j != secondHopCalls.length; ++j) {\n            secondHopCalls[j].writeUint256(secondHopCalls[j].length - 32, buyAmount);\n            (bool didSucceed, bytes memory returnData) = address(this).call(secondHopCalls[j]);\n            if (didSucceed) {\n                uint256 amount = returnData.readUint256(returnData.length - 32);\n                if (\n                    amount > 0 &&\n                    amount < intermediateAssetAmount\n                ) {\n                    intermediateAssetAmount = amount;\n                    secondHop.sourceIndex = j;\n                    secondHop.returnData = returnData;\n                }\n            }\n        }\n        if (intermediateAssetAmount == uint256(-1)) {\n            return (firstHop, secondHop, sellAmount);\n        }\n        for (uint256 i = 0; i != firstHopCalls.length; ++i) {\n            firstHopCalls[i].writeUint256(firstHopCalls[i].length - 32, intermediateAssetAmount);\n            (bool didSucceed, bytes memory returnData) = address(this).call(firstHopCalls[i]);\n            if (didSucceed) {\n                uint256 amount = returnData.readUint256(returnData.length - 32);\n                if (\n                    amount > 0 &&\n                    amount < sellAmount\n                ) {\n                    sellAmount = amount;\n                    firstHop.sourceIndex = i;\n                    firstHop.returnData = returnData;\n                }\n            }\n        }\n    }\n}\n",
        "./UniswapSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IUniswapExchangeQuotes.sol\";\nimport \"./SamplerUtils.sol\";\n\n\ninterface IUniswapExchangeFactory {\n\n    /// @dev Get the exchange for a token.\n    /// @param tokenAddress The address of the token contract.\n    function getExchange(address tokenAddress)\n        external\n        view\n        returns (address);\n}\n\n\ncontract UniswapSampler is\n    SamplerUtils\n{\n    /// @dev Gas limit for Uniswap calls.\n    uint256 constant private UNISWAP_CALL_GAS = 150e3; // 150k\n\n    /// @dev Sample sell quotes from Uniswap.\n    /// @param router Address of the Uniswap Router\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromUniswap(\n        address router,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        IUniswapExchangeQuotes takerTokenExchange = takerToken == address(0) ?\n            IUniswapExchangeQuotes(0) : _getUniswapExchange(router, takerToken);\n        IUniswapExchangeQuotes makerTokenExchange = makerToken == address(0) ?\n            IUniswapExchangeQuotes(0) : _getUniswapExchange(router, makerToken);\n        for (uint256 i = 0; i < numSamples; i++) {\n            bool didSucceed = true;\n            if (makerToken == address(0)) {\n                (makerTokenAmounts[i], didSucceed) = _callUniswapExchangePriceFunction(\n                    address(takerTokenExchange),\n                    takerTokenExchange.getTokenToEthInputPrice.selector,\n                    takerTokenAmounts[i]\n                );\n            } else if (takerToken == address(0)) {\n                (makerTokenAmounts[i], didSucceed) = _callUniswapExchangePriceFunction(\n                    address(makerTokenExchange),\n                    makerTokenExchange.getEthToTokenInputPrice.selector,\n                    takerTokenAmounts[i]\n                );\n            } else {\n                uint256 ethBought;\n                (ethBought, didSucceed) = _callUniswapExchangePriceFunction(\n                    address(takerTokenExchange),\n                    takerTokenExchange.getTokenToEthInputPrice.selector,\n                    takerTokenAmounts[i]\n                );\n                if (ethBought != 0) {\n                    (makerTokenAmounts[i], didSucceed) = _callUniswapExchangePriceFunction(\n                        address(makerTokenExchange),\n                        makerTokenExchange.getEthToTokenInputPrice.selector,\n                        ethBought\n                    );\n                } else {\n                    makerTokenAmounts[i] = 0;\n                }\n            }\n            // Break early if amounts are 0\n            if (!didSucceed || makerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from Uniswap.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token sell amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromUniswap(\n        address router,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n\n        IUniswapExchangeQuotes takerTokenExchange = takerToken == address(0) ?\n            IUniswapExchangeQuotes(0) : _getUniswapExchange(router, takerToken);\n        IUniswapExchangeQuotes makerTokenExchange = makerToken == address(0) ?\n            IUniswapExchangeQuotes(0) : _getUniswapExchange(router, makerToken);\n        for (uint256 i = 0; i < numSamples; i++) {\n            bool didSucceed = true;\n            if (makerToken == address(0)) {\n                (takerTokenAmounts[i], didSucceed) = _callUniswapExchangePriceFunction(\n                    address(takerTokenExchange),\n                    takerTokenExchange.getTokenToEthOutputPrice.selector,\n                    makerTokenAmounts[i]\n                );\n            } else if (takerToken == address(0)) {\n                (takerTokenAmounts[i], didSucceed) = _callUniswapExchangePriceFunction(\n                    address(makerTokenExchange),\n                    makerTokenExchange.getEthToTokenOutputPrice.selector,\n                    makerTokenAmounts[i]\n                );\n            } else {\n                uint256 ethSold;\n                (ethSold, didSucceed) = _callUniswapExchangePriceFunction(\n                    address(makerTokenExchange),\n                    makerTokenExchange.getEthToTokenOutputPrice.selector,\n                    makerTokenAmounts[i]\n                );\n                if (ethSold != 0) {\n                    (takerTokenAmounts[i], didSucceed) = _callUniswapExchangePriceFunction(\n                        address(takerTokenExchange),\n                        takerTokenExchange.getTokenToEthOutputPrice.selector,\n                        ethSold\n                    );\n                } else {\n                    takerTokenAmounts[i] = 0;\n                }\n            }\n            // Break early if amounts are 0\n            if (!didSucceed || takerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n    }\n\n    /// @dev Gracefully calls a Uniswap pricing function.\n    /// @param uniswapExchangeAddress Address of an `IUniswapExchangeQuotes` exchange.\n    /// @param functionSelector Selector of the target function.\n    /// @param inputAmount Quantity parameter particular to the pricing function.\n    /// @return outputAmount The returned amount from the function call. Will be\n    ///         zero if the call fails or if `uniswapExchangeAddress` is zero.\n    function _callUniswapExchangePriceFunction(\n        address uniswapExchangeAddress,\n        bytes4 functionSelector,\n        uint256 inputAmount\n    )\n        private\n        view\n        returns (uint256 outputAmount, bool didSucceed)\n    {\n        if (uniswapExchangeAddress == address(0)) {\n            return (outputAmount, didSucceed);\n        }\n        bytes memory resultData;\n        (didSucceed, resultData) =\n            uniswapExchangeAddress.staticcall.gas(UNISWAP_CALL_GAS)(\n                abi.encodeWithSelector(\n                    functionSelector,\n                    inputAmount\n                ));\n        if (didSucceed) {\n            outputAmount = abi.decode(resultData, (uint256));\n        }\n    }\n\n    /// @dev Retrive an existing Uniswap exchange contract.\n    ///      Throws if the exchange does not exist.\n    /// @param router Address of the Uniswap router.\n    /// @param tokenAddress Address of the token contract.\n    /// @return exchange `IUniswapExchangeQuotes` for the token.\n    function _getUniswapExchange(address router, address tokenAddress)\n        private\n        view\n        returns (IUniswapExchangeQuotes exchange)\n    {\n        exchange = IUniswapExchangeQuotes(\n            address(IUniswapExchangeFactory(router)\n            .getExchange(tokenAddress))\n        );\n    }\n}\n",
        "./interfaces/IUniswapExchangeQuotes.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface IUniswapExchangeQuotes {\n\n    function getEthToTokenInputPrice(\n        uint256 ethSold\n    )\n        external\n        view\n        returns (uint256 tokensBought);\n\n    function getEthToTokenOutputPrice(\n        uint256 tokensBought\n    )\n        external\n        view\n        returns (uint256 ethSold);\n\n    function getTokenToEthInputPrice(\n        uint256 tokensSold\n    )\n        external\n        view\n        returns (uint256 ethBought);\n\n    function getTokenToEthOutputPrice(\n        uint256 ethBought\n    )\n        external\n        view\n        returns (uint256 tokensSold);\n}\n",
        "./UniswapV2Sampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IUniswapV2Router01.sol\";\n\n\ncontract UniswapV2Sampler\n{\n    /// @dev Gas limit for UniswapV2 calls.\n    uint256 constant private UNISWAPV2_CALL_GAS = 150e3; // 150k\n\n    /// @dev Sample sell quotes from UniswapV2.\n    /// @param router Router to look up tokens and amounts\n    /// @param path Token route. Should be takerToken -> makerToken\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromUniswapV2(\n        address router,\n        address[] memory path,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            try\n                IUniswapV2Router01(router).getAmountsOut\n                    {gas: UNISWAPV2_CALL_GAS}\n                    (takerTokenAmounts[i], path)\n                returns (uint256[] memory amounts)\n            {\n                makerTokenAmounts[i] = amounts[path.length - 1];\n                // Break early if there are 0 amounts\n                if (makerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from UniswapV2.\n    /// @param router Router to look up tokens and amounts\n    /// @param path Token route. Should be takerToken -> makerToken.\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromUniswapV2(\n        address router,\n        address[] memory path,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            try\n                IUniswapV2Router01(router).getAmountsIn\n                    {gas: UNISWAPV2_CALL_GAS}\n                    (makerTokenAmounts[i], path)\n                returns (uint256[] memory amounts)\n            {\n                takerTokenAmounts[i] = amounts[0];\n                // Break early if there are 0 amounts\n                if (takerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n}\n",
        "./interfaces/IUniswapV2Router01.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface IUniswapV2Router01 {\n\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts);\n\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts);\n}\n",
        "./UniswapV3Sampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\n\ninterface IUniswapV3Quoter {\n    function factory()\n        external\n        view\n        returns (IUniswapV3Factory factory);\n    function quoteExactInput(bytes memory path, uint256 amountIn)\n        external\n        returns (uint256 amountOut);\n    function quoteExactOutput(bytes memory path, uint256 amountOut)\n        external\n        returns (uint256 amountIn);\n}\n\ninterface IUniswapV3Factory {\n    function getPool(IERC20TokenV06 a, IERC20TokenV06 b, uint24 fee)\n        external\n        view\n        returns (IUniswapV3Pool pool);\n}\n\ninterface IUniswapV3Pool {\n    function token0() external view returns (IERC20TokenV06);\n    function token1() external view returns (IERC20TokenV06);\n    function fee() external view returns (uint24);\n}\n\ncontract UniswapV3Sampler\n{\n    /// @dev Gas limit for UniswapV3 calls. This is 100% a guess.\n    uint256 constant private QUOTE_GAS = 300e3;\n\n    /// @dev Sample sell quotes from UniswapV3.\n    /// @param quoter UniswapV3 Quoter contract.\n    /// @param path Token route. Should be takerToken -> makerToken\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return uniswapPaths The encoded uniswap path for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromUniswapV3(\n        IUniswapV3Quoter quoter,\n        IERC20TokenV06[] memory path,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        returns (\n            bytes[] memory uniswapPaths,\n            uint256[] memory makerTokenAmounts\n        )\n    {\n        IUniswapV3Pool[][] memory poolPaths =\n            _getValidPoolPaths(quoter.factory(), path, 0);\n\n        makerTokenAmounts = new uint256[](takerTokenAmounts.length);\n        uniswapPaths = new bytes[](takerTokenAmounts.length);\n\n        for (uint256 i = 0; i < takerTokenAmounts.length; ++i) {\n            // Pick the best result from all the paths.\n            bytes memory topUniswapPath;\n            uint256 topBuyAmount = 0;\n            for (uint256 j = 0; j < poolPaths.length; ++j) {\n                bytes memory uniswapPath = _toUniswapPath(path, poolPaths[j]);\n                try\n                    quoter.quoteExactInput\n                        { gas: QUOTE_GAS }\n                        (uniswapPath, takerTokenAmounts[i])\n                        returns (uint256 buyAmount)\n                {\n                    if (topBuyAmount <= buyAmount) {\n                        topBuyAmount = buyAmount;\n                        topUniswapPath = uniswapPath;\n                    }\n                } catch { }\n            }\n            // Break early if we can't complete the buys.\n            if (topBuyAmount == 0) {\n                break;\n            }\n            makerTokenAmounts[i] = topBuyAmount;\n            uniswapPaths[i] = topUniswapPath;\n        }\n    }\n\n    /// @dev Sample buy quotes from UniswapV3.\n    /// @param quoter UniswapV3 Quoter contract.\n    /// @param path Token route. Should be takerToken -> makerToken.\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return uniswapPaths The encoded uniswap path for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromUniswapV3(\n        IUniswapV3Quoter quoter,\n        IERC20TokenV06[] memory path,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        returns (\n            bytes[] memory uniswapPaths,\n            uint256[] memory takerTokenAmounts\n        )\n    {\n        IUniswapV3Pool[][] memory poolPaths =\n            _getValidPoolPaths(quoter.factory(), path, 0);\n        IERC20TokenV06[] memory reversedPath = _reverseTokenPath(path);\n\n        takerTokenAmounts = new uint256[](makerTokenAmounts.length);\n        uniswapPaths = new bytes[](makerTokenAmounts.length);\n\n        for (uint256 i = 0; i < makerTokenAmounts.length; ++i) {\n            // Pick the best result from all the paths.\n            bytes memory topUniswapPath;\n            uint256 topSellAmount = 0;\n            for (uint256 j = 0; j < poolPaths.length; ++j) {\n                // quoter requires path to be reversed for buys.\n                bytes memory uniswapPath = _toUniswapPath(\n                    reversedPath,\n                    _reversePoolPath(poolPaths[j])\n                );\n                try\n                    quoter.quoteExactOutput\n                        { gas: QUOTE_GAS }\n                        (uniswapPath, makerTokenAmounts[i])\n                        returns (uint256 sellAmount)\n                {\n                    if (topSellAmount == 0 || topSellAmount >= sellAmount) {\n                        topSellAmount = sellAmount;\n                        // But the output path should still be encoded for sells.\n                        topUniswapPath = _toUniswapPath(path, poolPaths[j]);\n                    }\n                } catch {}\n            }\n            // Break early if we can't complete the buys.\n            if (topSellAmount == 0) {\n                break;\n            }\n            takerTokenAmounts[i] = topSellAmount;\n            uniswapPaths[i] = topUniswapPath;\n        }\n    }\n\n    function _getValidPoolPaths(\n        IUniswapV3Factory factory,\n        IERC20TokenV06[] memory tokenPath,\n        uint256 startIndex\n    )\n        private\n        view\n        returns (IUniswapV3Pool[][] memory poolPaths)\n    {\n        require(\n            tokenPath.length - startIndex >= 2,\n            \"UniswapV3Sampler/tokenPath too short\"\n        );\n        uint24[3] memory validPoolFees = [\n            // The launch pool fees. Could get hairier if they add more.\n            uint24(0.0005e6),\n            uint24(0.003e6),\n            uint24(0.01e6)\n        ];\n        IUniswapV3Pool[] memory validPools =\n            new IUniswapV3Pool[](validPoolFees.length);\n        uint256 numValidPools = 0;\n        {\n            IERC20TokenV06 inputToken = tokenPath[startIndex];\n            IERC20TokenV06 outputToken = tokenPath[startIndex + 1];\n            for (uint256 i = 0; i < validPoolFees.length; ++i) {\n                IUniswapV3Pool pool =\n                factory.getPool(inputToken, outputToken, validPoolFees[i]);\n                if (_isValidPool(pool)) {\n                    validPools[numValidPools++] = pool;\n                }\n            }\n        }\n        if (numValidPools == 0) {\n            // No valid pools for this hop.\n            return poolPaths;\n        }\n        if (startIndex + 2 == tokenPath.length) {\n            // End of path.\n            poolPaths = new IUniswapV3Pool[][](numValidPools);\n            for (uint256 i = 0; i < numValidPools; ++i) {\n                poolPaths[i] = new IUniswapV3Pool[](1);\n                poolPaths[i][0] = validPools[i];\n            }\n            return poolPaths;\n        }\n        // Get paths for subsequent hops.\n        IUniswapV3Pool[][] memory subsequentPoolPaths =\n            _getValidPoolPaths(factory, tokenPath, startIndex + 1);\n        if (subsequentPoolPaths.length == 0) {\n            // Could not complete the path.\n            return poolPaths;\n        }\n        // Combine our pools with the next hop paths.\n        poolPaths = new IUniswapV3Pool[][](\n            numValidPools * subsequentPoolPaths.length\n        );\n        for (uint256 i = 0; i < numValidPools; ++i) {\n            for (uint256 j = 0; j < subsequentPoolPaths.length; ++j) {\n                uint256 o = i * subsequentPoolPaths.length + j;\n                // Prepend pool to the subsequent path.\n                poolPaths[o] =\n                    new IUniswapV3Pool[](1 + subsequentPoolPaths[j].length);\n                poolPaths[o][0] = validPools[i];\n                for (uint256 k = 0; k < subsequentPoolPaths[j].length; ++k) {\n                    poolPaths[o][1 + k] = subsequentPoolPaths[j][k];\n                }\n            }\n        }\n        return poolPaths;\n    }\n\n    function _reverseTokenPath(IERC20TokenV06[] memory tokenPath)\n        private\n        returns (IERC20TokenV06[] memory reversed)\n    {\n        reversed = new IERC20TokenV06[](tokenPath.length);\n        for (uint256 i = 0; i < tokenPath.length; ++i) {\n            reversed[i] = tokenPath[tokenPath.length - i - 1];\n        }\n    }\n\n    function _reversePoolPath(IUniswapV3Pool[] memory poolPath)\n        private\n        returns (IUniswapV3Pool[] memory reversed)\n    {\n        reversed = new IUniswapV3Pool[](poolPath.length);\n        for (uint256 i = 0; i < poolPath.length; ++i) {\n            reversed[i] = poolPath[poolPath.length - i - 1];\n        }\n    }\n\n    function _isValidPool(IUniswapV3Pool pool)\n        private\n        view\n        returns (bool isValid)\n    {\n        // Check if it has been deployed.\n        {\n            uint256 codeSize;\n            assembly {\n                codeSize := extcodesize(pool)\n            }\n            if (codeSize == 0) {\n                return false;\n            }\n        }\n        // Must have a balance of both tokens.\n        if (pool.token0().balanceOf(address(pool)) == 0) {\n            return false;\n        }\n        if (pool.token1().balanceOf(address(pool)) == 0) {\n            return false;\n        }\n        return true;\n    }\n\n    function _toUniswapPath(\n        IERC20TokenV06[] memory tokenPath,\n        IUniswapV3Pool[] memory poolPath\n    )\n        private\n        view\n        returns (bytes memory uniswapPath)\n    {\n        require(\n            tokenPath.length >= 2 && tokenPath.length == poolPath.length + 1,\n            \"UniswapV3Sampler/invalid path lengths\"\n        );\n        // Uniswap paths are tightly packed as:\n        // [token0, token0token1PairFee, token1, token1Token2PairFee, token2, ...]\n        uniswapPath = new bytes(tokenPath.length * 20 + poolPath.length * 3);\n        uint256 o;\n        assembly { o := add(uniswapPath, 32) }\n        for (uint256 i = 0; i < tokenPath.length; ++i) {\n            if (i > 0) {\n                uint24 poolFee = poolPath[i - 1].fee();\n                assembly {\n                    mstore(o, shl(232, poolFee))\n                    o := add(o, 3)\n                }\n            }\n            IERC20TokenV06 token = tokenPath[i];\n            assembly {\n                mstore(o, shl(96, token))\n                o := add(o, 20)\n            }\n        }\n    }\n}\n",
        "./UtilitySampler.sol": "\n// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\n\ncontract UtilitySampler {\n\n    using LibERC20TokenV06 for IERC20TokenV06;\n\n    IERC20TokenV06 private immutable UTILITY_ETH_ADDRESS = IERC20TokenV06(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\n\n    function getTokenDecimals(IERC20TokenV06[] memory tokens)\n        public\n        view\n        returns (uint256[] memory decimals)\n    {\n        decimals = new uint256[](tokens.length);\n        for (uint256 i = 0; i != tokens.length; i++) {\n            decimals[i] = tokens[i] == UTILITY_ETH_ADDRESS\n                ? 18\n                : tokens[i].compatDecimals();\n        }\n    }\n\n    function getBalanceOf(IERC20TokenV06[] memory tokens, address account)\n        public\n        view\n        returns (uint256[] memory balances)\n    {\n        balances = new uint256[](tokens.length);\n        for (uint256 i = 0; i != tokens.length; i++) {\n            balances[i] = tokens[i] == UTILITY_ETH_ADDRESS\n                ? account.balance\n                : tokens[i].compatBalanceOf(account);\n        }\n    }\n\n    function getAllowanceOf(IERC20TokenV06[] memory tokens, address account, address spender)\n        public\n        view\n        returns (uint256[] memory allowances)\n    {\n        allowances = new uint256[](tokens.length);\n        for (uint256 i = 0; i != tokens.length; i++) {\n            allowances[i] = tokens[i] == UTILITY_ETH_ADDRESS\n                ? 0\n                : tokens[i].compatAllowance(account, spender);\n        }\n    }\n\n    function isContract(address account)\n        public\n        view\n        returns (bool)\n    {\n        uint256 size;\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n}"
    },
    "compiler": {
        "name": "solc",
        "version": "0.6.12+commit.27d51765",
        "settings": {
            "remappings": [
                "@0x/contracts-erc20=/home/jorge/0x/protocol/packages/asset-swapper/node_modules/@0x/contracts-erc20",
                "@0x/contracts-utils=/home/jorge/0x/protocol/packages/asset-swapper/node_modules/@0x/contracts-utils",
                "@0x/contracts-zero-ex=/home/jorge/0x/protocol/packages/asset-swapper/node_modules/@0x/contracts-zero-ex"
            ],
            "optimizer": {
                "enabled": true,
                "runs": 200,
                "details": {
                    "yul": true,
                    "deduplicate": true
                }
            },
            "outputSelection": {
                "*": {
                    "*": [
                        "abi",
                        "devdoc",
                        "evm.bytecode.object",
                        "evm.bytecode.sourceMap",
                        "evm.deployedBytecode.object",
                        "evm.deployedBytecode.sourceMap"
                    ]
                }
            },
            "evmVersion": "istanbul"
        }
    },
    "chains": {}
}
