{
    "schemaVersion": "2.0.0",
    "contractName": "ERC20BridgeSampler",
    "compilerOutput": {
        "abi": [
            {
                "constant": true,
                "inputs": [
                    {
                        "internalType": "bytes[]",
                        "name": "callDatas",
                        "type": "bytes[]"
                    }
                ],
                "name": "batchCall",
                "outputs": [
                    {
                        "internalType": "bytes[]",
                        "name": "callResults",
                        "type": "bytes[]"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "registryAddress",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    }
                ],
                "name": "getLiquidityProviderFromRegistry",
                "outputs": [
                    {
                        "internalType": "address",
                        "name": "providerAddress",
                        "type": "address"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "makerAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "takerAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "feeRecipientAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "senderAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "uint256",
                                "name": "makerAssetAmount",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "takerAssetAmount",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "makerFee",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "takerFee",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "expirationTimeSeconds",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "salt",
                                "type": "uint256"
                            },
                            {
                                "internalType": "bytes",
                                "name": "makerAssetData",
                                "type": "bytes"
                            },
                            {
                                "internalType": "bytes",
                                "name": "takerAssetData",
                                "type": "bytes"
                            },
                            {
                                "internalType": "bytes",
                                "name": "makerFeeAssetData",
                                "type": "bytes"
                            },
                            {
                                "internalType": "bytes",
                                "name": "takerFeeAssetData",
                                "type": "bytes"
                            }
                        ],
                        "internalType": "struct LibOrder.Order[]",
                        "name": "orders",
                        "type": "tuple[]"
                    },
                    {
                        "internalType": "bytes[]",
                        "name": "orderSignatures",
                        "type": "bytes[]"
                    },
                    {
                        "internalType": "contract IExchange",
                        "name": "exchange",
                        "type": "address"
                    }
                ],
                "name": "getOrderFillableMakerAssetAmounts",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "orderFillableMakerAssetAmounts",
                        "type": "uint256[]"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "makerAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "takerAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "feeRecipientAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "senderAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "uint256",
                                "name": "makerAssetAmount",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "takerAssetAmount",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "makerFee",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "takerFee",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "expirationTimeSeconds",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "salt",
                                "type": "uint256"
                            },
                            {
                                "internalType": "bytes",
                                "name": "makerAssetData",
                                "type": "bytes"
                            },
                            {
                                "internalType": "bytes",
                                "name": "takerAssetData",
                                "type": "bytes"
                            },
                            {
                                "internalType": "bytes",
                                "name": "makerFeeAssetData",
                                "type": "bytes"
                            },
                            {
                                "internalType": "bytes",
                                "name": "takerFeeAssetData",
                                "type": "bytes"
                            }
                        ],
                        "internalType": "struct LibOrder.Order",
                        "name": "order",
                        "type": "tuple"
                    },
                    {
                        "internalType": "bytes",
                        "name": "signature",
                        "type": "bytes"
                    },
                    {
                        "internalType": "contract IExchange",
                        "name": "exchange",
                        "type": "address"
                    }
                ],
                "name": "getOrderFillableTakerAmount",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "fillableTakerAmount",
                        "type": "uint256"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "makerAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "takerAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "feeRecipientAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "senderAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "uint256",
                                "name": "makerAssetAmount",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "takerAssetAmount",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "makerFee",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "takerFee",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "expirationTimeSeconds",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "salt",
                                "type": "uint256"
                            },
                            {
                                "internalType": "bytes",
                                "name": "makerAssetData",
                                "type": "bytes"
                            },
                            {
                                "internalType": "bytes",
                                "name": "takerAssetData",
                                "type": "bytes"
                            },
                            {
                                "internalType": "bytes",
                                "name": "makerFeeAssetData",
                                "type": "bytes"
                            },
                            {
                                "internalType": "bytes",
                                "name": "takerFeeAssetData",
                                "type": "bytes"
                            }
                        ],
                        "internalType": "struct LibOrder.Order[]",
                        "name": "orders",
                        "type": "tuple[]"
                    },
                    {
                        "internalType": "bytes[]",
                        "name": "orderSignatures",
                        "type": "bytes[]"
                    },
                    {
                        "internalType": "contract IExchange",
                        "name": "exchange",
                        "type": "address"
                    }
                ],
                "name": "getOrderFillableTakerAssetAmounts",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "orderFillableTakerAssetAmounts",
                        "type": "uint256[]"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "poolAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes4",
                                "name": "sellQuoteFunctionSelector",
                                "type": "bytes4"
                            },
                            {
                                "internalType": "bytes4",
                                "name": "buyQuoteFunctionSelector",
                                "type": "bytes4"
                            }
                        ],
                        "internalType": "struct CurveSampler.CurveInfo",
                        "name": "curveInfo",
                        "type": "tuple"
                    },
                    {
                        "internalType": "int128",
                        "name": "fromTokenIdx",
                        "type": "int128"
                    },
                    {
                        "internalType": "int128",
                        "name": "toTokenIdx",
                        "type": "int128"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromCurve",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromEth2Dai",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromKyberNetwork",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "registryAddress",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromLiquidityProviderRegistry",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromMStable",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromMooniswap",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromUniswap",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "internalType": "address[]",
                        "name": "path",
                        "type": "address[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromUniswapV2",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "poolAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes4",
                                "name": "sellQuoteFunctionSelector",
                                "type": "bytes4"
                            },
                            {
                                "internalType": "bytes4",
                                "name": "buyQuoteFunctionSelector",
                                "type": "bytes4"
                            }
                        ],
                        "internalType": "struct CurveSampler.CurveInfo",
                        "name": "curveInfo",
                        "type": "tuple"
                    },
                    {
                        "internalType": "int128",
                        "name": "fromTokenIdx",
                        "type": "int128"
                    },
                    {
                        "internalType": "int128",
                        "name": "toTokenIdx",
                        "type": "int128"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromCurve",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromEth2Dai",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromKyberNetwork",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "registryAddress",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromLiquidityProviderRegistry",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromMStable",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromMooniswap",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "multibridge",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "intermediateToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromMultiBridge",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromUniswap",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "internalType": "address[]",
                        "name": "path",
                        "type": "address[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromUniswapV2",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            }
        ],
        "devdoc": {
            "methods": {
                "batchCall(bytes[])": {
                    "details": "Call multiple public functions on this contract in a single transaction.",
                    "params": {
                        "callDatas": "ABI-encoded call data for each function call."
                    },
                    "return": "callResults ABI-encoded results data for each call."
                },
                "getLiquidityProviderFromRegistry(address,address,address)": {
                    "details": "Returns the address of a liquidity provider for the given market      (takerToken, makerToken), from a registry of liquidity providers.      Returns address(0) if no such provider exists in the registry.",
                    "params": {
                        "makerToken": "Maker asset managed by liquidity provider.",
                        "takerToken": "Taker asset managed by liquidity provider."
                    },
                    "return": "providerAddress Address of the liquidity provider."
                },
                "getOrderFillableMakerAssetAmounts((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes,bytes,bytes)[],bytes[],address)": {
                    "details": "Queries the fillable taker asset amounts of native orders.      Effectively ignores orders that have empty signatures or",
                    "params": {
                        "exchange": "The V3 exchange.",
                        "orderSignatures": "Signatures for each respective order in `orders`.",
                        "orders": "Native orders to query."
                    },
                    "return": "orderFillableMakerAssetAmounts How much maker asset can be filled         by each order in `orders`."
                },
                "getOrderFillableTakerAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes,bytes,bytes),bytes,address)": {
                    "details": "Get the fillable taker amount of an order, taking into account      order state, maker fees, and maker balances."
                },
                "getOrderFillableTakerAssetAmounts((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes,bytes,bytes)[],bytes[],address)": {
                    "details": "Queries the fillable taker asset amounts of native orders.      Effectively ignores orders that have empty signatures or      maker/taker asset amounts (returning 0).",
                    "params": {
                        "exchange": "The V3 exchange.",
                        "orderSignatures": "Signatures for each respective order in `orders`.",
                        "orders": "Native orders to query."
                    },
                    "return": "orderFillableTakerAssetAmounts How much taker asset can be filled         by each order in `orders`."
                },
                "sampleBuysFromCurve((address,bytes4,bytes4),int128,int128,uint256[])": {
                    "details": "Sample buy quotes from Curve.",
                    "params": {
                        "curveInfo": "Curve information specific to this token pair.",
                        "fromTokenIdx": "Index of the taker token (what to sell).",
                        "makerTokenAmounts": "Maker token buy amount for each sample.",
                        "toTokenIdx": "Index of the maker token (what to buy)."
                    },
                    "return": "takerTokenAmounts Taker amounts sold at each maker token         amount."
                },
                "sampleBuysFromEth2Dai(address,address,uint256[])": {
                    "details": "Sample buy quotes from Eth2Dai/Oasis.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Maker token sell amount for each sample."
                    },
                    "return": "takerTokenAmounts Taker amounts sold at each maker token         amount."
                },
                "sampleBuysFromKyberNetwork(address,address,uint256[])": {
                    "details": "Sample buy quotes from Kyber.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "makerTokenAmounts": "Maker token buy amount for each sample.",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "return": "takerTokenAmounts Taker amounts sold at each maker token         amount."
                },
                "sampleBuysFromLiquidityProviderRegistry(address,address,address,uint256[])": {
                    "details": "Sample buy quotes from an arbitrary on-chain liquidity provider.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "makerTokenAmounts": "Maker token buy amount for each sample.",
                        "registryAddress": "Address of the liquidity provider registry contract.",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "return": "takerTokenAmounts Taker amounts sold at each maker token         amount."
                },
                "sampleBuysFromMStable(address,address,uint256[])": {
                    "details": "Sample buy quotes from MStable mUSD contract",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "makerTokenAmounts": "Maker token buy amount for each sample.",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "return": "takerTokenAmounts Taker amounts sold at each maker token         amount."
                },
                "sampleBuysFromMooniswap(address,address,uint256[])": {
                    "details": "Sample buy quotes from Mooniswap.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "makerTokenAmounts": "Maker token sell amount for each sample.",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "return": "takerTokenAmounts Taker amounts sold at each maker token         amount."
                },
                "sampleBuysFromUniswap(address,address,uint256[])": {
                    "details": "Sample buy quotes from Uniswap.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "makerTokenAmounts": "Maker token sell amount for each sample.",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "return": "takerTokenAmounts Taker amounts sold at each maker token         amount."
                },
                "sampleBuysFromUniswapV2(address[],uint256[])": {
                    "details": "Sample buy quotes from UniswapV2.",
                    "params": {
                        "makerTokenAmounts": "Maker token buy amount for each sample.",
                        "path": "Token route. Should be takerToken -> makerToken."
                    },
                    "return": "takerTokenAmounts Taker amounts sold at each maker token         amount."
                },
                "sampleSellsFromCurve((address,bytes4,bytes4),int128,int128,uint256[])": {
                    "details": "Sample sell quotes from Curve.",
                    "params": {
                        "curveInfo": "Curve information specific to this token pair.",
                        "fromTokenIdx": "Index of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample.",
                        "toTokenIdx": "Index of the maker token (what to buy)."
                    },
                    "return": "makerTokenAmounts Maker amounts bought at each taker token         amount."
                },
                "sampleSellsFromEth2Dai(address,address,uint256[])": {
                    "details": "Sample sell quotes from Eth2Dai/Oasis.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "return": "makerTokenAmounts Maker amounts bought at each taker token         amount."
                },
                "sampleSellsFromKyberNetwork(address,address,uint256[])": {
                    "details": "Sample sell quotes from Kyber.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "return": "makerTokenAmounts Maker amounts bought at each taker token         amount."
                },
                "sampleSellsFromLiquidityProviderRegistry(address,address,address,uint256[])": {
                    "details": "Sample sell quotes from an arbitrary on-chain liquidity provider.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "registryAddress": "Address of the liquidity provider registry contract.",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "return": "makerTokenAmounts Maker amounts bought at each taker token         amount."
                },
                "sampleSellsFromMStable(address,address,uint256[])": {
                    "details": "Sample sell quotes from the mStable mUSD contract",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "return": "makerTokenAmounts Maker amounts bought at each taker token         amount."
                },
                "sampleSellsFromMooniswap(address,address,uint256[])": {
                    "details": "Sample sell quotes from Mooniswap.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "return": "makerTokenAmounts Maker amounts bought at each taker token         amount."
                },
                "sampleSellsFromMultiBridge(address,address,address,address,uint256[])": {
                    "details": "Sample sell quotes from MultiBridge.",
                    "params": {
                        "intermediateToken": "The address of the intermediate token to        use in an indirect route.",
                        "makerToken": "Address of the maker token (what to buy).",
                        "multibridge": "Address of the MultiBridge contract.",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "return": "makerTokenAmounts Maker amounts bought at each taker token         amount."
                },
                "sampleSellsFromUniswap(address,address,uint256[])": {
                    "details": "Sample sell quotes from Uniswap.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "return": "makerTokenAmounts Maker amounts bought at each taker token         amount."
                },
                "sampleSellsFromUniswapV2(address[],uint256[])": {
                    "details": "Sample sell quotes from UniswapV2.",
                    "params": {
                        "path": "Token route. Should be takerToken -> makerToken",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "return": "makerTokenAmounts Maker amounts bought at each taker token         amount."
                }
            }
        },
        "evm": {
            "bytecode": {
                "linkReferences": {},
                "object": "0x608060405234801561001057600080fd5b506159d380620000216000396000f3fe608060405234801561001057600080fd5b50600436106101825760003560e01c80636dd6b78d116100d8578063bc61a6951161008c578063cdb3b4af11610066578063cdb3b4af1461032d578063e68248f714610340578063e9a8e4421461035357610182565b8063bc61a695146102e7578063c7f7142e146102fa578063ca7893ba1461031a57610182565b80639f76ad35116100bd5780639f76ad35146102ae578063a2c28d4b146102c1578063abffc761146102d457610182565b80636dd6b78d146102885780639209483b1461029b57610182565b80634703a7e61161013a57806364ee6ade1161011457806364ee6ade1461024257806367b881e71461025557806368be3cf21461026857610182565b80634703a7e6146102095780634cb8e2531461021c57806360ee052a1461022f57610182565b806339b085ad1161016b57806339b085ad146101c35780633b77ebae146101d657806340bc03ae146101f657610182565b80630cc6600b146101875780632d753aa4146101b0575b600080fd5b61019a610195366004614ac8565b610366565b6040516101a79190615612565b60405180910390f35b61019a6101be3660046149cf565b6103e0565b61019a6101d1366004614de9565b6105d7565b6101e96101e4366004615105565b61078c565b6040516101a791906157da565b61019a610204366004615021565b610dde565b61019a610217366004614ac8565b610f97565b61019a61022a366004614ac8565b611174565b61019a61023d366004614ac8565b6112a7565b61019a610250366004614ac8565b61155c565b61019a610263366004614ac8565b611730565b61027b610276366004614d7d565b611796565b6040516101a79190615594565b61019a610296366004614ac8565b61195f565b61019a6102a9366004615021565b611c07565b61019a6102bc366004614a55565b611e51565b61019a6102cf366004614a55565b612056565b61019a6102e2366004614c27565b6120bc565b61019a6102f5366004614ac8565b6122a7565b61030d610308366004614985565b612478565b6040516101a79190615392565b61019a610328366004614ac8565b6125d4565b61019a61033b366004614ac8565b61263a565b61019a61034e366004614c27565b612a5d565b61019a610361366004614de9565b612c30565b60606103728385612cd3565b6103d66040518060600160405280856040516020016103919190615392565b6040516020818303038152906040528152602001866040516020016103b69190615392565b6040516020818303038152906040528152602001612d4681525083612ebe565b90505b9392505050565b606060008251905080604051908082528060200260200182016040528015610412578160200160208202803883390190505b50915073ffffffffffffffffffffffffffffffffffffffff871661043657506105ce565b60005b818110156105cb57600060608973ffffffffffffffffffffffffffffffffffffffff1662061a80600073ffffffffffffffffffffffffffffffffffffffff16636e79e133905060e01b8b8b8b8b898151811061049157fe5b60200260200101516040516024016104ac9493929190615454565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009094169390931790925290516105359190615376565b6000604051808303818686fa925050503d8060008114610571576040519150601f19603f3d011682016040523d82523d6000602084013e610576565b606091505b5090925090506000821561059b57818060200190516105989190810190614f1f565b90505b806105a8575050506105cb565b808685815181106105b557fe5b6020908102919091010152505050600101610439565b50505b95945050505050565b60608351604051908082528060200260200182016040528015610604578160200160208202803883390190505b50905060005b8451811461078457600060603073ffffffffffffffffffffffffffffffffffffffff1662030d40633b77ebae60e01b89868151811061064557fe5b602002602001015189878151811061065957fe5b6020026020010151896040516024016106749392919061578e565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009094169390931790925290516106fd9190615376565b6000604051808303818686fa925050503d8060008114610739576040519150601f19603f3d011682016040523d82523d6000602084013e61073e565b606091505b50915091508161074f576000610763565b808060200190516107639190810190614f1f565b84848151811061076f57fe5b6020908102919091010152505060010161060a565b509392505050565b60008251600014806107a057506080840151155b806107ad575060a0840151155b156107ba575060006103d9565b6107c2614622565b6040517f9d3fa4b900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff841690639d3fa4b99061081490889060040161577b565b60606040518083038186803b15801561082c57600080fd5b505afa158015610840573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061086491908101906150bd565b905060038151600681111561087557fe5b146108845760009150506103d9565b602081015185516040517f8171c40700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff861692638171c407926108dd928990600401615625565b60206040518083038186803b1580156108f557600080fd5b505afa158015610909573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061092d9190810190614eab565b61093b5760009150506103d9565b6040517f6070410800000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff8516906360704108906109b0907ff47261b0000000000000000000000000000000000000000000000000000000009060040161565a565b60206040518083038186803b1580156109c857600080fd5b505afa1580156109dc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610a009190810190614930565b90506000610a12876101400151613093565b905073ffffffffffffffffffffffffffffffffffffffff8116610a3b57600093505050506103d9565b6000808860c0015111610a4f576000610a5d565b610a5d886101800151613093565b90506000610a7c85604001518a60a0015161313090919063ffffffff16565b90508095506000610ae7828b60a001518673ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614610ac9578c60800151610ae2565b60c08d015160808e0151610ae29163ffffffff61315416565b613170565b8a516040517f70a08231000000000000000000000000000000000000000000000000000000008152919250600091610c3d9173ffffffffffffffffffffffffffffffffffffffff8816916370a0823191610b4391600401615392565b60206040518083038186803b158015610b5b57600080fd5b505afa158015610b6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610b939190810190614f1f565b8c516040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff89169163dd62ed3e91610be891908c906004016153ec565b60206040518083038186803b158015610c0057600080fd5b505afa158015610c14573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610c389190810190614f1f565b6131b0565b905081811015610c5557610c528183856131c6565b97505b8473ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614158015610ca6575073ffffffffffffffffffffffffffffffffffffffff841615155b15610dd0578a516040517f70a08231000000000000000000000000000000000000000000000000000000008152600091610daa9173ffffffffffffffffffffffffffffffffffffffff8816916370a0823191610d059190600401615392565b60206040518083038186803b158015610d1d57600080fd5b505afa158015610d31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610d559190810190614f1f565b8d516040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff89169163dd62ed3e91610be891908d906004016153ec565b90508b60c00151811015610dce57610dcb89610c38838f60c00151886131c6565b98505b505b505050505050509392505050565b606060008251905080604051908082528060200260200182016040528015610e10578160200160208202803883390190505b50915060005b81811015610f8d5760006060886000015173ffffffffffffffffffffffffffffffffffffffff16620927c08a602001518a8a8a8881518110610e5457fe5b6020026020010151604051602401610e6e939291906156b6565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909416939093179092529051610ef79190615376565b6000604051808303818686fa925050503d8060008114610f33576040519150601f19603f3d011682016040523d82523d6000602084013e610f38565b606091505b50909250905060008215610f5d5781806020019051610f5a9190810190614f1f565b90505b80610f6a57505050610f8d565b80868581518110610f7757fe5b6020908102919091010152505050600101610e16565b5050949350505050565b6060610fa38385612cd3565b8151604080518281526020808402820101909152818015610fce578160200160208202803883390190505b50915060005b8181101561116b5760006060610fe86131fc565b73ffffffffffffffffffffffffffffffffffffffff16620f4240600073ffffffffffffffffffffffffffffffffffffffff1663ff1fd974905060e01b8a8a8a888151811061103257fe5b602002602001015160405160240161104c9392919061548b565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009094169390931790925290516110d59190615376565b6000604051808303818686fa925050503d8060008114611111576040519150601f19603f3d011682016040523d82523d6000602084013e611116565b606091505b5090925090506000821561113b57818060200190516111389190810190614f1f565b90505b806111485750505061116b565b8086858151811061115557fe5b6020908102919091010152505050600101610fd4565b50509392505050565b60606111808385612cd3565b81516040805182815260208084028201019091528180156111ab578160200160208202803883390190505b50915060006111b8613214565b90506000805b8381101561129c578273ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16148061122b57508273ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff16145b156112555761124e888888848151811061124157fe5b602002602001015161322c565b915061127c565b611266888488848151811061124157fe5b9150811561127c5761127983888461322c565b91505b8185828151811061128957fe5b60209081029190910101526001016111be565b505050509392505050565b60606112b38385612cd3565b81516040805182815260208084028201019091528180156112de578160200160208202803883390190505b50915060006112eb613214565b73ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff161461132b5761132686613a4c565b61132e565b60005b9050600061133a613214565b73ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff161461137a5761137586613a4c565b61137d565b60005b905060005b8381101561129c576001611394613214565b73ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16141561142b57865161140a9085907f2640f62c00000000000000000000000000000000000000000000000000000000908a90869081106113fd57fe5b6020026020010151613ade565b87848151811061141657fe5b60200260200101819350828152505050611548565b611433613214565b73ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff16141561149c57865161140a9084907f59e9486200000000000000000000000000000000000000000000000000000000908a90869081106113fd57fe5b86516000906114d59085907f59e9486200000000000000000000000000000000000000000000000000000000908b90879081106113fd57fe5b92509050801561152b5761150a857f2640f62c0000000000000000000000000000000000000000000000000000000083613ade565b88858151811061151657fe5b60200260200101819450828152505050611546565b600087848151811061153957fe5b6020026020010181815250505b505b80611553575061129c565b50600101611382565b60606115688385612cd3565b8151604080518281526020808402820101909152818015611593578160200160208202803883390190505b50915060005b8181101561116b57600060606115ad6131fc565b73ffffffffffffffffffffffffffffffffffffffff16620f4240600073ffffffffffffffffffffffffffffffffffffffff1663144a2752905060e01b898b8a88815181106115f757fe5b60200260200101516040516024016116119392919061548b565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090941693909317909252905161169a9190615376565b6000604051808303818686fa925050503d80600081146116d6576040519150601f19603f3d011682016040523d82523d6000602084013e6116db565b606091505b5090925090506000821561170057818060200190516116fd9190810190614f1f565b90505b8061170d5750505061116b565b8086858151811061171a57fe5b6020908102919091010152505050600101611599565b60606103d66040518060600160405280856040516020016117519190615392565b6040516020818303038152906040528152602001866040516020016117769190615392565b6040516020818303038152906040528152602001613c2781525083612ebe565b6040805182815260208084028201019091526060908280156117cc57816020015b60608152602001906001900390816117b75790505b50905060005b808314611958578383828181106117e557fe5b6020028201905080357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe13684900301811261181f57600080fd5b9091016020810191503567ffffffffffffffff81111561183e57600080fd5b3681900382131561184e57600080fd5b1515905061185b57611950565b600060603086868581811061186c57fe5b6020028201905080357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1368490030181126118a657600080fd5b9091016020810191503567ffffffffffffffff8111156118c557600080fd5b368190038213156118d557600080fd5b6040516118e3929190615366565b600060405180830381855afa9150503d806000811461191e576040519150601f19603f3d011682016040523d82523d6000602084013e611923565b606091505b50915091508161193557805160208201fd5b8084848151811061194257fe5b602002602001018190525050505b6001016117d2565b5092915050565b606061196b8385612cd3565b8151604080518281526020808402820101909152818015611996578160200160208202803883390190505b50915060006119a3613214565b73ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16146119e3576119de86613a4c565b6119e6565b60005b905060006119f2613214565b73ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614611a3257611a2d86613a4c565b611a35565b60005b905060005b8381101561129c576001611a4c613214565b73ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff161415611ad6578651611ab59085907f95b68fe700000000000000000000000000000000000000000000000000000000908a90869081106113fd57fe5b878481518110611ac157fe5b60200260200101819350828152505050611bf3565b611ade613214565b73ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff161415611b47578651611ab59084907fcd7724c300000000000000000000000000000000000000000000000000000000908a90869081106113fd57fe5b8651600090611b809086907f95b68fe700000000000000000000000000000000000000000000000000000000908b90879081106113fd57fe5b925090508015611bd657611bb5847fcd7724c30000000000000000000000000000000000000000000000000000000083613ade565b888581518110611bc157fe5b60200260200101819450828152505050611bf1565b6000878481518110611be457fe5b6020026020010181815250505b505b80611bfe575061129c565b50600101611a3a565b60408401516060907fffffffff0000000000000000000000000000000000000000000000000000000016611ca1576040805160608101909152611c9a9080611c538689608084016156d4565b60405160208183030381529060405281526020018688604051602001611c7a9291906156d4565b6040516020818303038152906040528152602001613db081525083612ebe565b9050611e49565b8151604080518281526020808402820101909152818015611ccc578160200160208202803883390190505b50915060005b81811015610f8d5760006060886000015173ffffffffffffffffffffffffffffffffffffffff16620927c08a604001518a8a8a8881518110611d1057fe5b6020026020010151604051602401611d2a939291906156b6565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909416939093179092529051611db39190615376565b6000604051808303818686fa925050503d8060008114611def576040519150601f19603f3d011682016040523d82523d6000602084013e611df4565b606091505b50909250905060008215611e195781806020019051611e169190810190614f1f565b90505b80611e2657505050610f8d565b80868581518110611e3357fe5b6020908102919091010152505050600101611cd2565b949350505050565b606060008251905080604051908082528060200260200182016040528015611e83578160200160208202803883390190505b5091506000611e93878787612478565b905073ffffffffffffffffffffffffffffffffffffffff8116611eb85750611e499050565b60005b8281101561204b57600060608373ffffffffffffffffffffffffffffffffffffffff1662061a80600073ffffffffffffffffffffffffffffffffffffffff1663343fbcdd905060e01b8b8b8b8881518110611f1257fe5b6020026020010151604051602401611f2c9392919061548b565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909416939093179092529051611fb59190615376565b6000604051808303818686fa925050503d8060008114611ff1576040519150601f19603f3d011682016040523d82523d6000602084013e611ff6565b606091505b5090925090506000821561201b57818060200190516120189190810190614f1f565b90505b806120285750505061204b565b8087858151811061203557fe5b6020908102919091010152505050600101611ebb565b505050949350505050565b6040805160608181019092526105ce90806120758689608084016153ec565b6040516020818303038152906040528152602001868860405160200161209c9291906153ec565b6040516020818303038152906040528152602001613f4781525083612ebe565b6060600082519050806040519080825280602002602001820160405280156120ee578160200160208202803883390190505b50915060005b8181101561229f5760006060612108613fc1565b73ffffffffffffffffffffffffffffffffffffffff16620249f0600073ffffffffffffffffffffffffffffffffffffffff1663d06ca61f905060e01b88868151811061215057fe5b60200260200101518a60405160240161216a9291906157e3565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009094169390931790925290516121f39190615376565b6000604051808303818686fa925050503d806000811461222f576040519150601f19603f3d011682016040523d82523d6000602084013e612234565b606091505b5090925090506000821561227457818060200190516122569190810190614cea565b60018951038151811061226557fe5b6020026020010151905061227c565b50505061229f565b8086858151811061228957fe5b60209081029190910101525050506001016120f4565b505092915050565b6060600082519050806040519080825280602002602001820160405280156122d9578160200160208202803883390190505b50915060005b8181101561116b57600060606122f3613fd9565b73ffffffffffffffffffffffffffffffffffffffff16620c3500600073ffffffffffffffffffffffffffffffffffffffff166372ea9076905060e01b8a8a8a888151811061233d57fe5b60200260200101516040516024016123579392919061548b565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009094169390931790925290516123e09190615376565b6000604051808303818686fa925050503d806000811461241c576040519150601f19603f3d011682016040523d82523d6000602084013e612421565b606091505b5090925090506000821561244857818060200190516124439190810190614ec7565b925050505b806124555750505061116b565b8086858151811061246257fe5b60209081029190910101525050506001016122df565b600073ffffffffffffffffffffffffffffffffffffffff841661249d575060006103d9565b6040516060907f153f599700000000000000000000000000000000000000000000000000000000906124d590869086906024016153ec565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050600060608673ffffffffffffffffffffffffffffffffffffffff168360405161255d9190615376565b600060405180830381855afa9150503d8060008114612598576040519150601f19603f3d011682016040523d82523d6000602084013e61259d565b606091505b50915091508180156125b0575080516020145b156125ca576125c081600c613ff1565b93505050506103d9565b5050509392505050565b60606103d66040518060600160405280856040516020016125f59190615392565b60405160208183030381529060405281526020018660405160200161261a9190615392565b604051602081830303815290604052815260200161403181525083612ebe565b60606126468385612cd3565b8151604080518281526020808402820101909152818015612671578160200160208202803883390190505b509150600061267e613214565b73ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16146126b657856126b9565b60005b905060006126c5613214565b73ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16146126fd5785612700565b60005b9050600061270c614093565b73ffffffffffffffffffffffffffffffffffffffff1663901754d784846040518363ffffffff1660e01b81526004016127469291906153ec565b60206040518083038186803b15801561275e57600080fd5b505afa158015612772573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506127969190810190614930565b905073ffffffffffffffffffffffffffffffffffffffff81166127bd57506103d992505050565b600073ffffffffffffffffffffffffffffffffffffffff841615612882576040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8516906370a082319061282d908590600401615392565b60206040518083038186803b15801561284557600080fd5b505afa158015612859573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061287d9190810190614f1f565b61289b565b8173ffffffffffffffffffffffffffffffffffffffff16315b905060005b85811015612a50578781815181106128b457fe5b60200260200101518210156128c857612a50565b600060608473ffffffffffffffffffffffffffffffffffffffff16620249f0600073ffffffffffffffffffffffffffffffffffffffff16631e1401f8905060e01b89898e888151811061291757fe5b60200260200101516040516024016129319392919061548b565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009094169390931790925290516129ba9190615376565b6000604051808303818686fa925050503d80600081146129f6576040519150601f19603f3d011682016040523d82523d6000602084013e6129fb565b606091505b50909250905060008215612a205781806020019051612a1d9190810190614f1f565b90505b80612a2d57505050612a50565b808a8581518110612a3a57fe5b60209081029190910101525050506001016128a0565b5050505050509392505050565b606060008251905080604051908082528060200260200182016040528015612a8f578160200160208202803883390190505b50915060005b8181101561229f5760006060612aa9613fc1565b73ffffffffffffffffffffffffffffffffffffffff16620249f0600073ffffffffffffffffffffffffffffffffffffffff16631f00ca74905060e01b888681518110612af157fe5b60200260200101518a604051602401612b0b9291906157e3565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909416939093179092529051612b949190615376565b6000604051808303818686fa925050503d8060008114612bd0576040519150601f19603f3d011682016040523d82523d6000602084013e612bd5565b606091505b509092509050600082156122745781806020019051612bf79190810190614cea565b600081518110612c0357fe5b6020026020010151905080868581518110612c1a57fe5b6020908102919091010152505050600101612a95565b6060612c3d8484846105d7565b905060005b845181101561078457818181518110612c5757fe5b6020026020010151600014612ccb57612cb2828281518110612c7557fe5b6020026020010151868381518110612c8957fe5b602002602001015160a00151878481518110612ca157fe5b6020026020010151608001516131c6565b828281518110612cbe57fe5b6020026020010181815250505b600101612c42565b8073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612d42576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d39906156ec565b60405180910390fd5b5050565b60008060603073ffffffffffffffffffffffffffffffffffffffff16634cb8e25360e01b87806020019051612d7e9190810190614930565b87806020019051612d929190810190614930565b612d9b886140ab565b604051602401612dad939291906153b3565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909416939093179092529051612e369190615376565b600060405180830381855afa9150503d8060008114612e71576040519150601f19603f3d011682016040523d82523d6000602084013e612e76565b606091505b509150915081612e8b576000925050506103d9565b80806020019051612e9f9190810190614cea565b600081518110612eab57fe5b6020026020010151925050509392505050565b60608151604051908082528060200260200182016040528015612eeb578160200160208202803883390190505b509050815160001415612efd5761308d565b6000612f2e8460000151856020015185600081518110612f1957fe5b6020026020010151876040015163ffffffff16565b905080612f3b575061308d565b6000612f588560200151866000015184886040015163ffffffff16565b905080612f67575061308d9050565b60005b84518110156130895760005b600581101561304b57612f9d868381518110612f8e57fe5b602002602001015184866131c6565b9350612fae612715612710866131c6565b93506000612fcd88602001518960000151878b6040015163ffffffff16565b905080612fda575061304b565b809350868381518110612fe957fe5b6020026020010151841061304257600087848151811061300557fe5b602002602001015161271089868151811061301c57fe5b60200260200101518703028161302e57fe5b0490506005811161304057505061304b565b505b50600101612f76565b5061306a85828151811061305b57fe5b602002602001015183856131c6565b84828151811061307657fe5b6020908102919091010152600101612f6a565b5050505b92915050565b60008151600014156130a75750600061312b565b8151602414158061310a57507ff47261b0000000000000000000000000000000000000000000000000000000006130e583600063ffffffff6140ec16565b7fffffffff000000000000000000000000000000000000000000000000000000001614155b156131175750600061312b565b61312882601063ffffffff613ff116565b90505b919050565b60008282111561314e5761314e61314960028585614138565b6141dd565b50900390565b6000828201838110156103d9576103d961314960008686614138565b600061317d8484846141e5565b156131905761319061314985858561424b565b6103d6836131a4868563ffffffff61426a16565b9063ffffffff61429b16565b60008183106131bf57816103d9565b5090919050565b60006103d6836131a46131e082600163ffffffff61313016565b6131f0888763ffffffff61426a16565b9063ffffffff61315416565b73794e6e91555438afc3ccf1c5076a74f42133d08d90565b73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc290565b60008060006132396142c5565b9150915060608173ffffffffffffffffffffffffffffffffffffffff16633d3dc52c613263613214565b73ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff161461329b578861329d565b875b6040518263ffffffff1660e01b81526004016132b99190615392565b60006040518083038186803b1580156132d157600080fd5b505afa1580156132e5573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261332b9190810190614cea565b604080516000808252602082019092529192505b82518110156135e4576040517f106e9a4b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85169063106e9a4b906133ae907331e085afd48a1d6e51cc193153d625e8f0514c7f90600401615392565b60206040518083038186803b1580156133c657600080fd5b505afa1580156133da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506133fe9190810190614f1f565b83828151811061340a57fe5b602002602001015114806134e557506040517f106e9a4b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85169063106e9a4b9061347f907310908c875d865c66f271f5d3949848971c9595c990600401615392565b60206040518083038186803b15801561349757600080fd5b505afa1580156134ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506134cf9190810190614f1f565b8382815181106134db57fe5b6020026020010151145b806135b757506040517f106e9a4b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85169063106e9a4b9061355190731e158c0e93c30d24e918ef83d1e0be23595c3c0f90600401615392565b60206040518083038186803b15801561356957600080fd5b505afa15801561357d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506135a19190810190614f1f565b8382815181106135ad57fe5b6020026020010151145b156135dc576135d9828483815181106135cc57fe5b60200260200101516143f9565b91505b60010161333f565b5060606135ef613214565b73ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff161415613706578473ffffffffffffffffffffffffffffffffffffffff166381efcbdd89600285600060405190808252806020026020018201604052801561366d578160200160208202803883390190505b506040518563ffffffff1660e01b815260040161368d949392919061550f565b60006040518083038186803b1580156136a557600080fd5b505afa1580156136b9573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526136ff9190810190614f37565b90506137e6565b8473ffffffffffffffffffffffffffffffffffffffff166381efcbdd8a6002856000604051908082528060200260200182016040528015613751578160200160208202803883390190505b506040518563ffffffff1660e01b8152600401613771949392919061550f565b60006040518083038186803b15801561378957600080fd5b505afa15801561379d573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526137e39190810190614f37565b90505b600060606137f261448f565b73ffffffffffffffffffffffffffffffffffffffff166216e3607f418436bc00000000000000000000000000000000000000000000000000000000613835613214565b73ffffffffffffffffffffffffffffffffffffffff168e73ffffffffffffffffffffffffffffffffffffffff161461386d578d613883565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee5b61388b613214565b73ffffffffffffffffffffffffffffffffffffffff168e73ffffffffffffffffffffffffffffffffffffffff16146138c3578d6138d9565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee5b8d6000896040516024016138f19594939291906154bc565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090941693909317909252905161397a9190615376565b6000604051808303818686fa925050503d80600081146139b6576040519150601f19603f3d011682016040523d82523d6000602084013e6139bb565b606091505b509092509050600082156139e457818060200190516139dd9190810190614f1f565b90506139f5565b6000985050505050505050506103d9565b6000613a008c6144a7565b60ff1690506000613a108e6144a7565b60ff169050670de0b6b3a764000081600a0a83600a0a8e86020281613a3157fe5b0481613a3957fe5b049e9d5050505050505050505050505050565b6000613a566144b2565b73ffffffffffffffffffffffffffffffffffffffff166306f2bf62836040518263ffffffff1660e01b8152600401613a8e9190615392565b60206040518083038186803b158015613aa657600080fd5b505afa158015613aba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506131289190810190614930565b60008073ffffffffffffffffffffffffffffffffffffffff8516613b0157613c1f565b60608573ffffffffffffffffffffffffffffffffffffffff16620249f08686604051602401613b3091906157da565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909416939093179092529051613bb99190615376565b6000604051808303818686fa925050503d8060008114613bf5576040519150601f19603f3d011682016040523d82523d6000602084013e613bfa565b606091505b5090925090508115613c1d5780806020019051613c1a9190810190614f1f565b92505b505b935093915050565b60008084806020019051613c3e9190810190614930565b9050600084806020019051613c569190810190614930565b905060006060307fcdb3b4af000000000000000000000000000000000000000000000000000000008585613c898a6140ab565b604051602401613c9b939291906153b3565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909416939093179092529051613d249190615376565b600060405180830381855afa9150503d8060008114613d5f576040519150601f19603f3d011682016040523d82523d6000602084013e613d64565b606091505b509150915081613d7b5760009450505050506103d9565b80806020019051613d8f9190810190614cea565b600081518110613d9b57fe5b60200260200101519450505050509392505050565b600080613dbb614644565b85806020019051613dcf9190810190614f86565b91509150600085806020019051613de99190810190614f6a565b905060006060307f40bc03ae00000000000000000000000000000000000000000000000000000000858786613e1d8c6140ab565b604051602401613e309493929190615749565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909416939093179092529051613eb99190615376565b600060405180830381855afa9150503d8060008114613ef4576040519150601f19603f3d011682016040523d82523d6000602084013e613ef9565b606091505b509150915081613f11576000955050505050506103d9565b80806020019051613f259190810190614cea565b600081518110613f3157fe5b6020026020010151955050505050509392505050565b600080600085806020019051613f60919081019061494c565b91509150600085806020019051613f7a9190810190614930565b905060006060307f9f76ad3500000000000000000000000000000000000000000000000000000000858786613fae8c6140ab565b604051602401613e309493929190615413565b73f164fc0ec4e93095b804a4795bbe1e041497b92a90565b73e2f2a5c287993345a840db3b0845fbc70f5935a590565b600081601401835110156140125761401261314960048551856014016144ca565b50016014015173ffffffffffffffffffffffffffffffffffffffff1690565b600080848060200190516140489190810190614930565b90506000848060200190516140609190810190614930565b905060006060307fbc61a695000000000000000000000000000000000000000000000000000000008585613c898a6140ab565b7371cd6666064c3a1354a3b4dca5fa1e2d3ee7d30390565b6040805160018082528183019092526060916020808301908038833901905050905081816000815181106140db57fe5b602002602001018181525050919050565b6000816004018351101561410d5761410d61314960038551856004016144ca565b5001602001517fffffffff000000000000000000000000000000000000000000000000000000001690565b606063e946c1bb60e01b84848460405160240161415793929190615687565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915290509392505050565b805160208201fd5b6000826141f7576141f76131496144e9565b811580614202575083155b1561420f575060006103d9565b6000838061421957fe5b858409905061422e858463ffffffff61426a16565b614240826103e863ffffffff61426a16565b101595945050505050565b606063339f3de260e01b84848460405160240161415793929190615847565b6000826142795750600061308d565b8282028284828161428657fe5b04146103d9576103d961314960018686614138565b6000816142b1576142b161314960038585614138565b60008284816142bc57fe5b04949350505050565b6000806142d061448f565b73ffffffffffffffffffffffffffffffffffffffff1663b78b842d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561431557600080fd5b505afa158015614329573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061434d9190810190614930565b73ffffffffffffffffffffffffffffffffffffffff1663c3a2a93a6040518163ffffffff1660e01b815260040160006040518083038186803b15801561439257600080fd5b505afa1580156143a6573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526143ec9190810190614b28565b5091955093505050509091565b60608251600101604051908082528060200260200182016040528015614429578160200160208202803883390190505b50905060005b835181101561446b5783818151811061444457fe5b602002602001015182828151811061445857fe5b602090810291909101015260010161442f565b50818160018351038151811061447d57fe5b60200260200101818152505092915050565b739aab3f75489902f3a48495025729a0af77d4b11e90565b600061312882614520565b73c0a47dfe034b400b47bdad5fecda2621de6c4d9590565b6060632800659560e01b848484604051602401614157939291906156a8565b60408051808201909152600481527fa791837c00000000000000000000000000000000000000000000000000000000602082015290565b600060129050600060608373ffffffffffffffffffffffffffffffffffffffff166040518060400160405280600481526020017f313ce567000000000000000000000000000000000000000000000000000000008152506040516145849190615376565b600060405180830381855afa9150503d80600081146145bf576040519150601f19603f3d011682016040523d82523d6000602084013e6145c4565b606091505b50915091508180156145d7575080516020145b156145ea576145e78160006145f1565b92505b5050919050565b60006103d98383600081602001835110156146195761461961314960058551856020016144ca565b50016020015190565b6040805160608101909152806000815260006020820181905260409091015290565b604080516060810182526000808252602082018190529181019190915290565b803561308d81615923565b805161308d81615923565b600082601f83011261468a578081fd5b813561469d61469882615884565b61585d565b8181529150602080830190840160005b838110156146da576146c5876020843589010161474d565b835260209283019291909101906001016146ad565b5050505092915050565b600082601f8301126146f4578081fd5b813561470261469882615884565b81815291506020808301908481018184028601820187101561472357600080fd5b60005b8481101561474257813584529282019290820190600101614726565b505050505092915050565b600082601f83011261475d578081fd5b813561476b614698826158a4565b915080825283602082850101111561478257600080fd5b8060208401602084013760009082016020015292915050565b600082601f8301126147ab578081fd5b81516147b9614698826158a4565b91508082528360208285010111156147d057600080fd5b6119588160208401602086016158e6565b60006101c08083850312156147f4578182fd5b6147fd8161585d565b91505061480a8383614664565b81526148198360208401614664565b602082015261482b8360408401614664565b604082015261483d8360608401614664565b60608201526080820135608082015260a082013560a082015260c082013560c082015260e082013560e08201526101008083013581830152506101208083013581830152506101408083013567ffffffffffffffff8082111561489f57600080fd5b6148ab8683870161474d565b838501526101609250828501359150808211156148c757600080fd5b6148d38683870161474d565b838501526101809250828501359150808211156148ef57600080fd5b6148fb8683870161474d565b838501526101a092508285013591508082111561491757600080fd5b506149248582860161474d565b82840152505092915050565b600060208284031215614941578081fd5b81516103d981615923565b6000806040838503121561495e578081fd5b825161496981615923565b602084015190925061497a81615923565b809150509250929050565b600080600060608486031215614999578081fd5b83356149a481615923565b925060208401356149b481615923565b915060408401356149c481615923565b809150509250925092565b600080600080600060a086880312156149e6578283fd5b85356149f181615923565b94506020860135614a0181615923565b93506040860135614a1181615923565b92506060860135614a2181615923565b9150608086013567ffffffffffffffff811115614a3c578182fd5b614a48888289016146e4565b9150509295509295909350565b60008060008060808587031215614a6a578182fd5b8435614a7581615923565b93506020850135614a8581615923565b92506040850135614a9581615923565b9150606085013567ffffffffffffffff811115614ab0578182fd5b614abc878288016146e4565b91505092959194509250565b600080600060608486031215614adc578081fd5b8335614ae781615923565b92506020840135614af781615923565b9150604084013567ffffffffffffffff811115614b12578182fd5b614b1e868287016146e4565b9150509250925092565b60008060008060008060c08789031215614b40578384fd5b8651614b4b81615923565b80965050602080880151614b5e81615923565b6040890151909650614b6f81615923565b6060890151909550614b8081615923565b6080890151909450614b9181615923565b60a089015190935067ffffffffffffffff811115614bad578283fd5b8089018a601f820112614bbe578384fd5b80519150614bce61469883615884565b82815283810190828501858502840186018e1015614bea578687fd5b8693505b84841015614c1457614c008e8261466f565b835260019390930192918501918501614bee565b5080955050505050509295509295509295565b60008060408385031215614c39578182fd5b823567ffffffffffffffff80821115614c50578384fd5b81850186601f820112614c61578485fd5b80359250614c7161469884615884565b80848252602080830192508084018a828389028701011115614c91578889fd5b8894505b86851015614cbc578035614ca881615923565b845260019490940193928101928101614c95565b509096508701359350505080821115614cd3578283fd5b50614ce0858286016146e4565b9150509250929050565b60006020808385031215614cfc578182fd5b825167ffffffffffffffff811115614d12578283fd5b80840185601f820112614d23578384fd5b80519150614d3361469883615884565b8281528381019082850185850284018601891015614d4f578687fd5b8693505b84841015614d71578051835260019390930192918501918501614d53565b50979650505050505050565b60008060208385031215614d8f578182fd5b823567ffffffffffffffff80821115614da6578384fd5b81850186601f820112614db7578485fd5b8035925081831115614dc7578485fd5b8660208085028301011115614dda578485fd5b60200196919550909350505050565b600080600060608486031215614dfd578081fd5b833567ffffffffffffffff80821115614e14578283fd5b81860187601f820112614e25578384fd5b80359250614e3561469884615884565b83815260208082019190838101875b87811015614e6d57614e5b8d8484358901016147e1565b85529382019390820190600101614e44565b50919850890135945050505080821115614e85578283fd5b50614e928682870161467a565b925050614ea28560408601614664565b90509250925092565b600060208284031215614ebc578081fd5b81516103d981615945565b600080600060608486031215614edb578081fd5b8351614ee681615945565b602085015190935067ffffffffffffffff811115614f02578182fd5b614f0e8682870161479b565b925050604084015190509250925092565b600060208284031215614f30578081fd5b5051919050565b600060208284031215614f48578081fd5b815167ffffffffffffffff811115614f5e578182fd5b611e498482850161479b565b600060208284031215614f7b578081fd5b81516103d981615981565b60008060808385031215614f98578182fd5b8251614fa381615981565b915060608385037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0011215614fd6578081fd5b614fe0606061585d565b6020840151614fee81615923565b81526040840151614ffe81615953565b6020820152606084015161501181615953565b6040820152919491935090915050565b60008060008084860360c0811215615037578283fd5b6060811215615044578283fd5b5061504f606061585d565b853561505a81615923565b8152602086013561506a81615953565b6020820152604086013561507d81615953565b60408201529350606085013561509281615981565b925060808501356150a281615981565b915060a085013567ffffffffffffffff811115614ab0578182fd5b6000606082840312156150ce578081fd5b6150d8606061585d565b8251600781106150e6578283fd5b8152602083810151908201526040928301519281019290925250919050565b600080600060608486031215615119578081fd5b833567ffffffffffffffff80821115615130578283fd5b61513c878388016147e1565b94506020860135915080821115615151578283fd5b5061515e8682870161474d565b92505060408401356149c481615923565b73ffffffffffffffffffffffffffffffffffffffff169052565b6000815180845260208401935060208301825b828110156151ba57815186526020958601959091019060010161519c565b5093949350505050565b600081518084526151dc8160208601602086016158e6565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b805173ffffffffffffffffffffffffffffffffffffffff1682526020808201517fffffffff000000000000000000000000000000000000000000000000000000009081169184019190915260409182015116910152565b60006101c061527584845161516f565b6020830151615287602086018261516f565b50604083015161529a604086018261516f565b5060608301516152ad606086018261516f565b506080830151608085015260a083015160a085015260c083015160c085015260e083015160e0850152610100808401518186015250610120808401518186015250610140808401518282870152615306838701826151c4565b9150506101609150818401518582038387015261532382826151c4565b92505050610180808401518583038287015261533f83826151c4565b9150506101a09150818401518582038387015261535c82826151c4565b9695505050505050565b6000828483379101908152919050565b600082516153888184602087016158e6565b9190910192915050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b600073ffffffffffffffffffffffffffffffffffffffff8086168352808516602084015250606060408301526105ce6060830184615189565b73ffffffffffffffffffffffffffffffffffffffff92831681529116602082015260400190565b600073ffffffffffffffffffffffffffffffffffffffff808716835280861660208401528085166040840152506080606083015261535c6080830184615189565b73ffffffffffffffffffffffffffffffffffffffff9485168152928416602084015292166040820152606081019190915260800190565b73ffffffffffffffffffffffffffffffffffffffff9384168152919092166020820152604081019190915260600190565b600073ffffffffffffffffffffffffffffffffffffffff808816835280871660208401525084604083015260ff8416606083015260a0608083015261550460a08301846151c4565b979650505050505050565b60006080820173ffffffffffffffffffffffffffffffffffffffff8716835261553786615916565b60208381018790526080604085015285519182905285019060a0840190835b81811015615574578351835260209384019390920191600101615556565b505083810360608501526155888186615189565b98975050505050505050565b6000602080830181845280855180835260408601915060408482028701019250838701855b82811015615605577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08886030184526155f38583516151c4565b945092850192908501906001016155b9565b5092979650505050505050565b6000602082526103d96020830184615189565b600084825273ffffffffffffffffffffffffffffffffffffffff84166020830152606060408301526105ce60608301846151c4565b7fffffffff0000000000000000000000000000000000000000000000000000000091909116815260200190565b6060810161569485615916565b938152602081019290925260409091015290565b606081016008851061569457fe5b600f93840b81529190920b6020820152604081019190915260600190565b600f83900b8152608081016103d9602083018461520e565b60208082526025908201527f455243323042726964676553616d706c65722f494e56414c49445f544f4b454e60408201527f5f50414952000000000000000000000000000000000000000000000000000000606082015260800190565b6000615755828761520e565b84600f0b606083015283600f0b608083015260c060a083015261535c60c0830184615189565b6000602082526103d96020830184615265565b6000606082526157a16060830186615265565b82810360208401526157b381866151c4565b91505073ffffffffffffffffffffffffffffffffffffffff83166040830152949350505050565b90815260200190565b60006040820184835260406020840152808451808352606085019150602086019250835b8181101561583b57835173ffffffffffffffffffffffffffffffffffffffff16835260209384019390920191600101615807565b50909695505050505050565b9283526020830191909152604082015260600190565b60405181810167ffffffffffffffff8111828210171561587c57600080fd5b604052919050565b600067ffffffffffffffff82111561589a578081fd5b5060209081020190565b600067ffffffffffffffff8211156158ba578081fd5b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b60005b838110156159015781810151838201526020016158e9565b83811115615910576000848401525b50505050565b6004811061592057fe5b50565b73ffffffffffffffffffffffffffffffffffffffff8116811461592057600080fd5b801515811461592057600080fd5b7fffffffff000000000000000000000000000000000000000000000000000000008116811461592057600080fd5b80600f0b811461592057600080fdfea365627a7a723158203b0a4635276f4d27722f1ce880e49e8e08c15c6b2e5955adfb69e021b3f9af266c6578706572696d656e74616cf564736f6c63430005110040",
                "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x59D3 DUP1 PUSH3 0x21 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x182 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6DD6B78D GT PUSH2 0xD8 JUMPI DUP1 PUSH4 0xBC61A695 GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xCDB3B4AF GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xCDB3B4AF EQ PUSH2 0x32D JUMPI DUP1 PUSH4 0xE68248F7 EQ PUSH2 0x340 JUMPI DUP1 PUSH4 0xE9A8E442 EQ PUSH2 0x353 JUMPI PUSH2 0x182 JUMP JUMPDEST DUP1 PUSH4 0xBC61A695 EQ PUSH2 0x2E7 JUMPI DUP1 PUSH4 0xC7F7142E EQ PUSH2 0x2FA JUMPI DUP1 PUSH4 0xCA7893BA EQ PUSH2 0x31A JUMPI PUSH2 0x182 JUMP JUMPDEST DUP1 PUSH4 0x9F76AD35 GT PUSH2 0xBD JUMPI DUP1 PUSH4 0x9F76AD35 EQ PUSH2 0x2AE JUMPI DUP1 PUSH4 0xA2C28D4B EQ PUSH2 0x2C1 JUMPI DUP1 PUSH4 0xABFFC761 EQ PUSH2 0x2D4 JUMPI PUSH2 0x182 JUMP JUMPDEST DUP1 PUSH4 0x6DD6B78D EQ PUSH2 0x288 JUMPI DUP1 PUSH4 0x9209483B EQ PUSH2 0x29B JUMPI PUSH2 0x182 JUMP JUMPDEST DUP1 PUSH4 0x4703A7E6 GT PUSH2 0x13A JUMPI DUP1 PUSH4 0x64EE6ADE GT PUSH2 0x114 JUMPI DUP1 PUSH4 0x64EE6ADE EQ PUSH2 0x242 JUMPI DUP1 PUSH4 0x67B881E7 EQ PUSH2 0x255 JUMPI DUP1 PUSH4 0x68BE3CF2 EQ PUSH2 0x268 JUMPI PUSH2 0x182 JUMP JUMPDEST DUP1 PUSH4 0x4703A7E6 EQ PUSH2 0x209 JUMPI DUP1 PUSH4 0x4CB8E253 EQ PUSH2 0x21C JUMPI DUP1 PUSH4 0x60EE052A EQ PUSH2 0x22F JUMPI PUSH2 0x182 JUMP JUMPDEST DUP1 PUSH4 0x39B085AD GT PUSH2 0x16B JUMPI DUP1 PUSH4 0x39B085AD EQ PUSH2 0x1C3 JUMPI DUP1 PUSH4 0x3B77EBAE EQ PUSH2 0x1D6 JUMPI DUP1 PUSH4 0x40BC03AE EQ PUSH2 0x1F6 JUMPI PUSH2 0x182 JUMP JUMPDEST DUP1 PUSH4 0xCC6600B EQ PUSH2 0x187 JUMPI DUP1 PUSH4 0x2D753AA4 EQ PUSH2 0x1B0 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x19A PUSH2 0x195 CALLDATASIZE PUSH1 0x4 PUSH2 0x4AC8 JUMP JUMPDEST PUSH2 0x366 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1A7 SWAP2 SWAP1 PUSH2 0x5612 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x19A PUSH2 0x1BE CALLDATASIZE PUSH1 0x4 PUSH2 0x49CF JUMP JUMPDEST PUSH2 0x3E0 JUMP JUMPDEST PUSH2 0x19A PUSH2 0x1D1 CALLDATASIZE PUSH1 0x4 PUSH2 0x4DE9 JUMP JUMPDEST PUSH2 0x5D7 JUMP JUMPDEST PUSH2 0x1E9 PUSH2 0x1E4 CALLDATASIZE PUSH1 0x4 PUSH2 0x5105 JUMP JUMPDEST PUSH2 0x78C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1A7 SWAP2 SWAP1 PUSH2 0x57DA JUMP JUMPDEST PUSH2 0x19A PUSH2 0x204 CALLDATASIZE PUSH1 0x4 PUSH2 0x5021 JUMP JUMPDEST PUSH2 0xDDE JUMP JUMPDEST PUSH2 0x19A PUSH2 0x217 CALLDATASIZE PUSH1 0x4 PUSH2 0x4AC8 JUMP JUMPDEST PUSH2 0xF97 JUMP JUMPDEST PUSH2 0x19A PUSH2 0x22A CALLDATASIZE PUSH1 0x4 PUSH2 0x4AC8 JUMP JUMPDEST PUSH2 0x1174 JUMP JUMPDEST PUSH2 0x19A PUSH2 0x23D CALLDATASIZE PUSH1 0x4 PUSH2 0x4AC8 JUMP JUMPDEST PUSH2 0x12A7 JUMP JUMPDEST PUSH2 0x19A PUSH2 0x250 CALLDATASIZE PUSH1 0x4 PUSH2 0x4AC8 JUMP JUMPDEST PUSH2 0x155C JUMP JUMPDEST PUSH2 0x19A PUSH2 0x263 CALLDATASIZE PUSH1 0x4 PUSH2 0x4AC8 JUMP JUMPDEST PUSH2 0x1730 JUMP JUMPDEST PUSH2 0x27B PUSH2 0x276 CALLDATASIZE PUSH1 0x4 PUSH2 0x4D7D JUMP JUMPDEST PUSH2 0x1796 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1A7 SWAP2 SWAP1 PUSH2 0x5594 JUMP JUMPDEST PUSH2 0x19A PUSH2 0x296 CALLDATASIZE PUSH1 0x4 PUSH2 0x4AC8 JUMP JUMPDEST PUSH2 0x195F JUMP JUMPDEST PUSH2 0x19A PUSH2 0x2A9 CALLDATASIZE PUSH1 0x4 PUSH2 0x5021 JUMP JUMPDEST PUSH2 0x1C07 JUMP JUMPDEST PUSH2 0x19A PUSH2 0x2BC CALLDATASIZE PUSH1 0x4 PUSH2 0x4A55 JUMP JUMPDEST PUSH2 0x1E51 JUMP JUMPDEST PUSH2 0x19A PUSH2 0x2CF CALLDATASIZE PUSH1 0x4 PUSH2 0x4A55 JUMP JUMPDEST PUSH2 0x2056 JUMP JUMPDEST PUSH2 0x19A PUSH2 0x2E2 CALLDATASIZE PUSH1 0x4 PUSH2 0x4C27 JUMP JUMPDEST PUSH2 0x20BC JUMP JUMPDEST PUSH2 0x19A PUSH2 0x2F5 CALLDATASIZE PUSH1 0x4 PUSH2 0x4AC8 JUMP JUMPDEST PUSH2 0x22A7 JUMP JUMPDEST PUSH2 0x30D PUSH2 0x308 CALLDATASIZE PUSH1 0x4 PUSH2 0x4985 JUMP JUMPDEST PUSH2 0x2478 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1A7 SWAP2 SWAP1 PUSH2 0x5392 JUMP JUMPDEST PUSH2 0x19A PUSH2 0x328 CALLDATASIZE PUSH1 0x4 PUSH2 0x4AC8 JUMP JUMPDEST PUSH2 0x25D4 JUMP JUMPDEST PUSH2 0x19A PUSH2 0x33B CALLDATASIZE PUSH1 0x4 PUSH2 0x4AC8 JUMP JUMPDEST PUSH2 0x263A JUMP JUMPDEST PUSH2 0x19A PUSH2 0x34E CALLDATASIZE PUSH1 0x4 PUSH2 0x4C27 JUMP JUMPDEST PUSH2 0x2A5D JUMP JUMPDEST PUSH2 0x19A PUSH2 0x361 CALLDATASIZE PUSH1 0x4 PUSH2 0x4DE9 JUMP JUMPDEST PUSH2 0x2C30 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x372 DUP4 DUP6 PUSH2 0x2CD3 JUMP JUMPDEST PUSH2 0x3D6 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 DUP6 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x391 SWAP2 SWAP1 PUSH2 0x5392 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x3B6 SWAP2 SWAP1 PUSH2 0x5392 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x2D46 DUP2 MSTORE POP DUP4 PUSH2 0x2EBE JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP3 MLOAD SWAP1 POP DUP1 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x412 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND PUSH2 0x436 JUMPI POP PUSH2 0x5CE JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x5CB JUMPI PUSH1 0x0 PUSH1 0x60 DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH3 0x61A80 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x6E79E133 SWAP1 POP PUSH1 0xE0 SHL DUP12 DUP12 DUP12 DUP12 DUP10 DUP2 MLOAD DUP2 LT PUSH2 0x491 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x4AC SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x5454 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x535 SWAP2 SWAP1 PUSH2 0x5376 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x571 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x576 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x59B JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x598 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4F1F JUMP JUMPDEST SWAP1 POP JUMPDEST DUP1 PUSH2 0x5A8 JUMPI POP POP POP PUSH2 0x5CB JUMP JUMPDEST DUP1 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x5B5 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x439 JUMP JUMPDEST POP POP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 MLOAD PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x604 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 EQ PUSH2 0x784 JUMPI PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH3 0x30D40 PUSH4 0x3B77EBAE PUSH1 0xE0 SHL DUP10 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x645 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP10 DUP8 DUP2 MLOAD DUP2 LT PUSH2 0x659 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP10 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x674 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x578E JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x6FD SWAP2 SWAP1 PUSH2 0x5376 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x739 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x73E JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH2 0x74F JUMPI PUSH1 0x0 PUSH2 0x763 JUMP JUMPDEST DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x763 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4F1F JUMP JUMPDEST DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x76F JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP PUSH1 0x1 ADD PUSH2 0x60A JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH1 0x0 EQ DUP1 PUSH2 0x7A0 JUMPI POP PUSH1 0x80 DUP5 ADD MLOAD ISZERO JUMPDEST DUP1 PUSH2 0x7AD JUMPI POP PUSH1 0xA0 DUP5 ADD MLOAD ISZERO JUMPDEST ISZERO PUSH2 0x7BA JUMPI POP PUSH1 0x0 PUSH2 0x3D9 JUMP JUMPDEST PUSH2 0x7C2 PUSH2 0x4622 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x9D3FA4B900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND SWAP1 PUSH4 0x9D3FA4B9 SWAP1 PUSH2 0x814 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x577B JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x82C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x840 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x864 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x50BD JUMP JUMPDEST SWAP1 POP PUSH1 0x3 DUP2 MLOAD PUSH1 0x6 DUP2 GT ISZERO PUSH2 0x875 JUMPI INVALID JUMPDEST EQ PUSH2 0x884 JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x3D9 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD DUP6 MLOAD PUSH1 0x40 MLOAD PUSH32 0x8171C40700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND SWAP3 PUSH4 0x8171C407 SWAP3 PUSH2 0x8DD SWAP3 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x5625 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x8F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x909 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x92D SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4EAB JUMP JUMPDEST PUSH2 0x93B JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x3D9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x6070410800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND SWAP1 PUSH4 0x60704108 SWAP1 PUSH2 0x9B0 SWAP1 PUSH32 0xF47261B000000000000000000000000000000000000000000000000000000000 SWAP1 PUSH1 0x4 ADD PUSH2 0x565A JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x9C8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x9DC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0xA00 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4930 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xA12 DUP8 PUSH2 0x140 ADD MLOAD PUSH2 0x3093 JUMP JUMPDEST SWAP1 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0xA3B JUMPI PUSH1 0x0 SWAP4 POP POP POP POP PUSH2 0x3D9 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP9 PUSH1 0xC0 ADD MLOAD GT PUSH2 0xA4F JUMPI PUSH1 0x0 PUSH2 0xA5D JUMP JUMPDEST PUSH2 0xA5D DUP9 PUSH2 0x180 ADD MLOAD PUSH2 0x3093 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xA7C DUP6 PUSH1 0x40 ADD MLOAD DUP11 PUSH1 0xA0 ADD MLOAD PUSH2 0x3130 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 SWAP6 POP PUSH1 0x0 PUSH2 0xAE7 DUP3 DUP12 PUSH1 0xA0 ADD MLOAD DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xAC9 JUMPI DUP13 PUSH1 0x80 ADD MLOAD PUSH2 0xAE2 JUMP JUMPDEST PUSH1 0xC0 DUP14 ADD MLOAD PUSH1 0x80 DUP15 ADD MLOAD PUSH2 0xAE2 SWAP2 PUSH4 0xFFFFFFFF PUSH2 0x3154 AND JUMP JUMPDEST PUSH2 0x3170 JUMP JUMPDEST DUP11 MLOAD PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP2 SWAP3 POP PUSH1 0x0 SWAP2 PUSH2 0xC3D SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP9 AND SWAP2 PUSH4 0x70A08231 SWAP2 PUSH2 0xB43 SWAP2 PUSH1 0x4 ADD PUSH2 0x5392 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xB5B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xB6F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0xB93 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4F1F JUMP JUMPDEST DUP13 MLOAD PUSH1 0x40 MLOAD PUSH32 0xDD62ED3E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 AND SWAP2 PUSH4 0xDD62ED3E SWAP2 PUSH2 0xBE8 SWAP2 SWAP1 DUP13 SWAP1 PUSH1 0x4 ADD PUSH2 0x53EC JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xC00 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xC14 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0xC38 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4F1F JUMP JUMPDEST PUSH2 0x31B0 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 LT ISZERO PUSH2 0xC55 JUMPI PUSH2 0xC52 DUP2 DUP4 DUP6 PUSH2 0x31C6 JUMP JUMPDEST SWAP8 POP JUMPDEST DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO DUP1 ISZERO PUSH2 0xCA6 JUMPI POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND ISZERO ISZERO JUMPDEST ISZERO PUSH2 0xDD0 JUMPI DUP11 MLOAD PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x0 SWAP2 PUSH2 0xDAA SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP9 AND SWAP2 PUSH4 0x70A08231 SWAP2 PUSH2 0xD05 SWAP2 SWAP1 PUSH1 0x4 ADD PUSH2 0x5392 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xD1D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xD31 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0xD55 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4F1F JUMP JUMPDEST DUP14 MLOAD PUSH1 0x40 MLOAD PUSH32 0xDD62ED3E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 AND SWAP2 PUSH4 0xDD62ED3E SWAP2 PUSH2 0xBE8 SWAP2 SWAP1 DUP14 SWAP1 PUSH1 0x4 ADD PUSH2 0x53EC JUMP JUMPDEST SWAP1 POP DUP12 PUSH1 0xC0 ADD MLOAD DUP2 LT ISZERO PUSH2 0xDCE JUMPI PUSH2 0xDCB DUP10 PUSH2 0xC38 DUP4 DUP16 PUSH1 0xC0 ADD MLOAD DUP9 PUSH2 0x31C6 JUMP JUMPDEST SWAP9 POP JUMPDEST POP JUMPDEST POP POP POP POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP3 MLOAD SWAP1 POP DUP1 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xE10 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xF8D JUMPI PUSH1 0x0 PUSH1 0x60 DUP9 PUSH1 0x0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH3 0x927C0 DUP11 PUSH1 0x20 ADD MLOAD DUP11 DUP11 DUP11 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0xE54 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xE6E SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x56B6 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0xEF7 SWAP2 SWAP1 PUSH2 0x5376 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0xF33 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xF38 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0xF5D JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0xF5A SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4F1F JUMP JUMPDEST SWAP1 POP JUMPDEST DUP1 PUSH2 0xF6A JUMPI POP POP POP PUSH2 0xF8D JUMP JUMPDEST DUP1 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0xF77 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0xE16 JUMP JUMPDEST POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0xFA3 DUP4 DUP6 PUSH2 0x2CD3 JUMP JUMPDEST DUP2 MLOAD PUSH1 0x40 DUP1 MLOAD DUP3 DUP2 MSTORE PUSH1 0x20 DUP1 DUP5 MUL DUP3 ADD ADD SWAP1 SWAP2 MSTORE DUP2 DUP1 ISZERO PUSH2 0xFCE JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x116B JUMPI PUSH1 0x0 PUSH1 0x60 PUSH2 0xFE8 PUSH2 0x31FC JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH3 0xF4240 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xFF1FD974 SWAP1 POP PUSH1 0xE0 SHL DUP11 DUP11 DUP11 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x1032 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x104C SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x548B JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x10D5 SWAP2 SWAP1 PUSH2 0x5376 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1111 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1116 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x113B JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x1138 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4F1F JUMP JUMPDEST SWAP1 POP JUMPDEST DUP1 PUSH2 0x1148 JUMPI POP POP POP PUSH2 0x116B JUMP JUMPDEST DUP1 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x1155 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0xFD4 JUMP JUMPDEST POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1180 DUP4 DUP6 PUSH2 0x2CD3 JUMP JUMPDEST DUP2 MLOAD PUSH1 0x40 DUP1 MLOAD DUP3 DUP2 MSTORE PUSH1 0x20 DUP1 DUP5 MUL DUP3 ADD ADD SWAP1 SWAP2 MSTORE DUP2 DUP1 ISZERO PUSH2 0x11AB JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 PUSH2 0x11B8 PUSH2 0x3214 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x129C JUMPI DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x122B JUMPI POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0x1255 JUMPI PUSH2 0x124E DUP9 DUP9 DUP9 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x1241 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x322C JUMP JUMPDEST SWAP2 POP PUSH2 0x127C JUMP JUMPDEST PUSH2 0x1266 DUP9 DUP5 DUP9 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x1241 JUMPI INVALID JUMPDEST SWAP2 POP DUP2 ISZERO PUSH2 0x127C JUMPI PUSH2 0x1279 DUP4 DUP9 DUP5 PUSH2 0x322C JUMP JUMPDEST SWAP2 POP JUMPDEST DUP2 DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1289 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x11BE JUMP JUMPDEST POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x12B3 DUP4 DUP6 PUSH2 0x2CD3 JUMP JUMPDEST DUP2 MLOAD PUSH1 0x40 DUP1 MLOAD DUP3 DUP2 MSTORE PUSH1 0x20 DUP1 DUP5 MUL DUP3 ADD ADD SWAP1 SWAP2 MSTORE DUP2 DUP1 ISZERO PUSH2 0x12DE JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 PUSH2 0x12EB PUSH2 0x3214 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x132B JUMPI PUSH2 0x1326 DUP7 PUSH2 0x3A4C JUMP JUMPDEST PUSH2 0x132E JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x133A PUSH2 0x3214 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x137A JUMPI PUSH2 0x1375 DUP7 PUSH2 0x3A4C JUMP JUMPDEST PUSH2 0x137D JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x129C JUMPI PUSH1 0x1 PUSH2 0x1394 PUSH2 0x3214 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x142B JUMPI DUP7 MLOAD PUSH2 0x140A SWAP1 DUP6 SWAP1 PUSH32 0x2640F62C00000000000000000000000000000000000000000000000000000000 SWAP1 DUP11 SWAP1 DUP7 SWAP1 DUP2 LT PUSH2 0x13FD JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x3ADE JUMP JUMPDEST DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x1416 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP4 POP DUP3 DUP2 MSTORE POP POP POP PUSH2 0x1548 JUMP JUMPDEST PUSH2 0x1433 PUSH2 0x3214 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x149C JUMPI DUP7 MLOAD PUSH2 0x140A SWAP1 DUP5 SWAP1 PUSH32 0x59E9486200000000000000000000000000000000000000000000000000000000 SWAP1 DUP11 SWAP1 DUP7 SWAP1 DUP2 LT PUSH2 0x13FD JUMPI INVALID JUMPDEST DUP7 MLOAD PUSH1 0x0 SWAP1 PUSH2 0x14D5 SWAP1 DUP6 SWAP1 PUSH32 0x59E9486200000000000000000000000000000000000000000000000000000000 SWAP1 DUP12 SWAP1 DUP8 SWAP1 DUP2 LT PUSH2 0x13FD JUMPI INVALID JUMPDEST SWAP3 POP SWAP1 POP DUP1 ISZERO PUSH2 0x152B JUMPI PUSH2 0x150A DUP6 PUSH32 0x2640F62C00000000000000000000000000000000000000000000000000000000 DUP4 PUSH2 0x3ADE JUMP JUMPDEST DUP9 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x1516 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP5 POP DUP3 DUP2 MSTORE POP POP POP PUSH2 0x1546 JUMP JUMPDEST PUSH1 0x0 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x1539 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP JUMPDEST POP JUMPDEST DUP1 PUSH2 0x1553 JUMPI POP PUSH2 0x129C JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x1382 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1568 DUP4 DUP6 PUSH2 0x2CD3 JUMP JUMPDEST DUP2 MLOAD PUSH1 0x40 DUP1 MLOAD DUP3 DUP2 MSTORE PUSH1 0x20 DUP1 DUP5 MUL DUP3 ADD ADD SWAP1 SWAP2 MSTORE DUP2 DUP1 ISZERO PUSH2 0x1593 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x116B JUMPI PUSH1 0x0 PUSH1 0x60 PUSH2 0x15AD PUSH2 0x31FC JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH3 0xF4240 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x144A2752 SWAP1 POP PUSH1 0xE0 SHL DUP10 DUP12 DUP11 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x15F7 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1611 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x548B JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x169A SWAP2 SWAP1 PUSH2 0x5376 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x16D6 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x16DB JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x1700 JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x16FD SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4F1F JUMP JUMPDEST SWAP1 POP JUMPDEST DUP1 PUSH2 0x170D JUMPI POP POP POP PUSH2 0x116B JUMP JUMPDEST DUP1 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x171A JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x1599 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x3D6 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 DUP6 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1751 SWAP2 SWAP1 PUSH2 0x5392 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1776 SWAP2 SWAP1 PUSH2 0x5392 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x3C27 DUP2 MSTORE POP DUP4 PUSH2 0x2EBE JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP3 DUP2 MSTORE PUSH1 0x20 DUP1 DUP5 MUL DUP3 ADD ADD SWAP1 SWAP2 MSTORE PUSH1 0x60 SWAP1 DUP3 DUP1 ISZERO PUSH2 0x17CC JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x17B7 JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP1 DUP4 EQ PUSH2 0x1958 JUMPI DUP4 DUP4 DUP3 DUP2 DUP2 LT PUSH2 0x17E5 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL DUP3 ADD SWAP1 POP DUP1 CALLDATALOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE1 CALLDATASIZE DUP5 SWAP1 SUB ADD DUP2 SLT PUSH2 0x181F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP2 ADD PUSH1 0x20 DUP2 ADD SWAP2 POP CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x183E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLDATASIZE DUP2 SWAP1 SUB DUP3 SGT ISZERO PUSH2 0x184E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST ISZERO ISZERO SWAP1 POP PUSH2 0x185B JUMPI PUSH2 0x1950 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 ADDRESS DUP7 DUP7 DUP6 DUP2 DUP2 LT PUSH2 0x186C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL DUP3 ADD SWAP1 POP DUP1 CALLDATALOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE1 CALLDATASIZE DUP5 SWAP1 SUB ADD DUP2 SLT PUSH2 0x18A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP2 ADD PUSH1 0x20 DUP2 ADD SWAP2 POP CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x18C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLDATASIZE DUP2 SWAP1 SUB DUP3 SGT ISZERO PUSH2 0x18D5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x18E3 SWAP3 SWAP2 SWAP1 PUSH2 0x5366 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x191E JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1923 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH2 0x1935 JUMPI DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST DUP1 DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x1942 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP POP POP JUMPDEST PUSH1 0x1 ADD PUSH2 0x17D2 JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x196B DUP4 DUP6 PUSH2 0x2CD3 JUMP JUMPDEST DUP2 MLOAD PUSH1 0x40 DUP1 MLOAD DUP3 DUP2 MSTORE PUSH1 0x20 DUP1 DUP5 MUL DUP3 ADD ADD SWAP1 SWAP2 MSTORE DUP2 DUP1 ISZERO PUSH2 0x1996 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 PUSH2 0x19A3 PUSH2 0x3214 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x19E3 JUMPI PUSH2 0x19DE DUP7 PUSH2 0x3A4C JUMP JUMPDEST PUSH2 0x19E6 JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x19F2 PUSH2 0x3214 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1A32 JUMPI PUSH2 0x1A2D DUP7 PUSH2 0x3A4C JUMP JUMPDEST PUSH2 0x1A35 JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x129C JUMPI PUSH1 0x1 PUSH2 0x1A4C PUSH2 0x3214 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x1AD6 JUMPI DUP7 MLOAD PUSH2 0x1AB5 SWAP1 DUP6 SWAP1 PUSH32 0x95B68FE700000000000000000000000000000000000000000000000000000000 SWAP1 DUP11 SWAP1 DUP7 SWAP1 DUP2 LT PUSH2 0x13FD JUMPI INVALID JUMPDEST DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x1AC1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP4 POP DUP3 DUP2 MSTORE POP POP POP PUSH2 0x1BF3 JUMP JUMPDEST PUSH2 0x1ADE PUSH2 0x3214 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x1B47 JUMPI DUP7 MLOAD PUSH2 0x1AB5 SWAP1 DUP5 SWAP1 PUSH32 0xCD7724C300000000000000000000000000000000000000000000000000000000 SWAP1 DUP11 SWAP1 DUP7 SWAP1 DUP2 LT PUSH2 0x13FD JUMPI INVALID JUMPDEST DUP7 MLOAD PUSH1 0x0 SWAP1 PUSH2 0x1B80 SWAP1 DUP7 SWAP1 PUSH32 0x95B68FE700000000000000000000000000000000000000000000000000000000 SWAP1 DUP12 SWAP1 DUP8 SWAP1 DUP2 LT PUSH2 0x13FD JUMPI INVALID JUMPDEST SWAP3 POP SWAP1 POP DUP1 ISZERO PUSH2 0x1BD6 JUMPI PUSH2 0x1BB5 DUP5 PUSH32 0xCD7724C300000000000000000000000000000000000000000000000000000000 DUP4 PUSH2 0x3ADE JUMP JUMPDEST DUP9 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x1BC1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP5 POP DUP3 DUP2 MSTORE POP POP POP PUSH2 0x1BF1 JUMP JUMPDEST PUSH1 0x0 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x1BE4 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP JUMPDEST POP JUMPDEST DUP1 PUSH2 0x1BFE JUMPI POP PUSH2 0x129C JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x1A3A JUMP JUMPDEST PUSH1 0x40 DUP5 ADD MLOAD PUSH1 0x60 SWAP1 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH2 0x1CA1 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH2 0x1C9A SWAP1 DUP1 PUSH2 0x1C53 DUP7 DUP10 PUSH1 0x80 DUP5 ADD PUSH2 0x56D4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1C7A SWAP3 SWAP2 SWAP1 PUSH2 0x56D4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x3DB0 DUP2 MSTORE POP DUP4 PUSH2 0x2EBE JUMP JUMPDEST SWAP1 POP PUSH2 0x1E49 JUMP JUMPDEST DUP2 MLOAD PUSH1 0x40 DUP1 MLOAD DUP3 DUP2 MSTORE PUSH1 0x20 DUP1 DUP5 MUL DUP3 ADD ADD SWAP1 SWAP2 MSTORE DUP2 DUP1 ISZERO PUSH2 0x1CCC JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xF8D JUMPI PUSH1 0x0 PUSH1 0x60 DUP9 PUSH1 0x0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH3 0x927C0 DUP11 PUSH1 0x40 ADD MLOAD DUP11 DUP11 DUP11 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x1D10 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1D2A SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x56B6 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x1DB3 SWAP2 SWAP1 PUSH2 0x5376 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1DEF JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1DF4 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x1E19 JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x1E16 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4F1F JUMP JUMPDEST SWAP1 POP JUMPDEST DUP1 PUSH2 0x1E26 JUMPI POP POP POP PUSH2 0xF8D JUMP JUMPDEST DUP1 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x1E33 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x1CD2 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP3 MLOAD SWAP1 POP DUP1 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1E83 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 PUSH2 0x1E93 DUP8 DUP8 DUP8 PUSH2 0x2478 JUMP JUMPDEST SWAP1 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x1EB8 JUMPI POP PUSH2 0x1E49 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x204B JUMPI PUSH1 0x0 PUSH1 0x60 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH3 0x61A80 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x343FBCDD SWAP1 POP PUSH1 0xE0 SHL DUP12 DUP12 DUP12 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x1F12 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1F2C SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x548B JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x1FB5 SWAP2 SWAP1 PUSH2 0x5376 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1FF1 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1FF6 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x201B JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x2018 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4F1F JUMP JUMPDEST SWAP1 POP JUMPDEST DUP1 PUSH2 0x2028 JUMPI POP POP POP PUSH2 0x204B JUMP JUMPDEST DUP1 DUP8 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x2035 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x1EBB JUMP JUMPDEST POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 DUP2 ADD SWAP1 SWAP3 MSTORE PUSH2 0x5CE SWAP1 DUP1 PUSH2 0x2075 DUP7 DUP10 PUSH1 0x80 DUP5 ADD PUSH2 0x53EC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x209C SWAP3 SWAP2 SWAP1 PUSH2 0x53EC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x3F47 DUP2 MSTORE POP DUP4 PUSH2 0x2EBE JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP3 MLOAD SWAP1 POP DUP1 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x20EE JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x229F JUMPI PUSH1 0x0 PUSH1 0x60 PUSH2 0x2108 PUSH2 0x3FC1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH3 0x249F0 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xD06CA61F SWAP1 POP PUSH1 0xE0 SHL DUP9 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x2150 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP11 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x216A SWAP3 SWAP2 SWAP1 PUSH2 0x57E3 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x21F3 SWAP2 SWAP1 PUSH2 0x5376 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x222F JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2234 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x2274 JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x2256 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4CEA JUMP JUMPDEST PUSH1 0x1 DUP10 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x2265 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH2 0x227C JUMP JUMPDEST POP POP POP PUSH2 0x229F JUMP JUMPDEST DUP1 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x2289 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x20F4 JUMP JUMPDEST POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP3 MLOAD SWAP1 POP DUP1 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x22D9 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x116B JUMPI PUSH1 0x0 PUSH1 0x60 PUSH2 0x22F3 PUSH2 0x3FD9 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH3 0xC3500 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x72EA9076 SWAP1 POP PUSH1 0xE0 SHL DUP11 DUP11 DUP11 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x233D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x2357 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x548B JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x23E0 SWAP2 SWAP1 PUSH2 0x5376 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x241C JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2421 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x2448 JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x2443 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4EC7 JUMP JUMPDEST SWAP3 POP POP POP JUMPDEST DUP1 PUSH2 0x2455 JUMPI POP POP POP PUSH2 0x116B JUMP JUMPDEST DUP1 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x2462 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x22DF JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH2 0x249D JUMPI POP PUSH1 0x0 PUSH2 0x3D9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x60 SWAP1 PUSH32 0x153F599700000000000000000000000000000000000000000000000000000000 SWAP1 PUSH2 0x24D5 SWAP1 DUP7 SWAP1 DUP7 SWAP1 PUSH1 0x24 ADD PUSH2 0x53EC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP SWAP1 POP PUSH1 0x0 PUSH1 0x60 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x40 MLOAD PUSH2 0x255D SWAP2 SWAP1 PUSH2 0x5376 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2598 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x259D JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x25B0 JUMPI POP DUP1 MLOAD PUSH1 0x20 EQ JUMPDEST ISZERO PUSH2 0x25CA JUMPI PUSH2 0x25C0 DUP2 PUSH1 0xC PUSH2 0x3FF1 JUMP JUMPDEST SWAP4 POP POP POP POP PUSH2 0x3D9 JUMP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x3D6 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 DUP6 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x25F5 SWAP2 SWAP1 PUSH2 0x5392 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x261A SWAP2 SWAP1 PUSH2 0x5392 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x4031 DUP2 MSTORE POP DUP4 PUSH2 0x2EBE JUMP JUMPDEST PUSH1 0x60 PUSH2 0x2646 DUP4 DUP6 PUSH2 0x2CD3 JUMP JUMPDEST DUP2 MLOAD PUSH1 0x40 DUP1 MLOAD DUP3 DUP2 MSTORE PUSH1 0x20 DUP1 DUP5 MUL DUP3 ADD ADD SWAP1 SWAP2 MSTORE DUP2 DUP1 ISZERO PUSH2 0x2671 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 PUSH2 0x267E PUSH2 0x3214 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x26B6 JUMPI DUP6 PUSH2 0x26B9 JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x26C5 PUSH2 0x3214 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x26FD JUMPI DUP6 PUSH2 0x2700 JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x270C PUSH2 0x4093 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x901754D7 DUP5 DUP5 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2746 SWAP3 SWAP2 SWAP1 PUSH2 0x53EC JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x275E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2772 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x2796 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4930 JUMP JUMPDEST SWAP1 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x27BD JUMPI POP PUSH2 0x3D9 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND ISZERO PUSH2 0x2882 JUMPI PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH2 0x282D SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x5392 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2845 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2859 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x287D SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4F1F JUMP JUMPDEST PUSH2 0x289B JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND BALANCE JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x2A50 JUMPI DUP8 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x28B4 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 LT ISZERO PUSH2 0x28C8 JUMPI PUSH2 0x2A50 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH3 0x249F0 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x1E1401F8 SWAP1 POP PUSH1 0xE0 SHL DUP10 DUP10 DUP15 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x2917 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x2931 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x548B JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x29BA SWAP2 SWAP1 PUSH2 0x5376 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x29F6 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x29FB JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x2A20 JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x2A1D SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4F1F JUMP JUMPDEST SWAP1 POP JUMPDEST DUP1 PUSH2 0x2A2D JUMPI POP POP POP PUSH2 0x2A50 JUMP JUMPDEST DUP1 DUP11 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x2A3A JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x28A0 JUMP JUMPDEST POP POP POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP3 MLOAD SWAP1 POP DUP1 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2A8F JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x229F JUMPI PUSH1 0x0 PUSH1 0x60 PUSH2 0x2AA9 PUSH2 0x3FC1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH3 0x249F0 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x1F00CA74 SWAP1 POP PUSH1 0xE0 SHL DUP9 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x2AF1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP11 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x2B0B SWAP3 SWAP2 SWAP1 PUSH2 0x57E3 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x2B94 SWAP2 SWAP1 PUSH2 0x5376 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2BD0 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2BD5 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x2274 JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x2BF7 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4CEA JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x2C03 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP DUP1 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x2C1A JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x2A95 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x2C3D DUP5 DUP5 DUP5 PUSH2 0x5D7 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x784 JUMPI DUP2 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x2C57 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ PUSH2 0x2CCB JUMPI PUSH2 0x2CB2 DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2C75 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x2C89 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0xA0 ADD MLOAD DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2CA1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x80 ADD MLOAD PUSH2 0x31C6 JUMP JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2CBE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP JUMPDEST PUSH1 0x1 ADD PUSH2 0x2C42 JUMP JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x2D42 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2D39 SWAP1 PUSH2 0x56EC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x4CB8E253 PUSH1 0xE0 SHL DUP8 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x2D7E SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4930 JUMP JUMPDEST DUP8 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x2D92 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4930 JUMP JUMPDEST PUSH2 0x2D9B DUP9 PUSH2 0x40AB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x2DAD SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x53B3 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x2E36 SWAP2 SWAP1 PUSH2 0x5376 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2E71 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2E76 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH2 0x2E8B JUMPI PUSH1 0x0 SWAP3 POP POP POP PUSH2 0x3D9 JUMP JUMPDEST DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x2E9F SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4CEA JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x2EAB JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2EEB JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP2 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x2EFD JUMPI PUSH2 0x308D JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2F2E DUP5 PUSH1 0x0 ADD MLOAD DUP6 PUSH1 0x20 ADD MLOAD DUP6 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x2F19 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 PUSH1 0x40 ADD MLOAD PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x2F3B JUMPI POP PUSH2 0x308D JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2F58 DUP6 PUSH1 0x20 ADD MLOAD DUP7 PUSH1 0x0 ADD MLOAD DUP5 DUP9 PUSH1 0x40 ADD MLOAD PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x2F67 JUMPI POP PUSH2 0x308D SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x3089 JUMPI PUSH1 0x0 JUMPDEST PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x304B JUMPI PUSH2 0x2F9D DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x2F8E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 DUP7 PUSH2 0x31C6 JUMP JUMPDEST SWAP4 POP PUSH2 0x2FAE PUSH2 0x2715 PUSH2 0x2710 DUP7 PUSH2 0x31C6 JUMP JUMPDEST SWAP4 POP PUSH1 0x0 PUSH2 0x2FCD DUP9 PUSH1 0x20 ADD MLOAD DUP10 PUSH1 0x0 ADD MLOAD DUP8 DUP12 PUSH1 0x40 ADD MLOAD PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x2FDA JUMPI POP PUSH2 0x304B JUMP JUMPDEST DUP1 SWAP4 POP DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x2FE9 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 LT PUSH2 0x3042 JUMPI PUSH1 0x0 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x3005 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x2710 DUP10 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x301C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 SUB MUL DUP2 PUSH2 0x302E JUMPI INVALID JUMPDEST DIV SWAP1 POP PUSH1 0x5 DUP2 GT PUSH2 0x3040 JUMPI POP POP PUSH2 0x304B JUMP JUMPDEST POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x2F76 JUMP JUMPDEST POP PUSH2 0x306A DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x305B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP4 DUP6 PUSH2 0x31C6 JUMP JUMPDEST DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3076 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x2F6A JUMP JUMPDEST POP POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x30A7 JUMPI POP PUSH1 0x0 PUSH2 0x312B JUMP JUMPDEST DUP2 MLOAD PUSH1 0x24 EQ ISZERO DUP1 PUSH2 0x310A JUMPI POP PUSH32 0xF47261B000000000000000000000000000000000000000000000000000000000 PUSH2 0x30E5 DUP4 PUSH1 0x0 PUSH4 0xFFFFFFFF PUSH2 0x40EC AND JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x3117 JUMPI POP PUSH1 0x0 PUSH2 0x312B JUMP JUMPDEST PUSH2 0x3128 DUP3 PUSH1 0x10 PUSH4 0xFFFFFFFF PUSH2 0x3FF1 AND JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x314E JUMPI PUSH2 0x314E PUSH2 0x3149 PUSH1 0x2 DUP6 DUP6 PUSH2 0x4138 JUMP JUMPDEST PUSH2 0x41DD JUMP JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x3D9 JUMPI PUSH2 0x3D9 PUSH2 0x3149 PUSH1 0x0 DUP7 DUP7 PUSH2 0x4138 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x317D DUP5 DUP5 DUP5 PUSH2 0x41E5 JUMP JUMPDEST ISZERO PUSH2 0x3190 JUMPI PUSH2 0x3190 PUSH2 0x3149 DUP6 DUP6 DUP6 PUSH2 0x424B JUMP JUMPDEST PUSH2 0x3D6 DUP4 PUSH2 0x31A4 DUP7 DUP6 PUSH4 0xFFFFFFFF PUSH2 0x426A AND JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x429B AND JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0x31BF JUMPI DUP2 PUSH2 0x3D9 JUMP JUMPDEST POP SWAP1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3D6 DUP4 PUSH2 0x31A4 PUSH2 0x31E0 DUP3 PUSH1 0x1 PUSH4 0xFFFFFFFF PUSH2 0x3130 AND JUMP JUMPDEST PUSH2 0x31F0 DUP9 DUP8 PUSH4 0xFFFFFFFF PUSH2 0x426A AND JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x3154 AND JUMP JUMPDEST PUSH20 0x794E6E91555438AFC3CCF1C5076A74F42133D08D SWAP1 JUMP JUMPDEST PUSH20 0xC02AAA39B223FE8D0A0E5C4F27EAD9083C756CC2 SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x3239 PUSH2 0x42C5 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x60 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x3D3DC52C PUSH2 0x3263 PUSH2 0x3214 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x329B JUMPI DUP9 PUSH2 0x329D JUMP JUMPDEST DUP8 JUMPDEST PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x32B9 SWAP2 SWAP1 PUSH2 0x5392 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x32D1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x32E5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x332B SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4CEA JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 SWAP3 MSTORE SWAP2 SWAP3 POP JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x35E4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x106E9A4B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND SWAP1 PUSH4 0x106E9A4B SWAP1 PUSH2 0x33AE SWAP1 PUSH20 0x31E085AFD48A1D6E51CC193153D625E8F0514C7F SWAP1 PUSH1 0x4 ADD PUSH2 0x5392 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x33C6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x33DA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x33FE SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4F1F JUMP JUMPDEST DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x340A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD EQ DUP1 PUSH2 0x34E5 JUMPI POP PUSH1 0x40 MLOAD PUSH32 0x106E9A4B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND SWAP1 PUSH4 0x106E9A4B SWAP1 PUSH2 0x347F SWAP1 PUSH20 0x10908C875D865C66F271F5D3949848971C9595C9 SWAP1 PUSH1 0x4 ADD PUSH2 0x5392 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3497 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x34AB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x34CF SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4F1F JUMP JUMPDEST DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x34DB JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD EQ JUMPDEST DUP1 PUSH2 0x35B7 JUMPI POP PUSH1 0x40 MLOAD PUSH32 0x106E9A4B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND SWAP1 PUSH4 0x106E9A4B SWAP1 PUSH2 0x3551 SWAP1 PUSH20 0x1E158C0E93C30D24E918EF83D1E0BE23595C3C0F SWAP1 PUSH1 0x4 ADD PUSH2 0x5392 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3569 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x357D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x35A1 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4F1F JUMP JUMPDEST DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x35AD JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD EQ JUMPDEST ISZERO PUSH2 0x35DC JUMPI PUSH2 0x35D9 DUP3 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x35CC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x43F9 JUMP JUMPDEST SWAP2 POP JUMPDEST PUSH1 0x1 ADD PUSH2 0x333F JUMP JUMPDEST POP PUSH1 0x60 PUSH2 0x35EF PUSH2 0x3214 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x3706 JUMPI DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x81EFCBDD DUP10 PUSH1 0x2 DUP6 PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x366D JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x368D SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x550F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x36A5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x36B9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x36FF SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4F37 JUMP JUMPDEST SWAP1 POP PUSH2 0x37E6 JUMP JUMPDEST DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x81EFCBDD DUP11 PUSH1 0x2 DUP6 PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x3751 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3771 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x550F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3789 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x379D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x37E3 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4F37 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH2 0x37F2 PUSH2 0x448F JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH3 0x16E360 PUSH32 0x418436BC00000000000000000000000000000000000000000000000000000000 PUSH2 0x3835 PUSH2 0x3214 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP15 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x386D JUMPI DUP14 PUSH2 0x3883 JUMP JUMPDEST PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE JUMPDEST PUSH2 0x388B PUSH2 0x3214 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP15 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x38C3 JUMPI DUP14 PUSH2 0x38D9 JUMP JUMPDEST PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE JUMPDEST DUP14 PUSH1 0x0 DUP10 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x38F1 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x54BC JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x397A SWAP2 SWAP1 PUSH2 0x5376 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x39B6 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x39BB JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x39E4 JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x39DD SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4F1F JUMP JUMPDEST SWAP1 POP PUSH2 0x39F5 JUMP JUMPDEST PUSH1 0x0 SWAP9 POP POP POP POP POP POP POP POP POP PUSH2 0x3D9 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3A00 DUP13 PUSH2 0x44A7 JUMP JUMPDEST PUSH1 0xFF AND SWAP1 POP PUSH1 0x0 PUSH2 0x3A10 DUP15 PUSH2 0x44A7 JUMP JUMPDEST PUSH1 0xFF AND SWAP1 POP PUSH8 0xDE0B6B3A7640000 DUP2 PUSH1 0xA EXP DUP4 PUSH1 0xA EXP DUP15 DUP7 MUL MUL DUP2 PUSH2 0x3A31 JUMPI INVALID JUMPDEST DIV DUP2 PUSH2 0x3A39 JUMPI INVALID JUMPDEST DIV SWAP15 SWAP14 POP POP POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3A56 PUSH2 0x44B2 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x6F2BF62 DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3A8E SWAP2 SWAP1 PUSH2 0x5392 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3AA6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3ABA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x3128 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4930 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH2 0x3B01 JUMPI PUSH2 0x3C1F JUMP JUMPDEST PUSH1 0x60 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH3 0x249F0 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x3B30 SWAP2 SWAP1 PUSH2 0x57DA JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x3BB9 SWAP2 SWAP1 PUSH2 0x5376 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x3BF5 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x3BFA JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP DUP2 ISZERO PUSH2 0x3C1D JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x3C1A SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4F1F JUMP JUMPDEST SWAP3 POP JUMPDEST POP JUMPDEST SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x3C3E SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4930 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP5 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x3C56 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4930 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH32 0xCDB3B4AF00000000000000000000000000000000000000000000000000000000 DUP6 DUP6 PUSH2 0x3C89 DUP11 PUSH2 0x40AB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x3C9B SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x53B3 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x3D24 SWAP2 SWAP1 PUSH2 0x5376 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x3D5F JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x3D64 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH2 0x3D7B JUMPI PUSH1 0x0 SWAP5 POP POP POP POP POP PUSH2 0x3D9 JUMP JUMPDEST DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x3D8F SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4CEA JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x3D9B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP5 POP POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x3DBB PUSH2 0x4644 JUMP JUMPDEST DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x3DCF SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4F86 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x3DE9 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4F6A JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH32 0x40BC03AE00000000000000000000000000000000000000000000000000000000 DUP6 DUP8 DUP7 PUSH2 0x3E1D DUP13 PUSH2 0x40AB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x3E30 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x5749 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x3EB9 SWAP2 SWAP1 PUSH2 0x5376 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x3EF4 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x3EF9 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH2 0x3F11 JUMPI PUSH1 0x0 SWAP6 POP POP POP POP POP POP PUSH2 0x3D9 JUMP JUMPDEST DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x3F25 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4CEA JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x3F31 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP6 POP POP POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x3F60 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x494C JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x3F7A SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4930 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH32 0x9F76AD3500000000000000000000000000000000000000000000000000000000 DUP6 DUP8 DUP7 PUSH2 0x3FAE DUP13 PUSH2 0x40AB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x3E30 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x5413 JUMP JUMPDEST PUSH20 0xF164FC0EC4E93095B804A4795BBE1E041497B92A SWAP1 JUMP JUMPDEST PUSH20 0xE2F2A5C287993345A840DB3B0845FBC70F5935A5 SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x14 ADD DUP4 MLOAD LT ISZERO PUSH2 0x4012 JUMPI PUSH2 0x4012 PUSH2 0x3149 PUSH1 0x4 DUP6 MLOAD DUP6 PUSH1 0x14 ADD PUSH2 0x44CA JUMP JUMPDEST POP ADD PUSH1 0x14 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x4048 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4930 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP5 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x4060 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4930 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH32 0xBC61A69500000000000000000000000000000000000000000000000000000000 DUP6 DUP6 PUSH2 0x3C89 DUP11 PUSH2 0x40AB JUMP JUMPDEST PUSH20 0x71CD6666064C3A1354A3B4DCA5FA1E2D3EE7D303 SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP2 PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP POP SWAP1 POP DUP2 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x40DB JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x4 ADD DUP4 MLOAD LT ISZERO PUSH2 0x410D JUMPI PUSH2 0x410D PUSH2 0x3149 PUSH1 0x3 DUP6 MLOAD DUP6 PUSH1 0x4 ADD PUSH2 0x44CA JUMP JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH4 0xE946C1BB PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x4157 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x5687 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x41F7 JUMPI PUSH2 0x41F7 PUSH2 0x3149 PUSH2 0x44E9 JUMP JUMPDEST DUP2 ISZERO DUP1 PUSH2 0x4202 JUMPI POP DUP4 ISZERO JUMPDEST ISZERO PUSH2 0x420F JUMPI POP PUSH1 0x0 PUSH2 0x3D9 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP1 PUSH2 0x4219 JUMPI INVALID JUMPDEST DUP6 DUP5 MULMOD SWAP1 POP PUSH2 0x422E DUP6 DUP5 PUSH4 0xFFFFFFFF PUSH2 0x426A AND JUMP JUMPDEST PUSH2 0x4240 DUP3 PUSH2 0x3E8 PUSH4 0xFFFFFFFF PUSH2 0x426A AND JUMP JUMPDEST LT ISZERO SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH4 0x339F3DE2 PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x4157 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x5847 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x4279 JUMPI POP PUSH1 0x0 PUSH2 0x308D JUMP JUMPDEST DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 PUSH2 0x4286 JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x3D9 JUMPI PUSH2 0x3D9 PUSH2 0x3149 PUSH1 0x1 DUP7 DUP7 PUSH2 0x4138 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x42B1 JUMPI PUSH2 0x42B1 PUSH2 0x3149 PUSH1 0x3 DUP6 DUP6 PUSH2 0x4138 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP2 PUSH2 0x42BC JUMPI INVALID JUMPDEST DIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x42D0 PUSH2 0x448F JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xB78B842D PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4315 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4329 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x434D SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4930 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xC3A2A93A PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4392 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x43A6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x43EC SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4B28 JUMP JUMPDEST POP SWAP2 SWAP6 POP SWAP4 POP POP POP POP SWAP1 SWAP2 JUMP JUMPDEST PUSH1 0x60 DUP3 MLOAD PUSH1 0x1 ADD PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x4429 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP4 MLOAD DUP2 LT ISZERO PUSH2 0x446B JUMPI DUP4 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x4444 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x4458 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x442F JUMP JUMPDEST POP DUP2 DUP2 PUSH1 0x1 DUP4 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x447D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH20 0x9AAB3F75489902F3A48495025729A0AF77D4B11E SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3128 DUP3 PUSH2 0x4520 JUMP JUMPDEST PUSH20 0xC0A47DFE034B400B47BDAD5FECDA2621DE6C4D95 SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH4 0x28006595 PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x4157 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x56A8 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x4 DUP2 MSTORE PUSH32 0xA791837C00000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x12 SWAP1 POP PUSH1 0x0 PUSH1 0x60 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x4 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x313CE56700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x40 MLOAD PUSH2 0x4584 SWAP2 SWAP1 PUSH2 0x5376 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x45BF JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x45C4 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x45D7 JUMPI POP DUP1 MLOAD PUSH1 0x20 EQ JUMPDEST ISZERO PUSH2 0x45EA JUMPI PUSH2 0x45E7 DUP2 PUSH1 0x0 PUSH2 0x45F1 JUMP JUMPDEST SWAP3 POP JUMPDEST POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3D9 DUP4 DUP4 PUSH1 0x0 DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO PUSH2 0x4619 JUMPI PUSH2 0x4619 PUSH2 0x3149 PUSH1 0x5 DUP6 MLOAD DUP6 PUSH1 0x20 ADD PUSH2 0x44CA JUMP JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD SWAP1 SWAP2 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x308D DUP2 PUSH2 0x5923 JUMP JUMPDEST DUP1 MLOAD PUSH2 0x308D DUP2 PUSH2 0x5923 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x468A JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x469D PUSH2 0x4698 DUP3 PUSH2 0x5884 JUMP JUMPDEST PUSH2 0x585D JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 ADD PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x46DA JUMPI PUSH2 0x46C5 DUP8 PUSH1 0x20 DUP5 CALLDATALOAD DUP10 ADD ADD PUSH2 0x474D JUMP JUMPDEST DUP4 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x46AD JUMP JUMPDEST POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x46F4 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x4702 PUSH2 0x4698 DUP3 PUSH2 0x5884 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x4723 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x4742 JUMPI DUP2 CALLDATALOAD DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x4726 JUMP JUMPDEST POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x475D JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x476B PUSH2 0x4698 DUP3 PUSH2 0x58A4 JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x4782 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP5 ADD CALLDATACOPY PUSH1 0x0 SWAP1 DUP3 ADD PUSH1 0x20 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x47AB JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x47B9 PUSH2 0x4698 DUP3 PUSH2 0x58A4 JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x47D0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1958 DUP2 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x58E6 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C0 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x47F4 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x47FD DUP2 PUSH2 0x585D JUMP JUMPDEST SWAP2 POP POP PUSH2 0x480A DUP4 DUP4 PUSH2 0x4664 JUMP JUMPDEST DUP2 MSTORE PUSH2 0x4819 DUP4 PUSH1 0x20 DUP5 ADD PUSH2 0x4664 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x482B DUP4 PUSH1 0x40 DUP5 ADD PUSH2 0x4664 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x483D DUP4 PUSH1 0x60 DUP5 ADD PUSH2 0x4664 JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP3 ADD CALLDATALOAD PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 DUP3 ADD CALLDATALOAD PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 DUP3 ADD CALLDATALOAD PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0xE0 DUP3 ADD CALLDATALOAD PUSH1 0xE0 DUP3 ADD MSTORE PUSH2 0x100 DUP1 DUP4 ADD CALLDATALOAD DUP2 DUP4 ADD MSTORE POP PUSH2 0x120 DUP1 DUP4 ADD CALLDATALOAD DUP2 DUP4 ADD MSTORE POP PUSH2 0x140 DUP1 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x489F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x48AB DUP7 DUP4 DUP8 ADD PUSH2 0x474D JUMP JUMPDEST DUP4 DUP6 ADD MSTORE PUSH2 0x160 SWAP3 POP DUP3 DUP6 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x48C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x48D3 DUP7 DUP4 DUP8 ADD PUSH2 0x474D JUMP JUMPDEST DUP4 DUP6 ADD MSTORE PUSH2 0x180 SWAP3 POP DUP3 DUP6 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x48EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x48FB DUP7 DUP4 DUP8 ADD PUSH2 0x474D JUMP JUMPDEST DUP4 DUP6 ADD MSTORE PUSH2 0x1A0 SWAP3 POP DUP3 DUP6 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x4917 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4924 DUP6 DUP3 DUP7 ADD PUSH2 0x474D JUMP JUMPDEST DUP3 DUP5 ADD MSTORE POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4941 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x3D9 DUP2 PUSH2 0x5923 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x495E JUMPI DUP1 DUP2 REVERT JUMPDEST DUP3 MLOAD PUSH2 0x4969 DUP2 PUSH2 0x5923 JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 SWAP3 POP PUSH2 0x497A DUP2 PUSH2 0x5923 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x4999 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x49A4 DUP2 PUSH2 0x5923 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x49B4 DUP2 PUSH2 0x5923 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH2 0x49C4 DUP2 PUSH2 0x5923 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x49E6 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x49F1 DUP2 PUSH2 0x5923 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x4A01 DUP2 PUSH2 0x5923 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH2 0x4A11 DUP2 PUSH2 0x5923 JUMP JUMPDEST SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH2 0x4A21 DUP2 PUSH2 0x5923 JUMP JUMPDEST SWAP2 POP PUSH1 0x80 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x4A3C JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x4A48 DUP9 DUP3 DUP10 ADD PUSH2 0x46E4 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x4A6A JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x4A75 DUP2 PUSH2 0x5923 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x4A85 DUP2 PUSH2 0x5923 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x4A95 DUP2 PUSH2 0x5923 JUMP JUMPDEST SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x4AB0 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x4ABC DUP8 DUP3 DUP9 ADD PUSH2 0x46E4 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x4ADC JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x4AE7 DUP2 PUSH2 0x5923 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x4AF7 DUP2 PUSH2 0x5923 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x4B12 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x4B1E DUP7 DUP3 DUP8 ADD PUSH2 0x46E4 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x4B40 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP7 MLOAD PUSH2 0x4B4B DUP2 PUSH2 0x5923 JUMP JUMPDEST DUP1 SWAP7 POP POP PUSH1 0x20 DUP1 DUP9 ADD MLOAD PUSH2 0x4B5E DUP2 PUSH2 0x5923 JUMP JUMPDEST PUSH1 0x40 DUP10 ADD MLOAD SWAP1 SWAP7 POP PUSH2 0x4B6F DUP2 PUSH2 0x5923 JUMP JUMPDEST PUSH1 0x60 DUP10 ADD MLOAD SWAP1 SWAP6 POP PUSH2 0x4B80 DUP2 PUSH2 0x5923 JUMP JUMPDEST PUSH1 0x80 DUP10 ADD MLOAD SWAP1 SWAP5 POP PUSH2 0x4B91 DUP2 PUSH2 0x5923 JUMP JUMPDEST PUSH1 0xA0 DUP10 ADD MLOAD SWAP1 SWAP4 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x4BAD JUMPI DUP3 DUP4 REVERT JUMPDEST DUP1 DUP10 ADD DUP11 PUSH1 0x1F DUP3 ADD SLT PUSH2 0x4BBE JUMPI DUP4 DUP5 REVERT JUMPDEST DUP1 MLOAD SWAP2 POP PUSH2 0x4BCE PUSH2 0x4698 DUP4 PUSH2 0x5884 JUMP JUMPDEST DUP3 DUP2 MSTORE DUP4 DUP2 ADD SWAP1 DUP3 DUP6 ADD DUP6 DUP6 MUL DUP5 ADD DUP7 ADD DUP15 LT ISZERO PUSH2 0x4BEA JUMPI DUP7 DUP8 REVERT JUMPDEST DUP7 SWAP4 POP JUMPDEST DUP5 DUP5 LT ISZERO PUSH2 0x4C14 JUMPI PUSH2 0x4C00 DUP15 DUP3 PUSH2 0x466F JUMP JUMPDEST DUP4 MSTORE PUSH1 0x1 SWAP4 SWAP1 SWAP4 ADD SWAP3 SWAP2 DUP6 ADD SWAP2 DUP6 ADD PUSH2 0x4BEE JUMP JUMPDEST POP DUP1 SWAP6 POP POP POP POP POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x4C39 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x4C50 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP6 ADD DUP7 PUSH1 0x1F DUP3 ADD SLT PUSH2 0x4C61 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP3 POP PUSH2 0x4C71 PUSH2 0x4698 DUP5 PUSH2 0x5884 JUMP JUMPDEST DUP1 DUP5 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD SWAP3 POP DUP1 DUP5 ADD DUP11 DUP3 DUP4 DUP10 MUL DUP8 ADD ADD GT ISZERO PUSH2 0x4C91 JUMPI DUP9 DUP10 REVERT JUMPDEST DUP9 SWAP5 POP JUMPDEST DUP7 DUP6 LT ISZERO PUSH2 0x4CBC JUMPI DUP1 CALLDATALOAD PUSH2 0x4CA8 DUP2 PUSH2 0x5923 JUMP JUMPDEST DUP5 MSTORE PUSH1 0x1 SWAP5 SWAP1 SWAP5 ADD SWAP4 SWAP3 DUP2 ADD SWAP3 DUP2 ADD PUSH2 0x4C95 JUMP JUMPDEST POP SWAP1 SWAP7 POP DUP8 ADD CALLDATALOAD SWAP4 POP POP POP DUP1 DUP3 GT ISZERO PUSH2 0x4CD3 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x4CE0 DUP6 DUP3 DUP7 ADD PUSH2 0x46E4 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x4CFC JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x4D12 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP1 DUP5 ADD DUP6 PUSH1 0x1F DUP3 ADD SLT PUSH2 0x4D23 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP1 MLOAD SWAP2 POP PUSH2 0x4D33 PUSH2 0x4698 DUP4 PUSH2 0x5884 JUMP JUMPDEST DUP3 DUP2 MSTORE DUP4 DUP2 ADD SWAP1 DUP3 DUP6 ADD DUP6 DUP6 MUL DUP5 ADD DUP7 ADD DUP10 LT ISZERO PUSH2 0x4D4F JUMPI DUP7 DUP8 REVERT JUMPDEST DUP7 SWAP4 POP JUMPDEST DUP5 DUP5 LT ISZERO PUSH2 0x4D71 JUMPI DUP1 MLOAD DUP4 MSTORE PUSH1 0x1 SWAP4 SWAP1 SWAP4 ADD SWAP3 SWAP2 DUP6 ADD SWAP2 DUP6 ADD PUSH2 0x4D53 JUMP JUMPDEST POP SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x4D8F JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x4DA6 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP6 ADD DUP7 PUSH1 0x1F DUP3 ADD SLT PUSH2 0x4DB7 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP3 POP DUP2 DUP4 GT ISZERO PUSH2 0x4DC7 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP7 PUSH1 0x20 DUP1 DUP6 MUL DUP4 ADD ADD GT ISZERO PUSH2 0x4DDA JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH1 0x20 ADD SWAP7 SWAP2 SWAP6 POP SWAP1 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x4DFD JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x4E14 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 DUP7 ADD DUP8 PUSH1 0x1F DUP3 ADD SLT PUSH2 0x4E25 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP3 POP PUSH2 0x4E35 PUSH2 0x4698 DUP5 PUSH2 0x5884 JUMP JUMPDEST DUP4 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD SWAP2 SWAP1 DUP4 DUP2 ADD DUP8 JUMPDEST DUP8 DUP2 LT ISZERO PUSH2 0x4E6D JUMPI PUSH2 0x4E5B DUP14 DUP5 DUP5 CALLDATALOAD DUP10 ADD ADD PUSH2 0x47E1 JUMP JUMPDEST DUP6 MSTORE SWAP4 DUP3 ADD SWAP4 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x4E44 JUMP JUMPDEST POP SWAP2 SWAP9 POP DUP10 ADD CALLDATALOAD SWAP5 POP POP POP POP DUP1 DUP3 GT ISZERO PUSH2 0x4E85 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x4E92 DUP7 DUP3 DUP8 ADD PUSH2 0x467A JUMP JUMPDEST SWAP3 POP POP PUSH2 0x4EA2 DUP6 PUSH1 0x40 DUP7 ADD PUSH2 0x4664 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4EBC JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x3D9 DUP2 PUSH2 0x5945 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x4EDB JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 MLOAD PUSH2 0x4EE6 DUP2 PUSH2 0x5945 JUMP JUMPDEST PUSH1 0x20 DUP6 ADD MLOAD SWAP1 SWAP4 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x4F02 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x4F0E DUP7 DUP3 DUP8 ADD PUSH2 0x479B JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 DUP5 ADD MLOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4F30 JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4F48 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x4F5E JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x1E49 DUP5 DUP3 DUP6 ADD PUSH2 0x479B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4F7B JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x3D9 DUP2 PUSH2 0x5981 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x80 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x4F98 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH2 0x4FA3 DUP2 PUSH2 0x5981 JUMP JUMPDEST SWAP2 POP PUSH1 0x60 DUP4 DUP6 SUB PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 ADD SLT ISZERO PUSH2 0x4FD6 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x4FE0 PUSH1 0x60 PUSH2 0x585D JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD PUSH2 0x4FEE DUP2 PUSH2 0x5923 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x40 DUP5 ADD MLOAD PUSH2 0x4FFE DUP2 PUSH2 0x5953 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x60 DUP5 ADD MLOAD PUSH2 0x5011 DUP2 PUSH2 0x5953 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE SWAP2 SWAP5 SWAP2 SWAP4 POP SWAP1 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP5 DUP7 SUB PUSH1 0xC0 DUP2 SLT ISZERO PUSH2 0x5037 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x60 DUP2 SLT ISZERO PUSH2 0x5044 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x504F PUSH1 0x60 PUSH2 0x585D JUMP JUMPDEST DUP6 CALLDATALOAD PUSH2 0x505A DUP2 PUSH2 0x5923 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x506A DUP2 PUSH2 0x5953 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH2 0x507D DUP2 PUSH2 0x5953 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE SWAP4 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH2 0x5092 DUP2 PUSH2 0x5981 JUMP JUMPDEST SWAP3 POP PUSH1 0x80 DUP6 ADD CALLDATALOAD PUSH2 0x50A2 DUP2 PUSH2 0x5981 JUMP JUMPDEST SWAP2 POP PUSH1 0xA0 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x4AB0 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x50CE JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x50D8 PUSH1 0x60 PUSH2 0x585D JUMP JUMPDEST DUP3 MLOAD PUSH1 0x7 DUP2 LT PUSH2 0x50E6 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP4 DUP2 ADD MLOAD SWAP1 DUP3 ADD MSTORE PUSH1 0x40 SWAP3 DUP4 ADD MLOAD SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x5119 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x5130 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x513C DUP8 DUP4 DUP9 ADD PUSH2 0x47E1 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x5151 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x515E DUP7 DUP3 DUP8 ADD PUSH2 0x474D JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH2 0x49C4 DUP2 PUSH2 0x5923 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x20 DUP4 ADD DUP3 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x51BA JUMPI DUP2 MLOAD DUP7 MSTORE PUSH1 0x20 SWAP6 DUP7 ADD SWAP6 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x519C JUMP JUMPDEST POP SWAP4 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x51DC DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x58E6 JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 MSTORE PUSH1 0x20 DUP1 DUP3 ADD MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 DUP2 AND SWAP2 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP2 DUP3 ADD MLOAD AND SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C0 PUSH2 0x5275 DUP5 DUP5 MLOAD PUSH2 0x516F JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MLOAD PUSH2 0x5287 PUSH1 0x20 DUP7 ADD DUP3 PUSH2 0x516F JUMP JUMPDEST POP PUSH1 0x40 DUP4 ADD MLOAD PUSH2 0x529A PUSH1 0x40 DUP7 ADD DUP3 PUSH2 0x516F JUMP JUMPDEST POP PUSH1 0x60 DUP4 ADD MLOAD PUSH2 0x52AD PUSH1 0x60 DUP7 ADD DUP3 PUSH2 0x516F JUMP JUMPDEST POP PUSH1 0x80 DUP4 ADD MLOAD PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0xA0 DUP4 ADD MLOAD PUSH1 0xA0 DUP6 ADD MSTORE PUSH1 0xC0 DUP4 ADD MLOAD PUSH1 0xC0 DUP6 ADD MSTORE PUSH1 0xE0 DUP4 ADD MLOAD PUSH1 0xE0 DUP6 ADD MSTORE PUSH2 0x100 DUP1 DUP5 ADD MLOAD DUP2 DUP7 ADD MSTORE POP PUSH2 0x120 DUP1 DUP5 ADD MLOAD DUP2 DUP7 ADD MSTORE POP PUSH2 0x140 DUP1 DUP5 ADD MLOAD DUP3 DUP3 DUP8 ADD MSTORE PUSH2 0x5306 DUP4 DUP8 ADD DUP3 PUSH2 0x51C4 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x160 SWAP2 POP DUP2 DUP5 ADD MLOAD DUP6 DUP3 SUB DUP4 DUP8 ADD MSTORE PUSH2 0x5323 DUP3 DUP3 PUSH2 0x51C4 JUMP JUMPDEST SWAP3 POP POP POP PUSH2 0x180 DUP1 DUP5 ADD MLOAD DUP6 DUP4 SUB DUP3 DUP8 ADD MSTORE PUSH2 0x533F DUP4 DUP3 PUSH2 0x51C4 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x1A0 SWAP2 POP DUP2 DUP5 ADD MLOAD DUP6 DUP3 SUB DUP4 DUP8 ADD MSTORE PUSH2 0x535C DUP3 DUP3 PUSH2 0x51C4 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP4 CALLDATACOPY SWAP2 ADD SWAP1 DUP2 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x5388 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x58E6 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP7 AND DUP4 MSTORE DUP1 DUP6 AND PUSH1 0x20 DUP5 ADD MSTORE POP PUSH1 0x60 PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x5CE PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x5189 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP8 AND DUP4 MSTORE DUP1 DUP7 AND PUSH1 0x20 DUP5 ADD MSTORE DUP1 DUP6 AND PUSH1 0x40 DUP5 ADD MSTORE POP PUSH1 0x80 PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x535C PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0x5189 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP5 DUP6 AND DUP2 MSTORE SWAP3 DUP5 AND PUSH1 0x20 DUP5 ADD MSTORE SWAP3 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP9 AND DUP4 MSTORE DUP1 DUP8 AND PUSH1 0x20 DUP5 ADD MSTORE POP DUP5 PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0xFF DUP5 AND PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0xA0 PUSH1 0x80 DUP4 ADD MSTORE PUSH2 0x5504 PUSH1 0xA0 DUP4 ADD DUP5 PUSH2 0x51C4 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND DUP4 MSTORE PUSH2 0x5537 DUP7 PUSH2 0x5916 JUMP JUMPDEST PUSH1 0x20 DUP4 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0x80 PUSH1 0x40 DUP6 ADD MSTORE DUP6 MLOAD SWAP2 DUP3 SWAP1 MSTORE DUP6 ADD SWAP1 PUSH1 0xA0 DUP5 ADD SWAP1 DUP4 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x5574 JUMPI DUP4 MLOAD DUP4 MSTORE PUSH1 0x20 SWAP4 DUP5 ADD SWAP4 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x5556 JUMP JUMPDEST POP POP DUP4 DUP2 SUB PUSH1 0x60 DUP6 ADD MSTORE PUSH2 0x5588 DUP2 DUP7 PUSH2 0x5189 JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 ADD DUP2 DUP5 MSTORE DUP1 DUP6 MLOAD DUP1 DUP4 MSTORE PUSH1 0x40 DUP7 ADD SWAP2 POP PUSH1 0x40 DUP5 DUP3 MUL DUP8 ADD ADD SWAP3 POP DUP4 DUP8 ADD DUP6 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x5605 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0 DUP9 DUP7 SUB ADD DUP5 MSTORE PUSH2 0x55F3 DUP6 DUP4 MLOAD PUSH2 0x51C4 JUMP JUMPDEST SWAP5 POP SWAP3 DUP6 ADD SWAP3 SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x55B9 JUMP JUMPDEST POP SWAP3 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x3D9 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x5189 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP3 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x60 PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x5CE PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x51C4 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH2 0x5694 DUP6 PUSH2 0x5916 JUMP JUMPDEST SWAP4 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH1 0x8 DUP6 LT PUSH2 0x5694 JUMPI INVALID JUMPDEST PUSH1 0xF SWAP4 DUP5 SIGNEXTEND DUP2 MSTORE SWAP2 SWAP1 SWAP3 SIGNEXTEND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0xF DUP4 SWAP1 SIGNEXTEND DUP2 MSTORE PUSH1 0x80 DUP2 ADD PUSH2 0x3D9 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x520E JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x455243323042726964676553616D706C65722F494E56414C49445F544F4B454E PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x5F50414952000000000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5755 DUP3 DUP8 PUSH2 0x520E JUMP JUMPDEST DUP5 PUSH1 0xF SIGNEXTEND PUSH1 0x60 DUP4 ADD MSTORE DUP4 PUSH1 0xF SIGNEXTEND PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xC0 PUSH1 0xA0 DUP4 ADD MSTORE PUSH2 0x535C PUSH1 0xC0 DUP4 ADD DUP5 PUSH2 0x5189 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x3D9 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x5265 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 MSTORE PUSH2 0x57A1 PUSH1 0x60 DUP4 ADD DUP7 PUSH2 0x5265 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x57B3 DUP2 DUP7 PUSH2 0x51C4 JUMP JUMPDEST SWAP2 POP POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x40 DUP4 ADD MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD DUP5 DUP4 MSTORE PUSH1 0x40 PUSH1 0x20 DUP5 ADD MSTORE DUP1 DUP5 MLOAD DUP1 DUP4 MSTORE PUSH1 0x60 DUP6 ADD SWAP2 POP PUSH1 0x20 DUP7 ADD SWAP3 POP DUP4 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x583B JUMPI DUP4 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 MSTORE PUSH1 0x20 SWAP4 DUP5 ADD SWAP4 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x5807 JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x587C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x589A JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x58BA JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x5901 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x58E9 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x5910 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x4 DUP2 LT PUSH2 0x5920 JUMPI INVALID JUMPDEST POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x5920 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x5920 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0x5920 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0xF SIGNEXTEND DUP2 EQ PUSH2 0x5920 JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG3 PUSH6 0x627A7A723158 KECCAK256 EXTCODESIZE EXP CHAINID CALLDATALOAD 0x27 PUSH16 0x4D27722F1CE880E49E8E08C15C6B2E59 SSTORE 0xAD 0xFB PUSH10 0xE021B3F9AF266C657870 PUSH6 0x72696D656E74 PUSH2 0x6CF5 PUSH5 0x736F6C6343 STOP SDIV GT STOP BLOCKHASH ",
                "sourceMap": "969:1080:4:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;969:1080:4;;;;;;;"
            },
            "deployedBytecode": {
                "linkReferences": {},
                "object": "0x608060405234801561001057600080fd5b50600436106101825760003560e01c80636dd6b78d116100d8578063bc61a6951161008c578063cdb3b4af11610066578063cdb3b4af1461032d578063e68248f714610340578063e9a8e4421461035357610182565b8063bc61a695146102e7578063c7f7142e146102fa578063ca7893ba1461031a57610182565b80639f76ad35116100bd5780639f76ad35146102ae578063a2c28d4b146102c1578063abffc761146102d457610182565b80636dd6b78d146102885780639209483b1461029b57610182565b80634703a7e61161013a57806364ee6ade1161011457806364ee6ade1461024257806367b881e71461025557806368be3cf21461026857610182565b80634703a7e6146102095780634cb8e2531461021c57806360ee052a1461022f57610182565b806339b085ad1161016b57806339b085ad146101c35780633b77ebae146101d657806340bc03ae146101f657610182565b80630cc6600b146101875780632d753aa4146101b0575b600080fd5b61019a610195366004614ac8565b610366565b6040516101a79190615612565b60405180910390f35b61019a6101be3660046149cf565b6103e0565b61019a6101d1366004614de9565b6105d7565b6101e96101e4366004615105565b61078c565b6040516101a791906157da565b61019a610204366004615021565b610dde565b61019a610217366004614ac8565b610f97565b61019a61022a366004614ac8565b611174565b61019a61023d366004614ac8565b6112a7565b61019a610250366004614ac8565b61155c565b61019a610263366004614ac8565b611730565b61027b610276366004614d7d565b611796565b6040516101a79190615594565b61019a610296366004614ac8565b61195f565b61019a6102a9366004615021565b611c07565b61019a6102bc366004614a55565b611e51565b61019a6102cf366004614a55565b612056565b61019a6102e2366004614c27565b6120bc565b61019a6102f5366004614ac8565b6122a7565b61030d610308366004614985565b612478565b6040516101a79190615392565b61019a610328366004614ac8565b6125d4565b61019a61033b366004614ac8565b61263a565b61019a61034e366004614c27565b612a5d565b61019a610361366004614de9565b612c30565b60606103728385612cd3565b6103d66040518060600160405280856040516020016103919190615392565b6040516020818303038152906040528152602001866040516020016103b69190615392565b6040516020818303038152906040528152602001612d4681525083612ebe565b90505b9392505050565b606060008251905080604051908082528060200260200182016040528015610412578160200160208202803883390190505b50915073ffffffffffffffffffffffffffffffffffffffff871661043657506105ce565b60005b818110156105cb57600060608973ffffffffffffffffffffffffffffffffffffffff1662061a80600073ffffffffffffffffffffffffffffffffffffffff16636e79e133905060e01b8b8b8b8b898151811061049157fe5b60200260200101516040516024016104ac9493929190615454565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009094169390931790925290516105359190615376565b6000604051808303818686fa925050503d8060008114610571576040519150601f19603f3d011682016040523d82523d6000602084013e610576565b606091505b5090925090506000821561059b57818060200190516105989190810190614f1f565b90505b806105a8575050506105cb565b808685815181106105b557fe5b6020908102919091010152505050600101610439565b50505b95945050505050565b60608351604051908082528060200260200182016040528015610604578160200160208202803883390190505b50905060005b8451811461078457600060603073ffffffffffffffffffffffffffffffffffffffff1662030d40633b77ebae60e01b89868151811061064557fe5b602002602001015189878151811061065957fe5b6020026020010151896040516024016106749392919061578e565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009094169390931790925290516106fd9190615376565b6000604051808303818686fa925050503d8060008114610739576040519150601f19603f3d011682016040523d82523d6000602084013e61073e565b606091505b50915091508161074f576000610763565b808060200190516107639190810190614f1f565b84848151811061076f57fe5b6020908102919091010152505060010161060a565b509392505050565b60008251600014806107a057506080840151155b806107ad575060a0840151155b156107ba575060006103d9565b6107c2614622565b6040517f9d3fa4b900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff841690639d3fa4b99061081490889060040161577b565b60606040518083038186803b15801561082c57600080fd5b505afa158015610840573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061086491908101906150bd565b905060038151600681111561087557fe5b146108845760009150506103d9565b602081015185516040517f8171c40700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff861692638171c407926108dd928990600401615625565b60206040518083038186803b1580156108f557600080fd5b505afa158015610909573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061092d9190810190614eab565b61093b5760009150506103d9565b6040517f6070410800000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff8516906360704108906109b0907ff47261b0000000000000000000000000000000000000000000000000000000009060040161565a565b60206040518083038186803b1580156109c857600080fd5b505afa1580156109dc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610a009190810190614930565b90506000610a12876101400151613093565b905073ffffffffffffffffffffffffffffffffffffffff8116610a3b57600093505050506103d9565b6000808860c0015111610a4f576000610a5d565b610a5d886101800151613093565b90506000610a7c85604001518a60a0015161313090919063ffffffff16565b90508095506000610ae7828b60a001518673ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614610ac9578c60800151610ae2565b60c08d015160808e0151610ae29163ffffffff61315416565b613170565b8a516040517f70a08231000000000000000000000000000000000000000000000000000000008152919250600091610c3d9173ffffffffffffffffffffffffffffffffffffffff8816916370a0823191610b4391600401615392565b60206040518083038186803b158015610b5b57600080fd5b505afa158015610b6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610b939190810190614f1f565b8c516040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff89169163dd62ed3e91610be891908c906004016153ec565b60206040518083038186803b158015610c0057600080fd5b505afa158015610c14573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610c389190810190614f1f565b6131b0565b905081811015610c5557610c528183856131c6565b97505b8473ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614158015610ca6575073ffffffffffffffffffffffffffffffffffffffff841615155b15610dd0578a516040517f70a08231000000000000000000000000000000000000000000000000000000008152600091610daa9173ffffffffffffffffffffffffffffffffffffffff8816916370a0823191610d059190600401615392565b60206040518083038186803b158015610d1d57600080fd5b505afa158015610d31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610d559190810190614f1f565b8d516040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff89169163dd62ed3e91610be891908d906004016153ec565b90508b60c00151811015610dce57610dcb89610c38838f60c00151886131c6565b98505b505b505050505050509392505050565b606060008251905080604051908082528060200260200182016040528015610e10578160200160208202803883390190505b50915060005b81811015610f8d5760006060886000015173ffffffffffffffffffffffffffffffffffffffff16620927c08a602001518a8a8a8881518110610e5457fe5b6020026020010151604051602401610e6e939291906156b6565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909416939093179092529051610ef79190615376565b6000604051808303818686fa925050503d8060008114610f33576040519150601f19603f3d011682016040523d82523d6000602084013e610f38565b606091505b50909250905060008215610f5d5781806020019051610f5a9190810190614f1f565b90505b80610f6a57505050610f8d565b80868581518110610f7757fe5b6020908102919091010152505050600101610e16565b5050949350505050565b6060610fa38385612cd3565b8151604080518281526020808402820101909152818015610fce578160200160208202803883390190505b50915060005b8181101561116b5760006060610fe86131fc565b73ffffffffffffffffffffffffffffffffffffffff16620f4240600073ffffffffffffffffffffffffffffffffffffffff1663ff1fd974905060e01b8a8a8a888151811061103257fe5b602002602001015160405160240161104c9392919061548b565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009094169390931790925290516110d59190615376565b6000604051808303818686fa925050503d8060008114611111576040519150601f19603f3d011682016040523d82523d6000602084013e611116565b606091505b5090925090506000821561113b57818060200190516111389190810190614f1f565b90505b806111485750505061116b565b8086858151811061115557fe5b6020908102919091010152505050600101610fd4565b50509392505050565b60606111808385612cd3565b81516040805182815260208084028201019091528180156111ab578160200160208202803883390190505b50915060006111b8613214565b90506000805b8381101561129c578273ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16148061122b57508273ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff16145b156112555761124e888888848151811061124157fe5b602002602001015161322c565b915061127c565b611266888488848151811061124157fe5b9150811561127c5761127983888461322c565b91505b8185828151811061128957fe5b60209081029190910101526001016111be565b505050509392505050565b60606112b38385612cd3565b81516040805182815260208084028201019091528180156112de578160200160208202803883390190505b50915060006112eb613214565b73ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff161461132b5761132686613a4c565b61132e565b60005b9050600061133a613214565b73ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff161461137a5761137586613a4c565b61137d565b60005b905060005b8381101561129c576001611394613214565b73ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16141561142b57865161140a9085907f2640f62c00000000000000000000000000000000000000000000000000000000908a90869081106113fd57fe5b6020026020010151613ade565b87848151811061141657fe5b60200260200101819350828152505050611548565b611433613214565b73ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff16141561149c57865161140a9084907f59e9486200000000000000000000000000000000000000000000000000000000908a90869081106113fd57fe5b86516000906114d59085907f59e9486200000000000000000000000000000000000000000000000000000000908b90879081106113fd57fe5b92509050801561152b5761150a857f2640f62c0000000000000000000000000000000000000000000000000000000083613ade565b88858151811061151657fe5b60200260200101819450828152505050611546565b600087848151811061153957fe5b6020026020010181815250505b505b80611553575061129c565b50600101611382565b60606115688385612cd3565b8151604080518281526020808402820101909152818015611593578160200160208202803883390190505b50915060005b8181101561116b57600060606115ad6131fc565b73ffffffffffffffffffffffffffffffffffffffff16620f4240600073ffffffffffffffffffffffffffffffffffffffff1663144a2752905060e01b898b8a88815181106115f757fe5b60200260200101516040516024016116119392919061548b565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090941693909317909252905161169a9190615376565b6000604051808303818686fa925050503d80600081146116d6576040519150601f19603f3d011682016040523d82523d6000602084013e6116db565b606091505b5090925090506000821561170057818060200190516116fd9190810190614f1f565b90505b8061170d5750505061116b565b8086858151811061171a57fe5b6020908102919091010152505050600101611599565b60606103d66040518060600160405280856040516020016117519190615392565b6040516020818303038152906040528152602001866040516020016117769190615392565b6040516020818303038152906040528152602001613c2781525083612ebe565b6040805182815260208084028201019091526060908280156117cc57816020015b60608152602001906001900390816117b75790505b50905060005b808314611958578383828181106117e557fe5b6020028201905080357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe13684900301811261181f57600080fd5b9091016020810191503567ffffffffffffffff81111561183e57600080fd5b3681900382131561184e57600080fd5b1515905061185b57611950565b600060603086868581811061186c57fe5b6020028201905080357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1368490030181126118a657600080fd5b9091016020810191503567ffffffffffffffff8111156118c557600080fd5b368190038213156118d557600080fd5b6040516118e3929190615366565b600060405180830381855afa9150503d806000811461191e576040519150601f19603f3d011682016040523d82523d6000602084013e611923565b606091505b50915091508161193557805160208201fd5b8084848151811061194257fe5b602002602001018190525050505b6001016117d2565b5092915050565b606061196b8385612cd3565b8151604080518281526020808402820101909152818015611996578160200160208202803883390190505b50915060006119a3613214565b73ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16146119e3576119de86613a4c565b6119e6565b60005b905060006119f2613214565b73ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614611a3257611a2d86613a4c565b611a35565b60005b905060005b8381101561129c576001611a4c613214565b73ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff161415611ad6578651611ab59085907f95b68fe700000000000000000000000000000000000000000000000000000000908a90869081106113fd57fe5b878481518110611ac157fe5b60200260200101819350828152505050611bf3565b611ade613214565b73ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff161415611b47578651611ab59084907fcd7724c300000000000000000000000000000000000000000000000000000000908a90869081106113fd57fe5b8651600090611b809086907f95b68fe700000000000000000000000000000000000000000000000000000000908b90879081106113fd57fe5b925090508015611bd657611bb5847fcd7724c30000000000000000000000000000000000000000000000000000000083613ade565b888581518110611bc157fe5b60200260200101819450828152505050611bf1565b6000878481518110611be457fe5b6020026020010181815250505b505b80611bfe575061129c565b50600101611a3a565b60408401516060907fffffffff0000000000000000000000000000000000000000000000000000000016611ca1576040805160608101909152611c9a9080611c538689608084016156d4565b60405160208183030381529060405281526020018688604051602001611c7a9291906156d4565b6040516020818303038152906040528152602001613db081525083612ebe565b9050611e49565b8151604080518281526020808402820101909152818015611ccc578160200160208202803883390190505b50915060005b81811015610f8d5760006060886000015173ffffffffffffffffffffffffffffffffffffffff16620927c08a604001518a8a8a8881518110611d1057fe5b6020026020010151604051602401611d2a939291906156b6565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909416939093179092529051611db39190615376565b6000604051808303818686fa925050503d8060008114611def576040519150601f19603f3d011682016040523d82523d6000602084013e611df4565b606091505b50909250905060008215611e195781806020019051611e169190810190614f1f565b90505b80611e2657505050610f8d565b80868581518110611e3357fe5b6020908102919091010152505050600101611cd2565b949350505050565b606060008251905080604051908082528060200260200182016040528015611e83578160200160208202803883390190505b5091506000611e93878787612478565b905073ffffffffffffffffffffffffffffffffffffffff8116611eb85750611e499050565b60005b8281101561204b57600060608373ffffffffffffffffffffffffffffffffffffffff1662061a80600073ffffffffffffffffffffffffffffffffffffffff1663343fbcdd905060e01b8b8b8b8881518110611f1257fe5b6020026020010151604051602401611f2c9392919061548b565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909416939093179092529051611fb59190615376565b6000604051808303818686fa925050503d8060008114611ff1576040519150601f19603f3d011682016040523d82523d6000602084013e611ff6565b606091505b5090925090506000821561201b57818060200190516120189190810190614f1f565b90505b806120285750505061204b565b8087858151811061203557fe5b6020908102919091010152505050600101611ebb565b505050949350505050565b6040805160608181019092526105ce90806120758689608084016153ec565b6040516020818303038152906040528152602001868860405160200161209c9291906153ec565b6040516020818303038152906040528152602001613f4781525083612ebe565b6060600082519050806040519080825280602002602001820160405280156120ee578160200160208202803883390190505b50915060005b8181101561229f5760006060612108613fc1565b73ffffffffffffffffffffffffffffffffffffffff16620249f0600073ffffffffffffffffffffffffffffffffffffffff1663d06ca61f905060e01b88868151811061215057fe5b60200260200101518a60405160240161216a9291906157e3565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009094169390931790925290516121f39190615376565b6000604051808303818686fa925050503d806000811461222f576040519150601f19603f3d011682016040523d82523d6000602084013e612234565b606091505b5090925090506000821561227457818060200190516122569190810190614cea565b60018951038151811061226557fe5b6020026020010151905061227c565b50505061229f565b8086858151811061228957fe5b60209081029190910101525050506001016120f4565b505092915050565b6060600082519050806040519080825280602002602001820160405280156122d9578160200160208202803883390190505b50915060005b8181101561116b57600060606122f3613fd9565b73ffffffffffffffffffffffffffffffffffffffff16620c3500600073ffffffffffffffffffffffffffffffffffffffff166372ea9076905060e01b8a8a8a888151811061233d57fe5b60200260200101516040516024016123579392919061548b565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009094169390931790925290516123e09190615376565b6000604051808303818686fa925050503d806000811461241c576040519150601f19603f3d011682016040523d82523d6000602084013e612421565b606091505b5090925090506000821561244857818060200190516124439190810190614ec7565b925050505b806124555750505061116b565b8086858151811061246257fe5b60209081029190910101525050506001016122df565b600073ffffffffffffffffffffffffffffffffffffffff841661249d575060006103d9565b6040516060907f153f599700000000000000000000000000000000000000000000000000000000906124d590869086906024016153ec565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050600060608673ffffffffffffffffffffffffffffffffffffffff168360405161255d9190615376565b600060405180830381855afa9150503d8060008114612598576040519150601f19603f3d011682016040523d82523d6000602084013e61259d565b606091505b50915091508180156125b0575080516020145b156125ca576125c081600c613ff1565b93505050506103d9565b5050509392505050565b60606103d66040518060600160405280856040516020016125f59190615392565b60405160208183030381529060405281526020018660405160200161261a9190615392565b604051602081830303815290604052815260200161403181525083612ebe565b60606126468385612cd3565b8151604080518281526020808402820101909152818015612671578160200160208202803883390190505b509150600061267e613214565b73ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16146126b657856126b9565b60005b905060006126c5613214565b73ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16146126fd5785612700565b60005b9050600061270c614093565b73ffffffffffffffffffffffffffffffffffffffff1663901754d784846040518363ffffffff1660e01b81526004016127469291906153ec565b60206040518083038186803b15801561275e57600080fd5b505afa158015612772573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506127969190810190614930565b905073ffffffffffffffffffffffffffffffffffffffff81166127bd57506103d992505050565b600073ffffffffffffffffffffffffffffffffffffffff841615612882576040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8516906370a082319061282d908590600401615392565b60206040518083038186803b15801561284557600080fd5b505afa158015612859573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061287d9190810190614f1f565b61289b565b8173ffffffffffffffffffffffffffffffffffffffff16315b905060005b85811015612a50578781815181106128b457fe5b60200260200101518210156128c857612a50565b600060608473ffffffffffffffffffffffffffffffffffffffff16620249f0600073ffffffffffffffffffffffffffffffffffffffff16631e1401f8905060e01b89898e888151811061291757fe5b60200260200101516040516024016129319392919061548b565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009094169390931790925290516129ba9190615376565b6000604051808303818686fa925050503d80600081146129f6576040519150601f19603f3d011682016040523d82523d6000602084013e6129fb565b606091505b50909250905060008215612a205781806020019051612a1d9190810190614f1f565b90505b80612a2d57505050612a50565b808a8581518110612a3a57fe5b60209081029190910101525050506001016128a0565b5050505050509392505050565b606060008251905080604051908082528060200260200182016040528015612a8f578160200160208202803883390190505b50915060005b8181101561229f5760006060612aa9613fc1565b73ffffffffffffffffffffffffffffffffffffffff16620249f0600073ffffffffffffffffffffffffffffffffffffffff16631f00ca74905060e01b888681518110612af157fe5b60200260200101518a604051602401612b0b9291906157e3565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909416939093179092529051612b949190615376565b6000604051808303818686fa925050503d8060008114612bd0576040519150601f19603f3d011682016040523d82523d6000602084013e612bd5565b606091505b509092509050600082156122745781806020019051612bf79190810190614cea565b600081518110612c0357fe5b6020026020010151905080868581518110612c1a57fe5b6020908102919091010152505050600101612a95565b6060612c3d8484846105d7565b905060005b845181101561078457818181518110612c5757fe5b6020026020010151600014612ccb57612cb2828281518110612c7557fe5b6020026020010151868381518110612c8957fe5b602002602001015160a00151878481518110612ca157fe5b6020026020010151608001516131c6565b828281518110612cbe57fe5b6020026020010181815250505b600101612c42565b8073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612d42576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d39906156ec565b60405180910390fd5b5050565b60008060603073ffffffffffffffffffffffffffffffffffffffff16634cb8e25360e01b87806020019051612d7e9190810190614930565b87806020019051612d929190810190614930565b612d9b886140ab565b604051602401612dad939291906153b3565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909416939093179092529051612e369190615376565b600060405180830381855afa9150503d8060008114612e71576040519150601f19603f3d011682016040523d82523d6000602084013e612e76565b606091505b509150915081612e8b576000925050506103d9565b80806020019051612e9f9190810190614cea565b600081518110612eab57fe5b6020026020010151925050509392505050565b60608151604051908082528060200260200182016040528015612eeb578160200160208202803883390190505b509050815160001415612efd5761308d565b6000612f2e8460000151856020015185600081518110612f1957fe5b6020026020010151876040015163ffffffff16565b905080612f3b575061308d565b6000612f588560200151866000015184886040015163ffffffff16565b905080612f67575061308d9050565b60005b84518110156130895760005b600581101561304b57612f9d868381518110612f8e57fe5b602002602001015184866131c6565b9350612fae612715612710866131c6565b93506000612fcd88602001518960000151878b6040015163ffffffff16565b905080612fda575061304b565b809350868381518110612fe957fe5b6020026020010151841061304257600087848151811061300557fe5b602002602001015161271089868151811061301c57fe5b60200260200101518703028161302e57fe5b0490506005811161304057505061304b565b505b50600101612f76565b5061306a85828151811061305b57fe5b602002602001015183856131c6565b84828151811061307657fe5b6020908102919091010152600101612f6a565b5050505b92915050565b60008151600014156130a75750600061312b565b8151602414158061310a57507ff47261b0000000000000000000000000000000000000000000000000000000006130e583600063ffffffff6140ec16565b7fffffffff000000000000000000000000000000000000000000000000000000001614155b156131175750600061312b565b61312882601063ffffffff613ff116565b90505b919050565b60008282111561314e5761314e61314960028585614138565b6141dd565b50900390565b6000828201838110156103d9576103d961314960008686614138565b600061317d8484846141e5565b156131905761319061314985858561424b565b6103d6836131a4868563ffffffff61426a16565b9063ffffffff61429b16565b60008183106131bf57816103d9565b5090919050565b60006103d6836131a46131e082600163ffffffff61313016565b6131f0888763ffffffff61426a16565b9063ffffffff61315416565b73794e6e91555438afc3ccf1c5076a74f42133d08d90565b73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc290565b60008060006132396142c5565b9150915060608173ffffffffffffffffffffffffffffffffffffffff16633d3dc52c613263613214565b73ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff161461329b578861329d565b875b6040518263ffffffff1660e01b81526004016132b99190615392565b60006040518083038186803b1580156132d157600080fd5b505afa1580156132e5573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261332b9190810190614cea565b604080516000808252602082019092529192505b82518110156135e4576040517f106e9a4b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85169063106e9a4b906133ae907331e085afd48a1d6e51cc193153d625e8f0514c7f90600401615392565b60206040518083038186803b1580156133c657600080fd5b505afa1580156133da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506133fe9190810190614f1f565b83828151811061340a57fe5b602002602001015114806134e557506040517f106e9a4b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85169063106e9a4b9061347f907310908c875d865c66f271f5d3949848971c9595c990600401615392565b60206040518083038186803b15801561349757600080fd5b505afa1580156134ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506134cf9190810190614f1f565b8382815181106134db57fe5b6020026020010151145b806135b757506040517f106e9a4b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85169063106e9a4b9061355190731e158c0e93c30d24e918ef83d1e0be23595c3c0f90600401615392565b60206040518083038186803b15801561356957600080fd5b505afa15801561357d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506135a19190810190614f1f565b8382815181106135ad57fe5b6020026020010151145b156135dc576135d9828483815181106135cc57fe5b60200260200101516143f9565b91505b60010161333f565b5060606135ef613214565b73ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff161415613706578473ffffffffffffffffffffffffffffffffffffffff166381efcbdd89600285600060405190808252806020026020018201604052801561366d578160200160208202803883390190505b506040518563ffffffff1660e01b815260040161368d949392919061550f565b60006040518083038186803b1580156136a557600080fd5b505afa1580156136b9573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526136ff9190810190614f37565b90506137e6565b8473ffffffffffffffffffffffffffffffffffffffff166381efcbdd8a6002856000604051908082528060200260200182016040528015613751578160200160208202803883390190505b506040518563ffffffff1660e01b8152600401613771949392919061550f565b60006040518083038186803b15801561378957600080fd5b505afa15801561379d573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526137e39190810190614f37565b90505b600060606137f261448f565b73ffffffffffffffffffffffffffffffffffffffff166216e3607f418436bc00000000000000000000000000000000000000000000000000000000613835613214565b73ffffffffffffffffffffffffffffffffffffffff168e73ffffffffffffffffffffffffffffffffffffffff161461386d578d613883565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee5b61388b613214565b73ffffffffffffffffffffffffffffffffffffffff168e73ffffffffffffffffffffffffffffffffffffffff16146138c3578d6138d9565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee5b8d6000896040516024016138f19594939291906154bc565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090941693909317909252905161397a9190615376565b6000604051808303818686fa925050503d80600081146139b6576040519150601f19603f3d011682016040523d82523d6000602084013e6139bb565b606091505b509092509050600082156139e457818060200190516139dd9190810190614f1f565b90506139f5565b6000985050505050505050506103d9565b6000613a008c6144a7565b60ff1690506000613a108e6144a7565b60ff169050670de0b6b3a764000081600a0a83600a0a8e86020281613a3157fe5b0481613a3957fe5b049e9d5050505050505050505050505050565b6000613a566144b2565b73ffffffffffffffffffffffffffffffffffffffff166306f2bf62836040518263ffffffff1660e01b8152600401613a8e9190615392565b60206040518083038186803b158015613aa657600080fd5b505afa158015613aba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506131289190810190614930565b60008073ffffffffffffffffffffffffffffffffffffffff8516613b0157613c1f565b60608573ffffffffffffffffffffffffffffffffffffffff16620249f08686604051602401613b3091906157da565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909416939093179092529051613bb99190615376565b6000604051808303818686fa925050503d8060008114613bf5576040519150601f19603f3d011682016040523d82523d6000602084013e613bfa565b606091505b5090925090508115613c1d5780806020019051613c1a9190810190614f1f565b92505b505b935093915050565b60008084806020019051613c3e9190810190614930565b9050600084806020019051613c569190810190614930565b905060006060307fcdb3b4af000000000000000000000000000000000000000000000000000000008585613c898a6140ab565b604051602401613c9b939291906153b3565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909416939093179092529051613d249190615376565b600060405180830381855afa9150503d8060008114613d5f576040519150601f19603f3d011682016040523d82523d6000602084013e613d64565b606091505b509150915081613d7b5760009450505050506103d9565b80806020019051613d8f9190810190614cea565b600081518110613d9b57fe5b60200260200101519450505050509392505050565b600080613dbb614644565b85806020019051613dcf9190810190614f86565b91509150600085806020019051613de99190810190614f6a565b905060006060307f40bc03ae00000000000000000000000000000000000000000000000000000000858786613e1d8c6140ab565b604051602401613e309493929190615749565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909416939093179092529051613eb99190615376565b600060405180830381855afa9150503d8060008114613ef4576040519150601f19603f3d011682016040523d82523d6000602084013e613ef9565b606091505b509150915081613f11576000955050505050506103d9565b80806020019051613f259190810190614cea565b600081518110613f3157fe5b6020026020010151955050505050509392505050565b600080600085806020019051613f60919081019061494c565b91509150600085806020019051613f7a9190810190614930565b905060006060307f9f76ad3500000000000000000000000000000000000000000000000000000000858786613fae8c6140ab565b604051602401613e309493929190615413565b73f164fc0ec4e93095b804a4795bbe1e041497b92a90565b73e2f2a5c287993345a840db3b0845fbc70f5935a590565b600081601401835110156140125761401261314960048551856014016144ca565b50016014015173ffffffffffffffffffffffffffffffffffffffff1690565b600080848060200190516140489190810190614930565b90506000848060200190516140609190810190614930565b905060006060307fbc61a695000000000000000000000000000000000000000000000000000000008585613c898a6140ab565b7371cd6666064c3a1354a3b4dca5fa1e2d3ee7d30390565b6040805160018082528183019092526060916020808301908038833901905050905081816000815181106140db57fe5b602002602001018181525050919050565b6000816004018351101561410d5761410d61314960038551856004016144ca565b5001602001517fffffffff000000000000000000000000000000000000000000000000000000001690565b606063e946c1bb60e01b84848460405160240161415793929190615687565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915290509392505050565b805160208201fd5b6000826141f7576141f76131496144e9565b811580614202575083155b1561420f575060006103d9565b6000838061421957fe5b858409905061422e858463ffffffff61426a16565b614240826103e863ffffffff61426a16565b101595945050505050565b606063339f3de260e01b84848460405160240161415793929190615847565b6000826142795750600061308d565b8282028284828161428657fe5b04146103d9576103d961314960018686614138565b6000816142b1576142b161314960038585614138565b60008284816142bc57fe5b04949350505050565b6000806142d061448f565b73ffffffffffffffffffffffffffffffffffffffff1663b78b842d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561431557600080fd5b505afa158015614329573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061434d9190810190614930565b73ffffffffffffffffffffffffffffffffffffffff1663c3a2a93a6040518163ffffffff1660e01b815260040160006040518083038186803b15801561439257600080fd5b505afa1580156143a6573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526143ec9190810190614b28565b5091955093505050509091565b60608251600101604051908082528060200260200182016040528015614429578160200160208202803883390190505b50905060005b835181101561446b5783818151811061444457fe5b602002602001015182828151811061445857fe5b602090810291909101015260010161442f565b50818160018351038151811061447d57fe5b60200260200101818152505092915050565b739aab3f75489902f3a48495025729a0af77d4b11e90565b600061312882614520565b73c0a47dfe034b400b47bdad5fecda2621de6c4d9590565b6060632800659560e01b848484604051602401614157939291906156a8565b60408051808201909152600481527fa791837c00000000000000000000000000000000000000000000000000000000602082015290565b600060129050600060608373ffffffffffffffffffffffffffffffffffffffff166040518060400160405280600481526020017f313ce567000000000000000000000000000000000000000000000000000000008152506040516145849190615376565b600060405180830381855afa9150503d80600081146145bf576040519150601f19603f3d011682016040523d82523d6000602084013e6145c4565b606091505b50915091508180156145d7575080516020145b156145ea576145e78160006145f1565b92505b5050919050565b60006103d98383600081602001835110156146195761461961314960058551856020016144ca565b50016020015190565b6040805160608101909152806000815260006020820181905260409091015290565b604080516060810182526000808252602082018190529181019190915290565b803561308d81615923565b805161308d81615923565b600082601f83011261468a578081fd5b813561469d61469882615884565b61585d565b8181529150602080830190840160005b838110156146da576146c5876020843589010161474d565b835260209283019291909101906001016146ad565b5050505092915050565b600082601f8301126146f4578081fd5b813561470261469882615884565b81815291506020808301908481018184028601820187101561472357600080fd5b60005b8481101561474257813584529282019290820190600101614726565b505050505092915050565b600082601f83011261475d578081fd5b813561476b614698826158a4565b915080825283602082850101111561478257600080fd5b8060208401602084013760009082016020015292915050565b600082601f8301126147ab578081fd5b81516147b9614698826158a4565b91508082528360208285010111156147d057600080fd5b6119588160208401602086016158e6565b60006101c08083850312156147f4578182fd5b6147fd8161585d565b91505061480a8383614664565b81526148198360208401614664565b602082015261482b8360408401614664565b604082015261483d8360608401614664565b60608201526080820135608082015260a082013560a082015260c082013560c082015260e082013560e08201526101008083013581830152506101208083013581830152506101408083013567ffffffffffffffff8082111561489f57600080fd5b6148ab8683870161474d565b838501526101609250828501359150808211156148c757600080fd5b6148d38683870161474d565b838501526101809250828501359150808211156148ef57600080fd5b6148fb8683870161474d565b838501526101a092508285013591508082111561491757600080fd5b506149248582860161474d565b82840152505092915050565b600060208284031215614941578081fd5b81516103d981615923565b6000806040838503121561495e578081fd5b825161496981615923565b602084015190925061497a81615923565b809150509250929050565b600080600060608486031215614999578081fd5b83356149a481615923565b925060208401356149b481615923565b915060408401356149c481615923565b809150509250925092565b600080600080600060a086880312156149e6578283fd5b85356149f181615923565b94506020860135614a0181615923565b93506040860135614a1181615923565b92506060860135614a2181615923565b9150608086013567ffffffffffffffff811115614a3c578182fd5b614a48888289016146e4565b9150509295509295909350565b60008060008060808587031215614a6a578182fd5b8435614a7581615923565b93506020850135614a8581615923565b92506040850135614a9581615923565b9150606085013567ffffffffffffffff811115614ab0578182fd5b614abc878288016146e4565b91505092959194509250565b600080600060608486031215614adc578081fd5b8335614ae781615923565b92506020840135614af781615923565b9150604084013567ffffffffffffffff811115614b12578182fd5b614b1e868287016146e4565b9150509250925092565b60008060008060008060c08789031215614b40578384fd5b8651614b4b81615923565b80965050602080880151614b5e81615923565b6040890151909650614b6f81615923565b6060890151909550614b8081615923565b6080890151909450614b9181615923565b60a089015190935067ffffffffffffffff811115614bad578283fd5b8089018a601f820112614bbe578384fd5b80519150614bce61469883615884565b82815283810190828501858502840186018e1015614bea578687fd5b8693505b84841015614c1457614c008e8261466f565b835260019390930192918501918501614bee565b5080955050505050509295509295509295565b60008060408385031215614c39578182fd5b823567ffffffffffffffff80821115614c50578384fd5b81850186601f820112614c61578485fd5b80359250614c7161469884615884565b80848252602080830192508084018a828389028701011115614c91578889fd5b8894505b86851015614cbc578035614ca881615923565b845260019490940193928101928101614c95565b509096508701359350505080821115614cd3578283fd5b50614ce0858286016146e4565b9150509250929050565b60006020808385031215614cfc578182fd5b825167ffffffffffffffff811115614d12578283fd5b80840185601f820112614d23578384fd5b80519150614d3361469883615884565b8281528381019082850185850284018601891015614d4f578687fd5b8693505b84841015614d71578051835260019390930192918501918501614d53565b50979650505050505050565b60008060208385031215614d8f578182fd5b823567ffffffffffffffff80821115614da6578384fd5b81850186601f820112614db7578485fd5b8035925081831115614dc7578485fd5b8660208085028301011115614dda578485fd5b60200196919550909350505050565b600080600060608486031215614dfd578081fd5b833567ffffffffffffffff80821115614e14578283fd5b81860187601f820112614e25578384fd5b80359250614e3561469884615884565b83815260208082019190838101875b87811015614e6d57614e5b8d8484358901016147e1565b85529382019390820190600101614e44565b50919850890135945050505080821115614e85578283fd5b50614e928682870161467a565b925050614ea28560408601614664565b90509250925092565b600060208284031215614ebc578081fd5b81516103d981615945565b600080600060608486031215614edb578081fd5b8351614ee681615945565b602085015190935067ffffffffffffffff811115614f02578182fd5b614f0e8682870161479b565b925050604084015190509250925092565b600060208284031215614f30578081fd5b5051919050565b600060208284031215614f48578081fd5b815167ffffffffffffffff811115614f5e578182fd5b611e498482850161479b565b600060208284031215614f7b578081fd5b81516103d981615981565b60008060808385031215614f98578182fd5b8251614fa381615981565b915060608385037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0011215614fd6578081fd5b614fe0606061585d565b6020840151614fee81615923565b81526040840151614ffe81615953565b6020820152606084015161501181615953565b6040820152919491935090915050565b60008060008084860360c0811215615037578283fd5b6060811215615044578283fd5b5061504f606061585d565b853561505a81615923565b8152602086013561506a81615953565b6020820152604086013561507d81615953565b60408201529350606085013561509281615981565b925060808501356150a281615981565b915060a085013567ffffffffffffffff811115614ab0578182fd5b6000606082840312156150ce578081fd5b6150d8606061585d565b8251600781106150e6578283fd5b8152602083810151908201526040928301519281019290925250919050565b600080600060608486031215615119578081fd5b833567ffffffffffffffff80821115615130578283fd5b61513c878388016147e1565b94506020860135915080821115615151578283fd5b5061515e8682870161474d565b92505060408401356149c481615923565b73ffffffffffffffffffffffffffffffffffffffff169052565b6000815180845260208401935060208301825b828110156151ba57815186526020958601959091019060010161519c565b5093949350505050565b600081518084526151dc8160208601602086016158e6565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b805173ffffffffffffffffffffffffffffffffffffffff1682526020808201517fffffffff000000000000000000000000000000000000000000000000000000009081169184019190915260409182015116910152565b60006101c061527584845161516f565b6020830151615287602086018261516f565b50604083015161529a604086018261516f565b5060608301516152ad606086018261516f565b506080830151608085015260a083015160a085015260c083015160c085015260e083015160e0850152610100808401518186015250610120808401518186015250610140808401518282870152615306838701826151c4565b9150506101609150818401518582038387015261532382826151c4565b92505050610180808401518583038287015261533f83826151c4565b9150506101a09150818401518582038387015261535c82826151c4565b9695505050505050565b6000828483379101908152919050565b600082516153888184602087016158e6565b9190910192915050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b600073ffffffffffffffffffffffffffffffffffffffff8086168352808516602084015250606060408301526105ce6060830184615189565b73ffffffffffffffffffffffffffffffffffffffff92831681529116602082015260400190565b600073ffffffffffffffffffffffffffffffffffffffff808716835280861660208401528085166040840152506080606083015261535c6080830184615189565b73ffffffffffffffffffffffffffffffffffffffff9485168152928416602084015292166040820152606081019190915260800190565b73ffffffffffffffffffffffffffffffffffffffff9384168152919092166020820152604081019190915260600190565b600073ffffffffffffffffffffffffffffffffffffffff808816835280871660208401525084604083015260ff8416606083015260a0608083015261550460a08301846151c4565b979650505050505050565b60006080820173ffffffffffffffffffffffffffffffffffffffff8716835261553786615916565b60208381018790526080604085015285519182905285019060a0840190835b81811015615574578351835260209384019390920191600101615556565b505083810360608501526155888186615189565b98975050505050505050565b6000602080830181845280855180835260408601915060408482028701019250838701855b82811015615605577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08886030184526155f38583516151c4565b945092850192908501906001016155b9565b5092979650505050505050565b6000602082526103d96020830184615189565b600084825273ffffffffffffffffffffffffffffffffffffffff84166020830152606060408301526105ce60608301846151c4565b7fffffffff0000000000000000000000000000000000000000000000000000000091909116815260200190565b6060810161569485615916565b938152602081019290925260409091015290565b606081016008851061569457fe5b600f93840b81529190920b6020820152604081019190915260600190565b600f83900b8152608081016103d9602083018461520e565b60208082526025908201527f455243323042726964676553616d706c65722f494e56414c49445f544f4b454e60408201527f5f50414952000000000000000000000000000000000000000000000000000000606082015260800190565b6000615755828761520e565b84600f0b606083015283600f0b608083015260c060a083015261535c60c0830184615189565b6000602082526103d96020830184615265565b6000606082526157a16060830186615265565b82810360208401526157b381866151c4565b91505073ffffffffffffffffffffffffffffffffffffffff83166040830152949350505050565b90815260200190565b60006040820184835260406020840152808451808352606085019150602086019250835b8181101561583b57835173ffffffffffffffffffffffffffffffffffffffff16835260209384019390920191600101615807565b50909695505050505050565b9283526020830191909152604082015260600190565b60405181810167ffffffffffffffff8111828210171561587c57600080fd5b604052919050565b600067ffffffffffffffff82111561589a578081fd5b5060209081020190565b600067ffffffffffffffff8211156158ba578081fd5b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b60005b838110156159015781810151838201526020016158e9565b83811115615910576000848401525b50505050565b6004811061592057fe5b50565b73ffffffffffffffffffffffffffffffffffffffff8116811461592057600080fd5b801515811461592057600080fd5b7fffffffff000000000000000000000000000000000000000000000000000000008116811461592057600080fd5b80600f0b811461592057600080fdfea365627a7a723158203b0a4635276f4d27722f1ce880e49e8e08c15c6b2e5955adfb69e021b3f9af266c6578706572696d656e74616cf564736f6c63430005110040",
                "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x182 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6DD6B78D GT PUSH2 0xD8 JUMPI DUP1 PUSH4 0xBC61A695 GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xCDB3B4AF GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xCDB3B4AF EQ PUSH2 0x32D JUMPI DUP1 PUSH4 0xE68248F7 EQ PUSH2 0x340 JUMPI DUP1 PUSH4 0xE9A8E442 EQ PUSH2 0x353 JUMPI PUSH2 0x182 JUMP JUMPDEST DUP1 PUSH4 0xBC61A695 EQ PUSH2 0x2E7 JUMPI DUP1 PUSH4 0xC7F7142E EQ PUSH2 0x2FA JUMPI DUP1 PUSH4 0xCA7893BA EQ PUSH2 0x31A JUMPI PUSH2 0x182 JUMP JUMPDEST DUP1 PUSH4 0x9F76AD35 GT PUSH2 0xBD JUMPI DUP1 PUSH4 0x9F76AD35 EQ PUSH2 0x2AE JUMPI DUP1 PUSH4 0xA2C28D4B EQ PUSH2 0x2C1 JUMPI DUP1 PUSH4 0xABFFC761 EQ PUSH2 0x2D4 JUMPI PUSH2 0x182 JUMP JUMPDEST DUP1 PUSH4 0x6DD6B78D EQ PUSH2 0x288 JUMPI DUP1 PUSH4 0x9209483B EQ PUSH2 0x29B JUMPI PUSH2 0x182 JUMP JUMPDEST DUP1 PUSH4 0x4703A7E6 GT PUSH2 0x13A JUMPI DUP1 PUSH4 0x64EE6ADE GT PUSH2 0x114 JUMPI DUP1 PUSH4 0x64EE6ADE EQ PUSH2 0x242 JUMPI DUP1 PUSH4 0x67B881E7 EQ PUSH2 0x255 JUMPI DUP1 PUSH4 0x68BE3CF2 EQ PUSH2 0x268 JUMPI PUSH2 0x182 JUMP JUMPDEST DUP1 PUSH4 0x4703A7E6 EQ PUSH2 0x209 JUMPI DUP1 PUSH4 0x4CB8E253 EQ PUSH2 0x21C JUMPI DUP1 PUSH4 0x60EE052A EQ PUSH2 0x22F JUMPI PUSH2 0x182 JUMP JUMPDEST DUP1 PUSH4 0x39B085AD GT PUSH2 0x16B JUMPI DUP1 PUSH4 0x39B085AD EQ PUSH2 0x1C3 JUMPI DUP1 PUSH4 0x3B77EBAE EQ PUSH2 0x1D6 JUMPI DUP1 PUSH4 0x40BC03AE EQ PUSH2 0x1F6 JUMPI PUSH2 0x182 JUMP JUMPDEST DUP1 PUSH4 0xCC6600B EQ PUSH2 0x187 JUMPI DUP1 PUSH4 0x2D753AA4 EQ PUSH2 0x1B0 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x19A PUSH2 0x195 CALLDATASIZE PUSH1 0x4 PUSH2 0x4AC8 JUMP JUMPDEST PUSH2 0x366 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1A7 SWAP2 SWAP1 PUSH2 0x5612 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x19A PUSH2 0x1BE CALLDATASIZE PUSH1 0x4 PUSH2 0x49CF JUMP JUMPDEST PUSH2 0x3E0 JUMP JUMPDEST PUSH2 0x19A PUSH2 0x1D1 CALLDATASIZE PUSH1 0x4 PUSH2 0x4DE9 JUMP JUMPDEST PUSH2 0x5D7 JUMP JUMPDEST PUSH2 0x1E9 PUSH2 0x1E4 CALLDATASIZE PUSH1 0x4 PUSH2 0x5105 JUMP JUMPDEST PUSH2 0x78C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1A7 SWAP2 SWAP1 PUSH2 0x57DA JUMP JUMPDEST PUSH2 0x19A PUSH2 0x204 CALLDATASIZE PUSH1 0x4 PUSH2 0x5021 JUMP JUMPDEST PUSH2 0xDDE JUMP JUMPDEST PUSH2 0x19A PUSH2 0x217 CALLDATASIZE PUSH1 0x4 PUSH2 0x4AC8 JUMP JUMPDEST PUSH2 0xF97 JUMP JUMPDEST PUSH2 0x19A PUSH2 0x22A CALLDATASIZE PUSH1 0x4 PUSH2 0x4AC8 JUMP JUMPDEST PUSH2 0x1174 JUMP JUMPDEST PUSH2 0x19A PUSH2 0x23D CALLDATASIZE PUSH1 0x4 PUSH2 0x4AC8 JUMP JUMPDEST PUSH2 0x12A7 JUMP JUMPDEST PUSH2 0x19A PUSH2 0x250 CALLDATASIZE PUSH1 0x4 PUSH2 0x4AC8 JUMP JUMPDEST PUSH2 0x155C JUMP JUMPDEST PUSH2 0x19A PUSH2 0x263 CALLDATASIZE PUSH1 0x4 PUSH2 0x4AC8 JUMP JUMPDEST PUSH2 0x1730 JUMP JUMPDEST PUSH2 0x27B PUSH2 0x276 CALLDATASIZE PUSH1 0x4 PUSH2 0x4D7D JUMP JUMPDEST PUSH2 0x1796 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1A7 SWAP2 SWAP1 PUSH2 0x5594 JUMP JUMPDEST PUSH2 0x19A PUSH2 0x296 CALLDATASIZE PUSH1 0x4 PUSH2 0x4AC8 JUMP JUMPDEST PUSH2 0x195F JUMP JUMPDEST PUSH2 0x19A PUSH2 0x2A9 CALLDATASIZE PUSH1 0x4 PUSH2 0x5021 JUMP JUMPDEST PUSH2 0x1C07 JUMP JUMPDEST PUSH2 0x19A PUSH2 0x2BC CALLDATASIZE PUSH1 0x4 PUSH2 0x4A55 JUMP JUMPDEST PUSH2 0x1E51 JUMP JUMPDEST PUSH2 0x19A PUSH2 0x2CF CALLDATASIZE PUSH1 0x4 PUSH2 0x4A55 JUMP JUMPDEST PUSH2 0x2056 JUMP JUMPDEST PUSH2 0x19A PUSH2 0x2E2 CALLDATASIZE PUSH1 0x4 PUSH2 0x4C27 JUMP JUMPDEST PUSH2 0x20BC JUMP JUMPDEST PUSH2 0x19A PUSH2 0x2F5 CALLDATASIZE PUSH1 0x4 PUSH2 0x4AC8 JUMP JUMPDEST PUSH2 0x22A7 JUMP JUMPDEST PUSH2 0x30D PUSH2 0x308 CALLDATASIZE PUSH1 0x4 PUSH2 0x4985 JUMP JUMPDEST PUSH2 0x2478 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1A7 SWAP2 SWAP1 PUSH2 0x5392 JUMP JUMPDEST PUSH2 0x19A PUSH2 0x328 CALLDATASIZE PUSH1 0x4 PUSH2 0x4AC8 JUMP JUMPDEST PUSH2 0x25D4 JUMP JUMPDEST PUSH2 0x19A PUSH2 0x33B CALLDATASIZE PUSH1 0x4 PUSH2 0x4AC8 JUMP JUMPDEST PUSH2 0x263A JUMP JUMPDEST PUSH2 0x19A PUSH2 0x34E CALLDATASIZE PUSH1 0x4 PUSH2 0x4C27 JUMP JUMPDEST PUSH2 0x2A5D JUMP JUMPDEST PUSH2 0x19A PUSH2 0x361 CALLDATASIZE PUSH1 0x4 PUSH2 0x4DE9 JUMP JUMPDEST PUSH2 0x2C30 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x372 DUP4 DUP6 PUSH2 0x2CD3 JUMP JUMPDEST PUSH2 0x3D6 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 DUP6 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x391 SWAP2 SWAP1 PUSH2 0x5392 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x3B6 SWAP2 SWAP1 PUSH2 0x5392 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x2D46 DUP2 MSTORE POP DUP4 PUSH2 0x2EBE JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP3 MLOAD SWAP1 POP DUP1 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x412 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND PUSH2 0x436 JUMPI POP PUSH2 0x5CE JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x5CB JUMPI PUSH1 0x0 PUSH1 0x60 DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH3 0x61A80 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x6E79E133 SWAP1 POP PUSH1 0xE0 SHL DUP12 DUP12 DUP12 DUP12 DUP10 DUP2 MLOAD DUP2 LT PUSH2 0x491 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x4AC SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x5454 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x535 SWAP2 SWAP1 PUSH2 0x5376 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x571 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x576 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x59B JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x598 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4F1F JUMP JUMPDEST SWAP1 POP JUMPDEST DUP1 PUSH2 0x5A8 JUMPI POP POP POP PUSH2 0x5CB JUMP JUMPDEST DUP1 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x5B5 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x439 JUMP JUMPDEST POP POP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 MLOAD PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x604 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 EQ PUSH2 0x784 JUMPI PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH3 0x30D40 PUSH4 0x3B77EBAE PUSH1 0xE0 SHL DUP10 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x645 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP10 DUP8 DUP2 MLOAD DUP2 LT PUSH2 0x659 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP10 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x674 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x578E JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x6FD SWAP2 SWAP1 PUSH2 0x5376 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x739 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x73E JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH2 0x74F JUMPI PUSH1 0x0 PUSH2 0x763 JUMP JUMPDEST DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x763 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4F1F JUMP JUMPDEST DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x76F JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP PUSH1 0x1 ADD PUSH2 0x60A JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH1 0x0 EQ DUP1 PUSH2 0x7A0 JUMPI POP PUSH1 0x80 DUP5 ADD MLOAD ISZERO JUMPDEST DUP1 PUSH2 0x7AD JUMPI POP PUSH1 0xA0 DUP5 ADD MLOAD ISZERO JUMPDEST ISZERO PUSH2 0x7BA JUMPI POP PUSH1 0x0 PUSH2 0x3D9 JUMP JUMPDEST PUSH2 0x7C2 PUSH2 0x4622 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x9D3FA4B900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND SWAP1 PUSH4 0x9D3FA4B9 SWAP1 PUSH2 0x814 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x577B JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x82C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x840 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x864 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x50BD JUMP JUMPDEST SWAP1 POP PUSH1 0x3 DUP2 MLOAD PUSH1 0x6 DUP2 GT ISZERO PUSH2 0x875 JUMPI INVALID JUMPDEST EQ PUSH2 0x884 JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x3D9 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD DUP6 MLOAD PUSH1 0x40 MLOAD PUSH32 0x8171C40700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND SWAP3 PUSH4 0x8171C407 SWAP3 PUSH2 0x8DD SWAP3 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x5625 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x8F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x909 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x92D SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4EAB JUMP JUMPDEST PUSH2 0x93B JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x3D9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x6070410800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND SWAP1 PUSH4 0x60704108 SWAP1 PUSH2 0x9B0 SWAP1 PUSH32 0xF47261B000000000000000000000000000000000000000000000000000000000 SWAP1 PUSH1 0x4 ADD PUSH2 0x565A JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x9C8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x9DC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0xA00 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4930 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xA12 DUP8 PUSH2 0x140 ADD MLOAD PUSH2 0x3093 JUMP JUMPDEST SWAP1 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0xA3B JUMPI PUSH1 0x0 SWAP4 POP POP POP POP PUSH2 0x3D9 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP9 PUSH1 0xC0 ADD MLOAD GT PUSH2 0xA4F JUMPI PUSH1 0x0 PUSH2 0xA5D JUMP JUMPDEST PUSH2 0xA5D DUP9 PUSH2 0x180 ADD MLOAD PUSH2 0x3093 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xA7C DUP6 PUSH1 0x40 ADD MLOAD DUP11 PUSH1 0xA0 ADD MLOAD PUSH2 0x3130 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 SWAP6 POP PUSH1 0x0 PUSH2 0xAE7 DUP3 DUP12 PUSH1 0xA0 ADD MLOAD DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xAC9 JUMPI DUP13 PUSH1 0x80 ADD MLOAD PUSH2 0xAE2 JUMP JUMPDEST PUSH1 0xC0 DUP14 ADD MLOAD PUSH1 0x80 DUP15 ADD MLOAD PUSH2 0xAE2 SWAP2 PUSH4 0xFFFFFFFF PUSH2 0x3154 AND JUMP JUMPDEST PUSH2 0x3170 JUMP JUMPDEST DUP11 MLOAD PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP2 SWAP3 POP PUSH1 0x0 SWAP2 PUSH2 0xC3D SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP9 AND SWAP2 PUSH4 0x70A08231 SWAP2 PUSH2 0xB43 SWAP2 PUSH1 0x4 ADD PUSH2 0x5392 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xB5B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xB6F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0xB93 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4F1F JUMP JUMPDEST DUP13 MLOAD PUSH1 0x40 MLOAD PUSH32 0xDD62ED3E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 AND SWAP2 PUSH4 0xDD62ED3E SWAP2 PUSH2 0xBE8 SWAP2 SWAP1 DUP13 SWAP1 PUSH1 0x4 ADD PUSH2 0x53EC JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xC00 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xC14 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0xC38 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4F1F JUMP JUMPDEST PUSH2 0x31B0 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 LT ISZERO PUSH2 0xC55 JUMPI PUSH2 0xC52 DUP2 DUP4 DUP6 PUSH2 0x31C6 JUMP JUMPDEST SWAP8 POP JUMPDEST DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO DUP1 ISZERO PUSH2 0xCA6 JUMPI POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND ISZERO ISZERO JUMPDEST ISZERO PUSH2 0xDD0 JUMPI DUP11 MLOAD PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x0 SWAP2 PUSH2 0xDAA SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP9 AND SWAP2 PUSH4 0x70A08231 SWAP2 PUSH2 0xD05 SWAP2 SWAP1 PUSH1 0x4 ADD PUSH2 0x5392 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xD1D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xD31 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0xD55 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4F1F JUMP JUMPDEST DUP14 MLOAD PUSH1 0x40 MLOAD PUSH32 0xDD62ED3E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 AND SWAP2 PUSH4 0xDD62ED3E SWAP2 PUSH2 0xBE8 SWAP2 SWAP1 DUP14 SWAP1 PUSH1 0x4 ADD PUSH2 0x53EC JUMP JUMPDEST SWAP1 POP DUP12 PUSH1 0xC0 ADD MLOAD DUP2 LT ISZERO PUSH2 0xDCE JUMPI PUSH2 0xDCB DUP10 PUSH2 0xC38 DUP4 DUP16 PUSH1 0xC0 ADD MLOAD DUP9 PUSH2 0x31C6 JUMP JUMPDEST SWAP9 POP JUMPDEST POP JUMPDEST POP POP POP POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP3 MLOAD SWAP1 POP DUP1 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xE10 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xF8D JUMPI PUSH1 0x0 PUSH1 0x60 DUP9 PUSH1 0x0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH3 0x927C0 DUP11 PUSH1 0x20 ADD MLOAD DUP11 DUP11 DUP11 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0xE54 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xE6E SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x56B6 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0xEF7 SWAP2 SWAP1 PUSH2 0x5376 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0xF33 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xF38 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0xF5D JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0xF5A SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4F1F JUMP JUMPDEST SWAP1 POP JUMPDEST DUP1 PUSH2 0xF6A JUMPI POP POP POP PUSH2 0xF8D JUMP JUMPDEST DUP1 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0xF77 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0xE16 JUMP JUMPDEST POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0xFA3 DUP4 DUP6 PUSH2 0x2CD3 JUMP JUMPDEST DUP2 MLOAD PUSH1 0x40 DUP1 MLOAD DUP3 DUP2 MSTORE PUSH1 0x20 DUP1 DUP5 MUL DUP3 ADD ADD SWAP1 SWAP2 MSTORE DUP2 DUP1 ISZERO PUSH2 0xFCE JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x116B JUMPI PUSH1 0x0 PUSH1 0x60 PUSH2 0xFE8 PUSH2 0x31FC JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH3 0xF4240 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xFF1FD974 SWAP1 POP PUSH1 0xE0 SHL DUP11 DUP11 DUP11 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x1032 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x104C SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x548B JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x10D5 SWAP2 SWAP1 PUSH2 0x5376 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1111 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1116 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x113B JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x1138 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4F1F JUMP JUMPDEST SWAP1 POP JUMPDEST DUP1 PUSH2 0x1148 JUMPI POP POP POP PUSH2 0x116B JUMP JUMPDEST DUP1 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x1155 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0xFD4 JUMP JUMPDEST POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1180 DUP4 DUP6 PUSH2 0x2CD3 JUMP JUMPDEST DUP2 MLOAD PUSH1 0x40 DUP1 MLOAD DUP3 DUP2 MSTORE PUSH1 0x20 DUP1 DUP5 MUL DUP3 ADD ADD SWAP1 SWAP2 MSTORE DUP2 DUP1 ISZERO PUSH2 0x11AB JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 PUSH2 0x11B8 PUSH2 0x3214 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x129C JUMPI DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x122B JUMPI POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0x1255 JUMPI PUSH2 0x124E DUP9 DUP9 DUP9 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x1241 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x322C JUMP JUMPDEST SWAP2 POP PUSH2 0x127C JUMP JUMPDEST PUSH2 0x1266 DUP9 DUP5 DUP9 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x1241 JUMPI INVALID JUMPDEST SWAP2 POP DUP2 ISZERO PUSH2 0x127C JUMPI PUSH2 0x1279 DUP4 DUP9 DUP5 PUSH2 0x322C JUMP JUMPDEST SWAP2 POP JUMPDEST DUP2 DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1289 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x11BE JUMP JUMPDEST POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x12B3 DUP4 DUP6 PUSH2 0x2CD3 JUMP JUMPDEST DUP2 MLOAD PUSH1 0x40 DUP1 MLOAD DUP3 DUP2 MSTORE PUSH1 0x20 DUP1 DUP5 MUL DUP3 ADD ADD SWAP1 SWAP2 MSTORE DUP2 DUP1 ISZERO PUSH2 0x12DE JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 PUSH2 0x12EB PUSH2 0x3214 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x132B JUMPI PUSH2 0x1326 DUP7 PUSH2 0x3A4C JUMP JUMPDEST PUSH2 0x132E JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x133A PUSH2 0x3214 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x137A JUMPI PUSH2 0x1375 DUP7 PUSH2 0x3A4C JUMP JUMPDEST PUSH2 0x137D JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x129C JUMPI PUSH1 0x1 PUSH2 0x1394 PUSH2 0x3214 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x142B JUMPI DUP7 MLOAD PUSH2 0x140A SWAP1 DUP6 SWAP1 PUSH32 0x2640F62C00000000000000000000000000000000000000000000000000000000 SWAP1 DUP11 SWAP1 DUP7 SWAP1 DUP2 LT PUSH2 0x13FD JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x3ADE JUMP JUMPDEST DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x1416 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP4 POP DUP3 DUP2 MSTORE POP POP POP PUSH2 0x1548 JUMP JUMPDEST PUSH2 0x1433 PUSH2 0x3214 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x149C JUMPI DUP7 MLOAD PUSH2 0x140A SWAP1 DUP5 SWAP1 PUSH32 0x59E9486200000000000000000000000000000000000000000000000000000000 SWAP1 DUP11 SWAP1 DUP7 SWAP1 DUP2 LT PUSH2 0x13FD JUMPI INVALID JUMPDEST DUP7 MLOAD PUSH1 0x0 SWAP1 PUSH2 0x14D5 SWAP1 DUP6 SWAP1 PUSH32 0x59E9486200000000000000000000000000000000000000000000000000000000 SWAP1 DUP12 SWAP1 DUP8 SWAP1 DUP2 LT PUSH2 0x13FD JUMPI INVALID JUMPDEST SWAP3 POP SWAP1 POP DUP1 ISZERO PUSH2 0x152B JUMPI PUSH2 0x150A DUP6 PUSH32 0x2640F62C00000000000000000000000000000000000000000000000000000000 DUP4 PUSH2 0x3ADE JUMP JUMPDEST DUP9 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x1516 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP5 POP DUP3 DUP2 MSTORE POP POP POP PUSH2 0x1546 JUMP JUMPDEST PUSH1 0x0 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x1539 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP JUMPDEST POP JUMPDEST DUP1 PUSH2 0x1553 JUMPI POP PUSH2 0x129C JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x1382 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1568 DUP4 DUP6 PUSH2 0x2CD3 JUMP JUMPDEST DUP2 MLOAD PUSH1 0x40 DUP1 MLOAD DUP3 DUP2 MSTORE PUSH1 0x20 DUP1 DUP5 MUL DUP3 ADD ADD SWAP1 SWAP2 MSTORE DUP2 DUP1 ISZERO PUSH2 0x1593 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x116B JUMPI PUSH1 0x0 PUSH1 0x60 PUSH2 0x15AD PUSH2 0x31FC JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH3 0xF4240 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x144A2752 SWAP1 POP PUSH1 0xE0 SHL DUP10 DUP12 DUP11 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x15F7 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1611 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x548B JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x169A SWAP2 SWAP1 PUSH2 0x5376 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x16D6 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x16DB JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x1700 JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x16FD SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4F1F JUMP JUMPDEST SWAP1 POP JUMPDEST DUP1 PUSH2 0x170D JUMPI POP POP POP PUSH2 0x116B JUMP JUMPDEST DUP1 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x171A JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x1599 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x3D6 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 DUP6 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1751 SWAP2 SWAP1 PUSH2 0x5392 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1776 SWAP2 SWAP1 PUSH2 0x5392 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x3C27 DUP2 MSTORE POP DUP4 PUSH2 0x2EBE JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP3 DUP2 MSTORE PUSH1 0x20 DUP1 DUP5 MUL DUP3 ADD ADD SWAP1 SWAP2 MSTORE PUSH1 0x60 SWAP1 DUP3 DUP1 ISZERO PUSH2 0x17CC JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x17B7 JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP1 DUP4 EQ PUSH2 0x1958 JUMPI DUP4 DUP4 DUP3 DUP2 DUP2 LT PUSH2 0x17E5 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL DUP3 ADD SWAP1 POP DUP1 CALLDATALOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE1 CALLDATASIZE DUP5 SWAP1 SUB ADD DUP2 SLT PUSH2 0x181F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP2 ADD PUSH1 0x20 DUP2 ADD SWAP2 POP CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x183E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLDATASIZE DUP2 SWAP1 SUB DUP3 SGT ISZERO PUSH2 0x184E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST ISZERO ISZERO SWAP1 POP PUSH2 0x185B JUMPI PUSH2 0x1950 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 ADDRESS DUP7 DUP7 DUP6 DUP2 DUP2 LT PUSH2 0x186C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL DUP3 ADD SWAP1 POP DUP1 CALLDATALOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE1 CALLDATASIZE DUP5 SWAP1 SUB ADD DUP2 SLT PUSH2 0x18A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP2 ADD PUSH1 0x20 DUP2 ADD SWAP2 POP CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x18C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLDATASIZE DUP2 SWAP1 SUB DUP3 SGT ISZERO PUSH2 0x18D5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x18E3 SWAP3 SWAP2 SWAP1 PUSH2 0x5366 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x191E JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1923 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH2 0x1935 JUMPI DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST DUP1 DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x1942 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP POP POP JUMPDEST PUSH1 0x1 ADD PUSH2 0x17D2 JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x196B DUP4 DUP6 PUSH2 0x2CD3 JUMP JUMPDEST DUP2 MLOAD PUSH1 0x40 DUP1 MLOAD DUP3 DUP2 MSTORE PUSH1 0x20 DUP1 DUP5 MUL DUP3 ADD ADD SWAP1 SWAP2 MSTORE DUP2 DUP1 ISZERO PUSH2 0x1996 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 PUSH2 0x19A3 PUSH2 0x3214 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x19E3 JUMPI PUSH2 0x19DE DUP7 PUSH2 0x3A4C JUMP JUMPDEST PUSH2 0x19E6 JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x19F2 PUSH2 0x3214 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1A32 JUMPI PUSH2 0x1A2D DUP7 PUSH2 0x3A4C JUMP JUMPDEST PUSH2 0x1A35 JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x129C JUMPI PUSH1 0x1 PUSH2 0x1A4C PUSH2 0x3214 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x1AD6 JUMPI DUP7 MLOAD PUSH2 0x1AB5 SWAP1 DUP6 SWAP1 PUSH32 0x95B68FE700000000000000000000000000000000000000000000000000000000 SWAP1 DUP11 SWAP1 DUP7 SWAP1 DUP2 LT PUSH2 0x13FD JUMPI INVALID JUMPDEST DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x1AC1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP4 POP DUP3 DUP2 MSTORE POP POP POP PUSH2 0x1BF3 JUMP JUMPDEST PUSH2 0x1ADE PUSH2 0x3214 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x1B47 JUMPI DUP7 MLOAD PUSH2 0x1AB5 SWAP1 DUP5 SWAP1 PUSH32 0xCD7724C300000000000000000000000000000000000000000000000000000000 SWAP1 DUP11 SWAP1 DUP7 SWAP1 DUP2 LT PUSH2 0x13FD JUMPI INVALID JUMPDEST DUP7 MLOAD PUSH1 0x0 SWAP1 PUSH2 0x1B80 SWAP1 DUP7 SWAP1 PUSH32 0x95B68FE700000000000000000000000000000000000000000000000000000000 SWAP1 DUP12 SWAP1 DUP8 SWAP1 DUP2 LT PUSH2 0x13FD JUMPI INVALID JUMPDEST SWAP3 POP SWAP1 POP DUP1 ISZERO PUSH2 0x1BD6 JUMPI PUSH2 0x1BB5 DUP5 PUSH32 0xCD7724C300000000000000000000000000000000000000000000000000000000 DUP4 PUSH2 0x3ADE JUMP JUMPDEST DUP9 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x1BC1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP5 POP DUP3 DUP2 MSTORE POP POP POP PUSH2 0x1BF1 JUMP JUMPDEST PUSH1 0x0 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x1BE4 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP JUMPDEST POP JUMPDEST DUP1 PUSH2 0x1BFE JUMPI POP PUSH2 0x129C JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x1A3A JUMP JUMPDEST PUSH1 0x40 DUP5 ADD MLOAD PUSH1 0x60 SWAP1 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH2 0x1CA1 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH2 0x1C9A SWAP1 DUP1 PUSH2 0x1C53 DUP7 DUP10 PUSH1 0x80 DUP5 ADD PUSH2 0x56D4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1C7A SWAP3 SWAP2 SWAP1 PUSH2 0x56D4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x3DB0 DUP2 MSTORE POP DUP4 PUSH2 0x2EBE JUMP JUMPDEST SWAP1 POP PUSH2 0x1E49 JUMP JUMPDEST DUP2 MLOAD PUSH1 0x40 DUP1 MLOAD DUP3 DUP2 MSTORE PUSH1 0x20 DUP1 DUP5 MUL DUP3 ADD ADD SWAP1 SWAP2 MSTORE DUP2 DUP1 ISZERO PUSH2 0x1CCC JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xF8D JUMPI PUSH1 0x0 PUSH1 0x60 DUP9 PUSH1 0x0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH3 0x927C0 DUP11 PUSH1 0x40 ADD MLOAD DUP11 DUP11 DUP11 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x1D10 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1D2A SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x56B6 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x1DB3 SWAP2 SWAP1 PUSH2 0x5376 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1DEF JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1DF4 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x1E19 JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x1E16 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4F1F JUMP JUMPDEST SWAP1 POP JUMPDEST DUP1 PUSH2 0x1E26 JUMPI POP POP POP PUSH2 0xF8D JUMP JUMPDEST DUP1 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x1E33 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x1CD2 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP3 MLOAD SWAP1 POP DUP1 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1E83 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 PUSH2 0x1E93 DUP8 DUP8 DUP8 PUSH2 0x2478 JUMP JUMPDEST SWAP1 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x1EB8 JUMPI POP PUSH2 0x1E49 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x204B JUMPI PUSH1 0x0 PUSH1 0x60 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH3 0x61A80 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x343FBCDD SWAP1 POP PUSH1 0xE0 SHL DUP12 DUP12 DUP12 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x1F12 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1F2C SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x548B JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x1FB5 SWAP2 SWAP1 PUSH2 0x5376 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1FF1 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1FF6 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x201B JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x2018 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4F1F JUMP JUMPDEST SWAP1 POP JUMPDEST DUP1 PUSH2 0x2028 JUMPI POP POP POP PUSH2 0x204B JUMP JUMPDEST DUP1 DUP8 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x2035 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x1EBB JUMP JUMPDEST POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 DUP2 ADD SWAP1 SWAP3 MSTORE PUSH2 0x5CE SWAP1 DUP1 PUSH2 0x2075 DUP7 DUP10 PUSH1 0x80 DUP5 ADD PUSH2 0x53EC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x209C SWAP3 SWAP2 SWAP1 PUSH2 0x53EC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x3F47 DUP2 MSTORE POP DUP4 PUSH2 0x2EBE JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP3 MLOAD SWAP1 POP DUP1 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x20EE JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x229F JUMPI PUSH1 0x0 PUSH1 0x60 PUSH2 0x2108 PUSH2 0x3FC1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH3 0x249F0 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xD06CA61F SWAP1 POP PUSH1 0xE0 SHL DUP9 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x2150 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP11 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x216A SWAP3 SWAP2 SWAP1 PUSH2 0x57E3 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x21F3 SWAP2 SWAP1 PUSH2 0x5376 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x222F JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2234 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x2274 JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x2256 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4CEA JUMP JUMPDEST PUSH1 0x1 DUP10 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x2265 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH2 0x227C JUMP JUMPDEST POP POP POP PUSH2 0x229F JUMP JUMPDEST DUP1 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x2289 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x20F4 JUMP JUMPDEST POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP3 MLOAD SWAP1 POP DUP1 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x22D9 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x116B JUMPI PUSH1 0x0 PUSH1 0x60 PUSH2 0x22F3 PUSH2 0x3FD9 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH3 0xC3500 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x72EA9076 SWAP1 POP PUSH1 0xE0 SHL DUP11 DUP11 DUP11 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x233D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x2357 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x548B JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x23E0 SWAP2 SWAP1 PUSH2 0x5376 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x241C JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2421 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x2448 JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x2443 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4EC7 JUMP JUMPDEST SWAP3 POP POP POP JUMPDEST DUP1 PUSH2 0x2455 JUMPI POP POP POP PUSH2 0x116B JUMP JUMPDEST DUP1 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x2462 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x22DF JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH2 0x249D JUMPI POP PUSH1 0x0 PUSH2 0x3D9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x60 SWAP1 PUSH32 0x153F599700000000000000000000000000000000000000000000000000000000 SWAP1 PUSH2 0x24D5 SWAP1 DUP7 SWAP1 DUP7 SWAP1 PUSH1 0x24 ADD PUSH2 0x53EC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP SWAP1 POP PUSH1 0x0 PUSH1 0x60 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x40 MLOAD PUSH2 0x255D SWAP2 SWAP1 PUSH2 0x5376 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2598 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x259D JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x25B0 JUMPI POP DUP1 MLOAD PUSH1 0x20 EQ JUMPDEST ISZERO PUSH2 0x25CA JUMPI PUSH2 0x25C0 DUP2 PUSH1 0xC PUSH2 0x3FF1 JUMP JUMPDEST SWAP4 POP POP POP POP PUSH2 0x3D9 JUMP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x3D6 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 DUP6 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x25F5 SWAP2 SWAP1 PUSH2 0x5392 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x261A SWAP2 SWAP1 PUSH2 0x5392 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x4031 DUP2 MSTORE POP DUP4 PUSH2 0x2EBE JUMP JUMPDEST PUSH1 0x60 PUSH2 0x2646 DUP4 DUP6 PUSH2 0x2CD3 JUMP JUMPDEST DUP2 MLOAD PUSH1 0x40 DUP1 MLOAD DUP3 DUP2 MSTORE PUSH1 0x20 DUP1 DUP5 MUL DUP3 ADD ADD SWAP1 SWAP2 MSTORE DUP2 DUP1 ISZERO PUSH2 0x2671 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 PUSH2 0x267E PUSH2 0x3214 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x26B6 JUMPI DUP6 PUSH2 0x26B9 JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x26C5 PUSH2 0x3214 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x26FD JUMPI DUP6 PUSH2 0x2700 JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x270C PUSH2 0x4093 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x901754D7 DUP5 DUP5 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2746 SWAP3 SWAP2 SWAP1 PUSH2 0x53EC JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x275E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2772 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x2796 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4930 JUMP JUMPDEST SWAP1 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x27BD JUMPI POP PUSH2 0x3D9 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND ISZERO PUSH2 0x2882 JUMPI PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH2 0x282D SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x5392 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2845 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2859 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x287D SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4F1F JUMP JUMPDEST PUSH2 0x289B JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND BALANCE JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x2A50 JUMPI DUP8 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x28B4 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 LT ISZERO PUSH2 0x28C8 JUMPI PUSH2 0x2A50 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH3 0x249F0 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x1E1401F8 SWAP1 POP PUSH1 0xE0 SHL DUP10 DUP10 DUP15 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x2917 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x2931 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x548B JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x29BA SWAP2 SWAP1 PUSH2 0x5376 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x29F6 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x29FB JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x2A20 JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x2A1D SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4F1F JUMP JUMPDEST SWAP1 POP JUMPDEST DUP1 PUSH2 0x2A2D JUMPI POP POP POP PUSH2 0x2A50 JUMP JUMPDEST DUP1 DUP11 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x2A3A JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x28A0 JUMP JUMPDEST POP POP POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP3 MLOAD SWAP1 POP DUP1 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2A8F JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x229F JUMPI PUSH1 0x0 PUSH1 0x60 PUSH2 0x2AA9 PUSH2 0x3FC1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH3 0x249F0 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x1F00CA74 SWAP1 POP PUSH1 0xE0 SHL DUP9 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x2AF1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP11 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x2B0B SWAP3 SWAP2 SWAP1 PUSH2 0x57E3 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x2B94 SWAP2 SWAP1 PUSH2 0x5376 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2BD0 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2BD5 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x2274 JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x2BF7 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4CEA JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x2C03 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP DUP1 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x2C1A JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x2A95 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x2C3D DUP5 DUP5 DUP5 PUSH2 0x5D7 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x784 JUMPI DUP2 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x2C57 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ PUSH2 0x2CCB JUMPI PUSH2 0x2CB2 DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2C75 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x2C89 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0xA0 ADD MLOAD DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2CA1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x80 ADD MLOAD PUSH2 0x31C6 JUMP JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2CBE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP JUMPDEST PUSH1 0x1 ADD PUSH2 0x2C42 JUMP JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x2D42 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2D39 SWAP1 PUSH2 0x56EC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x4CB8E253 PUSH1 0xE0 SHL DUP8 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x2D7E SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4930 JUMP JUMPDEST DUP8 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x2D92 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4930 JUMP JUMPDEST PUSH2 0x2D9B DUP9 PUSH2 0x40AB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x2DAD SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x53B3 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x2E36 SWAP2 SWAP1 PUSH2 0x5376 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2E71 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2E76 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH2 0x2E8B JUMPI PUSH1 0x0 SWAP3 POP POP POP PUSH2 0x3D9 JUMP JUMPDEST DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x2E9F SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4CEA JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x2EAB JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2EEB JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP2 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x2EFD JUMPI PUSH2 0x308D JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2F2E DUP5 PUSH1 0x0 ADD MLOAD DUP6 PUSH1 0x20 ADD MLOAD DUP6 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x2F19 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 PUSH1 0x40 ADD MLOAD PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x2F3B JUMPI POP PUSH2 0x308D JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2F58 DUP6 PUSH1 0x20 ADD MLOAD DUP7 PUSH1 0x0 ADD MLOAD DUP5 DUP9 PUSH1 0x40 ADD MLOAD PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x2F67 JUMPI POP PUSH2 0x308D SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x3089 JUMPI PUSH1 0x0 JUMPDEST PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x304B JUMPI PUSH2 0x2F9D DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x2F8E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 DUP7 PUSH2 0x31C6 JUMP JUMPDEST SWAP4 POP PUSH2 0x2FAE PUSH2 0x2715 PUSH2 0x2710 DUP7 PUSH2 0x31C6 JUMP JUMPDEST SWAP4 POP PUSH1 0x0 PUSH2 0x2FCD DUP9 PUSH1 0x20 ADD MLOAD DUP10 PUSH1 0x0 ADD MLOAD DUP8 DUP12 PUSH1 0x40 ADD MLOAD PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x2FDA JUMPI POP PUSH2 0x304B JUMP JUMPDEST DUP1 SWAP4 POP DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x2FE9 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 LT PUSH2 0x3042 JUMPI PUSH1 0x0 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x3005 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x2710 DUP10 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x301C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 SUB MUL DUP2 PUSH2 0x302E JUMPI INVALID JUMPDEST DIV SWAP1 POP PUSH1 0x5 DUP2 GT PUSH2 0x3040 JUMPI POP POP PUSH2 0x304B JUMP JUMPDEST POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x2F76 JUMP JUMPDEST POP PUSH2 0x306A DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x305B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP4 DUP6 PUSH2 0x31C6 JUMP JUMPDEST DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3076 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x2F6A JUMP JUMPDEST POP POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x30A7 JUMPI POP PUSH1 0x0 PUSH2 0x312B JUMP JUMPDEST DUP2 MLOAD PUSH1 0x24 EQ ISZERO DUP1 PUSH2 0x310A JUMPI POP PUSH32 0xF47261B000000000000000000000000000000000000000000000000000000000 PUSH2 0x30E5 DUP4 PUSH1 0x0 PUSH4 0xFFFFFFFF PUSH2 0x40EC AND JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x3117 JUMPI POP PUSH1 0x0 PUSH2 0x312B JUMP JUMPDEST PUSH2 0x3128 DUP3 PUSH1 0x10 PUSH4 0xFFFFFFFF PUSH2 0x3FF1 AND JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x314E JUMPI PUSH2 0x314E PUSH2 0x3149 PUSH1 0x2 DUP6 DUP6 PUSH2 0x4138 JUMP JUMPDEST PUSH2 0x41DD JUMP JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x3D9 JUMPI PUSH2 0x3D9 PUSH2 0x3149 PUSH1 0x0 DUP7 DUP7 PUSH2 0x4138 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x317D DUP5 DUP5 DUP5 PUSH2 0x41E5 JUMP JUMPDEST ISZERO PUSH2 0x3190 JUMPI PUSH2 0x3190 PUSH2 0x3149 DUP6 DUP6 DUP6 PUSH2 0x424B JUMP JUMPDEST PUSH2 0x3D6 DUP4 PUSH2 0x31A4 DUP7 DUP6 PUSH4 0xFFFFFFFF PUSH2 0x426A AND JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x429B AND JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0x31BF JUMPI DUP2 PUSH2 0x3D9 JUMP JUMPDEST POP SWAP1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3D6 DUP4 PUSH2 0x31A4 PUSH2 0x31E0 DUP3 PUSH1 0x1 PUSH4 0xFFFFFFFF PUSH2 0x3130 AND JUMP JUMPDEST PUSH2 0x31F0 DUP9 DUP8 PUSH4 0xFFFFFFFF PUSH2 0x426A AND JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x3154 AND JUMP JUMPDEST PUSH20 0x794E6E91555438AFC3CCF1C5076A74F42133D08D SWAP1 JUMP JUMPDEST PUSH20 0xC02AAA39B223FE8D0A0E5C4F27EAD9083C756CC2 SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x3239 PUSH2 0x42C5 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x60 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x3D3DC52C PUSH2 0x3263 PUSH2 0x3214 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x329B JUMPI DUP9 PUSH2 0x329D JUMP JUMPDEST DUP8 JUMPDEST PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x32B9 SWAP2 SWAP1 PUSH2 0x5392 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x32D1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x32E5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x332B SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4CEA JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 SWAP3 MSTORE SWAP2 SWAP3 POP JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x35E4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x106E9A4B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND SWAP1 PUSH4 0x106E9A4B SWAP1 PUSH2 0x33AE SWAP1 PUSH20 0x31E085AFD48A1D6E51CC193153D625E8F0514C7F SWAP1 PUSH1 0x4 ADD PUSH2 0x5392 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x33C6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x33DA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x33FE SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4F1F JUMP JUMPDEST DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x340A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD EQ DUP1 PUSH2 0x34E5 JUMPI POP PUSH1 0x40 MLOAD PUSH32 0x106E9A4B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND SWAP1 PUSH4 0x106E9A4B SWAP1 PUSH2 0x347F SWAP1 PUSH20 0x10908C875D865C66F271F5D3949848971C9595C9 SWAP1 PUSH1 0x4 ADD PUSH2 0x5392 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3497 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x34AB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x34CF SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4F1F JUMP JUMPDEST DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x34DB JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD EQ JUMPDEST DUP1 PUSH2 0x35B7 JUMPI POP PUSH1 0x40 MLOAD PUSH32 0x106E9A4B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND SWAP1 PUSH4 0x106E9A4B SWAP1 PUSH2 0x3551 SWAP1 PUSH20 0x1E158C0E93C30D24E918EF83D1E0BE23595C3C0F SWAP1 PUSH1 0x4 ADD PUSH2 0x5392 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3569 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x357D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x35A1 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4F1F JUMP JUMPDEST DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x35AD JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD EQ JUMPDEST ISZERO PUSH2 0x35DC JUMPI PUSH2 0x35D9 DUP3 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x35CC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x43F9 JUMP JUMPDEST SWAP2 POP JUMPDEST PUSH1 0x1 ADD PUSH2 0x333F JUMP JUMPDEST POP PUSH1 0x60 PUSH2 0x35EF PUSH2 0x3214 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x3706 JUMPI DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x81EFCBDD DUP10 PUSH1 0x2 DUP6 PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x366D JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x368D SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x550F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x36A5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x36B9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x36FF SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4F37 JUMP JUMPDEST SWAP1 POP PUSH2 0x37E6 JUMP JUMPDEST DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x81EFCBDD DUP11 PUSH1 0x2 DUP6 PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x3751 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3771 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x550F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3789 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x379D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x37E3 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4F37 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH2 0x37F2 PUSH2 0x448F JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH3 0x16E360 PUSH32 0x418436BC00000000000000000000000000000000000000000000000000000000 PUSH2 0x3835 PUSH2 0x3214 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP15 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x386D JUMPI DUP14 PUSH2 0x3883 JUMP JUMPDEST PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE JUMPDEST PUSH2 0x388B PUSH2 0x3214 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP15 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x38C3 JUMPI DUP14 PUSH2 0x38D9 JUMP JUMPDEST PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE JUMPDEST DUP14 PUSH1 0x0 DUP10 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x38F1 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x54BC JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x397A SWAP2 SWAP1 PUSH2 0x5376 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x39B6 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x39BB JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x39E4 JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x39DD SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4F1F JUMP JUMPDEST SWAP1 POP PUSH2 0x39F5 JUMP JUMPDEST PUSH1 0x0 SWAP9 POP POP POP POP POP POP POP POP POP PUSH2 0x3D9 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3A00 DUP13 PUSH2 0x44A7 JUMP JUMPDEST PUSH1 0xFF AND SWAP1 POP PUSH1 0x0 PUSH2 0x3A10 DUP15 PUSH2 0x44A7 JUMP JUMPDEST PUSH1 0xFF AND SWAP1 POP PUSH8 0xDE0B6B3A7640000 DUP2 PUSH1 0xA EXP DUP4 PUSH1 0xA EXP DUP15 DUP7 MUL MUL DUP2 PUSH2 0x3A31 JUMPI INVALID JUMPDEST DIV DUP2 PUSH2 0x3A39 JUMPI INVALID JUMPDEST DIV SWAP15 SWAP14 POP POP POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3A56 PUSH2 0x44B2 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x6F2BF62 DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3A8E SWAP2 SWAP1 PUSH2 0x5392 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3AA6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3ABA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x3128 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4930 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH2 0x3B01 JUMPI PUSH2 0x3C1F JUMP JUMPDEST PUSH1 0x60 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH3 0x249F0 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x3B30 SWAP2 SWAP1 PUSH2 0x57DA JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x3BB9 SWAP2 SWAP1 PUSH2 0x5376 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x3BF5 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x3BFA JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP DUP2 ISZERO PUSH2 0x3C1D JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x3C1A SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4F1F JUMP JUMPDEST SWAP3 POP JUMPDEST POP JUMPDEST SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x3C3E SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4930 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP5 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x3C56 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4930 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH32 0xCDB3B4AF00000000000000000000000000000000000000000000000000000000 DUP6 DUP6 PUSH2 0x3C89 DUP11 PUSH2 0x40AB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x3C9B SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x53B3 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x3D24 SWAP2 SWAP1 PUSH2 0x5376 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x3D5F JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x3D64 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH2 0x3D7B JUMPI PUSH1 0x0 SWAP5 POP POP POP POP POP PUSH2 0x3D9 JUMP JUMPDEST DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x3D8F SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4CEA JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x3D9B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP5 POP POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x3DBB PUSH2 0x4644 JUMP JUMPDEST DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x3DCF SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4F86 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x3DE9 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4F6A JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH32 0x40BC03AE00000000000000000000000000000000000000000000000000000000 DUP6 DUP8 DUP7 PUSH2 0x3E1D DUP13 PUSH2 0x40AB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x3E30 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x5749 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x3EB9 SWAP2 SWAP1 PUSH2 0x5376 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x3EF4 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x3EF9 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH2 0x3F11 JUMPI PUSH1 0x0 SWAP6 POP POP POP POP POP POP PUSH2 0x3D9 JUMP JUMPDEST DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x3F25 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4CEA JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x3F31 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP6 POP POP POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x3F60 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x494C JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x3F7A SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4930 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH32 0x9F76AD3500000000000000000000000000000000000000000000000000000000 DUP6 DUP8 DUP7 PUSH2 0x3FAE DUP13 PUSH2 0x40AB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x3E30 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x5413 JUMP JUMPDEST PUSH20 0xF164FC0EC4E93095B804A4795BBE1E041497B92A SWAP1 JUMP JUMPDEST PUSH20 0xE2F2A5C287993345A840DB3B0845FBC70F5935A5 SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x14 ADD DUP4 MLOAD LT ISZERO PUSH2 0x4012 JUMPI PUSH2 0x4012 PUSH2 0x3149 PUSH1 0x4 DUP6 MLOAD DUP6 PUSH1 0x14 ADD PUSH2 0x44CA JUMP JUMPDEST POP ADD PUSH1 0x14 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x4048 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4930 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP5 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x4060 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4930 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH32 0xBC61A69500000000000000000000000000000000000000000000000000000000 DUP6 DUP6 PUSH2 0x3C89 DUP11 PUSH2 0x40AB JUMP JUMPDEST PUSH20 0x71CD6666064C3A1354A3B4DCA5FA1E2D3EE7D303 SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP2 PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP POP SWAP1 POP DUP2 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x40DB JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x4 ADD DUP4 MLOAD LT ISZERO PUSH2 0x410D JUMPI PUSH2 0x410D PUSH2 0x3149 PUSH1 0x3 DUP6 MLOAD DUP6 PUSH1 0x4 ADD PUSH2 0x44CA JUMP JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH4 0xE946C1BB PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x4157 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x5687 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x41F7 JUMPI PUSH2 0x41F7 PUSH2 0x3149 PUSH2 0x44E9 JUMP JUMPDEST DUP2 ISZERO DUP1 PUSH2 0x4202 JUMPI POP DUP4 ISZERO JUMPDEST ISZERO PUSH2 0x420F JUMPI POP PUSH1 0x0 PUSH2 0x3D9 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP1 PUSH2 0x4219 JUMPI INVALID JUMPDEST DUP6 DUP5 MULMOD SWAP1 POP PUSH2 0x422E DUP6 DUP5 PUSH4 0xFFFFFFFF PUSH2 0x426A AND JUMP JUMPDEST PUSH2 0x4240 DUP3 PUSH2 0x3E8 PUSH4 0xFFFFFFFF PUSH2 0x426A AND JUMP JUMPDEST LT ISZERO SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH4 0x339F3DE2 PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x4157 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x5847 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x4279 JUMPI POP PUSH1 0x0 PUSH2 0x308D JUMP JUMPDEST DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 PUSH2 0x4286 JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x3D9 JUMPI PUSH2 0x3D9 PUSH2 0x3149 PUSH1 0x1 DUP7 DUP7 PUSH2 0x4138 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x42B1 JUMPI PUSH2 0x42B1 PUSH2 0x3149 PUSH1 0x3 DUP6 DUP6 PUSH2 0x4138 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP2 PUSH2 0x42BC JUMPI INVALID JUMPDEST DIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x42D0 PUSH2 0x448F JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xB78B842D PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4315 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4329 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x434D SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4930 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xC3A2A93A PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4392 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x43A6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x43EC SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4B28 JUMP JUMPDEST POP SWAP2 SWAP6 POP SWAP4 POP POP POP POP SWAP1 SWAP2 JUMP JUMPDEST PUSH1 0x60 DUP3 MLOAD PUSH1 0x1 ADD PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x4429 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP4 MLOAD DUP2 LT ISZERO PUSH2 0x446B JUMPI DUP4 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x4444 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x4458 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x442F JUMP JUMPDEST POP DUP2 DUP2 PUSH1 0x1 DUP4 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x447D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH20 0x9AAB3F75489902F3A48495025729A0AF77D4B11E SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3128 DUP3 PUSH2 0x4520 JUMP JUMPDEST PUSH20 0xC0A47DFE034B400B47BDAD5FECDA2621DE6C4D95 SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH4 0x28006595 PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x4157 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x56A8 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x4 DUP2 MSTORE PUSH32 0xA791837C00000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x12 SWAP1 POP PUSH1 0x0 PUSH1 0x60 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x4 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x313CE56700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x40 MLOAD PUSH2 0x4584 SWAP2 SWAP1 PUSH2 0x5376 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x45BF JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x45C4 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x45D7 JUMPI POP DUP1 MLOAD PUSH1 0x20 EQ JUMPDEST ISZERO PUSH2 0x45EA JUMPI PUSH2 0x45E7 DUP2 PUSH1 0x0 PUSH2 0x45F1 JUMP JUMPDEST SWAP3 POP JUMPDEST POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3D9 DUP4 DUP4 PUSH1 0x0 DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO PUSH2 0x4619 JUMPI PUSH2 0x4619 PUSH2 0x3149 PUSH1 0x5 DUP6 MLOAD DUP6 PUSH1 0x20 ADD PUSH2 0x44CA JUMP JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD SWAP1 SWAP2 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x308D DUP2 PUSH2 0x5923 JUMP JUMPDEST DUP1 MLOAD PUSH2 0x308D DUP2 PUSH2 0x5923 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x468A JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x469D PUSH2 0x4698 DUP3 PUSH2 0x5884 JUMP JUMPDEST PUSH2 0x585D JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 ADD PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x46DA JUMPI PUSH2 0x46C5 DUP8 PUSH1 0x20 DUP5 CALLDATALOAD DUP10 ADD ADD PUSH2 0x474D JUMP JUMPDEST DUP4 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x46AD JUMP JUMPDEST POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x46F4 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x4702 PUSH2 0x4698 DUP3 PUSH2 0x5884 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x4723 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x4742 JUMPI DUP2 CALLDATALOAD DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x4726 JUMP JUMPDEST POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x475D JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x476B PUSH2 0x4698 DUP3 PUSH2 0x58A4 JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x4782 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP5 ADD CALLDATACOPY PUSH1 0x0 SWAP1 DUP3 ADD PUSH1 0x20 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x47AB JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x47B9 PUSH2 0x4698 DUP3 PUSH2 0x58A4 JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x47D0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1958 DUP2 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x58E6 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C0 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x47F4 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x47FD DUP2 PUSH2 0x585D JUMP JUMPDEST SWAP2 POP POP PUSH2 0x480A DUP4 DUP4 PUSH2 0x4664 JUMP JUMPDEST DUP2 MSTORE PUSH2 0x4819 DUP4 PUSH1 0x20 DUP5 ADD PUSH2 0x4664 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x482B DUP4 PUSH1 0x40 DUP5 ADD PUSH2 0x4664 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x483D DUP4 PUSH1 0x60 DUP5 ADD PUSH2 0x4664 JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP3 ADD CALLDATALOAD PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 DUP3 ADD CALLDATALOAD PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 DUP3 ADD CALLDATALOAD PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0xE0 DUP3 ADD CALLDATALOAD PUSH1 0xE0 DUP3 ADD MSTORE PUSH2 0x100 DUP1 DUP4 ADD CALLDATALOAD DUP2 DUP4 ADD MSTORE POP PUSH2 0x120 DUP1 DUP4 ADD CALLDATALOAD DUP2 DUP4 ADD MSTORE POP PUSH2 0x140 DUP1 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x489F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x48AB DUP7 DUP4 DUP8 ADD PUSH2 0x474D JUMP JUMPDEST DUP4 DUP6 ADD MSTORE PUSH2 0x160 SWAP3 POP DUP3 DUP6 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x48C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x48D3 DUP7 DUP4 DUP8 ADD PUSH2 0x474D JUMP JUMPDEST DUP4 DUP6 ADD MSTORE PUSH2 0x180 SWAP3 POP DUP3 DUP6 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x48EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x48FB DUP7 DUP4 DUP8 ADD PUSH2 0x474D JUMP JUMPDEST DUP4 DUP6 ADD MSTORE PUSH2 0x1A0 SWAP3 POP DUP3 DUP6 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x4917 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4924 DUP6 DUP3 DUP7 ADD PUSH2 0x474D JUMP JUMPDEST DUP3 DUP5 ADD MSTORE POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4941 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x3D9 DUP2 PUSH2 0x5923 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x495E JUMPI DUP1 DUP2 REVERT JUMPDEST DUP3 MLOAD PUSH2 0x4969 DUP2 PUSH2 0x5923 JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 SWAP3 POP PUSH2 0x497A DUP2 PUSH2 0x5923 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x4999 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x49A4 DUP2 PUSH2 0x5923 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x49B4 DUP2 PUSH2 0x5923 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH2 0x49C4 DUP2 PUSH2 0x5923 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x49E6 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x49F1 DUP2 PUSH2 0x5923 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x4A01 DUP2 PUSH2 0x5923 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH2 0x4A11 DUP2 PUSH2 0x5923 JUMP JUMPDEST SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH2 0x4A21 DUP2 PUSH2 0x5923 JUMP JUMPDEST SWAP2 POP PUSH1 0x80 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x4A3C JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x4A48 DUP9 DUP3 DUP10 ADD PUSH2 0x46E4 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x4A6A JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x4A75 DUP2 PUSH2 0x5923 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x4A85 DUP2 PUSH2 0x5923 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x4A95 DUP2 PUSH2 0x5923 JUMP JUMPDEST SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x4AB0 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x4ABC DUP8 DUP3 DUP9 ADD PUSH2 0x46E4 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x4ADC JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x4AE7 DUP2 PUSH2 0x5923 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x4AF7 DUP2 PUSH2 0x5923 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x4B12 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x4B1E DUP7 DUP3 DUP8 ADD PUSH2 0x46E4 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x4B40 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP7 MLOAD PUSH2 0x4B4B DUP2 PUSH2 0x5923 JUMP JUMPDEST DUP1 SWAP7 POP POP PUSH1 0x20 DUP1 DUP9 ADD MLOAD PUSH2 0x4B5E DUP2 PUSH2 0x5923 JUMP JUMPDEST PUSH1 0x40 DUP10 ADD MLOAD SWAP1 SWAP7 POP PUSH2 0x4B6F DUP2 PUSH2 0x5923 JUMP JUMPDEST PUSH1 0x60 DUP10 ADD MLOAD SWAP1 SWAP6 POP PUSH2 0x4B80 DUP2 PUSH2 0x5923 JUMP JUMPDEST PUSH1 0x80 DUP10 ADD MLOAD SWAP1 SWAP5 POP PUSH2 0x4B91 DUP2 PUSH2 0x5923 JUMP JUMPDEST PUSH1 0xA0 DUP10 ADD MLOAD SWAP1 SWAP4 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x4BAD JUMPI DUP3 DUP4 REVERT JUMPDEST DUP1 DUP10 ADD DUP11 PUSH1 0x1F DUP3 ADD SLT PUSH2 0x4BBE JUMPI DUP4 DUP5 REVERT JUMPDEST DUP1 MLOAD SWAP2 POP PUSH2 0x4BCE PUSH2 0x4698 DUP4 PUSH2 0x5884 JUMP JUMPDEST DUP3 DUP2 MSTORE DUP4 DUP2 ADD SWAP1 DUP3 DUP6 ADD DUP6 DUP6 MUL DUP5 ADD DUP7 ADD DUP15 LT ISZERO PUSH2 0x4BEA JUMPI DUP7 DUP8 REVERT JUMPDEST DUP7 SWAP4 POP JUMPDEST DUP5 DUP5 LT ISZERO PUSH2 0x4C14 JUMPI PUSH2 0x4C00 DUP15 DUP3 PUSH2 0x466F JUMP JUMPDEST DUP4 MSTORE PUSH1 0x1 SWAP4 SWAP1 SWAP4 ADD SWAP3 SWAP2 DUP6 ADD SWAP2 DUP6 ADD PUSH2 0x4BEE JUMP JUMPDEST POP DUP1 SWAP6 POP POP POP POP POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x4C39 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x4C50 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP6 ADD DUP7 PUSH1 0x1F DUP3 ADD SLT PUSH2 0x4C61 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP3 POP PUSH2 0x4C71 PUSH2 0x4698 DUP5 PUSH2 0x5884 JUMP JUMPDEST DUP1 DUP5 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD SWAP3 POP DUP1 DUP5 ADD DUP11 DUP3 DUP4 DUP10 MUL DUP8 ADD ADD GT ISZERO PUSH2 0x4C91 JUMPI DUP9 DUP10 REVERT JUMPDEST DUP9 SWAP5 POP JUMPDEST DUP7 DUP6 LT ISZERO PUSH2 0x4CBC JUMPI DUP1 CALLDATALOAD PUSH2 0x4CA8 DUP2 PUSH2 0x5923 JUMP JUMPDEST DUP5 MSTORE PUSH1 0x1 SWAP5 SWAP1 SWAP5 ADD SWAP4 SWAP3 DUP2 ADD SWAP3 DUP2 ADD PUSH2 0x4C95 JUMP JUMPDEST POP SWAP1 SWAP7 POP DUP8 ADD CALLDATALOAD SWAP4 POP POP POP DUP1 DUP3 GT ISZERO PUSH2 0x4CD3 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x4CE0 DUP6 DUP3 DUP7 ADD PUSH2 0x46E4 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x4CFC JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x4D12 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP1 DUP5 ADD DUP6 PUSH1 0x1F DUP3 ADD SLT PUSH2 0x4D23 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP1 MLOAD SWAP2 POP PUSH2 0x4D33 PUSH2 0x4698 DUP4 PUSH2 0x5884 JUMP JUMPDEST DUP3 DUP2 MSTORE DUP4 DUP2 ADD SWAP1 DUP3 DUP6 ADD DUP6 DUP6 MUL DUP5 ADD DUP7 ADD DUP10 LT ISZERO PUSH2 0x4D4F JUMPI DUP7 DUP8 REVERT JUMPDEST DUP7 SWAP4 POP JUMPDEST DUP5 DUP5 LT ISZERO PUSH2 0x4D71 JUMPI DUP1 MLOAD DUP4 MSTORE PUSH1 0x1 SWAP4 SWAP1 SWAP4 ADD SWAP3 SWAP2 DUP6 ADD SWAP2 DUP6 ADD PUSH2 0x4D53 JUMP JUMPDEST POP SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x4D8F JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x4DA6 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP6 ADD DUP7 PUSH1 0x1F DUP3 ADD SLT PUSH2 0x4DB7 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP3 POP DUP2 DUP4 GT ISZERO PUSH2 0x4DC7 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP7 PUSH1 0x20 DUP1 DUP6 MUL DUP4 ADD ADD GT ISZERO PUSH2 0x4DDA JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH1 0x20 ADD SWAP7 SWAP2 SWAP6 POP SWAP1 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x4DFD JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x4E14 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 DUP7 ADD DUP8 PUSH1 0x1F DUP3 ADD SLT PUSH2 0x4E25 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP3 POP PUSH2 0x4E35 PUSH2 0x4698 DUP5 PUSH2 0x5884 JUMP JUMPDEST DUP4 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD SWAP2 SWAP1 DUP4 DUP2 ADD DUP8 JUMPDEST DUP8 DUP2 LT ISZERO PUSH2 0x4E6D JUMPI PUSH2 0x4E5B DUP14 DUP5 DUP5 CALLDATALOAD DUP10 ADD ADD PUSH2 0x47E1 JUMP JUMPDEST DUP6 MSTORE SWAP4 DUP3 ADD SWAP4 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x4E44 JUMP JUMPDEST POP SWAP2 SWAP9 POP DUP10 ADD CALLDATALOAD SWAP5 POP POP POP POP DUP1 DUP3 GT ISZERO PUSH2 0x4E85 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x4E92 DUP7 DUP3 DUP8 ADD PUSH2 0x467A JUMP JUMPDEST SWAP3 POP POP PUSH2 0x4EA2 DUP6 PUSH1 0x40 DUP7 ADD PUSH2 0x4664 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4EBC JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x3D9 DUP2 PUSH2 0x5945 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x4EDB JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 MLOAD PUSH2 0x4EE6 DUP2 PUSH2 0x5945 JUMP JUMPDEST PUSH1 0x20 DUP6 ADD MLOAD SWAP1 SWAP4 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x4F02 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x4F0E DUP7 DUP3 DUP8 ADD PUSH2 0x479B JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 DUP5 ADD MLOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4F30 JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4F48 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x4F5E JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x1E49 DUP5 DUP3 DUP6 ADD PUSH2 0x479B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4F7B JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x3D9 DUP2 PUSH2 0x5981 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x80 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x4F98 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH2 0x4FA3 DUP2 PUSH2 0x5981 JUMP JUMPDEST SWAP2 POP PUSH1 0x60 DUP4 DUP6 SUB PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 ADD SLT ISZERO PUSH2 0x4FD6 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x4FE0 PUSH1 0x60 PUSH2 0x585D JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD PUSH2 0x4FEE DUP2 PUSH2 0x5923 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x40 DUP5 ADD MLOAD PUSH2 0x4FFE DUP2 PUSH2 0x5953 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x60 DUP5 ADD MLOAD PUSH2 0x5011 DUP2 PUSH2 0x5953 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE SWAP2 SWAP5 SWAP2 SWAP4 POP SWAP1 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP5 DUP7 SUB PUSH1 0xC0 DUP2 SLT ISZERO PUSH2 0x5037 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x60 DUP2 SLT ISZERO PUSH2 0x5044 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x504F PUSH1 0x60 PUSH2 0x585D JUMP JUMPDEST DUP6 CALLDATALOAD PUSH2 0x505A DUP2 PUSH2 0x5923 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x506A DUP2 PUSH2 0x5953 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH2 0x507D DUP2 PUSH2 0x5953 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE SWAP4 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH2 0x5092 DUP2 PUSH2 0x5981 JUMP JUMPDEST SWAP3 POP PUSH1 0x80 DUP6 ADD CALLDATALOAD PUSH2 0x50A2 DUP2 PUSH2 0x5981 JUMP JUMPDEST SWAP2 POP PUSH1 0xA0 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x4AB0 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x50CE JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x50D8 PUSH1 0x60 PUSH2 0x585D JUMP JUMPDEST DUP3 MLOAD PUSH1 0x7 DUP2 LT PUSH2 0x50E6 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP4 DUP2 ADD MLOAD SWAP1 DUP3 ADD MSTORE PUSH1 0x40 SWAP3 DUP4 ADD MLOAD SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x5119 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x5130 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x513C DUP8 DUP4 DUP9 ADD PUSH2 0x47E1 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x5151 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x515E DUP7 DUP3 DUP8 ADD PUSH2 0x474D JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH2 0x49C4 DUP2 PUSH2 0x5923 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x20 DUP4 ADD DUP3 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x51BA JUMPI DUP2 MLOAD DUP7 MSTORE PUSH1 0x20 SWAP6 DUP7 ADD SWAP6 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x519C JUMP JUMPDEST POP SWAP4 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x51DC DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x58E6 JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 MSTORE PUSH1 0x20 DUP1 DUP3 ADD MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 DUP2 AND SWAP2 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP2 DUP3 ADD MLOAD AND SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C0 PUSH2 0x5275 DUP5 DUP5 MLOAD PUSH2 0x516F JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MLOAD PUSH2 0x5287 PUSH1 0x20 DUP7 ADD DUP3 PUSH2 0x516F JUMP JUMPDEST POP PUSH1 0x40 DUP4 ADD MLOAD PUSH2 0x529A PUSH1 0x40 DUP7 ADD DUP3 PUSH2 0x516F JUMP JUMPDEST POP PUSH1 0x60 DUP4 ADD MLOAD PUSH2 0x52AD PUSH1 0x60 DUP7 ADD DUP3 PUSH2 0x516F JUMP JUMPDEST POP PUSH1 0x80 DUP4 ADD MLOAD PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0xA0 DUP4 ADD MLOAD PUSH1 0xA0 DUP6 ADD MSTORE PUSH1 0xC0 DUP4 ADD MLOAD PUSH1 0xC0 DUP6 ADD MSTORE PUSH1 0xE0 DUP4 ADD MLOAD PUSH1 0xE0 DUP6 ADD MSTORE PUSH2 0x100 DUP1 DUP5 ADD MLOAD DUP2 DUP7 ADD MSTORE POP PUSH2 0x120 DUP1 DUP5 ADD MLOAD DUP2 DUP7 ADD MSTORE POP PUSH2 0x140 DUP1 DUP5 ADD MLOAD DUP3 DUP3 DUP8 ADD MSTORE PUSH2 0x5306 DUP4 DUP8 ADD DUP3 PUSH2 0x51C4 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x160 SWAP2 POP DUP2 DUP5 ADD MLOAD DUP6 DUP3 SUB DUP4 DUP8 ADD MSTORE PUSH2 0x5323 DUP3 DUP3 PUSH2 0x51C4 JUMP JUMPDEST SWAP3 POP POP POP PUSH2 0x180 DUP1 DUP5 ADD MLOAD DUP6 DUP4 SUB DUP3 DUP8 ADD MSTORE PUSH2 0x533F DUP4 DUP3 PUSH2 0x51C4 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x1A0 SWAP2 POP DUP2 DUP5 ADD MLOAD DUP6 DUP3 SUB DUP4 DUP8 ADD MSTORE PUSH2 0x535C DUP3 DUP3 PUSH2 0x51C4 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP4 CALLDATACOPY SWAP2 ADD SWAP1 DUP2 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x5388 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x58E6 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP7 AND DUP4 MSTORE DUP1 DUP6 AND PUSH1 0x20 DUP5 ADD MSTORE POP PUSH1 0x60 PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x5CE PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x5189 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP8 AND DUP4 MSTORE DUP1 DUP7 AND PUSH1 0x20 DUP5 ADD MSTORE DUP1 DUP6 AND PUSH1 0x40 DUP5 ADD MSTORE POP PUSH1 0x80 PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x535C PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0x5189 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP5 DUP6 AND DUP2 MSTORE SWAP3 DUP5 AND PUSH1 0x20 DUP5 ADD MSTORE SWAP3 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP9 AND DUP4 MSTORE DUP1 DUP8 AND PUSH1 0x20 DUP5 ADD MSTORE POP DUP5 PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0xFF DUP5 AND PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0xA0 PUSH1 0x80 DUP4 ADD MSTORE PUSH2 0x5504 PUSH1 0xA0 DUP4 ADD DUP5 PUSH2 0x51C4 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND DUP4 MSTORE PUSH2 0x5537 DUP7 PUSH2 0x5916 JUMP JUMPDEST PUSH1 0x20 DUP4 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0x80 PUSH1 0x40 DUP6 ADD MSTORE DUP6 MLOAD SWAP2 DUP3 SWAP1 MSTORE DUP6 ADD SWAP1 PUSH1 0xA0 DUP5 ADD SWAP1 DUP4 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x5574 JUMPI DUP4 MLOAD DUP4 MSTORE PUSH1 0x20 SWAP4 DUP5 ADD SWAP4 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x5556 JUMP JUMPDEST POP POP DUP4 DUP2 SUB PUSH1 0x60 DUP6 ADD MSTORE PUSH2 0x5588 DUP2 DUP7 PUSH2 0x5189 JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 ADD DUP2 DUP5 MSTORE DUP1 DUP6 MLOAD DUP1 DUP4 MSTORE PUSH1 0x40 DUP7 ADD SWAP2 POP PUSH1 0x40 DUP5 DUP3 MUL DUP8 ADD ADD SWAP3 POP DUP4 DUP8 ADD DUP6 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x5605 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0 DUP9 DUP7 SUB ADD DUP5 MSTORE PUSH2 0x55F3 DUP6 DUP4 MLOAD PUSH2 0x51C4 JUMP JUMPDEST SWAP5 POP SWAP3 DUP6 ADD SWAP3 SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x55B9 JUMP JUMPDEST POP SWAP3 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x3D9 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x5189 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP3 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x60 PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x5CE PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x51C4 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH2 0x5694 DUP6 PUSH2 0x5916 JUMP JUMPDEST SWAP4 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH1 0x8 DUP6 LT PUSH2 0x5694 JUMPI INVALID JUMPDEST PUSH1 0xF SWAP4 DUP5 SIGNEXTEND DUP2 MSTORE SWAP2 SWAP1 SWAP3 SIGNEXTEND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0xF DUP4 SWAP1 SIGNEXTEND DUP2 MSTORE PUSH1 0x80 DUP2 ADD PUSH2 0x3D9 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x520E JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x455243323042726964676553616D706C65722F494E56414C49445F544F4B454E PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x5F50414952000000000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5755 DUP3 DUP8 PUSH2 0x520E JUMP JUMPDEST DUP5 PUSH1 0xF SIGNEXTEND PUSH1 0x60 DUP4 ADD MSTORE DUP4 PUSH1 0xF SIGNEXTEND PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xC0 PUSH1 0xA0 DUP4 ADD MSTORE PUSH2 0x535C PUSH1 0xC0 DUP4 ADD DUP5 PUSH2 0x5189 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x3D9 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x5265 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 MSTORE PUSH2 0x57A1 PUSH1 0x60 DUP4 ADD DUP7 PUSH2 0x5265 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x57B3 DUP2 DUP7 PUSH2 0x51C4 JUMP JUMPDEST SWAP2 POP POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x40 DUP4 ADD MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD DUP5 DUP4 MSTORE PUSH1 0x40 PUSH1 0x20 DUP5 ADD MSTORE DUP1 DUP5 MLOAD DUP1 DUP4 MSTORE PUSH1 0x60 DUP6 ADD SWAP2 POP PUSH1 0x20 DUP7 ADD SWAP3 POP DUP4 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x583B JUMPI DUP4 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 MSTORE PUSH1 0x20 SWAP4 DUP5 ADD SWAP4 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x5807 JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x587C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x589A JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x58BA JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x5901 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x58E9 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x5910 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x4 DUP2 LT PUSH2 0x5920 JUMPI INVALID JUMPDEST POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x5920 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x5920 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0x5920 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0xF SIGNEXTEND DUP2 EQ PUSH2 0x5920 JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG3 PUSH6 0x627A7A723158 KECCAK256 EXTCODESIZE EXP CHAINID CALLDATALOAD 0x27 PUSH16 0x4D27722F1CE880E49E8E08C15C6B2E59 SSTORE 0xAD 0xFB PUSH10 0xE021B3F9AF266C657870 PUSH6 0x72696D656E74 PUSH2 0x6CF5 PUSH5 0x736F6C6343 STOP SDIV GT STOP BLOCKHASH ",
                "sourceMap": "969:1080:4:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;969:1080:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3334:606:19;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;1362:1411:23;;;;;;;;;:::i;1857:1011:24:-;;;;;;;;;:::i;4381:3348::-;;;;;;;;;:::i;:::-;;;;;;;;1639:1145:1;;;;;;;;;:::i;2833:1161:5:-;;;;;;;;;:::i;1887:1091:19:-;;;;;;;;;:::i;4267:2252:26:-;;;;;;;;;:::i;1310:1158:5:-;;;;;;;;;:::i;3780:557:22:-;;;;;;;;;:::i;1448:599:4:-;;;;;;;;;:::i;:::-;;;;;;;;1651:2257:26;;;;;;;;;:::i;3210:1666:1:-;;;;;;;;;:::i;1516:1570:20:-;;;;;;;;;:::i;3561:656::-;;;;;;;;;:::i;1202:1034:27:-;;;;;;;;;:::i;1435:1188:21:-;;;;;;;;;:::i;4661:711:20:-;;;;;;;;;:::i;:::-;;;;;;;;2994:553:21;;;;;;;;;:::i;1363:2056:22:-;;;;;;;;;:::i;2528:1021:27:-;;;;;;;;;:::i;3309:932:24:-;;;;;;;;;:::i;3334:606:19:-;3521:34;3571:40;3588:10;3600;3571:16;:40::i;:::-;3628:305;3664:228;;;;;;;;3733:10;3722:22;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;3722:22:19;;;3664:228;;;;3789:10;3778:22;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;3778:22:19;;;3664:228;;;;3840:37;3664:228;;;3906:17;3628:22;:305::i;:::-;3621:312;;3334:606;;;;;;:::o;1362:1411:23:-;1613:34;1715:18;1736:17;:24;1715:45;;1804:10;1790:25;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;1790:25:23;-1:-1:-1;1770:45:23;-1:-1:-1;1883:25:23;;;1879:80;;-1:-1:-1;1924:24:23;;1879:80;1974:9;1969:798;1993:10;1989:1;:14;1969:798;;;2025:15;2042:23;2085:11;:22;;803:5;2212:1;2199:28;;;:37;;;;2262:10;2298:17;2341:10;2377:17;2395:1;2377:20;;;;;;;;;;;;;;2151:268;;;;;;;;;;;;;;;;22:32:-1;26:21;;;22:32;6:49;;2151:268:23;;;49:4:-1;25:18;;61:17;;2151:268:23;182:15:-1;2151:268:23;;;;179:29:-1;;;;160:49;;;2085:335:23;;;;2151:268;2085:335;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;-1:-1;2024:396:23;;-1:-1:-1;2024:396:23;-1:-1:-1;2434:17:23;2469:94;;;;2526:10;2515:33;;;;;;;;;;;;;;2503:45;;2469:94;2656:14;2652:58;;2690:5;;;;;2652:58;2747:9;2724:17;2742:1;2724:20;;;;;;;;;;;;;;;;;:32;-1:-1:-1;;;2005:3:23;;1969:798;;;;1362:1411;;;;;;;;;:::o;1857:1011:24:-;2059:47;2169:6;:13;2155:28;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;2155:28:24;-1:-1:-1;2122:61:24;-1:-1:-1;2198:9:24;2193:669;2218:6;:13;2213:1;:18;2193:669;;2291:15;2308:23;2359:4;2351:45;;1348:5;2508:41;;;2574:6;2581:1;2574:9;;;;;;;;;;;;;;2608:15;2624:1;2608:18;;;;;;;;;;;;;;2651:8;2461:220;;;;;;;;;;;;;;;22:32:-1;26:21;;;22:32;6:49;;2461:220:24;;;49:4:-1;25:18;;61:17;;2461:220:24;182:15:-1;2461:220:24;;;;179:29:-1;;;;160:49;;;2351:331:24;;;;2461:220;2351:331;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;2290:392:24;;;;2769:10;:82;;2850:1;2769:82;;;2809:10;2798:33;;;;;;;;;;;;;;2733:30;2764:1;2733:33;;;;;;;;;;;;;;;;;:118;-1:-1:-1;;2233:3:24;;2193:669;;;;1857:1011;;;;;:::o;4381:3348::-;4566:27;4613:9;:16;4633:1;4613:21;:64;;;-1:-1:-1;4650:22:24;;;;:27;4613:64;:107;;;-1:-1:-1;4693:22:24;;;;:27;4613:107;4609:154;;;-1:-1:-1;4751:1:24;4744:8;;4609:154;4773:35;;:::i;:::-;4811:28;;;;;:21;;;;;;:28;;4833:5;;4811:28;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4811:28:24;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;4811:28:24;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;4811:28:24;;;;;;;;;4773:66;-1:-1:-1;4878:29:24;4853:21;;:54;;;;;;;;;4849:93;;4930:1;4923:8;;;;;4849:93;4986:19;;;;5007:18;;4956:81;;;;;:29;;;;;;:81;;5027:9;;4956:81;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4956:81:24;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;4956:81:24;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;4956:81:24;;;;;;;;;4951:121;;5060:1;5053:8;;;;;4951:121;5099:44;;;;;5081:15;;5099:22;;;;;;:44;;5122:20;;5099:44;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5099:44:24;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;5099:44:24;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;5099:44:24;;;;;;;;;5081:62;;5153:22;5178:49;5206:5;:20;;;5178:27;:49::i;:::-;5153:74;-1:-1:-1;5241:28:24;;;5237:67;;5292:1;5285:8;;;;;;;5237:67;5313:25;5358:1;5341:5;:14;;;:18;:114;;5453:1;5341:114;;;5374:52;5402:5;:23;;;5374:27;:52::i;:::-;5313:142;;5465:28;5496:82;5540:9;:37;;;5496:5;:22;;;:43;;:82;;;;:::i;:::-;5465:113;;5610:20;5588:42;;5800:32;5835:260;5882:20;5916:5;:22;;;5969:10;5952:27;;:13;:27;;;:133;;6063:5;:22;;;5952:133;;;6029:14;;;;5998:22;;;;:46;;;:30;:46;:::i;:::-;5835:33;:260::i;:::-;6353:18;;6332:40;;;;;5800:295;;-1:-1:-1;6269:28:24;;6300:145;;6332:20;;;;;;:40;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6332:40:24;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;6332:40:24;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;6332:40:24;;;;;;;;;6407:18;;6386:49;;;;;:20;;;;;;:49;;6407:18;6427:7;;6386:49;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6386:49:24;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;6386:49:24;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;6386:49:24;;;;;;;;;6300:18;:145::i;:::-;6269:176;;6625:24;6602:20;:47;6598:260;;;6687:160;6733:20;6771:24;6813:20;6687:28;:160::i;:::-;6665:182;;6598:260;7041:10;7024:27;;:13;:27;;;;:62;;;;-1:-1:-1;7055:31:24;;;;;7024:62;7020:703;;;7201:18;;7177:43;;;;;7102:36;;7141:163;;7177:23;;;;;;:43;;7201:18;7177:43;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;7177:43:24;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;7177:43:24;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;7177:43:24;;;;;;;;;7262:18;;7238:52;;;;;:23;;;;;;:52;;7262:18;7282:7;;7238:52;;;;7141:163;7102:202;;7353:5;:14;;;7322:28;:45;7318:395;;;7409:289;7449:19;7490:190;7544:28;7598:5;:14;;;7638:20;7490:28;:190::i;7409:289::-;7387:311;;7318:395;7020:703;;4381:3348;;;;;;;;;;;;:::o;1639:1145:1:-;1856:34;1906:18;1927:17;:24;1906:45;;1995:10;1981:25;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;1981:25:1;-1:-1:-1;1961:45:1;-1:-1:-1;2021:9:1;2016:762;2040:10;2036:1;:14;2016:762;;;2072:15;2089:23;2132:9;:21;;;:32;;1195:5;2254:9;:35;;;2315:12;2353:10;2389:17;2407:1;2389:20;;;;;;;;;;;;;;2206:225;;;;;;;;;;;;;;;22:32:-1;26:21;;;22:32;6:49;;2206:225:1;;;49:4:-1;25:18;;61:17;;2206:225:1;182:15:-1;2206:225:1;;;;179:29:-1;;;;160:49;;;2132:300:1;;;;2206:225;2132:300;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;-1:-1;2071:361:1;;-1:-1:-1;2071:361:1;-1:-1:-1;2446:17:1;2481:94;;;;2538:10;2527:33;;;;;;;;;;;;;;2515:45;;2481:94;2668:14;2664:58;;2702:5;;;;;2664:58;2758:9;2735:17;2753:1;2735:20;;;;;;;;;;;;;;;;;:32;-1:-1:-1;;;2052:3:1;;2016:762;;;;1639:1145;;;;;;;:::o;2833:1161:5:-;3015:34;3065:40;3082:10;3094;3065:16;:40::i;:::-;3136:24;;3190:25;;;;;;;;;;;;;;;;3136:24;3190:25;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;3190:25:5;-1:-1:-1;3170:45:5;-1:-1:-1;3230:9:5;3225:763;3249:10;3245:1;:14;3225:763;;;3281:15;3298:23;3341:20;:18;:20::i;:::-;:31;;929:6;3473:1;3464:24;;;:33;;;;3523:10;3559;3595:17;3613:1;3595:20;;;;;;;;;;;;;;3416:221;;;;;;;;;;;;;;;22:32:-1;26:21;;;22:32;6:49;;3416:221:5;;;49:4:-1;25:18;;61:17;;3416:221:5;182:15:-1;3416:221:5;;;;179:29:-1;;;;160:49;;;3341:297:5;;;;3416:221;3341:297;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;-1:-1;3280:358:5;;-1:-1:-1;3280:358:5;-1:-1:-1;3652:18:5;3688:95;;;;3746:10;3735:33;;;;;;;;;;;;;;3722:46;;3688:95;3876:15;3872:59;;3911:5;;;;;3872:59;3967:10;3944:17;3962:1;3944:20;;;;;;;;;;;;;;;;;:33;-1:-1:-1;;;3261:3:5;;3225:763;;;;2833:1161;;;;;;:::o;1887:1091:19:-;2075:34;2125:40;2142:10;2154;2125:16;:40::i;:::-;2196:24;;2250:25;;;;;;;;;;;;;;;;2196:24;2250:25;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;2250:25:19;;2230:45;;2285:19;2307:17;:15;:17::i;:::-;2285:39;-1:-1:-1;2334:13:19;;2357:615;2381:10;2377:1;:14;2357:615;;;2430:11;2416:25;;:10;:25;;;:54;;;;2459:11;2445:25;;:10;:25;;;2416:54;2412:508;;;2540:73;2568:10;2580;2592:17;2610:1;2592:20;;;;;;;;;;;;;;2540:27;:73::i;:::-;2532:81;;2412:508;;;2690:74;2718:10;2730:11;2743:17;2761:1;2743:20;;;;;;;2690:74;2682:82;-1:-1:-1;2786:10:19;;2782:124;;2828:59;2856:11;2869:10;2881:5;2828:27;:59::i;:::-;2820:67;;2782:124;2956:5;2933:17;2951:1;2933:20;;;;;;;;;;;;;;;;;:28;2393:3;;2357:615;;;;1887:1091;;;;;;;;:::o;4267:2252:26:-;4449:34;4499:40;4516:10;4528;4499:16;:40::i;:::-;4570:24;;4624:25;;;;;;;;;;;;;;;;4570:24;4624:25;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;4624:25:26;;4604:45;;4659:41;4717:17;:15;:17::i;:::-;4703:31;;:10;:31;;;:105;;4777:31;4797:10;4777:19;:31::i;:::-;4703:105;;;4772:1;4703:105;4659:149;;4818:41;4876:17;:15;:17::i;:::-;4862:31;;:10;:31;;;:105;;4936:31;4956:10;4936:19;:31::i;:::-;4862:105;;;4931:1;4862:105;4818:149;-1:-1:-1;4982:9:26;4977:1536;5001:10;4997:1;:14;4977:1536;;;5050:4;5086:17;:15;:17::i;:::-;5072:31;;:10;:31;;;5068:1367;;;5338:20;;5160:216;;5223:18;;5264:52;;5338:17;;5356:1;;5338:20;;;;;;;;;;;;5160:33;:216::i;:::-;5124:17;5142:1;5124:20;;;;;;;;;;;;;5123:253;;;;;;;;;5068:1367;;;5415:17;:15;:17::i;:::-;5401:31;;:10;:31;;;5397:1038;;;5667:20;;5489:216;;5552:18;;5593:52;;5667:17;;5685:1;;5667:20;;;;;5397:1038;5979:20;;5744:15;;5801:216;;5864:18;;5905:52;;5979:17;;5997:1;;5979:20;;;;;5801:216;5777:240;-1:-1:-1;5777:240:26;-1:-1:-1;6039:12:26;;6035:386;;6112:219;6179:18;6224:52;6302:7;6112:33;:219::i;:::-;6076:17;6094:1;6076:20;;;;;;;;;;;;;6075:256;;;;;;;;;6035:386;;;6401:1;6378:17;6396:1;6378:20;;;;;;;;;;;;;:24;;;;;6035:386;5397:1038;;6453:10;6448:55;;6483:5;;;6448:55;-1:-1:-1;5013:3:26;;4977:1536;;1310:1158:5;1493:34;1543:40;1560:10;1572;1543:16;:40::i;:::-;1614:24;;1668:25;;;;;;;;;;;;;;;;1614:24;1668:25;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;1668:25:5;-1:-1:-1;1648:45:5;-1:-1:-1;1708:9:5;1703:759;1727:10;1723:1;:14;1703:759;;;1759:15;1776:23;1819:20;:18;:20::i;:::-;:31;;929:6;1951:1;1942:24;;;:33;;;;2001:10;2037;2073:17;2091:1;2073:20;;;;;;;;;;;;;;1894:221;;;;;;;;;;;;;;;22:32:-1;26:21;;;22:32;6:49;;1894:221:5;;;49:4:-1;25:18;;61:17;;1894:221:5;182:15:-1;1894:221:5;;;;179:29:-1;;;;160:49;;;1819:297:5;;;;1894:221;1819:297;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;-1:-1;1758:358:5;;-1:-1:-1;1758:358:5;-1:-1:-1;2130:17:5;2165:94;;;;2222:10;2211:33;;;;;;;;;;;;;;2199:45;;2165:94;2352:14;2348:58;;2386:5;;;;;2348:58;2442:9;2419:17;2437:1;2419:20;;;;;;;;;;;;;;;;;:32;-1:-1:-1;;;1739:3:5;;1703:759;;3780:557:22;3964:34;4021:309;4057:232;;;;;;;;4126:10;4115:22;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;4115:22:22;;;4057:232;;;;4182:10;4171:22;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;4171:22:22;;;4057:232;;;;4233:41;4057:232;;;4303:17;4021:22;:309::i;1448:599:4:-;1598:29;;;;;;;;;;;;;;;;1542:26;;1610:9;1598:29;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1584:43:4;-1:-1:-1;1642:9:4;1637:404;1657:21;;;1637:404;;1703:9;;1713:1;1703:12;;;;;;;;;;;;-1:-1:-1;30:25;;92:48;100:14;96:29;;;92:48;68:73;;58:2;;155:1;152;145:12;58:2;174:33;;;69:4;55:19;;;-1:-1;16:22;93:18;82:30;;79:2;;;125:1;122;115:12;79:2;155:14;151:38;;;137:53;;134:2;;;203:1;200;193:12;134:2;1703:24:4;1699:71;;-1:-1:-1;1699:71:4;;1747:8;;1699:71;1784:15;1801:23;1836:4;1853:9;;1863:1;1853:12;;;;;;;;;;;;-1:-1:-1;30:25;;92:48;100:14;96:29;;;92:48;68:73;;58:2;;155:1;152;145:12;58:2;174:33;;;69:4;55:19;;;-1:-1;16:22;93:18;82:30;;79:2;;;125:1;122;115:12;79:2;155:14;151:38;;;137:53;;134:2;;;203:1;200;193:12;134:2;1828:38:4;;;;;;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;1783:83:4;;;;1885:10;1880:110;;1962:10;1956:17;1949:4;1937:10;1933:21;1926:48;1924:52;2020:10;2003:11;2015:1;2003:14;;;;;;;;;;;;;:27;;;;1637:404;;;1680:3;;1637:404;;;;1448:599;;;;:::o;1651:2257:26:-;1834:34;1884:40;1901:10;1913;1884:16;:40::i;:::-;1955:24;;2009:25;;;;;;;;;;;;;;;;1955:24;2009:25;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;2009:25:26;;1989:45;;2044:41;2102:17;:15;:17::i;:::-;2088:31;;:10;:31;;;:105;;2162:31;2182:10;2162:19;:31::i;:::-;2088:105;;;2157:1;2088:105;2044:149;;2203:41;2261:17;:15;:17::i;:::-;2247:31;;:10;:31;;;:105;;2321:31;2341:10;2321:19;:31::i;:::-;2247:105;;;2316:1;2247:105;2203:149;-1:-1:-1;2367:9:26;2362:1540;2386:10;2382:1;:14;2362:1540;;;2435:4;2471:17;:15;:17::i;:::-;2457:31;;:10;:31;;;2453:1371;;;2722:20;;2545:215;;2608:18;;2649:51;;2722:17;;2740:1;;2722:20;;;;;2545:215;2509:17;2527:1;2509:20;;;;;;;;;;;;;2508:252;;;;;;;;;2453:1371;;;2799:17;:15;:17::i;:::-;2785:31;;:10;:31;;;2781:1043;;;3050:20;;2873:215;;2936:18;;2977:51;;3050:17;;3068:1;;3050:20;;;;;2781:1043;3365:20;;3127:17;;3188:215;;3251:18;;3292:51;;3365:17;;3383:1;;3365:20;;;;;3188:215;3162:241;-1:-1:-1;3162:241:26;-1:-1:-1;3425:14:26;;3421:389;;3500:220;3567:18;3612:51;3689:9;3500:33;:220::i;:::-;3464:17;3482:1;3464:20;;;;;;;;;;;;;3463:257;;;;;;;;;3421:389;;;3790:1;3767:17;3785:1;3767:20;;;;;;;;;;;;;:24;;;;;3421:389;2781:1043;;3842:10;3837:55;;3872:5;;;3837:55;-1:-1:-1;2398:3:26;;2362:1540;;3210:1666:1;3480:34;;;;3426;;3480:47;;3476:510;;3658:268;;;;;;;;;3618:357;;3658:268;3720:33;3731:10;3743:9;3720:33;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;3720:33:1;;;3658:268;;;;3802:12;3816:9;3791:35;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;3791:35:1;;;3658:268;;;;3870:37;3658:268;;;3944:17;3618:22;:357::i;:::-;3611:364;;;;3476:510;4016:24;;4070:25;;;;;;;;;;;;;;;;4016:24;4070:25;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;4070:25:1;-1:-1:-1;4050:45:1;-1:-1:-1;4110:9:1;4105:765;4129:10;4125:1;:14;4105:765;;;4161:15;4178:23;4221:9;:21;;;:32;;1195:5;4343:9;:34;;;4403:12;4441:10;4477:17;4495:1;4477:20;;;;;;;;;;;;;;4295:224;;;;;;;;;;;;;;;22:32:-1;26:21;;;22:32;6:49;;4295:224:1;;;49:4:-1;25:18;;61:17;;4295:224:1;182:15:-1;4295:224:1;;;;179:29:-1;;;;160:49;;;4221:299:1;;;;4295:224;4221:299;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;-1:-1;4160:360:1;;-1:-1:-1;4160:360:1;-1:-1:-1;4534:18:1;4570:95;;;;4628:10;4617:33;;;;;;;;;;;;;;4604:46;;4570:95;4758:15;4754:59;;4793:5;;;;;4754:59;4849:10;4826:17;4844:1;4826:20;;;;;;;;;;;;;;;;;:33;-1:-1:-1;;;4141:3:1;;4105:765;;3210:1666;;;;;;;:::o;1516:1570:20:-;1750:34;1852:18;1873:17;:24;1852:45;;1941:10;1927:25;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;1927:25:20;;1907:45;;2011:23;2037:119;2083:15;2112:10;2136;2037:32;:119::i;:::-;2011:145;-1:-1:-1;2226:29:20;;;2222:84;;-1:-1:-1;2271:24:20;;-1:-1:-1;2271:24:20;2222:84;2321:9;2316:764;2340:10;2336:1;:14;2316:764;;;2372:15;2389:23;2432:15;:26;;1023:5;2569:1;2550:34;;;:43;;;;2619:10;2655;2691:17;2709:1;2691:20;;;;;;;;;;;;;;2502:231;;;;;;;;;;;;;;;22:32:-1;26:21;;;22:32;6:49;;2502:231:20;;;49:4:-1;25:18;;61:17;;2502:231:20;182:15:-1;2502:231:20;;;;179:29:-1;;;;160:49;;;2432:302:20;;;;2502:231;2432:302;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;-1:-1;2371:363:20;;-1:-1:-1;2371:363:20;-1:-1:-1;2748:17:20;2783:94;;;;2840:10;2829:33;;;;;;;;;;;;;;2817:45;;2783:94;2970:14;2966:58;;3004:5;;;;;2966:58;3060:9;3037:17;3055:1;3037:20;;;;;;;;;;;;;;;;;:32;-1:-1:-1;;;2352:3:20;;2316:764;;;;1516:1570;;;;;;;;:::o;3561:656::-;3887:282;;;3794:34;3887:282;;;;;;3851:359;;3887:282;3945:39;3956:10;3968:15;3945:39;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;3945:39:20;;;3887:282;;;;4029:10;4041:15;4018:39;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;4018:39:20;;;3887:282;;;;4097:57;3887:282;;;4183:17;3851:22;:359::i;1202:1034:27:-;1362:34;1412:18;1433:17;:24;1412:45;;1501:10;1487:25;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;1487:25:27;-1:-1:-1;1467:45:27;-1:-1:-1;1527:9:27;1522:708;1546:10;1542:1;:14;1522:708;;;1578:15;1595:23;1638:30;:28;:30::i;:::-;:41;;893:5;1792:1;1773:35;;;:44;;;;1843:17;1861:1;1843:20;;;;;;;;;;;;;;1889:4;1725:190;;;;;;;;;;;;;;22:32:-1;26:21;;;22:32;6:49;;1725:190:27;;;49:4:-1;25:18;;61:17;;1725:190:27;182:15:-1;1725:190:27;;;;179:29:-1;;;;160:49;;;1638:278:27;;;;1725:190;1638:278;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;-1:-1;1577:339:27;;-1:-1:-1;1577:339:27;-1:-1:-1;1930:17:27;1965:209;;;;2074:10;2063:35;;;;;;;;;;;;;;2113:1;2099:4;:11;:15;2063:52;;;;;;;;;;;;;;2051:64;;1965:209;;;2154:5;;;;;1965:209;2210:9;2187:17;2205:1;2187:20;;;;;;;;;;;;;;;;;:32;-1:-1:-1;;;1558:3:27;;1522:708;;;;1202:1034;;;;;:::o;1435:1188:21:-;1618:34;1720:18;1741:17;:24;1720:45;;1809:10;1795:25;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;1795:25:21;-1:-1:-1;1775:45:21;-1:-1:-1;1836:9:21;1831:786;1855:10;1851:1;:14;1831:786;;;1887:15;1904:23;1955:17;:15;:17::i;:::-;1947:37;;1042:5;2085:1;2076:25;;;:34;;;;2136:10;2172;2208:17;2226:1;2208:20;;;;;;;;;;;;;;2028:222;;;;;;;;;;;;;;;22:32:-1;26:21;;;22:32;6:49;;2028:222:21;;;49:4:-1;25:18;;61:17;;2028:222:21;182:15:-1;2028:222:21;;;;179:29:-1;;;;160:49;;;1947:304:21;;;;2028:222;1947:304;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;-1:-1;1886:365:21;;-1:-1:-1;1886:365:21;-1:-1:-1;2265:17:21;2300:114;;;;2363:10;2352:47;;;;;;;;;;;;;;2334:65;-1:-1:-1;;;2300:114:21;2507:14;2503:58;;2541:5;;;;;2503:58;2597:9;2574:17;2592:1;2574:20;;;;;;;;;;;;;;;;;:32;-1:-1:-1;;;1867:3:21;;1831:786;;4661:711:20;4843:23;4886:29;;;4882:77;;-1:-1:-1;4946:1:20;4931:17;;4882:77;4992:162;;4968:21;;5028:68;;4992:162;;5110:10;;5134;;4992:162;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;4992:162:20;;;;;;;38:4:-1;29:7;25:18;67:10;61:17;96:58;199:8;192:4;186;182:15;179:29;167:10;160:49;0:215;;;4992:162:20;4968:186;;5165:15;5182:23;5209:15;:26;;5236:8;5209:36;;;;;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;5164:81:20;;;;5259:10;:37;;;;;5273:10;:17;5294:2;5273:23;5259:37;5255:111;;;5319:36;5340:10;5352:2;5319:20;:36::i;:::-;5312:43;;;;;;;5255:111;4661:711;;;;;;;;:::o;2994:553:21:-;3176:34;3233:307;3269:230;;;;;;;;3338:10;3327:22;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;3327:22:21;;;3269:230;;;;3394:10;3383:22;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;3383:22:21;;;3269:230;;;;3445:39;3269:230;;;3513:17;3233:22;:307::i;1363:2056:22:-;1548:34;1598:40;1615:10;1627;1598:16;:40::i;:::-;1669:24;;1723:25;;;;;;;;;;;;;;;;1669:24;1723:25;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;1723:25:22;;1703:45;;1759:19;1795:17;:15;:17::i;:::-;1781:31;;:10;:31;;;:57;;1828:10;1781:57;;;1823:1;1781:57;1759:79;;1848:19;1884:17;:15;:17::i;:::-;1870:31;;:10;:31;;;:57;;1917:10;1870:57;;;1912:1;1870:57;1848:79;;2020:15;2081:22;:20;:22::i;:::-;2062:48;;;2111:11;2124;2062:74;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2062:74:22;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2062:74:22;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;2062:74:22;;;;;;;;;2020:126;-1:-1:-1;2209:27:22;;;2205:82;;-1:-1:-1;2252:24:22;;-1:-1:-1;;;2252:24:22;2205:82;2297:19;2319:25;;;;:101;;2371:49;;;;;:34;;;;;;:49;;2414:4;;2371:49;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2371:49:22;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2371:49:22;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;2371:49:22;;;;;;;;;2319:101;;;2355:4;2347:21;;;2319:101;2297:123;-1:-1:-1;2436:9:22;2431:982;2455:10;2451:1;:14;2431:982;;;2640:17;2658:1;2640:20;;;;;;;;;;;;;;2626:11;:34;2622:78;;;2680:5;;2622:78;2714:15;2731:23;2782:4;2774:24;;985:5;2903:1;2892:23;;;:32;;;;2950:11;2987;3024:17;3042:1;3024:20;;;;;;;;;;;;;;2844:222;;;;;;;;;;;;;;;22:32:-1;26:21;;;22:32;6:49;;2844:222:22;;;49:4:-1;25:18;;61:17;;2844:222:22;182:15:-1;2844:222:22;;;;179:29:-1;;;;160:49;;;2774:293:22;;;;2844:222;2774:293;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;-1:-1;2713:354:22;;-1:-1:-1;2713:354:22;-1:-1:-1;3081:17:22;3116:94;;;;3173:10;3162:33;;;;;;;;;;;;;;3150:45;;3116:94;3303:14;3299:58;;3337:5;;;;;3299:58;3393:9;3370:17;3388:1;3370:20;;;;;;;;;;;;;;;;;:32;-1:-1:-1;;;2467:3:22;;2431:982;;;;1363:2056;;;;;;;;;;:::o;2528:1021:27:-;2687:34;2737:18;2758:17;:24;2737:45;;2826:10;2812:25;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;2812:25:27;-1:-1:-1;2792:45:27;-1:-1:-1;2852:9:27;2847:696;2871:10;2867:1;:14;2847:696;;;2903:15;2920:23;2963:30;:28;:30::i;:::-;:41;;893:5;3117:1;3098:34;;;:43;;;;3167:17;3185:1;3167:20;;;;;;;;;;;;;;3213:4;3050:189;;;;;;;;;;;;;;22:32:-1;26:21;;;22:32;6:49;;3050:189:27;;;49:4:-1;25:18;;61:17;;3050:189:27;182:15:-1;3050:189:27;;;;179:29:-1;;;;160:49;;;2963:277:27;;;;3050:189;2963:277;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;-1:-1;2902:338:27;;-1:-1:-1;2902:338:27;-1:-1:-1;3254:18:27;3290:196;;;;3400:10;3389:35;;;;;;;;;;;;;;3425:1;3389:38;;;;;;;;;;;;;;3376:51;;3522:10;3499:17;3517:1;3499:20;;;;;;;;;;;;;;;;;:33;-1:-1:-1;;;2883:3:27;;2847:696;;3309:932:24;3511:47;3607:114;3654:6;3674:15;3703:8;3607:33;:114::i;:::-;3574:147;-1:-1:-1;3862:9:24;3857:378;3881:6;:13;3877:1;:17;3857:378;;;3919:30;3950:1;3919:33;;;;;;;;;;;;;;3956:1;3919:38;3915:310;;4013:197;4063:30;4094:1;4063:33;;;;;;;;;;;;;;4118:6;4125:1;4118:9;;;;;;;;;;;;;;:26;;;4166:6;4173:1;4166:9;;;;;;;;;;;;;;:26;;;4013:28;:197::i;:::-;3977:30;4008:1;3977:33;;;;;;;;;;;;;:233;;;;;3915:310;3896:3;;3857:378;;1424:191:25;1556:10;1542:24;;:10;:24;;;;1534:74;;;;;;;;;;;;;;;;;;;;;;1424:191;;:::o;3946:730:19:-;4147:17;4181:12;4195:23;4242:4;4234:24;;4299:41;;;4369:14;4358:37;;;;;;;;;;;;;;4424:14;4413:37;;;;;;;;;;;;;;4468:31;4488:10;4468:19;:31::i;:::-;4259:254;;;;;;;;;;;;;;;22:32:-1;26:21;;;22:32;6:49;;4259:254:19;;;49:4:-1;25:18;;61:17;;4259:254:19;182:15:-1;4259:254:19;;;;179:29:-1;;;;160:49;;;4234:280:19;;;;4259:254;4234:280;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;4180:334:19;;;;4529:7;4524:47;;4559:1;4552:8;;;;;;4524:47;4642:10;4631:35;;;;;;;;;;;;;;4667:1;4631:38;;;;;;;;;;;;;;4624:45;;;;3946:730;;;;;:::o;1655:2799:0:-;1829:34;1913:17;:24;1899:39;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;1899:39:0;;1879:59;;1952:17;:24;1980:1;1952:29;1948:84;;;1997:24;;1948:84;2042:18;2063:135;2102:4;:19;;;2135:4;:19;;;2168:17;2186:1;2168:20;;;;;;;;;;;;;;2063:4;:25;;;:135;;:::i;:::-;2042:156;-1:-1:-1;2212:15:0;2208:70;;-1:-1:-1;2243:24:0;;2208:70;2288:17;2308:125;2347:4;:19;;;2380:4;:19;;;2413:10;2308:4;:25;;;:125;;:::i;:::-;2288:145;-1:-1:-1;2447:14:0;2443:69;;-1:-1:-1;2477:24:0;;-1:-1:-1;2477:24:0;2443:69;2527:9;2522:1926;2546:17;:24;2542:1;:28;2522:1926;;;2596:12;2591:1442;1647:1;2614:4;:37;2591:1442;;;2787:151;2837:17;2855:1;2837:20;;;;;;;;;;;;;;2879:9;2910:10;2787:28;:151::i;:::-;2774:164;-1:-1:-1;2969:205:0;3020:59;1342:3;2774:164;2969:28;:205::i;:::-;2956:218;;3192:18;3213:157;3260:4;:19;;;3301:4;:19;;;3342:10;3213:4;:25;;;:157;;:::i;:::-;3192:178;-1:-1:-1;3392:15:0;3388:67;;3431:5;;;3388:67;3588:10;3576:22;;3690:17;3708:1;3690:20;;;;;;;;;;;;;;3677:9;:33;3673:346;;3734:11;3858:17;3876:1;3858:20;;;;;;;;;;;;;;1342:3;3785:17;3803:1;3785:20;;;;;;;;;;;;;;3773:9;:32;3772:59;:106;;;;;;3734:144;;1500:8;3904:3;:41;3900:101;;3973:5;;;;3900:101;3673:346;;-1:-1:-1;2653:6:0;;2591:1442;;;;4302:135;4348:17;4366:1;4348:20;;;;;;;;;;;;;;4386:9;4413:10;4302:28;:135::i;:::-;4279:17;4297:1;4279:20;;;;;;;;;;;;;;;;;:158;2572:3;;2522:1926;;;;1655:2799;;;;;;;:::o;7735:446:24:-;7842:17;7879:9;:16;7899:1;7879:21;7875:82;;;-1:-1:-1;7943:1:24;7916:30;;7875:82;7970:9;:16;7990:2;7970:22;;:85;;;-1:-1:-1;8035:20:24;8008:23;:9;8029:1;8008:23;:20;:23;:::i;:::-;:47;;;;7970:85;7966:154;;;-1:-1:-1;8106:1:24;8079:30;;7966:154;8148:25;:9;8170:2;8148:25;:21;:25;:::i;:::-;8129:45;;7735:446;;;;:::o;965:364:53:-;1051:7;1082:1;1078;:5;1074:227;;;1099:191;1121:168;1178:59;1255:1;1274;1121:39;:168::i;:::-;1099:21;:191::i;:::-;-1:-1:-1;1317:5:53;;;965:364::o;1335:383::-;1421:7;1456:5;;;1475;;;1471:223;;;1496:187;1518:164;1575:55;1648:1;1667;1518:39;:164::i;1141:603:35:-;1309:21;1350:110;1388:9;1415:11;1444:6;1350:20;:110::i;:::-;1346:289;;;1476:148;1498:125;1547:9;1574:11;1603:6;1498:31;:125::i;1476:148::-;1661:46;1695:11;1661:25;:9;1679:6;1661:25;:17;:25;:::i;:::-;:33;:46;:33;:46;:::i;1866:135:53:-;1951:7;1985:1;1981;:5;:13;;1993:1;1981:13;;;-1:-1:-1;1989:1:53;;1974:20;-1:-1:-1;1866:135:53:o;3762:545:35:-;3925:21;4165:104;4257:11;4165:70;4212:22;4257:11;4232:1;4212:22;:19;:22;:::i;:::-;4165:25;:9;4183:6;4165:25;:17;:25;:::i;:::-;:46;:70;:46;:70;:::i;10718:144:48:-;1549:42;10718:144;:::o;9781:135::-;871:42;9781:135;:::o;5401:2822:19:-;5580:24;5621:27;5650:26;5680:20;:18;:20::i;:::-;5620:80;;;;5780:27;5810:12;:37;;;5875:17;:15;:17::i;:::-;5861:31;;:10;:31;;;:57;;5908:10;5861:57;;;5895:10;5861:57;5810:118;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5810:118:19;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;5810:118:19;;;;;;39:16:-1;36:1;17:17;2:54;101:4;5810:118:19;80:15:-1;;;97:9;76:31;65:43;;120:4;113:20;5810:118:19;;;;;;;;;5974:16;;;5988:1;5974:16;;;;;;;;;5780:148;;-1:-1:-1;6039:443:19;6063:10;:17;6059:1;:21;6039:443;;;6139:48;;;;;:25;;;;;;:48;;1191:42;;6139:48;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6139:48:19;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;6139:48:19;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;6139:48:19;;;;;;;;;6122:10;6133:1;6122:13;;;;;;;;;;;;;;:65;:152;;;-1:-1:-1;6224:50:19;;;;;:25;;;;;;:50;;1340:42;;6224:50;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6224:50:19;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;6224:50:19;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;6224:50:19;;;;;;;;;6207:10;6218:1;6207:13;;;;;;;;;;;;;;:67;6122:152;:237;;;-1:-1:-1;6311:48:19;;;;;:25;;;;;;:48;;1484:42;;6311:48;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6311:48:19;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;6311:48:19;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;6311:48:19;;;;;;;;;6294:10;6305:1;6294:13;;;;;;;;;;;;;;:65;6122:237;6101:371;;;6411:46;6425:16;6443:10;6454:1;6443:13;;;;;;;;;;;;;;6411;:46::i;:::-;6392:65;;6101:371;6082:3;;6039:443;;;;6614:17;6659;:15;:17::i;:::-;6645:31;;:10;:31;;;6641:543;;;6723:9;:29;;;6774:10;6806:35;6863:16;6915:1;6901:16;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;6901:16:19;;6723:195;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6723:195:19;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;6723:195:19;;;;;;39:16:-1;36:1;17:17;2:54;101:4;6723:195:19;80:15:-1;;;97:9;76:31;65:43;;120:4;113:20;6723:195:19;;;;;;;;;6716:202;;6641:543;;;6978:9;:29;;;7029:10;7061:35;7118:16;7170:1;7156:16;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;7156:16:19;;6978:195;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6978:195:19;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;6978:195:19;;;;;;39:16:-1;36:1;17:17;2:54;101:4;6978:195:19;80:15:-1;;;97:9;76:31;65:43;;120:4;113:20;6978:195:19;;;;;;;;;6971:202;;6641:543;7194:15;7211:23;7250:30;:28;:30::i;:::-;:41;;1075:6;7373:54;7463:17;:15;:17::i;:::-;7449:31;;:10;:31;;;:64;;7503:10;7449:64;;;2295:42:48;7449:64:19;7549:17;:15;:17::i;:::-;7535:31;;:10;:31;;;:64;;7589:10;7535:64;;;2295:42:48;7535:64:19;7621:16;7659:1;7689:4;7329:382;;;;;;;;;;;;;;;;;22:32:-1;26:21;;;22:32;6:49;;7329:382:19;;;49:4:-1;25:18;;61:17;;7329:382:19;182:15:-1;7329:382:19;;;;179:29:-1;;;;160:49;;;7250:462:19;;;;7329:382;7250:462;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;-1:-1;7193:519:19;;-1:-1:-1;7193:519:19;-1:-1:-1;7722:12:19;7748:122;;;;7798:10;7787:33;;;;;;;;;;;;;;7778:42;;7748:122;;;7858:1;7851:8;;;;;;;;;;;;7748:122;7880:26;7909:29;7927:10;7909:17;:29::i;:::-;7880:58;;;;7948:26;7977:29;7995:10;7977:17;:29::i;:::-;7948:58;;;;8175:8;8142:18;8136:2;:24;8103:18;8097:2;:24;8066:16;8047:4;:35;:74;:113;;;;;;:136;;;;;;;5401:2822;-1:-1:-1;;;;;;;;;;;;;;5401:2822:19:o;7940:316:26:-;8037:31;8163:35;:33;:35::i;:::-;8139:85;;;8225:12;8139:99;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;8139:99:26;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;8139:99:26;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;8139:99:26;;;;;;;;6977:721;7174:20;;7231:36;;;7227:100;;7283:33;;7227:100;7336:23;7408:22;:33;;1275:5;7525:16;7563:11;7481:111;;;;;;;;;;;;;22:32:-1;26:21;;;22:32;6:49;;7481:111:26;;;49:4:-1;25:18;;61:17;;7481:111:26;182:15:-1;7481:111:26;;;;179:29:-1;;;;160:49;;;7408:185:26;;;;7481:111;7408:185;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;-1:-1;7369:224:26;;-1:-1:-1;7369:224:26;-1:-1:-1;7603:89:26;;;;7659:10;7648:33;;;;;;;;;;;;;;7633:48;;7603:89;6977:721;;;;;;;;:::o;4343:841:22:-;4548:17;4582:18;4627:14;4616:37;;;;;;;;;;;;;;4581:72;;4664:18;4709:14;4698:37;;;;;;;;;;;;;;4663:72;-1:-1:-1;4746:12:22;4760:23;4807:4;4864:38;4920:10;4663:72;4976:31;4996:10;4976:19;:31::i;:::-;4824:197;;;;;;;;;;;;;;;22:32:-1;26:21;;;22:32;6:49;;4824:197:22;;;49:4:-1;25:18;;61:17;;4824:197:22;182:15:-1;4824:197:22;;;;179:29:-1;;;;160:49;;;4799:223:22;;;;4824:197;4799:223;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;4745:277:22;;;;5037:7;5032:47;;5067:1;5060:8;;;;;;;;5032:47;5150:10;5139:35;;;;;;;;;;;;;;5175:1;5139:38;;;;;;;;;;;;;;5132:45;;;;;;4343:841;;;;;:::o;4882:907:1:-;5083:17;5117:20;5139:26;;:::i;:::-;5192:14;5181:47;;;;;;;;;;;;;;5116:112;;;;5239:20;5286:14;5275:36;;;;;;;;;;;;;;5238:73;-1:-1:-1;5322:12:1;5336:23;5383:4;5440:34;5492:9;5519:13;5238:73;5581:31;5601:10;5581:19;:31::i;:::-;5400:226;;;;;;;;;;;;;;;;22:32:-1;26:21;;;22:32;6:49;;5400:226:1;;;49:4:-1;25:18;;61:17;;5400:226:1;182:15:-1;5400:226:1;;;;179:29:-1;;;;160:49;;;5375:252:1;;;;5400:226;5375:252;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;5321:306:1;;;;5642:7;5637:47;;5672:1;5665:8;;;;;;;;;5637:47;5755:10;5744:35;;;;;;;;;;;;;;5780:1;5744:38;;;;;;;;;;;;;;5737:45;;;;;;;4882:907;;;;;:::o;5378:946:20:-;5599:17;5633:18;5653:26;5706:14;5695:46;;;;;;;;;;;;;;5632:109;;;;5752:18;5797:14;5786:37;;;;;;;;;;;;;;5751:72;-1:-1:-1;5834:12:20;5848:23;5895:4;5952:54;6024:18;6060:10;5751:72;6116:31;6136:10;6116:19;:31::i;:::-;5912:249;;;;;;;;;;;;10386:173:48;1387:42;10386:173;:::o;12875:128::-;2865:42;12875:128;:::o;10753:1071:49:-;10874:14;10919:5;10927:2;10919:10;10908:1;:8;:21;10904:321;;;10945:269;10967:246;11029:89;11136:1;:8;11162:5;11170:2;11162:10;10967:44;:246::i;10945:269::-;-1:-1:-1;11726:13:49;11471:2;11726:13;11720:20;11742:42;11716:69;;10753:1071::o;3553:837:21:-;3756:17;3790:18;3835:14;3824:37;;;;;;;;;;;;;;3789:72;;3872:18;3917:14;3906:37;;;;;;;;;;;;;;3871:72;-1:-1:-1;3954:12:21;3968:23;4015:4;4072:36;4126:10;3871:72;4182:31;4202:10;4182:19;:31::i;13138:143:48:-;3023:42;13138:143;:::o;1075:172:25:-;1204:16;;;1218:1;1204:16;;;;;;;;;1162:20;;1204:16;;;;;;105:10:-1;1204:16:25;88:34:-1;136:17;;-1:-1;1204:16:25;1198:22;;1239:1;1230:3;1234:1;1230:6;;;;;;;;;;;;;:10;;;;;1075:172;;;:::o;16814:871:49:-;16934:13;16978:5;16986:1;16978:9;16967:1;:8;:20;16963:290;;;17003:239;17025:216;17087:87;17192:1;:8;17218:5;17226:1;17218:9;17025:44;:216::i;17003:239::-;-1:-1:-1;17426:13:49;17329:2;17426:13;17420:20;17579:66;17567:79;;16814:871::o;731:322:54:-;884:12;196:10;955:28;;997:9;1020:1;1035;919:127;;;;;;;;;;;;;;;22:32:-1;26:21;;;22:32;6:49;;919:127:54;;;49:4:-1;25:18;;61:17;;919:127:54;182:15:-1;919:127:54;;;;179:29:-1;;;;160:49;;;919:127:54;-1:-1:-1;731:322:54;;;;;:::o;1511:170:52:-;1654:9;1648:16;1641:4;1630:9;1626:20;1619:46;4566:1880:35;4729:12;4761:16;4757:109;;4793:62;4815:39;:37;:39::i;4793:62::-;5676:11;;;:29;;-1:-1:-1;5691:14:35;;5676:29;5672:72;;;-1:-1:-1;5728:5:35;5721:12;;5672:72;6239:17;6322:11;6259:84;;;;;6299:9;6279:6;6259:84;6239:104;-1:-1:-1;6390:25:35;:9;6408:6;6390:25;:17;:25;:::i;:::-;6363:23;:9;6381:4;6363:23;:17;:23;:::i;:::-;:52;;;4566:1880;-1:-1:-1;;;;;4566:1880:35:o;520:335:36:-;676:12;312:10;747:23;;784:9;807:11;832:6;711:137;;;;;;;;;;;122:448:53;208:7;235:6;231:45;;-1:-1:-1;264:1:53;257:8;;231:45;297:5;;;301:1;297;:5;:1;316:5;;;;;:10;312:234;;342:193;364:170;421:61;500:1;519;364:39;:170::i;576:383::-;662:7;689:6;685:223;;711:186;733:163;790:54;862:1;881;733:39;:163::i;711:186::-;917:9;933:1;929;:5;;;;;;;576:383;-1:-1:-1;;;;576:383:53:o;5022:373:19:-;5098:27;5127:26;5250:30;:28;:30::i;:::-;5231:63;;;:65;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5231:65:19;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;5231:65:19;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;5231:65:19;;;;;;;;;5204:106;;;:108;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5204:108:19;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;5204:108:19;;;;;;39:16:-1;36:1;17:17;2:54;101:4;5204:108:19;80:15:-1;;;97:9;76:31;65:43;;120:4;113:20;5204:108:19;;;;;;;;;-1:-1:-1;5169:143:19;;-1:-1:-1;5169:143:19;-1:-1:-1;;;;5022:373:19;;:::o;4682:334::-;4764:29;4838:4;:11;4852:1;4838:15;4824:30;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;4824:30:19;-1:-1:-1;4809:45:19;-1:-1:-1;4869:9:19;4864:92;4888:4;:11;4884:1;:15;4864:92;;;4938:4;4943:1;4938:7;;;;;;;;;;;;;;4920:12;4933:1;4920:15;;;;;;;;;;;;;;;;;:25;4901:3;;4864:92;;;;5005:4;4965:12;5000:1;4978:12;:19;:23;4965:37;;;;;;;;;;;;;:44;;;;;4682:334;;;;:::o;9511:164:48:-;1038:42;9511:164;:::o;893:176:25:-;989:14;1026:36;1049:12;1026:22;:36::i;10065:176:48:-;1217:42;10065:176;:::o;1292:378:50:-;1480:12;1232:10;1551:37;;1602:9;1625:6;1645:8;1515:148;;;;;;;;;;;372:142:36;485:22;;;;;;;;;;;;;;;;;372:142;:::o;3905:366:32:-;3985:19;4036:2;4020:18;;4049:15;4066:23;4093:5;:16;;4110:18;;;;;;;;;;;;;;;;;4093:36;;;;;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;4048:81:32;;;;4143:10;:37;;;;;4157:10;:17;4178:2;4157:23;4143:37;4139:126;;;4218:35;4239:10;4251:1;4218:20;:35::i;:::-;4196:58;;4139:126;3905:366;;;;;:::o;15929:220:49:-;16050:14;16097:21;16109:1;16112:5;14254:14;14299:5;14307:2;14299:10;14288:1;:8;:21;14284:297;;;14325:245;14347:222;14409:92;14519:1;:8;14545:5;14553:2;14545:10;14347:44;:222::i;14325:245::-;-1:-1:-1;14759:13:49;14661:2;14759:13;14753:20;;14133:679::o;969:1080:4:-;;;;;;;;;;;-1:-1:-1;969:1080:4;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;-1:-1:-1;969:1080:4;;;;;;;;;;;;;;;;;:::o;5:130:-1:-;72:20;;97:33;72:20;97:33;;142:134;220:13;;238:33;220:13;238:33;;3068:693;;3190:3;3183:4;3175:6;3171:17;3167:27;3157:2;;-1:-1;;3198:12;3157:2;3245:6;3232:20;3267:85;3282:69;3344:6;3282:69;;;3267:85;;;3380:21;;;3258:94;-1:-1;3424:4;3437:14;;;;3412:17;;3532:1;3517:238;3542:6;3539:1;3536:13;3517:238;;;3649:42;3687:3;3424:4;3625:3;3612:17;3416:6;3600:30;;3649:42;;;3637:55;;3424:4;3706:14;;;;3734;;;;;3564:1;3557:9;3517:238;;;3521:14;;;;3150:611;;;;;5302:707;;5419:3;5412:4;5404:6;5400:17;5396:27;5386:2;;-1:-1;;5427:12;5386:2;5474:6;5461:20;5496:80;5511:64;5568:6;5511:64;;5496:80;5604:21;;;5487:89;-1:-1;5648:4;5661:14;;;;5636:17;;;5750;;;5741:27;;;;5738:36;-1:-1;5735:2;;;5787:1;;5777:12;5735:2;5812:1;5797:206;5822:6;5819:1;5816:13;5797:206;;;17109:20;;5890:50;;5954:14;;;;5982;;;;5844:1;5837:9;5797:206;;;5801:14;;;;;5379:630;;;;;6568:432;;6665:3;6658:4;6650:6;6646:17;6642:27;6632:2;;-1:-1;;6673:12;6632:2;6720:6;6707:20;6742:60;6757:44;6794:6;6757:44;;6742:60;6733:69;;6822:6;6815:5;6808:21;6926:3;6858:4;6917:6;6850;6908:16;;6905:25;6902:2;;;6943:1;;6933:12;6902:2;67123:6;6858:4;6850:6;6846:17;6858:4;6884:5;6880:16;67100:30;67179:1;67161:16;;;6858:4;67161:16;67154:27;6884:5;6625:375;-1:-1;;6625:375;7458:442;;7570:3;7563:4;7555:6;7551:17;7547:27;7537:2;;-1:-1;;7578:12;7537:2;7618:6;7612:13;7640:64;7655:48;7696:6;7655:48;;7640:64;7631:73;;7724:6;7717:5;7710:21;7828:3;7760:4;7819:6;7752;7810:16;;7807:25;7804:2;;;7845:1;;7835:12;7804:2;7855:39;7887:6;7760:4;7786:5;7782:16;7760:4;7752:6;7748:17;7855:39;;11568:2714;;11676:6;;11664:9;11659:3;11655:19;11651:32;11648:2;;;-1:-1;;11686:12;11648:2;11714:22;11676:6;11714:22;;;11705:31;;;11826:49;11871:3;11847:22;11826:49;;;11808:16;11801:75;11978:49;12023:3;11945:2;12003:9;11999:22;11978:49;;;11945:2;11964:5;11960:16;11953:75;12137:49;12182:3;12104:2;12162:9;12158:22;12137:49;;;12104:2;12123:5;12119:16;12112:75;12290:49;12335:3;12257:2;12315:9;12311:22;12290:49;;;12257:2;12276:5;12272:16;12265:75;12413:3;12472:9;12468:22;17109:20;12413:3;12433:5;12429:16;12422:75;12570:3;12629:9;12625:22;17109:20;12570:3;12590:5;12586:16;12579:75;12719:3;12778:9;12774:22;17109:20;12719:3;12739:5;12735:16;12728:75;12868:3;12927:9;12923:22;17109:20;12868:3;12888:5;12884:16;12877:75;13030:3;;13091:9;13087:22;17109:20;13030:3;13050:5;13046:18;13039:77;;13177:3;;13238:9;13234:22;17109:20;13177:3;13197:5;13193:18;13186:77;;13362:3;;13351:9;13347:19;13334:33;13387:18;;13379:6;13376:30;13373:2;;;11794:1;;13409:12;13373:2;13456:54;13506:3;13497:6;13486:9;13482:22;13456:54;;;13362:3;13440:5;13436:18;13429:82;13610:3;;;;13599:9;13595:19;13582:33;13568:47;;13387:18;13627:6;13624:30;13621:2;;;11794:1;;13657:12;13621:2;13704:54;13754:3;13745:6;13734:9;13730:22;13704:54;;;13610:3;13688:5;13684:18;13677:82;13861:3;;;;13850:9;13846:19;13833:33;13819:47;;13387:18;13878:6;13875:30;13872:2;;;11794:1;;13908:12;13872:2;13955:54;14005:3;13996:6;13985:9;13981:22;13955:54;;;13861:3;13939:5;13935:18;13928:82;14112:3;;;;14101:9;14097:19;14084:33;14070:47;;13387:18;14129:6;14126:30;14123:2;;;11794:1;;14159:12;14123:2;;14206:54;14256:3;14247:6;14236:9;14232:22;14206:54;;;14112:3;14190:5;14186:18;14179:82;;;11642:2640;;;;;17320:263;;17435:2;17423:9;17414:7;17410:23;17406:32;17403:2;;;-1:-1;;17441:12;17403:2;226:6;220:13;238:33;265:5;238:33;;17876:431;;;18024:2;18012:9;18003:7;17999:23;17995:32;17992:2;;;-1:-1;;18030:12;17992:2;375:6;369:13;387:41;422:5;387:41;;;18201:2;18259:22;;369:13;18082:82;;-1:-1;387:41;369:13;387:41;;;18209:82;;;;17986:321;;;;;;18314:491;;;;18452:2;18440:9;18431:7;18427:23;18423:32;18420:2;;;-1:-1;;18458:12;18420:2;85:6;72:20;97:33;124:5;97:33;;;18510:63;-1:-1;18610:2;18649:22;;72:20;97:33;72:20;97:33;;;18618:63;-1:-1;18718:2;18757:22;;72:20;97:33;72:20;97:33;;;18726:63;;;;18414:391;;;;;;18812:879;;;;;;19009:3;18997:9;18988:7;18984:23;18980:33;18977:2;;;-1:-1;;19016:12;18977:2;85:6;72:20;97:33;124:5;97:33;;;19068:63;-1:-1;19168:2;19207:22;;72:20;97:33;72:20;97:33;;;19176:63;-1:-1;19276:2;19315:22;;72:20;97:33;72:20;97:33;;;19284:63;-1:-1;19384:2;19423:22;;72:20;97:33;72:20;97:33;;;19392:63;-1:-1;19520:3;19505:19;;19492:33;19545:18;19534:30;;19531:2;;;-1:-1;;19567:12;19531:2;19597:78;19667:7;19658:6;19647:9;19643:22;19597:78;;;19587:88;;;18971:720;;;;;;;;;19698:753;;;;;19878:3;19866:9;19857:7;19853:23;19849:33;19846:2;;;-1:-1;;19885:12;19846:2;85:6;72:20;97:33;124:5;97:33;;;19937:63;-1:-1;20037:2;20076:22;;72:20;97:33;72:20;97:33;;;20045:63;-1:-1;20145:2;20184:22;;72:20;97:33;72:20;97:33;;;20153:63;-1:-1;20281:2;20266:18;;20253:32;20305:18;20294:30;;20291:2;;;-1:-1;;20327:12;20291:2;20357:78;20427:7;20418:6;20407:9;20403:22;20357:78;;;20347:88;;;19840:611;;;;;;;;20458:627;;;;20621:2;20609:9;20600:7;20596:23;20592:32;20589:2;;;-1:-1;;20627:12;20589:2;85:6;72:20;97:33;124:5;97:33;;;20679:63;-1:-1;20779:2;20818:22;;72:20;97:33;72:20;97:33;;;20787:63;-1:-1;20915:2;20900:18;;20887:32;20939:18;20928:30;;20925:2;;;-1:-1;;20961:12;20925:2;20991:78;21061:7;21052:6;21041:9;21037:22;20991:78;;;20981:88;;;20583:502;;;;;;21092:1171;;;;;;;21365:3;21353:9;21344:7;21340:23;21336:33;21333:2;;;-1:-1;;21372:12;21333:2;226:6;220:13;238:33;265:5;238:33;;;21424:74;;;;21535:2;;21589:9;21585:22;220:13;238:33;265:5;238:33;;;21654:2;21730:22;;8185:13;21543:74;;-1:-1;8203:59;8185:13;8203:59;;;21799:2;21871:22;;8374:13;21662:100;;-1:-1;8392:55;8374:13;8392:55;;;21940:3;21991:22;;220:13;21807:96;;-1:-1;238:33;220:13;238:33;;;22081:3;22066:19;;22060:26;21949:74;;-1:-1;22106:18;22095:30;;22092:2;;;-1:-1;;22128:12;22092:2;22230:6;22219:9;22215:22;1319:3;1312:4;1304:6;1300:17;1296:27;1286:2;;-1:-1;;1327:12;1286:2;1367:6;1361:13;1347:27;;1389:80;1404:64;1461:6;1404:64;;1389:80;1497:21;;;1554:14;;;;1529:17;;;1643;;;1634:27;;;;1631:36;-1:-1;1628:2;;;-1:-1;;1670:12;1628:2;-1:-1;1696:10;;1690:217;1715:6;1712:1;1709:13;1690:217;;;1795:48;1839:3;1827:10;1795:48;;;1783:61;;1737:1;1730:9;;;;;1858:14;;;;1886;;1690:217;;;1694:14;22148:99;;;;;;;;21327:936;;;;;;;;;22270:638;;;22441:2;22429:9;22420:7;22416:23;22412:32;22409:2;;;-1:-1;;22447:12;22409:2;22505:17;22492:31;22543:18;;22535:6;22532:30;22529:2;;;-1:-1;;22565:12;22529:2;22656:6;22645:9;22641:22;575:3;568:4;560:6;556:17;552:27;542:2;;-1:-1;;583:12;542:2;630:6;617:20;603:34;;652:80;667:64;724:6;667:64;;652:80;738:16;774:6;767:5;760:21;804:4;;821:3;817:14;810:21;;804:4;796:6;792:17;926:3;804:4;;910:6;906:17;796:6;897:27;;894:36;891:2;;;-1:-1;;933:12;891:2;-1:-1;959:10;;953:206;978:6;975:1;972:13;953:206;;;85:6;72:20;97:33;124:5;97:33;;;1046:50;;1000:1;993:9;;;;;1110:14;;;;1138;;953:206;;;-1:-1;22585:88;;-1:-1;22723:18;;22710:32;;-1:-1;;;22751:30;;;22748:2;;;-1:-1;;22784:12;22748:2;;22814:78;22884:7;22875:6;22864:9;22860:22;22814:78;;;22804:88;;;22403:505;;;;;;22915:392;;23055:2;;23043:9;23034:7;23030:23;23026:32;23023:2;;;-1:-1;;23061:12;23023:2;23112:17;23106:24;23150:18;23142:6;23139:30;23136:2;;;-1:-1;;23172:12;23136:2;23274:6;23263:9;23259:22;2067:3;2060:4;2052:6;2048:17;2044:27;2034:2;;-1:-1;;2075:12;2034:2;2115:6;2109:13;2095:27;;2137:80;2152:64;2209:6;2152:64;;2137:80;2245:21;;;2302:14;;;;2277:17;;;2391;;;2382:27;;;;2379:36;-1:-1;2376:2;;;-1:-1;;2418:12;2376:2;-1:-1;2444:10;;2438:217;2463:6;2460:1;2457:13;2438:217;;;6230:13;;2531:61;;2485:1;2478:9;;;;;2606:14;;;;2634;;2438:217;;;-1:-1;23192:99;23017:290;-1:-1;;;;;;;23017:290;23314:411;;;23460:2;23448:9;23439:7;23435:23;23431:32;23428:2;;;-1:-1;;23466:12;23428:2;23524:17;23511:31;23562:18;;23554:6;23551:30;23548:2;;;-1:-1;;23584:12;23548:2;23692:6;23681:9;23677:22;2822:3;2815:4;2807:6;2803:17;2799:27;2789:2;;-1:-1;;2830:12;2789:2;2873:6;2860:20;2850:30;;23562:18;2892:6;2889:30;2886:2;;;-1:-1;;2922:12;2886:2;3017:3;23460:2;;3001:6;2997:17;2958:6;2983:32;;2980:41;2977:2;;;-1:-1;;3024:12;2977:2;23460;2954:17;;23612:97;;-1:-1;23422:303;;-1:-1;;;;23422:303;23732:847;;;;23962:2;23950:9;23941:7;23937:23;23933:32;23930:2;;;-1:-1;;23968:12;23930:2;24026:17;24013:31;24064:18;;24056:6;24053:30;24050:2;;;-1:-1;;24086:12;24050:2;24196:6;24185:9;24181:22;3937:3;3930:4;3922:6;3918:17;3914:27;3904:2;;-1:-1;;3945:12;3904:2;3992:6;3979:20;3965:34;;4014:99;4029:83;4105:6;4029:83;;4014:99;4141:21;;;4185:4;4198:14;;;;4119:16;4173:17;;;-1:-1;4278:252;4303:6;4300:1;4297:13;4278:252;;;4410:56;4462:3;4185:4;4386:3;4373:17;4177:6;4361:30;;4410:56;;;4398:69;;4481:14;;;;4509;;;;4325:1;4318:9;4278:252;;;-1:-1;24106:107;;-1:-1;24263:18;;24250:32;;-1:-1;;;;24291:30;;;24288:2;;;-1:-1;;24324:12;24288:2;;24354:83;24429:7;24420:6;24409:9;24405:22;24354:83;;;24344:93;;;24492:71;24555:7;24474:2;24535:9;24531:22;24492:71;;;24482:81;;23924:655;;;;;;24977:257;;25089:2;25077:9;25068:7;25064:23;25060:32;25057:2;;;-1:-1;;25095:12;25057:2;6098:6;6092:13;6110:30;6134:5;6110:30;;25241:620;;;;25393:2;25381:9;25372:7;25368:23;25364:32;25361:2;;;-1:-1;;25399:12;25361:2;6098:6;6092:13;6110:30;6134:5;6110:30;;;25580:2;25565:18;;25559:25;25451:71;;-1:-1;25604:18;25593:30;;25590:2;;;-1:-1;;25626:12;25590:2;25656:70;25718:7;25709:6;25698:9;25694:22;25656:70;;;25646:80;;;25763:2;25817:9;25813:22;17257:13;25771:74;;25355:506;;;;;;25868:263;;25983:2;25971:9;25962:7;25958:23;25954:32;25951:2;;;-1:-1;;25989:12;25951:2;-1:-1;6230:13;;25945:186;-1:-1;25945:186;26138:360;;26262:2;26250:9;26241:7;26237:23;26233:32;26230:2;;;-1:-1;;26268:12;26230:2;26319:17;26313:24;26357:18;26349:6;26346:30;26343:2;;;-1:-1;;26379:12;26343:2;26409:73;26474:7;26465:6;26454:9;26450:22;26409:73;;26505:261;;26619:2;26607:9;26598:7;26594:23;26590:32;26587:2;;;-1:-1;;26625:12;26587:2;8850:6;8844:13;8862:32;8888:5;8862:32;;26773:442;;;26926:3;26914:9;26905:7;26901:23;26897:33;26894:2;;;-1:-1;;26933:12;26894:2;8850:6;8844:13;8862:32;8888:5;8862:32;;;26985:73;-1:-1;9509:4;9488:19;;;;;9484:30;9481:2;;;-1:-1;;9517:12;9481:2;9545:20;9509:4;9545:20;;;27095:2;27171:9;27167:22;220:13;238:33;265:5;238:33;;;9629:86;;9861:22;;;6505:13;6523:32;6505:13;6523:32;;;27095:2;9812:16;;9805:85;9509:4;10035:22;;6505:13;6523:32;6505:13;6523:32;;;9861:22;9986:16;;9979:85;26888:327;;9990:5;;-1:-1;26888:327;;-1:-1;;26888:327;27222:803;;;;;27414:9;27405:7;27401:23;27426:3;27401:23;27397:33;27394:2;;;-1:-1;;27433:12;27394:2;10243:4;10222:19;10218:30;10215:2;;;-1:-1;;10251:12;10215:2;;10279:20;10243:4;10279:20;;;85:6;72:20;97:33;124:5;97:33;;;10363:75;;10520:2;10573:22;;6359:20;6384:32;6359:20;6384:32;;;10520:2;10535:16;;10528:74;10683:2;10736:22;;6359:20;6384:32;6359:20;6384:32;;;10683:2;10698:16;;10691:74;10702:5;-1:-1;10243:4;27649:22;;8698:20;8723:32;8698:20;8723:32;;;27619:62;-1:-1;27718:3;27757:22;;8698:20;8723:32;8698:20;8723:32;;;27727:62;-1:-1;27854:3;27839:19;;27826:33;27879:18;27868:30;;27865:2;;;-1:-1;;27901:12;28032:317;;28174:2;28162:9;28153:7;28149:23;28145:32;28142:2;;;-1:-1;;28180:12;28142:2;10988:20;28174:2;10988:20;;;8559:6;8553:13;69156:1;69149:5;69146:12;69136:2;;-1:-1;;69162:12;69136:2;11072:102;;11240:2;11305:22;;;6230:13;11255:16;;;11248:86;11418:2;11483:22;;;17257:13;11433:16;;;11426:86;;;;-1:-1;11079:16;28136:213;-1:-1;28136:213;28356:763;;;;28544:2;28532:9;28523:7;28519:23;28515:32;28512:2;;;-1:-1;;28550:12;28512:2;28608:17;28595:31;28646:18;;28638:6;28635:30;28632:2;;;-1:-1;;28668:12;28632:2;28698:76;28766:7;28757:6;28746:9;28742:22;28698:76;;;28688:86;;28839:2;28828:9;28824:18;28811:32;28797:46;;28646:18;28855:6;28852:30;28849:2;;;-1:-1;;28885:12;28849:2;;28915:62;28969:7;28960:6;28949:9;28945:22;28915:62;;;28905:72;;;29014:2;29075:9;29071:22;7993:20;8018:51;8063:5;8018:51;;30128:137;65928:42;65917:54;30215:45;;30209:56;32914:690;;33107:5;61544:12;63121:6;63116:3;63109:19;63158:4;63153:3;63149:14;33119:93;;63158:4;33283:5;60765:14;-1:-1;33322:260;33347:6;33344:1;33341:13;33322:260;;;33408:13;;34386:37;;63158:4;30100:14;;;;62503;;;;33369:1;33362:9;33322:260;;;-1:-1;33588:10;;33038:566;-1:-1;;;;33038:566;35116:343;;35258:5;61544:12;63121:6;63116:3;63109:19;35351:52;35396:6;63158:4;63153:3;63149:14;63158:4;35377:5;35373:16;35351:52;;;67560:2;67540:14;67556:7;67536:28;35415:39;;;;63158:4;35415:39;;35206:253;-1:-1;;35206:253;38254:676;38472:23;;65928:42;65917:54;30215:45;;38664:4;38653:16;;;38647:23;64847:66;64836:78;;;38722:14;;;34614:36;;;;38836:4;38825:16;;;38819:23;64836:78;38894:14;;34614:36;38372:558;38990:2780;;39137:6;39242:63;39290:14;39219:16;39213:23;39242:63;;;39392:4;39385:5;39381:16;39375:23;39404:63;39392:4;39456:3;39452:14;39438:12;39404:63;;;;39561:4;39554:5;39550:16;39544:23;39573:63;39561:4;39625:3;39621:14;39607:12;39573:63;;;;39724:4;39717:5;39713:16;39707:23;39736:63;39724:4;39788:3;39784:14;39770:12;39736:63;;;;39890:4;39883:5;39879:16;39873:23;39890:4;39954:3;39950:14;34386:37;40056:4;40049:5;40045:16;40039:23;40056:4;40120:3;40116:14;34386:37;40214:4;40207:5;40203:16;40197:23;40214:4;40278:3;40274:14;34386:37;40372:4;40365:5;40361:16;40355:23;40372:4;40436:3;40432:14;34386:37;40543:6;;40536:5;40532:18;40526:25;40543:6;40609:3;40605:16;34386:37;;40701:6;;40694:5;40690:18;40684:25;40701:6;40767:3;40763:16;34386:37;;40869:6;;40862:5;40858:18;40852:25;39137:6;40869;40901:3;40897:16;40890:40;40945:67;39137:6;39132:3;39128:16;40993:12;40945:67;;;40937:75;;;41107:6;;;;41100:5;41096:18;41090:25;41163:3;41157:4;41153:14;41107:6;41139:3;41135:16;41128:40;41183:67;41245:4;41231:12;41183:67;;;41175:75;;;;41348:6;;41341:5;41337:18;41331:25;41404:3;41398:4;41394:14;41348:6;41380:3;41376:16;41369:40;41424:67;41486:4;41472:12;41424:67;;;41416:75;;;41589:6;;;;41582:5;41578:18;41572:25;41645:3;41639:4;41635:14;41589:6;41621:3;41617:16;41610:40;41665:67;41727:4;41713:12;41665:67;;;41754:11;39110:2660;-1:-1;;;;;;39110:2660;44843:274;;67123:6;67118:3;67113;67100:30;67161:16;;67154:27;;;67161:16;44974:143;-1:-1;44974:143;45124:254;;35626:5;61544:12;35737:52;35782:6;35777:3;35770:4;35763:5;35759:16;35737:52;;;35801:16;;;;;45245:133;-1:-1;;45245:133;45654:213;65928:42;65917:54;;;;30215:45;;45772:2;45757:18;;45743:124;45874:647;;65928:42;;30253:5;65917:54;30222:3;30215:45;65928:42;30253:5;65917:54;46326:2;46315:9;46311:18;30215:45;;46130:2;46363;46352:9;46348:18;46341:48;46403:108;46130:2;46119:9;46115:18;46497:6;46403:108;;46528:324;65928:42;65917:54;;;30215:45;;65917:54;;46838:2;46823:18;;30215:45;46674:2;46659:18;;46645:207;46859:695;;65928:42;;30253:5;65917:54;30222:3;30215:45;65928:42;30253:5;65917:54;47276:2;47265:9;47261:18;30215:45;65928:42;30253:5;65917:54;47359:2;47348:9;47344:18;30215:45;;47111:3;47396:2;47385:9;47381:18;47374:48;47436:108;47111:3;47100:9;47096:19;47530:6;47436:108;;47561:547;65928:42;65917:54;;;30215:45;;65917:54;;;47928:2;47913:18;;30215:45;65917:54;;48011:2;47996:18;;30215:45;48094:2;48079:18;;34386:37;;;;47763:3;47748:19;;47734:374;48705:435;65928:42;65917:54;;;30215:45;;65917:54;;;;49043:2;49028:18;;30215:45;49126:2;49111:18;;34386:37;;;;48879:2;48864:18;;48850:290;49147:755;;65928:42;;30253:5;65917:54;30222:3;30215:45;65928:42;30253:5;65917:54;49566:2;49555:9;49551:18;30215:45;;34416:5;49649:2;49638:9;49634:18;34386:37;66133:4;66126:5;66122:16;49738:2;49727:9;49723:18;37734:56;49401:3;49775;49764:9;49760:19;49753:49;49816:76;49401:3;49390:9;49386:19;49878:6;49816:76;;;49808:84;49372:530;-1:-1;;;;;;;49372:530;49909:857;;50218:3;50207:9;50203:19;65928:42;30253:5;65917:54;30222:3;30215:45;65374:53;65421:5;65374:53;;;50394:2;50379:18;;;37467:61;;;50218:3;50431:2;50416:18;;50409:48;61544:12;;63109:19;;;;60765:14;;;63149;;;;-1:-1;31670:260;31695:6;31692:1;31689:13;31670:260;;;31756:13;;34386:37;;50394:2;62503:14;;;;29732;;;;31717:1;31710:9;31670:260;;;31674:14;;50627:9;50621:4;50617:20;50612:2;50601:9;50597:18;50590:48;50652:104;50751:4;50742:6;50652:104;;;50644:112;50189:577;-1:-1;;;;;;;;50189:577;50773:381;;50951:2;;50940:9;50936:18;50951:2;50972:17;50965:47;51026:118;32195:5;61544:12;63121:6;63116:3;63109:19;63149:14;50940:9;63149:14;32207:98;;63149:14;50951:2;32362:6;32358:17;50940:9;32349:27;;32337:39;;50951:2;32452:5;60765:14;-1:-1;32491:345;32516:6;32513:1;32510:13;32491:345;;;32568:20;50940:9;32572:4;32568:20;;32563:3;32556:33;29872:60;29928:3;32623:6;32617:13;29872:60;;;32637:82;-1:-1;32815:14;;;;62503;;;;32538:1;32531:9;32491:345;;;-1:-1;51018:126;;50922:232;-1:-1;;;;;;;50922:232;51161:361;;51329:2;51350:17;51343:47;51404:108;51329:2;51318:9;51314:18;51498:6;51404:108;;51529:519;;34416:5;34393:3;34386:37;65928:42;64480:5;65917:54;51885:2;51874:9;51870:18;30215:45;51721:2;51922;51911:9;51907:18;51900:48;51962:76;51721:2;51710:9;51706:18;52024:6;51962:76;;52055:209;64847:66;64836:78;;;;34614:36;;52171:2;52156:18;;52142:122;52271:471;52463:2;52448:18;;65374:53;65421:5;65374:53;;;37106:68;;;52645:2;52630:18;;34386:37;;;;52728:2;52713:18;;;34386:37;52434:308;;52749:501;52956:2;52941:18;;67799:1;67789:12;;67779:2;;67805:9;53257:427;65833:2;65822:21;;;37609:36;;65822:21;;;;53587:2;53572:18;;37609:36;53670:2;53655:18;;34386:37;;;;53427:2;53412:18;;53398:286;53691:425;65833:2;65822:21;;;37609:36;;53887:3;53872:19;;53982:124;54102:2;54087:18;;54078:6;53982:124;;54123:407;54314:2;54328:47;;;38027:2;54299:18;;;63109:19;38063:34;63149:14;;;38043:55;38132:7;38118:12;;;38111:29;38159:12;;;54285:245;54537:793;;54852:123;54957:17;54948:6;54852:123;;;37638:5;65833:2;65822:21;55052:2;55041:9;55037:18;37609:36;37638:5;65833:2;65822:21;55133:3;55122:9;55118:19;37609:36;54837:3;55171;55160:9;55156:19;55149:49;55212:108;54837:3;54826:9;54822:19;55306:6;55212:108;;55337:353;;55501:2;55522:17;55515:47;55576:104;55501:2;55490:9;55486:18;55666:6;55576:104;;55697:679;;55945:2;55966:17;55959:47;56020:100;55945:2;55934:9;55930:18;56106:6;56020:100;;;56168:9;56162:4;56158:20;56153:2;56142:9;56138:18;56131:48;56193:72;56260:4;56251:6;56193:72;;;56185:80;;;65928:42;36998:5;65917:54;56362:2;56351:9;56347:18;36937:68;55916:460;;;;;;;56383:213;34386:37;;;56501:2;56486:18;;56472:124;56603:472;;56799:2;56788:9;56784:18;34416:5;34393:3;34386:37;56799:2;56917;56906:9;56902:18;56895:48;56957:108;30726:5;61544:12;63121:6;63116:3;63109:19;63149:14;56788:9;63149:14;30738:93;;56917:2;30902:5;60765:14;30914:21;;-1:-1;30941:260;30966:6;30963:1;30960:13;30941:260;;;31027:13;;65928:42;65917:54;30215:45;;56917:2;62503:14;;;;29550;;;;30988:1;30981:9;30941:260;;;-1:-1;56949:116;;56770:305;-1:-1;;;;;;56770:305;57082:435;34386:37;;;57420:2;57405:18;;34386:37;;;;57503:2;57488:18;;34386:37;57256:2;57241:18;;57227:290;57524:256;57586:2;57580:9;57612:17;;;57687:18;57672:34;;57708:22;;;57669:62;57666:2;;;57744:1;;57734:12;57666:2;57586;57753:22;57564:216;;-1:-1;57564:216;57787:304;;57946:18;57938:6;57935:30;57932:2;;;-1:-1;;57968:12;57932:2;-1:-1;58013:4;58001:17;;;58066:15;;57869:222;59673:317;;59812:18;59804:6;59801:30;59798:2;;;-1:-1;;59834:12;59798:2;-1:-1;59911:4;59888:17;59907:9;59884:33;59975:4;59965:15;;59735:255;67196:268;67261:1;67268:101;67282:6;67279:1;67276:13;67268:101;;;67349:11;;;67343:18;67330:11;;;67323:39;67304:2;67297:10;67268:101;;;67384:6;67381:1;67378:13;67375:2;;;67261:1;67440:6;67435:3;67431:16;67424:27;67375:2;;67245:219;;;;67577:111;67666:1;67659:5;67656:12;67646:2;;67672:9;67646:2;67640:48;;67939:117;65928:42;68026:5;65917:54;68001:5;67998:35;67988:2;;68047:1;;68037:12;68203:111;68284:5;64670:13;64663:21;68262:5;68259:32;68249:2;;68305:1;;68295:12;68445:115;64847:66;68530:5;64836:78;68506:5;68503:34;68493:2;;68551:1;;68541:12;69188:115;69273:5;65833:2;65822:21;69249:5;69246:34;69236:2;;69294:1;;69284:12"
            }
        }
    },
    "sourceTreeHashHex": "0xb0e190926ce7c31be2d732532e6a0a4396f5a1900ea22c5f88695085b955568a",
    "sources": {
        "./ERC20BridgeSampler.sol": {
            "id": 4
        },
        "./CurveSampler.sol": {
            "id": 1
        },
        "./ICurve.sol": {
            "id": 6
        },
        "./ApproximateBuys.sol": {
            "id": 0
        },
        "@0x/contracts-exchange-libs/contracts/src/LibMath.sol": {
            "id": 35
        },
        "@0x/contracts-utils/contracts/src/LibSafeMath.sol": {
            "id": 53
        },
        "@0x/contracts-utils/contracts/src/LibRichErrors.sol": {
            "id": 52
        },
        "@0x/contracts-utils/contracts/src/LibSafeMathRichErrors.sol": {
            "id": 54
        },
        "@0x/contracts-exchange-libs/contracts/src/LibMathRichErrors.sol": {
            "id": 36
        },
        "./SamplerUtils.sol": {
            "id": 25
        },
        "@0x/contracts-erc20/contracts/src/LibERC20Token.sol": {
            "id": 32
        },
        "@0x/contracts-utils/contracts/src/LibBytes.sol": {
            "id": 49
        },
        "@0x/contracts-utils/contracts/src/LibBytesRichErrors.sol": {
            "id": 50
        },
        "@0x/contracts-erc20/contracts/src/interfaces/IERC20Token.sol": {
            "id": 33
        },
        "./Eth2DaiSampler.sol": {
            "id": 5
        },
        "@0x/contracts-utils/contracts/src/DeploymentConstants.sol": {
            "id": 48
        },
        "./IEth2Dai.sol": {
            "id": 7
        },
        "./KyberSampler.sol": {
            "id": 19
        },
        "./IKyberNetwork.sol": {
            "id": 9
        },
        "./IKyberStorage.sol": {
            "id": 11
        },
        "./IKyberHintHandler.sol": {
            "id": 8
        },
        "./IKyberNetworkProxy.sol": {
            "id": 10
        },
        "./LiquidityProviderSampler.sol": {
            "id": 20
        },
        "./ILiquidityProvider.sol": {
            "id": 12
        },
        "./ILiquidityProviderRegistry.sol": {
            "id": 13
        },
        "./MultiBridgeSampler.sol": {
            "id": 23
        },
        "./IMultiBridge.sol": {
            "id": 16
        },
        "./MStableSampler.sol": {
            "id": 21
        },
        "./IMStable.sol": {
            "id": 14
        },
        "./MooniswapSampler.sol": {
            "id": 22
        },
        "./IMooniswap.sol": {
            "id": 15
        },
        "./NativeOrderSampler.sol": {
            "id": 24
        },
        "@0x/contracts-exchange/contracts/src/interfaces/IExchange.sol": {
            "id": 40
        },
        "@0x/contracts-exchange/contracts/src/interfaces/IExchangeCore.sol": {
            "id": 41
        },
        "@0x/contracts-exchange-libs/contracts/src/LibOrder.sol": {
            "id": 37
        },
        "@0x/contracts-utils/contracts/src/LibEIP712.sol": {
            "id": 51
        },
        "@0x/contracts-exchange-libs/contracts/src/LibFillResults.sol": {
            "id": 34
        },
        "@0x/contracts-exchange/contracts/src/interfaces/IProtocolFees.sol": {
            "id": 43
        },
        "@0x/contracts-exchange/contracts/src/interfaces/IMatchOrders.sol": {
            "id": 42
        },
        "@0x/contracts-exchange/contracts/src/interfaces/ISignatureValidator.sol": {
            "id": 44
        },
        "@0x/contracts-exchange-libs/contracts/src/LibZeroExTransaction.sol": {
            "id": 38
        },
        "@0x/contracts-exchange/contracts/src/interfaces/ITransactions.sol": {
            "id": 45
        },
        "@0x/contracts-exchange/contracts/src/interfaces/IAssetProxyDispatcher.sol": {
            "id": 39
        },
        "@0x/contracts-exchange/contracts/src/interfaces/IWrapperFunctions.sol": {
            "id": 47
        },
        "@0x/contracts-exchange/contracts/src/interfaces/ITransferSimulator.sol": {
            "id": 46
        },
        "./UniswapSampler.sol": {
            "id": 26
        },
        "@0x/contracts-asset-proxy/contracts/src/interfaces/IUniswapExchangeFactory.sol": {
            "id": 31
        },
        "@0x/contracts-asset-proxy/contracts/src/interfaces/IUniswapExchange.sol": {
            "id": 30
        },
        "./IUniswapExchangeQuotes.sol": {
            "id": 17
        },
        "./UniswapV2Sampler.sol": {
            "id": 27
        },
        "./IUniswapV2Router01.sol": {
            "id": 18
        }
    },
    "sourceCodes": {
        "./ERC20BridgeSampler.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"./CurveSampler.sol\";\nimport \"./Eth2DaiSampler.sol\";\nimport \"./KyberSampler.sol\";\nimport \"./LiquidityProviderSampler.sol\";\nimport \"./MultiBridgeSampler.sol\";\nimport \"./MStableSampler.sol\";\nimport \"./MooniswapSampler.sol\";\nimport \"./NativeOrderSampler.sol\";\nimport \"./UniswapSampler.sol\";\nimport \"./UniswapV2Sampler.sol\";\n\n\ncontract ERC20BridgeSampler is\n    CurveSampler,\n    Eth2DaiSampler,\n    KyberSampler,\n    LiquidityProviderSampler,\n    MStableSampler,\n    MooniswapSampler,\n    MultiBridgeSampler,\n    NativeOrderSampler,\n    UniswapSampler,\n    UniswapV2Sampler\n{\n    /// @dev Call multiple public functions on this contract in a single transaction.\n    /// @param callDatas ABI-encoded call data for each function call.\n    /// @return callResults ABI-encoded results data for each call.\n    function batchCall(bytes[] calldata callDatas)\n        external\n        view\n        returns (bytes[] memory callResults)\n    {\n        callResults = new bytes[](callDatas.length);\n        for (uint256 i = 0; i != callDatas.length; ++i) {\n            if (callDatas[i].length == 0) {\n                continue;\n            }\n            (bool didSucceed, bytes memory resultData) = address(this).staticcall(callDatas[i]);\n            if (!didSucceed) {\n                assembly { revert(add(resultData, 0x20), mload(resultData)) }\n            }\n            callResults[i] = resultData;\n        }\n    }\n}\n",
        "./CurveSampler.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"./ICurve.sol\";\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\n\n\ncontract CurveSampler is\n    SamplerUtils,\n    ApproximateBuys\n{\n    /// @dev Information for sampling from curve sources.\n    struct CurveInfo {\n        address poolAddress;\n        bytes4 sellQuoteFunctionSelector;\n        bytes4 buyQuoteFunctionSelector;\n    }\n\n    /// @dev Base gas limit for Curve calls. Some Curves have multiple tokens\n    ///      So a reasonable ceil is 150k per token. Biggest Curve has 4 tokens.\n    uint256 constant private CURVE_CALL_GAS = 600e3; // 600k\n\n    /// @dev Sample sell quotes from Curve.\n    /// @param curveInfo Curve information specific to this token pair.\n    /// @param fromTokenIdx Index of the taker token (what to sell).\n    /// @param toTokenIdx Index of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromCurve(\n        CurveInfo memory curveInfo,\n        int128 fromTokenIdx,\n        int128 toTokenIdx,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            (bool didSucceed, bytes memory resultData) =\n                curveInfo.poolAddress.staticcall.gas(CURVE_CALL_GAS)(\n                    abi.encodeWithSelector(\n                        curveInfo.sellQuoteFunctionSelector,\n                        fromTokenIdx,\n                        toTokenIdx,\n                        takerTokenAmounts[i]\n                    ));\n            uint256 buyAmount = 0;\n            if (didSucceed) {\n                buyAmount = abi.decode(resultData, (uint256));\n            }\n            // Exit early if the amount is too high for the source to serve\n            if (buyAmount == 0) {\n                break;\n            }\n            makerTokenAmounts[i] = buyAmount;\n        }\n    }\n\n    /// @dev Sample buy quotes from Curve.\n    /// @param curveInfo Curve information specific to this token pair.\n    /// @param fromTokenIdx Index of the taker token (what to sell).\n    /// @param toTokenIdx Index of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromCurve(\n        CurveInfo memory curveInfo,\n        int128 fromTokenIdx,\n        int128 toTokenIdx,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        if (curveInfo.buyQuoteFunctionSelector == bytes4(0)) {\n            // Buys not supported on this curve, so approximate it.\n            return _sampleApproximateBuys(\n                ApproximateBuyQuoteOpts({\n                    makerTokenData: abi.encode(toTokenIdx, curveInfo),\n                    takerTokenData: abi.encode(fromTokenIdx, curveInfo),\n                    getSellQuoteCallback: _sampleSellForApproximateBuyFromCurve\n                }),\n                makerTokenAmounts\n            );\n        }\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            (bool didSucceed, bytes memory resultData) =\n                curveInfo.poolAddress.staticcall.gas(CURVE_CALL_GAS)(\n                    abi.encodeWithSelector(\n                        curveInfo.buyQuoteFunctionSelector,\n                        fromTokenIdx,\n                        toTokenIdx,\n                        makerTokenAmounts[i]\n                    ));\n            uint256 sellAmount = 0;\n            if (didSucceed) {\n                sellAmount = abi.decode(resultData, (uint256));\n            }\n            // Exit early if the amount is too high for the source to serve\n            if (sellAmount == 0) {\n                break;\n            }\n            takerTokenAmounts[i] = sellAmount;\n        }\n    }\n\n    function _sampleSellForApproximateBuyFromCurve(\n        bytes memory takerTokenData,\n        bytes memory makerTokenData,\n        uint256 sellAmount\n    )\n        private\n        view\n        returns (uint256 buyAmount)\n    {\n        (int128 takerTokenIdx, CurveInfo memory curveInfo) =\n            abi.decode(takerTokenData, (int128, CurveInfo));\n        (int128 makerTokenIdx) =\n            abi.decode(makerTokenData, (int128));\n        (bool success, bytes memory resultData) =\n            address(this).staticcall(abi.encodeWithSelector(\n                this.sampleSellsFromCurve.selector,\n                curveInfo,\n                takerTokenIdx,\n                makerTokenIdx,\n                _toSingleValueArray(sellAmount)\n            ));\n        if (!success) {\n            return 0;\n        }\n        // solhint-disable-next-line indent\n        return abi.decode(resultData, (uint256[]))[0];\n    }\n}\n",
        "./ICurve.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\n// solhint-disable func-name-mixedcase\ninterface ICurve {\n\n    /// @dev Sell `sellAmount` of `fromToken` token and receive `toToken` token.\n    ///      This function exists on later versions of Curve (USDC/DAI/USDT)\n    /// @param i The token index being sold.\n    /// @param j The token index being bought.\n    /// @param sellAmount The amount of token being bought.\n    /// @param minBuyAmount The minimum buy amount of the token being bought.\n    function exchange_underlying(\n        int128 i,\n        int128 j,\n        uint256 sellAmount,\n        uint256 minBuyAmount\n    )\n        external;\n\n    /// @dev Get the amount of `toToken` by selling `sellAmount` of `fromToken`\n    /// @param i The token index being sold.\n    /// @param j The token index being bought.\n    /// @param sellAmount The amount of token being bought.\n    function get_dy_underlying(\n        int128 i,\n        int128 j,\n        uint256 sellAmount\n    )\n        external\n        returns (uint256 dy);\n\n    /// @dev Get the amount of `fromToken` by buying `buyAmount` of `toToken`\n    ///      This function exists on later versions of Curve (USDC/DAI/USDT)\n    /// @param i The token index being sold.\n    /// @param j The token index being bought.\n    /// @param buyAmount The amount of token being bought.\n    function get_dx_underlying(\n        int128 i,\n        int128 j,\n        uint256 buyAmount\n    )\n        external\n        returns (uint256 dx);\n\n    /// @dev Get the underlying token address from the token index\n    /// @param i The token index.\n    function underlying_coins(\n        int128 i\n    )\n        external\n        returns (address tokenAddress);\n}\n",
        "./ApproximateBuys.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-exchange-libs/contracts/src/LibMath.sol\";\n\n\ncontract ApproximateBuys {\n\n    /// @dev Information computing buy quotes for sources that do not have native\n    ///      buy quote support.\n    struct ApproximateBuyQuoteOpts {\n        // Arbitrary maker token data to pass to `getSellQuoteCallback`.\n        bytes makerTokenData;\n        // Arbitrary taker token data to pass to `getSellQuoteCallback`.\n        bytes takerTokenData;\n        // Callback to retrieve a sell quote.\n        function (bytes memory, bytes memory, uint256)\n            internal\n            view\n            returns (uint256) getSellQuoteCallback;\n    }\n\n    uint256 private constant ONE_HUNDED_PERCENT_BPS = 1e4;\n    /// @dev Maximum approximate (positive) error rate when approximating a buy quote.\n    uint256 private constant APPROXIMATE_BUY_TARGET_EPSILON_BPS = 0.0005e4;\n    /// @dev Maximum iterations to perform when approximating a buy quote.\n    uint256 private constant APPROXIMATE_BUY_MAX_ITERATIONS = 5;\n\n    function _sampleApproximateBuys(\n        ApproximateBuyQuoteOpts memory opts,\n        uint256[] memory makerTokenAmounts\n    )\n        internal\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        takerTokenAmounts = new uint256[](makerTokenAmounts.length);\n        if (makerTokenAmounts.length == 0) {\n            return takerTokenAmounts;\n        }\n\n        uint256 sellAmount = opts.getSellQuoteCallback(\n            opts.makerTokenData,\n            opts.takerTokenData,\n            makerTokenAmounts[0]\n        );\n        if (sellAmount == 0) {\n            return takerTokenAmounts;\n        }\n\n        uint256 buyAmount = opts.getSellQuoteCallback(\n            opts.takerTokenData,\n            opts.makerTokenData,\n            sellAmount\n        );\n        if (buyAmount == 0) {\n            return takerTokenAmounts;\n        }\n\n        for (uint256 i = 0; i < makerTokenAmounts.length; i++) {\n            for (uint256 iter = 0; iter < APPROXIMATE_BUY_MAX_ITERATIONS; iter++) {\n                // adjustedSellAmount = previousSellAmount * (target/actual) * JUMP_MULTIPLIER\n                sellAmount = LibMath.getPartialAmountCeil(\n                    makerTokenAmounts[i],\n                    buyAmount,\n                    sellAmount\n                );\n                sellAmount = LibMath.getPartialAmountCeil(\n                    (ONE_HUNDED_PERCENT_BPS + APPROXIMATE_BUY_TARGET_EPSILON_BPS),\n                    ONE_HUNDED_PERCENT_BPS,\n                    sellAmount\n                );\n                uint256 _buyAmount = opts.getSellQuoteCallback(\n                    opts.takerTokenData,\n                    opts.makerTokenData,\n                    sellAmount\n                );\n                if (_buyAmount == 0) {\n                    break;\n                }\n                // We re-use buyAmount next iteration, only assign if it is\n                // non zero\n                buyAmount = _buyAmount;\n                // If we've reached our goal, exit early\n                if (buyAmount >= makerTokenAmounts[i]) {\n                    uint256 eps =\n                        (buyAmount - makerTokenAmounts[i]) * ONE_HUNDED_PERCENT_BPS /\n                        makerTokenAmounts[i];\n                    if (eps <= APPROXIMATE_BUY_TARGET_EPSILON_BPS) {\n                        break;\n                    }\n                }\n            }\n            // We do our best to close in on the requested amount, but we can either over buy or under buy and exit\n            // if we hit a max iteration limit\n            // We scale the sell amount to get the approximate target\n            takerTokenAmounts[i] = LibMath.getPartialAmountCeil(\n                makerTokenAmounts[i],\n                buyAmount,\n                sellAmount\n            );\n        }\n    }\n}\n",
        "@0x/contracts-exchange-libs/contracts/src/LibMath.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\nimport \"@0x/contracts-utils/contracts/src/LibSafeMath.sol\";\nimport \"@0x/contracts-utils/contracts/src/LibRichErrors.sol\";\nimport \"./LibMathRichErrors.sol\";\n\n\nlibrary LibMath {\n\n    using LibSafeMath for uint256;\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    ///      Reverts if rounding error is >= 0.1%\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return Partial value of target rounded down.\n    function safeGetPartialAmountFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        if (isRoundingErrorFloor(\n                numerator,\n                denominator,\n                target\n        )) {\n            LibRichErrors.rrevert(LibMathRichErrors.RoundingError(\n                numerator,\n                denominator,\n                target\n            ));\n        }\n\n        partialAmount = numerator.safeMul(target).safeDiv(denominator);\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    ///      Reverts if rounding error is >= 0.1%\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return Partial value of target rounded up.\n    function safeGetPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        if (isRoundingErrorCeil(\n                numerator,\n                denominator,\n                target\n        )) {\n            LibRichErrors.rrevert(LibMathRichErrors.RoundingError(\n                numerator,\n                denominator,\n                target\n            ));\n        }\n\n        // safeDiv computes `floor(a / b)`. We use the identity (a, b integer):\n        //       ceil(a / b) = floor((a + b - 1) / b)\n        // To implement `ceil(a / b)` using safeDiv.\n        partialAmount = numerator.safeMul(target)\n            .safeAdd(denominator.safeSub(1))\n            .safeDiv(denominator);\n\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return Partial value of target rounded down.\n    function getPartialAmountFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        partialAmount = numerator.safeMul(target).safeDiv(denominator);\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return Partial value of target rounded up.\n    function getPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        // safeDiv computes `floor(a / b)`. We use the identity (a, b integer):\n        //       ceil(a / b) = floor((a + b - 1) / b)\n        // To implement `ceil(a / b)` using safeDiv.\n        partialAmount = numerator.safeMul(target)\n            .safeAdd(denominator.safeSub(1))\n            .safeDiv(denominator);\n\n        return partialAmount;\n    }\n\n    /// @dev Checks if rounding error >= 0.1% when rounding down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to multiply with numerator/denominator.\n    /// @return Rounding error is present.\n    function isRoundingErrorFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bool isError)\n    {\n        if (denominator == 0) {\n            LibRichErrors.rrevert(LibMathRichErrors.DivisionByZeroError());\n        }\n\n        // The absolute rounding error is the difference between the rounded\n        // value and the ideal value. The relative rounding error is the\n        // absolute rounding error divided by the absolute value of the\n        // ideal value. This is undefined when the ideal value is zero.\n        //\n        // The ideal value is `numerator * target / denominator`.\n        // Let's call `numerator * target % denominator` the remainder.\n        // The absolute error is `remainder / denominator`.\n        //\n        // When the ideal value is zero, we require the absolute error to\n        // be zero. Fortunately, this is always the case. The ideal value is\n        // zero iff `numerator == 0` and/or `target == 0`. In this case the\n        // remainder and absolute error are also zero.\n        if (target == 0 || numerator == 0) {\n            return false;\n        }\n\n        // Otherwise, we want the relative rounding error to be strictly\n        // less than 0.1%.\n        // The relative error is `remainder / (numerator * target)`.\n        // We want the relative error less than 1 / 1000:\n        //        remainder / (numerator * denominator)  <  1 / 1000\n        // or equivalently:\n        //        1000 * remainder  <  numerator * target\n        // so we have a rounding error iff:\n        //        1000 * remainder  >=  numerator * target\n        uint256 remainder = mulmod(\n            target,\n            numerator,\n            denominator\n        );\n        isError = remainder.safeMul(1000) >= numerator.safeMul(target);\n        return isError;\n    }\n\n    /// @dev Checks if rounding error >= 0.1% when rounding up.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to multiply with numerator/denominator.\n    /// @return Rounding error is present.\n    function isRoundingErrorCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bool isError)\n    {\n        if (denominator == 0) {\n            LibRichErrors.rrevert(LibMathRichErrors.DivisionByZeroError());\n        }\n\n        // See the comments in `isRoundingError`.\n        if (target == 0 || numerator == 0) {\n            // When either is zero, the ideal value and rounded value are zero\n            // and there is no rounding error. (Although the relative error\n            // is undefined.)\n            return false;\n        }\n        // Compute remainder as before\n        uint256 remainder = mulmod(\n            target,\n            numerator,\n            denominator\n        );\n        remainder = denominator.safeSub(remainder) % denominator;\n        isError = remainder.safeMul(1000) >= numerator.safeMul(target);\n        return isError;\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/LibSafeMath.sol": "pragma solidity ^0.5.9;\n\nimport \"./LibRichErrors.sol\";\nimport \"./LibSafeMathRichErrors.sol\";\n\n\nlibrary LibSafeMath {\n\n    function safeMul(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        if (c / a != b) {\n            LibRichErrors.rrevert(LibSafeMathRichErrors.Uint256BinOpError(\n                LibSafeMathRichErrors.BinOpErrorCodes.MULTIPLICATION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function safeDiv(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b == 0) {\n            LibRichErrors.rrevert(LibSafeMathRichErrors.Uint256BinOpError(\n                LibSafeMathRichErrors.BinOpErrorCodes.DIVISION_BY_ZERO,\n                a,\n                b\n            ));\n        }\n        uint256 c = a / b;\n        return c;\n    }\n\n    function safeSub(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b > a) {\n            LibRichErrors.rrevert(LibSafeMathRichErrors.Uint256BinOpError(\n                LibSafeMathRichErrors.BinOpErrorCodes.SUBTRACTION_UNDERFLOW,\n                a,\n                b\n            ));\n        }\n        return a - b;\n    }\n\n    function safeAdd(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint256 c = a + b;\n        if (c < a) {\n            LibRichErrors.rrevert(LibSafeMathRichErrors.Uint256BinOpError(\n                LibSafeMathRichErrors.BinOpErrorCodes.ADDITION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function max256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a < b ? a : b;\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/LibRichErrors.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\nlibrary LibRichErrors {\n\n    // bytes4(keccak256(\"Error(string)\"))\n    bytes4 internal constant STANDARD_ERROR_SELECTOR =\n        0x08c379a0;\n\n    // solhint-disable func-name-mixedcase\n    /// @dev ABI encode a standard, string revert error payload.\n    ///      This is the same payload that would be included by a `revert(string)`\n    ///      solidity statement. It has the function signature `Error(string)`.\n    /// @param message The error string.\n    /// @return The ABI encoded error.\n    function StandardError(\n        string memory message\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            STANDARD_ERROR_SELECTOR,\n            bytes(message)\n        );\n    }\n    // solhint-enable func-name-mixedcase\n\n    /// @dev Reverts an encoded rich revert reason `errorData`.\n    /// @param errorData ABI encoded error data.\n    function rrevert(bytes memory errorData)\n        internal\n        pure\n    {\n        assembly {\n            revert(add(errorData, 0x20), mload(errorData))\n        }\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/LibSafeMathRichErrors.sol": "pragma solidity ^0.5.9;\n\n\nlibrary LibSafeMathRichErrors {\n\n    // bytes4(keccak256(\"Uint256BinOpError(uint8,uint256,uint256)\"))\n    bytes4 internal constant UINT256_BINOP_ERROR_SELECTOR =\n        0xe946c1bb;\n\n    // bytes4(keccak256(\"Uint256DowncastError(uint8,uint256)\"))\n    bytes4 internal constant UINT256_DOWNCAST_ERROR_SELECTOR =\n        0xc996af7b;\n\n    enum BinOpErrorCodes {\n        ADDITION_OVERFLOW,\n        MULTIPLICATION_OVERFLOW,\n        SUBTRACTION_UNDERFLOW,\n        DIVISION_BY_ZERO\n    }\n\n    enum DowncastErrorCodes {\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT32,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT64,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT96\n    }\n\n    // solhint-disable func-name-mixedcase\n    function Uint256BinOpError(\n        BinOpErrorCodes errorCode,\n        uint256 a,\n        uint256 b\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            UINT256_BINOP_ERROR_SELECTOR,\n            errorCode,\n            a,\n            b\n        );\n    }\n\n    function Uint256DowncastError(\n        DowncastErrorCodes errorCode,\n        uint256 a\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            UINT256_DOWNCAST_ERROR_SELECTOR,\n            errorCode,\n            a\n        );\n    }\n}\n",
        "@0x/contracts-exchange-libs/contracts/src/LibMathRichErrors.sol": "pragma solidity ^0.5.9;\n\n\nlibrary LibMathRichErrors {\n\n    // bytes4(keccak256(\"DivisionByZeroError()\"))\n    bytes internal constant DIVISION_BY_ZERO_ERROR =\n        hex\"a791837c\";\n\n    // bytes4(keccak256(\"RoundingError(uint256,uint256,uint256)\"))\n    bytes4 internal constant ROUNDING_ERROR_SELECTOR =\n        0x339f3de2;\n\n    // solhint-disable func-name-mixedcase\n    function DivisionByZeroError()\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return DIVISION_BY_ZERO_ERROR;\n    }\n\n    function RoundingError(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            ROUNDING_ERROR_SELECTOR,\n            numerator,\n            denominator,\n            target\n        );\n    }\n}\n",
        "./SamplerUtils.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/LibERC20Token.sol\";\n\n\ncontract SamplerUtils {\n\n    /// @dev Overridable way to get token decimals.\n    /// @param tokenAddress Address of the token.\n    /// @return decimals The decimal places for the token.\n    function _getTokenDecimals(address tokenAddress)\n        internal\n        view\n        returns (uint8 decimals)\n    {\n        return LibERC20Token.decimals(tokenAddress);\n    }\n\n    function _toSingleValueArray(uint256 v)\n        internal\n        pure\n        returns (uint256[] memory arr)\n    {\n        arr = new uint256[](1);\n        arr[0] = v;\n    }\n\n    /// @dev Assert that the tokens in a trade pair are valid.\n    /// @param makerToken Address of the maker token.\n    /// @param takerToken Address of the taker token.\n    function _assertValidPair(address makerToken, address takerToken)\n        internal\n        pure\n    {\n        require(makerToken != takerToken, \"ERC20BridgeSampler/INVALID_TOKEN_PAIR\");\n    }\n}\n",
        "@0x/contracts-erc20/contracts/src/LibERC20Token.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\nimport \"@0x/contracts-utils/contracts/src/LibRichErrors.sol\";\nimport \"@0x/contracts-utils/contracts/src/LibBytes.sol\";\nimport \"../src/interfaces/IERC20Token.sol\";\n\n\nlibrary LibERC20Token {\n    bytes constant private DECIMALS_CALL_DATA = hex\"313ce567\";\n\n    /// @dev Calls `IERC20Token(token).approve()`.\n    ///      Reverts if `false` is returned or if the return\n    ///      data length is nonzero and not 32 bytes.\n    /// @param token The address of the token contract.\n    /// @param spender The address that receives an allowance.\n    /// @param allowance The allowance to set.\n    function approve(\n        address token,\n        address spender,\n        uint256 allowance\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            IERC20Token(0).approve.selector,\n            spender,\n            allowance\n        );\n        _callWithOptionalBooleanResult(token, callData);\n    }\n\n    /// @dev Calls `IERC20Token(token).approve()` and sets the allowance to the\n    ///      maximum if the current approval is not already >= an amount.\n    ///      Reverts if `false` is returned or if the return\n    ///      data length is nonzero and not 32 bytes.\n    /// @param token The address of the token contract.\n    /// @param spender The address that receives an allowance.\n    /// @param amount The minimum allowance needed.\n    function approveIfBelow(\n        address token,\n        address spender,\n        uint256 amount\n    )\n        internal\n    {\n        if (IERC20Token(token).allowance(address(this), spender) < amount) {\n            approve(token, spender, uint256(-1));\n        }\n    }\n\n    /// @dev Calls `IERC20Token(token).transfer()`.\n    ///      Reverts if `false` is returned or if the return\n    ///      data length is nonzero and not 32 bytes.\n    /// @param token The address of the token contract.\n    /// @param to The address that receives the tokens\n    /// @param amount Number of tokens to transfer.\n    function transfer(\n        address token,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            IERC20Token(0).transfer.selector,\n            to,\n            amount\n        );\n        _callWithOptionalBooleanResult(token, callData);\n    }\n\n    /// @dev Calls `IERC20Token(token).transferFrom()`.\n    ///      Reverts if `false` is returned or if the return\n    ///      data length is nonzero and not 32 bytes.\n    /// @param token The address of the token contract.\n    /// @param from The owner of the tokens.\n    /// @param to The address that receives the tokens\n    /// @param amount Number of tokens to transfer.\n    function transferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            IERC20Token(0).transferFrom.selector,\n            from,\n            to,\n            amount\n        );\n        _callWithOptionalBooleanResult(token, callData);\n    }\n\n    /// @dev Retrieves the number of decimals for a token.\n    ///      Returns `18` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @return tokenDecimals The number of decimals places for the token.\n    function decimals(address token)\n        internal\n        view\n        returns (uint8 tokenDecimals)\n    {\n        tokenDecimals = 18;\n        (bool didSucceed, bytes memory resultData) = token.staticcall(DECIMALS_CALL_DATA);\n        if (didSucceed && resultData.length == 32) {\n            tokenDecimals = uint8(LibBytes.readUint256(resultData, 0));\n        }\n    }\n\n    /// @dev Retrieves the allowance for a token, owner, and spender.\n    ///      Returns `0` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @param owner The owner of the tokens.\n    /// @param spender The address the spender.\n    /// @return allowance The allowance for a token, owner, and spender.\n    function allowance(address token, address owner, address spender)\n        internal\n        view\n        returns (uint256 allowance_)\n    {\n        (bool didSucceed, bytes memory resultData) = token.staticcall(\n            abi.encodeWithSelector(\n                IERC20Token(0).allowance.selector,\n                owner,\n                spender\n            )\n        );\n        if (didSucceed && resultData.length == 32) {\n            allowance_ = LibBytes.readUint256(resultData, 0);\n        }\n    }\n\n    /// @dev Retrieves the balance for a token owner.\n    ///      Returns `0` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @param owner The owner of the tokens.\n    /// @return balance The token balance of an owner.\n    function balanceOf(address token, address owner)\n        internal\n        view\n        returns (uint256 balance)\n    {\n        (bool didSucceed, bytes memory resultData) = token.staticcall(\n            abi.encodeWithSelector(\n                IERC20Token(0).balanceOf.selector,\n                owner\n            )\n        );\n        if (didSucceed && resultData.length == 32) {\n            balance = LibBytes.readUint256(resultData, 0);\n        }\n    }\n\n    /// @dev Executes a call on address `target` with calldata `callData`\n    ///      and asserts that either nothing was returned or a single boolean\n    ///      was returned equal to `true`.\n    /// @param target The call target.\n    /// @param callData The abi-encoded call data.\n    function _callWithOptionalBooleanResult(\n        address target,\n        bytes memory callData\n    )\n        private\n    {\n        (bool didSucceed, bytes memory resultData) = target.call(callData);\n        if (didSucceed) {\n            if (resultData.length == 0) {\n                return;\n            }\n            if (resultData.length == 32) {\n                uint256 result = LibBytes.readUint256(resultData, 0);\n                if (result == 1) {\n                    return;\n                }\n            }\n        }\n        LibRichErrors.rrevert(resultData);\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/LibBytes.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\nimport \"./LibBytesRichErrors.sol\";\nimport \"./LibRichErrors.sol\";\n\n\nlibrary LibBytes {\n\n    using LibBytes for bytes;\n\n    /// @dev Gets the memory address for a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of byte array. This\n    ///         points to the header of the byte array which contains\n    ///         the length.\n    function rawAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := input\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Gets the memory address for the contents of a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of the contents of the byte array.\n    function contentAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := add(input, 32)\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Copies `length` bytes from memory location `source` to `dest`.\n    /// @param dest memory address to copy bytes to.\n    /// @param source memory address to copy bytes from.\n    /// @param length number of bytes to copy.\n    function memCopy(\n        uint256 dest,\n        uint256 source,\n        uint256 length\n    )\n        internal\n        pure\n    {\n        if (length < 32) {\n            // Handle a partial word by reading destination and masking\n            // off the bits we are interested in.\n            // This correctly handles overlap, zero lengths and source == dest\n            assembly {\n                let mask := sub(exp(256, sub(32, length)), 1)\n                let s := and(mload(source), not(mask))\n                let d := and(mload(dest), mask)\n                mstore(dest, or(s, d))\n            }\n        } else {\n            // Skip the O(length) loop when source == dest.\n            if (source == dest) {\n                return;\n            }\n\n            // For large copies we copy whole words at a time. The final\n            // word is aligned to the end of the range (instead of after the\n            // previous) to handle partial words. So a copy will look like this:\n            //\n            //  ####\n            //      ####\n            //          ####\n            //            ####\n            //\n            // We handle overlap in the source and destination range by\n            // changing the copying direction. This prevents us from\n            // overwriting parts of source that we still need to copy.\n            //\n            // This correctly handles source == dest\n            //\n            if (source > dest) {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because it\n                    // is easier to compare with in the loop, and these\n                    // are also the addresses we need for copying the\n                    // last bytes.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the last 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the last bytes in\n                    // source already due to overlap.\n                    let last := mload(sEnd)\n\n                    // Copy whole words front to back\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} lt(source, sEnd) {} {\n                        mstore(dest, mload(source))\n                        source := add(source, 32)\n                        dest := add(dest, 32)\n                    }\n\n                    // Write the last 32 bytes\n                    mstore(dEnd, last)\n                }\n            } else {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because those\n                    // are the starting points when copying a word at the end.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the first 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the first bytes in\n                    // source already due to overlap.\n                    let first := mload(source)\n\n                    // Copy whole words back to front\n                    // We use a signed comparisson here to allow dEnd to become\n                    // negative (happens when source and dest < 32). Valid\n                    // addresses in local memory will never be larger than\n                    // 2**255, so they can be safely re-interpreted as signed.\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} slt(dest, dEnd) {} {\n                        mstore(dEnd, mload(sEnd))\n                        sEnd := sub(sEnd, 32)\n                        dEnd := sub(dEnd, 32)\n                    }\n\n                    // Write the first 32 bytes\n                    mstore(dest, first)\n                }\n            }\n        }\n    }\n\n    /// @dev Returns a slices from a byte array.\n    /// @param b The byte array to take a slice from.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function slice(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure and copy contents\n        result = new bytes(to - from);\n        memCopy(\n            result.contentAddress(),\n            b.contentAddress() + from,\n            result.length\n        );\n        return result;\n    }\n\n    /// @dev Returns a slice from a byte array without preserving the input.\n    /// @param b The byte array to take a slice from. Will be destroyed in the process.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    /// @dev When `from == 0`, the original array will match the slice. In other cases its state will be corrupted.\n    function sliceDestructive(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure around [from, to) in-place.\n        assembly {\n            result := add(b, from)\n            mstore(result, sub(to, from))\n        }\n        return result;\n    }\n\n    /// @dev Pops the last byte off of a byte array by modifying its length.\n    /// @param b Byte array that will be modified.\n    /// @return The byte that was popped off.\n    function popLastByte(bytes memory b)\n        internal\n        pure\n        returns (bytes1 result)\n    {\n        if (b.length == 0) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.LengthGreaterThanZeroRequired,\n                b.length,\n                0\n            ));\n        }\n\n        // Store last byte.\n        result = b[b.length - 1];\n\n        assembly {\n            // Decrement length of byte array.\n            let newLen := sub(mload(b), 1)\n            mstore(b, newLen)\n        }\n        return result;\n    }\n\n    /// @dev Tests equality of two byte arrays.\n    /// @param lhs First byte array to compare.\n    /// @param rhs Second byte array to compare.\n    /// @return True if arrays are the same. False otherwise.\n    function equals(\n        bytes memory lhs,\n        bytes memory rhs\n    )\n        internal\n        pure\n        returns (bool equal)\n    {\n        // Keccak gas cost is 30 + numWords * 6. This is a cheap way to compare.\n        // We early exit on unequal lengths, but keccak would also correctly\n        // handle this.\n        return lhs.length == rhs.length && keccak256(lhs) == keccak256(rhs);\n    }\n\n    /// @dev Reads an address from a position in a byte array.\n    /// @param b Byte array containing an address.\n    /// @param index Index in byte array of address.\n    /// @return address from byte array.\n    function readAddress(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (address result)\n    {\n        if (b.length < index + 20) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Read address from array memory\n        assembly {\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 20-byte mask to obtain address\n            result := and(mload(add(b, index)), 0xffffffffffffffffffffffffffffffffffffffff)\n        }\n        return result;\n    }\n\n    /// @dev Writes an address into a specific position in a byte array.\n    /// @param b Byte array to insert address into.\n    /// @param index Index in byte array of address.\n    /// @param input Address to put into byte array.\n    function writeAddress(\n        bytes memory b,\n        uint256 index,\n        address input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 20) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Store address into array memory\n        assembly {\n            // The address occupies 20 bytes and mstore stores 32 bytes.\n            // First fetch the 32-byte word where we'll be storing the address, then\n            // apply a mask so we have only the bytes in the word that the address will not occupy.\n            // Then combine these bytes with the address and store the 32 bytes back to memory with mstore.\n\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 12-byte mask to obtain extra bytes occupying word of memory where we'll store the address\n            let neighbors := and(\n                mload(add(b, index)),\n                0xffffffffffffffffffffffff0000000000000000000000000000000000000000\n            )\n\n            // Make sure input address is clean.\n            // (Solidity does not guarantee this)\n            input := and(input, 0xffffffffffffffffffffffffffffffffffffffff)\n\n            // Store the neighbors and address into memory\n            mstore(add(b, index), xor(input, neighbors))\n        }\n    }\n\n    /// @dev Reads a bytes32 value from a position in a byte array.\n    /// @param b Byte array containing a bytes32 value.\n    /// @param index Index in byte array of bytes32 value.\n    /// @return bytes32 value from byte array.\n    function readBytes32(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        if (b.length < index + 32) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            result := mload(add(b, index))\n        }\n        return result;\n    }\n\n    /// @dev Writes a bytes32 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input bytes32 to put into byte array.\n    function writeBytes32(\n        bytes memory b,\n        uint256 index,\n        bytes32 input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 32) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            mstore(add(b, index), input)\n        }\n    }\n\n    /// @dev Reads a uint256 value from a position in a byte array.\n    /// @param b Byte array containing a uint256 value.\n    /// @param index Index in byte array of uint256 value.\n    /// @return uint256 value from byte array.\n    function readUint256(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (uint256 result)\n    {\n        result = uint256(readBytes32(b, index));\n        return result;\n    }\n\n    /// @dev Writes a uint256 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input uint256 to put into byte array.\n    function writeUint256(\n        bytes memory b,\n        uint256 index,\n        uint256 input\n    )\n        internal\n        pure\n    {\n        writeBytes32(b, index, bytes32(input));\n    }\n\n    /// @dev Reads an unpadded bytes4 value from a position in a byte array.\n    /// @param b Byte array containing a bytes4 value.\n    /// @param index Index in byte array of bytes4 value.\n    /// @return bytes4 value from byte array.\n    function readBytes4(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes4 result)\n    {\n        if (b.length < index + 4) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsFourRequired,\n                b.length,\n                index + 4\n            ));\n        }\n\n        // Arrays are prefixed by a 32 byte length field\n        index += 32;\n\n        // Read the bytes4 from array memory\n        assembly {\n            result := mload(add(b, index))\n            // Solidity does not require us to clean the trailing bytes.\n            // We do it anyway\n            result := and(result, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)\n        }\n        return result;\n    }\n\n    /// @dev Writes a new length to a byte array.\n    ///      Decreasing length will lead to removing the corresponding lower order bytes from the byte array.\n    ///      Increasing length may lead to appending adjacent in-memory bytes to the end of the byte array.\n    /// @param b Bytes array to write new length to.\n    /// @param length New length of byte array.\n    function writeLength(bytes memory b, uint256 length)\n        internal\n        pure\n    {\n        assembly {\n            mstore(b, length)\n        }\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/LibBytesRichErrors.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\nlibrary LibBytesRichErrors {\n\n    enum InvalidByteOperationErrorCodes {\n        FromLessThanOrEqualsToRequired,\n        ToLessThanOrEqualsLengthRequired,\n        LengthGreaterThanZeroRequired,\n        LengthGreaterThanOrEqualsFourRequired,\n        LengthGreaterThanOrEqualsTwentyRequired,\n        LengthGreaterThanOrEqualsThirtyTwoRequired,\n        LengthGreaterThanOrEqualsNestedBytesLengthRequired,\n        DestinationLengthGreaterThanOrEqualSourceLengthRequired\n    }\n\n    // bytes4(keccak256(\"InvalidByteOperationError(uint8,uint256,uint256)\"))\n    bytes4 internal constant INVALID_BYTE_OPERATION_ERROR_SELECTOR =\n        0x28006595;\n\n    // solhint-disable func-name-mixedcase\n    function InvalidByteOperationError(\n        InvalidByteOperationErrorCodes errorCode,\n        uint256 offset,\n        uint256 required\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            INVALID_BYTE_OPERATION_ERROR_SELECTOR,\n            errorCode,\n            offset,\n            required\n        );\n    }\n}\n",
        "@0x/contracts-erc20/contracts/src/interfaces/IERC20Token.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\ncontract IERC20Token {\n\n    // solhint-disable no-simple-event-func-name\n    event Transfer(\n        address indexed _from,\n        address indexed _to,\n        uint256 _value\n    );\n\n    event Approval(\n        address indexed _owner,\n        address indexed _spender,\n        uint256 _value\n    );\n\n    /// @dev send `value` token to `to` from `msg.sender`\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transfer(address _to, uint256 _value)\n        external\n        returns (bool);\n\n    /// @dev send `value` token to `to` from `from` on the condition it is approved by `from`\n    /// @param _from The address of the sender\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _value\n    )\n        external\n        returns (bool);\n\n    /// @dev `msg.sender` approves `_spender` to spend `_value` tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @param _value The amount of wei to be approved for transfer\n    /// @return Always true if the call has enough gas to complete execution\n    function approve(address _spender, uint256 _value)\n        external\n        returns (bool);\n\n    /// @dev Query total supply of token\n    /// @return Total supply of token\n    function totalSupply()\n        external\n        view\n        returns (uint256);\n\n    /// @param _owner The address from which the balance will be retrieved\n    /// @return Balance of owner\n    function balanceOf(address _owner)\n        external\n        view\n        returns (uint256);\n\n    /// @param _owner The address of the account owning tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address _owner, address _spender)\n        external\n        view\n        returns (uint256);\n}\n",
        "./Eth2DaiSampler.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/DeploymentConstants.sol\";\nimport \"./IEth2Dai.sol\";\nimport \"./SamplerUtils.sol\";\n\n\ncontract Eth2DaiSampler is\n    DeploymentConstants,\n    SamplerUtils\n{\n    /// @dev Base gas limit for Eth2Dai calls.\n    uint256 constant private ETH2DAI_CALL_GAS = 1000e3; // 1m\n\n    /// @dev Sample sell quotes from Eth2Dai/Oasis.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromEth2Dai(\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            (bool didSucceed, bytes memory resultData) =\n                _getEth2DaiAddress().staticcall.gas(ETH2DAI_CALL_GAS)(\n                    abi.encodeWithSelector(\n                        IEth2Dai(0).getBuyAmount.selector,\n                        makerToken,\n                        takerToken,\n                        takerTokenAmounts[i]\n                    ));\n            uint256 buyAmount = 0;\n            if (didSucceed) {\n                buyAmount = abi.decode(resultData, (uint256));\n            }\n            // Exit early if the amount is too high for the source to serve\n            if (buyAmount == 0) {\n                break;\n            }\n            makerTokenAmounts[i] = buyAmount;\n        }\n    }\n\n    /// @dev Sample buy quotes from Eth2Dai/Oasis.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Maker token sell amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromEth2Dai(\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            (bool didSucceed, bytes memory resultData) =\n                _getEth2DaiAddress().staticcall.gas(ETH2DAI_CALL_GAS)(\n                    abi.encodeWithSelector(\n                        IEth2Dai(0).getPayAmount.selector,\n                        takerToken,\n                        makerToken,\n                        makerTokenAmounts[i]\n                    ));\n            uint256 sellAmount = 0;\n            if (didSucceed) {\n                sellAmount = abi.decode(resultData, (uint256));\n            }\n            // Exit early if the amount is too high for the source to serve\n            if (sellAmount == 0) {\n                break;\n            }\n            takerTokenAmounts[i] = sellAmount;\n        }\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/DeploymentConstants.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\ncontract DeploymentConstants {\n\n    // solhint-disable separate-by-one-line-in-contract\n\n    // Mainnet addresses ///////////////////////////////////////////////////////\n    /// @dev Mainnet address of the WETH contract.\n    address constant private WETH_ADDRESS = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n    /// @dev Mainnet address of the KyberNetworkProxy contract.\n    address constant private KYBER_NETWORK_PROXY_ADDRESS = 0x9AAb3f75489902f3a48495025729a0AF77d4b11e;\n    /// @dev Mainnet address of the `UniswapExchangeFactory` contract.\n    address constant private UNISWAP_EXCHANGE_FACTORY_ADDRESS = 0xc0a47dFe034B400B47bDaD5FecDa2621de6c4d95;\n    /// @dev Mainnet address of the `UniswapV2Router01` contract.\n    address constant private UNISWAP_V2_ROUTER_01_ADDRESS = 0xf164fC0Ec4E93095b804a4795bBe1e041497b92a;\n    /// @dev Mainnet address of the Eth2Dai `MatchingMarket` contract.\n    address constant private ETH2DAI_ADDRESS = 0x794e6e91555438aFc3ccF1c5076A74F42133d08D;\n    /// @dev Mainnet address of the `ERC20BridgeProxy` contract\n    address constant private ERC20_BRIDGE_PROXY_ADDRESS = 0x8ED95d1746bf1E4dAb58d8ED4724f1Ef95B20Db0;\n    ///@dev Mainnet address of the `Dai` (multi-collateral) contract\n    address constant private DAI_ADDRESS = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\n    /// @dev Mainnet address of the `Chai` contract\n    address constant private CHAI_ADDRESS = 0x06AF07097C9Eeb7fD685c692751D5C66dB49c215;\n    /// @dev Mainnet address of the 0x DevUtils contract.\n    address constant private DEV_UTILS_ADDRESS = 0x74134CF88b21383713E096a5ecF59e297dc7f547;\n    /// @dev Kyber ETH pseudo-address.\n    address constant internal KYBER_ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n    /// @dev Mainnet address of the dYdX contract.\n    address constant private DYDX_ADDRESS = 0x1E0447b19BB6EcFdAe1e4AE1694b0C3659614e4e;\n    /// @dev Mainnet address of the GST2 contract\n    address constant private GST_ADDRESS = 0x0000000000b3F879cb30FE243b4Dfee438691c04;\n    /// @dev Mainnet address of the GST Collector\n    address constant private GST_COLLECTOR_ADDRESS = 0x000000D3b08566BE75A6DB803C03C85C0c1c5B96;\n    /// @dev Mainnet address of the mStable mUSD contract.\n    address constant private MUSD_ADDRESS = 0xe2f2a5C287993345a840Db3B0845fbC70f5935a5;\n    /// @dev Mainnet address of the Mooniswap Registry contract\n    address constant private MOONISWAP_REGISTRY = 0x71CD6666064C3A1354a3B4dca5fA1E2D3ee7D303;\n\n    // // Ropsten addresses ///////////////////////////////////////////////////////\n    // /// @dev Mainnet address of the WETH contract.\n    // address constant private WETH_ADDRESS = 0xc778417E063141139Fce010982780140Aa0cD5Ab;\n    // /// @dev Mainnet address of the KyberNetworkProxy contract.\n    // address constant private KYBER_NETWORK_PROXY_ADDRESS = 0xd719c34261e099Fdb33030ac8909d5788D3039C4;\n    // /// @dev Mainnet address of the `UniswapExchangeFactory` contract.\n    // address constant private UNISWAP_EXCHANGE_FACTORY_ADDRESS = 0x9c83dCE8CA20E9aAF9D3efc003b2ea62aBC08351;\n    // /// @dev Mainnet address of the `UniswapV2Router01` contract.\n    // address constant private UNISWAP_V2_ROUTER_01_ADDRESS = 0xf164fC0Ec4E93095b804a4795bBe1e041497b92a;\n    // /// @dev Mainnet address of the Eth2Dai `MatchingMarket` contract.\n    // address constant private ETH2DAI_ADDRESS = address(0);\n    // /// @dev Mainnet address of the `ERC20BridgeProxy` contract\n    // address constant private ERC20_BRIDGE_PROXY_ADDRESS = 0xb344afeD348de15eb4a9e180205A2B0739628339;\n    // ///@dev Mainnet address of the `Dai` (multi-collateral) contract\n    // address constant private DAI_ADDRESS = address(0);\n    // /// @dev Mainnet address of the `Chai` contract\n    // address constant private CHAI_ADDRESS = address(0);\n    // /// @dev Mainnet address of the 0x DevUtils contract.\n    // address constant private DEV_UTILS_ADDRESS = 0xC812AF3f3fBC62F76ea4262576EC0f49dB8B7f1c;\n    // /// @dev Kyber ETH pseudo-address.\n    // address constant internal KYBER_ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n    // /// @dev Mainnet address of the dYdX contract.\n    // address constant private DYDX_ADDRESS = address(0);\n    // /// @dev Mainnet address of the GST2 contract\n    // address constant private GST_ADDRESS = address(0);\n    // /// @dev Mainnet address of the GST Collector\n    // address constant private GST_COLLECTOR_ADDRESS = address(0);\n    // /// @dev Mainnet address of the mStable mUSD contract.\n    // address constant private MUSD_ADDRESS = 0x4E1000616990D83e56f4b5fC6CC8602DcfD20459;\n\n    // // Rinkeby addresses ///////////////////////////////////////////////////////\n    // /// @dev Mainnet address of the WETH contract.\n    // address constant private WETH_ADDRESS = 0xc778417E063141139Fce010982780140Aa0cD5Ab;\n    // /// @dev Mainnet address of the KyberNetworkProxy contract.\n    // address constant private KYBER_NETWORK_PROXY_ADDRESS = 0x0d5371e5EE23dec7DF251A8957279629aa79E9C5;\n    // /// @dev Mainnet address of the `UniswapExchangeFactory` contract.\n    // address constant private UNISWAP_EXCHANGE_FACTORY_ADDRESS = 0xf5D915570BC477f9B8D6C0E980aA81757A3AaC36;\n    // /// @dev Mainnet address of the `UniswapV2Router01` contract.\n    // address constant private UNISWAP_V2_ROUTER_01_ADDRESS = 0xf164fC0Ec4E93095b804a4795bBe1e041497b92a;\n    // /// @dev Mainnet address of the Eth2Dai `MatchingMarket` contract.\n    // address constant private ETH2DAI_ADDRESS = address(0);\n    // /// @dev Mainnet address of the `ERC20BridgeProxy` contract\n    // address constant private ERC20_BRIDGE_PROXY_ADDRESS = 0xA2AA4bEFED748Fba27a3bE7Dfd2C4b2c6DB1F49B;\n    // ///@dev Mainnet address of the `Dai` (multi-collateral) contract\n    // address constant private DAI_ADDRESS = address(0);\n    // /// @dev Mainnet address of the `Chai` contract\n    // address constant private CHAI_ADDRESS = address(0);\n    // /// @dev Mainnet address of the 0x DevUtils contract.\n    // address constant private DEV_UTILS_ADDRESS = 0x46B5BC959e8A754c0256FFF73bF34A52Ad5CdfA9;\n    // /// @dev Kyber ETH pseudo-address.\n    // address constant internal KYBER_ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n    // /// @dev Mainnet address of the dYdX contract.\n    // address constant private DYDX_ADDRESS = address(0);\n    // /// @dev Mainnet address of the GST2 contract\n    // address constant private GST_ADDRESS = address(0);\n    // /// @dev Mainnet address of the GST Collector\n    // address constant private GST_COLLECTOR_ADDRESS = address(0);\n    // /// @dev Mainnet address of the mStable mUSD contract.\n    // address constant private MUSD_ADDRESS = address(0);\n\n    // // Kovan addresses /////////////////////////////////////////////////////////\n    // /// @dev Kovan address of the WETH contract.\n    // address constant private WETH_ADDRESS = 0xd0A1E359811322d97991E03f863a0C30C2cF029C;\n    // /// @dev Kovan address of the KyberNetworkProxy contract.\n    // address constant private KYBER_NETWORK_PROXY_ADDRESS = 0x692f391bCc85cefCe8C237C01e1f636BbD70EA4D;\n    // /// @dev Kovan address of the `UniswapExchangeFactory` contract.\n    // address constant private UNISWAP_EXCHANGE_FACTORY_ADDRESS = 0xD3E51Ef092B2845f10401a0159B2B96e8B6c3D30;\n    // /// @dev Kovan address of the `UniswapV2Router01` contract.\n    // address constant private UNISWAP_V2_ROUTER_01_ADDRESS = 0xf164fC0Ec4E93095b804a4795bBe1e041497b92a;\n    // /// @dev Kovan address of the Eth2Dai `MatchingMarket` contract.\n    // address constant private ETH2DAI_ADDRESS = 0xe325acB9765b02b8b418199bf9650972299235F4;\n    // /// @dev Kovan address of the `ERC20BridgeProxy` contract\n    // address constant private ERC20_BRIDGE_PROXY_ADDRESS = 0x3577552C1Fb7A44aD76BeEB7aB53251668A21F8D;\n    // /// @dev Kovan address of the `Chai` contract\n    // address constant private CHAI_ADDRESS = address(0);\n    // /// @dev Kovan address of the `Dai` (multi-collateral) contract\n    // address constant private DAI_ADDRESS = 0x4F96Fe3b7A6Cf9725f59d353F723c1bDb64CA6Aa;\n    // /// @dev Kovan address of the 0x DevUtils contract.\n    // address constant private DEV_UTILS_ADDRESS = 0x9402639A828BdF4E9e4103ac3B69E1a6E522eB59;\n    // /// @dev Kyber ETH pseudo-address.\n    // address constant internal KYBER_ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n    // /// @dev Kovan address of the dYdX contract.\n    // address constant private DYDX_ADDRESS = address(0);\n    // /// @dev Kovan address of the GST2 contract\n    // address constant private GST_ADDRESS = address(0);\n    // /// @dev Kovan address of the GST Collector\n    // address constant private GST_COLLECTOR_ADDRESS = address(0);\n    // /// @dev Mainnet address of the mStable mUSD contract.\n    // address constant private MUSD_ADDRESS = address(0);\n\n    /// @dev Overridable way to get the `KyberNetworkProxy` address.\n    /// @return kyberAddress The `IKyberNetworkProxy` address.\n    function _getKyberNetworkProxyAddress()\n        internal\n        view\n        returns (address kyberAddress)\n    {\n        return KYBER_NETWORK_PROXY_ADDRESS;\n    }\n\n    /// @dev Overridable way to get the WETH address.\n    /// @return wethAddress The WETH address.\n    function _getWethAddress()\n        internal\n        view\n        returns (address wethAddress)\n    {\n        return WETH_ADDRESS;\n    }\n\n    /// @dev Overridable way to get the `UniswapExchangeFactory` address.\n    /// @return uniswapAddress The `UniswapExchangeFactory` address.\n    function _getUniswapExchangeFactoryAddress()\n        internal\n        view\n        returns (address uniswapAddress)\n    {\n        return UNISWAP_EXCHANGE_FACTORY_ADDRESS;\n    }\n\n    /// @dev Overridable way to get the `UniswapV2Router01` address.\n    /// @return uniswapRouterAddress The `UniswapV2Router01` address.\n    function _getUniswapV2Router01Address()\n        internal\n        view\n        returns (address uniswapRouterAddress)\n    {\n        return UNISWAP_V2_ROUTER_01_ADDRESS;\n    }\n\n    /// @dev An overridable way to retrieve the Eth2Dai `MatchingMarket` contract.\n    /// @return eth2daiAddress The Eth2Dai `MatchingMarket` contract.\n    function _getEth2DaiAddress()\n        internal\n        view\n        returns (address eth2daiAddress)\n    {\n        return ETH2DAI_ADDRESS;\n    }\n\n    /// @dev An overridable way to retrieve the `ERC20BridgeProxy` contract.\n    /// @return erc20BridgeProxyAddress The `ERC20BridgeProxy` contract.\n    function _getERC20BridgeProxyAddress()\n        internal\n        view\n        returns (address erc20BridgeProxyAddress)\n    {\n        return ERC20_BRIDGE_PROXY_ADDRESS;\n    }\n\n    /// @dev An overridable way to retrieve the `Dai` contract.\n    /// @return daiAddress The `Dai` contract.\n    function _getDaiAddress()\n        internal\n        view\n        returns (address daiAddress)\n    {\n        return DAI_ADDRESS;\n    }\n\n    /// @dev An overridable way to retrieve the `Chai` contract.\n    /// @return chaiAddress The `Chai` contract.\n    function _getChaiAddress()\n        internal\n        view\n        returns (address chaiAddress)\n    {\n        return CHAI_ADDRESS;\n    }\n\n    /// @dev An overridable way to retrieve the 0x `DevUtils` contract address.\n    /// @return devUtils The 0x `DevUtils` contract address.\n    function _getDevUtilsAddress()\n        internal\n        view\n        returns (address devUtils)\n    {\n        return DEV_UTILS_ADDRESS;\n    }\n\n    /// @dev Overridable way to get the DyDx contract.\n    /// @return exchange The DyDx exchange contract.\n    function _getDydxAddress()\n        internal\n        view\n        returns (address dydxAddress)\n    {\n        return DYDX_ADDRESS;\n    }\n\n    /// @dev An overridable way to retrieve the GST2 contract address.\n    /// @return gst The GST contract.\n    function _getGstAddress()\n        internal\n        view\n        returns (address gst)\n    {\n        return GST_ADDRESS;\n    }\n\n    /// @dev An overridable way to retrieve the GST Collector address.\n    /// @return collector The GST collector address.\n    function _getGstCollectorAddress()\n        internal\n        view\n        returns (address collector)\n    {\n        return GST_COLLECTOR_ADDRESS;\n    }\n\n    /// @dev An overridable way to retrieve the mStable mUSD address.\n    /// @return musd The mStable mUSD address.\n    function _getMUsdAddress()\n        internal\n        view\n        returns (address musd)\n    {\n        return MUSD_ADDRESS;\n    }\n\n    /// @dev An overridable way to retrieve the Mooniswap registry address.\n    /// @return musd The Mooniswap registry address.\n    function _getMooniswapAddress()\n        internal\n        view\n        returns (address registry)\n    {\n        return MOONISWAP_REGISTRY;\n    }\n}\n",
        "./IEth2Dai.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\ninterface IEth2Dai {\n\n    function getBuyAmount(\n        address buyToken,\n        address payToken,\n        uint256 payAmount\n    )\n        external\n        view\n        returns (uint256 buyAmount);\n\n    function getPayAmount(\n        address payToken,\n        address buyToken,\n        uint256 buyAmount\n    )\n        external\n        view\n        returns (uint256 payAmount);\n}\n",
        "./KyberSampler.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/DeploymentConstants.sol\";\nimport \"./IKyberNetwork.sol\";\nimport \"./IKyberNetworkProxy.sol\";\nimport \"./IKyberStorage.sol\";\nimport \"./IKyberHintHandler.sol\";\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\n\n\ncontract KyberSampler is\n    DeploymentConstants,\n    SamplerUtils,\n    ApproximateBuys\n{\n    /// @dev Gas limit for Kyber calls.\n    uint256 constant private KYBER_CALL_GAS = 1500e3; // 1.5m\n    /// @dev The Kyber Uniswap Reserve address\n    address constant private KYBER_UNISWAP_RESERVE = 0x31E085Afd48a1d6e51Cc193153d625e8f0514C7F;\n    /// @dev The Kyber Uniswap V2 Reserve address\n    address constant private KYBER_UNISWAPV2_RESERVE = 0x10908C875D865C66f271F5d3949848971c9595C9;\n    /// @dev The Kyber Eth2Dai Reserve address\n    address constant private KYBER_ETH2DAI_RESERVE = 0x1E158c0e93c30d24e918Ef83d1e0bE23595C3c0f;\n\n    /// @dev Sample sell quotes from Kyber.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromKyberNetwork(\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        address wethAddress = _getWethAddress();\n        uint256 value;\n        for (uint256 i = 0; i < numSamples; i++) {\n            if (takerToken == wethAddress || makerToken == wethAddress) {\n                // Direct ETH based trade\n                value = _sampleSellFromKyberNetwork(takerToken, makerToken, takerTokenAmounts[i]);\n            } else {\n                // Hop to ETH\n                value = _sampleSellFromKyberNetwork(takerToken, wethAddress, takerTokenAmounts[i]);\n                if (value != 0) {\n                    value = _sampleSellFromKyberNetwork(wethAddress, makerToken, value);\n                }\n            }\n            makerTokenAmounts[i] = value;\n        }\n    }\n\n    /// @dev Sample buy quotes from Kyber.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromKyberNetwork(\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        return _sampleApproximateBuys(\n            ApproximateBuyQuoteOpts({\n                makerTokenData: abi.encode(makerToken),\n                takerTokenData: abi.encode(takerToken),\n                getSellQuoteCallback: _sampleSellForApproximateBuyFromKyber\n            }),\n            makerTokenAmounts\n        );\n    }\n\n    function _sampleSellForApproximateBuyFromKyber(\n        bytes memory takerTokenData,\n        bytes memory makerTokenData,\n        uint256 sellAmount\n    )\n        private\n        view\n        returns (uint256 buyAmount)\n    {\n        (bool success, bytes memory resultData) =\n            address(this).staticcall(abi.encodeWithSelector(\n                this.sampleSellsFromKyberNetwork.selector,\n                abi.decode(takerTokenData, (address)),\n                abi.decode(makerTokenData, (address)),\n                _toSingleValueArray(sellAmount)\n            ));\n        if (!success) {\n            return 0;\n        }\n        // solhint-disable-next-line indent\n        return abi.decode(resultData, (uint256[]))[0];\n    }\n\n    function _appendToList(bytes32[] memory list, bytes32 item) private view returns (bytes32[] memory appendedList)\n    {\n        appendedList = new bytes32[](list.length + 1);\n        for (uint256 i = 0; i < list.length; i++) {\n            appendedList[i] = list[i];\n        }\n        appendedList[appendedList.length - 1] = item;\n    }\n\n    function _getKyberAddresses()\n        private\n        view\n        returns (IKyberHintHandler kyberHint, IKyberStorage kyberStorage)\n    {\n        (, , kyberHint, kyberStorage, ,) = IKyberNetwork(\n            IKyberNetworkProxy(_getKyberNetworkProxyAddress()).kyberNetwork()).getContracts();\n        return (IKyberHintHandler(kyberHint), IKyberStorage(kyberStorage));\n    }\n\n    function _sampleSellFromKyberNetwork(\n        address takerToken,\n        address makerToken,\n        uint256 takerTokenAmount\n    )\n        private\n        view\n        returns (uint256 makerTokenAmount)\n    {\n        (IKyberHintHandler kyberHint, IKyberStorage kyberStorage) = _getKyberAddresses();\n        // Ban reserves which can clash with our internal aggregation\n        bytes32[] memory reserveIds = kyberStorage.getReserveIdsPerTokenSrc(\n            takerToken == _getWethAddress() ? makerToken : takerToken\n        );\n        bytes32[] memory bannedReserveIds = new bytes32[](0);\n        // Poor mans resize and append\n        for (uint256 i = 0; i < reserveIds.length; i++) {\n            if (\n                reserveIds[i] == kyberStorage.getReserveId(KYBER_UNISWAP_RESERVE) ||\n                reserveIds[i] == kyberStorage.getReserveId(KYBER_UNISWAPV2_RESERVE) ||\n                reserveIds[i] == kyberStorage.getReserveId(KYBER_ETH2DAI_RESERVE)\n            ) {\n                bannedReserveIds = _appendToList(bannedReserveIds, reserveIds[i]);\n            }\n        }\n        // Sampler either detects X->ETH/ETH->X\n        // or subsamples as X->ETH-Y. So token->token here is not possible\n        bytes memory hint;\n        if (takerToken == _getWethAddress()) {\n            // ETH -> X\n            hint = kyberHint.buildEthToTokenHint(\n                    makerToken,\n                    IKyberHintHandler.TradeType.MaskOut,\n                    bannedReserveIds,\n                    new uint256[](0));\n        } else {\n            // X->ETH\n            hint = kyberHint.buildEthToTokenHint(\n                    takerToken,\n                    IKyberHintHandler.TradeType.MaskOut,\n                    bannedReserveIds,\n                    new uint256[](0));\n        }\n        (bool didSucceed, bytes memory resultData) =\n            _getKyberNetworkProxyAddress().staticcall.gas(KYBER_CALL_GAS)(\n                abi.encodeWithSelector(\n                    IKyberNetworkProxy(0).getExpectedRateAfterFee.selector,\n                    takerToken == _getWethAddress() ? KYBER_ETH_ADDRESS : takerToken,\n                    makerToken == _getWethAddress() ? KYBER_ETH_ADDRESS : makerToken,\n                    takerTokenAmount,\n                    0, // fee\n                    hint\n                ));\n        uint256 rate = 0;\n        if (didSucceed) {\n            (rate) = abi.decode(resultData, (uint256));\n        } else {\n            return 0;\n        }\n\n        uint256 makerTokenDecimals = _getTokenDecimals(makerToken);\n        uint256 takerTokenDecimals = _getTokenDecimals(takerToken);\n        makerTokenAmount =\n            rate *\n            takerTokenAmount *\n            10 ** makerTokenDecimals /\n            10 ** takerTokenDecimals /\n            10 ** 18;\n        return makerTokenAmount;\n    }\n}\n",
        "./IKyberNetwork.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\nimport \"./IKyberStorage.sol\";\nimport \"./IKyberHintHandler.sol\";\n\n\ninterface IKyberNetwork {\n\n    function getContracts()\n        external\n        view\n        returns (\n            address kyberFeeHandlerAddress,\n            address kyberDaoAddress,\n            IKyberHintHandler kyberMatchingEngineAddress,\n            IKyberStorage kyberStorageAddress,\n            address gasHelperAddress,\n            address[] memory kyberProxyAddresses);\n}\n",
        "./IKyberStorage.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\ninterface IKyberStorage {\n\n    function getReserveId(\n        address reserve\n    )\n        external\n        view\n        returns (bytes32 reserveId);\n\n    function getReserveIdsPerTokenSrc(\n        address token\n    )\n        external\n        view\n        returns (bytes32[] memory reserveIds);\n}\n",
        "./IKyberHintHandler.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\ninterface IKyberHintHandler {\n\n    function kyberStorage() external returns (address);\n\n    enum TradeType {BestOfAll, MaskIn, MaskOut, Split}\n\n    function buildTokenToEthHint(\n        address tokenSrc,\n        TradeType tokenToEthType,\n        bytes32[] calldata tokenToEthReserveIds,\n        uint256[] calldata tokenToEthSplits\n    ) external view returns (bytes memory hint);\n\n    function buildEthToTokenHint(\n        address tokenDest,\n        TradeType ethToTokenType,\n        bytes32[] calldata ethToTokenReserveIds,\n        uint256[] calldata ethToTokenSplits\n    ) external view returns (bytes memory hint);\n\n    function buildTokenToTokenHint(\n        address tokenSrc,\n        TradeType tokenToEthType,\n        bytes32[] calldata tokenToEthReserveIds,\n        uint256[] calldata tokenToEthSplits,\n        address tokenDest,\n        TradeType ethToTokenType,\n        bytes32[] calldata ethToTokenReserveIds,\n        uint256[] calldata ethToTokenSplits\n    ) external view returns (bytes memory hint);\n}\n",
        "./IKyberNetworkProxy.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\ninterface IKyberNetworkProxy {\n\n    function kyberNetwork() external view returns (address);\n    function kyberHintHandler() external view returns (address);\n\n    function getExpectedRateAfterFee(\n        address src,\n        address dest,\n        uint256 srcQty,\n        uint256 platformFeeBps,\n        bytes calldata hint\n    ) external view returns (uint256 expectedRate);\n}\n",
        "./LiquidityProviderSampler.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/LibBytes.sol\";\nimport \"./ILiquidityProvider.sol\";\nimport \"./ILiquidityProviderRegistry.sol\";\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\n\n\ncontract LiquidityProviderSampler is\n    SamplerUtils,\n    ApproximateBuys\n{\n    /// @dev Default gas limit for liquidity provider calls.\n    uint256 constant private DEFAULT_CALL_GAS = 400e3; // 400k\n\n    /// @dev Sample sell quotes from an arbitrary on-chain liquidity provider.\n    /// @param registryAddress Address of the liquidity provider registry contract.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromLiquidityProviderRegistry(\n        address registryAddress,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        // Initialize array of maker token amounts.\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        // Query registry for provider address.\n        address providerAddress = getLiquidityProviderFromRegistry(\n            registryAddress,\n            takerToken,\n            makerToken\n        );\n        // If provider doesn't exist, return all zeros.\n        if (providerAddress == address(0)) {\n            return makerTokenAmounts;\n        }\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            (bool didSucceed, bytes memory resultData) =\n                providerAddress.staticcall.gas(DEFAULT_CALL_GAS)(\n                    abi.encodeWithSelector(\n                        ILiquidityProvider(0).getSellQuote.selector,\n                        takerToken,\n                        makerToken,\n                        takerTokenAmounts[i]\n                    ));\n            uint256 buyAmount = 0;\n            if (didSucceed) {\n                buyAmount = abi.decode(resultData, (uint256));\n            }\n            // Exit early if the amount is too high for the source to serve\n            if (buyAmount == 0) {\n                break;\n            }\n            makerTokenAmounts[i] = buyAmount;\n        }\n    }\n\n    /// @dev Sample buy quotes from an arbitrary on-chain liquidity provider.\n    /// @param registryAddress Address of the liquidity provider registry contract.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromLiquidityProviderRegistry(\n        address registryAddress,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        return _sampleApproximateBuys(\n            ApproximateBuyQuoteOpts({\n                makerTokenData: abi.encode(makerToken, registryAddress),\n                takerTokenData: abi.encode(takerToken, registryAddress),\n                getSellQuoteCallback: _sampleSellForApproximateBuyFromLiquidityProviderRegistry\n            }),\n            makerTokenAmounts\n        );\n    }\n\n    /// @dev Returns the address of a liquidity provider for the given market\n    ///      (takerToken, makerToken), from a registry of liquidity providers.\n    ///      Returns address(0) if no such provider exists in the registry.\n    /// @param takerToken Taker asset managed by liquidity provider.\n    /// @param makerToken Maker asset managed by liquidity provider.\n    /// @return providerAddress Address of the liquidity provider.\n    function getLiquidityProviderFromRegistry(\n        address registryAddress,\n        address takerToken,\n        address makerToken\n    )\n        public\n        view\n        returns (address providerAddress)\n    {\n        if (registryAddress == address(0)) {\n            return address(0);\n        }\n        bytes memory callData = abi.encodeWithSelector(\n            ILiquidityProviderRegistry(0).getLiquidityProviderForMarket.selector,\n            takerToken,\n            makerToken\n        );\n        (bool didSucceed, bytes memory returnData) = registryAddress.staticcall(callData);\n        if (didSucceed && returnData.length == 32) {\n            return LibBytes.readAddress(returnData, 12);\n        }\n    }\n\n    function _sampleSellForApproximateBuyFromLiquidityProviderRegistry(\n        bytes memory takerTokenData,\n        bytes memory makerTokenData,\n        uint256 sellAmount\n    )\n        private\n        view\n        returns (uint256 buyAmount)\n    {\n        (address takerToken, address plpRegistryAddress) =\n            abi.decode(takerTokenData, (address, address));\n        (address makerToken) =\n            abi.decode(makerTokenData, (address));\n        (bool success, bytes memory resultData) =\n            address(this).staticcall(abi.encodeWithSelector(\n                this.sampleSellsFromLiquidityProviderRegistry.selector,\n                plpRegistryAddress,\n                takerToken,\n                makerToken,\n                _toSingleValueArray(sellAmount)\n            ));\n        if (!success) {\n            return 0;\n        }\n        // solhint-disable-next-line indent\n        return abi.decode(resultData, (uint256[]))[0];\n    }\n}\n",
        "./ILiquidityProvider.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\ninterface ILiquidityProvider {\n\n    /// @dev Transfers `amount` of the ERC20 `tokenAddress` from `from` to `to`.\n    /// @param tokenAddress The address of the ERC20 token to transfer.\n    /// @param from Address to transfer asset from.\n    /// @param to Address to transfer asset to.\n    /// @param amount Amount of asset to transfer.\n    /// @param bridgeData Arbitrary asset data needed by the bridge contract.\n    /// @return success The magic bytes `0xdc1600f3` if successful.\n    function bridgeTransferFrom(\n        address tokenAddress,\n        address from,\n        address to,\n        uint256 amount,\n        bytes calldata bridgeData\n    )\n        external\n        returns (bytes4 success);\n\n    /// @dev Quotes the amount of `makerToken` that would be obtained by\n    ///      selling `sellAmount` of `takerToken`.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param sellAmount Amount of `takerToken` to sell.\n    /// @return makerTokenAmount Amount of `makerToken` that would be obtained.\n    function getSellQuote(\n        address takerToken,\n        address makerToken,\n        uint256 sellAmount\n    )\n        external\n        view\n        returns (uint256 makerTokenAmount);\n\n    /// @dev Quotes the amount of `takerToken` that would need to be sold in\n    ///      order to obtain `buyAmount` of `makerToken`.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param buyAmount Amount of `makerToken` to buy.\n    /// @return takerTokenAmount Amount of `takerToken` that would need to be sold.\n    function getBuyQuote(\n        address takerToken,\n        address makerToken,\n        uint256 buyAmount\n    )\n        external\n        view\n        returns (uint256 takerTokenAmount);\n}\n",
        "./ILiquidityProviderRegistry.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\ninterface ILiquidityProviderRegistry {\n\n    /// @dev Returns the address of a liquidity provider for the given market\n    ///      (takerToken, makerToken), reverting if the pool does not exist.\n    /// @param takerToken Taker asset managed by liquidity provider.\n    /// @param makerToken Maker asset managed by liquidity provider.\n    /// @return Address of the liquidity provider.\n    function getLiquidityProviderForMarket(\n        address takerToken,\n        address makerToken\n    )\n        external\n        view\n        returns (address providerAddress);\n}\n",
        "./MultiBridgeSampler.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"./IMultiBridge.sol\";\n\n\ncontract MultiBridgeSampler {\n\n    /// @dev Default gas limit for multibridge calls.\n    uint256 constant private DEFAULT_CALL_GAS = 400e3; // 400k\n\n    /// @dev Sample sell quotes from MultiBridge.\n    /// @param multibridge Address of the MultiBridge contract.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param intermediateToken The address of the intermediate token to\n    ///        use in an indirect route.\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromMultiBridge(\n        address multibridge,\n        address takerToken,\n        address intermediateToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        // Initialize array of maker token amounts.\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        // If no address provided, return all zeros.\n        if (multibridge == address(0)) {\n            return makerTokenAmounts;\n        }\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            (bool didSucceed, bytes memory resultData) =\n                multibridge.staticcall.gas(DEFAULT_CALL_GAS)(\n                    abi.encodeWithSelector(\n                        IMultiBridge(0).getSellQuote.selector,\n                        takerToken,\n                        intermediateToken,\n                        makerToken,\n                        takerTokenAmounts[i]\n                    ));\n            uint256 buyAmount = 0;\n            if (didSucceed) {\n                buyAmount = abi.decode(resultData, (uint256));\n            }\n            // Exit early if the amount is too high for the source to serve\n            if (buyAmount == 0) {\n                break;\n            }\n\n            makerTokenAmounts[i] = buyAmount;\n        }\n    }\n}\n",
        "./IMultiBridge.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\ninterface IMultiBridge {\n\n    /// @dev Transfers `amount` of the ERC20 `tokenAddress` from `from` to `to`.\n    /// @param tokenAddress The address of the ERC20 token to transfer.\n    /// @param from Address to transfer asset from.\n    /// @param to Address to transfer asset to.\n    /// @param amount Amount of asset to transfer.\n    /// @param bridgeData Arbitrary asset data needed by the bridge contract.\n    /// @return success The magic bytes `0xdc1600f3` if successful.\n    function bridgeTransferFrom(\n        address tokenAddress,\n        address from,\n        address to,\n        uint256 amount,\n        bytes calldata bridgeData\n    )\n        external\n        returns (bytes4 success);\n\n    /// @dev Quotes the amount of `makerToken` that would be obtained by\n    ///      selling `sellAmount` of `takerToken`.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param intermediateToken The address of the intermediate token to\n    ///        use in an indirect route.\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param sellAmount Amount of `takerToken` to sell.\n    /// @return makerTokenAmount Amount of `makerToken` that would be obtained.\n    function getSellQuote(\n        address takerToken,\n        address intermediateToken,\n        address makerToken,\n        uint256 sellAmount\n    )\n        external\n        view\n        returns (uint256 makerTokenAmount);\n}\n",
        "./MStableSampler.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/DeploymentConstants.sol\";\nimport \"@0x/contracts-utils/contracts/src/LibBytes.sol\";\nimport \"./IMStable.sol\";\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\n\n\ncontract MStableSampler is\n    DeploymentConstants,\n    SamplerUtils,\n    ApproximateBuys\n{\n    /// @dev Default gas limit for mStable calls.\n    uint256 constant private DEFAULT_CALL_GAS = 800e3; // 800k\n\n    /// @dev Sample sell quotes from the mStable mUSD contract\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromMStable(\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        // Initialize array of maker token amounts.\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            (bool didSucceed, bytes memory resultData) =\n                address(_getMUsdAddress()).staticcall.gas(DEFAULT_CALL_GAS)(\n                    abi.encodeWithSelector(\n                        IMStable(0).getSwapOutput.selector,\n                        takerToken,\n                        makerToken,\n                        takerTokenAmounts[i]\n                    ));\n            uint256 buyAmount = 0;\n            if (didSucceed) {\n                (, , buyAmount) = abi.decode(resultData, (bool, string, uint256));\n            }\n            // Exit early if the amount is too high for the source to serve\n            if (buyAmount == 0) {\n                break;\n            }\n            makerTokenAmounts[i] = buyAmount;\n        }\n    }\n\n    /// @dev Sample buy quotes from MStable mUSD contract\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromMStable(\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        return _sampleApproximateBuys(\n            ApproximateBuyQuoteOpts({\n                makerTokenData: abi.encode(makerToken),\n                takerTokenData: abi.encode(takerToken),\n                getSellQuoteCallback: _sampleSellForApproximateBuyFromMStable\n            }),\n            makerTokenAmounts\n        );\n    }\n\n    function _sampleSellForApproximateBuyFromMStable(\n        bytes memory takerTokenData,\n        bytes memory makerTokenData,\n        uint256 sellAmount\n    )\n        private\n        view\n        returns (uint256 buyAmount)\n    {\n        (address takerToken) =\n            abi.decode(takerTokenData, (address));\n        (address makerToken) =\n            abi.decode(makerTokenData, (address));\n        (bool success, bytes memory resultData) =\n            address(this).staticcall(abi.encodeWithSelector(\n                this.sampleSellsFromMStable.selector,\n                takerToken,\n                makerToken,\n                _toSingleValueArray(sellAmount)\n            ));\n        if (!success) {\n            return 0;\n        }\n        // solhint-disable-next-line indent\n        return abi.decode(resultData, (uint256[]))[0];\n    }\n}\n",
        "./IMStable.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\ninterface IMStable {\n\n    function getSwapOutput(\n        address _input,\n        address _output,\n        uint256 _quantity\n    )\n        external\n        view\n        returns (bool, string memory, uint256 output);\n}\n",
        "./MooniswapSampler.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/DeploymentConstants.sol\";\nimport \"./IMooniswap.sol\";\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\n\n\ncontract MooniswapSampler is\n    DeploymentConstants,\n    SamplerUtils,\n    ApproximateBuys\n{\n    /// @dev Gas limit for Mooniswap calls.\n    uint256 constant private MOONISWAP_CALL_GAS = 150e3; // 150k\n\n    /// @dev Sample sell quotes from Mooniswap.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromMooniswap(\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        address _takerToken = takerToken == _getWethAddress() ? address(0) : takerToken;\n        address _makerToken = makerToken == _getWethAddress() ? address(0) : makerToken;\n        // Find the pool for the pair, ETH is represented\n        // as address(0)\n        IMooniswap pool = IMooniswap(\n            IMooniswapRegistry(_getMooniswapAddress()).pools(_takerToken, _makerToken)\n        );\n        // If there is no pool then return early\n        if (address(pool) == address(0)) {\n            return makerTokenAmounts;\n        }\n\n        uint256 poolBalance = _takerToken == address(0) ? address(pool).balance : IERC20Token(_takerToken).balanceOf(address(pool));\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            // If the pool balance is smaller than the sell amount\n            // don't sample to avoid multiplication overflow in buys\n            if (poolBalance < takerTokenAmounts[i]) {\n                break;\n            }\n            (bool didSucceed, bytes memory resultData) =\n                address(pool).staticcall.gas(MOONISWAP_CALL_GAS)(\n                    abi.encodeWithSelector(\n                        IMooniswap(0).getReturn.selector,\n                        _takerToken,\n                        _makerToken,\n                        takerTokenAmounts[i]\n                    ));\n            uint256 buyAmount = 0;\n            if (didSucceed) {\n                buyAmount = abi.decode(resultData, (uint256));\n            }\n            // Exit early if the amount is too high for the source to serve\n            if (buyAmount == 0) {\n                break;\n            }\n            makerTokenAmounts[i] = buyAmount;\n        }\n    }\n\n    /// @dev Sample buy quotes from Mooniswap.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token sell amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromMooniswap(\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        return _sampleApproximateBuys(\n            ApproximateBuyQuoteOpts({\n                makerTokenData: abi.encode(makerToken),\n                takerTokenData: abi.encode(takerToken),\n                getSellQuoteCallback: _sampleSellForApproximateBuyFromMooniswap\n            }),\n            makerTokenAmounts\n        );\n    }\n\n    function _sampleSellForApproximateBuyFromMooniswap(\n        bytes memory takerTokenData,\n        bytes memory makerTokenData,\n        uint256 sellAmount\n    )\n        private\n        view\n        returns (uint256 buyAmount)\n    {\n        (address takerToken) =\n            abi.decode(takerTokenData, (address));\n        (address makerToken) =\n            abi.decode(makerTokenData, (address));\n        (bool success, bytes memory resultData) =\n            address(this).staticcall(abi.encodeWithSelector(\n                this.sampleSellsFromMooniswap.selector,\n                takerToken,\n                makerToken,\n                _toSingleValueArray(sellAmount)\n            ));\n        if (!success) {\n            return 0;\n        }\n        // solhint-disable-next-line indent\n        return abi.decode(resultData, (uint256[]))[0];\n    }\n}\n",
        "./IMooniswap.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\ninterface IMooniswapRegistry {\n\n    function pools(address token1, address token2) external view returns(address);\n}\n\ninterface IMooniswap {\n\n    function getReturn(\n        address fromToken,\n        address destToken,\n        uint256 amount\n    )\n        external\n        view\n        returns(uint256 returnAmount);\n}\n",
        "./NativeOrderSampler.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/interfaces/IERC20Token.sol\";\nimport \"@0x/contracts-exchange/contracts/src/interfaces/IExchange.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/LibOrder.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/LibMath.sol\";\nimport \"@0x/contracts-utils/contracts/src/LibBytes.sol\";\nimport \"@0x/contracts-utils/contracts/src/LibSafeMath.sol\";\n\n\ncontract NativeOrderSampler {\n    using LibSafeMath for uint256;\n    using LibBytes for bytes;\n\n    /// @dev The Exchange ERC20Proxy ID.\n    bytes4 private constant ERC20_ASSET_PROXY_ID = 0xf47261b0;\n    /// @dev Gas limit for calls to `getOrderFillableTakerAmount()`.\n    uint256 constant internal DEFAULT_CALL_GAS = 200e3; // 200k\n\n    /// @dev Queries the fillable taker asset amounts of native orders.\n    ///      Effectively ignores orders that have empty signatures or\n    ///      maker/taker asset amounts (returning 0).\n    /// @param orders Native orders to query.\n    /// @param orderSignatures Signatures for each respective order in `orders`.\n    /// @param exchange The V3 exchange.\n    /// @return orderFillableTakerAssetAmounts How much taker asset can be filled\n    ///         by each order in `orders`.\n    function getOrderFillableTakerAssetAmounts(\n        LibOrder.Order[] memory orders,\n        bytes[] memory orderSignatures,\n        IExchange exchange\n    )\n        public\n        view\n        returns (uint256[] memory orderFillableTakerAssetAmounts)\n    {\n        orderFillableTakerAssetAmounts = new uint256[](orders.length);\n        for (uint256 i = 0; i != orders.length; i++) {\n            // solhint-disable indent\n            (bool didSucceed, bytes memory resultData) =\n                address(this)\n                    .staticcall\n                    .gas(DEFAULT_CALL_GAS)\n                    (abi.encodeWithSelector(\n                       this.getOrderFillableTakerAmount.selector,\n                       orders[i],\n                       orderSignatures[i],\n                       exchange\n                    ));\n            // solhint-enable indent\n            orderFillableTakerAssetAmounts[i] = didSucceed\n                ? abi.decode(resultData, (uint256))\n                : 0;\n        }\n    }\n\n    /// @dev Queries the fillable taker asset amounts of native orders.\n    ///      Effectively ignores orders that have empty signatures or\n    /// @param orders Native orders to query.\n    /// @param orderSignatures Signatures for each respective order in `orders`.\n    /// @param exchange The V3 exchange.\n    /// @return orderFillableMakerAssetAmounts How much maker asset can be filled\n    ///         by each order in `orders`.\n    function getOrderFillableMakerAssetAmounts(\n        LibOrder.Order[] memory orders,\n        bytes[] memory orderSignatures,\n        IExchange exchange\n    )\n        public\n        view\n        returns (uint256[] memory orderFillableMakerAssetAmounts)\n    {\n        orderFillableMakerAssetAmounts = getOrderFillableTakerAssetAmounts(\n            orders,\n            orderSignatures,\n            exchange\n        );\n        // `orderFillableMakerAssetAmounts` now holds taker asset amounts, so\n        // convert them to maker asset amounts.\n        for (uint256 i = 0; i < orders.length; ++i) {\n            if (orderFillableMakerAssetAmounts[i] != 0) {\n                orderFillableMakerAssetAmounts[i] = LibMath.getPartialAmountCeil(\n                    orderFillableMakerAssetAmounts[i],\n                    orders[i].takerAssetAmount,\n                    orders[i].makerAssetAmount\n                );\n            }\n        }\n    }\n\n    /// @dev Get the fillable taker amount of an order, taking into account\n    ///      order state, maker fees, and maker balances.\n    function getOrderFillableTakerAmount(\n        LibOrder.Order memory order,\n        bytes memory signature,\n        IExchange exchange\n    )\n        public\n        view\n        returns (uint256 fillableTakerAmount)\n    {\n        if (signature.length == 0 ||\n            order.makerAssetAmount == 0 ||\n            order.takerAssetAmount == 0)\n        {\n            return 0;\n        }\n\n        LibOrder.OrderInfo memory orderInfo = exchange.getOrderInfo(order);\n        if (orderInfo.orderStatus != LibOrder.OrderStatus.FILLABLE) {\n            return 0;\n        }\n        if (!exchange.isValidHashSignature(orderInfo.orderHash, order.makerAddress, signature)) {\n            return 0;\n        }\n        address spender = exchange.getAssetProxy(ERC20_ASSET_PROXY_ID);\n        IERC20Token makerToken = _getTokenFromERC20AssetData(order.makerAssetData);\n        if (makerToken == IERC20Token(0)) {\n            return 0;\n        }\n        IERC20Token makerFeeToken = order.makerFee > 0\n            ? _getTokenFromERC20AssetData(order.makerFeeAssetData)\n            : IERC20Token(0);\n        uint256 remainingTakerAmount = order.takerAssetAmount\n            .safeSub(orderInfo.orderTakerAssetFilledAmount);\n        fillableTakerAmount = remainingTakerAmount;\n        // The total fillable maker amount is the remaining fillable maker amount\n        // PLUS maker fees, if maker fees are denominated in the maker token.\n        uint256 totalFillableMakerAmount = LibMath.safeGetPartialAmountFloor(\n            remainingTakerAmount,\n            order.takerAssetAmount,\n            makerFeeToken == makerToken\n                ? order.makerAssetAmount.safeAdd(order.makerFee)\n                : order.makerAssetAmount\n        );\n        // The spendable amount of maker tokens (by the maker) is the lesser of\n        // the maker's balance and the allowance they've granted to the ERC20Proxy.\n        uint256 spendableMakerAmount = LibSafeMath.min256(\n            makerToken.balanceOf(order.makerAddress),\n            makerToken.allowance(order.makerAddress, spender)\n        );\n        // Scale the fillable taker amount by the ratio of the maker's\n        // spendable maker amount over the total fillable maker amount.\n        if (spendableMakerAmount < totalFillableMakerAmount) {\n            fillableTakerAmount = LibMath.getPartialAmountCeil(\n                spendableMakerAmount,\n                totalFillableMakerAmount,\n                remainingTakerAmount\n            );\n        }\n        // If the maker fee is denominated in another token, constrain\n        // the fillable taker amount by how much the maker can pay of that token.\n        if (makerFeeToken != makerToken && makerFeeToken != IERC20Token(0)) {\n            uint256 spendableExtraMakerFeeAmount = LibSafeMath.min256(\n                makerFeeToken.balanceOf(order.makerAddress),\n                makerFeeToken.allowance(order.makerAddress, spender)\n            );\n            if (spendableExtraMakerFeeAmount < order.makerFee) {\n                fillableTakerAmount = LibSafeMath.min256(\n                    fillableTakerAmount,\n                    LibMath.getPartialAmountCeil(\n                        spendableExtraMakerFeeAmount,\n                        order.makerFee,\n                        remainingTakerAmount\n                    )\n                );\n            }\n        }\n    }\n\n    function _getTokenFromERC20AssetData(bytes memory assetData)\n        private\n        pure\n        returns (IERC20Token token)\n    {\n        if (assetData.length == 0) {\n            return IERC20Token(address(0));\n        }\n        if (assetData.length != 36 ||\n            assetData.readBytes4(0) != ERC20_ASSET_PROXY_ID)\n        {\n            return IERC20Token(address(0));\n        }\n        return IERC20Token(assetData.readAddress(16));\n    }\n}\n",
        "@0x/contracts-exchange/contracts/src/interfaces/IExchange.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"./IExchangeCore.sol\";\nimport \"./IProtocolFees.sol\";\nimport \"./IMatchOrders.sol\";\nimport \"./ISignatureValidator.sol\";\nimport \"./ITransactions.sol\";\nimport \"./IAssetProxyDispatcher.sol\";\nimport \"./IWrapperFunctions.sol\";\nimport \"./ITransferSimulator.sol\";\n\n\n// solhint-disable no-empty-blocks\ncontract IExchange is\n    IProtocolFees,\n    IExchangeCore,\n    IMatchOrders,\n    ISignatureValidator,\n    ITransactions,\n    IAssetProxyDispatcher,\n    ITransferSimulator,\n    IWrapperFunctions\n{}\n",
        "@0x/contracts-exchange/contracts/src/interfaces/IExchangeCore.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-exchange-libs/contracts/src/LibOrder.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/LibFillResults.sol\";\n\n\ncontract IExchangeCore {\n\n    // Fill event is emitted whenever an order is filled.\n    event Fill(\n        address indexed makerAddress,         // Address that created the order.\n        address indexed feeRecipientAddress,  // Address that received fees.\n        bytes makerAssetData,                 // Encoded data specific to makerAsset.\n        bytes takerAssetData,                 // Encoded data specific to takerAsset.\n        bytes makerFeeAssetData,              // Encoded data specific to makerFeeAsset.\n        bytes takerFeeAssetData,              // Encoded data specific to takerFeeAsset.\n        bytes32 indexed orderHash,            // EIP712 hash of order (see LibOrder.getTypedDataHash).\n        address takerAddress,                 // Address that filled the order.\n        address senderAddress,                // Address that called the Exchange contract (msg.sender).\n        uint256 makerAssetFilledAmount,       // Amount of makerAsset sold by maker and bought by taker.\n        uint256 takerAssetFilledAmount,       // Amount of takerAsset sold by taker and bought by maker.\n        uint256 makerFeePaid,                 // Amount of makerFeeAssetData paid to feeRecipient by maker.\n        uint256 takerFeePaid,                 // Amount of takerFeeAssetData paid to feeRecipient by taker.\n        uint256 protocolFeePaid               // Amount of eth or weth paid to the staking contract.\n    );\n\n    // Cancel event is emitted whenever an individual order is cancelled.\n    event Cancel(\n        address indexed makerAddress,         // Address that created the order.\n        address indexed feeRecipientAddress,  // Address that would have recieved fees if order was filled.\n        bytes makerAssetData,                 // Encoded data specific to makerAsset.\n        bytes takerAssetData,                 // Encoded data specific to takerAsset.\n        address senderAddress,                // Address that called the Exchange contract (msg.sender).\n        bytes32 indexed orderHash             // EIP712 hash of order (see LibOrder.getTypedDataHash).\n    );\n\n    // CancelUpTo event is emitted whenever `cancelOrdersUpTo` is executed succesfully.\n    event CancelUpTo(\n        address indexed makerAddress,         // Orders cancelled must have been created by this address.\n        address indexed orderSenderAddress,   // Orders cancelled must have a `senderAddress` equal to this address.\n        uint256 orderEpoch                    // Orders with specified makerAddress and senderAddress with a salt less than this value are considered cancelled.\n    );\n\n    /// @dev Cancels all orders created by makerAddress with a salt less than or equal to the targetOrderEpoch\n    ///      and senderAddress equal to msg.sender (or null address if msg.sender == makerAddress).\n    /// @param targetOrderEpoch Orders created with a salt less or equal to this value will be cancelled.\n    function cancelOrdersUpTo(uint256 targetOrderEpoch)\n        external\n        payable;\n\n    /// @dev Fills the input order.\n    /// @param order Order struct containing order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signature Proof that order has been created by maker.\n    /// @return Amounts filled and fees paid by maker and taker.\n    function fillOrder(\n        LibOrder.Order memory order,\n        uint256 takerAssetFillAmount,\n        bytes memory signature\n    )\n        public\n        payable\n        returns (LibFillResults.FillResults memory fillResults);\n\n    /// @dev After calling, the order can not be filled anymore.\n    /// @param order Order struct containing order specifications.\n    function cancelOrder(LibOrder.Order memory order)\n        public\n        payable;\n\n    /// @dev Gets information about an order: status, hash, and amount filled.\n    /// @param order Order to gather information on.\n    /// @return OrderInfo Information about the order and its state.\n    ///                   See LibOrder.OrderInfo for a complete description.\n    function getOrderInfo(LibOrder.Order memory order)\n        public\n        view\n        returns (LibOrder.OrderInfo memory orderInfo);\n}\n",
        "@0x/contracts-exchange-libs/contracts/src/LibOrder.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\nimport \"@0x/contracts-utils/contracts/src/LibEIP712.sol\";\n\n\nlibrary LibOrder {\n\n    using LibOrder for Order;\n\n    // Hash for the EIP712 Order Schema:\n    // keccak256(abi.encodePacked(\n    //     \"Order(\",\n    //     \"address makerAddress,\",\n    //     \"address takerAddress,\",\n    //     \"address feeRecipientAddress,\",\n    //     \"address senderAddress,\",\n    //     \"uint256 makerAssetAmount,\",\n    //     \"uint256 takerAssetAmount,\",\n    //     \"uint256 makerFee,\",\n    //     \"uint256 takerFee,\",\n    //     \"uint256 expirationTimeSeconds,\",\n    //     \"uint256 salt,\",\n    //     \"bytes makerAssetData,\",\n    //     \"bytes takerAssetData,\",\n    //     \"bytes makerFeeAssetData,\",\n    //     \"bytes takerFeeAssetData\",\n    //     \")\"\n    // ))\n    bytes32 constant internal _EIP712_ORDER_SCHEMA_HASH =\n        0xf80322eb8376aafb64eadf8f0d7623f22130fd9491a221e902b713cb984a7534;\n\n    // A valid order remains fillable until it is expired, fully filled, or cancelled.\n    // An order's status is unaffected by external factors, like account balances.\n    enum OrderStatus {\n        INVALID,                     // Default value\n        INVALID_MAKER_ASSET_AMOUNT,  // Order does not have a valid maker asset amount\n        INVALID_TAKER_ASSET_AMOUNT,  // Order does not have a valid taker asset amount\n        FILLABLE,                    // Order is fillable\n        EXPIRED,                     // Order has already expired\n        FULLY_FILLED,                // Order is fully filled\n        CANCELLED                    // Order has been cancelled\n    }\n\n    // solhint-disable max-line-length\n    /// @dev Canonical order structure.\n    struct Order {\n        address makerAddress;           // Address that created the order.\n        address takerAddress;           // Address that is allowed to fill the order. If set to 0, any address is allowed to fill the order.\n        address feeRecipientAddress;    // Address that will recieve fees when order is filled.\n        address senderAddress;          // Address that is allowed to call Exchange contract methods that affect this order. If set to 0, any address is allowed to call these methods.\n        uint256 makerAssetAmount;       // Amount of makerAsset being offered by maker. Must be greater than 0.\n        uint256 takerAssetAmount;       // Amount of takerAsset being bid on by maker. Must be greater than 0.\n        uint256 makerFee;               // Fee paid to feeRecipient by maker when order is filled.\n        uint256 takerFee;               // Fee paid to feeRecipient by taker when order is filled.\n        uint256 expirationTimeSeconds;  // Timestamp in seconds at which order expires.\n        uint256 salt;                   // Arbitrary number to facilitate uniqueness of the order's hash.\n        bytes makerAssetData;           // Encoded data that can be decoded by a specified proxy contract when transferring makerAsset. The leading bytes4 references the id of the asset proxy.\n        bytes takerAssetData;           // Encoded data that can be decoded by a specified proxy contract when transferring takerAsset. The leading bytes4 references the id of the asset proxy.\n        bytes makerFeeAssetData;        // Encoded data that can be decoded by a specified proxy contract when transferring makerFeeAsset. The leading bytes4 references the id of the asset proxy.\n        bytes takerFeeAssetData;        // Encoded data that can be decoded by a specified proxy contract when transferring takerFeeAsset. The leading bytes4 references the id of the asset proxy.\n    }\n    // solhint-enable max-line-length\n\n    /// @dev Order information returned by `getOrderInfo()`.\n    struct OrderInfo {\n        OrderStatus orderStatus;                    // Status that describes order's validity and fillability.\n        bytes32 orderHash;                    // EIP712 typed data hash of the order (see LibOrder.getTypedDataHash).\n        uint256 orderTakerAssetFilledAmount;  // Amount of order that has already been filled.\n    }\n\n    /// @dev Calculates the EIP712 typed data hash of an order with a given domain separator.\n    /// @param order The order structure.\n    /// @return EIP712 typed data hash of the order.\n    function getTypedDataHash(Order memory order, bytes32 eip712ExchangeDomainHash)\n        internal\n        pure\n        returns (bytes32 orderHash)\n    {\n        orderHash = LibEIP712.hashEIP712Message(\n            eip712ExchangeDomainHash,\n            order.getStructHash()\n        );\n        return orderHash;\n    }\n\n    /// @dev Calculates EIP712 hash of the order struct.\n    /// @param order The order structure.\n    /// @return EIP712 hash of the order struct.\n    function getStructHash(Order memory order)\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        bytes32 schemaHash = _EIP712_ORDER_SCHEMA_HASH;\n        bytes memory makerAssetData = order.makerAssetData;\n        bytes memory takerAssetData = order.takerAssetData;\n        bytes memory makerFeeAssetData = order.makerFeeAssetData;\n        bytes memory takerFeeAssetData = order.takerFeeAssetData;\n\n        // Assembly for more efficiently computing:\n        // keccak256(abi.encodePacked(\n        //     EIP712_ORDER_SCHEMA_HASH,\n        //     uint256(order.makerAddress),\n        //     uint256(order.takerAddress),\n        //     uint256(order.feeRecipientAddress),\n        //     uint256(order.senderAddress),\n        //     order.makerAssetAmount,\n        //     order.takerAssetAmount,\n        //     order.makerFee,\n        //     order.takerFee,\n        //     order.expirationTimeSeconds,\n        //     order.salt,\n        //     keccak256(order.makerAssetData),\n        //     keccak256(order.takerAssetData),\n        //     keccak256(order.makerFeeAssetData),\n        //     keccak256(order.takerFeeAssetData)\n        // ));\n\n        assembly {\n            // Assert order offset (this is an internal error that should never be triggered)\n            if lt(order, 32) {\n                invalid()\n            }\n\n            // Calculate memory addresses that will be swapped out before hashing\n            let pos1 := sub(order, 32)\n            let pos2 := add(order, 320)\n            let pos3 := add(order, 352)\n            let pos4 := add(order, 384)\n            let pos5 := add(order, 416)\n\n            // Backup\n            let temp1 := mload(pos1)\n            let temp2 := mload(pos2)\n            let temp3 := mload(pos3)\n            let temp4 := mload(pos4)\n            let temp5 := mload(pos5)\n\n            // Hash in place\n            mstore(pos1, schemaHash)\n            mstore(pos2, keccak256(add(makerAssetData, 32), mload(makerAssetData)))        // store hash of makerAssetData\n            mstore(pos3, keccak256(add(takerAssetData, 32), mload(takerAssetData)))        // store hash of takerAssetData\n            mstore(pos4, keccak256(add(makerFeeAssetData, 32), mload(makerFeeAssetData)))  // store hash of makerFeeAssetData\n            mstore(pos5, keccak256(add(takerFeeAssetData, 32), mload(takerFeeAssetData)))  // store hash of takerFeeAssetData\n            result := keccak256(pos1, 480)\n\n            // Restore\n            mstore(pos1, temp1)\n            mstore(pos2, temp2)\n            mstore(pos3, temp3)\n            mstore(pos4, temp4)\n            mstore(pos5, temp5)\n        }\n        return result;\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/LibEIP712.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\nlibrary LibEIP712 {\n\n    // Hash of the EIP712 Domain Separator Schema\n    // keccak256(abi.encodePacked(\n    //     \"EIP712Domain(\",\n    //     \"string name,\",\n    //     \"string version,\",\n    //     \"uint256 chainId,\",\n    //     \"address verifyingContract\",\n    //     \")\"\n    // ))\n    bytes32 constant internal _EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH = 0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f;\n\n    /// @dev Calculates a EIP712 domain separator.\n    /// @param name The EIP712 domain name.\n    /// @param version The EIP712 domain version.\n    /// @param verifyingContract The EIP712 verifying contract.\n    /// @return EIP712 domain separator.\n    function hashEIP712Domain(\n        string memory name,\n        string memory version,\n        uint256 chainId,\n        address verifyingContract\n    )\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        bytes32 schemaHash = _EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH;\n\n        // Assembly for more efficient computing:\n        // keccak256(abi.encodePacked(\n        //     _EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH,\n        //     keccak256(bytes(name)),\n        //     keccak256(bytes(version)),\n        //     chainId,\n        //     uint256(verifyingContract)\n        // ))\n\n        assembly {\n            // Calculate hashes of dynamic data\n            let nameHash := keccak256(add(name, 32), mload(name))\n            let versionHash := keccak256(add(version, 32), mload(version))\n\n            // Load free memory pointer\n            let memPtr := mload(64)\n\n            // Store params in memory\n            mstore(memPtr, schemaHash)\n            mstore(add(memPtr, 32), nameHash)\n            mstore(add(memPtr, 64), versionHash)\n            mstore(add(memPtr, 96), chainId)\n            mstore(add(memPtr, 128), verifyingContract)\n\n            // Compute hash\n            result := keccak256(memPtr, 160)\n        }\n        return result;\n    }\n\n    /// @dev Calculates EIP712 encoding for a hash struct with a given domain hash.\n    /// @param eip712DomainHash Hash of the domain domain separator data, computed\n    ///                         with getDomainHash().\n    /// @param hashStruct The EIP712 hash struct.\n    /// @return EIP712 hash applied to the given EIP712 Domain.\n    function hashEIP712Message(bytes32 eip712DomainHash, bytes32 hashStruct)\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        // Assembly for more efficient computing:\n        // keccak256(abi.encodePacked(\n        //     EIP191_HEADER,\n        //     EIP712_DOMAIN_HASH,\n        //     hashStruct\n        // ));\n\n        assembly {\n            // Load free memory pointer\n            let memPtr := mload(64)\n\n            mstore(memPtr, 0x1901000000000000000000000000000000000000000000000000000000000000)  // EIP191 header\n            mstore(add(memPtr, 2), eip712DomainHash)                                            // EIP712 domain hash\n            mstore(add(memPtr, 34), hashStruct)                                                 // Hash of struct\n\n            // Compute hash\n            result := keccak256(memPtr, 66)\n        }\n        return result;\n    }\n}\n",
        "@0x/contracts-exchange-libs/contracts/src/LibFillResults.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\nimport \"@0x/contracts-utils/contracts/src/LibSafeMath.sol\";\nimport \"./LibMath.sol\";\nimport \"./LibOrder.sol\";\n\n\nlibrary LibFillResults {\n\n    using LibSafeMath for uint256;\n\n    struct BatchMatchedFillResults {\n        FillResults[] left;              // Fill results for left orders\n        FillResults[] right;             // Fill results for right orders\n        uint256 profitInLeftMakerAsset;  // Profit taken from left makers\n        uint256 profitInRightMakerAsset; // Profit taken from right makers\n    }\n\n    struct FillResults {\n        uint256 makerAssetFilledAmount;  // Total amount of makerAsset(s) filled.\n        uint256 takerAssetFilledAmount;  // Total amount of takerAsset(s) filled.\n        uint256 makerFeePaid;            // Total amount of fees paid by maker(s) to feeRecipient(s).\n        uint256 takerFeePaid;            // Total amount of fees paid by taker to feeRecipients(s).\n        uint256 protocolFeePaid;         // Total amount of fees paid by taker to the staking contract.\n    }\n\n    struct MatchedFillResults {\n        FillResults left;                // Amounts filled and fees paid of left order.\n        FillResults right;               // Amounts filled and fees paid of right order.\n        uint256 profitInLeftMakerAsset;  // Profit taken from the left maker\n        uint256 profitInRightMakerAsset; // Profit taken from the right maker\n    }\n\n    /// @dev Calculates amounts filled and fees paid by maker and taker.\n    /// @param order to be filled.\n    /// @param takerAssetFilledAmount Amount of takerAsset that will be filled.\n    /// @param protocolFeeMultiplier The current protocol fee of the exchange contract.\n    /// @param gasPrice The gasprice of the transaction. This is provided so that the function call can continue\n    ///        to be pure rather than view.\n    /// @return fillResults Amounts filled and fees paid by maker and taker.\n    function calculateFillResults(\n        LibOrder.Order memory order,\n        uint256 takerAssetFilledAmount,\n        uint256 protocolFeeMultiplier,\n        uint256 gasPrice\n    )\n        internal\n        pure\n        returns (FillResults memory fillResults)\n    {\n        // Compute proportional transfer amounts\n        fillResults.takerAssetFilledAmount = takerAssetFilledAmount;\n        fillResults.makerAssetFilledAmount = LibMath.safeGetPartialAmountFloor(\n            takerAssetFilledAmount,\n            order.takerAssetAmount,\n            order.makerAssetAmount\n        );\n        fillResults.makerFeePaid = LibMath.safeGetPartialAmountFloor(\n            takerAssetFilledAmount,\n            order.takerAssetAmount,\n            order.makerFee\n        );\n        fillResults.takerFeePaid = LibMath.safeGetPartialAmountFloor(\n            takerAssetFilledAmount,\n            order.takerAssetAmount,\n            order.takerFee\n        );\n\n        // Compute the protocol fee that should be paid for a single fill.\n        fillResults.protocolFeePaid = gasPrice.safeMul(protocolFeeMultiplier);\n\n        return fillResults;\n    }\n\n    /// @dev Calculates fill amounts for the matched orders.\n    ///      Each order is filled at their respective price point. However, the calculations are\n    ///      carried out as though the orders are both being filled at the right order's price point.\n    ///      The profit made by the leftOrder order goes to the taker (who matched the two orders).\n    /// @param leftOrder First order to match.\n    /// @param rightOrder Second order to match.\n    /// @param leftOrderTakerAssetFilledAmount Amount of left order already filled.\n    /// @param rightOrderTakerAssetFilledAmount Amount of right order already filled.\n    /// @param protocolFeeMultiplier The current protocol fee of the exchange contract.\n    /// @param gasPrice The gasprice of the transaction. This is provided so that the function call can continue\n    ///        to be pure rather than view.\n    /// @param shouldMaximallyFillOrders A value that indicates whether or not this calculation should use\n    ///                                  the maximal fill order matching strategy.\n    /// @param matchedFillResults Amounts to fill and fees to pay by maker and taker of matched orders.\n    function calculateMatchedFillResults(\n        LibOrder.Order memory leftOrder,\n        LibOrder.Order memory rightOrder,\n        uint256 leftOrderTakerAssetFilledAmount,\n        uint256 rightOrderTakerAssetFilledAmount,\n        uint256 protocolFeeMultiplier,\n        uint256 gasPrice,\n        bool shouldMaximallyFillOrders\n    )\n        internal\n        pure\n        returns (MatchedFillResults memory matchedFillResults)\n    {\n        // Derive maker asset amounts for left & right orders, given store taker assert amounts\n        uint256 leftTakerAssetAmountRemaining = leftOrder.takerAssetAmount.safeSub(leftOrderTakerAssetFilledAmount);\n        uint256 leftMakerAssetAmountRemaining = LibMath.safeGetPartialAmountFloor(\n            leftOrder.makerAssetAmount,\n            leftOrder.takerAssetAmount,\n            leftTakerAssetAmountRemaining\n        );\n        uint256 rightTakerAssetAmountRemaining = rightOrder.takerAssetAmount.safeSub(rightOrderTakerAssetFilledAmount);\n        uint256 rightMakerAssetAmountRemaining = LibMath.safeGetPartialAmountFloor(\n            rightOrder.makerAssetAmount,\n            rightOrder.takerAssetAmount,\n            rightTakerAssetAmountRemaining\n        );\n\n        // Maximally fill the orders and pay out profits to the matcher in one or both of the maker assets.\n        if (shouldMaximallyFillOrders) {\n            matchedFillResults = _calculateMatchedFillResultsWithMaximalFill(\n                leftOrder,\n                rightOrder,\n                leftMakerAssetAmountRemaining,\n                leftTakerAssetAmountRemaining,\n                rightMakerAssetAmountRemaining,\n                rightTakerAssetAmountRemaining\n            );\n        } else {\n            matchedFillResults = _calculateMatchedFillResults(\n                leftOrder,\n                rightOrder,\n                leftMakerAssetAmountRemaining,\n                leftTakerAssetAmountRemaining,\n                rightMakerAssetAmountRemaining,\n                rightTakerAssetAmountRemaining\n            );\n        }\n\n        // Compute fees for left order\n        matchedFillResults.left.makerFeePaid = LibMath.safeGetPartialAmountFloor(\n            matchedFillResults.left.makerAssetFilledAmount,\n            leftOrder.makerAssetAmount,\n            leftOrder.makerFee\n        );\n        matchedFillResults.left.takerFeePaid = LibMath.safeGetPartialAmountFloor(\n            matchedFillResults.left.takerAssetFilledAmount,\n            leftOrder.takerAssetAmount,\n            leftOrder.takerFee\n        );\n\n        // Compute fees for right order\n        matchedFillResults.right.makerFeePaid = LibMath.safeGetPartialAmountFloor(\n            matchedFillResults.right.makerAssetFilledAmount,\n            rightOrder.makerAssetAmount,\n            rightOrder.makerFee\n        );\n        matchedFillResults.right.takerFeePaid = LibMath.safeGetPartialAmountFloor(\n            matchedFillResults.right.takerAssetFilledAmount,\n            rightOrder.takerAssetAmount,\n            rightOrder.takerFee\n        );\n\n        // Compute the protocol fee that should be paid for a single fill. In this\n        // case this should be made the protocol fee for both the left and right orders.\n        uint256 protocolFee = gasPrice.safeMul(protocolFeeMultiplier);\n        matchedFillResults.left.protocolFeePaid = protocolFee;\n        matchedFillResults.right.protocolFeePaid = protocolFee;\n\n        // Return fill results\n        return matchedFillResults;\n    }\n\n    /// @dev Adds properties of both FillResults instances.\n    /// @param fillResults1 The first FillResults.\n    /// @param fillResults2 The second FillResults.\n    /// @return The sum of both fill results.\n    function addFillResults(\n        FillResults memory fillResults1,\n        FillResults memory fillResults2\n    )\n        internal\n        pure\n        returns (FillResults memory totalFillResults)\n    {\n        totalFillResults.makerAssetFilledAmount = fillResults1.makerAssetFilledAmount.safeAdd(fillResults2.makerAssetFilledAmount);\n        totalFillResults.takerAssetFilledAmount = fillResults1.takerAssetFilledAmount.safeAdd(fillResults2.takerAssetFilledAmount);\n        totalFillResults.makerFeePaid = fillResults1.makerFeePaid.safeAdd(fillResults2.makerFeePaid);\n        totalFillResults.takerFeePaid = fillResults1.takerFeePaid.safeAdd(fillResults2.takerFeePaid);\n        totalFillResults.protocolFeePaid = fillResults1.protocolFeePaid.safeAdd(fillResults2.protocolFeePaid);\n\n        return totalFillResults;\n    }\n\n    /// @dev Calculates part of the matched fill results for a given situation using the fill strategy that only\n    ///      awards profit denominated in the left maker asset.\n    /// @param leftOrder The left order in the order matching situation.\n    /// @param rightOrder The right order in the order matching situation.\n    /// @param leftMakerAssetAmountRemaining The amount of the left order maker asset that can still be filled.\n    /// @param leftTakerAssetAmountRemaining The amount of the left order taker asset that can still be filled.\n    /// @param rightMakerAssetAmountRemaining The amount of the right order maker asset that can still be filled.\n    /// @param rightTakerAssetAmountRemaining The amount of the right order taker asset that can still be filled.\n    /// @return MatchFillResults struct that does not include fees paid.\n    function _calculateMatchedFillResults(\n        LibOrder.Order memory leftOrder,\n        LibOrder.Order memory rightOrder,\n        uint256 leftMakerAssetAmountRemaining,\n        uint256 leftTakerAssetAmountRemaining,\n        uint256 rightMakerAssetAmountRemaining,\n        uint256 rightTakerAssetAmountRemaining\n    )\n        private\n        pure\n        returns (MatchedFillResults memory matchedFillResults)\n    {\n        // Calculate fill results for maker and taker assets: at least one order will be fully filled.\n        // The maximum amount the left maker can buy is `leftTakerAssetAmountRemaining`\n        // The maximum amount the right maker can sell is `rightMakerAssetAmountRemaining`\n        // We have two distinct cases for calculating the fill results:\n        // Case 1.\n        //   If the left maker can buy more than the right maker can sell, then only the right order is fully filled.\n        //   If the left maker can buy exactly what the right maker can sell, then both orders are fully filled.\n        // Case 2.\n        //   If the left maker cannot buy more than the right maker can sell, then only the left order is fully filled.\n        // Case 3.\n        //   If the left maker can buy exactly as much as the right maker can sell, then both orders are fully filled.\n        if (leftTakerAssetAmountRemaining > rightMakerAssetAmountRemaining) {\n            // Case 1: Right order is fully filled\n            matchedFillResults = _calculateCompleteRightFill(\n                leftOrder,\n                rightMakerAssetAmountRemaining,\n                rightTakerAssetAmountRemaining\n            );\n        } else if (leftTakerAssetAmountRemaining < rightMakerAssetAmountRemaining) {\n            // Case 2: Left order is fully filled\n            matchedFillResults.left.makerAssetFilledAmount = leftMakerAssetAmountRemaining;\n            matchedFillResults.left.takerAssetFilledAmount = leftTakerAssetAmountRemaining;\n            matchedFillResults.right.makerAssetFilledAmount = leftTakerAssetAmountRemaining;\n            // Round up to ensure the maker's exchange rate does not exceed the price specified by the order.\n            // We favor the maker when the exchange rate must be rounded.\n            matchedFillResults.right.takerAssetFilledAmount = LibMath.safeGetPartialAmountCeil(\n                rightOrder.takerAssetAmount,\n                rightOrder.makerAssetAmount,\n                leftTakerAssetAmountRemaining // matchedFillResults.right.makerAssetFilledAmount\n            );\n        } else {\n            // leftTakerAssetAmountRemaining == rightMakerAssetAmountRemaining\n            // Case 3: Both orders are fully filled. Technically, this could be captured by the above cases, but\n            //         this calculation will be more precise since it does not include rounding.\n            matchedFillResults = _calculateCompleteFillBoth(\n                leftMakerAssetAmountRemaining,\n                leftTakerAssetAmountRemaining,\n                rightMakerAssetAmountRemaining,\n                rightTakerAssetAmountRemaining\n            );\n        }\n\n        // Calculate amount given to taker\n        matchedFillResults.profitInLeftMakerAsset = matchedFillResults.left.makerAssetFilledAmount.safeSub(\n            matchedFillResults.right.takerAssetFilledAmount\n        );\n\n        return matchedFillResults;\n    }\n\n    /// @dev Calculates part of the matched fill results for a given situation using the maximal fill order matching\n    ///      strategy.\n    /// @param leftOrder The left order in the order matching situation.\n    /// @param rightOrder The right order in the order matching situation.\n    /// @param leftMakerAssetAmountRemaining The amount of the left order maker asset that can still be filled.\n    /// @param leftTakerAssetAmountRemaining The amount of the left order taker asset that can still be filled.\n    /// @param rightMakerAssetAmountRemaining The amount of the right order maker asset that can still be filled.\n    /// @param rightTakerAssetAmountRemaining The amount of the right order taker asset that can still be filled.\n    /// @return MatchFillResults struct that does not include fees paid.\n    function _calculateMatchedFillResultsWithMaximalFill(\n        LibOrder.Order memory leftOrder,\n        LibOrder.Order memory rightOrder,\n        uint256 leftMakerAssetAmountRemaining,\n        uint256 leftTakerAssetAmountRemaining,\n        uint256 rightMakerAssetAmountRemaining,\n        uint256 rightTakerAssetAmountRemaining\n    )\n        private\n        pure\n        returns (MatchedFillResults memory matchedFillResults)\n    {\n        // If a maker asset is greater than the opposite taker asset, than there will be a spread denominated in that maker asset.\n        bool doesLeftMakerAssetProfitExist = leftMakerAssetAmountRemaining > rightTakerAssetAmountRemaining;\n        bool doesRightMakerAssetProfitExist = rightMakerAssetAmountRemaining > leftTakerAssetAmountRemaining;\n\n        // Calculate the maximum fill results for the maker and taker assets. At least one of the orders will be fully filled.\n        //\n        // The maximum that the left maker can possibly buy is the amount that the right order can sell.\n        // The maximum that the right maker can possibly buy is the amount that the left order can sell.\n        //\n        // If the left order is fully filled, profit will be paid out in the left maker asset. If the right order is fully filled,\n        // the profit will be out in the right maker asset.\n        //\n        // There are three cases to consider:\n        // Case 1.\n        //   If the left maker can buy more than the right maker can sell, then only the right order is fully filled.\n        // Case 2.\n        //   If the right maker can buy more than the left maker can sell, then only the right order is fully filled.\n        // Case 3.\n        //   If the right maker can sell the max of what the left maker can buy and the left maker can sell the max of\n        //   what the right maker can buy, then both orders are fully filled.\n        if (leftTakerAssetAmountRemaining > rightMakerAssetAmountRemaining) {\n            // Case 1: Right order is fully filled with the profit paid in the left makerAsset\n            matchedFillResults = _calculateCompleteRightFill(\n                leftOrder,\n                rightMakerAssetAmountRemaining,\n                rightTakerAssetAmountRemaining\n            );\n        } else if (rightTakerAssetAmountRemaining > leftMakerAssetAmountRemaining) {\n            // Case 2: Left order is fully filled with the profit paid in the right makerAsset.\n            matchedFillResults.left.makerAssetFilledAmount = leftMakerAssetAmountRemaining;\n            matchedFillResults.left.takerAssetFilledAmount = leftTakerAssetAmountRemaining;\n            // Round down to ensure the right maker's exchange rate does not exceed the price specified by the order.\n            // We favor the right maker when the exchange rate must be rounded and the profit is being paid in the\n            // right maker asset.\n            matchedFillResults.right.makerAssetFilledAmount = LibMath.safeGetPartialAmountFloor(\n                rightOrder.makerAssetAmount,\n                rightOrder.takerAssetAmount,\n                leftMakerAssetAmountRemaining\n            );\n            matchedFillResults.right.takerAssetFilledAmount = leftMakerAssetAmountRemaining;\n        } else {\n            // Case 3: The right and left orders are fully filled\n            matchedFillResults = _calculateCompleteFillBoth(\n                leftMakerAssetAmountRemaining,\n                leftTakerAssetAmountRemaining,\n                rightMakerAssetAmountRemaining,\n                rightTakerAssetAmountRemaining\n            );\n        }\n\n        // Calculate amount given to taker in the left order's maker asset if the left spread will be part of the profit.\n        if (doesLeftMakerAssetProfitExist) {\n            matchedFillResults.profitInLeftMakerAsset = matchedFillResults.left.makerAssetFilledAmount.safeSub(\n                matchedFillResults.right.takerAssetFilledAmount\n            );\n        }\n\n        // Calculate amount given to taker in the right order's maker asset if the right spread will be part of the profit.\n        if (doesRightMakerAssetProfitExist) {\n            matchedFillResults.profitInRightMakerAsset = matchedFillResults.right.makerAssetFilledAmount.safeSub(\n                matchedFillResults.left.takerAssetFilledAmount\n            );\n        }\n\n        return matchedFillResults;\n    }\n\n    /// @dev Calculates the fill results for the maker and taker in the order matching and writes the results\n    ///      to the fillResults that are being collected on the order. Both orders will be fully filled in this\n    ///      case.\n    /// @param leftMakerAssetAmountRemaining The amount of the left maker asset that is remaining to be filled.\n    /// @param leftTakerAssetAmountRemaining The amount of the left taker asset that is remaining to be filled.\n    /// @param rightMakerAssetAmountRemaining The amount of the right maker asset that is remaining to be filled.\n    /// @param rightTakerAssetAmountRemaining The amount of the right taker asset that is remaining to be filled.\n    /// @return MatchFillResults struct that does not include fees paid or spreads taken.\n    function _calculateCompleteFillBoth(\n        uint256 leftMakerAssetAmountRemaining,\n        uint256 leftTakerAssetAmountRemaining,\n        uint256 rightMakerAssetAmountRemaining,\n        uint256 rightTakerAssetAmountRemaining\n    )\n        private\n        pure\n        returns (MatchedFillResults memory matchedFillResults)\n    {\n        // Calculate the fully filled results for both orders.\n        matchedFillResults.left.makerAssetFilledAmount = leftMakerAssetAmountRemaining;\n        matchedFillResults.left.takerAssetFilledAmount = leftTakerAssetAmountRemaining;\n        matchedFillResults.right.makerAssetFilledAmount = rightMakerAssetAmountRemaining;\n        matchedFillResults.right.takerAssetFilledAmount = rightTakerAssetAmountRemaining;\n\n        return matchedFillResults;\n    }\n\n    /// @dev Calculates the fill results for the maker and taker in the order matching and writes the results\n    ///      to the fillResults that are being collected on the order.\n    /// @param leftOrder The left order that is being maximally filled. All of the information about fill amounts\n    ///                  can be derived from this order and the right asset remaining fields.\n    /// @param rightMakerAssetAmountRemaining The amount of the right maker asset that is remaining to be filled.\n    /// @param rightTakerAssetAmountRemaining The amount of the right taker asset that is remaining to be filled.\n    /// @return MatchFillResults struct that does not include fees paid or spreads taken.\n    function _calculateCompleteRightFill(\n        LibOrder.Order memory leftOrder,\n        uint256 rightMakerAssetAmountRemaining,\n        uint256 rightTakerAssetAmountRemaining\n    )\n        private\n        pure\n        returns (MatchedFillResults memory matchedFillResults)\n    {\n        matchedFillResults.right.makerAssetFilledAmount = rightMakerAssetAmountRemaining;\n        matchedFillResults.right.takerAssetFilledAmount = rightTakerAssetAmountRemaining;\n        matchedFillResults.left.takerAssetFilledAmount = rightMakerAssetAmountRemaining;\n        // Round down to ensure the left maker's exchange rate does not exceed the price specified by the order.\n        // We favor the left maker when the exchange rate must be rounded and the profit is being paid in the\n        // left maker asset.\n        matchedFillResults.left.makerAssetFilledAmount = LibMath.safeGetPartialAmountFloor(\n            leftOrder.makerAssetAmount,\n            leftOrder.takerAssetAmount,\n            rightMakerAssetAmountRemaining\n        );\n\n        return matchedFillResults;\n    }\n}\n",
        "@0x/contracts-exchange/contracts/src/interfaces/IProtocolFees.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\ncontract IProtocolFees {\n\n    // Logs updates to the protocol fee multiplier.\n    event ProtocolFeeMultiplier(uint256 oldProtocolFeeMultiplier, uint256 updatedProtocolFeeMultiplier);\n\n    // Logs updates to the protocolFeeCollector address.\n    event ProtocolFeeCollectorAddress(address oldProtocolFeeCollector, address updatedProtocolFeeCollector);\n\n    /// @dev Allows the owner to update the protocol fee multiplier.\n    /// @param updatedProtocolFeeMultiplier The updated protocol fee multiplier.\n    function setProtocolFeeMultiplier(uint256 updatedProtocolFeeMultiplier)\n        external;\n\n    /// @dev Allows the owner to update the protocolFeeCollector address.\n    /// @param updatedProtocolFeeCollector The updated protocolFeeCollector contract address.\n    function setProtocolFeeCollectorAddress(address updatedProtocolFeeCollector)\n        external;\n\n    /// @dev Returns the protocolFeeMultiplier\n    function protocolFeeMultiplier()\n        external\n        view\n        returns (uint256);\n\n    /// @dev Returns the protocolFeeCollector address\n    function protocolFeeCollector()\n        external\n        view\n        returns (address);\n}\n",
        "@0x/contracts-exchange/contracts/src/interfaces/IMatchOrders.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-exchange-libs/contracts/src/LibOrder.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/LibFillResults.sol\";\n\n\ncontract IMatchOrders {\n\n    /// @dev Match complementary orders that have a profitable spread.\n    ///      Each order is filled at their respective price point, and\n    ///      the matcher receives a profit denominated in the left maker asset.\n    /// @param leftOrders Set of orders with the same maker / taker asset.\n    /// @param rightOrders Set of orders to match against `leftOrders`\n    /// @param leftSignatures Proof that left orders were created by the left makers.\n    /// @param rightSignatures Proof that right orders were created by the right makers.\n    /// @return batchMatchedFillResults Amounts filled and profit generated.\n    function batchMatchOrders(\n        LibOrder.Order[] memory leftOrders,\n        LibOrder.Order[] memory rightOrders,\n        bytes[] memory leftSignatures,\n        bytes[] memory rightSignatures\n    )\n        public\n        payable\n        returns (LibFillResults.BatchMatchedFillResults memory batchMatchedFillResults);\n\n    /// @dev Match complementary orders that have a profitable spread.\n    ///      Each order is maximally filled at their respective price point, and\n    ///      the matcher receives a profit denominated in either the left maker asset,\n    ///      right maker asset, or a combination of both.\n    /// @param leftOrders Set of orders with the same maker / taker asset.\n    /// @param rightOrders Set of orders to match against `leftOrders`\n    /// @param leftSignatures Proof that left orders were created by the left makers.\n    /// @param rightSignatures Proof that right orders were created by the right makers.\n    /// @return batchMatchedFillResults Amounts filled and profit generated.\n    function batchMatchOrdersWithMaximalFill(\n        LibOrder.Order[] memory leftOrders,\n        LibOrder.Order[] memory rightOrders,\n        bytes[] memory leftSignatures,\n        bytes[] memory rightSignatures\n    )\n        public\n        payable\n        returns (LibFillResults.BatchMatchedFillResults memory batchMatchedFillResults);\n\n    /// @dev Match two complementary orders that have a profitable spread.\n    ///      Each order is filled at their respective price point. However, the calculations are\n    ///      carried out as though the orders are both being filled at the right order's price point.\n    ///      The profit made by the left order goes to the taker (who matched the two orders).\n    /// @param leftOrder First order to match.\n    /// @param rightOrder Second order to match.\n    /// @param leftSignature Proof that order was created by the left maker.\n    /// @param rightSignature Proof that order was created by the right maker.\n    /// @return matchedFillResults Amounts filled and fees paid by maker and taker of matched orders.\n    function matchOrders(\n        LibOrder.Order memory leftOrder,\n        LibOrder.Order memory rightOrder,\n        bytes memory leftSignature,\n        bytes memory rightSignature\n    )\n        public\n        payable\n        returns (LibFillResults.MatchedFillResults memory matchedFillResults);\n\n    /// @dev Match two complementary orders that have a profitable spread.\n    ///      Each order is maximally filled at their respective price point, and\n    ///      the matcher receives a profit denominated in either the left maker asset,\n    ///      right maker asset, or a combination of both.\n    /// @param leftOrder First order to match.\n    /// @param rightOrder Second order to match.\n    /// @param leftSignature Proof that order was created by the left maker.\n    /// @param rightSignature Proof that order was created by the right maker.\n    /// @return matchedFillResults Amounts filled by maker and taker of matched orders.\n    function matchOrdersWithMaximalFill(\n        LibOrder.Order memory leftOrder,\n        LibOrder.Order memory rightOrder,\n        bytes memory leftSignature,\n        bytes memory rightSignature\n    )\n        public\n        payable\n        returns (LibFillResults.MatchedFillResults memory matchedFillResults);\n}\n",
        "@0x/contracts-exchange/contracts/src/interfaces/ISignatureValidator.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-exchange-libs/contracts/src/LibOrder.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/LibZeroExTransaction.sol\";\n\n\ncontract ISignatureValidator {\n\n   // Allowed signature types.\n    enum SignatureType {\n        Illegal,                     // 0x00, default value\n        Invalid,                     // 0x01\n        EIP712,                      // 0x02\n        EthSign,                     // 0x03\n        Wallet,                      // 0x04\n        Validator,                   // 0x05\n        PreSigned,                   // 0x06\n        EIP1271Wallet,               // 0x07\n        NSignatureTypes              // 0x08, number of signature types. Always leave at end.\n    }\n\n    event SignatureValidatorApproval(\n        address indexed signerAddress,     // Address that approves or disapproves a contract to verify signatures.\n        address indexed validatorAddress,  // Address of signature validator contract.\n        bool isApproved                    // Approval or disapproval of validator contract.\n    );\n\n    /// @dev Approves a hash on-chain.\n    ///      After presigning a hash, the preSign signature type will become valid for that hash and signer.\n    /// @param hash Any 32-byte hash.\n    function preSign(bytes32 hash)\n        external\n        payable;\n\n    /// @dev Approves/unnapproves a Validator contract to verify signatures on signer's behalf.\n    /// @param validatorAddress Address of Validator contract.\n    /// @param approval Approval or disapproval of  Validator contract.\n    function setSignatureValidatorApproval(\n        address validatorAddress,\n        bool approval\n    )\n        external\n        payable;\n\n    /// @dev Verifies that a hash has been signed by the given signer.\n    /// @param hash Any 32-byte hash.\n    /// @param signature Proof that the hash has been signed by signer.\n    /// @return isValid `true` if the signature is valid for the given hash and signer.\n    function isValidHashSignature(\n        bytes32 hash,\n        address signerAddress,\n        bytes memory signature\n    )\n        public\n        view\n        returns (bool isValid);\n\n    /// @dev Verifies that a signature for an order is valid.\n    /// @param order The order.\n    /// @param signature Proof that the order has been signed by signer.\n    /// @return isValid true if the signature is valid for the given order and signer.\n    function isValidOrderSignature(\n        LibOrder.Order memory order,\n        bytes memory signature\n    )\n        public\n        view\n        returns (bool isValid);\n\n    /// @dev Verifies that a signature for a transaction is valid.\n    /// @param transaction The transaction.\n    /// @param signature Proof that the order has been signed by signer.\n    /// @return isValid true if the signature is valid for the given transaction and signer.\n    function isValidTransactionSignature(\n        LibZeroExTransaction.ZeroExTransaction memory transaction,\n        bytes memory signature\n    )\n        public\n        view\n        returns (bool isValid);\n\n    /// @dev Verifies that an order, with provided order hash, has been signed\n    ///      by the given signer.\n    /// @param order The order.\n    /// @param orderHash The hash of the order.\n    /// @param signature Proof that the hash has been signed by signer.\n    /// @return isValid True if the signature is valid for the given order and signer.\n    function _isValidOrderWithHashSignature(\n        LibOrder.Order memory order,\n        bytes32 orderHash,\n        bytes memory signature\n    )\n        internal\n        view\n        returns (bool isValid);\n\n    /// @dev Verifies that a transaction, with provided order hash, has been signed\n    ///      by the given signer.\n    /// @param transaction The transaction.\n    /// @param transactionHash The hash of the transaction.\n    /// @param signature Proof that the hash has been signed by signer.\n    /// @return isValid True if the signature is valid for the given transaction and signer.\n    function _isValidTransactionWithHashSignature(\n        LibZeroExTransaction.ZeroExTransaction memory transaction,\n        bytes32 transactionHash,\n        bytes memory signature\n    )\n        internal\n        view\n        returns (bool isValid);\n}\n",
        "@0x/contracts-exchange-libs/contracts/src/LibZeroExTransaction.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/LibEIP712.sol\";\n\n\nlibrary LibZeroExTransaction {\n\n    using LibZeroExTransaction for ZeroExTransaction;\n\n    // Hash for the EIP712 0x transaction schema\n    // keccak256(abi.encodePacked(\n    //    \"ZeroExTransaction(\",\n    //    \"uint256 salt,\",\n    //    \"uint256 expirationTimeSeconds,\",\n    //    \"uint256 gasPrice,\",\n    //    \"address signerAddress,\",\n    //    \"bytes data\",\n    //    \")\"\n    // ));\n    bytes32 constant internal _EIP712_ZEROEX_TRANSACTION_SCHEMA_HASH = 0xec69816980a3a3ca4554410e60253953e9ff375ba4536a98adfa15cc71541508;\n\n    struct ZeroExTransaction {\n        uint256 salt;                   // Arbitrary number to ensure uniqueness of transaction hash.\n        uint256 expirationTimeSeconds;  // Timestamp in seconds at which transaction expires.\n        uint256 gasPrice;               // gasPrice that transaction is required to be executed with.\n        address signerAddress;          // Address of transaction signer.\n        bytes data;                     // AbiV2 encoded calldata.\n    }\n\n    /// @dev Calculates the EIP712 typed data hash of a transaction with a given domain separator.\n    /// @param transaction 0x transaction structure.\n    /// @return EIP712 typed data hash of the transaction.\n    function getTypedDataHash(ZeroExTransaction memory transaction, bytes32 eip712ExchangeDomainHash)\n        internal\n        pure\n        returns (bytes32 transactionHash)\n    {\n        // Hash the transaction with the domain separator of the Exchange contract.\n        transactionHash = LibEIP712.hashEIP712Message(\n            eip712ExchangeDomainHash,\n            transaction.getStructHash()\n        );\n        return transactionHash;\n    }\n\n    /// @dev Calculates EIP712 hash of the 0x transaction struct.\n    /// @param transaction 0x transaction structure.\n    /// @return EIP712 hash of the transaction struct.\n    function getStructHash(ZeroExTransaction memory transaction)\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        bytes32 schemaHash = _EIP712_ZEROEX_TRANSACTION_SCHEMA_HASH;\n        bytes memory data = transaction.data;\n        uint256 salt = transaction.salt;\n        uint256 expirationTimeSeconds = transaction.expirationTimeSeconds;\n        uint256 gasPrice = transaction.gasPrice;\n        address signerAddress = transaction.signerAddress;\n\n        // Assembly for more efficiently computing:\n        // result = keccak256(abi.encodePacked(\n        //     schemaHash,\n        //     salt,\n        //     expirationTimeSeconds,\n        //     gasPrice,\n        //     uint256(signerAddress),\n        //     keccak256(data)\n        // ));\n\n        assembly {\n            // Compute hash of data\n            let dataHash := keccak256(add(data, 32), mload(data))\n\n            // Load free memory pointer\n            let memPtr := mload(64)\n\n            mstore(memPtr, schemaHash)                                                                // hash of schema\n            mstore(add(memPtr, 32), salt)                                                             // salt\n            mstore(add(memPtr, 64), expirationTimeSeconds)                                            // expirationTimeSeconds\n            mstore(add(memPtr, 96), gasPrice)                                                         // gasPrice\n            mstore(add(memPtr, 128), and(signerAddress, 0xffffffffffffffffffffffffffffffffffffffff))  // signerAddress\n            mstore(add(memPtr, 160), dataHash)                                                        // hash of data\n\n            // Compute hash\n            result := keccak256(memPtr, 192)\n        }\n        return result;\n    }\n}\n",
        "@0x/contracts-exchange/contracts/src/interfaces/ITransactions.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-exchange-libs/contracts/src/LibZeroExTransaction.sol\";\n\n\ncontract ITransactions {\n\n    // TransactionExecution event is emitted when a ZeroExTransaction is executed.\n    event TransactionExecution(bytes32 indexed transactionHash);\n\n    /// @dev Executes an Exchange method call in the context of signer.\n    /// @param transaction 0x transaction containing salt, signerAddress, and data.\n    /// @param signature Proof that transaction has been signed by signer.\n    /// @return ABI encoded return data of the underlying Exchange function call.\n    function executeTransaction(\n        LibZeroExTransaction.ZeroExTransaction memory transaction,\n        bytes memory signature\n    )\n        public\n        payable\n        returns (bytes memory);\n\n    /// @dev Executes a batch of Exchange method calls in the context of signer(s).\n    /// @param transactions Array of 0x transactions containing salt, signerAddress, and data.\n    /// @param signatures Array of proofs that transactions have been signed by signer(s).\n    /// @return Array containing ABI encoded return data for each of the underlying Exchange function calls.\n    function batchExecuteTransactions(\n        LibZeroExTransaction.ZeroExTransaction[] memory transactions,\n        bytes[] memory signatures\n    )\n        public\n        payable\n        returns (bytes[] memory);\n\n    /// @dev The current function will be called in the context of this address (either 0x transaction signer or `msg.sender`).\n    ///      If calling a fill function, this address will represent the taker.\n    ///      If calling a cancel function, this address will represent the maker.\n    /// @return Signer of 0x transaction if entry point is `executeTransaction`.\n    ///         `msg.sender` if entry point is any other function.\n    function _getCurrentContextAddress()\n        internal\n        view\n        returns (address);\n}\n",
        "@0x/contracts-exchange/contracts/src/interfaces/IAssetProxyDispatcher.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\ncontract IAssetProxyDispatcher {\n\n    // Logs registration of new asset proxy\n    event AssetProxyRegistered(\n        bytes4 id,              // Id of new registered AssetProxy.\n        address assetProxy      // Address of new registered AssetProxy.\n    );\n\n    /// @dev Registers an asset proxy to its asset proxy id.\n    ///      Once an asset proxy is registered, it cannot be unregistered.\n    /// @param assetProxy Address of new asset proxy to register.\n    function registerAssetProxy(address assetProxy)\n        external;\n\n    /// @dev Gets an asset proxy.\n    /// @param assetProxyId Id of the asset proxy.\n    /// @return The asset proxy registered to assetProxyId. Returns 0x0 if no proxy is registered.\n    function getAssetProxy(bytes4 assetProxyId)\n        external\n        view\n        returns (address);\n}\n",
        "@0x/contracts-exchange/contracts/src/interfaces/IWrapperFunctions.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-exchange-libs/contracts/src/LibOrder.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/LibFillResults.sol\";\n\n\ncontract IWrapperFunctions {\n\n    /// @dev Fills the input order. Reverts if exact takerAssetFillAmount not filled.\n    /// @param order Order struct containing order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signature Proof that order has been created by maker.\n    function fillOrKillOrder(\n        LibOrder.Order memory order,\n        uint256 takerAssetFillAmount,\n        bytes memory signature\n    )\n        public\n        payable\n        returns (LibFillResults.FillResults memory fillResults);\n\n    /// @dev Executes multiple calls of fillOrder.\n    /// @param orders Array of order specifications.\n    /// @param takerAssetFillAmounts Array of desired amounts of takerAsset to sell in orders.\n    /// @param signatures Proofs that orders have been created by makers.\n    /// @return Array of amounts filled and fees paid by makers and taker.\n    function batchFillOrders(\n        LibOrder.Order[] memory orders,\n        uint256[] memory takerAssetFillAmounts,\n        bytes[] memory signatures\n    )\n        public\n        payable\n        returns (LibFillResults.FillResults[] memory fillResults);\n\n    /// @dev Executes multiple calls of fillOrKillOrder.\n    /// @param orders Array of order specifications.\n    /// @param takerAssetFillAmounts Array of desired amounts of takerAsset to sell in orders.\n    /// @param signatures Proofs that orders have been created by makers.\n    /// @return Array of amounts filled and fees paid by makers and taker.\n    function batchFillOrKillOrders(\n        LibOrder.Order[] memory orders,\n        uint256[] memory takerAssetFillAmounts,\n        bytes[] memory signatures\n    )\n        public\n        payable\n        returns (LibFillResults.FillResults[] memory fillResults);\n\n    /// @dev Executes multiple calls of fillOrder. If any fill reverts, the error is caught and ignored.\n    /// @param orders Array of order specifications.\n    /// @param takerAssetFillAmounts Array of desired amounts of takerAsset to sell in orders.\n    /// @param signatures Proofs that orders have been created by makers.\n    /// @return Array of amounts filled and fees paid by makers and taker.\n    function batchFillOrdersNoThrow(\n        LibOrder.Order[] memory orders,\n        uint256[] memory takerAssetFillAmounts,\n        bytes[] memory signatures\n    )\n        public\n        payable\n        returns (LibFillResults.FillResults[] memory fillResults);\n\n    /// @dev Executes multiple calls of fillOrder until total amount of takerAsset is sold by taker.\n    ///      If any fill reverts, the error is caught and ignored.\n    ///      NOTE: This function does not enforce that the takerAsset is the same for each order.\n    /// @param orders Array of order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signatures Proofs that orders have been signed by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    function marketSellOrdersNoThrow(\n        LibOrder.Order[] memory orders,\n        uint256 takerAssetFillAmount,\n        bytes[] memory signatures\n    )\n        public\n        payable\n        returns (LibFillResults.FillResults memory fillResults);\n\n    /// @dev Executes multiple calls of fillOrder until total amount of makerAsset is bought by taker.\n    ///      If any fill reverts, the error is caught and ignored.\n    ///      NOTE: This function does not enforce that the makerAsset is the same for each order.\n    /// @param orders Array of order specifications.\n    /// @param makerAssetFillAmount Desired amount of makerAsset to buy.\n    /// @param signatures Proofs that orders have been signed by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    function marketBuyOrdersNoThrow(\n        LibOrder.Order[] memory orders,\n        uint256 makerAssetFillAmount,\n        bytes[] memory signatures\n    )\n        public\n        payable\n        returns (LibFillResults.FillResults memory fillResults);\n\n    /// @dev Calls marketSellOrdersNoThrow then reverts if < takerAssetFillAmount has been sold.\n    ///      NOTE: This function does not enforce that the takerAsset is the same for each order.\n    /// @param orders Array of order specifications.\n    /// @param takerAssetFillAmount Minimum amount of takerAsset to sell.\n    /// @param signatures Proofs that orders have been signed by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    function marketSellOrdersFillOrKill(\n        LibOrder.Order[] memory orders,\n        uint256 takerAssetFillAmount,\n        bytes[] memory signatures\n    )\n        public\n        payable\n        returns (LibFillResults.FillResults memory fillResults);\n\n    /// @dev Calls marketBuyOrdersNoThrow then reverts if < makerAssetFillAmount has been bought.\n    ///      NOTE: This function does not enforce that the makerAsset is the same for each order.\n    /// @param orders Array of order specifications.\n    /// @param makerAssetFillAmount Minimum amount of makerAsset to buy.\n    /// @param signatures Proofs that orders have been signed by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    function marketBuyOrdersFillOrKill(\n        LibOrder.Order[] memory orders,\n        uint256 makerAssetFillAmount,\n        bytes[] memory signatures\n    )\n        public\n        payable\n        returns (LibFillResults.FillResults memory fillResults);\n\n    /// @dev Executes multiple calls of cancelOrder.\n    /// @param orders Array of order specifications.\n    function batchCancelOrders(LibOrder.Order[] memory orders)\n        public\n        payable;\n}\n",
        "@0x/contracts-exchange/contracts/src/interfaces/ITransferSimulator.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\n\ncontract ITransferSimulator {\n\n    /// @dev This function may be used to simulate any amount of transfers\n    /// As they would occur through the Exchange contract. Note that this function\n    /// will always revert, even if all transfers are successful. However, it may\n    /// be used with eth_call or with a try/catch pattern in order to simulate\n    /// the results of the transfers.\n    /// @param assetData Array of asset details, each encoded per the AssetProxy contract specification.\n    /// @param fromAddresses Array containing the `from` addresses that correspond with each transfer.\n    /// @param toAddresses Array containing the `to` addresses that correspond with each transfer.\n    /// @param amounts Array containing the amounts that correspond to each transfer.\n    /// @return This function does not return a value. However, it will always revert with\n    /// `Error(\"TRANSFERS_SUCCESSFUL\")` if all of the transfers were successful.\n    function simulateDispatchTransferFromCalls(\n        bytes[] memory assetData,\n        address[] memory fromAddresses,\n        address[] memory toAddresses,\n        uint256[] memory amounts\n    )\n        public;\n}\n",
        "./UniswapSampler.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-asset-proxy/contracts/src/interfaces/IUniswapExchangeFactory.sol\";\nimport \"@0x/contracts-erc20/contracts/src/LibERC20Token.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/LibOrder.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/LibMath.sol\";\nimport \"@0x/contracts-utils/contracts/src/DeploymentConstants.sol\";\nimport \"@0x/contracts-utils/contracts/src/LibBytes.sol\";\nimport \"./IUniswapExchangeQuotes.sol\";\nimport \"./SamplerUtils.sol\";\n\n\ncontract UniswapSampler is\n    DeploymentConstants,\n    SamplerUtils\n{\n    /// @dev Gas limit for Uniswap calls.\n    uint256 constant private UNISWAP_CALL_GAS = 150e3; // 150k\n\n    /// @dev Sample sell quotes from Uniswap.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromUniswap(\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        IUniswapExchangeQuotes takerTokenExchange = takerToken == _getWethAddress() ?\n            IUniswapExchangeQuotes(0) : _getUniswapExchange(takerToken);\n        IUniswapExchangeQuotes makerTokenExchange = makerToken == _getWethAddress() ?\n            IUniswapExchangeQuotes(0) : _getUniswapExchange(makerToken);\n        for (uint256 i = 0; i < numSamples; i++) {\n            bool didSucceed = true;\n            if (makerToken == _getWethAddress()) {\n                (makerTokenAmounts[i], didSucceed) = _callUniswapExchangePriceFunction(\n                    address(takerTokenExchange),\n                    takerTokenExchange.getTokenToEthInputPrice.selector,\n                    takerTokenAmounts[i]\n                );\n            } else if (takerToken == _getWethAddress()) {\n                (makerTokenAmounts[i], didSucceed) = _callUniswapExchangePriceFunction(\n                    address(makerTokenExchange),\n                    makerTokenExchange.getEthToTokenInputPrice.selector,\n                    takerTokenAmounts[i]\n                );\n            } else {\n                uint256 ethBought;\n                (ethBought, didSucceed) = _callUniswapExchangePriceFunction(\n                    address(takerTokenExchange),\n                    takerTokenExchange.getTokenToEthInputPrice.selector,\n                    takerTokenAmounts[i]\n                );\n                if (ethBought != 0) {\n                    (makerTokenAmounts[i], didSucceed) = _callUniswapExchangePriceFunction(\n                        address(makerTokenExchange),\n                        makerTokenExchange.getEthToTokenInputPrice.selector,\n                        ethBought\n                    );\n                } else {\n                    makerTokenAmounts[i] = 0;\n                }\n            }\n            if (!didSucceed) {\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from Uniswap.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token sell amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromUniswap(\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n        IUniswapExchangeQuotes takerTokenExchange = takerToken == _getWethAddress() ?\n            IUniswapExchangeQuotes(0) : _getUniswapExchange(takerToken);\n        IUniswapExchangeQuotes makerTokenExchange = makerToken == _getWethAddress() ?\n            IUniswapExchangeQuotes(0) : _getUniswapExchange(makerToken);\n        for (uint256 i = 0; i < numSamples; i++) {\n            bool didSucceed = true;\n            if (makerToken == _getWethAddress()) {\n                (takerTokenAmounts[i], didSucceed) = _callUniswapExchangePriceFunction(\n                    address(takerTokenExchange),\n                    takerTokenExchange.getTokenToEthOutputPrice.selector,\n                    makerTokenAmounts[i]\n                );\n            } else if (takerToken == _getWethAddress()) {\n                (takerTokenAmounts[i], didSucceed) = _callUniswapExchangePriceFunction(\n                    address(makerTokenExchange),\n                    makerTokenExchange.getEthToTokenOutputPrice.selector,\n                    makerTokenAmounts[i]\n                );\n            } else {\n                uint256 ethSold;\n                (ethSold, didSucceed) = _callUniswapExchangePriceFunction(\n                    address(makerTokenExchange),\n                    makerTokenExchange.getEthToTokenOutputPrice.selector,\n                    makerTokenAmounts[i]\n                );\n                if (ethSold != 0) {\n                    (takerTokenAmounts[i], didSucceed) = _callUniswapExchangePriceFunction(\n                        address(takerTokenExchange),\n                        takerTokenExchange.getTokenToEthOutputPrice.selector,\n                        ethSold\n                    );\n                } else {\n                    takerTokenAmounts[i] = 0;\n                }\n            }\n            if (!didSucceed) {\n                break;\n            }\n        }\n    }\n\n    /// @dev Gracefully calls a Uniswap pricing function.\n    /// @param uniswapExchangeAddress Address of an `IUniswapExchangeQuotes` exchange.\n    /// @param functionSelector Selector of the target function.\n    /// @param inputAmount Quantity parameter particular to the pricing function.\n    /// @return outputAmount The returned amount from the function call. Will be\n    ///         zero if the call fails or if `uniswapExchangeAddress` is zero.\n    function _callUniswapExchangePriceFunction(\n        address uniswapExchangeAddress,\n        bytes4 functionSelector,\n        uint256 inputAmount\n    )\n        private\n        view\n        returns (uint256 outputAmount, bool didSucceed)\n    {\n        if (uniswapExchangeAddress == address(0)) {\n            return (outputAmount, didSucceed);\n        }\n        bytes memory resultData;\n        (didSucceed, resultData) =\n            uniswapExchangeAddress.staticcall.gas(UNISWAP_CALL_GAS)(\n                abi.encodeWithSelector(\n                    functionSelector,\n                    inputAmount\n                ));\n        if (didSucceed) {\n            outputAmount = abi.decode(resultData, (uint256));\n        }\n    }\n\n    /// @dev Retrive an existing Uniswap exchange contract.\n    ///      Throws if the exchange does not exist.\n    /// @param tokenAddress Address of the token contract.\n    /// @return exchange `IUniswapExchangeQuotes` for the token.\n    function _getUniswapExchange(address tokenAddress)\n        private\n        view\n        returns (IUniswapExchangeQuotes exchange)\n    {\n        exchange = IUniswapExchangeQuotes(\n            address(IUniswapExchangeFactory(_getUniswapExchangeFactoryAddress())\n            .getExchange(tokenAddress))\n        );\n    }\n}\n",
        "@0x/contracts-asset-proxy/contracts/src/interfaces/IUniswapExchangeFactory.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\nimport \"./IUniswapExchange.sol\";\n\n\ninterface IUniswapExchangeFactory {\n\n    /// @dev Get the exchange for a token.\n    /// @param tokenAddress The address of the token contract.\n    function getExchange(address tokenAddress)\n        external\n        view\n        returns (address);\n}\n",
        "@0x/contracts-asset-proxy/contracts/src/interfaces/IUniswapExchange.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\ninterface IUniswapExchange {\n\n    /// @dev Buys at least `minTokensBought` tokens with ETH and transfer them\n    ///      to `recipient`.\n    /// @param minTokensBought The minimum number of tokens to buy.\n    /// @param deadline Time when this order expires.\n    /// @param recipient Who to transfer the tokens to.\n    /// @return tokensBought Amount of tokens bought.\n    function ethToTokenTransferInput(\n        uint256 minTokensBought,\n        uint256 deadline,\n        address recipient\n    )\n        external\n        payable\n        returns (uint256 tokensBought);\n\n    /// @dev Buys at least `minEthBought` ETH with tokens.\n    /// @param tokensSold Amount of tokens to sell.\n    /// @param minEthBought The minimum amount of ETH to buy.\n    /// @param deadline Time when this order expires.\n    /// @return ethBought Amount of tokens bought.\n    function tokenToEthSwapInput(\n        uint256 tokensSold,\n        uint256 minEthBought,\n        uint256 deadline\n    )\n        external\n        returns (uint256 ethBought);\n\n    /// @dev Buys at least `minTokensBought` tokens with the exchange token\n    ///      and transfer them to `recipient`.\n    /// @param minTokensBought The minimum number of tokens to buy.\n    /// @param minEthBought The minimum amount of intermediate ETH to buy.\n    /// @param deadline Time when this order expires.\n    /// @param recipient Who to transfer the tokens to.\n    /// @param toTokenAddress The token being bought.\n    /// @return tokensBought Amount of tokens bought.\n    function tokenToTokenTransferInput(\n        uint256 tokensSold,\n        uint256 minTokensBought,\n        uint256 minEthBought,\n        uint256 deadline,\n        address recipient,\n        address toTokenAddress\n    )\n        external\n        returns (uint256 tokensBought);\n}\n",
        "./IUniswapExchangeQuotes.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\ninterface IUniswapExchangeQuotes {\n\n    function getEthToTokenInputPrice(\n        uint256 ethSold\n    )\n        external\n        view\n        returns (uint256 tokensBought);\n\n    function getEthToTokenOutputPrice(\n        uint256 tokensBought\n    )\n        external\n        view\n        returns (uint256 ethSold);\n\n    function getTokenToEthInputPrice(\n        uint256 tokensSold\n    )\n        external\n        view\n        returns (uint256 ethBought);\n\n    function getTokenToEthOutputPrice(\n        uint256 ethBought\n    )\n        external\n        view\n        returns (uint256 tokensSold);\n}\n",
        "./UniswapV2Sampler.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/DeploymentConstants.sol\";\nimport \"./IUniswapV2Router01.sol\";\n\n\ncontract UniswapV2Sampler is\n    DeploymentConstants\n{\n    /// @dev Gas limit for UniswapV2 calls.\n    uint256 constant private UNISWAPV2_CALL_GAS = 150e3; // 150k\n\n    /// @dev Sample sell quotes from UniswapV2.\n    /// @param path Token route. Should be takerToken -> makerToken\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromUniswapV2(\n        address[] memory path,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            (bool didSucceed, bytes memory resultData) =\n                _getUniswapV2Router01Address().staticcall.gas(UNISWAPV2_CALL_GAS)(\n                    abi.encodeWithSelector(\n                        IUniswapV2Router01(0).getAmountsOut.selector,\n                        takerTokenAmounts[i],\n                        path\n                    ));\n            uint256 buyAmount = 0;\n            if (didSucceed) {\n                // solhint-disable-next-line indent\n                buyAmount = abi.decode(resultData, (uint256[]))[path.length - 1];\n            } else {\n                break;\n            }\n            makerTokenAmounts[i] = buyAmount;\n        }\n    }\n\n    /// @dev Sample buy quotes from UniswapV2.\n    /// @param path Token route. Should be takerToken -> makerToken.\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromUniswapV2(\n        address[] memory path,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            (bool didSucceed, bytes memory resultData) =\n                _getUniswapV2Router01Address().staticcall.gas(UNISWAPV2_CALL_GAS)(\n                    abi.encodeWithSelector(\n                        IUniswapV2Router01(0).getAmountsIn.selector,\n                        makerTokenAmounts[i],\n                        path\n                    ));\n            uint256 sellAmount = 0;\n            if (didSucceed) {\n                // solhint-disable-next-line indent\n                sellAmount = abi.decode(resultData, (uint256[]))[0];\n            } else {\n                break;\n            }\n            takerTokenAmounts[i] = sellAmount;\n        }\n    }\n}\n",
        "./IUniswapV2Router01.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\ninterface IUniswapV2Router01 {\n\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts);\n\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts);\n}\n"
    },
    "compiler": {
        "name": "solc",
        "version": "0.5.17+commit.d19bba13",
        "settings": {
            "remappings": [
                "@0x/contracts-exchange-libs=/Users/danielpyrathon/Desktop/Projects/0x-monorepo/packages/asset-swapper/node_modules/@0x/contracts-exchange-libs",
                "@0x/contracts-utils=/Users/danielpyrathon/Desktop/Projects/0x-monorepo/packages/asset-swapper/node_modules/@0x/contracts-utils",
                "@0x/contracts-erc20=/Users/danielpyrathon/Desktop/Projects/0x-monorepo/packages/asset-swapper/node_modules/@0x/contracts-erc20",
                "@0x/contracts-exchange=/Users/danielpyrathon/Desktop/Projects/0x-monorepo/packages/asset-swapper/node_modules/@0x/contracts-exchange",
                "@0x/contracts-asset-proxy=/Users/danielpyrathon/Desktop/Projects/0x-monorepo/packages/asset-swapper/node_modules/@0x/contracts-asset-proxy"
            ],
            "optimizer": {
                "enabled": true,
                "runs": 1000000,
                "details": {
                    "yul": true,
                    "deduplicate": true,
                    "cse": true,
                    "constantOptimizer": true
                }
            },
            "outputSelection": {
                "*": {
                    "*": [
                        "abi",
                        "devdoc",
                        "evm.bytecode.object",
                        "evm.bytecode.sourceMap",
                        "evm.deployedBytecode.object",
                        "evm.deployedBytecode.sourceMap"
                    ]
                }
            },
            "evmVersion": "istanbul"
        }
    },
    "chains": {}
}
