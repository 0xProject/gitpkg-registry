{
    "schemaVersion": "2.0.0",
    "contractName": "ERC20BridgeSampler",
    "compilerOutput": {
        "abi": [
            {
                "inputs": [
                    {
                        "internalType": "contract IEtherTokenV06",
                        "name": "weth",
                        "type": "address"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "constructor"
            },
            {
                "inputs": [],
                "name": "BANCOR_ETH_ADDRESS",
                "outputs": [
                    {
                        "internalType": "contract IERC20TokenV06",
                        "name": "",
                        "type": "address"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "bytes4",
                        "name": "selector",
                        "type": "bytes4"
                    },
                    {
                        "internalType": "address",
                        "name": "sellToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "buyToken",
                        "type": "address"
                    },
                    {
                        "internalType": "bytes",
                        "name": "bridgeData",
                        "type": "bytes"
                    },
                    {
                        "internalType": "uint256",
                        "name": "amountIn",
                        "type": "uint256"
                    }
                ],
                "name": "_callRevert",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "bytes4",
                        "name": "selector",
                        "type": "bytes4"
                    },
                    {
                        "internalType": "address",
                        "name": "sellToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "buyToken",
                        "type": "address"
                    },
                    {
                        "internalType": "bytes",
                        "name": "bridgeData",
                        "type": "bytes"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "amountsIn",
                        "type": "uint256[]"
                    }
                ],
                "name": "_mintCallRevert",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "bytes[]",
                        "name": "callDatas",
                        "type": "bytes[]"
                    }
                ],
                "name": "batchCall",
                "outputs": [
                    {
                        "components": [
                            {
                                "internalType": "bytes",
                                "name": "data",
                                "type": "bytes"
                            },
                            {
                                "internalType": "bool",
                                "name": "success",
                                "type": "bool"
                            }
                        ],
                        "internalType": "struct ERC20BridgeSampler.CallResults[]",
                        "name": "callResults",
                        "type": "tuple[]"
                    }
                ],
                "stateMutability": "payable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "uint256",
                                "name": "reserveOffset",
                                "type": "uint256"
                            },
                            {
                                "internalType": "address",
                                "name": "hintHandler",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "networkProxy",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "weth",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes",
                                "name": "hint",
                                "type": "bytes"
                            }
                        ],
                        "internalType": "struct KyberSampler.KyberSamplerOpts",
                        "name": "opts",
                        "type": "tuple"
                    },
                    {
                        "internalType": "bytes32",
                        "name": "reserveId",
                        "type": "bytes32"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    }
                ],
                "name": "encodeKyberHint",
                "outputs": [
                    {
                        "internalType": "bytes",
                        "name": "hint",
                        "type": "bytes"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "contract IERC20TokenV06[]",
                        "name": "tokens",
                        "type": "address[]"
                    },
                    {
                        "internalType": "address",
                        "name": "account",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "spender",
                        "type": "address"
                    }
                ],
                "name": "getAllowanceOf",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "allowances",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "contract IERC20TokenV06[]",
                        "name": "tokens",
                        "type": "address[]"
                    },
                    {
                        "internalType": "address",
                        "name": "account",
                        "type": "address"
                    }
                ],
                "name": "getBalanceOf",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "balances",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "addr",
                        "type": "address"
                    }
                ],
                "name": "getCode",
                "outputs": [
                    {
                        "internalType": "bytes",
                        "name": "code",
                        "type": "bytes"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "contract IERC20TokenV06",
                                "name": "makerToken",
                                "type": "address"
                            },
                            {
                                "internalType": "contract IERC20TokenV06",
                                "name": "takerToken",
                                "type": "address"
                            },
                            {
                                "internalType": "uint128",
                                "name": "makerAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "uint128",
                                "name": "takerAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "uint128",
                                "name": "takerTokenFeeAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "address",
                                "name": "maker",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "taker",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "sender",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "feeRecipient",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "pool",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "uint64",
                                "name": "expiry",
                                "type": "uint64"
                            },
                            {
                                "internalType": "uint256",
                                "name": "salt",
                                "type": "uint256"
                            }
                        ],
                        "internalType": "struct IExchange.LimitOrder[]",
                        "name": "orders",
                        "type": "tuple[]"
                    },
                    {
                        "components": [
                            {
                                "internalType": "enum IExchange.SignatureType",
                                "name": "signatureType",
                                "type": "uint8"
                            },
                            {
                                "internalType": "uint8",
                                "name": "v",
                                "type": "uint8"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "r",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "s",
                                "type": "bytes32"
                            }
                        ],
                        "internalType": "struct IExchange.Signature[]",
                        "name": "orderSignatures",
                        "type": "tuple[]"
                    },
                    {
                        "internalType": "contract IExchange",
                        "name": "exchange",
                        "type": "address"
                    }
                ],
                "name": "getLimitOrderFillableMakerAssetAmounts",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "orderFillableMakerAssetAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "contract IERC20TokenV06",
                                "name": "makerToken",
                                "type": "address"
                            },
                            {
                                "internalType": "contract IERC20TokenV06",
                                "name": "takerToken",
                                "type": "address"
                            },
                            {
                                "internalType": "uint128",
                                "name": "makerAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "uint128",
                                "name": "takerAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "uint128",
                                "name": "takerTokenFeeAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "address",
                                "name": "maker",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "taker",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "sender",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "feeRecipient",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "pool",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "uint64",
                                "name": "expiry",
                                "type": "uint64"
                            },
                            {
                                "internalType": "uint256",
                                "name": "salt",
                                "type": "uint256"
                            }
                        ],
                        "internalType": "struct IExchange.LimitOrder",
                        "name": "order",
                        "type": "tuple"
                    },
                    {
                        "components": [
                            {
                                "internalType": "enum IExchange.SignatureType",
                                "name": "signatureType",
                                "type": "uint8"
                            },
                            {
                                "internalType": "uint8",
                                "name": "v",
                                "type": "uint8"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "r",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "s",
                                "type": "bytes32"
                            }
                        ],
                        "internalType": "struct IExchange.Signature",
                        "name": "signature",
                        "type": "tuple"
                    },
                    {
                        "internalType": "contract IExchange",
                        "name": "exchange",
                        "type": "address"
                    }
                ],
                "name": "getLimitOrderFillableTakerAmount",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "fillableTakerAmount",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "contract IERC20TokenV06",
                                "name": "makerToken",
                                "type": "address"
                            },
                            {
                                "internalType": "contract IERC20TokenV06",
                                "name": "takerToken",
                                "type": "address"
                            },
                            {
                                "internalType": "uint128",
                                "name": "makerAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "uint128",
                                "name": "takerAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "uint128",
                                "name": "takerTokenFeeAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "address",
                                "name": "maker",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "taker",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "sender",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "feeRecipient",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "pool",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "uint64",
                                "name": "expiry",
                                "type": "uint64"
                            },
                            {
                                "internalType": "uint256",
                                "name": "salt",
                                "type": "uint256"
                            }
                        ],
                        "internalType": "struct IExchange.LimitOrder[]",
                        "name": "orders",
                        "type": "tuple[]"
                    },
                    {
                        "components": [
                            {
                                "internalType": "enum IExchange.SignatureType",
                                "name": "signatureType",
                                "type": "uint8"
                            },
                            {
                                "internalType": "uint8",
                                "name": "v",
                                "type": "uint8"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "r",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "s",
                                "type": "bytes32"
                            }
                        ],
                        "internalType": "struct IExchange.Signature[]",
                        "name": "orderSignatures",
                        "type": "tuple[]"
                    },
                    {
                        "internalType": "contract IExchange",
                        "name": "exchange",
                        "type": "address"
                    }
                ],
                "name": "getLimitOrderFillableTakerAssetAmounts",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "orderFillableTakerAssetAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "contract IERC20TokenV06[]",
                        "name": "tokens",
                        "type": "address[]"
                    }
                ],
                "name": "getTokenDecimals",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "decimals",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "account",
                        "type": "address"
                    }
                ],
                "name": "isContract",
                "outputs": [
                    {
                        "internalType": "bool",
                        "name": "",
                        "type": "bool"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "poolAddress",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromBalancer",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "gasUsed",
                        "type": "uint256[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "contract IBalancerV2Vault",
                                "name": "vault",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "poolId",
                                "type": "bytes32"
                            }
                        ],
                        "internalType": "struct MixinBalancerV2.BalancerV2BridgeData",
                        "name": "poolInfo",
                        "type": "tuple"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromBalancerV2",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "gasUsed",
                        "type": "uint256[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "contract IBancorRegistry",
                                "name": "registry",
                                "type": "address"
                            },
                            {
                                "internalType": "address[][]",
                                "name": "paths",
                                "type": "address[][]"
                            }
                        ],
                        "internalType": "struct BancorSampler.BancorSamplerOpts",
                        "name": "opts",
                        "type": "tuple"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromBancor",
                "outputs": [
                    {
                        "internalType": "address",
                        "name": "bancorNetwork",
                        "type": "address"
                    },
                    {
                        "internalType": "address[]",
                        "name": "path",
                        "type": "address[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "gasUsed",
                        "type": "uint256[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "curveAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes4",
                                "name": "exchangeFunctionSelector",
                                "type": "bytes4"
                            },
                            {
                                "internalType": "int128",
                                "name": "fromCoinIdx",
                                "type": "int128"
                            },
                            {
                                "internalType": "int128",
                                "name": "toCoinIdx",
                                "type": "int128"
                            }
                        ],
                        "internalType": "struct MixinCurve.CurveBridgeData",
                        "name": "curveInfo",
                        "type": "tuple"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromCurve",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "gasUsed",
                        "type": "uint256[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "registry",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "helper",
                                "type": "address"
                            }
                        ],
                        "internalType": "struct DODOSampler.DODOSamplerOpts",
                        "name": "opts",
                        "type": "tuple"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromDODO",
                "outputs": [
                    {
                        "internalType": "bool",
                        "name": "sellBase",
                        "type": "bool"
                    },
                    {
                        "internalType": "address",
                        "name": "pool",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "gasUsed",
                        "type": "uint256[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "registry",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256",
                        "name": "offset",
                        "type": "uint256"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromDODOV2",
                "outputs": [
                    {
                        "internalType": "bool",
                        "name": "sellBase",
                        "type": "bool"
                    },
                    {
                        "internalType": "address",
                        "name": "pool",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "gasUsed",
                        "type": "uint256[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "router",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromEth2Dai",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "gasUsed",
                        "type": "uint256[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "router",
                        "type": "address"
                    },
                    {
                        "internalType": "address[]",
                        "name": "path",
                        "type": "address[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromKyberDmm",
                "outputs": [
                    {
                        "internalType": "address[]",
                        "name": "pools",
                        "type": "address[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "gasUsed",
                        "type": "uint256[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "uint256",
                                "name": "reserveOffset",
                                "type": "uint256"
                            },
                            {
                                "internalType": "address",
                                "name": "hintHandler",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "networkProxy",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "weth",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes",
                                "name": "hint",
                                "type": "bytes"
                            }
                        ],
                        "internalType": "struct KyberSampler.KyberSamplerOpts",
                        "name": "opts",
                        "type": "tuple"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromKyberNetwork",
                "outputs": [
                    {
                        "internalType": "bytes32",
                        "name": "reserveId",
                        "type": "bytes32"
                    },
                    {
                        "internalType": "bytes",
                        "name": "hint",
                        "type": "bytes"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "gasUsed",
                        "type": "uint256[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "providerAddress",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromLiquidityProvider",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "gasUsed",
                        "type": "uint256[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "router",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromMStable",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "gasUsed",
                        "type": "uint256[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "psmAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "ilkIdentifier",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "address",
                                "name": "gemTokenAddress",
                                "type": "address"
                            }
                        ],
                        "internalType": "struct MakerPSMSampler.MakerPsmInfo",
                        "name": "psmInfo",
                        "type": "tuple"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromMakerPsm",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "gasUsed",
                        "type": "uint256[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "registry",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromMooniswap",
                "outputs": [
                    {
                        "internalType": "address",
                        "name": "pool",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "gasUsed",
                        "type": "uint256[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "pool",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromShell",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "gasUsed",
                        "type": "uint256[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "router",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromUniswap",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "gasUsed",
                        "type": "uint256[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "router",
                        "type": "address"
                    },
                    {
                        "internalType": "address[]",
                        "name": "path",
                        "type": "address[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromUniswapV2",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "gasUsed",
                        "type": "uint256[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "contract IUniswapV3Quoter",
                        "name": "quoter",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "router",
                        "type": "address"
                    },
                    {
                        "internalType": "contract IERC20TokenV06[]",
                        "name": "path",
                        "type": "address[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromUniswapV3",
                "outputs": [
                    {
                        "internalType": "bytes[]",
                        "name": "uniswapPaths",
                        "type": "bytes[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "gasUsed",
                        "type": "uint256[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "poolAddress",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromBalancer",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "gasUsed",
                        "type": "uint256[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "contract IBalancerV2Vault",
                                "name": "vault",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "poolId",
                                "type": "bytes32"
                            }
                        ],
                        "internalType": "struct MixinBalancerV2.BalancerV2BridgeData",
                        "name": "poolInfo",
                        "type": "tuple"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromBalancerV2",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "gasUsed",
                        "type": "uint256[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "contract IBancorRegistry",
                                "name": "registry",
                                "type": "address"
                            },
                            {
                                "internalType": "address[][]",
                                "name": "paths",
                                "type": "address[][]"
                            }
                        ],
                        "internalType": "struct BancorSampler.BancorSamplerOpts",
                        "name": "opts",
                        "type": "tuple"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromBancor",
                "outputs": [
                    {
                        "internalType": "address",
                        "name": "bancorNetwork",
                        "type": "address"
                    },
                    {
                        "internalType": "address[]",
                        "name": "path",
                        "type": "address[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "gasUsed",
                        "type": "uint256[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "curveAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes4",
                                "name": "exchangeFunctionSelector",
                                "type": "bytes4"
                            },
                            {
                                "internalType": "int128",
                                "name": "fromCoinIdx",
                                "type": "int128"
                            },
                            {
                                "internalType": "int128",
                                "name": "toCoinIdx",
                                "type": "int128"
                            }
                        ],
                        "internalType": "struct MixinCurve.CurveBridgeData",
                        "name": "curveInfo",
                        "type": "tuple"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromCurve",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "gasUsed",
                        "type": "uint256[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "registry",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "helper",
                                "type": "address"
                            }
                        ],
                        "internalType": "struct DODOSampler.DODOSamplerOpts",
                        "name": "opts",
                        "type": "tuple"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromDODO",
                "outputs": [
                    {
                        "internalType": "bool",
                        "name": "sellBase",
                        "type": "bool"
                    },
                    {
                        "internalType": "address",
                        "name": "pool",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "gasUsed",
                        "type": "uint256[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "registry",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256",
                        "name": "offset",
                        "type": "uint256"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromDODOV2",
                "outputs": [
                    {
                        "internalType": "bool",
                        "name": "sellBase",
                        "type": "bool"
                    },
                    {
                        "internalType": "address",
                        "name": "pool",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "gasUsed",
                        "type": "uint256[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "router",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromEth2Dai",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "gasUsed",
                        "type": "uint256[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "router",
                        "type": "address"
                    },
                    {
                        "internalType": "address[]",
                        "name": "path",
                        "type": "address[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromKyberDmm",
                "outputs": [
                    {
                        "internalType": "address[]",
                        "name": "pools",
                        "type": "address[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "gasUsed",
                        "type": "uint256[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "uint256",
                                "name": "reserveOffset",
                                "type": "uint256"
                            },
                            {
                                "internalType": "address",
                                "name": "hintHandler",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "networkProxy",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "weth",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes",
                                "name": "hint",
                                "type": "bytes"
                            }
                        ],
                        "internalType": "struct KyberSampler.KyberSamplerOpts",
                        "name": "opts",
                        "type": "tuple"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromKyberNetwork",
                "outputs": [
                    {
                        "internalType": "bytes32",
                        "name": "reserveId",
                        "type": "bytes32"
                    },
                    {
                        "internalType": "bytes",
                        "name": "hint",
                        "type": "bytes"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "gasUsed",
                        "type": "uint256[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "providerAddress",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromLiquidityProvider",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "gasUsed",
                        "type": "uint256[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "router",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromMStable",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "gasUsed",
                        "type": "uint256[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "psmAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "ilkIdentifier",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "address",
                                "name": "gemTokenAddress",
                                "type": "address"
                            }
                        ],
                        "internalType": "struct MakerPSMSampler.MakerPsmInfo",
                        "name": "psmInfo",
                        "type": "tuple"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromMakerPsm",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "gasUsed",
                        "type": "uint256[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "registry",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromMooniswap",
                "outputs": [
                    {
                        "internalType": "address",
                        "name": "pool",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "gasUsed",
                        "type": "uint256[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "pool",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromShell",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "gasUsed",
                        "type": "uint256[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "router",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromUniswap",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "gasUsed",
                        "type": "uint256[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "router",
                        "type": "address"
                    },
                    {
                        "internalType": "address[]",
                        "name": "path",
                        "type": "address[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromUniswapV2",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "gasUsed",
                        "type": "uint256[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "contract IUniswapV3Quoter",
                        "name": "quoter",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "router",
                        "type": "address"
                    },
                    {
                        "internalType": "contract IERC20TokenV06[]",
                        "name": "path",
                        "type": "address[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromUniswapV3",
                "outputs": [
                    {
                        "internalType": "bytes[]",
                        "name": "uniswapPaths",
                        "type": "bytes[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "gasUsed",
                        "type": "uint256[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "sellToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "buyToken",
                        "type": "address"
                    },
                    {
                        "internalType": "bytes",
                        "name": "bridgeData",
                        "type": "bytes"
                    },
                    {
                        "internalType": "uint256",
                        "name": "takerTokenAmount",
                        "type": "uint256"
                    }
                ],
                "name": "sampleSwapFromBalancer",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "sellToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "buyToken",
                        "type": "address"
                    },
                    {
                        "internalType": "bytes",
                        "name": "bridgeData",
                        "type": "bytes"
                    },
                    {
                        "internalType": "uint256",
                        "name": "takerTokenAmount",
                        "type": "uint256"
                    }
                ],
                "name": "sampleSwapFromBalancerV2",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "sellToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "buyToken",
                        "type": "address"
                    },
                    {
                        "internalType": "bytes",
                        "name": "bridgeData",
                        "type": "bytes"
                    },
                    {
                        "internalType": "uint256",
                        "name": "takerTokenAmount",
                        "type": "uint256"
                    }
                ],
                "name": "sampleSwapFromBancor",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "sellToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "buyToken",
                        "type": "address"
                    },
                    {
                        "internalType": "bytes",
                        "name": "bridgeData",
                        "type": "bytes"
                    },
                    {
                        "internalType": "uint256",
                        "name": "takerTokenAmount",
                        "type": "uint256"
                    }
                ],
                "name": "sampleSwapFromCurve",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "sellToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "buyToken",
                        "type": "address"
                    },
                    {
                        "internalType": "bytes",
                        "name": "bridgeData",
                        "type": "bytes"
                    },
                    {
                        "internalType": "uint256",
                        "name": "takerTokenAmount",
                        "type": "uint256"
                    }
                ],
                "name": "sampleSwapFromDodo",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "sellToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "buyToken",
                        "type": "address"
                    },
                    {
                        "internalType": "bytes",
                        "name": "bridgeData",
                        "type": "bytes"
                    },
                    {
                        "internalType": "uint256",
                        "name": "takerTokenAmount",
                        "type": "uint256"
                    }
                ],
                "name": "sampleSwapFromDodoV2",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "sellToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "buyToken",
                        "type": "address"
                    },
                    {
                        "internalType": "bytes",
                        "name": "bridgeData",
                        "type": "bytes"
                    },
                    {
                        "internalType": "uint256",
                        "name": "takerTokenAmount",
                        "type": "uint256"
                    }
                ],
                "name": "sampleSwapFromKyber",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "sellToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "buyToken",
                        "type": "address"
                    },
                    {
                        "internalType": "bytes",
                        "name": "bridgeData",
                        "type": "bytes"
                    },
                    {
                        "internalType": "uint256",
                        "name": "takerTokenAmount",
                        "type": "uint256"
                    }
                ],
                "name": "sampleSwapFromKyberDmm",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "sellToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "buyToken",
                        "type": "address"
                    },
                    {
                        "internalType": "bytes",
                        "name": "bridgeData",
                        "type": "bytes"
                    },
                    {
                        "internalType": "uint256",
                        "name": "takerTokenAmount",
                        "type": "uint256"
                    }
                ],
                "name": "sampleSwapFromLiquidityProvider",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "sellToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "buyToken",
                        "type": "address"
                    },
                    {
                        "internalType": "bytes",
                        "name": "bridgeData",
                        "type": "bytes"
                    },
                    {
                        "internalType": "uint256",
                        "name": "takerTokenAmount",
                        "type": "uint256"
                    }
                ],
                "name": "sampleSwapFromMStable",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "sellToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "buyToken",
                        "type": "address"
                    },
                    {
                        "internalType": "bytes",
                        "name": "bridgeData",
                        "type": "bytes"
                    },
                    {
                        "internalType": "uint256",
                        "name": "takerTokenAmount",
                        "type": "uint256"
                    }
                ],
                "name": "sampleSwapFromMakerPsm",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "sellToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "buyToken",
                        "type": "address"
                    },
                    {
                        "internalType": "bytes",
                        "name": "bridgeData",
                        "type": "bytes"
                    },
                    {
                        "internalType": "uint256",
                        "name": "takerTokenAmount",
                        "type": "uint256"
                    }
                ],
                "name": "sampleSwapFromMooniswap",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "sellToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "buyToken",
                        "type": "address"
                    },
                    {
                        "internalType": "bytes",
                        "name": "bridgeData",
                        "type": "bytes"
                    },
                    {
                        "internalType": "uint256",
                        "name": "takerTokenAmount",
                        "type": "uint256"
                    }
                ],
                "name": "sampleSwapFromOasis",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "sellToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "buyToken",
                        "type": "address"
                    },
                    {
                        "internalType": "bytes",
                        "name": "bridgeData",
                        "type": "bytes"
                    },
                    {
                        "internalType": "uint256",
                        "name": "takerTokenAmount",
                        "type": "uint256"
                    }
                ],
                "name": "sampleSwapFromShell",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "sellToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "buyToken",
                        "type": "address"
                    },
                    {
                        "internalType": "bytes",
                        "name": "bridgeData",
                        "type": "bytes"
                    },
                    {
                        "internalType": "uint256",
                        "name": "takerTokenAmount",
                        "type": "uint256"
                    }
                ],
                "name": "sampleSwapFromUniswap",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "sellToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "buyToken",
                        "type": "address"
                    },
                    {
                        "internalType": "bytes",
                        "name": "bridgeData",
                        "type": "bytes"
                    },
                    {
                        "internalType": "uint256",
                        "name": "takerTokenAmount",
                        "type": "uint256"
                    }
                ],
                "name": "sampleSwapFromUniswapV2",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "sellToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "buyToken",
                        "type": "address"
                    },
                    {
                        "internalType": "bytes",
                        "name": "bridgeData",
                        "type": "bytes"
                    },
                    {
                        "internalType": "uint256",
                        "name": "takerTokenAmount",
                        "type": "uint256"
                    }
                ],
                "name": "sampleSwapFromUniswapV3",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "bytes[]",
                        "name": "firstHopCalls",
                        "type": "bytes[]"
                    },
                    {
                        "internalType": "bytes[]",
                        "name": "secondHopCalls",
                        "type": "bytes[]"
                    },
                    {
                        "internalType": "uint256",
                        "name": "buyAmount",
                        "type": "uint256"
                    }
                ],
                "name": "sampleTwoHopBuy",
                "outputs": [
                    {
                        "components": [
                            {
                                "internalType": "uint256",
                                "name": "sourceIndex",
                                "type": "uint256"
                            },
                            {
                                "internalType": "bytes",
                                "name": "returnData",
                                "type": "bytes"
                            }
                        ],
                        "internalType": "struct TwoHopSampler.HopInfo",
                        "name": "firstHop",
                        "type": "tuple"
                    },
                    {
                        "components": [
                            {
                                "internalType": "uint256",
                                "name": "sourceIndex",
                                "type": "uint256"
                            },
                            {
                                "internalType": "bytes",
                                "name": "returnData",
                                "type": "bytes"
                            }
                        ],
                        "internalType": "struct TwoHopSampler.HopInfo",
                        "name": "secondHop",
                        "type": "tuple"
                    },
                    {
                        "internalType": "uint256",
                        "name": "sellAmount",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "bytes[]",
                        "name": "firstHopCalls",
                        "type": "bytes[]"
                    },
                    {
                        "internalType": "bytes[]",
                        "name": "secondHopCalls",
                        "type": "bytes[]"
                    },
                    {
                        "internalType": "uint256",
                        "name": "sellAmount",
                        "type": "uint256"
                    }
                ],
                "name": "sampleTwoHopSell",
                "outputs": [
                    {
                        "components": [
                            {
                                "internalType": "uint256",
                                "name": "sourceIndex",
                                "type": "uint256"
                            },
                            {
                                "internalType": "bytes",
                                "name": "returnData",
                                "type": "bytes"
                            }
                        ],
                        "internalType": "struct TwoHopSampler.HopInfo",
                        "name": "firstHop",
                        "type": "tuple"
                    },
                    {
                        "components": [
                            {
                                "internalType": "uint256",
                                "name": "sourceIndex",
                                "type": "uint256"
                            },
                            {
                                "internalType": "bytes",
                                "name": "returnData",
                                "type": "bytes"
                            }
                        ],
                        "internalType": "struct TwoHopSampler.HopInfo",
                        "name": "secondHop",
                        "type": "tuple"
                    },
                    {
                        "internalType": "uint256",
                        "name": "intermediateAssetAmount",
                        "type": "uint256"
                    },
                    {
                        "internalType": "uint256",
                        "name": "buyAmount",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            }
        ],
        "devdoc": {
            "kind": "dev",
            "methods": {
                "_mintCallRevert(bytes4,address,address,bytes,uint256[])": {
                    "details": "Mints the sell token, then performs the swap, then reverts with the amount out. The SwapRevertSamplerQuoteOpts has been unrolled here as our ABI encoder cannot support encoding the function"
                },
                "batchCall(bytes[])": {
                    "details": "Call multiple public functions on this contract in a single transaction.",
                    "params": {
                        "callDatas": "ABI-encoded call data for each function call."
                    },
                    "returns": {
                        "callResults": "ABI-encoded results data for each call."
                    }
                },
                "getLimitOrderFillableMakerAssetAmounts((address,address,uint128,uint128,uint128,address,address,address,address,bytes32,uint64,uint256)[],(uint8,uint8,bytes32,bytes32)[],address)": {
                    "details": "Queries the fillable taker asset amounts of native orders.      Effectively ignores orders that have empty signatures or",
                    "params": {
                        "exchange": "The V4 exchange.",
                        "orderSignatures": "Signatures for each respective order in `orders`.",
                        "orders": "Native orders to query."
                    },
                    "returns": {
                        "orderFillableMakerAssetAmounts": "How much maker asset can be filled         by each order in `orders`."
                    }
                },
                "getLimitOrderFillableTakerAmount((address,address,uint128,uint128,uint128,address,address,address,address,bytes32,uint64,uint256),(uint8,uint8,bytes32,bytes32),address)": {
                    "details": "Get the fillable taker amount of an order, taking into account      order state, maker fees, and maker balances."
                },
                "getLimitOrderFillableTakerAssetAmounts((address,address,uint128,uint128,uint128,address,address,address,address,bytes32,uint64,uint256)[],(uint8,uint8,bytes32,bytes32)[],address)": {
                    "details": "Queries the fillable taker asset amounts of native orders.      Effectively ignores orders that have empty signatures or      maker/taker asset amounts (returning 0).",
                    "params": {
                        "exchange": "The V4 exchange.",
                        "orderSignatures": "Signatures for each respective order in `orders`.",
                        "orders": "Native limit orders to query."
                    },
                    "returns": {
                        "orderFillableTakerAssetAmounts": "How much taker asset can be filled         by each order in `orders`."
                    }
                },
                "sampleBuysFromBalancer(address,address,address,uint256[])": {
                    "details": "Sample buy quotes from Balancer.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "makerTokenAmounts": "Maker token buy amount for each sample.",
                        "poolAddress": "Address of the Balancer pool to query.",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "gasUsed": "gas consumed in each sample sell",
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromBalancerV2((address,bytes32),address,address,uint256[])": {
                    "details": "Sample buy quotes from Balancer V2.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "makerTokenAmounts": "Maker token buy amount for each sample.",
                        "poolInfo": "Struct with pool related data",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "gasUsed": "gas consumed in each sample sell",
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromBancor((address,address[][]),address,address,uint256[])": {
                    "details": "Sample buy quotes from Bancor. Unimplemented",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "makerTokenAmounts": "Maker token buy amount for each sample.",
                        "opts": "BancorSamplerOpts The Bancor registry contract address and paths",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "bancorNetwork": "the Bancor Network address",
                        "gasUsed": "gas consumed in each sample sell",
                        "path": "the selected conversion path from bancor",
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromCurve((address,bytes4,int128,int128),address,address,uint256[])": {
                    "details": "Sample buy quotes from Curve.",
                    "params": {
                        "curveInfo": "Curve information specific to this token pair.",
                        "makerToken": "The maker token to buy.",
                        "makerTokenAmounts": "Maker token buy amount for each sample.",
                        "takerToken": "The taker token to sell."
                    },
                    "returns": {
                        "gasUsed": "gas consumed in each sample sell",
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromDODO((address,address),address,address,uint256[])": {
                    "details": "Sample buy quotes from DODO.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "makerTokenAmounts": "Maker token sell amount for each sample.",
                        "opts": "DODOSamplerOpts DODO Registry and helper addresses",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "gasUsed": "gas consumed in each sample sell",
                        "pool": "the DODO pool address",
                        "sellBase": "whether the bridge needs to sell the base token",
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromDODOV2(address,uint256,address,address,uint256[])": {
                    "details": "Sample buy quotes from DODO.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "makerTokenAmounts": "Maker token sell amount for each sample.",
                        "offset": "offset index for the pool in the registry.",
                        "registry": "Address of the registry to look up.",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "gasUsed": "gas consumed in each sample sell",
                        "pool": "the DODO pool address",
                        "sellBase": "whether the bridge needs to sell the base token",
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromEth2Dai(address,address,address,uint256[])": {
                    "details": "Sample buy quotes from Eth2Dai/Oasis.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "router": "Address of the Eth2Dai/Oasis contract",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Maker token sell amount for each sample."
                    },
                    "returns": {
                        "gasUsed": "gas consumed in each sample sell",
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromKyberDmm(address,address[],uint256[])": {
                    "details": "Sample buy quotes from KyberDmm.",
                    "params": {
                        "makerTokenAmounts": "Maker token buy amount for each sample.",
                        "path": "Token route. Should be takerToken -> makerToken.",
                        "router": "Router to look up tokens and amounts"
                    },
                    "returns": {
                        "gasUsed": "gas consumed in each sample sell",
                        "pools": "The pool addresses involved in the multi path trade",
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromKyberNetwork((uint256,address,address,address,bytes),address,address,uint256[])": {
                    "details": "Sample buy quotes from Kyber.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "makerTokenAmounts": "Maker token buy amount for each sample.",
                        "opts": "KyberSamplerOpts The nth reserve",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "gasUsed": "Gas consumed for each sample.",
                        "hint": "The hint for the selected reserve",
                        "reserveId": "The id of the reserve found at reserveOffset",
                        "takerTokenAmounts": "Taker amounts sold at each maker token amount."
                    }
                },
                "sampleBuysFromLiquidityProvider(address,address,address,uint256[])": {
                    "details": "Sample buy quotes from an arbitrary on-chain liquidity provider.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "makerTokenAmounts": "Maker token buy amount for each sample.",
                        "providerAddress": "Address of the liquidity provider.",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "gasUsed": "gas consumed in each sample sell",
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromMStable(address,address,address,uint256[])": {
                    "details": "Sample buy quotes from MStable contract",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "makerTokenAmounts": "Maker token buy amount for each sample.",
                        "router": "Address of the mStable contract",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "gasUsed": "gas consumed in each sample sell",
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromMooniswap(address,address,address,uint256[])": {
                    "details": "Sample buy quotes from Mooniswap.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "makerTokenAmounts": "Maker token sell amount for each sample.",
                        "registry": "Address of the Mooniswap Registry.",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "gasUsed": "gas consumed in each sample sell",
                        "pool": "The contract address for the pool",
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromShell(address,address,address,uint256[])": {
                    "details": "Sample buy quotes from Shell pool contract",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "makerTokenAmounts": "Maker token buy amount for each sample.",
                        "pool": "Address of the Shell pool contract",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "gasUsed": "gas consumed in each sample sell",
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromUniswap(address,address,address,uint256[])": {
                    "details": "Sample buy quotes from Uniswap.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "makerTokenAmounts": "Maker token sell amount for each sample.",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "gasUsed": "gas consumed in each sample sell",
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromUniswapV2(address,address[],uint256[])": {
                    "details": "Sample buy quotes from UniswapV2.",
                    "params": {
                        "makerTokenAmounts": "Maker token buy amount for each sample.",
                        "path": "Token route. Should be takerToken -> makerToken.",
                        "router": "Router to look up tokens and amounts"
                    },
                    "returns": {
                        "gasUsed": "gas consumed for each sample amount",
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromUniswapV3(address,address,address[],uint256[])": {
                    "details": "Sample buy quotes from UniswapV3.",
                    "params": {
                        "makerTokenAmounts": "Maker token buy amount for each sample.",
                        "path": "Token route. Should be takerToken -> makerToken.",
                        "quoter": "UniswapV3 Quoter contract.",
                        "router": "UniswapV3 Router contract."
                    },
                    "returns": {
                        "gasUsed": "gas consumed in each sample sell",
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount.",
                        "uniswapPaths": "The encoded uniswap path for each sample."
                    }
                },
                "sampleSellsFromBalancer(address,address,address,uint256[])": {
                    "details": "Sample sell quotes from Balancer.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "poolAddress": "Address of the Balancer pool to query.",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "gasUsed": "gas consumed in each sample sell",
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount."
                    }
                },
                "sampleSellsFromBalancerV2((address,bytes32),address,address,uint256[])": {
                    "details": "Sample sell quotes from Balancer V2.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "poolInfo": "Struct with pool related data",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "gasUsed": "gas consumed in each sample sell",
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount."
                    }
                },
                "sampleSellsFromBancor((address,address[][]),address,address,uint256[])": {
                    "details": "Sample sell quotes from Bancor.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "opts": "BancorSamplerOpts The Bancor registry contract address and paths",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "bancorNetwork": "the Bancor Network address",
                        "gasUsed": "gas consumed in each sample sell",
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount.",
                        "path": "the selected conversion path from bancor"
                    }
                },
                "sampleSellsFromCurve((address,bytes4,int128,int128),address,address,uint256[])": {
                    "details": "Sample sell quotes from Curve.",
                    "params": {
                        "curveInfo": "Curve information specific to this token pair.",
                        "makerToken": "The maker token to buy.",
                        "takerToken": "The taker token to sell.",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "gasUsed": "gas consumed in each sample sell",
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount."
                    }
                },
                "sampleSellsFromDODO((address,address),address,address,uint256[])": {
                    "details": "Sample sell quotes from DODO.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "opts": "DODOSamplerOpts DODO Registry and helper addresses",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "gasUsed": "gas consumed in each sample sell",
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount.",
                        "pool": "the DODO pool address",
                        "sellBase": "whether the bridge needs to sell the base token"
                    }
                },
                "sampleSellsFromDODOV2(address,uint256,address,address,uint256[])": {
                    "details": "Sample sell quotes from DODO V2.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "offset": "offset index for the pool in the registry.",
                        "registry": "Address of the registry to look up.",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "gasUsed": "gas consumed in each sample sell",
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount.",
                        "pool": "the DODO pool address",
                        "sellBase": "whether the bridge needs to sell the base token"
                    }
                },
                "sampleSellsFromEth2Dai(address,address,address,uint256[])": {
                    "details": "Sample sell quotes from Eth2Dai/Oasis.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "router": "Address of the Eth2Dai/Oasis contract",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "gasUsed": "gas consumed in each sample sell",
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount."
                    }
                },
                "sampleSellsFromKyberDmm(address,address[],uint256[])": {
                    "details": "Sample sell quotes from KyberDmm.",
                    "params": {
                        "path": "Token route. Should be takerToken -> makerToken",
                        "router": "Router to look up tokens and amounts",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "gasUsed": "gas consumed in each sample sell",
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount.",
                        "pools": "The pool addresses involved in the multi path trade"
                    }
                },
                "sampleSellsFromKyberNetwork((uint256,address,address,address,bytes),address,address,uint256[])": {
                    "details": "Sample sell quotes from Kyber.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "opts": "KyberSamplerOpts The nth reserve",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "gasUsed": "Gas consumed per sample.",
                        "hint": "The hint for the selected reserve",
                        "makerTokenAmounts": "Maker amounts bought at each taker token amount.",
                        "reserveId": "The id of the reserve found at reserveOffset"
                    }
                },
                "sampleSellsFromLiquidityProvider(address,address,address,uint256[])": {
                    "details": "Sample sell quotes from an arbitrary on-chain liquidity provider.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "providerAddress": "Address of the liquidity provider.",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "gasUsed": "gas consumed in each sample sell",
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount."
                    }
                },
                "sampleSellsFromMStable(address,address,address,uint256[])": {
                    "details": "Sample sell quotes from the mStable contract",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "router": "Address of the mStable contract",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "gasUsed": "gas consumed in each sample sell",
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount."
                    }
                },
                "sampleSellsFromMakerPsm((address,bytes32,address),address,address,uint256[])": {
                    "details": "Sample sell quotes from Maker PSM"
                },
                "sampleSellsFromMooniswap(address,address,address,uint256[])": {
                    "details": "Sample sell quotes from Mooniswap.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "registry": "Address of the Mooniswap Registry.",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "gasUsed": "gas consumed in each sample sell",
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount.",
                        "pool": "The contract address for the pool"
                    }
                },
                "sampleSellsFromShell(address,address,address,uint256[])": {
                    "details": "Sample sell quotes from the Shell pool contract",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "pool": "Address of the Shell pool contract",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "gasUsed": "gas consumed in each sample sell",
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount."
                    }
                },
                "sampleSellsFromUniswap(address,address,address,uint256[])": {
                    "details": "Sample sell quotes from Uniswap.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "router": "Address of the Uniswap Router",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "gasUsed": "gas consumed in each sample sell",
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount."
                    }
                },
                "sampleSellsFromUniswapV2(address,address[],uint256[])": {
                    "details": "Sample sell quotes from UniswapV2.",
                    "params": {
                        "path": "Token route. Should be takerToken -> makerToken",
                        "router": "Router to look up tokens and amounts",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "gasUsed": "gas consumed for each sample amount",
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount."
                    }
                },
                "sampleSellsFromUniswapV3(address,address,address[],uint256[])": {
                    "details": "Sample sell quotes from UniswapV3.",
                    "params": {
                        "path": "Token route. Should be takerToken -> makerToken",
                        "quoter": "UniswapV3 Quoter contract.",
                        "router": "UniswapV3 Router contract.",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "gasUsed": "gas consumed in each sample sell",
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount.",
                        "uniswapPaths": "The encoded uniswap path for each sample."
                    }
                }
            },
            "version": 1
        },
        "evm": {
            "bytecode": {
                "linkReferences": {},
                "object": "0x6101606040527feeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee00000000000000000000000060c0819052610140523480156200003c57600080fd5b506040516200a2ed3803806200a2ed8339810160408190526200005f916200008b565b60601b6001600160601b031916608081905260a081905260e081905261010081905261012052620000bb565b6000602082840312156200009d578081fd5b81516001600160a01b0381168114620000b4578182fd5b9392505050565b60805160601c60a05160601c60c05160601c60e05160601c6101005160601c6101205160601c6101405160601c61a1dd62000110600039806121fc528061306b52806138a1525050505050505061a1dd6000f3fe6080604052600436106103dd5760003560e01c80638effa9ea116101fd578063c25c413811610118578063d3cdc04d116100ab578063e8e4af091161007a578063e8e4af0914610c45578063f573c16114610c65578063f5a4994d14610c85578063fa5def9f14610ca5578063fc9fe41b14610cc5576103e4565b8063d3cdc04d14610bc5578063d9bca37214610be5578063ddd5aa2814610c05578063e78ac04514610c25576103e4565b8063c94706d8116100e7578063c94706d814610b45578063cc1621c914610b65578063cd85e7b514610b85578063d31b0a8a14610ba5576103e4565b8063c25c413814610ac5578063c7dd6c4f14610ae5578063c831908414610b05578063c8c74a3714610b25576103e4565b8063ab00027611610190578063b90cd2fb1161015f578063b90cd2fb14610a45578063bc4f55ba14610a65578063bd71ecf614610a85578063bf60384b14610aa5576103e4565b8063ab000276146109b6578063ab3e6210146109d6578063adc636bf146109f6578063b770f84914610a25576103e4565b80639e3f05c3116101cc5780639e3f05c314610926578063a095a03614610956578063a469841714610976578063a75e744b14610996576103e4565b80638effa9ea146108a657806398777748146108c65780639ad732ef146108e65780639bf3ee3514610906576103e4565b80635d5b674f116102f857806378fee41c1161028b5780637fea2ae11161025a5780637fea2ae1146107f45780638d201c22146108145780638d8abdf0146108345780638dc669fa146108545780638e5a0e0714610876576103e4565b806378fee41c146107745780637a82dcb9146107945780637e105ce2146107b45780637f7f4f13146107d4576103e4565b80636a33bc7e116102c75780636a33bc7e146106e5578063706e2f9b146107145780637280bfff1461073457806374c9d25514610754576103e4565b80635d5b674f1461066557806366a1ac6b14610685578063686b7ee8146106a557806368be3cf2146106c5576103e4565b80632aa64319116103705780634edfb5b21161033f5780634edfb5b2146105d857806357494b1d1461060557806359ab9a6c146106255780635c71cbe714610645576103e4565b80632aa643191461054857806330d6570d146105785780633105fec114610598578063494569db146105b8576103e4565b806316279055116103ac57806316279055146104ab5780631f4ff03e146104d8578063252322b3146104fa578063281e343214610528576103e4565b80630496d5dc146103e95780631022742b14610421578063149dab0e1461044e57806315de17de1461047e576103e4565b366103e457005b600080fd5b3480156103f557600080fd5b50610409610404366004618186565b610cf4565b604051610418939291906194f0565b60405180910390f35b34801561042d57600080fd5b5061044161043c36600461851f565b610dba565b6040516104189190619685565b34801561045a57600080fd5b5061046e6104693660046189f9565b610f2d565b6040516104189493929190619366565b34801561048a57600080fd5b5061049e61049936600461811f565b610fd6565b60405161041891906196f4565b3480156104b757600080fd5b506104cb6104c6366004618002565b611004565b60405161041891906196bd565b3480156104e457600080fd5b506104f86104f3366004618698565b61100e565b005b34801561050657600080fd5b5061051a6105153660046180ad565b611313565b604051610418929190619698565b34801561053457600080fd5b5061051a610543366004618e0a565b6113b0565b34801561055457600080fd5b50610568610563366004618ba4565b611449565b60405161041894939291906196c8565b34801561058457600080fd5b5061051a6105933660046180ad565b61160e565b3480156105a457600080fd5b5061051a6105b3366004618186565b611679565b3480156105c457600080fd5b506104096105d3366004618186565b61171d565b3480156105e457600080fd5b506105f86105f3366004618d1f565b6118b4565b60405161041891906197b2565b34801561061157600080fd5b5061051a6106203660046180ad565b611b39565b34801561063157600080fd5b5061049e61064036600461811f565b611bc9565b34801561065157600080fd5b5061049e61066036600461811f565b611bd6565b34801561067157600080fd5b5061051a6106803660046180ad565b611be4565b34801561069157600080fd5b506104416106a036600461851f565b611c74565b3480156106b157600080fd5b5061049e6106c036600461811f565b611d29565b6106d86106d3366004618366565b611d37565b6040516104189190619610565b3480156106f157600080fd5b506107056107003660046188c6565b611e98565b6040516104189392919061954b565b34801561072057600080fd5b5061044161072f36600461843d565b6121a9565b34801561074057600080fd5b5061049e61074f36600461811f565b61229b565b34801561076057600080fd5b5061046e61076f3660046189f9565b6122a9565b34801561078057600080fd5b506104f861078f366004618723565b6122b9565b3480156107a057600080fd5b5061049e6107af36600461811f565b612479565b3480156107c057600080fd5b506105f86107cf366004618002565b612486565b3480156107e057600080fd5b5061051a6107ef366004618e0a565b6124ad565b34801561080057600080fd5b5061051a61080f366004618af8565b612584565b34801561082057600080fd5b5061049e61082f36600461811f565b61265d565b34801561084057600080fd5b5061051a61084f36600461897a565b612680565b34801561086057600080fd5b50610869612710565b604051610418919061920c565b34801561088257600080fd5b506108966108913660046183d4565b612728565b6040516104189493929190619ddb565b3480156108b257600080fd5b5061049e6108c136600461811f565b61293f565b3480156108d257600080fd5b5061051a6108e13660046180ad565b61294c565b3480156108f257600080fd5b5061049e61090136600461811f565b6129b7565b34801561091257600080fd5b5061049e610921366004618d88565b6129c5565b34801561093257600080fd5b50610946610941366004618caf565b612b0c565b60405161041894939291906196fd565b34801561096257600080fd5b5061049e61097136600461811f565b612c43565b34801561098257600080fd5b5061051a6109913660046180ad565b612cbc565b3480156109a257600080fd5b506105686109b13660046181ee565b612d2b565b3480156109c257600080fd5b5061051a6109d13660046180ad565b612dd0565b3480156109e257600080fd5b5061049e6109f136600461811f565b612e3b565b348015610a0257600080fd5b50610a16610a113660046180ad565b612e5d565b604051610418939291906193b0565b348015610a3157600080fd5b5061049e610a4036600461811f565b612efa565b348015610a5157600080fd5b5061051a610a603660046180ad565b612f1d565b348015610a7157600080fd5b5061051a610a8036600461897a565b612fad565b348015610a9157600080fd5b50610441610aa036600461846f565b613018565b348015610ab157600080fd5b5061051a610ac0366004618af8565b613114565b348015610ad157600080fd5b5061051a610ae03660046180ad565b61317f565b348015610af157600080fd5b5061049e610b0036600461811f565b613215565b348015610b1157600080fd5b5061051a610b203660046180ad565b613223565b348015610b3157600080fd5b5061051a610b40366004618186565b61328e565b348015610b5157600080fd5b5061051a610b603660046180ad565b6133e6565b348015610b7157600080fd5b50610946610b80366004618caf565b613476565b348015610b9157600080fd5b5061049e610ba036600461811f565b613588565b348015610bb157600080fd5b5061049e610bc036600461811f565b613595565b348015610bd157600080fd5b5061049e610be036600461811f565b6135a3565b348015610bf157600080fd5b50610568610c003660046181ee565b6135b1565b348015610c1157600080fd5b50610568610c20366004618ba4565b61366c565b348015610c3157600080fd5b50610441610c403660046184be565b61384e565b348015610c5157600080fd5b5061051a610c603660046180ad565b613943565b348015610c7157600080fd5b5061049e610c8036600461811f565b6139ae565b348015610c9157600080fd5b50610a16610ca03660046180ad565b6139bb565b348015610cb157600080fd5b50610705610cc03660046188c6565b613a6d565b348015610cd157600080fd5b50610ce5610ce03660046183d4565b613db3565b60405161041893929190619da5565b6060806060610d038686613fd3565b9250825160001415610d1457610db1565b610dab604051806080016040528087600081518110610d2f57fe5b60200260200101516001600160a01b0316815260200187600189510381518110610d5557fe5b60200260200101516001600160a01b03168152602001888689604051602001610d8093929190619330565b60408051601f1981840301815291815290825230602090811b637a82dcb91790911b910152856141d1565b90925090505b93509350939050565b606083516001600160401b0381118015610dd357600080fd5b50604051908082528060200260200182016040528015610dfd578160200160208202803683370190505b50905060005b84518114610f2557306001600160a01b0316639bf3ee3562030d40878481518110610e2a57fe5b6020026020010151878581518110610e3e57fe5b6020026020010151876040518563ffffffff1660e01b8152600401610e6593929190619e7d565b60206040518083038187803b158015610e7d57600080fd5b5086fa93505050508015610eae575060408051601f3d908101601f19168201909252610eab91810190618680565b60015b610f02573d808015610edc576040519150601f19603f3d011682016040523d82523d6000602084013e610ee1565b606091505b506000838381518110610ef057fe5b60200260200101818152505050610f1d565b80838381518110610f0f57fe5b602002602001018181525050505b600101610e03565b509392505050565b6000606080606087602001515160001415610f4757610fcb565b610f53888888886142a2565b8094508195505050610fc56040518060800160405280896001600160a01b03168152602001886001600160a01b031681526020018686604051602001610f9a92919061930c565b60408051601f1981840301815291815290825230602090811b63ab3e62101790911b910152866141d1565b90925090505b945094509450949050565b6000610ff973c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2868685876144d4565b90505b949350505050565b803b15155b919050565b600084905060008260018451038151811061102557fe5b60200260200101519050816001600160a01b031663e326c7d760016040518263ffffffff1660e01b815260040161105c91906196bd565b600060405180830381600087803b15801561107657600080fd5b505af1925050508015611087575060015b506040516355c3705360e11b81526001600160a01b0383169063ab86e0a6906110b69030908590600401619220565b600060405180830381600087803b1580156110d057600080fd5b505af19250505080156110e1575060015b50856001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b15801561111d57600080fd5b505af19350505050801561112f575060015b50606083516001600160401b038111801561114957600080fd5b50604051908082528060200260200182016040528015611173578160200160208202803683370190505b509050606084516001600160401b038111801561118f57600080fd5b506040519080825280602002602001820160405280156111b9578160200160208202803683370190505b50905060005b85518110156112fd57306001600160a01b03166378fee41c621e84808c8c8c8c8c88815181106111eb57fe5b60200260200101516040518763ffffffff1660e01b8152600401611213959493929190619764565b600060405180830381600088803b15801561122d57600080fd5b5087f19350505050801561123f575060015b6112d4573d80801561126d576040519150601f19603f3d011682016040523d82523d6000602084013e611272565b606091505b5061127c816146ca565b85848151811061128857fe5b6020026020010185858151811061129b57fe5b60200260200101828152508281525050508382815181106112b857fe5b6020026020010151600014156112ce57506112fd565b506112f5565b60405162461bcd60e51b81526004016112ec90619ba7565b60405180910390fd5b6001016111bf565b5061130882826146ff565b505050505050505050565b6060806113a36040518060a00160405280876001600160a01b03168152602001866001600160a01b0316815260200188604051602001611353919061920c565b604051602081830303815290604052815260200188604051602001611378919061920c565b60408051601f1981840301815291815290825230602090811b63b770f8491790911b9101528461472d565b9097909650945050505050565b6060806113a36040518060800160405280876001600160a01b03168152602001866001600160a01b0316815260200160405180604001604052808a600001516001600160a01b031681526020018a604001516001600160a01b031681525060405160200161141e9190619eb4565b60408051601f1981840301815291815290825230602090811b63c7dd6c4f1790911b910152846141d1565b60008060608087600001516001600160a01b0316631273b0c688886040518363ffffffff1660e01b8152600401611481929190619239565b60206040518083038186803b15801561149957600080fd5b505afa1580156114ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114d1919061801e565b925060006001600160a01b038416156114ef5750600193508661158d565b8851604051630939d86360e11b81526001600160a01b0390911690631273b0c690611520908a908c90600401619239565b60206040518083038186803b15801561153857600080fd5b505afa15801561154c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611570919061801e565b93506001600160a01b0384166115865750610fcb565b5060009350855b6115fd60405180608001604052808a6001600160a01b03168152602001896001600160a01b031681526020018b6020015187896040516020016115d293929190619253565b60408051601f1981840301815291815290825230602090811b63cd85e7b51790911b910152876141d1565b909350915050945094509450949050565b6060806113a36040518060800160405280876001600160a01b03168152602001866001600160a01b031681526020018860405160200161164e919061920c565b60408051601f1981840301815291815290825230602090811b63d3cdc04d1790911b910152846141d1565b60608061171160405180608001604052808660008151811061169757fe5b60200260200101516001600160a01b03168152602001866001885103815181106116bd57fe5b60200260200101516001600160a01b0316815260200187876040516020016116e692919061930c565b60408051601f1981840301815291815290825230602090811b638effa9ea1790911b910152846141d1565b90969095509350505050565b606080606061172c8686613fd3565b925082516000141561173d57610db1565b606085516001600160401b038111801561175657600080fd5b50604051908082528060200260200182016040528015611780578160200160208202803683370190505b50905060005b86518110156117d5578660018289510303815181106117a157fe5b60200260200101518282815181106117b557fe5b6001600160a01b0390921660209283029190910190910152600101611786565b5060606117e28883613fd3565b90506118a46040518060a00160405280896000815181106117ff57fe5b60200260200101516001600160a01b031681526020018960018b51038151811061182557fe5b60200260200101516001600160a01b031681526020018a888b60405160200161185093929190619330565b60405160208183030381529060405281526020018a848660405160200161187993929190619330565b60408051601f1981840301815291815290825230602090811b637a82dcb91790911b9101528761472d565b9094509250505093509350939050565b602084810151604080516001808252818301909252606093849290828101908036833701905050905085816000815181106118eb57fe5b602090810291909101015260606000604051908082528060200260200182016040528015611923578160200160208202803683370190505b50905087606001516001600160a01b0316866001600160a01b03161415611a14576040516381efcbdd60e01b81526001600160a01b038416906381efcbdd906207a1209061197c90899060019088908890600401619425565b60006040518083038187803b15801561199457600080fd5b5086fa935050505080156119ca57506040513d6000823e601f3d908101601f191682016040526119c7919081019061879d565b60015b611a04573d8080156119f8576040519150601f19603f3d011682016040523d82523d6000602084013e6119fd565b606091505b5050611a0f565b9350610ffc92505050565b611b2e565b87606001516001600160a01b0316856001600160a01b03161415611a6a576040516361e597f960e01b81526001600160a01b038416906361e597f9906207a1209061197c908a9060019088908890600401619425565b6040516302b9a6cd60e11b81526001600160a01b038416906305734d9a906207a12090611aaa908a90600190889088908d90849084908490600401619468565b60006040518083038187803b158015611ac257600080fd5b5086fa93505050508015611af857506040513d6000823e601f3d908101601f19168201604052611af5919081019061879d565b60015b611a04573d808015611b26576040519150601f19603f3d011682016040523d82523d6000602084013e611b2b565b606091505b50505b505050949350505050565b6060806113a36040518060a00160405280876001600160a01b03168152602001866001600160a01b0316815260200188604051602001611b79919061920c565b604051602081830303815290604052815260200188604051602001611b9e919061920c565b60408051601f1981840301815291815290825230602090811b637280bfff1790911b9101528461472d565b6000610ff9858385614be3565b6000610ff985858486614cb7565b6060806113a36040518060a00160405280876001600160a01b03168152602001866001600160a01b0316815260200188604051602001611c24919061920c565b604051602081830303815290604052815260200188604051602001611c49919061920c565b60408051601f1981840301815291815290825230602090811b63686b7ee81790911b9101528461472d565b6060611c81848484610dba565b905060005b8451811015610f2557818181518110611c9b57fe5b6020026020010151600014611d2157611d08828281518110611cb957fe5b6020026020010151868381518110611ccd57fe5b6020026020010151606001516001600160801b0316878481518110611cee57fe5b6020026020010151604001516001600160801b0316614d17565b828281518110611d1457fe5b6020026020010181815250505b600101611c86565b6000610ff985858486614d41565b6060816001600160401b0381118015611d4f57600080fd5b50604051908082528060200260200182016040528015611d8957816020015b611d766178cd565b815260200190600190039081611d6e5790505b50905060005b808314611e91576001828281518110611da457fe5b602090810291909101810151911515910152838382818110611dc257fe5b9050602002810190611dd4919061a056565b15159050611de157611e89565b30848483818110611dee57fe5b9050602002810190611e00919061a056565b604051611e0e9291906191e0565b6000604051808303816000865af19150503d8060008114611e4b576040519150601f19603f3d011682016040523d82523d6000602084013e611e50565b606091505b50838381518110611e5d57fe5b6020026020010151602001848481518110611e7457fe5b60209081029190910101519190915290151590525b600101611d8f565b5092915050565b606080606080611f1a886001600160a01b031663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b158015611eda57600080fd5b505afa158015611eee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f12919061801e565b876000614da5565b905084516001600160401b0381118015611f3357600080fd5b50604051908082528060200260200182016040528015611f5d578160200160208202803683370190505b50915084516001600160401b0381118015611f7757600080fd5b50604051908082528060200260200182016040528015611fa1578160200160208202803683370190505b50925084516001600160401b0381118015611fbb57600080fd5b50604051908082528060200260200182016040528015611fef57816020015b6060815260200190600190039081611fda5790505b50935060005b815181101561219d57606061201d8884848151811061201057fe5b602002602001015161523b565b90506060806120b760405180608001604052808c60008151811061203d57fe5b60200260200101516001600160a01b031681526020018c60018e51038151811061206357fe5b60200260200101516001600160a01b031681526020018d8660405160200161208c929190619401565b60408051601f1981840301815291815290825230602090811b6359ab9a6c1790911b9101528a6141d1565b9150915060005b815181101561218e578181815181106120d357fe5b6020026020010151600014156120e85761218e565b8181815181106120f457fe5b602002602001015187828151811061210857fe5b6020026020010151116121865781818151811061212157fe5b602002602001015187828151811061213557fe5b60200260200101818152505082818151811061214d57fe5b602002602001015188828151811061216157fe5b6020026020010181815250508389828151811061217a57fe5b60200260200101819052505b6001016120be565b50505050806001019050611ff5565b50509450945094915050565b606081516001600160401b03811180156121c257600080fd5b506040519080825280602002602001820160405280156121ec578160200160208202803683370190505b50905060005b82518114612295577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031683828151811061223057fe5b60200260200101516001600160a01b0316146122705761226b83828151811061225557fe5b60200260200101516001600160a01b0316615396565b612273565b60125b60ff1682828151811061228257fe5b60209081029190910101526001016121f2565b50919050565b6000610ff985858486615442565b5060009360609350839250829150565b61133761def160901b016001600160a01b031663d0afdca96040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156122fd57600080fd5b505af192505050801561230e575060015b5060005a905060006060306001600160a01b0316888888888860405160240161233a94939291906192ab565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b031990941693909317909252905161237891906191f0565b6000604051808303816000865af19150503d80600081146123b5576040519150601f19603f3d011682016040523d82523d6000602084013e6123ba565b606091505b50915091505a8303925061133761def160901b016001600160a01b0316630c18c1626040518163ffffffff1660e01b815260040160206040518083038186803b15801561240657600080fd5b505afa925050508015612436575060408051601f3d908101601f1916820190925261243391810190618680565b60015b61243f57612444565b909203915b816124525761245281615502565b61246f818060200190518101906124699190618680565b8461550a565b5050505050505050565b6000610ff984838561551b565b60408051603f833b908101601f191682019092528181529080600060208401853c50919050565b6060806124b86178e5565b604051806040016040528088600001516001600160a01b0316815260200188604001516001600160a01b031681525090506125766040518060a00160405280886001600160a01b03168152602001876001600160a01b03168152602001836040516020016125269190619eb4565b60405160208183030381529060405281526020018360405160200161254b9190619eb4565b60408051601f1981840301815291815290825230602090811b63c7dd6c4f1790911b9101528561472d565b909890975095505050505050565b6060806113a36040518060a00160405280876001600160a01b03168152602001866001600160a01b03168152602001886040516020016125c49190619d05565b604051602081830303815290604052815260200160405180608001604052808a600001516001600160a01b031681526020018a602001516001600160e01b03191681526020018a60600151600f0b81526020018a60400151600f0b8152506040516020016126329190619d05565b60408051601f1981840301815291815290825230602090811b638d201c221790911b9101528461472d565b6000610ff973c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2868685876156b4565b6060806113a36040518060a00160405280876001600160a01b03168152602001866001600160a01b03168152602001886040516020016126c09190619ce5565b6040516020818303038152906040528152602001886040516020016126e59190619ce5565b60408051601f1981840301815291815290825230602090811b639ad732ef1790911b9101528461472d565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b6127306178fc565b6127386178fc565b600080805b8751811461283d57612784602089838151811061275657fe5b60200260200101515103878a848151811061276d57fe5b60200260200101516159c09092919063ffffffff16565b60006060306001600160a01b03168a848151811061279e57fe5b60200260200101516040516127b391906191f0565b6000604051808303816000865af19150503d80600081146127f0576040519150601f19603f3d011682016040523d82523d6000602084013e6127f5565b606091505b509150915081156128335760006128196020835103836159d090919063ffffffff16565b90508581111561283157838852602088018290529450845b505b505060010161273d565b508161284857612936565b60005b865181146129345761287b602088838151811061286457fe5b602002602001015151038489848151811061276d57fe5b60006060306001600160a01b031689848151811061289557fe5b60200260200101516040516128aa91906191f0565b6000604051808303816000865af19150503d80600081146128e7576040519150601f19603f3d011682016040523d82523d6000602084013e6128ec565b606091505b5091509150811561292a5760006129106020835103836159d090919063ffffffff16565b90508481111561292857838752602087018290529350835b505b505060010161284b565b505b93509350935093565b6000610ff98483856159dc565b6060806113a36040518060800160405280876001600160a01b03168152602001866001600160a01b031681526020018860405160200161298c919061920c565b60408051601f1981840301815291815290825230602090811b637280bfff1790911b910152846141d1565b6000610ff985858486615b2d565b600080835160038111156129d557fe5b14806129ed57506001835160038111156129eb57fe5b145b80612a03575060408401516001600160801b0316155b80612a19575060608401516001600160801b0316155b15612a2657506000612b05565b612a2e617916565b600080846001600160a01b0316631fb0979588886040518363ffffffff1660e01b8152600401612a5f929190619e60565b60a06040518083038186803b158015612a7757600080fd5b505afa158015612a8b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612aaf9190618e9c565b91945092509050600183602001516004811115612ac857fe5b141580612ad3575080155b80612ae6575086516001600160a01b0316155b15612af75760009350505050612b05565b506001600160801b03169150505b9392505050565b60006060806060612b1e888888615c81565b935083612b2a57610fcb565b60405163276fdad960e11b81523090634edfb5b290612b53908b9088908c908c90600401619e27565b60006040518083038186803b158015612b6b57600080fd5b505afa158015612b7f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612ba7919081019061879d565b886080018190525087608001519250610fc56040518060a00160405280896001600160a01b03168152602001886001600160a01b031681526020018a604051602001612bf39190619e14565b60405160208183030381529060405281526020018a604051602001612c189190619e14565b60408051601f1981840301815291815290825230602090811b63a095a0361790911b9101528661472d565b6000612c4d617938565b83806020019051810190612c619190618c02565b9050612cb273eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee826060015188888786604001518760800151604051602001612c9e929190619401565b604051602081830303815290604052615df1565b9695505050505050565b60608060606125766040518060800160405280886001600160a01b03168152602001876001600160a01b031681526020018984604051602001612d00929190619401565b60408051601f1981840301815291815290825230602090811b63d31b0a8a1790911b910152856141d1565b600080606080612d3d89898989615ff3565b945092506001600160a01b038316612d5457612dc4565b612dbe6040518060800160405280896001600160a01b03168152602001886001600160a01b031681526020018587604051602001612d939291906193e6565b60408051601f1981840301815291815290825230602090811b63f573c1611790911b910152866141d1565b90925090505b95509550955095915050565b6060806113a36040518060800160405280876001600160a01b03168152602001866001600160a01b0316815260200188604051602001612e10919061920c565b60408051601f1981840301815291815290825230602090811b635c71cbe71790911b910152846141d1565b6000610ff973c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2858486616148565b6000606080612e6d878787616431565b92506001600160a01b038316612e8257612ef0565b612eea6040518060800160405280886001600160a01b03168152602001876001600160a01b0316815260200185604051602001612ebf919061920c565b60408051601f1981840301815291815290825230602090811b6315de17de1790911b910152856141d1565b90925090505b9450945094915050565b6000610ff973c02aaa39b223fe8d0a0e5c4f27ead9083c756cc286868587616518565b6060806113a36040518060a00160405280876001600160a01b03168152602001866001600160a01b0316815260200188604051602001612f5d919061920c565b604051602081830303815290604052815260200188604051602001612f82919061920c565b60408051601f1981840301815291815290825230602090811b63d3cdc04d1790911b9101528461472d565b6060806113a36040518060800160405280876001600160a01b03168152602001866001600160a01b0316815260200188604051602001612fed9190619ce5565b60408051601f1981840301815291815290825230602090811b639ad732ef1790911b910152846141d1565b606082516001600160401b038111801561303157600080fd5b5060405190808252806020026020018201604052801561305b578160200160208202803683370190505b50905060005b83518114611e91577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031684828151811061309f57fe5b60200260200101516001600160a01b0316146130e9576130e4838583815181106130c557fe5b60200260200101516001600160a01b031661679a90919063ffffffff16565b6130f5565b826001600160a01b0316315b82828151811061310157fe5b6020908102919091010152600101613061565b6060806113a36040518060800160405280876001600160a01b03168152602001866001600160a01b03168152602001886040516020016131549190619d05565b60408051601f1981840301815291815290825230602090811b638d201c221790911b910152846141d1565b60608060606125766040518060a00160405280886001600160a01b03168152602001876001600160a01b0316815260200189846040516020016131c3929190619401565b604051602081830303815290604052815260200189846040516020016131ea929190619401565b60408051601f1981840301815291815290825230602090811b63d31b0a8a1790911b9101528561472d565b6000610ff98585848661686d565b6060806113a36040518060800160405280876001600160a01b03168152602001866001600160a01b0316815260200188604051602001613263919061920c565b60408051601f1981840301815291815290825230602090811b63b770f8491790911b910152846141d1565b606080606084516001600160401b03811180156132aa57600080fd5b506040519080825280602002602001820160405280156132d4578160200160208202803683370190505b50905060005b8551811015613329578560018288510303815181106132f557fe5b602002602001015182828151811061330957fe5b6001600160a01b03909216602092830291909101909101526001016132da565b506113a36040518060a001604052808760008151811061334557fe5b60200260200101516001600160a01b031681526020018760018951038151811061336b57fe5b60200260200101516001600160a01b03168152602001888860405160200161339492919061930c565b604051602081830303815290604052815260200188846040516020016133bb92919061930c565b60408051601f1981840301815291815290825230602090811b638effa9ea1790911b9101528561472d565b6060806113a36040518060a00160405280876001600160a01b03168152602001866001600160a01b0316815260200188604051602001613426919061920c565b60405160208183030381529060405281526020018860405160200161344b919061920c565b60408051601f1981840301815291815290825230602090811b635c71cbe71790911b9101528461472d565b60006060806060613488888888615c81565b93508361349457610fcb565b60405163276fdad960e11b81523090634edfb5b2906134bd908b9088908c908c90600401619e27565b60006040518083038186803b1580156134d557600080fd5b505afa1580156134e9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613511919081019061879d565b886080018190525087608001519250610fc56040518060800160405280896001600160a01b03168152602001886001600160a01b031681526020018a60405160200161355d9190619e14565b60408051601f1981840301815291815290825230602090811b63a095a0361790911b910152866141d1565b6000610ff9858385616bf1565b6000610ff985858486616ddf565b6000610ff985858486616ea3565b6000806060806135c389898989615ff3565b945092506001600160a01b0383166135da57612dc4565b612dbe6040518060a00160405280896001600160a01b03168152602001886001600160a01b0316815260200185876040516020016136199291906193e6565b60405160208183030381529060405281526020018587156040516020016136419291906193e6565b60408051601f1981840301815291815290825230602090811b63f573c1611790911b9101528661472d565b60008060608087600001516001600160a01b0316631273b0c688886040518363ffffffff1660e01b81526004016136a4929190619239565b60206040518083038186803b1580156136bc57600080fd5b505afa1580156136d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136f4919061801e565b925060006001600160a01b03841615613712575060019350866137b0565b8851604051630939d86360e11b81526001600160a01b0390911690631273b0c690613743908a908c90600401619239565b60206040518083038186803b15801561375b57600080fd5b505afa15801561376f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613793919061801e565b93506001600160a01b0384166137a95750610fcb565b5060009350855b6115fd6040518060a001604052808a6001600160a01b03168152602001896001600160a01b031681526020018b6020015187896040516020016137f593929190619253565b60405160208183030381529060405281526020018b6020015187891560405160200161382393929190619253565b60408051601f1981840301815291815290825230602090811b63cd85e7b51790911b9101528761472d565b606083516001600160401b038111801561386757600080fd5b50604051908082528060200260200182016040528015613891578160200160208202803683370190505b50905060005b84518114610f25577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168582815181106138d557fe5b60200260200101516001600160a01b0316146139215761391c84848784815181106138fc57fe5b60200260200101516001600160a01b0316616f059092919063ffffffff16565b613924565b60005b82828151811061393057fe5b6020908102919091010152600101613897565b6060806113a36040518060800160405280876001600160a01b03168152602001866001600160a01b0316815260200188604051602001613983919061920c565b60408051601f1981840301815291815290825230602090811b63686b7ee81790911b910152846141d1565b6000610ff9858385616fd1565b60006060806139cb878787616431565b92506001600160a01b0383166139e057612ef0565b612eea6040518060a00160405280886001600160a01b03168152602001876001600160a01b0316815260200185604051602001613a1d919061920c565b604051602081830303815290604052815260200185604051602001613a42919061920c565b60408051601f1981840301815291815290825230602090811b6315de17de1790911b9101528561472d565b606080606080613aaf886001600160a01b031663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b158015611eda57600080fd5b90506060613abc876170b7565b905085516001600160401b0381118015613ad557600080fd5b50604051908082528060200260200182016040528015613aff578160200160208202803683370190505b50925085516001600160401b0381118015613b1957600080fd5b50604051908082528060200260200182016040528015613b43578160200160208202803683370190505b50935085516001600160401b0381118015613b5d57600080fd5b50604051908082528060200260200182016040528015613b9157816020015b6060815260200190600190039081613b7c5790505b50945060005b8251811015613da657606080613c926040518060a001604052808c600081518110613bbe57fe5b60200260200101516001600160a01b031681526020018c60018e510381518110613be457fe5b60200260200101516001600160a01b031681526020018d613c0b8e8a898151811061201057fe5b604051602001613c1c929190619401565b60405160208183030381529060405281526020018d613c5688613c518b8a81518110613c4457fe5b602002602001015161714f565b61523b565b604051602001613c67929190619401565b60408051601f1981840301815291815290825230602090811b6359ab9a6c1790911b9101528a61472d565b9150915060005b8151811015613d9857818181518110613cae57fe5b602002602001015160001415613cc357613d98565b868181518110613ccf57fe5b602002602001015160001480613d0b5750818181518110613cec57fe5b6020026020010151878281518110613d0057fe5b602002602001015110155b15613d9057818181518110613d1c57fe5b6020026020010151878281518110613d3057fe5b602002602001018181525050828181518110613d4857fe5b6020026020010151888281518110613d5c57fe5b602002602001018181525050613d788b87868151811061201057fe5b898281518110613d8457fe5b60200260200101819052505b600101613c99565b505050806001019050613b97565b5050509450945094915050565b613dbb6178fc565b613dc36178fc565b6000198060005b86518114613ebf57613dfa6020888381518110613de357fe5b602002602001015151038789848151811061276d57fe5b60006060306001600160a01b0316898481518110613e1457fe5b6020026020010151604051613e2991906191f0565b6000604051808303816000865af19150503d8060008114613e66576040519150601f19603f3d011682016040523d82523d6000602084013e613e6b565b606091505b50915091508115613eb5576000613e8f6020835103836159d090919063ffffffff16565b9050600081118015613ea057508481105b15613eb357838752602087018290529350835b505b5050600101613dca565b50600019811415613ed05750610db1565b60005b87518114613fc857613f036020898381518110613eec57fe5b60200260200101515103838a848151811061276d57fe5b60006060306001600160a01b03168a8481518110613f1d57fe5b6020026020010151604051613f3291906191f0565b6000604051808303816000865af19150503d8060008114613f6f576040519150601f19603f3d011682016040523d82523d6000602084013e613f74565b606091505b50915091508115613fbe576000613f986020835103836159d090919063ffffffff16565b9050600081118015613fa957508581105b15613fbc57838852602088018290529450845b505b5050600101613ed3565b505093509350939050565b606060018251036001600160401b0381118015613fef57600080fd5b50604051908082528060200260200182016040528015614019578160200160208202803683370190505b5090506000836001600160a01b031663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b15801561405757600080fd5b505afa15801561406b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061408f919061801e565b905060005b82518110156141c857816001600160a01b03166365da9289620249f08684815181106140bc57fe5b60200260200101518785600101815181106140d357fe5b602002602001015160006040518563ffffffff1660e01b81526004016140fb939291906192e8565b60206040518083038187803b15801561411357600080fd5b5086fa93505050508015614144575060408051601f3d908101601f191682019092526141419181019061801e565b60015b614192573d808015614172576040519150601f19603f3d011682016040523d82523d6000602084013e614177565b606091505b505060408051600081526020810190915292506141cb915050565b8084838151811061419f57fe5b60200260200101906001600160a01b031690816001600160a01b03168152505050600101614094565b50505b92915050565b606082810151835160208501516040808701519051630fa7f81f60e11b815285943094631f4ff03e9461421d9460a09390931b6001600160e01b03191693919290918a90600401619716565b600060405180830381600087803b15801561423757600080fd5b505af1925050508015614248575060015b6112d4573d808015614276576040519150601f19603f3d011682016040523d82523d6000602084013e61427b565b606091505b50808060200190518101906142909190618620565b9350915061429b9050565b9250929050565b6000606085600001516001600160a01b03166321f8a72187600001516001600160a01b0316639232494e6040518163ffffffff1660e01b815260040160206040518083038186803b1580156142f657600080fd5b505afa15801561430a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061432e9190618680565b6040518263ffffffff1660e01b815260040161434a91906196f4565b60206040518083038186803b15801561436257600080fd5b505afa158015614376573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061439a919061801e565b9150856020015151600014156143af576144cb565b6000805b8760200151518110156144c8576002886020015182815181106143d257fe5b60200260200101515110156143e6576144c0565b836001600160a01b0316637f9c0ecd620493e08a60200151848151811061440957fe5b60200260200101518860018a51038151811061442157fe5b60200260200101516040518463ffffffff1660e01b8152600401614446929190619529565b60206040518083038187803b15801561445e57600080fd5b5086fa9350505050801561448f575060408051601f3d908101601f1916820190925261448c91810190618680565b60015b614498576144c0565b828111156144be57809250886020015182815181106144b357fe5b602002602001015193505b505b6001016143b3565b50505b94509492505050565b600080828060200190518101906144eb919061801e565b90506000876001600160a01b0316876001600160a01b0316141561456f57604051632e1a7d4d60e01b81526001600160a01b03891690632e1a7d4d906145359088906004016196f4565b600060405180830381600087803b15801561454f57600080fd5b505af1158015614563573d6000803e3d6000fd5b50505050849050614583565b6145836001600160a01b03881683876171e7565b816001600160a01b031663d5bcb9b5828a6001600160a01b03168a6001600160a01b0316146145b257896145b5565b60005b8b6001600160a01b03168a6001600160a01b0316146145d457896145d7565b60005b89600160006040518763ffffffff1660e01b81526004016145fc959493929190619828565b6020604051808303818588803b15801561461557600080fd5b505af1158015614629573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061464e9190618680565b9250876001600160a01b0316866001600160a01b031614156146bf57876001600160a01b031663d0e30db0846040518263ffffffff1660e01b81526004016000604051808303818588803b1580156146a557600080fd5b505af11580156146b9573d6000803e3d6000fd5b50505050505b505095945050505050565b60008082516040146146e1575060009050806146fa565b828060200190518101906146f59190618f3b565b915091505b915091565b60608282604051602001614714929190619698565b6040516020818303038152906040529050805160208201fd5b60608082516000141561473f5761429b565b82516001600160401b038111801561475657600080fd5b50604051908082528060200260200182016040528015614780578160200160208202803683370190505b50905082516001600160401b038111801561479a57600080fd5b506040519080825280602002602001820160405280156147c4578160200160208202803683370190505b506040805160018082528183019092529193506060919060208083019080368337019050509050836000815181106147f857fe5b60200260200101518160008151811061480d57fe5b602002602001018181525050614821617982565b50604080516080808201835287516001600160a01b0390811683526020808a0151909116908301528783015182840152870151640100000000600160c01b0390831c90811663ffffffff9091161790911b606082015261487f617982565b604051806080016040528088602001516001600160a01b0316815260200188600001516001600160a01b031681526020018860600151815260200188608001518060601c9060401c63ffffffff1663ffffffff169060201b1760401b81525090506148ea81846141d1565b80519094501590508061491157508260008151811061490557fe5b60200260200101516000145b1561491e5750505061429b565b606061492a83856141d1565b80519092501590508061495157508060008151811061494557fe5b60200260200101516000145b1561495f575050505061429b565b60005b8751811015614bd757606060005b6003811015614b37576149bf8a848151811061498857fe5b60200260200101518560008151811061499d57fe5b6020026020010151896000815181106149b257fe5b602002602001015161727a565b876000815181106149cc57fe5b6020908102919091010152865115806149f95750866000815181106149ed57fe5b60200260200101516000145b15614a0357614b37565b614a1c600561271001612710896000815181106149b257fe5b87600081518110614a2957fe5b602090810291909101015286511580614a56575086600081518110614a4a57fe5b60200260200101516000145b15614a6057614b37565b6060614a6c87896141d1565b805191945091501580614a93575080600081518110614a8757fe5b60200260200101516000145b15614a9e5750614b37565b8094508a8481518110614aad57fe5b602002602001015185600081518110614ac257fe5b602002602001015110614b2e5760008b8581518110614add57fe5b60200260200101516127108d8781518110614af457fe5b602002602001015188600081518110614b0957fe5b6020026020010151030281614b1a57fe5b04905060058111614b2c575050614b37565b505b50600101614970565b5060008151118015614b4a575060008351115b15614bce5780600081518110614b5c57fe5b6020026020010151888381518110614b7057fe5b602002602001018181525050614bb5898381518110614b8b57fe5b602002602001015184600081518110614ba057fe5b6020026020010151886000815181106149b257fe5b878381518110614bc157fe5b6020026020010181815250505b50600101614962565b50505050509250929050565b600080606083806020019051810190614bfc9190618882565b9092509050614c156001600160a01b03871683876171e7565b6040805160a08101825282815230602082015242818301526060810187905260016080820152905163c04b8d5960e01b81526001600160a01b0384169163c04b8d5991614c659190600401619d4d565b602060405180830381600087803b158015614c7f57600080fd5b505af1158015614c93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cb29190618680565b60008082806020019051810190614cce919061801e565b9050614ce46001600160a01b03871682866171e7565b604051630310da7b60e11b81526001600160a01b03821690630621b4f690614c6590899088908a906001906004016198db565b6000610ffc83614d3b614d2b8260016172d2565b614d3588876172f6565b90617327565b90617343565b60008082806020019051810190614d58919061801e565b9050614d6e6001600160a01b03871682866171e7565b604051630164b07960e31b81526001600160a01b03821690630b2583c890614c659089908990899060019042820190600401619858565b60606002828451031015614dcb5760405162461bcd60e51b81526004016112ec906199ac565b614dd36179aa565b5060408051606080820183526101f48252610bb860208301526127108284015282516003808252608082019094529192909190816020016020820280368337019050509050600080868681518110614e2757fe5b602002602001015190506000878760010181518110614e4257fe5b6020026020010151905060005b6003811015614f375760008a6001600160a01b0316631698ee8285858a8660038110614e7757fe5b60200201516040518463ffffffff1660e01b8152600401614e9a93929190619800565b60206040518083038186803b158015614eb257600080fd5b505afa158015614ec6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614eea919061801e565b9050614ef58161736d565b15614f2e5780868680600101975081518110614f0d57fe5b60200260200101906001600160a01b031690816001600160a01b0316815250505b50600101614e4f565b50505080614f4757505050612b05565b855185600201141561503d57806001600160401b0381118015614f6957600080fd5b50604051908082528060200260200182016040528015614f9d57816020015b6060815260200190600190039081614f885790505b50935060005b8181101561503457604080516001808252818301909252906020808301908036833701905050858281518110614fd557fe5b6020026020010181905250828181518110614fec57fe5b602002602001015185828151811061500057fe5b602002602001015160008151811061501457fe5b6001600160a01b0390921660209283029190910190910152600101614fa3565b50505050612b05565b606061504d888888600101614da5565b90508051600014156150625750505050612b05565b805182026001600160401b038111801561507b57600080fd5b506040519080825280602002602001820160405280156150af57816020015b606081526020019060019003908161509a5790505b50945060005b8281101561522f5760005b82518110156152265782518281028201908490839081106150dd57fe5b6020026020010151516001016001600160401b03811180156150fe57600080fd5b50604051908082528060200260200182016040528015615128578160200160208202803683370190505b5088828151811061513557fe5b602002602001018190525085838151811061514c57fe5b602002602001015188828151811061516057fe5b602002602001015160008151811061517457fe5b60200260200101906001600160a01b031690816001600160a01b03168152505060005b8483815181106151a357fe5b60200260200101515181101561521c578483815181106151bf57fe5b602002602001015181815181106151d257fe5b60200260200101518983815181106151e657fe5b602002602001015182600101815181106151fc57fe5b6001600160a01b0390921660209283029190910190910152600101615197565b50506001016150c0565b506001016150b5565b50505050509392505050565b60606002835110158015615253575081516001018351145b61526f5760405162461bcd60e51b81526004016112ec90619ad0565b81516003028351601402016001600160401b038111801561528f57600080fd5b506040519080825280601f01601f1916602001820160405280156152ba576020820181803683370190505b5090506020810160005b84518110156141c85780156153695760008460018303815181106152e457fe5b60200260200101516001600160a01b031663ddca3f436040518163ffffffff1660e01b815260040160206040518083038186803b15801561532457600080fd5b505afa158015615338573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061535c9190618f18565b60e81b8352506003909101905b600085828151811061537757fe5b602090810291909101015160601b8352506014909101906001016152c4565b60006012905060006060836001600160a01b031660405180604001604052806004815260200163313ce56760e01b8152506040516153d491906191f0565b600060405180830381855afa9150503d806000811461540f576040519150601f19603f3d011682016040523d82523d6000602084013e615414565b606091505b509150915081801561542857506020815110155b1561543b576154388160006159d0565b92505b5050919050565b60008082806020019051810190615459919061801e565b905061546f6001600160a01b03871682866171e7565b604051638201aa3f60e01b81526001600160a01b03821690638201aa3f906154a690899088908a9060019060001990600401619905565b6040805180830381600087803b1580156154bf57600080fd5b505af11580156154d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906154f79190618f3b565b509695505050505050565b805160208201fd5b604051828152816020820152604081fd5b60008060608084806020019051810190615535919061803a565b815192955090935091506001111561555f5760405162461bcd60e51b81526004016112ec90619c39565b81516001018151146155835760405162461bcd60e51b81526004016112ec90619b64565b866001600160a01b03168160018351038151811061559d57fe5b60200260200101516001600160a01b0316146155cb5760405162461bcd60e51b81526004016112ec90619a73565b6155fd8387836000815181106155dd57fe5b60200260200101516001600160a01b03166171e79092919063ffffffff16565b60405163ceb757d560e01b81526060906001600160a01b0385169063ceb757d590615637908a906001908890889030904290600401619f69565b600060405180830381600087803b15801561565157600080fd5b505af1158015615665573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261568d91908101906185ee565b90508060018251038151811061569f57fe5b60200260200101519450505050509392505050565b60006156be6179c8565b828060200190518101906156d29190618a90565b90506000876001600160a01b0316876001600160a01b031614156157565750604051632e1a7d4d60e01b815284906001600160a01b03891690632e1a7d4d9061571f9084906004016196f4565b600060405180830381600087803b15801561573957600080fd5b505af115801561574d573d6000803e3d6000fd5b5050505061576d565b815161576d906001600160a01b03891690876171e7565b6040516370a0823160e01b81526000906001600160a01b038816906370a082319061579c90309060040161920c565b60206040518083038186803b1580156157b457600080fd5b505afa1580156157c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906157ec9190618680565b90506000606084600001516001600160a01b0316848660200151876040015188606001518c60016040516024016158269493929190619968565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b031990941693909317909252905161586491906191f0565b60006040518083038185875af1925050503d80600081146158a1576040519150601f19603f3d011682016040523d82523d6000602084013e6158a6565b606091505b5091509150816158b9576158b981615502565b8a6001600160a01b0316896001600160a01b0316141561592b574795508a6001600160a01b031663d0e30db0876040518263ffffffff1660e01b81526004016000604051808303818588803b15801561591157600080fd5b505af1158015615925573d6000803e3d6000fd5b50505050505b6159b1838a6001600160a01b03166370a08231306040518263ffffffff1660e01b815260040161595b919061920c565b60206040518083038186803b15801561597357600080fd5b505afa158015615987573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906159ab9190618680565b906172d2565b9b9a5050505050505050505050565b6159cb838383617579565b505050565b6000612b0583836175a0565b600080606080848060200190518101906159f691906187cf565b80519194509250600211159050615a1f5760405162461bcd60e51b81526004016112ec90619b15565b856001600160a01b031681600183510381518110615a3957fe5b60200260200101516001600160a01b031614615a675760405162461bcd60e51b81526004016112ec90619c88565b615a798286836000815181106155dd57fe5b6040516338ed173960e01b81526060906001600160a01b038416906338ed173990615ab1908990600190879030904290600401619fb9565b600060405180830381600087803b158015615acb57600080fd5b505af1158015615adf573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052615b0791908101906185ee565b905080600182510381518110615b1957fe5b602002602001015193505050509392505050565b6000615b376178e5565b82806020019051810190615b4b919061893f565b8051909150615b65906001600160a01b03881690866171e7565b615b6d6179ef565b6040805160c081019091526020808401518252810160008152602001886001600160a01b03168152602001876001600160a01b03168152602001868152602001604051806020016040528060008152508152509050615bca6179c8565b506040805160808101825230808252600060208301819052828401919091526060820152835191516352bbbe2960e01b815290916001600160a01b0316906352bbbe2990615c2390859085906001904290600401619ed7565b602060405180830381600087803b158015615c3d57600080fd5b505af1158015615c51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190615c759190618680565b98975050505050505050565b600080846020015190506060816001600160a01b031663910ffc7187606001516001600160a01b0316876001600160a01b031614615cbf5786615cd5565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee5b88606001516001600160a01b0316876001600160a01b031614615cf85786615d0e565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee5b604080516000815260208101918290526001600160e01b031960e086901b16909152615d4292919060019060248101619277565b60006040518083038186803b158015615d5a57600080fd5b505afa158015615d6e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052615d96919081019061829c565b505090508051866000015110615db2575060009150612b059050565b80866000015181518110615dc257fe5b6020026020010151925060f883901c60001c60bb1415615de8575060009150612b059050565b50509392505050565b600080606083806020019051810190615e0a9190618882565b915091506000886001600160a01b0316886001600160a01b031614615e4257615e3d6001600160a01b03891684886171e7565b615ea4565b50604051632e1a7d4d60e01b815285906001600160a01b038a1690632e1a7d4d90615e719084906004016196f4565b600060405180830381600087803b158015615e8b57600080fd5b505af1158015615e9f573d6000803e3d6000fd5b505050505b826001600160a01b03166329589f61828b6001600160a01b03168b6001600160a01b031614615ed3578a615ed5565b8c5b898d6001600160a01b03168c6001600160a01b031614615ef5578b615ef7565b8e5b30600019600160008b6040518a63ffffffff1660e01b8152600401615f23989796959493929190619889565b6020604051808303818588803b158015615f3c57600080fd5b505af1158015615f50573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190615f759190618680565b9350886001600160a01b0316876001600160a01b03161415615fe657886001600160a01b031663d0e30db0856040518263ffffffff1660e01b81526004016000604051808303818588803b158015615fcc57600080fd5b505af1158015615fe0573d6000803e3d6000fd5b50505050505b5050509695505050505050565b6000806060866001600160a01b03166357a281dc86866040518363ffffffff1660e01b8152600401616026929190619239565b60006040518083038186803b15801561603e57600080fd5b505afa158015616052573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261607a919081019061826a565b905060019150805160001415616113576040516315e8a07760e21b81526001600160a01b038816906357a281dc906160b89087908990600401619239565b60006040518083038186803b1580156160d057600080fd5b505afa1580156160e4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261610c919081019061826a565b9050600091505b805186106161285760008092509250506144cb565b80868151811061613457fe5b602002602001015192505094509492505050565b6000806060808480602001905181019061616291906187cf565b8051919450925060021115905061618b5760405162461bcd60e51b81526004016112ec90619a27565b856001600160a01b0316816001835103815181106161a557fe5b60200260200101516001600160a01b0316148061621a575073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6001600160a01b0316816001835103815181106161eb57fe5b60200260200101516001600160a01b031614801561621a5750866001600160a01b0316866001600160a01b0316145b6162365760405162461bcd60e51b81526004016112ec90619bdc565b600073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6001600160a01b03168260008151811061626357fe5b60200260200101516001600160a01b031614156162e057604051632e1a7d4d60e01b81526001600160a01b03891690632e1a7d4d906162a69089906004016196f4565b600060405180830381600087803b1580156162c057600080fd5b505af11580156162d4573d6000803e3d6000fd5b505050508590506162ff565b6162ff826000815181106162f057fe5b602002602001015184886171e7565b60405163b77d239b60e01b81526001600160a01b0384169063b77d239b9083906163399086908b90600190309060009081906004016195ca565b6020604051808303818588803b15801561635257600080fd5b505af1158015616366573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061638b9190618680565b935073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6001600160a01b0316826001845103815181106163bb57fe5b60200260200101516001600160a01b03161415611b2e57876001600160a01b031663d0e30db0856040518263ffffffff1660e01b81526004016000604051808303818588803b15801561640d57600080fd5b505af1158015616421573d6000803e3d6000fd5b5050505050505050949350505050565b60008073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc26001600160a01b0385161461645e5783616461565b60005b9050600073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc26001600160a01b0385161461648f5783616492565b60005b9050856001600160a01b031663901754d7620493e084846040518463ffffffff1660e01b81526004016164c6929190619239565b60206040518083038187803b1580156164de57600080fd5b5086fa9350505050801561650f575060408051601f3d908101601f1916820190925261650c9181019061801e565b60015b612cb257615de8565b6000808280602001905181019061652f919061801e565b9050600061653f888389896175ca565b9050876001600160a01b0316876001600160a01b0316141561664557604051632e1a7d4d60e01b81526001600160a01b03891690632e1a7d4d906165879088906004016196f4565b600060405180830381600087803b1580156165a157600080fd5b505af11580156165b5573d6000803e3d6000fd5b505060405163ad65d76d60e01b81526001600160a01b038416925063ad65d76d915087906165ec906001904290309060040161998d565b6020604051808303818588803b15801561660557600080fd5b505af1158015616619573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061663e9190618680565b92506146bf565b876001600160a01b0316866001600160a01b03161415616751576166736001600160a01b03881682876171e7565b6040516395e3c50b60e01b81526001600160a01b038216906395e3c50b906166a4908890600190429060040161a040565b602060405180830381600087803b1580156166be57600080fd5b505af11580156166d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906166f69190618680565b9250876001600160a01b031663d0e30db0846040518263ffffffff1660e01b81526004016000604051808303818588803b15801561673357600080fd5b505af1158015616747573d6000803e3d6000fd5b50505050506146bf565b6167656001600160a01b03881682876171e7565b60405163ddf7e1a760e01b81526001600160a01b0382169063ddf7e1a790615c23908890600190819042908d9060040161a014565b6000806060846001600160a01b03166370a0823160e01b856040516024016167c2919061920c565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b031990941693909317909252905161680091906191f0565b600060405180830381855afa9150503d806000811461683b576040519150601f19603f3d011682016040523d82523d6000602084013e616840565b606091505b509150915081801561685457506020815110155b156141c8576168648160006159d0565b95945050505050565b60006168776178e5565b8280602001905181019061688b9190618dc8565b90506000856001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016168bb919061920c565b60206040518083038186803b1580156168d357600080fd5b505afa1580156168e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061690b9190618680565b82516020840151919250906001600160a01b0389811691161415616a13576169ae816001600160a01b03166301664f666040518163ffffffff1660e01b815260040160206040518083038186803b15801561696557600080fd5b505afa158015616979573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061699d919061801e565b6001600160a01b038a1690886171e7565b604051634acc893b60e11b81526001600160a01b038216906395991276906169dc9030908a90600401619220565b600060405180830381600087803b1580156169f657600080fd5b505af1158015616a0a573d6000803e3d6000fd5b50505050616bc1565b82602001516001600160a01b0316876001600160a01b03161415616bc1576000616ab6826001600160a01b031663fae036d56040518163ffffffff1660e01b815260040160206040518083038186803b158015616a6f57600080fd5b505afa158015616a83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190616aa79190618680565b670de0b6b3a764000090617327565b90506000886001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015616af357600080fd5b505afa158015616b07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190616b2b9190618f5e565b60ff16600a0a90506000616b4383614d3b8b856172f6565b8651909150616b5d906001600160a01b038d16908b6171e7565b604051638d7ef9bb60e01b81526001600160a01b03851690638d7ef9bb90616b8b9030908590600401619220565b600060405180830381600087803b158015616ba557600080fd5b505af1158015616bb9573d6000803e3d6000fd5b505050505050505b615c7582886001600160a01b03166370a08231306040518263ffffffff1660e01b815260040161595b919061920c565b60008060008084806020019051810190616c0b9190618813565b91945092509050616c266001600160a01b03881683886171e7565b8015616cc35760408051600081526020810191829052638dae733360e01b9091526001600160a01b03831690638dae733390616c6a90899060019060248101619ff5565b602060405180830381600087803b158015616c8457600080fd5b505af1158015616c98573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190616cbc9190618680565b9350616dd5565b60405163ca19ebd960e01b81526001600160a01b0384169063ca19ebd990616cf19085908a90600401619220565b60206040518083038186803b158015616d0957600080fd5b505afa158015616d1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190616d419190618680565b6040805160008152602081019182905263733e738360e11b9091529094506001600160a01b0383169063e67ce70690616d819087908a9060248101619ff5565b602060405180830381600087803b158015616d9b57600080fd5b505af1158015616daf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190616dd39190618680565b505b5050509392505050565b600080606083806020019051810190616df89190618882565b9092509050616e116001600160a01b038816838761770a565b6040516319740ac160e21b81526001600160a01b038316906365d02b0490616e46908a908a90309060019088906004016197c5565b602060405180830381600087803b158015616e6057600080fd5b505af1158015616e74573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190616e989190618680565b979650505050505050565b60008082806020019051810190616eba919061801e565b9050616ed06001600160a01b03871682866171e7565b60405163d5bcb9b560e01b81526001600160a01b0382169063d5bcb9b590614c65908990899089906001903090600401619828565b6000806060856001600160a01b031663dd62ed3e60e01b8686604051602401616f2f929190619239565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051616f6d91906191f0565b600060405180830381855afa9150503d8060008114616fa8576040519150601f19603f3d011682016040523d82523d6000602084013e616fad565b606091505b5091509150818015616fc157506020815110155b15615de857612cb28160006159d0565b600080600083806020019051810190616fea9190618854565b90925090506170036001600160a01b038716838761770a565b8061708b57604051636ec9facd60e11b81526001600160a01b0383169063dd93f59a9061703490309060040161920c565b602060405180830381600087803b15801561704e57600080fd5b505af1158015617062573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906170869190618680565b612cb2565b604051632f58056d60e21b81526001600160a01b0383169063bd6015b490614c6590309060040161920c565b606081516001600160401b03811180156170d057600080fd5b506040519080825280602002602001820160405280156170fa578160200160208202803683370190505b50905060005b82518110156122955782600182855103038151811061711b57fe5b602002602001015182828151811061712f57fe5b6001600160a01b0390921660209283029190910190910152600101617100565b606081516001600160401b038111801561716857600080fd5b50604051908082528060200260200182016040528015617192578160200160208202803683370190505b50905060005b8251811015612295578260018285510303815181106171b357fe5b60200260200101518282815181106171c757fe5b6001600160a01b0390921660209283029190910190910152600101617198565b604051636eb1769f60e11b815281906001600160a01b0385169063dd62ed3e906172179030908790600401619239565b60206040518083038186803b15801561722f57600080fd5b505afa158015617243573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906172679190618680565b10156159cb576159cb838360001961776b565b6000831580617287575081155b80617290575082155b1561729d57506000612b05565b838202828582816172aa57fe5b04146172ba576000915050612b05565b83600185038201816172c857fe5b0495945050505050565b6000828211156172f0576172f06172eb60028585617788565b615502565b50900390565b600082617305575060006141cb565b8282028284828161731257fe5b0414612b0557612b056172eb60018686617788565b600082820183811015612b0557612b056172eb60008686617788565b600081617359576173596172eb60038585617788565b600082848161736457fe5b04949350505050565b6000813b80617380576000915050611009565b50816001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b1580156173ba57600080fd5b505afa1580156173ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906173f2919061801e565b6001600160a01b03166370a08231836040518263ffffffff1660e01b815260040161741d919061920c565b60206040518083038186803b15801561743557600080fd5b505afa158015617449573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061746d9190618680565b61747957506000611009565b816001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b1580156174b257600080fd5b505afa1580156174c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906174ea919061801e565b6001600160a01b03166370a08231836040518263ffffffff1660e01b8152600401617515919061920c565b60206040518083038186803b15801561752d57600080fd5b505afa158015617541573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906175659190618680565b61757157506000611009565b506001919050565b8160200183511015617598576175986172eb60058551856020016177e2565b910160200152565b600081602001835110156175c1576175c16172eb60058551856020016177e2565b50016020015190565b6000846001600160a01b0316836001600160a01b031614617666576040516303795fb160e11b81526001600160a01b038516906306f2bf629061761190869060040161920c565b60206040518083038186803b15801561762957600080fd5b505afa15801561763d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190617661919061801e565b6176e2565b6040516303795fb160e11b81526001600160a01b038516906306f2bf629061769290859060040161920c565b60206040518083038186803b1580156176aa57600080fd5b505afa1580156176be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906176e2919061801e565b90506001600160a01b038116610ffc5760405162461bcd60e51b81526004016112ec906199f0565b606063a9059cbb60e01b8383604051602401617727929190619220565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915290506177658482617801565b50505050565b606063095ea7b360e01b8383604051602401617727929190619220565b606063e946c1bb60e01b8484846040516024016177a793929190619939565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915290509392505050565b6060632800659560e01b8484846040516024016177a79392919061995a565b60006060836001600160a01b03168360405161781d91906191f0565b6000604051808303816000865af19150503d806000811461785a576040519150601f19603f3d011682016040523d82523d6000602084013e61785f565b606091505b509150915081801561787557506178758161788e565b1561788157505061788a565b61776581615502565b5050565b60008151600014156178a257506001611009565b60208251106110095760006178b88360006159d0565b90508060011415612295576001915050611009565b60408051808201909152606081526000602082015290565b604080518082019091526000808252602082015290565b604051806040016040528060008152602001606081525090565b6040805160608101909152600080825260208201908152600060209091015290565b6040518060a001604052806000815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b03168152602001606081525090565b6040805160808101825260008082526020820181905260609282018390529181019190915290565b60405180606001604052806003906020820280368337509192915050565b60408051608081018252600080825260208201819052918101829052606081019190915290565b6040805160c0810190915260008082526020820190815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160008152602001606081525090565b80356141cb8161a13b565b600082601f830112617a53578081fd5b8135617a66617a618261a0c0565b61a09a565b818152915060208083019084810181840286018201871015617a8757600080fd5b60005b84811015617aaf578135617a9d8161a13b565b84529282019290820190600101617a8a565b505050505092915050565b600082601f830112617aca578081fd5b8151617ad8617a618261a0c0565b818152915060208083019084810181840286018201871015617af957600080fd5b60005b84811015617aaf578151617b0f8161a13b565b84529282019290820190600101617afc565b600082601f830112617b31578081fd5b8135617b3f617a618261a0c0565b818152915060208083019084810160005b84811015617aaf57617b67888484358a0101617a43565b84529282019290820190600101617b50565b600082601f830112617b89578081fd5b8135617b97617a618261a0c0565b818152915060208083019084810160005b84811015617aaf57617bbf888484358a0101617d68565b84529282019290820190600101617ba8565b600082601f830112617be1578081fd5b8135617bef617a618261a0c0565b818152915060208083019084810181840286018201871015617c1057600080fd5b60005b84811015617aaf578135617c268161a13b565b84529282019290820190600101617c13565b600082601f830112617c48578081fd5b8135617c56617a618261a0c0565b8181529150602080830190848101608080850287018301881015617c7957600080fd5b60005b85811015617ca057617c8e8984617f83565b85529383019391810191600101617c7c565b50505050505092915050565b600082601f830112617cbc578081fd5b8135617cca617a618261a0c0565b818152915060208083019084810181840286018201871015617ceb57600080fd5b60005b84811015617aaf57813584529282019290820190600101617cee565b600082601f830112617d1a578081fd5b8151617d28617a618261a0c0565b818152915060208083019084810181840286018201871015617d4957600080fd5b60005b84811015617aaf57815184529282019290820190600101617d4c565b600082601f830112617d78578081fd5b8135617d86617a618261a0df565b9150808252836020828501011115617d9d57600080fd5b8060208401602084013760009082016020015292915050565b600082601f830112617dc6578081fd5b8151617dd4617a618261a0df565b9150808252836020828501011115617deb57600080fd5b611e9181602084016020860161a102565b8051600281106141cb57600080fd5b600060a08284031215617e1c578081fd5b617e2660a061a09a565b9050813581526020820135617e3a8161a13b565b60208201526040820135617e4d8161a13b565b60408201526060820135617e608161a13b565b606082015260808201356001600160401b03811115617e7e57600080fd5b617e8a84828501617d68565b60808301525092915050565b6000610180808385031215617ea9578182fd5b617eb28161a09a565b915050617ebf8383617a38565b8152617ece8360208401617a38565b6020820152617ee08360408401617fe0565b6040820152617ef28360608401617fe0565b6060820152617f048360808401617fe0565b6080820152617f168360a08401617a38565b60a0820152617f288360c08401617a38565b60c0820152617f3a8360e08401617a38565b60e0820152610100617f4e84828501617a38565b908201526101208281013590820152610140617f6c84828501617feb565b818301525061016080830135818301525092915050565b600060808284031215617f94578081fd5b617f9e608061a09a565b9050813560048110617faf57600080fd5b81526020820135617fbf8161a198565b80602083015250604082013560408201526060820135606082015292915050565b80356141cb8161a183565b80356001600160401b03811681146141cb57600080fd5b600060208284031215618013578081fd5b8135612b058161a13b565b60006020828403121561802f578081fd5b8151612b058161a13b565b60008060006060848603121561804e578182fd5b83516180598161a13b565b60208501519093506001600160401b0380821115618075578384fd5b61808187838801617aba565b93506040860151915080821115618096578283fd5b506180a386828701617aba565b9150509250925092565b600080600080608085870312156180c2578182fd5b84356180cd8161a13b565b935060208501356180dd8161a13b565b925060408501356180ed8161a13b565b915060608501356001600160401b03811115618107578182fd5b61811387828801617cac565b91505092959194509250565b60008060008060808587031215618134578182fd5b843561813f8161a13b565b9350602085013561814f8161a13b565b925060408501356001600160401b03811115618169578283fd5b61817587828801617d68565b949793965093946060013593505050565b60008060006060848603121561819a578081fd5b83356181a58161a13b565b925060208401356001600160401b03808211156181c0578283fd5b6181cc87838801617a43565b935060408601359150808211156181e1578283fd5b506180a386828701617cac565b600080600080600060a08688031215618205578283fd5b85356182108161a13b565b94506020860135935060408601356182278161a13b565b925060608601356182378161a13b565b915060808601356001600160401b03811115618251578182fd5b61825d88828901617cac565b9150509295509295909350565b60006020828403121561827b578081fd5b81516001600160401b03811115618290578182fd5b610ffc84828501617aba565b6000806000606084860312156182b0578081fd5b83516001600160401b03808211156182c6578283fd5b818601915086601f8301126182d9578283fd5b81516182e7617a618261a0c0565b80828252602080830192508086018b828387028901011115618307578788fd5b8796505b8487101561832957805184526001969096019592810192810161830b565b508901519097509350505080821115618340578283fd5b5061834d86828701617d0a565b92505061835d8560408601617dfc565b90509250925092565b60008060208385031215618378578182fd5b82356001600160401b038082111561838e578384fd5b818501915085601f8301126183a1578384fd5b8135818111156183af578485fd5b86602080830285010111156183c2578485fd5b60209290920196919550909350505050565b6000806000606084860312156183e8578081fd5b83356001600160401b03808211156183fe578283fd5b61840a87838801617b79565b9450602086013591508082111561841f578283fd5b5061842c86828701617b79565b925050604084013590509250925092565b60006020828403121561844e578081fd5b81356001600160401b03811115618463578182fd5b610ffc84828501617bd1565b60008060408385031215618481578182fd5b82356001600160401b03811115618496578283fd5b6184a285828601617bd1565b92505060208301356184b38161a13b565b809150509250929050565b6000806000606084860312156184d2578081fd5b83356001600160401b038111156184e7578182fd5b6184f386828701617bd1565b93505060208401356185048161a13b565b915060408401356185148161a13b565b809150509250925092565b600080600060608486031215618533578081fd5b83356001600160401b0380821115618549578283fd5b818601915086601f83011261855c578283fd5b813561856a617a618261a0c0565b80828252602080830192508086016101808c838288028a0101111561858d578889fd5b8897505b858810156185b9576185a38d83617e96565b8552600197909701969382019390810190618591565b509198508901359450505050808211156185d1578283fd5b506185de86828701617c38565b92505061835d8560408601617a38565b6000602082840312156185ff578081fd5b81516001600160401b03811115618614578182fd5b610ffc84828501617d0a565b60008060408385031215618632578182fd5b82516001600160401b0380821115618648578384fd5b61865486838701617d0a565b93506020850151915080821115618669578283fd5b5061867685828601617d0a565b9150509250929050565b600060208284031215618691578081fd5b5051919050565b600080600080600060a086880312156186af578283fd5b85356186ba8161a15e565b945060208601356186ca8161a13b565b935060408601356186da8161a13b565b925060608601356001600160401b03808211156186f5578283fd5b61870189838a01617d68565b93506080880135915080821115618716578283fd5b5061825d88828901617cac565b600080600080600060a0868803121561873a578283fd5b85356187458161a15e565b945060208601356187558161a13b565b935060408601356187658161a13b565b925060608601356001600160401b0381111561877f578182fd5b61878b88828901617d68565b95989497509295608001359392505050565b6000602082840312156187ae578081fd5b81516001600160401b038111156187c3578182fd5b610ffc84828501617db6565b600080604083850312156187e1578182fd5b82516187ec8161a13b565b60208401519092506001600160401b03811115618807578182fd5b61867685828601617aba565b600080600060608486031215618827578081fd5b83516188328161a13b565b60208501519093506188438161a13b565b60408501519092506185148161a150565b60008060408385031215618866578182fd5b82516188718161a13b565b60208401519092506184b38161a150565b60008060408385031215618894578182fd5b825161889f8161a13b565b60208401519092506001600160401b038111156188ba578182fd5b61867685828601617db6565b600080600080608085870312156188db578182fd5b84356188e68161a13b565b935060208501356188f68161a13b565b925060408501356001600160401b0380821115618911578384fd5b61891d88838901617bd1565b93506060870135915080821115618932578283fd5b5061811387828801617cac565b600060408284031215618950578081fd5b61895a604061a09a565b82516189658161a13b565b81526020928301519281019290925250919050565b60008060008084860360a0811215618990578283fd5b604081121561899d578283fd5b506189a8604061a09a565b85356189b38161a13b565b815260208681013590820152935060408501356189cf8161a13b565b925060608501356189df8161a13b565b915060808501356001600160401b03811115618107578182fd5b60008060008060808587031215618a0e578182fd5b84356001600160401b0380821115618a24578384fd5b9086019060408289031215618a37578384fd5b618a41604061a09a565b618a4b8984617a38565b8152602083013582811115618a5e578586fd5b618a6a8a828601617b21565b60208301525080965050618a818860208901617a38565b945061891d8860408901617a38565b600060808284031215618aa1578081fd5b618aab608061a09a565b8251618ab68161a13b565b81526020830151618ac68161a15e565b60208201526040830151618ad98161a174565b60408201526060830151618aec8161a174565b60608201529392505050565b60008060008084860360e0811215618b0e578283fd5b6080811215618b1b578283fd5b50618b26608061a09a565b8535618b318161a13b565b81526020860135618b418161a15e565b60208201526040860135618b548161a174565b60408201526060860135618b678161a174565b60608201529350618b7b8660808701617a38565b9250618b8a8660a08701617a38565b915060c08501356001600160401b03811115618107578182fd5b60008060008084860360a0811215618bba578283fd5b6040811215618bc7578283fd5b50618bd2604061a09a565b8535618bdd8161a13b565b81526020860135618bed8161a13b565b6020820152935060408501356189cf8161a13b565b600060208284031215618c13578081fd5b81516001600160401b0380821115618c29578283fd5b9083019060a08286031215618c3c578283fd5b618c4660a061a09a565b825181526020830151618c588161a13b565b60208201526040830151618c6b8161a13b565b60408201526060830151618c7e8161a13b565b6060820152608083015182811115618c94578485fd5b618ca087828601617db6565b60808301525095945050505050565b60008060008060808587031215618cc4578182fd5b84356001600160401b0380821115618cda578384fd5b618ce688838901617e0b565b955060208701359150618cf88261a13b565b909350604086013590618d0a8261a13b565b90925060608601359080821115618932578283fd5b60008060008060808587031215618d34578182fd5b84356001600160401b03811115618d49578283fd5b618d5587828801617e0b565b945050602085013592506040850135618d6d8161a13b565b91506060850135618d7d8161a13b565b939692955090935050565b60008060006102208486031215618d9d578081fd5b618da78585617e96565b9250618db7856101808601617f83565b91506102008401356185148161a13b565b600060408284031215618dd9578081fd5b618de3604061a09a565b8251618dee8161a13b565b81526020830151618dfe8161a13b565b60208201529392505050565b60008060008084860360c0811215618e20578283fd5b6060811215618e2d578283fd5b50618e38606061a09a565b8535618e438161a13b565b8152602086810135908201526040860135618e5d8161a13b565b604082015293506060850135618e728161a13b565b92506080850135618e828161a13b565b915060a08501356001600160401b03811115618107578182fd5b600080600083850360a0811215618eb1578182fd5b6060811215618ebe578182fd5b50618ec9606061a09a565b84518152602085015160058110618ede578283fd5b60208201526040850151618ef18161a183565b60408201526060850151909350618f078161a183565b60808501519092506185148161a150565b600060208284031215618f29578081fd5b815162ffffff81168114612b05578182fd5b60008060408385031215618f4d578182fd5b505080516020909101519092909150565b600060208284031215618f6f578081fd5b8151612b058161a198565b6001600160a01b03169052565b6000815180845260208085019450808401835b83811015618fbf5781516001600160a01b031687529582019590820190600101618f9a565b509495945050505050565b6000815180845260208085019450808401835b83811015618fbf57815187529582019590820190600101618fdd565b6000815180845261901181602086016020860161a102565b601f01601f19169290920160200192915050565b80516001600160a01b039081168352602080830151151590840152604080830151909116908301526060908101511515910152565b600081518352602082015160406020850152610ffc6040850182618ff9565b600081518352602082015160018060a01b0380821660208601528060408501511660408601528060608501511660608601525050608082015160a06080850152610ffc60a0850182618ff9565b6190d1828251618f7a565b60208101516190e36020840182618f7a565b5060408101516190f660408401826191c6565b50606081015161910960608401826191c6565b50608081015161911c60808401826191c6565b5060a081015161912f60a0840182618f7a565b5060c081015161914260c0840182618f7a565b5060e081015161915560e0840182618f7a565b506101008082015161916982850182618f7a565b5050610120818101519083015261014080820151619189828501826191d3565b505061016090810151910152565b80516191a28161a12e565b825260208181015160ff169083015260408082015190830152606090810151910152565b6001600160801b03169052565b6001600160401b03169052565b6000828483379101908152919050565b6000825161920281846020870161a102565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039384168152919092166020820152901515604082015260600190565b6001600160a01b038581168252841660208201528215156040820152608060608201819052600090612cb290830184618ff9565b6001600160a01b038581168252841660208201526080604082018190526000906192d790830185618ff9565b905082606083015295945050505050565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b0383168152604060208201819052600090610ffc90830184618f87565b6001600160a01b038416815260606020820181905260009061935490830185618f87565b8281036040840152612cb28185618f87565b6001600160a01b038516815260806020820181905260009061938a90830186618f87565b828103604084015261939c8186618fca565b90508281036060840152616e988185618fca565b6001600160a01b03841681526060602082018190526000906193d490830185618fca565b8281036040840152612cb28185618fca565b6001600160a01b039290921682521515602082015260400190565b6001600160a01b0383168152604060208201819052600090610ffc90830184618ff9565b6001600160a01b0385168152600061943c8561a12e565b846020830152608060408301526194566080830185618fca565b8281036060840152616e988185618fca565b6001600160a01b038981168252600090610100906194858b61a12e565b8a602085015281604085015261949d8285018b618fca565b915083820360608501526194b1828a618fca565b908816608085015290506194c48661a12e565b8560a084015282810360c08401526194dc8186618fca565b905082810360e08401526159b18185618fca565b6000606082526195036060830186618f87565b82810360208401526195158186618fca565b90508281036040840152612cb28185618fca565b60006040825261953c6040830185618f87565b90508260208301529392505050565b60006060820160608352808651808352608085019150602092506080838202860101838901855b838110156195a057607f1988840301855261958e838351618ff9565b94860194925090850190600101619572565b5050858103848701526195b38189618fca565b93505050508281036040840152612cb28185618fca565b600060c082526195dd60c0830189618f87565b60208301979097525060408101949094526001600160a01b0392831660608501529116608083015260a090910152919050565b60208082528251828201819052600091906040908185019080840286018301878501865b8381101561967757888303603f190185528151805187855261965888860182618ff9565b9189015115159489019490945294870194925090860190600101619634565b509098975050505050505050565b600060208252612b056020830184618fca565b6000604082526196ab6040830185618fca565b82810360208401526168648185618fca565b901515815260200190565b84151581526001600160a01b038416602082015260806040820181905260009061945690830185618fca565b90815260200190565b60008582526080602083015261938a6080830186618ff9565b6001600160e01b0319861681526001600160a01b0385811660208301528416604082015260a06060820181905260009061975290830185618ff9565b8281036080840152615c758185618fca565b6001600160e01b0319861681526001600160a01b0385811660208301528416604082015260a0606082018190526000906197a090830185618ff9565b90508260808301529695505050505050565b600060208252612b056020830184618ff9565b6001600160a01b0386811682528581166020830152841660408201526060810183905260a060808201819052600090616e9890830184618ff9565b6001600160a01b03938416815291909216602082015262ffffff909116604082015260600190565b6001600160a01b039586168152938516602085015260408401929092526060830152909116608082015260a00190565b6001600160a01b03958616815293909416602084015260408301919091526060820152608081019190915260a00190565b6001600160a01b03898116825260208201899052878116604083015286811660608301526080820186905260a08201859052831660c082015261010060e082018190526000906159b183820185618ff9565b6001600160a01b039485168152602081019390935292166040820152606081019190915260800190565b6001600160a01b03958616815260208101949094529190931660408301526060820192909252608081019190915260a00190565b606081016199468561a12e565b938152602081019290925260409091015290565b606081016008851061994657fe5b600f94850b81529290930b6020830152604082015260ff909116606082015260800190565b92835260208301919091526001600160a01b0316604082015260600190565b60208082526024908201527f556e6973776170563353616d706c65722f746f6b656e5061746820746f6f20736040820152631a1bdc9d60e21b606082015260800190565b60208082526018908201527f4d6978696e556e69737761702f4e4f5f45584348414e47450000000000000000604082015260600190565b6020808252602c908201527f4d6978696e42616e636f722f504154485f4c454e4754485f4d5553545f42455f60408201526b41545f4c454153545f54574f60a01b606082015260800190565b6020808252603a908201527f4d6978696e4b79626572446d6d2f4c4153545f454c454d454e545f4f465f504160408201527f54485f4d5553545f4d415443485f4f55545055545f544f4b454e000000000000606082015260800190565b60208082526025908201527f556e6973776170563353616d706c65722f696e76616c69642070617468206c656040820152646e6774687360d81b606082015260800190565b6020808252602f908201527f4d6978696e556e697377617056322f504154485f4c454e4754485f4d5553545f60408201526e42455f41545f4c454153545f54574f60881b606082015260800190565b60208082526023908201527f4d6978696e4b79626572446d6d2f41525241595f4c454e4754485f4d49534d416040820152620a886960eb1b606082015260800190565b6020808252818101527f537761702053616d706c652073686f756c642068617665207265766572746564604082015260600190565b60208082526038908201527f4d6978696e42616e636f722f4c4153545f454c454d454e545f4f465f5041544860408201527f5f4d5553545f4d415443485f4f55545055545f544f4b454e0000000000000000606082015260800190565b6020808252602f908201527f4d6978696e4b79626572446d6d2f504f4f4c535f4c454e4754485f4d5553545f60408201526e42455f41545f4c454153545f4f4e4560881b606082015260800190565b6020808252603b908201527f4d6978696e556e697377617056322f4c4153545f454c454d454e545f4f465f5060408201527f4154485f4d5553545f4d415443485f4f55545055545f544f4b454e0000000000606082015260800190565b81516001600160a01b031681526020918201519181019190915260400190565b81516001600160a01b031681526020808301516001600160e01b03191690820152604080830151600f90810b91830191909152606092830151900b9181019190915260800190565b600060208252825160a06020840152619d6960c0840182618ff9565b905060018060a01b0360208501511660408401526040840151606084015260608401516080840152608084015160a08401528091505092915050565b600060608252619db8606083018661905a565b8281036020840152619dca818661905a565b915050826040830152949350505050565b600060808252619dee608083018761905a565b8281036020840152619e00818761905a565b604084019590955250506060015292915050565b600060208252612b056020830184619079565b600060808252619e3a6080830187619079565b6020830195909552506001600160a01b0392831660408201529116606090910152919050565b6102008101619e6f82856190c6565b612b05610180830184619197565b6102208101619e8c82866190c6565b619e9a610180830185619197565b6001600160a01b0392909216610200919091015292915050565b81516001600160a01b039081168252602092830151169181019190915260400190565b600060e08252855160e0830152602086015160028110619ef357fe5b6101008301526040860151619f0c610120840182618f7a565b506060860151619f20610140840182618f7a565b50608086015161016083015260a086015160c0610180840152619f476101a0840182618ff9565b915050619f576020830186619025565b60a082019390935260c0015292915050565b600087825286602083015260c06040830152619f8860c0830187618f87565b8281036060840152619f9a8187618f87565b6001600160a01b03959095166080840152505060a00152949350505050565b600086825285602083015260a06040830152619fd860a0830186618f87565b6001600160a01b0394909416606083015250608001529392505050565b600084825283602083015260606040830152610ff96060830184618ff9565b9485526020850193909352604084019190915260608301526001600160a01b0316608082015260a00190565b9283526020830191909152604082015260600190565b6000808335601e1984360301811261a06c578283fd5b8301803591506001600160401b0382111561a085578283fd5b60200191503681900382131561429b57600080fd5b6040518181016001600160401b038111828210171561a0b857600080fd5b604052919050565b60006001600160401b0382111561a0d5578081fd5b5060209081020190565b60006001600160401b0382111561a0f4578081fd5b50601f01601f191660200190565b60005b8381101561a11d57818101518382015260200161a105565b838111156177655750506000910152565b6004811061a13857fe5b50565b6001600160a01b038116811461a13857600080fd5b801515811461a13857600080fd5b6001600160e01b03198116811461a13857600080fd5b80600f0b811461a13857600080fd5b6001600160801b038116811461a13857600080fd5b60ff8116811461a13857600080fdfea2646970667358221220bdcfdb4e5be1292ba14499ca5fa661a2fd336bce94f5d892b3195f8d2618f94b64736f6c634300060c0033",
                "opcodes": "PUSH2 0x160 PUSH1 0x40 MSTORE PUSH32 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE000000000000000000000000 PUSH1 0xC0 DUP2 SWAP1 MSTORE PUSH2 0x140 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x3C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0xA2ED CODESIZE SUB DUP1 PUSH3 0xA2ED DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x5F SWAP2 PUSH3 0x8B JUMP JUMPDEST PUSH1 0x60 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT AND PUSH1 0x80 DUP2 SWAP1 MSTORE PUSH1 0xA0 DUP2 SWAP1 MSTORE PUSH1 0xE0 DUP2 SWAP1 MSTORE PUSH2 0x100 DUP2 SWAP1 MSTORE PUSH2 0x120 MSTORE PUSH3 0xBB JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x9D JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0xB4 JUMPI DUP2 DUP3 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0x60 SHR PUSH1 0xA0 MLOAD PUSH1 0x60 SHR PUSH1 0xC0 MLOAD PUSH1 0x60 SHR PUSH1 0xE0 MLOAD PUSH1 0x60 SHR PUSH2 0x100 MLOAD PUSH1 0x60 SHR PUSH2 0x120 MLOAD PUSH1 0x60 SHR PUSH2 0x140 MLOAD PUSH1 0x60 SHR PUSH2 0xA1DD PUSH3 0x110 PUSH1 0x0 CODECOPY DUP1 PUSH2 0x21FC MSTORE DUP1 PUSH2 0x306B MSTORE DUP1 PUSH2 0x38A1 MSTORE POP POP POP POP POP POP POP PUSH2 0xA1DD PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x3DD JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8EFFA9EA GT PUSH2 0x1FD JUMPI DUP1 PUSH4 0xC25C4138 GT PUSH2 0x118 JUMPI DUP1 PUSH4 0xD3CDC04D GT PUSH2 0xAB JUMPI DUP1 PUSH4 0xE8E4AF09 GT PUSH2 0x7A JUMPI DUP1 PUSH4 0xE8E4AF09 EQ PUSH2 0xC45 JUMPI DUP1 PUSH4 0xF573C161 EQ PUSH2 0xC65 JUMPI DUP1 PUSH4 0xF5A4994D EQ PUSH2 0xC85 JUMPI DUP1 PUSH4 0xFA5DEF9F EQ PUSH2 0xCA5 JUMPI DUP1 PUSH4 0xFC9FE41B EQ PUSH2 0xCC5 JUMPI PUSH2 0x3E4 JUMP JUMPDEST DUP1 PUSH4 0xD3CDC04D EQ PUSH2 0xBC5 JUMPI DUP1 PUSH4 0xD9BCA372 EQ PUSH2 0xBE5 JUMPI DUP1 PUSH4 0xDDD5AA28 EQ PUSH2 0xC05 JUMPI DUP1 PUSH4 0xE78AC045 EQ PUSH2 0xC25 JUMPI PUSH2 0x3E4 JUMP JUMPDEST DUP1 PUSH4 0xC94706D8 GT PUSH2 0xE7 JUMPI DUP1 PUSH4 0xC94706D8 EQ PUSH2 0xB45 JUMPI DUP1 PUSH4 0xCC1621C9 EQ PUSH2 0xB65 JUMPI DUP1 PUSH4 0xCD85E7B5 EQ PUSH2 0xB85 JUMPI DUP1 PUSH4 0xD31B0A8A EQ PUSH2 0xBA5 JUMPI PUSH2 0x3E4 JUMP JUMPDEST DUP1 PUSH4 0xC25C4138 EQ PUSH2 0xAC5 JUMPI DUP1 PUSH4 0xC7DD6C4F EQ PUSH2 0xAE5 JUMPI DUP1 PUSH4 0xC8319084 EQ PUSH2 0xB05 JUMPI DUP1 PUSH4 0xC8C74A37 EQ PUSH2 0xB25 JUMPI PUSH2 0x3E4 JUMP JUMPDEST DUP1 PUSH4 0xAB000276 GT PUSH2 0x190 JUMPI DUP1 PUSH4 0xB90CD2FB GT PUSH2 0x15F JUMPI DUP1 PUSH4 0xB90CD2FB EQ PUSH2 0xA45 JUMPI DUP1 PUSH4 0xBC4F55BA EQ PUSH2 0xA65 JUMPI DUP1 PUSH4 0xBD71ECF6 EQ PUSH2 0xA85 JUMPI DUP1 PUSH4 0xBF60384B EQ PUSH2 0xAA5 JUMPI PUSH2 0x3E4 JUMP JUMPDEST DUP1 PUSH4 0xAB000276 EQ PUSH2 0x9B6 JUMPI DUP1 PUSH4 0xAB3E6210 EQ PUSH2 0x9D6 JUMPI DUP1 PUSH4 0xADC636BF EQ PUSH2 0x9F6 JUMPI DUP1 PUSH4 0xB770F849 EQ PUSH2 0xA25 JUMPI PUSH2 0x3E4 JUMP JUMPDEST DUP1 PUSH4 0x9E3F05C3 GT PUSH2 0x1CC JUMPI DUP1 PUSH4 0x9E3F05C3 EQ PUSH2 0x926 JUMPI DUP1 PUSH4 0xA095A036 EQ PUSH2 0x956 JUMPI DUP1 PUSH4 0xA4698417 EQ PUSH2 0x976 JUMPI DUP1 PUSH4 0xA75E744B EQ PUSH2 0x996 JUMPI PUSH2 0x3E4 JUMP JUMPDEST DUP1 PUSH4 0x8EFFA9EA EQ PUSH2 0x8A6 JUMPI DUP1 PUSH4 0x98777748 EQ PUSH2 0x8C6 JUMPI DUP1 PUSH4 0x9AD732EF EQ PUSH2 0x8E6 JUMPI DUP1 PUSH4 0x9BF3EE35 EQ PUSH2 0x906 JUMPI PUSH2 0x3E4 JUMP JUMPDEST DUP1 PUSH4 0x5D5B674F GT PUSH2 0x2F8 JUMPI DUP1 PUSH4 0x78FEE41C GT PUSH2 0x28B JUMPI DUP1 PUSH4 0x7FEA2AE1 GT PUSH2 0x25A JUMPI DUP1 PUSH4 0x7FEA2AE1 EQ PUSH2 0x7F4 JUMPI DUP1 PUSH4 0x8D201C22 EQ PUSH2 0x814 JUMPI DUP1 PUSH4 0x8D8ABDF0 EQ PUSH2 0x834 JUMPI DUP1 PUSH4 0x8DC669FA EQ PUSH2 0x854 JUMPI DUP1 PUSH4 0x8E5A0E07 EQ PUSH2 0x876 JUMPI PUSH2 0x3E4 JUMP JUMPDEST DUP1 PUSH4 0x78FEE41C EQ PUSH2 0x774 JUMPI DUP1 PUSH4 0x7A82DCB9 EQ PUSH2 0x794 JUMPI DUP1 PUSH4 0x7E105CE2 EQ PUSH2 0x7B4 JUMPI DUP1 PUSH4 0x7F7F4F13 EQ PUSH2 0x7D4 JUMPI PUSH2 0x3E4 JUMP JUMPDEST DUP1 PUSH4 0x6A33BC7E GT PUSH2 0x2C7 JUMPI DUP1 PUSH4 0x6A33BC7E EQ PUSH2 0x6E5 JUMPI DUP1 PUSH4 0x706E2F9B EQ PUSH2 0x714 JUMPI DUP1 PUSH4 0x7280BFFF EQ PUSH2 0x734 JUMPI DUP1 PUSH4 0x74C9D255 EQ PUSH2 0x754 JUMPI PUSH2 0x3E4 JUMP JUMPDEST DUP1 PUSH4 0x5D5B674F EQ PUSH2 0x665 JUMPI DUP1 PUSH4 0x66A1AC6B EQ PUSH2 0x685 JUMPI DUP1 PUSH4 0x686B7EE8 EQ PUSH2 0x6A5 JUMPI DUP1 PUSH4 0x68BE3CF2 EQ PUSH2 0x6C5 JUMPI PUSH2 0x3E4 JUMP JUMPDEST DUP1 PUSH4 0x2AA64319 GT PUSH2 0x370 JUMPI DUP1 PUSH4 0x4EDFB5B2 GT PUSH2 0x33F JUMPI DUP1 PUSH4 0x4EDFB5B2 EQ PUSH2 0x5D8 JUMPI DUP1 PUSH4 0x57494B1D EQ PUSH2 0x605 JUMPI DUP1 PUSH4 0x59AB9A6C EQ PUSH2 0x625 JUMPI DUP1 PUSH4 0x5C71CBE7 EQ PUSH2 0x645 JUMPI PUSH2 0x3E4 JUMP JUMPDEST DUP1 PUSH4 0x2AA64319 EQ PUSH2 0x548 JUMPI DUP1 PUSH4 0x30D6570D EQ PUSH2 0x578 JUMPI DUP1 PUSH4 0x3105FEC1 EQ PUSH2 0x598 JUMPI DUP1 PUSH4 0x494569DB EQ PUSH2 0x5B8 JUMPI PUSH2 0x3E4 JUMP JUMPDEST DUP1 PUSH4 0x16279055 GT PUSH2 0x3AC JUMPI DUP1 PUSH4 0x16279055 EQ PUSH2 0x4AB JUMPI DUP1 PUSH4 0x1F4FF03E EQ PUSH2 0x4D8 JUMPI DUP1 PUSH4 0x252322B3 EQ PUSH2 0x4FA JUMPI DUP1 PUSH4 0x281E3432 EQ PUSH2 0x528 JUMPI PUSH2 0x3E4 JUMP JUMPDEST DUP1 PUSH4 0x496D5DC EQ PUSH2 0x3E9 JUMPI DUP1 PUSH4 0x1022742B EQ PUSH2 0x421 JUMPI DUP1 PUSH4 0x149DAB0E EQ PUSH2 0x44E JUMPI DUP1 PUSH4 0x15DE17DE EQ PUSH2 0x47E JUMPI PUSH2 0x3E4 JUMP JUMPDEST CALLDATASIZE PUSH2 0x3E4 JUMPI STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x409 PUSH2 0x404 CALLDATASIZE PUSH1 0x4 PUSH2 0x8186 JUMP JUMPDEST PUSH2 0xCF4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x418 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x94F0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x42D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x441 PUSH2 0x43C CALLDATASIZE PUSH1 0x4 PUSH2 0x851F JUMP JUMPDEST PUSH2 0xDBA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x418 SWAP2 SWAP1 PUSH2 0x9685 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x45A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x46E PUSH2 0x469 CALLDATASIZE PUSH1 0x4 PUSH2 0x89F9 JUMP JUMPDEST PUSH2 0xF2D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x418 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9366 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x48A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x49E PUSH2 0x499 CALLDATASIZE PUSH1 0x4 PUSH2 0x811F JUMP JUMPDEST PUSH2 0xFD6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x418 SWAP2 SWAP1 PUSH2 0x96F4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4B7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4CB PUSH2 0x4C6 CALLDATASIZE PUSH1 0x4 PUSH2 0x8002 JUMP JUMPDEST PUSH2 0x1004 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x418 SWAP2 SWAP1 PUSH2 0x96BD JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4E4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4F8 PUSH2 0x4F3 CALLDATASIZE PUSH1 0x4 PUSH2 0x8698 JUMP JUMPDEST PUSH2 0x100E JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x506 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x51A PUSH2 0x515 CALLDATASIZE PUSH1 0x4 PUSH2 0x80AD JUMP JUMPDEST PUSH2 0x1313 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x418 SWAP3 SWAP2 SWAP1 PUSH2 0x9698 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x534 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x51A PUSH2 0x543 CALLDATASIZE PUSH1 0x4 PUSH2 0x8E0A JUMP JUMPDEST PUSH2 0x13B0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x554 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x568 PUSH2 0x563 CALLDATASIZE PUSH1 0x4 PUSH2 0x8BA4 JUMP JUMPDEST PUSH2 0x1449 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x418 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x96C8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x584 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x51A PUSH2 0x593 CALLDATASIZE PUSH1 0x4 PUSH2 0x80AD JUMP JUMPDEST PUSH2 0x160E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x51A PUSH2 0x5B3 CALLDATASIZE PUSH1 0x4 PUSH2 0x8186 JUMP JUMPDEST PUSH2 0x1679 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x409 PUSH2 0x5D3 CALLDATASIZE PUSH1 0x4 PUSH2 0x8186 JUMP JUMPDEST PUSH2 0x171D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5E4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5F8 PUSH2 0x5F3 CALLDATASIZE PUSH1 0x4 PUSH2 0x8D1F JUMP JUMPDEST PUSH2 0x18B4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x418 SWAP2 SWAP1 PUSH2 0x97B2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x611 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x51A PUSH2 0x620 CALLDATASIZE PUSH1 0x4 PUSH2 0x80AD JUMP JUMPDEST PUSH2 0x1B39 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x631 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x49E PUSH2 0x640 CALLDATASIZE PUSH1 0x4 PUSH2 0x811F JUMP JUMPDEST PUSH2 0x1BC9 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x651 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x49E PUSH2 0x660 CALLDATASIZE PUSH1 0x4 PUSH2 0x811F JUMP JUMPDEST PUSH2 0x1BD6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x671 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x51A PUSH2 0x680 CALLDATASIZE PUSH1 0x4 PUSH2 0x80AD JUMP JUMPDEST PUSH2 0x1BE4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x691 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x441 PUSH2 0x6A0 CALLDATASIZE PUSH1 0x4 PUSH2 0x851F JUMP JUMPDEST PUSH2 0x1C74 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x49E PUSH2 0x6C0 CALLDATASIZE PUSH1 0x4 PUSH2 0x811F JUMP JUMPDEST PUSH2 0x1D29 JUMP JUMPDEST PUSH2 0x6D8 PUSH2 0x6D3 CALLDATASIZE PUSH1 0x4 PUSH2 0x8366 JUMP JUMPDEST PUSH2 0x1D37 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x418 SWAP2 SWAP1 PUSH2 0x9610 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6F1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x705 PUSH2 0x700 CALLDATASIZE PUSH1 0x4 PUSH2 0x88C6 JUMP JUMPDEST PUSH2 0x1E98 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x418 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x954B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x720 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x441 PUSH2 0x72F CALLDATASIZE PUSH1 0x4 PUSH2 0x843D JUMP JUMPDEST PUSH2 0x21A9 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x740 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x49E PUSH2 0x74F CALLDATASIZE PUSH1 0x4 PUSH2 0x811F JUMP JUMPDEST PUSH2 0x229B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x760 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x46E PUSH2 0x76F CALLDATASIZE PUSH1 0x4 PUSH2 0x89F9 JUMP JUMPDEST PUSH2 0x22A9 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x780 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4F8 PUSH2 0x78F CALLDATASIZE PUSH1 0x4 PUSH2 0x8723 JUMP JUMPDEST PUSH2 0x22B9 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7A0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x49E PUSH2 0x7AF CALLDATASIZE PUSH1 0x4 PUSH2 0x811F JUMP JUMPDEST PUSH2 0x2479 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5F8 PUSH2 0x7CF CALLDATASIZE PUSH1 0x4 PUSH2 0x8002 JUMP JUMPDEST PUSH2 0x2486 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7E0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x51A PUSH2 0x7EF CALLDATASIZE PUSH1 0x4 PUSH2 0x8E0A JUMP JUMPDEST PUSH2 0x24AD JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x800 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x51A PUSH2 0x80F CALLDATASIZE PUSH1 0x4 PUSH2 0x8AF8 JUMP JUMPDEST PUSH2 0x2584 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x820 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x49E PUSH2 0x82F CALLDATASIZE PUSH1 0x4 PUSH2 0x811F JUMP JUMPDEST PUSH2 0x265D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x840 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x51A PUSH2 0x84F CALLDATASIZE PUSH1 0x4 PUSH2 0x897A JUMP JUMPDEST PUSH2 0x2680 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x860 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x869 PUSH2 0x2710 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x418 SWAP2 SWAP1 PUSH2 0x920C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x882 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x896 PUSH2 0x891 CALLDATASIZE PUSH1 0x4 PUSH2 0x83D4 JUMP JUMPDEST PUSH2 0x2728 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x418 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9DDB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8B2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x49E PUSH2 0x8C1 CALLDATASIZE PUSH1 0x4 PUSH2 0x811F JUMP JUMPDEST PUSH2 0x293F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x51A PUSH2 0x8E1 CALLDATASIZE PUSH1 0x4 PUSH2 0x80AD JUMP JUMPDEST PUSH2 0x294C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x49E PUSH2 0x901 CALLDATASIZE PUSH1 0x4 PUSH2 0x811F JUMP JUMPDEST PUSH2 0x29B7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x912 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x49E PUSH2 0x921 CALLDATASIZE PUSH1 0x4 PUSH2 0x8D88 JUMP JUMPDEST PUSH2 0x29C5 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x932 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x946 PUSH2 0x941 CALLDATASIZE PUSH1 0x4 PUSH2 0x8CAF JUMP JUMPDEST PUSH2 0x2B0C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x418 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x96FD JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x962 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x49E PUSH2 0x971 CALLDATASIZE PUSH1 0x4 PUSH2 0x811F JUMP JUMPDEST PUSH2 0x2C43 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x982 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x51A PUSH2 0x991 CALLDATASIZE PUSH1 0x4 PUSH2 0x80AD JUMP JUMPDEST PUSH2 0x2CBC JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x9A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x568 PUSH2 0x9B1 CALLDATASIZE PUSH1 0x4 PUSH2 0x81EE JUMP JUMPDEST PUSH2 0x2D2B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x9C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x51A PUSH2 0x9D1 CALLDATASIZE PUSH1 0x4 PUSH2 0x80AD JUMP JUMPDEST PUSH2 0x2DD0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x9E2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x49E PUSH2 0x9F1 CALLDATASIZE PUSH1 0x4 PUSH2 0x811F JUMP JUMPDEST PUSH2 0x2E3B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA02 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xA16 PUSH2 0xA11 CALLDATASIZE PUSH1 0x4 PUSH2 0x80AD JUMP JUMPDEST PUSH2 0x2E5D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x418 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x93B0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA31 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x49E PUSH2 0xA40 CALLDATASIZE PUSH1 0x4 PUSH2 0x811F JUMP JUMPDEST PUSH2 0x2EFA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA51 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x51A PUSH2 0xA60 CALLDATASIZE PUSH1 0x4 PUSH2 0x80AD JUMP JUMPDEST PUSH2 0x2F1D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA71 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x51A PUSH2 0xA80 CALLDATASIZE PUSH1 0x4 PUSH2 0x897A JUMP JUMPDEST PUSH2 0x2FAD JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA91 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x441 PUSH2 0xAA0 CALLDATASIZE PUSH1 0x4 PUSH2 0x846F JUMP JUMPDEST PUSH2 0x3018 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xAB1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x51A PUSH2 0xAC0 CALLDATASIZE PUSH1 0x4 PUSH2 0x8AF8 JUMP JUMPDEST PUSH2 0x3114 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xAD1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x51A PUSH2 0xAE0 CALLDATASIZE PUSH1 0x4 PUSH2 0x80AD JUMP JUMPDEST PUSH2 0x317F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xAF1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x49E PUSH2 0xB00 CALLDATASIZE PUSH1 0x4 PUSH2 0x811F JUMP JUMPDEST PUSH2 0x3215 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x51A PUSH2 0xB20 CALLDATASIZE PUSH1 0x4 PUSH2 0x80AD JUMP JUMPDEST PUSH2 0x3223 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB31 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x51A PUSH2 0xB40 CALLDATASIZE PUSH1 0x4 PUSH2 0x8186 JUMP JUMPDEST PUSH2 0x328E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB51 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x51A PUSH2 0xB60 CALLDATASIZE PUSH1 0x4 PUSH2 0x80AD JUMP JUMPDEST PUSH2 0x33E6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB71 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x946 PUSH2 0xB80 CALLDATASIZE PUSH1 0x4 PUSH2 0x8CAF JUMP JUMPDEST PUSH2 0x3476 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB91 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x49E PUSH2 0xBA0 CALLDATASIZE PUSH1 0x4 PUSH2 0x811F JUMP JUMPDEST PUSH2 0x3588 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xBB1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x49E PUSH2 0xBC0 CALLDATASIZE PUSH1 0x4 PUSH2 0x811F JUMP JUMPDEST PUSH2 0x3595 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xBD1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x49E PUSH2 0xBE0 CALLDATASIZE PUSH1 0x4 PUSH2 0x811F JUMP JUMPDEST PUSH2 0x35A3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xBF1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x568 PUSH2 0xC00 CALLDATASIZE PUSH1 0x4 PUSH2 0x81EE JUMP JUMPDEST PUSH2 0x35B1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xC11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x568 PUSH2 0xC20 CALLDATASIZE PUSH1 0x4 PUSH2 0x8BA4 JUMP JUMPDEST PUSH2 0x366C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xC31 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x441 PUSH2 0xC40 CALLDATASIZE PUSH1 0x4 PUSH2 0x84BE JUMP JUMPDEST PUSH2 0x384E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xC51 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x51A PUSH2 0xC60 CALLDATASIZE PUSH1 0x4 PUSH2 0x80AD JUMP JUMPDEST PUSH2 0x3943 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xC71 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x49E PUSH2 0xC80 CALLDATASIZE PUSH1 0x4 PUSH2 0x811F JUMP JUMPDEST PUSH2 0x39AE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xC91 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xA16 PUSH2 0xCA0 CALLDATASIZE PUSH1 0x4 PUSH2 0x80AD JUMP JUMPDEST PUSH2 0x39BB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xCB1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x705 PUSH2 0xCC0 CALLDATASIZE PUSH1 0x4 PUSH2 0x88C6 JUMP JUMPDEST PUSH2 0x3A6D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xCD1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xCE5 PUSH2 0xCE0 CALLDATASIZE PUSH1 0x4 PUSH2 0x83D4 JUMP JUMPDEST PUSH2 0x3DB3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x418 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9DA5 JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH1 0x60 PUSH2 0xD03 DUP7 DUP7 PUSH2 0x3FD3 JUMP JUMPDEST SWAP3 POP DUP3 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0xD14 JUMPI PUSH2 0xDB1 JUMP JUMPDEST PUSH2 0xDAB PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 DUP8 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xD2F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH1 0x1 DUP10 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0xD55 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 DUP7 DUP10 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xD80 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9330 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0x7A82DCB9 OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP6 PUSH2 0x41D1 JUMP JUMPDEST SWAP1 SWAP3 POP SWAP1 POP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0xDD3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xDFD JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 EQ PUSH2 0xF25 JUMPI ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x9BF3EE35 PUSH3 0x30D40 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xE2A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0xE3E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE65 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9E7D JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xE7D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0xEAE JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0xEAB SWAP2 DUP2 ADD SWAP1 PUSH2 0x8680 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0xF02 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0xEDC JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xEE1 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xEF0 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP PUSH2 0xF1D JUMP JUMPDEST DUP1 DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xF0F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP JUMPDEST PUSH1 0x1 ADD PUSH2 0xE03 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP1 PUSH1 0x60 DUP8 PUSH1 0x20 ADD MLOAD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0xF47 JUMPI PUSH2 0xFCB JUMP JUMPDEST PUSH2 0xF53 DUP9 DUP9 DUP9 DUP9 PUSH2 0x42A2 JUMP JUMPDEST DUP1 SWAP5 POP DUP2 SWAP6 POP POP POP PUSH2 0xFC5 PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP7 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xF9A SWAP3 SWAP2 SWAP1 PUSH2 0x930C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0xAB3E6210 OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP7 PUSH2 0x41D1 JUMP JUMPDEST SWAP1 SWAP3 POP SWAP1 POP JUMPDEST SWAP5 POP SWAP5 POP SWAP5 POP SWAP5 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFF9 PUSH20 0xC02AAA39B223FE8D0A0E5C4F27EAD9083C756CC2 DUP7 DUP7 DUP6 DUP8 PUSH2 0x44D4 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP1 EXTCODESIZE ISZERO ISZERO JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP5 SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x1 DUP5 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x1025 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xE326C7D7 PUSH1 0x1 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x105C SWAP2 SWAP1 PUSH2 0x96BD JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1076 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1087 JUMPI POP PUSH1 0x1 JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0x55C37053 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0xAB86E0A6 SWAP1 PUSH2 0x10B6 SWAP1 ADDRESS SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x9220 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x10D0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x10E1 JUMPI POP PUSH1 0x1 JUMPDEST POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD0E30DB0 DUP3 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x111D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x112F JUMPI POP PUSH1 0x1 JUMPDEST POP PUSH1 0x60 DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x1149 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1173 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x60 DUP5 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x118F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x11B9 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP6 MLOAD DUP2 LT ISZERO PUSH2 0x12FD JUMPI ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x78FEE41C PUSH3 0x1E8480 DUP13 DUP13 DUP13 DUP13 DUP13 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x11EB JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP8 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1213 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9764 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x122D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP8 CALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x123F JUMPI POP PUSH1 0x1 JUMPDEST PUSH2 0x12D4 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x126D JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1272 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH2 0x127C DUP2 PUSH2 0x46CA JUMP JUMPDEST DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x1288 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP6 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x129B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP3 DUP2 MSTORE POP DUP3 DUP2 MSTORE POP POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x12B8 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x12CE JUMPI POP PUSH2 0x12FD JUMP JUMPDEST POP PUSH2 0x12F5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12EC SWAP1 PUSH2 0x9BA7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 ADD PUSH2 0x11BF JUMP JUMPDEST POP PUSH2 0x1308 DUP3 DUP3 PUSH2 0x46FF JUMP JUMPDEST POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH2 0x13A3 PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1353 SWAP2 SWAP1 PUSH2 0x920C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1378 SWAP2 SWAP1 PUSH2 0x920C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0xB770F849 OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP5 PUSH2 0x472D JUMP JUMPDEST SWAP1 SWAP8 SWAP1 SWAP7 POP SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH2 0x13A3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP11 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP11 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x141E SWAP2 SWAP1 PUSH2 0x9EB4 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0xC7DD6C4F OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP5 PUSH2 0x41D1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 DUP1 DUP8 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x1273B0C6 DUP9 DUP9 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1481 SWAP3 SWAP2 SWAP1 PUSH2 0x9239 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1499 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x14AD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x14D1 SWAP2 SWAP1 PUSH2 0x801E JUMP JUMPDEST SWAP3 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND ISZERO PUSH2 0x14EF JUMPI POP PUSH1 0x1 SWAP4 POP DUP7 PUSH2 0x158D JUMP JUMPDEST DUP9 MLOAD PUSH1 0x40 MLOAD PUSH4 0x939D863 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x1273B0C6 SWAP1 PUSH2 0x1520 SWAP1 DUP11 SWAP1 DUP13 SWAP1 PUSH1 0x4 ADD PUSH2 0x9239 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1538 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x154C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1570 SWAP2 SWAP1 PUSH2 0x801E JUMP JUMPDEST SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x1586 JUMPI POP PUSH2 0xFCB JUMP JUMPDEST POP PUSH1 0x0 SWAP4 POP DUP6 JUMPDEST PUSH2 0x15FD PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP12 PUSH1 0x20 ADD MLOAD DUP8 DUP10 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x15D2 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9253 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0xCD85E7B5 OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP8 PUSH2 0x41D1 JUMP JUMPDEST SWAP1 SWAP4 POP SWAP2 POP POP SWAP5 POP SWAP5 POP SWAP5 POP SWAP5 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH2 0x13A3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x164E SWAP2 SWAP1 PUSH2 0x920C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0xD3CDC04D OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP5 PUSH2 0x41D1 JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH2 0x1711 PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 DUP7 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1697 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH1 0x1 DUP9 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x16BD JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 DUP8 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x16E6 SWAP3 SWAP2 SWAP1 PUSH2 0x930C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0x8EFFA9EA OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP5 PUSH2 0x41D1 JUMP JUMPDEST SWAP1 SWAP7 SWAP1 SWAP6 POP SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH1 0x60 PUSH2 0x172C DUP7 DUP7 PUSH2 0x3FD3 JUMP JUMPDEST SWAP3 POP DUP3 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x173D JUMPI PUSH2 0xDB1 JUMP JUMPDEST PUSH1 0x60 DUP6 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x1756 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1780 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP7 MLOAD DUP2 LT ISZERO PUSH2 0x17D5 JUMPI DUP7 PUSH1 0x1 DUP3 DUP10 MLOAD SUB SUB DUP2 MLOAD DUP2 LT PUSH2 0x17A1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x17B5 JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE PUSH1 0x1 ADD PUSH2 0x1786 JUMP JUMPDEST POP PUSH1 0x60 PUSH2 0x17E2 DUP9 DUP4 PUSH2 0x3FD3 JUMP JUMPDEST SWAP1 POP PUSH2 0x18A4 PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP10 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x17FF JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP10 PUSH1 0x1 DUP12 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x1825 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP11 DUP9 DUP12 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1850 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9330 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP11 DUP5 DUP7 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1879 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9330 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0x7A82DCB9 OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP8 PUSH2 0x472D JUMP JUMPDEST SWAP1 SWAP5 POP SWAP3 POP POP POP SWAP4 POP SWAP4 POP SWAP4 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP5 DUP2 ADD MLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP4 DUP5 SWAP3 SWAP1 DUP3 DUP2 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP6 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x18EB JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x60 PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1923 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP8 PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x1A14 JUMPI PUSH1 0x40 MLOAD PUSH4 0x81EFCBDD PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x81EFCBDD SWAP1 PUSH3 0x7A120 SWAP1 PUSH2 0x197C SWAP1 DUP10 SWAP1 PUSH1 0x1 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x9425 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1994 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x19CA JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x19C7 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x879D JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1A04 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x19F8 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x19FD JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP PUSH2 0x1A0F JUMP JUMPDEST SWAP4 POP PUSH2 0xFFC SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x1B2E JUMP JUMPDEST DUP8 PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x1A6A JUMPI PUSH1 0x40 MLOAD PUSH4 0x61E597F9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x61E597F9 SWAP1 PUSH3 0x7A120 SWAP1 PUSH2 0x197C SWAP1 DUP11 SWAP1 PUSH1 0x1 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x9425 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x2B9A6CD PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x5734D9A SWAP1 PUSH3 0x7A120 SWAP1 PUSH2 0x1AAA SWAP1 DUP11 SWAP1 PUSH1 0x1 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP14 SWAP1 DUP5 SWAP1 DUP5 SWAP1 DUP5 SWAP1 PUSH1 0x4 ADD PUSH2 0x9468 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1AC2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x1AF8 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x1AF5 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x879D JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1A04 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x1B26 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1B2B JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP JUMPDEST POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH2 0x13A3 PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1B79 SWAP2 SWAP1 PUSH2 0x920C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1B9E SWAP2 SWAP1 PUSH2 0x920C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0x7280BFFF OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP5 PUSH2 0x472D JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFF9 DUP6 DUP4 DUP6 PUSH2 0x4BE3 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFF9 DUP6 DUP6 DUP5 DUP7 PUSH2 0x4CB7 JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH2 0x13A3 PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1C24 SWAP2 SWAP1 PUSH2 0x920C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1C49 SWAP2 SWAP1 PUSH2 0x920C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0x686B7EE8 OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP5 PUSH2 0x472D JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1C81 DUP5 DUP5 DUP5 PUSH2 0xDBA JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0xF25 JUMPI DUP2 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x1C9B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ PUSH2 0x1D21 JUMPI PUSH2 0x1D08 DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1CB9 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1CCD JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x1CEE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND PUSH2 0x4D17 JUMP JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1D14 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP JUMPDEST PUSH1 0x1 ADD PUSH2 0x1C86 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFF9 DUP6 DUP6 DUP5 DUP7 PUSH2 0x4D41 JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x1D4F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1D89 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x1D76 PUSH2 0x78CD JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x1D6E JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP1 DUP4 EQ PUSH2 0x1E91 JUMPI PUSH1 0x1 DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1DA4 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD SWAP2 ISZERO ISZERO SWAP2 ADD MSTORE DUP4 DUP4 DUP3 DUP2 DUP2 LT PUSH2 0x1DC2 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x1DD4 SWAP2 SWAP1 PUSH2 0xA056 JUMP JUMPDEST ISZERO ISZERO SWAP1 POP PUSH2 0x1DE1 JUMPI PUSH2 0x1E89 JUMP JUMPDEST ADDRESS DUP5 DUP5 DUP4 DUP2 DUP2 LT PUSH2 0x1DEE JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x1E00 SWAP2 SWAP1 PUSH2 0xA056 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1E0E SWAP3 SWAP2 SWAP1 PUSH2 0x91E0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1E4B JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1E50 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1E5D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x1E74 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 ISZERO ISZERO SWAP1 MSTORE JUMPDEST PUSH1 0x1 ADD PUSH2 0x1D8F JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH1 0x60 DUP1 PUSH2 0x1F1A DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xC45A0155 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1EDA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1EEE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1F12 SWAP2 SWAP1 PUSH2 0x801E JUMP JUMPDEST DUP8 PUSH1 0x0 PUSH2 0x4DA5 JUMP JUMPDEST SWAP1 POP DUP5 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x1F33 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1F5D JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP DUP5 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x1F77 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1FA1 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP3 POP DUP5 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x1FBB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1FEF JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x1FDA JUMPI SWAP1 POP JUMPDEST POP SWAP4 POP PUSH1 0x0 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0x219D JUMPI PUSH1 0x60 PUSH2 0x201D DUP9 DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2010 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x523B JUMP JUMPDEST SWAP1 POP PUSH1 0x60 DUP1 PUSH2 0x20B7 PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 DUP13 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x203D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP13 PUSH1 0x1 DUP15 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x2063 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP14 DUP7 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x208C SWAP3 SWAP2 SWAP1 PUSH2 0x9401 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0x59AB9A6C OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP11 PUSH2 0x41D1 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0x218E JUMPI DUP2 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x20D3 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x20E8 JUMPI PUSH2 0x218E JUMP JUMPDEST DUP2 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x20F4 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2108 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD GT PUSH2 0x2186 JUMPI DUP2 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x2121 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2135 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP3 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x214D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2161 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP10 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x217A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP JUMPDEST PUSH1 0x1 ADD PUSH2 0x20BE JUMP JUMPDEST POP POP POP POP DUP1 PUSH1 0x1 ADD SWAP1 POP PUSH2 0x1FF5 JUMP JUMPDEST POP POP SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x21C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x21EC JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 EQ PUSH2 0x2295 JUMPI PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2230 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x2270 JUMPI PUSH2 0x226B DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2255 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x5396 JUMP JUMPDEST PUSH2 0x2273 JUMP JUMPDEST PUSH1 0x12 JUMPDEST PUSH1 0xFF AND DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2282 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x21F2 JUMP JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFF9 DUP6 DUP6 DUP5 DUP7 PUSH2 0x5442 JUMP JUMPDEST POP PUSH1 0x0 SWAP4 PUSH1 0x60 SWAP4 POP DUP4 SWAP3 POP DUP3 SWAP2 POP JUMP JUMPDEST PUSH2 0x1337 PUSH2 0xDEF1 PUSH1 0x90 SHL ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD0AFDCA9 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x22FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x230E JUMPI POP PUSH1 0x1 JUMPDEST POP PUSH1 0x0 GAS SWAP1 POP PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP9 DUP9 DUP9 DUP9 DUP9 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x233A SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x92AB JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x2378 SWAP2 SWAP1 PUSH2 0x91F0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x23B5 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x23BA JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP GAS DUP4 SUB SWAP3 POP PUSH2 0x1337 PUSH2 0xDEF1 PUSH1 0x90 SHL ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xC18C162 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2406 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x2436 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x2433 SWAP2 DUP2 ADD SWAP1 PUSH2 0x8680 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x243F JUMPI PUSH2 0x2444 JUMP JUMPDEST SWAP1 SWAP3 SUB SWAP2 JUMPDEST DUP2 PUSH2 0x2452 JUMPI PUSH2 0x2452 DUP2 PUSH2 0x5502 JUMP JUMPDEST PUSH2 0x246F DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x2469 SWAP2 SWAP1 PUSH2 0x8680 JUMP JUMPDEST DUP5 PUSH2 0x550A JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFF9 DUP5 DUP4 DUP6 PUSH2 0x551B JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x3F DUP4 EXTCODESIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE DUP2 DUP2 MSTORE SWAP1 DUP1 PUSH1 0x0 PUSH1 0x20 DUP5 ADD DUP6 EXTCODECOPY POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH2 0x24B8 PUSH2 0x78E5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP9 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP SWAP1 POP PUSH2 0x2576 PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2526 SWAP2 SWAP1 PUSH2 0x9EB4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x254B SWAP2 SWAP1 PUSH2 0x9EB4 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0xC7DD6C4F OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP6 PUSH2 0x472D JUMP JUMPDEST SWAP1 SWAP9 SWAP1 SWAP8 POP SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH2 0x13A3 PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x25C4 SWAP2 SWAP1 PUSH2 0x9D05 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 DUP11 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP11 PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD DUP11 PUSH1 0x60 ADD MLOAD PUSH1 0xF SIGNEXTEND DUP2 MSTORE PUSH1 0x20 ADD DUP11 PUSH1 0x40 ADD MLOAD PUSH1 0xF SIGNEXTEND DUP2 MSTORE POP PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2632 SWAP2 SWAP1 PUSH2 0x9D05 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0x8D201C22 OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP5 PUSH2 0x472D JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFF9 PUSH20 0xC02AAA39B223FE8D0A0E5C4F27EAD9083C756CC2 DUP7 DUP7 DUP6 DUP8 PUSH2 0x56B4 JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH2 0x13A3 PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x26C0 SWAP2 SWAP1 PUSH2 0x9CE5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x26E5 SWAP2 SWAP1 PUSH2 0x9CE5 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0x9AD732EF OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP5 PUSH2 0x472D JUMP JUMPDEST PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE DUP2 JUMP JUMPDEST PUSH2 0x2730 PUSH2 0x78FC JUMP JUMPDEST PUSH2 0x2738 PUSH2 0x78FC JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 JUMPDEST DUP8 MLOAD DUP2 EQ PUSH2 0x283D JUMPI PUSH2 0x2784 PUSH1 0x20 DUP10 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x2756 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD SUB DUP8 DUP11 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x276D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x59C0 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP11 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x279E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x27B3 SWAP2 SWAP1 PUSH2 0x91F0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x27F0 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x27F5 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0x2833 JUMPI PUSH1 0x0 PUSH2 0x2819 PUSH1 0x20 DUP4 MLOAD SUB DUP4 PUSH2 0x59D0 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP6 DUP2 GT ISZERO PUSH2 0x2831 JUMPI DUP4 DUP9 MSTORE PUSH1 0x20 DUP9 ADD DUP3 SWAP1 MSTORE SWAP5 POP DUP5 JUMPDEST POP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x273D JUMP JUMPDEST POP DUP2 PUSH2 0x2848 JUMPI PUSH2 0x2936 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP7 MLOAD DUP2 EQ PUSH2 0x2934 JUMPI PUSH2 0x287B PUSH1 0x20 DUP9 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x2864 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD SUB DUP5 DUP10 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x276D JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP10 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2895 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x28AA SWAP2 SWAP1 PUSH2 0x91F0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x28E7 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x28EC JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0x292A JUMPI PUSH1 0x0 PUSH2 0x2910 PUSH1 0x20 DUP4 MLOAD SUB DUP4 PUSH2 0x59D0 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP5 DUP2 GT ISZERO PUSH2 0x2928 JUMPI DUP4 DUP8 MSTORE PUSH1 0x20 DUP8 ADD DUP3 SWAP1 MSTORE SWAP4 POP DUP4 JUMPDEST POP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x284B JUMP JUMPDEST POP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 POP SWAP4 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFF9 DUP5 DUP4 DUP6 PUSH2 0x59DC JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH2 0x13A3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x298C SWAP2 SWAP1 PUSH2 0x920C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0x7280BFFF OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP5 PUSH2 0x41D1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFF9 DUP6 DUP6 DUP5 DUP7 PUSH2 0x5B2D JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 MLOAD PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x29D5 JUMPI INVALID JUMPDEST EQ DUP1 PUSH2 0x29ED JUMPI POP PUSH1 0x1 DUP4 MLOAD PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x29EB JUMPI INVALID JUMPDEST EQ JUMPDEST DUP1 PUSH2 0x2A03 JUMPI POP PUSH1 0x40 DUP5 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND ISZERO JUMPDEST DUP1 PUSH2 0x2A19 JUMPI POP PUSH1 0x60 DUP5 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND ISZERO JUMPDEST ISZERO PUSH2 0x2A26 JUMPI POP PUSH1 0x0 PUSH2 0x2B05 JUMP JUMPDEST PUSH2 0x2A2E PUSH2 0x7916 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x1FB09795 DUP9 DUP9 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2A5F SWAP3 SWAP2 SWAP1 PUSH2 0x9E60 JUMP JUMPDEST PUSH1 0xA0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2A77 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2A8B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2AAF SWAP2 SWAP1 PUSH2 0x8E9C JUMP JUMPDEST SWAP2 SWAP5 POP SWAP3 POP SWAP1 POP PUSH1 0x1 DUP4 PUSH1 0x20 ADD MLOAD PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x2AC8 JUMPI INVALID JUMPDEST EQ ISZERO DUP1 PUSH2 0x2AD3 JUMPI POP DUP1 ISZERO JUMPDEST DUP1 PUSH2 0x2AE6 JUMPI POP DUP7 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO JUMPDEST ISZERO PUSH2 0x2AF7 JUMPI PUSH1 0x0 SWAP4 POP POP POP POP PUSH2 0x2B05 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND SWAP2 POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP1 PUSH1 0x60 PUSH2 0x2B1E DUP9 DUP9 DUP9 PUSH2 0x5C81 JUMP JUMPDEST SWAP4 POP DUP4 PUSH2 0x2B2A JUMPI PUSH2 0xFCB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x276FDAD9 PUSH1 0xE1 SHL DUP2 MSTORE ADDRESS SWAP1 PUSH4 0x4EDFB5B2 SWAP1 PUSH2 0x2B53 SWAP1 DUP12 SWAP1 DUP9 SWAP1 DUP13 SWAP1 DUP13 SWAP1 PUSH1 0x4 ADD PUSH2 0x9E27 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2B6B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2B7F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x2BA7 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x879D JUMP JUMPDEST DUP9 PUSH1 0x80 ADD DUP2 SWAP1 MSTORE POP DUP8 PUSH1 0x80 ADD MLOAD SWAP3 POP PUSH2 0xFC5 PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP11 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2BF3 SWAP2 SWAP1 PUSH2 0x9E14 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP11 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2C18 SWAP2 SWAP1 PUSH2 0x9E14 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0xA095A036 OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP7 PUSH2 0x472D JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2C4D PUSH2 0x7938 JUMP JUMPDEST DUP4 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x2C61 SWAP2 SWAP1 PUSH2 0x8C02 JUMP JUMPDEST SWAP1 POP PUSH2 0x2CB2 PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE DUP3 PUSH1 0x60 ADD MLOAD DUP9 DUP9 DUP8 DUP7 PUSH1 0x40 ADD MLOAD DUP8 PUSH1 0x80 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2C9E SWAP3 SWAP2 SWAP1 PUSH2 0x9401 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH2 0x5DF1 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH1 0x60 PUSH2 0x2576 PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP10 DUP5 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2D00 SWAP3 SWAP2 SWAP1 PUSH2 0x9401 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0xD31B0A8A OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP6 PUSH2 0x41D1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 DUP1 PUSH2 0x2D3D DUP10 DUP10 DUP10 DUP10 PUSH2 0x5FF3 JUMP JUMPDEST SWAP5 POP SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x2D54 JUMPI PUSH2 0x2DC4 JUMP JUMPDEST PUSH2 0x2DBE PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP8 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2D93 SWAP3 SWAP2 SWAP1 PUSH2 0x93E6 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0xF573C161 OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP7 PUSH2 0x41D1 JUMP JUMPDEST SWAP1 SWAP3 POP SWAP1 POP JUMPDEST SWAP6 POP SWAP6 POP SWAP6 POP SWAP6 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH2 0x13A3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2E10 SWAP2 SWAP1 PUSH2 0x920C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0x5C71CBE7 OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP5 PUSH2 0x41D1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFF9 PUSH20 0xC02AAA39B223FE8D0A0E5C4F27EAD9083C756CC2 DUP6 DUP5 DUP7 PUSH2 0x6148 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP1 PUSH2 0x2E6D DUP8 DUP8 DUP8 PUSH2 0x6431 JUMP JUMPDEST SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x2E82 JUMPI PUSH2 0x2EF0 JUMP JUMPDEST PUSH2 0x2EEA PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP6 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2EBF SWAP2 SWAP1 PUSH2 0x920C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0x15DE17DE OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP6 PUSH2 0x41D1 JUMP JUMPDEST SWAP1 SWAP3 POP SWAP1 POP JUMPDEST SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFF9 PUSH20 0xC02AAA39B223FE8D0A0E5C4F27EAD9083C756CC2 DUP7 DUP7 DUP6 DUP8 PUSH2 0x6518 JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH2 0x13A3 PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2F5D SWAP2 SWAP1 PUSH2 0x920C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2F82 SWAP2 SWAP1 PUSH2 0x920C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0xD3CDC04D OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP5 PUSH2 0x472D JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH2 0x13A3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2FED SWAP2 SWAP1 PUSH2 0x9CE5 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0x9AD732EF OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP5 PUSH2 0x41D1 JUMP JUMPDEST PUSH1 0x60 DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x3031 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x305B JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP4 MLOAD DUP2 EQ PUSH2 0x1E91 JUMPI PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x309F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x30E9 JUMPI PUSH2 0x30E4 DUP4 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x30C5 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x679A SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x30F5 JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND BALANCE JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3101 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x3061 JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH2 0x13A3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x3154 SWAP2 SWAP1 PUSH2 0x9D05 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0x8D201C22 OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP5 PUSH2 0x41D1 JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH1 0x60 PUSH2 0x2576 PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP10 DUP5 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x31C3 SWAP3 SWAP2 SWAP1 PUSH2 0x9401 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP10 DUP5 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x31EA SWAP3 SWAP2 SWAP1 PUSH2 0x9401 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0xD31B0A8A OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP6 PUSH2 0x472D JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFF9 DUP6 DUP6 DUP5 DUP7 PUSH2 0x686D JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH2 0x13A3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x3263 SWAP2 SWAP1 PUSH2 0x920C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0xB770F849 OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP5 PUSH2 0x41D1 JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH1 0x60 DUP5 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x32AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x32D4 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP6 MLOAD DUP2 LT ISZERO PUSH2 0x3329 JUMPI DUP6 PUSH1 0x1 DUP3 DUP9 MLOAD SUB SUB DUP2 MLOAD DUP2 LT PUSH2 0x32F5 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3309 JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE PUSH1 0x1 ADD PUSH2 0x32DA JUMP JUMPDEST POP PUSH2 0x13A3 PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP8 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x3345 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH1 0x1 DUP10 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x336B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x3394 SWAP3 SWAP2 SWAP1 PUSH2 0x930C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP9 DUP5 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x33BB SWAP3 SWAP2 SWAP1 PUSH2 0x930C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0x8EFFA9EA OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP6 PUSH2 0x472D JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH2 0x13A3 PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x3426 SWAP2 SWAP1 PUSH2 0x920C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x344B SWAP2 SWAP1 PUSH2 0x920C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0x5C71CBE7 OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP5 PUSH2 0x472D JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP1 PUSH1 0x60 PUSH2 0x3488 DUP9 DUP9 DUP9 PUSH2 0x5C81 JUMP JUMPDEST SWAP4 POP DUP4 PUSH2 0x3494 JUMPI PUSH2 0xFCB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x276FDAD9 PUSH1 0xE1 SHL DUP2 MSTORE ADDRESS SWAP1 PUSH4 0x4EDFB5B2 SWAP1 PUSH2 0x34BD SWAP1 DUP12 SWAP1 DUP9 SWAP1 DUP13 SWAP1 DUP13 SWAP1 PUSH1 0x4 ADD PUSH2 0x9E27 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x34D5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x34E9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x3511 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x879D JUMP JUMPDEST DUP9 PUSH1 0x80 ADD DUP2 SWAP1 MSTORE POP DUP8 PUSH1 0x80 ADD MLOAD SWAP3 POP PUSH2 0xFC5 PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP11 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x355D SWAP2 SWAP1 PUSH2 0x9E14 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0xA095A036 OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP7 PUSH2 0x41D1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFF9 DUP6 DUP4 DUP6 PUSH2 0x6BF1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFF9 DUP6 DUP6 DUP5 DUP7 PUSH2 0x6DDF JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFF9 DUP6 DUP6 DUP5 DUP7 PUSH2 0x6EA3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 DUP1 PUSH2 0x35C3 DUP10 DUP10 DUP10 DUP10 PUSH2 0x5FF3 JUMP JUMPDEST SWAP5 POP SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x35DA JUMPI PUSH2 0x2DC4 JUMP JUMPDEST PUSH2 0x2DBE PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP8 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x3619 SWAP3 SWAP2 SWAP1 PUSH2 0x93E6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP8 ISZERO PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x3641 SWAP3 SWAP2 SWAP1 PUSH2 0x93E6 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0xF573C161 OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP7 PUSH2 0x472D JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 DUP1 DUP8 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x1273B0C6 DUP9 DUP9 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x36A4 SWAP3 SWAP2 SWAP1 PUSH2 0x9239 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x36BC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x36D0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x36F4 SWAP2 SWAP1 PUSH2 0x801E JUMP JUMPDEST SWAP3 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND ISZERO PUSH2 0x3712 JUMPI POP PUSH1 0x1 SWAP4 POP DUP7 PUSH2 0x37B0 JUMP JUMPDEST DUP9 MLOAD PUSH1 0x40 MLOAD PUSH4 0x939D863 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x1273B0C6 SWAP1 PUSH2 0x3743 SWAP1 DUP11 SWAP1 DUP13 SWAP1 PUSH1 0x4 ADD PUSH2 0x9239 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x375B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x376F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3793 SWAP2 SWAP1 PUSH2 0x801E JUMP JUMPDEST SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x37A9 JUMPI POP PUSH2 0xFCB JUMP JUMPDEST POP PUSH1 0x0 SWAP4 POP DUP6 JUMPDEST PUSH2 0x15FD PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP12 PUSH1 0x20 ADD MLOAD DUP8 DUP10 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x37F5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9253 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP12 PUSH1 0x20 ADD MLOAD DUP8 DUP10 ISZERO PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x3823 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9253 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0xCD85E7B5 OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP8 PUSH2 0x472D JUMP JUMPDEST PUSH1 0x60 DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x3867 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x3891 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 EQ PUSH2 0xF25 JUMPI PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x38D5 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x3921 JUMPI PUSH2 0x391C DUP5 DUP5 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x38FC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x6F05 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x3924 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3930 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x3897 JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH2 0x13A3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x3983 SWAP2 SWAP1 PUSH2 0x920C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0x686B7EE8 OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP5 PUSH2 0x41D1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFF9 DUP6 DUP4 DUP6 PUSH2 0x6FD1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP1 PUSH2 0x39CB DUP8 DUP8 DUP8 PUSH2 0x6431 JUMP JUMPDEST SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x39E0 JUMPI PUSH2 0x2EF0 JUMP JUMPDEST PUSH2 0x2EEA PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP6 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x3A1D SWAP2 SWAP1 PUSH2 0x920C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP6 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x3A42 SWAP2 SWAP1 PUSH2 0x920C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0x15DE17DE OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP6 PUSH2 0x472D JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH1 0x60 DUP1 PUSH2 0x3AAF DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xC45A0155 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1EDA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP PUSH1 0x60 PUSH2 0x3ABC DUP8 PUSH2 0x70B7 JUMP JUMPDEST SWAP1 POP DUP6 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x3AD5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x3AFF JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP3 POP DUP6 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x3B19 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x3B43 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP4 POP DUP6 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x3B5D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x3B91 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x3B7C JUMPI SWAP1 POP JUMPDEST POP SWAP5 POP PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x3DA6 JUMPI PUSH1 0x60 DUP1 PUSH2 0x3C92 PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP13 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x3BBE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP13 PUSH1 0x1 DUP15 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x3BE4 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP14 PUSH2 0x3C0B DUP15 DUP11 DUP10 DUP2 MLOAD DUP2 LT PUSH2 0x2010 JUMPI INVALID JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x3C1C SWAP3 SWAP2 SWAP1 PUSH2 0x9401 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP14 PUSH2 0x3C56 DUP9 PUSH2 0x3C51 DUP12 DUP11 DUP2 MLOAD DUP2 LT PUSH2 0x3C44 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x714F JUMP JUMPDEST PUSH2 0x523B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x3C67 SWAP3 SWAP2 SWAP1 PUSH2 0x9401 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0x59AB9A6C OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP11 PUSH2 0x472D JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0x3D98 JUMPI DUP2 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x3CAE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x3CC3 JUMPI PUSH2 0x3D98 JUMP JUMPDEST DUP7 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x3CCF JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ DUP1 PUSH2 0x3D0B JUMPI POP DUP2 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x3CEC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3D00 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD LT ISZERO JUMPDEST ISZERO PUSH2 0x3D90 JUMPI DUP2 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x3D1C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3D30 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP3 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x3D48 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3D5C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP PUSH2 0x3D78 DUP12 DUP8 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x2010 JUMPI INVALID JUMPDEST DUP10 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3D84 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP JUMPDEST PUSH1 0x1 ADD PUSH2 0x3C99 JUMP JUMPDEST POP POP POP DUP1 PUSH1 0x1 ADD SWAP1 POP PUSH2 0x3B97 JUMP JUMPDEST POP POP POP SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x3DBB PUSH2 0x78FC JUMP JUMPDEST PUSH2 0x3DC3 PUSH2 0x78FC JUMP JUMPDEST PUSH1 0x0 NOT DUP1 PUSH1 0x0 JUMPDEST DUP7 MLOAD DUP2 EQ PUSH2 0x3EBF JUMPI PUSH2 0x3DFA PUSH1 0x20 DUP9 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x3DE3 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD SUB DUP8 DUP10 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x276D JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP10 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x3E14 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x3E29 SWAP2 SWAP1 PUSH2 0x91F0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x3E66 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x3E6B JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0x3EB5 JUMPI PUSH1 0x0 PUSH2 0x3E8F PUSH1 0x20 DUP4 MLOAD SUB DUP4 PUSH2 0x59D0 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 GT DUP1 ISZERO PUSH2 0x3EA0 JUMPI POP DUP5 DUP2 LT JUMPDEST ISZERO PUSH2 0x3EB3 JUMPI DUP4 DUP8 MSTORE PUSH1 0x20 DUP8 ADD DUP3 SWAP1 MSTORE SWAP4 POP DUP4 JUMPDEST POP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x3DCA JUMP JUMPDEST POP PUSH1 0x0 NOT DUP2 EQ ISZERO PUSH2 0x3ED0 JUMPI POP PUSH2 0xDB1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP8 MLOAD DUP2 EQ PUSH2 0x3FC8 JUMPI PUSH2 0x3F03 PUSH1 0x20 DUP10 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x3EEC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD SUB DUP4 DUP11 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x276D JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP11 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x3F1D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x3F32 SWAP2 SWAP1 PUSH2 0x91F0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x3F6F JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x3F74 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0x3FBE JUMPI PUSH1 0x0 PUSH2 0x3F98 PUSH1 0x20 DUP4 MLOAD SUB DUP4 PUSH2 0x59D0 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 GT DUP1 ISZERO PUSH2 0x3FA9 JUMPI POP DUP6 DUP2 LT JUMPDEST ISZERO PUSH2 0x3FBC JUMPI DUP4 DUP9 MSTORE PUSH1 0x20 DUP9 ADD DUP3 SWAP1 MSTORE SWAP5 POP DUP5 JUMPDEST POP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x3ED3 JUMP JUMPDEST POP POP SWAP4 POP SWAP4 POP SWAP4 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP3 MLOAD SUB PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x3FEF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x4019 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xC45A0155 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4057 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x406B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x408F SWAP2 SWAP1 PUSH2 0x801E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x41C8 JUMPI DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x65DA9289 PUSH3 0x249F0 DUP7 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x40BC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP6 PUSH1 0x1 ADD DUP2 MLOAD DUP2 LT PUSH2 0x40D3 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x40FB SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x92E8 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4113 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x4144 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x4141 SWAP2 DUP2 ADD SWAP1 PUSH2 0x801E JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x4192 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x4172 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x4177 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE SWAP3 POP PUSH2 0x41CB SWAP2 POP POP JUMP JUMPDEST DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x419F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x4094 JUMP JUMPDEST POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 DUP2 ADD MLOAD DUP4 MLOAD PUSH1 0x20 DUP6 ADD MLOAD PUSH1 0x40 DUP1 DUP8 ADD MLOAD SWAP1 MLOAD PUSH4 0xFA7F81F PUSH1 0xE1 SHL DUP2 MSTORE DUP6 SWAP5 ADDRESS SWAP5 PUSH4 0x1F4FF03E SWAP5 PUSH2 0x421D SWAP5 PUSH1 0xA0 SWAP4 SWAP1 SWAP4 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND SWAP4 SWAP2 SWAP3 SWAP1 SWAP2 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x9716 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4237 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x4248 JUMPI POP PUSH1 0x1 JUMPDEST PUSH2 0x12D4 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x4276 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x427B JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x4290 SWAP2 SWAP1 PUSH2 0x8620 JUMP JUMPDEST SWAP4 POP SWAP2 POP PUSH2 0x429B SWAP1 POP JUMP JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP6 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x21F8A721 DUP8 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x9232494E PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x42F6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x430A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x432E SWAP2 SWAP1 PUSH2 0x8680 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x434A SWAP2 SWAP1 PUSH2 0x96F4 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4362 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4376 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x439A SWAP2 SWAP1 PUSH2 0x801E JUMP JUMPDEST SWAP2 POP DUP6 PUSH1 0x20 ADD MLOAD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x43AF JUMPI PUSH2 0x44CB JUMP JUMPDEST PUSH1 0x0 DUP1 JUMPDEST DUP8 PUSH1 0x20 ADD MLOAD MLOAD DUP2 LT ISZERO PUSH2 0x44C8 JUMPI PUSH1 0x2 DUP9 PUSH1 0x20 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x43D2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD LT ISZERO PUSH2 0x43E6 JUMPI PUSH2 0x44C0 JUMP JUMPDEST DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x7F9C0ECD PUSH3 0x493E0 DUP11 PUSH1 0x20 ADD MLOAD DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x4409 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 PUSH1 0x1 DUP11 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x4421 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4446 SWAP3 SWAP2 SWAP1 PUSH2 0x9529 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x445E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x448F JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x448C SWAP2 DUP2 ADD SWAP1 PUSH2 0x8680 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x4498 JUMPI PUSH2 0x44C0 JUMP JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x44BE JUMPI DUP1 SWAP3 POP DUP9 PUSH1 0x20 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x44B3 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP4 POP JUMPDEST POP JUMPDEST PUSH1 0x1 ADD PUSH2 0x43B3 JUMP JUMPDEST POP POP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x44EB SWAP2 SWAP1 PUSH2 0x801E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x456F JUMPI PUSH1 0x40 MLOAD PUSH4 0x2E1A7D4D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND SWAP1 PUSH4 0x2E1A7D4D SWAP1 PUSH2 0x4535 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x96F4 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x454F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x4563 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP DUP5 SWAP1 POP PUSH2 0x4583 JUMP JUMPDEST PUSH2 0x4583 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND DUP4 DUP8 PUSH2 0x71E7 JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD5BCB9B5 DUP3 DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x45B2 JUMPI DUP10 PUSH2 0x45B5 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP12 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x45D4 JUMPI DUP10 PUSH2 0x45D7 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP10 PUSH1 0x1 PUSH1 0x0 PUSH1 0x40 MLOAD DUP8 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x45FC SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9828 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4615 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x4629 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x464E SWAP2 SWAP1 PUSH2 0x8680 JUMP JUMPDEST SWAP3 POP DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x46BF JUMPI DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD0E30DB0 DUP5 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x46A5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x46B9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP JUMPDEST POP POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 MLOAD PUSH1 0x40 EQ PUSH2 0x46E1 JUMPI POP PUSH1 0x0 SWAP1 POP DUP1 PUSH2 0x46FA JUMP JUMPDEST DUP3 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x46F5 SWAP2 SWAP1 PUSH2 0x8F3B JUMP JUMPDEST SWAP2 POP SWAP2 POP JUMPDEST SWAP2 POP SWAP2 JUMP JUMPDEST PUSH1 0x60 DUP3 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x4714 SWAP3 SWAP2 SWAP1 PUSH2 0x9698 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH1 0x60 DUP1 DUP3 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x473F JUMPI PUSH2 0x429B JUMP JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x4756 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x4780 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x479A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x47C4 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE SWAP2 SWAP4 POP PUSH1 0x60 SWAP2 SWAP1 PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP4 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x47F8 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x480D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP PUSH2 0x4821 PUSH2 0x7982 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP1 DUP3 ADD DUP4 MSTORE DUP8 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP4 MSTORE PUSH1 0x20 DUP1 DUP11 ADD MLOAD SWAP1 SWAP2 AND SWAP1 DUP4 ADD MSTORE DUP8 DUP4 ADD MLOAD DUP3 DUP5 ADD MSTORE DUP8 ADD MLOAD PUSH5 0x100000000 PUSH1 0x1 PUSH1 0xC0 SHL SUB SWAP1 DUP4 SHR SWAP1 DUP2 AND PUSH4 0xFFFFFFFF SWAP1 SWAP2 AND OR SWAP1 SWAP2 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH2 0x487F PUSH2 0x7982 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 DUP9 PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x60 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x80 ADD MLOAD DUP1 PUSH1 0x60 SHR SWAP1 PUSH1 0x40 SHR PUSH4 0xFFFFFFFF AND PUSH4 0xFFFFFFFF AND SWAP1 PUSH1 0x20 SHL OR PUSH1 0x40 SHL DUP2 MSTORE POP SWAP1 POP PUSH2 0x48EA DUP2 DUP5 PUSH2 0x41D1 JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP5 POP ISZERO SWAP1 POP DUP1 PUSH2 0x4911 JUMPI POP DUP3 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x4905 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ JUMPDEST ISZERO PUSH2 0x491E JUMPI POP POP POP PUSH2 0x429B JUMP JUMPDEST PUSH1 0x60 PUSH2 0x492A DUP4 DUP6 PUSH2 0x41D1 JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP3 POP ISZERO SWAP1 POP DUP1 PUSH2 0x4951 JUMPI POP DUP1 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x4945 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ JUMPDEST ISZERO PUSH2 0x495F JUMPI POP POP POP POP PUSH2 0x429B JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP8 MLOAD DUP2 LT ISZERO PUSH2 0x4BD7 JUMPI PUSH1 0x60 PUSH1 0x0 JUMPDEST PUSH1 0x3 DUP2 LT ISZERO PUSH2 0x4B37 JUMPI PUSH2 0x49BF DUP11 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x4988 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x499D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP10 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x49B2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x727A JUMP JUMPDEST DUP8 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x49CC JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE DUP7 MLOAD ISZERO DUP1 PUSH2 0x49F9 JUMPI POP DUP7 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x49ED JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ JUMPDEST ISZERO PUSH2 0x4A03 JUMPI PUSH2 0x4B37 JUMP JUMPDEST PUSH2 0x4A1C PUSH1 0x5 PUSH2 0x2710 ADD PUSH2 0x2710 DUP10 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x49B2 JUMPI INVALID JUMPDEST DUP8 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x4A29 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE DUP7 MLOAD ISZERO DUP1 PUSH2 0x4A56 JUMPI POP DUP7 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x4A4A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ JUMPDEST ISZERO PUSH2 0x4A60 JUMPI PUSH2 0x4B37 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x4A6C DUP8 DUP10 PUSH2 0x41D1 JUMP JUMPDEST DUP1 MLOAD SWAP2 SWAP5 POP SWAP2 POP ISZERO DUP1 PUSH2 0x4A93 JUMPI POP DUP1 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x4A87 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ JUMPDEST ISZERO PUSH2 0x4A9E JUMPI POP PUSH2 0x4B37 JUMP JUMPDEST DUP1 SWAP5 POP DUP11 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x4AAD JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x4AC2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD LT PUSH2 0x4B2E JUMPI PUSH1 0x0 DUP12 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x4ADD JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x2710 DUP14 DUP8 DUP2 MLOAD DUP2 LT PUSH2 0x4AF4 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x4B09 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SUB MUL DUP2 PUSH2 0x4B1A JUMPI INVALID JUMPDEST DIV SWAP1 POP PUSH1 0x5 DUP2 GT PUSH2 0x4B2C JUMPI POP POP PUSH2 0x4B37 JUMP JUMPDEST POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x4970 JUMP JUMPDEST POP PUSH1 0x0 DUP2 MLOAD GT DUP1 ISZERO PUSH2 0x4B4A JUMPI POP PUSH1 0x0 DUP4 MLOAD GT JUMPDEST ISZERO PUSH2 0x4BCE JUMPI DUP1 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x4B5C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x4B70 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP PUSH2 0x4BB5 DUP10 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x4B8B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x4BA0 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x49B2 JUMPI INVALID JUMPDEST DUP8 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x4BC1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x4962 JUMP JUMPDEST POP POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 DUP4 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x4BFC SWAP2 SWAP1 PUSH2 0x8882 JUMP JUMPDEST SWAP1 SWAP3 POP SWAP1 POP PUSH2 0x4C15 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP4 DUP8 PUSH2 0x71E7 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xA0 DUP2 ADD DUP3 MSTORE DUP3 DUP2 MSTORE ADDRESS PUSH1 0x20 DUP3 ADD MSTORE TIMESTAMP DUP2 DUP4 ADD MSTORE PUSH1 0x60 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x80 DUP3 ADD MSTORE SWAP1 MLOAD PUSH4 0xC04B8D59 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP2 PUSH4 0xC04B8D59 SWAP2 PUSH2 0x4C65 SWAP2 SWAP1 PUSH1 0x4 ADD PUSH2 0x9D4D JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4C7F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x4C93 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2CB2 SWAP2 SWAP1 PUSH2 0x8680 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x4CCE SWAP2 SWAP1 PUSH2 0x801E JUMP JUMPDEST SWAP1 POP PUSH2 0x4CE4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP3 DUP7 PUSH2 0x71E7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x310DA7B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH4 0x621B4F6 SWAP1 PUSH2 0x4C65 SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP11 SWAP1 PUSH1 0x1 SWAP1 PUSH1 0x4 ADD PUSH2 0x98DB JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFFC DUP4 PUSH2 0x4D3B PUSH2 0x4D2B DUP3 PUSH1 0x1 PUSH2 0x72D2 JUMP JUMPDEST PUSH2 0x4D35 DUP9 DUP8 PUSH2 0x72F6 JUMP JUMPDEST SWAP1 PUSH2 0x7327 JUMP JUMPDEST SWAP1 PUSH2 0x7343 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x4D58 SWAP2 SWAP1 PUSH2 0x801E JUMP JUMPDEST SWAP1 POP PUSH2 0x4D6E PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP3 DUP7 PUSH2 0x71E7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x164B079 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH4 0xB2583C8 SWAP1 PUSH2 0x4C65 SWAP1 DUP10 SWAP1 DUP10 SWAP1 DUP10 SWAP1 PUSH1 0x1 SWAP1 TIMESTAMP DUP3 ADD SWAP1 PUSH1 0x4 ADD PUSH2 0x9858 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x2 DUP3 DUP5 MLOAD SUB LT ISZERO PUSH2 0x4DCB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12EC SWAP1 PUSH2 0x99AC JUMP JUMPDEST PUSH2 0x4DD3 PUSH2 0x79AA JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP1 DUP3 ADD DUP4 MSTORE PUSH2 0x1F4 DUP3 MSTORE PUSH2 0xBB8 PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x2710 DUP3 DUP5 ADD MSTORE DUP3 MLOAD PUSH1 0x3 DUP1 DUP3 MSTORE PUSH1 0x80 DUP3 ADD SWAP1 SWAP5 MSTORE SWAP2 SWAP3 SWAP1 SWAP2 SWAP1 DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP PUSH1 0x0 DUP1 DUP7 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x4E27 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 DUP8 DUP8 PUSH1 0x1 ADD DUP2 MLOAD DUP2 LT PUSH2 0x4E42 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 JUMPDEST PUSH1 0x3 DUP2 LT ISZERO PUSH2 0x4F37 JUMPI PUSH1 0x0 DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x1698EE82 DUP6 DUP6 DUP11 DUP7 PUSH1 0x3 DUP2 LT PUSH2 0x4E77 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4E9A SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9800 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4EB2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4EC6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4EEA SWAP2 SWAP1 PUSH2 0x801E JUMP JUMPDEST SWAP1 POP PUSH2 0x4EF5 DUP2 PUSH2 0x736D JUMP JUMPDEST ISZERO PUSH2 0x4F2E JUMPI DUP1 DUP7 DUP7 DUP1 PUSH1 0x1 ADD SWAP8 POP DUP2 MLOAD DUP2 LT PUSH2 0x4F0D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x4E4F JUMP JUMPDEST POP POP POP DUP1 PUSH2 0x4F47 JUMPI POP POP POP PUSH2 0x2B05 JUMP JUMPDEST DUP6 MLOAD DUP6 PUSH1 0x2 ADD EQ ISZERO PUSH2 0x503D JUMPI DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x4F69 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x4F9D JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x4F88 JUMPI SWAP1 POP JUMPDEST POP SWAP4 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x5034 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE SWAP1 PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x4FD5 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP3 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x4FEC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x5000 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x5014 JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE PUSH1 0x1 ADD PUSH2 0x4FA3 JUMP JUMPDEST POP POP POP POP PUSH2 0x2B05 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x504D DUP9 DUP9 DUP9 PUSH1 0x1 ADD PUSH2 0x4DA5 JUMP JUMPDEST SWAP1 POP DUP1 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x5062 JUMPI POP POP POP POP PUSH2 0x2B05 JUMP JUMPDEST DUP1 MLOAD DUP3 MUL PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x507B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x50AF JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x509A JUMPI SWAP1 POP JUMPDEST POP SWAP5 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x522F JUMPI PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x5226 JUMPI DUP3 MLOAD DUP3 DUP2 MUL DUP3 ADD SWAP1 DUP5 SWAP1 DUP4 SWAP1 DUP2 LT PUSH2 0x50DD JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD PUSH1 0x1 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x50FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x5128 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP DUP9 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x5135 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x514C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x5160 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x5174 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP PUSH1 0x0 JUMPDEST DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x51A3 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD DUP2 LT ISZERO PUSH2 0x521C JUMPI DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x51BF JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x51D2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP10 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x51E6 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 PUSH1 0x1 ADD DUP2 MLOAD DUP2 LT PUSH2 0x51FC JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE PUSH1 0x1 ADD PUSH2 0x5197 JUMP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x50C0 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x50B5 JUMP JUMPDEST POP POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x2 DUP4 MLOAD LT ISZERO DUP1 ISZERO PUSH2 0x5253 JUMPI POP DUP2 MLOAD PUSH1 0x1 ADD DUP4 MLOAD EQ JUMPDEST PUSH2 0x526F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12EC SWAP1 PUSH2 0x9AD0 JUMP JUMPDEST DUP2 MLOAD PUSH1 0x3 MUL DUP4 MLOAD PUSH1 0x14 MUL ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x528F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x52BA JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x20 DUP2 ADD PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x41C8 JUMPI DUP1 ISZERO PUSH2 0x5369 JUMPI PUSH1 0x0 DUP5 PUSH1 0x1 DUP4 SUB DUP2 MLOAD DUP2 LT PUSH2 0x52E4 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDDCA3F43 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5324 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5338 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x535C SWAP2 SWAP1 PUSH2 0x8F18 JUMP JUMPDEST PUSH1 0xE8 SHL DUP4 MSTORE POP PUSH1 0x3 SWAP1 SWAP2 ADD SWAP1 JUMPDEST PUSH1 0x0 DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x5377 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD PUSH1 0x60 SHL DUP4 MSTORE POP PUSH1 0x14 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x52C4 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x12 SWAP1 POP PUSH1 0x0 PUSH1 0x60 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x4 DUP2 MSTORE PUSH1 0x20 ADD PUSH4 0x313CE567 PUSH1 0xE0 SHL DUP2 MSTORE POP PUSH1 0x40 MLOAD PUSH2 0x53D4 SWAP2 SWAP1 PUSH2 0x91F0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x540F JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x5414 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x5428 JUMPI POP PUSH1 0x20 DUP2 MLOAD LT ISZERO JUMPDEST ISZERO PUSH2 0x543B JUMPI PUSH2 0x5438 DUP2 PUSH1 0x0 PUSH2 0x59D0 JUMP JUMPDEST SWAP3 POP JUMPDEST POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x5459 SWAP2 SWAP1 PUSH2 0x801E JUMP JUMPDEST SWAP1 POP PUSH2 0x546F PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP3 DUP7 PUSH2 0x71E7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x8201AA3F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH4 0x8201AA3F SWAP1 PUSH2 0x54A6 SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP11 SWAP1 PUSH1 0x1 SWAP1 PUSH1 0x0 NOT SWAP1 PUSH1 0x4 ADD PUSH2 0x9905 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x54BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x54D3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x54F7 SWAP2 SWAP1 PUSH2 0x8F3B JUMP JUMPDEST POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH1 0x40 MLOAD DUP3 DUP2 MSTORE DUP2 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 DUP1 DUP5 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x5535 SWAP2 SWAP1 PUSH2 0x803A JUMP JUMPDEST DUP2 MLOAD SWAP3 SWAP6 POP SWAP1 SWAP4 POP SWAP2 POP PUSH1 0x1 GT ISZERO PUSH2 0x555F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12EC SWAP1 PUSH2 0x9C39 JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 ADD DUP2 MLOAD EQ PUSH2 0x5583 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12EC SWAP1 PUSH2 0x9B64 JUMP JUMPDEST DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 DUP4 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x559D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x55CB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12EC SWAP1 PUSH2 0x9A73 JUMP JUMPDEST PUSH2 0x55FD DUP4 DUP8 DUP4 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x55DD JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x71E7 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xCEB757D5 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x60 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0xCEB757D5 SWAP1 PUSH2 0x5637 SWAP1 DUP11 SWAP1 PUSH1 0x1 SWAP1 DUP9 SWAP1 DUP9 SWAP1 ADDRESS SWAP1 TIMESTAMP SWAP1 PUSH1 0x4 ADD PUSH2 0x9F69 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5651 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x5665 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x568D SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x85EE JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 DUP3 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x569F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP5 POP POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x56BE PUSH2 0x79C8 JUMP JUMPDEST DUP3 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x56D2 SWAP2 SWAP1 PUSH2 0x8A90 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x5756 JUMPI POP PUSH1 0x40 MLOAD PUSH4 0x2E1A7D4D PUSH1 0xE0 SHL DUP2 MSTORE DUP5 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND SWAP1 PUSH4 0x2E1A7D4D SWAP1 PUSH2 0x571F SWAP1 DUP5 SWAP1 PUSH1 0x4 ADD PUSH2 0x96F4 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5739 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x574D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH2 0x576D JUMP JUMPDEST DUP2 MLOAD PUSH2 0x576D SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND SWAP1 DUP8 PUSH2 0x71E7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH2 0x579C SWAP1 ADDRESS SWAP1 PUSH1 0x4 ADD PUSH2 0x920C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x57B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x57C8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x57EC SWAP2 SWAP1 PUSH2 0x8680 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x60 DUP5 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 DUP7 PUSH1 0x20 ADD MLOAD DUP8 PUSH1 0x40 ADD MLOAD DUP9 PUSH1 0x60 ADD MLOAD DUP13 PUSH1 0x1 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x5826 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9968 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x5864 SWAP2 SWAP1 PUSH2 0x91F0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x58A1 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x58A6 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH2 0x58B9 JUMPI PUSH2 0x58B9 DUP2 PUSH2 0x5502 JUMP JUMPDEST DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x592B JUMPI SELFBALANCE SWAP6 POP DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD0E30DB0 DUP8 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5911 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x5925 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP JUMPDEST PUSH2 0x59B1 DUP4 DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x70A08231 ADDRESS PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x595B SWAP2 SWAP1 PUSH2 0x920C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5973 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5987 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x59AB SWAP2 SWAP1 PUSH2 0x8680 JUMP JUMPDEST SWAP1 PUSH2 0x72D2 JUMP JUMPDEST SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x59CB DUP4 DUP4 DUP4 PUSH2 0x7579 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2B05 DUP4 DUP4 PUSH2 0x75A0 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 DUP1 DUP5 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x59F6 SWAP2 SWAP1 PUSH2 0x87CF JUMP JUMPDEST DUP1 MLOAD SWAP2 SWAP5 POP SWAP3 POP PUSH1 0x2 GT ISZERO SWAP1 POP PUSH2 0x5A1F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12EC SWAP1 PUSH2 0x9B15 JUMP JUMPDEST DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 DUP4 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x5A39 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x5A67 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12EC SWAP1 PUSH2 0x9C88 JUMP JUMPDEST PUSH2 0x5A79 DUP3 DUP7 DUP4 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x55DD JUMPI INVALID JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x38ED1739 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x60 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x38ED1739 SWAP1 PUSH2 0x5AB1 SWAP1 DUP10 SWAP1 PUSH1 0x1 SWAP1 DUP8 SWAP1 ADDRESS SWAP1 TIMESTAMP SWAP1 PUSH1 0x4 ADD PUSH2 0x9FB9 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5ACB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x5ADF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x5B07 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x85EE JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 DUP3 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x5B19 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP4 POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5B37 PUSH2 0x78E5 JUMP JUMPDEST DUP3 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x5B4B SWAP2 SWAP1 PUSH2 0x893F JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP PUSH2 0x5B65 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND SWAP1 DUP7 PUSH2 0x71E7 JUMP JUMPDEST PUSH2 0x5B6D PUSH2 0x79EF JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xC0 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP1 DUP5 ADD MLOAD DUP3 MSTORE DUP2 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP DUP2 MSTORE POP SWAP1 POP PUSH2 0x5BCA PUSH2 0x79C8 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP2 ADD DUP3 MSTORE ADDRESS DUP1 DUP3 MSTORE PUSH1 0x0 PUSH1 0x20 DUP4 ADD DUP2 SWAP1 MSTORE DUP3 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP3 ADD MSTORE DUP4 MLOAD SWAP2 MLOAD PUSH4 0x52BBBE29 PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x52BBBE29 SWAP1 PUSH2 0x5C23 SWAP1 DUP6 SWAP1 DUP6 SWAP1 PUSH1 0x1 SWAP1 TIMESTAMP SWAP1 PUSH1 0x4 ADD PUSH2 0x9ED7 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5C3D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x5C51 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5C75 SWAP2 SWAP1 PUSH2 0x8680 JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH1 0x20 ADD MLOAD SWAP1 POP PUSH1 0x60 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x910FFC71 DUP8 PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x5CBF JUMPI DUP7 PUSH2 0x5CD5 JUMP JUMPDEST PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE JUMPDEST DUP9 PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x5CF8 JUMPI DUP7 PUSH2 0x5D0E JUMP JUMPDEST PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP2 DUP3 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP7 SWAP1 SHL AND SWAP1 SWAP2 MSTORE PUSH2 0x5D42 SWAP3 SWAP2 SWAP1 PUSH1 0x1 SWAP1 PUSH1 0x24 DUP2 ADD PUSH2 0x9277 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5D5A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5D6E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x5D96 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x829C JUMP JUMPDEST POP POP SWAP1 POP DUP1 MLOAD DUP7 PUSH1 0x0 ADD MLOAD LT PUSH2 0x5DB2 JUMPI POP PUSH1 0x0 SWAP2 POP PUSH2 0x2B05 SWAP1 POP JUMP JUMPDEST DUP1 DUP7 PUSH1 0x0 ADD MLOAD DUP2 MLOAD DUP2 LT PUSH2 0x5DC2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP3 POP PUSH1 0xF8 DUP4 SWAP1 SHR PUSH1 0x0 SHR PUSH1 0xBB EQ ISZERO PUSH2 0x5DE8 JUMPI POP PUSH1 0x0 SWAP2 POP PUSH2 0x2B05 SWAP1 POP JUMP JUMPDEST POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 DUP4 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x5E0A SWAP2 SWAP1 PUSH2 0x8882 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x5E42 JUMPI PUSH2 0x5E3D PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND DUP5 DUP9 PUSH2 0x71E7 JUMP JUMPDEST PUSH2 0x5EA4 JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0x2E1A7D4D PUSH1 0xE0 SHL DUP2 MSTORE DUP6 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND SWAP1 PUSH4 0x2E1A7D4D SWAP1 PUSH2 0x5E71 SWAP1 DUP5 SWAP1 PUSH1 0x4 ADD PUSH2 0x96F4 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5E8B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x5E9F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x29589F61 DUP3 DUP12 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP12 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x5ED3 JUMPI DUP11 PUSH2 0x5ED5 JUMP JUMPDEST DUP13 JUMPDEST DUP10 DUP14 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP13 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x5EF5 JUMPI DUP12 PUSH2 0x5EF7 JUMP JUMPDEST DUP15 JUMPDEST ADDRESS PUSH1 0x0 NOT PUSH1 0x1 PUSH1 0x0 DUP12 PUSH1 0x40 MLOAD DUP11 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5F23 SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9889 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5F3C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x5F50 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5F75 SWAP2 SWAP1 PUSH2 0x8680 JUMP JUMPDEST SWAP4 POP DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x5FE6 JUMPI DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD0E30DB0 DUP6 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5FCC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x5FE0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP JUMPDEST POP POP POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x57A281DC DUP7 DUP7 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6026 SWAP3 SWAP2 SWAP1 PUSH2 0x9239 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x603E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x6052 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x607A SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x826A JUMP JUMPDEST SWAP1 POP PUSH1 0x1 SWAP2 POP DUP1 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x6113 JUMPI PUSH1 0x40 MLOAD PUSH4 0x15E8A077 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND SWAP1 PUSH4 0x57A281DC SWAP1 PUSH2 0x60B8 SWAP1 DUP8 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x9239 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x60D0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x60E4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x610C SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x826A JUMP JUMPDEST SWAP1 POP PUSH1 0x0 SWAP2 POP JUMPDEST DUP1 MLOAD DUP7 LT PUSH2 0x6128 JUMPI PUSH1 0x0 DUP1 SWAP3 POP SWAP3 POP POP PUSH2 0x44CB JUMP JUMPDEST DUP1 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x6134 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP3 POP POP SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 DUP1 DUP5 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x6162 SWAP2 SWAP1 PUSH2 0x87CF JUMP JUMPDEST DUP1 MLOAD SWAP2 SWAP5 POP SWAP3 POP PUSH1 0x2 GT ISZERO SWAP1 POP PUSH2 0x618B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12EC SWAP1 PUSH2 0x9A27 JUMP JUMPDEST DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 DUP4 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x61A5 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 PUSH2 0x621A JUMPI POP PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 DUP4 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x61EB JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 ISZERO PUSH2 0x621A JUMPI POP DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST PUSH2 0x6236 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12EC SWAP1 PUSH2 0x9BDC JUMP JUMPDEST PUSH1 0x0 PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x6263 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x62E0 JUMPI PUSH1 0x40 MLOAD PUSH4 0x2E1A7D4D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND SWAP1 PUSH4 0x2E1A7D4D SWAP1 PUSH2 0x62A6 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x96F4 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x62C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x62D4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP DUP6 SWAP1 POP PUSH2 0x62FF JUMP JUMPDEST PUSH2 0x62FF DUP3 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x62F0 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 DUP9 PUSH2 0x71E7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xB77D239B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0xB77D239B SWAP1 DUP4 SWAP1 PUSH2 0x6339 SWAP1 DUP7 SWAP1 DUP12 SWAP1 PUSH1 0x1 SWAP1 ADDRESS SWAP1 PUSH1 0x0 SWAP1 DUP2 SWAP1 PUSH1 0x4 ADD PUSH2 0x95CA JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6352 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x6366 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x638B SWAP2 SWAP1 PUSH2 0x8680 JUMP JUMPDEST SWAP4 POP PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x1 DUP5 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x63BB JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x1B2E JUMPI DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD0E30DB0 DUP6 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x640D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x6421 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xC02AAA39B223FE8D0A0E5C4F27EAD9083C756CC2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND EQ PUSH2 0x645E JUMPI DUP4 PUSH2 0x6461 JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xC02AAA39B223FE8D0A0E5C4F27EAD9083C756CC2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND EQ PUSH2 0x648F JUMPI DUP4 PUSH2 0x6492 JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x901754D7 PUSH3 0x493E0 DUP5 DUP5 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x64C6 SWAP3 SWAP2 SWAP1 PUSH2 0x9239 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x64DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x650F JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x650C SWAP2 DUP2 ADD SWAP1 PUSH2 0x801E JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x2CB2 JUMPI PUSH2 0x5DE8 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x652F SWAP2 SWAP1 PUSH2 0x801E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x653F DUP9 DUP4 DUP10 DUP10 PUSH2 0x75CA JUMP JUMPDEST SWAP1 POP DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x6645 JUMPI PUSH1 0x40 MLOAD PUSH4 0x2E1A7D4D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND SWAP1 PUSH4 0x2E1A7D4D SWAP1 PUSH2 0x6587 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x96F4 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x65A1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x65B5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH4 0xAD65D76D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP3 POP PUSH4 0xAD65D76D SWAP2 POP DUP8 SWAP1 PUSH2 0x65EC SWAP1 PUSH1 0x1 SWAP1 TIMESTAMP SWAP1 ADDRESS SWAP1 PUSH1 0x4 ADD PUSH2 0x998D JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6605 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x6619 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x663E SWAP2 SWAP1 PUSH2 0x8680 JUMP JUMPDEST SWAP3 POP PUSH2 0x46BF JUMP JUMPDEST DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x6751 JUMPI PUSH2 0x6673 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND DUP3 DUP8 PUSH2 0x71E7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x95E3C50B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH4 0x95E3C50B SWAP1 PUSH2 0x66A4 SWAP1 DUP9 SWAP1 PUSH1 0x1 SWAP1 TIMESTAMP SWAP1 PUSH1 0x4 ADD PUSH2 0xA040 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x66BE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x66D2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x66F6 SWAP2 SWAP1 PUSH2 0x8680 JUMP JUMPDEST SWAP3 POP DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD0E30DB0 DUP5 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6733 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x6747 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP PUSH2 0x46BF JUMP JUMPDEST PUSH2 0x6765 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND DUP3 DUP8 PUSH2 0x71E7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xDDF7E1A7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH4 0xDDF7E1A7 SWAP1 PUSH2 0x5C23 SWAP1 DUP9 SWAP1 PUSH1 0x1 SWAP1 DUP2 SWAP1 TIMESTAMP SWAP1 DUP14 SWAP1 PUSH1 0x4 ADD PUSH2 0xA014 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP6 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x67C2 SWAP2 SWAP1 PUSH2 0x920C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x6800 SWAP2 SWAP1 PUSH2 0x91F0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x683B JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x6840 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x6854 JUMPI POP PUSH1 0x20 DUP2 MLOAD LT ISZERO JUMPDEST ISZERO PUSH2 0x41C8 JUMPI PUSH2 0x6864 DUP2 PUSH1 0x0 PUSH2 0x59D0 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6877 PUSH2 0x78E5 JUMP JUMPDEST DUP3 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x688B SWAP2 SWAP1 PUSH2 0x8DC8 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x70A08231 ADDRESS PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x68BB SWAP2 SWAP1 PUSH2 0x920C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x68D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x68E7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x690B SWAP2 SWAP1 PUSH2 0x8680 JUMP JUMPDEST DUP3 MLOAD PUSH1 0x20 DUP5 ADD MLOAD SWAP2 SWAP3 POP SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 DUP2 AND SWAP2 AND EQ ISZERO PUSH2 0x6A13 JUMPI PUSH2 0x69AE DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x1664F66 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6965 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x6979 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x699D SWAP2 SWAP1 PUSH2 0x801E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND SWAP1 DUP9 PUSH2 0x71E7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x4ACC893B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH4 0x95991276 SWAP1 PUSH2 0x69DC SWAP1 ADDRESS SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x9220 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x69F6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x6A0A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH2 0x6BC1 JUMP JUMPDEST DUP3 PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x6BC1 JUMPI PUSH1 0x0 PUSH2 0x6AB6 DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xFAE036D5 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6A6F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x6A83 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x6AA7 SWAP2 SWAP1 PUSH2 0x8680 JUMP JUMPDEST PUSH8 0xDE0B6B3A7640000 SWAP1 PUSH2 0x7327 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x313CE567 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6AF3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x6B07 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x6B2B SWAP2 SWAP1 PUSH2 0x8F5E JUMP JUMPDEST PUSH1 0xFF AND PUSH1 0xA EXP SWAP1 POP PUSH1 0x0 PUSH2 0x6B43 DUP4 PUSH2 0x4D3B DUP12 DUP6 PUSH2 0x72F6 JUMP JUMPDEST DUP7 MLOAD SWAP1 SWAP2 POP PUSH2 0x6B5D SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP14 AND SWAP1 DUP12 PUSH2 0x71E7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x8D7EF9BB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0x8D7EF9BB SWAP1 PUSH2 0x6B8B SWAP1 ADDRESS SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x9220 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6BA5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x6BB9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP JUMPDEST PUSH2 0x5C75 DUP3 DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x70A08231 ADDRESS PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x595B SWAP2 SWAP1 PUSH2 0x920C JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP5 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x6C0B SWAP2 SWAP1 PUSH2 0x8813 JUMP JUMPDEST SWAP2 SWAP5 POP SWAP3 POP SWAP1 POP PUSH2 0x6C26 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND DUP4 DUP9 PUSH2 0x71E7 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x6CC3 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP2 DUP3 SWAP1 MSTORE PUSH4 0x8DAE7333 PUSH1 0xE0 SHL SWAP1 SWAP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x8DAE7333 SWAP1 PUSH2 0x6C6A SWAP1 DUP10 SWAP1 PUSH1 0x1 SWAP1 PUSH1 0x24 DUP2 ADD PUSH2 0x9FF5 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6C84 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x6C98 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x6CBC SWAP2 SWAP1 PUSH2 0x8680 JUMP JUMPDEST SWAP4 POP PUSH2 0x6DD5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xCA19EBD9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0xCA19EBD9 SWAP1 PUSH2 0x6CF1 SWAP1 DUP6 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x9220 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6D09 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x6D1D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x6D41 SWAP2 SWAP1 PUSH2 0x8680 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP2 DUP3 SWAP1 MSTORE PUSH4 0x733E7383 PUSH1 0xE1 SHL SWAP1 SWAP2 MSTORE SWAP1 SWAP5 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0xE67CE706 SWAP1 PUSH2 0x6D81 SWAP1 DUP8 SWAP1 DUP11 SWAP1 PUSH1 0x24 DUP2 ADD PUSH2 0x9FF5 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6D9B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x6DAF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x6DD3 SWAP2 SWAP1 PUSH2 0x8680 JUMP JUMPDEST POP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 DUP4 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x6DF8 SWAP2 SWAP1 PUSH2 0x8882 JUMP JUMPDEST SWAP1 SWAP3 POP SWAP1 POP PUSH2 0x6E11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND DUP4 DUP8 PUSH2 0x770A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x19740AC1 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x65D02B04 SWAP1 PUSH2 0x6E46 SWAP1 DUP11 SWAP1 DUP11 SWAP1 ADDRESS SWAP1 PUSH1 0x1 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x97C5 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6E60 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x6E74 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x6E98 SWAP2 SWAP1 PUSH2 0x8680 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x6EBA SWAP2 SWAP1 PUSH2 0x801E JUMP JUMPDEST SWAP1 POP PUSH2 0x6ED0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP3 DUP7 PUSH2 0x71E7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xD5BCB9B5 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH4 0xD5BCB9B5 SWAP1 PUSH2 0x4C65 SWAP1 DUP10 SWAP1 DUP10 SWAP1 DUP10 SWAP1 PUSH1 0x1 SWAP1 ADDRESS SWAP1 PUSH1 0x4 ADD PUSH2 0x9828 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDD62ED3E PUSH1 0xE0 SHL DUP7 DUP7 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x6F2F SWAP3 SWAP2 SWAP1 PUSH2 0x9239 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x6F6D SWAP2 SWAP1 PUSH2 0x91F0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x6FA8 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x6FAD JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x6FC1 JUMPI POP PUSH1 0x20 DUP2 MLOAD LT ISZERO JUMPDEST ISZERO PUSH2 0x5DE8 JUMPI PUSH2 0x2CB2 DUP2 PUSH1 0x0 PUSH2 0x59D0 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x6FEA SWAP2 SWAP1 PUSH2 0x8854 JUMP JUMPDEST SWAP1 SWAP3 POP SWAP1 POP PUSH2 0x7003 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP4 DUP8 PUSH2 0x770A JUMP JUMPDEST DUP1 PUSH2 0x708B JUMPI PUSH1 0x40 MLOAD PUSH4 0x6EC9FACD PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0xDD93F59A SWAP1 PUSH2 0x7034 SWAP1 ADDRESS SWAP1 PUSH1 0x4 ADD PUSH2 0x920C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x704E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x7062 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x7086 SWAP2 SWAP1 PUSH2 0x8680 JUMP JUMPDEST PUSH2 0x2CB2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x2F58056D PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0xBD6015B4 SWAP1 PUSH2 0x4C65 SWAP1 ADDRESS SWAP1 PUSH1 0x4 ADD PUSH2 0x920C JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x70D0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x70FA JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x2295 JUMPI DUP3 PUSH1 0x1 DUP3 DUP6 MLOAD SUB SUB DUP2 MLOAD DUP2 LT PUSH2 0x711B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x712F JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE PUSH1 0x1 ADD PUSH2 0x7100 JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x7168 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x7192 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x2295 JUMPI DUP3 PUSH1 0x1 DUP3 DUP6 MLOAD SUB SUB DUP2 MLOAD DUP2 LT PUSH2 0x71B3 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x71C7 JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE PUSH1 0x1 ADD PUSH2 0x7198 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x6EB1769F PUSH1 0xE1 SHL DUP2 MSTORE DUP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0xDD62ED3E SWAP1 PUSH2 0x7217 SWAP1 ADDRESS SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x9239 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x722F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x7243 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x7267 SWAP2 SWAP1 PUSH2 0x8680 JUMP JUMPDEST LT ISZERO PUSH2 0x59CB JUMPI PUSH2 0x59CB DUP4 DUP4 PUSH1 0x0 NOT PUSH2 0x776B JUMP JUMPDEST PUSH1 0x0 DUP4 ISZERO DUP1 PUSH2 0x7287 JUMPI POP DUP2 ISZERO JUMPDEST DUP1 PUSH2 0x7290 JUMPI POP DUP3 ISZERO JUMPDEST ISZERO PUSH2 0x729D JUMPI POP PUSH1 0x0 PUSH2 0x2B05 JUMP JUMPDEST DUP4 DUP3 MUL DUP3 DUP6 DUP3 DUP2 PUSH2 0x72AA JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x72BA JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x2B05 JUMP JUMPDEST DUP4 PUSH1 0x1 DUP6 SUB DUP3 ADD DUP2 PUSH2 0x72C8 JUMPI INVALID JUMPDEST DIV SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x72F0 JUMPI PUSH2 0x72F0 PUSH2 0x72EB PUSH1 0x2 DUP6 DUP6 PUSH2 0x7788 JUMP JUMPDEST PUSH2 0x5502 JUMP JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x7305 JUMPI POP PUSH1 0x0 PUSH2 0x41CB JUMP JUMPDEST DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 PUSH2 0x7312 JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x2B05 JUMPI PUSH2 0x2B05 PUSH2 0x72EB PUSH1 0x1 DUP7 DUP7 PUSH2 0x7788 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x2B05 JUMPI PUSH2 0x2B05 PUSH2 0x72EB PUSH1 0x0 DUP7 DUP7 PUSH2 0x7788 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x7359 JUMPI PUSH2 0x7359 PUSH2 0x72EB PUSH1 0x3 DUP6 DUP6 PUSH2 0x7788 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP2 PUSH2 0x7364 JUMPI INVALID JUMPDEST DIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 EXTCODESIZE DUP1 PUSH2 0x7380 JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x1009 JUMP JUMPDEST POP DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDFE1681 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x73BA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x73CE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x73F2 SWAP2 SWAP1 PUSH2 0x801E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x70A08231 DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x741D SWAP2 SWAP1 PUSH2 0x920C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7435 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x7449 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x746D SWAP2 SWAP1 PUSH2 0x8680 JUMP JUMPDEST PUSH2 0x7479 JUMPI POP PUSH1 0x0 PUSH2 0x1009 JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD21220A7 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x74B2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x74C6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x74EA SWAP2 SWAP1 PUSH2 0x801E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x70A08231 DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7515 SWAP2 SWAP1 PUSH2 0x920C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x752D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x7541 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x7565 SWAP2 SWAP1 PUSH2 0x8680 JUMP JUMPDEST PUSH2 0x7571 JUMPI POP PUSH1 0x0 PUSH2 0x1009 JUMP JUMPDEST POP PUSH1 0x1 SWAP2 SWAP1 POP JUMP JUMPDEST DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO PUSH2 0x7598 JUMPI PUSH2 0x7598 PUSH2 0x72EB PUSH1 0x5 DUP6 MLOAD DUP6 PUSH1 0x20 ADD PUSH2 0x77E2 JUMP JUMPDEST SWAP2 ADD PUSH1 0x20 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO PUSH2 0x75C1 JUMPI PUSH2 0x75C1 PUSH2 0x72EB PUSH1 0x5 DUP6 MLOAD DUP6 PUSH1 0x20 ADD PUSH2 0x77E2 JUMP JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x7666 JUMPI PUSH1 0x40 MLOAD PUSH4 0x3795FB1 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0x6F2BF62 SWAP1 PUSH2 0x7611 SWAP1 DUP7 SWAP1 PUSH1 0x4 ADD PUSH2 0x920C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7629 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x763D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x7661 SWAP2 SWAP1 PUSH2 0x801E JUMP JUMPDEST PUSH2 0x76E2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x3795FB1 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0x6F2BF62 SWAP1 PUSH2 0x7692 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x920C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x76AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x76BE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x76E2 SWAP2 SWAP1 PUSH2 0x801E JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xFFC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12EC SWAP1 PUSH2 0x99F0 JUMP JUMPDEST PUSH1 0x60 PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x7727 SWAP3 SWAP2 SWAP1 PUSH2 0x9220 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP PUSH2 0x7765 DUP5 DUP3 PUSH2 0x7801 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH4 0x95EA7B3 PUSH1 0xE0 SHL DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x7727 SWAP3 SWAP2 SWAP1 PUSH2 0x9220 JUMP JUMPDEST PUSH1 0x60 PUSH4 0xE946C1BB PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x77A7 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9939 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH4 0x28006595 PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x77A7 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x995A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x40 MLOAD PUSH2 0x781D SWAP2 SWAP1 PUSH2 0x91F0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x785A JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x785F JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x7875 JUMPI POP PUSH2 0x7875 DUP2 PUSH2 0x788E JUMP JUMPDEST ISZERO PUSH2 0x7881 JUMPI POP POP PUSH2 0x788A JUMP JUMPDEST PUSH2 0x7765 DUP2 PUSH2 0x5502 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x78A2 JUMPI POP PUSH1 0x1 PUSH2 0x1009 JUMP JUMPDEST PUSH1 0x20 DUP3 MLOAD LT PUSH2 0x1009 JUMPI PUSH1 0x0 PUSH2 0x78B8 DUP4 PUSH1 0x0 PUSH2 0x59D0 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 EQ ISZERO PUSH2 0x2295 JUMPI PUSH1 0x1 SWAP2 POP POP PUSH2 0x1009 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x60 SWAP3 DUP3 ADD DUP4 SWAP1 MSTORE SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 SWAP1 PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY POP SWAP2 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xC0 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x41CB DUP2 PUSH2 0xA13B JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x7A53 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x7A66 PUSH2 0x7A61 DUP3 PUSH2 0xA0C0 JUMP JUMPDEST PUSH2 0xA09A JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x7A87 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x7AAF JUMPI DUP2 CALLDATALOAD PUSH2 0x7A9D DUP2 PUSH2 0xA13B JUMP JUMPDEST DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x7A8A JUMP JUMPDEST POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x7ACA JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x7AD8 PUSH2 0x7A61 DUP3 PUSH2 0xA0C0 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x7AF9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x7AAF JUMPI DUP2 MLOAD PUSH2 0x7B0F DUP2 PUSH2 0xA13B JUMP JUMPDEST DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x7AFC JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x7B31 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x7B3F PUSH2 0x7A61 DUP3 PUSH2 0xA0C0 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x7AAF JUMPI PUSH2 0x7B67 DUP9 DUP5 DUP5 CALLDATALOAD DUP11 ADD ADD PUSH2 0x7A43 JUMP JUMPDEST DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x7B50 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x7B89 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x7B97 PUSH2 0x7A61 DUP3 PUSH2 0xA0C0 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x7AAF JUMPI PUSH2 0x7BBF DUP9 DUP5 DUP5 CALLDATALOAD DUP11 ADD ADD PUSH2 0x7D68 JUMP JUMPDEST DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x7BA8 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x7BE1 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x7BEF PUSH2 0x7A61 DUP3 PUSH2 0xA0C0 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x7C10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x7AAF JUMPI DUP2 CALLDATALOAD PUSH2 0x7C26 DUP2 PUSH2 0xA13B JUMP JUMPDEST DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x7C13 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x7C48 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x7C56 PUSH2 0x7A61 DUP3 PUSH2 0xA0C0 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD PUSH1 0x80 DUP1 DUP6 MUL DUP8 ADD DUP4 ADD DUP9 LT ISZERO PUSH2 0x7C79 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x7CA0 JUMPI PUSH2 0x7C8E DUP10 DUP5 PUSH2 0x7F83 JUMP JUMPDEST DUP6 MSTORE SWAP4 DUP4 ADD SWAP4 SWAP2 DUP2 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x7C7C JUMP JUMPDEST POP POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x7CBC JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x7CCA PUSH2 0x7A61 DUP3 PUSH2 0xA0C0 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x7CEB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x7AAF JUMPI DUP2 CALLDATALOAD DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x7CEE JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x7D1A JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x7D28 PUSH2 0x7A61 DUP3 PUSH2 0xA0C0 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x7D49 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x7AAF JUMPI DUP2 MLOAD DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x7D4C JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x7D78 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x7D86 PUSH2 0x7A61 DUP3 PUSH2 0xA0DF JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x7D9D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP5 ADD CALLDATACOPY PUSH1 0x0 SWAP1 DUP3 ADD PUSH1 0x20 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x7DC6 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x7DD4 PUSH2 0x7A61 DUP3 PUSH2 0xA0DF JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x7DEB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1E91 DUP2 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP7 ADD PUSH2 0xA102 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x2 DUP2 LT PUSH2 0x41CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x7E1C JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x7E26 PUSH1 0xA0 PUSH2 0xA09A JUMP JUMPDEST SWAP1 POP DUP2 CALLDATALOAD DUP2 MSTORE PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH2 0x7E3A DUP2 PUSH2 0xA13B JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP3 ADD CALLDATALOAD PUSH2 0x7E4D DUP2 PUSH2 0xA13B JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP3 ADD CALLDATALOAD PUSH2 0x7E60 DUP2 PUSH2 0xA13B JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP3 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x7E7E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x7E8A DUP5 DUP3 DUP6 ADD PUSH2 0x7D68 JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x180 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x7EA9 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x7EB2 DUP2 PUSH2 0xA09A JUMP JUMPDEST SWAP2 POP POP PUSH2 0x7EBF DUP4 DUP4 PUSH2 0x7A38 JUMP JUMPDEST DUP2 MSTORE PUSH2 0x7ECE DUP4 PUSH1 0x20 DUP5 ADD PUSH2 0x7A38 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x7EE0 DUP4 PUSH1 0x40 DUP5 ADD PUSH2 0x7FE0 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x7EF2 DUP4 PUSH1 0x60 DUP5 ADD PUSH2 0x7FE0 JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH2 0x7F04 DUP4 PUSH1 0x80 DUP5 ADD PUSH2 0x7FE0 JUMP JUMPDEST PUSH1 0x80 DUP3 ADD MSTORE PUSH2 0x7F16 DUP4 PUSH1 0xA0 DUP5 ADD PUSH2 0x7A38 JUMP JUMPDEST PUSH1 0xA0 DUP3 ADD MSTORE PUSH2 0x7F28 DUP4 PUSH1 0xC0 DUP5 ADD PUSH2 0x7A38 JUMP JUMPDEST PUSH1 0xC0 DUP3 ADD MSTORE PUSH2 0x7F3A DUP4 PUSH1 0xE0 DUP5 ADD PUSH2 0x7A38 JUMP JUMPDEST PUSH1 0xE0 DUP3 ADD MSTORE PUSH2 0x100 PUSH2 0x7F4E DUP5 DUP3 DUP6 ADD PUSH2 0x7A38 JUMP JUMPDEST SWAP1 DUP3 ADD MSTORE PUSH2 0x120 DUP3 DUP2 ADD CALLDATALOAD SWAP1 DUP3 ADD MSTORE PUSH2 0x140 PUSH2 0x7F6C DUP5 DUP3 DUP6 ADD PUSH2 0x7FEB JUMP JUMPDEST DUP2 DUP4 ADD MSTORE POP PUSH2 0x160 DUP1 DUP4 ADD CALLDATALOAD DUP2 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x7F94 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x7F9E PUSH1 0x80 PUSH2 0xA09A JUMP JUMPDEST SWAP1 POP DUP2 CALLDATALOAD PUSH1 0x4 DUP2 LT PUSH2 0x7FAF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH2 0x7FBF DUP2 PUSH2 0xA198 JUMP JUMPDEST DUP1 PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 DUP3 ADD CALLDATALOAD PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP3 ADD CALLDATALOAD PUSH1 0x60 DUP3 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x41CB DUP2 PUSH2 0xA183 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x41CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x8013 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x2B05 DUP2 PUSH2 0xA13B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x802F JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x2B05 DUP2 PUSH2 0xA13B JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x804E JUMPI DUP2 DUP3 REVERT JUMPDEST DUP4 MLOAD PUSH2 0x8059 DUP2 PUSH2 0xA13B JUMP JUMPDEST PUSH1 0x20 DUP6 ADD MLOAD SWAP1 SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x8075 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x8081 DUP8 DUP4 DUP9 ADD PUSH2 0x7ABA JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x8096 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x80A3 DUP7 DUP3 DUP8 ADD PUSH2 0x7ABA JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x80C2 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x80CD DUP2 PUSH2 0xA13B JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x80DD DUP2 PUSH2 0xA13B JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x80ED DUP2 PUSH2 0xA13B JUMP JUMPDEST SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x8107 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x8113 DUP8 DUP3 DUP9 ADD PUSH2 0x7CAC JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x8134 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x813F DUP2 PUSH2 0xA13B JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x814F DUP2 PUSH2 0xA13B JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x8169 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x8175 DUP8 DUP3 DUP9 ADD PUSH2 0x7D68 JUMP JUMPDEST SWAP5 SWAP8 SWAP4 SWAP7 POP SWAP4 SWAP5 PUSH1 0x60 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x819A JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x81A5 DUP2 PUSH2 0xA13B JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x81C0 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x81CC DUP8 DUP4 DUP9 ADD PUSH2 0x7A43 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x81E1 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x80A3 DUP7 DUP3 DUP8 ADD PUSH2 0x7CAC JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x8205 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x8210 DUP2 PUSH2 0xA13B JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH2 0x8227 DUP2 PUSH2 0xA13B JUMP JUMPDEST SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH2 0x8237 DUP2 PUSH2 0xA13B JUMP JUMPDEST SWAP2 POP PUSH1 0x80 DUP7 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x8251 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x825D DUP9 DUP3 DUP10 ADD PUSH2 0x7CAC JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x827B JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x8290 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0xFFC DUP5 DUP3 DUP6 ADD PUSH2 0x7ABA JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x82B0 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x82C6 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 DUP7 ADD SWAP2 POP DUP7 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x82D9 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x82E7 PUSH2 0x7A61 DUP3 PUSH2 0xA0C0 JUMP JUMPDEST DUP1 DUP3 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD SWAP3 POP DUP1 DUP7 ADD DUP12 DUP3 DUP4 DUP8 MUL DUP10 ADD ADD GT ISZERO PUSH2 0x8307 JUMPI DUP8 DUP9 REVERT JUMPDEST DUP8 SWAP7 POP JUMPDEST DUP5 DUP8 LT ISZERO PUSH2 0x8329 JUMPI DUP1 MLOAD DUP5 MSTORE PUSH1 0x1 SWAP7 SWAP1 SWAP7 ADD SWAP6 SWAP3 DUP2 ADD SWAP3 DUP2 ADD PUSH2 0x830B JUMP JUMPDEST POP DUP10 ADD MLOAD SWAP1 SWAP8 POP SWAP4 POP POP POP DUP1 DUP3 GT ISZERO PUSH2 0x8340 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x834D DUP7 DUP3 DUP8 ADD PUSH2 0x7D0A JUMP JUMPDEST SWAP3 POP POP PUSH2 0x835D DUP6 PUSH1 0x40 DUP7 ADD PUSH2 0x7DFC JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x8378 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x838E JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x83A1 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x83AF JUMPI DUP5 DUP6 REVERT JUMPDEST DUP7 PUSH1 0x20 DUP1 DUP4 MUL DUP6 ADD ADD GT ISZERO PUSH2 0x83C2 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH1 0x20 SWAP3 SWAP1 SWAP3 ADD SWAP7 SWAP2 SWAP6 POP SWAP1 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x83E8 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x83FE JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x840A DUP8 DUP4 DUP9 ADD PUSH2 0x7B79 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x841F JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x842C DUP7 DUP3 DUP8 ADD PUSH2 0x7B79 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x844E JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x8463 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0xFFC DUP5 DUP3 DUP6 ADD PUSH2 0x7BD1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x8481 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x8496 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x84A2 DUP6 DUP3 DUP7 ADD PUSH2 0x7BD1 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x84B3 DUP2 PUSH2 0xA13B JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x84D2 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x84E7 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x84F3 DUP7 DUP3 DUP8 ADD PUSH2 0x7BD1 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x8504 DUP2 PUSH2 0xA13B JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH2 0x8514 DUP2 PUSH2 0xA13B JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x8533 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x8549 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 DUP7 ADD SWAP2 POP DUP7 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x855C JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x856A PUSH2 0x7A61 DUP3 PUSH2 0xA0C0 JUMP JUMPDEST DUP1 DUP3 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD SWAP3 POP DUP1 DUP7 ADD PUSH2 0x180 DUP13 DUP4 DUP3 DUP9 MUL DUP11 ADD ADD GT ISZERO PUSH2 0x858D JUMPI DUP9 DUP10 REVERT JUMPDEST DUP9 SWAP8 POP JUMPDEST DUP6 DUP9 LT ISZERO PUSH2 0x85B9 JUMPI PUSH2 0x85A3 DUP14 DUP4 PUSH2 0x7E96 JUMP JUMPDEST DUP6 MSTORE PUSH1 0x1 SWAP8 SWAP1 SWAP8 ADD SWAP7 SWAP4 DUP3 ADD SWAP4 SWAP1 DUP2 ADD SWAP1 PUSH2 0x8591 JUMP JUMPDEST POP SWAP2 SWAP9 POP DUP10 ADD CALLDATALOAD SWAP5 POP POP POP POP DUP1 DUP3 GT ISZERO PUSH2 0x85D1 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x85DE DUP7 DUP3 DUP8 ADD PUSH2 0x7C38 JUMP JUMPDEST SWAP3 POP POP PUSH2 0x835D DUP6 PUSH1 0x40 DUP7 ADD PUSH2 0x7A38 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x85FF JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x8614 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0xFFC DUP5 DUP3 DUP6 ADD PUSH2 0x7D0A JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x8632 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x8648 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x8654 DUP7 DUP4 DUP8 ADD PUSH2 0x7D0A JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x8669 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x8676 DUP6 DUP3 DUP7 ADD PUSH2 0x7D0A JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x8691 JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x86AF JUMPI DUP3 DUP4 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x86BA DUP2 PUSH2 0xA15E JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x86CA DUP2 PUSH2 0xA13B JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH2 0x86DA DUP2 PUSH2 0xA13B JUMP JUMPDEST SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x86F5 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x8701 DUP10 DUP4 DUP11 ADD PUSH2 0x7D68 JUMP JUMPDEST SWAP4 POP PUSH1 0x80 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x8716 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x825D DUP9 DUP3 DUP10 ADD PUSH2 0x7CAC JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x873A JUMPI DUP3 DUP4 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x8745 DUP2 PUSH2 0xA15E JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x8755 DUP2 PUSH2 0xA13B JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH2 0x8765 DUP2 PUSH2 0xA13B JUMP JUMPDEST SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x877F JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x878B DUP9 DUP3 DUP10 ADD PUSH2 0x7D68 JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP3 SWAP6 PUSH1 0x80 ADD CALLDATALOAD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x87AE JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x87C3 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0xFFC DUP5 DUP3 DUP6 ADD PUSH2 0x7DB6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x87E1 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH2 0x87EC DUP2 PUSH2 0xA13B JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x8807 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x8676 DUP6 DUP3 DUP7 ADD PUSH2 0x7ABA JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x8827 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 MLOAD PUSH2 0x8832 DUP2 PUSH2 0xA13B JUMP JUMPDEST PUSH1 0x20 DUP6 ADD MLOAD SWAP1 SWAP4 POP PUSH2 0x8843 DUP2 PUSH2 0xA13B JUMP JUMPDEST PUSH1 0x40 DUP6 ADD MLOAD SWAP1 SWAP3 POP PUSH2 0x8514 DUP2 PUSH2 0xA150 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x8866 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH2 0x8871 DUP2 PUSH2 0xA13B JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 SWAP3 POP PUSH2 0x84B3 DUP2 PUSH2 0xA150 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x8894 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH2 0x889F DUP2 PUSH2 0xA13B JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x88BA JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x8676 DUP6 DUP3 DUP7 ADD PUSH2 0x7DB6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x88DB JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x88E6 DUP2 PUSH2 0xA13B JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x88F6 DUP2 PUSH2 0xA13B JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x8911 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x891D DUP9 DUP4 DUP10 ADD PUSH2 0x7BD1 JUMP JUMPDEST SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x8932 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x8113 DUP8 DUP3 DUP9 ADD PUSH2 0x7CAC JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x8950 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x895A PUSH1 0x40 PUSH2 0xA09A JUMP JUMPDEST DUP3 MLOAD PUSH2 0x8965 DUP2 PUSH2 0xA13B JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD MLOAD SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP5 DUP7 SUB PUSH1 0xA0 DUP2 SLT ISZERO PUSH2 0x8990 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x40 DUP2 SLT ISZERO PUSH2 0x899D JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x89A8 PUSH1 0x40 PUSH2 0xA09A JUMP JUMPDEST DUP6 CALLDATALOAD PUSH2 0x89B3 DUP2 PUSH2 0xA13B JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP7 DUP2 ADD CALLDATALOAD SWAP1 DUP3 ADD MSTORE SWAP4 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x89CF DUP2 PUSH2 0xA13B JUMP JUMPDEST SWAP3 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH2 0x89DF DUP2 PUSH2 0xA13B JUMP JUMPDEST SWAP2 POP PUSH1 0x80 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x8107 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x8A0E JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x8A24 JUMPI DUP4 DUP5 REVERT JUMPDEST SWAP1 DUP7 ADD SWAP1 PUSH1 0x40 DUP3 DUP10 SUB SLT ISZERO PUSH2 0x8A37 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x8A41 PUSH1 0x40 PUSH2 0xA09A JUMP JUMPDEST PUSH2 0x8A4B DUP10 DUP5 PUSH2 0x7A38 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP3 DUP2 GT ISZERO PUSH2 0x8A5E JUMPI DUP6 DUP7 REVERT JUMPDEST PUSH2 0x8A6A DUP11 DUP3 DUP7 ADD PUSH2 0x7B21 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP DUP1 SWAP7 POP POP PUSH2 0x8A81 DUP9 PUSH1 0x20 DUP10 ADD PUSH2 0x7A38 JUMP JUMPDEST SWAP5 POP PUSH2 0x891D DUP9 PUSH1 0x40 DUP10 ADD PUSH2 0x7A38 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x8AA1 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x8AAB PUSH1 0x80 PUSH2 0xA09A JUMP JUMPDEST DUP3 MLOAD PUSH2 0x8AB6 DUP2 PUSH2 0xA13B JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP4 ADD MLOAD PUSH2 0x8AC6 DUP2 PUSH2 0xA15E JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP4 ADD MLOAD PUSH2 0x8AD9 DUP2 PUSH2 0xA174 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP4 ADD MLOAD PUSH2 0x8AEC DUP2 PUSH2 0xA174 JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP5 DUP7 SUB PUSH1 0xE0 DUP2 SLT ISZERO PUSH2 0x8B0E JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x80 DUP2 SLT ISZERO PUSH2 0x8B1B JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x8B26 PUSH1 0x80 PUSH2 0xA09A JUMP JUMPDEST DUP6 CALLDATALOAD PUSH2 0x8B31 DUP2 PUSH2 0xA13B JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x8B41 DUP2 PUSH2 0xA15E JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH2 0x8B54 DUP2 PUSH2 0xA174 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH2 0x8B67 DUP2 PUSH2 0xA174 JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE SWAP4 POP PUSH2 0x8B7B DUP7 PUSH1 0x80 DUP8 ADD PUSH2 0x7A38 JUMP JUMPDEST SWAP3 POP PUSH2 0x8B8A DUP7 PUSH1 0xA0 DUP8 ADD PUSH2 0x7A38 JUMP JUMPDEST SWAP2 POP PUSH1 0xC0 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x8107 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP5 DUP7 SUB PUSH1 0xA0 DUP2 SLT ISZERO PUSH2 0x8BBA JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x40 DUP2 SLT ISZERO PUSH2 0x8BC7 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x8BD2 PUSH1 0x40 PUSH2 0xA09A JUMP JUMPDEST DUP6 CALLDATALOAD PUSH2 0x8BDD DUP2 PUSH2 0xA13B JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x8BED DUP2 PUSH2 0xA13B JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE SWAP4 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x89CF DUP2 PUSH2 0xA13B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x8C13 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x8C29 JUMPI DUP3 DUP4 REVERT JUMPDEST SWAP1 DUP4 ADD SWAP1 PUSH1 0xA0 DUP3 DUP7 SUB SLT ISZERO PUSH2 0x8C3C JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x8C46 PUSH1 0xA0 PUSH2 0xA09A JUMP JUMPDEST DUP3 MLOAD DUP2 MSTORE PUSH1 0x20 DUP4 ADD MLOAD PUSH2 0x8C58 DUP2 PUSH2 0xA13B JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP4 ADD MLOAD PUSH2 0x8C6B DUP2 PUSH2 0xA13B JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP4 ADD MLOAD PUSH2 0x8C7E DUP2 PUSH2 0xA13B JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP4 ADD MLOAD DUP3 DUP2 GT ISZERO PUSH2 0x8C94 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x8CA0 DUP8 DUP3 DUP7 ADD PUSH2 0x7DB6 JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x8CC4 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x8CDA JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x8CE6 DUP9 DUP4 DUP10 ADD PUSH2 0x7E0B JUMP JUMPDEST SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP2 POP PUSH2 0x8CF8 DUP3 PUSH2 0xA13B JUMP JUMPDEST SWAP1 SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP1 PUSH2 0x8D0A DUP3 PUSH2 0xA13B JUMP JUMPDEST SWAP1 SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD SWAP1 DUP1 DUP3 GT ISZERO PUSH2 0x8932 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x8D34 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x8D49 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x8D55 DUP8 DUP3 DUP9 ADD PUSH2 0x7E0B JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x8D6D DUP2 PUSH2 0xA13B JUMP JUMPDEST SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH2 0x8D7D DUP2 PUSH2 0xA13B JUMP JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP1 SWAP4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x220 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x8D9D JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x8DA7 DUP6 DUP6 PUSH2 0x7E96 JUMP JUMPDEST SWAP3 POP PUSH2 0x8DB7 DUP6 PUSH2 0x180 DUP7 ADD PUSH2 0x7F83 JUMP JUMPDEST SWAP2 POP PUSH2 0x200 DUP5 ADD CALLDATALOAD PUSH2 0x8514 DUP2 PUSH2 0xA13B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x8DD9 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x8DE3 PUSH1 0x40 PUSH2 0xA09A JUMP JUMPDEST DUP3 MLOAD PUSH2 0x8DEE DUP2 PUSH2 0xA13B JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP4 ADD MLOAD PUSH2 0x8DFE DUP2 PUSH2 0xA13B JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP5 DUP7 SUB PUSH1 0xC0 DUP2 SLT ISZERO PUSH2 0x8E20 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x60 DUP2 SLT ISZERO PUSH2 0x8E2D JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x8E38 PUSH1 0x60 PUSH2 0xA09A JUMP JUMPDEST DUP6 CALLDATALOAD PUSH2 0x8E43 DUP2 PUSH2 0xA13B JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP7 DUP2 ADD CALLDATALOAD SWAP1 DUP3 ADD MSTORE PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH2 0x8E5D DUP2 PUSH2 0xA13B JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE SWAP4 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH2 0x8E72 DUP2 PUSH2 0xA13B JUMP JUMPDEST SWAP3 POP PUSH1 0x80 DUP6 ADD CALLDATALOAD PUSH2 0x8E82 DUP2 PUSH2 0xA13B JUMP JUMPDEST SWAP2 POP PUSH1 0xA0 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x8107 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 DUP6 SUB PUSH1 0xA0 DUP2 SLT ISZERO PUSH2 0x8EB1 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x60 DUP2 SLT ISZERO PUSH2 0x8EBE JUMPI DUP2 DUP3 REVERT JUMPDEST POP PUSH2 0x8EC9 PUSH1 0x60 PUSH2 0xA09A JUMP JUMPDEST DUP5 MLOAD DUP2 MSTORE PUSH1 0x20 DUP6 ADD MLOAD PUSH1 0x5 DUP2 LT PUSH2 0x8EDE JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP6 ADD MLOAD PUSH2 0x8EF1 DUP2 PUSH2 0xA183 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP6 ADD MLOAD SWAP1 SWAP4 POP PUSH2 0x8F07 DUP2 PUSH2 0xA183 JUMP JUMPDEST PUSH1 0x80 DUP6 ADD MLOAD SWAP1 SWAP3 POP PUSH2 0x8514 DUP2 PUSH2 0xA150 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x8F29 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH3 0xFFFFFF DUP2 AND DUP2 EQ PUSH2 0x2B05 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x8F4D JUMPI DUP2 DUP3 REVERT JUMPDEST POP POP DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD MLOAD SWAP1 SWAP3 SWAP1 SWAP2 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x8F6F JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x2B05 DUP2 PUSH2 0xA198 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD DUP4 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x8FBF JUMPI DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x8F9A JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD DUP4 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x8FBF JUMPI DUP2 MLOAD DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x8FDD JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x9011 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0xA102 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP4 MSTORE PUSH1 0x20 DUP1 DUP4 ADD MLOAD ISZERO ISZERO SWAP1 DUP5 ADD MSTORE PUSH1 0x40 DUP1 DUP4 ADD MLOAD SWAP1 SWAP2 AND SWAP1 DUP4 ADD MSTORE PUSH1 0x60 SWAP1 DUP2 ADD MLOAD ISZERO ISZERO SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP4 MSTORE PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x40 PUSH1 0x20 DUP6 ADD MSTORE PUSH2 0xFFC PUSH1 0x40 DUP6 ADD DUP3 PUSH2 0x8FF9 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP4 MSTORE PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 DUP3 AND PUSH1 0x20 DUP7 ADD MSTORE DUP1 PUSH1 0x40 DUP6 ADD MLOAD AND PUSH1 0x40 DUP7 ADD MSTORE DUP1 PUSH1 0x60 DUP6 ADD MLOAD AND PUSH1 0x60 DUP7 ADD MSTORE POP POP PUSH1 0x80 DUP3 ADD MLOAD PUSH1 0xA0 PUSH1 0x80 DUP6 ADD MSTORE PUSH2 0xFFC PUSH1 0xA0 DUP6 ADD DUP3 PUSH2 0x8FF9 JUMP JUMPDEST PUSH2 0x90D1 DUP3 DUP3 MLOAD PUSH2 0x8F7A JUMP JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD PUSH2 0x90E3 PUSH1 0x20 DUP5 ADD DUP3 PUSH2 0x8F7A JUMP JUMPDEST POP PUSH1 0x40 DUP2 ADD MLOAD PUSH2 0x90F6 PUSH1 0x40 DUP5 ADD DUP3 PUSH2 0x91C6 JUMP JUMPDEST POP PUSH1 0x60 DUP2 ADD MLOAD PUSH2 0x9109 PUSH1 0x60 DUP5 ADD DUP3 PUSH2 0x91C6 JUMP JUMPDEST POP PUSH1 0x80 DUP2 ADD MLOAD PUSH2 0x911C PUSH1 0x80 DUP5 ADD DUP3 PUSH2 0x91C6 JUMP JUMPDEST POP PUSH1 0xA0 DUP2 ADD MLOAD PUSH2 0x912F PUSH1 0xA0 DUP5 ADD DUP3 PUSH2 0x8F7A JUMP JUMPDEST POP PUSH1 0xC0 DUP2 ADD MLOAD PUSH2 0x9142 PUSH1 0xC0 DUP5 ADD DUP3 PUSH2 0x8F7A JUMP JUMPDEST POP PUSH1 0xE0 DUP2 ADD MLOAD PUSH2 0x9155 PUSH1 0xE0 DUP5 ADD DUP3 PUSH2 0x8F7A JUMP JUMPDEST POP PUSH2 0x100 DUP1 DUP3 ADD MLOAD PUSH2 0x9169 DUP3 DUP6 ADD DUP3 PUSH2 0x8F7A JUMP JUMPDEST POP POP PUSH2 0x120 DUP2 DUP2 ADD MLOAD SWAP1 DUP4 ADD MSTORE PUSH2 0x140 DUP1 DUP3 ADD MLOAD PUSH2 0x9189 DUP3 DUP6 ADD DUP3 PUSH2 0x91D3 JUMP JUMPDEST POP POP PUSH2 0x160 SWAP1 DUP2 ADD MLOAD SWAP2 ADD MSTORE JUMP JUMPDEST DUP1 MLOAD PUSH2 0x91A2 DUP2 PUSH2 0xA12E JUMP JUMPDEST DUP3 MSTORE PUSH1 0x20 DUP2 DUP2 ADD MLOAD PUSH1 0xFF AND SWAP1 DUP4 ADD MSTORE PUSH1 0x40 DUP1 DUP3 ADD MLOAD SWAP1 DUP4 ADD MSTORE PUSH1 0x60 SWAP1 DUP2 ADD MLOAD SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP4 CALLDATACOPY SWAP2 ADD SWAP1 DUP2 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x9202 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0xA102 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE SWAP1 ISZERO ISZERO PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE DUP3 ISZERO ISZERO PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x2CB2 SWAP1 DUP4 ADD DUP5 PUSH2 0x8FF9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x80 PUSH1 0x40 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x92D7 SWAP1 DUP4 ADD DUP6 PUSH2 0x8FF9 JUMP JUMPDEST SWAP1 POP DUP3 PUSH1 0x60 DUP4 ADD MSTORE SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND DUP2 MSTORE PUSH1 0x40 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0xFFC SWAP1 DUP4 ADD DUP5 PUSH2 0x8F87 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND DUP2 MSTORE PUSH1 0x60 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x9354 SWAP1 DUP4 ADD DUP6 PUSH2 0x8F87 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x2CB2 DUP2 DUP6 PUSH2 0x8F87 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP2 MSTORE PUSH1 0x80 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x938A SWAP1 DUP4 ADD DUP7 PUSH2 0x8F87 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x939C DUP2 DUP7 PUSH2 0x8FCA JUMP JUMPDEST SWAP1 POP DUP3 DUP2 SUB PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0x6E98 DUP2 DUP6 PUSH2 0x8FCA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND DUP2 MSTORE PUSH1 0x60 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x93D4 SWAP1 DUP4 ADD DUP6 PUSH2 0x8FCA JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x2CB2 DUP2 DUP6 PUSH2 0x8FCA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE ISZERO ISZERO PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND DUP2 MSTORE PUSH1 0x40 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0xFFC SWAP1 DUP4 ADD DUP5 PUSH2 0x8FF9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP2 MSTORE PUSH1 0x0 PUSH2 0x943C DUP6 PUSH2 0xA12E JUMP JUMPDEST DUP5 PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x80 PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x9456 PUSH1 0x80 DUP4 ADD DUP6 PUSH2 0x8FCA JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0x6E98 DUP2 DUP6 PUSH2 0x8FCA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 DUP2 AND DUP3 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x100 SWAP1 PUSH2 0x9485 DUP12 PUSH2 0xA12E JUMP JUMPDEST DUP11 PUSH1 0x20 DUP6 ADD MSTORE DUP2 PUSH1 0x40 DUP6 ADD MSTORE PUSH2 0x949D DUP3 DUP6 ADD DUP12 PUSH2 0x8FCA JUMP JUMPDEST SWAP2 POP DUP4 DUP3 SUB PUSH1 0x60 DUP6 ADD MSTORE PUSH2 0x94B1 DUP3 DUP11 PUSH2 0x8FCA JUMP JUMPDEST SWAP1 DUP9 AND PUSH1 0x80 DUP6 ADD MSTORE SWAP1 POP PUSH2 0x94C4 DUP7 PUSH2 0xA12E JUMP JUMPDEST DUP6 PUSH1 0xA0 DUP5 ADD MSTORE DUP3 DUP2 SUB PUSH1 0xC0 DUP5 ADD MSTORE PUSH2 0x94DC DUP2 DUP7 PUSH2 0x8FCA JUMP JUMPDEST SWAP1 POP DUP3 DUP2 SUB PUSH1 0xE0 DUP5 ADD MSTORE PUSH2 0x59B1 DUP2 DUP6 PUSH2 0x8FCA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 MSTORE PUSH2 0x9503 PUSH1 0x60 DUP4 ADD DUP7 PUSH2 0x8F87 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x9515 DUP2 DUP7 PUSH2 0x8FCA JUMP JUMPDEST SWAP1 POP DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x2CB2 DUP2 DUP6 PUSH2 0x8FCA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 MSTORE PUSH2 0x953C PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x8F87 JUMP JUMPDEST SWAP1 POP DUP3 PUSH1 0x20 DUP4 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD PUSH1 0x60 DUP4 MSTORE DUP1 DUP7 MLOAD DUP1 DUP4 MSTORE PUSH1 0x80 DUP6 ADD SWAP2 POP PUSH1 0x20 SWAP3 POP PUSH1 0x80 DUP4 DUP3 MUL DUP7 ADD ADD DUP4 DUP10 ADD DUP6 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x95A0 JUMPI PUSH1 0x7F NOT DUP9 DUP5 SUB ADD DUP6 MSTORE PUSH2 0x958E DUP4 DUP4 MLOAD PUSH2 0x8FF9 JUMP JUMPDEST SWAP5 DUP7 ADD SWAP5 SWAP3 POP SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x9572 JUMP JUMPDEST POP POP DUP6 DUP2 SUB DUP5 DUP8 ADD MSTORE PUSH2 0x95B3 DUP2 DUP10 PUSH2 0x8FCA JUMP JUMPDEST SWAP4 POP POP POP POP DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x2CB2 DUP2 DUP6 PUSH2 0x8FCA JUMP JUMPDEST PUSH1 0x0 PUSH1 0xC0 DUP3 MSTORE PUSH2 0x95DD PUSH1 0xC0 DUP4 ADD DUP10 PUSH2 0x8F87 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP8 SWAP1 SWAP8 MSTORE POP PUSH1 0x40 DUP2 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x60 DUP6 ADD MSTORE SWAP2 AND PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 SWAP1 SWAP2 ADD MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 PUSH1 0x40 SWAP1 DUP2 DUP6 ADD SWAP1 DUP1 DUP5 MUL DUP7 ADD DUP4 ADD DUP8 DUP6 ADD DUP7 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x9677 JUMPI DUP9 DUP4 SUB PUSH1 0x3F NOT ADD DUP6 MSTORE DUP2 MLOAD DUP1 MLOAD DUP8 DUP6 MSTORE PUSH2 0x9658 DUP9 DUP7 ADD DUP3 PUSH2 0x8FF9 JUMP JUMPDEST SWAP2 DUP10 ADD MLOAD ISZERO ISZERO SWAP5 DUP10 ADD SWAP5 SWAP1 SWAP5 MSTORE SWAP5 DUP8 ADD SWAP5 SWAP3 POP SWAP1 DUP7 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x9634 JUMP JUMPDEST POP SWAP1 SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x2B05 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x8FCA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 MSTORE PUSH2 0x96AB PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x8FCA JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x6864 DUP2 DUP6 PUSH2 0x8FCA JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST DUP5 ISZERO ISZERO DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x80 PUSH1 0x40 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x9456 SWAP1 DUP4 ADD DUP6 PUSH2 0x8FCA JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP3 MSTORE PUSH1 0x80 PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x938A PUSH1 0x80 DUP4 ADD DUP7 PUSH2 0x8FF9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP7 AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND PUSH1 0x20 DUP4 ADD MSTORE DUP5 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0xA0 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x9752 SWAP1 DUP4 ADD DUP6 PUSH2 0x8FF9 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x80 DUP5 ADD MSTORE PUSH2 0x5C75 DUP2 DUP6 PUSH2 0x8FCA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP7 AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND PUSH1 0x20 DUP4 ADD MSTORE DUP5 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0xA0 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x97A0 SWAP1 DUP4 ADD DUP6 PUSH2 0x8FF9 JUMP JUMPDEST SWAP1 POP DUP3 PUSH1 0x80 DUP4 ADD MSTORE SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x2B05 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x8FF9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND DUP3 MSTORE DUP6 DUP2 AND PUSH1 0x20 DUP4 ADD MSTORE DUP5 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0xA0 PUSH1 0x80 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x6E98 SWAP1 DUP4 ADD DUP5 PUSH2 0x8FF9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH3 0xFFFFFF SWAP1 SWAP2 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP6 DUP7 AND DUP2 MSTORE SWAP4 DUP6 AND PUSH1 0x20 DUP6 ADD MSTORE PUSH1 0x40 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP4 ADD MSTORE SWAP1 SWAP2 AND PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP6 DUP7 AND DUP2 MSTORE SWAP4 SWAP1 SWAP5 AND PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x40 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xA0 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 DUP2 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP10 SWAP1 MSTORE DUP8 DUP2 AND PUSH1 0x40 DUP4 ADD MSTORE DUP7 DUP2 AND PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 DUP3 ADD DUP7 SWAP1 MSTORE PUSH1 0xA0 DUP3 ADD DUP6 SWAP1 MSTORE DUP4 AND PUSH1 0xC0 DUP3 ADD MSTORE PUSH2 0x100 PUSH1 0xE0 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x59B1 DUP4 DUP3 ADD DUP6 PUSH2 0x8FF9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE SWAP3 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP6 DUP7 AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP5 SWAP1 SWAP5 MSTORE SWAP2 SWAP1 SWAP4 AND PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x80 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xA0 ADD SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH2 0x9946 DUP6 PUSH2 0xA12E JUMP JUMPDEST SWAP4 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH1 0x8 DUP6 LT PUSH2 0x9946 JUMPI INVALID JUMPDEST PUSH1 0xF SWAP5 DUP6 SIGNEXTEND DUP2 MSTORE SWAP3 SWAP1 SWAP4 SIGNEXTEND PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0xFF SWAP1 SWAP2 AND PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x24 SWAP1 DUP3 ADD MSTORE PUSH32 0x556E6973776170563353616D706C65722F746F6B656E5061746820746F6F2073 PUSH1 0x40 DUP3 ADD MSTORE PUSH4 0x1A1BDC9D PUSH1 0xE2 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x18 SWAP1 DUP3 ADD MSTORE PUSH32 0x4D6978696E556E69737761702F4E4F5F45584348414E47450000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2C SWAP1 DUP3 ADD MSTORE PUSH32 0x4D6978696E42616E636F722F504154485F4C454E4754485F4D5553545F42455F PUSH1 0x40 DUP3 ADD MSTORE PUSH12 0x41545F4C454153545F54574F PUSH1 0xA0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x3A SWAP1 DUP3 ADD MSTORE PUSH32 0x4D6978696E4B79626572446D6D2F4C4153545F454C454D454E545F4F465F5041 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x54485F4D5553545F4D415443485F4F55545055545F544F4B454E000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x556E6973776170563353616D706C65722F696E76616C69642070617468206C65 PUSH1 0x40 DUP3 ADD MSTORE PUSH5 0x6E67746873 PUSH1 0xD8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2F SWAP1 DUP3 ADD MSTORE PUSH32 0x4D6978696E556E697377617056322F504154485F4C454E4754485F4D5553545F PUSH1 0x40 DUP3 ADD MSTORE PUSH15 0x42455F41545F4C454153545F54574F PUSH1 0x88 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x23 SWAP1 DUP3 ADD MSTORE PUSH32 0x4D6978696E4B79626572446D6D2F41525241595F4C454E4754485F4D49534D41 PUSH1 0x40 DUP3 ADD MSTORE PUSH3 0xA8869 PUSH1 0xEB SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x537761702053616D706C652073686F756C642068617665207265766572746564 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x38 SWAP1 DUP3 ADD MSTORE PUSH32 0x4D6978696E42616E636F722F4C4153545F454C454D454E545F4F465F50415448 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x5F4D5553545F4D415443485F4F55545055545F544F4B454E0000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2F SWAP1 DUP3 ADD MSTORE PUSH32 0x4D6978696E4B79626572446D6D2F504F4F4C535F4C454E4754485F4D5553545F PUSH1 0x40 DUP3 ADD MSTORE PUSH15 0x42455F41545F4C454153545F4F4E45 PUSH1 0x88 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x3B SWAP1 DUP3 ADD MSTORE PUSH32 0x4D6978696E556E697377617056322F4C4153545F454C454D454E545F4F465F50 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x4154485F4D5553545F4D415443485F4F55545055545F544F4B454E0000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 SWAP2 DUP3 ADD MLOAD SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 DUP1 DUP4 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND SWAP1 DUP3 ADD MSTORE PUSH1 0x40 DUP1 DUP4 ADD MLOAD PUSH1 0xF SWAP1 DUP2 SIGNEXTEND SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 SWAP3 DUP4 ADD MLOAD SWAP1 SIGNEXTEND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE DUP3 MLOAD PUSH1 0xA0 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x9D69 PUSH1 0xC0 DUP5 ADD DUP3 PUSH2 0x8FF9 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x20 DUP6 ADD MLOAD AND PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x40 DUP5 ADD MLOAD PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x60 DUP5 ADD MLOAD PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0x80 DUP5 ADD MLOAD PUSH1 0xA0 DUP5 ADD MSTORE DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 MSTORE PUSH2 0x9DB8 PUSH1 0x60 DUP4 ADD DUP7 PUSH2 0x905A JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x9DCA DUP2 DUP7 PUSH2 0x905A JUMP JUMPDEST SWAP2 POP POP DUP3 PUSH1 0x40 DUP4 ADD MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 MSTORE PUSH2 0x9DEE PUSH1 0x80 DUP4 ADD DUP8 PUSH2 0x905A JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x9E00 DUP2 DUP8 PUSH2 0x905A JUMP JUMPDEST PUSH1 0x40 DUP5 ADD SWAP6 SWAP1 SWAP6 MSTORE POP POP PUSH1 0x60 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x2B05 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x9079 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 MSTORE PUSH2 0x9E3A PUSH1 0x80 DUP4 ADD DUP8 PUSH2 0x9079 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP6 SWAP1 SWAP6 MSTORE POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x40 DUP3 ADD MSTORE SWAP2 AND PUSH1 0x60 SWAP1 SWAP2 ADD MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x200 DUP2 ADD PUSH2 0x9E6F DUP3 DUP6 PUSH2 0x90C6 JUMP JUMPDEST PUSH2 0x2B05 PUSH2 0x180 DUP4 ADD DUP5 PUSH2 0x9197 JUMP JUMPDEST PUSH2 0x220 DUP2 ADD PUSH2 0x9E8C DUP3 DUP7 PUSH2 0x90C6 JUMP JUMPDEST PUSH2 0x9E9A PUSH2 0x180 DUP4 ADD DUP6 PUSH2 0x9197 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND PUSH2 0x200 SWAP2 SWAP1 SWAP2 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD MLOAD AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xE0 DUP3 MSTORE DUP6 MLOAD PUSH1 0xE0 DUP4 ADD MSTORE PUSH1 0x20 DUP7 ADD MLOAD PUSH1 0x2 DUP2 LT PUSH2 0x9EF3 JUMPI INVALID JUMPDEST PUSH2 0x100 DUP4 ADD MSTORE PUSH1 0x40 DUP7 ADD MLOAD PUSH2 0x9F0C PUSH2 0x120 DUP5 ADD DUP3 PUSH2 0x8F7A JUMP JUMPDEST POP PUSH1 0x60 DUP7 ADD MLOAD PUSH2 0x9F20 PUSH2 0x140 DUP5 ADD DUP3 PUSH2 0x8F7A JUMP JUMPDEST POP PUSH1 0x80 DUP7 ADD MLOAD PUSH2 0x160 DUP4 ADD MSTORE PUSH1 0xA0 DUP7 ADD MLOAD PUSH1 0xC0 PUSH2 0x180 DUP5 ADD MSTORE PUSH2 0x9F47 PUSH2 0x1A0 DUP5 ADD DUP3 PUSH2 0x8FF9 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x9F57 PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x9025 JUMP JUMPDEST PUSH1 0xA0 DUP3 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0xC0 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP8 DUP3 MSTORE DUP7 PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0xC0 PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x9F88 PUSH1 0xC0 DUP4 ADD DUP8 PUSH2 0x8F87 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0x9F9A DUP2 DUP8 PUSH2 0x8F87 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP6 SWAP1 SWAP6 AND PUSH1 0x80 DUP5 ADD MSTORE POP POP PUSH1 0xA0 ADD MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP7 DUP3 MSTORE DUP6 PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0xA0 PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x9FD8 PUSH1 0xA0 DUP4 ADD DUP7 PUSH2 0x8F87 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 SWAP1 SWAP5 AND PUSH1 0x60 DUP4 ADD MSTORE POP PUSH1 0x80 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP5 DUP3 MSTORE DUP4 PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x60 PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0xFF9 PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x8FF9 JUMP JUMPDEST SWAP5 DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x40 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 ADD SWAP1 JUMP JUMPDEST SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH1 0x1E NOT DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0xA06C JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 ADD DUP1 CALLDATALOAD SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0xA085 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x20 ADD SWAP2 POP CALLDATASIZE DUP2 SWAP1 SUB DUP3 SGT ISZERO PUSH2 0x429B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0xA0B8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0xA0D5 JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0xA0F4 JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xA11D JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xA105 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x7765 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x4 DUP2 LT PUSH2 0xA138 JUMPI INVALID JUMPDEST POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xA138 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xA138 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0xA138 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0xF SIGNEXTEND DUP2 EQ PUSH2 0xA138 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xA138 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0xA138 JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBD 0xCF 0xDB 0x4E JUMPDEST 0xE1 0x29 0x2B LOG1 DIFFICULTY SWAP10 0xCA 0x5F 0xA6 PUSH2 0xA2FD CALLER PUSH12 0xCE94F5D892B3195F8D2618F9 0x4B PUSH5 0x736F6C6343 STOP MOD 0xC STOP CALLER ",
                "sourceMap": "1379:1445:8:-:0;;;2400:119:51;;;;;826:113:26;;1904:197:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1914:11:47;;-1:-1:-1;;;;;;1914:11:47;;;;;1333::48;;;;2682::51;;;;1535::55;;;;3912::58;;1379:1445:8;;192:309:-1;;330:2;318:9;309:7;305:23;301:32;298:2;;;-1:-1;;336:12;298:2;106:13;;-1:-1;;;;;789:54;;937:58;;927:2;;-1:-1;;999:12;927:2;388:97;292:209;-1:-1;;;292:209::o;:::-;1379:1445:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
            },
            "deployedBytecode": {
                "immutableReferences": {
                    "7073": [
                        {
                            "length": 32,
                            "start": 8700
                        },
                        {
                            "length": 32,
                            "start": 12395
                        },
                        {
                            "length": 32,
                            "start": 14497
                        }
                    ]
                },
                "linkReferences": {},
                "object": "0x6080604052600436106103dd5760003560e01c80638effa9ea116101fd578063c25c413811610118578063d3cdc04d116100ab578063e8e4af091161007a578063e8e4af0914610c45578063f573c16114610c65578063f5a4994d14610c85578063fa5def9f14610ca5578063fc9fe41b14610cc5576103e4565b8063d3cdc04d14610bc5578063d9bca37214610be5578063ddd5aa2814610c05578063e78ac04514610c25576103e4565b8063c94706d8116100e7578063c94706d814610b45578063cc1621c914610b65578063cd85e7b514610b85578063d31b0a8a14610ba5576103e4565b8063c25c413814610ac5578063c7dd6c4f14610ae5578063c831908414610b05578063c8c74a3714610b25576103e4565b8063ab00027611610190578063b90cd2fb1161015f578063b90cd2fb14610a45578063bc4f55ba14610a65578063bd71ecf614610a85578063bf60384b14610aa5576103e4565b8063ab000276146109b6578063ab3e6210146109d6578063adc636bf146109f6578063b770f84914610a25576103e4565b80639e3f05c3116101cc5780639e3f05c314610926578063a095a03614610956578063a469841714610976578063a75e744b14610996576103e4565b80638effa9ea146108a657806398777748146108c65780639ad732ef146108e65780639bf3ee3514610906576103e4565b80635d5b674f116102f857806378fee41c1161028b5780637fea2ae11161025a5780637fea2ae1146107f45780638d201c22146108145780638d8abdf0146108345780638dc669fa146108545780638e5a0e0714610876576103e4565b806378fee41c146107745780637a82dcb9146107945780637e105ce2146107b45780637f7f4f13146107d4576103e4565b80636a33bc7e116102c75780636a33bc7e146106e5578063706e2f9b146107145780637280bfff1461073457806374c9d25514610754576103e4565b80635d5b674f1461066557806366a1ac6b14610685578063686b7ee8146106a557806368be3cf2146106c5576103e4565b80632aa64319116103705780634edfb5b21161033f5780634edfb5b2146105d857806357494b1d1461060557806359ab9a6c146106255780635c71cbe714610645576103e4565b80632aa643191461054857806330d6570d146105785780633105fec114610598578063494569db146105b8576103e4565b806316279055116103ac57806316279055146104ab5780631f4ff03e146104d8578063252322b3146104fa578063281e343214610528576103e4565b80630496d5dc146103e95780631022742b14610421578063149dab0e1461044e57806315de17de1461047e576103e4565b366103e457005b600080fd5b3480156103f557600080fd5b50610409610404366004618186565b610cf4565b604051610418939291906194f0565b60405180910390f35b34801561042d57600080fd5b5061044161043c36600461851f565b610dba565b6040516104189190619685565b34801561045a57600080fd5b5061046e6104693660046189f9565b610f2d565b6040516104189493929190619366565b34801561048a57600080fd5b5061049e61049936600461811f565b610fd6565b60405161041891906196f4565b3480156104b757600080fd5b506104cb6104c6366004618002565b611004565b60405161041891906196bd565b3480156104e457600080fd5b506104f86104f3366004618698565b61100e565b005b34801561050657600080fd5b5061051a6105153660046180ad565b611313565b604051610418929190619698565b34801561053457600080fd5b5061051a610543366004618e0a565b6113b0565b34801561055457600080fd5b50610568610563366004618ba4565b611449565b60405161041894939291906196c8565b34801561058457600080fd5b5061051a6105933660046180ad565b61160e565b3480156105a457600080fd5b5061051a6105b3366004618186565b611679565b3480156105c457600080fd5b506104096105d3366004618186565b61171d565b3480156105e457600080fd5b506105f86105f3366004618d1f565b6118b4565b60405161041891906197b2565b34801561061157600080fd5b5061051a6106203660046180ad565b611b39565b34801561063157600080fd5b5061049e61064036600461811f565b611bc9565b34801561065157600080fd5b5061049e61066036600461811f565b611bd6565b34801561067157600080fd5b5061051a6106803660046180ad565b611be4565b34801561069157600080fd5b506104416106a036600461851f565b611c74565b3480156106b157600080fd5b5061049e6106c036600461811f565b611d29565b6106d86106d3366004618366565b611d37565b6040516104189190619610565b3480156106f157600080fd5b506107056107003660046188c6565b611e98565b6040516104189392919061954b565b34801561072057600080fd5b5061044161072f36600461843d565b6121a9565b34801561074057600080fd5b5061049e61074f36600461811f565b61229b565b34801561076057600080fd5b5061046e61076f3660046189f9565b6122a9565b34801561078057600080fd5b506104f861078f366004618723565b6122b9565b3480156107a057600080fd5b5061049e6107af36600461811f565b612479565b3480156107c057600080fd5b506105f86107cf366004618002565b612486565b3480156107e057600080fd5b5061051a6107ef366004618e0a565b6124ad565b34801561080057600080fd5b5061051a61080f366004618af8565b612584565b34801561082057600080fd5b5061049e61082f36600461811f565b61265d565b34801561084057600080fd5b5061051a61084f36600461897a565b612680565b34801561086057600080fd5b50610869612710565b604051610418919061920c565b34801561088257600080fd5b506108966108913660046183d4565b612728565b6040516104189493929190619ddb565b3480156108b257600080fd5b5061049e6108c136600461811f565b61293f565b3480156108d257600080fd5b5061051a6108e13660046180ad565b61294c565b3480156108f257600080fd5b5061049e61090136600461811f565b6129b7565b34801561091257600080fd5b5061049e610921366004618d88565b6129c5565b34801561093257600080fd5b50610946610941366004618caf565b612b0c565b60405161041894939291906196fd565b34801561096257600080fd5b5061049e61097136600461811f565b612c43565b34801561098257600080fd5b5061051a6109913660046180ad565b612cbc565b3480156109a257600080fd5b506105686109b13660046181ee565b612d2b565b3480156109c257600080fd5b5061051a6109d13660046180ad565b612dd0565b3480156109e257600080fd5b5061049e6109f136600461811f565b612e3b565b348015610a0257600080fd5b50610a16610a113660046180ad565b612e5d565b604051610418939291906193b0565b348015610a3157600080fd5b5061049e610a4036600461811f565b612efa565b348015610a5157600080fd5b5061051a610a603660046180ad565b612f1d565b348015610a7157600080fd5b5061051a610a8036600461897a565b612fad565b348015610a9157600080fd5b50610441610aa036600461846f565b613018565b348015610ab157600080fd5b5061051a610ac0366004618af8565b613114565b348015610ad157600080fd5b5061051a610ae03660046180ad565b61317f565b348015610af157600080fd5b5061049e610b0036600461811f565b613215565b348015610b1157600080fd5b5061051a610b203660046180ad565b613223565b348015610b3157600080fd5b5061051a610b40366004618186565b61328e565b348015610b5157600080fd5b5061051a610b603660046180ad565b6133e6565b348015610b7157600080fd5b50610946610b80366004618caf565b613476565b348015610b9157600080fd5b5061049e610ba036600461811f565b613588565b348015610bb157600080fd5b5061049e610bc036600461811f565b613595565b348015610bd157600080fd5b5061049e610be036600461811f565b6135a3565b348015610bf157600080fd5b50610568610c003660046181ee565b6135b1565b348015610c1157600080fd5b50610568610c20366004618ba4565b61366c565b348015610c3157600080fd5b50610441610c403660046184be565b61384e565b348015610c5157600080fd5b5061051a610c603660046180ad565b613943565b348015610c7157600080fd5b5061049e610c8036600461811f565b6139ae565b348015610c9157600080fd5b50610a16610ca03660046180ad565b6139bb565b348015610cb157600080fd5b50610705610cc03660046188c6565b613a6d565b348015610cd157600080fd5b50610ce5610ce03660046183d4565b613db3565b60405161041893929190619da5565b6060806060610d038686613fd3565b9250825160001415610d1457610db1565b610dab604051806080016040528087600081518110610d2f57fe5b60200260200101516001600160a01b0316815260200187600189510381518110610d5557fe5b60200260200101516001600160a01b03168152602001888689604051602001610d8093929190619330565b60408051601f1981840301815291815290825230602090811b637a82dcb91790911b910152856141d1565b90925090505b93509350939050565b606083516001600160401b0381118015610dd357600080fd5b50604051908082528060200260200182016040528015610dfd578160200160208202803683370190505b50905060005b84518114610f2557306001600160a01b0316639bf3ee3562030d40878481518110610e2a57fe5b6020026020010151878581518110610e3e57fe5b6020026020010151876040518563ffffffff1660e01b8152600401610e6593929190619e7d565b60206040518083038187803b158015610e7d57600080fd5b5086fa93505050508015610eae575060408051601f3d908101601f19168201909252610eab91810190618680565b60015b610f02573d808015610edc576040519150601f19603f3d011682016040523d82523d6000602084013e610ee1565b606091505b506000838381518110610ef057fe5b60200260200101818152505050610f1d565b80838381518110610f0f57fe5b602002602001018181525050505b600101610e03565b509392505050565b6000606080606087602001515160001415610f4757610fcb565b610f53888888886142a2565b8094508195505050610fc56040518060800160405280896001600160a01b03168152602001886001600160a01b031681526020018686604051602001610f9a92919061930c565b60408051601f1981840301815291815290825230602090811b63ab3e62101790911b910152866141d1565b90925090505b945094509450949050565b6000610ff973c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2868685876144d4565b90505b949350505050565b803b15155b919050565b600084905060008260018451038151811061102557fe5b60200260200101519050816001600160a01b031663e326c7d760016040518263ffffffff1660e01b815260040161105c91906196bd565b600060405180830381600087803b15801561107657600080fd5b505af1925050508015611087575060015b506040516355c3705360e11b81526001600160a01b0383169063ab86e0a6906110b69030908590600401619220565b600060405180830381600087803b1580156110d057600080fd5b505af19250505080156110e1575060015b50856001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b15801561111d57600080fd5b505af19350505050801561112f575060015b50606083516001600160401b038111801561114957600080fd5b50604051908082528060200260200182016040528015611173578160200160208202803683370190505b509050606084516001600160401b038111801561118f57600080fd5b506040519080825280602002602001820160405280156111b9578160200160208202803683370190505b50905060005b85518110156112fd57306001600160a01b03166378fee41c621e84808c8c8c8c8c88815181106111eb57fe5b60200260200101516040518763ffffffff1660e01b8152600401611213959493929190619764565b600060405180830381600088803b15801561122d57600080fd5b5087f19350505050801561123f575060015b6112d4573d80801561126d576040519150601f19603f3d011682016040523d82523d6000602084013e611272565b606091505b5061127c816146ca565b85848151811061128857fe5b6020026020010185858151811061129b57fe5b60200260200101828152508281525050508382815181106112b857fe5b6020026020010151600014156112ce57506112fd565b506112f5565b60405162461bcd60e51b81526004016112ec90619ba7565b60405180910390fd5b6001016111bf565b5061130882826146ff565b505050505050505050565b6060806113a36040518060a00160405280876001600160a01b03168152602001866001600160a01b0316815260200188604051602001611353919061920c565b604051602081830303815290604052815260200188604051602001611378919061920c565b60408051601f1981840301815291815290825230602090811b63b770f8491790911b9101528461472d565b9097909650945050505050565b6060806113a36040518060800160405280876001600160a01b03168152602001866001600160a01b0316815260200160405180604001604052808a600001516001600160a01b031681526020018a604001516001600160a01b031681525060405160200161141e9190619eb4565b60408051601f1981840301815291815290825230602090811b63c7dd6c4f1790911b910152846141d1565b60008060608087600001516001600160a01b0316631273b0c688886040518363ffffffff1660e01b8152600401611481929190619239565b60206040518083038186803b15801561149957600080fd5b505afa1580156114ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114d1919061801e565b925060006001600160a01b038416156114ef5750600193508661158d565b8851604051630939d86360e11b81526001600160a01b0390911690631273b0c690611520908a908c90600401619239565b60206040518083038186803b15801561153857600080fd5b505afa15801561154c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611570919061801e565b93506001600160a01b0384166115865750610fcb565b5060009350855b6115fd60405180608001604052808a6001600160a01b03168152602001896001600160a01b031681526020018b6020015187896040516020016115d293929190619253565b60408051601f1981840301815291815290825230602090811b63cd85e7b51790911b910152876141d1565b909350915050945094509450949050565b6060806113a36040518060800160405280876001600160a01b03168152602001866001600160a01b031681526020018860405160200161164e919061920c565b60408051601f1981840301815291815290825230602090811b63d3cdc04d1790911b910152846141d1565b60608061171160405180608001604052808660008151811061169757fe5b60200260200101516001600160a01b03168152602001866001885103815181106116bd57fe5b60200260200101516001600160a01b0316815260200187876040516020016116e692919061930c565b60408051601f1981840301815291815290825230602090811b638effa9ea1790911b910152846141d1565b90969095509350505050565b606080606061172c8686613fd3565b925082516000141561173d57610db1565b606085516001600160401b038111801561175657600080fd5b50604051908082528060200260200182016040528015611780578160200160208202803683370190505b50905060005b86518110156117d5578660018289510303815181106117a157fe5b60200260200101518282815181106117b557fe5b6001600160a01b0390921660209283029190910190910152600101611786565b5060606117e28883613fd3565b90506118a46040518060a00160405280896000815181106117ff57fe5b60200260200101516001600160a01b031681526020018960018b51038151811061182557fe5b60200260200101516001600160a01b031681526020018a888b60405160200161185093929190619330565b60405160208183030381529060405281526020018a848660405160200161187993929190619330565b60408051601f1981840301815291815290825230602090811b637a82dcb91790911b9101528761472d565b9094509250505093509350939050565b602084810151604080516001808252818301909252606093849290828101908036833701905050905085816000815181106118eb57fe5b602090810291909101015260606000604051908082528060200260200182016040528015611923578160200160208202803683370190505b50905087606001516001600160a01b0316866001600160a01b03161415611a14576040516381efcbdd60e01b81526001600160a01b038416906381efcbdd906207a1209061197c90899060019088908890600401619425565b60006040518083038187803b15801561199457600080fd5b5086fa935050505080156119ca57506040513d6000823e601f3d908101601f191682016040526119c7919081019061879d565b60015b611a04573d8080156119f8576040519150601f19603f3d011682016040523d82523d6000602084013e6119fd565b606091505b5050611a0f565b9350610ffc92505050565b611b2e565b87606001516001600160a01b0316856001600160a01b03161415611a6a576040516361e597f960e01b81526001600160a01b038416906361e597f9906207a1209061197c908a9060019088908890600401619425565b6040516302b9a6cd60e11b81526001600160a01b038416906305734d9a906207a12090611aaa908a90600190889088908d90849084908490600401619468565b60006040518083038187803b158015611ac257600080fd5b5086fa93505050508015611af857506040513d6000823e601f3d908101601f19168201604052611af5919081019061879d565b60015b611a04573d808015611b26576040519150601f19603f3d011682016040523d82523d6000602084013e611b2b565b606091505b50505b505050949350505050565b6060806113a36040518060a00160405280876001600160a01b03168152602001866001600160a01b0316815260200188604051602001611b79919061920c565b604051602081830303815290604052815260200188604051602001611b9e919061920c565b60408051601f1981840301815291815290825230602090811b637280bfff1790911b9101528461472d565b6000610ff9858385614be3565b6000610ff985858486614cb7565b6060806113a36040518060a00160405280876001600160a01b03168152602001866001600160a01b0316815260200188604051602001611c24919061920c565b604051602081830303815290604052815260200188604051602001611c49919061920c565b60408051601f1981840301815291815290825230602090811b63686b7ee81790911b9101528461472d565b6060611c81848484610dba565b905060005b8451811015610f2557818181518110611c9b57fe5b6020026020010151600014611d2157611d08828281518110611cb957fe5b6020026020010151868381518110611ccd57fe5b6020026020010151606001516001600160801b0316878481518110611cee57fe5b6020026020010151604001516001600160801b0316614d17565b828281518110611d1457fe5b6020026020010181815250505b600101611c86565b6000610ff985858486614d41565b6060816001600160401b0381118015611d4f57600080fd5b50604051908082528060200260200182016040528015611d8957816020015b611d766178cd565b815260200190600190039081611d6e5790505b50905060005b808314611e91576001828281518110611da457fe5b602090810291909101810151911515910152838382818110611dc257fe5b9050602002810190611dd4919061a056565b15159050611de157611e89565b30848483818110611dee57fe5b9050602002810190611e00919061a056565b604051611e0e9291906191e0565b6000604051808303816000865af19150503d8060008114611e4b576040519150601f19603f3d011682016040523d82523d6000602084013e611e50565b606091505b50838381518110611e5d57fe5b6020026020010151602001848481518110611e7457fe5b60209081029190910101519190915290151590525b600101611d8f565b5092915050565b606080606080611f1a886001600160a01b031663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b158015611eda57600080fd5b505afa158015611eee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f12919061801e565b876000614da5565b905084516001600160401b0381118015611f3357600080fd5b50604051908082528060200260200182016040528015611f5d578160200160208202803683370190505b50915084516001600160401b0381118015611f7757600080fd5b50604051908082528060200260200182016040528015611fa1578160200160208202803683370190505b50925084516001600160401b0381118015611fbb57600080fd5b50604051908082528060200260200182016040528015611fef57816020015b6060815260200190600190039081611fda5790505b50935060005b815181101561219d57606061201d8884848151811061201057fe5b602002602001015161523b565b90506060806120b760405180608001604052808c60008151811061203d57fe5b60200260200101516001600160a01b031681526020018c60018e51038151811061206357fe5b60200260200101516001600160a01b031681526020018d8660405160200161208c929190619401565b60408051601f1981840301815291815290825230602090811b6359ab9a6c1790911b9101528a6141d1565b9150915060005b815181101561218e578181815181106120d357fe5b6020026020010151600014156120e85761218e565b8181815181106120f457fe5b602002602001015187828151811061210857fe5b6020026020010151116121865781818151811061212157fe5b602002602001015187828151811061213557fe5b60200260200101818152505082818151811061214d57fe5b602002602001015188828151811061216157fe5b6020026020010181815250508389828151811061217a57fe5b60200260200101819052505b6001016120be565b50505050806001019050611ff5565b50509450945094915050565b606081516001600160401b03811180156121c257600080fd5b506040519080825280602002602001820160405280156121ec578160200160208202803683370190505b50905060005b82518114612295577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031683828151811061223057fe5b60200260200101516001600160a01b0316146122705761226b83828151811061225557fe5b60200260200101516001600160a01b0316615396565b612273565b60125b60ff1682828151811061228257fe5b60209081029190910101526001016121f2565b50919050565b6000610ff985858486615442565b5060009360609350839250829150565b61133761def160901b016001600160a01b031663d0afdca96040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156122fd57600080fd5b505af192505050801561230e575060015b5060005a905060006060306001600160a01b0316888888888860405160240161233a94939291906192ab565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b031990941693909317909252905161237891906191f0565b6000604051808303816000865af19150503d80600081146123b5576040519150601f19603f3d011682016040523d82523d6000602084013e6123ba565b606091505b50915091505a8303925061133761def160901b016001600160a01b0316630c18c1626040518163ffffffff1660e01b815260040160206040518083038186803b15801561240657600080fd5b505afa925050508015612436575060408051601f3d908101601f1916820190925261243391810190618680565b60015b61243f57612444565b909203915b816124525761245281615502565b61246f818060200190518101906124699190618680565b8461550a565b5050505050505050565b6000610ff984838561551b565b60408051603f833b908101601f191682019092528181529080600060208401853c50919050565b6060806124b86178e5565b604051806040016040528088600001516001600160a01b0316815260200188604001516001600160a01b031681525090506125766040518060a00160405280886001600160a01b03168152602001876001600160a01b03168152602001836040516020016125269190619eb4565b60405160208183030381529060405281526020018360405160200161254b9190619eb4565b60408051601f1981840301815291815290825230602090811b63c7dd6c4f1790911b9101528561472d565b909890975095505050505050565b6060806113a36040518060a00160405280876001600160a01b03168152602001866001600160a01b03168152602001886040516020016125c49190619d05565b604051602081830303815290604052815260200160405180608001604052808a600001516001600160a01b031681526020018a602001516001600160e01b03191681526020018a60600151600f0b81526020018a60400151600f0b8152506040516020016126329190619d05565b60408051601f1981840301815291815290825230602090811b638d201c221790911b9101528461472d565b6000610ff973c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2868685876156b4565b6060806113a36040518060a00160405280876001600160a01b03168152602001866001600160a01b03168152602001886040516020016126c09190619ce5565b6040516020818303038152906040528152602001886040516020016126e59190619ce5565b60408051601f1981840301815291815290825230602090811b639ad732ef1790911b9101528461472d565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b6127306178fc565b6127386178fc565b600080805b8751811461283d57612784602089838151811061275657fe5b60200260200101515103878a848151811061276d57fe5b60200260200101516159c09092919063ffffffff16565b60006060306001600160a01b03168a848151811061279e57fe5b60200260200101516040516127b391906191f0565b6000604051808303816000865af19150503d80600081146127f0576040519150601f19603f3d011682016040523d82523d6000602084013e6127f5565b606091505b509150915081156128335760006128196020835103836159d090919063ffffffff16565b90508581111561283157838852602088018290529450845b505b505060010161273d565b508161284857612936565b60005b865181146129345761287b602088838151811061286457fe5b602002602001015151038489848151811061276d57fe5b60006060306001600160a01b031689848151811061289557fe5b60200260200101516040516128aa91906191f0565b6000604051808303816000865af19150503d80600081146128e7576040519150601f19603f3d011682016040523d82523d6000602084013e6128ec565b606091505b5091509150811561292a5760006129106020835103836159d090919063ffffffff16565b90508481111561292857838752602087018290529350835b505b505060010161284b565b505b93509350935093565b6000610ff98483856159dc565b6060806113a36040518060800160405280876001600160a01b03168152602001866001600160a01b031681526020018860405160200161298c919061920c565b60408051601f1981840301815291815290825230602090811b637280bfff1790911b910152846141d1565b6000610ff985858486615b2d565b600080835160038111156129d557fe5b14806129ed57506001835160038111156129eb57fe5b145b80612a03575060408401516001600160801b0316155b80612a19575060608401516001600160801b0316155b15612a2657506000612b05565b612a2e617916565b600080846001600160a01b0316631fb0979588886040518363ffffffff1660e01b8152600401612a5f929190619e60565b60a06040518083038186803b158015612a7757600080fd5b505afa158015612a8b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612aaf9190618e9c565b91945092509050600183602001516004811115612ac857fe5b141580612ad3575080155b80612ae6575086516001600160a01b0316155b15612af75760009350505050612b05565b506001600160801b03169150505b9392505050565b60006060806060612b1e888888615c81565b935083612b2a57610fcb565b60405163276fdad960e11b81523090634edfb5b290612b53908b9088908c908c90600401619e27565b60006040518083038186803b158015612b6b57600080fd5b505afa158015612b7f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612ba7919081019061879d565b886080018190525087608001519250610fc56040518060a00160405280896001600160a01b03168152602001886001600160a01b031681526020018a604051602001612bf39190619e14565b60405160208183030381529060405281526020018a604051602001612c189190619e14565b60408051601f1981840301815291815290825230602090811b63a095a0361790911b9101528661472d565b6000612c4d617938565b83806020019051810190612c619190618c02565b9050612cb273eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee826060015188888786604001518760800151604051602001612c9e929190619401565b604051602081830303815290604052615df1565b9695505050505050565b60608060606125766040518060800160405280886001600160a01b03168152602001876001600160a01b031681526020018984604051602001612d00929190619401565b60408051601f1981840301815291815290825230602090811b63d31b0a8a1790911b910152856141d1565b600080606080612d3d89898989615ff3565b945092506001600160a01b038316612d5457612dc4565b612dbe6040518060800160405280896001600160a01b03168152602001886001600160a01b031681526020018587604051602001612d939291906193e6565b60408051601f1981840301815291815290825230602090811b63f573c1611790911b910152866141d1565b90925090505b95509550955095915050565b6060806113a36040518060800160405280876001600160a01b03168152602001866001600160a01b0316815260200188604051602001612e10919061920c565b60408051601f1981840301815291815290825230602090811b635c71cbe71790911b910152846141d1565b6000610ff973c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2858486616148565b6000606080612e6d878787616431565b92506001600160a01b038316612e8257612ef0565b612eea6040518060800160405280886001600160a01b03168152602001876001600160a01b0316815260200185604051602001612ebf919061920c565b60408051601f1981840301815291815290825230602090811b6315de17de1790911b910152856141d1565b90925090505b9450945094915050565b6000610ff973c02aaa39b223fe8d0a0e5c4f27ead9083c756cc286868587616518565b6060806113a36040518060a00160405280876001600160a01b03168152602001866001600160a01b0316815260200188604051602001612f5d919061920c565b604051602081830303815290604052815260200188604051602001612f82919061920c565b60408051601f1981840301815291815290825230602090811b63d3cdc04d1790911b9101528461472d565b6060806113a36040518060800160405280876001600160a01b03168152602001866001600160a01b0316815260200188604051602001612fed9190619ce5565b60408051601f1981840301815291815290825230602090811b639ad732ef1790911b910152846141d1565b606082516001600160401b038111801561303157600080fd5b5060405190808252806020026020018201604052801561305b578160200160208202803683370190505b50905060005b83518114611e91577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031684828151811061309f57fe5b60200260200101516001600160a01b0316146130e9576130e4838583815181106130c557fe5b60200260200101516001600160a01b031661679a90919063ffffffff16565b6130f5565b826001600160a01b0316315b82828151811061310157fe5b6020908102919091010152600101613061565b6060806113a36040518060800160405280876001600160a01b03168152602001866001600160a01b03168152602001886040516020016131549190619d05565b60408051601f1981840301815291815290825230602090811b638d201c221790911b910152846141d1565b60608060606125766040518060a00160405280886001600160a01b03168152602001876001600160a01b0316815260200189846040516020016131c3929190619401565b604051602081830303815290604052815260200189846040516020016131ea929190619401565b60408051601f1981840301815291815290825230602090811b63d31b0a8a1790911b9101528561472d565b6000610ff98585848661686d565b6060806113a36040518060800160405280876001600160a01b03168152602001866001600160a01b0316815260200188604051602001613263919061920c565b60408051601f1981840301815291815290825230602090811b63b770f8491790911b910152846141d1565b606080606084516001600160401b03811180156132aa57600080fd5b506040519080825280602002602001820160405280156132d4578160200160208202803683370190505b50905060005b8551811015613329578560018288510303815181106132f557fe5b602002602001015182828151811061330957fe5b6001600160a01b03909216602092830291909101909101526001016132da565b506113a36040518060a001604052808760008151811061334557fe5b60200260200101516001600160a01b031681526020018760018951038151811061336b57fe5b60200260200101516001600160a01b03168152602001888860405160200161339492919061930c565b604051602081830303815290604052815260200188846040516020016133bb92919061930c565b60408051601f1981840301815291815290825230602090811b638effa9ea1790911b9101528561472d565b6060806113a36040518060a00160405280876001600160a01b03168152602001866001600160a01b0316815260200188604051602001613426919061920c565b60405160208183030381529060405281526020018860405160200161344b919061920c565b60408051601f1981840301815291815290825230602090811b635c71cbe71790911b9101528461472d565b60006060806060613488888888615c81565b93508361349457610fcb565b60405163276fdad960e11b81523090634edfb5b2906134bd908b9088908c908c90600401619e27565b60006040518083038186803b1580156134d557600080fd5b505afa1580156134e9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613511919081019061879d565b886080018190525087608001519250610fc56040518060800160405280896001600160a01b03168152602001886001600160a01b031681526020018a60405160200161355d9190619e14565b60408051601f1981840301815291815290825230602090811b63a095a0361790911b910152866141d1565b6000610ff9858385616bf1565b6000610ff985858486616ddf565b6000610ff985858486616ea3565b6000806060806135c389898989615ff3565b945092506001600160a01b0383166135da57612dc4565b612dbe6040518060a00160405280896001600160a01b03168152602001886001600160a01b0316815260200185876040516020016136199291906193e6565b60405160208183030381529060405281526020018587156040516020016136419291906193e6565b60408051601f1981840301815291815290825230602090811b63f573c1611790911b9101528661472d565b60008060608087600001516001600160a01b0316631273b0c688886040518363ffffffff1660e01b81526004016136a4929190619239565b60206040518083038186803b1580156136bc57600080fd5b505afa1580156136d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136f4919061801e565b925060006001600160a01b03841615613712575060019350866137b0565b8851604051630939d86360e11b81526001600160a01b0390911690631273b0c690613743908a908c90600401619239565b60206040518083038186803b15801561375b57600080fd5b505afa15801561376f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613793919061801e565b93506001600160a01b0384166137a95750610fcb565b5060009350855b6115fd6040518060a001604052808a6001600160a01b03168152602001896001600160a01b031681526020018b6020015187896040516020016137f593929190619253565b60405160208183030381529060405281526020018b6020015187891560405160200161382393929190619253565b60408051601f1981840301815291815290825230602090811b63cd85e7b51790911b9101528761472d565b606083516001600160401b038111801561386757600080fd5b50604051908082528060200260200182016040528015613891578160200160208202803683370190505b50905060005b84518114610f25577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168582815181106138d557fe5b60200260200101516001600160a01b0316146139215761391c84848784815181106138fc57fe5b60200260200101516001600160a01b0316616f059092919063ffffffff16565b613924565b60005b82828151811061393057fe5b6020908102919091010152600101613897565b6060806113a36040518060800160405280876001600160a01b03168152602001866001600160a01b0316815260200188604051602001613983919061920c565b60408051601f1981840301815291815290825230602090811b63686b7ee81790911b910152846141d1565b6000610ff9858385616fd1565b60006060806139cb878787616431565b92506001600160a01b0383166139e057612ef0565b612eea6040518060a00160405280886001600160a01b03168152602001876001600160a01b0316815260200185604051602001613a1d919061920c565b604051602081830303815290604052815260200185604051602001613a42919061920c565b60408051601f1981840301815291815290825230602090811b6315de17de1790911b9101528561472d565b606080606080613aaf886001600160a01b031663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b158015611eda57600080fd5b90506060613abc876170b7565b905085516001600160401b0381118015613ad557600080fd5b50604051908082528060200260200182016040528015613aff578160200160208202803683370190505b50925085516001600160401b0381118015613b1957600080fd5b50604051908082528060200260200182016040528015613b43578160200160208202803683370190505b50935085516001600160401b0381118015613b5d57600080fd5b50604051908082528060200260200182016040528015613b9157816020015b6060815260200190600190039081613b7c5790505b50945060005b8251811015613da657606080613c926040518060a001604052808c600081518110613bbe57fe5b60200260200101516001600160a01b031681526020018c60018e510381518110613be457fe5b60200260200101516001600160a01b031681526020018d613c0b8e8a898151811061201057fe5b604051602001613c1c929190619401565b60405160208183030381529060405281526020018d613c5688613c518b8a81518110613c4457fe5b602002602001015161714f565b61523b565b604051602001613c67929190619401565b60408051601f1981840301815291815290825230602090811b6359ab9a6c1790911b9101528a61472d565b9150915060005b8151811015613d9857818181518110613cae57fe5b602002602001015160001415613cc357613d98565b868181518110613ccf57fe5b602002602001015160001480613d0b5750818181518110613cec57fe5b6020026020010151878281518110613d0057fe5b602002602001015110155b15613d9057818181518110613d1c57fe5b6020026020010151878281518110613d3057fe5b602002602001018181525050828181518110613d4857fe5b6020026020010151888281518110613d5c57fe5b602002602001018181525050613d788b87868151811061201057fe5b898281518110613d8457fe5b60200260200101819052505b600101613c99565b505050806001019050613b97565b5050509450945094915050565b613dbb6178fc565b613dc36178fc565b6000198060005b86518114613ebf57613dfa6020888381518110613de357fe5b602002602001015151038789848151811061276d57fe5b60006060306001600160a01b0316898481518110613e1457fe5b6020026020010151604051613e2991906191f0565b6000604051808303816000865af19150503d8060008114613e66576040519150601f19603f3d011682016040523d82523d6000602084013e613e6b565b606091505b50915091508115613eb5576000613e8f6020835103836159d090919063ffffffff16565b9050600081118015613ea057508481105b15613eb357838752602087018290529350835b505b5050600101613dca565b50600019811415613ed05750610db1565b60005b87518114613fc857613f036020898381518110613eec57fe5b60200260200101515103838a848151811061276d57fe5b60006060306001600160a01b03168a8481518110613f1d57fe5b6020026020010151604051613f3291906191f0565b6000604051808303816000865af19150503d8060008114613f6f576040519150601f19603f3d011682016040523d82523d6000602084013e613f74565b606091505b50915091508115613fbe576000613f986020835103836159d090919063ffffffff16565b9050600081118015613fa957508581105b15613fbc57838852602088018290529450845b505b5050600101613ed3565b505093509350939050565b606060018251036001600160401b0381118015613fef57600080fd5b50604051908082528060200260200182016040528015614019578160200160208202803683370190505b5090506000836001600160a01b031663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b15801561405757600080fd5b505afa15801561406b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061408f919061801e565b905060005b82518110156141c857816001600160a01b03166365da9289620249f08684815181106140bc57fe5b60200260200101518785600101815181106140d357fe5b602002602001015160006040518563ffffffff1660e01b81526004016140fb939291906192e8565b60206040518083038187803b15801561411357600080fd5b5086fa93505050508015614144575060408051601f3d908101601f191682019092526141419181019061801e565b60015b614192573d808015614172576040519150601f19603f3d011682016040523d82523d6000602084013e614177565b606091505b505060408051600081526020810190915292506141cb915050565b8084838151811061419f57fe5b60200260200101906001600160a01b031690816001600160a01b03168152505050600101614094565b50505b92915050565b606082810151835160208501516040808701519051630fa7f81f60e11b815285943094631f4ff03e9461421d9460a09390931b6001600160e01b03191693919290918a90600401619716565b600060405180830381600087803b15801561423757600080fd5b505af1925050508015614248575060015b6112d4573d808015614276576040519150601f19603f3d011682016040523d82523d6000602084013e61427b565b606091505b50808060200190518101906142909190618620565b9350915061429b9050565b9250929050565b6000606085600001516001600160a01b03166321f8a72187600001516001600160a01b0316639232494e6040518163ffffffff1660e01b815260040160206040518083038186803b1580156142f657600080fd5b505afa15801561430a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061432e9190618680565b6040518263ffffffff1660e01b815260040161434a91906196f4565b60206040518083038186803b15801561436257600080fd5b505afa158015614376573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061439a919061801e565b9150856020015151600014156143af576144cb565b6000805b8760200151518110156144c8576002886020015182815181106143d257fe5b60200260200101515110156143e6576144c0565b836001600160a01b0316637f9c0ecd620493e08a60200151848151811061440957fe5b60200260200101518860018a51038151811061442157fe5b60200260200101516040518463ffffffff1660e01b8152600401614446929190619529565b60206040518083038187803b15801561445e57600080fd5b5086fa9350505050801561448f575060408051601f3d908101601f1916820190925261448c91810190618680565b60015b614498576144c0565b828111156144be57809250886020015182815181106144b357fe5b602002602001015193505b505b6001016143b3565b50505b94509492505050565b600080828060200190518101906144eb919061801e565b90506000876001600160a01b0316876001600160a01b0316141561456f57604051632e1a7d4d60e01b81526001600160a01b03891690632e1a7d4d906145359088906004016196f4565b600060405180830381600087803b15801561454f57600080fd5b505af1158015614563573d6000803e3d6000fd5b50505050849050614583565b6145836001600160a01b03881683876171e7565b816001600160a01b031663d5bcb9b5828a6001600160a01b03168a6001600160a01b0316146145b257896145b5565b60005b8b6001600160a01b03168a6001600160a01b0316146145d457896145d7565b60005b89600160006040518763ffffffff1660e01b81526004016145fc959493929190619828565b6020604051808303818588803b15801561461557600080fd5b505af1158015614629573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061464e9190618680565b9250876001600160a01b0316866001600160a01b031614156146bf57876001600160a01b031663d0e30db0846040518263ffffffff1660e01b81526004016000604051808303818588803b1580156146a557600080fd5b505af11580156146b9573d6000803e3d6000fd5b50505050505b505095945050505050565b60008082516040146146e1575060009050806146fa565b828060200190518101906146f59190618f3b565b915091505b915091565b60608282604051602001614714929190619698565b6040516020818303038152906040529050805160208201fd5b60608082516000141561473f5761429b565b82516001600160401b038111801561475657600080fd5b50604051908082528060200260200182016040528015614780578160200160208202803683370190505b50905082516001600160401b038111801561479a57600080fd5b506040519080825280602002602001820160405280156147c4578160200160208202803683370190505b506040805160018082528183019092529193506060919060208083019080368337019050509050836000815181106147f857fe5b60200260200101518160008151811061480d57fe5b602002602001018181525050614821617982565b50604080516080808201835287516001600160a01b0390811683526020808a0151909116908301528783015182840152870151640100000000600160c01b0390831c90811663ffffffff9091161790911b606082015261487f617982565b604051806080016040528088602001516001600160a01b0316815260200188600001516001600160a01b031681526020018860600151815260200188608001518060601c9060401c63ffffffff1663ffffffff169060201b1760401b81525090506148ea81846141d1565b80519094501590508061491157508260008151811061490557fe5b60200260200101516000145b1561491e5750505061429b565b606061492a83856141d1565b80519092501590508061495157508060008151811061494557fe5b60200260200101516000145b1561495f575050505061429b565b60005b8751811015614bd757606060005b6003811015614b37576149bf8a848151811061498857fe5b60200260200101518560008151811061499d57fe5b6020026020010151896000815181106149b257fe5b602002602001015161727a565b876000815181106149cc57fe5b6020908102919091010152865115806149f95750866000815181106149ed57fe5b60200260200101516000145b15614a0357614b37565b614a1c600561271001612710896000815181106149b257fe5b87600081518110614a2957fe5b602090810291909101015286511580614a56575086600081518110614a4a57fe5b60200260200101516000145b15614a6057614b37565b6060614a6c87896141d1565b805191945091501580614a93575080600081518110614a8757fe5b60200260200101516000145b15614a9e5750614b37565b8094508a8481518110614aad57fe5b602002602001015185600081518110614ac257fe5b602002602001015110614b2e5760008b8581518110614add57fe5b60200260200101516127108d8781518110614af457fe5b602002602001015188600081518110614b0957fe5b6020026020010151030281614b1a57fe5b04905060058111614b2c575050614b37565b505b50600101614970565b5060008151118015614b4a575060008351115b15614bce5780600081518110614b5c57fe5b6020026020010151888381518110614b7057fe5b602002602001018181525050614bb5898381518110614b8b57fe5b602002602001015184600081518110614ba057fe5b6020026020010151886000815181106149b257fe5b878381518110614bc157fe5b6020026020010181815250505b50600101614962565b50505050509250929050565b600080606083806020019051810190614bfc9190618882565b9092509050614c156001600160a01b03871683876171e7565b6040805160a08101825282815230602082015242818301526060810187905260016080820152905163c04b8d5960e01b81526001600160a01b0384169163c04b8d5991614c659190600401619d4d565b602060405180830381600087803b158015614c7f57600080fd5b505af1158015614c93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cb29190618680565b60008082806020019051810190614cce919061801e565b9050614ce46001600160a01b03871682866171e7565b604051630310da7b60e11b81526001600160a01b03821690630621b4f690614c6590899088908a906001906004016198db565b6000610ffc83614d3b614d2b8260016172d2565b614d3588876172f6565b90617327565b90617343565b60008082806020019051810190614d58919061801e565b9050614d6e6001600160a01b03871682866171e7565b604051630164b07960e31b81526001600160a01b03821690630b2583c890614c659089908990899060019042820190600401619858565b60606002828451031015614dcb5760405162461bcd60e51b81526004016112ec906199ac565b614dd36179aa565b5060408051606080820183526101f48252610bb860208301526127108284015282516003808252608082019094529192909190816020016020820280368337019050509050600080868681518110614e2757fe5b602002602001015190506000878760010181518110614e4257fe5b6020026020010151905060005b6003811015614f375760008a6001600160a01b0316631698ee8285858a8660038110614e7757fe5b60200201516040518463ffffffff1660e01b8152600401614e9a93929190619800565b60206040518083038186803b158015614eb257600080fd5b505afa158015614ec6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614eea919061801e565b9050614ef58161736d565b15614f2e5780868680600101975081518110614f0d57fe5b60200260200101906001600160a01b031690816001600160a01b0316815250505b50600101614e4f565b50505080614f4757505050612b05565b855185600201141561503d57806001600160401b0381118015614f6957600080fd5b50604051908082528060200260200182016040528015614f9d57816020015b6060815260200190600190039081614f885790505b50935060005b8181101561503457604080516001808252818301909252906020808301908036833701905050858281518110614fd557fe5b6020026020010181905250828181518110614fec57fe5b602002602001015185828151811061500057fe5b602002602001015160008151811061501457fe5b6001600160a01b0390921660209283029190910190910152600101614fa3565b50505050612b05565b606061504d888888600101614da5565b90508051600014156150625750505050612b05565b805182026001600160401b038111801561507b57600080fd5b506040519080825280602002602001820160405280156150af57816020015b606081526020019060019003908161509a5790505b50945060005b8281101561522f5760005b82518110156152265782518281028201908490839081106150dd57fe5b6020026020010151516001016001600160401b03811180156150fe57600080fd5b50604051908082528060200260200182016040528015615128578160200160208202803683370190505b5088828151811061513557fe5b602002602001018190525085838151811061514c57fe5b602002602001015188828151811061516057fe5b602002602001015160008151811061517457fe5b60200260200101906001600160a01b031690816001600160a01b03168152505060005b8483815181106151a357fe5b60200260200101515181101561521c578483815181106151bf57fe5b602002602001015181815181106151d257fe5b60200260200101518983815181106151e657fe5b602002602001015182600101815181106151fc57fe5b6001600160a01b0390921660209283029190910190910152600101615197565b50506001016150c0565b506001016150b5565b50505050509392505050565b60606002835110158015615253575081516001018351145b61526f5760405162461bcd60e51b81526004016112ec90619ad0565b81516003028351601402016001600160401b038111801561528f57600080fd5b506040519080825280601f01601f1916602001820160405280156152ba576020820181803683370190505b5090506020810160005b84518110156141c85780156153695760008460018303815181106152e457fe5b60200260200101516001600160a01b031663ddca3f436040518163ffffffff1660e01b815260040160206040518083038186803b15801561532457600080fd5b505afa158015615338573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061535c9190618f18565b60e81b8352506003909101905b600085828151811061537757fe5b602090810291909101015160601b8352506014909101906001016152c4565b60006012905060006060836001600160a01b031660405180604001604052806004815260200163313ce56760e01b8152506040516153d491906191f0565b600060405180830381855afa9150503d806000811461540f576040519150601f19603f3d011682016040523d82523d6000602084013e615414565b606091505b509150915081801561542857506020815110155b1561543b576154388160006159d0565b92505b5050919050565b60008082806020019051810190615459919061801e565b905061546f6001600160a01b03871682866171e7565b604051638201aa3f60e01b81526001600160a01b03821690638201aa3f906154a690899088908a9060019060001990600401619905565b6040805180830381600087803b1580156154bf57600080fd5b505af11580156154d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906154f79190618f3b565b509695505050505050565b805160208201fd5b604051828152816020820152604081fd5b60008060608084806020019051810190615535919061803a565b815192955090935091506001111561555f5760405162461bcd60e51b81526004016112ec90619c39565b81516001018151146155835760405162461bcd60e51b81526004016112ec90619b64565b866001600160a01b03168160018351038151811061559d57fe5b60200260200101516001600160a01b0316146155cb5760405162461bcd60e51b81526004016112ec90619a73565b6155fd8387836000815181106155dd57fe5b60200260200101516001600160a01b03166171e79092919063ffffffff16565b60405163ceb757d560e01b81526060906001600160a01b0385169063ceb757d590615637908a906001908890889030904290600401619f69565b600060405180830381600087803b15801561565157600080fd5b505af1158015615665573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261568d91908101906185ee565b90508060018251038151811061569f57fe5b60200260200101519450505050509392505050565b60006156be6179c8565b828060200190518101906156d29190618a90565b90506000876001600160a01b0316876001600160a01b031614156157565750604051632e1a7d4d60e01b815284906001600160a01b03891690632e1a7d4d9061571f9084906004016196f4565b600060405180830381600087803b15801561573957600080fd5b505af115801561574d573d6000803e3d6000fd5b5050505061576d565b815161576d906001600160a01b03891690876171e7565b6040516370a0823160e01b81526000906001600160a01b038816906370a082319061579c90309060040161920c565b60206040518083038186803b1580156157b457600080fd5b505afa1580156157c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906157ec9190618680565b90506000606084600001516001600160a01b0316848660200151876040015188606001518c60016040516024016158269493929190619968565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b031990941693909317909252905161586491906191f0565b60006040518083038185875af1925050503d80600081146158a1576040519150601f19603f3d011682016040523d82523d6000602084013e6158a6565b606091505b5091509150816158b9576158b981615502565b8a6001600160a01b0316896001600160a01b0316141561592b574795508a6001600160a01b031663d0e30db0876040518263ffffffff1660e01b81526004016000604051808303818588803b15801561591157600080fd5b505af1158015615925573d6000803e3d6000fd5b50505050505b6159b1838a6001600160a01b03166370a08231306040518263ffffffff1660e01b815260040161595b919061920c565b60206040518083038186803b15801561597357600080fd5b505afa158015615987573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906159ab9190618680565b906172d2565b9b9a5050505050505050505050565b6159cb838383617579565b505050565b6000612b0583836175a0565b600080606080848060200190518101906159f691906187cf565b80519194509250600211159050615a1f5760405162461bcd60e51b81526004016112ec90619b15565b856001600160a01b031681600183510381518110615a3957fe5b60200260200101516001600160a01b031614615a675760405162461bcd60e51b81526004016112ec90619c88565b615a798286836000815181106155dd57fe5b6040516338ed173960e01b81526060906001600160a01b038416906338ed173990615ab1908990600190879030904290600401619fb9565b600060405180830381600087803b158015615acb57600080fd5b505af1158015615adf573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052615b0791908101906185ee565b905080600182510381518110615b1957fe5b602002602001015193505050509392505050565b6000615b376178e5565b82806020019051810190615b4b919061893f565b8051909150615b65906001600160a01b03881690866171e7565b615b6d6179ef565b6040805160c081019091526020808401518252810160008152602001886001600160a01b03168152602001876001600160a01b03168152602001868152602001604051806020016040528060008152508152509050615bca6179c8565b506040805160808101825230808252600060208301819052828401919091526060820152835191516352bbbe2960e01b815290916001600160a01b0316906352bbbe2990615c2390859085906001904290600401619ed7565b602060405180830381600087803b158015615c3d57600080fd5b505af1158015615c51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190615c759190618680565b98975050505050505050565b600080846020015190506060816001600160a01b031663910ffc7187606001516001600160a01b0316876001600160a01b031614615cbf5786615cd5565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee5b88606001516001600160a01b0316876001600160a01b031614615cf85786615d0e565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee5b604080516000815260208101918290526001600160e01b031960e086901b16909152615d4292919060019060248101619277565b60006040518083038186803b158015615d5a57600080fd5b505afa158015615d6e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052615d96919081019061829c565b505090508051866000015110615db2575060009150612b059050565b80866000015181518110615dc257fe5b6020026020010151925060f883901c60001c60bb1415615de8575060009150612b059050565b50509392505050565b600080606083806020019051810190615e0a9190618882565b915091506000886001600160a01b0316886001600160a01b031614615e4257615e3d6001600160a01b03891684886171e7565b615ea4565b50604051632e1a7d4d60e01b815285906001600160a01b038a1690632e1a7d4d90615e719084906004016196f4565b600060405180830381600087803b158015615e8b57600080fd5b505af1158015615e9f573d6000803e3d6000fd5b505050505b826001600160a01b03166329589f61828b6001600160a01b03168b6001600160a01b031614615ed3578a615ed5565b8c5b898d6001600160a01b03168c6001600160a01b031614615ef5578b615ef7565b8e5b30600019600160008b6040518a63ffffffff1660e01b8152600401615f23989796959493929190619889565b6020604051808303818588803b158015615f3c57600080fd5b505af1158015615f50573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190615f759190618680565b9350886001600160a01b0316876001600160a01b03161415615fe657886001600160a01b031663d0e30db0856040518263ffffffff1660e01b81526004016000604051808303818588803b158015615fcc57600080fd5b505af1158015615fe0573d6000803e3d6000fd5b50505050505b5050509695505050505050565b6000806060866001600160a01b03166357a281dc86866040518363ffffffff1660e01b8152600401616026929190619239565b60006040518083038186803b15801561603e57600080fd5b505afa158015616052573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261607a919081019061826a565b905060019150805160001415616113576040516315e8a07760e21b81526001600160a01b038816906357a281dc906160b89087908990600401619239565b60006040518083038186803b1580156160d057600080fd5b505afa1580156160e4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261610c919081019061826a565b9050600091505b805186106161285760008092509250506144cb565b80868151811061613457fe5b602002602001015192505094509492505050565b6000806060808480602001905181019061616291906187cf565b8051919450925060021115905061618b5760405162461bcd60e51b81526004016112ec90619a27565b856001600160a01b0316816001835103815181106161a557fe5b60200260200101516001600160a01b0316148061621a575073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6001600160a01b0316816001835103815181106161eb57fe5b60200260200101516001600160a01b031614801561621a5750866001600160a01b0316866001600160a01b0316145b6162365760405162461bcd60e51b81526004016112ec90619bdc565b600073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6001600160a01b03168260008151811061626357fe5b60200260200101516001600160a01b031614156162e057604051632e1a7d4d60e01b81526001600160a01b03891690632e1a7d4d906162a69089906004016196f4565b600060405180830381600087803b1580156162c057600080fd5b505af11580156162d4573d6000803e3d6000fd5b505050508590506162ff565b6162ff826000815181106162f057fe5b602002602001015184886171e7565b60405163b77d239b60e01b81526001600160a01b0384169063b77d239b9083906163399086908b90600190309060009081906004016195ca565b6020604051808303818588803b15801561635257600080fd5b505af1158015616366573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061638b9190618680565b935073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6001600160a01b0316826001845103815181106163bb57fe5b60200260200101516001600160a01b03161415611b2e57876001600160a01b031663d0e30db0856040518263ffffffff1660e01b81526004016000604051808303818588803b15801561640d57600080fd5b505af1158015616421573d6000803e3d6000fd5b5050505050505050949350505050565b60008073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc26001600160a01b0385161461645e5783616461565b60005b9050600073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc26001600160a01b0385161461648f5783616492565b60005b9050856001600160a01b031663901754d7620493e084846040518463ffffffff1660e01b81526004016164c6929190619239565b60206040518083038187803b1580156164de57600080fd5b5086fa9350505050801561650f575060408051601f3d908101601f1916820190925261650c9181019061801e565b60015b612cb257615de8565b6000808280602001905181019061652f919061801e565b9050600061653f888389896175ca565b9050876001600160a01b0316876001600160a01b0316141561664557604051632e1a7d4d60e01b81526001600160a01b03891690632e1a7d4d906165879088906004016196f4565b600060405180830381600087803b1580156165a157600080fd5b505af11580156165b5573d6000803e3d6000fd5b505060405163ad65d76d60e01b81526001600160a01b038416925063ad65d76d915087906165ec906001904290309060040161998d565b6020604051808303818588803b15801561660557600080fd5b505af1158015616619573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061663e9190618680565b92506146bf565b876001600160a01b0316866001600160a01b03161415616751576166736001600160a01b03881682876171e7565b6040516395e3c50b60e01b81526001600160a01b038216906395e3c50b906166a4908890600190429060040161a040565b602060405180830381600087803b1580156166be57600080fd5b505af11580156166d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906166f69190618680565b9250876001600160a01b031663d0e30db0846040518263ffffffff1660e01b81526004016000604051808303818588803b15801561673357600080fd5b505af1158015616747573d6000803e3d6000fd5b50505050506146bf565b6167656001600160a01b03881682876171e7565b60405163ddf7e1a760e01b81526001600160a01b0382169063ddf7e1a790615c23908890600190819042908d9060040161a014565b6000806060846001600160a01b03166370a0823160e01b856040516024016167c2919061920c565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b031990941693909317909252905161680091906191f0565b600060405180830381855afa9150503d806000811461683b576040519150601f19603f3d011682016040523d82523d6000602084013e616840565b606091505b509150915081801561685457506020815110155b156141c8576168648160006159d0565b95945050505050565b60006168776178e5565b8280602001905181019061688b9190618dc8565b90506000856001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016168bb919061920c565b60206040518083038186803b1580156168d357600080fd5b505afa1580156168e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061690b9190618680565b82516020840151919250906001600160a01b0389811691161415616a13576169ae816001600160a01b03166301664f666040518163ffffffff1660e01b815260040160206040518083038186803b15801561696557600080fd5b505afa158015616979573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061699d919061801e565b6001600160a01b038a1690886171e7565b604051634acc893b60e11b81526001600160a01b038216906395991276906169dc9030908a90600401619220565b600060405180830381600087803b1580156169f657600080fd5b505af1158015616a0a573d6000803e3d6000fd5b50505050616bc1565b82602001516001600160a01b0316876001600160a01b03161415616bc1576000616ab6826001600160a01b031663fae036d56040518163ffffffff1660e01b815260040160206040518083038186803b158015616a6f57600080fd5b505afa158015616a83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190616aa79190618680565b670de0b6b3a764000090617327565b90506000886001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015616af357600080fd5b505afa158015616b07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190616b2b9190618f5e565b60ff16600a0a90506000616b4383614d3b8b856172f6565b8651909150616b5d906001600160a01b038d16908b6171e7565b604051638d7ef9bb60e01b81526001600160a01b03851690638d7ef9bb90616b8b9030908590600401619220565b600060405180830381600087803b158015616ba557600080fd5b505af1158015616bb9573d6000803e3d6000fd5b505050505050505b615c7582886001600160a01b03166370a08231306040518263ffffffff1660e01b815260040161595b919061920c565b60008060008084806020019051810190616c0b9190618813565b91945092509050616c266001600160a01b03881683886171e7565b8015616cc35760408051600081526020810191829052638dae733360e01b9091526001600160a01b03831690638dae733390616c6a90899060019060248101619ff5565b602060405180830381600087803b158015616c8457600080fd5b505af1158015616c98573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190616cbc9190618680565b9350616dd5565b60405163ca19ebd960e01b81526001600160a01b0384169063ca19ebd990616cf19085908a90600401619220565b60206040518083038186803b158015616d0957600080fd5b505afa158015616d1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190616d419190618680565b6040805160008152602081019182905263733e738360e11b9091529094506001600160a01b0383169063e67ce70690616d819087908a9060248101619ff5565b602060405180830381600087803b158015616d9b57600080fd5b505af1158015616daf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190616dd39190618680565b505b5050509392505050565b600080606083806020019051810190616df89190618882565b9092509050616e116001600160a01b038816838761770a565b6040516319740ac160e21b81526001600160a01b038316906365d02b0490616e46908a908a90309060019088906004016197c5565b602060405180830381600087803b158015616e6057600080fd5b505af1158015616e74573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190616e989190618680565b979650505050505050565b60008082806020019051810190616eba919061801e565b9050616ed06001600160a01b03871682866171e7565b60405163d5bcb9b560e01b81526001600160a01b0382169063d5bcb9b590614c65908990899089906001903090600401619828565b6000806060856001600160a01b031663dd62ed3e60e01b8686604051602401616f2f929190619239565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051616f6d91906191f0565b600060405180830381855afa9150503d8060008114616fa8576040519150601f19603f3d011682016040523d82523d6000602084013e616fad565b606091505b5091509150818015616fc157506020815110155b15615de857612cb28160006159d0565b600080600083806020019051810190616fea9190618854565b90925090506170036001600160a01b038716838761770a565b8061708b57604051636ec9facd60e11b81526001600160a01b0383169063dd93f59a9061703490309060040161920c565b602060405180830381600087803b15801561704e57600080fd5b505af1158015617062573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906170869190618680565b612cb2565b604051632f58056d60e21b81526001600160a01b0383169063bd6015b490614c6590309060040161920c565b606081516001600160401b03811180156170d057600080fd5b506040519080825280602002602001820160405280156170fa578160200160208202803683370190505b50905060005b82518110156122955782600182855103038151811061711b57fe5b602002602001015182828151811061712f57fe5b6001600160a01b0390921660209283029190910190910152600101617100565b606081516001600160401b038111801561716857600080fd5b50604051908082528060200260200182016040528015617192578160200160208202803683370190505b50905060005b8251811015612295578260018285510303815181106171b357fe5b60200260200101518282815181106171c757fe5b6001600160a01b0390921660209283029190910190910152600101617198565b604051636eb1769f60e11b815281906001600160a01b0385169063dd62ed3e906172179030908790600401619239565b60206040518083038186803b15801561722f57600080fd5b505afa158015617243573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906172679190618680565b10156159cb576159cb838360001961776b565b6000831580617287575081155b80617290575082155b1561729d57506000612b05565b838202828582816172aa57fe5b04146172ba576000915050612b05565b83600185038201816172c857fe5b0495945050505050565b6000828211156172f0576172f06172eb60028585617788565b615502565b50900390565b600082617305575060006141cb565b8282028284828161731257fe5b0414612b0557612b056172eb60018686617788565b600082820183811015612b0557612b056172eb60008686617788565b600081617359576173596172eb60038585617788565b600082848161736457fe5b04949350505050565b6000813b80617380576000915050611009565b50816001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b1580156173ba57600080fd5b505afa1580156173ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906173f2919061801e565b6001600160a01b03166370a08231836040518263ffffffff1660e01b815260040161741d919061920c565b60206040518083038186803b15801561743557600080fd5b505afa158015617449573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061746d9190618680565b61747957506000611009565b816001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b1580156174b257600080fd5b505afa1580156174c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906174ea919061801e565b6001600160a01b03166370a08231836040518263ffffffff1660e01b8152600401617515919061920c565b60206040518083038186803b15801561752d57600080fd5b505afa158015617541573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906175659190618680565b61757157506000611009565b506001919050565b8160200183511015617598576175986172eb60058551856020016177e2565b910160200152565b600081602001835110156175c1576175c16172eb60058551856020016177e2565b50016020015190565b6000846001600160a01b0316836001600160a01b031614617666576040516303795fb160e11b81526001600160a01b038516906306f2bf629061761190869060040161920c565b60206040518083038186803b15801561762957600080fd5b505afa15801561763d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190617661919061801e565b6176e2565b6040516303795fb160e11b81526001600160a01b038516906306f2bf629061769290859060040161920c565b60206040518083038186803b1580156176aa57600080fd5b505afa1580156176be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906176e2919061801e565b90506001600160a01b038116610ffc5760405162461bcd60e51b81526004016112ec906199f0565b606063a9059cbb60e01b8383604051602401617727929190619220565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915290506177658482617801565b50505050565b606063095ea7b360e01b8383604051602401617727929190619220565b606063e946c1bb60e01b8484846040516024016177a793929190619939565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915290509392505050565b6060632800659560e01b8484846040516024016177a79392919061995a565b60006060836001600160a01b03168360405161781d91906191f0565b6000604051808303816000865af19150503d806000811461785a576040519150601f19603f3d011682016040523d82523d6000602084013e61785f565b606091505b509150915081801561787557506178758161788e565b1561788157505061788a565b61776581615502565b5050565b60008151600014156178a257506001611009565b60208251106110095760006178b88360006159d0565b90508060011415612295576001915050611009565b60408051808201909152606081526000602082015290565b604080518082019091526000808252602082015290565b604051806040016040528060008152602001606081525090565b6040805160608101909152600080825260208201908152600060209091015290565b6040518060a001604052806000815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b03168152602001606081525090565b6040805160808101825260008082526020820181905260609282018390529181019190915290565b60405180606001604052806003906020820280368337509192915050565b60408051608081018252600080825260208201819052918101829052606081019190915290565b6040805160c0810190915260008082526020820190815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160008152602001606081525090565b80356141cb8161a13b565b600082601f830112617a53578081fd5b8135617a66617a618261a0c0565b61a09a565b818152915060208083019084810181840286018201871015617a8757600080fd5b60005b84811015617aaf578135617a9d8161a13b565b84529282019290820190600101617a8a565b505050505092915050565b600082601f830112617aca578081fd5b8151617ad8617a618261a0c0565b818152915060208083019084810181840286018201871015617af957600080fd5b60005b84811015617aaf578151617b0f8161a13b565b84529282019290820190600101617afc565b600082601f830112617b31578081fd5b8135617b3f617a618261a0c0565b818152915060208083019084810160005b84811015617aaf57617b67888484358a0101617a43565b84529282019290820190600101617b50565b600082601f830112617b89578081fd5b8135617b97617a618261a0c0565b818152915060208083019084810160005b84811015617aaf57617bbf888484358a0101617d68565b84529282019290820190600101617ba8565b600082601f830112617be1578081fd5b8135617bef617a618261a0c0565b818152915060208083019084810181840286018201871015617c1057600080fd5b60005b84811015617aaf578135617c268161a13b565b84529282019290820190600101617c13565b600082601f830112617c48578081fd5b8135617c56617a618261a0c0565b8181529150602080830190848101608080850287018301881015617c7957600080fd5b60005b85811015617ca057617c8e8984617f83565b85529383019391810191600101617c7c565b50505050505092915050565b600082601f830112617cbc578081fd5b8135617cca617a618261a0c0565b818152915060208083019084810181840286018201871015617ceb57600080fd5b60005b84811015617aaf57813584529282019290820190600101617cee565b600082601f830112617d1a578081fd5b8151617d28617a618261a0c0565b818152915060208083019084810181840286018201871015617d4957600080fd5b60005b84811015617aaf57815184529282019290820190600101617d4c565b600082601f830112617d78578081fd5b8135617d86617a618261a0df565b9150808252836020828501011115617d9d57600080fd5b8060208401602084013760009082016020015292915050565b600082601f830112617dc6578081fd5b8151617dd4617a618261a0df565b9150808252836020828501011115617deb57600080fd5b611e9181602084016020860161a102565b8051600281106141cb57600080fd5b600060a08284031215617e1c578081fd5b617e2660a061a09a565b9050813581526020820135617e3a8161a13b565b60208201526040820135617e4d8161a13b565b60408201526060820135617e608161a13b565b606082015260808201356001600160401b03811115617e7e57600080fd5b617e8a84828501617d68565b60808301525092915050565b6000610180808385031215617ea9578182fd5b617eb28161a09a565b915050617ebf8383617a38565b8152617ece8360208401617a38565b6020820152617ee08360408401617fe0565b6040820152617ef28360608401617fe0565b6060820152617f048360808401617fe0565b6080820152617f168360a08401617a38565b60a0820152617f288360c08401617a38565b60c0820152617f3a8360e08401617a38565b60e0820152610100617f4e84828501617a38565b908201526101208281013590820152610140617f6c84828501617feb565b818301525061016080830135818301525092915050565b600060808284031215617f94578081fd5b617f9e608061a09a565b9050813560048110617faf57600080fd5b81526020820135617fbf8161a198565b80602083015250604082013560408201526060820135606082015292915050565b80356141cb8161a183565b80356001600160401b03811681146141cb57600080fd5b600060208284031215618013578081fd5b8135612b058161a13b565b60006020828403121561802f578081fd5b8151612b058161a13b565b60008060006060848603121561804e578182fd5b83516180598161a13b565b60208501519093506001600160401b0380821115618075578384fd5b61808187838801617aba565b93506040860151915080821115618096578283fd5b506180a386828701617aba565b9150509250925092565b600080600080608085870312156180c2578182fd5b84356180cd8161a13b565b935060208501356180dd8161a13b565b925060408501356180ed8161a13b565b915060608501356001600160401b03811115618107578182fd5b61811387828801617cac565b91505092959194509250565b60008060008060808587031215618134578182fd5b843561813f8161a13b565b9350602085013561814f8161a13b565b925060408501356001600160401b03811115618169578283fd5b61817587828801617d68565b949793965093946060013593505050565b60008060006060848603121561819a578081fd5b83356181a58161a13b565b925060208401356001600160401b03808211156181c0578283fd5b6181cc87838801617a43565b935060408601359150808211156181e1578283fd5b506180a386828701617cac565b600080600080600060a08688031215618205578283fd5b85356182108161a13b565b94506020860135935060408601356182278161a13b565b925060608601356182378161a13b565b915060808601356001600160401b03811115618251578182fd5b61825d88828901617cac565b9150509295509295909350565b60006020828403121561827b578081fd5b81516001600160401b03811115618290578182fd5b610ffc84828501617aba565b6000806000606084860312156182b0578081fd5b83516001600160401b03808211156182c6578283fd5b818601915086601f8301126182d9578283fd5b81516182e7617a618261a0c0565b80828252602080830192508086018b828387028901011115618307578788fd5b8796505b8487101561832957805184526001969096019592810192810161830b565b508901519097509350505080821115618340578283fd5b5061834d86828701617d0a565b92505061835d8560408601617dfc565b90509250925092565b60008060208385031215618378578182fd5b82356001600160401b038082111561838e578384fd5b818501915085601f8301126183a1578384fd5b8135818111156183af578485fd5b86602080830285010111156183c2578485fd5b60209290920196919550909350505050565b6000806000606084860312156183e8578081fd5b83356001600160401b03808211156183fe578283fd5b61840a87838801617b79565b9450602086013591508082111561841f578283fd5b5061842c86828701617b79565b925050604084013590509250925092565b60006020828403121561844e578081fd5b81356001600160401b03811115618463578182fd5b610ffc84828501617bd1565b60008060408385031215618481578182fd5b82356001600160401b03811115618496578283fd5b6184a285828601617bd1565b92505060208301356184b38161a13b565b809150509250929050565b6000806000606084860312156184d2578081fd5b83356001600160401b038111156184e7578182fd5b6184f386828701617bd1565b93505060208401356185048161a13b565b915060408401356185148161a13b565b809150509250925092565b600080600060608486031215618533578081fd5b83356001600160401b0380821115618549578283fd5b818601915086601f83011261855c578283fd5b813561856a617a618261a0c0565b80828252602080830192508086016101808c838288028a0101111561858d578889fd5b8897505b858810156185b9576185a38d83617e96565b8552600197909701969382019390810190618591565b509198508901359450505050808211156185d1578283fd5b506185de86828701617c38565b92505061835d8560408601617a38565b6000602082840312156185ff578081fd5b81516001600160401b03811115618614578182fd5b610ffc84828501617d0a565b60008060408385031215618632578182fd5b82516001600160401b0380821115618648578384fd5b61865486838701617d0a565b93506020850151915080821115618669578283fd5b5061867685828601617d0a565b9150509250929050565b600060208284031215618691578081fd5b5051919050565b600080600080600060a086880312156186af578283fd5b85356186ba8161a15e565b945060208601356186ca8161a13b565b935060408601356186da8161a13b565b925060608601356001600160401b03808211156186f5578283fd5b61870189838a01617d68565b93506080880135915080821115618716578283fd5b5061825d88828901617cac565b600080600080600060a0868803121561873a578283fd5b85356187458161a15e565b945060208601356187558161a13b565b935060408601356187658161a13b565b925060608601356001600160401b0381111561877f578182fd5b61878b88828901617d68565b95989497509295608001359392505050565b6000602082840312156187ae578081fd5b81516001600160401b038111156187c3578182fd5b610ffc84828501617db6565b600080604083850312156187e1578182fd5b82516187ec8161a13b565b60208401519092506001600160401b03811115618807578182fd5b61867685828601617aba565b600080600060608486031215618827578081fd5b83516188328161a13b565b60208501519093506188438161a13b565b60408501519092506185148161a150565b60008060408385031215618866578182fd5b82516188718161a13b565b60208401519092506184b38161a150565b60008060408385031215618894578182fd5b825161889f8161a13b565b60208401519092506001600160401b038111156188ba578182fd5b61867685828601617db6565b600080600080608085870312156188db578182fd5b84356188e68161a13b565b935060208501356188f68161a13b565b925060408501356001600160401b0380821115618911578384fd5b61891d88838901617bd1565b93506060870135915080821115618932578283fd5b5061811387828801617cac565b600060408284031215618950578081fd5b61895a604061a09a565b82516189658161a13b565b81526020928301519281019290925250919050565b60008060008084860360a0811215618990578283fd5b604081121561899d578283fd5b506189a8604061a09a565b85356189b38161a13b565b815260208681013590820152935060408501356189cf8161a13b565b925060608501356189df8161a13b565b915060808501356001600160401b03811115618107578182fd5b60008060008060808587031215618a0e578182fd5b84356001600160401b0380821115618a24578384fd5b9086019060408289031215618a37578384fd5b618a41604061a09a565b618a4b8984617a38565b8152602083013582811115618a5e578586fd5b618a6a8a828601617b21565b60208301525080965050618a818860208901617a38565b945061891d8860408901617a38565b600060808284031215618aa1578081fd5b618aab608061a09a565b8251618ab68161a13b565b81526020830151618ac68161a15e565b60208201526040830151618ad98161a174565b60408201526060830151618aec8161a174565b60608201529392505050565b60008060008084860360e0811215618b0e578283fd5b6080811215618b1b578283fd5b50618b26608061a09a565b8535618b318161a13b565b81526020860135618b418161a15e565b60208201526040860135618b548161a174565b60408201526060860135618b678161a174565b60608201529350618b7b8660808701617a38565b9250618b8a8660a08701617a38565b915060c08501356001600160401b03811115618107578182fd5b60008060008084860360a0811215618bba578283fd5b6040811215618bc7578283fd5b50618bd2604061a09a565b8535618bdd8161a13b565b81526020860135618bed8161a13b565b6020820152935060408501356189cf8161a13b565b600060208284031215618c13578081fd5b81516001600160401b0380821115618c29578283fd5b9083019060a08286031215618c3c578283fd5b618c4660a061a09a565b825181526020830151618c588161a13b565b60208201526040830151618c6b8161a13b565b60408201526060830151618c7e8161a13b565b6060820152608083015182811115618c94578485fd5b618ca087828601617db6565b60808301525095945050505050565b60008060008060808587031215618cc4578182fd5b84356001600160401b0380821115618cda578384fd5b618ce688838901617e0b565b955060208701359150618cf88261a13b565b909350604086013590618d0a8261a13b565b90925060608601359080821115618932578283fd5b60008060008060808587031215618d34578182fd5b84356001600160401b03811115618d49578283fd5b618d5587828801617e0b565b945050602085013592506040850135618d6d8161a13b565b91506060850135618d7d8161a13b565b939692955090935050565b60008060006102208486031215618d9d578081fd5b618da78585617e96565b9250618db7856101808601617f83565b91506102008401356185148161a13b565b600060408284031215618dd9578081fd5b618de3604061a09a565b8251618dee8161a13b565b81526020830151618dfe8161a13b565b60208201529392505050565b60008060008084860360c0811215618e20578283fd5b6060811215618e2d578283fd5b50618e38606061a09a565b8535618e438161a13b565b8152602086810135908201526040860135618e5d8161a13b565b604082015293506060850135618e728161a13b565b92506080850135618e828161a13b565b915060a08501356001600160401b03811115618107578182fd5b600080600083850360a0811215618eb1578182fd5b6060811215618ebe578182fd5b50618ec9606061a09a565b84518152602085015160058110618ede578283fd5b60208201526040850151618ef18161a183565b60408201526060850151909350618f078161a183565b60808501519092506185148161a150565b600060208284031215618f29578081fd5b815162ffffff81168114612b05578182fd5b60008060408385031215618f4d578182fd5b505080516020909101519092909150565b600060208284031215618f6f578081fd5b8151612b058161a198565b6001600160a01b03169052565b6000815180845260208085019450808401835b83811015618fbf5781516001600160a01b031687529582019590820190600101618f9a565b509495945050505050565b6000815180845260208085019450808401835b83811015618fbf57815187529582019590820190600101618fdd565b6000815180845261901181602086016020860161a102565b601f01601f19169290920160200192915050565b80516001600160a01b039081168352602080830151151590840152604080830151909116908301526060908101511515910152565b600081518352602082015160406020850152610ffc6040850182618ff9565b600081518352602082015160018060a01b0380821660208601528060408501511660408601528060608501511660608601525050608082015160a06080850152610ffc60a0850182618ff9565b6190d1828251618f7a565b60208101516190e36020840182618f7a565b5060408101516190f660408401826191c6565b50606081015161910960608401826191c6565b50608081015161911c60808401826191c6565b5060a081015161912f60a0840182618f7a565b5060c081015161914260c0840182618f7a565b5060e081015161915560e0840182618f7a565b506101008082015161916982850182618f7a565b5050610120818101519083015261014080820151619189828501826191d3565b505061016090810151910152565b80516191a28161a12e565b825260208181015160ff169083015260408082015190830152606090810151910152565b6001600160801b03169052565b6001600160401b03169052565b6000828483379101908152919050565b6000825161920281846020870161a102565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039384168152919092166020820152901515604082015260600190565b6001600160a01b038581168252841660208201528215156040820152608060608201819052600090612cb290830184618ff9565b6001600160a01b038581168252841660208201526080604082018190526000906192d790830185618ff9565b905082606083015295945050505050565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b0383168152604060208201819052600090610ffc90830184618f87565b6001600160a01b038416815260606020820181905260009061935490830185618f87565b8281036040840152612cb28185618f87565b6001600160a01b038516815260806020820181905260009061938a90830186618f87565b828103604084015261939c8186618fca565b90508281036060840152616e988185618fca565b6001600160a01b03841681526060602082018190526000906193d490830185618fca565b8281036040840152612cb28185618fca565b6001600160a01b039290921682521515602082015260400190565b6001600160a01b0383168152604060208201819052600090610ffc90830184618ff9565b6001600160a01b0385168152600061943c8561a12e565b846020830152608060408301526194566080830185618fca565b8281036060840152616e988185618fca565b6001600160a01b038981168252600090610100906194858b61a12e565b8a602085015281604085015261949d8285018b618fca565b915083820360608501526194b1828a618fca565b908816608085015290506194c48661a12e565b8560a084015282810360c08401526194dc8186618fca565b905082810360e08401526159b18185618fca565b6000606082526195036060830186618f87565b82810360208401526195158186618fca565b90508281036040840152612cb28185618fca565b60006040825261953c6040830185618f87565b90508260208301529392505050565b60006060820160608352808651808352608085019150602092506080838202860101838901855b838110156195a057607f1988840301855261958e838351618ff9565b94860194925090850190600101619572565b5050858103848701526195b38189618fca565b93505050508281036040840152612cb28185618fca565b600060c082526195dd60c0830189618f87565b60208301979097525060408101949094526001600160a01b0392831660608501529116608083015260a090910152919050565b60208082528251828201819052600091906040908185019080840286018301878501865b8381101561967757888303603f190185528151805187855261965888860182618ff9565b9189015115159489019490945294870194925090860190600101619634565b509098975050505050505050565b600060208252612b056020830184618fca565b6000604082526196ab6040830185618fca565b82810360208401526168648185618fca565b901515815260200190565b84151581526001600160a01b038416602082015260806040820181905260009061945690830185618fca565b90815260200190565b60008582526080602083015261938a6080830186618ff9565b6001600160e01b0319861681526001600160a01b0385811660208301528416604082015260a06060820181905260009061975290830185618ff9565b8281036080840152615c758185618fca565b6001600160e01b0319861681526001600160a01b0385811660208301528416604082015260a0606082018190526000906197a090830185618ff9565b90508260808301529695505050505050565b600060208252612b056020830184618ff9565b6001600160a01b0386811682528581166020830152841660408201526060810183905260a060808201819052600090616e9890830184618ff9565b6001600160a01b03938416815291909216602082015262ffffff909116604082015260600190565b6001600160a01b039586168152938516602085015260408401929092526060830152909116608082015260a00190565b6001600160a01b03958616815293909416602084015260408301919091526060820152608081019190915260a00190565b6001600160a01b03898116825260208201899052878116604083015286811660608301526080820186905260a08201859052831660c082015261010060e082018190526000906159b183820185618ff9565b6001600160a01b039485168152602081019390935292166040820152606081019190915260800190565b6001600160a01b03958616815260208101949094529190931660408301526060820192909252608081019190915260a00190565b606081016199468561a12e565b938152602081019290925260409091015290565b606081016008851061994657fe5b600f94850b81529290930b6020830152604082015260ff909116606082015260800190565b92835260208301919091526001600160a01b0316604082015260600190565b60208082526024908201527f556e6973776170563353616d706c65722f746f6b656e5061746820746f6f20736040820152631a1bdc9d60e21b606082015260800190565b60208082526018908201527f4d6978696e556e69737761702f4e4f5f45584348414e47450000000000000000604082015260600190565b6020808252602c908201527f4d6978696e42616e636f722f504154485f4c454e4754485f4d5553545f42455f60408201526b41545f4c454153545f54574f60a01b606082015260800190565b6020808252603a908201527f4d6978696e4b79626572446d6d2f4c4153545f454c454d454e545f4f465f504160408201527f54485f4d5553545f4d415443485f4f55545055545f544f4b454e000000000000606082015260800190565b60208082526025908201527f556e6973776170563353616d706c65722f696e76616c69642070617468206c656040820152646e6774687360d81b606082015260800190565b6020808252602f908201527f4d6978696e556e697377617056322f504154485f4c454e4754485f4d5553545f60408201526e42455f41545f4c454153545f54574f60881b606082015260800190565b60208082526023908201527f4d6978696e4b79626572446d6d2f41525241595f4c454e4754485f4d49534d416040820152620a886960eb1b606082015260800190565b6020808252818101527f537761702053616d706c652073686f756c642068617665207265766572746564604082015260600190565b60208082526038908201527f4d6978696e42616e636f722f4c4153545f454c454d454e545f4f465f5041544860408201527f5f4d5553545f4d415443485f4f55545055545f544f4b454e0000000000000000606082015260800190565b6020808252602f908201527f4d6978696e4b79626572446d6d2f504f4f4c535f4c454e4754485f4d5553545f60408201526e42455f41545f4c454153545f4f4e4560881b606082015260800190565b6020808252603b908201527f4d6978696e556e697377617056322f4c4153545f454c454d454e545f4f465f5060408201527f4154485f4d5553545f4d415443485f4f55545055545f544f4b454e0000000000606082015260800190565b81516001600160a01b031681526020918201519181019190915260400190565b81516001600160a01b031681526020808301516001600160e01b03191690820152604080830151600f90810b91830191909152606092830151900b9181019190915260800190565b600060208252825160a06020840152619d6960c0840182618ff9565b905060018060a01b0360208501511660408401526040840151606084015260608401516080840152608084015160a08401528091505092915050565b600060608252619db8606083018661905a565b8281036020840152619dca818661905a565b915050826040830152949350505050565b600060808252619dee608083018761905a565b8281036020840152619e00818761905a565b604084019590955250506060015292915050565b600060208252612b056020830184619079565b600060808252619e3a6080830187619079565b6020830195909552506001600160a01b0392831660408201529116606090910152919050565b6102008101619e6f82856190c6565b612b05610180830184619197565b6102208101619e8c82866190c6565b619e9a610180830185619197565b6001600160a01b0392909216610200919091015292915050565b81516001600160a01b039081168252602092830151169181019190915260400190565b600060e08252855160e0830152602086015160028110619ef357fe5b6101008301526040860151619f0c610120840182618f7a565b506060860151619f20610140840182618f7a565b50608086015161016083015260a086015160c0610180840152619f476101a0840182618ff9565b915050619f576020830186619025565b60a082019390935260c0015292915050565b600087825286602083015260c06040830152619f8860c0830187618f87565b8281036060840152619f9a8187618f87565b6001600160a01b03959095166080840152505060a00152949350505050565b600086825285602083015260a06040830152619fd860a0830186618f87565b6001600160a01b0394909416606083015250608001529392505050565b600084825283602083015260606040830152610ff96060830184618ff9565b9485526020850193909352604084019190915260608301526001600160a01b0316608082015260a00190565b9283526020830191909152604082015260600190565b6000808335601e1984360301811261a06c578283fd5b8301803591506001600160401b0382111561a085578283fd5b60200191503681900382131561429b57600080fd5b6040518181016001600160401b038111828210171561a0b857600080fd5b604052919050565b60006001600160401b0382111561a0d5578081fd5b5060209081020190565b60006001600160401b0382111561a0f4578081fd5b50601f01601f191660200190565b60005b8381101561a11d57818101518382015260200161a105565b838111156177655750506000910152565b6004811061a13857fe5b50565b6001600160a01b038116811461a13857600080fd5b801515811461a13857600080fd5b6001600160e01b03198116811461a13857600080fd5b80600f0b811461a13857600080fd5b6001600160801b038116811461a13857600080fd5b60ff8116811461a13857600080fdfea2646970667358221220bdcfdb4e5be1292ba14499ca5fa661a2fd336bce94f5d892b3195f8d2618f94b64736f6c634300060c0033",
                "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x3DD JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8EFFA9EA GT PUSH2 0x1FD JUMPI DUP1 PUSH4 0xC25C4138 GT PUSH2 0x118 JUMPI DUP1 PUSH4 0xD3CDC04D GT PUSH2 0xAB JUMPI DUP1 PUSH4 0xE8E4AF09 GT PUSH2 0x7A JUMPI DUP1 PUSH4 0xE8E4AF09 EQ PUSH2 0xC45 JUMPI DUP1 PUSH4 0xF573C161 EQ PUSH2 0xC65 JUMPI DUP1 PUSH4 0xF5A4994D EQ PUSH2 0xC85 JUMPI DUP1 PUSH4 0xFA5DEF9F EQ PUSH2 0xCA5 JUMPI DUP1 PUSH4 0xFC9FE41B EQ PUSH2 0xCC5 JUMPI PUSH2 0x3E4 JUMP JUMPDEST DUP1 PUSH4 0xD3CDC04D EQ PUSH2 0xBC5 JUMPI DUP1 PUSH4 0xD9BCA372 EQ PUSH2 0xBE5 JUMPI DUP1 PUSH4 0xDDD5AA28 EQ PUSH2 0xC05 JUMPI DUP1 PUSH4 0xE78AC045 EQ PUSH2 0xC25 JUMPI PUSH2 0x3E4 JUMP JUMPDEST DUP1 PUSH4 0xC94706D8 GT PUSH2 0xE7 JUMPI DUP1 PUSH4 0xC94706D8 EQ PUSH2 0xB45 JUMPI DUP1 PUSH4 0xCC1621C9 EQ PUSH2 0xB65 JUMPI DUP1 PUSH4 0xCD85E7B5 EQ PUSH2 0xB85 JUMPI DUP1 PUSH4 0xD31B0A8A EQ PUSH2 0xBA5 JUMPI PUSH2 0x3E4 JUMP JUMPDEST DUP1 PUSH4 0xC25C4138 EQ PUSH2 0xAC5 JUMPI DUP1 PUSH4 0xC7DD6C4F EQ PUSH2 0xAE5 JUMPI DUP1 PUSH4 0xC8319084 EQ PUSH2 0xB05 JUMPI DUP1 PUSH4 0xC8C74A37 EQ PUSH2 0xB25 JUMPI PUSH2 0x3E4 JUMP JUMPDEST DUP1 PUSH4 0xAB000276 GT PUSH2 0x190 JUMPI DUP1 PUSH4 0xB90CD2FB GT PUSH2 0x15F JUMPI DUP1 PUSH4 0xB90CD2FB EQ PUSH2 0xA45 JUMPI DUP1 PUSH4 0xBC4F55BA EQ PUSH2 0xA65 JUMPI DUP1 PUSH4 0xBD71ECF6 EQ PUSH2 0xA85 JUMPI DUP1 PUSH4 0xBF60384B EQ PUSH2 0xAA5 JUMPI PUSH2 0x3E4 JUMP JUMPDEST DUP1 PUSH4 0xAB000276 EQ PUSH2 0x9B6 JUMPI DUP1 PUSH4 0xAB3E6210 EQ PUSH2 0x9D6 JUMPI DUP1 PUSH4 0xADC636BF EQ PUSH2 0x9F6 JUMPI DUP1 PUSH4 0xB770F849 EQ PUSH2 0xA25 JUMPI PUSH2 0x3E4 JUMP JUMPDEST DUP1 PUSH4 0x9E3F05C3 GT PUSH2 0x1CC JUMPI DUP1 PUSH4 0x9E3F05C3 EQ PUSH2 0x926 JUMPI DUP1 PUSH4 0xA095A036 EQ PUSH2 0x956 JUMPI DUP1 PUSH4 0xA4698417 EQ PUSH2 0x976 JUMPI DUP1 PUSH4 0xA75E744B EQ PUSH2 0x996 JUMPI PUSH2 0x3E4 JUMP JUMPDEST DUP1 PUSH4 0x8EFFA9EA EQ PUSH2 0x8A6 JUMPI DUP1 PUSH4 0x98777748 EQ PUSH2 0x8C6 JUMPI DUP1 PUSH4 0x9AD732EF EQ PUSH2 0x8E6 JUMPI DUP1 PUSH4 0x9BF3EE35 EQ PUSH2 0x906 JUMPI PUSH2 0x3E4 JUMP JUMPDEST DUP1 PUSH4 0x5D5B674F GT PUSH2 0x2F8 JUMPI DUP1 PUSH4 0x78FEE41C GT PUSH2 0x28B JUMPI DUP1 PUSH4 0x7FEA2AE1 GT PUSH2 0x25A JUMPI DUP1 PUSH4 0x7FEA2AE1 EQ PUSH2 0x7F4 JUMPI DUP1 PUSH4 0x8D201C22 EQ PUSH2 0x814 JUMPI DUP1 PUSH4 0x8D8ABDF0 EQ PUSH2 0x834 JUMPI DUP1 PUSH4 0x8DC669FA EQ PUSH2 0x854 JUMPI DUP1 PUSH4 0x8E5A0E07 EQ PUSH2 0x876 JUMPI PUSH2 0x3E4 JUMP JUMPDEST DUP1 PUSH4 0x78FEE41C EQ PUSH2 0x774 JUMPI DUP1 PUSH4 0x7A82DCB9 EQ PUSH2 0x794 JUMPI DUP1 PUSH4 0x7E105CE2 EQ PUSH2 0x7B4 JUMPI DUP1 PUSH4 0x7F7F4F13 EQ PUSH2 0x7D4 JUMPI PUSH2 0x3E4 JUMP JUMPDEST DUP1 PUSH4 0x6A33BC7E GT PUSH2 0x2C7 JUMPI DUP1 PUSH4 0x6A33BC7E EQ PUSH2 0x6E5 JUMPI DUP1 PUSH4 0x706E2F9B EQ PUSH2 0x714 JUMPI DUP1 PUSH4 0x7280BFFF EQ PUSH2 0x734 JUMPI DUP1 PUSH4 0x74C9D255 EQ PUSH2 0x754 JUMPI PUSH2 0x3E4 JUMP JUMPDEST DUP1 PUSH4 0x5D5B674F EQ PUSH2 0x665 JUMPI DUP1 PUSH4 0x66A1AC6B EQ PUSH2 0x685 JUMPI DUP1 PUSH4 0x686B7EE8 EQ PUSH2 0x6A5 JUMPI DUP1 PUSH4 0x68BE3CF2 EQ PUSH2 0x6C5 JUMPI PUSH2 0x3E4 JUMP JUMPDEST DUP1 PUSH4 0x2AA64319 GT PUSH2 0x370 JUMPI DUP1 PUSH4 0x4EDFB5B2 GT PUSH2 0x33F JUMPI DUP1 PUSH4 0x4EDFB5B2 EQ PUSH2 0x5D8 JUMPI DUP1 PUSH4 0x57494B1D EQ PUSH2 0x605 JUMPI DUP1 PUSH4 0x59AB9A6C EQ PUSH2 0x625 JUMPI DUP1 PUSH4 0x5C71CBE7 EQ PUSH2 0x645 JUMPI PUSH2 0x3E4 JUMP JUMPDEST DUP1 PUSH4 0x2AA64319 EQ PUSH2 0x548 JUMPI DUP1 PUSH4 0x30D6570D EQ PUSH2 0x578 JUMPI DUP1 PUSH4 0x3105FEC1 EQ PUSH2 0x598 JUMPI DUP1 PUSH4 0x494569DB EQ PUSH2 0x5B8 JUMPI PUSH2 0x3E4 JUMP JUMPDEST DUP1 PUSH4 0x16279055 GT PUSH2 0x3AC JUMPI DUP1 PUSH4 0x16279055 EQ PUSH2 0x4AB JUMPI DUP1 PUSH4 0x1F4FF03E EQ PUSH2 0x4D8 JUMPI DUP1 PUSH4 0x252322B3 EQ PUSH2 0x4FA JUMPI DUP1 PUSH4 0x281E3432 EQ PUSH2 0x528 JUMPI PUSH2 0x3E4 JUMP JUMPDEST DUP1 PUSH4 0x496D5DC EQ PUSH2 0x3E9 JUMPI DUP1 PUSH4 0x1022742B EQ PUSH2 0x421 JUMPI DUP1 PUSH4 0x149DAB0E EQ PUSH2 0x44E JUMPI DUP1 PUSH4 0x15DE17DE EQ PUSH2 0x47E JUMPI PUSH2 0x3E4 JUMP JUMPDEST CALLDATASIZE PUSH2 0x3E4 JUMPI STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x409 PUSH2 0x404 CALLDATASIZE PUSH1 0x4 PUSH2 0x8186 JUMP JUMPDEST PUSH2 0xCF4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x418 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x94F0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x42D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x441 PUSH2 0x43C CALLDATASIZE PUSH1 0x4 PUSH2 0x851F JUMP JUMPDEST PUSH2 0xDBA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x418 SWAP2 SWAP1 PUSH2 0x9685 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x45A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x46E PUSH2 0x469 CALLDATASIZE PUSH1 0x4 PUSH2 0x89F9 JUMP JUMPDEST PUSH2 0xF2D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x418 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9366 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x48A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x49E PUSH2 0x499 CALLDATASIZE PUSH1 0x4 PUSH2 0x811F JUMP JUMPDEST PUSH2 0xFD6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x418 SWAP2 SWAP1 PUSH2 0x96F4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4B7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4CB PUSH2 0x4C6 CALLDATASIZE PUSH1 0x4 PUSH2 0x8002 JUMP JUMPDEST PUSH2 0x1004 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x418 SWAP2 SWAP1 PUSH2 0x96BD JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4E4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4F8 PUSH2 0x4F3 CALLDATASIZE PUSH1 0x4 PUSH2 0x8698 JUMP JUMPDEST PUSH2 0x100E JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x506 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x51A PUSH2 0x515 CALLDATASIZE PUSH1 0x4 PUSH2 0x80AD JUMP JUMPDEST PUSH2 0x1313 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x418 SWAP3 SWAP2 SWAP1 PUSH2 0x9698 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x534 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x51A PUSH2 0x543 CALLDATASIZE PUSH1 0x4 PUSH2 0x8E0A JUMP JUMPDEST PUSH2 0x13B0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x554 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x568 PUSH2 0x563 CALLDATASIZE PUSH1 0x4 PUSH2 0x8BA4 JUMP JUMPDEST PUSH2 0x1449 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x418 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x96C8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x584 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x51A PUSH2 0x593 CALLDATASIZE PUSH1 0x4 PUSH2 0x80AD JUMP JUMPDEST PUSH2 0x160E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x51A PUSH2 0x5B3 CALLDATASIZE PUSH1 0x4 PUSH2 0x8186 JUMP JUMPDEST PUSH2 0x1679 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x409 PUSH2 0x5D3 CALLDATASIZE PUSH1 0x4 PUSH2 0x8186 JUMP JUMPDEST PUSH2 0x171D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5E4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5F8 PUSH2 0x5F3 CALLDATASIZE PUSH1 0x4 PUSH2 0x8D1F JUMP JUMPDEST PUSH2 0x18B4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x418 SWAP2 SWAP1 PUSH2 0x97B2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x611 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x51A PUSH2 0x620 CALLDATASIZE PUSH1 0x4 PUSH2 0x80AD JUMP JUMPDEST PUSH2 0x1B39 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x631 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x49E PUSH2 0x640 CALLDATASIZE PUSH1 0x4 PUSH2 0x811F JUMP JUMPDEST PUSH2 0x1BC9 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x651 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x49E PUSH2 0x660 CALLDATASIZE PUSH1 0x4 PUSH2 0x811F JUMP JUMPDEST PUSH2 0x1BD6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x671 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x51A PUSH2 0x680 CALLDATASIZE PUSH1 0x4 PUSH2 0x80AD JUMP JUMPDEST PUSH2 0x1BE4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x691 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x441 PUSH2 0x6A0 CALLDATASIZE PUSH1 0x4 PUSH2 0x851F JUMP JUMPDEST PUSH2 0x1C74 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x49E PUSH2 0x6C0 CALLDATASIZE PUSH1 0x4 PUSH2 0x811F JUMP JUMPDEST PUSH2 0x1D29 JUMP JUMPDEST PUSH2 0x6D8 PUSH2 0x6D3 CALLDATASIZE PUSH1 0x4 PUSH2 0x8366 JUMP JUMPDEST PUSH2 0x1D37 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x418 SWAP2 SWAP1 PUSH2 0x9610 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6F1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x705 PUSH2 0x700 CALLDATASIZE PUSH1 0x4 PUSH2 0x88C6 JUMP JUMPDEST PUSH2 0x1E98 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x418 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x954B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x720 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x441 PUSH2 0x72F CALLDATASIZE PUSH1 0x4 PUSH2 0x843D JUMP JUMPDEST PUSH2 0x21A9 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x740 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x49E PUSH2 0x74F CALLDATASIZE PUSH1 0x4 PUSH2 0x811F JUMP JUMPDEST PUSH2 0x229B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x760 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x46E PUSH2 0x76F CALLDATASIZE PUSH1 0x4 PUSH2 0x89F9 JUMP JUMPDEST PUSH2 0x22A9 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x780 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4F8 PUSH2 0x78F CALLDATASIZE PUSH1 0x4 PUSH2 0x8723 JUMP JUMPDEST PUSH2 0x22B9 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7A0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x49E PUSH2 0x7AF CALLDATASIZE PUSH1 0x4 PUSH2 0x811F JUMP JUMPDEST PUSH2 0x2479 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5F8 PUSH2 0x7CF CALLDATASIZE PUSH1 0x4 PUSH2 0x8002 JUMP JUMPDEST PUSH2 0x2486 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7E0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x51A PUSH2 0x7EF CALLDATASIZE PUSH1 0x4 PUSH2 0x8E0A JUMP JUMPDEST PUSH2 0x24AD JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x800 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x51A PUSH2 0x80F CALLDATASIZE PUSH1 0x4 PUSH2 0x8AF8 JUMP JUMPDEST PUSH2 0x2584 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x820 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x49E PUSH2 0x82F CALLDATASIZE PUSH1 0x4 PUSH2 0x811F JUMP JUMPDEST PUSH2 0x265D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x840 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x51A PUSH2 0x84F CALLDATASIZE PUSH1 0x4 PUSH2 0x897A JUMP JUMPDEST PUSH2 0x2680 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x860 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x869 PUSH2 0x2710 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x418 SWAP2 SWAP1 PUSH2 0x920C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x882 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x896 PUSH2 0x891 CALLDATASIZE PUSH1 0x4 PUSH2 0x83D4 JUMP JUMPDEST PUSH2 0x2728 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x418 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9DDB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8B2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x49E PUSH2 0x8C1 CALLDATASIZE PUSH1 0x4 PUSH2 0x811F JUMP JUMPDEST PUSH2 0x293F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x51A PUSH2 0x8E1 CALLDATASIZE PUSH1 0x4 PUSH2 0x80AD JUMP JUMPDEST PUSH2 0x294C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x49E PUSH2 0x901 CALLDATASIZE PUSH1 0x4 PUSH2 0x811F JUMP JUMPDEST PUSH2 0x29B7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x912 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x49E PUSH2 0x921 CALLDATASIZE PUSH1 0x4 PUSH2 0x8D88 JUMP JUMPDEST PUSH2 0x29C5 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x932 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x946 PUSH2 0x941 CALLDATASIZE PUSH1 0x4 PUSH2 0x8CAF JUMP JUMPDEST PUSH2 0x2B0C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x418 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x96FD JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x962 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x49E PUSH2 0x971 CALLDATASIZE PUSH1 0x4 PUSH2 0x811F JUMP JUMPDEST PUSH2 0x2C43 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x982 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x51A PUSH2 0x991 CALLDATASIZE PUSH1 0x4 PUSH2 0x80AD JUMP JUMPDEST PUSH2 0x2CBC JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x9A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x568 PUSH2 0x9B1 CALLDATASIZE PUSH1 0x4 PUSH2 0x81EE JUMP JUMPDEST PUSH2 0x2D2B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x9C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x51A PUSH2 0x9D1 CALLDATASIZE PUSH1 0x4 PUSH2 0x80AD JUMP JUMPDEST PUSH2 0x2DD0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x9E2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x49E PUSH2 0x9F1 CALLDATASIZE PUSH1 0x4 PUSH2 0x811F JUMP JUMPDEST PUSH2 0x2E3B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA02 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xA16 PUSH2 0xA11 CALLDATASIZE PUSH1 0x4 PUSH2 0x80AD JUMP JUMPDEST PUSH2 0x2E5D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x418 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x93B0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA31 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x49E PUSH2 0xA40 CALLDATASIZE PUSH1 0x4 PUSH2 0x811F JUMP JUMPDEST PUSH2 0x2EFA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA51 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x51A PUSH2 0xA60 CALLDATASIZE PUSH1 0x4 PUSH2 0x80AD JUMP JUMPDEST PUSH2 0x2F1D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA71 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x51A PUSH2 0xA80 CALLDATASIZE PUSH1 0x4 PUSH2 0x897A JUMP JUMPDEST PUSH2 0x2FAD JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA91 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x441 PUSH2 0xAA0 CALLDATASIZE PUSH1 0x4 PUSH2 0x846F JUMP JUMPDEST PUSH2 0x3018 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xAB1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x51A PUSH2 0xAC0 CALLDATASIZE PUSH1 0x4 PUSH2 0x8AF8 JUMP JUMPDEST PUSH2 0x3114 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xAD1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x51A PUSH2 0xAE0 CALLDATASIZE PUSH1 0x4 PUSH2 0x80AD JUMP JUMPDEST PUSH2 0x317F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xAF1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x49E PUSH2 0xB00 CALLDATASIZE PUSH1 0x4 PUSH2 0x811F JUMP JUMPDEST PUSH2 0x3215 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x51A PUSH2 0xB20 CALLDATASIZE PUSH1 0x4 PUSH2 0x80AD JUMP JUMPDEST PUSH2 0x3223 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB31 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x51A PUSH2 0xB40 CALLDATASIZE PUSH1 0x4 PUSH2 0x8186 JUMP JUMPDEST PUSH2 0x328E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB51 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x51A PUSH2 0xB60 CALLDATASIZE PUSH1 0x4 PUSH2 0x80AD JUMP JUMPDEST PUSH2 0x33E6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB71 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x946 PUSH2 0xB80 CALLDATASIZE PUSH1 0x4 PUSH2 0x8CAF JUMP JUMPDEST PUSH2 0x3476 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB91 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x49E PUSH2 0xBA0 CALLDATASIZE PUSH1 0x4 PUSH2 0x811F JUMP JUMPDEST PUSH2 0x3588 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xBB1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x49E PUSH2 0xBC0 CALLDATASIZE PUSH1 0x4 PUSH2 0x811F JUMP JUMPDEST PUSH2 0x3595 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xBD1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x49E PUSH2 0xBE0 CALLDATASIZE PUSH1 0x4 PUSH2 0x811F JUMP JUMPDEST PUSH2 0x35A3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xBF1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x568 PUSH2 0xC00 CALLDATASIZE PUSH1 0x4 PUSH2 0x81EE JUMP JUMPDEST PUSH2 0x35B1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xC11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x568 PUSH2 0xC20 CALLDATASIZE PUSH1 0x4 PUSH2 0x8BA4 JUMP JUMPDEST PUSH2 0x366C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xC31 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x441 PUSH2 0xC40 CALLDATASIZE PUSH1 0x4 PUSH2 0x84BE JUMP JUMPDEST PUSH2 0x384E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xC51 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x51A PUSH2 0xC60 CALLDATASIZE PUSH1 0x4 PUSH2 0x80AD JUMP JUMPDEST PUSH2 0x3943 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xC71 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x49E PUSH2 0xC80 CALLDATASIZE PUSH1 0x4 PUSH2 0x811F JUMP JUMPDEST PUSH2 0x39AE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xC91 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xA16 PUSH2 0xCA0 CALLDATASIZE PUSH1 0x4 PUSH2 0x80AD JUMP JUMPDEST PUSH2 0x39BB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xCB1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x705 PUSH2 0xCC0 CALLDATASIZE PUSH1 0x4 PUSH2 0x88C6 JUMP JUMPDEST PUSH2 0x3A6D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xCD1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xCE5 PUSH2 0xCE0 CALLDATASIZE PUSH1 0x4 PUSH2 0x83D4 JUMP JUMPDEST PUSH2 0x3DB3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x418 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9DA5 JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH1 0x60 PUSH2 0xD03 DUP7 DUP7 PUSH2 0x3FD3 JUMP JUMPDEST SWAP3 POP DUP3 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0xD14 JUMPI PUSH2 0xDB1 JUMP JUMPDEST PUSH2 0xDAB PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 DUP8 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xD2F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH1 0x1 DUP10 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0xD55 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 DUP7 DUP10 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xD80 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9330 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0x7A82DCB9 OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP6 PUSH2 0x41D1 JUMP JUMPDEST SWAP1 SWAP3 POP SWAP1 POP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0xDD3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xDFD JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 EQ PUSH2 0xF25 JUMPI ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x9BF3EE35 PUSH3 0x30D40 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xE2A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0xE3E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE65 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9E7D JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xE7D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0xEAE JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0xEAB SWAP2 DUP2 ADD SWAP1 PUSH2 0x8680 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0xF02 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0xEDC JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xEE1 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xEF0 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP PUSH2 0xF1D JUMP JUMPDEST DUP1 DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xF0F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP JUMPDEST PUSH1 0x1 ADD PUSH2 0xE03 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP1 PUSH1 0x60 DUP8 PUSH1 0x20 ADD MLOAD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0xF47 JUMPI PUSH2 0xFCB JUMP JUMPDEST PUSH2 0xF53 DUP9 DUP9 DUP9 DUP9 PUSH2 0x42A2 JUMP JUMPDEST DUP1 SWAP5 POP DUP2 SWAP6 POP POP POP PUSH2 0xFC5 PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP7 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xF9A SWAP3 SWAP2 SWAP1 PUSH2 0x930C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0xAB3E6210 OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP7 PUSH2 0x41D1 JUMP JUMPDEST SWAP1 SWAP3 POP SWAP1 POP JUMPDEST SWAP5 POP SWAP5 POP SWAP5 POP SWAP5 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFF9 PUSH20 0xC02AAA39B223FE8D0A0E5C4F27EAD9083C756CC2 DUP7 DUP7 DUP6 DUP8 PUSH2 0x44D4 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP1 EXTCODESIZE ISZERO ISZERO JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP5 SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x1 DUP5 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x1025 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xE326C7D7 PUSH1 0x1 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x105C SWAP2 SWAP1 PUSH2 0x96BD JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1076 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1087 JUMPI POP PUSH1 0x1 JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0x55C37053 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0xAB86E0A6 SWAP1 PUSH2 0x10B6 SWAP1 ADDRESS SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x9220 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x10D0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x10E1 JUMPI POP PUSH1 0x1 JUMPDEST POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD0E30DB0 DUP3 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x111D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x112F JUMPI POP PUSH1 0x1 JUMPDEST POP PUSH1 0x60 DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x1149 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1173 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x60 DUP5 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x118F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x11B9 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP6 MLOAD DUP2 LT ISZERO PUSH2 0x12FD JUMPI ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x78FEE41C PUSH3 0x1E8480 DUP13 DUP13 DUP13 DUP13 DUP13 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x11EB JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP8 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1213 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9764 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x122D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP8 CALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x123F JUMPI POP PUSH1 0x1 JUMPDEST PUSH2 0x12D4 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x126D JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1272 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH2 0x127C DUP2 PUSH2 0x46CA JUMP JUMPDEST DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x1288 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP6 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x129B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP3 DUP2 MSTORE POP DUP3 DUP2 MSTORE POP POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x12B8 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x12CE JUMPI POP PUSH2 0x12FD JUMP JUMPDEST POP PUSH2 0x12F5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12EC SWAP1 PUSH2 0x9BA7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 ADD PUSH2 0x11BF JUMP JUMPDEST POP PUSH2 0x1308 DUP3 DUP3 PUSH2 0x46FF JUMP JUMPDEST POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH2 0x13A3 PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1353 SWAP2 SWAP1 PUSH2 0x920C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1378 SWAP2 SWAP1 PUSH2 0x920C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0xB770F849 OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP5 PUSH2 0x472D JUMP JUMPDEST SWAP1 SWAP8 SWAP1 SWAP7 POP SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH2 0x13A3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP11 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP11 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x141E SWAP2 SWAP1 PUSH2 0x9EB4 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0xC7DD6C4F OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP5 PUSH2 0x41D1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 DUP1 DUP8 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x1273B0C6 DUP9 DUP9 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1481 SWAP3 SWAP2 SWAP1 PUSH2 0x9239 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1499 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x14AD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x14D1 SWAP2 SWAP1 PUSH2 0x801E JUMP JUMPDEST SWAP3 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND ISZERO PUSH2 0x14EF JUMPI POP PUSH1 0x1 SWAP4 POP DUP7 PUSH2 0x158D JUMP JUMPDEST DUP9 MLOAD PUSH1 0x40 MLOAD PUSH4 0x939D863 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x1273B0C6 SWAP1 PUSH2 0x1520 SWAP1 DUP11 SWAP1 DUP13 SWAP1 PUSH1 0x4 ADD PUSH2 0x9239 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1538 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x154C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1570 SWAP2 SWAP1 PUSH2 0x801E JUMP JUMPDEST SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x1586 JUMPI POP PUSH2 0xFCB JUMP JUMPDEST POP PUSH1 0x0 SWAP4 POP DUP6 JUMPDEST PUSH2 0x15FD PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP12 PUSH1 0x20 ADD MLOAD DUP8 DUP10 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x15D2 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9253 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0xCD85E7B5 OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP8 PUSH2 0x41D1 JUMP JUMPDEST SWAP1 SWAP4 POP SWAP2 POP POP SWAP5 POP SWAP5 POP SWAP5 POP SWAP5 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH2 0x13A3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x164E SWAP2 SWAP1 PUSH2 0x920C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0xD3CDC04D OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP5 PUSH2 0x41D1 JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH2 0x1711 PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 DUP7 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1697 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH1 0x1 DUP9 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x16BD JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 DUP8 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x16E6 SWAP3 SWAP2 SWAP1 PUSH2 0x930C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0x8EFFA9EA OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP5 PUSH2 0x41D1 JUMP JUMPDEST SWAP1 SWAP7 SWAP1 SWAP6 POP SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH1 0x60 PUSH2 0x172C DUP7 DUP7 PUSH2 0x3FD3 JUMP JUMPDEST SWAP3 POP DUP3 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x173D JUMPI PUSH2 0xDB1 JUMP JUMPDEST PUSH1 0x60 DUP6 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x1756 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1780 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP7 MLOAD DUP2 LT ISZERO PUSH2 0x17D5 JUMPI DUP7 PUSH1 0x1 DUP3 DUP10 MLOAD SUB SUB DUP2 MLOAD DUP2 LT PUSH2 0x17A1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x17B5 JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE PUSH1 0x1 ADD PUSH2 0x1786 JUMP JUMPDEST POP PUSH1 0x60 PUSH2 0x17E2 DUP9 DUP4 PUSH2 0x3FD3 JUMP JUMPDEST SWAP1 POP PUSH2 0x18A4 PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP10 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x17FF JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP10 PUSH1 0x1 DUP12 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x1825 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP11 DUP9 DUP12 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1850 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9330 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP11 DUP5 DUP7 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1879 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9330 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0x7A82DCB9 OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP8 PUSH2 0x472D JUMP JUMPDEST SWAP1 SWAP5 POP SWAP3 POP POP POP SWAP4 POP SWAP4 POP SWAP4 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP5 DUP2 ADD MLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP4 DUP5 SWAP3 SWAP1 DUP3 DUP2 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP6 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x18EB JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x60 PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1923 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP8 PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x1A14 JUMPI PUSH1 0x40 MLOAD PUSH4 0x81EFCBDD PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x81EFCBDD SWAP1 PUSH3 0x7A120 SWAP1 PUSH2 0x197C SWAP1 DUP10 SWAP1 PUSH1 0x1 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x9425 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1994 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x19CA JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x19C7 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x879D JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1A04 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x19F8 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x19FD JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP PUSH2 0x1A0F JUMP JUMPDEST SWAP4 POP PUSH2 0xFFC SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x1B2E JUMP JUMPDEST DUP8 PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x1A6A JUMPI PUSH1 0x40 MLOAD PUSH4 0x61E597F9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x61E597F9 SWAP1 PUSH3 0x7A120 SWAP1 PUSH2 0x197C SWAP1 DUP11 SWAP1 PUSH1 0x1 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x9425 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x2B9A6CD PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x5734D9A SWAP1 PUSH3 0x7A120 SWAP1 PUSH2 0x1AAA SWAP1 DUP11 SWAP1 PUSH1 0x1 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP14 SWAP1 DUP5 SWAP1 DUP5 SWAP1 DUP5 SWAP1 PUSH1 0x4 ADD PUSH2 0x9468 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1AC2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x1AF8 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x1AF5 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x879D JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1A04 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x1B26 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1B2B JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP JUMPDEST POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH2 0x13A3 PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1B79 SWAP2 SWAP1 PUSH2 0x920C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1B9E SWAP2 SWAP1 PUSH2 0x920C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0x7280BFFF OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP5 PUSH2 0x472D JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFF9 DUP6 DUP4 DUP6 PUSH2 0x4BE3 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFF9 DUP6 DUP6 DUP5 DUP7 PUSH2 0x4CB7 JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH2 0x13A3 PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1C24 SWAP2 SWAP1 PUSH2 0x920C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1C49 SWAP2 SWAP1 PUSH2 0x920C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0x686B7EE8 OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP5 PUSH2 0x472D JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1C81 DUP5 DUP5 DUP5 PUSH2 0xDBA JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0xF25 JUMPI DUP2 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x1C9B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ PUSH2 0x1D21 JUMPI PUSH2 0x1D08 DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1CB9 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1CCD JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x1CEE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND PUSH2 0x4D17 JUMP JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1D14 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP JUMPDEST PUSH1 0x1 ADD PUSH2 0x1C86 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFF9 DUP6 DUP6 DUP5 DUP7 PUSH2 0x4D41 JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x1D4F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1D89 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x1D76 PUSH2 0x78CD JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x1D6E JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP1 DUP4 EQ PUSH2 0x1E91 JUMPI PUSH1 0x1 DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1DA4 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD SWAP2 ISZERO ISZERO SWAP2 ADD MSTORE DUP4 DUP4 DUP3 DUP2 DUP2 LT PUSH2 0x1DC2 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x1DD4 SWAP2 SWAP1 PUSH2 0xA056 JUMP JUMPDEST ISZERO ISZERO SWAP1 POP PUSH2 0x1DE1 JUMPI PUSH2 0x1E89 JUMP JUMPDEST ADDRESS DUP5 DUP5 DUP4 DUP2 DUP2 LT PUSH2 0x1DEE JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x1E00 SWAP2 SWAP1 PUSH2 0xA056 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1E0E SWAP3 SWAP2 SWAP1 PUSH2 0x91E0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1E4B JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1E50 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1E5D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x1E74 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 ISZERO ISZERO SWAP1 MSTORE JUMPDEST PUSH1 0x1 ADD PUSH2 0x1D8F JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH1 0x60 DUP1 PUSH2 0x1F1A DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xC45A0155 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1EDA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1EEE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1F12 SWAP2 SWAP1 PUSH2 0x801E JUMP JUMPDEST DUP8 PUSH1 0x0 PUSH2 0x4DA5 JUMP JUMPDEST SWAP1 POP DUP5 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x1F33 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1F5D JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP DUP5 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x1F77 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1FA1 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP3 POP DUP5 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x1FBB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1FEF JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x1FDA JUMPI SWAP1 POP JUMPDEST POP SWAP4 POP PUSH1 0x0 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0x219D JUMPI PUSH1 0x60 PUSH2 0x201D DUP9 DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2010 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x523B JUMP JUMPDEST SWAP1 POP PUSH1 0x60 DUP1 PUSH2 0x20B7 PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 DUP13 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x203D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP13 PUSH1 0x1 DUP15 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x2063 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP14 DUP7 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x208C SWAP3 SWAP2 SWAP1 PUSH2 0x9401 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0x59AB9A6C OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP11 PUSH2 0x41D1 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0x218E JUMPI DUP2 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x20D3 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x20E8 JUMPI PUSH2 0x218E JUMP JUMPDEST DUP2 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x20F4 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2108 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD GT PUSH2 0x2186 JUMPI DUP2 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x2121 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2135 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP3 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x214D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2161 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP10 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x217A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP JUMPDEST PUSH1 0x1 ADD PUSH2 0x20BE JUMP JUMPDEST POP POP POP POP DUP1 PUSH1 0x1 ADD SWAP1 POP PUSH2 0x1FF5 JUMP JUMPDEST POP POP SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x21C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x21EC JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 EQ PUSH2 0x2295 JUMPI PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2230 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x2270 JUMPI PUSH2 0x226B DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2255 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x5396 JUMP JUMPDEST PUSH2 0x2273 JUMP JUMPDEST PUSH1 0x12 JUMPDEST PUSH1 0xFF AND DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2282 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x21F2 JUMP JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFF9 DUP6 DUP6 DUP5 DUP7 PUSH2 0x5442 JUMP JUMPDEST POP PUSH1 0x0 SWAP4 PUSH1 0x60 SWAP4 POP DUP4 SWAP3 POP DUP3 SWAP2 POP JUMP JUMPDEST PUSH2 0x1337 PUSH2 0xDEF1 PUSH1 0x90 SHL ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD0AFDCA9 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x22FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x230E JUMPI POP PUSH1 0x1 JUMPDEST POP PUSH1 0x0 GAS SWAP1 POP PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP9 DUP9 DUP9 DUP9 DUP9 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x233A SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x92AB JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x2378 SWAP2 SWAP1 PUSH2 0x91F0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x23B5 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x23BA JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP GAS DUP4 SUB SWAP3 POP PUSH2 0x1337 PUSH2 0xDEF1 PUSH1 0x90 SHL ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xC18C162 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2406 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x2436 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x2433 SWAP2 DUP2 ADD SWAP1 PUSH2 0x8680 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x243F JUMPI PUSH2 0x2444 JUMP JUMPDEST SWAP1 SWAP3 SUB SWAP2 JUMPDEST DUP2 PUSH2 0x2452 JUMPI PUSH2 0x2452 DUP2 PUSH2 0x5502 JUMP JUMPDEST PUSH2 0x246F DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x2469 SWAP2 SWAP1 PUSH2 0x8680 JUMP JUMPDEST DUP5 PUSH2 0x550A JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFF9 DUP5 DUP4 DUP6 PUSH2 0x551B JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x3F DUP4 EXTCODESIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE DUP2 DUP2 MSTORE SWAP1 DUP1 PUSH1 0x0 PUSH1 0x20 DUP5 ADD DUP6 EXTCODECOPY POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH2 0x24B8 PUSH2 0x78E5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP9 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP SWAP1 POP PUSH2 0x2576 PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2526 SWAP2 SWAP1 PUSH2 0x9EB4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x254B SWAP2 SWAP1 PUSH2 0x9EB4 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0xC7DD6C4F OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP6 PUSH2 0x472D JUMP JUMPDEST SWAP1 SWAP9 SWAP1 SWAP8 POP SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH2 0x13A3 PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x25C4 SWAP2 SWAP1 PUSH2 0x9D05 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 DUP11 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP11 PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD DUP11 PUSH1 0x60 ADD MLOAD PUSH1 0xF SIGNEXTEND DUP2 MSTORE PUSH1 0x20 ADD DUP11 PUSH1 0x40 ADD MLOAD PUSH1 0xF SIGNEXTEND DUP2 MSTORE POP PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2632 SWAP2 SWAP1 PUSH2 0x9D05 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0x8D201C22 OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP5 PUSH2 0x472D JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFF9 PUSH20 0xC02AAA39B223FE8D0A0E5C4F27EAD9083C756CC2 DUP7 DUP7 DUP6 DUP8 PUSH2 0x56B4 JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH2 0x13A3 PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x26C0 SWAP2 SWAP1 PUSH2 0x9CE5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x26E5 SWAP2 SWAP1 PUSH2 0x9CE5 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0x9AD732EF OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP5 PUSH2 0x472D JUMP JUMPDEST PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE DUP2 JUMP JUMPDEST PUSH2 0x2730 PUSH2 0x78FC JUMP JUMPDEST PUSH2 0x2738 PUSH2 0x78FC JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 JUMPDEST DUP8 MLOAD DUP2 EQ PUSH2 0x283D JUMPI PUSH2 0x2784 PUSH1 0x20 DUP10 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x2756 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD SUB DUP8 DUP11 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x276D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x59C0 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP11 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x279E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x27B3 SWAP2 SWAP1 PUSH2 0x91F0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x27F0 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x27F5 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0x2833 JUMPI PUSH1 0x0 PUSH2 0x2819 PUSH1 0x20 DUP4 MLOAD SUB DUP4 PUSH2 0x59D0 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP6 DUP2 GT ISZERO PUSH2 0x2831 JUMPI DUP4 DUP9 MSTORE PUSH1 0x20 DUP9 ADD DUP3 SWAP1 MSTORE SWAP5 POP DUP5 JUMPDEST POP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x273D JUMP JUMPDEST POP DUP2 PUSH2 0x2848 JUMPI PUSH2 0x2936 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP7 MLOAD DUP2 EQ PUSH2 0x2934 JUMPI PUSH2 0x287B PUSH1 0x20 DUP9 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x2864 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD SUB DUP5 DUP10 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x276D JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP10 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2895 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x28AA SWAP2 SWAP1 PUSH2 0x91F0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x28E7 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x28EC JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0x292A JUMPI PUSH1 0x0 PUSH2 0x2910 PUSH1 0x20 DUP4 MLOAD SUB DUP4 PUSH2 0x59D0 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP5 DUP2 GT ISZERO PUSH2 0x2928 JUMPI DUP4 DUP8 MSTORE PUSH1 0x20 DUP8 ADD DUP3 SWAP1 MSTORE SWAP4 POP DUP4 JUMPDEST POP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x284B JUMP JUMPDEST POP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 POP SWAP4 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFF9 DUP5 DUP4 DUP6 PUSH2 0x59DC JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH2 0x13A3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x298C SWAP2 SWAP1 PUSH2 0x920C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0x7280BFFF OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP5 PUSH2 0x41D1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFF9 DUP6 DUP6 DUP5 DUP7 PUSH2 0x5B2D JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 MLOAD PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x29D5 JUMPI INVALID JUMPDEST EQ DUP1 PUSH2 0x29ED JUMPI POP PUSH1 0x1 DUP4 MLOAD PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x29EB JUMPI INVALID JUMPDEST EQ JUMPDEST DUP1 PUSH2 0x2A03 JUMPI POP PUSH1 0x40 DUP5 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND ISZERO JUMPDEST DUP1 PUSH2 0x2A19 JUMPI POP PUSH1 0x60 DUP5 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND ISZERO JUMPDEST ISZERO PUSH2 0x2A26 JUMPI POP PUSH1 0x0 PUSH2 0x2B05 JUMP JUMPDEST PUSH2 0x2A2E PUSH2 0x7916 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x1FB09795 DUP9 DUP9 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2A5F SWAP3 SWAP2 SWAP1 PUSH2 0x9E60 JUMP JUMPDEST PUSH1 0xA0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2A77 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2A8B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2AAF SWAP2 SWAP1 PUSH2 0x8E9C JUMP JUMPDEST SWAP2 SWAP5 POP SWAP3 POP SWAP1 POP PUSH1 0x1 DUP4 PUSH1 0x20 ADD MLOAD PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x2AC8 JUMPI INVALID JUMPDEST EQ ISZERO DUP1 PUSH2 0x2AD3 JUMPI POP DUP1 ISZERO JUMPDEST DUP1 PUSH2 0x2AE6 JUMPI POP DUP7 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO JUMPDEST ISZERO PUSH2 0x2AF7 JUMPI PUSH1 0x0 SWAP4 POP POP POP POP PUSH2 0x2B05 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND SWAP2 POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP1 PUSH1 0x60 PUSH2 0x2B1E DUP9 DUP9 DUP9 PUSH2 0x5C81 JUMP JUMPDEST SWAP4 POP DUP4 PUSH2 0x2B2A JUMPI PUSH2 0xFCB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x276FDAD9 PUSH1 0xE1 SHL DUP2 MSTORE ADDRESS SWAP1 PUSH4 0x4EDFB5B2 SWAP1 PUSH2 0x2B53 SWAP1 DUP12 SWAP1 DUP9 SWAP1 DUP13 SWAP1 DUP13 SWAP1 PUSH1 0x4 ADD PUSH2 0x9E27 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2B6B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2B7F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x2BA7 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x879D JUMP JUMPDEST DUP9 PUSH1 0x80 ADD DUP2 SWAP1 MSTORE POP DUP8 PUSH1 0x80 ADD MLOAD SWAP3 POP PUSH2 0xFC5 PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP11 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2BF3 SWAP2 SWAP1 PUSH2 0x9E14 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP11 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2C18 SWAP2 SWAP1 PUSH2 0x9E14 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0xA095A036 OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP7 PUSH2 0x472D JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2C4D PUSH2 0x7938 JUMP JUMPDEST DUP4 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x2C61 SWAP2 SWAP1 PUSH2 0x8C02 JUMP JUMPDEST SWAP1 POP PUSH2 0x2CB2 PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE DUP3 PUSH1 0x60 ADD MLOAD DUP9 DUP9 DUP8 DUP7 PUSH1 0x40 ADD MLOAD DUP8 PUSH1 0x80 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2C9E SWAP3 SWAP2 SWAP1 PUSH2 0x9401 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH2 0x5DF1 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH1 0x60 PUSH2 0x2576 PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP10 DUP5 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2D00 SWAP3 SWAP2 SWAP1 PUSH2 0x9401 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0xD31B0A8A OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP6 PUSH2 0x41D1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 DUP1 PUSH2 0x2D3D DUP10 DUP10 DUP10 DUP10 PUSH2 0x5FF3 JUMP JUMPDEST SWAP5 POP SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x2D54 JUMPI PUSH2 0x2DC4 JUMP JUMPDEST PUSH2 0x2DBE PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP8 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2D93 SWAP3 SWAP2 SWAP1 PUSH2 0x93E6 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0xF573C161 OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP7 PUSH2 0x41D1 JUMP JUMPDEST SWAP1 SWAP3 POP SWAP1 POP JUMPDEST SWAP6 POP SWAP6 POP SWAP6 POP SWAP6 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH2 0x13A3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2E10 SWAP2 SWAP1 PUSH2 0x920C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0x5C71CBE7 OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP5 PUSH2 0x41D1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFF9 PUSH20 0xC02AAA39B223FE8D0A0E5C4F27EAD9083C756CC2 DUP6 DUP5 DUP7 PUSH2 0x6148 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP1 PUSH2 0x2E6D DUP8 DUP8 DUP8 PUSH2 0x6431 JUMP JUMPDEST SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x2E82 JUMPI PUSH2 0x2EF0 JUMP JUMPDEST PUSH2 0x2EEA PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP6 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2EBF SWAP2 SWAP1 PUSH2 0x920C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0x15DE17DE OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP6 PUSH2 0x41D1 JUMP JUMPDEST SWAP1 SWAP3 POP SWAP1 POP JUMPDEST SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFF9 PUSH20 0xC02AAA39B223FE8D0A0E5C4F27EAD9083C756CC2 DUP7 DUP7 DUP6 DUP8 PUSH2 0x6518 JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH2 0x13A3 PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2F5D SWAP2 SWAP1 PUSH2 0x920C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2F82 SWAP2 SWAP1 PUSH2 0x920C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0xD3CDC04D OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP5 PUSH2 0x472D JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH2 0x13A3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2FED SWAP2 SWAP1 PUSH2 0x9CE5 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0x9AD732EF OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP5 PUSH2 0x41D1 JUMP JUMPDEST PUSH1 0x60 DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x3031 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x305B JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP4 MLOAD DUP2 EQ PUSH2 0x1E91 JUMPI PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x309F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x30E9 JUMPI PUSH2 0x30E4 DUP4 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x30C5 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x679A SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x30F5 JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND BALANCE JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3101 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x3061 JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH2 0x13A3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x3154 SWAP2 SWAP1 PUSH2 0x9D05 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0x8D201C22 OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP5 PUSH2 0x41D1 JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH1 0x60 PUSH2 0x2576 PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP10 DUP5 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x31C3 SWAP3 SWAP2 SWAP1 PUSH2 0x9401 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP10 DUP5 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x31EA SWAP3 SWAP2 SWAP1 PUSH2 0x9401 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0xD31B0A8A OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP6 PUSH2 0x472D JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFF9 DUP6 DUP6 DUP5 DUP7 PUSH2 0x686D JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH2 0x13A3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x3263 SWAP2 SWAP1 PUSH2 0x920C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0xB770F849 OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP5 PUSH2 0x41D1 JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH1 0x60 DUP5 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x32AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x32D4 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP6 MLOAD DUP2 LT ISZERO PUSH2 0x3329 JUMPI DUP6 PUSH1 0x1 DUP3 DUP9 MLOAD SUB SUB DUP2 MLOAD DUP2 LT PUSH2 0x32F5 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3309 JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE PUSH1 0x1 ADD PUSH2 0x32DA JUMP JUMPDEST POP PUSH2 0x13A3 PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP8 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x3345 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH1 0x1 DUP10 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x336B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x3394 SWAP3 SWAP2 SWAP1 PUSH2 0x930C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP9 DUP5 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x33BB SWAP3 SWAP2 SWAP1 PUSH2 0x930C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0x8EFFA9EA OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP6 PUSH2 0x472D JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH2 0x13A3 PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x3426 SWAP2 SWAP1 PUSH2 0x920C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x344B SWAP2 SWAP1 PUSH2 0x920C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0x5C71CBE7 OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP5 PUSH2 0x472D JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP1 PUSH1 0x60 PUSH2 0x3488 DUP9 DUP9 DUP9 PUSH2 0x5C81 JUMP JUMPDEST SWAP4 POP DUP4 PUSH2 0x3494 JUMPI PUSH2 0xFCB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x276FDAD9 PUSH1 0xE1 SHL DUP2 MSTORE ADDRESS SWAP1 PUSH4 0x4EDFB5B2 SWAP1 PUSH2 0x34BD SWAP1 DUP12 SWAP1 DUP9 SWAP1 DUP13 SWAP1 DUP13 SWAP1 PUSH1 0x4 ADD PUSH2 0x9E27 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x34D5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x34E9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x3511 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x879D JUMP JUMPDEST DUP9 PUSH1 0x80 ADD DUP2 SWAP1 MSTORE POP DUP8 PUSH1 0x80 ADD MLOAD SWAP3 POP PUSH2 0xFC5 PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP11 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x355D SWAP2 SWAP1 PUSH2 0x9E14 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0xA095A036 OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP7 PUSH2 0x41D1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFF9 DUP6 DUP4 DUP6 PUSH2 0x6BF1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFF9 DUP6 DUP6 DUP5 DUP7 PUSH2 0x6DDF JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFF9 DUP6 DUP6 DUP5 DUP7 PUSH2 0x6EA3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 DUP1 PUSH2 0x35C3 DUP10 DUP10 DUP10 DUP10 PUSH2 0x5FF3 JUMP JUMPDEST SWAP5 POP SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x35DA JUMPI PUSH2 0x2DC4 JUMP JUMPDEST PUSH2 0x2DBE PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP8 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x3619 SWAP3 SWAP2 SWAP1 PUSH2 0x93E6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP8 ISZERO PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x3641 SWAP3 SWAP2 SWAP1 PUSH2 0x93E6 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0xF573C161 OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP7 PUSH2 0x472D JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 DUP1 DUP8 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x1273B0C6 DUP9 DUP9 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x36A4 SWAP3 SWAP2 SWAP1 PUSH2 0x9239 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x36BC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x36D0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x36F4 SWAP2 SWAP1 PUSH2 0x801E JUMP JUMPDEST SWAP3 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND ISZERO PUSH2 0x3712 JUMPI POP PUSH1 0x1 SWAP4 POP DUP7 PUSH2 0x37B0 JUMP JUMPDEST DUP9 MLOAD PUSH1 0x40 MLOAD PUSH4 0x939D863 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x1273B0C6 SWAP1 PUSH2 0x3743 SWAP1 DUP11 SWAP1 DUP13 SWAP1 PUSH1 0x4 ADD PUSH2 0x9239 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x375B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x376F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3793 SWAP2 SWAP1 PUSH2 0x801E JUMP JUMPDEST SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x37A9 JUMPI POP PUSH2 0xFCB JUMP JUMPDEST POP PUSH1 0x0 SWAP4 POP DUP6 JUMPDEST PUSH2 0x15FD PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP12 PUSH1 0x20 ADD MLOAD DUP8 DUP10 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x37F5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9253 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP12 PUSH1 0x20 ADD MLOAD DUP8 DUP10 ISZERO PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x3823 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9253 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0xCD85E7B5 OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP8 PUSH2 0x472D JUMP JUMPDEST PUSH1 0x60 DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x3867 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x3891 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 EQ PUSH2 0xF25 JUMPI PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x38D5 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x3921 JUMPI PUSH2 0x391C DUP5 DUP5 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x38FC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x6F05 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x3924 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3930 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x3897 JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH2 0x13A3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x3983 SWAP2 SWAP1 PUSH2 0x920C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0x686B7EE8 OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP5 PUSH2 0x41D1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFF9 DUP6 DUP4 DUP6 PUSH2 0x6FD1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP1 PUSH2 0x39CB DUP8 DUP8 DUP8 PUSH2 0x6431 JUMP JUMPDEST SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x39E0 JUMPI PUSH2 0x2EF0 JUMP JUMPDEST PUSH2 0x2EEA PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP6 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x3A1D SWAP2 SWAP1 PUSH2 0x920C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP6 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x3A42 SWAP2 SWAP1 PUSH2 0x920C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0x15DE17DE OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP6 PUSH2 0x472D JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH1 0x60 DUP1 PUSH2 0x3AAF DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xC45A0155 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1EDA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP PUSH1 0x60 PUSH2 0x3ABC DUP8 PUSH2 0x70B7 JUMP JUMPDEST SWAP1 POP DUP6 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x3AD5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x3AFF JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP3 POP DUP6 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x3B19 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x3B43 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP4 POP DUP6 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x3B5D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x3B91 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x3B7C JUMPI SWAP1 POP JUMPDEST POP SWAP5 POP PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x3DA6 JUMPI PUSH1 0x60 DUP1 PUSH2 0x3C92 PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP13 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x3BBE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP13 PUSH1 0x1 DUP15 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x3BE4 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP14 PUSH2 0x3C0B DUP15 DUP11 DUP10 DUP2 MLOAD DUP2 LT PUSH2 0x2010 JUMPI INVALID JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x3C1C SWAP3 SWAP2 SWAP1 PUSH2 0x9401 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP14 PUSH2 0x3C56 DUP9 PUSH2 0x3C51 DUP12 DUP11 DUP2 MLOAD DUP2 LT PUSH2 0x3C44 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x714F JUMP JUMPDEST PUSH2 0x523B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x3C67 SWAP3 SWAP2 SWAP1 PUSH2 0x9401 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0x59AB9A6C OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP11 PUSH2 0x472D JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0x3D98 JUMPI DUP2 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x3CAE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x3CC3 JUMPI PUSH2 0x3D98 JUMP JUMPDEST DUP7 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x3CCF JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ DUP1 PUSH2 0x3D0B JUMPI POP DUP2 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x3CEC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3D00 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD LT ISZERO JUMPDEST ISZERO PUSH2 0x3D90 JUMPI DUP2 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x3D1C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3D30 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP3 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x3D48 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3D5C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP PUSH2 0x3D78 DUP12 DUP8 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x2010 JUMPI INVALID JUMPDEST DUP10 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3D84 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP JUMPDEST PUSH1 0x1 ADD PUSH2 0x3C99 JUMP JUMPDEST POP POP POP DUP1 PUSH1 0x1 ADD SWAP1 POP PUSH2 0x3B97 JUMP JUMPDEST POP POP POP SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x3DBB PUSH2 0x78FC JUMP JUMPDEST PUSH2 0x3DC3 PUSH2 0x78FC JUMP JUMPDEST PUSH1 0x0 NOT DUP1 PUSH1 0x0 JUMPDEST DUP7 MLOAD DUP2 EQ PUSH2 0x3EBF JUMPI PUSH2 0x3DFA PUSH1 0x20 DUP9 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x3DE3 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD SUB DUP8 DUP10 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x276D JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP10 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x3E14 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x3E29 SWAP2 SWAP1 PUSH2 0x91F0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x3E66 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x3E6B JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0x3EB5 JUMPI PUSH1 0x0 PUSH2 0x3E8F PUSH1 0x20 DUP4 MLOAD SUB DUP4 PUSH2 0x59D0 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 GT DUP1 ISZERO PUSH2 0x3EA0 JUMPI POP DUP5 DUP2 LT JUMPDEST ISZERO PUSH2 0x3EB3 JUMPI DUP4 DUP8 MSTORE PUSH1 0x20 DUP8 ADD DUP3 SWAP1 MSTORE SWAP4 POP DUP4 JUMPDEST POP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x3DCA JUMP JUMPDEST POP PUSH1 0x0 NOT DUP2 EQ ISZERO PUSH2 0x3ED0 JUMPI POP PUSH2 0xDB1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP8 MLOAD DUP2 EQ PUSH2 0x3FC8 JUMPI PUSH2 0x3F03 PUSH1 0x20 DUP10 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x3EEC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD SUB DUP4 DUP11 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x276D JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP11 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x3F1D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x3F32 SWAP2 SWAP1 PUSH2 0x91F0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x3F6F JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x3F74 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0x3FBE JUMPI PUSH1 0x0 PUSH2 0x3F98 PUSH1 0x20 DUP4 MLOAD SUB DUP4 PUSH2 0x59D0 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 GT DUP1 ISZERO PUSH2 0x3FA9 JUMPI POP DUP6 DUP2 LT JUMPDEST ISZERO PUSH2 0x3FBC JUMPI DUP4 DUP9 MSTORE PUSH1 0x20 DUP9 ADD DUP3 SWAP1 MSTORE SWAP5 POP DUP5 JUMPDEST POP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x3ED3 JUMP JUMPDEST POP POP SWAP4 POP SWAP4 POP SWAP4 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP3 MLOAD SUB PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x3FEF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x4019 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xC45A0155 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4057 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x406B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x408F SWAP2 SWAP1 PUSH2 0x801E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x41C8 JUMPI DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x65DA9289 PUSH3 0x249F0 DUP7 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x40BC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP6 PUSH1 0x1 ADD DUP2 MLOAD DUP2 LT PUSH2 0x40D3 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x40FB SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x92E8 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4113 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x4144 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x4141 SWAP2 DUP2 ADD SWAP1 PUSH2 0x801E JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x4192 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x4172 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x4177 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE SWAP3 POP PUSH2 0x41CB SWAP2 POP POP JUMP JUMPDEST DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x419F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x4094 JUMP JUMPDEST POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 DUP2 ADD MLOAD DUP4 MLOAD PUSH1 0x20 DUP6 ADD MLOAD PUSH1 0x40 DUP1 DUP8 ADD MLOAD SWAP1 MLOAD PUSH4 0xFA7F81F PUSH1 0xE1 SHL DUP2 MSTORE DUP6 SWAP5 ADDRESS SWAP5 PUSH4 0x1F4FF03E SWAP5 PUSH2 0x421D SWAP5 PUSH1 0xA0 SWAP4 SWAP1 SWAP4 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND SWAP4 SWAP2 SWAP3 SWAP1 SWAP2 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x9716 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4237 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x4248 JUMPI POP PUSH1 0x1 JUMPDEST PUSH2 0x12D4 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x4276 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x427B JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x4290 SWAP2 SWAP1 PUSH2 0x8620 JUMP JUMPDEST SWAP4 POP SWAP2 POP PUSH2 0x429B SWAP1 POP JUMP JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP6 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x21F8A721 DUP8 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x9232494E PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x42F6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x430A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x432E SWAP2 SWAP1 PUSH2 0x8680 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x434A SWAP2 SWAP1 PUSH2 0x96F4 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4362 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4376 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x439A SWAP2 SWAP1 PUSH2 0x801E JUMP JUMPDEST SWAP2 POP DUP6 PUSH1 0x20 ADD MLOAD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x43AF JUMPI PUSH2 0x44CB JUMP JUMPDEST PUSH1 0x0 DUP1 JUMPDEST DUP8 PUSH1 0x20 ADD MLOAD MLOAD DUP2 LT ISZERO PUSH2 0x44C8 JUMPI PUSH1 0x2 DUP9 PUSH1 0x20 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x43D2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD LT ISZERO PUSH2 0x43E6 JUMPI PUSH2 0x44C0 JUMP JUMPDEST DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x7F9C0ECD PUSH3 0x493E0 DUP11 PUSH1 0x20 ADD MLOAD DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x4409 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 PUSH1 0x1 DUP11 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x4421 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4446 SWAP3 SWAP2 SWAP1 PUSH2 0x9529 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x445E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x448F JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x448C SWAP2 DUP2 ADD SWAP1 PUSH2 0x8680 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x4498 JUMPI PUSH2 0x44C0 JUMP JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x44BE JUMPI DUP1 SWAP3 POP DUP9 PUSH1 0x20 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x44B3 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP4 POP JUMPDEST POP JUMPDEST PUSH1 0x1 ADD PUSH2 0x43B3 JUMP JUMPDEST POP POP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x44EB SWAP2 SWAP1 PUSH2 0x801E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x456F JUMPI PUSH1 0x40 MLOAD PUSH4 0x2E1A7D4D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND SWAP1 PUSH4 0x2E1A7D4D SWAP1 PUSH2 0x4535 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x96F4 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x454F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x4563 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP DUP5 SWAP1 POP PUSH2 0x4583 JUMP JUMPDEST PUSH2 0x4583 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND DUP4 DUP8 PUSH2 0x71E7 JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD5BCB9B5 DUP3 DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x45B2 JUMPI DUP10 PUSH2 0x45B5 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP12 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x45D4 JUMPI DUP10 PUSH2 0x45D7 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP10 PUSH1 0x1 PUSH1 0x0 PUSH1 0x40 MLOAD DUP8 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x45FC SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9828 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4615 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x4629 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x464E SWAP2 SWAP1 PUSH2 0x8680 JUMP JUMPDEST SWAP3 POP DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x46BF JUMPI DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD0E30DB0 DUP5 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x46A5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x46B9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP JUMPDEST POP POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 MLOAD PUSH1 0x40 EQ PUSH2 0x46E1 JUMPI POP PUSH1 0x0 SWAP1 POP DUP1 PUSH2 0x46FA JUMP JUMPDEST DUP3 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x46F5 SWAP2 SWAP1 PUSH2 0x8F3B JUMP JUMPDEST SWAP2 POP SWAP2 POP JUMPDEST SWAP2 POP SWAP2 JUMP JUMPDEST PUSH1 0x60 DUP3 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x4714 SWAP3 SWAP2 SWAP1 PUSH2 0x9698 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH1 0x60 DUP1 DUP3 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x473F JUMPI PUSH2 0x429B JUMP JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x4756 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x4780 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x479A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x47C4 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE SWAP2 SWAP4 POP PUSH1 0x60 SWAP2 SWAP1 PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP4 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x47F8 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x480D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP PUSH2 0x4821 PUSH2 0x7982 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP1 DUP3 ADD DUP4 MSTORE DUP8 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP4 MSTORE PUSH1 0x20 DUP1 DUP11 ADD MLOAD SWAP1 SWAP2 AND SWAP1 DUP4 ADD MSTORE DUP8 DUP4 ADD MLOAD DUP3 DUP5 ADD MSTORE DUP8 ADD MLOAD PUSH5 0x100000000 PUSH1 0x1 PUSH1 0xC0 SHL SUB SWAP1 DUP4 SHR SWAP1 DUP2 AND PUSH4 0xFFFFFFFF SWAP1 SWAP2 AND OR SWAP1 SWAP2 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH2 0x487F PUSH2 0x7982 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 DUP9 PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x60 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x80 ADD MLOAD DUP1 PUSH1 0x60 SHR SWAP1 PUSH1 0x40 SHR PUSH4 0xFFFFFFFF AND PUSH4 0xFFFFFFFF AND SWAP1 PUSH1 0x20 SHL OR PUSH1 0x40 SHL DUP2 MSTORE POP SWAP1 POP PUSH2 0x48EA DUP2 DUP5 PUSH2 0x41D1 JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP5 POP ISZERO SWAP1 POP DUP1 PUSH2 0x4911 JUMPI POP DUP3 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x4905 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ JUMPDEST ISZERO PUSH2 0x491E JUMPI POP POP POP PUSH2 0x429B JUMP JUMPDEST PUSH1 0x60 PUSH2 0x492A DUP4 DUP6 PUSH2 0x41D1 JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP3 POP ISZERO SWAP1 POP DUP1 PUSH2 0x4951 JUMPI POP DUP1 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x4945 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ JUMPDEST ISZERO PUSH2 0x495F JUMPI POP POP POP POP PUSH2 0x429B JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP8 MLOAD DUP2 LT ISZERO PUSH2 0x4BD7 JUMPI PUSH1 0x60 PUSH1 0x0 JUMPDEST PUSH1 0x3 DUP2 LT ISZERO PUSH2 0x4B37 JUMPI PUSH2 0x49BF DUP11 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x4988 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x499D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP10 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x49B2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x727A JUMP JUMPDEST DUP8 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x49CC JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE DUP7 MLOAD ISZERO DUP1 PUSH2 0x49F9 JUMPI POP DUP7 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x49ED JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ JUMPDEST ISZERO PUSH2 0x4A03 JUMPI PUSH2 0x4B37 JUMP JUMPDEST PUSH2 0x4A1C PUSH1 0x5 PUSH2 0x2710 ADD PUSH2 0x2710 DUP10 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x49B2 JUMPI INVALID JUMPDEST DUP8 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x4A29 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE DUP7 MLOAD ISZERO DUP1 PUSH2 0x4A56 JUMPI POP DUP7 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x4A4A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ JUMPDEST ISZERO PUSH2 0x4A60 JUMPI PUSH2 0x4B37 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x4A6C DUP8 DUP10 PUSH2 0x41D1 JUMP JUMPDEST DUP1 MLOAD SWAP2 SWAP5 POP SWAP2 POP ISZERO DUP1 PUSH2 0x4A93 JUMPI POP DUP1 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x4A87 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ JUMPDEST ISZERO PUSH2 0x4A9E JUMPI POP PUSH2 0x4B37 JUMP JUMPDEST DUP1 SWAP5 POP DUP11 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x4AAD JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x4AC2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD LT PUSH2 0x4B2E JUMPI PUSH1 0x0 DUP12 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x4ADD JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x2710 DUP14 DUP8 DUP2 MLOAD DUP2 LT PUSH2 0x4AF4 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x4B09 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SUB MUL DUP2 PUSH2 0x4B1A JUMPI INVALID JUMPDEST DIV SWAP1 POP PUSH1 0x5 DUP2 GT PUSH2 0x4B2C JUMPI POP POP PUSH2 0x4B37 JUMP JUMPDEST POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x4970 JUMP JUMPDEST POP PUSH1 0x0 DUP2 MLOAD GT DUP1 ISZERO PUSH2 0x4B4A JUMPI POP PUSH1 0x0 DUP4 MLOAD GT JUMPDEST ISZERO PUSH2 0x4BCE JUMPI DUP1 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x4B5C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x4B70 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP PUSH2 0x4BB5 DUP10 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x4B8B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x4BA0 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x49B2 JUMPI INVALID JUMPDEST DUP8 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x4BC1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x4962 JUMP JUMPDEST POP POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 DUP4 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x4BFC SWAP2 SWAP1 PUSH2 0x8882 JUMP JUMPDEST SWAP1 SWAP3 POP SWAP1 POP PUSH2 0x4C15 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP4 DUP8 PUSH2 0x71E7 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xA0 DUP2 ADD DUP3 MSTORE DUP3 DUP2 MSTORE ADDRESS PUSH1 0x20 DUP3 ADD MSTORE TIMESTAMP DUP2 DUP4 ADD MSTORE PUSH1 0x60 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x80 DUP3 ADD MSTORE SWAP1 MLOAD PUSH4 0xC04B8D59 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP2 PUSH4 0xC04B8D59 SWAP2 PUSH2 0x4C65 SWAP2 SWAP1 PUSH1 0x4 ADD PUSH2 0x9D4D JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4C7F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x4C93 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2CB2 SWAP2 SWAP1 PUSH2 0x8680 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x4CCE SWAP2 SWAP1 PUSH2 0x801E JUMP JUMPDEST SWAP1 POP PUSH2 0x4CE4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP3 DUP7 PUSH2 0x71E7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x310DA7B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH4 0x621B4F6 SWAP1 PUSH2 0x4C65 SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP11 SWAP1 PUSH1 0x1 SWAP1 PUSH1 0x4 ADD PUSH2 0x98DB JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFFC DUP4 PUSH2 0x4D3B PUSH2 0x4D2B DUP3 PUSH1 0x1 PUSH2 0x72D2 JUMP JUMPDEST PUSH2 0x4D35 DUP9 DUP8 PUSH2 0x72F6 JUMP JUMPDEST SWAP1 PUSH2 0x7327 JUMP JUMPDEST SWAP1 PUSH2 0x7343 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x4D58 SWAP2 SWAP1 PUSH2 0x801E JUMP JUMPDEST SWAP1 POP PUSH2 0x4D6E PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP3 DUP7 PUSH2 0x71E7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x164B079 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH4 0xB2583C8 SWAP1 PUSH2 0x4C65 SWAP1 DUP10 SWAP1 DUP10 SWAP1 DUP10 SWAP1 PUSH1 0x1 SWAP1 TIMESTAMP DUP3 ADD SWAP1 PUSH1 0x4 ADD PUSH2 0x9858 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x2 DUP3 DUP5 MLOAD SUB LT ISZERO PUSH2 0x4DCB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12EC SWAP1 PUSH2 0x99AC JUMP JUMPDEST PUSH2 0x4DD3 PUSH2 0x79AA JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP1 DUP3 ADD DUP4 MSTORE PUSH2 0x1F4 DUP3 MSTORE PUSH2 0xBB8 PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x2710 DUP3 DUP5 ADD MSTORE DUP3 MLOAD PUSH1 0x3 DUP1 DUP3 MSTORE PUSH1 0x80 DUP3 ADD SWAP1 SWAP5 MSTORE SWAP2 SWAP3 SWAP1 SWAP2 SWAP1 DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP PUSH1 0x0 DUP1 DUP7 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x4E27 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 DUP8 DUP8 PUSH1 0x1 ADD DUP2 MLOAD DUP2 LT PUSH2 0x4E42 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 JUMPDEST PUSH1 0x3 DUP2 LT ISZERO PUSH2 0x4F37 JUMPI PUSH1 0x0 DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x1698EE82 DUP6 DUP6 DUP11 DUP7 PUSH1 0x3 DUP2 LT PUSH2 0x4E77 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4E9A SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9800 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4EB2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4EC6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4EEA SWAP2 SWAP1 PUSH2 0x801E JUMP JUMPDEST SWAP1 POP PUSH2 0x4EF5 DUP2 PUSH2 0x736D JUMP JUMPDEST ISZERO PUSH2 0x4F2E JUMPI DUP1 DUP7 DUP7 DUP1 PUSH1 0x1 ADD SWAP8 POP DUP2 MLOAD DUP2 LT PUSH2 0x4F0D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x4E4F JUMP JUMPDEST POP POP POP DUP1 PUSH2 0x4F47 JUMPI POP POP POP PUSH2 0x2B05 JUMP JUMPDEST DUP6 MLOAD DUP6 PUSH1 0x2 ADD EQ ISZERO PUSH2 0x503D JUMPI DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x4F69 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x4F9D JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x4F88 JUMPI SWAP1 POP JUMPDEST POP SWAP4 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x5034 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE SWAP1 PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x4FD5 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP3 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x4FEC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x5000 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x5014 JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE PUSH1 0x1 ADD PUSH2 0x4FA3 JUMP JUMPDEST POP POP POP POP PUSH2 0x2B05 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x504D DUP9 DUP9 DUP9 PUSH1 0x1 ADD PUSH2 0x4DA5 JUMP JUMPDEST SWAP1 POP DUP1 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x5062 JUMPI POP POP POP POP PUSH2 0x2B05 JUMP JUMPDEST DUP1 MLOAD DUP3 MUL PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x507B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x50AF JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x509A JUMPI SWAP1 POP JUMPDEST POP SWAP5 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x522F JUMPI PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x5226 JUMPI DUP3 MLOAD DUP3 DUP2 MUL DUP3 ADD SWAP1 DUP5 SWAP1 DUP4 SWAP1 DUP2 LT PUSH2 0x50DD JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD PUSH1 0x1 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x50FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x5128 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP DUP9 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x5135 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x514C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x5160 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x5174 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP PUSH1 0x0 JUMPDEST DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x51A3 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD DUP2 LT ISZERO PUSH2 0x521C JUMPI DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x51BF JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x51D2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP10 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x51E6 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 PUSH1 0x1 ADD DUP2 MLOAD DUP2 LT PUSH2 0x51FC JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE PUSH1 0x1 ADD PUSH2 0x5197 JUMP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x50C0 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x50B5 JUMP JUMPDEST POP POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x2 DUP4 MLOAD LT ISZERO DUP1 ISZERO PUSH2 0x5253 JUMPI POP DUP2 MLOAD PUSH1 0x1 ADD DUP4 MLOAD EQ JUMPDEST PUSH2 0x526F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12EC SWAP1 PUSH2 0x9AD0 JUMP JUMPDEST DUP2 MLOAD PUSH1 0x3 MUL DUP4 MLOAD PUSH1 0x14 MUL ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x528F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x52BA JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x20 DUP2 ADD PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x41C8 JUMPI DUP1 ISZERO PUSH2 0x5369 JUMPI PUSH1 0x0 DUP5 PUSH1 0x1 DUP4 SUB DUP2 MLOAD DUP2 LT PUSH2 0x52E4 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDDCA3F43 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5324 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5338 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x535C SWAP2 SWAP1 PUSH2 0x8F18 JUMP JUMPDEST PUSH1 0xE8 SHL DUP4 MSTORE POP PUSH1 0x3 SWAP1 SWAP2 ADD SWAP1 JUMPDEST PUSH1 0x0 DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x5377 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD PUSH1 0x60 SHL DUP4 MSTORE POP PUSH1 0x14 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x52C4 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x12 SWAP1 POP PUSH1 0x0 PUSH1 0x60 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x4 DUP2 MSTORE PUSH1 0x20 ADD PUSH4 0x313CE567 PUSH1 0xE0 SHL DUP2 MSTORE POP PUSH1 0x40 MLOAD PUSH2 0x53D4 SWAP2 SWAP1 PUSH2 0x91F0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x540F JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x5414 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x5428 JUMPI POP PUSH1 0x20 DUP2 MLOAD LT ISZERO JUMPDEST ISZERO PUSH2 0x543B JUMPI PUSH2 0x5438 DUP2 PUSH1 0x0 PUSH2 0x59D0 JUMP JUMPDEST SWAP3 POP JUMPDEST POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x5459 SWAP2 SWAP1 PUSH2 0x801E JUMP JUMPDEST SWAP1 POP PUSH2 0x546F PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP3 DUP7 PUSH2 0x71E7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x8201AA3F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH4 0x8201AA3F SWAP1 PUSH2 0x54A6 SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP11 SWAP1 PUSH1 0x1 SWAP1 PUSH1 0x0 NOT SWAP1 PUSH1 0x4 ADD PUSH2 0x9905 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x54BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x54D3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x54F7 SWAP2 SWAP1 PUSH2 0x8F3B JUMP JUMPDEST POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH1 0x40 MLOAD DUP3 DUP2 MSTORE DUP2 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 DUP1 DUP5 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x5535 SWAP2 SWAP1 PUSH2 0x803A JUMP JUMPDEST DUP2 MLOAD SWAP3 SWAP6 POP SWAP1 SWAP4 POP SWAP2 POP PUSH1 0x1 GT ISZERO PUSH2 0x555F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12EC SWAP1 PUSH2 0x9C39 JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 ADD DUP2 MLOAD EQ PUSH2 0x5583 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12EC SWAP1 PUSH2 0x9B64 JUMP JUMPDEST DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 DUP4 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x559D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x55CB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12EC SWAP1 PUSH2 0x9A73 JUMP JUMPDEST PUSH2 0x55FD DUP4 DUP8 DUP4 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x55DD JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x71E7 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xCEB757D5 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x60 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0xCEB757D5 SWAP1 PUSH2 0x5637 SWAP1 DUP11 SWAP1 PUSH1 0x1 SWAP1 DUP9 SWAP1 DUP9 SWAP1 ADDRESS SWAP1 TIMESTAMP SWAP1 PUSH1 0x4 ADD PUSH2 0x9F69 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5651 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x5665 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x568D SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x85EE JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 DUP3 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x569F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP5 POP POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x56BE PUSH2 0x79C8 JUMP JUMPDEST DUP3 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x56D2 SWAP2 SWAP1 PUSH2 0x8A90 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x5756 JUMPI POP PUSH1 0x40 MLOAD PUSH4 0x2E1A7D4D PUSH1 0xE0 SHL DUP2 MSTORE DUP5 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND SWAP1 PUSH4 0x2E1A7D4D SWAP1 PUSH2 0x571F SWAP1 DUP5 SWAP1 PUSH1 0x4 ADD PUSH2 0x96F4 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5739 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x574D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH2 0x576D JUMP JUMPDEST DUP2 MLOAD PUSH2 0x576D SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND SWAP1 DUP8 PUSH2 0x71E7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH2 0x579C SWAP1 ADDRESS SWAP1 PUSH1 0x4 ADD PUSH2 0x920C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x57B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x57C8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x57EC SWAP2 SWAP1 PUSH2 0x8680 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x60 DUP5 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 DUP7 PUSH1 0x20 ADD MLOAD DUP8 PUSH1 0x40 ADD MLOAD DUP9 PUSH1 0x60 ADD MLOAD DUP13 PUSH1 0x1 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x5826 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9968 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x5864 SWAP2 SWAP1 PUSH2 0x91F0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x58A1 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x58A6 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH2 0x58B9 JUMPI PUSH2 0x58B9 DUP2 PUSH2 0x5502 JUMP JUMPDEST DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x592B JUMPI SELFBALANCE SWAP6 POP DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD0E30DB0 DUP8 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5911 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x5925 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP JUMPDEST PUSH2 0x59B1 DUP4 DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x70A08231 ADDRESS PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x595B SWAP2 SWAP1 PUSH2 0x920C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5973 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5987 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x59AB SWAP2 SWAP1 PUSH2 0x8680 JUMP JUMPDEST SWAP1 PUSH2 0x72D2 JUMP JUMPDEST SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x59CB DUP4 DUP4 DUP4 PUSH2 0x7579 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2B05 DUP4 DUP4 PUSH2 0x75A0 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 DUP1 DUP5 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x59F6 SWAP2 SWAP1 PUSH2 0x87CF JUMP JUMPDEST DUP1 MLOAD SWAP2 SWAP5 POP SWAP3 POP PUSH1 0x2 GT ISZERO SWAP1 POP PUSH2 0x5A1F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12EC SWAP1 PUSH2 0x9B15 JUMP JUMPDEST DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 DUP4 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x5A39 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x5A67 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12EC SWAP1 PUSH2 0x9C88 JUMP JUMPDEST PUSH2 0x5A79 DUP3 DUP7 DUP4 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x55DD JUMPI INVALID JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x38ED1739 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x60 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x38ED1739 SWAP1 PUSH2 0x5AB1 SWAP1 DUP10 SWAP1 PUSH1 0x1 SWAP1 DUP8 SWAP1 ADDRESS SWAP1 TIMESTAMP SWAP1 PUSH1 0x4 ADD PUSH2 0x9FB9 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5ACB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x5ADF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x5B07 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x85EE JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 DUP3 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x5B19 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP4 POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5B37 PUSH2 0x78E5 JUMP JUMPDEST DUP3 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x5B4B SWAP2 SWAP1 PUSH2 0x893F JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP PUSH2 0x5B65 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND SWAP1 DUP7 PUSH2 0x71E7 JUMP JUMPDEST PUSH2 0x5B6D PUSH2 0x79EF JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xC0 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP1 DUP5 ADD MLOAD DUP3 MSTORE DUP2 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP DUP2 MSTORE POP SWAP1 POP PUSH2 0x5BCA PUSH2 0x79C8 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP2 ADD DUP3 MSTORE ADDRESS DUP1 DUP3 MSTORE PUSH1 0x0 PUSH1 0x20 DUP4 ADD DUP2 SWAP1 MSTORE DUP3 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP3 ADD MSTORE DUP4 MLOAD SWAP2 MLOAD PUSH4 0x52BBBE29 PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x52BBBE29 SWAP1 PUSH2 0x5C23 SWAP1 DUP6 SWAP1 DUP6 SWAP1 PUSH1 0x1 SWAP1 TIMESTAMP SWAP1 PUSH1 0x4 ADD PUSH2 0x9ED7 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5C3D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x5C51 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5C75 SWAP2 SWAP1 PUSH2 0x8680 JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH1 0x20 ADD MLOAD SWAP1 POP PUSH1 0x60 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x910FFC71 DUP8 PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x5CBF JUMPI DUP7 PUSH2 0x5CD5 JUMP JUMPDEST PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE JUMPDEST DUP9 PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x5CF8 JUMPI DUP7 PUSH2 0x5D0E JUMP JUMPDEST PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP2 DUP3 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP7 SWAP1 SHL AND SWAP1 SWAP2 MSTORE PUSH2 0x5D42 SWAP3 SWAP2 SWAP1 PUSH1 0x1 SWAP1 PUSH1 0x24 DUP2 ADD PUSH2 0x9277 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5D5A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5D6E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x5D96 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x829C JUMP JUMPDEST POP POP SWAP1 POP DUP1 MLOAD DUP7 PUSH1 0x0 ADD MLOAD LT PUSH2 0x5DB2 JUMPI POP PUSH1 0x0 SWAP2 POP PUSH2 0x2B05 SWAP1 POP JUMP JUMPDEST DUP1 DUP7 PUSH1 0x0 ADD MLOAD DUP2 MLOAD DUP2 LT PUSH2 0x5DC2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP3 POP PUSH1 0xF8 DUP4 SWAP1 SHR PUSH1 0x0 SHR PUSH1 0xBB EQ ISZERO PUSH2 0x5DE8 JUMPI POP PUSH1 0x0 SWAP2 POP PUSH2 0x2B05 SWAP1 POP JUMP JUMPDEST POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 DUP4 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x5E0A SWAP2 SWAP1 PUSH2 0x8882 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x5E42 JUMPI PUSH2 0x5E3D PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND DUP5 DUP9 PUSH2 0x71E7 JUMP JUMPDEST PUSH2 0x5EA4 JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0x2E1A7D4D PUSH1 0xE0 SHL DUP2 MSTORE DUP6 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND SWAP1 PUSH4 0x2E1A7D4D SWAP1 PUSH2 0x5E71 SWAP1 DUP5 SWAP1 PUSH1 0x4 ADD PUSH2 0x96F4 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5E8B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x5E9F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x29589F61 DUP3 DUP12 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP12 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x5ED3 JUMPI DUP11 PUSH2 0x5ED5 JUMP JUMPDEST DUP13 JUMPDEST DUP10 DUP14 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP13 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x5EF5 JUMPI DUP12 PUSH2 0x5EF7 JUMP JUMPDEST DUP15 JUMPDEST ADDRESS PUSH1 0x0 NOT PUSH1 0x1 PUSH1 0x0 DUP12 PUSH1 0x40 MLOAD DUP11 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5F23 SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9889 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5F3C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x5F50 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5F75 SWAP2 SWAP1 PUSH2 0x8680 JUMP JUMPDEST SWAP4 POP DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x5FE6 JUMPI DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD0E30DB0 DUP6 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5FCC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x5FE0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP JUMPDEST POP POP POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x57A281DC DUP7 DUP7 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6026 SWAP3 SWAP2 SWAP1 PUSH2 0x9239 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x603E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x6052 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x607A SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x826A JUMP JUMPDEST SWAP1 POP PUSH1 0x1 SWAP2 POP DUP1 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x6113 JUMPI PUSH1 0x40 MLOAD PUSH4 0x15E8A077 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND SWAP1 PUSH4 0x57A281DC SWAP1 PUSH2 0x60B8 SWAP1 DUP8 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x9239 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x60D0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x60E4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x610C SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x826A JUMP JUMPDEST SWAP1 POP PUSH1 0x0 SWAP2 POP JUMPDEST DUP1 MLOAD DUP7 LT PUSH2 0x6128 JUMPI PUSH1 0x0 DUP1 SWAP3 POP SWAP3 POP POP PUSH2 0x44CB JUMP JUMPDEST DUP1 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x6134 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP3 POP POP SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 DUP1 DUP5 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x6162 SWAP2 SWAP1 PUSH2 0x87CF JUMP JUMPDEST DUP1 MLOAD SWAP2 SWAP5 POP SWAP3 POP PUSH1 0x2 GT ISZERO SWAP1 POP PUSH2 0x618B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12EC SWAP1 PUSH2 0x9A27 JUMP JUMPDEST DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 DUP4 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x61A5 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 PUSH2 0x621A JUMPI POP PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 DUP4 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x61EB JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 ISZERO PUSH2 0x621A JUMPI POP DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST PUSH2 0x6236 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12EC SWAP1 PUSH2 0x9BDC JUMP JUMPDEST PUSH1 0x0 PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x6263 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x62E0 JUMPI PUSH1 0x40 MLOAD PUSH4 0x2E1A7D4D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND SWAP1 PUSH4 0x2E1A7D4D SWAP1 PUSH2 0x62A6 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x96F4 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x62C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x62D4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP DUP6 SWAP1 POP PUSH2 0x62FF JUMP JUMPDEST PUSH2 0x62FF DUP3 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x62F0 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 DUP9 PUSH2 0x71E7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xB77D239B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0xB77D239B SWAP1 DUP4 SWAP1 PUSH2 0x6339 SWAP1 DUP7 SWAP1 DUP12 SWAP1 PUSH1 0x1 SWAP1 ADDRESS SWAP1 PUSH1 0x0 SWAP1 DUP2 SWAP1 PUSH1 0x4 ADD PUSH2 0x95CA JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6352 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x6366 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x638B SWAP2 SWAP1 PUSH2 0x8680 JUMP JUMPDEST SWAP4 POP PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x1 DUP5 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x63BB JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x1B2E JUMPI DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD0E30DB0 DUP6 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x640D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x6421 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xC02AAA39B223FE8D0A0E5C4F27EAD9083C756CC2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND EQ PUSH2 0x645E JUMPI DUP4 PUSH2 0x6461 JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xC02AAA39B223FE8D0A0E5C4F27EAD9083C756CC2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND EQ PUSH2 0x648F JUMPI DUP4 PUSH2 0x6492 JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x901754D7 PUSH3 0x493E0 DUP5 DUP5 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x64C6 SWAP3 SWAP2 SWAP1 PUSH2 0x9239 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x64DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x650F JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x650C SWAP2 DUP2 ADD SWAP1 PUSH2 0x801E JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x2CB2 JUMPI PUSH2 0x5DE8 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x652F SWAP2 SWAP1 PUSH2 0x801E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x653F DUP9 DUP4 DUP10 DUP10 PUSH2 0x75CA JUMP JUMPDEST SWAP1 POP DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x6645 JUMPI PUSH1 0x40 MLOAD PUSH4 0x2E1A7D4D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND SWAP1 PUSH4 0x2E1A7D4D SWAP1 PUSH2 0x6587 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x96F4 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x65A1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x65B5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH4 0xAD65D76D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP3 POP PUSH4 0xAD65D76D SWAP2 POP DUP8 SWAP1 PUSH2 0x65EC SWAP1 PUSH1 0x1 SWAP1 TIMESTAMP SWAP1 ADDRESS SWAP1 PUSH1 0x4 ADD PUSH2 0x998D JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6605 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x6619 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x663E SWAP2 SWAP1 PUSH2 0x8680 JUMP JUMPDEST SWAP3 POP PUSH2 0x46BF JUMP JUMPDEST DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x6751 JUMPI PUSH2 0x6673 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND DUP3 DUP8 PUSH2 0x71E7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x95E3C50B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH4 0x95E3C50B SWAP1 PUSH2 0x66A4 SWAP1 DUP9 SWAP1 PUSH1 0x1 SWAP1 TIMESTAMP SWAP1 PUSH1 0x4 ADD PUSH2 0xA040 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x66BE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x66D2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x66F6 SWAP2 SWAP1 PUSH2 0x8680 JUMP JUMPDEST SWAP3 POP DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD0E30DB0 DUP5 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6733 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x6747 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP PUSH2 0x46BF JUMP JUMPDEST PUSH2 0x6765 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND DUP3 DUP8 PUSH2 0x71E7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xDDF7E1A7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH4 0xDDF7E1A7 SWAP1 PUSH2 0x5C23 SWAP1 DUP9 SWAP1 PUSH1 0x1 SWAP1 DUP2 SWAP1 TIMESTAMP SWAP1 DUP14 SWAP1 PUSH1 0x4 ADD PUSH2 0xA014 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP6 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x67C2 SWAP2 SWAP1 PUSH2 0x920C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x6800 SWAP2 SWAP1 PUSH2 0x91F0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x683B JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x6840 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x6854 JUMPI POP PUSH1 0x20 DUP2 MLOAD LT ISZERO JUMPDEST ISZERO PUSH2 0x41C8 JUMPI PUSH2 0x6864 DUP2 PUSH1 0x0 PUSH2 0x59D0 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6877 PUSH2 0x78E5 JUMP JUMPDEST DUP3 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x688B SWAP2 SWAP1 PUSH2 0x8DC8 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x70A08231 ADDRESS PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x68BB SWAP2 SWAP1 PUSH2 0x920C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x68D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x68E7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x690B SWAP2 SWAP1 PUSH2 0x8680 JUMP JUMPDEST DUP3 MLOAD PUSH1 0x20 DUP5 ADD MLOAD SWAP2 SWAP3 POP SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 DUP2 AND SWAP2 AND EQ ISZERO PUSH2 0x6A13 JUMPI PUSH2 0x69AE DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x1664F66 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6965 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x6979 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x699D SWAP2 SWAP1 PUSH2 0x801E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND SWAP1 DUP9 PUSH2 0x71E7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x4ACC893B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH4 0x95991276 SWAP1 PUSH2 0x69DC SWAP1 ADDRESS SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x9220 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x69F6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x6A0A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH2 0x6BC1 JUMP JUMPDEST DUP3 PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x6BC1 JUMPI PUSH1 0x0 PUSH2 0x6AB6 DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xFAE036D5 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6A6F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x6A83 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x6AA7 SWAP2 SWAP1 PUSH2 0x8680 JUMP JUMPDEST PUSH8 0xDE0B6B3A7640000 SWAP1 PUSH2 0x7327 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x313CE567 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6AF3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x6B07 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x6B2B SWAP2 SWAP1 PUSH2 0x8F5E JUMP JUMPDEST PUSH1 0xFF AND PUSH1 0xA EXP SWAP1 POP PUSH1 0x0 PUSH2 0x6B43 DUP4 PUSH2 0x4D3B DUP12 DUP6 PUSH2 0x72F6 JUMP JUMPDEST DUP7 MLOAD SWAP1 SWAP2 POP PUSH2 0x6B5D SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP14 AND SWAP1 DUP12 PUSH2 0x71E7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x8D7EF9BB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0x8D7EF9BB SWAP1 PUSH2 0x6B8B SWAP1 ADDRESS SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x9220 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6BA5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x6BB9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP JUMPDEST PUSH2 0x5C75 DUP3 DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x70A08231 ADDRESS PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x595B SWAP2 SWAP1 PUSH2 0x920C JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP5 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x6C0B SWAP2 SWAP1 PUSH2 0x8813 JUMP JUMPDEST SWAP2 SWAP5 POP SWAP3 POP SWAP1 POP PUSH2 0x6C26 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND DUP4 DUP9 PUSH2 0x71E7 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x6CC3 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP2 DUP3 SWAP1 MSTORE PUSH4 0x8DAE7333 PUSH1 0xE0 SHL SWAP1 SWAP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x8DAE7333 SWAP1 PUSH2 0x6C6A SWAP1 DUP10 SWAP1 PUSH1 0x1 SWAP1 PUSH1 0x24 DUP2 ADD PUSH2 0x9FF5 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6C84 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x6C98 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x6CBC SWAP2 SWAP1 PUSH2 0x8680 JUMP JUMPDEST SWAP4 POP PUSH2 0x6DD5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xCA19EBD9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0xCA19EBD9 SWAP1 PUSH2 0x6CF1 SWAP1 DUP6 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x9220 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6D09 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x6D1D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x6D41 SWAP2 SWAP1 PUSH2 0x8680 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP2 DUP3 SWAP1 MSTORE PUSH4 0x733E7383 PUSH1 0xE1 SHL SWAP1 SWAP2 MSTORE SWAP1 SWAP5 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0xE67CE706 SWAP1 PUSH2 0x6D81 SWAP1 DUP8 SWAP1 DUP11 SWAP1 PUSH1 0x24 DUP2 ADD PUSH2 0x9FF5 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6D9B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x6DAF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x6DD3 SWAP2 SWAP1 PUSH2 0x8680 JUMP JUMPDEST POP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 DUP4 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x6DF8 SWAP2 SWAP1 PUSH2 0x8882 JUMP JUMPDEST SWAP1 SWAP3 POP SWAP1 POP PUSH2 0x6E11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND DUP4 DUP8 PUSH2 0x770A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x19740AC1 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x65D02B04 SWAP1 PUSH2 0x6E46 SWAP1 DUP11 SWAP1 DUP11 SWAP1 ADDRESS SWAP1 PUSH1 0x1 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x97C5 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6E60 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x6E74 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x6E98 SWAP2 SWAP1 PUSH2 0x8680 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x6EBA SWAP2 SWAP1 PUSH2 0x801E JUMP JUMPDEST SWAP1 POP PUSH2 0x6ED0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP3 DUP7 PUSH2 0x71E7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xD5BCB9B5 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH4 0xD5BCB9B5 SWAP1 PUSH2 0x4C65 SWAP1 DUP10 SWAP1 DUP10 SWAP1 DUP10 SWAP1 PUSH1 0x1 SWAP1 ADDRESS SWAP1 PUSH1 0x4 ADD PUSH2 0x9828 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDD62ED3E PUSH1 0xE0 SHL DUP7 DUP7 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x6F2F SWAP3 SWAP2 SWAP1 PUSH2 0x9239 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x6F6D SWAP2 SWAP1 PUSH2 0x91F0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x6FA8 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x6FAD JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x6FC1 JUMPI POP PUSH1 0x20 DUP2 MLOAD LT ISZERO JUMPDEST ISZERO PUSH2 0x5DE8 JUMPI PUSH2 0x2CB2 DUP2 PUSH1 0x0 PUSH2 0x59D0 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x6FEA SWAP2 SWAP1 PUSH2 0x8854 JUMP JUMPDEST SWAP1 SWAP3 POP SWAP1 POP PUSH2 0x7003 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP4 DUP8 PUSH2 0x770A JUMP JUMPDEST DUP1 PUSH2 0x708B JUMPI PUSH1 0x40 MLOAD PUSH4 0x6EC9FACD PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0xDD93F59A SWAP1 PUSH2 0x7034 SWAP1 ADDRESS SWAP1 PUSH1 0x4 ADD PUSH2 0x920C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x704E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x7062 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x7086 SWAP2 SWAP1 PUSH2 0x8680 JUMP JUMPDEST PUSH2 0x2CB2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x2F58056D PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0xBD6015B4 SWAP1 PUSH2 0x4C65 SWAP1 ADDRESS SWAP1 PUSH1 0x4 ADD PUSH2 0x920C JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x70D0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x70FA JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x2295 JUMPI DUP3 PUSH1 0x1 DUP3 DUP6 MLOAD SUB SUB DUP2 MLOAD DUP2 LT PUSH2 0x711B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x712F JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE PUSH1 0x1 ADD PUSH2 0x7100 JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x7168 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x7192 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x2295 JUMPI DUP3 PUSH1 0x1 DUP3 DUP6 MLOAD SUB SUB DUP2 MLOAD DUP2 LT PUSH2 0x71B3 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x71C7 JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE PUSH1 0x1 ADD PUSH2 0x7198 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x6EB1769F PUSH1 0xE1 SHL DUP2 MSTORE DUP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0xDD62ED3E SWAP1 PUSH2 0x7217 SWAP1 ADDRESS SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x9239 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x722F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x7243 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x7267 SWAP2 SWAP1 PUSH2 0x8680 JUMP JUMPDEST LT ISZERO PUSH2 0x59CB JUMPI PUSH2 0x59CB DUP4 DUP4 PUSH1 0x0 NOT PUSH2 0x776B JUMP JUMPDEST PUSH1 0x0 DUP4 ISZERO DUP1 PUSH2 0x7287 JUMPI POP DUP2 ISZERO JUMPDEST DUP1 PUSH2 0x7290 JUMPI POP DUP3 ISZERO JUMPDEST ISZERO PUSH2 0x729D JUMPI POP PUSH1 0x0 PUSH2 0x2B05 JUMP JUMPDEST DUP4 DUP3 MUL DUP3 DUP6 DUP3 DUP2 PUSH2 0x72AA JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x72BA JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x2B05 JUMP JUMPDEST DUP4 PUSH1 0x1 DUP6 SUB DUP3 ADD DUP2 PUSH2 0x72C8 JUMPI INVALID JUMPDEST DIV SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x72F0 JUMPI PUSH2 0x72F0 PUSH2 0x72EB PUSH1 0x2 DUP6 DUP6 PUSH2 0x7788 JUMP JUMPDEST PUSH2 0x5502 JUMP JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x7305 JUMPI POP PUSH1 0x0 PUSH2 0x41CB JUMP JUMPDEST DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 PUSH2 0x7312 JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x2B05 JUMPI PUSH2 0x2B05 PUSH2 0x72EB PUSH1 0x1 DUP7 DUP7 PUSH2 0x7788 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x2B05 JUMPI PUSH2 0x2B05 PUSH2 0x72EB PUSH1 0x0 DUP7 DUP7 PUSH2 0x7788 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x7359 JUMPI PUSH2 0x7359 PUSH2 0x72EB PUSH1 0x3 DUP6 DUP6 PUSH2 0x7788 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP2 PUSH2 0x7364 JUMPI INVALID JUMPDEST DIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 EXTCODESIZE DUP1 PUSH2 0x7380 JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x1009 JUMP JUMPDEST POP DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDFE1681 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x73BA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x73CE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x73F2 SWAP2 SWAP1 PUSH2 0x801E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x70A08231 DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x741D SWAP2 SWAP1 PUSH2 0x920C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7435 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x7449 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x746D SWAP2 SWAP1 PUSH2 0x8680 JUMP JUMPDEST PUSH2 0x7479 JUMPI POP PUSH1 0x0 PUSH2 0x1009 JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD21220A7 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x74B2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x74C6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x74EA SWAP2 SWAP1 PUSH2 0x801E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x70A08231 DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7515 SWAP2 SWAP1 PUSH2 0x920C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x752D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x7541 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x7565 SWAP2 SWAP1 PUSH2 0x8680 JUMP JUMPDEST PUSH2 0x7571 JUMPI POP PUSH1 0x0 PUSH2 0x1009 JUMP JUMPDEST POP PUSH1 0x1 SWAP2 SWAP1 POP JUMP JUMPDEST DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO PUSH2 0x7598 JUMPI PUSH2 0x7598 PUSH2 0x72EB PUSH1 0x5 DUP6 MLOAD DUP6 PUSH1 0x20 ADD PUSH2 0x77E2 JUMP JUMPDEST SWAP2 ADD PUSH1 0x20 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO PUSH2 0x75C1 JUMPI PUSH2 0x75C1 PUSH2 0x72EB PUSH1 0x5 DUP6 MLOAD DUP6 PUSH1 0x20 ADD PUSH2 0x77E2 JUMP JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x7666 JUMPI PUSH1 0x40 MLOAD PUSH4 0x3795FB1 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0x6F2BF62 SWAP1 PUSH2 0x7611 SWAP1 DUP7 SWAP1 PUSH1 0x4 ADD PUSH2 0x920C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7629 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x763D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x7661 SWAP2 SWAP1 PUSH2 0x801E JUMP JUMPDEST PUSH2 0x76E2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x3795FB1 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0x6F2BF62 SWAP1 PUSH2 0x7692 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x920C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x76AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x76BE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x76E2 SWAP2 SWAP1 PUSH2 0x801E JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xFFC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12EC SWAP1 PUSH2 0x99F0 JUMP JUMPDEST PUSH1 0x60 PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x7727 SWAP3 SWAP2 SWAP1 PUSH2 0x9220 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP PUSH2 0x7765 DUP5 DUP3 PUSH2 0x7801 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH4 0x95EA7B3 PUSH1 0xE0 SHL DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x7727 SWAP3 SWAP2 SWAP1 PUSH2 0x9220 JUMP JUMPDEST PUSH1 0x60 PUSH4 0xE946C1BB PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x77A7 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9939 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH4 0x28006595 PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x77A7 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x995A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x40 MLOAD PUSH2 0x781D SWAP2 SWAP1 PUSH2 0x91F0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x785A JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x785F JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x7875 JUMPI POP PUSH2 0x7875 DUP2 PUSH2 0x788E JUMP JUMPDEST ISZERO PUSH2 0x7881 JUMPI POP POP PUSH2 0x788A JUMP JUMPDEST PUSH2 0x7765 DUP2 PUSH2 0x5502 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x78A2 JUMPI POP PUSH1 0x1 PUSH2 0x1009 JUMP JUMPDEST PUSH1 0x20 DUP3 MLOAD LT PUSH2 0x1009 JUMPI PUSH1 0x0 PUSH2 0x78B8 DUP4 PUSH1 0x0 PUSH2 0x59D0 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 EQ ISZERO PUSH2 0x2295 JUMPI PUSH1 0x1 SWAP2 POP POP PUSH2 0x1009 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x60 SWAP3 DUP3 ADD DUP4 SWAP1 MSTORE SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 SWAP1 PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY POP SWAP2 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xC0 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x41CB DUP2 PUSH2 0xA13B JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x7A53 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x7A66 PUSH2 0x7A61 DUP3 PUSH2 0xA0C0 JUMP JUMPDEST PUSH2 0xA09A JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x7A87 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x7AAF JUMPI DUP2 CALLDATALOAD PUSH2 0x7A9D DUP2 PUSH2 0xA13B JUMP JUMPDEST DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x7A8A JUMP JUMPDEST POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x7ACA JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x7AD8 PUSH2 0x7A61 DUP3 PUSH2 0xA0C0 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x7AF9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x7AAF JUMPI DUP2 MLOAD PUSH2 0x7B0F DUP2 PUSH2 0xA13B JUMP JUMPDEST DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x7AFC JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x7B31 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x7B3F PUSH2 0x7A61 DUP3 PUSH2 0xA0C0 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x7AAF JUMPI PUSH2 0x7B67 DUP9 DUP5 DUP5 CALLDATALOAD DUP11 ADD ADD PUSH2 0x7A43 JUMP JUMPDEST DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x7B50 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x7B89 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x7B97 PUSH2 0x7A61 DUP3 PUSH2 0xA0C0 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x7AAF JUMPI PUSH2 0x7BBF DUP9 DUP5 DUP5 CALLDATALOAD DUP11 ADD ADD PUSH2 0x7D68 JUMP JUMPDEST DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x7BA8 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x7BE1 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x7BEF PUSH2 0x7A61 DUP3 PUSH2 0xA0C0 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x7C10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x7AAF JUMPI DUP2 CALLDATALOAD PUSH2 0x7C26 DUP2 PUSH2 0xA13B JUMP JUMPDEST DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x7C13 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x7C48 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x7C56 PUSH2 0x7A61 DUP3 PUSH2 0xA0C0 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD PUSH1 0x80 DUP1 DUP6 MUL DUP8 ADD DUP4 ADD DUP9 LT ISZERO PUSH2 0x7C79 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x7CA0 JUMPI PUSH2 0x7C8E DUP10 DUP5 PUSH2 0x7F83 JUMP JUMPDEST DUP6 MSTORE SWAP4 DUP4 ADD SWAP4 SWAP2 DUP2 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x7C7C JUMP JUMPDEST POP POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x7CBC JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x7CCA PUSH2 0x7A61 DUP3 PUSH2 0xA0C0 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x7CEB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x7AAF JUMPI DUP2 CALLDATALOAD DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x7CEE JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x7D1A JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x7D28 PUSH2 0x7A61 DUP3 PUSH2 0xA0C0 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x7D49 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x7AAF JUMPI DUP2 MLOAD DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x7D4C JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x7D78 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x7D86 PUSH2 0x7A61 DUP3 PUSH2 0xA0DF JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x7D9D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP5 ADD CALLDATACOPY PUSH1 0x0 SWAP1 DUP3 ADD PUSH1 0x20 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x7DC6 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x7DD4 PUSH2 0x7A61 DUP3 PUSH2 0xA0DF JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x7DEB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1E91 DUP2 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP7 ADD PUSH2 0xA102 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x2 DUP2 LT PUSH2 0x41CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x7E1C JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x7E26 PUSH1 0xA0 PUSH2 0xA09A JUMP JUMPDEST SWAP1 POP DUP2 CALLDATALOAD DUP2 MSTORE PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH2 0x7E3A DUP2 PUSH2 0xA13B JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP3 ADD CALLDATALOAD PUSH2 0x7E4D DUP2 PUSH2 0xA13B JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP3 ADD CALLDATALOAD PUSH2 0x7E60 DUP2 PUSH2 0xA13B JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP3 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x7E7E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x7E8A DUP5 DUP3 DUP6 ADD PUSH2 0x7D68 JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x180 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x7EA9 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x7EB2 DUP2 PUSH2 0xA09A JUMP JUMPDEST SWAP2 POP POP PUSH2 0x7EBF DUP4 DUP4 PUSH2 0x7A38 JUMP JUMPDEST DUP2 MSTORE PUSH2 0x7ECE DUP4 PUSH1 0x20 DUP5 ADD PUSH2 0x7A38 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x7EE0 DUP4 PUSH1 0x40 DUP5 ADD PUSH2 0x7FE0 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x7EF2 DUP4 PUSH1 0x60 DUP5 ADD PUSH2 0x7FE0 JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH2 0x7F04 DUP4 PUSH1 0x80 DUP5 ADD PUSH2 0x7FE0 JUMP JUMPDEST PUSH1 0x80 DUP3 ADD MSTORE PUSH2 0x7F16 DUP4 PUSH1 0xA0 DUP5 ADD PUSH2 0x7A38 JUMP JUMPDEST PUSH1 0xA0 DUP3 ADD MSTORE PUSH2 0x7F28 DUP4 PUSH1 0xC0 DUP5 ADD PUSH2 0x7A38 JUMP JUMPDEST PUSH1 0xC0 DUP3 ADD MSTORE PUSH2 0x7F3A DUP4 PUSH1 0xE0 DUP5 ADD PUSH2 0x7A38 JUMP JUMPDEST PUSH1 0xE0 DUP3 ADD MSTORE PUSH2 0x100 PUSH2 0x7F4E DUP5 DUP3 DUP6 ADD PUSH2 0x7A38 JUMP JUMPDEST SWAP1 DUP3 ADD MSTORE PUSH2 0x120 DUP3 DUP2 ADD CALLDATALOAD SWAP1 DUP3 ADD MSTORE PUSH2 0x140 PUSH2 0x7F6C DUP5 DUP3 DUP6 ADD PUSH2 0x7FEB JUMP JUMPDEST DUP2 DUP4 ADD MSTORE POP PUSH2 0x160 DUP1 DUP4 ADD CALLDATALOAD DUP2 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x7F94 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x7F9E PUSH1 0x80 PUSH2 0xA09A JUMP JUMPDEST SWAP1 POP DUP2 CALLDATALOAD PUSH1 0x4 DUP2 LT PUSH2 0x7FAF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH2 0x7FBF DUP2 PUSH2 0xA198 JUMP JUMPDEST DUP1 PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 DUP3 ADD CALLDATALOAD PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP3 ADD CALLDATALOAD PUSH1 0x60 DUP3 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x41CB DUP2 PUSH2 0xA183 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x41CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x8013 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x2B05 DUP2 PUSH2 0xA13B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x802F JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x2B05 DUP2 PUSH2 0xA13B JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x804E JUMPI DUP2 DUP3 REVERT JUMPDEST DUP4 MLOAD PUSH2 0x8059 DUP2 PUSH2 0xA13B JUMP JUMPDEST PUSH1 0x20 DUP6 ADD MLOAD SWAP1 SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x8075 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x8081 DUP8 DUP4 DUP9 ADD PUSH2 0x7ABA JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x8096 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x80A3 DUP7 DUP3 DUP8 ADD PUSH2 0x7ABA JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x80C2 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x80CD DUP2 PUSH2 0xA13B JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x80DD DUP2 PUSH2 0xA13B JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x80ED DUP2 PUSH2 0xA13B JUMP JUMPDEST SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x8107 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x8113 DUP8 DUP3 DUP9 ADD PUSH2 0x7CAC JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x8134 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x813F DUP2 PUSH2 0xA13B JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x814F DUP2 PUSH2 0xA13B JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x8169 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x8175 DUP8 DUP3 DUP9 ADD PUSH2 0x7D68 JUMP JUMPDEST SWAP5 SWAP8 SWAP4 SWAP7 POP SWAP4 SWAP5 PUSH1 0x60 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x819A JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x81A5 DUP2 PUSH2 0xA13B JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x81C0 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x81CC DUP8 DUP4 DUP9 ADD PUSH2 0x7A43 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x81E1 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x80A3 DUP7 DUP3 DUP8 ADD PUSH2 0x7CAC JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x8205 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x8210 DUP2 PUSH2 0xA13B JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH2 0x8227 DUP2 PUSH2 0xA13B JUMP JUMPDEST SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH2 0x8237 DUP2 PUSH2 0xA13B JUMP JUMPDEST SWAP2 POP PUSH1 0x80 DUP7 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x8251 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x825D DUP9 DUP3 DUP10 ADD PUSH2 0x7CAC JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x827B JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x8290 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0xFFC DUP5 DUP3 DUP6 ADD PUSH2 0x7ABA JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x82B0 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x82C6 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 DUP7 ADD SWAP2 POP DUP7 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x82D9 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x82E7 PUSH2 0x7A61 DUP3 PUSH2 0xA0C0 JUMP JUMPDEST DUP1 DUP3 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD SWAP3 POP DUP1 DUP7 ADD DUP12 DUP3 DUP4 DUP8 MUL DUP10 ADD ADD GT ISZERO PUSH2 0x8307 JUMPI DUP8 DUP9 REVERT JUMPDEST DUP8 SWAP7 POP JUMPDEST DUP5 DUP8 LT ISZERO PUSH2 0x8329 JUMPI DUP1 MLOAD DUP5 MSTORE PUSH1 0x1 SWAP7 SWAP1 SWAP7 ADD SWAP6 SWAP3 DUP2 ADD SWAP3 DUP2 ADD PUSH2 0x830B JUMP JUMPDEST POP DUP10 ADD MLOAD SWAP1 SWAP8 POP SWAP4 POP POP POP DUP1 DUP3 GT ISZERO PUSH2 0x8340 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x834D DUP7 DUP3 DUP8 ADD PUSH2 0x7D0A JUMP JUMPDEST SWAP3 POP POP PUSH2 0x835D DUP6 PUSH1 0x40 DUP7 ADD PUSH2 0x7DFC JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x8378 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x838E JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x83A1 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x83AF JUMPI DUP5 DUP6 REVERT JUMPDEST DUP7 PUSH1 0x20 DUP1 DUP4 MUL DUP6 ADD ADD GT ISZERO PUSH2 0x83C2 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH1 0x20 SWAP3 SWAP1 SWAP3 ADD SWAP7 SWAP2 SWAP6 POP SWAP1 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x83E8 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x83FE JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x840A DUP8 DUP4 DUP9 ADD PUSH2 0x7B79 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x841F JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x842C DUP7 DUP3 DUP8 ADD PUSH2 0x7B79 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x844E JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x8463 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0xFFC DUP5 DUP3 DUP6 ADD PUSH2 0x7BD1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x8481 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x8496 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x84A2 DUP6 DUP3 DUP7 ADD PUSH2 0x7BD1 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x84B3 DUP2 PUSH2 0xA13B JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x84D2 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x84E7 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x84F3 DUP7 DUP3 DUP8 ADD PUSH2 0x7BD1 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x8504 DUP2 PUSH2 0xA13B JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH2 0x8514 DUP2 PUSH2 0xA13B JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x8533 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x8549 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 DUP7 ADD SWAP2 POP DUP7 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x855C JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x856A PUSH2 0x7A61 DUP3 PUSH2 0xA0C0 JUMP JUMPDEST DUP1 DUP3 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD SWAP3 POP DUP1 DUP7 ADD PUSH2 0x180 DUP13 DUP4 DUP3 DUP9 MUL DUP11 ADD ADD GT ISZERO PUSH2 0x858D JUMPI DUP9 DUP10 REVERT JUMPDEST DUP9 SWAP8 POP JUMPDEST DUP6 DUP9 LT ISZERO PUSH2 0x85B9 JUMPI PUSH2 0x85A3 DUP14 DUP4 PUSH2 0x7E96 JUMP JUMPDEST DUP6 MSTORE PUSH1 0x1 SWAP8 SWAP1 SWAP8 ADD SWAP7 SWAP4 DUP3 ADD SWAP4 SWAP1 DUP2 ADD SWAP1 PUSH2 0x8591 JUMP JUMPDEST POP SWAP2 SWAP9 POP DUP10 ADD CALLDATALOAD SWAP5 POP POP POP POP DUP1 DUP3 GT ISZERO PUSH2 0x85D1 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x85DE DUP7 DUP3 DUP8 ADD PUSH2 0x7C38 JUMP JUMPDEST SWAP3 POP POP PUSH2 0x835D DUP6 PUSH1 0x40 DUP7 ADD PUSH2 0x7A38 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x85FF JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x8614 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0xFFC DUP5 DUP3 DUP6 ADD PUSH2 0x7D0A JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x8632 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x8648 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x8654 DUP7 DUP4 DUP8 ADD PUSH2 0x7D0A JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x8669 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x8676 DUP6 DUP3 DUP7 ADD PUSH2 0x7D0A JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x8691 JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x86AF JUMPI DUP3 DUP4 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x86BA DUP2 PUSH2 0xA15E JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x86CA DUP2 PUSH2 0xA13B JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH2 0x86DA DUP2 PUSH2 0xA13B JUMP JUMPDEST SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x86F5 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x8701 DUP10 DUP4 DUP11 ADD PUSH2 0x7D68 JUMP JUMPDEST SWAP4 POP PUSH1 0x80 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x8716 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x825D DUP9 DUP3 DUP10 ADD PUSH2 0x7CAC JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x873A JUMPI DUP3 DUP4 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x8745 DUP2 PUSH2 0xA15E JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x8755 DUP2 PUSH2 0xA13B JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH2 0x8765 DUP2 PUSH2 0xA13B JUMP JUMPDEST SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x877F JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x878B DUP9 DUP3 DUP10 ADD PUSH2 0x7D68 JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP3 SWAP6 PUSH1 0x80 ADD CALLDATALOAD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x87AE JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x87C3 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0xFFC DUP5 DUP3 DUP6 ADD PUSH2 0x7DB6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x87E1 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH2 0x87EC DUP2 PUSH2 0xA13B JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x8807 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x8676 DUP6 DUP3 DUP7 ADD PUSH2 0x7ABA JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x8827 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 MLOAD PUSH2 0x8832 DUP2 PUSH2 0xA13B JUMP JUMPDEST PUSH1 0x20 DUP6 ADD MLOAD SWAP1 SWAP4 POP PUSH2 0x8843 DUP2 PUSH2 0xA13B JUMP JUMPDEST PUSH1 0x40 DUP6 ADD MLOAD SWAP1 SWAP3 POP PUSH2 0x8514 DUP2 PUSH2 0xA150 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x8866 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH2 0x8871 DUP2 PUSH2 0xA13B JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 SWAP3 POP PUSH2 0x84B3 DUP2 PUSH2 0xA150 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x8894 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH2 0x889F DUP2 PUSH2 0xA13B JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x88BA JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x8676 DUP6 DUP3 DUP7 ADD PUSH2 0x7DB6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x88DB JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x88E6 DUP2 PUSH2 0xA13B JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x88F6 DUP2 PUSH2 0xA13B JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x8911 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x891D DUP9 DUP4 DUP10 ADD PUSH2 0x7BD1 JUMP JUMPDEST SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x8932 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x8113 DUP8 DUP3 DUP9 ADD PUSH2 0x7CAC JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x8950 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x895A PUSH1 0x40 PUSH2 0xA09A JUMP JUMPDEST DUP3 MLOAD PUSH2 0x8965 DUP2 PUSH2 0xA13B JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD MLOAD SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP5 DUP7 SUB PUSH1 0xA0 DUP2 SLT ISZERO PUSH2 0x8990 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x40 DUP2 SLT ISZERO PUSH2 0x899D JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x89A8 PUSH1 0x40 PUSH2 0xA09A JUMP JUMPDEST DUP6 CALLDATALOAD PUSH2 0x89B3 DUP2 PUSH2 0xA13B JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP7 DUP2 ADD CALLDATALOAD SWAP1 DUP3 ADD MSTORE SWAP4 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x89CF DUP2 PUSH2 0xA13B JUMP JUMPDEST SWAP3 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH2 0x89DF DUP2 PUSH2 0xA13B JUMP JUMPDEST SWAP2 POP PUSH1 0x80 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x8107 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x8A0E JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x8A24 JUMPI DUP4 DUP5 REVERT JUMPDEST SWAP1 DUP7 ADD SWAP1 PUSH1 0x40 DUP3 DUP10 SUB SLT ISZERO PUSH2 0x8A37 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x8A41 PUSH1 0x40 PUSH2 0xA09A JUMP JUMPDEST PUSH2 0x8A4B DUP10 DUP5 PUSH2 0x7A38 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP3 DUP2 GT ISZERO PUSH2 0x8A5E JUMPI DUP6 DUP7 REVERT JUMPDEST PUSH2 0x8A6A DUP11 DUP3 DUP7 ADD PUSH2 0x7B21 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP DUP1 SWAP7 POP POP PUSH2 0x8A81 DUP9 PUSH1 0x20 DUP10 ADD PUSH2 0x7A38 JUMP JUMPDEST SWAP5 POP PUSH2 0x891D DUP9 PUSH1 0x40 DUP10 ADD PUSH2 0x7A38 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x8AA1 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x8AAB PUSH1 0x80 PUSH2 0xA09A JUMP JUMPDEST DUP3 MLOAD PUSH2 0x8AB6 DUP2 PUSH2 0xA13B JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP4 ADD MLOAD PUSH2 0x8AC6 DUP2 PUSH2 0xA15E JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP4 ADD MLOAD PUSH2 0x8AD9 DUP2 PUSH2 0xA174 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP4 ADD MLOAD PUSH2 0x8AEC DUP2 PUSH2 0xA174 JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP5 DUP7 SUB PUSH1 0xE0 DUP2 SLT ISZERO PUSH2 0x8B0E JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x80 DUP2 SLT ISZERO PUSH2 0x8B1B JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x8B26 PUSH1 0x80 PUSH2 0xA09A JUMP JUMPDEST DUP6 CALLDATALOAD PUSH2 0x8B31 DUP2 PUSH2 0xA13B JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x8B41 DUP2 PUSH2 0xA15E JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH2 0x8B54 DUP2 PUSH2 0xA174 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH2 0x8B67 DUP2 PUSH2 0xA174 JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE SWAP4 POP PUSH2 0x8B7B DUP7 PUSH1 0x80 DUP8 ADD PUSH2 0x7A38 JUMP JUMPDEST SWAP3 POP PUSH2 0x8B8A DUP7 PUSH1 0xA0 DUP8 ADD PUSH2 0x7A38 JUMP JUMPDEST SWAP2 POP PUSH1 0xC0 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x8107 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP5 DUP7 SUB PUSH1 0xA0 DUP2 SLT ISZERO PUSH2 0x8BBA JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x40 DUP2 SLT ISZERO PUSH2 0x8BC7 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x8BD2 PUSH1 0x40 PUSH2 0xA09A JUMP JUMPDEST DUP6 CALLDATALOAD PUSH2 0x8BDD DUP2 PUSH2 0xA13B JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x8BED DUP2 PUSH2 0xA13B JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE SWAP4 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x89CF DUP2 PUSH2 0xA13B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x8C13 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x8C29 JUMPI DUP3 DUP4 REVERT JUMPDEST SWAP1 DUP4 ADD SWAP1 PUSH1 0xA0 DUP3 DUP7 SUB SLT ISZERO PUSH2 0x8C3C JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x8C46 PUSH1 0xA0 PUSH2 0xA09A JUMP JUMPDEST DUP3 MLOAD DUP2 MSTORE PUSH1 0x20 DUP4 ADD MLOAD PUSH2 0x8C58 DUP2 PUSH2 0xA13B JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP4 ADD MLOAD PUSH2 0x8C6B DUP2 PUSH2 0xA13B JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP4 ADD MLOAD PUSH2 0x8C7E DUP2 PUSH2 0xA13B JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP4 ADD MLOAD DUP3 DUP2 GT ISZERO PUSH2 0x8C94 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x8CA0 DUP8 DUP3 DUP7 ADD PUSH2 0x7DB6 JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x8CC4 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x8CDA JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x8CE6 DUP9 DUP4 DUP10 ADD PUSH2 0x7E0B JUMP JUMPDEST SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP2 POP PUSH2 0x8CF8 DUP3 PUSH2 0xA13B JUMP JUMPDEST SWAP1 SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP1 PUSH2 0x8D0A DUP3 PUSH2 0xA13B JUMP JUMPDEST SWAP1 SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD SWAP1 DUP1 DUP3 GT ISZERO PUSH2 0x8932 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x8D34 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x8D49 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x8D55 DUP8 DUP3 DUP9 ADD PUSH2 0x7E0B JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x8D6D DUP2 PUSH2 0xA13B JUMP JUMPDEST SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH2 0x8D7D DUP2 PUSH2 0xA13B JUMP JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP1 SWAP4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x220 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x8D9D JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x8DA7 DUP6 DUP6 PUSH2 0x7E96 JUMP JUMPDEST SWAP3 POP PUSH2 0x8DB7 DUP6 PUSH2 0x180 DUP7 ADD PUSH2 0x7F83 JUMP JUMPDEST SWAP2 POP PUSH2 0x200 DUP5 ADD CALLDATALOAD PUSH2 0x8514 DUP2 PUSH2 0xA13B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x8DD9 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x8DE3 PUSH1 0x40 PUSH2 0xA09A JUMP JUMPDEST DUP3 MLOAD PUSH2 0x8DEE DUP2 PUSH2 0xA13B JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP4 ADD MLOAD PUSH2 0x8DFE DUP2 PUSH2 0xA13B JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP5 DUP7 SUB PUSH1 0xC0 DUP2 SLT ISZERO PUSH2 0x8E20 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x60 DUP2 SLT ISZERO PUSH2 0x8E2D JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x8E38 PUSH1 0x60 PUSH2 0xA09A JUMP JUMPDEST DUP6 CALLDATALOAD PUSH2 0x8E43 DUP2 PUSH2 0xA13B JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP7 DUP2 ADD CALLDATALOAD SWAP1 DUP3 ADD MSTORE PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH2 0x8E5D DUP2 PUSH2 0xA13B JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE SWAP4 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH2 0x8E72 DUP2 PUSH2 0xA13B JUMP JUMPDEST SWAP3 POP PUSH1 0x80 DUP6 ADD CALLDATALOAD PUSH2 0x8E82 DUP2 PUSH2 0xA13B JUMP JUMPDEST SWAP2 POP PUSH1 0xA0 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x8107 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 DUP6 SUB PUSH1 0xA0 DUP2 SLT ISZERO PUSH2 0x8EB1 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x60 DUP2 SLT ISZERO PUSH2 0x8EBE JUMPI DUP2 DUP3 REVERT JUMPDEST POP PUSH2 0x8EC9 PUSH1 0x60 PUSH2 0xA09A JUMP JUMPDEST DUP5 MLOAD DUP2 MSTORE PUSH1 0x20 DUP6 ADD MLOAD PUSH1 0x5 DUP2 LT PUSH2 0x8EDE JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP6 ADD MLOAD PUSH2 0x8EF1 DUP2 PUSH2 0xA183 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP6 ADD MLOAD SWAP1 SWAP4 POP PUSH2 0x8F07 DUP2 PUSH2 0xA183 JUMP JUMPDEST PUSH1 0x80 DUP6 ADD MLOAD SWAP1 SWAP3 POP PUSH2 0x8514 DUP2 PUSH2 0xA150 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x8F29 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH3 0xFFFFFF DUP2 AND DUP2 EQ PUSH2 0x2B05 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x8F4D JUMPI DUP2 DUP3 REVERT JUMPDEST POP POP DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD MLOAD SWAP1 SWAP3 SWAP1 SWAP2 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x8F6F JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x2B05 DUP2 PUSH2 0xA198 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD DUP4 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x8FBF JUMPI DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x8F9A JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD DUP4 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x8FBF JUMPI DUP2 MLOAD DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x8FDD JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x9011 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0xA102 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP4 MSTORE PUSH1 0x20 DUP1 DUP4 ADD MLOAD ISZERO ISZERO SWAP1 DUP5 ADD MSTORE PUSH1 0x40 DUP1 DUP4 ADD MLOAD SWAP1 SWAP2 AND SWAP1 DUP4 ADD MSTORE PUSH1 0x60 SWAP1 DUP2 ADD MLOAD ISZERO ISZERO SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP4 MSTORE PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x40 PUSH1 0x20 DUP6 ADD MSTORE PUSH2 0xFFC PUSH1 0x40 DUP6 ADD DUP3 PUSH2 0x8FF9 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP4 MSTORE PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 DUP3 AND PUSH1 0x20 DUP7 ADD MSTORE DUP1 PUSH1 0x40 DUP6 ADD MLOAD AND PUSH1 0x40 DUP7 ADD MSTORE DUP1 PUSH1 0x60 DUP6 ADD MLOAD AND PUSH1 0x60 DUP7 ADD MSTORE POP POP PUSH1 0x80 DUP3 ADD MLOAD PUSH1 0xA0 PUSH1 0x80 DUP6 ADD MSTORE PUSH2 0xFFC PUSH1 0xA0 DUP6 ADD DUP3 PUSH2 0x8FF9 JUMP JUMPDEST PUSH2 0x90D1 DUP3 DUP3 MLOAD PUSH2 0x8F7A JUMP JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD PUSH2 0x90E3 PUSH1 0x20 DUP5 ADD DUP3 PUSH2 0x8F7A JUMP JUMPDEST POP PUSH1 0x40 DUP2 ADD MLOAD PUSH2 0x90F6 PUSH1 0x40 DUP5 ADD DUP3 PUSH2 0x91C6 JUMP JUMPDEST POP PUSH1 0x60 DUP2 ADD MLOAD PUSH2 0x9109 PUSH1 0x60 DUP5 ADD DUP3 PUSH2 0x91C6 JUMP JUMPDEST POP PUSH1 0x80 DUP2 ADD MLOAD PUSH2 0x911C PUSH1 0x80 DUP5 ADD DUP3 PUSH2 0x91C6 JUMP JUMPDEST POP PUSH1 0xA0 DUP2 ADD MLOAD PUSH2 0x912F PUSH1 0xA0 DUP5 ADD DUP3 PUSH2 0x8F7A JUMP JUMPDEST POP PUSH1 0xC0 DUP2 ADD MLOAD PUSH2 0x9142 PUSH1 0xC0 DUP5 ADD DUP3 PUSH2 0x8F7A JUMP JUMPDEST POP PUSH1 0xE0 DUP2 ADD MLOAD PUSH2 0x9155 PUSH1 0xE0 DUP5 ADD DUP3 PUSH2 0x8F7A JUMP JUMPDEST POP PUSH2 0x100 DUP1 DUP3 ADD MLOAD PUSH2 0x9169 DUP3 DUP6 ADD DUP3 PUSH2 0x8F7A JUMP JUMPDEST POP POP PUSH2 0x120 DUP2 DUP2 ADD MLOAD SWAP1 DUP4 ADD MSTORE PUSH2 0x140 DUP1 DUP3 ADD MLOAD PUSH2 0x9189 DUP3 DUP6 ADD DUP3 PUSH2 0x91D3 JUMP JUMPDEST POP POP PUSH2 0x160 SWAP1 DUP2 ADD MLOAD SWAP2 ADD MSTORE JUMP JUMPDEST DUP1 MLOAD PUSH2 0x91A2 DUP2 PUSH2 0xA12E JUMP JUMPDEST DUP3 MSTORE PUSH1 0x20 DUP2 DUP2 ADD MLOAD PUSH1 0xFF AND SWAP1 DUP4 ADD MSTORE PUSH1 0x40 DUP1 DUP3 ADD MLOAD SWAP1 DUP4 ADD MSTORE PUSH1 0x60 SWAP1 DUP2 ADD MLOAD SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP4 CALLDATACOPY SWAP2 ADD SWAP1 DUP2 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x9202 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0xA102 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE SWAP1 ISZERO ISZERO PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE DUP3 ISZERO ISZERO PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x2CB2 SWAP1 DUP4 ADD DUP5 PUSH2 0x8FF9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x80 PUSH1 0x40 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x92D7 SWAP1 DUP4 ADD DUP6 PUSH2 0x8FF9 JUMP JUMPDEST SWAP1 POP DUP3 PUSH1 0x60 DUP4 ADD MSTORE SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND DUP2 MSTORE PUSH1 0x40 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0xFFC SWAP1 DUP4 ADD DUP5 PUSH2 0x8F87 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND DUP2 MSTORE PUSH1 0x60 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x9354 SWAP1 DUP4 ADD DUP6 PUSH2 0x8F87 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x2CB2 DUP2 DUP6 PUSH2 0x8F87 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP2 MSTORE PUSH1 0x80 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x938A SWAP1 DUP4 ADD DUP7 PUSH2 0x8F87 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x939C DUP2 DUP7 PUSH2 0x8FCA JUMP JUMPDEST SWAP1 POP DUP3 DUP2 SUB PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0x6E98 DUP2 DUP6 PUSH2 0x8FCA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND DUP2 MSTORE PUSH1 0x60 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x93D4 SWAP1 DUP4 ADD DUP6 PUSH2 0x8FCA JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x2CB2 DUP2 DUP6 PUSH2 0x8FCA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE ISZERO ISZERO PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND DUP2 MSTORE PUSH1 0x40 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0xFFC SWAP1 DUP4 ADD DUP5 PUSH2 0x8FF9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP2 MSTORE PUSH1 0x0 PUSH2 0x943C DUP6 PUSH2 0xA12E JUMP JUMPDEST DUP5 PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x80 PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x9456 PUSH1 0x80 DUP4 ADD DUP6 PUSH2 0x8FCA JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0x6E98 DUP2 DUP6 PUSH2 0x8FCA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 DUP2 AND DUP3 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x100 SWAP1 PUSH2 0x9485 DUP12 PUSH2 0xA12E JUMP JUMPDEST DUP11 PUSH1 0x20 DUP6 ADD MSTORE DUP2 PUSH1 0x40 DUP6 ADD MSTORE PUSH2 0x949D DUP3 DUP6 ADD DUP12 PUSH2 0x8FCA JUMP JUMPDEST SWAP2 POP DUP4 DUP3 SUB PUSH1 0x60 DUP6 ADD MSTORE PUSH2 0x94B1 DUP3 DUP11 PUSH2 0x8FCA JUMP JUMPDEST SWAP1 DUP9 AND PUSH1 0x80 DUP6 ADD MSTORE SWAP1 POP PUSH2 0x94C4 DUP7 PUSH2 0xA12E JUMP JUMPDEST DUP6 PUSH1 0xA0 DUP5 ADD MSTORE DUP3 DUP2 SUB PUSH1 0xC0 DUP5 ADD MSTORE PUSH2 0x94DC DUP2 DUP7 PUSH2 0x8FCA JUMP JUMPDEST SWAP1 POP DUP3 DUP2 SUB PUSH1 0xE0 DUP5 ADD MSTORE PUSH2 0x59B1 DUP2 DUP6 PUSH2 0x8FCA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 MSTORE PUSH2 0x9503 PUSH1 0x60 DUP4 ADD DUP7 PUSH2 0x8F87 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x9515 DUP2 DUP7 PUSH2 0x8FCA JUMP JUMPDEST SWAP1 POP DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x2CB2 DUP2 DUP6 PUSH2 0x8FCA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 MSTORE PUSH2 0x953C PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x8F87 JUMP JUMPDEST SWAP1 POP DUP3 PUSH1 0x20 DUP4 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD PUSH1 0x60 DUP4 MSTORE DUP1 DUP7 MLOAD DUP1 DUP4 MSTORE PUSH1 0x80 DUP6 ADD SWAP2 POP PUSH1 0x20 SWAP3 POP PUSH1 0x80 DUP4 DUP3 MUL DUP7 ADD ADD DUP4 DUP10 ADD DUP6 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x95A0 JUMPI PUSH1 0x7F NOT DUP9 DUP5 SUB ADD DUP6 MSTORE PUSH2 0x958E DUP4 DUP4 MLOAD PUSH2 0x8FF9 JUMP JUMPDEST SWAP5 DUP7 ADD SWAP5 SWAP3 POP SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x9572 JUMP JUMPDEST POP POP DUP6 DUP2 SUB DUP5 DUP8 ADD MSTORE PUSH2 0x95B3 DUP2 DUP10 PUSH2 0x8FCA JUMP JUMPDEST SWAP4 POP POP POP POP DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x2CB2 DUP2 DUP6 PUSH2 0x8FCA JUMP JUMPDEST PUSH1 0x0 PUSH1 0xC0 DUP3 MSTORE PUSH2 0x95DD PUSH1 0xC0 DUP4 ADD DUP10 PUSH2 0x8F87 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP8 SWAP1 SWAP8 MSTORE POP PUSH1 0x40 DUP2 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x60 DUP6 ADD MSTORE SWAP2 AND PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 SWAP1 SWAP2 ADD MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 PUSH1 0x40 SWAP1 DUP2 DUP6 ADD SWAP1 DUP1 DUP5 MUL DUP7 ADD DUP4 ADD DUP8 DUP6 ADD DUP7 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x9677 JUMPI DUP9 DUP4 SUB PUSH1 0x3F NOT ADD DUP6 MSTORE DUP2 MLOAD DUP1 MLOAD DUP8 DUP6 MSTORE PUSH2 0x9658 DUP9 DUP7 ADD DUP3 PUSH2 0x8FF9 JUMP JUMPDEST SWAP2 DUP10 ADD MLOAD ISZERO ISZERO SWAP5 DUP10 ADD SWAP5 SWAP1 SWAP5 MSTORE SWAP5 DUP8 ADD SWAP5 SWAP3 POP SWAP1 DUP7 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x9634 JUMP JUMPDEST POP SWAP1 SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x2B05 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x8FCA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 MSTORE PUSH2 0x96AB PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x8FCA JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x6864 DUP2 DUP6 PUSH2 0x8FCA JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST DUP5 ISZERO ISZERO DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x80 PUSH1 0x40 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x9456 SWAP1 DUP4 ADD DUP6 PUSH2 0x8FCA JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP3 MSTORE PUSH1 0x80 PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x938A PUSH1 0x80 DUP4 ADD DUP7 PUSH2 0x8FF9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP7 AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND PUSH1 0x20 DUP4 ADD MSTORE DUP5 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0xA0 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x9752 SWAP1 DUP4 ADD DUP6 PUSH2 0x8FF9 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x80 DUP5 ADD MSTORE PUSH2 0x5C75 DUP2 DUP6 PUSH2 0x8FCA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP7 AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND PUSH1 0x20 DUP4 ADD MSTORE DUP5 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0xA0 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x97A0 SWAP1 DUP4 ADD DUP6 PUSH2 0x8FF9 JUMP JUMPDEST SWAP1 POP DUP3 PUSH1 0x80 DUP4 ADD MSTORE SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x2B05 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x8FF9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND DUP3 MSTORE DUP6 DUP2 AND PUSH1 0x20 DUP4 ADD MSTORE DUP5 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0xA0 PUSH1 0x80 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x6E98 SWAP1 DUP4 ADD DUP5 PUSH2 0x8FF9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH3 0xFFFFFF SWAP1 SWAP2 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP6 DUP7 AND DUP2 MSTORE SWAP4 DUP6 AND PUSH1 0x20 DUP6 ADD MSTORE PUSH1 0x40 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP4 ADD MSTORE SWAP1 SWAP2 AND PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP6 DUP7 AND DUP2 MSTORE SWAP4 SWAP1 SWAP5 AND PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x40 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xA0 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 DUP2 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP10 SWAP1 MSTORE DUP8 DUP2 AND PUSH1 0x40 DUP4 ADD MSTORE DUP7 DUP2 AND PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 DUP3 ADD DUP7 SWAP1 MSTORE PUSH1 0xA0 DUP3 ADD DUP6 SWAP1 MSTORE DUP4 AND PUSH1 0xC0 DUP3 ADD MSTORE PUSH2 0x100 PUSH1 0xE0 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x59B1 DUP4 DUP3 ADD DUP6 PUSH2 0x8FF9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE SWAP3 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP6 DUP7 AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP5 SWAP1 SWAP5 MSTORE SWAP2 SWAP1 SWAP4 AND PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x80 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xA0 ADD SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH2 0x9946 DUP6 PUSH2 0xA12E JUMP JUMPDEST SWAP4 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH1 0x8 DUP6 LT PUSH2 0x9946 JUMPI INVALID JUMPDEST PUSH1 0xF SWAP5 DUP6 SIGNEXTEND DUP2 MSTORE SWAP3 SWAP1 SWAP4 SIGNEXTEND PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0xFF SWAP1 SWAP2 AND PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x24 SWAP1 DUP3 ADD MSTORE PUSH32 0x556E6973776170563353616D706C65722F746F6B656E5061746820746F6F2073 PUSH1 0x40 DUP3 ADD MSTORE PUSH4 0x1A1BDC9D PUSH1 0xE2 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x18 SWAP1 DUP3 ADD MSTORE PUSH32 0x4D6978696E556E69737761702F4E4F5F45584348414E47450000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2C SWAP1 DUP3 ADD MSTORE PUSH32 0x4D6978696E42616E636F722F504154485F4C454E4754485F4D5553545F42455F PUSH1 0x40 DUP3 ADD MSTORE PUSH12 0x41545F4C454153545F54574F PUSH1 0xA0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x3A SWAP1 DUP3 ADD MSTORE PUSH32 0x4D6978696E4B79626572446D6D2F4C4153545F454C454D454E545F4F465F5041 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x54485F4D5553545F4D415443485F4F55545055545F544F4B454E000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x556E6973776170563353616D706C65722F696E76616C69642070617468206C65 PUSH1 0x40 DUP3 ADD MSTORE PUSH5 0x6E67746873 PUSH1 0xD8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2F SWAP1 DUP3 ADD MSTORE PUSH32 0x4D6978696E556E697377617056322F504154485F4C454E4754485F4D5553545F PUSH1 0x40 DUP3 ADD MSTORE PUSH15 0x42455F41545F4C454153545F54574F PUSH1 0x88 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x23 SWAP1 DUP3 ADD MSTORE PUSH32 0x4D6978696E4B79626572446D6D2F41525241595F4C454E4754485F4D49534D41 PUSH1 0x40 DUP3 ADD MSTORE PUSH3 0xA8869 PUSH1 0xEB SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x537761702053616D706C652073686F756C642068617665207265766572746564 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x38 SWAP1 DUP3 ADD MSTORE PUSH32 0x4D6978696E42616E636F722F4C4153545F454C454D454E545F4F465F50415448 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x5F4D5553545F4D415443485F4F55545055545F544F4B454E0000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2F SWAP1 DUP3 ADD MSTORE PUSH32 0x4D6978696E4B79626572446D6D2F504F4F4C535F4C454E4754485F4D5553545F PUSH1 0x40 DUP3 ADD MSTORE PUSH15 0x42455F41545F4C454153545F4F4E45 PUSH1 0x88 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x3B SWAP1 DUP3 ADD MSTORE PUSH32 0x4D6978696E556E697377617056322F4C4153545F454C454D454E545F4F465F50 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x4154485F4D5553545F4D415443485F4F55545055545F544F4B454E0000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 SWAP2 DUP3 ADD MLOAD SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 DUP1 DUP4 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND SWAP1 DUP3 ADD MSTORE PUSH1 0x40 DUP1 DUP4 ADD MLOAD PUSH1 0xF SWAP1 DUP2 SIGNEXTEND SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 SWAP3 DUP4 ADD MLOAD SWAP1 SIGNEXTEND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE DUP3 MLOAD PUSH1 0xA0 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x9D69 PUSH1 0xC0 DUP5 ADD DUP3 PUSH2 0x8FF9 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x20 DUP6 ADD MLOAD AND PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x40 DUP5 ADD MLOAD PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x60 DUP5 ADD MLOAD PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0x80 DUP5 ADD MLOAD PUSH1 0xA0 DUP5 ADD MSTORE DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 MSTORE PUSH2 0x9DB8 PUSH1 0x60 DUP4 ADD DUP7 PUSH2 0x905A JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x9DCA DUP2 DUP7 PUSH2 0x905A JUMP JUMPDEST SWAP2 POP POP DUP3 PUSH1 0x40 DUP4 ADD MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 MSTORE PUSH2 0x9DEE PUSH1 0x80 DUP4 ADD DUP8 PUSH2 0x905A JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x9E00 DUP2 DUP8 PUSH2 0x905A JUMP JUMPDEST PUSH1 0x40 DUP5 ADD SWAP6 SWAP1 SWAP6 MSTORE POP POP PUSH1 0x60 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x2B05 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x9079 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 MSTORE PUSH2 0x9E3A PUSH1 0x80 DUP4 ADD DUP8 PUSH2 0x9079 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP6 SWAP1 SWAP6 MSTORE POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x40 DUP3 ADD MSTORE SWAP2 AND PUSH1 0x60 SWAP1 SWAP2 ADD MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x200 DUP2 ADD PUSH2 0x9E6F DUP3 DUP6 PUSH2 0x90C6 JUMP JUMPDEST PUSH2 0x2B05 PUSH2 0x180 DUP4 ADD DUP5 PUSH2 0x9197 JUMP JUMPDEST PUSH2 0x220 DUP2 ADD PUSH2 0x9E8C DUP3 DUP7 PUSH2 0x90C6 JUMP JUMPDEST PUSH2 0x9E9A PUSH2 0x180 DUP4 ADD DUP6 PUSH2 0x9197 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND PUSH2 0x200 SWAP2 SWAP1 SWAP2 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD MLOAD AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xE0 DUP3 MSTORE DUP6 MLOAD PUSH1 0xE0 DUP4 ADD MSTORE PUSH1 0x20 DUP7 ADD MLOAD PUSH1 0x2 DUP2 LT PUSH2 0x9EF3 JUMPI INVALID JUMPDEST PUSH2 0x100 DUP4 ADD MSTORE PUSH1 0x40 DUP7 ADD MLOAD PUSH2 0x9F0C PUSH2 0x120 DUP5 ADD DUP3 PUSH2 0x8F7A JUMP JUMPDEST POP PUSH1 0x60 DUP7 ADD MLOAD PUSH2 0x9F20 PUSH2 0x140 DUP5 ADD DUP3 PUSH2 0x8F7A JUMP JUMPDEST POP PUSH1 0x80 DUP7 ADD MLOAD PUSH2 0x160 DUP4 ADD MSTORE PUSH1 0xA0 DUP7 ADD MLOAD PUSH1 0xC0 PUSH2 0x180 DUP5 ADD MSTORE PUSH2 0x9F47 PUSH2 0x1A0 DUP5 ADD DUP3 PUSH2 0x8FF9 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x9F57 PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x9025 JUMP JUMPDEST PUSH1 0xA0 DUP3 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0xC0 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP8 DUP3 MSTORE DUP7 PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0xC0 PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x9F88 PUSH1 0xC0 DUP4 ADD DUP8 PUSH2 0x8F87 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0x9F9A DUP2 DUP8 PUSH2 0x8F87 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP6 SWAP1 SWAP6 AND PUSH1 0x80 DUP5 ADD MSTORE POP POP PUSH1 0xA0 ADD MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP7 DUP3 MSTORE DUP6 PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0xA0 PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x9FD8 PUSH1 0xA0 DUP4 ADD DUP7 PUSH2 0x8F87 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 SWAP1 SWAP5 AND PUSH1 0x60 DUP4 ADD MSTORE POP PUSH1 0x80 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP5 DUP3 MSTORE DUP4 PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x60 PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0xFF9 PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x8FF9 JUMP JUMPDEST SWAP5 DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x40 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 ADD SWAP1 JUMP JUMPDEST SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH1 0x1E NOT DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0xA06C JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 ADD DUP1 CALLDATALOAD SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0xA085 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x20 ADD SWAP2 POP CALLDATASIZE DUP2 SWAP1 SUB DUP3 SGT ISZERO PUSH2 0x429B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0xA0B8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0xA0D5 JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0xA0F4 JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xA11D JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xA105 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x7765 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x4 DUP2 LT PUSH2 0xA138 JUMPI INVALID JUMPDEST POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xA138 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xA138 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0xA138 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0xF SIGNEXTEND DUP2 EQ PUSH2 0xA138 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xA138 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0xA138 JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBD 0xCF 0xDB 0x4E JUMPDEST 0xE1 0x29 0x2B LOG1 DIFFICULTY SWAP10 0xCA 0x5F 0xA6 PUSH2 0xA2FD CALLER PUSH12 0xCE94F5D892B3195F8D2618F9 0x4B PUSH5 0x736F6C6343 STOP MOD 0xC STOP CALLER ",
                "sourceMapi;:::-;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;4230:977:19;;;;;;;;;;-1:-1:-1;4230:977:19;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;2255:1032:3:-;;;;;;;;;;-1:-1:-1;2255:1032:3;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;:::i;1089:466:18:-;;;;;;;;;;-1:-1:-1;1089:466:18;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;2195:196:26:-;;;;;;;;;;-1:-1:-1;2195:196:26;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;3723:2460:21:-;;;;;;;;;;-1:-1:-1;3723:2460:21;;;;;:::i;:::-;;:::i;:::-;;2932:677:23;;;;;;;;;;-1:-1:-1;2932:677:23;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;1496:829:17:-;;;;;;;;;;-1:-1:-1;1496:829:17;;;;;:::i;:::-;;:::i;2012:1338:5:-;;;;;;;;;;-1:-1:-1;2012:1338:5;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;:::i;1744:619:16:-;;;;;;;;;;-1:-1:-1;1744:619:16;;;;;:::i;:::-;;:::i;1690:612:24:-;;;;;;;;;;-1:-1:-1;1690:612:24;;;;;:::i;:::-;;:::i;3298:1192:13:-;;;;;;;;;;-1:-1:-1;3298:1192:13;;;;;:::i;:::-;;:::i;5338:2595:14:-;;;;;;;;;;-1:-1:-1;5338:2595:14;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;2862:695:1:-;;;;;;;;;;-1:-1:-1;2862:695:1;;;;;:::i;:::-;;:::i;1570:348:25:-;;;;;;;;;;-1:-1:-1;1570:348:25;;;;;:::i;:::-;;:::i;873:378:9:-;;;;;;;;;;-1:-1:-1;873:378:9;;;;;:::i;:::-;;:::i;2888:667:20:-;;;;;;;;;;-1:-1:-1;2888:667:20;;;;;:::i;:::-;;:::i;5648:955:19:-;;;;;;;;;;-1:-1:-1;5648:955:19;;;;;:::i;:::-;;:::i;929:378:20:-;;;;;;;;;;-1:-1:-1;929:378:20;;;;;:::i;:::-;;:::i;2332:490:8:-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;2439:1876:25:-;;;;;;;;;;-1:-1:-1;2439:1876:25;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;:::i;946:381:26:-;;;;;;;;;;-1:-1:-1;946:381:26;;;;;:::i;:::-;;:::i;879:384:1:-;;;;;;;;;;-1:-1:-1;879:384:1;;;;;:::i;:::-;;:::i;3919:339:3:-;;;;;;;;;;-1:-1:-1;3919:339:3;;;;;:::i;:::-;;:::i;2483:1014:21:-;;;;;;;;;;-1:-1:-1;2483:1014:21;;;;;:::i;:::-;;:::i;1152:345:13:-;;;;;;;;;;-1:-1:-1;1152:345:13;;;;;:::i;:::-;;:::i;2397:727:26:-;;;;;;;;;;-1:-1:-1;2397:727:26;;;;;:::i;:::-;;:::i;2331:858:17:-;;;;;;;;;;-1:-1:-1;2331:858:17;;;;;:::i;:::-;;:::i;3152:1029:4:-;;;;;;;;;;-1:-1:-1;3152:1029:4;;;;;:::i;:::-;;:::i;1156:458::-;;;;;;;;;;-1:-1:-1;1156:458:4;;;;;:::i;:::-;;:::i;2872:709:2:-;;;;;;;;;;-1:-1:-1;2872:709:2;;;;;:::i;:::-;;:::i;1684:118:47:-;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;888:1711:22:-;;;;;;;;;;-1:-1:-1;888:1711:22;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;:::i;929:347:24:-;;;;;;;;;;-1:-1:-1;929:347:24;;;;;:::i;:::-;;:::i;1749:631:1:-;;;;;;;;;;-1:-1:-1;1749:631:1;;;;;:::i;:::-;;:::i;885:388:2:-;;;;;;;;;;-1:-1:-1;885:388:2;;;;;:::i;:::-;;:::i;6743:1029:19:-;;;;;;;;;;-1:-1:-1;6743:1029:19;;;;;:::i;:::-;;:::i;4259:1073:14:-;;;;;;;;;;-1:-1:-1;4259:1073:14;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;:::i;1400:697::-;;;;;;;;;;-1:-1:-1;1400:697:14;;;;;:::i;:::-;;:::i;1812:694:15:-;;;;;;;;;;-1:-1:-1;1812:694:15;;;;;:::i;:::-;;:::i;2151:937:6:-;;;;;;;;;;-1:-1:-1;2151:937:6;;;;;:::i;:::-;;:::i;1736:617:9:-;;;;;;;;;;-1:-1:-1;1736:617:9;;;;;:::i;:::-;;:::i;1212:421:3:-;;;;;;;;;;-1:-1:-1;1212:421:3;;;;;:::i;:::-;;:::i;2090:814:18:-;;;;;;;;;;-1:-1:-1;2090:814:18;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;:::i;964:462:23:-;;;;;;;;;;-1:-1:-1;964:462:23;;;;;:::i;:::-;;:::i;2840:677:16:-;;;;;;;;;;-1:-1:-1;2840:677:16;;;;;:::i;:::-;;:::i;1750:649:2:-;;;;;;;;;;-1:-1:-1;1750:649:2;;;;;:::i;:::-;;:::i;1333:415:26:-;;;;;;;;;;-1:-1:-1;1333:415:26;;;;;:::i;:::-;;:::i;2067:636:4:-;;;;;;;;;;-1:-1:-1;2067:636:4;;;;;:::i;:::-;;:::i;3020:769:15:-;;;;;;;;;;-1:-1:-1;3020:769:15;;;;;:::i;:::-;;:::i;1059:384:17:-;;;;;;;;;;-1:-1:-1;1059:384:17;;;;;:::i;:::-;;:::i;1897:619:23:-;;;;;;;;;;-1:-1:-1;1897:619:23;;;;;:::i;:::-;;:::i;2713:872:24:-;;;;;;;;;;-1:-1:-1;2713:872:24;;;;;:::i;:::-;;:::i;2835:675:9:-;;;;;;;;;;-1:-1:-1;2835:675:9;;;;;:::i;:::-;;:::i;2669:1017:14:-;;;;;;;;;;-1:-1:-1;2669:1017:14;;;;;:::i;:::-;;:::i;1071:338:5:-;;;;;;;;;;-1:-1:-1;1071:338:5;;;;;:::i;:::-;;:::i;897:397:15:-;;;;;;;;;;-1:-1:-1;897:397:15;;;;;:::i;:::-;;:::i;877:382:16:-;;;;;;;;;;-1:-1:-1;877:382:16;;;;;:::i;:::-;;:::i;3742:1004:6:-;;;;;;;;;;-1:-1:-1;3742:1004:6;;;;;:::i;:::-;;:::i;3950:1574:5:-;;;;;;;;;;-1:-1:-1;3950:1574:5;;;;;:::i;:::-;;:::i;1754:435:26:-;;;;;;;;;;-1:-1:-1;1754:435:26;;;;;:::i;:::-;;:::i;1796:611:20:-;;;;;;;;;;-1:-1:-1;1796:611:20;;;;;:::i;:::-;;:::i;1149:342:6:-;;;;;;;;;;-1:-1:-1;1149:342:6;;;;;:::i;:::-;;:::i;3436:870:18:-;;;;;;;;;;-1:-1:-1;3436:870:18;;;;;:::i;:::-;;:::i;4833:2278:25:-;;;;;;;;;;-1:-1:-1;4833:2278:25;;;;;:::i;:::-;;:::i;2605:1848:22:-;;;;;;;;;;-1:-1:-1;2605:1848:22;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;:::i;1981:836:13:-;2164:22;2200:24;2238:34;2305:31;2323:6;2331:4;2305:17;:31::i;:::-;2297:39;;2350:5;:12;2366:1;2350:17;2346:90;;;2383:42;;2346:90;2477:333;2514:255;;;;;;;;2570:4;2575:1;2570:7;;;;;;;;;;;;;;-1:-1:-1;;;;;2514:255:13;;;;;2605:4;2624:1;2610:4;:11;:15;2605:21;;;;;;;;;;;;;;-1:-1:-1;;;;;2514:255:13;;;;;2667:6;2675:5;2682:4;2656:31;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;2656:31:13;;;;;;;;;2514:255;;;2727:4;2656:31;2514:255;;;2727:27;2514:255;;;;;;;2783:17;2477:23;:333::i;:::-;2446:364;;-1:-1:-1;2446:364:13;-1:-1:-1;1981:836:13;;;;;;;;:::o;4230:977:19:-;4457:47;4567:6;:13;-1:-1:-1;;;;;4553:28:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4553:28:19;;4520:61;;4596:9;4591:610;4616:6;:13;4611:1;:18;4591:610;;4670:4;-1:-1:-1;;;;;4670:37:19;;3715:5;4797:6;4804:1;4797:9;;;;;;;;;;;;;;4831:15;4847:1;4831:18;;;;;;;;;;;;;;4874:8;4670:234;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4670:234:19;;;;;;;;-1:-1:-1;;4670:234:19;;;;;;;;;;;;:::i;:::-;;;4650:541;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5175:1;5139:30;5170:1;5139:33;;;;;;;;;;;;;:37;;;;;5034:157;4650:541;;;5012:6;4976:30;5007:1;4976:33;;;;;;;;;;;;;:42;;;;;4921:112;4650:541;4631:3;;4591:610;;;;4230:977;;;;;:::o;2255:1032:3:-;2476:21;2511;2546:24;2584:34;2647:4;:10;;;:17;2668:1;2647:22;2643:109;;;2685:56;;2643:109;2786:62;2800:4;2806:10;2818;2830:17;2786:13;:62::i;:::-;2762:86;;;;;;;;2890:323;2927:245;;;;;;;;2983:10;-1:-1:-1;;;;;2927:245:3;;;;;3021:10;-1:-1:-1;;;;;2927:245:3;;;;;3072:13;3087:4;3061:31;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;3061:31:3;;;;;;;;;2927:245;;;3132:4;3061:31;2927:245;;;3132:25;2927:245;;;;;;;3186:17;2890:23;:323::i;:::-;2859:354;;-1:-1:-1;2859:354:3;-1:-1:-1;2255:1032:3;;;;;;;;;;:::o;1089:466:18:-;1282:7;1312:236;1364:42;1436:9;1475:8;1498:16;1528:10;1312:23;:236::i;:::-;1305:243;;1089:466;;;;;;;:::o;2195:196:26:-;2338:20;;2376:8;;2195:196;;;;:::o;3723:2460:21:-;3932:28;3984:9;3932:63;;4129:16;4148:9;4177:1;4158:9;:16;:20;4148:31;;;;;;;;;;;;;;4129:50;;4262:15;-1:-1:-1;;;;;4262:27:21;;4290:4;4262:33;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4246:71;4374:52;;-1:-1:-1;;;4374:52:21;;-1:-1:-1;;;;;4374:27:21;;;;;:52;;4410:4;;4417:8;;4374:52;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4358:90;4497:9;-1:-1:-1;;;;;4474:42:21;;4525:8;4474:63;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4458:101;5160:27;5204:9;:16;-1:-1:-1;;;;;5190:31:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5190:31:21;;5160:61;;5231:24;5272:9;:16;-1:-1:-1;;;;;5258:31:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5258:31:21;;5231:58;;5305:9;5300:791;5324:9;:16;5320:1;:20;5300:791;;;5381:4;-1:-1:-1;;;;;5381:16:21;;5403:3;5429:8;5459:9;5490:8;5520:10;5552:9;5562:1;5552:12;;;;;;;;;;;;;;5381:201;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5361:720;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5805:38;5836:6;5805:30;:38::i;:::-;5776:10;5787:1;5776:13;;;;;;;;;;;;;5791:7;5799:1;5791:10;;;;;;;;;;;;;5775:68;;;;;;;;;;6001:10;6012:1;6001:13;;;;;;;;;;;;;;6018:1;6001:18;5997:70;;;6043:5;;;5997:70;5679:402;5361:720;;;5613:50;;-1:-1:-1;;;5613:50:21;;;;;;;:::i;:::-;;;;;;;;;5342:3;;5300:791;;;;6138:38;6156:10;6168:7;6138:17;:38::i;:::-;3723:2460;;;;;;;;;:::o;2932:677:23:-;3125:24;3151:34;3232:370;3272:289;;;;;;;;3331:10;-1:-1:-1;;;;;3272:289:23;;;;;3369:10;-1:-1:-1;;;;;3272:289:23;;;;;3423:6;3412:18;;;;;;;;:::i;:::-;;;;;;;;;;;;;3272:289;;;;3473:6;3462:18;;;;;;;;:::i;:::-;;;;-1:-1:-1;;3462:18:23;;;;;;;;;3272:289;;;3520:4;3462:18;3272:289;;;3520:26;3272:289;;;;;;;3575:17;3232:26;:370::i;:::-;3201:401;;;;-1:-1:-1;2932:677:23;-1:-1:-1;;;;;2932:677:23:o;1496:829:17:-;1704:24;1730:34;1811:507;1848:429;;;;;;;;1904:10;-1:-1:-1;;;;;1848:429:17;;;;;1942:10;-1:-1:-1;;;;;1848:429:17;;;;;2014:163;;;;;;;;2071:7;:18;;;-1:-1:-1;;;;;2014:163:17;;;;;2131:7;:23;;;-1:-1:-1;;;;;2014:163:17;;;;1982:213;;;;;;;;:::i;:::-;;;;-1:-1:-1;;1982:213:17;;;;;;;;;1848:429;;;2235:4;1982:213;1848:429;;;2235:27;1848:429;;;;;;;2291:17;1811:23;:507::i;2012:1338:5:-;2229:13;2256:12;2282:24;2320:34;2395:4;:13;;;-1:-1:-1;;;;;2386:31:5;;2418:10;2430;2386:55;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2379:62;-1:-1:-1;2451:17:5;-1:-1:-1;;;;;2548:18:5;;;2544:429;;-1:-1:-1;2629:4:5;;-1:-1:-1;2594:10:5;2544:429;;;2680:13;;2671:55;;-1:-1:-1;;;2671:55:5;;-1:-1:-1;;;;;2671:31:5;;;;;;:55;;2703:10;;2715;;2671:55;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2664:62;-1:-1:-1;;;;;;2784:27:5;;2780:117;;2831:51;;;2780:117;-1:-1:-1;2957:5:5;;-1:-1:-1;2922:10:5;2544:429;3014:329;3051:251;;;;;;;;3107:10;-1:-1:-1;;;;;3051:251:5;;;;;3145:10;-1:-1:-1;;;;;3051:251:5;;;;;3196:4;:11;;;3209:4;3215:8;3185:39;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;3185:39:5;;;;;;;;;3051:251;;;3264:4;3185:39;3051:251;;;3264:23;3051:251;;;;;;;3316:17;3014:23;:329::i;:::-;2983:360;;-1:-1:-1;2983:360:5;-1:-1:-1;;2012:1338:5;;;;;;;;;:::o;1744:619:16:-;1938:24;1964:34;2045:311;2082:233;;;;;;;;2138:10;-1:-1:-1;;;;;2082:233:16;;;;;2176:10;-1:-1:-1;;;;;2082:233:16;;;;;2227:6;2216:18;;;;;;;;:::i;:::-;;;;-1:-1:-1;;2216:18:16;;;;;;;;;2082:233;;;2274:4;2216:18;2082:233;;;2274:26;2082:233;;;;;;;2329:17;2045:23;:311::i;1690:612:24:-;1861:24;1887:34;1968:327;2005:249;;;;;;;;2061:4;2066:1;2061:7;;;;;;;;;;;;;;-1:-1:-1;;;;;2005:249:24;;;;;2096:4;2115:1;2101:4;:11;:15;2096:21;;;;;;;;;;;;;;-1:-1:-1;;;;;2005:249:24;;;;;2158:6;2166:4;2147:24;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;2147:24:24;;;;;;;;;2005:249;;;2211:4;2147:24;2005:249;;;2211:28;2005:249;;;;;;;2268:17;1968:23;:327::i;:::-;1937:358;;;;-1:-1:-1;1690:612:24;-1:-1:-1;;;;1690:612:24:o;3298:1192:13:-;3480:22;3516:24;3554:34;3621:31;3639:6;3647:4;3621:17;:31::i;:::-;3613:39;;3666:5;:12;3682:1;3666:17;3662:90;;;3699:42;;3662:90;3762:29;3808:4;:11;-1:-1:-1;;;;;3794:26:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3794:26:13;;3762:58;;3835:9;3830:110;3854:4;:11;3850:1;:15;3830:110;;;3904:4;3927:1;3923;3909:4;:11;:15;:19;3904:25;;;;;;;;;;;;;;3886:12;3899:1;3886:15;;;;;;;;-1:-1:-1;;;;;3886:43:13;;;:15;;;;;;;;;;;:43;3867:3;;3830:110;;;;3949:30;3982:39;4000:6;4008:12;3982:17;:39::i;:::-;3949:72;;4062:421;4102:340;;;;;;;;4161:4;4166:1;4161:7;;;;;;;;;;;;;;-1:-1:-1;;;;;4102:340:13;;;;;4196:4;4215:1;4201:4;:11;:15;4196:21;;;;;;;;;;;;;;-1:-1:-1;;;;;4102:340:13;;;;;4261:6;4269:5;4276:4;4250:31;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;4102:340;;;;4324:6;4332:13;4347:12;4313:47;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;4313:47:13;;;;;;;;;4102:340;;;4400:4;4313:47;4102:340;;;4400:27;4102:340;;;;;;;4456:17;4062:26;:421::i;:::-;4031:452;;-1:-1:-1;4031:452:13;-1:-1:-1;;;3298:1192:13;;;;;;;:::o;5338:2595:14:-;5669:16;;;;;5796;;;5810:1;5796:16;;;;;;;;;5535:17;;;;5810:1;5796:16;;;;5669;5796;;;;;-1:-1:-1;5796:16:14;5760:52;;5844:9;5822:16;5839:1;5822:19;;;;;;;;;;;;;;;;;:31;5863:28;5908:1;5894:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5894:16:14;;5863:47;;5939:4;:9;;;-1:-1:-1;;;;;5925:23:14;:10;-1:-1:-1;;;;;5925:23:14;;5921:2006;;;6012:289;;-1:-1:-1;;;6012:289:14;;-1:-1:-1;;;;;6012:29:14;;;;;993:5;;6012:289;;6130:10;;6166:34;;6226:16;;6268:11;;6012:289;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;6012:289:14;;;;;;;;;;;;:::i;:::-;;;5992:517;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6407:102;5992:517;;;6385:6;-1:-1:-1;6378:13:14;;-1:-1:-1;;;6378:13:14;5992:517;5921:2006;;;6543:4;:9;;;-1:-1:-1;;;;;6529:23:14;:10;-1:-1:-1;;;;;6529:23:14;;6525:1402;;;6616:289;;-1:-1:-1;;;6616:289:14;;-1:-1:-1;;;;;6616:29:14;;;;;993:5;;6616:289;;6734:10;;6770:34;;6830:16;;6872:11;;6616:289;;;:::i;6525:1402::-;7243:466;;-1:-1:-1;;;7243:466:14;;-1:-1:-1;;;;;7243:31:14;;;;;993:5;;7243:466;;7363:10;;7399:34;;7459:16;;7501:11;;7538:10;;7399:34;;7459:16;;7501:11;;7243:466;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;7243:466:14;;;;;;;;;;;;:::i;:::-;;;7223:694;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7815:102;7223:694;5338:2595;;;;;;;;;:::o;2862:695:1:-;3061:24;3087:34;3168:381;3208:300;;;;;;;;3267:10;-1:-1:-1;;;;;3208:300:1;;;;;3305:10;-1:-1:-1;;;;;3208:300:1;;;;;3359:11;3348:23;;;;;;;;:::i;:::-;;;;;;;;;;;;;3208:300;;;;3414:11;3403:23;;;;;;;;:::i;:::-;;;;-1:-1:-1;;3403:23:1;;;;;;;;;3208:300;;;3466:4;3403:23;3208:300;;;3466:27;3208:300;;;;;;;3522:17;3168:26;:381::i;1570:348:25:-;1763:7;1793:118;1837:9;1861:16;1891:10;1793:15;:118::i;873:378:9:-;1062:7;1092:152;1132:9;1171:8;1194:16;1224:10;1092:11;:152::i;2888:667:20:-;3077:24;3103:34;3184:364;3224:283;;;;;;;;3283:10;-1:-1:-1;;;;;3224:283:20;;;;;3321:10;-1:-1:-1;;;;;3224:283:20;;;;;3375:4;3364:16;;;;;;;;:::i;:::-;;;;;;;;;;;;;3224:283;;;;3423:4;3412:16;;;;;;;;:::i;:::-;;;;-1:-1:-1;;3412:16:20;;;;;;;;;3224:283;;;3468:4;3412:16;3224:283;;;3468:24;3224:283;;;;;;;3521:17;3184:26;:364::i;5648:955:19:-;5875:47;5971:119;6023:6;6043:15;6072:8;5971:38;:119::i;:::-;5938:152;;6231:9;6226:371;6250:6;:13;6246:1;:17;6226:371;;;6288:30;6319:1;6288:33;;;;;;;;;;;;;;6325:1;6288:38;6284:303;;6382:190;6435:30;6466:1;6435:33;;;;;;;;;;;;;;6490:6;6497:1;6490:9;;;;;;;;;;;;;;:21;;;-1:-1:-1;;;;;6382:190:19;6533:6;6540:1;6533:9;;;;;;;;;;;;;;:21;;;-1:-1:-1;;;;;6382:190:19;:31;:190::i;:::-;6346:30;6377:1;6346:33;;;;;;;;;;;;;:226;;;;;6284:303;6265:3;;6226:371;;929:378:20;1118:7;1148:152;1188:9;1227:8;1250:16;1280:10;1148:11;:152::i;2332:490:8:-;2429:32;2509:9;-1:-1:-1;;;;;2491:35:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;2477:49;;2541:9;2536:280;2556:21;;;2536:280;;2623:4;2598:11;2610:1;2598:14;;;;;;;;;;;;;;;;;;;:29;;;:22;;:29;2645:9;;2655:1;2645:12;;;;;;;;;;;;;;;;;;:::i;:::-;:24;2641:71;;-1:-1:-1;2641:71:8;;2689:8;;2641:71;2781:4;2792:9;;2802:1;2792:12;;;;;;;;;;;;;;;;;;:::i;:::-;2773:32;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2726:11;2738:1;2726:14;;;;;;;;;;;;;;:22;;2750:11;2762:1;2750:14;;;;;;;;;;;;;;;;;;2725:80;;;;;;;;;2536:280;2579:3;;2536:280;;;;2332:490;;;;:::o;2439:1876:25:-;2663:27;2704:24;2742:34;2801:35;2851:45;2870:6;-1:-1:-1;;;;;2870:14:25;;:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2888:4;2894:1;2851:18;:45::i;:::-;2801:95;;2941:17;:24;-1:-1:-1;;;;;2927:39:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2927:39:25;;2907:59;;3000:17;:24;-1:-1:-1;;;;;2986:39:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2986:39:25;;2976:49;;3062:17;:24;-1:-1:-1;;;;;3050:37:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3035:52;;3103:9;3098:1211;3122:9;:16;3118:1;:20;3098:1211;;;3159:25;3187:34;3202:4;3208:9;3218:1;3208:12;;;;;;;;;;;;;;3187:14;:34::i;:::-;3159:62;;3253:25;3296:35;3348:385;3389:295;;;;;;;;3457:4;3462:1;3457:7;;;;;;;;;;;;;;-1:-1:-1;;;;;3389:295:25;;;;;3505:4;3524:1;3510:4;:11;:15;3505:21;;;;;;;;;;;;;;-1:-1:-1;;;;;3389:295:25;;;;;3572:6;3580:12;3561:32;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;3561:32:25;;;;;;;;;3389:295;;;3637:4;3561:32;3389:295;;;3637:28;3389:295;;;;;;;3702:17;3348:23;:385::i;:::-;3235:498;;;;3752:9;3747:552;3771:18;:25;3767:1;:29;3747:552;;;3888:18;3907:1;3888:21;;;;;;;;;;;;;;3913:1;3888:26;3884:78;;;3938:5;;3884:78;4079:18;4098:1;4079:21;;;;;;;;;;;;;;4055:17;4073:1;4055:20;;;;;;;;;;;;;;:45;4051:234;;4147:18;4166:1;4147:21;;;;;;;;;;;;;;4124:17;4142:1;4124:20;;;;;;;;;;;;;:44;;;;;4203:8;4212:1;4203:11;;;;;;;;;;;;;;4190:7;4198:1;4190:10;;;;;;;;;;;;;:24;;;;;4254:12;4236;4249:1;4236:15;;;;;;;;;;;;;:30;;;;4051:234;3798:3;;3747:552;;;;3098:1211;;;3140:3;;;;;3098:1211;;;;2439:1876;;;;;;;;;:::o;946:381:26:-;1049:25;1115:6;:13;-1:-1:-1;;;;;1101:28:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1101:28:26;;1090:39;;1144:9;1139:182;1164:6;:13;1159:1;:18;1139:182;;1225:19;-1:-1:-1;;;;;1212:32:26;:6;1219:1;1212:9;;;;;;;;;;;;;;-1:-1:-1;;;;;1212:32:26;;:98;;1284:26;:6;1291:1;1284:9;;;;;;;;;;;;;;-1:-1:-1;;;;;1284:24:26;;:26::i;:::-;1212:98;;;1263:2;1212:98;1198:112;;:8;1207:1;1198:11;;;;;;;;;;;;;;;;;:112;1179:3;;1139:182;;;;946:381;;;:::o;879:384:1:-;1071:7;1101:155;1144:9;1183:8;1206:16;1236:10;1101:14;:155::i;3919:339:3:-;-1:-1:-1;4139:21:3;;4162;;-1:-1:-1;4162:21:3;;-1:-1:-1;4162:21:3;;-1:-1:-1;3919:339:3:o;2483:1014:21:-;-1:-1:-1;;;;;;;;;;2735:39:21;;:41;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2719:79;2834:15;2852:9;2834:27;;2900:12;2914:17;2943:4;-1:-1:-1;;;;;2935:18:21;2990:8;3000:9;3011:8;3021:10;3033:8;2967:75;;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;2967:75:21;;;;;;;;;;;;;;-1:-1:-1;;;;;2967:75:21;-1:-1:-1;;;;;;2967:75:21;;;;;;;;;;2935:117;;;;2967:75;2935:117;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2899:153;;;;3082:9;3072:7;:19;3062:29;;-1:-1:-1;;;;;;;;;;3163:34:21;;:36;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3163:36:21;;;;;;;;-1:-1:-1;;3163:36:21;;;;;;;;;;;;:::i;:::-;;;3147:169;;;;;3274:21;;;;3147:169;3331:7;3326:53;;3354:14;:4;:12;:14::i;:::-;3429:61;3464:4;3453:27;;;;;;;;;;;;:::i;:::-;3482:7;3429:23;:61::i;:::-;2483:1014;;;;;;;;:::o;1152:345:13:-;1344:7;1374:116;1417:8;1440:16;1470:10;1374:14;:116::i;2397:727:26:-;2785:4;2779:11;;2880:26;2607:17;;2880:26;;;-1:-1:-1;;2876:42:26;2866:53;;2853:67;;;2971:18;;;2779:11;2607:17;-1:-1:-1;2894:4:26;3083:15;;2619:4;3065:43;;2515:603;;;:::o;2331:858:17:-;2538:24;2564:34;2614:30;;:::i;:::-;2647:127;;;;;;;;2692:7;:18;;;-1:-1:-1;;;;;2647:127:17;;;;;2740:7;:23;;;-1:-1:-1;;;;;2647:127:17;;;;2614:160;;2815:367;2855:286;;;;;;;;2914:10;-1:-1:-1;;;;;2855:286:17;;;;;2952:10;-1:-1:-1;;;;;2855:286:17;;;;;3006:4;2995:16;;;;;;;;:::i;:::-;;;;;;;;;;;;;2855:286;;;;3054:4;3043:16;;;;;;;;:::i;:::-;;;;-1:-1:-1;;3043:16:17;;;;;;;;;2855:286;;;3099:4;3043:16;2855:286;;;3099:27;2855:286;;;;;;;3155:17;2815:26;:367::i;:::-;2784:398;;;;-1:-1:-1;2331:858:17;-1:-1:-1;;;;;;2331:858:17:o;3152:1029:4:-;3361:24;3387:34;3468:706;3508:625;;;;;;;;3567:10;-1:-1:-1;;;;;3508:625:4;;;;;3605:10;-1:-1:-1;;;;;3508:625:4;;;;;3659:9;3648:21;;;;;;;;:::i;:::-;;;;;;;;;;;;;3508:625;;;;3733:303;;;;;;;;3789:9;:22;;;-1:-1:-1;;;;;3733:303:4;;;;;3863:9;:34;;;-1:-1:-1;;;;;3733:303:4;;;;;;3936:9;:19;;;3733:303;;;;;;3992:9;:21;;;3733:303;;;;;3701:353;;;;;;;;:::i;:::-;;;;-1:-1:-1;;3701:353:4;;;;;;;;;3508:625;;;4094:4;3701:353;3508:625;;;4094:24;3508:625;;;;;;;4147:17;3468:26;:706::i;1156:458::-;1345:7;1375:232;1423:42;1495:9;1534:8;1557:16;1587:10;1375:19;:232::i;2872:709:2:-;3090:24;3116:34;3197:377;3237:296;;;;;;;;3296:10;-1:-1:-1;;;;;3237:296:2;;;;;3334:10;-1:-1:-1;;;;;3237:296:2;;;;;3388:8;3377:20;;;;;;;;:::i;:::-;;;;;;;;;;;;;3237:296;;;;3440:8;3429:20;;;;;;;;:::i;:::-;;;;-1:-1:-1;;3429:20:2;;;;;;;;;3237:296;;;3489:4;3429:20;3237:296;;;3489:29;3237:296;;;;;;;3547:17;3197:26;:377::i;1684:118:47:-;1759:42;1684:118;:::o;888:1711:22:-;1070:23;;:::i;:::-;1107:24;;:::i;:::-;1145:31;;;1269:596;1294:13;:20;1289:1;:25;1269:596;;1335:71;1391:2;1365:13;1379:1;1365:16;;;;;;;;;;;;;;:23;:28;1395:10;1335:13;1349:1;1335:16;;;;;;;;;;;;;;:29;;:71;;;;;:::i;:::-;1421:15;1438:23;1473:4;-1:-1:-1;;;;;1465:18:22;1484:13;1498:1;1484:16;;;;;;;;;;;;;;1465:36;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1420:81;;;;1519:10;1515:340;;;1549:14;1566:46;1609:2;1589:10;:17;:22;1566:10;:22;;:46;;;;:::i;:::-;1549:63;;1643:23;1634:6;:32;1630:211;;;1744:24;;;1790:19;;;:32;;;1716:6;-1:-1:-1;1716:6:22;1630:211;1515:340;;-1:-1:-1;;1316:3:22;;1269:596;;;-1:-1:-1;1878:28:22;1874:123;;1922:64;;1874:123;2011:9;2006:587;2031:14;:21;2026:1;:26;2006:587;;2073:86;2131:2;2104:14;2119:1;2104:17;;;;;;;;;;;;;;:24;:29;2135:23;2073:14;2088:1;2073:17;;;;;;;:86;2174:15;2191:23;2226:4;-1:-1:-1;;;;;2218:18:22;2237:14;2252:1;2237:17;;;;;;;;;;;;;;2218:37;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2173:82;;;;2273:10;2269:314;;;2303:14;2320:46;2363:2;2343:10;:17;:22;2320:10;:22;;:46;;;;:::i;:::-;2303:63;;2397:9;2388:6;:18;2384:185;;;2470:25;;;2517:20;;;:33;;;2442:6;-1:-1:-1;2442:6:22;2384:185;2269:314;;-1:-1:-1;;2054:3:22;;2006:587;;;;888:1711;;;;;;;;:::o;929:347:24:-;1122:7;1152:117;1196:8;1219:16;1249:10;1152:15;:117::i;1749:631:1:-;1949:24;1975:34;2056:317;2093:239;;;;;;;;2149:10;-1:-1:-1;;;;;2093:239:1;;;;;2187:10;-1:-1:-1;;;;;2093:239:1;;;;;2238:11;2227:23;;;;;;;;:::i;:::-;;;;-1:-1:-1;;2227:23:1;;;;;;;;;2093:239;;;2290:4;2227:23;2093:239;;;2290:27;2093:239;;;;;;;2346:17;2056:23;:317::i;885:388:2:-;1079:7;1109:157;1154:9;1193:8;1216:16;1246:10;1109:16;:157::i;6743:1029:19:-;6969:27;;7016:23;;:58;;;;;;;;;:132;;;-1:-1:-1;7117:31:19;7090:23;;:58;;;;;;;;;7016:132;:170;;;-1:-1:-1;7164:17:19;;;;-1:-1:-1;;;;;7164:22:19;;7016:170;:208;;;-1:-1:-1;7202:17:19;;;;-1:-1:-1;;;;;7202:22:19;;7016:208;7012:255;;;-1:-1:-1;7255:1:19;7248:8;;7012:255;7291:36;;:::i;:::-;7341;7391:21;7425:8;-1:-1:-1;;;;;7425:35:19;;7461:5;7468:9;7425:53;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;7277:201;;-1:-1:-1;7277:201:19;-1:-1:-1;7277:201:19;-1:-1:-1;7528:30:19;7508:9;:16;;;:50;;;;;;;;;;:85;;;;7577:16;7576:17;7508:85;:140;;;-1:-1:-1;7611:16:19;;-1:-1:-1;;;;;7611:37:19;;7508:140;7489:207;;;7684:1;7677:8;;;;;;;7489:207;-1:-1:-1;;;;;;7728:37:19;;-1:-1:-1;;6743:1029:19;;;;;;:::o;4259:1073:14:-;4484:17;4515;4546:24;4584:34;4655:47;4673:4;4679:10;4691;4655:17;:47::i;:::-;4643:59;-1:-1:-1;4716:16:14;4712:99;;4748:52;;4712:99;4832:61;;-1:-1:-1;;;4832:61:14;;:4;;:20;;:61;;4853:4;;4859:9;;4870:10;;4882;;4832:61;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;4832:61:14;;;;;;;;;;;;:::i;:::-;4820:4;:9;;:73;;;;4910:4;:9;;;4903:16;;4961:364;5001:283;;;;;;;;5060:10;-1:-1:-1;;;;;5001:283:14;;;;;5098:10;-1:-1:-1;;;;;5001:283:14;;;;;5152:4;5141:16;;;;;;;;:::i;:::-;;;;;;;;;;;;;5001:283;;;;5200:4;5189:16;;;;;;;;:::i;:::-;;;;-1:-1:-1;;5189:16:14;;;;;;;;;5001:283;;;5245:4;5189:16;5001:283;;;5245:24;5001:283;;;;;;;5298:17;4961:26;:364::i;1400:697::-;1589:7;1612:28;;:::i;:::-;1654:10;1643:42;;;;;;;;;;;;:::i;:::-;1612:73;;1702:388;1097:42;1909:4;:9;;;1948;1987:8;2010:16;2051:4;:17;;;2070:4;:9;;;2040:40;;;;;;;;;:::i;:::-;;;;;;;;;;;;;1702:19;:388::i;:::-;1695:395;1400:697;-1:-1:-1;;;;;;1400:697:14:o;1812:694:15:-;2025:24;2051:34;2101:19;2161:338;2198:260;;;;;;;;2254:10;-1:-1:-1;;;;;2198:260:15;;;;;2292:10;-1:-1:-1;;;;;2198:260:15;;;;;2343:15;2360:6;2332:35;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;2332:35:15;;;;;;;;;2198:260;;;2407:4;2332:35;2198:260;;;2407:36;2198:260;;;;;;;2472:17;2161:23;:338::i;2151:937:6:-;2383:13;2410:12;2436:24;2474:34;2552:60;2571:8;2581:6;2589:10;2601;2552:18;:60::i;:::-;2533:79;-1:-1:-1;2533:79:6;-1:-1:-1;;;;;;2626:18:6;;2622:100;;2660:51;;2622:100;2763:318;2800:240;;;;;;;;2856:10;-1:-1:-1;;;;;2800:240:6;;;;;2894:10;-1:-1:-1;;;;;2800:240:6;;;;;2945:4;2951:8;2934:26;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;2934:26:6;;;;;;;;;2800:240;;;3000:4;2934:26;2800:240;;;3000:25;2800:240;;;;;;;3054:17;2763:23;:318::i;:::-;2732:349;;-1:-1:-1;2732:349:6;-1:-1:-1;2151:937:6;;;;;;;;;;;:::o;1736:617:9:-;1930:24;1956:34;2037:309;2074:231;;;;;;;;2130:10;-1:-1:-1;;;;;2074:231:9;;;;;2168:10;-1:-1:-1;;;;;2074:231:9;;;;;2219:6;2208:18;;;;;;;;:::i;:::-;;;;-1:-1:-1;;2208:18:9;;;;;;;;;2074:231;;;2266:4;2208:18;2074:231;;;2266:24;2074:231;;;;;;;2319:17;2037:23;:309::i;1212:421:3:-;1402:7;1432:194;1481:42;1553:8;1576:16;1606:10;1432:20;:194::i;2090:814:18:-;2288:12;2302:24;2328:34;2385:51;2403:8;2413:10;2425;2385:17;:51::i;:::-;2378:58;-1:-1:-1;;;;;;2450:27:18;;2446:99;;2493:41;;2446:99;2586:311;2623:233;;;;;;;;2679:10;-1:-1:-1;;;;;2623:233:18;;;;;2717:10;-1:-1:-1;;;;;2623:233:18;;;;;2768:4;2757:16;;;;;;;;:::i;:::-;;;;-1:-1:-1;;2757:16:18;;;;;;;;;2623:233;;;2813:4;2757:16;2623:233;;;2813:28;2623:233;;;;;;;2870:17;2586:23;:311::i;:::-;2555:342;;-1:-1:-1;2555:342:18;-1:-1:-1;2090:814:18;;;;;;;;;:::o;964:462:23:-;1155:7;1185:234;1235:42;1307:9;1346:8;1369:16;1399:10;1185:21;:234::i;2840:677:16:-;3033:24;3059:34;3140:370;3180:289;;;;;;;;3239:10;-1:-1:-1;;;;;3180:289:16;;;;;3277:10;-1:-1:-1;;;;;3180:289:16;;;;;3331:6;3320:18;;;;;;;;:::i;:::-;;;;;;;;;;;;;3180:289;;;;3381:6;3370:18;;;;;;;;:::i;:::-;;;;-1:-1:-1;;3370:18:16;;;;;;;;;3180:289;;;3428:4;3370:18;3180:289;;;3428:26;3180:289;;;;;;;3483:17;3140:26;:370::i;1750:649:2:-;1969:24;1995:34;2076:316;2113:238;;;;;;;;2169:10;-1:-1:-1;;;;;2113:238:2;;;;;2207:10;-1:-1:-1;;;;;2113:238:2;;;;;2258:8;2247:20;;;;;;;;:::i;:::-;;;;-1:-1:-1;;2247:20:2;;;;;;;;;2113:238;;;2307:4;2247:20;2113:238;;;2307:29;2113:238;;;;;;;2365:17;2076:23;:316::i;1333:415:26:-;1449:25;1515:6;:13;-1:-1:-1;;;;;1501:28:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1501:28:26;;1490:39;;1544:9;1539:203;1564:6;:13;1559:1;:18;1539:203;;1625:19;-1:-1:-1;;;;;1612:32:26;:6;1619:1;1612:9;;;;;;;;;;;;;;-1:-1:-1;;;;;1612:32:26;;:119;;1697:34;1723:7;1697:6;1704:1;1697:9;;;;;;;;;;;;;;-1:-1:-1;;;;;1697:25:26;;;:34;;;;:::i;:::-;1612:119;;;1663:7;-1:-1:-1;;;;;1663:15:26;;1612:119;1598:8;1607:1;1598:11;;;;;;;;;;;;;;;;;:133;1579:3;;1539:203;;2067:636:4;2277:24;2303:34;2384:312;2421:234;;;;;;;;2477:10;-1:-1:-1;;;;;2421:234:4;;;;;2515:10;-1:-1:-1;;;;;2421:234:4;;;;;2566:9;2555:21;;;;;;;;:::i;:::-;;;;-1:-1:-1;;2555:21:4;;;;;;;;;2421:234;;;2616:4;2555:21;2421:234;;;2616:24;2421:234;;;;;;;2669:17;2384:23;:312::i;3020:769:15:-;3232:24;3258:34;3308:19;3368:414;3408:333;;;;;;;;3467:10;-1:-1:-1;;;;;3408:333:15;;;;;3505:10;-1:-1:-1;;;;;3408:333:15;;;;;3559:15;3576:6;3548:35;;;;;;;;;:::i;:::-;;;;;;;;;;;;;3408:333;;;;3626:15;3643:6;3615:35;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;3615:35:15;;;;;;;;;3408:333;;;3690:4;3615:35;3408:333;;;3690:36;3408:333;;;;;;;3755:17;3368:26;:414::i;1059:384:17:-;1251:7;1281:155;1324:9;1363:8;1386:16;1416:10;1281:14;:155::i;1897:619:23:-;2091:24;2117:34;2198:311;2235:233;;;;;;;;2291:10;-1:-1:-1;;;;;2235:233:23;;;;;2329:10;-1:-1:-1;;;;;2235:233:23;;;;;2380:6;2369:18;;;;;;;;:::i;:::-;;;;-1:-1:-1;;2369:18:23;;;;;;;;;2235:233;;;2427:4;2369:18;2235:233;;;2427:26;2235:233;;;;;;;2482:17;2198:23;:311::i;2713:872:24:-;2883:24;2909:34;2959:29;3005:4;:11;-1:-1:-1;;;;;2991:26:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2991:26:24;;2959:58;;3032:9;3027:110;3051:4;:11;3047:1;:15;3027:110;;;3101:4;3124:1;3120;3106:4;:11;:15;:19;3101:25;;;;;;;;;;;;;;3083:12;3096:1;3083:15;;;;;;;;-1:-1:-1;;;;;3083:43:24;;;:15;;;;;;;;;;;:43;3064:3;;3027:110;;;;3178:400;3218:319;;;;;;;;3277:4;3282:1;3277:7;;;;;;;;;;;;;;-1:-1:-1;;;;;3218:319:24;;;;;3312:4;3331:1;3317:4;:11;:15;3312:21;;;;;;;;;;;;;;-1:-1:-1;;;;;3218:319:24;;;;;3377:6;3385:4;3366:24;;;;;;;;;:::i;:::-;;;;;;;;;;;;;3218:319;;;;3433:6;3441:12;3422:32;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;3422:32:24;;;;;;;;;3218:319;;;3494:4;3422:32;3218:319;;;3494:28;3218:319;;;;;;;3551:17;3178:26;:400::i;2835:675:9:-;3028:24;3054:34;3135:368;3175:287;;;;;;;;3234:10;-1:-1:-1;;;;;3175:287:9;;;;;3272:10;-1:-1:-1;;;;;3175:287:9;;;;;3326:6;3315:18;;;;;;;;:::i;:::-;;;;;;;;;;;;;3175:287;;;;3376:6;3365:18;;;;;;;;:::i;:::-;;;;-1:-1:-1;;3365:18:9;;;;;;;;;3175:287;;;3423:4;3365:18;3175:287;;;3423:24;3175:287;;;;;;;3476:17;3135:26;:368::i;2669:1017:14:-;2895:17;2926;2957:24;2995:34;3066:47;3084:4;3090:10;3102;3066:17;:47::i;:::-;3054:59;-1:-1:-1;3127:16:14;3123:99;;3159:52;;3123:99;3243:61;;-1:-1:-1;;;3243:61:14;;:4;;:20;;:61;;3264:4;;3270:9;;3281:10;;3293;;3243:61;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;3243:61:14;;;;;;;;;;;;:::i;:::-;3231:4;:9;;:73;;;;3321:4;:9;;;3314:16;;3372:307;3409:229;;;;;;;;3465:10;-1:-1:-1;;;;;3409:229:14;;;;;3503:10;-1:-1:-1;;;;;3409:229:14;;;;;3554:4;3543:16;;;;;;;;:::i;:::-;;;;-1:-1:-1;;3543:16:14;;;;;;;;;3409:229;;;3599:4;3543:16;3409:229;;;3599:24;3409:229;;;;;;;3652:17;3372:23;:307::i;1071:338:5:-;1259:7;1289:113;1328:9;1352:16;1382:10;1289;:113::i;897:397:15:-;1098:7;1128:159;1175:9;1214:8;1237:16;1267:10;1128:18;:159::i;877:382:16:-;1068:7;1098:154;1140:9;1179:8;1202:16;1232:10;1098:13;:154::i;3742:1004:6:-;3973:13;4000:12;4026:24;4064:34;4142:60;4161:8;4171:6;4179:10;4191;4142:18;:60::i;:::-;4123:79;-1:-1:-1;4123:79:6;-1:-1:-1;;;;;;4216:18:6;;4212:100;;4250:51;;4212:100;4353:386;4393:305;;;;;;;;4452:10;-1:-1:-1;;;;;4393:305:6;;;;;4490:10;-1:-1:-1;;;;;4393:305:6;;;;;4544:4;4550:8;4533:26;;;;;;;;;:::i;:::-;;;;;;;;;;;;;4393:305;;;;4602:4;4609:8;4608:9;4591:27;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;4591:27:6;;;;;;;;;4393:305;;;4658:4;4591:27;4393:305;;;4658:25;4393:305;;;;;;;4712:17;4353:26;:386::i;3950:1574:5:-;4166:13;4193:12;4219:24;4257:34;4423:4;:13;;;-1:-1:-1;;;;;4414:31:5;;4446:10;4458;4414:55;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4407:62;-1:-1:-1;4479:17:5;-1:-1:-1;;;;;4576:18:5;;;4572:494;;-1:-1:-1;4657:4:5;;-1:-1:-1;4622:10:5;4572:494;;;4773:13;;4764:55;;-1:-1:-1;;;4764:55:5;;-1:-1:-1;;;;;4764:31:5;;;;;;:55;;4796:10;;4808;;4764:55;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4757:62;-1:-1:-1;;;;;;4877:27:5;;4873:117;;4924:51;;;4873:117;-1:-1:-1;5050:5:5;;-1:-1:-1;5015:10:5;4572:494;5107:410;5147:329;;;;;;;;5206:10;-1:-1:-1;;;;;5147:329:5;;;;;5244:10;-1:-1:-1;;;;;5147:329:5;;;;;5298:4;:11;;;5311:4;5317:8;5287:39;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;5147:329;;;;5369:4;:11;;;5382:4;5389:8;5388:9;5358:40;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;5358:40:5;;;;;;;;;5147:329;;;5438:4;5358:40;5147:329;;;5438:23;5147:329;;;;;;;5490:17;5107:26;:410::i;1754:435:26:-;1889:27;1959:6;:13;-1:-1:-1;;;;;1945:28:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1945:28:26;;1932:41;;1988:9;1983:200;2008:6;:13;2003:1;:18;1983:200;;2071:19;-1:-1:-1;;;;;2058:32:26;:6;2065:1;2058:9;;;;;;;;;;;;;;-1:-1:-1;;;;;2058:32:26;;:114;;2129:43;2155:7;2164;2129:6;2136:1;2129:9;;;;;;;;;;;;;;-1:-1:-1;;;;;2129:25:26;;;:43;;;;;:::i;:::-;2058:114;;;2109:1;2058:114;2042:10;2053:1;2042:13;;;;;;;;;;;;;;;;;:130;2023:3;;1983:200;;1796:611:20;1986:24;2012:34;2093:307;2130:229;;;;;;;;2186:10;-1:-1:-1;;;;;2130:229:20;;;;;2224:10;-1:-1:-1;;;;;2130:229:20;;;;;2275:4;2264:16;;;;;;;;:::i;:::-;;;;-1:-1:-1;;2264:16:20;;;;;;;;;2130:229;;;2320:4;2264:16;2130:229;;;2320:24;2130:229;;;;;;;2373:17;2093:23;:307::i;1149:342:6:-;1339:7;1369:115;1410:9;1434:16;1464:10;1369:12;:115::i;3436:870:18:-;3633:12;3647:24;3673:34;3730:51;3748:8;3758:10;3770;3730:17;:51::i;:::-;3723:58;-1:-1:-1;;;;;;3795:27:18;;3791:99;;3838:41;;3791:99;3931:368;3971:287;;;;;;;;4030:10;-1:-1:-1;;;;;3971:287:18;;;;;4068:10;-1:-1:-1;;;;;3971:287:18;;;;;4122:4;4111:16;;;;;;;;:::i;:::-;;;;;;;;;;;;;3971:287;;;;4170:4;4159:16;;;;;;;;:::i;:::-;;;;-1:-1:-1;;4159:16:18;;;;;;;;;3971:287;;;4215:4;4159:16;3971:287;;;4215:28;3971:287;;;;;;;4272:17;3931:26;:368::i;4833:2278:25:-;5056:27;5097:24;5135:34;5194:35;5244:45;5263:6;-1:-1:-1;;;;;5263:14:25;;:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5244:45;5194:95;;5299:36;5338:23;5356:4;5338:17;:23::i;:::-;5299:62;;5406:17;:24;-1:-1:-1;;;;;5392:39:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5392:39:25;;5372:59;;5465:17;:24;-1:-1:-1;;;;;5451:39:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5451:39:25;;5441:49;;5527:17;:24;-1:-1:-1;;;;;5515:37:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5500:52;;5568:9;5563:1542;5587:9;:16;5583:1;:20;5563:1542;;;5642:25;5685:35;5737:684;5781:591;;;;;;;;5852:4;5857:1;5852:7;;;;;;;;;;;;;;-1:-1:-1;;;;;5781:591:25;;;;;5900:4;5919:1;5905:4;:11;:15;5900:21;;;;;;;;;;;;;;-1:-1:-1;;;;;5781:591:25;;;;;5970:6;5978:34;5993:4;5999:9;6009:1;5999:12;;;;;;;5978:34;5959:54;;;;;;;;;:::i;:::-;;;;;;;;;;;;;5781:591;;;;6085:6;6117:142;6161:12;6203:30;6220:9;6230:1;6220:12;;;;;;;;;;;;;;6203:16;:30::i;:::-;6117:14;:142::i;:::-;6049:232;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;6049:232:25;;;;;;;;;5781:591;;;6325:4;6049:232;5781:591;;;6325:28;5781:591;;;;;;;6390:17;5737:26;:684::i;:::-;5624:797;;;;6441:9;6436:659;6460:18;:25;6456:1;:29;6436:659;;;6576:18;6595:1;6576:21;;;;;;;;;;;;;;6601:1;6576:26;6572:78;;;6626:5;;6572:78;6722:17;6740:1;6722:20;;;;;;;;;;;;;;6746:1;6722:25;:74;;;;6775:18;6794:1;6775:21;;;;;;;;;;;;;;6751:17;6769:1;6751:20;;;;;;;;;;;;;;:45;;6722:74;6718:363;;;6843:18;6862:1;6843:21;;;;;;;;;;;;;;6820:17;6838:1;6820:20;;;;;;;;;;;;;:44;;;;;6899:8;6908:1;6899:11;;;;;;;;;;;;;;6886:7;6894:1;6886:10;;;;;;;;;;;;;:24;;;;;7028:34;7043:4;7049:9;7059:1;7049:12;;;;;;;7028:34;7010:12;7023:1;7010:15;;;;;;;;;;;;;:52;;;;6718:363;6487:3;;6436:659;;;;5563:1542;;5605:3;;;;;5563:1542;;;;4833:2278;;;;;;;;;;:::o;2605:1848:22:-;2785:23;;:::i;:::-;2822:24;;:::i;:::-;-1:-1:-1;;2924:2:22;2860:18;2992:673;3017:14;:21;3012:1;:26;2992:673;;3059:72;3117:2;3090:14;3105:1;3090:17;;;;;;;;;;;;;;:24;:29;3121:9;3059:14;3074:1;3059:17;;;;;;;:72;3146:15;3163:23;3198:4;-1:-1:-1;;;;;3190:18:22;3209:14;3224:1;3209:17;;;;;;;;;;;;;;3190:37;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3145:82;;;;3245:10;3241:414;;;3275:14;3292:46;3335:2;3315:10;:17;:22;3292:10;:22;;:46;;;;:::i;:::-;3275:63;;3390:1;3381:6;:10;:66;;;;;3424:23;3415:6;:32;3381:66;3356:285;;;3542:25;;;3589:20;;;:33;;;3514:6;-1:-1:-1;3514:6:22;3356:285;3241:414;;-1:-1:-1;;3040:3:22;;2992:673;;;;-1:-1:-1;;3678:23:22;:38;3674:109;;;3732:40;;;3674:109;3797:9;3792:655;3817:13;:20;3812:1;:25;3792:655;;3858:84;3914:2;3888:13;3902:1;3888:16;;;;;;;;;;;;;;:23;:28;3918:23;3858:13;3872:1;3858:16;;;;;;;:84;3957:15;3974:23;4009:4;-1:-1:-1;;;;;4001:18:22;4020:13;4034:1;4020:16;;;;;;;;;;;;;;4001:36;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3956:81;;;;4055:10;4051:386;;;4085:14;4102:46;4145:2;4125:10;:17;:22;4102:10;:22;;:46;;;;:::i;:::-;4085:63;;4200:1;4191:6;:10;:53;;;;;4234:10;4225:6;:19;4191:53;4166:257;;;4326:24;;;4372:19;;;:32;;;4298:6;-1:-1:-1;4298:6:22;4166:257;4051:386;;-1:-1:-1;;3839:3:22;;3792:655;;;;2605:1848;;;;;;;;:::o;4496:768:13:-;4630:22;4704:1;4690:4;:11;:15;-1:-1:-1;;;;;4676:30:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4676:30:13;;4668:38;;4716:24;4776:6;-1:-1:-1;;;;;4760:31:13;;:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4716:78;;4809:9;4804:454;4828:5;:12;4824:1;:16;4804:454;;;4956:7;-1:-1:-1;;;;;4956:22:13;;1132:5;5046:4;5051:1;5046:7;;;;;;;;;;;;;;5055:4;5060:1;5064;5060:5;5055:11;;;;;;;;;;;;;;5068:1;4956:114;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4956:114:13;;;;;;;;-1:-1:-1;;4956:114:13;;;;;;;;;;;;:::i;:::-;;;4936:312;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;5217:16:13;;;5231:1;5217:16;;;;;;;;;-1:-1:-1;5210:23:13;;-1:-1:-1;;5210:23:13;4936:312;5151:4;5140:5;5146:1;5140:8;;;;;;;;;;;;;:15;-1:-1:-1;;;;;5140:15:13;;;-1:-1:-1;;;;;5140:15:13;;;;;5087:83;4842:3;;4804:454;;;;4496:768;;;;;;:::o;6189:708:21:-;6346:24;6469:25;;;;6521:14;;6553:13;;;;6469:25;6584:15;;;;6431:209;;-1:-1:-1;;;6431:209:21;;6346:24;;6431:4;;:20;;:209;;6469:34;;;;;-1:-1:-1;;;;;;6469:34:21;;6521:14;;6553:13;;6617:9;;6431:209;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6415:476;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6849:6;6838:42;;;;;;;;;;;;:::i;:::-;6814:66;-1:-1:-1;6814:66:21;-1:-1:-1;6415:476:21;;-1:-1:-1;6415:476:21;6663:50;6189:708;;;;;:::o;4264:1265:3:-;4479:21;4502;4555:4;:13;;;-1:-1:-1;;;;;4555:24:3;;4580:4;:13;;;-1:-1:-1;;;;;4580:28:3;;:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4555:56;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4539:72;;4625:4;:10;;;:17;4646:1;4625:22;4621:81;;;4663:28;;4621:81;4711:23;4819:9;4814:709;4838:4;:10;;;:17;4834:1;:21;4814:709;;;4903:1;4880:4;:10;;;4891:1;4880:13;;;;;;;;;;;;;;:20;:24;4876:71;;;4924:8;;4876:71;4996:13;-1:-1:-1;;;;;4981:61:3;;1093:5;5115:4;:10;;;5126:1;5115:13;;;;;;;;;;;;;;5130:17;5173:1;5148:17;:24;:26;5130:45;;;;;;;;;;;;;;4981:195;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4981:195:3;;;;;;;;-1:-1:-1;;4981:195:3;;;;;;;;;;;;:::i;:::-;;;4961:552;;5490:8;;4961:552;5261:15;5252:6;:24;5248:137;;;5318:6;5300:24;;5353:4;:10;;;5364:1;5353:13;;;;;;;;;;;;;;5346:20;;5248:137;5193:206;4961:552;4857:3;;4814:709;;;;4264:1265;;;;;;;;;:::o;1883:1058:55:-;2113:20;2150:19;2184:10;2173:40;;;;;;;;;;;;:::i;:::-;2149:64;;2256:16;2303:4;-1:-1:-1;;;;;2290:17:55;:9;-1:-1:-1;;;;;2290:17:55;;2286:280;;;2323:25;;-1:-1:-1;;;2323:25:55;;-1:-1:-1;;;;;2323:13:55;;;;;:25;;2337:10;;2323:25;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2373:10;2362:21;;2286:280;;;2458:97;-1:-1:-1;;;;;2458:24:55;;2508:4;2531:10;2458:24;:97::i;:::-;2591:4;-1:-1:-1;;;;;2591:9:55;;2608:8;2644:4;-1:-1:-1;;;;;2631:17:55;:9;-1:-1:-1;;;;;2631:17:55;;:49;;2671:9;2631:49;;;2666:1;2631:49;2706:4;-1:-1:-1;;;;;2694:16:55;:8;-1:-1:-1;;;;;2694:16:55;;:47;;2733:8;2694:47;;;2728:1;2694:47;2755:10;2779:1;2802;2591:223;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2576:238;;2870:4;-1:-1:-1;;;;;2858:16:55;:8;-1:-1:-1;;;;;2858:16:55;;2854:81;;;2890:4;-1:-1:-1;;;;;2890:12:55;;2909;2890:34;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2854:81;1883:1058;;;;;;;;;:::o;7849:277:21:-;7971:7;7980;8007:6;:13;8024:2;8007:19;8003:62;;-1:-1:-1;8050:1:21;;-1:-1:-1;8050:1:21;8042:12;;8003:62;8092:6;8081:38;;;;;;;;;;;;:::i;:::-;8074:45;;;;7849:277;;;;:::o;7240:312::-;7372:17;7403:7;7412;7392:28;;;;;;;;;:::i;:::-;;;;;;;;;;;;;7372:48;;7530:4;7524:11;7519:2;7513:4;7509:13;7502:34;8495:4060;8666:24;8692:34;8746:17;:24;8774:1;8746:29;8742:95;;;8791:35;;8742:95;8881:17;:24;-1:-1:-1;;;;;8867:39:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;8867:39:21;;8847:59;;8940:17;:24;-1:-1:-1;;;;;8926:39:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;8926:39:21;-1:-1:-1;9007:16:21;;;9021:1;9007:16;;;;;;;;;8916:49;;-1:-1:-1;8976:28:21;;9007:16;;;;;;;;;;;;-1:-1:-1;9007:16:21;8976:47;;9050:17;9068:1;9050:20;;;;;;;;;;;;;;9033:11;9045:1;9033:14;;;;;;;;;;;;;:37;;;;;9081:42;;:::i;:::-;-1:-1:-1;9126:219:21;;;;;;;;;9178:14;;-1:-1:-1;;;;;9126:219:21;;;;;;9216:13;;;;9126:219;;;;;;;9255:18;;;;9126:219;;;;9309:25;;;-1:-1:-1;;;;;9309:25:21;;;9126:219;;;9309:25;;;;9126:219;;;;;;;;9356:41;;:::i;:::-;9400:218;;;;;;;;9452:4;:13;;;-1:-1:-1;;;;;9400:218:21;;;;;9489:4;:14;;;-1:-1:-1;;;;;9400:218:21;;;;;9529:4;:17;;;9400:218;;;;9582:4;:25;;;;;;;;;;;9400:218;;;;;;;;;;;9356:262;;9717:45;9741:7;9750:11;9717:23;:45::i;:::-;9776:18;;9699:63;;-1:-1:-1;9776:23:21;;-1:-1:-1;9776:23:21;:46;;;9803:11;9815:1;9803:14;;;;;;;;;;;;;;9821:1;9803:19;9776:46;9772:112;;;9838:35;;;;;9772:112;9894:27;10025:46;10049:8;10059:11;10025:23;:46::i;:::-;10086:17;;10008:63;;-1:-1:-1;10086:22:21;;-1:-1:-1;10086:22:21;:44;;;10112:10;10123:1;10112:13;;;;;;;;;;;;;;10129:1;10112:18;10086:44;10082:110;;;10146:35;;;;;;10082:110;10207:9;10202:2347;10226:17;:24;10222:1;:28;10202:2347;;;10271:25;10315:12;10310:1667;8487:1;10333:4;:37;10310:1667;;;10510:156;10557:17;10575:1;10557:20;;;;;;;;;;;;;;10599:10;10610:1;10599:13;;;;;;;;;;;;;;10634:11;10646:1;10634:14;;;;;;;;;;;;;;10510:25;:156::i;:::-;10493:11;10505:1;10493:14;;;;;;;;;;;;;;;;;:173;10688:18;;:23;;:46;;;10715:11;10727:1;10715:14;;;;;;;;;;;;;;10733:1;10715:19;10688:46;10684:98;;;10758:5;;10684:98;10816:206;8340:8;8182:3;10864:59;8182:3;10990:11;11002:1;10990:14;;;;;;;10816:206;10799:11;10811:1;10799:14;;;;;;;;;;;;;;;;;:223;11044:18;;:23;;:46;;;11071:11;11083:1;11071:14;;;;;;;;;;;;;;11089:1;11071:19;11044:46;11040:98;;;11114:5;;11040:98;11155:28;11227:46;11251:8;11261:11;11227:23;:46::i;:::-;11295:18;;11201:72;;-1:-1:-1;11201:72:21;-1:-1:-1;11295:23:21;;:46;;;11322:11;11334:1;11322:14;;;;;;;;;;;;;;11340:1;11322:19;11295:46;11291:98;;;11365:5;;;11291:98;11523:11;11510:24;;11630:17;11648:1;11630:20;;;;;;;;;;;;;;11613:10;11624:1;11613:13;;;;;;;;;;;;;;:37;11609:354;;11674:11;11802:17;11820:1;11802:20;;;;;;;;;;;;;;8182:3;11729:17;11747:1;11729:20;;;;;;;;;;;;;;11713:10;11724:1;11713:13;;;;;;;;;;;;;;:36;11712:63;:110;;;;;;11674:148;;8340:8;11848:3;:41;11844:101;;11917:5;;;;11844:101;11609:354;;-1:-1:-1;10372:6:21;;10310:1667;;;;12012:1;11994:8;:15;:19;:44;;;;;12037:1;12017:10;:17;:21;11994:44;11990:549;;;12071:8;12080:1;12071:11;;;;;;;;;;;;;;12058:7;12066:1;12058:10;;;;;;;;;;;;;:24;;;;;12368:156;12415:17;12433:1;12415:20;;;;;;;;;;;;;;12457:10;12468:1;12457:13;;;;;;;;;;;;;;12492:11;12504:1;12492:14;;;;;;;12368:156;12345:17;12363:1;12345:20;;;;;;;;;;;;;:179;;;;;11990:549;-1:-1:-1;10252:3:21;;10202:2347;;;;8495:4060;;;;;;;;;:::o;1256:706:60:-;1416:20;1453:23;1478:17;1522:10;1511:49;;;;;;;;;;;;:::i;:::-;1452:108;;-1:-1:-1;1452:108:60;-1:-1:-1;1644:53:60;-1:-1:-1;;;;;1644:24:60;;1452:108;1686:10;1644:24;:53::i;:::-;1741:213;;;;;;;;;;;1832:4;1741:213;;;;1861:15;1741:213;;;;;;;;;;1942:1;1741:213;;;;1723:232;;-1:-1:-1;;;1723:232:60;;-1:-1:-1;;;;;1723:17:60;;;;;:232;;1741:213;1723:232;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;1542:724:56:-;1731:20;1769:12;1796:10;1785:32;;;;;;;;;;;;:::i;:::-;1768:49;-1:-1:-1;1902:86:56;-1:-1:-1;;;;;1902:24:56;;1768:49;1968:10;1902:24;:86::i;:::-;2086:144;;-1:-1:-1;;;2086:144:56;;-1:-1:-1;;;;;2086:19:56;;;;;:144;;2119:9;;2142:10;;2166:8;;2219:1;;2086:144;;;:::i;3834:545:38:-;3997:21;4237:104;4329:11;4237:70;4284:22;4329:11;4304:1;4284:19;:22::i;:::-;4237:25;:9;4255:6;4237:17;:25::i;:::-;:46;;:70::i;:::-;:91;;:104::i;1140:762:57:-;1329:20;1365:11;1390:10;1379:32;;;;;;;;;;;;:::i;:::-;1365:46;-1:-1:-1;1496:101:57;-1:-1:-1;;;;;1496:40:57;;1365:46;1577:10;1496:40;:101::i;:::-;1623:243;;-1:-1:-1;;;1623:243:57;;-1:-1:-1;;;;;1623:15:57;;;;;:243;;1652:9;;1675:8;;1738:10;;1798:1;;1837:15;:19;;;1623:243;;;:::i;7117:2724:25:-;7303:35;7408:1;7394:10;7375:9;:16;:29;:34;;7354:117;;;;-1:-1:-1;;;7354:117:25;;;;;;;:::i;:::-;7481:30;;:::i;:::-;-1:-1:-1;7481:203:25;;;;;;;;;7608:8;7481:203;;7638:7;7481:203;;;;7667:6;7481:203;;;;7743:42;;7764:20;7743:42;;;;;;;;;7481:203;;;;7743:42;;;;;;;;;;;;;-1:-1:-1;7743:42:25;7694:91;;7795:21;7844:25;7872:9;7882:10;7872:21;;;;;;;;;;;;;;7844:49;;7907:26;7936:9;7946:10;7959:1;7946:14;7936:25;;;;;;;;;;;;;;7907:54;;7980:9;7975:296;7999:20;7995:1;:24;7975:296;;;8044:19;8082:7;-1:-1:-1;;;;;8082:15:25;;8098:10;8110:11;8123:13;8137:1;8123:16;;;;;;;;;;;8082:58;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;8044:96;;8162:18;8175:4;8162:12;:18::i;:::-;8158:99;;;8234:4;8204:10;8215:15;;;;;;8204:27;;;;;;;;;;;;;:34;-1:-1:-1;;;;;8204:34:25;;;-1:-1:-1;;;;;8204:34:25;;;;;8158:99;-1:-1:-1;8021:3:25;;7975:296;;;-1:-1:-1;;;8294:18:25;8290:109;;8372:16;;;;;8290:109;8430:9;:16;8412:10;8425:1;8412:14;:34;8408:349;;;8525:13;-1:-1:-1;;;;;8502:37:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8490:49;;8558:9;8553:164;8577:13;8573:1;:17;8553:164;;;8630:23;;;8651:1;8630:23;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;8630:23:25;8615:9;8625:1;8615:12;;;;;;;;;;;;;:38;;;;8689:10;8700:1;8689:13;;;;;;;;;;;;;;8671:9;8681:1;8671:12;;;;;;;;;;;;;;8684:1;8671:15;;;;;;;;-1:-1:-1;;;;;8671:31:25;;;:15;;;;;;;;;;;:31;8592:3;;8553:164;;;;8730:16;;;;;8408:349;8808:45;8868:54;8887:7;8896:9;8907:10;8920:1;8907:14;8868:18;:54::i;:::-;8808:114;;8936:19;:26;8966:1;8936:31;8932:122;;;9027:16;;;;;;8932:122;9181:19;:26;9165:13;:42;-1:-1:-1;;;;;9129:88:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9117:100;;9232:9;9227:582;9251:13;9247:1;:17;9227:582;;;9290:9;9285:514;9309:19;:26;9305:1;:30;9285:514;;;9376:26;;9372:30;;;:34;;;9376:19;;9405:1;;9540:22;;;;;;;;;;;;:29;9536:1;:33;-1:-1:-1;;;;;9515:55:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;9515:55:25;;9480:9;9490:1;9480:12;;;;;;;;;;;;;:90;;;;9606:10;9617:1;9606:13;;;;;;;;;;;;;;9588:9;9598:1;9588:12;;;;;;;;;;;;;;9601:1;9588:15;;;;;;;;;;;;;:31;-1:-1:-1;;;;;9588:31:25;;;-1:-1:-1;;;;;9588:31:25;;;;;9642:9;9637:148;9661:19;9681:1;9661:22;;;;;;;;;;;;;;:29;9657:1;:33;9637:148;;;9741:19;9761:1;9741:22;;;;;;;;;;;;;;9764:1;9741:25;;;;;;;;;;;;;;9719:9;9729:1;9719:12;;;;;;;;;;;;;;9736:1;9732;:5;9719:19;;;;;;;;-1:-1:-1;;;;;9719:47:25;;;:19;;;;;;;;;;;:47;9692:3;;9637:148;;;-1:-1:-1;;9337:3:25;;9285:514;;;-1:-1:-1;9266:3:25;;9227:582;;;;9818:16;;;;7117:2724;;;;;:::o;11144:1082::-;11305:24;11386:1;11366:9;:16;:21;;:64;;;;;11411:8;:15;11429:1;11411:19;11391:9;:16;:39;11366:64;11345:148;;;;-1:-1:-1;;;11345:148:25;;;;;;;:::i;:::-;11682:8;:15;11700:1;11682:19;11658:9;:16;11677:2;11658:21;:43;-1:-1:-1;;;;;11648:54:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;11648:54:25;-1:-1:-1;11634:68:25;-1:-1:-1;11764:2:25;11747:20;;11712:9;11778:442;11802:9;:16;11798:1;:20;11778:442;;;11843:5;;11839:211;;11868:14;11885:8;11898:1;11894;:5;11885:15;;;;;;;;;;;;;;-1:-1:-1;;;;;11885:19:25;;:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;11969:3;11965:17;11955:28;;-1:-1:-1;12016:1:25;12009:9;;;;11933:103;12063:20;12086:9;12096:1;12086:12;;;;;;;;;;;;;;;;;;12153:2;12149:14;12139:25;;-1:-1:-1;12193:2:25;12186:10;;;;11820:3;;11778:442;;3886:391:36;3979:19;4030:2;4014:18;;4043:15;4060:23;4095:5;-1:-1:-1;;;;;4087:25:36;4113:18;;;;;;;;;;;;;-1:-1:-1;;;4113:18:36;;;4087:45;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4042:90;;;;4146:10;:37;;;;;4181:2;4160:10;:17;:23;;4146:37;4142:129;;;4221:38;4245:10;4257:1;4221:23;:38::i;:::-;4199:61;;4142:129;3886:391;;;;;:::o;1665:805:45:-;1857:20;1929:18;1975:10;1951:73;;;;;;;;;;;;:::i;:::-;1928:96;-1:-1:-1;2034:85:45;-1:-1:-1;;;;;2034:24:45;;1928:96;2099:10;2034:24;:85::i;:::-;2213:221;;-1:-1:-1;;;2213:221:45;;-1:-1:-1;;;;;2213:22:45;;;;;:221;;2249:9;;2284:10;;2325:8;;2361:1;;-1:-1:-1;;2409:2:45;2213:221;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;2195:239:45;1665:805;-1:-1:-1;;;;;;1665:805:45:o;1531:170:42:-;1674:9;1668:16;1661:4;1650:9;1646:20;1639:46;6903:331:21;7111:4;7105:11;7141:6;7136:3;7129:19;7182:7;7177:2;7172:3;7168:12;7161:29;7215:2;7210:3;7203:15;2270:1332:52;2428:20;2464:14;2488:22;2520:21;2586:10;2575:55;;;;;;;;;;;;:::i;:::-;2649:12;;2551:79;;-1:-1:-1;2551:79:52;;-1:-1:-1;2551:79:52;-1:-1:-1;2665:1:52;-1:-1:-1;2649:17:52;2641:77;;;;-1:-1:-1;;;2641:77:52;;;;;;;:::i;:::-;2751:5;:12;2766:1;2751:16;2736:4;:11;:31;2728:79;;;;-1:-1:-1;;;2728:79:52;;;;;;;:::i;:::-;2873:8;-1:-1:-1;;;;;2840:42:52;:4;2859:1;2845:4;:11;:15;2840:21;;;;;;;;;;;;;;-1:-1:-1;;;;;2840:42:52;;2818:150;;;;-1:-1:-1;;;2818:150:52;;;;;;;:::i;:::-;3053:67;3100:6;3109:10;3068:4;3073:1;3068:7;;;;;;;;;;;;;;-1:-1:-1;;;;;3053:38:52;;;:67;;;;;:::i;:::-;3155:398;;-1:-1:-1;;;3155:398:52;;3131:21;;-1:-1:-1;;;;;3155:48:52;;;;;:398;;3258:10;;3318:1;;3333:5;;3406:4;;3468;;3528:15;;3155:398;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;3155:398:52;;;;;;;;;;;;:::i;:::-;3131:422;;3570:7;3593:1;3578:7;:14;:16;3570:25;;;;;;;;;;;;;;3563:32;;;;;;2270:1332;;;;;:::o;1834:1348:48:-;2060:20;2157:27;;:::i;:::-;2198:10;2187:41;;;;;;;;;;;;:::i;:::-;2157:71;;2238:21;2286:4;-1:-1:-1;;;;;2273:17:48;:9;-1:-1:-1;;;;;2273:17:48;;2269:199;;;-1:-1:-1;2346:25:48;;-1:-1:-1;;;2346:25:48;;2322:10;;-1:-1:-1;;;;;2346:13:48;;;;;:25;;2322:10;;2346:25;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2269:199;;;2427:17;;2402:55;;-1:-1:-1;;;;;2402:24:48;;;2446:10;2402:24;:55::i;:::-;2502:33;;-1:-1:-1;;;2502:33:48;;2478:21;;-1:-1:-1;;;;;2502:18:48;;;;;:33;;2529:4;;2502:33;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2478:57;;2546:12;2560:23;2599:4;:17;;;-1:-1:-1;;;;;2599:22:48;2629:13;2684:4;:29;;;2731:4;:16;;;2765:4;:14;;;2819:10;2873:1;2644:244;;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;2644:244:48;;;;;;;;;;;;;;-1:-1:-1;;;;;2644:244:48;-1:-1:-1;;;;;;2644:244:48;;;;;;;;;;2599:290;;;;2644:244;2599:290;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2545:344;;;;2904:7;2899:59;;2927:20;:10;:18;:20::i;:::-;2984:4;-1:-1:-1;;;;;2972:16:48;:8;-1:-1:-1;;;;;2972:16:48;;2968:134;;;3019:21;3004:36;;3054:4;-1:-1:-1;;;;;3054:12:48;;3075;3054:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2968:134;3119:56;3161:13;3119:8;-1:-1:-1;;;;;3119:18:48;;3146:4;3119:33;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:41;;:56::i;:::-;3112:63;1834:1348;-1:-1:-1;;;;;;;;;;;1834:1348:48:o;16578:187:37:-;16720:38;16733:1;16736:5;16751;16720:12;:38::i;:::-;16578:187;;;:::o;16122:220::-;16243:14;16290:21;16302:1;16305:5;16290:11;:21::i;2108:1339:59:-;2267:20;2303:25;2338:28;2390:22;2455:10;2444:55;;;;;;;;;;;;:::i;:::-;2649:11;;2426:73;;-1:-1:-1;2426:73:59;-1:-1:-1;2664:1:59;-1:-1:-1;2649:16:59;;-1:-1:-1;2641:76:59;;;;-1:-1:-1;;;2641:76:59;;;;;;;:::i;:::-;2773:8;-1:-1:-1;;;;;2748:33:59;:4;2767:1;2753:4;:11;:15;2748:21;;;;;;;;;;;;;;-1:-1:-1;;;;;2748:33:59;;2727:139;;;;-1:-1:-1;;;2727:139:59;;;;;;;:::i;:::-;2950:51;2981:6;2990:10;2950:4;2955:1;2950:7;;;;;;;:51;3036:362;;-1:-1:-1;;;3036:362:59;;3012:21;;-1:-1:-1;;;;;3036:31:59;;;;;:362;;3122:10;;3182:1;;3251:4;;3313;;3373:15;;3036:362;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;3036:362:59;;;;;;;;;;;;:::i;:::-;3012:386;;3415:7;3438:1;3423:7;:14;:16;3415:25;;;;;;;;;;;;;;3408:32;;;;;2108:1339;;;;;:::o;2320:1328:46:-;2514:20;2585:32;;:::i;:::-;2631:10;2620:46;;;;;;;;;;;;:::i;:::-;2791:10;;2585:81;;-1:-1:-1;2758:57:46;;-1:-1:-1;;;;;2758:24:46;;;2804:10;2758:24;:57::i;:::-;2864:42;;:::i;:::-;2909:261;;;;;;;;;2959:11;;;;;2909:261;;;;-1:-1:-1;2909:261:46;;;;3047:9;-1:-1:-1;;;;;2909:261:46;;;;;3080:8;-1:-1:-1;;;;;2909:261:46;;;;;3110:10;2909:261;;;;;;;;;;;;;;;;;;;2864:306;;3181:44;;:::i;:::-;-1:-1:-1;3228:203:46;;;;;;;;3290:4;3228:203;;;-1:-1:-1;3228:203:46;;;;;;;;;;;;;;;;;3457:10;;:155;;-1:-1:-1;;;3457:155:46;;3228:203;;-1:-1:-1;;;;;3457:15:46;;;;:155;;3486:7;;3228:203;;;;3559:15;;3457:155;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3442:170;2320:1328;-1:-1:-1;;;;;;;;2320:1328:46:o;7939:916:14:-;8113:17;8201:27;8249:4;:16;;;8201:65;;8277:27;8311:9;-1:-1:-1;;;;;8311:28:14;;8367:4;:9;;;-1:-1:-1;;;;;8353:23:14;:10;-1:-1:-1;;;;;8353:23:14;;:56;;8399:10;8353:56;;;1097:42;8353:56;8437:4;:9;;;-1:-1:-1;;;;;8423:23:14;:10;-1:-1:-1;;;;;8423:23:14;;:56;;8469:10;8423:56;;;1097:42;8423:56;8511:12;;;8521:1;8511:12;;;;;;;;;-1:-1:-1;;;;;;8311:236:14;;;;;;;;;;;;8493:4;;8311:236;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;8311:236:14;;;;;;;;;;;;:::i;:::-;8276:271;;;;8584:10;:17;8562:4;:18;;;:39;8558:80;;-1:-1:-1;8624:3:14;;-1:-1:-1;8617:10:14;;-1:-1:-1;8617:10:14;8558:80;8660:10;8671:4;:18;;;8660:30;;;;;;;;;;;;;;8648:42;;8773:3;8760:9;:16;;8752:25;;8781:4;8752:33;8748:74;;;-1:-1:-1;8808:3:14;;-1:-1:-1;8801:10:14;;-1:-1:-1;8801:10:14;8748:74;8832:16;;7939:916;;;;;:::o;3040:1782:51:-;3306:20;3343:24;3369:17;3413:10;3402:51;;;;;;;;;;;;:::i;:::-;3342:111;;;;3464:21;3516:4;-1:-1:-1;;;;;3503:17:51;:9;-1:-1:-1;;;;;3503:17:51;;3499:437;;3648:98;-1:-1:-1;;;;;3648:24:51;;3698:5;3722:10;3648:24;:98::i;:::-;3499:437;;;-1:-1:-1;3897:28:51;;-1:-1:-1;;;3897:28:51;;3873:10;;-1:-1:-1;;;;;3897:13:51;;;;;:28;;3873:10;;3897:28;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3499:437;4075:5;-1:-1:-1;;;;;4075:19:51;;4103:13;4173:4;-1:-1:-1;;;;;4160:17:51;:9;-1:-1:-1;;;;;4160:17:51;;:47;;4198:9;4160:47;;;4180:15;4160:47;4249:10;4314:4;-1:-1:-1;;;;;4302:16:51;:8;-1:-1:-1;;;;;4302:16:51;;:45;;4339:8;4302:45;;;4321:15;4302:45;4426:4;-1:-1:-1;;4558:1:51;4618;4634:4;4075:573;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4060:588;;4719:4;-1:-1:-1;;;;;4707:16:51;:8;-1:-1:-1;;;;;4707:16:51;;4703:84;;;4739:4;-1:-1:-1;;;;;4739:12:51;;4760;4739:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4703:84;4796:19;;;3040:1782;;;;;;;;:::o;4752:836:6:-;4939:15;4956:13;5078:25;5122:8;-1:-1:-1;;;;;5106:37:6;;5144:10;5156;5106:61;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;5106:61:6;;;;;;;;;;;;:::i;:::-;5078:89;;5188:4;5177:15;;5206:8;:15;5225:1;5206:20;5202:251;;;5351:61;;-1:-1:-1;;;5351:61:6;;-1:-1:-1;;;;;5351:37:6;;;;;:61;;5389:10;;5401;;5351:61;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;5351:61:6;;;;;;;;;;;;:::i;:::-;5340:72;;5437:5;5426:16;;5202:251;5477:8;:15;5467:6;:25;5463:82;;5524:1;5528:5;5508:26;;;;;;;5463:82;5565:8;5574:6;5565:16;;;;;;;;;;;;;;5555:26;;4752:836;;;;;;;;:::o;2210:2191:47:-;2403:20;2474:35;2519:28;2571:22;2696:10;2685:51;;;;;;;;;;;;:::i;:::-;2886:11;;2607:129;;-1:-1:-1;2607:129:47;-1:-1:-1;2901:1:47;-1:-1:-1;2886:16:47;;-1:-1:-1;2878:73:47;;;;-1:-1:-1;;;2878:73:47;;;;;;;:::i;:::-;3007:8;-1:-1:-1;;;;;2982:33:47;:4;3001:1;2987:4;:11;:15;2982:21;;;;;;;;;;;;;;-1:-1:-1;;;;;2982:33:47;;:114;;;;1759:42;-1:-1:-1;;;;;3032:43:47;:4;3051:1;3037:4;:11;:15;3032:21;;;;;;;;;;;;;;-1:-1:-1;;;;;3032:43:47;;:63;;;;;3091:4;-1:-1:-1;;;;;3079:16:47;:8;-1:-1:-1;;;;;3079:16:47;;3032:63;2961:217;;;;-1:-1:-1;;;2961:217:47;;;;;;;:::i;:::-;3189:21;1759:42;-1:-1:-1;;;;;3402:29:47;:4;3407:1;3402:7;;;;;;;;;;;;;;-1:-1:-1;;;;;3402:29:47;;3398:358;;;3447:25;;-1:-1:-1;;;3447:25:47;;-1:-1:-1;;;;;3447:13:47;;;;;:25;;3461:10;;3447:25;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3502:10;3486:26;;3398:358;;;3600:145;3649:4;3654:1;3649:7;;;;;;;;;;;;;;3682:20;3721:10;3600:31;:145::i;:::-;3811:435;;-1:-1:-1;;;3811:435:47;;-1:-1:-1;;;;;3811:34:47;;;;;3853:13;;3811:435;;3881:4;;3974:10;;4033:1;;4115:4;;4157:1;;;;3811:435;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3796:450;;1759:42;-1:-1:-1;;;;;4260:43:47;:4;4279:1;4265:4;:11;:15;4260:21;;;;;;;;;;;;;;-1:-1:-1;;;;;4260:43:47;;4256:109;;;4319:4;-1:-1:-1;;;;;4319:12:47;;4339;4319:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4375:19;;;2210:2191;;;;;;:::o;4312:669:18:-;4461:12;;4602:42;-1:-1:-1;;;;;4588:56:18;;;:82;;4660:10;4588:82;;;4655:1;4588:82;4566:104;-1:-1:-1;4680:19:18;4716:42;-1:-1:-1;;;;;4702:56:18;;;:82;;4774:10;4702:82;;;4769:1;4702:82;4680:104;;4830:8;-1:-1:-1;;;;;4811:34:18;;4851:5;4858:11;4871;4811:72;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4811:72:18;;;;;;;;-1:-1:-1;;4811:72:18;;;;;;;;;;;;:::i;:::-;;;4795:180;;;;4248:2546:58;4476:20;4512:39;4577:10;4566:49;;;;;;;;;;;;:::i;:::-;4512:103;;4674:25;4702:133;4747:4;4765:15;4794:9;4817:8;4702:31;:133::i;:::-;4674:161;;4904:4;-1:-1:-1;;;;;4891:17:58;:9;-1:-1:-1;;;;;4891:17:58;;4887:1871;;;4956:25;;-1:-1:-1;;;4956:25:58;;-1:-1:-1;;;;;4956:13:58;;;;;:25;;4970:10;;4956:25;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;5078:274:58;;-1:-1:-1;;;5078:274:58;;-1:-1:-1;;;;;5078:32:58;;;-1:-1:-1;5078:32:58;;-1:-1:-1;5119:10:58;;5078:274;;5188:1;;5252:15;;5333:4;;5078:274;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;5063:289;;4887:1871;;;5427:4;-1:-1:-1;;;;;5415:16:58;:8;-1:-1:-1;;;;;5415:16:58;;5411:1347;;;5495:101;-1:-1:-1;;;;;5495:24:58;;5545:8;5572:10;5495:24;:101::i;:::-;5692:250;;-1:-1:-1;;;5692:250:58;;-1:-1:-1;;;;;5692:28:58;;;;;:250;;5782:10;;5849:1;;5913:15;;5692:250;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;5677:265;;5985:4;-1:-1:-1;;;;;5985:12:58;;6006;5985:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5411:1347;;;6147:101;-1:-1:-1;;;;;6147:24:58;;6197:8;6224:10;6147:24;:101::i;:::-;6344:403;;-1:-1:-1;;;6344:403:58;;-1:-1:-1;;;;;6344:30:58;;;;;:403;;6436:10;;6503:1;;;;6650:15;;6725:8;;6344:403;;;:::i;5401:467:36:-;5510:15;5542;5559:23;5594:5;-1:-1:-1;;;;;5586:25:36;5665:24;;;5707:5;5625:101;;;;;;;;:::i;:::-;;;;-1:-1:-1;;5625:101:36;;;;;;;;;;;;;;-1:-1:-1;;;;;5625:101:36;-1:-1:-1;;;;;;5625:101:36;;;;;;;;;;5586:150;;;;5625:101;5586:150;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5541:195;;;;5750:10;:37;;;;;5785:2;5764:10;:17;:23;;5750:37;5746:116;;;5813:38;5837:10;5849:1;5813:23;:38::i;:::-;5803:48;5401:467;-1:-1:-1;;;;;5401:467:36:o;2692:1279:54:-;2884:20;2955:30;;:::i;:::-;2999:10;2988:44;;;;;;;;;;;;:::i;:::-;2955:77;;3042:21;3066:8;-1:-1:-1;;;;;3066:18:54;;3093:4;3066:33;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3126:15;;3179:19;;;;3042:57;;-1:-1:-1;3126:15:54;-1:-1:-1;;;;;3157:41:54;;;;;;3153:738;;;3214:97;3256:3;-1:-1:-1;;;;;3256:11:54;;:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;3214:24:54;;;3287:10;3214:24;:97::i;:::-;3326:38;;-1:-1:-1;;;3326:38:54;;-1:-1:-1;;;;;3326:11:54;;;;;:38;;3346:4;;3353:10;;3326:38;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3153:738;;;3406:4;:19;;;-1:-1:-1;;;;;3385:40:54;3393:8;-1:-1:-1;;;;;3385:40:54;;3381:510;;;3441:18;3462:23;3474:3;-1:-1:-1;;;;;3474:8:54;;:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2327:8;;3462:11;:23::i;:::-;3441:44;;3555:24;3605:8;-1:-1:-1;;;;;3605:17:54;;:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3597:28;;3590:2;3582:43;;-1:-1:-1;3639:17:54;3660:56;3705:10;3660:36;:10;3582:43;3660:18;:36::i;:56::-;3773:15;;3639:77;;-1:-1:-1;3731:99:54;;-1:-1:-1;;;;;3731:24:54;;;3806:10;3731:24;:99::i;:::-;3844:36;;-1:-1:-1;;;3844:36:54;;-1:-1:-1;;;;;3844:10:54;;;;;:36;;3863:4;;3870:9;;3844:36;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3381:510;;;;3908:56;3950:13;3908:8;-1:-1:-1;;;;;3908:18:54;;3935:4;3908:33;;;;;;;;;;;;;;;:::i;1435:1201:49:-;1590:20;1627:18;1647:10;1659:15;1701:10;1690:50;;;;;;;;;;;;:::i;:::-;1626:114;;-1:-1:-1;1626:114:49;-1:-1:-1;1626:114:49;-1:-1:-1;1829:51:49;-1:-1:-1;;;;;1829:24:49;;1626:114;1869:10;1829:24;:51::i;:::-;1895:10;1891:709;;;2156:12;;;2166:1;2156:12;;;;;;;;;-1:-1:-1;;;2001:181:49;;;-1:-1:-1;;;;;2001:18:49;;;;;:181;;2071:10;;2137:1;;2001:181;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1986:196;;1891:709;;;2299:90;;-1:-1:-1;;;2299:90:49;;-1:-1:-1;;;;;2299:26:49;;;;;:90;;2343:4;;2365:10;;2299:90;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2563:12;;;2573:1;2563:12;;;;;;;;;-1:-1:-1;;;2403:186:49;;;2284:105;;-1:-1:-1;;;;;;2403:17:49;;;;;:186;;2284:105;;2535:10;;2403:186;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;1891:709;2610:19;;;1435:1201;;;;;:::o;1018:695:61:-;1214:20;1251:27;1280:19;1326:10;1315:51;;;;;;;;;;;;:::i;:::-;1250:116;;-1:-1:-1;1250:116:61;-1:-1:-1;1420:89:61;-1:-1:-1;;;;;1420:24:61;;1250:116;1489:10;1420:24;:89::i;:::-;1534:172;;-1:-1:-1;;;1534:172:61;;-1:-1:-1;;;;;1534:26:61;;;;;:172;;1574:9;;1597:8;;1627:4;;1659:1;;1690:6;;1534:172;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1519:187;1018:695;-1:-1:-1;;;;;;;1018:695:61:o;1186:622:53:-;1377:20;1414:16;1445:10;1434:34;;;;;;;;;;;;:::i;:::-;1413:55;-1:-1:-1;1553:54:53;-1:-1:-1;;;;;1553:24:53;;1413:55;1596:10;1553:24;:54::i;:::-;1633:168;;-1:-1:-1;;;1633:168:53;;-1:-1:-1;;;;;1633:12:53;;;;;:168;;1659:9;;1682:8;;1704:10;;1763:1;;1786:4;;1633:168;;;:::i;4623:515:36:-;4749:18;4784:15;4801:23;4836:5;-1:-1:-1;;;;;4828:25:36;4907:24;;;4949:5;4972:7;4867:126;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;4867:126:36;;;;;;;;;;;;;;-1:-1:-1;;;;;4867:126:36;-1:-1:-1;;;;;;4867:126:36;;;;;;;;;;4828:175;;;;4867:126;4828:175;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4783:220;;;;5017:10;:37;;;;;5052:2;5031:10;:17;:23;;5017:37;5013:119;;;5083:38;5107:10;5119:1;5083:23;:38::i;1121:515:50:-;1278:20;1315:12;1329:15;1371:10;1360:39;;;;;;;;;;;;:::i;:::-;1314:85;;-1:-1:-1;1314:85:50;-1:-1:-1;1455:51:50;-1:-1:-1;;;;;1455:24:50;;1314:85;1495:10;1455:24;:51::i;:::-;1532:10;:97;;1600:29;;-1:-1:-1;;;1600:29:50;;-1:-1:-1;;;;;1600:14:50;;;;;:29;;1623:4;;1600:29;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1532:97;;;1557:28;;-1:-1:-1;;;1557:28:50;;-1:-1:-1;;;;;1557:13:50;;;;;:28;;1579:4;;1557:28;;;:::i;9847:329:25:-;9942:32;10022:9;:16;-1:-1:-1;;;;;10001:38:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;10001:38:25;;9990:49;;10054:9;10049:121;10073:9;:16;10069:1;:20;10049:121;;;10124:9;10157:1;10153;10134:9;:16;:20;:24;10124:35;;;;;;;;;;;;;;10110:8;10119:1;10110:11;;;;;;;;-1:-1:-1;;;;;10110:49:25;;;:11;;;;;;;;;;;:49;10091:3;;10049:121;;10182:323;10275:32;10355:8;:15;-1:-1:-1;;;;;10334:37:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;10334:37:25;;10323:48;;10386:9;10381:118;10405:8;:15;10401:1;:19;10381:118;;;10455:8;10486:1;10482;10464:8;:15;:19;:23;10455:33;;;;;;;;;;;;;;10441:8;10450:1;10441:11;;;;;;;;-1:-1:-1;;;;;10441:47:25;;;:11;;;;;;;;;;;:47;10422:3;;10381:118;;1987:267:36;2131:39;;-1:-1:-1;;;2131:39:36;;2173:6;;-1:-1:-1;;;;;2131:15:36;;;;;:39;;2155:4;;2162:7;;2131:39;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:48;2127:121;;;2195:42;2209:5;2216:7;-1:-1:-1;;2195:13:36;:42::i;12561:416:21:-;12729:21;12770:14;;;:29;;-1:-1:-1;12788:11:21;;12770:29;:49;;;-1:-1:-1;12803:16:21;;12770:49;12766:63;;;-1:-1:-1;12828:1:21;12821:8;;12766:63;12851:18;;;12863:6;12851:9;:18;:9;12883:13;;;;;:23;12879:37;;12915:1;12908:8;;;;;12879:37;12959:11;12953:1;12939:11;:15;12934:1;:21;12933:37;;;;;;;12561:416;-1:-1:-1;;;;;12561:416:21:o;1625:373:39:-;1711:7;1742:1;1738;:5;1734:236;;;1759:200;1784:174;1844:62;1924:1;1943;1784:42;:174::i;:::-;1759:24;:200::i;:::-;-1:-1:-1;1986:5:39;;;1625:373::o;764:457::-;850:7;877:6;873:45;;-1:-1:-1;906:1:39;899:8;;873:45;939:5;;;943:1;939;:5;:1;958:5;;;;;:10;954:243;;984:202;1009:176;1069:64;1151:1;1170;1009:42;:176::i;2004:392::-;2090:7;2125:5;;;2144;;;2140:232;;;2165:196;2190:170;2250:58;2326:1;2345;2190:42;:170::i;1227:392::-;1313:7;1340:6;1336:232;;1362:195;1387:169;1447:57;1522:1;1541;1387:42;:169::i;1362:195::-;1577:9;1593:1;1589;:5;;;;;;;1227:392;-1:-1:-1;;;;1227:392:39:o;10511:627:25:-;10600:12;10753:17;;10801:13;10797:64;;10841:5;10834:12;;;;;10797:64;10511:627;10934:4;-1:-1:-1;;;;;10934:11:25;;:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;10934:23:25;;10966:4;10934:38;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;10930:86;;-1:-1:-1;11000:5:25;10993:12;;10930:86;11029:4;-1:-1:-1;;;;;11029:11:25;;:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;11029:23:25;;11061:4;11029:38;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;11025:86;;-1:-1:-1;11095:5:25;11088:12;;11025:86;-1:-1:-1;11127:4:25;10511:627;;;:::o;15225:654:37:-;15382:5;15390:2;15382:10;15371:1;:8;:21;15367:306;;;15408:254;15433:228;15498:95;15611:1;:8;15637:5;15645:2;15637:10;15433:47;:228::i;15408:254::-;15842:13;;15753:2;15842:13;15835:28;15821:52::o;14301:688::-;14422:14;14467:5;14475:2;14467:10;14456:1;:8;:21;14452:306;;;14493:254;14518:228;14583:95;14696:1;:8;14722:5;14730:2;14722:10;14518:47;:228::i;14493:254::-;-1:-1:-1;14936:13:37;14838:2;14936:13;14930:20;;14301:688::o;7279:552:58:-;7517:25;7637:4;-1:-1:-1;;;;;7624:17:58;:9;-1:-1:-1;;;;;7624:17:58;;:122;;7708:38;;-1:-1:-1;;;7708:38:58;;-1:-1:-1;;;;;7708:27:58;;;;;:38;;7736:9;;7708:38;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;7624:122;;;7656:37;;-1:-1:-1;;;7656:37:58;;-1:-1:-1;;;;;7656:27:58;;;;;:37;;7684:8;;7656:37;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;7613:133;-1:-1:-1;;;;;;7764:31:58;;7756:68;;;;-1:-1:-1;;;7756:68:58;;;;;;;:::i;2563:337:36:-;2698:21;2758:23;;;2795:2;2811:6;2722:105;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;2722:105:36;;;;;;;;;;;;;;-1:-1:-1;;;;;2722:105:36;-1:-1:-1;;;;;;2722:105:36;;;;;;;;;;;-1:-1:-1;2837:56:36;2876:5;2722:105;2837:30;:56::i;:::-;2563:337;;;;:::o;1217:351::-;1359:21;1419:22;;;1455:7;1476:9;1383:112;;;;;;;;;:::i;1401:322:43:-;1554:12;818:10;1625:28;;1667:9;1690:1;1705;1589:127;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;1589:127:43;;;;;;;;;;;;;;-1:-1:-1;;;;;1589:127:43;-1:-1:-1;;;;;;1589:127:43;;;;;;;;;;;-1:-1:-1;1401:322:43;;;;;:::o;1334:378:40:-;1522:12;1274:10;1593:37;;1644:9;1667:6;1687:8;1557:148;;;;;;;;;;:::i;6923:340:36:-;7055:15;7072:23;7099:6;-1:-1:-1;;;;;7099:11:36;7111:8;7099:21;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7054:66;;;;7134:10;:44;;;;;7148:30;7167:10;7148:18;:30::i;:::-;7130:81;;;7194:7;;;;7130:81;7220:36;7245:10;7220:24;:36::i;6923:340::-;;;:::o;6237:395::-;6337:17;6374:10;:17;6395:1;6374:22;6370:64;;;-1:-1:-1;6419:4:36;6412:11;;6370:64;6468:2;6447:10;:17;:23;6443:183;;6486:14;6503:38;6527:10;6539:1;6503:23;:38::i;:::-;6486:55;;6559:6;6569:1;6559:11;6555:61;;;6597:4;6590:11;;;;;-1:-1:-1;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;5:130::-;72:20;;97:33;72:20;97:33;:::i;458:707::-;;575:3;568:4;560:6;556:17;552:27;542:2;;-1:-1;;583:12;542:2;630:6;617:20;652:80;667:64;724:6;667:64;:::i;:::-;652:80;:::i;:::-;760:21;;;643:89;-1:-1;804:4;817:14;;;;792:17;;;906;;;897:27;;;;894:36;-1:-1;891:2;;;943:1;;933:12;891:2;968:1;953:206;978:6;975:1;972:13;953:206;;;85:6;72:20;97:33;124:5;97:33;:::i;:::-;1046:50;;1110:14;;;;1138;;;;1000:1;993:9;953:206;;;957:14;;;;;535:630;;;;:::o;1191:722::-;;1319:3;1312:4;1304:6;1300:17;1296:27;1286:2;;-1:-1;;1327:12;1286:2;1367:6;1361:13;1389:80;1404:64;1461:6;1404:64;:::i;1389:80::-;1497:21;;;1380:89;-1:-1;1541:4;1554:14;;;;1529:17;;;1643;;;1634:27;;;;1631:36;-1:-1;1628:2;;;1680:1;;1670:12;1628:2;1705:1;1690:217;1715:6;1712:1;1709:13;1690:217;;;226:6;220:13;238:33;265:5;238:33;:::i;:::-;1783:61;;1858:14;;;;1886;;;;1737:1;1730:9;1690:217;;1941:753;;2083:3;2076:4;2068:6;2064:17;2060:27;2050:2;;-1:-1;;2091:12;2050:2;2138:6;2125:20;2160:105;2175:89;2257:6;2175:89;:::i;2160:105::-;2293:21;;;2151:114;-1:-1;2337:4;2350:14;;;;2325:17;;;2445:1;2430:258;2455:6;2452:1;2449:13;2430:258;;;2562:62;2620:3;2337:4;2538:3;2525:17;2329:6;2513:30;;2562:62;:::i;:::-;2550:75;;2639:14;;;;2667;;;;2477:1;2470:9;2430:258;;3853:705;;3979:3;3972:4;3964:6;3960:17;3956:27;3946:2;;-1:-1;;3987:12;3946:2;4034:6;4021:20;4056:89;4071:73;4137:6;4071:73;:::i;4056:89::-;4173:21;;;4047:98;-1:-1;4217:4;4230:14;;;;4205:17;;;4325:1;4310:242;4335:6;4332:1;4329:13;4310:242;;;4442:46;4484:3;4217:4;4418:3;4405:17;4209:6;4393:30;;4442:46;:::i;:::-;4430:59;;4503:14;;;;4531;;;;4357:1;4350:9;4310:242;;4600:776;;4740:3;4733:4;4725:6;4721:17;4717:27;4707:2;;-1:-1;;4748:12;4707:2;4795:6;4782:20;4817:103;4832:87;4912:6;4832:87;:::i;4817:103::-;4948:21;;;4808:112;-1:-1;4992:4;5005:14;;;;4980:17;;;5094;;;5085:27;;;;5082:36;-1:-1;5079:2;;;5131:1;;5121:12;5079:2;5156:1;5141:229;5166:6;5163:1;5160:13;5141:229;;;11703:6;11690:20;11715:56;11765:5;11715:56;:::i;:::-;5234:73;;5321:14;;;;5349;;;;5188:1;5181:9;5141:229;;6262:788;;6406:3;6399:4;6391:6;6387:17;6383:27;6373:2;;-1:-1;;6414:12;6373:2;6461:6;6448:20;6483:107;6498:91;6582:6;6498:91;:::i;6483:107::-;6618:21;;;6474:116;-1:-1;6662:4;6675:14;;;;6650:17;;;6776:4;6764:17;;;6755:27;;;;6752:36;-1:-1;6749:2;;;6801:1;;6791:12;6749:2;6826:1;6811:233;6836:6;6833:1;6830:13;6811:233;;;6916:64;6976:3;6964:10;6916:64;:::i;:::-;6904:77;;6995:14;;;;7023;;;;6858:1;6851:9;6811:233;;;6815:14;;;;;;6366:684;;;;:::o;7076:707::-;;7193:3;7186:4;7178:6;7174:17;7170:27;7160:2;;-1:-1;;7201:12;7160:2;7248:6;7235:20;7270:80;7285:64;7342:6;7285:64;:::i;7270:80::-;7378:21;;;7261:89;-1:-1;7422:4;7435:14;;;;7410:17;;;7524;;;7515:27;;;;7512:36;-1:-1;7509:2;;;7561:1;;7551:12;7509:2;7586:1;7571:206;7596:6;7593:1;7590:13;7571:206;;;27140:20;;7664:50;;7728:14;;;;7756;;;;7618:1;7611:9;7571:206;;7809:722;;7937:3;7930:4;7922:6;7918:17;7914:27;7904:2;;-1:-1;;7945:12;7904:2;7985:6;7979:13;8007:80;8022:64;8079:6;8022:64;:::i;8007:80::-;8115:21;;;7998:89;-1:-1;8159:4;8172:14;;;;8147:17;;;8261;;;8252:27;;;;8249:36;-1:-1;8246:2;;;8298:1;;8288:12;8246:2;8323:1;8308:217;8333:6;8330:1;8327:13;8308:217;;;27288:13;;8401:61;;8476:14;;;;8504;;;;8355:1;8348:9;8308:217;;9227:440;;9328:3;9321:4;9313:6;9309:17;9305:27;9295:2;;-1:-1;;9336:12;9295:2;9383:6;9370:20;9405:64;9420:48;9461:6;9420:48;:::i;9405:64::-;9396:73;;9489:6;9482:5;9475:21;9593:3;9525:4;9584:6;9517;9575:16;;9572:25;9569:2;;;9610:1;;9600:12;9569:2;146033:6;9525:4;9517:6;9513:17;9525:4;9551:5;9547:16;146010:30;146089:1;146071:16;;;9525:4;146071:16;146064:27;9551:5;9288:379;-1:-1;;9288:379::o;9676:442::-;;9788:3;9781:4;9773:6;9769:17;9765:27;9755:2;;-1:-1;;9796:12;9755:2;9836:6;9830:13;9858:64;9873:48;9914:6;9873:48;:::i;9858:64::-;9849:73;;9942:6;9935:5;9928:21;10046:3;9978:4;10037:6;9970;10028:16;;10025:25;10022:2;;;10063:1;;10053:12;10022:2;10073:39;10105:6;9978:4;10004:5;10000:16;9978:4;9970:6;9966:17;10073:39;:::i;14779:174::-;14877:13;;151660:1;151650:12;;151640:2;;151676:1;;151666:12;19590:1028;;19713:4;19701:9;19696:3;19692:19;19688:30;19685:2;;;-1:-1;;19721:12;19685:2;19749:20;19713:4;19749:20;:::i;:::-;19740:29;;27153:6;27140:20;19842:16;19835:75;19978:2;20036:9;20032:22;72:20;97:33;124:5;97:33;:::i;:::-;19978:2;19993:16;;19986:75;20130:2;20184:22;;72:20;97:33;72:20;97:33;:::i;:::-;20130:2;20145:16;;20138:75;20274:2;20328:22;;72:20;97:33;72:20;97:33;:::i;:::-;20274:2;20289:16;;20282:75;20446:3;20431:19;;20418:33;-1:-1;;;;;20460:30;;20457:2;;;-1:-1;;20493:12;20457:2;20538:58;20592:3;20583:6;20572:9;20568:22;20538:58;:::i;:::-;20446:3;20524:5;20520:16;20513:84;;19679:939;;;;:::o;21796:2030::-;;21913:6;;21901:9;21896:3;21892:19;21888:32;21885:2;;;-1:-1;;21923:12;21885:2;21951:22;21913:6;21951:22;:::i;:::-;21942:31;;;22061:72;22129:3;22105:22;22061:72;:::i;:::-;22043:16;22036:98;22234:72;22302:3;22201:2;22282:9;22278:22;22234:72;:::i;:::-;22201:2;22220:5;22216:16;22209:98;22408:49;22453:3;22375:2;22433:9;22429:22;22408:49;:::i;:::-;22375:2;22394:5;22390:16;22383:75;22559:49;22604:3;22526:2;22584:9;22580:22;22559:49;:::i;:::-;22526:2;22545:5;22541:16;22534:75;22719:49;22764:3;22685;22744:9;22740:22;22719:49;:::i;:::-;22685:3;22705:5;22701:16;22694:75;22865:49;22910:3;22831;22890:9;22886:22;22865:49;:::i;:::-;22831:3;22851:5;22847:16;22840:75;23011:49;23056:3;22977;23036:9;23032:22;23011:49;:::i;:::-;22977:3;22997:5;22993:16;22986:75;23158:49;23203:3;23124;23183:9;23179:22;23158:49;:::i;:::-;23124:3;23144:5;23140:16;23133:75;23277:3;23313:49;23358:3;23277;23338:9;23334:22;23313:49;:::i;:::-;23293:18;;;23286:77;23424:3;23481:22;;;8741:20;23440:18;;;23433:77;23573:3;23609:48;23653:3;23629:22;;;23609:48;:::i;:::-;23573:3;23593:5;23589:18;23582:76;;23719:3;;23780:9;23776:22;27140:20;23719:3;23739:5;23735:18;23728:77;;21879:1947;;;;:::o;25876:773::-;;25992:4;25980:9;25975:3;25971:19;25967:30;25964:2;;;-1:-1;;26000:12;25964:2;26028:20;25992:4;26028:20;:::i;:::-;26019:29;;15058:6;15045:20;151779:1;151772:5;151769:12;151759:2;;151795:1;;151785:12;151759:2;26114:93;;26265:2;26317:22;;27551:20;27576:31;27551:20;27576:31;:::i;:::-;26298:47;26265:2;26284:5;26280:16;26273:73;;26404:2;26462:9;26458:22;8741:20;26404:2;26423:5;26419:16;26412:75;26545:2;26603:9;26599:22;8741:20;26545:2;26564:5;26560:16;26553:75;25958:691;;;;:::o;26656:130::-;26723:20;;26748:33;26723:20;26748:33;:::i;27351:128::-;27417:20;;-1:-1;;;;;143088:30;;152361:34;;152351:2;;152409:1;;152399:12;27756:241;;27860:2;27848:9;27839:7;27835:23;27831:32;27828:2;;;-1:-1;;27866:12;27828:2;85:6;72:20;97:33;124:5;97:33;:::i;28004:263::-;;28119:2;28107:9;28098:7;28094:23;28090:32;28087:2;;;-1:-1;;28125:12;28087:2;226:6;220:13;238:33;265:5;238:33;:::i;28274:809::-;;;;28481:2;28469:9;28460:7;28456:23;28452:32;28449:2;;;-1:-1;;28487:12;28449:2;375:6;369:13;387:41;422:5;387:41;:::i;:::-;28679:2;28664:18;;28658:25;28539:82;;-1:-1;;;;;;28692:30;;;28689:2;;;-1:-1;;28725:12;28689:2;28755:89;28836:7;28827:6;28816:9;28812:22;28755:89;:::i;:::-;28745:99;;28902:2;28891:9;28887:18;28881:25;28867:39;;28703:18;28918:6;28915:30;28912:2;;;-1:-1;;28948:12;28912:2;;28978:89;29059:7;29050:6;29039:9;29035:22;28978:89;:::i;:::-;28968:99;;;28443:640;;;;;:::o;29090:753::-;;;;;29270:3;29258:9;29249:7;29245:23;29241:33;29238:2;;;-1:-1;;29277:12;29238:2;85:6;72:20;97:33;124:5;97:33;:::i;:::-;29329:63;-1:-1;29429:2;29468:22;;72:20;97:33;72:20;97:33;:::i;:::-;29437:63;-1:-1;29537:2;29576:22;;72:20;97:33;72:20;97:33;:::i;:::-;29545:63;-1:-1;29673:2;29658:18;;29645:32;-1:-1;;;;;29686:30;;29683:2;;;-1:-1;;29719:12;29683:2;29749:78;29819:7;29810:6;29799:9;29795:22;29749:78;:::i;:::-;29739:88;;;29232:611;;;;;;;:::o;29850:721::-;;;;;30014:3;30002:9;29993:7;29989:23;29985:33;29982:2;;;-1:-1;;30021:12;29982:2;85:6;72:20;97:33;124:5;97:33;:::i;:::-;30073:63;-1:-1;30173:2;30212:22;;72:20;97:33;72:20;97:33;:::i;:::-;30181:63;-1:-1;30309:2;30294:18;;30281:32;-1:-1;;;;;30322:30;;30319:2;;;-1:-1;;30355:12;30319:2;30385:62;30439:7;30430:6;30419:9;30415:22;30385:62;:::i;:::-;29976:595;;;;-1:-1;30375:72;;30484:2;30523:22;27140:20;;-1:-1;;;29976:595::o;30578:763::-;;;;30766:2;30754:9;30745:7;30741:23;30737:32;30734:2;;;-1:-1;;30772:12;30734:2;85:6;72:20;97:33;124:5;97:33;:::i;:::-;30824:63;-1:-1;30952:2;30937:18;;30924:32;-1:-1;;;;;30965:30;;;30962:2;;;-1:-1;;30998:12;30962:2;31028:78;31098:7;31089:6;31078:9;31074:22;31028:78;:::i;:::-;31018:88;;31171:2;31160:9;31156:18;31143:32;31129:46;;30976:18;31187:6;31184:30;31181:2;;;-1:-1;;31217:12;31181:2;;31247:78;31317:7;31308:6;31297:9;31293:22;31247:78;:::i;31348:879::-;;;;;;31545:3;31533:9;31524:7;31520:23;31516:33;31513:2;;;-1:-1;;31552:12;31513:2;85:6;72:20;97:33;124:5;97:33;:::i;:::-;31604:63;-1:-1;31704:2;31743:22;;27140:20;;-1:-1;31812:2;31851:22;;72:20;97:33;72:20;97:33;:::i;:::-;31820:63;-1:-1;31920:2;31959:22;;72:20;97:33;72:20;97:33;:::i;:::-;31928:63;-1:-1;32056:3;32041:19;;32028:33;-1:-1;;;;;32070:30;;32067:2;;;-1:-1;;32103:12;32067:2;32133:78;32203:7;32194:6;32183:9;32179:22;32133:78;:::i;:::-;32123:88;;;31507:720;;;;;;;;:::o;32234:392::-;;32374:2;32362:9;32353:7;32349:23;32345:32;32342:2;;;-1:-1;;32380:12;32342:2;32431:17;32425:24;-1:-1;;;;;32461:6;32458:30;32455:2;;;-1:-1;;32491:12;32455:2;32521:89;32602:7;32593:6;32582:9;32578:22;32521:89;:::i;32633:833::-;;;;32852:2;32840:9;32831:7;32827:23;32823:32;32820:2;;;-1:-1;;32858:12;32820:2;32909:17;32903:24;-1:-1;;;;;32947:18;32939:6;32936:30;32933:2;;;-1:-1;;32969:12;32933:2;33071:6;33060:9;33056:22;;;2848:3;2841:4;2833:6;2829:17;2825:27;2815:2;;-1:-1;;2856:12;2815:2;2896:6;2890:13;2918:80;2933:64;2990:6;2933:64;:::i;2918:80::-;3004:16;3040:6;3033:5;3026:21;3070:4;;3087:3;3083:14;3076:21;;3070:4;3062:6;3058:17;3192:3;3070:4;;3176:6;3172:17;3062:6;3163:27;;3160:36;3157:2;;;-1:-1;;3199:12;3157:2;-1:-1;3225:10;;3219:217;3244:6;3241:1;3238:13;3219:217;;;8889:13;;3312:61;;3266:1;3259:9;;;;;3387:14;;;;3415;;3219:217;;;-1:-1;33131:18;;33125:25;32989:99;;-1:-1;33125:25;-1:-1;;;33159:30;;;33156:2;;;-1:-1;;33192:12;33156:2;;33222:89;33303:7;33294:6;33283:9;33279:22;33222:89;:::i;:::-;33212:99;;;33366:84;33442:7;33348:2;33422:9;33418:22;33366:84;:::i;:::-;33356:94;;32814:652;;;;;:::o;33473:419::-;;;33623:2;33611:9;33602:7;33598:23;33594:32;33591:2;;;-1:-1;;33629:12;33591:2;33687:17;33674:31;-1:-1;;;;;33725:18;33717:6;33714:30;33711:2;;;-1:-1;;33747:12;33711:2;33859:6;33848:9;33844:22;;;3607:3;3600:4;3592:6;3588:17;3584:27;3574:2;;-1:-1;;3615:12;3574:2;3658:6;3645:20;33725:18;3677:6;3674:30;3671:2;;;-1:-1;;3707:12;3671:2;3802:3;33623:2;;3786:6;3782:17;3743:6;3768:32;;3765:41;3762:2;;;-1:-1;;3809:12;3762:2;33623;3739:17;;;;;33767:109;;-1:-1;33585:307;;-1:-1;;;;33585:307::o;33899:799::-;;;;34105:2;34093:9;34084:7;34080:23;34076:32;34073:2;;;-1:-1;;34111:12;34073:2;34169:17;34156:31;-1:-1;;;;;34207:18;34199:6;34196:30;34193:2;;;-1:-1;;34229:12;34193:2;34259:87;34338:7;34329:6;34318:9;34314:22;34259:87;:::i;:::-;34249:97;;34411:2;34400:9;34396:18;34383:32;34369:46;;34207:18;34427:6;34424:30;34421:2;;;-1:-1;;34457:12;34421:2;;34487:87;34566:7;34557:6;34546:9;34542:22;34487:87;:::i;:::-;34477:97;;;34611:2;34654:9;34650:22;27140:20;34619:63;;34067:631;;;;;:::o;34705:423::-;;34857:2;34845:9;34836:7;34832:23;34828:32;34825:2;;;-1:-1;;34863:12;34825:2;34921:17;34908:31;-1:-1;;;;;34951:6;34948:30;34945:2;;;-1:-1;;34981:12;34945:2;35011:101;35104:7;35095:6;35084:9;35080:22;35011:101;:::i;35135:548::-;;;35304:2;35292:9;35283:7;35279:23;35275:32;35272:2;;;-1:-1;;35310:12;35272:2;35368:17;35355:31;-1:-1;;;;;35398:6;35395:30;35392:2;;;-1:-1;;35428:12;35392:2;35458:101;35551:7;35542:6;35531:9;35527:22;35458:101;:::i;:::-;35448:111;;;35596:2;35639:9;35635:22;72:20;97:33;124:5;97:33;:::i;:::-;35604:63;;;;35266:417;;;;;:::o;35690:673::-;;;;35876:2;35864:9;35855:7;35851:23;35847:32;35844:2;;;-1:-1;;35882:12;35844:2;35940:17;35927:31;-1:-1;;;;;35970:6;35967:30;35964:2;;;-1:-1;;36000:12;35964:2;36030:101;36123:7;36114:6;36103:9;36099:22;36030:101;:::i;:::-;36020:111;;;36168:2;36211:9;36207:22;72:20;97:33;124:5;97:33;:::i;:::-;36176:63;-1:-1;36276:2;36315:22;;72:20;97:33;72:20;97:33;:::i;:::-;36284:63;;;;35838:525;;;;;:::o;36370:909::-;;;;36631:2;36619:9;36610:7;36606:23;36602:32;36599:2;;;-1:-1;;36637:12;36599:2;36695:17;36682:31;-1:-1;;;;;36733:18;36725:6;36722:30;36719:2;;;-1:-1;;36755:12;36719:2;36874:6;36863:9;36859:22;;;5567:3;5560:4;5552:6;5548:17;5544:27;5534:2;;-1:-1;;5575:12;5534:2;5622:6;5609:20;5644:108;5659:92;5744:6;5659:92;:::i;5644:108::-;5758:16;5794:6;5787:5;5780:21;5824:4;;5841:3;5837:14;5830:21;;5824:4;5816:6;5812:17;5938:6;5948:3;5824:4;5938:6;5930;5926:19;5816:6;5917:29;;5914:38;5911:2;;;-1:-1;;5955:12;5911:2;-1:-1;5981:10;;5975:236;6000:6;5997:1;5994:13;5975:236;;;6080:65;6141:3;6129:10;6080:65;:::i;:::-;6068:78;;6022:1;6015:9;;;;;6160:14;;;;6188:16;;;;5975:236;;;-1:-1;36775:116;;-1:-1;36941:18;;36928:32;;-1:-1;;;;36969:30;;;36966:2;;;-1:-1;;37002:12;36966:2;;37032:105;37129:7;37120:6;37109:9;37105:22;37032:105;:::i;:::-;37022:115;;;37192:71;37255:7;37174:2;37235:9;37231:22;37192:71;:::i;37286:392::-;;37426:2;37414:9;37405:7;37401:23;37397:32;37394:2;;;-1:-1;;37432:12;37394:2;37483:17;37477:24;-1:-1;;;;;37513:6;37510:30;37507:2;;;-1:-1;;37543:12;37507:2;37573:89;37654:7;37645:6;37634:9;37630:22;37573:89;:::i;37685:657::-;;;37867:2;37855:9;37846:7;37842:23;37838:32;37835:2;;;-1:-1;;37873:12;37835:2;37924:17;37918:24;-1:-1;;;;;37962:18;37954:6;37951:30;37948:2;;;-1:-1;;37984:12;37948:2;38014:89;38095:7;38086:6;38075:9;38071:22;38014:89;:::i;:::-;38004:99;;38161:2;38150:9;38146:18;38140:25;38126:39;;37962:18;38177:6;38174:30;38171:2;;;-1:-1;;38207:12;38171:2;;38237:89;38318:7;38309:6;38298:9;38294:22;38237:89;:::i;:::-;38227:99;;;37829:513;;;;;:::o;38349:263::-;;38464:2;38452:9;38443:7;38439:23;38435:32;38432:2;;;-1:-1;;38470:12;38432:2;-1:-1;8889:13;;38426:186;-1:-1;38426:186::o;38619:981::-;;;;;;38824:3;38812:9;38803:7;38799:23;38795:33;38792:2;;;-1:-1;;38831:12;38792:2;9031:6;9018:20;9043:32;9069:5;9043:32;:::i;:::-;38883:62;-1:-1;38982:2;39021:22;;72:20;97:33;72:20;97:33;:::i;:::-;38990:63;-1:-1;39090:2;39129:22;;72:20;97:33;72:20;97:33;:::i;:::-;39098:63;-1:-1;39226:2;39211:18;;39198:32;-1:-1;;;;;39239:30;;;39236:2;;;-1:-1;;39272:12;39236:2;39302:62;39356:7;39347:6;39336:9;39332:22;39302:62;:::i;:::-;39292:72;;39429:3;39418:9;39414:19;39401:33;39387:47;;39250:18;39446:6;39443:30;39440:2;;;-1:-1;;39476:12;39440:2;;39506:78;39576:7;39567:6;39556:9;39552:22;39506:78;:::i;39607:845::-;;;;;;39787:3;39775:9;39766:7;39762:23;39758:33;39755:2;;;-1:-1;;39794:12;39755:2;9031:6;9018:20;9043:32;9069:5;9043:32;:::i;:::-;39846:62;-1:-1;39945:2;39984:22;;72:20;97:33;72:20;97:33;:::i;:::-;39953:63;-1:-1;40053:2;40092:22;;72:20;97:33;72:20;97:33;:::i;:::-;40061:63;-1:-1;40189:2;40174:18;;40161:32;-1:-1;;;;;40202:30;;40199:2;;;-1:-1;;40235:12;40199:2;40265:62;40319:7;40310:6;40299:9;40295:22;40265:62;:::i;:::-;39749:703;;;;-1:-1;39749:703;;40364:3;40404:22;27140:20;;39749:703;-1:-1;;;39749:703::o;40459:360::-;;40583:2;40571:9;40562:7;40558:23;40554:32;40551:2;;;-1:-1;;40589:12;40551:2;40640:17;40634:24;-1:-1;;;;;40670:6;40667:30;40664:2;;;-1:-1;;40700:12;40664:2;40730:73;40795:7;40786:6;40775:9;40771:22;40730:73;:::i;41142:576::-;;;41323:2;41311:9;41302:7;41298:23;41294:32;41291:2;;;-1:-1;;41329:12;41291:2;10803:6;10797:13;10815:57;10866:5;10815:57;:::i;:::-;41537:2;41522:18;;41516:25;41381:98;;-1:-1;;;;;;41550:30;;41547:2;;;-1:-1;;41583:12;41547:2;41613:89;41694:7;41685:6;41674:9;41670:22;41613:89;:::i;41725:601::-;;;;41907:2;41895:9;41886:7;41882:23;41878:32;41875:2;;;-1:-1;;41913:12;41875:2;11176:6;11170:13;11188:54;11236:5;11188:54;:::i;:::-;42097:2;42162:22;;11522:13;41965:95;;-1:-1;11540:48;11522:13;11540:48;:::i;:::-;42231:2;42278:22;;8614:13;42105:89;;-1:-1;8632:30;8614:13;8632:30;:::i;42333:427::-;;;42479:2;42467:9;42458:7;42454:23;42450:32;42447:2;;;-1:-1;;42485:12;42447:2;11355:6;11349:13;11367:50;11411:5;11367:50;:::i;:::-;42665:2;42712:22;;8614:13;42537:91;;-1:-1;8632:30;8614:13;8632:30;:::i;43083:552::-;;;43252:2;43240:9;43231:7;43227:23;43223:32;43220:2;;;-1:-1;;43258:12;43220:2;12255:6;12249:13;12267:61;12322:5;12267:61;:::i;:::-;43470:2;43455:18;;43449:25;43310:102;;-1:-1;;;;;;43483:30;;43480:2;;;-1:-1;;43516:12;43480:2;43546:73;43611:7;43602:6;43591:9;43587:22;43546:73;:::i;47316:985::-;;;;;47569:3;47557:9;47548:7;47544:23;47540:33;47537:2;;;-1:-1;;47576:12;47537:2;14331:6;14318:20;14343:58;14395:5;14343:58;:::i;:::-;47628:88;-1:-1;47753:2;47792:22;;72:20;97:33;72:20;97:33;:::i;:::-;47761:63;-1:-1;47889:2;47874:18;;47861:32;-1:-1;;;;;47902:30;;;47899:2;;;-1:-1;;47935:12;47899:2;47965:101;48058:7;48049:6;48038:9;48034:22;47965:101;:::i;:::-;47955:111;;48131:2;48120:9;48116:18;48103:32;48089:46;;47913:18;48147:6;48144:30;48141:2;;;-1:-1;;48177:12;48141:2;;48207:78;48277:7;48268:6;48257:9;48253:22;48207:78;:::i;48863:341::-;;49017:2;49005:9;48996:7;48992:23;48988:32;48985:2;;;-1:-1;;49023:12;48985:2;16199:20;49017:2;16199:20;:::i;:::-;10612:6;10606:13;10624:59;10677:5;10624:59;:::i;:::-;16277:112;;16452:2;16517:22;;;8889:13;16467:16;;;16460:86;;;;-1:-1;16284:16;48979:225;-1:-1;48979:225::o;49211:832::-;;;;;49418:9;49409:7;49405:23;49430:3;49405:23;49401:33;49398:2;;;-1:-1;;49437:12;49398:2;15585:4;15564:19;15560:30;15557:2;;;-1:-1;;15593:12;15557:2;;15621:20;15585:4;15621:20;:::i;:::-;85:6;72:20;97:33;124:5;97:33;:::i;:::-;15699:101;;15863:2;15917:22;;;8741:20;15878:16;;;15871:75;15706:16;-1:-1;15585:4;49667:22;;72:20;97:33;72:20;97:33;:::i;:::-;49636:63;-1:-1;49736:2;49775:22;;72:20;97:33;72:20;97:33;:::i;:::-;49744:63;-1:-1;49872:3;49857:19;;49844:33;-1:-1;;;;;49886:30;;49883:2;;;-1:-1;;49919:12;50050:907;;;;;50264:3;50252:9;50243:7;50239:23;50235:33;50232:2;;;-1:-1;;50271:12;50232:2;50329:17;50316:31;-1:-1;;;;;50367:18;50359:6;50356:30;50353:2;;;-1:-1;;50389:12;50353:2;50474:22;;;;16742:4;16721:19;;;16717:30;16714:2;;;-1:-1;;16750:12;16714:2;16778:20;16742:4;16778:20;:::i;:::-;16884:74;16954:3;16930:22;16884:74;:::i;:::-;16866:16;16859:100;17049:2;17038:9;17034:18;17021:32;50367:18;17065:6;17062:30;17059:2;;;-1:-1;;17095:12;17059:2;17140:99;17235:3;17226:6;17215:9;17211:22;17140:99;:::i;:::-;17049:2;17126:5;17122:16;17115:125;;50409:97;;;;50561:53;50606:7;17049:2;50586:9;50582:22;50561:53;:::i;:::-;50551:63;;50669:53;50714:7;16742:4;50694:9;50690:22;50669:53;:::i;50964:332::-;;51113:3;51101:9;51092:7;51088:23;51084:33;51081:2;;;-1:-1;;51120:12;51081:2;18326:20;51113:3;18326:20;:::i;:::-;226:6;220:13;238:33;265:5;238:33;:::i;:::-;18411:86;;18578:2;18642:22;;9164:13;9182:32;9164:13;9182:32;:::i;:::-;18578:2;18593:16;;18586:85;18739:2;18803:22;;15345:13;15363:32;15345:13;15363:32;:::i;:::-;18739:2;18754:16;;18747:85;18898:2;18962:22;;15345:13;15363:32;15345:13;15363:32;:::i;:::-;18898:2;18913:16;;18906:85;18917:5;51075:221;-1:-1;;;51075:221::o;51303:824::-;;;;;51505:9;51496:7;51492:23;51517:3;51492:23;51488:33;51485:2;;;-1:-1;;51524:12;51485:2;17431:4;17410:19;17406:30;17403:2;;;-1:-1;;17439:12;17403:2;;17467:20;17431:4;17467:20;:::i;:::-;85:6;72:20;97:33;124:5;97:33;:::i;:::-;17552:75;;17708:2;17761:22;;9018:20;9043:32;9018:20;9043:32;:::i;:::-;17708:2;17723:16;;17716:74;17858:2;17911:22;;15199:20;15224:32;15199:20;15224:32;:::i;:::-;17858:2;17873:16;;17866:74;18006:2;18059:22;;15199:20;15224:32;15199:20;15224:32;:::i;:::-;18006:2;18021:16;;18014:74;18025:5;-1:-1;51729:53;51774:7;17431:4;51750:22;;51729:53;:::i;:::-;51719:63;;51838:53;51883:7;51819:3;51863:9;51859:22;51838:53;:::i;:::-;51828:63;;51956:3;51945:9;51941:19;51928:33;-1:-1;;;;;51973:6;51970:30;51967:2;;;-1:-1;;52003:12;52134:818;;;;;52334:9;52325:7;52321:23;52346:3;52321:23;52317:33;52314:2;;;-1:-1;;52353:12;52314:2;19181:4;19160:19;19156:30;19153:2;;;-1:-1;;19189:12;19153:2;;19217:20;19181:4;19217:20;:::i;:::-;85:6;72:20;97:33;124:5;97:33;:::i;:::-;19298:75;;19436:2;19490:22;;72:20;97:33;72:20;97:33;:::i;:::-;19436:2;19451:16;;19444:75;19455:5;-1:-1;19181:4;52576:22;;72:20;97:33;72:20;97:33;:::i;52959:410::-;;53108:2;53096:9;53087:7;53083:23;53079:32;53076:2;;;-1:-1;;53114:12;53076:2;53165:17;53159:24;-1:-1;;;;;53203:18;53195:6;53192:30;53189:2;;;-1:-1;;53225:12;53189:2;53321:22;;;;20802:4;20781:19;;;20777:30;20774:2;;;-1:-1;;20810:12;20774:2;20838:20;20802:4;20838:20;:::i;:::-;27294:6;27288:13;20931:16;20924:86;53108:2;21147:9;21143:22;220:13;238:33;265:5;238:33;:::i;:::-;53108:2;21093:16;;21086:86;21241:2;21306:22;;220:13;238:33;220:13;238:33;:::i;:::-;21241:2;21256:16;;21249:86;21396:2;21461:22;;220:13;238:33;220:13;238:33;:::i;:::-;21396:2;21411:16;;21404:86;21572:3;21557:19;;21551:26;21586:30;;;21583:2;;;-1:-1;;21619:12;21583:2;21664:69;21729:3;21720:6;21709:9;21705:22;21664:69;:::i;:::-;21572:3;21646:16;;21639:95;-1:-1;21650:5;53070:299;-1:-1;;;;;53070:299::o;53376:907::-;;;;;53590:3;53578:9;53569:7;53565:23;53561:33;53558:2;;;-1:-1;;53597:12;53558:2;53655:17;53642:31;-1:-1;;;;;53693:18;53685:6;53682:30;53679:2;;;-1:-1;;53715:12;53679:2;53745:87;53824:7;53815:6;53804:9;53800:22;53745:87;:::i;:::-;53735:97;;53869:2;53912:9;53908:22;72:20;63:29;;97:33;124:5;97:33;:::i;:::-;53877:63;;-1:-1;53977:2;54016:22;;72:20;;97:33;72:20;97:33;:::i;:::-;53985:63;;-1:-1;54113:2;54098:18;;54085:32;;54126:30;;;54123:2;;;-1:-1;;54159:12;54290:771;;;;;54479:3;54467:9;54458:7;54454:23;54450:33;54447:2;;;-1:-1;;54486:12;54447:2;54544:17;54531:31;-1:-1;;;;;54574:6;54571:30;54568:2;;;-1:-1;;54604:12;54568:2;54634:87;54713:7;54704:6;54693:9;54689:22;54634:87;:::i;:::-;54624:97;;;54758:2;54801:9;54797:22;8741:20;54766:63;;54866:2;54909:9;54905:22;72:20;97:33;124:5;97:33;:::i;:::-;54874:63;-1:-1;54974:2;55013:22;;72:20;97:33;72:20;97:33;:::i;:::-;54441:620;;;;-1:-1;54441:620;;-1:-1;;54441:620::o;55068:640::-;;;;55279:3;55267:9;55258:7;55254:23;55250:33;55247:2;;;-1:-1;;55286:12;55247:2;55348:81;55421:7;55397:22;55348:81;:::i;:::-;55338:91;;55485:80;55557:7;55466:3;55537:9;55533:22;55485:80;:::i;:::-;55475:90;;55602:3;55664:9;55660:22;12055:20;12080:51;12125:5;12080:51;:::i;55715:337::-;;55867:2;55855:9;55846:7;55842:23;55838:32;55835:2;;;-1:-1;;55873:12;55835:2;24052:20;55867:2;24052:20;:::i;:::-;226:6;220:13;238:33;265:5;238:33;:::i;:::-;24135:86;;24292:2;24357:22;;220:13;238:33;220:13;238:33;:::i;:::-;24292:2;24307:16;;24300:86;24311:5;55829:223;-1:-1;;;55829:223::o;56059:815::-;;;;;56257:9;56248:7;56244:23;56269:3;56244:23;56240:33;56237:2;;;-1:-1;;56276:12;56237:2;24575:4;24554:19;24550:30;24547:2;;;-1:-1;;24583:12;24547:2;;24611:20;24575:4;24611:20;:::i;:::-;85:6;72:20;97:33;124:5;97:33;:::i;:::-;24694:75;;24839:2;24893:22;;;8741:20;24854:16;;;24847:75;24994:2;25048:22;;72:20;97:33;72:20;97:33;:::i;:::-;24994:2;25009:16;;25002:75;25013:5;-1:-1;24575:4;56497:22;;72:20;97:33;72:20;97:33;:::i;:::-;56466:63;-1:-1;56566:3;56606:22;;72:20;97:33;72:20;97:33;:::i;:::-;56575:63;-1:-1;56703:3;56688:19;;56675:33;-1:-1;;;;;56717:30;;56714:2;;;-1:-1;;56750:12;56881:585;;;;57042:9;57033:7;57029:23;57054:3;57029:23;57025:33;57022:2;;;-1:-1;;57061:12;57022:2;25265:4;25244:19;25240:30;25237:2;;;-1:-1;;25273:12;25237:2;;25301:20;25265:4;25301:20;:::i;:::-;25440:22;8889:13;25390:16;25383:86;25532:2;25617:9;25613:22;14700:13;151539:1;151532:5;151529:12;151519:2;;-1:-1;;151545:12;151519:2;25532;25547:16;;25540:102;25721:2;25786:22;;26871:13;26889:33;26871:13;26889:33;:::i;:::-;25721:2;25736:16;;25729:86;25265:4;57301:22;;26871:13;25740:5;;-1:-1;26889:33;26871:13;26889:33;:::i;:::-;57370:3;57418:22;;8614:13;57259:74;;-1:-1;8632:30;8614:13;8632:30;:::i;57473:261::-;;57587:2;57575:9;57566:7;57562:23;57558:32;57555:2;;;-1:-1;;57593:12;57555:2;27017:6;27011:13;142927:8;152142:5;142916:20;152118:5;152115:34;152105:2;;-1:-1;;152153:12;58011:399;;;58143:2;58131:9;58122:7;58118:23;58114:32;58111:2;;;-1:-1;;58149:12;58111:2;-1:-1;;27288:13;;58312:2;58362:22;;;27288:13;;;;;-1:-1;58105:305::o;58417:259::-;;58530:2;58518:9;58509:7;58505:23;58501:32;58498:2;;;-1:-1;;58536:12;58498:2;27701:6;27695:13;27713:31;27738:5;27713:31;:::i;60082:127::-;-1:-1;;;;;142789:54;60159:45;;60153:56::o;60621:690::-;;60814:5;135220:12;137052:6;137047:3;137040:19;137089:4;;137084:3;137080:14;60826:93;;137089:4;60990:5;134223:14;-1:-1;61029:260;61054:6;61051:1;61048:13;61029:260;;;61115:13;;-1:-1;;;;;142789:54;60159:45;;58837:14;;;;136259;;;;20471:18;61069:9;61029:260;;;-1:-1;61295:10;;60745:566;-1:-1;;;;;60745:566::o;61350:690::-;;61543:5;135220:12;137052:6;137047:3;137040:19;137089:4;;137084:3;137080:14;61555:93;;137089:4;61719:5;134223:14;-1:-1;61758:260;61783:6;61780:1;61777:13;61758:260;;;61844:13;;66044:37;;59019:14;;;;136259;;;;61805:1;61798:9;61758:260;;66778:323;;66910:5;135220:12;137052:6;137047:3;137040:19;66993:52;67038:6;137089:4;137084:3;137080:14;137089:4;67019:5;67015:16;66993:52;:::i;:::-;146466:7;146450:14;-1:-1;;146446:28;67057:39;;;;137089:4;67057:39;;66858:243;-1:-1;;66858:243::o;77855:839::-;78082:23;;-1:-1;;;;;142789:54;;;60159:45;;78268:4;78257:16;;;78251:23;138821:13;138814:21;78322:14;;;65826:34;78421:4;78410:16;;;78404:23;142789:54;;;78497:14;;;60159:45;78604:4;78593:16;;;78587:23;138821:13;138814:21;78658:14;;65826:34;77987:707::o;78768:582::-;;78998:16;78992:23;66051:3;66044:37;79169:4;79162:5;79158:16;79152:23;78919:4;79169;79199:3;79195:14;79188:38;79241:71;78919:4;78914:3;78910:14;79293:12;79241:71;:::i;79440:1073::-;;79690:16;79684:23;66051:3;66044:37;79862:4;79855:5;79851:16;79845:23;20471:18;;142800:42;;;;138631:5;142789:54;79862:4;79926:3;79922:14;60159:45;142800:42;80024:4;80017:5;80013:16;80007:23;142789:54;80024:4;80088:3;80084:14;60159:45;142800:42;80178:4;80171:5;80167:16;80161:23;142789:54;80178:4;80242:3;80238:14;60159:45;;;80332:4;80325:5;80321:16;80315:23;79609:4;80332;80362:3;80358:14;80351:38;80404:71;79609:4;79604:3;79600:14;80456:12;80404:71;:::i;80585:2139::-;80837:86;80908:14;80814:16;80808:23;80837:86;:::i;:::-;81008:4;81001:5;80997:16;80991:23;81020:86;81008:4;81095:3;81091:14;81077:12;81020:86;:::i;:::-;;81192:4;81185:5;81181:16;81175:23;81204:63;81192:4;81256:3;81252:14;81238:12;81204:63;:::i;:::-;;81353:4;81346:5;81342:16;81336:23;81365:63;81353:4;81417:3;81413:14;81399:12;81365:63;:::i;:::-;;81522:4;81515:5;81511:16;81505:23;81534:63;81522:4;81586:3;81582:14;81568:12;81534:63;:::i;:::-;;81677:4;81670:5;81666:16;81660:23;81689:63;81677:4;81741:3;81737:14;81723:12;81689:63;:::i;:::-;;81832:4;81825:5;81821:16;81815:23;81844:63;81832:4;81896:3;81892:14;81878:12;81844:63;:::i;:::-;;81988:4;81981:5;81977:16;81971:23;82000:63;81988:4;82052:3;82048:14;82034:12;82000:63;:::i;:::-;;82150:6;;82143:5;82139:18;82133:25;82164:65;82150:6;82216:3;82212:16;82198:12;82164:65;:::i;:::-;-1:-1;;82308:6;82297:18;;;82291:25;82370:16;;;66044:37;82468:6;82457:18;;;82451:25;82482:63;82528:16;;;82451:25;82482:63;:::i;:::-;-1:-1;;82624:6;82613:18;;;82607:25;82686:16;;66044:37;80707:2017::o;83406:800::-;83634:16;83628:23;141831:54;141879:5;141831:54;:::i;:::-;69125:66;;83812:4;83801:16;;;83795:23;143201:4;143190:16;83868:14;;;86186:35;83959:4;83948:16;;;83942:23;84019:14;;;66044:37;84110:4;84099:16;;;84093:23;84170:14;;66044:37;83526:680::o;85565:103::-;-1:-1;;;;;142669:46;85626:37;;85620:48::o;86022:100::-;-1:-1;;;;;143088:30;86081:36;;86075:47::o;86233:291::-;;146033:6;146028:3;146023;146010:30;146071:16;;146064:27;;;146071:16;86377:147;-1:-1;86377:147::o;86531:271::-;;67618:5;135220:12;67729:52;67774:6;67769:3;67762:4;67755:5;67751:16;67729:52;:::i;:::-;67793:16;;;;;86665:137;-1:-1;;86665:137::o;86809:222::-;-1:-1;;;;;142789:54;;;;60159:45;;86936:2;86921:18;;86907:124::o;87038:349::-;-1:-1;;;;;142789:54;;;;60012:58;;87373:2;87358:18;;66044:37;87201:2;87186:18;;87172:215::o;87394:333::-;-1:-1;;;;;142789:54;;;60159:45;;142789:54;;87713:2;87698:18;;60159:45;87549:2;87534:18;;87520:207::o;87734:432::-;-1:-1;;;;;142789:54;;;60159:45;;142789:54;;;;88075:2;88060:18;;60159:45;138821:13;;138814:21;88152:2;88137:18;;65826:34;87911:2;87896:18;;87882:284::o;88173:628::-;-1:-1;;;;;142789:54;;;60159:45;;142789:54;;88561:2;88546:18;;60159:45;138821:13;;138814:21;88638:2;88623:18;;65826:34;88396:3;88675:2;88660:18;;88653:48;;;88173:628;;88715:76;;88381:19;;88777:6;88715:76;:::i;88808:640::-;-1:-1;;;;;142789:54;;;60159:45;;142789:54;;89202:2;89187:18;;60159:45;89037:3;89239:2;89224:18;;89217:48;;;88808:640;;89279:76;;89022:19;;89341:6;89279:76;:::i;:::-;89271:84;;66074:5;89434:2;89423:9;89419:18;66044:37;89008:440;;;;;;;:::o;89455:460::-;-1:-1;;;;;142789:54;;;60159:45;;142789:54;;;;89810:2;89795:18;;60159:45;89901:2;89886:18;;69810:58;;;;89646:2;89631:18;;89617:298::o;89922:481::-;-1:-1;;;;;142789:54;;60159:45;;90127:2;90245;90230:18;;90223:48;;;89922:481;;90285:108;;90112:18;;90379:6;90285:108;:::i;90410:740::-;-1:-1;;;;;142789:54;;60159:45;;90693:2;90811;90796:18;;90789:48;;;90410:740;;90851:108;;90678:18;;90945:6;90851:108;:::i;:::-;91007:9;91001:4;90997:20;90992:2;90981:9;90977:18;90970:48;91032:108;91135:4;91126:6;91032:108;:::i;91157:1000::-;-1:-1;;;;;142789:54;;60159:45;;91518:3;91637:2;91622:18;;91615:48;;;91157:1000;;91677:108;;91503:19;;91771:6;91677:108;:::i;:::-;91833:9;91827:4;91823:20;91818:2;91807:9;91803:18;91796:48;91858:108;91961:4;91952:6;91858:108;:::i;:::-;91850:116;;92014:9;92008:4;92004:20;91999:2;91988:9;91984:18;91977:48;92039:108;92142:4;92133:6;92039:108;:::i;92164:740::-;-1:-1;;;;;142789:54;;60159:45;;92447:2;92565;92550:18;;92543:48;;;92164:740;;92605:108;;92432:18;;92699:6;92605:108;:::i;:::-;92761:9;92755:4;92751:20;92746:2;92735:9;92731:18;92724:48;92786:108;92889:4;92880:6;92786:108;:::i;92911:321::-;-1:-1;;;;;142789:54;;;;60159:45;;138821:13;138814:21;93218:2;93203:18;;65826:34;93060:2;93045:18;;93031:201::o;93239:417::-;-1:-1;;;;;142789:54;;60159:45;;93412:2;93530;93515:18;;93508:48;;;93239:417;;93570:76;;93397:18;;93632:6;93570:76;:::i;93663:876::-;-1:-1;;;;;142789:54;;60159:45;;93663:876;141831:54;141879:5;141831:54;:::i;:::-;145293:38;94163:2;94152:9;94148:18;69433:62;93986:3;94200:2;94189:9;94185:18;94178:48;94240:108;93986:3;93975:9;93971:19;94334:6;94240:108;:::i;:::-;94396:9;94390:4;94386:20;94381:2;94370:9;94366:18;94359:48;94421:108;94524:4;94515:6;94421:108;:::i;94546:1644::-;-1:-1;;;;;142789:54;;;60159:45;;94546:1644;;95093:3;;141831:54;141879:5;141831:54;:::i;:::-;145293:38;95270:2;95259:9;95255:18;69433:62;95093:3;95307:2;95296:9;95292:18;95285:48;95347:108;95093:3;95082:9;95078:19;95441:6;95347:108;:::i;:::-;95339:116;;95503:9;95497:4;95493:20;95488:2;95477:9;95473:18;95466:48;95528:108;95631:4;95622:6;95528:108;:::i;:::-;142789:54;;;95715:3;95700:19;;60159:45;95520:116;-1:-1;141831:54;141879:5;141831:54;:::i;:::-;145293:38;95811:3;95800:9;95796:19;69433:62;95865:9;95859:4;95855:20;95849:3;95838:9;95834:19;95827:49;95890:108;95993:4;95984:6;95890:108;:::i;:::-;95882:116;;96047:9;96041:4;96037:20;96031:3;96020:9;96016:19;96009:49;96072:108;96175:4;96166:6;96072:108;:::i;96537:888::-;;96870:2;96891:17;96884:47;96945:108;96870:2;96859:9;96855:18;97039:6;96945:108;:::i;:::-;97101:9;97095:4;97091:20;97086:2;97075:9;97071:18;97064:48;97126:108;97229:4;97220:6;97126:108;:::i;:::-;97118:116;;97282:9;97276:4;97272:20;97267:2;97256:9;97252:18;97245:48;97307:108;97410:4;97401:6;97307:108;:::i;97432:481::-;;97637:2;97658:17;97651:47;97712:108;97637:2;97626:9;97622:18;97806:6;97712:108;:::i;:::-;97704:116;;66074:5;97899:2;97888:9;97884:18;66044:37;97608:305;;;;;:::o;97920:924::-;;98271:2;98260:9;98256:18;98271:2;98292:17;98285:47;98346:126;62295:5;135220:12;137052:6;137047:3;137040:19;137080:14;98260:9;137080:14;62307:102;;137089:4;;;137080:14;137089:4;62466:6;62462:17;98260:9;62453:27;;137089:4;62560:5;134223:14;-1:-1;62599:357;62624:6;62621:1;62618:13;62599:357;;;62676:20;;98260:9;62680:4;62676:20;;62671:3;62664:33;59167:64;59227:3;62731:6;62725:13;59167:64;:::i;:::-;62935:14;;;;62745:90;-1:-1;136259:14;;;;62646:1;62639:9;62599:357;;;62603:14;;98520:9;98514:4;98510:20;137089:4;98494:9;98490:18;98483:48;98545:108;98648:4;98639:6;98545:108;:::i;:::-;98537:116;;;;;98701:9;98695:4;98691:20;98686:2;98675:9;98671:18;98664:48;98726:108;98829:4;98820:6;98726:108;:::i;98851:1022::-;;99215:3;99237:17;99230:47;99291:131;99215:3;99204:9;99200:19;99408:6;99291:131;:::i;:::-;99501:2;99486:18;;66044:37;;;;-1:-1;99592:2;99577:18;;69810:58;;;;-1:-1;;;;;142789:54;;;99675:2;99660:18;;60159:45;142789:54;;99766:3;99751:19;;60012:58;142800:42;99843:19;;;69810:58;99283:139;99186:687;-1:-1;99186:687::o;99880:486::-;100115:2;100129:47;;;135220:12;;100100:18;;;137040:19;;;99880:486;;100115:2;137080:14;;;;;;64421:17;;;64412:27;;;;134223:14;;;99880:486;64578:417;64603:6;64600:1;64597:13;64578:417;;;64655:20;;;-1:-1;;64655:20;64643:33;;64704:13;;75318:23;;75354:38;;;75407:71;75243:14;;;75318:23;75407:71;:::i;:::-;75555:16;;;75549:23;138821:13;138814:21;75620:14;;;65826:34;;;;64974:14;;;;75399:79;-1:-1;136259:14;;;;64625:1;64618:9;64578:417;;;-1:-1;100182:174;;100086:280;-1:-1;;;;;;;;100086:280::o;100373:370::-;;100550:2;100571:17;100564:47;100625:108;100550:2;100539:9;100535:18;100719:6;100625:108;:::i;100750:629::-;;101005:2;101026:17;101019:47;101080:108;101005:2;100994:9;100990:18;101174:6;101080:108;:::i;:::-;101236:9;101230:4;101226:20;101221:2;101210:9;101206:18;101199:48;101261:108;101364:4;101355:6;101261:108;:::i;101386:210::-;138821:13;;138814:21;65826:34;;101507:2;101492:18;;101478:118::o;101603:840::-;138821:13;;138814:21;65826:34;;-1:-1;;;;;142789:54;;102067:2;102052:18;;60159:45;101908:3;102104:2;102089:18;;102082:48;;;101603:840;;102144:108;;101893:19;;102238:6;102144:108;:::i;102450:222::-;66044:37;;;102577:2;102562:18;;102548:124::o;102679:936::-;;66074:5;66051:3;66044:37;103008:3;103127:2;103116:9;103112:18;103105:48;103167:76;103008:3;102997:9;102993:19;103229:6;103167:76;:::i;103622:896::-;-1:-1;;;;;;138987:78;;66272:36;;-1:-1;;;;;142789:54;;;104090:2;104075:18;;60159:45;142789:54;;104173:2;104158:18;;60159:45;142800:42;104210:2;104195:18;;104188:48;;;103622:896;;104250:76;;103912:19;;104312:6;104250:76;:::i;:::-;104375:9;104369:4;104365:20;104359:3;104348:9;104344:19;104337:49;104400:108;104503:4;104494:6;104400:108;:::i;104525:748::-;-1:-1;;;;;;138987:78;;66272:36;;-1:-1;;;;;142789:54;;;104943:2;104928:18;;60159:45;142789:54;;105026:2;105011:18;;60159:45;142800:42;105063:2;105048:18;;105041:48;;;104525:748;;105103:76;;104765:19;;105165:6;105103:76;:::i;:::-;105095:84;;66074:5;105258:3;105247:9;105243:19;66044:37;104751:522;;;;;;;;:::o;105280:306::-;;105425:2;105446:17;105439:47;105500:76;105425:2;105414:9;105410:18;105562:6;105500:76;:::i;106238:860::-;-1:-1;;;;;142789:54;;;67908:76;;142789:54;;;106760:2;106745:18;;67908:76;142789:54;;106843:2;106828:18;;60159:45;106934:2;106919:18;;69810:58;;;142800:42;106971:3;106956:19;;106949:49;;;106238:860;;107012:76;;106534:19;;107074:6;107012:76;:::i;107105:532::-;-1:-1;;;;;142789:54;;;67908:76;;142789:54;;;;107542:2;107527:18;;67908:76;142927:8;142916:20;;;107623:2;107608:18;;85744:36;107332:2;107317:18;;107303:334::o;107644:776::-;-1:-1;;;;;142789:54;;;67908:76;;142789:54;;;108148:2;108133:18;;67908:76;108231:2;108216:18;;66044:37;;;;108322:2;108307:18;;69810:58;142789:54;;;108405:3;108390:19;;60159:45;107937:3;107922:19;;107908:512::o;109226:776::-;-1:-1;;;;;142789:54;;;67908:76;;142789:54;;;;109730:2;109715:18;;67908:76;109813:2;109798:18;;66044:37;;;;109904:2;109889:18;;69810:58;109987:3;109972:19;;66044:37;;;;109519:3;109504:19;;109490:512::o;110009:1260::-;-1:-1;;;;;142789:54;;;67908:76;;110624:2;110609:18;;66044:37;;;142789:54;;;110730:2;110715:18;;67908:76;142789:54;;;110829:2;110814:18;;60159:45;110912:3;110897:19;;66044:37;;;142800:42;110989:19;;69810:58;;;142789:54;;111104:3;111089:19;;60159:45;110436:3;111142;111127:19;;111120:49;;;110009:1260;;111183:76;110421:19;;;111245:6;111183:76;:::i;111276:664::-;-1:-1;;;;;142789:54;;;67908:76;;111729:2;111714:18;;66044:37;;;;142789:54;;111835:2;111820:18;;67908:76;111926:2;111911:18;;69810:58;;;;111541:3;111526:19;;111512:428::o;111947:776::-;-1:-1;;;;;142789:54;;;67908:76;;112428:2;112413:18;;66044:37;;;;142789:54;;;;112534:2;112519:18;;67908:76;112625:2;112610:18;;69810:58;;;;112708:3;112693:19;;66044:37;;;;112240:3;112225:19;;112211:512::o;112730:482::-;112932:2;112917:18;;141831:54;141879:5;141831:54;:::i;:::-;68766:69;;;113115:2;113100:18;;66044:37;;;;113198:2;113183:18;;;66044:37;112903:309;:::o;113219:512::-;113436:2;113421:18;;146711:1;146701:12;;146691:2;;146717:9;113738:560;142585:2;142574:21;;;69566:36;;142574:21;;;;114112:2;114097:18;;69566:36;114195:2;114180:18;;66044:37;143201:4;143190:16;;;114284:2;114269:18;;70106:56;113951:3;113936:19;;113922:376::o;114305:460::-;69810:58;;;114668:2;114653:18;;66044:37;;;;-1:-1;;;;;142789:54;114751:2;114736:18;;60159:45;114496:2;114481:18;;114467:298::o;114772:416::-;114972:2;114986:47;;;70399:2;114957:18;;;137040:19;70435:34;137080:14;;;70415:55;-1:-1;;;70490:12;;;70483:28;70530:12;;;114943:245::o;115195:416::-;115395:2;115409:47;;;70781:2;115380:18;;;137040:19;70817:26;137080:14;;;70797:47;70863:12;;;115366:245::o;115618:416::-;115818:2;115832:47;;;71114:2;115803:18;;;137040:19;71150:34;137080:14;;;71130:55;-1:-1;;;71205:12;;;71198:36;71253:12;;;115789:245::o;116041:416::-;116241:2;116255:47;;;71504:2;116226:18;;;137040:19;71540:34;137080:14;;;71520:55;71609:28;71595:12;;;71588:50;71657:12;;;116212:245::o;116464:416::-;116664:2;116678:47;;;71908:2;116649:18;;;137040:19;71944:34;137080:14;;;71924:55;-1:-1;;;71999:12;;;71992:29;72040:12;;;116635:245::o;116887:416::-;117087:2;117101:47;;;72291:2;117072:18;;;137040:19;72327:34;137080:14;;;72307:55;-1:-1;;;72382:12;;;72375:39;72433:12;;;117058:245::o;117310:416::-;117510:2;117524:47;;;72684:2;117495:18;;;137040:19;72720:34;137080:14;;;72700:55;-1:-1;;;72775:12;;;72768:27;72814:12;;;117481:245::o;117733:416::-;117933:2;117947:47;;;117918:18;;;137040:19;73101:34;137080:14;;;73081:55;73155:12;;;117904:245::o;118156:416::-;118356:2;118370:47;;;73406:2;118341:18;;;137040:19;73442:34;137080:14;;;73422:55;73511:26;73497:12;;;73490:48;73557:12;;;118327:245::o;118579:416::-;118779:2;118793:47;;;73808:2;118764:18;;;137040:19;73844:34;137080:14;;;73824:55;-1:-1;;;73899:12;;;73892:39;73950:12;;;118750:245::o;119002:416::-;119202:2;119216:47;;;74201:2;119187:18;;;137040:19;74237:34;137080:14;;;74217:55;74306:29;74292:12;;;74285:51;74355:12;;;119173:245::o;119425:378::-;74716:23;;-1:-1;;;;;142789:54;67908:76;;74915:4;74904:16;;;74898:23;74975:14;;;66044:37;;;;119630:2;119615:18;;119601:202::o;119810:359::-;75986:23;;-1:-1;;;;;142789:54;60159:45;;76177:4;76166:16;;;76160:23;-1:-1;;;;;;138987:78;76235:14;;;66272:36;76336:4;76325:16;;;76319:23;142585:2;142574:21;;;76394:14;;;69566:36;;;;76493:4;76482:16;;;76476:23;142574:21;;76551:14;;;69566:36;;;;120005:3;119990:19;;119976:193::o;120176:410::-;;120373:2;120394:17;120387:47;76928:16;76922:23;76856:4;120373:2;120362:9;120358:18;76958:38;77011:71;76847:14;120362:9;76847:14;77063:12;77011:71;:::i;:::-;77003:79;;20471:18;;142800:42;;;120373:2;77165:5;77161:16;77155:23;142789:54;77232:14;120362:9;77232:14;60159:45;77232:14;77323:5;77319:16;77313:23;77390:14;120362:9;77390:14;66044:37;77390:14;77481:5;77477:16;77471:23;77548:14;120362:9;77548:14;66044:37;77548:14;77647:5;77643:16;77637:23;76856:4;120362:9;77714:14;66044:37;120440:136;;;;120344:242;;;;:::o;120593:740::-;;120876:2;120897:17;120890:47;120951:108;120876:2;120865:9;120861:18;121045:6;120951:108;:::i;:::-;121107:9;121101:4;121097:20;121092:2;121081:9;121077:18;121070:48;121132:108;121235:4;121226:6;121132:108;:::i;:::-;121124:116;;;66074:5;121319:2;121308:9;121304:18;66044:37;120847:486;;;;;;:::o;121340:852::-;;121651:3;121673:17;121666:47;121727:108;121651:3;121640:9;121636:19;121821:6;121727:108;:::i;:::-;121883:9;121877:4;121873:20;121868:2;121857:9;121853:18;121846:48;121908:108;122011:4;122002:6;121908:108;:::i;:::-;122095:2;122080:18;;66044:37;;;;-1:-1;;122178:2;122163:18;66044:37;121900:116;121622:570;-1:-1;;121622:570::o;122199:406::-;;122394:2;122415:17;122408:47;122469:126;122394:2;122383:9;122379:18;122581:6;122469:126;:::i;122612:740::-;;122891:3;122913:17;122906:47;122967:126;122891:3;122880:9;122876:19;123079:6;122967:126;:::i;:::-;123172:2;123157:18;;66044:37;;;;-1:-1;;;;;;142789:54;;;123255:2;123240:18;;60159:45;142789:54;;123338:2;123323:18;;;60159:45;122959:134;122862:490;-1:-1;122862:490::o;123359:555::-;123624:3;123609:19;;123639:127;123613:9;123739:6;123639:127;:::i;:::-;123777;123899:3;123888:9;123884:19;123875:6;123777:127;:::i;123921:703::-;124232:3;124217:19;;124247:127;124221:9;124347:6;124247:127;:::i;:::-;124385;124507:3;124496:9;124492:19;124483:6;124385:127;:::i;:::-;-1:-1;;;;;142789:54;;;;124609:3;124594:19;;;;67908:76;124203:421;;-1:-1;;124203:421::o;124631:370::-;83059:23;;-1:-1;;;;;142789:54;;;60159:45;;83240:4;83229:16;;;83223:23;142789:54;83300:14;;;60159:45;;;;124832:2;124817:18;;124803:198::o;125008:870::-;;125351:3;125373:17;125366:47;84525:16;84519:23;125351:3;125340:9;125336:19;66044:37;84690:4;84683:5;84679:16;84673:23;146939:1;146932:5;146929:12;146919:2;;146945:9;146919:2;84762:14;;;69276:62;84859:4;84848:16;;84842:23;84871:86;84942:14;;;84842:23;84871:86;:::i;:::-;;85040:4;85033:5;85029:16;85023:23;85052:86;85123:14;125340:9;85123:14;85109:12;85052:86;:::i;:::-;;85219:4;85212:5;85208:16;85202:23;85279:14;125340:9;85279:14;66044:37;85377:4;85370:5;85366:16;85360:23;84451:4;85403:14;125340:9;85403:14;85396:38;85449:71;84442:14;125340:9;84442:14;85501:12;85449:71;:::i;:::-;125419:124;;;125554:138;84690:4;125677:9;125673:18;125664:6;125554:138;:::i;:::-;85377:4;125764:19;;66044:37;;;;84451:4;125848:19;66044:37;125322:556;;-1:-1;;125322:556::o;126114:1092::-;;66074:5;66051:3;66044:37;145430:24;126662:2;126651:9;126647:18;69810:58;126489:3;126699:2;126688:9;126684:18;126677:48;126739:108;126489:3;126478:9;126474:19;126833:6;126739:108;:::i;:::-;126895:9;126889:4;126885:20;126880:2;126869:9;126865:18;126858:48;126920:108;127023:4;127014:6;126920:108;:::i;:::-;-1:-1;;;;;142789:54;;;;127107:3;127092:19;;60159:45;-1:-1;;142800:42;127176:19;66044:37;126912:116;126460:746;-1:-1;;;;126460:746::o;127213:878::-;;66074:5;66051:3;66044:37;145430:24;127706:2;127695:9;127691:18;69810:58;127533:3;127743:2;127732:9;127728:18;127721:48;127783:131;127533:3;127522:9;127518:19;127900:6;127783:131;:::i;:::-;-1:-1;;;;;142789:54;;;;127993:2;127978:18;;60159:45;-1:-1;128076:3;128061:19;66044:37;127775:139;127504:587;-1:-1;;;127504:587::o;128098:544::-;;66074:5;66051:3;66044:37;145430:24;128479:2;128468:9;128464:18;69810:58;128307:2;128516;128505:9;128501:18;128494:48;128556:76;128307:2;128296:9;128292:18;128618:6;128556:76;:::i;128649:746::-;66044:37;;;129100:2;129085:18;;69810:58;;;;129191:2;129176:18;;69810:58;;;;129274:2;129259:18;;66044:37;-1:-1;;;;;142789:54;129380:3;129365:19;;67908:76;128927:3;128912:19;;128898:497::o;129402:460::-;66044:37;;;129765:2;129750:18;;69810:58;;;;129848:2;129833:18;;66044:37;129593:2;129578:18;;129564:298::o;130404:506::-;;;130539:11;130526:25;130590:48;;130614:8;130598:14;130594:29;130590:48;130570:18;130566:73;130556:2;;-1:-1;;130643:12;130556:2;130670:33;;130724:18;;;-1:-1;;;;;;130751:30;;130748:2;;;-1:-1;;130784:12;130748:2;130629:4;130812:13;;-1:-1;130598:14;130844:38;;;130834:49;;130831:2;;;130896:1;;130886:12;130917:256;130979:2;130973:9;131005:17;;;-1:-1;;;;;131065:34;;131101:22;;;131062:62;131059:2;;;131137:1;;131127:12;131059:2;130979;131146:22;130957:216;;-1:-1;130957:216::o;131180:304::-;;-1:-1;;;;;131331:6;131328:30;131325:2;;;-1:-1;;131361:12;131325:2;-1:-1;131406:4;131394:17;;;131459:15;;131262:222::o;133780:321::-;;-1:-1;;;;;133915:6;133912:30;133909:2;;;-1:-1;;133945:12;133909:2;-1:-1;146466:7;133999:17;-1:-1;;133995:33;134086:4;134076:15;;133846:255::o;146106:268::-;146171:1;146178:101;146192:6;146189:1;146186:13;146178:101;;;146259:11;;;146253:18;146240:11;;;146233:39;146214:2;146207:10;146178:101;;;146294:6;146291:1;146288:13;146285:2;;;-1:-1;;146171:1;146341:16;;146334:27;146155:219::o;146487:112::-;146577:1;146570:5;146567:12;146557:2;;146583:9;146557:2;146551:48;:::o;147080:117::-;-1:-1;;;;;142789:54;;147139:35;;147129:2;;147188:1;;147178:12;147344:111;147425:5;138821:13;138814:21;147403:5;147400:32;147390:2;;147446:1;;147436:12;147586:115;-1:-1;;;;;;138987:78;;147644:34;;147634:2;;147692:1;;147682:12;151811:115;151896:5;142585:2;142574:21;151872:5;151869:34;151859:2;;151917:1;;151907:12;151933:117;-1:-1;;;;;152020:5;142669:46;151995:5;151992:35;151982:2;;152041:1;;152031:12;152425:113;143201:4;152508:5;143190:16;152485:5;152482:33;152472:2;;152529:1;;152519:12"
            }
        }
    },
    "sourceTreeHashHex": "0x7022fff89191a153fc7d34286a2aabee2cc4862009f2daa4d350b0b8c8e426ba",
    "sources": {
        "./ERC20BridgeSampler.sol": {
            "id": 8,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./BalancerSampler.sol\";\nimport \"./BalancerV2Sampler.sol\";\nimport \"./BancorSampler.sol\";\nimport \"./CurveSampler.sol\";\nimport \"./DODOSampler.sol\";\nimport \"./DODOV2Sampler.sol\";\nimport \"./Eth2DaiSampler.sol\";\nimport \"./KyberSampler.sol\";\nimport \"./KyberDmmSampler.sol\";\nimport \"./LiquidityProviderSampler.sol\";\nimport \"./MakerPSMSampler.sol\";\nimport \"./MStableSampler.sol\";\nimport \"./MooniswapSampler.sol\";\nimport \"./NativeOrderSampler.sol\";\nimport \"./ShellSampler.sol\";\nimport \"./TwoHopSampler.sol\";\nimport \"./UniswapSampler.sol\";\nimport \"./UniswapV2Sampler.sol\";\nimport \"./UniswapV3Sampler.sol\";\nimport \"./UtilitySampler.sol\";\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol\";\n\ncontract ERC20BridgeSampler is\n    BalancerSampler,\n    BalancerV2Sampler,\n    BancorSampler,\n    CurveSampler,\n    DODOSampler,\n    DODOV2Sampler,\n    Eth2DaiSampler,\n    KyberSampler,\n    KyberDmmSampler,\n    LiquidityProviderSampler,\n    MakerPSMSampler,\n    MStableSampler,\n    MooniswapSampler,\n    NativeOrderSampler,\n    ShellSampler,\n    TwoHopSampler,\n    UniswapSampler,\n    UniswapV2Sampler,\n    UniswapV3Sampler,\n    UtilitySampler\n{\n\n    struct CallResults {\n        bytes data;\n        bool success;\n    }\n\n    constructor(IEtherTokenV06 weth)\n        public\n        BancorSampler(weth)\n        CurveSampler(weth)\n        KyberSampler(weth)\n        MooniswapSampler(weth)\n        UniswapSampler(weth)\n    { }\n\n    /// @dev Call multiple public functions on this contract in a single transaction.\n    /// @param callDatas ABI-encoded call data for each function call.\n    /// @return callResults ABI-encoded results data for each call.\n    function batchCall(bytes[] calldata callDatas)\n        external\n        payable\n        returns (CallResults[] memory callResults)\n    {\n        callResults = new CallResults[](callDatas.length);\n        for (uint256 i = 0; i != callDatas.length; ++i) {\n            callResults[i].success = true;\n            if (callDatas[i].length == 0) {\n                continue;\n            }\n            (callResults[i].success, callResults[i].data) = address(this).call(callDatas[i]);\n        }\n    }\n}\n"
        },
        "./BalancerSampler.sol": {
            "id": 1,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinBalancer.sol\";\nimport \"./SwapRevertSampler.sol\";\n\ncontract BalancerSampler is\n    MixinBalancer,\n    SwapRevertSampler\n{\n\n    function sampleSwapFromBalancer(\n        address sellToken,\n        address buyToken,\n        bytes memory bridgeData,\n        uint256 takerTokenAmount\n    )\n        external\n        returns (uint256)\n    {\n        return _tradeBalancer(\n            IERC20TokenV06(sellToken),\n            IERC20TokenV06(buyToken),\n            takerTokenAmount,\n            bridgeData\n        );\n    }\n\n    /// @dev Sample sell quotes from Balancer.\n    /// @param poolAddress Address of the Balancer pool to query.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return gasUsed gas consumed in each sample sell\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromBalancer(\n        address poolAddress,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        returns (uint256[] memory gasUsed, uint256[] memory makerTokenAmounts)\n    {\n        (gasUsed, makerTokenAmounts) = _sampleSwapQuotesRevert(\n            SwapRevertSamplerQuoteOpts({\n                sellToken: takerToken,\n                buyToken: makerToken,\n                bridgeData: abi.encode(poolAddress),\n                getSwapQuoteCallback: this.sampleSwapFromBalancer\n            }),\n            takerTokenAmounts\n        );\n    }\n\n    /// @dev Sample buy quotes from Balancer.\n    /// @param poolAddress Address of the Balancer pool to query.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return gasUsed gas consumed in each sample sell\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromBalancer(\n        address poolAddress,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        returns (uint256[] memory gasUsed, uint256[] memory takerTokenAmounts)\n    {\n        (gasUsed, takerTokenAmounts) = _sampleSwapApproximateBuys(\n            SwapRevertSamplerBuyQuoteOpts({\n                sellToken: takerToken,\n                buyToken: makerToken,\n                sellTokenData: abi.encode(poolAddress),\n                buyTokenData: abi.encode(poolAddress),\n                getSwapQuoteCallback: this.sampleSwapFromBalancer\n            }),\n            makerTokenAmounts\n        );\n\n    }\n}\n"
        },
        "@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinBalancer.sol": {
            "id": 45,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\n\ninterface IBalancerPool {\n    /// @dev Sell `tokenAmountIn` of `tokenIn` and receive `tokenOut`.\n    /// @param tokenIn The token being sold\n    /// @param tokenAmountIn The amount of `tokenIn` to sell.\n    /// @param tokenOut The token being bought.\n    /// @param minAmountOut The minimum amount of `tokenOut` to buy.\n    /// @param maxPrice The maximum value for `spotPriceAfter`.\n    /// @return tokenAmountOut The amount of `tokenOut` bought.\n    /// @return spotPriceAfter The new marginal spot price of the given\n    ///         token pair for this pool.\n    function swapExactAmountIn(\n        IERC20TokenV06 tokenIn,\n        uint tokenAmountIn,\n        IERC20TokenV06 tokenOut,\n        uint minAmountOut,\n        uint maxPrice\n    ) external returns (uint tokenAmountOut, uint spotPriceAfter);\n}\n\ncontract MixinBalancer {\n\n    using LibERC20TokenV06 for IERC20TokenV06;\n\n    function _tradeBalancer(\n        IERC20TokenV06 sellToken,\n        IERC20TokenV06 buyToken,\n        uint256 sellAmount,\n        bytes memory bridgeData\n    )\n        internal\n        returns (uint256 boughtAmount)\n    {\n        // Decode the bridge data.\n        (IBalancerPool pool) = abi.decode(\n            bridgeData,\n            (IBalancerPool)\n        );\n        sellToken.approveIfBelow(\n            address(pool),\n            sellAmount\n        );\n        // Sell all of this contract's `sellToken` token balance.\n        (boughtAmount,) = pool.swapExactAmountIn(\n            sellToken,  // tokenIn\n            sellAmount, // tokenAmountIn\n            buyToken,   // tokenOut\n            1,          // minAmountOut\n            uint256(-1) // maxPrice\n        );\n        return boughtAmount;\n    }\n}\n"
        },
        "@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol": {
            "id": 36,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol\";\nimport \"./IERC20TokenV06.sol\";\n\n\nlibrary LibERC20TokenV06 {\n    bytes constant private DECIMALS_CALL_DATA = hex\"313ce567\";\n\n    /// @dev Calls `IERC20TokenV06(token).approve()`.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param spender The address that receives an allowance.\n    /// @param allowance The allowance to set.\n    function compatApprove(\n        IERC20TokenV06 token,\n        address spender,\n        uint256 allowance\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.approve.selector,\n            spender,\n            allowance\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).approve()` and sets the allowance to the\n    ///      maximum if the current approval is not already >= an amount.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param spender The address that receives an allowance.\n    /// @param amount The minimum allowance needed.\n    function approveIfBelow(\n        IERC20TokenV06 token,\n        address spender,\n        uint256 amount\n    )\n        internal\n    {\n        if (token.allowance(address(this), spender) < amount) {\n            compatApprove(token, spender, uint256(-1));\n        }\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).transfer()`.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param to The address that receives the tokens\n    /// @param amount Number of tokens to transfer.\n    function compatTransfer(\n        IERC20TokenV06 token,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.transfer.selector,\n            to,\n            amount\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).transferFrom()`.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param from The owner of the tokens.\n    /// @param to The address that receives the tokens\n    /// @param amount Number of tokens to transfer.\n    function compatTransferFrom(\n        IERC20TokenV06 token,\n        address from,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.transferFrom.selector,\n            from,\n            to,\n            amount\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Retrieves the number of decimals for a token.\n    ///      Returns `18` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @return tokenDecimals The number of decimals places for the token.\n    function compatDecimals(IERC20TokenV06 token)\n        internal\n        view\n        returns (uint8 tokenDecimals)\n    {\n        tokenDecimals = 18;\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(DECIMALS_CALL_DATA);\n        if (didSucceed && resultData.length >= 32) {\n            tokenDecimals = uint8(LibBytesV06.readUint256(resultData, 0));\n        }\n    }\n\n    /// @dev Retrieves the allowance for a token, owner, and spender.\n    ///      Returns `0` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @param owner The owner of the tokens.\n    /// @param spender The address the spender.\n    /// @return allowance_ The allowance for a token, owner, and spender.\n    function compatAllowance(IERC20TokenV06 token, address owner, address spender)\n        internal\n        view\n        returns (uint256 allowance_)\n    {\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(\n            abi.encodeWithSelector(\n                token.allowance.selector,\n                owner,\n                spender\n            )\n        );\n        if (didSucceed && resultData.length >= 32) {\n            allowance_ = LibBytesV06.readUint256(resultData, 0);\n        }\n    }\n\n    /// @dev Retrieves the balance for a token owner.\n    ///      Returns `0` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @param owner The owner of the tokens.\n    /// @return balance The token balance of an owner.\n    function compatBalanceOf(IERC20TokenV06 token, address owner)\n        internal\n        view\n        returns (uint256 balance)\n    {\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(\n            abi.encodeWithSelector(\n                token.balanceOf.selector,\n                owner\n            )\n        );\n        if (didSucceed && resultData.length >= 32) {\n            balance = LibBytesV06.readUint256(resultData, 0);\n        }\n    }\n\n    /// @dev Check if the data returned by a non-static call to an ERC20 token\n    ///      is a successful result. Supported functions are `transfer()`,\n    ///      `transferFrom()`, and `approve()`.\n    /// @param resultData The raw data returned by a non-static call to the ERC20 token.\n    /// @return isSuccessful Whether the result data indicates success.\n    function isSuccessfulResult(bytes memory resultData)\n        internal\n        pure\n        returns (bool isSuccessful)\n    {\n        if (resultData.length == 0) {\n            return true;\n        }\n        if (resultData.length >= 32) {\n            uint256 result = LibBytesV06.readUint256(resultData, 0);\n            if (result == 1) {\n                return true;\n            }\n        }\n    }\n\n    /// @dev Executes a call on address `target` with calldata `callData`\n    ///      and asserts that either nothing was returned or a single boolean\n    ///      was returned equal to `true`.\n    /// @param target The call target.\n    /// @param callData The abi-encoded call data.\n    function _callWithOptionalBooleanResult(\n        address target,\n        bytes memory callData\n    )\n        private\n    {\n        (bool didSucceed, bytes memory resultData) = target.call(callData);\n        if (didSucceed && isSuccessfulResult(resultData)) {\n            return;\n        }\n        LibRichErrorsV06.rrevert(resultData);\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol": {
            "id": 42,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibRichErrorsV06 {\n\n    // bytes4(keccak256(\"Error(string)\"))\n    bytes4 internal constant STANDARD_ERROR_SELECTOR = 0x08c379a0;\n\n    // solhint-disable func-name-mixedcase\n    /// @dev ABI encode a standard, string revert error payload.\n    ///      This is the same payload that would be included by a `revert(string)`\n    ///      solidity statement. It has the function signature `Error(string)`.\n    /// @param message The error string.\n    /// @return The ABI encoded error.\n    function StandardError(string memory message)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            STANDARD_ERROR_SELECTOR,\n            bytes(message)\n        );\n    }\n    // solhint-enable func-name-mixedcase\n\n    /// @dev Reverts an encoded rich revert reason `errorData`.\n    /// @param errorData ABI encoded error data.\n    function rrevert(bytes memory errorData)\n        internal\n        pure\n    {\n        assembly {\n            revert(add(errorData, 0x20), mload(errorData))\n        }\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol": {
            "id": 37,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./errors/LibBytesRichErrorsV06.sol\";\nimport \"./errors/LibRichErrorsV06.sol\";\n\n\nlibrary LibBytesV06 {\n\n    using LibBytesV06 for bytes;\n\n    /// @dev Gets the memory address for a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of byte array. This\n    ///         points to the header of the byte array which contains\n    ///         the length.\n    function rawAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := input\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Gets the memory address for the contents of a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of the contents of the byte array.\n    function contentAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := add(input, 32)\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Copies `length` bytes from memory location `source` to `dest`.\n    /// @param dest memory address to copy bytes to.\n    /// @param source memory address to copy bytes from.\n    /// @param length number of bytes to copy.\n    function memCopy(\n        uint256 dest,\n        uint256 source,\n        uint256 length\n    )\n        internal\n        pure\n    {\n        if (length < 32) {\n            // Handle a partial word by reading destination and masking\n            // off the bits we are interested in.\n            // This correctly handles overlap, zero lengths and source == dest\n            assembly {\n                let mask := sub(exp(256, sub(32, length)), 1)\n                let s := and(mload(source), not(mask))\n                let d := and(mload(dest), mask)\n                mstore(dest, or(s, d))\n            }\n        } else {\n            // Skip the O(length) loop when source == dest.\n            if (source == dest) {\n                return;\n            }\n\n            // For large copies we copy whole words at a time. The final\n            // word is aligned to the end of the range (instead of after the\n            // previous) to handle partial words. So a copy will look like this:\n            //\n            //  ####\n            //      ####\n            //          ####\n            //            ####\n            //\n            // We handle overlap in the source and destination range by\n            // changing the copying direction. This prevents us from\n            // overwriting parts of source that we still need to copy.\n            //\n            // This correctly handles source == dest\n            //\n            if (source > dest) {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because it\n                    // is easier to compare with in the loop, and these\n                    // are also the addresses we need for copying the\n                    // last bytes.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the last 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the last bytes in\n                    // source already due to overlap.\n                    let last := mload(sEnd)\n\n                    // Copy whole words front to back\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} lt(source, sEnd) {} {\n                        mstore(dest, mload(source))\n                        source := add(source, 32)\n                        dest := add(dest, 32)\n                    }\n\n                    // Write the last 32 bytes\n                    mstore(dEnd, last)\n                }\n            } else {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because those\n                    // are the starting points when copying a word at the end.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the first 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the first bytes in\n                    // source already due to overlap.\n                    let first := mload(source)\n\n                    // Copy whole words back to front\n                    // We use a signed comparisson here to allow dEnd to become\n                    // negative (happens when source and dest < 32). Valid\n                    // addresses in local memory will never be larger than\n                    // 2**255, so they can be safely re-interpreted as signed.\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} slt(dest, dEnd) {} {\n                        mstore(dEnd, mload(sEnd))\n                        sEnd := sub(sEnd, 32)\n                        dEnd := sub(dEnd, 32)\n                    }\n\n                    // Write the first 32 bytes\n                    mstore(dest, first)\n                }\n            }\n        }\n    }\n\n    /// @dev Returns a slices from a byte array.\n    /// @param b The byte array to take a slice from.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function slice(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure and copy contents\n        result = new bytes(to - from);\n        memCopy(\n            result.contentAddress(),\n            b.contentAddress() + from,\n            result.length\n        );\n        return result;\n    }\n\n    /// @dev Returns a slice from a byte array without preserving the input.\n    ///      When `from == 0`, the original array will match the slice.\n    ///      In other cases its state will be corrupted.\n    /// @param b The byte array to take a slice from. Will be destroyed in the process.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function sliceDestructive(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure around [from, to) in-place.\n        assembly {\n            result := add(b, from)\n            mstore(result, sub(to, from))\n        }\n        return result;\n    }\n\n    /// @dev Pops the last byte off of a byte array by modifying its length.\n    /// @param b Byte array that will be modified.\n    /// @return result The byte that was popped off.\n    function popLastByte(bytes memory b)\n        internal\n        pure\n        returns (bytes1 result)\n    {\n        if (b.length == 0) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanZeroRequired,\n                b.length,\n                0\n            ));\n        }\n\n        // Store last byte.\n        result = b[b.length - 1];\n\n        assembly {\n            // Decrement length of byte array.\n            let newLen := sub(mload(b), 1)\n            mstore(b, newLen)\n        }\n        return result;\n    }\n\n    /// @dev Tests equality of two byte arrays.\n    /// @param lhs First byte array to compare.\n    /// @param rhs Second byte array to compare.\n    /// @return equal True if arrays are the same. False otherwise.\n    function equals(\n        bytes memory lhs,\n        bytes memory rhs\n    )\n        internal\n        pure\n        returns (bool equal)\n    {\n        // Keccak gas cost is 30 + numWords * 6. This is a cheap way to compare.\n        // We early exit on unequal lengths, but keccak would also correctly\n        // handle this.\n        return lhs.length == rhs.length && keccak256(lhs) == keccak256(rhs);\n    }\n\n    /// @dev Reads an address from a position in a byte array.\n    /// @param b Byte array containing an address.\n    /// @param index Index in byte array of address.\n    /// @return result address from byte array.\n    function readAddress(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (address result)\n    {\n        if (b.length < index + 20) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Read address from array memory\n        assembly {\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 20-byte mask to obtain address\n            result := and(mload(add(b, index)), 0xffffffffffffffffffffffffffffffffffffffff)\n        }\n        return result;\n    }\n\n    /// @dev Writes an address into a specific position in a byte array.\n    /// @param b Byte array to insert address into.\n    /// @param index Index in byte array of address.\n    /// @param input Address to put into byte array.\n    function writeAddress(\n        bytes memory b,\n        uint256 index,\n        address input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 20) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Store address into array memory\n        assembly {\n            // The address occupies 20 bytes and mstore stores 32 bytes.\n            // First fetch the 32-byte word where we'll be storing the address, then\n            // apply a mask so we have only the bytes in the word that the address will not occupy.\n            // Then combine these bytes with the address and store the 32 bytes back to memory with mstore.\n\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 12-byte mask to obtain extra bytes occupying word of memory where we'll store the address\n            let neighbors := and(\n                mload(add(b, index)),\n                0xffffffffffffffffffffffff0000000000000000000000000000000000000000\n            )\n\n            // Make sure input address is clean.\n            // (Solidity does not guarantee this)\n            input := and(input, 0xffffffffffffffffffffffffffffffffffffffff)\n\n            // Store the neighbors and address into memory\n            mstore(add(b, index), xor(input, neighbors))\n        }\n    }\n\n    /// @dev Reads a bytes32 value from a position in a byte array.\n    /// @param b Byte array containing a bytes32 value.\n    /// @param index Index in byte array of bytes32 value.\n    /// @return result bytes32 value from byte array.\n    function readBytes32(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        if (b.length < index + 32) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            result := mload(add(b, index))\n        }\n        return result;\n    }\n\n    /// @dev Writes a bytes32 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input bytes32 to put into byte array.\n    function writeBytes32(\n        bytes memory b,\n        uint256 index,\n        bytes32 input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 32) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            mstore(add(b, index), input)\n        }\n    }\n\n    /// @dev Reads a uint256 value from a position in a byte array.\n    /// @param b Byte array containing a uint256 value.\n    /// @param index Index in byte array of uint256 value.\n    /// @return result uint256 value from byte array.\n    function readUint256(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (uint256 result)\n    {\n        result = uint256(readBytes32(b, index));\n        return result;\n    }\n\n    /// @dev Writes a uint256 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input uint256 to put into byte array.\n    function writeUint256(\n        bytes memory b,\n        uint256 index,\n        uint256 input\n    )\n        internal\n        pure\n    {\n        writeBytes32(b, index, bytes32(input));\n    }\n\n    /// @dev Reads an unpadded bytes4 value from a position in a byte array.\n    /// @param b Byte array containing a bytes4 value.\n    /// @param index Index in byte array of bytes4 value.\n    /// @return result bytes4 value from byte array.\n    function readBytes4(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes4 result)\n    {\n        if (b.length < index + 4) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsFourRequired,\n                b.length,\n                index + 4\n            ));\n        }\n\n        // Arrays are prefixed by a 32 byte length field\n        index += 32;\n\n        // Read the bytes4 from array memory\n        assembly {\n            result := mload(add(b, index))\n            // Solidity does not require us to clean the trailing bytes.\n            // We do it anyway\n            result := and(result, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)\n        }\n        return result;\n    }\n\n    /// @dev Writes a new length to a byte array.\n    ///      Decreasing length will lead to removing the corresponding lower order bytes from the byte array.\n    ///      Increasing length may lead to appending adjacent in-memory bytes to the end of the byte array.\n    /// @param b Bytes array to write new length to.\n    /// @param length New length of byte array.\n    function writeLength(bytes memory b, uint256 length)\n        internal\n        pure\n    {\n        assembly {\n            mstore(b, length)\n        }\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/errors/LibBytesRichErrorsV06.sol": {
            "id": 40,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibBytesRichErrorsV06 {\n\n    enum InvalidByteOperationErrorCodes {\n        FromLessThanOrEqualsToRequired,\n        ToLessThanOrEqualsLengthRequired,\n        LengthGreaterThanZeroRequired,\n        LengthGreaterThanOrEqualsFourRequired,\n        LengthGreaterThanOrEqualsTwentyRequired,\n        LengthGreaterThanOrEqualsThirtyTwoRequired,\n        LengthGreaterThanOrEqualsNestedBytesLengthRequired,\n        DestinationLengthGreaterThanOrEqualSourceLengthRequired\n    }\n\n    // bytes4(keccak256(\"InvalidByteOperationError(uint8,uint256,uint256)\"))\n    bytes4 internal constant INVALID_BYTE_OPERATION_ERROR_SELECTOR =\n        0x28006595;\n\n    // solhint-disable func-name-mixedcase\n    function InvalidByteOperationError(\n        InvalidByteOperationErrorCodes errorCode,\n        uint256 offset,\n        uint256 required\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            INVALID_BYTE_OPERATION_ERROR_SELECTOR,\n            errorCode,\n            offset,\n            required\n        );\n    }\n}\n"
        },
        "@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol": {
            "id": 34,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\ninterface IERC20TokenV06 {\n\n    // solhint-disable no-simple-event-func-name\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 value\n    );\n\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n\n    /// @dev send `value` token to `to` from `msg.sender`\n    /// @param to The address of the recipient\n    /// @param value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transfer(address to, uint256 value)\n        external\n        returns (bool);\n\n    /// @dev send `value` token to `to` from `from` on the condition it is approved by `from`\n    /// @param from The address of the sender\n    /// @param to The address of the recipient\n    /// @param value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    )\n        external\n        returns (bool);\n\n    /// @dev `msg.sender` approves `spender` to spend `value` tokens\n    /// @param spender The address of the account able to transfer the tokens\n    /// @param value The amount of wei to be approved for transfer\n    /// @return Always true if the call has enough gas to complete execution\n    function approve(address spender, uint256 value)\n        external\n        returns (bool);\n\n    /// @dev Query total supply of token\n    /// @return Total supply of token\n    function totalSupply()\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the balance of `owner`.\n    /// @param owner The address from which the balance will be retrieved\n    /// @return Balance of owner\n    function balanceOf(address owner)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the allowance for `spender` to spend from `owner`.\n    /// @param owner The address of the account owning tokens\n    /// @param spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the number of decimals this token has.\n    function decimals()\n        external\n        view\n        returns (uint8);\n}\n"
        },
        "./SwapRevertSampler.sol": {
            "id": 21,
            "content": "\n\n// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./GasOverhead.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\n\ninterface IHackedERC20 {\n    function _setBalance(address owner, uint256 amount) external;\n    function _setEnabled(bool enabled) external;\n}\n\ncontract SwapRevertSampler {\n    using LibRichErrorsV06 for bytes;\n    address private constant GAS_OVERHEAD = 0xDeF1000000000000000000000000000000001337;\n\n    // solhint-disable no-empty-blocks\n    /// @dev Payable fallback to receive ETH from Kyber/WETH.\n    receive ()\n        external\n        payable\n    { }\n\n    struct SwapRevertSamplerQuoteOpts {\n        // Address of the token which is being sold\n        address sellToken;\n        // Address of the token which is wanted\n        address buyToken;\n        // Data required for the bridge to execute the swap\n        bytes bridgeData;\n        // Callback to retrieve a swap quote.\n        function (address sellToken, address buyToken, bytes memory bridgeData, uint256 sellAmount)\n            external\n            returns (uint256)\n            getSwapQuoteCallback;\n    }\n\n    struct SwapRevertSamplerBuyQuoteOpts {\n        // Address of the token which is being sold\n        address sellToken;\n        // Address of the token which is wanted\n        address buyToken;\n        // Data required for the bridge to execute the SELL_TOKEN->BUY_TOKEN swap\n        bytes sellTokenData;\n        // Data required for the bridge to execute the BUY_TOKEN->SELL_TOKEN swap\n        bytes buyTokenData;\n        // Callback to retrieve a swap quote.\n        function (address sellToken, address buyToken, bytes memory bridgeData, uint256 sellAmount)\n            external\n            returns (uint256)\n            getSwapQuoteCallback;\n    }\n\n    function _callRevert(\n        bytes4 selector,\n        address sellToken,\n        address buyToken,\n        bytes memory bridgeData,\n        uint256 amountIn\n    )\n        external\n    {\n        // Clear any registered overhead\n        try\n            GasOverhead(GAS_OVERHEAD).clearOverhead()\n        { } catch { }\n        // Measure the gas\n        uint256 gasUsed = gasleft();\n        // Perform the sell\n        (bool success, bytes memory data) = address(this).call(\n            abi.encodeWithSelector(selector, sellToken, buyToken, bridgeData, amountIn)\n        );\n        gasUsed = gasUsed - gasleft();\n        // Remove any registered gas overhead\n        try\n            GasOverhead(GAS_OVERHEAD).overhead()\n            returns (uint256 gasOverhead)\n        {\n            gasUsed = gasUsed - gasOverhead;\n        } catch { }\n\n        if (!success) {\n            data.rrevert();\n        }\n        // Revert with the amount bought\n        _revertSingleSwapSample(abi.decode(data, (uint256)), gasUsed);\n    }\n\n    /// @dev  Mints the sell token, then performs the swap, then reverts with the amount out.\n    /// The SwapRevertSamplerQuoteOpts has been unrolled here as our ABI encoder cannot support\n    /// encoding the function\n    function _mintCallRevert(\n        bytes4 selector,\n        address sellToken,\n        address buyToken,\n        bytes memory bridgeData,\n        uint256[] memory amountsIn\n    )\n        external\n    {\n        IHackedERC20 hackedSellToken = IHackedERC20(payable(sellToken));\n        // We assume the amounts are ascending and that\n        // the underlying call can handle selling a specific amount\n        uint256 amountIn = amountsIn[amountsIn.length - 1];\n\n        // Enable sell token to be tracked and shadowed\n        try\n            hackedSellToken._setEnabled(true)\n        { } catch { }\n\n        // Mint enough to sell\n        try\n            hackedSellToken._setBalance(address(this), amountIn)\n        { } catch { }\n\n        try\n            IEtherTokenV06(payable(sellToken)).deposit{ value: amountIn }()\n        { } catch { }\n\n        // IHackedERC20 hackedBuyToken = IHackedERC20(payable(buyToken));\n        // // Ensure the balance of the buyToken is 0\n        // try\n        //     hackedBuyToken._setBalance(address(this), 0)\n        // { } catch { }\n\n        // require(hackedSellToken.balanceOf(address(this)) == amountIn, \"Failed to mint or deposit sellToken\");\n        // require(hackedBuyToken.balanceOf(address(this)) == 0, \"Balance of buyToken must be 0\");\n\n        // // Burn any excess ETH to avoid balance issues for sources which use ETH directly\n        // address(0).transfer(address(this).balance);\n\n        uint256[] memory amountsOut = new uint256[](amountsIn.length);\n        uint256[] memory gasUsed = new uint256[](amountsIn.length);\n\n        for (uint256 i = 0; i < amountsIn.length; i++) {\n            try\n                this._callRevert{gas: 2e6}(\n                    selector,\n                    sellToken,\n                    buyToken,\n                    bridgeData,\n                    amountsIn[i]\n                )\n            {\n                require(false, \"Swap Sample should have reverted\");\n            } catch (bytes memory reason) {\n                // Parse the reverted sample data\n                (amountsOut[i], gasUsed[i]) = _parseRevertedSingleSwapSample(reason);\n                // If we detect the amount out is 0 then we return early\n                // rather than continue performing excess work\n                if (amountsOut[i] == 0) {\n                    break;\n                }\n            }\n        }\n        // Revert the entire sampling\n        _revertSwapSample(amountsOut, gasUsed);\n    }\n\n    function _sampleSwapQuotesRevert(\n        SwapRevertSamplerQuoteOpts memory opts,\n        uint256[] memory amountsIn\n    )\n        internal\n        returns (uint256[] memory gasUsed, uint256[] memory amountsOut)\n    {\n        try\n            this._mintCallRevert(\n                opts.getSwapQuoteCallback.selector,\n                opts.sellToken,\n                opts.buyToken,\n                opts.bridgeData,\n                amountsIn\n            )\n        {\n            require(false, \"Swap Sample should have reverted\");\n        } catch (bytes memory reason) {\n            // Parse the reverted sample datas\n            (amountsOut, gasUsed) = abi.decode(reason, (uint256[], uint256[]));\n        }\n    }\n\n    function _revertSingleSwapSample(\n        uint256 amount,\n        uint256 gasUsed\n    )\n        internal\n    {\n        // Revert it so there is no state change\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, amount)\n            mstore(add(ptr, 32), gasUsed)\n            revert(ptr, 64)\n        }\n    }\n\n    function _revertSwapSample(\n        uint256[] memory amounts,\n        uint256[] memory gasUsed\n    )\n        internal\n    {\n        bytes memory data = abi.encode(amounts, gasUsed);\n        // Revert it so there is no state change\n        assembly {\n            revert(add(data, 32), mload(data))\n        }\n    }\n\n    /// @dev Parses the reverted swap sample data. If no amount\n    ///      is decoded, 0 is returned.\n    /// @param reason the string which contains the possible\n    ///               sample amount\n    /// @return the decoded sample amount or 0\n    /// @return the gas used in the sample\n    function _parseRevertedSingleSwapSample(\n        bytes memory reason\n    )\n        internal\n        pure\n        returns (uint256, uint256)\n    {\n        if (reason.length != 64) {\n            return (0,0);\n        }\n        return abi.decode(reason, (uint256, uint256));\n    }\n\n    uint256 private constant ONE_HUNDED_PERCENT_BPS = 1e4;\n    /// @dev Maximum approximate (positive) error rate when approximating a buy quote.\n    uint256 private constant APPROXIMATE_BUY_TARGET_EPSILON_BPS = 0.0005e4;\n    /// @dev Maximum iterations to perform when approximating a buy quote.\n    uint256 private constant APPROXIMATE_BUY_MAX_ITERATIONS = 3;\n\n    function _sampleSwapApproximateBuys(\n        SwapRevertSamplerBuyQuoteOpts memory opts,\n        uint256[] memory makerTokenAmounts\n    )\n        internal\n        returns (uint256[] memory gasUsed, uint256[] memory takerTokenAmounts)\n    {\n        if (makerTokenAmounts.length == 0) {\n            return (gasUsed, takerTokenAmounts);\n        }\n\n        takerTokenAmounts = new uint256[](makerTokenAmounts.length);\n        gasUsed = new uint256[](makerTokenAmounts.length);\n\n        uint256[] memory sellAmounts = new uint256[](1);\n        sellAmounts[0] = makerTokenAmounts[0];\n\n        SwapRevertSamplerQuoteOpts memory sellOpts = SwapRevertSamplerQuoteOpts({\n            sellToken: opts.sellToken,\n            buyToken: opts.buyToken,\n            bridgeData: opts.sellTokenData,\n            getSwapQuoteCallback: opts.getSwapQuoteCallback\n        });\n\n        SwapRevertSamplerQuoteOpts memory buyOpts = SwapRevertSamplerQuoteOpts({\n            sellToken: opts.buyToken,\n            buyToken: opts.sellToken,\n            bridgeData: opts.buyTokenData,\n            getSwapQuoteCallback: opts.getSwapQuoteCallback\n        });\n        // Inverted, perform a sell of the token the user wants to buy\n        (, sellAmounts) = _sampleSwapQuotesRevert(buyOpts, sellAmounts);\n        if (sellAmounts.length == 0 || sellAmounts[0] == 0) {\n            return (gasUsed, takerTokenAmounts);\n        }\n\n        uint256[] memory buyAmounts;\n        // Sell of the token the user wishes to dispose, see how much we buy\n        (, buyAmounts) = _sampleSwapQuotesRevert(sellOpts, sellAmounts);\n\n        if (buyAmounts.length == 0 || buyAmounts[0] == 0) {\n            return (gasUsed, takerTokenAmounts);\n        }\n\n        for (uint256 i = 0; i < makerTokenAmounts.length; i++) {\n            uint256[] memory _gasUsed;\n            for (uint256 iter = 0; iter < APPROXIMATE_BUY_MAX_ITERATIONS; iter++) {\n                // adjustedSellAmount = previousSellAmount * (target/actual) * JUMP_MULTIPLIER\n                sellAmounts[0] = _safeGetPartialAmountCeil(\n                    makerTokenAmounts[i],\n                    buyAmounts[0],\n                    sellAmounts[0]\n                );\n                if (sellAmounts.length == 0 || sellAmounts[0] == 0) {\n                    break;\n                }\n                sellAmounts[0] = _safeGetPartialAmountCeil(\n                    (ONE_HUNDED_PERCENT_BPS + APPROXIMATE_BUY_TARGET_EPSILON_BPS),\n                    ONE_HUNDED_PERCENT_BPS,\n                    sellAmounts[0]\n                );\n                if (sellAmounts.length == 0 || sellAmounts[0] == 0) {\n                    break;\n                }\n                uint256[] memory _buyAmounts;\n                (_gasUsed, _buyAmounts) = _sampleSwapQuotesRevert(sellOpts, sellAmounts);\n                if (_buyAmounts.length == 0 || _buyAmounts[0] == 0) {\n                    break;\n                }\n                // We re-use buyAmount next iteration, only assign if it is\n                // non zero\n                buyAmounts = _buyAmounts;\n                // If we've reached our goal, exit early\n                if (buyAmounts[0] >= makerTokenAmounts[i]) {\n                    uint256 eps =\n                        (buyAmounts[0] - makerTokenAmounts[i]) * ONE_HUNDED_PERCENT_BPS /\n                        makerTokenAmounts[i];\n                    if (eps <= APPROXIMATE_BUY_TARGET_EPSILON_BPS) {\n                        break;\n                    }\n                }\n            }\n            if (_gasUsed.length > 0 && buyAmounts.length > 0) {\n                gasUsed[i] = _gasUsed[0];\n                // We do our best to close in on the requested amount, but we can either over buy or under buy and exit\n                // if we hit a max iteration limit\n                // We scale the sell amount to get the approximate target\n                takerTokenAmounts[i] = _safeGetPartialAmountCeil(\n                    makerTokenAmounts[i],\n                    buyAmounts[0],\n                    sellAmounts[0]\n                );\n            }\n        }\n    }\n\n    function _safeGetPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        view\n        returns (uint256 partialAmount)\n    {\n        if (numerator == 0 || target == 0 || denominator == 0) return 0;\n        uint256 c = numerator * target;\n        if (c / numerator != target) return 0;\n        return (c + (denominator - 1)) / denominator;\n    }\n\n}"
        },
        "./GasOverhead.sol": {
            "id": 11,
            "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.6;\n\ncontract GasOverhead {\n    uint256 public _overhead = 2;\n    // Overhead incurred from updating the overhead storage slot\n    uint256 constant SSTORE_OVERHEAD = 20000;\n\n    function addOverhead(uint256 gas, uint256 gasBefore)\n        external\n    {\n        uint256 callOverhead = gasBefore - gasleft();\n        // Add additional est overhead of performing this update\n        _overhead += gas + callOverhead + SSTORE_OVERHEAD;\n    }\n\n    function clearOverhead()\n        external\n    {\n        _overhead = 2;\n    }\n\n    function overhead()\n        external\n        view\n        returns (uint256)\n    {\n        return _overhead;\n    }\n}\n"
        },
        "@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol": {
            "id": 35,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./IERC20TokenV06.sol\";\n\n\ninterface IEtherTokenV06 is\n    IERC20TokenV06\n{\n    /// @dev Wrap ether.\n    function deposit() external payable;\n\n    /// @dev Unwrap ether.\n    function withdraw(uint256 amount) external;\n}\n"
        },
        "./BalancerV2Sampler.sol": {
            "id": 2,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinBalancerV2.sol\";\nimport \"./SwapRevertSampler.sol\";\n\ncontract BalancerV2Sampler is\n    MixinBalancerV2,\n    SwapRevertSampler\n{\n\n    function sampleSwapFromBalancerV2(\n        address sellToken,\n        address buyToken,\n        bytes memory bridgeData,\n        uint256 takerTokenAmount\n    )\n        external\n        returns (uint256)\n    {\n        return _tradeBalancerV2(\n            IERC20TokenV06(sellToken),\n            IERC20TokenV06(buyToken),\n            takerTokenAmount,\n            bridgeData\n        );\n    }\n\n    /// @dev Sample sell quotes from Balancer V2.\n    /// @param poolInfo Struct with pool related data\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return gasUsed gas consumed in each sample sell\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromBalancerV2(\n        BalancerV2BridgeData memory poolInfo,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        returns (uint256[] memory gasUsed, uint256[] memory makerTokenAmounts)\n    {\n        (gasUsed, makerTokenAmounts) = _sampleSwapQuotesRevert(\n            SwapRevertSamplerQuoteOpts({\n                sellToken: takerToken,\n                buyToken: makerToken,\n                bridgeData: abi.encode(poolInfo),\n                getSwapQuoteCallback: this.sampleSwapFromBalancerV2\n            }),\n            takerTokenAmounts\n        );\n    }\n\n    /// @dev Sample buy quotes from Balancer V2.\n    /// @param poolInfo Struct with pool related data\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return gasUsed gas consumed in each sample sell\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromBalancerV2(\n        BalancerV2BridgeData memory poolInfo,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        returns (uint256[] memory gasUsed, uint256[] memory takerTokenAmounts)\n    {\n        (gasUsed, takerTokenAmounts) = _sampleSwapApproximateBuys(\n            SwapRevertSamplerBuyQuoteOpts({\n                sellToken: takerToken,\n                buyToken: makerToken,\n                sellTokenData: abi.encode(poolInfo),\n                buyTokenData: abi.encode(poolInfo),\n                getSwapQuoteCallback: this.sampleSwapFromBalancerV2\n            }),\n            makerTokenAmounts\n        );\n    }\n}\n"
        },
        "@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinBalancerV2.sol": {
            "id": 46,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\n\n\ninterface IBalancerV2Vault {\n\n    enum SwapKind { GIVEN_IN, GIVEN_OUT }\n    /**\n     * @dev Performs a swap with a single Pool.\n     *\n     * If the swap is given in (the number of tokens to send to the Pool is known), returns the amount of tokens\n     * taken from the Pool, which must be greater than or equal to `limit`.\n     *\n     * If the swap is given out (the number of tokens to take from the Pool is known), returns the amount of\n     * tokens sent to the Pool, which must be less than or equal to `limit`.\n     *\n     * Internal Balance usage and the recipient are determined by the `funds` struct.\n     *\n     * Emits a `Swap` event.\n     * For full documentation see https://github.com/balancer-labs/balancer-core-v2/blob/master/contracts/vault/interfaces/IVault.sol\n     */\n    function swap(\n        SingleSwap calldata request,\n        FundManagement calldata funds,\n        uint256 limit,\n        uint256 deadline\n    ) external payable returns (uint256);\n\n    struct SingleSwap {\n        bytes32 poolId;\n        SwapKind kind;\n        IERC20TokenV06 assetIn;\n        IERC20TokenV06 assetOut;\n        uint256 amount;\n        bytes userData;\n    }\n\n    struct FundManagement {\n        address sender;\n        bool fromInternalBalance;\n        address payable recipient;\n        bool toInternalBalance;\n    }\n}\n\ncontract MixinBalancerV2 {\n\n    using LibERC20TokenV06 for IERC20TokenV06;\n\n    struct BalancerV2BridgeData {\n        IBalancerV2Vault vault;\n        bytes32 poolId;\n    }\n\n    function _tradeBalancerV2(\n        IERC20TokenV06 sellToken,\n        IERC20TokenV06 buyToken,\n        uint256 sellAmount,\n        bytes memory bridgeData\n    )\n        internal\n        returns (uint256 boughtAmount)\n    {\n        // Decode the bridge data.\n        BalancerV2BridgeData memory data = abi.decode(bridgeData, (BalancerV2BridgeData));\n\n        // Grant an allowance to the exchange to spend `fromTokenAddress` token.\n        sellToken.approveIfBelow(address(data.vault), sellAmount);\n\n        // Sell the entire sellAmount\n        IBalancerV2Vault.SingleSwap memory request = IBalancerV2Vault.SingleSwap({\n            poolId: data.poolId,\n            kind: IBalancerV2Vault.SwapKind.GIVEN_IN,\n            assetIn: sellToken,\n            assetOut: buyToken,\n            amount: sellAmount, // amount in\n            userData: \"\"\n        });\n\n        IBalancerV2Vault.FundManagement memory funds = IBalancerV2Vault.FundManagement({\n            sender: address(this),\n            fromInternalBalance: false,\n            recipient: payable(address(this)),\n            toInternalBalance: false\n        });\n\n        boughtAmount = data.vault.swap(\n            request,\n            funds,\n            1, // min amount out\n            block.timestamp // expires after this block\n        );\n        return boughtAmount;\n    }\n}\n"
        },
        "./BancorSampler.sol": {
            "id": 3,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinBancor.sol\";\nimport \"./SwapRevertSampler.sol\";\n\ncontract CompilerHack {}\n\ncontract BancorSampler is\n    CompilerHack,\n    MixinBancor,\n    SwapRevertSampler\n{\n\n    constructor(IEtherTokenV06 weth)\n        public\n        MixinBancor(weth)\n    { }\n\n    /// @dev Base gas limit for Bancor calls.\n    uint256 constant private BANCOR_CALL_GAS = 300e3; // 300k\n\n    struct BancorSamplerOpts {\n        IBancorRegistry registry;\n        address[][] paths;\n    }\n\n    function sampleSwapFromBancor(\n        address sellToken,\n        address buyToken,\n        bytes memory bridgeData,\n        uint256 takerTokenAmount\n    )\n        external\n        returns (uint256)\n    {\n        return _tradeBancorInternal(\n            IEtherTokenV06(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2),\n            IERC20TokenV06(buyToken),\n            takerTokenAmount,\n            bridgeData\n        );\n    }\n\n    /// @dev Sample sell quotes from Bancor.\n    /// @param opts BancorSamplerOpts The Bancor registry contract address and paths\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return bancorNetwork the Bancor Network address\n    /// @return path the selected conversion path from bancor\n    /// @return gasUsed gas consumed in each sample sell\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromBancor(\n        BancorSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        returns (\n            address bancorNetwork,\n            address[] memory path,\n            uint256[] memory gasUsed,\n            uint256[] memory makerTokenAmounts\n        )\n    {\n        if (opts.paths.length == 0) {\n            return (bancorNetwork, path, gasUsed, makerTokenAmounts);\n        }\n\n        (bancorNetwork, path) = _findBestPath(opts, takerToken, makerToken, takerTokenAmounts);\n\n        (gasUsed, makerTokenAmounts) = _sampleSwapQuotesRevert(\n            SwapRevertSamplerQuoteOpts({\n                sellToken: takerToken,\n                buyToken: makerToken,\n                bridgeData: abi.encode(bancorNetwork, path),\n                getSwapQuoteCallback: this.sampleSwapFromBancor\n            }),\n            takerTokenAmounts\n        );\n\n        return (bancorNetwork, path, gasUsed, makerTokenAmounts);\n    }\n\n    /// @dev Sample buy quotes from Bancor. Unimplemented\n    /// @param opts BancorSamplerOpts The Bancor registry contract address and paths\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return bancorNetwork the Bancor Network address\n    /// @return path the selected conversion path from bancor\n    /// @return gasUsed gas consumed in each sample sell\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromBancor(\n        BancorSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (address bancorNetwork, address[] memory path, uint256[] memory gasUsed, uint256[] memory takerTokenAmounts)\n    {\n    }\n\n    function _findBestPath(\n        BancorSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        internal\n        view\n        returns (address bancorNetwork, address[] memory path)\n    {\n        bancorNetwork = opts.registry.getAddress(opts.registry.BANCOR_NETWORK());\n        if (opts.paths.length == 0) {\n            return (bancorNetwork, path);\n        }\n        uint256 maxBoughtAmount = 0;\n        // Find the best path by selling the largest taker amount\n        for (uint256 i = 0; i < opts.paths.length; i++) {\n            if (opts.paths[i].length < 2) {\n                continue;\n            }\n\n            try\n                IBancorNetwork(bancorNetwork)\n                    .rateByPath\n                        {gas: BANCOR_CALL_GAS}\n                        (opts.paths[i], takerTokenAmounts[takerTokenAmounts.length-1])\n                returns (uint256 amount)\n            {\n                if (amount > maxBoughtAmount) {\n                    maxBoughtAmount = amount;\n                    path = opts.paths[i];\n                }\n            } catch {\n                // Swallow failures, leaving all results as zero.\n                continue;\n            }\n        }\n    }\n}\n"
        },
        "@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinBancor.sol": {
            "id": 47,
            "content": "// SPDX-License-Identifier: Apache-2.0\n\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol\";\nimport \"../IBridgeAdapter.sol\";\n\n\ninterface IBancorNetwork {\n    function convertByPath(\n        IERC20TokenV06[] calldata _path,\n        uint256 _amount,\n        uint256 _minReturn,\n        address _beneficiary,\n        address _affiliateAccount,\n        uint256 _affiliateFee\n    )\n        external\n        payable\n        returns (uint256);\n    function conversionPath(address _sourceToken, address _targetToken) external view returns (address[] memory);\n    function rateByPath(address[] memory _path, uint256 _amount) external view returns (uint256);\n}\n\ninterface IBancorRegistry {\n    function getAddress(bytes32 _contractName) external view returns (address);\n    function BANCOR_NETWORK() external view returns (bytes32);\n}\n\n\ncontract MixinBancor {\n\n    /// @dev Bancor ETH pseudo-address.\n    IERC20TokenV06 constant public BANCOR_ETH_ADDRESS =\n        IERC20TokenV06(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\n    IEtherTokenV06 private immutable WETH;\n\n    constructor(IEtherTokenV06 weth)\n        public\n    {\n        WETH = weth;\n    }\n\n    function _tradeBancor(\n        IERC20TokenV06 buyToken,\n        uint256 sellAmount,\n        bytes memory bridgeData\n    )\n        internal\n        returns (uint256 boughtAmount)\n    {\n        return _tradeBancorInternal(WETH, buyToken, sellAmount, bridgeData);\n    }\n\n    function _tradeBancorInternal(\n        IEtherTokenV06 weth,\n        IERC20TokenV06 buyToken,\n        uint256 sellAmount,\n        bytes memory bridgeData\n    )\n        internal\n        returns (uint256 boughtAmount)\n    {\n        // Decode the bridge data.\n        IBancorNetwork bancorNetworkAddress;\n        IERC20TokenV06[] memory path;\n        {\n            address[] memory _path;\n            (\n                bancorNetworkAddress,\n                _path\n            ) = abi.decode(bridgeData, (IBancorNetwork, address[]));\n            // To get around `abi.decode()` not supporting interface array types.\n            assembly { path := _path }\n        }\n\n        require(path.length >= 2, \"MixinBancor/PATH_LENGTH_MUST_BE_AT_LEAST_TWO\");\n        require(\n            path[path.length - 1] == buyToken ||\n            (path[path.length - 1] == BANCOR_ETH_ADDRESS && buyToken == weth),\n            \"MixinBancor/LAST_ELEMENT_OF_PATH_MUST_MATCH_OUTPUT_TOKEN\"\n        );\n\n        uint256 payableAmount = 0;\n        // If it's ETH in the path then withdraw from WETH\n        // The Bancor path will have ETH as the 0xeee address\n        // Bancor expects to be paid in ETH not WETH\n        if (path[0] == BANCOR_ETH_ADDRESS) {\n            weth.withdraw(sellAmount);\n            payableAmount = sellAmount;\n        } else {\n            // Grant an allowance to the Bancor Network.\n            LibERC20TokenV06.approveIfBelow(\n                path[0],\n                address(bancorNetworkAddress),\n                sellAmount\n            );\n        }\n\n        // Convert the tokens\n        boughtAmount = bancorNetworkAddress.convertByPath{value: payableAmount}(\n            path, // path originating with source token and terminating in destination token\n            sellAmount, // amount of source token to trade\n            1, // minimum amount of destination token expected to receive\n            address(this), // beneficiary\n            address(0), // affiliateAccount; no fee paid\n            0 // affiliateFee; no fee paid\n        );\n        if (path[path.length - 1] == BANCOR_ETH_ADDRESS) {\n            weth.deposit{value: boughtAmount}();\n        }\n\n        return boughtAmount;\n    }\n}\n"
        },
        "@0x/contracts-zero-ex/contracts/src/transformers/bridges/IBridgeAdapter.sol": {
            "id": 44,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\n\n\ninterface IBridgeAdapter {\n\n    struct BridgeOrder {\n        // Upper 16 bytes: uint128 protocol ID (right-aligned)\n        // Lower 16 bytes: ASCII source name (left-aligned)\n        bytes32 source;\n        uint256 takerTokenAmount;\n        uint256 makerTokenAmount;\n        bytes bridgeData;\n    }\n\n    /// @dev Emitted when tokens are swapped with an external source.\n    /// @param source A unique ID for the source, where the upper 16 bytes\n    ///        encodes the (right-aligned) uint128 protocol ID and the\n    ///        lower 16 bytes encodes an ASCII source name.\n    /// @param inputToken The token the bridge is converting from.\n    /// @param outputToken The token the bridge is converting to.\n    /// @param inputTokenAmount Amount of input token sold.\n    /// @param outputTokenAmount Amount of output token bought.\n    event BridgeFill(\n        bytes32 source,\n        IERC20TokenV06 inputToken,\n        IERC20TokenV06 outputToken,\n        uint256 inputTokenAmount,\n        uint256 outputTokenAmount\n    );\n\n    function trade(\n        BridgeOrder calldata order,\n        IERC20TokenV06 sellToken,\n        IERC20TokenV06 buyToken,\n        uint256 sellAmount\n    )\n        external\n        returns (uint256 boughtAmount);\n}\n"
        },
        "./CurveSampler.sol": {
            "id": 4,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinCurve.sol\";\nimport \"./SwapRevertSampler.sol\";\n\n\ncontract CurveSampler is\n    MixinCurve,\n    SwapRevertSampler\n{\n    /// @dev Information for sampling from curve sources.\n    struct CurveInfo {\n        address poolAddress;\n        bytes4 sellQuoteFunctionSelector;\n        bytes4 buyQuoteFunctionSelector;\n    }\n\n    constructor(IEtherTokenV06 weth)\n        public\n        MixinCurve(weth)\n    { }\n\n    function sampleSwapFromCurve(\n        address sellToken,\n        address buyToken,\n        bytes memory bridgeData,\n        uint256 takerTokenAmount\n    )\n        external\n        returns (uint256)\n    {\n        return _tradeCurveInternal(\n            IEtherTokenV06(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2),\n            IERC20TokenV06(sellToken),\n            IERC20TokenV06(buyToken),\n            takerTokenAmount,\n            bridgeData\n        );\n    }\n\n    /// @dev Sample sell quotes from Curve.\n    /// @param curveInfo Curve information specific to this token pair.\n    /// @param takerToken The taker token to sell.\n    /// @param makerToken The maker token to buy.\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return gasUsed gas consumed in each sample sell\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromCurve(\n        CurveBridgeData memory curveInfo,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        returns (uint256[] memory gasUsed, uint256[] memory makerTokenAmounts)\n    {\n        (gasUsed, makerTokenAmounts) = _sampleSwapQuotesRevert(\n            SwapRevertSamplerQuoteOpts({\n                sellToken: takerToken,\n                buyToken: makerToken,\n                bridgeData: abi.encode(curveInfo),\n                getSwapQuoteCallback: this.sampleSwapFromCurve\n            }),\n            takerTokenAmounts\n        );\n    }\n\n    /// @dev Sample buy quotes from Curve.\n    /// @param curveInfo Curve information specific to this token pair.\n    /// @param takerToken The taker token to sell.\n    /// @param makerToken The maker token to buy.\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return gasUsed gas consumed in each sample sell\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromCurve(\n        CurveBridgeData memory curveInfo,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        returns (uint256[] memory gasUsed, uint256[] memory takerTokenAmounts)\n    {\n        (gasUsed, takerTokenAmounts) = _sampleSwapApproximateBuys(\n            SwapRevertSamplerBuyQuoteOpts({\n                sellToken: takerToken,\n                buyToken: makerToken,\n                sellTokenData: abi.encode(curveInfo),\n                buyTokenData: abi.encode(\n                    CurveBridgeData({\n                        curveAddress: curveInfo.curveAddress,\n                        exchangeFunctionSelector: curveInfo.exchangeFunctionSelector,\n                        fromCoinIdx: curveInfo.toCoinIdx,\n                        toCoinIdx: curveInfo.fromCoinIdx\n                    })\n                ),\n                getSwapQuoteCallback: this.sampleSwapFromCurve\n            }),\n            makerTokenAmounts\n        );\n    }\n}\n"
        },
        "@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinCurve.sol": {
            "id": 48,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol\";\n\ncontract MixinCurve {\n\n    using LibERC20TokenV06 for IERC20TokenV06;\n    using LibSafeMathV06 for uint256;\n    using LibRichErrorsV06 for bytes;\n\n    /// @dev Mainnet address of the WETH contract.\n    IEtherTokenV06 private immutable WETH;\n\n    constructor(IEtherTokenV06 weth)\n        public\n    {\n        WETH = weth;\n    }\n\n\n    struct CurveBridgeData {\n        address curveAddress;\n        bytes4 exchangeFunctionSelector;\n        int128 fromCoinIdx;\n        int128 toCoinIdx;\n    }\n\n    function _tradeCurve(\n        IERC20TokenV06 sellToken,\n        IERC20TokenV06 buyToken,\n        uint256 sellAmount,\n        bytes memory bridgeData\n    )\n        internal\n        returns (uint256 boughtAmount)\n    {\n        return _tradeCurveInternal(WETH, sellToken, buyToken, sellAmount, bridgeData);\n    }\n\n    function _tradeCurveInternal(\n        IEtherTokenV06 weth,\n        IERC20TokenV06 sellToken,\n        IERC20TokenV06 buyToken,\n        uint256 sellAmount,\n        bytes memory bridgeData\n    )\n        internal\n        returns (uint256 boughtAmount)\n    {\n        // Decode the bridge data to get the Curve metadata.\n        CurveBridgeData memory data = abi.decode(bridgeData, (CurveBridgeData));\n        uint256 payableAmount;\n        if (sellToken == weth) {\n            payableAmount = sellAmount;\n            weth.withdraw(sellAmount);\n        } else {\n            sellToken.approveIfBelow(data.curveAddress, sellAmount);\n        }\n\n        uint256 beforeBalance = buyToken.balanceOf(address(this));\n        (bool success, bytes memory resultData) =\n            data.curveAddress.call{value: payableAmount}(abi.encodeWithSelector(\n                data.exchangeFunctionSelector,\n                data.fromCoinIdx,\n                data.toCoinIdx,\n                // dx\n                sellAmount,\n                // min dy\n                1\n            ));\n        if (!success) {\n            resultData.rrevert();\n        }\n\n        if (buyToken == weth) {\n            boughtAmount = address(this).balance;\n            weth.deposit{ value: boughtAmount }();\n        }\n\n        return buyToken.balanceOf(address(this)).safeSub(beforeBalance);\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol": {
            "id": 39,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./errors/LibRichErrorsV06.sol\";\nimport \"./errors/LibSafeMathRichErrorsV06.sol\";\n\n\nlibrary LibSafeMathV06 {\n\n    function safeMul(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        if (c / a != b) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.MULTIPLICATION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function safeDiv(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b == 0) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.DIVISION_BY_ZERO,\n                a,\n                b\n            ));\n        }\n        uint256 c = a / b;\n        return c;\n    }\n\n    function safeSub(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b > a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.SUBTRACTION_UNDERFLOW,\n                a,\n                b\n            ));\n        }\n        return a - b;\n    }\n\n    function safeAdd(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint256 c = a + b;\n        if (c < a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.ADDITION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function max256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a < b ? a : b;\n    }\n\n    function safeMul128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (a == 0) {\n            return 0;\n        }\n        uint128 c = a * b;\n        if (c / a != b) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.MULTIPLICATION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function safeDiv128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (b == 0) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.DIVISION_BY_ZERO,\n                a,\n                b\n            ));\n        }\n        uint128 c = a / b;\n        return c;\n    }\n\n    function safeSub128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (b > a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.SUBTRACTION_UNDERFLOW,\n                a,\n                b\n            ));\n        }\n        return a - b;\n    }\n\n    function safeAdd128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        uint128 c = a + b;\n        if (c < a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.ADDITION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function max128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        return a < b ? a : b;\n    }\n\n    function safeDowncastToUint128(uint256 a)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (a > type(uint128).max) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256DowncastError(\n                LibSafeMathRichErrorsV06.DowncastErrorCodes.VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT128,\n                a\n            ));\n        }\n        return uint128(a);\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/errors/LibSafeMathRichErrorsV06.sol": {
            "id": 43,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibSafeMathRichErrorsV06 {\n\n    // bytes4(keccak256(\"Uint256BinOpError(uint8,uint256,uint256)\"))\n    bytes4 internal constant UINT256_BINOP_ERROR_SELECTOR =\n        0xe946c1bb;\n\n    // bytes4(keccak256(\"Uint256DowncastError(uint8,uint256)\"))\n    bytes4 internal constant UINT256_DOWNCAST_ERROR_SELECTOR =\n        0xc996af7b;\n\n    enum BinOpErrorCodes {\n        ADDITION_OVERFLOW,\n        MULTIPLICATION_OVERFLOW,\n        SUBTRACTION_UNDERFLOW,\n        DIVISION_BY_ZERO\n    }\n\n    enum DowncastErrorCodes {\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT32,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT64,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT96,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT128\n    }\n\n    // solhint-disable func-name-mixedcase\n    function Uint256BinOpError(\n        BinOpErrorCodes errorCode,\n        uint256 a,\n        uint256 b\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            UINT256_BINOP_ERROR_SELECTOR,\n            errorCode,\n            a,\n            b\n        );\n    }\n\n    function Uint256DowncastError(\n        DowncastErrorCodes errorCode,\n        uint256 a\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            UINT256_DOWNCAST_ERROR_SELECTOR,\n            errorCode,\n            a\n        );\n    }\n}\n"
        },
        "./DODOSampler.sol": {
            "id": 5,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinDodo.sol\";\nimport \"./SwapRevertSampler.sol\";\n\n\ninterface IDODOZoo {\n    function getDODO(address baseToken, address quoteToken) external view returns (address);\n}\n\ncontract DODOSampler is\n    MixinDodo,\n    SwapRevertSampler\n{\n\n    struct DODOSamplerOpts {\n        address registry;\n        address helper;\n    }\n\n    function sampleSwapFromDodo(\n        address sellToken,\n        address buyToken,\n        bytes memory bridgeData,\n        uint256 takerTokenAmount\n    )\n        external\n        returns (uint256)\n    {\n        return _tradeDodo(\n            IERC20TokenV06(sellToken),\n            takerTokenAmount,\n            bridgeData\n        );\n    }\n\n    /// @dev Sample sell quotes from DODO.\n    /// @param opts DODOSamplerOpts DODO Registry and helper addresses\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return sellBase whether the bridge needs to sell the base token\n    /// @return pool the DODO pool address\n    /// @return gasUsed gas consumed in each sample sell\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromDODO(\n        DODOSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        returns (\n            bool sellBase,\n            address pool,\n            uint256[] memory gasUsed,\n            uint256[] memory makerTokenAmounts\n        )\n    {\n        pool = IDODOZoo(opts.registry).getDODO(takerToken, makerToken);\n        address baseToken;\n        // If pool exists we have the correct order of Base/Quote\n        if (pool != address(0)) {\n            baseToken = takerToken;\n            sellBase = true;\n        } else {\n            pool = IDODOZoo(opts.registry).getDODO(makerToken, takerToken);\n            // No pool either direction\n            if (address(pool) == address(0)) {\n                return (sellBase, pool, gasUsed, makerTokenAmounts);\n            }\n            baseToken = makerToken;\n            sellBase = false;\n        }\n\n        (gasUsed, makerTokenAmounts) = _sampleSwapQuotesRevert(\n            SwapRevertSamplerQuoteOpts({\n                sellToken: takerToken,\n                buyToken: makerToken,\n                bridgeData: abi.encode(opts.helper, pool, sellBase),\n                getSwapQuoteCallback: this.sampleSwapFromDodo\n            }),\n            takerTokenAmounts\n        );\n    }\n\n    /// @dev Sample buy quotes from DODO.\n    /// @param opts DODOSamplerOpts DODO Registry and helper addresses\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token sell amount for each sample.\n    /// @return sellBase whether the bridge needs to sell the base token\n    /// @return pool the DODO pool address\n    /// @return gasUsed gas consumed in each sample sell\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromDODO(\n        DODOSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        returns (\n            bool sellBase,\n            address pool,\n            uint256[] memory gasUsed,\n            uint256[] memory takerTokenAmounts\n        )\n    {\n        // Pool is BASE/QUOTE\n        // Look up the pool from the taker/maker combination\n        pool = IDODOZoo(opts.registry).getDODO(takerToken, makerToken);\n        address baseToken;\n        // If pool exists we have the correct order of Base/Quote\n        if (pool != address(0)) {\n            baseToken = takerToken;\n            sellBase = true;\n        } else {\n            // Look up the pool from the maker/taker combination\n            pool = IDODOZoo(opts.registry).getDODO(makerToken, takerToken);\n            // No pool either direction\n            if (address(pool) == address(0)) {\n                return (sellBase, pool, gasUsed, takerTokenAmounts);\n            }\n            baseToken = makerToken;\n            sellBase = false;\n        }\n\n        (gasUsed, takerTokenAmounts) = _sampleSwapApproximateBuys(\n            SwapRevertSamplerBuyQuoteOpts({\n                sellToken: takerToken,\n                buyToken: makerToken,\n                sellTokenData: abi.encode(opts.helper, pool, sellBase),\n                buyTokenData: abi.encode(opts.helper, pool, !sellBase),\n                getSwapQuoteCallback: this.sampleSwapFromDodo\n            }),\n            makerTokenAmounts\n        );\n    }\n}\n"
        },
        "@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinDodo.sol": {
            "id": 49,
            "content": "// SPDX-License-Identifier: Apache-2.0\n\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"../IBridgeAdapter.sol\";\n\n\ninterface IDODO {\n    function sellBaseToken(\n        uint256 amount,\n        uint256 minReceiveQuote,\n        bytes calldata data\n    )\n        external\n        returns (uint256);\n\n    function buyBaseToken(\n        uint256 amount,\n        uint256 maxPayQuote,\n        bytes calldata data\n    )\n        external\n        returns (uint256);\n}\n\n\ninterface IDODOHelper {\n    function querySellQuoteToken(\n        IDODO dodo,\n        uint256 amount\n    )\n        external\n        view\n        returns (uint256);\n}\n\n\ncontract MixinDodo {\n\n    using LibERC20TokenV06 for IERC20TokenV06;\n\n    function _tradeDodo(\n        IERC20TokenV06 sellToken,\n        uint256 sellAmount,\n        bytes memory bridgeData\n    )\n        internal\n        returns (uint256 boughtAmount)\n    {\n        (IDODOHelper helper, IDODO pool, bool isSellBase) =\n            abi.decode(bridgeData, (IDODOHelper, IDODO, bool));\n\n        // Grant the Dodo pool contract an allowance to sell the first token.\n        sellToken.approveIfBelow(address(pool), sellAmount);\n\n        if (isSellBase) {\n            // Sell the Base token directly against the contract\n            boughtAmount = pool.sellBaseToken(\n                // amount to sell\n                sellAmount,\n                // min receive amount\n                1,\n                new bytes(0)\n            );\n        } else {\n            // Need to re-calculate the sell quote amount into buyBase\n            boughtAmount = helper.querySellQuoteToken(\n                pool,\n                sellAmount\n            );\n            pool.buyBaseToken(\n                // amount to buy\n                boughtAmount,\n                // max pay amount\n                sellAmount,\n                new bytes(0)\n            );\n        }\n\n        return boughtAmount;\n    }\n}\n"
        },
        "./DODOV2Sampler.sol": {
            "id": 6,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinDodoV2.sol\";\nimport \"./SwapRevertSampler.sol\";\n\ninterface IDODOV2Registry {\n    function getDODOPool(address baseToken, address quoteToken)\n        external\n        view\n        returns (address[] memory machines);\n}\n\ncontract DODOV2Sampler is\n    MixinDodoV2,\n    SwapRevertSampler\n{\n\n    /// @dev Gas limit for DODO V2 calls.\n    uint256 constant private DODO_V2_CALL_GAS = 300e3; // 300k\n\n    function sampleSwapFromDodoV2(\n        address sellToken,\n        address buyToken,\n        bytes memory bridgeData,\n        uint256 takerTokenAmount\n    )\n        external\n        returns (uint256)\n    {\n        return _tradeDodoV2(\n            IERC20TokenV06(sellToken),\n            takerTokenAmount,\n            bridgeData\n        );\n    }\n\n    /// @dev Sample sell quotes from DODO V2.\n    /// @param registry Address of the registry to look up.\n    /// @param offset offset index for the pool in the registry.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return sellBase whether the bridge needs to sell the base token\n    /// @return pool the DODO pool address\n    /// @return gasUsed gas consumed in each sample sell\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromDODOV2(\n        address registry,\n        uint256 offset,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        returns (\n            bool sellBase,\n            address pool,\n            uint256[] memory gasUsed,\n            uint256[] memory makerTokenAmounts\n        )\n    {\n        (pool, sellBase) = _getNextDODOV2Pool(registry, offset, takerToken, makerToken);\n        if (pool == address(0)) {\n            return (sellBase, pool, gasUsed, makerTokenAmounts);\n        }\n\n        (gasUsed, makerTokenAmounts) = _sampleSwapQuotesRevert(\n            SwapRevertSamplerQuoteOpts({\n                sellToken: takerToken,\n                buyToken: makerToken,\n                bridgeData: abi.encode(pool, sellBase),\n                getSwapQuoteCallback: this.sampleSwapFromDodoV2\n            }),\n            takerTokenAmounts\n        );\n    }\n\n    /// @dev Sample buy quotes from DODO.\n    /// @param registry Address of the registry to look up.\n    /// @param offset offset index for the pool in the registry.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token sell amount for each sample.\n    /// @return sellBase whether the bridge needs to sell the base token\n    /// @return pool the DODO pool address\n    /// @return gasUsed gas consumed in each sample sell\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromDODOV2(\n        address registry,\n        uint256 offset,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        returns (\n            bool sellBase,\n            address pool,\n            uint256[] memory gasUsed,\n            uint256[] memory takerTokenAmounts\n        )\n    {\n        (pool, sellBase) = _getNextDODOV2Pool(registry, offset, takerToken, makerToken);\n        if (pool == address(0)) {\n            return (sellBase, pool, gasUsed, takerTokenAmounts);\n        }\n\n        (gasUsed, takerTokenAmounts) = _sampleSwapApproximateBuys(\n            SwapRevertSamplerBuyQuoteOpts({\n                sellToken: takerToken,\n                buyToken: makerToken,\n                sellTokenData: abi.encode(pool, sellBase),\n                buyTokenData: abi.encode(pool, !sellBase),\n                getSwapQuoteCallback: this.sampleSwapFromDodoV2\n            }),\n            makerTokenAmounts\n        );\n    }\n\n    function _getNextDODOV2Pool(\n        address registry,\n        uint256 offset,\n        address takerToken,\n        address makerToken\n    )\n        internal\n        view\n        returns (address machine, bool sellBase)\n    {\n        // Query in base -> quote direction, if a pool is found then we are selling the base\n        address[] memory machines = IDODOV2Registry(registry).getDODOPool(takerToken, makerToken);\n        sellBase = true;\n        if (machines.length == 0) {\n            // Query in quote -> base direction, if a pool is found then we are selling the quote\n            machines = IDODOV2Registry(registry).getDODOPool(makerToken, takerToken);\n            sellBase = false;\n        }\n\n        if (offset >= machines.length) {\n            return (address(0), false);\n        }\n\n        machine = machines[offset];\n    }\n\n}\n"
        },
        "@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinDodoV2.sol": {
            "id": 50,
            "content": "// SPDX-License-Identifier: Apache-2.0\n\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"../IBridgeAdapter.sol\";\n\n\ninterface IDODOV2 {\n    function sellBase(address recipient)\n        external\n        returns (uint256);\n\n    function sellQuote(address recipient)\n        external\n        returns (uint256);\n}\n\n\ncontract MixinDodoV2 {\n\n    using LibERC20TokenV06 for IERC20TokenV06;\n\n    function _tradeDodoV2(\n        IERC20TokenV06 sellToken,\n        uint256 sellAmount,\n        bytes memory bridgeData\n    )\n        internal\n        returns (uint256 boughtAmount)\n    {\n        (IDODOV2 pool, bool isSellBase) =\n            abi.decode(bridgeData, (IDODOV2, bool));\n\n        // Transfer the tokens into the pool\n        sellToken.compatTransfer(address(pool), sellAmount);\n\n        boughtAmount = isSellBase ?\n            pool.sellBase(address(this))\n            : pool.sellQuote(address(this));\n    }\n}\n"
        },
        "./Eth2DaiSampler.sol": {
            "id": 9,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinOasis.sol\";\nimport \"./SwapRevertSampler.sol\";\n\n\ncontract Eth2DaiSampler is\n    MixinOasis,\n    SwapRevertSampler\n{\n\n    function sampleSwapFromOasis(\n        address sellToken,\n        address buyToken,\n        bytes memory bridgeData,\n        uint256 takerTokenAmount\n    )\n        external\n        returns (uint256)\n    {\n        return _tradeOasis(\n            IERC20TokenV06(sellToken),\n            IERC20TokenV06(buyToken),\n            takerTokenAmount,\n            bridgeData\n        );\n    }\n\n    /// @dev Sample sell quotes from Eth2Dai/Oasis.\n    /// @param router Address of the Eth2Dai/Oasis contract\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return gasUsed gas consumed in each sample sell\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromEth2Dai(\n        address router,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        returns (uint256[] memory gasUsed, uint256[] memory makerTokenAmounts)\n    {\n        (gasUsed, makerTokenAmounts) = _sampleSwapQuotesRevert(\n            SwapRevertSamplerQuoteOpts({\n                sellToken: takerToken,\n                buyToken: makerToken,\n                bridgeData: abi.encode(router),\n                getSwapQuoteCallback: this.sampleSwapFromOasis\n            }),\n            takerTokenAmounts\n        );\n    }\n\n    /// @dev Sample buy quotes from Eth2Dai/Oasis.\n    /// @param router Address of the Eth2Dai/Oasis contract\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Maker token sell amount for each sample.\n    /// @return gasUsed gas consumed in each sample sell\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromEth2Dai(\n        address router,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        returns (uint256[] memory gasUsed, uint256[] memory takerTokenAmounts)\n    {\n        (gasUsed, takerTokenAmounts) = _sampleSwapApproximateBuys(\n            SwapRevertSamplerBuyQuoteOpts({\n                sellToken: takerToken,\n                buyToken: makerToken,\n                sellTokenData: abi.encode(router),\n                buyTokenData: abi.encode(router),\n                getSwapQuoteCallback: this.sampleSwapFromOasis\n            }),\n            makerTokenAmounts\n        );\n    }\n}\n"
        },
        "@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinOasis.sol": {
            "id": 56,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"../IBridgeAdapter.sol\";\n\ninterface IOasis {\n\n    /// @dev Sell `sellAmount` of `sellToken` token and receive `buyToken` token.\n    /// @param sellToken The token being sold.\n    /// @param sellAmount The amount of `sellToken` token being sold.\n    /// @param buyToken The token being bought.\n    /// @param minBoughtAmount Minimum amount of `buyToken` token to buy.\n    /// @return boughtAmount Amount of `buyToken` bought.\n    function sellAllAmount(\n        IERC20TokenV06 sellToken,\n        uint256 sellAmount,\n        IERC20TokenV06 buyToken,\n        uint256 minBoughtAmount\n    )\n        external\n        returns (uint256 boughtAmount);\n}\n\ncontract MixinOasis {\n\n    using LibERC20TokenV06 for IERC20TokenV06;\n\n    function _tradeOasis(\n        IERC20TokenV06 sellToken,\n        IERC20TokenV06 buyToken,\n        uint256 sellAmount,\n        bytes memory bridgeData\n    )\n        internal\n        returns (uint256 boughtAmount)\n    {\n\n        (IOasis oasis) = abi.decode(bridgeData, (IOasis));\n\n        // Grant an allowance to the exchange to spend `sellToken` token.\n        sellToken.approveIfBelow(\n            address(oasis),\n            sellAmount\n        );\n        // Try to sell all of this contract's `sellToken` token balance.\n        boughtAmount = oasis.sellAllAmount(\n            sellToken,\n            sellAmount,\n            buyToken,\n            // min fill amount\n            1\n        );\n        return boughtAmount;\n    }\n}\n"
        },
        "./KyberSampler.sol": {
            "id": 14,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IKyberNetwork.sol\";\nimport \"@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinKyber.sol\";\nimport \"./SwapRevertSampler.sol\";\n\ncontract KyberSampler is\n    MixinKyber,\n    SwapRevertSampler\n{\n\n    /// @dev Gas limit for Kyber calls.\n    uint256 constant private KYBER_CALL_GAS = 500e3; // 500k\n    /// @dev Kyber ETH pseudo-address.\n    address constant internal KYBER_ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n    constructor(IEtherTokenV06 weth)\n        public\n        MixinKyber(weth)\n    { }\n\n    struct KyberSamplerOpts {\n        uint256 reserveOffset;\n        address hintHandler;\n        address networkProxy;\n        address weth;\n        bytes hint;\n    }\n\n    function sampleSwapFromKyber(\n        address sellToken,\n        address buyToken,\n        bytes memory bridgeData,\n        uint256 takerTokenAmount\n    )\n        external\n        returns (uint256)\n    {\n        KyberSamplerOpts memory opts = abi.decode(bridgeData, (KyberSamplerOpts));\n        return _tradeKyberInternal(\n            // these are Immutable in MixinKyber, since they are only set in constructor they must be passed in\n            IERC20TokenV06(KYBER_ETH_ADDRESS),\n            IEtherTokenV06(opts.weth),\n            IERC20TokenV06(sellToken),\n            IERC20TokenV06(buyToken),\n            takerTokenAmount,\n            abi.encode(opts.networkProxy, opts.hint)\n        );\n    }\n\n    /// @dev Sample sell quotes from Kyber.\n    /// @param opts KyberSamplerOpts The nth reserve\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return reserveId The id of the reserve found at reserveOffset\n    /// @return hint The hint for the selected reserve\n    /// @return gasUsed Gas consumed per sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token amount.\n    function sampleSellsFromKyberNetwork(\n        KyberSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        returns (\n            bytes32 reserveId,\n            bytes memory hint,\n            uint256[] memory gasUsed,\n            uint256[] memory makerTokenAmounts\n        )\n    {\n        reserveId = _getNextReserveId(opts, takerToken, makerToken);\n        if (reserveId == 0x0) {\n            return (reserveId, hint, gasUsed, makerTokenAmounts);\n        }\n        opts.hint = this.encodeKyberHint(opts, reserveId, takerToken, makerToken);\n        hint = opts.hint;\n\n        (gasUsed, makerTokenAmounts) = _sampleSwapQuotesRevert(\n            SwapRevertSamplerQuoteOpts({\n                sellToken: takerToken,\n                buyToken: makerToken,\n                bridgeData: abi.encode(opts),\n                getSwapQuoteCallback: this.sampleSwapFromKyber\n            }),\n            takerTokenAmounts\n        );\n    }\n\n    /// @dev Sample buy quotes from Kyber.\n    /// @param opts KyberSamplerOpts The nth reserve\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return reserveId The id of the reserve found at reserveOffset\n    /// @return hint The hint for the selected reserve\n    /// @return gasUsed Gas consumed for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token amount.\n    function sampleBuysFromKyberNetwork(\n        KyberSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        returns (\n            bytes32 reserveId,\n            bytes memory hint,\n            uint256[] memory gasUsed,\n            uint256[] memory takerTokenAmounts\n        )\n    {\n        reserveId = _getNextReserveId(opts, takerToken, makerToken);\n        if (reserveId == 0x0) {\n            return (reserveId, hint, gasUsed, takerTokenAmounts);\n        }\n        opts.hint = this.encodeKyberHint(opts, reserveId, takerToken, makerToken);\n        hint = opts.hint;\n\n        (gasUsed, takerTokenAmounts) = _sampleSwapApproximateBuys(\n            SwapRevertSamplerBuyQuoteOpts({\n                sellToken: takerToken,\n                buyToken: makerToken,\n                sellTokenData: abi.encode(opts),\n                buyTokenData: abi.encode(opts),\n                getSwapQuoteCallback: this.sampleSwapFromKyber\n            }),\n            makerTokenAmounts\n        );\n    }\n\n    function encodeKyberHint(\n        KyberSamplerOpts memory opts,\n        bytes32 reserveId,\n        address takerToken,\n        address makerToken\n    )\n        public\n        view\n        returns (bytes memory hint)\n    {\n        // Build a hint selecting the single reserve\n        IKyberHintHandler kyberHint = IKyberHintHandler(opts.hintHandler);\n\n        // All other reserves should be ignored with this hint\n        bytes32[] memory selectedReserves = new bytes32[](1);\n        selectedReserves[0] = reserveId;\n        uint256[] memory emptySplits = new uint256[](0);\n\n        if (takerToken == opts.weth) {\n            // ETH to Token\n            try\n                kyberHint.buildEthToTokenHint\n                    {gas: KYBER_CALL_GAS}\n                    (\n                        makerToken,\n                        IKyberHintHandler.TradeType.MaskIn,\n                        selectedReserves,\n                        emptySplits\n                    )\n                returns (bytes memory result)\n            {\n                return result;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n            }\n        } else if (makerToken == opts.weth) {\n            // Token to ETH\n            try\n                kyberHint.buildTokenToEthHint\n                    {gas: KYBER_CALL_GAS}\n                    (\n                        takerToken,\n                        IKyberHintHandler.TradeType.MaskIn,\n                        selectedReserves,\n                        emptySplits\n                    )\n                returns (bytes memory result)\n            {\n                return result;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n            }\n\n        } else {\n            // Token to Token\n            // We use the same reserve both ways\n            try\n                kyberHint.buildTokenToTokenHint\n                    {gas: KYBER_CALL_GAS}\n                    (\n                        takerToken,\n                        IKyberHintHandler.TradeType.MaskIn,\n                        selectedReserves,\n                        emptySplits,\n                        makerToken,\n                        IKyberHintHandler.TradeType.MaskIn,\n                        selectedReserves,\n                        emptySplits\n                    )\n                returns (bytes memory result)\n            {\n                return result;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n            }\n        }\n    }\n\n    function _getNextReserveId(\n        KyberSamplerOpts memory opts,\n        address takerToken,\n        address makerToken\n    )\n        internal\n        view\n        returns (bytes32 reserveId)\n    {\n        // Fetch the registered reserves for this pair\n        IKyberHintHandler kyberHint = IKyberHintHandler(opts.hintHandler);\n        (bytes32[] memory reserveIds, ,) = kyberHint.getTradingReserves(\n            takerToken == opts.weth ? KYBER_ETH_ADDRESS : takerToken,\n            makerToken == opts.weth ? KYBER_ETH_ADDRESS : makerToken,\n            true,\n            new bytes(0) // empty hint\n        );\n\n        if (opts.reserveOffset >= reserveIds.length) {\n            return 0x0;\n        }\n\n        reserveId = reserveIds[opts.reserveOffset];\n        // Ignore Kyber Bridged Reserves (0xbb)\n        if (uint256(reserveId >> 248) == 0xbb) {\n            return 0x0;\n        }\n\n        return reserveId;\n    }\n}\n"
        },
        "./interfaces/IKyberNetwork.sol": {
            "id": 28,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n// Keepin everything together\ninterface IKyberNetwork {\n\n}\n\ninterface IKyberHintHandler {\n\n    enum TradeType {BestOfAll, MaskIn, MaskOut, Split}\n\n    enum ProcessWithRate {NotRequired, Required}\n\n    function getTradingReserves(\n        address tokenSrc,\n        address tokenDest,\n        bool isTokenToToken,\n        bytes calldata hint\n    )\n        external\n        view\n        returns (\n            bytes32[] memory reserveIds,\n            uint256[] memory splitValuesBps,\n            ProcessWithRate processWithRate\n        );\n\n    function buildTokenToEthHint(\n        address tokenSrc,\n        TradeType tokenToEthType,\n        bytes32[] calldata tokenToEthReserveIds,\n        uint256[] calldata tokenToEthSplits\n    )\n        external\n        view\n        returns (bytes memory hint);\n\n    function buildEthToTokenHint(\n        address tokenDest,\n        TradeType ethToTokenType,\n        bytes32[] calldata ethToTokenReserveIds,\n        uint256[] calldata ethToTokenSplits\n    )\n        external\n        view\n        returns (bytes memory hint);\n\n    function buildTokenToTokenHint(\n        address tokenSrc,\n        TradeType tokenToEthType,\n        bytes32[] calldata tokenToEthReserveIds,\n        uint256[] calldata tokenToEthSplits,\n        address tokenDest,\n        TradeType ethToTokenType,\n        bytes32[] calldata ethToTokenReserveIds,\n        uint256[] calldata ethToTokenSplits\n    )\n        external\n        view\n        returns (bytes memory hint);\n}\n"
        },
        "@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinKyber.sol": {
            "id": 51,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol\";\nimport \"../IBridgeAdapter.sol\";\n\ninterface IKyberNetworkProxy {\n\n    /// @dev Sells `sellTokenAddress` tokens for `buyTokenAddress` tokens\n    /// using a hint for the reserve.\n    /// @param sellToken Token to sell.\n    /// @param sellAmount Amount of tokens to sell.\n    /// @param buyToken Token to buy.\n    /// @param recipientAddress Address to send bought tokens to.\n    /// @param maxBuyTokenAmount A limit on the amount of tokens to buy.\n    /// @param minConversionRate The minimal conversion rate. If actual rate\n    ///        is lower, trade is canceled.\n    /// @param walletId The wallet ID to send part of the fees\n    /// @param hint The hint for the selective inclusion (or exclusion) of reserves\n    /// @return boughtAmount Amount of tokens bought.\n    function tradeWithHint(\n        IERC20TokenV06 sellToken,\n        uint256 sellAmount,\n        IERC20TokenV06 buyToken,\n        address payable recipientAddress,\n        uint256 maxBuyTokenAmount,\n        uint256 minConversionRate,\n        address payable walletId,\n        bytes calldata hint\n    )\n        external\n        payable\n        returns (uint256 boughtAmount);\n\n    function getExpectedRateAfterFee(\n        address src,\n        address dest,\n        uint256 srcQty,\n        uint256 platformFeeBps,\n        bytes calldata hint\n    )\n        external\n        view\n        returns (uint256 expectedRate);\n}\n\ncontract MixinKyber {\n\n    using LibERC20TokenV06 for IERC20TokenV06;\n\n    /// @dev Address indicating the trade is using ETH\n    IERC20TokenV06 private immutable KYBER_ETH_ADDRESS =\n        IERC20TokenV06(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\n    /// @dev Mainnet address of the WETH contract.\n    IEtherTokenV06 private immutable WETH;\n\n    constructor(IEtherTokenV06 weth)\n        public\n    {\n        WETH = weth;\n    }\n\n    function _tradeKyber(\n        IERC20TokenV06 sellToken,\n        IERC20TokenV06 buyToken,\n        uint256 sellAmount,\n        bytes memory bridgeData\n    )\n        internal\n        returns (uint256 boughtAmount)\n    {\n        return _tradeKyberInternal(KYBER_ETH_ADDRESS, WETH, sellToken, buyToken, sellAmount, bridgeData);\n    }\n\n    function _tradeKyberInternal(\n        IERC20TokenV06 kyberEthAddress,\n        IEtherTokenV06 weth,\n        IERC20TokenV06 sellToken,\n        IERC20TokenV06 buyToken,\n        uint256 sellAmount,\n        bytes memory bridgeData\n    )\n        internal\n        returns (uint256 boughtAmount)\n    {\n        (IKyberNetworkProxy kyber, bytes memory hint) =\n            abi.decode(bridgeData, (IKyberNetworkProxy, bytes));\n\n        uint256 payableAmount = 0;\n        if (sellToken != weth) {\n            // If the input token is not WETH, grant an allowance to the exchange\n            // to spend them.\n            sellToken.approveIfBelow(\n                address(kyber),\n                sellAmount\n            );\n        } else {\n            // If the input token is WETH, unwrap it and attach it to the call.\n            payableAmount = sellAmount;\n            weth.withdraw(payableAmount);\n        }\n\n        // Try to sell all of this contract's input token balance through\n        // `KyberNetworkProxy.trade()`.\n        boughtAmount = kyber.tradeWithHint{ value: payableAmount }(\n            // Input token.\n            sellToken == weth ? kyberEthAddress : sellToken,\n            // Sell amount.\n            sellAmount,\n            // Output token.\n            buyToken == weth ? kyberEthAddress : buyToken,\n            // Transfer to this contract\n            address(uint160(address(this))),\n            // Buy as much as possible.\n            uint256(-1),\n            // Lowest minimum conversion rate\n            1,\n            // No affiliate address.\n            address(0),\n            hint\n        );\n        // If receving ETH, wrap it to WETH.\n        if (buyToken == weth) {\n            weth.deposit{ value: boughtAmount }();\n        }\n        return boughtAmount;\n    }\n}\n"
        },
        "./KyberDmmSampler.sol": {
            "id": 13,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinKyberDmm.sol\";\nimport \"./SwapRevertSampler.sol\";\ninterface IKyberDmmFactory {\n\n    function getPoolAtIndex(address token0, address token1, uint256 index)\n        external\n        view\n        returns (address);\n}\n\n\ncontract KyberDmmSampler is\n    MixinKyberDmm,\n    SwapRevertSampler\n{\n    /// @dev Gas limit for KyberDmm calls.\n    uint256 constant private KYBER_DMM_CALL_GAS = 150e3; // 150k\n\n    function sampleSwapFromKyberDmm(\n        address sellToken,\n        address buyToken,\n        bytes memory bridgeData,\n        uint256 takerTokenAmount\n    )\n        external\n        returns (uint256)\n    {\n        return _tradeKyberDmm(\n            IERC20TokenV06(buyToken),\n            takerTokenAmount,\n            bridgeData\n        );\n    }\n\n    /// @dev Sample sell quotes from KyberDmm.\n    /// @param router Router to look up tokens and amounts\n    /// @param path Token route. Should be takerToken -> makerToken\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return pools The pool addresses involved in the multi path trade\n    /// @return gasUsed gas consumed in each sample sell\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromKyberDmm(\n        address router,\n        address[] memory path,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        returns (\n            address[] memory pools,\n            uint256[] memory gasUsed,\n            uint256[] memory makerTokenAmounts\n        )\n    {\n        pools = _getKyberDmmPools(router, path);\n        if (pools.length == 0) {\n            return (pools, gasUsed, makerTokenAmounts);\n        }\n\n        (gasUsed, makerTokenAmounts) = _sampleSwapQuotesRevert(\n            SwapRevertSamplerQuoteOpts({\n                sellToken: path[0],\n                buyToken: path[path.length - 1],\n                bridgeData: abi.encode(router, pools, path),\n                getSwapQuoteCallback: this.sampleSwapFromKyberDmm\n            }),\n            takerTokenAmounts\n        );\n    }\n\n    /// @dev Sample buy quotes from KyberDmm.\n    /// @param router Router to look up tokens and amounts\n    /// @param path Token route. Should be takerToken -> makerToken.\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return pools The pool addresses involved in the multi path trade\n    /// @return gasUsed gas consumed in each sample sell\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromKyberDmm(\n        address router,\n        address[] memory path,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        returns (\n            address[] memory pools,\n            uint256[] memory gasUsed,\n            uint256[] memory takerTokenAmounts\n        )\n    {\n        pools = _getKyberDmmPools(router, path);\n        if (pools.length == 0) {\n            return (pools, gasUsed, takerTokenAmounts);\n        }\n\n        address[] memory reversedPath = new address[](path.length);\n        for (uint256 i = 0; i < path.length; ++i) {\n            reversedPath[i] = path[path.length - i - 1];\n        }\n        address[] memory reversedPools = _getKyberDmmPools(router, reversedPath);\n        (gasUsed, takerTokenAmounts) = _sampleSwapApproximateBuys(\n            SwapRevertSamplerBuyQuoteOpts({\n                sellToken: path[0],\n                buyToken: path[path.length - 1],\n                sellTokenData: abi.encode(router, pools, path),\n                buyTokenData: abi.encode(router, reversedPools, reversedPath),\n                getSwapQuoteCallback: this.sampleSwapFromKyberDmm\n            }),\n            makerTokenAmounts\n        );\n    }\n\n    function _getKyberDmmPools(\n        address router,\n        address[] memory path\n    )\n        private\n        view\n        returns (address[] memory pools)\n    {\n        pools = new address[](path.length - 1);\n        IKyberDmmFactory factory = IKyberDmmFactory(IKyberDmmRouter(router).factory());\n        for (uint256 i = 0; i < pools.length; i++) {\n            // Currently only supporting the first pool found at the index\n            try\n                factory.getPoolAtIndex\n                    {gas: KYBER_DMM_CALL_GAS}\n                    (path[i], path[i + 1], 0)\n                returns (address pool)\n            {\n                pools[i] = pool;\n            } catch (bytes memory) {\n                return new address[](0);\n            }\n        }\n    }\n}\n"
        },
        "@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinKyberDmm.sol": {
            "id": 52,
            "content": "// SPDX-License-Identifier: Apache-2.0\n\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"../IBridgeAdapter.sol\";\n\n/*\n    KyberDmm Router\n*/\ninterface IKyberDmmRouter {\n\n    function factory() external view returns (address);\n\n    /// @dev Swaps an exact amount of input tokens for as many output tokens as possible, along the route determined by the path.\n    ///      The first element of path is the input token, the last is the output token, and any intermediate elements represent\n    ///      intermediate pairs to trade through (if, for example, a direct pair does not exist).\n    /// @param amountIn The amount of input tokens to send.\n    /// @param amountOutMin The minimum amount of output tokens that must be received for the transaction not to revert.\n    /// @param pools An array of pool addresses. pools.length must be >= 1.\n    /// @param path An array of token addresses. path.length must be >= 2. Pools for each consecutive pair of addresses must exist and have liquidity.\n    /// @param to Recipient of the output tokens.\n    /// @param deadline Unix timestamp after which the transaction will revert.\n    /// @return amounts The input token amount and all subsequent output token amounts.\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata pools,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n}\n\ncontract MixinKyberDmm {\n\n    using LibERC20TokenV06 for IERC20TokenV06;\n\n    function _tradeKyberDmm(\n        IERC20TokenV06 buyToken,\n        uint256 sellAmount,\n        bytes memory bridgeData\n    )\n        internal\n        returns (uint256 boughtAmount)\n    {\n        address router;\n        address[] memory pools;\n        address[] memory path;\n        (router, pools, path) = abi.decode(bridgeData, (address, address[], address[]));\n\n        require(pools.length >= 1, \"MixinKyberDmm/POOLS_LENGTH_MUST_BE_AT_LEAST_ONE\");\n        require(path.length == pools.length + 1, \"MixinKyberDmm/ARRAY_LENGTH_MISMATCH\");\n         require(\n             path[path.length - 1] == address(buyToken),\n             \"MixinKyberDmm/LAST_ELEMENT_OF_PATH_MUST_MATCH_OUTPUT_TOKEN\"\n         );\n        // Grant the KyberDmm router an allowance to sell the first token.\n        IERC20TokenV06(path[0]).approveIfBelow(address(router), sellAmount);\n\n        uint[] memory amounts = IKyberDmmRouter(router).swapExactTokensForTokens(\n             // Sell all tokens we hold.\n            sellAmount,\n             // Minimum buy amount.\n            1,\n            pools,\n            // Convert to `buyToken` along this path.\n            path,\n            // Recipient is `this`.\n            address(this),\n            // Expires after this block.\n            block.timestamp\n        );\n        return amounts[amounts.length-1];\n    }\n}\n"
        },
        "./LiquidityProviderSampler.sol": {
            "id": 15,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinZeroExBridge.sol\";\nimport \"./SwapRevertSampler.sol\";\n\n\ncontract LiquidityProviderSampler is\n    MixinZeroExBridge,\n    SwapRevertSampler\n{\n\n    function sampleSwapFromLiquidityProvider(\n        address sellToken,\n        address buyToken,\n        bytes memory bridgeData,\n        uint256 takerTokenAmount\n    )\n        external\n        returns (uint256)\n    {\n        return _tradeZeroExBridge(\n            IERC20TokenV06(sellToken),\n            IERC20TokenV06(buyToken),\n            takerTokenAmount,\n            bridgeData\n        );\n    }\n\n    /// @dev Sample sell quotes from an arbitrary on-chain liquidity provider.\n    /// @param providerAddress Address of the liquidity provider.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return gasUsed gas consumed in each sample sell\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromLiquidityProvider(\n        address providerAddress,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        returns (uint256[] memory gasUsed, uint256[] memory makerTokenAmounts)\n    {\n        bytes memory lpData;\n        (gasUsed, makerTokenAmounts) = _sampleSwapQuotesRevert(\n            SwapRevertSamplerQuoteOpts({\n                sellToken: takerToken,\n                buyToken: makerToken,\n                bridgeData: abi.encode(providerAddress, lpData),\n                getSwapQuoteCallback: this.sampleSwapFromLiquidityProvider\n            }),\n            takerTokenAmounts\n        );\n    }\n\n    /// @dev Sample buy quotes from an arbitrary on-chain liquidity provider.\n    /// @param providerAddress Address of the liquidity provider.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return gasUsed gas consumed in each sample sell\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromLiquidityProvider(\n        address providerAddress,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        returns (uint256[] memory gasUsed, uint256[] memory takerTokenAmounts)\n    {\n        bytes memory lpData;\n        (gasUsed, takerTokenAmounts) = _sampleSwapApproximateBuys(\n            SwapRevertSamplerBuyQuoteOpts({\n                sellToken: takerToken,\n                buyToken: makerToken,\n                sellTokenData: abi.encode(providerAddress, lpData),\n                buyTokenData: abi.encode(providerAddress, lpData),\n                getSwapQuoteCallback: this.sampleSwapFromLiquidityProvider\n            }),\n            makerTokenAmounts\n        );\n    }\n}\n"
        },
        "@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinZeroExBridge.sol": {
            "id": 61,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol\";\nimport \"../../../vendor/ILiquidityProvider.sol\";\n\n\ncontract MixinZeroExBridge {\n\n    using LibERC20TokenV06 for IERC20TokenV06;\n    using LibSafeMathV06 for uint256;\n\n    function _tradeZeroExBridge(\n        IERC20TokenV06 sellToken,\n        IERC20TokenV06 buyToken,\n        uint256 sellAmount,\n        bytes memory bridgeData\n    )\n        internal\n        returns (uint256 boughtAmount)\n    {\n        (ILiquidityProvider provider, bytes memory lpData) =\n            abi.decode(bridgeData, (ILiquidityProvider, bytes));\n        // Trade the good old fashioned way\n        sellToken.compatTransfer(\n            address(provider),\n            sellAmount\n        );\n        boughtAmount = provider.sellTokenForToken(\n            sellToken,\n            buyToken,\n            address(this), // recipient\n            1, // minBuyAmount\n            lpData\n        );\n    }\n}\n"
        },
        "@0x/contracts-zero-ex/contracts/src/vendor/ILiquidityProvider.sol": {
            "id": 62,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\n\n\ninterface ILiquidityProvider {\n\n    /// @dev An optional event an LP can emit for each fill against a source.\n    /// @param inputToken The input token.\n    /// @param outputToken The output token.\n    /// @param inputTokenAmount How much input token was sold.\n    /// @param outputTokenAmount How much output token was bought.\n    /// @param sourceId A bytes32 encoded ascii source ID. E.g., `bytes32('Curve')`/\n    /// @param sourceAddress An optional address associated with the source (e.g, a curve pool).\n    /// @param sourceId A bytes32 encoded ascii source ID. E.g., `bytes32('Curve')`/\n    /// @param sourceAddress An optional address associated with the source (e.g, a curve pool).\n    /// @param sender The caller of the LP.\n    /// @param recipient The recipient of the output tokens.\n    event LiquidityProviderFill(\n        IERC20TokenV06 inputToken,\n        IERC20TokenV06 outputToken,\n        uint256 inputTokenAmount,\n        uint256 outputTokenAmount,\n        bytes32 sourceId,\n        address sourceAddress,\n        address sender,\n        address recipient\n    );\n\n    /// @dev Trades `inputToken` for `outputToken`. The amount of `inputToken`\n    ///      to sell must be transferred to the contract prior to calling this\n    ///      function to trigger the trade.\n    /// @param inputToken The token being sold.\n    /// @param outputToken The token being bought.\n    /// @param recipient The recipient of the bought tokens.\n    /// @param minBuyAmount The minimum acceptable amount of `outputToken` to buy.\n    /// @param auxiliaryData Arbitrary auxiliary data supplied to the contract.\n    /// @return boughtAmount The amount of `outputToken` bought.\n    function sellTokenForToken(\n        IERC20TokenV06 inputToken,\n        IERC20TokenV06 outputToken,\n        address recipient,\n        uint256 minBuyAmount,\n        bytes calldata auxiliaryData\n    )\n        external\n        returns (uint256 boughtAmount);\n\n    /// @dev Trades ETH for token. ETH must either be attached to this function\n    ///      call or sent to the contract prior to calling this function to\n    ///      trigger the trade.\n    /// @param outputToken The token being bought.\n    /// @param recipient The recipient of the bought tokens.\n    /// @param minBuyAmount The minimum acceptable amount of `outputToken` to buy.\n    /// @param auxiliaryData Arbitrary auxiliary data supplied to the contract.\n    /// @return boughtAmount The amount of `outputToken` bought.\n    function sellEthForToken(\n        IERC20TokenV06 outputToken,\n        address recipient,\n        uint256 minBuyAmount,\n        bytes calldata auxiliaryData\n    )\n        external\n        payable\n        returns (uint256 boughtAmount);\n\n    /// @dev Trades token for ETH. The token must be sent to the contract prior\n    ///      to calling this function to trigger the trade.\n    /// @param inputToken The token being sold.\n    /// @param recipient The recipient of the bought tokens.\n    /// @param minBuyAmount The minimum acceptable amount of ETH to buy.\n    /// @param auxiliaryData Arbitrary auxiliary data supplied to the contract.\n    /// @return boughtAmount The amount of ETH bought.\n    function sellTokenForEth(\n        IERC20TokenV06 inputToken,\n        address payable recipient,\n        uint256 minBuyAmount,\n        bytes calldata auxiliaryData\n    )\n        external\n        returns (uint256 boughtAmount);\n\n    /// @dev Quotes the amount of `outputToken` that would be obtained by\n    ///      selling `sellAmount` of `inputToken`.\n    /// @param inputToken Address of the taker token (what to sell). Use\n    ///        the wETH address if selling ETH.\n    /// @param outputToken Address of the maker token (what to buy). Use\n    ///        the wETH address if buying ETH.\n    /// @param sellAmount Amount of `inputToken` to sell.\n    /// @return outputTokenAmount Amount of `outputToken` that would be obtained.\n    function getSellQuote(\n        IERC20TokenV06 inputToken,\n        IERC20TokenV06 outputToken,\n        uint256 sellAmount\n    )\n        external\n        view\n        returns (uint256 outputTokenAmount);\n}\n"
        },
        "./MakerPSMSampler.sol": {
            "id": 17,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinMakerPSM.sol\";\nimport \"./SwapRevertSampler.sol\";\n\ncontract MakerPSMSampler is\n    MixinMakerPSM,\n    SwapRevertSampler\n{\n\n    /// @dev Information about which PSM module to use\n    struct MakerPsmInfo {\n        address psmAddress;\n        bytes32 ilkIdentifier;\n        address gemTokenAddress;\n    }\n\n    function sampleSwapFromMakerPsm(\n        address sellToken,\n        address buyToken,\n        bytes memory bridgeData,\n        uint256 takerTokenAmount\n    )\n        external\n        returns (uint256)\n    {\n        return _tradeMakerPsm(\n            IERC20TokenV06(sellToken),\n            IERC20TokenV06(buyToken),\n            takerTokenAmount,\n            bridgeData\n        );\n    }\n\n    /// @dev Sample sell quotes from Maker PSM\n    function sampleSellsFromMakerPsm(\n        MakerPsmInfo memory psmInfo,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        returns (uint256[] memory gasUsed, uint256[] memory makerTokenAmounts)\n    {\n        (gasUsed, makerTokenAmounts) = _sampleSwapQuotesRevert(\n            SwapRevertSamplerQuoteOpts({\n                sellToken: takerToken,\n                buyToken: makerToken,\n                bridgeData: abi.encode(\n                    MakerPsmBridgeData({\n                        psmAddress: psmInfo.psmAddress,\n                        gemTokenAddres: psmInfo.gemTokenAddress\n                    })\n                ),\n                getSwapQuoteCallback: this.sampleSwapFromMakerPsm\n            }),\n            takerTokenAmounts\n        );\n    }\n\n    function sampleBuysFromMakerPsm(\n        MakerPsmInfo memory psmInfo,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        returns (uint256[] memory gasUsed, uint256[] memory takerTokenAmounts)\n    {\n        MakerPsmBridgeData memory data = MakerPsmBridgeData({\n            psmAddress: psmInfo.psmAddress,\n            gemTokenAddres: psmInfo.gemTokenAddress\n        });\n        (gasUsed, takerTokenAmounts) = _sampleSwapApproximateBuys(\n            SwapRevertSamplerBuyQuoteOpts({\n                sellToken: takerToken,\n                buyToken: makerToken,\n                sellTokenData: abi.encode(data),\n                buyTokenData: abi.encode(data),\n                getSwapQuoteCallback: this.sampleSwapFromMakerPsm\n            }),\n            makerTokenAmounts\n        );\n    }\n}\n"
        },
        "@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinMakerPSM.sol": {
            "id": 54,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol\";\n\ninterface IPSM {\n    // @dev Get the fee for selling USDC to DAI in PSM\n    // @return tin toll in [wad]\n    function tin() external view returns (uint256);\n    // @dev Get the fee for selling DAI to USDC in PSM\n    // @return tout toll out [wad]\n    function tout() external view returns (uint256);\n\n    // @dev Get the address of the PSM state Vat\n    // @return address of the Vat\n    function vat() external view returns (address);\n\n    // @dev Get the address of the underlying vault powering PSM\n    // @return address of gemJoin contract\n    function gemJoin() external view returns (address);\n\n    // @dev Sell USDC for DAI\n    // @param usr The address of the account trading USDC for DAI.\n    // @param gemAmt The amount of USDC to sell in USDC base units\n    function sellGem(\n        address usr,\n        uint256 gemAmt\n    ) external;\n    // @dev Buy USDC for DAI\n    // @param usr The address of the account trading DAI for USDC\n    // @param gemAmt The amount of USDC to buy in USDC base units\n    function buyGem(\n        address usr,\n        uint256 gemAmt\n    ) external;\n}\n\ncontract MixinMakerPSM {\n\n    using LibERC20TokenV06 for IERC20TokenV06;\n    using LibSafeMathV06 for uint256;\n\n    struct MakerPsmBridgeData {\n        address psmAddress;\n        address gemTokenAddres;\n    }\n\n    // Maker units\n    // wad: fixed point decimal with 18 decimals (for basic quantities, e.g. balances)\n    uint256 constant private WAD = 10 ** 18;\n    // ray: fixed point decimal with 27 decimals (for precise quantites, e.g. ratios)\n    uint256 constant private RAY = 10 ** 27;\n    // rad: fixed point decimal with 45 decimals (result of integer multiplication with a wad and a ray)\n    uint256 constant private RAD = 10 ** 45;\n    // See https://github.com/makerdao/dss/blob/master/DEVELOPING.md\n\n    function _tradeMakerPsm(\n        IERC20TokenV06 sellToken,\n        IERC20TokenV06 buyToken,\n        uint256 sellAmount,\n        bytes memory bridgeData\n    )\n        internal\n        returns (uint256 boughtAmount)\n    {\n        // Decode the bridge data.\n        MakerPsmBridgeData memory data = abi.decode(bridgeData, (MakerPsmBridgeData));\n        uint256 beforeBalance = buyToken.balanceOf(address(this));\n\n        IPSM psm = IPSM(data.psmAddress);\n\n        if (address(sellToken) == data.gemTokenAddres) {\n            sellToken.approveIfBelow(\n                psm.gemJoin(),\n                sellAmount\n            );\n\n            psm.sellGem(address(this), sellAmount);\n        } else if (address(buyToken) == data.gemTokenAddres) {\n            uint256 feeDivisor = WAD.safeAdd(psm.tout()); // eg. 1.001 * 10 ** 18 with 0.1% fee [tout is in wad];\n            uint256 buyTokenBaseUnit = uint256(10) ** uint256(buyToken.decimals());\n            uint256 gemAmount =  sellAmount.safeMul(buyTokenBaseUnit).safeDiv(feeDivisor);\n\n            sellToken.approveIfBelow(\n                data.psmAddress,\n                sellAmount\n            );\n            psm.buyGem(address(this), gemAmount);\n        }\n\n        return buyToken.balanceOf(address(this)).safeSub(beforeBalance);\n    }\n}\n"
        },
        "./MStableSampler.sol": {
            "id": 16,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinMStable.sol\";\nimport \"./SwapRevertSampler.sol\";\n\n\ncontract MStableSampler is\n    MixinMStable,\n    SwapRevertSampler\n{\n\n    function sampleSwapFromMStable(\n        address sellToken,\n        address buyToken,\n        bytes memory bridgeData,\n        uint256 takerTokenAmount\n    )\n        external\n        returns (uint256)\n    {\n        return _tradeMStable(\n            IERC20TokenV06(sellToken),\n            IERC20TokenV06(buyToken),\n            takerTokenAmount,\n            bridgeData\n        );\n    }\n\n    /// @dev Sample sell quotes from the mStable contract\n    /// @param router Address of the mStable contract\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return gasUsed gas consumed in each sample sell\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromMStable(\n        address router,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        returns (uint256[] memory gasUsed, uint256[] memory makerTokenAmounts)\n    {\n        (gasUsed, makerTokenAmounts) = _sampleSwapQuotesRevert(\n            SwapRevertSamplerQuoteOpts({\n                sellToken: takerToken,\n                buyToken: makerToken,\n                bridgeData: abi.encode(router),\n                getSwapQuoteCallback: this.sampleSwapFromMStable\n            }),\n            takerTokenAmounts\n        );\n    }\n\n    /// @dev Sample buy quotes from MStable contract\n    /// @param router Address of the mStable contract\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return gasUsed gas consumed in each sample sell\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromMStable(\n        address router,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        returns (uint256[] memory gasUsed, uint256[] memory takerTokenAmounts)\n    {\n        (gasUsed, takerTokenAmounts) = _sampleSwapApproximateBuys(\n            SwapRevertSamplerBuyQuoteOpts({\n                sellToken: takerToken,\n                buyToken: makerToken,\n                sellTokenData: abi.encode(router),\n                buyTokenData: abi.encode(router),\n                getSwapQuoteCallback: this.sampleSwapFromMStable\n            }),\n            makerTokenAmounts\n        );\n    }\n}\n"
        },
        "@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinMStable.sol": {
            "id": 53,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"../IBridgeAdapter.sol\";\n\n\ninterface IMStable {\n\n    function swap(\n        IERC20TokenV06 sellToken,\n        IERC20TokenV06 buyToken,\n        uint256 sellAmount,\n        uint256 minBoughtAmount,\n        address recipient\n    )\n        external\n        returns (uint256 boughtAmount);\n}\n\ncontract MixinMStable {\n\n    using LibERC20TokenV06 for IERC20TokenV06;\n\n    function _tradeMStable(\n        IERC20TokenV06 sellToken,\n        IERC20TokenV06 buyToken,\n        uint256 sellAmount,\n        bytes memory bridgeData\n    )\n        internal\n        returns (uint256 boughtAmount)\n    {\n        (IMStable mstable) = abi.decode(bridgeData, (IMStable));\n\n        // Grant an allowance to the exchange to spend `sellToken` token.\n        sellToken.approveIfBelow(address(mstable), sellAmount);\n\n        boughtAmount = mstable.swap(\n            sellToken,\n            buyToken,\n            sellAmount,\n            // Minimum buy amount.\n            1,\n            address(this)\n        );\n    }\n}\n"
        },
        "./MooniswapSampler.sol": {
            "id": 18,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinMooniswap.sol\";\nimport \"./SwapRevertSampler.sol\";\n\ninterface IMooniswapRegistry {\n    function pools(address token1, address token2) external view returns(address);\n}\n\ncontract MooniswapSampler is\n    MixinMooniswap,\n    SwapRevertSampler\n{\n\n    constructor(IEtherTokenV06 weth)\n        public\n        MixinMooniswap(weth)\n    { }\n\n    function sampleSwapFromMooniswap(\n        address sellToken,\n        address buyToken,\n        bytes memory bridgeData,\n        uint256 takerTokenAmount\n    )\n        external\n        returns (uint256)\n    {\n        return _tradeMooniswapInternal(\n            IEtherTokenV06(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2),\n            IERC20TokenV06(sellToken),\n            IERC20TokenV06(buyToken),\n            takerTokenAmount,\n            bridgeData\n        );\n    }\n\n    /// @dev Sample sell quotes from Mooniswap.\n    /// @param registry Address of the Mooniswap Registry.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return pool The contract address for the pool\n    /// @return gasUsed gas consumed in each sample sell\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromMooniswap(\n        address registry,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        returns (address pool, uint256[] memory gasUsed, uint256[] memory makerTokenAmounts)\n    {\n        pool = _getMooniswapPool(registry, takerToken, makerToken);\n        if (address(pool) == address(0)) {\n            return (pool, gasUsed, makerTokenAmounts);\n        }\n\n        (gasUsed, makerTokenAmounts) = _sampleSwapQuotesRevert(\n            SwapRevertSamplerQuoteOpts({\n                sellToken: takerToken,\n                buyToken: makerToken,\n                bridgeData: abi.encode(pool),\n                getSwapQuoteCallback: this.sampleSwapFromMooniswap\n            }),\n            takerTokenAmounts\n        );\n    }\n\n    /// @dev Sample buy quotes from Mooniswap.\n    /// @param registry Address of the Mooniswap Registry.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token sell amount for each sample.\n    /// @return pool The contract address for the pool\n    /// @return gasUsed gas consumed in each sample sell\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromMooniswap(\n        address registry,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        returns (address pool, uint256[] memory gasUsed, uint256[] memory takerTokenAmounts)\n    {\n        pool = _getMooniswapPool(registry, takerToken, makerToken);\n        if (address(pool) == address(0)) {\n            return (pool, gasUsed, takerTokenAmounts);\n        }\n\n        (gasUsed, takerTokenAmounts) = _sampleSwapApproximateBuys(\n            SwapRevertSamplerBuyQuoteOpts({\n                sellToken: takerToken,\n                buyToken: makerToken,\n                sellTokenData: abi.encode(pool),\n                buyTokenData: abi.encode(pool),\n                getSwapQuoteCallback: this.sampleSwapFromMooniswap\n            }),\n            makerTokenAmounts\n        );\n    }\n\n    function _getMooniswapPool(\n        address registry,\n        address takerToken,\n        address makerToken\n    )\n        internal\n        returns (address pool)\n    {\n        // WETH is actually ETH in these pools and represented as address(0)\n        address _takerToken = takerToken == 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2 ? address(0) : takerToken;\n        address _makerToken = makerToken == 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2 ? address(0) : makerToken;\n\n        try\n            IMooniswapRegistry(registry).pools{gas: 300e3}(_takerToken, _makerToken)\n            returns (address _pool)\n        {\n            pool = _pool;\n        } catch { }\n    }\n}\n"
        },
        "@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinMooniswap.sol": {
            "id": 55,
            "content": "// SPDX-License-Identifier: Apache-2.0\n\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol\";\nimport \"../IBridgeAdapter.sol\";\n\n\n/// @dev Moooniswap pool interface.\ninterface IMooniswapPool {\n\n    function swap(\n        IERC20TokenV06 sellToken,\n        IERC20TokenV06 buyToken,\n        uint256 sellAmount,\n        uint256 minBoughtAmount,\n        address referrer\n    )\n        external\n        payable\n        returns (uint256 boughtAmount);\n}\n\n/// @dev BridgeAdapter mixin for mooniswap.\ncontract MixinMooniswap {\n\n    using LibERC20TokenV06 for IERC20TokenV06;\n    using LibERC20TokenV06 for IEtherTokenV06;\n\n    /// @dev WETH token.\n    IEtherTokenV06 private immutable WETH;\n\n    constructor(IEtherTokenV06 weth)\n        public\n    {\n        WETH = weth;\n    }\n\n    function _tradeMooniswap(\n        IERC20TokenV06 sellToken,\n        IERC20TokenV06 buyToken,\n        uint256 sellAmount,\n        bytes memory bridgeData\n    )\n        internal\n        returns (uint256 boughtAmount)\n    {\n\n        return _tradeMooniswapInternal(WETH, sellToken, buyToken, sellAmount, bridgeData);\n    }\n\n    function _tradeMooniswapInternal(\n        IEtherTokenV06 weth,\n        IERC20TokenV06 sellToken,\n        IERC20TokenV06 buyToken,\n        uint256 sellAmount,\n        bytes memory bridgeData\n    )\n        internal\n        returns (uint256 boughtAmount)\n    {\n        (IMooniswapPool pool) = abi.decode(bridgeData, (IMooniswapPool));\n\n        // Convert WETH to ETH.\n        uint256 ethValue = 0;\n        if (sellToken == weth) {\n            weth.withdraw(sellAmount);\n            ethValue = sellAmount;\n        } else {\n            // Grant the pool an allowance.\n            sellToken.approveIfBelow(\n                address(pool),\n                sellAmount\n            );\n        }\n\n        boughtAmount = pool.swap{value: ethValue}(\n            sellToken == weth ? IERC20TokenV06(0) : sellToken,\n            buyToken == weth ? IERC20TokenV06(0) : buyToken,\n            sellAmount,\n            1,\n            address(0)\n        );\n\n        // Wrap ETH to WETH.\n        if (buyToken == weth) {\n            weth.deposit{value:boughtAmount}();\n        }\n    }\n}\n"
        },
        "./NativeOrderSampler.sol": {
            "id": 19,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibMathV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol\";\n\n\ninterface IExchange {\n\n    enum OrderStatus {\n        INVALID,\n        FILLABLE,\n        FILLED,\n        CANCELLED,\n        EXPIRED\n    }\n\n    /// @dev A standard OTC or OO limit order.\n    struct LimitOrder {\n        IERC20TokenV06 makerToken;\n        IERC20TokenV06 takerToken;\n        uint128 makerAmount;\n        uint128 takerAmount;\n        uint128 takerTokenFeeAmount;\n        address maker;\n        address taker;\n        address sender;\n        address feeRecipient;\n        bytes32 pool;\n        uint64 expiry;\n        uint256 salt;\n    }\n\n    /// @dev An RFQ limit order.\n    struct RfqOrder {\n        IERC20TokenV06 makerToken;\n        IERC20TokenV06 takerToken;\n        uint128 makerAmount;\n        uint128 takerAmount;\n        address maker;\n        address taker;\n        address txOrigin;\n        bytes32 pool;\n        uint64 expiry;\n        uint256 salt;\n    }\n\n    /// @dev Info on a limit or RFQ order.\n    struct OrderInfo {\n        bytes32 orderHash;\n        OrderStatus status;\n        uint128 takerTokenFilledAmount;\n    }\n\n    /// @dev Allowed signature types.\n    enum SignatureType {\n        ILLEGAL,\n        INVALID,\n        EIP712,\n        ETHSIGN\n    }\n\n    /// @dev Encoded EC signature.\n    struct Signature {\n        // How to validate the signature.\n        SignatureType signatureType;\n        // EC Signature data.\n        uint8 v;\n        // EC Signature data.\n        bytes32 r;\n        // EC Signature data.\n        bytes32 s;\n    }\n\n    /// @dev Get the order info for a limit order.\n    /// @param order The limit order.\n    /// @return orderInfo Info about the order.\n    function getLimitOrderInfo(LimitOrder memory order)\n        external\n        view\n        returns (OrderInfo memory orderInfo);\n\n    /// @dev Get order info, fillable amount, and signature validity for a limit order.\n    ///      Fillable amount is determined using balances and allowances of the maker.\n    /// @param order The limit order.\n    /// @param signature The order signature.\n    /// @return orderInfo Info about the order.\n    /// @return actualFillableTakerTokenAmount How much of the order is fillable\n    ///         based on maker funds, in taker tokens.\n    /// @return isSignatureValid Whether the signature is valid.\n    function getLimitOrderRelevantState(\n        LimitOrder memory order,\n        Signature calldata signature\n    )\n        external\n        view\n        returns (\n            OrderInfo memory orderInfo,\n            uint128 actualFillableTakerTokenAmount,\n            bool isSignatureValid\n        );\n}\n\ncontract NativeOrderSampler {\n    using LibSafeMathV06 for uint256;\n    using LibBytesV06 for bytes;\n\n    /// @dev Gas limit for calls to `getOrderFillableTakerAmount()`.\n    uint256 constant internal DEFAULT_CALL_GAS = 200e3; // 200k\n\n    /// @dev Queries the fillable taker asset amounts of native orders.\n    ///      Effectively ignores orders that have empty signatures or\n    ///      maker/taker asset amounts (returning 0).\n    /// @param orders Native limit orders to query.\n    /// @param orderSignatures Signatures for each respective order in `orders`.\n    /// @param exchange The V4 exchange.\n    /// @return orderFillableTakerAssetAmounts How much taker asset can be filled\n    ///         by each order in `orders`.\n    function getLimitOrderFillableTakerAssetAmounts(\n        IExchange.LimitOrder[] memory orders,\n        IExchange.Signature[] memory orderSignatures,\n        IExchange exchange\n    )\n        public\n        view\n        returns (uint256[] memory orderFillableTakerAssetAmounts)\n    {\n        orderFillableTakerAssetAmounts = new uint256[](orders.length);\n        for (uint256 i = 0; i != orders.length; i++) {\n            try\n                this.getLimitOrderFillableTakerAmount\n                    {gas: DEFAULT_CALL_GAS}\n                    (\n                       orders[i],\n                       orderSignatures[i],\n                       exchange\n                    )\n                returns (uint256 amount)\n            {\n                orderFillableTakerAssetAmounts[i] = amount;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                orderFillableTakerAssetAmounts[i] = 0;\n            }\n        }\n    }\n\n    /// @dev Queries the fillable taker asset amounts of native orders.\n    ///      Effectively ignores orders that have empty signatures or\n    /// @param orders Native orders to query.\n    /// @param orderSignatures Signatures for each respective order in `orders`.\n    /// @param exchange The V4 exchange.\n    /// @return orderFillableMakerAssetAmounts How much maker asset can be filled\n    ///         by each order in `orders`.\n    function getLimitOrderFillableMakerAssetAmounts(\n        IExchange.LimitOrder[] memory orders,\n        IExchange.Signature[] memory orderSignatures,\n        IExchange exchange\n    )\n        public\n        view\n        returns (uint256[] memory orderFillableMakerAssetAmounts)\n    {\n        orderFillableMakerAssetAmounts = getLimitOrderFillableTakerAssetAmounts(\n            orders,\n            orderSignatures,\n            exchange\n        );\n        // `orderFillableMakerAssetAmounts` now holds taker asset amounts, so\n        // convert them to maker asset amounts.\n        for (uint256 i = 0; i < orders.length; ++i) {\n            if (orderFillableMakerAssetAmounts[i] != 0) {\n                orderFillableMakerAssetAmounts[i] = LibMathV06.getPartialAmountCeil(\n                    orderFillableMakerAssetAmounts[i],\n                    orders[i].takerAmount,\n                    orders[i].makerAmount\n                );\n            }\n        }\n    }\n\n    /// @dev Get the fillable taker amount of an order, taking into account\n    ///      order state, maker fees, and maker balances.\n    function getLimitOrderFillableTakerAmount(\n        IExchange.LimitOrder memory order,\n        IExchange.Signature memory signature,\n        IExchange exchange\n    )\n        virtual\n        public\n        view\n        returns (uint256 fillableTakerAmount)\n    {\n        if (signature.signatureType == IExchange.SignatureType.ILLEGAL ||\n            signature.signatureType == IExchange.SignatureType.INVALID ||\n            order.makerAmount == 0 ||\n            order.takerAmount == 0)\n        {\n            return 0;\n        }\n\n        (\n            IExchange.OrderInfo memory orderInfo,\n            uint128 remainingFillableTakerAmount,\n            bool isSignatureValid\n        ) = exchange.getLimitOrderRelevantState(order, signature);\n\n        if (\n              orderInfo.status != IExchange.OrderStatus.FILLABLE ||\n              !isSignatureValid ||\n              order.makerToken == IERC20TokenV06(0)\n            ) {\n            return 0;\n        }\n\n        fillableTakerAmount = uint256(remainingFillableTakerAmount);\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/LibMathV06.sol": {
            "id": 38,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./LibSafeMathV06.sol\";\nimport \"./errors/LibRichErrorsV06.sol\";\nimport \"./errors/LibMathRichErrorsV06.sol\";\n\n\nlibrary LibMathV06 {\n\n    using LibSafeMathV06 for uint256;\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    ///      Reverts if rounding error is >= 0.1%\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded down.\n    function safeGetPartialAmountFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        if (isRoundingErrorFloor(\n                numerator,\n                denominator,\n                target\n        )) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.RoundingError(\n                numerator,\n                denominator,\n                target\n            ));\n        }\n\n        partialAmount = numerator.safeMul(target).safeDiv(denominator);\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    ///      Reverts if rounding error is >= 0.1%\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded up.\n    function safeGetPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        if (isRoundingErrorCeil(\n                numerator,\n                denominator,\n                target\n        )) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.RoundingError(\n                numerator,\n                denominator,\n                target\n            ));\n        }\n\n        // safeDiv computes `floor(a / b)`. We use the identity (a, b integer):\n        //       ceil(a / b) = floor((a + b - 1) / b)\n        // To implement `ceil(a / b)` using safeDiv.\n        partialAmount = numerator.safeMul(target)\n            .safeAdd(denominator.safeSub(1))\n            .safeDiv(denominator);\n\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded down.\n    function getPartialAmountFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        partialAmount = numerator.safeMul(target).safeDiv(denominator);\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded up.\n    function getPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        // safeDiv computes `floor(a / b)`. We use the identity (a, b integer):\n        //       ceil(a / b) = floor((a + b - 1) / b)\n        // To implement `ceil(a / b)` using safeDiv.\n        partialAmount = numerator.safeMul(target)\n            .safeAdd(denominator.safeSub(1))\n            .safeDiv(denominator);\n\n        return partialAmount;\n    }\n\n    /// @dev Checks if rounding error >= 0.1% when rounding down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to multiply with numerator/denominator.\n    /// @return isError Rounding error is present.\n    function isRoundingErrorFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bool isError)\n    {\n        if (denominator == 0) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.DivisionByZeroError());\n        }\n\n        // The absolute rounding error is the difference between the rounded\n        // value and the ideal value. The relative rounding error is the\n        // absolute rounding error divided by the absolute value of the\n        // ideal value. This is undefined when the ideal value is zero.\n        //\n        // The ideal value is `numerator * target / denominator`.\n        // Let's call `numerator * target % denominator` the remainder.\n        // The absolute error is `remainder / denominator`.\n        //\n        // When the ideal value is zero, we require the absolute error to\n        // be zero. Fortunately, this is always the case. The ideal value is\n        // zero iff `numerator == 0` and/or `target == 0`. In this case the\n        // remainder and absolute error are also zero.\n        if (target == 0 || numerator == 0) {\n            return false;\n        }\n\n        // Otherwise, we want the relative rounding error to be strictly\n        // less than 0.1%.\n        // The relative error is `remainder / (numerator * target)`.\n        // We want the relative error less than 1 / 1000:\n        //        remainder / (numerator * denominator)  <  1 / 1000\n        // or equivalently:\n        //        1000 * remainder  <  numerator * target\n        // so we have a rounding error iff:\n        //        1000 * remainder  >=  numerator * target\n        uint256 remainder = mulmod(\n            target,\n            numerator,\n            denominator\n        );\n        isError = remainder.safeMul(1000) >= numerator.safeMul(target);\n        return isError;\n    }\n\n    /// @dev Checks if rounding error >= 0.1% when rounding up.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to multiply with numerator/denominator.\n    /// @return isError Rounding error is present.\n    function isRoundingErrorCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bool isError)\n    {\n        if (denominator == 0) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.DivisionByZeroError());\n        }\n\n        // See the comments in `isRoundingError`.\n        if (target == 0 || numerator == 0) {\n            // When either is zero, the ideal value and rounded value are zero\n            // and there is no rounding error. (Although the relative error\n            // is undefined.)\n            return false;\n        }\n        // Compute remainder as before\n        uint256 remainder = mulmod(\n            target,\n            numerator,\n            denominator\n        );\n        remainder = denominator.safeSub(remainder) % denominator;\n        isError = remainder.safeMul(1000) >= numerator.safeMul(target);\n        return isError;\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/errors/LibMathRichErrorsV06.sol": {
            "id": 41,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibMathRichErrorsV06 {\n\n    // bytes4(keccak256(\"DivisionByZeroError()\"))\n    bytes internal constant DIVISION_BY_ZERO_ERROR =\n        hex\"a791837c\";\n\n    // bytes4(keccak256(\"RoundingError(uint256,uint256,uint256)\"))\n    bytes4 internal constant ROUNDING_ERROR_SELECTOR =\n        0x339f3de2;\n\n    // solhint-disable func-name-mixedcase\n    function DivisionByZeroError()\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return DIVISION_BY_ZERO_ERROR;\n    }\n\n    function RoundingError(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            ROUNDING_ERROR_SELECTOR,\n            numerator,\n            denominator,\n            target\n        );\n    }\n}\n"
        },
        "./ShellSampler.sol": {
            "id": 20,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinShell.sol\";\nimport \"./SwapRevertSampler.sol\";\n\ncontract ShellSampler is\n    MixinShell,\n    SwapRevertSampler\n{\n\n    struct ShellInfo {\n        address poolAddress;\n    }\n\n    function sampleSwapFromShell(\n        address sellToken,\n        address buyToken,\n        bytes memory bridgeData,\n        uint256 takerTokenAmount\n    )\n        external\n        returns (uint256)\n    {\n        return _tradeShell(\n            IERC20TokenV06(sellToken),\n            IERC20TokenV06(buyToken),\n            takerTokenAmount,\n            bridgeData\n        );\n    }\n\n    /// @dev Sample sell quotes from the Shell pool contract\n    /// @param pool Address of the Shell pool contract\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return gasUsed gas consumed in each sample sell\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromShell(\n        address pool,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        returns (uint256[] memory gasUsed, uint256[] memory makerTokenAmounts)\n    {\n        (gasUsed, makerTokenAmounts) = _sampleSwapQuotesRevert(\n            SwapRevertSamplerQuoteOpts({\n                sellToken: takerToken,\n                buyToken: makerToken,\n                bridgeData: abi.encode(pool),\n                getSwapQuoteCallback: this.sampleSwapFromShell\n            }),\n            takerTokenAmounts\n        );\n    }\n\n    /// @dev Sample buy quotes from Shell pool contract\n    /// @param pool Address of the Shell pool contract\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return gasUsed gas consumed in each sample sell\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromShell(\n        address pool,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        returns (uint256[] memory gasUsed, uint256[] memory takerTokenAmounts)\n    {\n        (gasUsed, takerTokenAmounts) = _sampleSwapApproximateBuys(\n            SwapRevertSamplerBuyQuoteOpts({\n                sellToken: takerToken,\n                buyToken: makerToken,\n                sellTokenData: abi.encode(pool),\n                buyTokenData: abi.encode(pool),\n                getSwapQuoteCallback: this.sampleSwapFromShell\n            }),\n            makerTokenAmounts\n        );\n    }\n}\n"
        },
        "@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinShell.sol": {
            "id": 57,
            "content": "// SPDX-License-Identifier: Apache-2.0\n\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\n\ninterface IShell {\n\n    function originSwap(\n        IERC20TokenV06 from,\n        IERC20TokenV06 to,\n        uint256 fromAmount,\n        uint256 minTargetAmount,\n        uint256 deadline\n    )\n        external\n        returns (uint256 toAmount);\n}\n\ncontract MixinShell {\n\n    using LibERC20TokenV06 for IERC20TokenV06;\n\n    function _tradeShell(\n        IERC20TokenV06 sellToken,\n        IERC20TokenV06 buyToken,\n        uint256 sellAmount,\n        bytes memory bridgeData\n    )\n        internal\n        returns (uint256 boughtAmount)\n    {\n        IShell pool = abi.decode(bridgeData, (IShell));\n\n        // Grant the Shell contract an allowance to sell the first token.\n        IERC20TokenV06(sellToken).approveIfBelow(\n            address(pool),\n            sellAmount\n        );\n\n        boughtAmount = pool.originSwap(\n            sellToken,\n            buyToken,\n             // Sell all tokens we hold.\n            sellAmount,\n             // Minimum buy amount.\n            1,\n            // deadline\n            block.timestamp + 1\n        );\n        return boughtAmount;\n    }\n}\n"
        },
        "./TwoHopSampler.sol": {
            "id": 22,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol\";\n\n\ncontract TwoHopSampler {\n    using LibBytesV06 for bytes;\n\n    struct HopInfo {\n        uint256 sourceIndex;\n        bytes returnData;\n    }\n\n    function sampleTwoHopSell(\n        bytes[] memory firstHopCalls,\n        bytes[] memory secondHopCalls,\n        uint256 sellAmount\n    )\n        public\n        returns (\n            HopInfo memory firstHop,\n            HopInfo memory secondHop,\n            uint256 intermediateAssetAmount,\n            uint256 buyAmount\n        )\n    {\n        intermediateAssetAmount = 0;\n        for (uint256 i = 0; i != firstHopCalls.length; ++i) {\n            firstHopCalls[i].writeUint256(firstHopCalls[i].length - 32, sellAmount);\n            (bool didSucceed, bytes memory returnData) = address(this).call(firstHopCalls[i]);\n            if (didSucceed) {\n                uint256 amount = returnData.readUint256(returnData.length - 32);\n                if (amount > intermediateAssetAmount) {\n                    intermediateAssetAmount = amount;\n                    firstHop.sourceIndex = i;\n                    firstHop.returnData = returnData;\n                }\n            }\n        }\n        if (intermediateAssetAmount == 0) {\n            return (firstHop, secondHop, intermediateAssetAmount, buyAmount);\n        }\n        for (uint256 j = 0; j != secondHopCalls.length; ++j) {\n            secondHopCalls[j].writeUint256(secondHopCalls[j].length - 32, intermediateAssetAmount);\n            (bool didSucceed, bytes memory returnData) = address(this).call(secondHopCalls[j]);\n            if (didSucceed) {\n                uint256 amount = returnData.readUint256(returnData.length - 32);\n                if (amount > buyAmount) {\n                    buyAmount = amount;\n                    secondHop.sourceIndex = j;\n                    secondHop.returnData = returnData;\n                }\n            }\n        }\n    }\n\n    function sampleTwoHopBuy(\n        bytes[] memory firstHopCalls,\n        bytes[] memory secondHopCalls,\n        uint256 buyAmount\n    )\n        public\n        returns (\n            HopInfo memory firstHop,\n            HopInfo memory secondHop,\n            uint256 sellAmount\n        )\n    {\n        sellAmount = uint256(-1);\n        uint256 intermediateAssetAmount = uint256(-1);\n        for (uint256 j = 0; j != secondHopCalls.length; ++j) {\n            secondHopCalls[j].writeUint256(secondHopCalls[j].length - 32, buyAmount);\n            (bool didSucceed, bytes memory returnData) = address(this).call(secondHopCalls[j]);\n            if (didSucceed) {\n                uint256 amount = returnData.readUint256(returnData.length - 32);\n                if (\n                    amount > 0 &&\n                    amount < intermediateAssetAmount\n                ) {\n                    intermediateAssetAmount = amount;\n                    secondHop.sourceIndex = j;\n                    secondHop.returnData = returnData;\n                }\n            }\n        }\n        if (intermediateAssetAmount == uint256(-1)) {\n            return (firstHop, secondHop, sellAmount);\n        }\n        for (uint256 i = 0; i != firstHopCalls.length; ++i) {\n            firstHopCalls[i].writeUint256(firstHopCalls[i].length - 32, intermediateAssetAmount);\n            (bool didSucceed, bytes memory returnData) = address(this).call(firstHopCalls[i]);\n            if (didSucceed) {\n                uint256 amount = returnData.readUint256(returnData.length - 32);\n                if (\n                    amount > 0 &&\n                    amount < sellAmount\n                ) {\n                    sellAmount = amount;\n                    firstHop.sourceIndex = i;\n                    firstHop.returnData = returnData;\n                }\n            }\n        }\n    }\n}\n"
        },
        "./UniswapSampler.sol": {
            "id": 23,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinUniswap.sol\";\nimport \"./SwapRevertSampler.sol\";\n\ncontract UniswapSampler is\n    MixinUniswap,\n    SwapRevertSampler\n{\n\n    constructor(IEtherTokenV06 weth)\n        public\n        MixinUniswap(weth)\n    { }\n\n    function sampleSwapFromUniswap(\n        address sellToken,\n        address buyToken,\n        bytes memory bridgeData,\n        uint256 takerTokenAmount\n    )\n        external\n        returns (uint256)\n    {\n        return _tradeUniswapInternal(\n            IEtherTokenV06(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2),\n            IERC20TokenV06(sellToken),\n            IERC20TokenV06(buyToken),\n            takerTokenAmount,\n            bridgeData\n        );\n    }\n\n    /// @dev Sample sell quotes from Uniswap.\n    /// @param router Address of the Uniswap Router\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return gasUsed gas consumed in each sample sell\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromUniswap(\n        address router,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        returns (uint256[] memory gasUsed, uint256[] memory makerTokenAmounts)\n    {\n        (gasUsed, makerTokenAmounts) = _sampleSwapQuotesRevert(\n            SwapRevertSamplerQuoteOpts({\n                sellToken: takerToken,\n                buyToken: makerToken,\n                bridgeData: abi.encode(router),\n                getSwapQuoteCallback: this.sampleSwapFromUniswap\n            }),\n            takerTokenAmounts\n        );\n    }\n\n    /// @dev Sample buy quotes from Uniswap.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token sell amount for each sample.\n    /// @return gasUsed gas consumed in each sample sell\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromUniswap(\n        address router,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        returns (uint256[] memory gasUsed, uint256[] memory takerTokenAmounts)\n    {\n        (gasUsed, takerTokenAmounts) = _sampleSwapApproximateBuys(\n            SwapRevertSamplerBuyQuoteOpts({\n                sellToken: takerToken,\n                buyToken: makerToken,\n                sellTokenData: abi.encode(router),\n                buyTokenData: abi.encode(router),\n                getSwapQuoteCallback: this.sampleSwapFromUniswap\n            }),\n            makerTokenAmounts\n        );\n    }\n\n}\n"
        },
        "@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinUniswap.sol": {
            "id": 58,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol\";\nimport \"../IBridgeAdapter.sol\";\n\ninterface IUniswapExchangeFactory {\n\n    /// @dev Get the exchange for a token.\n    /// @param token The token contract.\n    function getExchange(IERC20TokenV06 token)\n        external\n        view\n        returns (IUniswapExchange exchange);\n}\n\ninterface IUniswapExchange {\n\n    /// @dev Buys at least `minTokensBought` tokens with ETH and transfer them\n    ///      to `recipient`.\n    /// @param minTokensBought The minimum number of tokens to buy.\n    /// @param deadline Time when this order expires.\n    /// @param recipient Who to transfer the tokens to.\n    /// @return tokensBought Amount of tokens bought.\n    function ethToTokenTransferInput(\n        uint256 minTokensBought,\n        uint256 deadline,\n        address recipient\n    )\n        external\n        payable\n        returns (uint256 tokensBought);\n\n    /// @dev Buys at least `minEthBought` ETH with tokens.\n    /// @param tokensSold Amount of tokens to sell.\n    /// @param minEthBought The minimum amount of ETH to buy.\n    /// @param deadline Time when this order expires.\n    /// @return ethBought Amount of tokens bought.\n    function tokenToEthSwapInput(\n        uint256 tokensSold,\n        uint256 minEthBought,\n        uint256 deadline\n    )\n        external\n        returns (uint256 ethBought);\n\n    /// @dev Buys at least `minTokensBought` tokens with the exchange token\n    ///      and transfer them to `recipient`.\n    /// @param tokensSold Amount of tokens to sell.\n    /// @param minTokensBought The minimum number of tokens to buy.\n    /// @param minEthBought The minimum amount of intermediate ETH to buy.\n    /// @param deadline Time when this order expires.\n    /// @param recipient Who to transfer the tokens to.\n    /// @param buyToken The token being bought.\n    /// @return tokensBought Amount of tokens bought.\n    function tokenToTokenTransferInput(\n        uint256 tokensSold,\n        uint256 minTokensBought,\n        uint256 minEthBought,\n        uint256 deadline,\n        address recipient,\n        IERC20TokenV06 buyToken\n    )\n        external\n        returns (uint256 tokensBought);\n\n    /// @dev Buys at least `minTokensBought` tokens with the exchange token.\n    /// @param tokensSold Amount of tokens to sell.\n    /// @param minTokensBought The minimum number of tokens to buy.\n    /// @param minEthBought The minimum amount of intermediate ETH to buy.\n    /// @param deadline Time when this order expires.\n    /// @param buyToken The token being bought.\n    /// @return tokensBought Amount of tokens bought.\n    function tokenToTokenSwapInput(\n        uint256 tokensSold,\n        uint256 minTokensBought,\n        uint256 minEthBought,\n        uint256 deadline,\n        IERC20TokenV06 buyToken\n    )\n        external\n        returns (uint256 tokensBought);\n}\n\ncontract MixinUniswap {\n\n    using LibERC20TokenV06 for IERC20TokenV06;\n\n    /// @dev Mainnet address of the WETH contract.\n    IEtherTokenV06 private immutable WETH;\n\n    constructor(IEtherTokenV06 weth)\n        public\n    {\n        WETH = weth;\n    }\n\n    function _tradeUniswap(\n        IERC20TokenV06 sellToken,\n        IERC20TokenV06 buyToken,\n        uint256 sellAmount,\n        bytes memory bridgeData\n    )\n        internal\n        returns (uint256 boughtAmount)\n    {\n        _tradeUniswapInternal(WETH, sellToken, buyToken, sellAmount, bridgeData);\n    }\n\n    function _tradeUniswapInternal(\n        IEtherTokenV06 weth,\n        IERC20TokenV06 sellToken,\n        IERC20TokenV06 buyToken,\n        uint256 sellAmount,\n        bytes memory bridgeData\n    )\n        internal\n        returns (uint256 boughtAmount)\n    {\n        IUniswapExchangeFactory exchangeFactory =\n            abi.decode(bridgeData, (IUniswapExchangeFactory));\n\n        // Get the exchange for the token pair.\n        IUniswapExchange exchange = _getUniswapExchangeForTokenPair(\n            weth,\n            exchangeFactory,\n            sellToken,\n            buyToken\n        );\n\n        // Convert from WETH to a token.\n        if (sellToken == weth) {\n            // Unwrap the WETH.\n            weth.withdraw(sellAmount);\n            // Buy as much of `buyToken` token with ETH as possible\n            boughtAmount = exchange.ethToTokenTransferInput{ value: sellAmount }(\n                // Minimum buy amount.\n                1,\n                // Expires after this block.\n                block.timestamp,\n                // Recipient is `this`.\n                address(this)\n            );\n\n        // Convert from a token to WETH.\n        } else if (buyToken == weth) {\n            // Grant the exchange an allowance.\n            sellToken.approveIfBelow(\n                address(exchange),\n                sellAmount\n            );\n            // Buy as much ETH with `sellToken` token as possible.\n            boughtAmount = exchange.tokenToEthSwapInput(\n                // Sell all tokens we hold.\n                sellAmount,\n                // Minimum buy amount.\n                1,\n                // Expires after this block.\n                block.timestamp\n            );\n            // Wrap the ETH.\n            weth.deposit{ value: boughtAmount }();\n        // Convert from one token to another.\n        } else {\n            // Grant the exchange an allowance.\n            sellToken.approveIfBelow(\n                address(exchange),\n                sellAmount\n            );\n            // Buy as much `buyToken` token with `sellToken` token\n            boughtAmount = exchange.tokenToTokenSwapInput(\n                // Sell all tokens we hold.\n                sellAmount,\n                // Minimum buy amount.\n                1,\n                // Must buy at least 1 intermediate wei of ETH.\n                1,\n                // Expires after this block.\n                block.timestamp,\n                // Convert to `buyToken`.\n                buyToken\n            );\n        }\n\n        return boughtAmount;\n    }\n\n    /// @dev Retrieves the uniswap exchange for a given token pair.\n    ///      In the case of a WETH-token exchange, this will be the non-WETH token.\n    ///      In th ecase of a token-token exchange, this will be the first token.\n    /// @param exchangeFactory The exchange factory.\n    /// @param sellToken The address of the token we are converting from.\n    /// @param buyToken The address of the token we are converting to.\n    /// @return exchange The uniswap exchange.\n    function _getUniswapExchangeForTokenPair(\n        IEtherTokenV06 weth,\n        IUniswapExchangeFactory exchangeFactory,\n        IERC20TokenV06 sellToken,\n        IERC20TokenV06 buyToken\n    )\n        private\n        view\n        returns (IUniswapExchange exchange)\n    {\n        // Whichever isn't WETH is the exchange token.\n        exchange = sellToken == weth\n            ? exchangeFactory.getExchange(buyToken)\n            : exchangeFactory.getExchange(sellToken);\n        require(address(exchange) != address(0), \"MixinUniswap/NO_EXCHANGE\");\n    }\n}\n"
        },
        "./UniswapV2Sampler.sol": {
            "id": 24,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IUniswapV2Router01.sol\";\nimport \"@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinUniswapV2.sol\";\nimport \"./SwapRevertSampler.sol\";\n\n\ncontract UniswapV2Sampler is\n    MixinUniswapV2,\n    SwapRevertSampler\n{\n\n    function sampleSwapFromUniswapV2(\n        address sellToken,\n        address buyToken,\n        bytes memory bridgeData,\n        uint256 takerTokenAmount\n    )\n        external\n        returns (uint256)\n    {\n        return _tradeUniswapV2(\n            IERC20TokenV06(buyToken),\n            takerTokenAmount,\n            bridgeData\n        );\n    }\n\n    /// @dev Sample sell quotes from UniswapV2.\n    /// @param router Router to look up tokens and amounts\n    /// @param path Token route. Should be takerToken -> makerToken\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return gasUsed gas consumed for each sample amount\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromUniswapV2(\n        address router,\n        address[] memory path,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        returns (uint256[] memory gasUsed, uint256[] memory makerTokenAmounts)\n    {\n        (gasUsed, makerTokenAmounts) = _sampleSwapQuotesRevert(\n            SwapRevertSamplerQuoteOpts({\n                sellToken: path[0],\n                buyToken: path[path.length - 1],\n                bridgeData: abi.encode(router, path),\n                getSwapQuoteCallback: this.sampleSwapFromUniswapV2\n            }),\n            takerTokenAmounts\n        );\n    }\n\n    /// @dev Sample buy quotes from UniswapV2.\n    /// @param router Router to look up tokens and amounts\n    /// @param path Token route. Should be takerToken -> makerToken.\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return gasUsed gas consumed for each sample amount\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromUniswapV2(\n        address router,\n        address[] memory path,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        returns (uint256[] memory gasUsed, uint256[] memory takerTokenAmounts)\n    {\n        address[] memory reversedPath = new address[](path.length);\n        for (uint256 i = 0; i < path.length; ++i) {\n            reversedPath[i] = path[path.length - i - 1];\n        }\n\n        (gasUsed, takerTokenAmounts) = _sampleSwapApproximateBuys(\n            SwapRevertSamplerBuyQuoteOpts({\n                sellToken: path[0],\n                buyToken: path[path.length - 1],\n                sellTokenData: abi.encode(router, path),\n                buyTokenData: abi.encode(router, reversedPath),\n                getSwapQuoteCallback: this.sampleSwapFromUniswapV2\n            }),\n            makerTokenAmounts\n        );\n    }\n}\n"
        },
        "./interfaces/IUniswapV2Router01.sol": {
            "id": 30,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface IUniswapV2Router01 {\n\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts);\n\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts);\n}\n"
        },
        "@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinUniswapV2.sol": {
            "id": 59,
            "content": "// SPDX-License-Identifier: Apache-2.0\n\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"../IBridgeAdapter.sol\";\n\n/*\n    UniswapV2\n*/\ninterface IUniswapV2Router02 {\n\n    /// @dev Swaps an exact amount of input tokens for as many output tokens as possible, along the route determined by the path.\n    ///      The first element of path is the input token, the last is the output token, and any intermediate elements represent\n    ///      intermediate pairs to trade through (if, for example, a direct pair does not exist).\n    /// @param amountIn The amount of input tokens to send.\n    /// @param amountOutMin The minimum amount of output tokens that must be received for the transaction not to revert.\n    /// @param path An array of token addresses. path.length must be >= 2. Pools for each consecutive pair of addresses must exist and have liquidity.\n    /// @param to Recipient of the output tokens.\n    /// @param deadline Unix timestamp after which the transaction will revert.\n    /// @return amounts The input token amount and all subsequent output token amounts.\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        IERC20TokenV06[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n}\n\ncontract MixinUniswapV2 {\n\n    using LibERC20TokenV06 for IERC20TokenV06;\n\n    function _tradeUniswapV2(\n        IERC20TokenV06 buyToken,\n        uint256 sellAmount,\n        bytes memory bridgeData\n    )\n        internal\n        returns (uint256 boughtAmount)\n    {\n        IUniswapV2Router02 router;\n        IERC20TokenV06[] memory path;\n        {\n            address[] memory _path;\n            (router, _path) = abi.decode(bridgeData, (IUniswapV2Router02, address[]));\n            // To get around `abi.decode()` not supporting interface array types.\n            assembly { path := _path }\n        }\n\n        require(path.length >= 2, \"MixinUniswapV2/PATH_LENGTH_MUST_BE_AT_LEAST_TWO\");\n        require(\n            path[path.length - 1] == buyToken,\n            \"MixinUniswapV2/LAST_ELEMENT_OF_PATH_MUST_MATCH_OUTPUT_TOKEN\"\n        );\n        // Grant the Uniswap router an allowance to sell the first token.\n        path[0].approveIfBelow(address(router), sellAmount);\n\n        uint[] memory amounts = router.swapExactTokensForTokens(\n             // Sell all tokens we hold.\n            sellAmount,\n             // Minimum buy amount.\n            1,\n            // Convert to `buyToken` along this path.\n            path,\n            // Recipient is `this`.\n            address(this),\n            // Expires after this block.\n            block.timestamp\n        );\n        return amounts[amounts.length-1];\n    }\n}\n"
        },
        "./UniswapV3Sampler.sol": {
            "id": 25,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\n\nimport \"@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinUniswapV3.sol\";\nimport \"./SwapRevertSampler.sol\";\n\ninterface IUniswapV3Quoter {\n    function factory()\n        external\n        view\n        returns (IUniswapV3Factory factory);\n}\n\ninterface IUniswapV3Factory {\n    function getPool(IERC20TokenV06 a, IERC20TokenV06 b, uint24 fee)\n        external\n        view\n        returns (IUniswapV3Pool pool);\n}\n\ninterface IUniswapV3Pool {\n    function token0() external view returns (IERC20TokenV06);\n    function token1() external view returns (IERC20TokenV06);\n    function fee() external view returns (uint24);\n}\n\ncontract UniswapV3Sampler is\n    MixinUniswapV3,\n    SwapRevertSampler\n{\n    using LibRichErrorsV06 for bytes;\n\n    function sampleSwapFromUniswapV3(\n        address sellToken,\n        address buyToken,\n        bytes memory bridgeData,\n        uint256 takerTokenAmount\n    )\n        external\n        returns (uint256)\n    {\n        return _tradeUniswapV3(\n            IERC20TokenV06(sellToken),\n            takerTokenAmount,\n            bridgeData\n        );\n    }\n\n    /// @dev Sample sell quotes from UniswapV3.\n    /// @param quoter UniswapV3 Quoter contract.\n    /// @param router UniswapV3 Router contract.\n    /// @param path Token route. Should be takerToken -> makerToken\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return uniswapPaths The encoded uniswap path for each sample.\n    /// @return gasUsed gas consumed in each sample sell\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromUniswapV3(\n        IUniswapV3Quoter quoter,\n        address router,\n        IERC20TokenV06[] memory path,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        returns (\n            bytes[] memory uniswapPaths,\n            uint256[] memory gasUsed,\n            uint256[] memory makerTokenAmounts\n        )\n    {\n        IUniswapV3Pool[][] memory poolPaths =\n            _getValidPoolPaths(quoter.factory(), path, 0);\n\n        makerTokenAmounts = new uint256[](takerTokenAmounts.length);\n        gasUsed = new uint256[](takerTokenAmounts.length);\n        uniswapPaths = new bytes[](takerTokenAmounts.length);\n\n        for (uint256 i = 0; i < poolPaths.length; ++i) {\n            bytes memory _uniswapPath = _toUniswapPath(path, poolPaths[i]);\n            (\n                uint256[] memory _gasUsed,\n                uint256[] memory _makerTokenAmounts\n            ) = _sampleSwapQuotesRevert(\n                SwapRevertSamplerQuoteOpts({\n                    sellToken: address(path[0]),\n                    buyToken: address(path[path.length - 1]),\n                    bridgeData: abi.encode(router, _uniswapPath),\n                    getSwapQuoteCallback: this.sampleSwapFromUniswapV3\n                }),\n                takerTokenAmounts\n            );\n            for (uint256 j = 0; j < _makerTokenAmounts.length; ++j) {\n                // Break early if we can't complete the sells.\n                if (_makerTokenAmounts[j] == 0) {\n                    break;\n                }\n                // If this is better than what we have found, prefer it\n                if (makerTokenAmounts[j] <= _makerTokenAmounts[j]) {\n                    makerTokenAmounts[j] = _makerTokenAmounts[j];\n                    gasUsed[j] = _gasUsed[j];\n                    uniswapPaths[j] = _uniswapPath;\n                }\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from UniswapV3.\n    /// @param quoter UniswapV3 Quoter contract.\n    /// @param router UniswapV3 Router contract.\n    /// @param path Token route. Should be takerToken -> makerToken.\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return uniswapPaths The encoded uniswap path for each sample.\n    /// @return gasUsed gas consumed in each sample sell\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromUniswapV3(\n        IUniswapV3Quoter quoter,\n        address router,\n        IERC20TokenV06[] memory path,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        returns (\n            bytes[] memory uniswapPaths,\n            uint256[] memory gasUsed,\n            uint256[] memory takerTokenAmounts\n        )\n    {\n        IUniswapV3Pool[][] memory poolPaths =\n            _getValidPoolPaths(quoter.factory(), path, 0);\n        IERC20TokenV06[] memory reversedPath = _reverseTokenPath(path);\n\n        takerTokenAmounts = new uint256[](makerTokenAmounts.length);\n        gasUsed = new uint256[](makerTokenAmounts.length);\n        uniswapPaths = new bytes[](makerTokenAmounts.length);\n\n        for (uint256 i = 0; i < poolPaths.length; ++i) {\n            (\n                uint256[] memory _gasUsed,\n                uint256[] memory _takerTokenAmounts\n            ) = _sampleSwapApproximateBuys(\n                SwapRevertSamplerBuyQuoteOpts({\n                    sellToken: address(path[0]),\n                    buyToken: address(path[path.length - 1]),\n                    sellTokenData: abi.encode(router, _toUniswapPath(path, poolPaths[i])),\n                    buyTokenData: abi.encode(\n                        router,\n                        _toUniswapPath(\n                            reversedPath,\n                            _reversePoolPath(poolPaths[i])\n                        )\n                    ),\n                    getSwapQuoteCallback: this.sampleSwapFromUniswapV3\n                }),\n                makerTokenAmounts\n            );\n\n            for (uint256 j = 0; j < _takerTokenAmounts.length; ++j) {\n                // Break early if we can't complete the buys.\n                if (_takerTokenAmounts[j] == 0) {\n                    break;\n                }\n                // We can go from high to low here\n                if (takerTokenAmounts[j] == 0 || takerTokenAmounts[j] >= _takerTokenAmounts[j]) {\n                    takerTokenAmounts[j] = _takerTokenAmounts[j];\n                    gasUsed[j] = _gasUsed[j];\n                    // But the output path should still be encoded for sells.\n                    uniswapPaths[j] = _toUniswapPath(path, poolPaths[i]);\n                }\n            }\n        }\n    }\n\n    function _getValidPoolPaths(\n        IUniswapV3Factory factory,\n        IERC20TokenV06[] memory tokenPath,\n        uint256 startIndex\n    )\n        private\n        view\n        returns (IUniswapV3Pool[][] memory poolPaths)\n    {\n        require(\n            tokenPath.length - startIndex >= 2,\n            \"UniswapV3Sampler/tokenPath too short\"\n        );\n        uint24[3] memory validPoolFees = [\n            // The launch pool fees. Could get hairier if they add more.\n            uint24(0.0005e6),\n            uint24(0.003e6),\n            uint24(0.01e6)\n        ];\n        IUniswapV3Pool[] memory validPools =\n            new IUniswapV3Pool[](validPoolFees.length);\n        uint256 numValidPools = 0;\n        {\n            IERC20TokenV06 inputToken = tokenPath[startIndex];\n            IERC20TokenV06 outputToken = tokenPath[startIndex + 1];\n            for (uint256 i = 0; i < validPoolFees.length; ++i) {\n                IUniswapV3Pool pool =\n                factory.getPool(inputToken, outputToken, validPoolFees[i]);\n                if (_isValidPool(pool)) {\n                    validPools[numValidPools++] = pool;\n                }\n            }\n        }\n        if (numValidPools == 0) {\n            // No valid pools for this hop.\n            return poolPaths;\n        }\n        if (startIndex + 2 == tokenPath.length) {\n            // End of path.\n            poolPaths = new IUniswapV3Pool[][](numValidPools);\n            for (uint256 i = 0; i < numValidPools; ++i) {\n                poolPaths[i] = new IUniswapV3Pool[](1);\n                poolPaths[i][0] = validPools[i];\n            }\n            return poolPaths;\n        }\n        // Get paths for subsequent hops.\n        IUniswapV3Pool[][] memory subsequentPoolPaths =\n            _getValidPoolPaths(factory, tokenPath, startIndex + 1);\n        if (subsequentPoolPaths.length == 0) {\n            // Could not complete the path.\n            return poolPaths;\n        }\n        // Combine our pools with the next hop paths.\n        poolPaths = new IUniswapV3Pool[][](\n            numValidPools * subsequentPoolPaths.length\n        );\n        for (uint256 i = 0; i < numValidPools; ++i) {\n            for (uint256 j = 0; j < subsequentPoolPaths.length; ++j) {\n                uint256 o = i * subsequentPoolPaths.length + j;\n                // Prepend pool to the subsequent path.\n                poolPaths[o] =\n                    new IUniswapV3Pool[](1 + subsequentPoolPaths[j].length);\n                poolPaths[o][0] = validPools[i];\n                for (uint256 k = 0; k < subsequentPoolPaths[j].length; ++k) {\n                    poolPaths[o][1 + k] = subsequentPoolPaths[j][k];\n                }\n            }\n        }\n        return poolPaths;\n    }\n\n    function _reverseTokenPath(IERC20TokenV06[] memory tokenPath)\n        private\n        returns (IERC20TokenV06[] memory reversed)\n    {\n        reversed = new IERC20TokenV06[](tokenPath.length);\n        for (uint256 i = 0; i < tokenPath.length; ++i) {\n            reversed[i] = tokenPath[tokenPath.length - i - 1];\n        }\n    }\n\n    function _reversePoolPath(IUniswapV3Pool[] memory poolPath)\n        private\n        returns (IUniswapV3Pool[] memory reversed)\n    {\n        reversed = new IUniswapV3Pool[](poolPath.length);\n        for (uint256 i = 0; i < poolPath.length; ++i) {\n            reversed[i] = poolPath[poolPath.length - i - 1];\n        }\n    }\n\n    function _isValidPool(IUniswapV3Pool pool)\n        private\n        view\n        returns (bool isValid)\n    {\n        // Check if it has been deployed.\n        {\n            uint256 codeSize;\n            assembly {\n                codeSize := extcodesize(pool)\n            }\n            if (codeSize == 0) {\n                return false;\n            }\n        }\n        // // Must have a balance of both tokens.\n        if (pool.token0().balanceOf(address(pool)) == 0) {\n            return false;\n        }\n        if (pool.token1().balanceOf(address(pool)) == 0) {\n            return false;\n        }\n        return true;\n    }\n\n    function _toUniswapPath(\n        IERC20TokenV06[] memory tokenPath,\n        IUniswapV3Pool[] memory poolPath\n    )\n        private\n        view\n        returns (bytes memory uniswapPath)\n    {\n        require(\n            tokenPath.length >= 2 && tokenPath.length == poolPath.length + 1,\n            \"UniswapV3Sampler/invalid path lengths\"\n        );\n        // Uniswap paths are tightly packed as:\n        // [token0, token0token1PairFee, token1, token1Token2PairFee, token2, ...]\n        uniswapPath = new bytes(tokenPath.length * 20 + poolPath.length * 3);\n        uint256 o;\n        assembly { o := add(uniswapPath, 32) }\n        for (uint256 i = 0; i < tokenPath.length; ++i) {\n            if (i > 0) {\n                uint24 poolFee = poolPath[i - 1].fee();\n                assembly {\n                    mstore(o, shl(232, poolFee))\n                    o := add(o, 3)\n                }\n            }\n            IERC20TokenV06 token = tokenPath[i];\n            assembly {\n                mstore(o, shl(96, token))\n                o := add(o, 20)\n            }\n        }\n    }\n}\n"
        },
        "@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinUniswapV3.sol": {
            "id": 60,
            "content": "// SPDX-License-Identifier: Apache-2.0\n\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"../IBridgeAdapter.sol\";\n\ninterface IUniswapV3Router {\n\n    struct ExactInputParams {\n        bytes path;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n    }\n\n    function exactInput(ExactInputParams memory params)\n        external\n        payable\n        returns (uint256 amountOut);\n}\n\ncontract MixinUniswapV3 {\n\n    using LibERC20TokenV06 for IERC20TokenV06;\n\n    function _tradeUniswapV3(\n        IERC20TokenV06 sellToken,\n        uint256 sellAmount,\n        bytes memory bridgeData\n    )\n        internal\n        returns (uint256 boughtAmount)\n    {\n        (IUniswapV3Router router, bytes memory path) =\n            abi.decode(bridgeData, (IUniswapV3Router, bytes));\n\n        // Grant the Uniswap router an allowance to sell the sell token.\n        sellToken.approveIfBelow(address(router), sellAmount);\n\n        boughtAmount = router.exactInput(IUniswapV3Router.ExactInputParams({\n            path: path,\n            recipient: address(this),\n            deadline: block.timestamp,\n            amountIn: sellAmount,\n            amountOutMinimum: 1\n        }));\n    }\n}\n"
        },
        "./UtilitySampler.sol": {
            "id": 26,
            "content": "\n// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\n\ncontract UtilitySampler {\n\n    using LibERC20TokenV06 for IERC20TokenV06;\n\n    IERC20TokenV06 private immutable UTILITY_ETH_ADDRESS = IERC20TokenV06(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\n\n    function getTokenDecimals(IERC20TokenV06[] memory tokens)\n        public\n        view\n        returns (uint256[] memory decimals)\n    {\n        decimals = new uint256[](tokens.length);\n        for (uint256 i = 0; i != tokens.length; i++) {\n            decimals[i] = tokens[i] == UTILITY_ETH_ADDRESS\n                ? 18\n                : tokens[i].compatDecimals();\n        }\n    }\n\n    function getBalanceOf(IERC20TokenV06[] memory tokens, address account)\n        public\n        view\n        returns (uint256[] memory balances)\n    {\n        balances = new uint256[](tokens.length);\n        for (uint256 i = 0; i != tokens.length; i++) {\n            balances[i] = tokens[i] == UTILITY_ETH_ADDRESS\n                ? account.balance\n                : tokens[i].compatBalanceOf(account);\n        }\n    }\n\n    function getAllowanceOf(IERC20TokenV06[] memory tokens, address account, address spender)\n        public\n        view\n        returns (uint256[] memory allowances)\n    {\n        allowances = new uint256[](tokens.length);\n        for (uint256 i = 0; i != tokens.length; i++) {\n            allowances[i] = tokens[i] == UTILITY_ETH_ADDRESS\n                ? 0\n                : tokens[i].compatAllowance(account, spender);\n        }\n    }\n\n    function isContract(address account)\n        public\n        view\n        returns (bool)\n    {\n        uint256 size;\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    function getCode(address addr)\n        public\n        view\n        returns (bytes memory code)\n    {\n        assembly {\n            // retrieve the size of the code, this needs assembly\n            let size := extcodesize(addr)\n            // allocate output byte array - this could also be done without assembly\n            // by using o_code = new bytes(size)\n            code := mload(0x40)\n            // new \"memory end\" including padding\n            mstore(0x40, add(code, and(add(add(size, 0x20), 0x1f), not(0x1f))))\n            // store length in memory\n            mstore(code, size)\n            // actually retrieve the code, this needs assembly\n            extcodecopy(addr, add(code, 0x20), 0, size)\n        }\n    }\n}"
        }
    },
    "sourceCodes": {
        "./ERC20BridgeSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./BalancerSampler.sol\";\nimport \"./BalancerV2Sampler.sol\";\nimport \"./BancorSampler.sol\";\nimport \"./CurveSampler.sol\";\nimport \"./DODOSampler.sol\";\nimport \"./DODOV2Sampler.sol\";\nimport \"./Eth2DaiSampler.sol\";\nimport \"./KyberSampler.sol\";\nimport \"./KyberDmmSampler.sol\";\nimport \"./LiquidityProviderSampler.sol\";\nimport \"./MakerPSMSampler.sol\";\nimport \"./MStableSampler.sol\";\nimport \"./MooniswapSampler.sol\";\nimport \"./NativeOrderSampler.sol\";\nimport \"./ShellSampler.sol\";\nimport \"./TwoHopSampler.sol\";\nimport \"./UniswapSampler.sol\";\nimport \"./UniswapV2Sampler.sol\";\nimport \"./UniswapV3Sampler.sol\";\nimport \"./UtilitySampler.sol\";\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol\";\n\ncontract ERC20BridgeSampler is\n    BalancerSampler,\n    BalancerV2Sampler,\n    BancorSampler,\n    CurveSampler,\n    DODOSampler,\n    DODOV2Sampler,\n    Eth2DaiSampler,\n    KyberSampler,\n    KyberDmmSampler,\n    LiquidityProviderSampler,\n    MakerPSMSampler,\n    MStableSampler,\n    MooniswapSampler,\n    NativeOrderSampler,\n    ShellSampler,\n    TwoHopSampler,\n    UniswapSampler,\n    UniswapV2Sampler,\n    UniswapV3Sampler,\n    UtilitySampler\n{\n\n    struct CallResults {\n        bytes data;\n        bool success;\n    }\n\n    constructor(IEtherTokenV06 weth)\n        public\n        BancorSampler(weth)\n        CurveSampler(weth)\n        KyberSampler(weth)\n        MooniswapSampler(weth)\n        UniswapSampler(weth)\n    { }\n\n    /// @dev Call multiple public functions on this contract in a single transaction.\n    /// @param callDatas ABI-encoded call data for each function call.\n    /// @return callResults ABI-encoded results data for each call.\n    function batchCall(bytes[] calldata callDatas)\n        external\n        payable\n        returns (CallResults[] memory callResults)\n    {\n        callResults = new CallResults[](callDatas.length);\n        for (uint256 i = 0; i != callDatas.length; ++i) {\n            callResults[i].success = true;\n            if (callDatas[i].length == 0) {\n                continue;\n            }\n            (callResults[i].success, callResults[i].data) = address(this).call(callDatas[i]);\n        }\n    }\n}\n",
        "./BalancerSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinBalancer.sol\";\nimport \"./SwapRevertSampler.sol\";\n\ncontract BalancerSampler is\n    MixinBalancer,\n    SwapRevertSampler\n{\n\n    function sampleSwapFromBalancer(\n        address sellToken,\n        address buyToken,\n        bytes memory bridgeData,\n        uint256 takerTokenAmount\n    )\n        external\n        returns (uint256)\n    {\n        return _tradeBalancer(\n            IERC20TokenV06(sellToken),\n            IERC20TokenV06(buyToken),\n            takerTokenAmount,\n            bridgeData\n        );\n    }\n\n    /// @dev Sample sell quotes from Balancer.\n    /// @param poolAddress Address of the Balancer pool to query.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return gasUsed gas consumed in each sample sell\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromBalancer(\n        address poolAddress,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        returns (uint256[] memory gasUsed, uint256[] memory makerTokenAmounts)\n    {\n        (gasUsed, makerTokenAmounts) = _sampleSwapQuotesRevert(\n            SwapRevertSamplerQuoteOpts({\n                sellToken: takerToken,\n                buyToken: makerToken,\n                bridgeData: abi.encode(poolAddress),\n                getSwapQuoteCallback: this.sampleSwapFromBalancer\n            }),\n            takerTokenAmounts\n        );\n    }\n\n    /// @dev Sample buy quotes from Balancer.\n    /// @param poolAddress Address of the Balancer pool to query.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return gasUsed gas consumed in each sample sell\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromBalancer(\n        address poolAddress,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        returns (uint256[] memory gasUsed, uint256[] memory takerTokenAmounts)\n    {\n        (gasUsed, takerTokenAmounts) = _sampleSwapApproximateBuys(\n            SwapRevertSamplerBuyQuoteOpts({\n                sellToken: takerToken,\n                buyToken: makerToken,\n                sellTokenData: abi.encode(poolAddress),\n                buyTokenData: abi.encode(poolAddress),\n                getSwapQuoteCallback: this.sampleSwapFromBalancer\n            }),\n            makerTokenAmounts\n        );\n\n    }\n}\n",
        "@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinBalancer.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\n\ninterface IBalancerPool {\n    /// @dev Sell `tokenAmountIn` of `tokenIn` and receive `tokenOut`.\n    /// @param tokenIn The token being sold\n    /// @param tokenAmountIn The amount of `tokenIn` to sell.\n    /// @param tokenOut The token being bought.\n    /// @param minAmountOut The minimum amount of `tokenOut` to buy.\n    /// @param maxPrice The maximum value for `spotPriceAfter`.\n    /// @return tokenAmountOut The amount of `tokenOut` bought.\n    /// @return spotPriceAfter The new marginal spot price of the given\n    ///         token pair for this pool.\n    function swapExactAmountIn(\n        IERC20TokenV06 tokenIn,\n        uint tokenAmountIn,\n        IERC20TokenV06 tokenOut,\n        uint minAmountOut,\n        uint maxPrice\n    ) external returns (uint tokenAmountOut, uint spotPriceAfter);\n}\n\ncontract MixinBalancer {\n\n    using LibERC20TokenV06 for IERC20TokenV06;\n\n    function _tradeBalancer(\n        IERC20TokenV06 sellToken,\n        IERC20TokenV06 buyToken,\n        uint256 sellAmount,\n        bytes memory bridgeData\n    )\n        internal\n        returns (uint256 boughtAmount)\n    {\n        // Decode the bridge data.\n        (IBalancerPool pool) = abi.decode(\n            bridgeData,\n            (IBalancerPool)\n        );\n        sellToken.approveIfBelow(\n            address(pool),\n            sellAmount\n        );\n        // Sell all of this contract's `sellToken` token balance.\n        (boughtAmount,) = pool.swapExactAmountIn(\n            sellToken,  // tokenIn\n            sellAmount, // tokenAmountIn\n            buyToken,   // tokenOut\n            1,          // minAmountOut\n            uint256(-1) // maxPrice\n        );\n        return boughtAmount;\n    }\n}\n",
        "@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol\";\nimport \"./IERC20TokenV06.sol\";\n\n\nlibrary LibERC20TokenV06 {\n    bytes constant private DECIMALS_CALL_DATA = hex\"313ce567\";\n\n    /// @dev Calls `IERC20TokenV06(token).approve()`.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param spender The address that receives an allowance.\n    /// @param allowance The allowance to set.\n    function compatApprove(\n        IERC20TokenV06 token,\n        address spender,\n        uint256 allowance\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.approve.selector,\n            spender,\n            allowance\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).approve()` and sets the allowance to the\n    ///      maximum if the current approval is not already >= an amount.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param spender The address that receives an allowance.\n    /// @param amount The minimum allowance needed.\n    function approveIfBelow(\n        IERC20TokenV06 token,\n        address spender,\n        uint256 amount\n    )\n        internal\n    {\n        if (token.allowance(address(this), spender) < amount) {\n            compatApprove(token, spender, uint256(-1));\n        }\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).transfer()`.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param to The address that receives the tokens\n    /// @param amount Number of tokens to transfer.\n    function compatTransfer(\n        IERC20TokenV06 token,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.transfer.selector,\n            to,\n            amount\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).transferFrom()`.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param from The owner of the tokens.\n    /// @param to The address that receives the tokens\n    /// @param amount Number of tokens to transfer.\n    function compatTransferFrom(\n        IERC20TokenV06 token,\n        address from,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.transferFrom.selector,\n            from,\n            to,\n            amount\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Retrieves the number of decimals for a token.\n    ///      Returns `18` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @return tokenDecimals The number of decimals places for the token.\n    function compatDecimals(IERC20TokenV06 token)\n        internal\n        view\n        returns (uint8 tokenDecimals)\n    {\n        tokenDecimals = 18;\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(DECIMALS_CALL_DATA);\n        if (didSucceed && resultData.length >= 32) {\n            tokenDecimals = uint8(LibBytesV06.readUint256(resultData, 0));\n        }\n    }\n\n    /// @dev Retrieves the allowance for a token, owner, and spender.\n    ///      Returns `0` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @param owner The owner of the tokens.\n    /// @param spender The address the spender.\n    /// @return allowance_ The allowance for a token, owner, and spender.\n    function compatAllowance(IERC20TokenV06 token, address owner, address spender)\n        internal\n        view\n        returns (uint256 allowance_)\n    {\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(\n            abi.encodeWithSelector(\n                token.allowance.selector,\n                owner,\n                spender\n            )\n        );\n        if (didSucceed && resultData.length >= 32) {\n            allowance_ = LibBytesV06.readUint256(resultData, 0);\n        }\n    }\n\n    /// @dev Retrieves the balance for a token owner.\n    ///      Returns `0` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @param owner The owner of the tokens.\n    /// @return balance The token balance of an owner.\n    function compatBalanceOf(IERC20TokenV06 token, address owner)\n        internal\n        view\n        returns (uint256 balance)\n    {\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(\n            abi.encodeWithSelector(\n                token.balanceOf.selector,\n                owner\n            )\n        );\n        if (didSucceed && resultData.length >= 32) {\n            balance = LibBytesV06.readUint256(resultData, 0);\n        }\n    }\n\n    /// @dev Check if the data returned by a non-static call to an ERC20 token\n    ///      is a successful result. Supported functions are `transfer()`,\n    ///      `transferFrom()`, and `approve()`.\n    /// @param resultData The raw data returned by a non-static call to the ERC20 token.\n    /// @return isSuccessful Whether the result data indicates success.\n    function isSuccessfulResult(bytes memory resultData)\n        internal\n        pure\n        returns (bool isSuccessful)\n    {\n        if (resultData.length == 0) {\n            return true;\n        }\n        if (resultData.length >= 32) {\n            uint256 result = LibBytesV06.readUint256(resultData, 0);\n            if (result == 1) {\n                return true;\n            }\n        }\n    }\n\n    /// @dev Executes a call on address `target` with calldata `callData`\n    ///      and asserts that either nothing was returned or a single boolean\n    ///      was returned equal to `true`.\n    /// @param target The call target.\n    /// @param callData The abi-encoded call data.\n    function _callWithOptionalBooleanResult(\n        address target,\n        bytes memory callData\n    )\n        private\n    {\n        (bool didSucceed, bytes memory resultData) = target.call(callData);\n        if (didSucceed && isSuccessfulResult(resultData)) {\n            return;\n        }\n        LibRichErrorsV06.rrevert(resultData);\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibRichErrorsV06 {\n\n    // bytes4(keccak256(\"Error(string)\"))\n    bytes4 internal constant STANDARD_ERROR_SELECTOR = 0x08c379a0;\n\n    // solhint-disable func-name-mixedcase\n    /// @dev ABI encode a standard, string revert error payload.\n    ///      This is the same payload that would be included by a `revert(string)`\n    ///      solidity statement. It has the function signature `Error(string)`.\n    /// @param message The error string.\n    /// @return The ABI encoded error.\n    function StandardError(string memory message)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            STANDARD_ERROR_SELECTOR,\n            bytes(message)\n        );\n    }\n    // solhint-enable func-name-mixedcase\n\n    /// @dev Reverts an encoded rich revert reason `errorData`.\n    /// @param errorData ABI encoded error data.\n    function rrevert(bytes memory errorData)\n        internal\n        pure\n    {\n        assembly {\n            revert(add(errorData, 0x20), mload(errorData))\n        }\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./errors/LibBytesRichErrorsV06.sol\";\nimport \"./errors/LibRichErrorsV06.sol\";\n\n\nlibrary LibBytesV06 {\n\n    using LibBytesV06 for bytes;\n\n    /// @dev Gets the memory address for a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of byte array. This\n    ///         points to the header of the byte array which contains\n    ///         the length.\n    function rawAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := input\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Gets the memory address for the contents of a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of the contents of the byte array.\n    function contentAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := add(input, 32)\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Copies `length` bytes from memory location `source` to `dest`.\n    /// @param dest memory address to copy bytes to.\n    /// @param source memory address to copy bytes from.\n    /// @param length number of bytes to copy.\n    function memCopy(\n        uint256 dest,\n        uint256 source,\n        uint256 length\n    )\n        internal\n        pure\n    {\n        if (length < 32) {\n            // Handle a partial word by reading destination and masking\n            // off the bits we are interested in.\n            // This correctly handles overlap, zero lengths and source == dest\n            assembly {\n                let mask := sub(exp(256, sub(32, length)), 1)\n                let s := and(mload(source), not(mask))\n                let d := and(mload(dest), mask)\n                mstore(dest, or(s, d))\n            }\n        } else {\n            // Skip the O(length) loop when source == dest.\n            if (source == dest) {\n                return;\n            }\n\n            // For large copies we copy whole words at a time. The final\n            // word is aligned to the end of the range (instead of after the\n            // previous) to handle partial words. So a copy will look like this:\n            //\n            //  ####\n            //      ####\n            //          ####\n            //            ####\n            //\n            // We handle overlap in the source and destination range by\n            // changing the copying direction. This prevents us from\n            // overwriting parts of source that we still need to copy.\n            //\n            // This correctly handles source == dest\n            //\n            if (source > dest) {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because it\n                    // is easier to compare with in the loop, and these\n                    // are also the addresses we need for copying the\n                    // last bytes.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the last 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the last bytes in\n                    // source already due to overlap.\n                    let last := mload(sEnd)\n\n                    // Copy whole words front to back\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} lt(source, sEnd) {} {\n                        mstore(dest, mload(source))\n                        source := add(source, 32)\n                        dest := add(dest, 32)\n                    }\n\n                    // Write the last 32 bytes\n                    mstore(dEnd, last)\n                }\n            } else {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because those\n                    // are the starting points when copying a word at the end.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the first 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the first bytes in\n                    // source already due to overlap.\n                    let first := mload(source)\n\n                    // Copy whole words back to front\n                    // We use a signed comparisson here to allow dEnd to become\n                    // negative (happens when source and dest < 32). Valid\n                    // addresses in local memory will never be larger than\n                    // 2**255, so they can be safely re-interpreted as signed.\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} slt(dest, dEnd) {} {\n                        mstore(dEnd, mload(sEnd))\n                        sEnd := sub(sEnd, 32)\n                        dEnd := sub(dEnd, 32)\n                    }\n\n                    // Write the first 32 bytes\n                    mstore(dest, first)\n                }\n            }\n        }\n    }\n\n    /// @dev Returns a slices from a byte array.\n    /// @param b The byte array to take a slice from.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function slice(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure and copy contents\n        result = new bytes(to - from);\n        memCopy(\n            result.contentAddress(),\n            b.contentAddress() + from,\n            result.length\n        );\n        return result;\n    }\n\n    /// @dev Returns a slice from a byte array without preserving the input.\n    ///      When `from == 0`, the original array will match the slice.\n    ///      In other cases its state will be corrupted.\n    /// @param b The byte array to take a slice from. Will be destroyed in the process.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function sliceDestructive(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure around [from, to) in-place.\n        assembly {\n            result := add(b, from)\n            mstore(result, sub(to, from))\n        }\n        return result;\n    }\n\n    /// @dev Pops the last byte off of a byte array by modifying its length.\n    /// @param b Byte array that will be modified.\n    /// @return result The byte that was popped off.\n    function popLastByte(bytes memory b)\n        internal\n        pure\n        returns (bytes1 result)\n    {\n        if (b.length == 0) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanZeroRequired,\n                b.length,\n                0\n            ));\n        }\n\n        // Store last byte.\n        result = b[b.length - 1];\n\n        assembly {\n            // Decrement length of byte array.\n            let newLen := sub(mload(b), 1)\n            mstore(b, newLen)\n        }\n        return result;\n    }\n\n    /// @dev Tests equality of two byte arrays.\n    /// @param lhs First byte array to compare.\n    /// @param rhs Second byte array to compare.\n    /// @return equal True if arrays are the same. False otherwise.\n    function equals(\n        bytes memory lhs,\n        bytes memory rhs\n    )\n        internal\n        pure\n        returns (bool equal)\n    {\n        // Keccak gas cost is 30 + numWords * 6. This is a cheap way to compare.\n        // We early exit on unequal lengths, but keccak would also correctly\n        // handle this.\n        return lhs.length == rhs.length && keccak256(lhs) == keccak256(rhs);\n    }\n\n    /// @dev Reads an address from a position in a byte array.\n    /// @param b Byte array containing an address.\n    /// @param index Index in byte array of address.\n    /// @return result address from byte array.\n    function readAddress(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (address result)\n    {\n        if (b.length < index + 20) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Read address from array memory\n        assembly {\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 20-byte mask to obtain address\n            result := and(mload(add(b, index)), 0xffffffffffffffffffffffffffffffffffffffff)\n        }\n        return result;\n    }\n\n    /// @dev Writes an address into a specific position in a byte array.\n    /// @param b Byte array to insert address into.\n    /// @param index Index in byte array of address.\n    /// @param input Address to put into byte array.\n    function writeAddress(\n        bytes memory b,\n        uint256 index,\n        address input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 20) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Store address into array memory\n        assembly {\n            // The address occupies 20 bytes and mstore stores 32 bytes.\n            // First fetch the 32-byte word where we'll be storing the address, then\n            // apply a mask so we have only the bytes in the word that the address will not occupy.\n            // Then combine these bytes with the address and store the 32 bytes back to memory with mstore.\n\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 12-byte mask to obtain extra bytes occupying word of memory where we'll store the address\n            let neighbors := and(\n                mload(add(b, index)),\n                0xffffffffffffffffffffffff0000000000000000000000000000000000000000\n            )\n\n            // Make sure input address is clean.\n            // (Solidity does not guarantee this)\n            input := and(input, 0xffffffffffffffffffffffffffffffffffffffff)\n\n            // Store the neighbors and address into memory\n            mstore(add(b, index), xor(input, neighbors))\n        }\n    }\n\n    /// @dev Reads a bytes32 value from a position in a byte array.\n    /// @param b Byte array containing a bytes32 value.\n    /// @param index Index in byte array of bytes32 value.\n    /// @return result bytes32 value from byte array.\n    function readBytes32(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        if (b.length < index + 32) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            result := mload(add(b, index))\n        }\n        return result;\n    }\n\n    /// @dev Writes a bytes32 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input bytes32 to put into byte array.\n    function writeBytes32(\n        bytes memory b,\n        uint256 index,\n        bytes32 input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 32) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            mstore(add(b, index), input)\n        }\n    }\n\n    /// @dev Reads a uint256 value from a position in a byte array.\n    /// @param b Byte array containing a uint256 value.\n    /// @param index Index in byte array of uint256 value.\n    /// @return result uint256 value from byte array.\n    function readUint256(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (uint256 result)\n    {\n        result = uint256(readBytes32(b, index));\n        return result;\n    }\n\n    /// @dev Writes a uint256 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input uint256 to put into byte array.\n    function writeUint256(\n        bytes memory b,\n        uint256 index,\n        uint256 input\n    )\n        internal\n        pure\n    {\n        writeBytes32(b, index, bytes32(input));\n    }\n\n    /// @dev Reads an unpadded bytes4 value from a position in a byte array.\n    /// @param b Byte array containing a bytes4 value.\n    /// @param index Index in byte array of bytes4 value.\n    /// @return result bytes4 value from byte array.\n    function readBytes4(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes4 result)\n    {\n        if (b.length < index + 4) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsFourRequired,\n                b.length,\n                index + 4\n            ));\n        }\n\n        // Arrays are prefixed by a 32 byte length field\n        index += 32;\n\n        // Read the bytes4 from array memory\n        assembly {\n            result := mload(add(b, index))\n            // Solidity does not require us to clean the trailing bytes.\n            // We do it anyway\n            result := and(result, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)\n        }\n        return result;\n    }\n\n    /// @dev Writes a new length to a byte array.\n    ///      Decreasing length will lead to removing the corresponding lower order bytes from the byte array.\n    ///      Increasing length may lead to appending adjacent in-memory bytes to the end of the byte array.\n    /// @param b Bytes array to write new length to.\n    /// @param length New length of byte array.\n    function writeLength(bytes memory b, uint256 length)\n        internal\n        pure\n    {\n        assembly {\n            mstore(b, length)\n        }\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/errors/LibBytesRichErrorsV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibBytesRichErrorsV06 {\n\n    enum InvalidByteOperationErrorCodes {\n        FromLessThanOrEqualsToRequired,\n        ToLessThanOrEqualsLengthRequired,\n        LengthGreaterThanZeroRequired,\n        LengthGreaterThanOrEqualsFourRequired,\n        LengthGreaterThanOrEqualsTwentyRequired,\n        LengthGreaterThanOrEqualsThirtyTwoRequired,\n        LengthGreaterThanOrEqualsNestedBytesLengthRequired,\n        DestinationLengthGreaterThanOrEqualSourceLengthRequired\n    }\n\n    // bytes4(keccak256(\"InvalidByteOperationError(uint8,uint256,uint256)\"))\n    bytes4 internal constant INVALID_BYTE_OPERATION_ERROR_SELECTOR =\n        0x28006595;\n\n    // solhint-disable func-name-mixedcase\n    function InvalidByteOperationError(\n        InvalidByteOperationErrorCodes errorCode,\n        uint256 offset,\n        uint256 required\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            INVALID_BYTE_OPERATION_ERROR_SELECTOR,\n            errorCode,\n            offset,\n            required\n        );\n    }\n}\n",
        "@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\ninterface IERC20TokenV06 {\n\n    // solhint-disable no-simple-event-func-name\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 value\n    );\n\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n\n    /// @dev send `value` token to `to` from `msg.sender`\n    /// @param to The address of the recipient\n    /// @param value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transfer(address to, uint256 value)\n        external\n        returns (bool);\n\n    /// @dev send `value` token to `to` from `from` on the condition it is approved by `from`\n    /// @param from The address of the sender\n    /// @param to The address of the recipient\n    /// @param value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    )\n        external\n        returns (bool);\n\n    /// @dev `msg.sender` approves `spender` to spend `value` tokens\n    /// @param spender The address of the account able to transfer the tokens\n    /// @param value The amount of wei to be approved for transfer\n    /// @return Always true if the call has enough gas to complete execution\n    function approve(address spender, uint256 value)\n        external\n        returns (bool);\n\n    /// @dev Query total supply of token\n    /// @return Total supply of token\n    function totalSupply()\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the balance of `owner`.\n    /// @param owner The address from which the balance will be retrieved\n    /// @return Balance of owner\n    function balanceOf(address owner)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the allowance for `spender` to spend from `owner`.\n    /// @param owner The address of the account owning tokens\n    /// @param spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the number of decimals this token has.\n    function decimals()\n        external\n        view\n        returns (uint8);\n}\n",
        "./SwapRevertSampler.sol": "\n\n// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./GasOverhead.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\n\ninterface IHackedERC20 {\n    function _setBalance(address owner, uint256 amount) external;\n    function _setEnabled(bool enabled) external;\n}\n\ncontract SwapRevertSampler {\n    using LibRichErrorsV06 for bytes;\n    address private constant GAS_OVERHEAD = 0xDeF1000000000000000000000000000000001337;\n\n    // solhint-disable no-empty-blocks\n    /// @dev Payable fallback to receive ETH from Kyber/WETH.\n    receive ()\n        external\n        payable\n    { }\n\n    struct SwapRevertSamplerQuoteOpts {\n        // Address of the token which is being sold\n        address sellToken;\n        // Address of the token which is wanted\n        address buyToken;\n        // Data required for the bridge to execute the swap\n        bytes bridgeData;\n        // Callback to retrieve a swap quote.\n        function (address sellToken, address buyToken, bytes memory bridgeData, uint256 sellAmount)\n            external\n            returns (uint256)\n            getSwapQuoteCallback;\n    }\n\n    struct SwapRevertSamplerBuyQuoteOpts {\n        // Address of the token which is being sold\n        address sellToken;\n        // Address of the token which is wanted\n        address buyToken;\n        // Data required for the bridge to execute the SELL_TOKEN->BUY_TOKEN swap\n        bytes sellTokenData;\n        // Data required for the bridge to execute the BUY_TOKEN->SELL_TOKEN swap\n        bytes buyTokenData;\n        // Callback to retrieve a swap quote.\n        function (address sellToken, address buyToken, bytes memory bridgeData, uint256 sellAmount)\n            external\n            returns (uint256)\n            getSwapQuoteCallback;\n    }\n\n    function _callRevert(\n        bytes4 selector,\n        address sellToken,\n        address buyToken,\n        bytes memory bridgeData,\n        uint256 amountIn\n    )\n        external\n    {\n        // Clear any registered overhead\n        try\n            GasOverhead(GAS_OVERHEAD).clearOverhead()\n        { } catch { }\n        // Measure the gas\n        uint256 gasUsed = gasleft();\n        // Perform the sell\n        (bool success, bytes memory data) = address(this).call(\n            abi.encodeWithSelector(selector, sellToken, buyToken, bridgeData, amountIn)\n        );\n        gasUsed = gasUsed - gasleft();\n        // Remove any registered gas overhead\n        try\n            GasOverhead(GAS_OVERHEAD).overhead()\n            returns (uint256 gasOverhead)\n        {\n            gasUsed = gasUsed - gasOverhead;\n        } catch { }\n\n        if (!success) {\n            data.rrevert();\n        }\n        // Revert with the amount bought\n        _revertSingleSwapSample(abi.decode(data, (uint256)), gasUsed);\n    }\n\n    /// @dev  Mints the sell token, then performs the swap, then reverts with the amount out.\n    /// The SwapRevertSamplerQuoteOpts has been unrolled here as our ABI encoder cannot support\n    /// encoding the function\n    function _mintCallRevert(\n        bytes4 selector,\n        address sellToken,\n        address buyToken,\n        bytes memory bridgeData,\n        uint256[] memory amountsIn\n    )\n        external\n    {\n        IHackedERC20 hackedSellToken = IHackedERC20(payable(sellToken));\n        // We assume the amounts are ascending and that\n        // the underlying call can handle selling a specific amount\n        uint256 amountIn = amountsIn[amountsIn.length - 1];\n\n        // Enable sell token to be tracked and shadowed\n        try\n            hackedSellToken._setEnabled(true)\n        { } catch { }\n\n        // Mint enough to sell\n        try\n            hackedSellToken._setBalance(address(this), amountIn)\n        { } catch { }\n\n        try\n            IEtherTokenV06(payable(sellToken)).deposit{ value: amountIn }()\n        { } catch { }\n\n        // IHackedERC20 hackedBuyToken = IHackedERC20(payable(buyToken));\n        // // Ensure the balance of the buyToken is 0\n        // try\n        //     hackedBuyToken._setBalance(address(this), 0)\n        // { } catch { }\n\n        // require(hackedSellToken.balanceOf(address(this)) == amountIn, \"Failed to mint or deposit sellToken\");\n        // require(hackedBuyToken.balanceOf(address(this)) == 0, \"Balance of buyToken must be 0\");\n\n        // // Burn any excess ETH to avoid balance issues for sources which use ETH directly\n        // address(0).transfer(address(this).balance);\n\n        uint256[] memory amountsOut = new uint256[](amountsIn.length);\n        uint256[] memory gasUsed = new uint256[](amountsIn.length);\n\n        for (uint256 i = 0; i < amountsIn.length; i++) {\n            try\n                this._callRevert{gas: 2e6}(\n                    selector,\n                    sellToken,\n                    buyToken,\n                    bridgeData,\n                    amountsIn[i]\n                )\n            {\n                require(false, \"Swap Sample should have reverted\");\n            } catch (bytes memory reason) {\n                // Parse the reverted sample data\n                (amountsOut[i], gasUsed[i]) = _parseRevertedSingleSwapSample(reason);\n                // If we detect the amount out is 0 then we return early\n                // rather than continue performing excess work\n                if (amountsOut[i] == 0) {\n                    break;\n                }\n            }\n        }\n        // Revert the entire sampling\n        _revertSwapSample(amountsOut, gasUsed);\n    }\n\n    function _sampleSwapQuotesRevert(\n        SwapRevertSamplerQuoteOpts memory opts,\n        uint256[] memory amountsIn\n    )\n        internal\n        returns (uint256[] memory gasUsed, uint256[] memory amountsOut)\n    {\n        try\n            this._mintCallRevert(\n                opts.getSwapQuoteCallback.selector,\n                opts.sellToken,\n                opts.buyToken,\n                opts.bridgeData,\n                amountsIn\n            )\n        {\n            require(false, \"Swap Sample should have reverted\");\n        } catch (bytes memory reason) {\n            // Parse the reverted sample datas\n            (amountsOut, gasUsed) = abi.decode(reason, (uint256[], uint256[]));\n        }\n    }\n\n    function _revertSingleSwapSample(\n        uint256 amount,\n        uint256 gasUsed\n    )\n        internal\n    {\n        // Revert it so there is no state change\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, amount)\n            mstore(add(ptr, 32), gasUsed)\n            revert(ptr, 64)\n        }\n    }\n\n    function _revertSwapSample(\n        uint256[] memory amounts,\n        uint256[] memory gasUsed\n    )\n        internal\n    {\n        bytes memory data = abi.encode(amounts, gasUsed);\n        // Revert it so there is no state change\n        assembly {\n            revert(add(data, 32), mload(data))\n        }\n    }\n\n    /// @dev Parses the reverted swap sample data. If no amount\n    ///      is decoded, 0 is returned.\n    /// @param reason the string which contains the possible\n    ///               sample amount\n    /// @return the decoded sample amount or 0\n    /// @return the gas used in the sample\n    function _parseRevertedSingleSwapSample(\n        bytes memory reason\n    )\n        internal\n        pure\n        returns (uint256, uint256)\n    {\n        if (reason.length != 64) {\n            return (0,0);\n        }\n        return abi.decode(reason, (uint256, uint256));\n    }\n\n    uint256 private constant ONE_HUNDED_PERCENT_BPS = 1e4;\n    /// @dev Maximum approximate (positive) error rate when approximating a buy quote.\n    uint256 private constant APPROXIMATE_BUY_TARGET_EPSILON_BPS = 0.0005e4;\n    /// @dev Maximum iterations to perform when approximating a buy quote.\n    uint256 private constant APPROXIMATE_BUY_MAX_ITERATIONS = 3;\n\n    function _sampleSwapApproximateBuys(\n        SwapRevertSamplerBuyQuoteOpts memory opts,\n        uint256[] memory makerTokenAmounts\n    )\n        internal\n        returns (uint256[] memory gasUsed, uint256[] memory takerTokenAmounts)\n    {\n        if (makerTokenAmounts.length == 0) {\n            return (gasUsed, takerTokenAmounts);\n        }\n\n        takerTokenAmounts = new uint256[](makerTokenAmounts.length);\n        gasUsed = new uint256[](makerTokenAmounts.length);\n\n        uint256[] memory sellAmounts = new uint256[](1);\n        sellAmounts[0] = makerTokenAmounts[0];\n\n        SwapRevertSamplerQuoteOpts memory sellOpts = SwapRevertSamplerQuoteOpts({\n            sellToken: opts.sellToken,\n            buyToken: opts.buyToken,\n            bridgeData: opts.sellTokenData,\n            getSwapQuoteCallback: opts.getSwapQuoteCallback\n        });\n\n        SwapRevertSamplerQuoteOpts memory buyOpts = SwapRevertSamplerQuoteOpts({\n            sellToken: opts.buyToken,\n            buyToken: opts.sellToken,\n            bridgeData: opts.buyTokenData,\n            getSwapQuoteCallback: opts.getSwapQuoteCallback\n        });\n        // Inverted, perform a sell of the token the user wants to buy\n        (, sellAmounts) = _sampleSwapQuotesRevert(buyOpts, sellAmounts);\n        if (sellAmounts.length == 0 || sellAmounts[0] == 0) {\n            return (gasUsed, takerTokenAmounts);\n        }\n\n        uint256[] memory buyAmounts;\n        // Sell of the token the user wishes to dispose, see how much we buy\n        (, buyAmounts) = _sampleSwapQuotesRevert(sellOpts, sellAmounts);\n\n        if (buyAmounts.length == 0 || buyAmounts[0] == 0) {\n            return (gasUsed, takerTokenAmounts);\n        }\n\n        for (uint256 i = 0; i < makerTokenAmounts.length; i++) {\n            uint256[] memory _gasUsed;\n            for (uint256 iter = 0; iter < APPROXIMATE_BUY_MAX_ITERATIONS; iter++) {\n                // adjustedSellAmount = previousSellAmount * (target/actual) * JUMP_MULTIPLIER\n                sellAmounts[0] = _safeGetPartialAmountCeil(\n                    makerTokenAmounts[i],\n                    buyAmounts[0],\n                    sellAmounts[0]\n                );\n                if (sellAmounts.length == 0 || sellAmounts[0] == 0) {\n                    break;\n                }\n                sellAmounts[0] = _safeGetPartialAmountCeil(\n                    (ONE_HUNDED_PERCENT_BPS + APPROXIMATE_BUY_TARGET_EPSILON_BPS),\n                    ONE_HUNDED_PERCENT_BPS,\n                    sellAmounts[0]\n                );\n                if (sellAmounts.length == 0 || sellAmounts[0] == 0) {\n                    break;\n                }\n                uint256[] memory _buyAmounts;\n                (_gasUsed, _buyAmounts) = _sampleSwapQuotesRevert(sellOpts, sellAmounts);\n                if (_buyAmounts.length == 0 || _buyAmounts[0] == 0) {\n                    break;\n                }\n                // We re-use buyAmount next iteration, only assign if it is\n                // non zero\n                buyAmounts = _buyAmounts;\n                // If we've reached our goal, exit early\n                if (buyAmounts[0] >= makerTokenAmounts[i]) {\n                    uint256 eps =\n                        (buyAmounts[0] - makerTokenAmounts[i]) * ONE_HUNDED_PERCENT_BPS /\n                        makerTokenAmounts[i];\n                    if (eps <= APPROXIMATE_BUY_TARGET_EPSILON_BPS) {\n                        break;\n                    }\n                }\n            }\n            if (_gasUsed.length > 0 && buyAmounts.length > 0) {\n                gasUsed[i] = _gasUsed[0];\n                // We do our best to close in on the requested amount, but we can either over buy or under buy and exit\n                // if we hit a max iteration limit\n                // We scale the sell amount to get the approximate target\n                takerTokenAmounts[i] = _safeGetPartialAmountCeil(\n                    makerTokenAmounts[i],\n                    buyAmounts[0],\n                    sellAmounts[0]\n                );\n            }\n        }\n    }\n\n    function _safeGetPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        view\n        returns (uint256 partialAmount)\n    {\n        if (numerator == 0 || target == 0 || denominator == 0) return 0;\n        uint256 c = numerator * target;\n        if (c / numerator != target) return 0;\n        return (c + (denominator - 1)) / denominator;\n    }\n\n}",
        "./GasOverhead.sol": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.6;\n\ncontract GasOverhead {\n    uint256 public _overhead = 2;\n    // Overhead incurred from updating the overhead storage slot\n    uint256 constant SSTORE_OVERHEAD = 20000;\n\n    function addOverhead(uint256 gas, uint256 gasBefore)\n        external\n    {\n        uint256 callOverhead = gasBefore - gasleft();\n        // Add additional est overhead of performing this update\n        _overhead += gas + callOverhead + SSTORE_OVERHEAD;\n    }\n\n    function clearOverhead()\n        external\n    {\n        _overhead = 2;\n    }\n\n    function overhead()\n        external\n        view\n        returns (uint256)\n    {\n        return _overhead;\n    }\n}\n",
        "@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./IERC20TokenV06.sol\";\n\n\ninterface IEtherTokenV06 is\n    IERC20TokenV06\n{\n    /// @dev Wrap ether.\n    function deposit() external payable;\n\n    /// @dev Unwrap ether.\n    function withdraw(uint256 amount) external;\n}\n",
        "./BalancerV2Sampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinBalancerV2.sol\";\nimport \"./SwapRevertSampler.sol\";\n\ncontract BalancerV2Sampler is\n    MixinBalancerV2,\n    SwapRevertSampler\n{\n\n    function sampleSwapFromBalancerV2(\n        address sellToken,\n        address buyToken,\n        bytes memory bridgeData,\n        uint256 takerTokenAmount\n    )\n        external\n        returns (uint256)\n    {\n        return _tradeBalancerV2(\n            IERC20TokenV06(sellToken),\n            IERC20TokenV06(buyToken),\n            takerTokenAmount,\n            bridgeData\n        );\n    }\n\n    /// @dev Sample sell quotes from Balancer V2.\n    /// @param poolInfo Struct with pool related data\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return gasUsed gas consumed in each sample sell\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromBalancerV2(\n        BalancerV2BridgeData memory poolInfo,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        returns (uint256[] memory gasUsed, uint256[] memory makerTokenAmounts)\n    {\n        (gasUsed, makerTokenAmounts) = _sampleSwapQuotesRevert(\n            SwapRevertSamplerQuoteOpts({\n                sellToken: takerToken,\n                buyToken: makerToken,\n                bridgeData: abi.encode(poolInfo),\n                getSwapQuoteCallback: this.sampleSwapFromBalancerV2\n            }),\n            takerTokenAmounts\n        );\n    }\n\n    /// @dev Sample buy quotes from Balancer V2.\n    /// @param poolInfo Struct with pool related data\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return gasUsed gas consumed in each sample sell\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromBalancerV2(\n        BalancerV2BridgeData memory poolInfo,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        returns (uint256[] memory gasUsed, uint256[] memory takerTokenAmounts)\n    {\n        (gasUsed, takerTokenAmounts) = _sampleSwapApproximateBuys(\n            SwapRevertSamplerBuyQuoteOpts({\n                sellToken: takerToken,\n                buyToken: makerToken,\n                sellTokenData: abi.encode(poolInfo),\n                buyTokenData: abi.encode(poolInfo),\n                getSwapQuoteCallback: this.sampleSwapFromBalancerV2\n            }),\n            makerTokenAmounts\n        );\n    }\n}\n",
        "@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinBalancerV2.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\n\n\ninterface IBalancerV2Vault {\n\n    enum SwapKind { GIVEN_IN, GIVEN_OUT }\n    /**\n     * @dev Performs a swap with a single Pool.\n     *\n     * If the swap is given in (the number of tokens to send to the Pool is known), returns the amount of tokens\n     * taken from the Pool, which must be greater than or equal to `limit`.\n     *\n     * If the swap is given out (the number of tokens to take from the Pool is known), returns the amount of\n     * tokens sent to the Pool, which must be less than or equal to `limit`.\n     *\n     * Internal Balance usage and the recipient are determined by the `funds` struct.\n     *\n     * Emits a `Swap` event.\n     * For full documentation see https://github.com/balancer-labs/balancer-core-v2/blob/master/contracts/vault/interfaces/IVault.sol\n     */\n    function swap(\n        SingleSwap calldata request,\n        FundManagement calldata funds,\n        uint256 limit,\n        uint256 deadline\n    ) external payable returns (uint256);\n\n    struct SingleSwap {\n        bytes32 poolId;\n        SwapKind kind;\n        IERC20TokenV06 assetIn;\n        IERC20TokenV06 assetOut;\n        uint256 amount;\n        bytes userData;\n    }\n\n    struct FundManagement {\n        address sender;\n        bool fromInternalBalance;\n        address payable recipient;\n        bool toInternalBalance;\n    }\n}\n\ncontract MixinBalancerV2 {\n\n    using LibERC20TokenV06 for IERC20TokenV06;\n\n    struct BalancerV2BridgeData {\n        IBalancerV2Vault vault;\n        bytes32 poolId;\n    }\n\n    function _tradeBalancerV2(\n        IERC20TokenV06 sellToken,\n        IERC20TokenV06 buyToken,\n        uint256 sellAmount,\n        bytes memory bridgeData\n    )\n        internal\n        returns (uint256 boughtAmount)\n    {\n        // Decode the bridge data.\n        BalancerV2BridgeData memory data = abi.decode(bridgeData, (BalancerV2BridgeData));\n\n        // Grant an allowance to the exchange to spend `fromTokenAddress` token.\n        sellToken.approveIfBelow(address(data.vault), sellAmount);\n\n        // Sell the entire sellAmount\n        IBalancerV2Vault.SingleSwap memory request = IBalancerV2Vault.SingleSwap({\n            poolId: data.poolId,\n            kind: IBalancerV2Vault.SwapKind.GIVEN_IN,\n            assetIn: sellToken,\n            assetOut: buyToken,\n            amount: sellAmount, // amount in\n            userData: \"\"\n        });\n\n        IBalancerV2Vault.FundManagement memory funds = IBalancerV2Vault.FundManagement({\n            sender: address(this),\n            fromInternalBalance: false,\n            recipient: payable(address(this)),\n            toInternalBalance: false\n        });\n\n        boughtAmount = data.vault.swap(\n            request,\n            funds,\n            1, // min amount out\n            block.timestamp // expires after this block\n        );\n        return boughtAmount;\n    }\n}\n",
        "./BancorSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinBancor.sol\";\nimport \"./SwapRevertSampler.sol\";\n\ncontract CompilerHack {}\n\ncontract BancorSampler is\n    CompilerHack,\n    MixinBancor,\n    SwapRevertSampler\n{\n\n    constructor(IEtherTokenV06 weth)\n        public\n        MixinBancor(weth)\n    { }\n\n    /// @dev Base gas limit for Bancor calls.\n    uint256 constant private BANCOR_CALL_GAS = 300e3; // 300k\n\n    struct BancorSamplerOpts {\n        IBancorRegistry registry;\n        address[][] paths;\n    }\n\n    function sampleSwapFromBancor(\n        address sellToken,\n        address buyToken,\n        bytes memory bridgeData,\n        uint256 takerTokenAmount\n    )\n        external\n        returns (uint256)\n    {\n        return _tradeBancorInternal(\n            IEtherTokenV06(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2),\n            IERC20TokenV06(buyToken),\n            takerTokenAmount,\n            bridgeData\n        );\n    }\n\n    /// @dev Sample sell quotes from Bancor.\n    /// @param opts BancorSamplerOpts The Bancor registry contract address and paths\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return bancorNetwork the Bancor Network address\n    /// @return path the selected conversion path from bancor\n    /// @return gasUsed gas consumed in each sample sell\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromBancor(\n        BancorSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        returns (\n            address bancorNetwork,\n            address[] memory path,\n            uint256[] memory gasUsed,\n            uint256[] memory makerTokenAmounts\n        )\n    {\n        if (opts.paths.length == 0) {\n            return (bancorNetwork, path, gasUsed, makerTokenAmounts);\n        }\n\n        (bancorNetwork, path) = _findBestPath(opts, takerToken, makerToken, takerTokenAmounts);\n\n        (gasUsed, makerTokenAmounts) = _sampleSwapQuotesRevert(\n            SwapRevertSamplerQuoteOpts({\n                sellToken: takerToken,\n                buyToken: makerToken,\n                bridgeData: abi.encode(bancorNetwork, path),\n                getSwapQuoteCallback: this.sampleSwapFromBancor\n            }),\n            takerTokenAmounts\n        );\n\n        return (bancorNetwork, path, gasUsed, makerTokenAmounts);\n    }\n\n    /// @dev Sample buy quotes from Bancor. Unimplemented\n    /// @param opts BancorSamplerOpts The Bancor registry contract address and paths\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return bancorNetwork the Bancor Network address\n    /// @return path the selected conversion path from bancor\n    /// @return gasUsed gas consumed in each sample sell\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromBancor(\n        BancorSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (address bancorNetwork, address[] memory path, uint256[] memory gasUsed, uint256[] memory takerTokenAmounts)\n    {\n    }\n\n    function _findBestPath(\n        BancorSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        internal\n        view\n        returns (address bancorNetwork, address[] memory path)\n    {\n        bancorNetwork = opts.registry.getAddress(opts.registry.BANCOR_NETWORK());\n        if (opts.paths.length == 0) {\n            return (bancorNetwork, path);\n        }\n        uint256 maxBoughtAmount = 0;\n        // Find the best path by selling the largest taker amount\n        for (uint256 i = 0; i < opts.paths.length; i++) {\n            if (opts.paths[i].length < 2) {\n                continue;\n            }\n\n            try\n                IBancorNetwork(bancorNetwork)\n                    .rateByPath\n                        {gas: BANCOR_CALL_GAS}\n                        (opts.paths[i], takerTokenAmounts[takerTokenAmounts.length-1])\n                returns (uint256 amount)\n            {\n                if (amount > maxBoughtAmount) {\n                    maxBoughtAmount = amount;\n                    path = opts.paths[i];\n                }\n            } catch {\n                // Swallow failures, leaving all results as zero.\n                continue;\n            }\n        }\n    }\n}\n",
        "@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinBancor.sol": "// SPDX-License-Identifier: Apache-2.0\n\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol\";\nimport \"../IBridgeAdapter.sol\";\n\n\ninterface IBancorNetwork {\n    function convertByPath(\n        IERC20TokenV06[] calldata _path,\n        uint256 _amount,\n        uint256 _minReturn,\n        address _beneficiary,\n        address _affiliateAccount,\n        uint256 _affiliateFee\n    )\n        external\n        payable\n        returns (uint256);\n    function conversionPath(address _sourceToken, address _targetToken) external view returns (address[] memory);\n    function rateByPath(address[] memory _path, uint256 _amount) external view returns (uint256);\n}\n\ninterface IBancorRegistry {\n    function getAddress(bytes32 _contractName) external view returns (address);\n    function BANCOR_NETWORK() external view returns (bytes32);\n}\n\n\ncontract MixinBancor {\n\n    /// @dev Bancor ETH pseudo-address.\n    IERC20TokenV06 constant public BANCOR_ETH_ADDRESS =\n        IERC20TokenV06(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\n    IEtherTokenV06 private immutable WETH;\n\n    constructor(IEtherTokenV06 weth)\n        public\n    {\n        WETH = weth;\n    }\n\n    function _tradeBancor(\n        IERC20TokenV06 buyToken,\n        uint256 sellAmount,\n        bytes memory bridgeData\n    )\n        internal\n        returns (uint256 boughtAmount)\n    {\n        return _tradeBancorInternal(WETH, buyToken, sellAmount, bridgeData);\n    }\n\n    function _tradeBancorInternal(\n        IEtherTokenV06 weth,\n        IERC20TokenV06 buyToken,\n        uint256 sellAmount,\n        bytes memory bridgeData\n    )\n        internal\n        returns (uint256 boughtAmount)\n    {\n        // Decode the bridge data.\n        IBancorNetwork bancorNetworkAddress;\n        IERC20TokenV06[] memory path;\n        {\n            address[] memory _path;\n            (\n                bancorNetworkAddress,\n                _path\n            ) = abi.decode(bridgeData, (IBancorNetwork, address[]));\n            // To get around `abi.decode()` not supporting interface array types.\n            assembly { path := _path }\n        }\n\n        require(path.length >= 2, \"MixinBancor/PATH_LENGTH_MUST_BE_AT_LEAST_TWO\");\n        require(\n            path[path.length - 1] == buyToken ||\n            (path[path.length - 1] == BANCOR_ETH_ADDRESS && buyToken == weth),\n            \"MixinBancor/LAST_ELEMENT_OF_PATH_MUST_MATCH_OUTPUT_TOKEN\"\n        );\n\n        uint256 payableAmount = 0;\n        // If it's ETH in the path then withdraw from WETH\n        // The Bancor path will have ETH as the 0xeee address\n        // Bancor expects to be paid in ETH not WETH\n        if (path[0] == BANCOR_ETH_ADDRESS) {\n            weth.withdraw(sellAmount);\n            payableAmount = sellAmount;\n        } else {\n            // Grant an allowance to the Bancor Network.\n            LibERC20TokenV06.approveIfBelow(\n                path[0],\n                address(bancorNetworkAddress),\n                sellAmount\n            );\n        }\n\n        // Convert the tokens\n        boughtAmount = bancorNetworkAddress.convertByPath{value: payableAmount}(\n            path, // path originating with source token and terminating in destination token\n            sellAmount, // amount of source token to trade\n            1, // minimum amount of destination token expected to receive\n            address(this), // beneficiary\n            address(0), // affiliateAccount; no fee paid\n            0 // affiliateFee; no fee paid\n        );\n        if (path[path.length - 1] == BANCOR_ETH_ADDRESS) {\n            weth.deposit{value: boughtAmount}();\n        }\n\n        return boughtAmount;\n    }\n}\n",
        "@0x/contracts-zero-ex/contracts/src/transformers/bridges/IBridgeAdapter.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\n\n\ninterface IBridgeAdapter {\n\n    struct BridgeOrder {\n        // Upper 16 bytes: uint128 protocol ID (right-aligned)\n        // Lower 16 bytes: ASCII source name (left-aligned)\n        bytes32 source;\n        uint256 takerTokenAmount;\n        uint256 makerTokenAmount;\n        bytes bridgeData;\n    }\n\n    /// @dev Emitted when tokens are swapped with an external source.\n    /// @param source A unique ID for the source, where the upper 16 bytes\n    ///        encodes the (right-aligned) uint128 protocol ID and the\n    ///        lower 16 bytes encodes an ASCII source name.\n    /// @param inputToken The token the bridge is converting from.\n    /// @param outputToken The token the bridge is converting to.\n    /// @param inputTokenAmount Amount of input token sold.\n    /// @param outputTokenAmount Amount of output token bought.\n    event BridgeFill(\n        bytes32 source,\n        IERC20TokenV06 inputToken,\n        IERC20TokenV06 outputToken,\n        uint256 inputTokenAmount,\n        uint256 outputTokenAmount\n    );\n\n    function trade(\n        BridgeOrder calldata order,\n        IERC20TokenV06 sellToken,\n        IERC20TokenV06 buyToken,\n        uint256 sellAmount\n    )\n        external\n        returns (uint256 boughtAmount);\n}\n",
        "./CurveSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinCurve.sol\";\nimport \"./SwapRevertSampler.sol\";\n\n\ncontract CurveSampler is\n    MixinCurve,\n    SwapRevertSampler\n{\n    /// @dev Information for sampling from curve sources.\n    struct CurveInfo {\n        address poolAddress;\n        bytes4 sellQuoteFunctionSelector;\n        bytes4 buyQuoteFunctionSelector;\n    }\n\n    constructor(IEtherTokenV06 weth)\n        public\n        MixinCurve(weth)\n    { }\n\n    function sampleSwapFromCurve(\n        address sellToken,\n        address buyToken,\n        bytes memory bridgeData,\n        uint256 takerTokenAmount\n    )\n        external\n        returns (uint256)\n    {\n        return _tradeCurveInternal(\n            IEtherTokenV06(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2),\n            IERC20TokenV06(sellToken),\n            IERC20TokenV06(buyToken),\n            takerTokenAmount,\n            bridgeData\n        );\n    }\n\n    /// @dev Sample sell quotes from Curve.\n    /// @param curveInfo Curve information specific to this token pair.\n    /// @param takerToken The taker token to sell.\n    /// @param makerToken The maker token to buy.\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return gasUsed gas consumed in each sample sell\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromCurve(\n        CurveBridgeData memory curveInfo,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        returns (uint256[] memory gasUsed, uint256[] memory makerTokenAmounts)\n    {\n        (gasUsed, makerTokenAmounts) = _sampleSwapQuotesRevert(\n            SwapRevertSamplerQuoteOpts({\n                sellToken: takerToken,\n                buyToken: makerToken,\n                bridgeData: abi.encode(curveInfo),\n                getSwapQuoteCallback: this.sampleSwapFromCurve\n            }),\n            takerTokenAmounts\n        );\n    }\n\n    /// @dev Sample buy quotes from Curve.\n    /// @param curveInfo Curve information specific to this token pair.\n    /// @param takerToken The taker token to sell.\n    /// @param makerToken The maker token to buy.\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return gasUsed gas consumed in each sample sell\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromCurve(\n        CurveBridgeData memory curveInfo,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        returns (uint256[] memory gasUsed, uint256[] memory takerTokenAmounts)\n    {\n        (gasUsed, takerTokenAmounts) = _sampleSwapApproximateBuys(\n            SwapRevertSamplerBuyQuoteOpts({\n                sellToken: takerToken,\n                buyToken: makerToken,\n                sellTokenData: abi.encode(curveInfo),\n                buyTokenData: abi.encode(\n                    CurveBridgeData({\n                        curveAddress: curveInfo.curveAddress,\n                        exchangeFunctionSelector: curveInfo.exchangeFunctionSelector,\n                        fromCoinIdx: curveInfo.toCoinIdx,\n                        toCoinIdx: curveInfo.fromCoinIdx\n                    })\n                ),\n                getSwapQuoteCallback: this.sampleSwapFromCurve\n            }),\n            makerTokenAmounts\n        );\n    }\n}\n",
        "@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinCurve.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol\";\n\ncontract MixinCurve {\n\n    using LibERC20TokenV06 for IERC20TokenV06;\n    using LibSafeMathV06 for uint256;\n    using LibRichErrorsV06 for bytes;\n\n    /// @dev Mainnet address of the WETH contract.\n    IEtherTokenV06 private immutable WETH;\n\n    constructor(IEtherTokenV06 weth)\n        public\n    {\n        WETH = weth;\n    }\n\n\n    struct CurveBridgeData {\n        address curveAddress;\n        bytes4 exchangeFunctionSelector;\n        int128 fromCoinIdx;\n        int128 toCoinIdx;\n    }\n\n    function _tradeCurve(\n        IERC20TokenV06 sellToken,\n        IERC20TokenV06 buyToken,\n        uint256 sellAmount,\n        bytes memory bridgeData\n    )\n        internal\n        returns (uint256 boughtAmount)\n    {\n        return _tradeCurveInternal(WETH, sellToken, buyToken, sellAmount, bridgeData);\n    }\n\n    function _tradeCurveInternal(\n        IEtherTokenV06 weth,\n        IERC20TokenV06 sellToken,\n        IERC20TokenV06 buyToken,\n        uint256 sellAmount,\n        bytes memory bridgeData\n    )\n        internal\n        returns (uint256 boughtAmount)\n    {\n        // Decode the bridge data to get the Curve metadata.\n        CurveBridgeData memory data = abi.decode(bridgeData, (CurveBridgeData));\n        uint256 payableAmount;\n        if (sellToken == weth) {\n            payableAmount = sellAmount;\n            weth.withdraw(sellAmount);\n        } else {\n            sellToken.approveIfBelow(data.curveAddress, sellAmount);\n        }\n\n        uint256 beforeBalance = buyToken.balanceOf(address(this));\n        (bool success, bytes memory resultData) =\n            data.curveAddress.call{value: payableAmount}(abi.encodeWithSelector(\n                data.exchangeFunctionSelector,\n                data.fromCoinIdx,\n                data.toCoinIdx,\n                // dx\n                sellAmount,\n                // min dy\n                1\n            ));\n        if (!success) {\n            resultData.rrevert();\n        }\n\n        if (buyToken == weth) {\n            boughtAmount = address(this).balance;\n            weth.deposit{ value: boughtAmount }();\n        }\n\n        return buyToken.balanceOf(address(this)).safeSub(beforeBalance);\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./errors/LibRichErrorsV06.sol\";\nimport \"./errors/LibSafeMathRichErrorsV06.sol\";\n\n\nlibrary LibSafeMathV06 {\n\n    function safeMul(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        if (c / a != b) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.MULTIPLICATION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function safeDiv(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b == 0) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.DIVISION_BY_ZERO,\n                a,\n                b\n            ));\n        }\n        uint256 c = a / b;\n        return c;\n    }\n\n    function safeSub(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b > a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.SUBTRACTION_UNDERFLOW,\n                a,\n                b\n            ));\n        }\n        return a - b;\n    }\n\n    function safeAdd(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint256 c = a + b;\n        if (c < a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.ADDITION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function max256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a < b ? a : b;\n    }\n\n    function safeMul128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (a == 0) {\n            return 0;\n        }\n        uint128 c = a * b;\n        if (c / a != b) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.MULTIPLICATION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function safeDiv128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (b == 0) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.DIVISION_BY_ZERO,\n                a,\n                b\n            ));\n        }\n        uint128 c = a / b;\n        return c;\n    }\n\n    function safeSub128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (b > a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.SUBTRACTION_UNDERFLOW,\n                a,\n                b\n            ));\n        }\n        return a - b;\n    }\n\n    function safeAdd128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        uint128 c = a + b;\n        if (c < a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.ADDITION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function max128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        return a < b ? a : b;\n    }\n\n    function safeDowncastToUint128(uint256 a)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (a > type(uint128).max) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256DowncastError(\n                LibSafeMathRichErrorsV06.DowncastErrorCodes.VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT128,\n                a\n            ));\n        }\n        return uint128(a);\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/errors/LibSafeMathRichErrorsV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibSafeMathRichErrorsV06 {\n\n    // bytes4(keccak256(\"Uint256BinOpError(uint8,uint256,uint256)\"))\n    bytes4 internal constant UINT256_BINOP_ERROR_SELECTOR =\n        0xe946c1bb;\n\n    // bytes4(keccak256(\"Uint256DowncastError(uint8,uint256)\"))\n    bytes4 internal constant UINT256_DOWNCAST_ERROR_SELECTOR =\n        0xc996af7b;\n\n    enum BinOpErrorCodes {\n        ADDITION_OVERFLOW,\n        MULTIPLICATION_OVERFLOW,\n        SUBTRACTION_UNDERFLOW,\n        DIVISION_BY_ZERO\n    }\n\n    enum DowncastErrorCodes {\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT32,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT64,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT96,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT128\n    }\n\n    // solhint-disable func-name-mixedcase\n    function Uint256BinOpError(\n        BinOpErrorCodes errorCode,\n        uint256 a,\n        uint256 b\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            UINT256_BINOP_ERROR_SELECTOR,\n            errorCode,\n            a,\n            b\n        );\n    }\n\n    function Uint256DowncastError(\n        DowncastErrorCodes errorCode,\n        uint256 a\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            UINT256_DOWNCAST_ERROR_SELECTOR,\n            errorCode,\n            a\n        );\n    }\n}\n",
        "./DODOSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinDodo.sol\";\nimport \"./SwapRevertSampler.sol\";\n\n\ninterface IDODOZoo {\n    function getDODO(address baseToken, address quoteToken) external view returns (address);\n}\n\ncontract DODOSampler is\n    MixinDodo,\n    SwapRevertSampler\n{\n\n    struct DODOSamplerOpts {\n        address registry;\n        address helper;\n    }\n\n    function sampleSwapFromDodo(\n        address sellToken,\n        address buyToken,\n        bytes memory bridgeData,\n        uint256 takerTokenAmount\n    )\n        external\n        returns (uint256)\n    {\n        return _tradeDodo(\n            IERC20TokenV06(sellToken),\n            takerTokenAmount,\n            bridgeData\n        );\n    }\n\n    /// @dev Sample sell quotes from DODO.\n    /// @param opts DODOSamplerOpts DODO Registry and helper addresses\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return sellBase whether the bridge needs to sell the base token\n    /// @return pool the DODO pool address\n    /// @return gasUsed gas consumed in each sample sell\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromDODO(\n        DODOSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        returns (\n            bool sellBase,\n            address pool,\n            uint256[] memory gasUsed,\n            uint256[] memory makerTokenAmounts\n        )\n    {\n        pool = IDODOZoo(opts.registry).getDODO(takerToken, makerToken);\n        address baseToken;\n        // If pool exists we have the correct order of Base/Quote\n        if (pool != address(0)) {\n            baseToken = takerToken;\n            sellBase = true;\n        } else {\n            pool = IDODOZoo(opts.registry).getDODO(makerToken, takerToken);\n            // No pool either direction\n            if (address(pool) == address(0)) {\n                return (sellBase, pool, gasUsed, makerTokenAmounts);\n            }\n            baseToken = makerToken;\n            sellBase = false;\n        }\n\n        (gasUsed, makerTokenAmounts) = _sampleSwapQuotesRevert(\n            SwapRevertSamplerQuoteOpts({\n                sellToken: takerToken,\n                buyToken: makerToken,\n                bridgeData: abi.encode(opts.helper, pool, sellBase),\n                getSwapQuoteCallback: this.sampleSwapFromDodo\n            }),\n            takerTokenAmounts\n        );\n    }\n\n    /// @dev Sample buy quotes from DODO.\n    /// @param opts DODOSamplerOpts DODO Registry and helper addresses\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token sell amount for each sample.\n    /// @return sellBase whether the bridge needs to sell the base token\n    /// @return pool the DODO pool address\n    /// @return gasUsed gas consumed in each sample sell\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromDODO(\n        DODOSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        returns (\n            bool sellBase,\n            address pool,\n            uint256[] memory gasUsed,\n            uint256[] memory takerTokenAmounts\n        )\n    {\n        // Pool is BASE/QUOTE\n        // Look up the pool from the taker/maker combination\n        pool = IDODOZoo(opts.registry).getDODO(takerToken, makerToken);\n        address baseToken;\n        // If pool exists we have the correct order of Base/Quote\n        if (pool != address(0)) {\n            baseToken = takerToken;\n            sellBase = true;\n        } else {\n            // Look up the pool from the maker/taker combination\n            pool = IDODOZoo(opts.registry).getDODO(makerToken, takerToken);\n            // No pool either direction\n            if (address(pool) == address(0)) {\n                return (sellBase, pool, gasUsed, takerTokenAmounts);\n            }\n            baseToken = makerToken;\n            sellBase = false;\n        }\n\n        (gasUsed, takerTokenAmounts) = _sampleSwapApproximateBuys(\n            SwapRevertSamplerBuyQuoteOpts({\n                sellToken: takerToken,\n                buyToken: makerToken,\n                sellTokenData: abi.encode(opts.helper, pool, sellBase),\n                buyTokenData: abi.encode(opts.helper, pool, !sellBase),\n                getSwapQuoteCallback: this.sampleSwapFromDodo\n            }),\n            makerTokenAmounts\n        );\n    }\n}\n",
        "@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinDodo.sol": "// SPDX-License-Identifier: Apache-2.0\n\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"../IBridgeAdapter.sol\";\n\n\ninterface IDODO {\n    function sellBaseToken(\n        uint256 amount,\n        uint256 minReceiveQuote,\n        bytes calldata data\n    )\n        external\n        returns (uint256);\n\n    function buyBaseToken(\n        uint256 amount,\n        uint256 maxPayQuote,\n        bytes calldata data\n    )\n        external\n        returns (uint256);\n}\n\n\ninterface IDODOHelper {\n    function querySellQuoteToken(\n        IDODO dodo,\n        uint256 amount\n    )\n        external\n        view\n        returns (uint256);\n}\n\n\ncontract MixinDodo {\n\n    using LibERC20TokenV06 for IERC20TokenV06;\n\n    function _tradeDodo(\n        IERC20TokenV06 sellToken,\n        uint256 sellAmount,\n        bytes memory bridgeData\n    )\n        internal\n        returns (uint256 boughtAmount)\n    {\n        (IDODOHelper helper, IDODO pool, bool isSellBase) =\n            abi.decode(bridgeData, (IDODOHelper, IDODO, bool));\n\n        // Grant the Dodo pool contract an allowance to sell the first token.\n        sellToken.approveIfBelow(address(pool), sellAmount);\n\n        if (isSellBase) {\n            // Sell the Base token directly against the contract\n            boughtAmount = pool.sellBaseToken(\n                // amount to sell\n                sellAmount,\n                // min receive amount\n                1,\n                new bytes(0)\n            );\n        } else {\n            // Need to re-calculate the sell quote amount into buyBase\n            boughtAmount = helper.querySellQuoteToken(\n                pool,\n                sellAmount\n            );\n            pool.buyBaseToken(\n                // amount to buy\n                boughtAmount,\n                // max pay amount\n                sellAmount,\n                new bytes(0)\n            );\n        }\n\n        return boughtAmount;\n    }\n}\n",
        "./DODOV2Sampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinDodoV2.sol\";\nimport \"./SwapRevertSampler.sol\";\n\ninterface IDODOV2Registry {\n    function getDODOPool(address baseToken, address quoteToken)\n        external\n        view\n        returns (address[] memory machines);\n}\n\ncontract DODOV2Sampler is\n    MixinDodoV2,\n    SwapRevertSampler\n{\n\n    /// @dev Gas limit for DODO V2 calls.\n    uint256 constant private DODO_V2_CALL_GAS = 300e3; // 300k\n\n    function sampleSwapFromDodoV2(\n        address sellToken,\n        address buyToken,\n        bytes memory bridgeData,\n        uint256 takerTokenAmount\n    )\n        external\n        returns (uint256)\n    {\n        return _tradeDodoV2(\n            IERC20TokenV06(sellToken),\n            takerTokenAmount,\n            bridgeData\n        );\n    }\n\n    /// @dev Sample sell quotes from DODO V2.\n    /// @param registry Address of the registry to look up.\n    /// @param offset offset index for the pool in the registry.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return sellBase whether the bridge needs to sell the base token\n    /// @return pool the DODO pool address\n    /// @return gasUsed gas consumed in each sample sell\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromDODOV2(\n        address registry,\n        uint256 offset,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        returns (\n            bool sellBase,\n            address pool,\n            uint256[] memory gasUsed,\n            uint256[] memory makerTokenAmounts\n        )\n    {\n        (pool, sellBase) = _getNextDODOV2Pool(registry, offset, takerToken, makerToken);\n        if (pool == address(0)) {\n            return (sellBase, pool, gasUsed, makerTokenAmounts);\n        }\n\n        (gasUsed, makerTokenAmounts) = _sampleSwapQuotesRevert(\n            SwapRevertSamplerQuoteOpts({\n                sellToken: takerToken,\n                buyToken: makerToken,\n                bridgeData: abi.encode(pool, sellBase),\n                getSwapQuoteCallback: this.sampleSwapFromDodoV2\n            }),\n            takerTokenAmounts\n        );\n    }\n\n    /// @dev Sample buy quotes from DODO.\n    /// @param registry Address of the registry to look up.\n    /// @param offset offset index for the pool in the registry.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token sell amount for each sample.\n    /// @return sellBase whether the bridge needs to sell the base token\n    /// @return pool the DODO pool address\n    /// @return gasUsed gas consumed in each sample sell\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromDODOV2(\n        address registry,\n        uint256 offset,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        returns (\n            bool sellBase,\n            address pool,\n            uint256[] memory gasUsed,\n            uint256[] memory takerTokenAmounts\n        )\n    {\n        (pool, sellBase) = _getNextDODOV2Pool(registry, offset, takerToken, makerToken);\n        if (pool == address(0)) {\n            return (sellBase, pool, gasUsed, takerTokenAmounts);\n        }\n\n        (gasUsed, takerTokenAmounts) = _sampleSwapApproximateBuys(\n            SwapRevertSamplerBuyQuoteOpts({\n                sellToken: takerToken,\n                buyToken: makerToken,\n                sellTokenData: abi.encode(pool, sellBase),\n                buyTokenData: abi.encode(pool, !sellBase),\n                getSwapQuoteCallback: this.sampleSwapFromDodoV2\n            }),\n            makerTokenAmounts\n        );\n    }\n\n    function _getNextDODOV2Pool(\n        address registry,\n        uint256 offset,\n        address takerToken,\n        address makerToken\n    )\n        internal\n        view\n        returns (address machine, bool sellBase)\n    {\n        // Query in base -> quote direction, if a pool is found then we are selling the base\n        address[] memory machines = IDODOV2Registry(registry).getDODOPool(takerToken, makerToken);\n        sellBase = true;\n        if (machines.length == 0) {\n            // Query in quote -> base direction, if a pool is found then we are selling the quote\n            machines = IDODOV2Registry(registry).getDODOPool(makerToken, takerToken);\n            sellBase = false;\n        }\n\n        if (offset >= machines.length) {\n            return (address(0), false);\n        }\n\n        machine = machines[offset];\n    }\n\n}\n",
        "@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinDodoV2.sol": "// SPDX-License-Identifier: Apache-2.0\n\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"../IBridgeAdapter.sol\";\n\n\ninterface IDODOV2 {\n    function sellBase(address recipient)\n        external\n        returns (uint256);\n\n    function sellQuote(address recipient)\n        external\n        returns (uint256);\n}\n\n\ncontract MixinDodoV2 {\n\n    using LibERC20TokenV06 for IERC20TokenV06;\n\n    function _tradeDodoV2(\n        IERC20TokenV06 sellToken,\n        uint256 sellAmount,\n        bytes memory bridgeData\n    )\n        internal\n        returns (uint256 boughtAmount)\n    {\n        (IDODOV2 pool, bool isSellBase) =\n            abi.decode(bridgeData, (IDODOV2, bool));\n\n        // Transfer the tokens into the pool\n        sellToken.compatTransfer(address(pool), sellAmount);\n\n        boughtAmount = isSellBase ?\n            pool.sellBase(address(this))\n            : pool.sellQuote(address(this));\n    }\n}\n",
        "./Eth2DaiSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinOasis.sol\";\nimport \"./SwapRevertSampler.sol\";\n\n\ncontract Eth2DaiSampler is\n    MixinOasis,\n    SwapRevertSampler\n{\n\n    function sampleSwapFromOasis(\n        address sellToken,\n        address buyToken,\n        bytes memory bridgeData,\n        uint256 takerTokenAmount\n    )\n        external\n        returns (uint256)\n    {\n        return _tradeOasis(\n            IERC20TokenV06(sellToken),\n            IERC20TokenV06(buyToken),\n            takerTokenAmount,\n            bridgeData\n        );\n    }\n\n    /// @dev Sample sell quotes from Eth2Dai/Oasis.\n    /// @param router Address of the Eth2Dai/Oasis contract\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return gasUsed gas consumed in each sample sell\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromEth2Dai(\n        address router,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        returns (uint256[] memory gasUsed, uint256[] memory makerTokenAmounts)\n    {\n        (gasUsed, makerTokenAmounts) = _sampleSwapQuotesRevert(\n            SwapRevertSamplerQuoteOpts({\n                sellToken: takerToken,\n                buyToken: makerToken,\n                bridgeData: abi.encode(router),\n                getSwapQuoteCallback: this.sampleSwapFromOasis\n            }),\n            takerTokenAmounts\n        );\n    }\n\n    /// @dev Sample buy quotes from Eth2Dai/Oasis.\n    /// @param router Address of the Eth2Dai/Oasis contract\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Maker token sell amount for each sample.\n    /// @return gasUsed gas consumed in each sample sell\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromEth2Dai(\n        address router,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        returns (uint256[] memory gasUsed, uint256[] memory takerTokenAmounts)\n    {\n        (gasUsed, takerTokenAmounts) = _sampleSwapApproximateBuys(\n            SwapRevertSamplerBuyQuoteOpts({\n                sellToken: takerToken,\n                buyToken: makerToken,\n                sellTokenData: abi.encode(router),\n                buyTokenData: abi.encode(router),\n                getSwapQuoteCallback: this.sampleSwapFromOasis\n            }),\n            makerTokenAmounts\n        );\n    }\n}\n",
        "@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinOasis.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"../IBridgeAdapter.sol\";\n\ninterface IOasis {\n\n    /// @dev Sell `sellAmount` of `sellToken` token and receive `buyToken` token.\n    /// @param sellToken The token being sold.\n    /// @param sellAmount The amount of `sellToken` token being sold.\n    /// @param buyToken The token being bought.\n    /// @param minBoughtAmount Minimum amount of `buyToken` token to buy.\n    /// @return boughtAmount Amount of `buyToken` bought.\n    function sellAllAmount(\n        IERC20TokenV06 sellToken,\n        uint256 sellAmount,\n        IERC20TokenV06 buyToken,\n        uint256 minBoughtAmount\n    )\n        external\n        returns (uint256 boughtAmount);\n}\n\ncontract MixinOasis {\n\n    using LibERC20TokenV06 for IERC20TokenV06;\n\n    function _tradeOasis(\n        IERC20TokenV06 sellToken,\n        IERC20TokenV06 buyToken,\n        uint256 sellAmount,\n        bytes memory bridgeData\n    )\n        internal\n        returns (uint256 boughtAmount)\n    {\n\n        (IOasis oasis) = abi.decode(bridgeData, (IOasis));\n\n        // Grant an allowance to the exchange to spend `sellToken` token.\n        sellToken.approveIfBelow(\n            address(oasis),\n            sellAmount\n        );\n        // Try to sell all of this contract's `sellToken` token balance.\n        boughtAmount = oasis.sellAllAmount(\n            sellToken,\n            sellAmount,\n            buyToken,\n            // min fill amount\n            1\n        );\n        return boughtAmount;\n    }\n}\n",
        "./KyberSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IKyberNetwork.sol\";\nimport \"@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinKyber.sol\";\nimport \"./SwapRevertSampler.sol\";\n\ncontract KyberSampler is\n    MixinKyber,\n    SwapRevertSampler\n{\n\n    /// @dev Gas limit for Kyber calls.\n    uint256 constant private KYBER_CALL_GAS = 500e3; // 500k\n    /// @dev Kyber ETH pseudo-address.\n    address constant internal KYBER_ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n    constructor(IEtherTokenV06 weth)\n        public\n        MixinKyber(weth)\n    { }\n\n    struct KyberSamplerOpts {\n        uint256 reserveOffset;\n        address hintHandler;\n        address networkProxy;\n        address weth;\n        bytes hint;\n    }\n\n    function sampleSwapFromKyber(\n        address sellToken,\n        address buyToken,\n        bytes memory bridgeData,\n        uint256 takerTokenAmount\n    )\n        external\n        returns (uint256)\n    {\n        KyberSamplerOpts memory opts = abi.decode(bridgeData, (KyberSamplerOpts));\n        return _tradeKyberInternal(\n            // these are Immutable in MixinKyber, since they are only set in constructor they must be passed in\n            IERC20TokenV06(KYBER_ETH_ADDRESS),\n            IEtherTokenV06(opts.weth),\n            IERC20TokenV06(sellToken),\n            IERC20TokenV06(buyToken),\n            takerTokenAmount,\n            abi.encode(opts.networkProxy, opts.hint)\n        );\n    }\n\n    /// @dev Sample sell quotes from Kyber.\n    /// @param opts KyberSamplerOpts The nth reserve\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return reserveId The id of the reserve found at reserveOffset\n    /// @return hint The hint for the selected reserve\n    /// @return gasUsed Gas consumed per sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token amount.\n    function sampleSellsFromKyberNetwork(\n        KyberSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        returns (\n            bytes32 reserveId,\n            bytes memory hint,\n            uint256[] memory gasUsed,\n            uint256[] memory makerTokenAmounts\n        )\n    {\n        reserveId = _getNextReserveId(opts, takerToken, makerToken);\n        if (reserveId == 0x0) {\n            return (reserveId, hint, gasUsed, makerTokenAmounts);\n        }\n        opts.hint = this.encodeKyberHint(opts, reserveId, takerToken, makerToken);\n        hint = opts.hint;\n\n        (gasUsed, makerTokenAmounts) = _sampleSwapQuotesRevert(\n            SwapRevertSamplerQuoteOpts({\n                sellToken: takerToken,\n                buyToken: makerToken,\n                bridgeData: abi.encode(opts),\n                getSwapQuoteCallback: this.sampleSwapFromKyber\n            }),\n            takerTokenAmounts\n        );\n    }\n\n    /// @dev Sample buy quotes from Kyber.\n    /// @param opts KyberSamplerOpts The nth reserve\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return reserveId The id of the reserve found at reserveOffset\n    /// @return hint The hint for the selected reserve\n    /// @return gasUsed Gas consumed for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token amount.\n    function sampleBuysFromKyberNetwork(\n        KyberSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        returns (\n            bytes32 reserveId,\n            bytes memory hint,\n            uint256[] memory gasUsed,\n            uint256[] memory takerTokenAmounts\n        )\n    {\n        reserveId = _getNextReserveId(opts, takerToken, makerToken);\n        if (reserveId == 0x0) {\n            return (reserveId, hint, gasUsed, takerTokenAmounts);\n        }\n        opts.hint = this.encodeKyberHint(opts, reserveId, takerToken, makerToken);\n        hint = opts.hint;\n\n        (gasUsed, takerTokenAmounts) = _sampleSwapApproximateBuys(\n            SwapRevertSamplerBuyQuoteOpts({\n                sellToken: takerToken,\n                buyToken: makerToken,\n                sellTokenData: abi.encode(opts),\n                buyTokenData: abi.encode(opts),\n                getSwapQuoteCallback: this.sampleSwapFromKyber\n            }),\n            makerTokenAmounts\n        );\n    }\n\n    function encodeKyberHint(\n        KyberSamplerOpts memory opts,\n        bytes32 reserveId,\n        address takerToken,\n        address makerToken\n    )\n        public\n        view\n        returns (bytes memory hint)\n    {\n        // Build a hint selecting the single reserve\n        IKyberHintHandler kyberHint = IKyberHintHandler(opts.hintHandler);\n\n        // All other reserves should be ignored with this hint\n        bytes32[] memory selectedReserves = new bytes32[](1);\n        selectedReserves[0] = reserveId;\n        uint256[] memory emptySplits = new uint256[](0);\n\n        if (takerToken == opts.weth) {\n            // ETH to Token\n            try\n                kyberHint.buildEthToTokenHint\n                    {gas: KYBER_CALL_GAS}\n                    (\n                        makerToken,\n                        IKyberHintHandler.TradeType.MaskIn,\n                        selectedReserves,\n                        emptySplits\n                    )\n                returns (bytes memory result)\n            {\n                return result;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n            }\n        } else if (makerToken == opts.weth) {\n            // Token to ETH\n            try\n                kyberHint.buildTokenToEthHint\n                    {gas: KYBER_CALL_GAS}\n                    (\n                        takerToken,\n                        IKyberHintHandler.TradeType.MaskIn,\n                        selectedReserves,\n                        emptySplits\n                    )\n                returns (bytes memory result)\n            {\n                return result;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n            }\n\n        } else {\n            // Token to Token\n            // We use the same reserve both ways\n            try\n                kyberHint.buildTokenToTokenHint\n                    {gas: KYBER_CALL_GAS}\n                    (\n                        takerToken,\n                        IKyberHintHandler.TradeType.MaskIn,\n                        selectedReserves,\n                        emptySplits,\n                        makerToken,\n                        IKyberHintHandler.TradeType.MaskIn,\n                        selectedReserves,\n                        emptySplits\n                    )\n                returns (bytes memory result)\n            {\n                return result;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n            }\n        }\n    }\n\n    function _getNextReserveId(\n        KyberSamplerOpts memory opts,\n        address takerToken,\n        address makerToken\n    )\n        internal\n        view\n        returns (bytes32 reserveId)\n    {\n        // Fetch the registered reserves for this pair\n        IKyberHintHandler kyberHint = IKyberHintHandler(opts.hintHandler);\n        (bytes32[] memory reserveIds, ,) = kyberHint.getTradingReserves(\n            takerToken == opts.weth ? KYBER_ETH_ADDRESS : takerToken,\n            makerToken == opts.weth ? KYBER_ETH_ADDRESS : makerToken,\n            true,\n            new bytes(0) // empty hint\n        );\n\n        if (opts.reserveOffset >= reserveIds.length) {\n            return 0x0;\n        }\n\n        reserveId = reserveIds[opts.reserveOffset];\n        // Ignore Kyber Bridged Reserves (0xbb)\n        if (uint256(reserveId >> 248) == 0xbb) {\n            return 0x0;\n        }\n\n        return reserveId;\n    }\n}\n",
        "./interfaces/IKyberNetwork.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n// Keepin everything together\ninterface IKyberNetwork {\n\n}\n\ninterface IKyberHintHandler {\n\n    enum TradeType {BestOfAll, MaskIn, MaskOut, Split}\n\n    enum ProcessWithRate {NotRequired, Required}\n\n    function getTradingReserves(\n        address tokenSrc,\n        address tokenDest,\n        bool isTokenToToken,\n        bytes calldata hint\n    )\n        external\n        view\n        returns (\n            bytes32[] memory reserveIds,\n            uint256[] memory splitValuesBps,\n            ProcessWithRate processWithRate\n        );\n\n    function buildTokenToEthHint(\n        address tokenSrc,\n        TradeType tokenToEthType,\n        bytes32[] calldata tokenToEthReserveIds,\n        uint256[] calldata tokenToEthSplits\n    )\n        external\n        view\n        returns (bytes memory hint);\n\n    function buildEthToTokenHint(\n        address tokenDest,\n        TradeType ethToTokenType,\n        bytes32[] calldata ethToTokenReserveIds,\n        uint256[] calldata ethToTokenSplits\n    )\n        external\n        view\n        returns (bytes memory hint);\n\n    function buildTokenToTokenHint(\n        address tokenSrc,\n        TradeType tokenToEthType,\n        bytes32[] calldata tokenToEthReserveIds,\n        uint256[] calldata tokenToEthSplits,\n        address tokenDest,\n        TradeType ethToTokenType,\n        bytes32[] calldata ethToTokenReserveIds,\n        uint256[] calldata ethToTokenSplits\n    )\n        external\n        view\n        returns (bytes memory hint);\n}\n",
        "@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinKyber.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol\";\nimport \"../IBridgeAdapter.sol\";\n\ninterface IKyberNetworkProxy {\n\n    /// @dev Sells `sellTokenAddress` tokens for `buyTokenAddress` tokens\n    /// using a hint for the reserve.\n    /// @param sellToken Token to sell.\n    /// @param sellAmount Amount of tokens to sell.\n    /// @param buyToken Token to buy.\n    /// @param recipientAddress Address to send bought tokens to.\n    /// @param maxBuyTokenAmount A limit on the amount of tokens to buy.\n    /// @param minConversionRate The minimal conversion rate. If actual rate\n    ///        is lower, trade is canceled.\n    /// @param walletId The wallet ID to send part of the fees\n    /// @param hint The hint for the selective inclusion (or exclusion) of reserves\n    /// @return boughtAmount Amount of tokens bought.\n    function tradeWithHint(\n        IERC20TokenV06 sellToken,\n        uint256 sellAmount,\n        IERC20TokenV06 buyToken,\n        address payable recipientAddress,\n        uint256 maxBuyTokenAmount,\n        uint256 minConversionRate,\n        address payable walletId,\n        bytes calldata hint\n    )\n        external\n        payable\n        returns (uint256 boughtAmount);\n\n    function getExpectedRateAfterFee(\n        address src,\n        address dest,\n        uint256 srcQty,\n        uint256 platformFeeBps,\n        bytes calldata hint\n    )\n        external\n        view\n        returns (uint256 expectedRate);\n}\n\ncontract MixinKyber {\n\n    using LibERC20TokenV06 for IERC20TokenV06;\n\n    /// @dev Address indicating the trade is using ETH\n    IERC20TokenV06 private immutable KYBER_ETH_ADDRESS =\n        IERC20TokenV06(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\n    /// @dev Mainnet address of the WETH contract.\n    IEtherTokenV06 private immutable WETH;\n\n    constructor(IEtherTokenV06 weth)\n        public\n    {\n        WETH = weth;\n    }\n\n    function _tradeKyber(\n        IERC20TokenV06 sellToken,\n        IERC20TokenV06 buyToken,\n        uint256 sellAmount,\n        bytes memory bridgeData\n    )\n        internal\n        returns (uint256 boughtAmount)\n    {\n        return _tradeKyberInternal(KYBER_ETH_ADDRESS, WETH, sellToken, buyToken, sellAmount, bridgeData);\n    }\n\n    function _tradeKyberInternal(\n        IERC20TokenV06 kyberEthAddress,\n        IEtherTokenV06 weth,\n        IERC20TokenV06 sellToken,\n        IERC20TokenV06 buyToken,\n        uint256 sellAmount,\n        bytes memory bridgeData\n    )\n        internal\n        returns (uint256 boughtAmount)\n    {\n        (IKyberNetworkProxy kyber, bytes memory hint) =\n            abi.decode(bridgeData, (IKyberNetworkProxy, bytes));\n\n        uint256 payableAmount = 0;\n        if (sellToken != weth) {\n            // If the input token is not WETH, grant an allowance to the exchange\n            // to spend them.\n            sellToken.approveIfBelow(\n                address(kyber),\n                sellAmount\n            );\n        } else {\n            // If the input token is WETH, unwrap it and attach it to the call.\n            payableAmount = sellAmount;\n            weth.withdraw(payableAmount);\n        }\n\n        // Try to sell all of this contract's input token balance through\n        // `KyberNetworkProxy.trade()`.\n        boughtAmount = kyber.tradeWithHint{ value: payableAmount }(\n            // Input token.\n            sellToken == weth ? kyberEthAddress : sellToken,\n            // Sell amount.\n            sellAmount,\n            // Output token.\n            buyToken == weth ? kyberEthAddress : buyToken,\n            // Transfer to this contract\n            address(uint160(address(this))),\n            // Buy as much as possible.\n            uint256(-1),\n            // Lowest minimum conversion rate\n            1,\n            // No affiliate address.\n            address(0),\n            hint\n        );\n        // If receving ETH, wrap it to WETH.\n        if (buyToken == weth) {\n            weth.deposit{ value: boughtAmount }();\n        }\n        return boughtAmount;\n    }\n}\n",
        "./KyberDmmSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinKyberDmm.sol\";\nimport \"./SwapRevertSampler.sol\";\ninterface IKyberDmmFactory {\n\n    function getPoolAtIndex(address token0, address token1, uint256 index)\n        external\n        view\n        returns (address);\n}\n\n\ncontract KyberDmmSampler is\n    MixinKyberDmm,\n    SwapRevertSampler\n{\n    /// @dev Gas limit for KyberDmm calls.\n    uint256 constant private KYBER_DMM_CALL_GAS = 150e3; // 150k\n\n    function sampleSwapFromKyberDmm(\n        address sellToken,\n        address buyToken,\n        bytes memory bridgeData,\n        uint256 takerTokenAmount\n    )\n        external\n        returns (uint256)\n    {\n        return _tradeKyberDmm(\n            IERC20TokenV06(buyToken),\n            takerTokenAmount,\n            bridgeData\n        );\n    }\n\n    /// @dev Sample sell quotes from KyberDmm.\n    /// @param router Router to look up tokens and amounts\n    /// @param path Token route. Should be takerToken -> makerToken\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return pools The pool addresses involved in the multi path trade\n    /// @return gasUsed gas consumed in each sample sell\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromKyberDmm(\n        address router,\n        address[] memory path,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        returns (\n            address[] memory pools,\n            uint256[] memory gasUsed,\n            uint256[] memory makerTokenAmounts\n        )\n    {\n        pools = _getKyberDmmPools(router, path);\n        if (pools.length == 0) {\n            return (pools, gasUsed, makerTokenAmounts);\n        }\n\n        (gasUsed, makerTokenAmounts) = _sampleSwapQuotesRevert(\n            SwapRevertSamplerQuoteOpts({\n                sellToken: path[0],\n                buyToken: path[path.length - 1],\n                bridgeData: abi.encode(router, pools, path),\n                getSwapQuoteCallback: this.sampleSwapFromKyberDmm\n            }),\n            takerTokenAmounts\n        );\n    }\n\n    /// @dev Sample buy quotes from KyberDmm.\n    /// @param router Router to look up tokens and amounts\n    /// @param path Token route. Should be takerToken -> makerToken.\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return pools The pool addresses involved in the multi path trade\n    /// @return gasUsed gas consumed in each sample sell\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromKyberDmm(\n        address router,\n        address[] memory path,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        returns (\n            address[] memory pools,\n            uint256[] memory gasUsed,\n            uint256[] memory takerTokenAmounts\n        )\n    {\n        pools = _getKyberDmmPools(router, path);\n        if (pools.length == 0) {\n            return (pools, gasUsed, takerTokenAmounts);\n        }\n\n        address[] memory reversedPath = new address[](path.length);\n        for (uint256 i = 0; i < path.length; ++i) {\n            reversedPath[i] = path[path.length - i - 1];\n        }\n        address[] memory reversedPools = _getKyberDmmPools(router, reversedPath);\n        (gasUsed, takerTokenAmounts) = _sampleSwapApproximateBuys(\n            SwapRevertSamplerBuyQuoteOpts({\n                sellToken: path[0],\n                buyToken: path[path.length - 1],\n                sellTokenData: abi.encode(router, pools, path),\n                buyTokenData: abi.encode(router, reversedPools, reversedPath),\n                getSwapQuoteCallback: this.sampleSwapFromKyberDmm\n            }),\n            makerTokenAmounts\n        );\n    }\n\n    function _getKyberDmmPools(\n        address router,\n        address[] memory path\n    )\n        private\n        view\n        returns (address[] memory pools)\n    {\n        pools = new address[](path.length - 1);\n        IKyberDmmFactory factory = IKyberDmmFactory(IKyberDmmRouter(router).factory());\n        for (uint256 i = 0; i < pools.length; i++) {\n            // Currently only supporting the first pool found at the index\n            try\n                factory.getPoolAtIndex\n                    {gas: KYBER_DMM_CALL_GAS}\n                    (path[i], path[i + 1], 0)\n                returns (address pool)\n            {\n                pools[i] = pool;\n            } catch (bytes memory) {\n                return new address[](0);\n            }\n        }\n    }\n}\n",
        "@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinKyberDmm.sol": "// SPDX-License-Identifier: Apache-2.0\n\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"../IBridgeAdapter.sol\";\n\n/*\n    KyberDmm Router\n*/\ninterface IKyberDmmRouter {\n\n    function factory() external view returns (address);\n\n    /// @dev Swaps an exact amount of input tokens for as many output tokens as possible, along the route determined by the path.\n    ///      The first element of path is the input token, the last is the output token, and any intermediate elements represent\n    ///      intermediate pairs to trade through (if, for example, a direct pair does not exist).\n    /// @param amountIn The amount of input tokens to send.\n    /// @param amountOutMin The minimum amount of output tokens that must be received for the transaction not to revert.\n    /// @param pools An array of pool addresses. pools.length must be >= 1.\n    /// @param path An array of token addresses. path.length must be >= 2. Pools for each consecutive pair of addresses must exist and have liquidity.\n    /// @param to Recipient of the output tokens.\n    /// @param deadline Unix timestamp after which the transaction will revert.\n    /// @return amounts The input token amount and all subsequent output token amounts.\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata pools,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n}\n\ncontract MixinKyberDmm {\n\n    using LibERC20TokenV06 for IERC20TokenV06;\n\n    function _tradeKyberDmm(\n        IERC20TokenV06 buyToken,\n        uint256 sellAmount,\n        bytes memory bridgeData\n    )\n        internal\n        returns (uint256 boughtAmount)\n    {\n        address router;\n        address[] memory pools;\n        address[] memory path;\n        (router, pools, path) = abi.decode(bridgeData, (address, address[], address[]));\n\n        require(pools.length >= 1, \"MixinKyberDmm/POOLS_LENGTH_MUST_BE_AT_LEAST_ONE\");\n        require(path.length == pools.length + 1, \"MixinKyberDmm/ARRAY_LENGTH_MISMATCH\");\n         require(\n             path[path.length - 1] == address(buyToken),\n             \"MixinKyberDmm/LAST_ELEMENT_OF_PATH_MUST_MATCH_OUTPUT_TOKEN\"\n         );\n        // Grant the KyberDmm router an allowance to sell the first token.\n        IERC20TokenV06(path[0]).approveIfBelow(address(router), sellAmount);\n\n        uint[] memory amounts = IKyberDmmRouter(router).swapExactTokensForTokens(\n             // Sell all tokens we hold.\n            sellAmount,\n             // Minimum buy amount.\n            1,\n            pools,\n            // Convert to `buyToken` along this path.\n            path,\n            // Recipient is `this`.\n            address(this),\n            // Expires after this block.\n            block.timestamp\n        );\n        return amounts[amounts.length-1];\n    }\n}\n",
        "./LiquidityProviderSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinZeroExBridge.sol\";\nimport \"./SwapRevertSampler.sol\";\n\n\ncontract LiquidityProviderSampler is\n    MixinZeroExBridge,\n    SwapRevertSampler\n{\n\n    function sampleSwapFromLiquidityProvider(\n        address sellToken,\n        address buyToken,\n        bytes memory bridgeData,\n        uint256 takerTokenAmount\n    )\n        external\n        returns (uint256)\n    {\n        return _tradeZeroExBridge(\n            IERC20TokenV06(sellToken),\n            IERC20TokenV06(buyToken),\n            takerTokenAmount,\n            bridgeData\n        );\n    }\n\n    /// @dev Sample sell quotes from an arbitrary on-chain liquidity provider.\n    /// @param providerAddress Address of the liquidity provider.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return gasUsed gas consumed in each sample sell\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromLiquidityProvider(\n        address providerAddress,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        returns (uint256[] memory gasUsed, uint256[] memory makerTokenAmounts)\n    {\n        bytes memory lpData;\n        (gasUsed, makerTokenAmounts) = _sampleSwapQuotesRevert(\n            SwapRevertSamplerQuoteOpts({\n                sellToken: takerToken,\n                buyToken: makerToken,\n                bridgeData: abi.encode(providerAddress, lpData),\n                getSwapQuoteCallback: this.sampleSwapFromLiquidityProvider\n            }),\n            takerTokenAmounts\n        );\n    }\n\n    /// @dev Sample buy quotes from an arbitrary on-chain liquidity provider.\n    /// @param providerAddress Address of the liquidity provider.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return gasUsed gas consumed in each sample sell\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromLiquidityProvider(\n        address providerAddress,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        returns (uint256[] memory gasUsed, uint256[] memory takerTokenAmounts)\n    {\n        bytes memory lpData;\n        (gasUsed, takerTokenAmounts) = _sampleSwapApproximateBuys(\n            SwapRevertSamplerBuyQuoteOpts({\n                sellToken: takerToken,\n                buyToken: makerToken,\n                sellTokenData: abi.encode(providerAddress, lpData),\n                buyTokenData: abi.encode(providerAddress, lpData),\n                getSwapQuoteCallback: this.sampleSwapFromLiquidityProvider\n            }),\n            makerTokenAmounts\n        );\n    }\n}\n",
        "@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinZeroExBridge.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol\";\nimport \"../../../vendor/ILiquidityProvider.sol\";\n\n\ncontract MixinZeroExBridge {\n\n    using LibERC20TokenV06 for IERC20TokenV06;\n    using LibSafeMathV06 for uint256;\n\n    function _tradeZeroExBridge(\n        IERC20TokenV06 sellToken,\n        IERC20TokenV06 buyToken,\n        uint256 sellAmount,\n        bytes memory bridgeData\n    )\n        internal\n        returns (uint256 boughtAmount)\n    {\n        (ILiquidityProvider provider, bytes memory lpData) =\n            abi.decode(bridgeData, (ILiquidityProvider, bytes));\n        // Trade the good old fashioned way\n        sellToken.compatTransfer(\n            address(provider),\n            sellAmount\n        );\n        boughtAmount = provider.sellTokenForToken(\n            sellToken,\n            buyToken,\n            address(this), // recipient\n            1, // minBuyAmount\n            lpData\n        );\n    }\n}\n",
        "@0x/contracts-zero-ex/contracts/src/vendor/ILiquidityProvider.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\n\n\ninterface ILiquidityProvider {\n\n    /// @dev An optional event an LP can emit for each fill against a source.\n    /// @param inputToken The input token.\n    /// @param outputToken The output token.\n    /// @param inputTokenAmount How much input token was sold.\n    /// @param outputTokenAmount How much output token was bought.\n    /// @param sourceId A bytes32 encoded ascii source ID. E.g., `bytes32('Curve')`/\n    /// @param sourceAddress An optional address associated with the source (e.g, a curve pool).\n    /// @param sourceId A bytes32 encoded ascii source ID. E.g., `bytes32('Curve')`/\n    /// @param sourceAddress An optional address associated with the source (e.g, a curve pool).\n    /// @param sender The caller of the LP.\n    /// @param recipient The recipient of the output tokens.\n    event LiquidityProviderFill(\n        IERC20TokenV06 inputToken,\n        IERC20TokenV06 outputToken,\n        uint256 inputTokenAmount,\n        uint256 outputTokenAmount,\n        bytes32 sourceId,\n        address sourceAddress,\n        address sender,\n        address recipient\n    );\n\n    /// @dev Trades `inputToken` for `outputToken`. The amount of `inputToken`\n    ///      to sell must be transferred to the contract prior to calling this\n    ///      function to trigger the trade.\n    /// @param inputToken The token being sold.\n    /// @param outputToken The token being bought.\n    /// @param recipient The recipient of the bought tokens.\n    /// @param minBuyAmount The minimum acceptable amount of `outputToken` to buy.\n    /// @param auxiliaryData Arbitrary auxiliary data supplied to the contract.\n    /// @return boughtAmount The amount of `outputToken` bought.\n    function sellTokenForToken(\n        IERC20TokenV06 inputToken,\n        IERC20TokenV06 outputToken,\n        address recipient,\n        uint256 minBuyAmount,\n        bytes calldata auxiliaryData\n    )\n        external\n        returns (uint256 boughtAmount);\n\n    /// @dev Trades ETH for token. ETH must either be attached to this function\n    ///      call or sent to the contract prior to calling this function to\n    ///      trigger the trade.\n    /// @param outputToken The token being bought.\n    /// @param recipient The recipient of the bought tokens.\n    /// @param minBuyAmount The minimum acceptable amount of `outputToken` to buy.\n    /// @param auxiliaryData Arbitrary auxiliary data supplied to the contract.\n    /// @return boughtAmount The amount of `outputToken` bought.\n    function sellEthForToken(\n        IERC20TokenV06 outputToken,\n        address recipient,\n        uint256 minBuyAmount,\n        bytes calldata auxiliaryData\n    )\n        external\n        payable\n        returns (uint256 boughtAmount);\n\n    /// @dev Trades token for ETH. The token must be sent to the contract prior\n    ///      to calling this function to trigger the trade.\n    /// @param inputToken The token being sold.\n    /// @param recipient The recipient of the bought tokens.\n    /// @param minBuyAmount The minimum acceptable amount of ETH to buy.\n    /// @param auxiliaryData Arbitrary auxiliary data supplied to the contract.\n    /// @return boughtAmount The amount of ETH bought.\n    function sellTokenForEth(\n        IERC20TokenV06 inputToken,\n        address payable recipient,\n        uint256 minBuyAmount,\n        bytes calldata auxiliaryData\n    )\n        external\n        returns (uint256 boughtAmount);\n\n    /// @dev Quotes the amount of `outputToken` that would be obtained by\n    ///      selling `sellAmount` of `inputToken`.\n    /// @param inputToken Address of the taker token (what to sell). Use\n    ///        the wETH address if selling ETH.\n    /// @param outputToken Address of the maker token (what to buy). Use\n    ///        the wETH address if buying ETH.\n    /// @param sellAmount Amount of `inputToken` to sell.\n    /// @return outputTokenAmount Amount of `outputToken` that would be obtained.\n    function getSellQuote(\n        IERC20TokenV06 inputToken,\n        IERC20TokenV06 outputToken,\n        uint256 sellAmount\n    )\n        external\n        view\n        returns (uint256 outputTokenAmount);\n}\n",
        "./MakerPSMSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinMakerPSM.sol\";\nimport \"./SwapRevertSampler.sol\";\n\ncontract MakerPSMSampler is\n    MixinMakerPSM,\n    SwapRevertSampler\n{\n\n    /// @dev Information about which PSM module to use\n    struct MakerPsmInfo {\n        address psmAddress;\n        bytes32 ilkIdentifier;\n        address gemTokenAddress;\n    }\n\n    function sampleSwapFromMakerPsm(\n        address sellToken,\n        address buyToken,\n        bytes memory bridgeData,\n        uint256 takerTokenAmount\n    )\n        external\n        returns (uint256)\n    {\n        return _tradeMakerPsm(\n            IERC20TokenV06(sellToken),\n            IERC20TokenV06(buyToken),\n            takerTokenAmount,\n            bridgeData\n        );\n    }\n\n    /// @dev Sample sell quotes from Maker PSM\n    function sampleSellsFromMakerPsm(\n        MakerPsmInfo memory psmInfo,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        returns (uint256[] memory gasUsed, uint256[] memory makerTokenAmounts)\n    {\n        (gasUsed, makerTokenAmounts) = _sampleSwapQuotesRevert(\n            SwapRevertSamplerQuoteOpts({\n                sellToken: takerToken,\n                buyToken: makerToken,\n                bridgeData: abi.encode(\n                    MakerPsmBridgeData({\n                        psmAddress: psmInfo.psmAddress,\n                        gemTokenAddres: psmInfo.gemTokenAddress\n                    })\n                ),\n                getSwapQuoteCallback: this.sampleSwapFromMakerPsm\n            }),\n            takerTokenAmounts\n        );\n    }\n\n    function sampleBuysFromMakerPsm(\n        MakerPsmInfo memory psmInfo,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        returns (uint256[] memory gasUsed, uint256[] memory takerTokenAmounts)\n    {\n        MakerPsmBridgeData memory data = MakerPsmBridgeData({\n            psmAddress: psmInfo.psmAddress,\n            gemTokenAddres: psmInfo.gemTokenAddress\n        });\n        (gasUsed, takerTokenAmounts) = _sampleSwapApproximateBuys(\n            SwapRevertSamplerBuyQuoteOpts({\n                sellToken: takerToken,\n                buyToken: makerToken,\n                sellTokenData: abi.encode(data),\n                buyTokenData: abi.encode(data),\n                getSwapQuoteCallback: this.sampleSwapFromMakerPsm\n            }),\n            makerTokenAmounts\n        );\n    }\n}\n",
        "@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinMakerPSM.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol\";\n\ninterface IPSM {\n    // @dev Get the fee for selling USDC to DAI in PSM\n    // @return tin toll in [wad]\n    function tin() external view returns (uint256);\n    // @dev Get the fee for selling DAI to USDC in PSM\n    // @return tout toll out [wad]\n    function tout() external view returns (uint256);\n\n    // @dev Get the address of the PSM state Vat\n    // @return address of the Vat\n    function vat() external view returns (address);\n\n    // @dev Get the address of the underlying vault powering PSM\n    // @return address of gemJoin contract\n    function gemJoin() external view returns (address);\n\n    // @dev Sell USDC for DAI\n    // @param usr The address of the account trading USDC for DAI.\n    // @param gemAmt The amount of USDC to sell in USDC base units\n    function sellGem(\n        address usr,\n        uint256 gemAmt\n    ) external;\n    // @dev Buy USDC for DAI\n    // @param usr The address of the account trading DAI for USDC\n    // @param gemAmt The amount of USDC to buy in USDC base units\n    function buyGem(\n        address usr,\n        uint256 gemAmt\n    ) external;\n}\n\ncontract MixinMakerPSM {\n\n    using LibERC20TokenV06 for IERC20TokenV06;\n    using LibSafeMathV06 for uint256;\n\n    struct MakerPsmBridgeData {\n        address psmAddress;\n        address gemTokenAddres;\n    }\n\n    // Maker units\n    // wad: fixed point decimal with 18 decimals (for basic quantities, e.g. balances)\n    uint256 constant private WAD = 10 ** 18;\n    // ray: fixed point decimal with 27 decimals (for precise quantites, e.g. ratios)\n    uint256 constant private RAY = 10 ** 27;\n    // rad: fixed point decimal with 45 decimals (result of integer multiplication with a wad and a ray)\n    uint256 constant private RAD = 10 ** 45;\n    // See https://github.com/makerdao/dss/blob/master/DEVELOPING.md\n\n    function _tradeMakerPsm(\n        IERC20TokenV06 sellToken,\n        IERC20TokenV06 buyToken,\n        uint256 sellAmount,\n        bytes memory bridgeData\n    )\n        internal\n        returns (uint256 boughtAmount)\n    {\n        // Decode the bridge data.\n        MakerPsmBridgeData memory data = abi.decode(bridgeData, (MakerPsmBridgeData));\n        uint256 beforeBalance = buyToken.balanceOf(address(this));\n\n        IPSM psm = IPSM(data.psmAddress);\n\n        if (address(sellToken) == data.gemTokenAddres) {\n            sellToken.approveIfBelow(\n                psm.gemJoin(),\n                sellAmount\n            );\n\n            psm.sellGem(address(this), sellAmount);\n        } else if (address(buyToken) == data.gemTokenAddres) {\n            uint256 feeDivisor = WAD.safeAdd(psm.tout()); // eg. 1.001 * 10 ** 18 with 0.1% fee [tout is in wad];\n            uint256 buyTokenBaseUnit = uint256(10) ** uint256(buyToken.decimals());\n            uint256 gemAmount =  sellAmount.safeMul(buyTokenBaseUnit).safeDiv(feeDivisor);\n\n            sellToken.approveIfBelow(\n                data.psmAddress,\n                sellAmount\n            );\n            psm.buyGem(address(this), gemAmount);\n        }\n\n        return buyToken.balanceOf(address(this)).safeSub(beforeBalance);\n    }\n}\n",
        "./MStableSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinMStable.sol\";\nimport \"./SwapRevertSampler.sol\";\n\n\ncontract MStableSampler is\n    MixinMStable,\n    SwapRevertSampler\n{\n\n    function sampleSwapFromMStable(\n        address sellToken,\n        address buyToken,\n        bytes memory bridgeData,\n        uint256 takerTokenAmount\n    )\n        external\n        returns (uint256)\n    {\n        return _tradeMStable(\n            IERC20TokenV06(sellToken),\n            IERC20TokenV06(buyToken),\n            takerTokenAmount,\n            bridgeData\n        );\n    }\n\n    /// @dev Sample sell quotes from the mStable contract\n    /// @param router Address of the mStable contract\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return gasUsed gas consumed in each sample sell\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromMStable(\n        address router,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        returns (uint256[] memory gasUsed, uint256[] memory makerTokenAmounts)\n    {\n        (gasUsed, makerTokenAmounts) = _sampleSwapQuotesRevert(\n            SwapRevertSamplerQuoteOpts({\n                sellToken: takerToken,\n                buyToken: makerToken,\n                bridgeData: abi.encode(router),\n                getSwapQuoteCallback: this.sampleSwapFromMStable\n            }),\n            takerTokenAmounts\n        );\n    }\n\n    /// @dev Sample buy quotes from MStable contract\n    /// @param router Address of the mStable contract\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return gasUsed gas consumed in each sample sell\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromMStable(\n        address router,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        returns (uint256[] memory gasUsed, uint256[] memory takerTokenAmounts)\n    {\n        (gasUsed, takerTokenAmounts) = _sampleSwapApproximateBuys(\n            SwapRevertSamplerBuyQuoteOpts({\n                sellToken: takerToken,\n                buyToken: makerToken,\n                sellTokenData: abi.encode(router),\n                buyTokenData: abi.encode(router),\n                getSwapQuoteCallback: this.sampleSwapFromMStable\n            }),\n            makerTokenAmounts\n        );\n    }\n}\n",
        "@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinMStable.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"../IBridgeAdapter.sol\";\n\n\ninterface IMStable {\n\n    function swap(\n        IERC20TokenV06 sellToken,\n        IERC20TokenV06 buyToken,\n        uint256 sellAmount,\n        uint256 minBoughtAmount,\n        address recipient\n    )\n        external\n        returns (uint256 boughtAmount);\n}\n\ncontract MixinMStable {\n\n    using LibERC20TokenV06 for IERC20TokenV06;\n\n    function _tradeMStable(\n        IERC20TokenV06 sellToken,\n        IERC20TokenV06 buyToken,\n        uint256 sellAmount,\n        bytes memory bridgeData\n    )\n        internal\n        returns (uint256 boughtAmount)\n    {\n        (IMStable mstable) = abi.decode(bridgeData, (IMStable));\n\n        // Grant an allowance to the exchange to spend `sellToken` token.\n        sellToken.approveIfBelow(address(mstable), sellAmount);\n\n        boughtAmount = mstable.swap(\n            sellToken,\n            buyToken,\n            sellAmount,\n            // Minimum buy amount.\n            1,\n            address(this)\n        );\n    }\n}\n",
        "./MooniswapSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinMooniswap.sol\";\nimport \"./SwapRevertSampler.sol\";\n\ninterface IMooniswapRegistry {\n    function pools(address token1, address token2) external view returns(address);\n}\n\ncontract MooniswapSampler is\n    MixinMooniswap,\n    SwapRevertSampler\n{\n\n    constructor(IEtherTokenV06 weth)\n        public\n        MixinMooniswap(weth)\n    { }\n\n    function sampleSwapFromMooniswap(\n        address sellToken,\n        address buyToken,\n        bytes memory bridgeData,\n        uint256 takerTokenAmount\n    )\n        external\n        returns (uint256)\n    {\n        return _tradeMooniswapInternal(\n            IEtherTokenV06(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2),\n            IERC20TokenV06(sellToken),\n            IERC20TokenV06(buyToken),\n            takerTokenAmount,\n            bridgeData\n        );\n    }\n\n    /// @dev Sample sell quotes from Mooniswap.\n    /// @param registry Address of the Mooniswap Registry.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return pool The contract address for the pool\n    /// @return gasUsed gas consumed in each sample sell\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromMooniswap(\n        address registry,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        returns (address pool, uint256[] memory gasUsed, uint256[] memory makerTokenAmounts)\n    {\n        pool = _getMooniswapPool(registry, takerToken, makerToken);\n        if (address(pool) == address(0)) {\n            return (pool, gasUsed, makerTokenAmounts);\n        }\n\n        (gasUsed, makerTokenAmounts) = _sampleSwapQuotesRevert(\n            SwapRevertSamplerQuoteOpts({\n                sellToken: takerToken,\n                buyToken: makerToken,\n                bridgeData: abi.encode(pool),\n                getSwapQuoteCallback: this.sampleSwapFromMooniswap\n            }),\n            takerTokenAmounts\n        );\n    }\n\n    /// @dev Sample buy quotes from Mooniswap.\n    /// @param registry Address of the Mooniswap Registry.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token sell amount for each sample.\n    /// @return pool The contract address for the pool\n    /// @return gasUsed gas consumed in each sample sell\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromMooniswap(\n        address registry,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        returns (address pool, uint256[] memory gasUsed, uint256[] memory takerTokenAmounts)\n    {\n        pool = _getMooniswapPool(registry, takerToken, makerToken);\n        if (address(pool) == address(0)) {\n            return (pool, gasUsed, takerTokenAmounts);\n        }\n\n        (gasUsed, takerTokenAmounts) = _sampleSwapApproximateBuys(\n            SwapRevertSamplerBuyQuoteOpts({\n                sellToken: takerToken,\n                buyToken: makerToken,\n                sellTokenData: abi.encode(pool),\n                buyTokenData: abi.encode(pool),\n                getSwapQuoteCallback: this.sampleSwapFromMooniswap\n            }),\n            makerTokenAmounts\n        );\n    }\n\n    function _getMooniswapPool(\n        address registry,\n        address takerToken,\n        address makerToken\n    )\n        internal\n        returns (address pool)\n    {\n        // WETH is actually ETH in these pools and represented as address(0)\n        address _takerToken = takerToken == 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2 ? address(0) : takerToken;\n        address _makerToken = makerToken == 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2 ? address(0) : makerToken;\n\n        try\n            IMooniswapRegistry(registry).pools{gas: 300e3}(_takerToken, _makerToken)\n            returns (address _pool)\n        {\n            pool = _pool;\n        } catch { }\n    }\n}\n",
        "@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinMooniswap.sol": "// SPDX-License-Identifier: Apache-2.0\n\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol\";\nimport \"../IBridgeAdapter.sol\";\n\n\n/// @dev Moooniswap pool interface.\ninterface IMooniswapPool {\n\n    function swap(\n        IERC20TokenV06 sellToken,\n        IERC20TokenV06 buyToken,\n        uint256 sellAmount,\n        uint256 minBoughtAmount,\n        address referrer\n    )\n        external\n        payable\n        returns (uint256 boughtAmount);\n}\n\n/// @dev BridgeAdapter mixin for mooniswap.\ncontract MixinMooniswap {\n\n    using LibERC20TokenV06 for IERC20TokenV06;\n    using LibERC20TokenV06 for IEtherTokenV06;\n\n    /// @dev WETH token.\n    IEtherTokenV06 private immutable WETH;\n\n    constructor(IEtherTokenV06 weth)\n        public\n    {\n        WETH = weth;\n    }\n\n    function _tradeMooniswap(\n        IERC20TokenV06 sellToken,\n        IERC20TokenV06 buyToken,\n        uint256 sellAmount,\n        bytes memory bridgeData\n    )\n        internal\n        returns (uint256 boughtAmount)\n    {\n\n        return _tradeMooniswapInternal(WETH, sellToken, buyToken, sellAmount, bridgeData);\n    }\n\n    function _tradeMooniswapInternal(\n        IEtherTokenV06 weth,\n        IERC20TokenV06 sellToken,\n        IERC20TokenV06 buyToken,\n        uint256 sellAmount,\n        bytes memory bridgeData\n    )\n        internal\n        returns (uint256 boughtAmount)\n    {\n        (IMooniswapPool pool) = abi.decode(bridgeData, (IMooniswapPool));\n\n        // Convert WETH to ETH.\n        uint256 ethValue = 0;\n        if (sellToken == weth) {\n            weth.withdraw(sellAmount);\n            ethValue = sellAmount;\n        } else {\n            // Grant the pool an allowance.\n            sellToken.approveIfBelow(\n                address(pool),\n                sellAmount\n            );\n        }\n\n        boughtAmount = pool.swap{value: ethValue}(\n            sellToken == weth ? IERC20TokenV06(0) : sellToken,\n            buyToken == weth ? IERC20TokenV06(0) : buyToken,\n            sellAmount,\n            1,\n            address(0)\n        );\n\n        // Wrap ETH to WETH.\n        if (buyToken == weth) {\n            weth.deposit{value:boughtAmount}();\n        }\n    }\n}\n",
        "./NativeOrderSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibMathV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol\";\n\n\ninterface IExchange {\n\n    enum OrderStatus {\n        INVALID,\n        FILLABLE,\n        FILLED,\n        CANCELLED,\n        EXPIRED\n    }\n\n    /// @dev A standard OTC or OO limit order.\n    struct LimitOrder {\n        IERC20TokenV06 makerToken;\n        IERC20TokenV06 takerToken;\n        uint128 makerAmount;\n        uint128 takerAmount;\n        uint128 takerTokenFeeAmount;\n        address maker;\n        address taker;\n        address sender;\n        address feeRecipient;\n        bytes32 pool;\n        uint64 expiry;\n        uint256 salt;\n    }\n\n    /// @dev An RFQ limit order.\n    struct RfqOrder {\n        IERC20TokenV06 makerToken;\n        IERC20TokenV06 takerToken;\n        uint128 makerAmount;\n        uint128 takerAmount;\n        address maker;\n        address taker;\n        address txOrigin;\n        bytes32 pool;\n        uint64 expiry;\n        uint256 salt;\n    }\n\n    /// @dev Info on a limit or RFQ order.\n    struct OrderInfo {\n        bytes32 orderHash;\n        OrderStatus status;\n        uint128 takerTokenFilledAmount;\n    }\n\n    /// @dev Allowed signature types.\n    enum SignatureType {\n        ILLEGAL,\n        INVALID,\n        EIP712,\n        ETHSIGN\n    }\n\n    /// @dev Encoded EC signature.\n    struct Signature {\n        // How to validate the signature.\n        SignatureType signatureType;\n        // EC Signature data.\n        uint8 v;\n        // EC Signature data.\n        bytes32 r;\n        // EC Signature data.\n        bytes32 s;\n    }\n\n    /// @dev Get the order info for a limit order.\n    /// @param order The limit order.\n    /// @return orderInfo Info about the order.\n    function getLimitOrderInfo(LimitOrder memory order)\n        external\n        view\n        returns (OrderInfo memory orderInfo);\n\n    /// @dev Get order info, fillable amount, and signature validity for a limit order.\n    ///      Fillable amount is determined using balances and allowances of the maker.\n    /// @param order The limit order.\n    /// @param signature The order signature.\n    /// @return orderInfo Info about the order.\n    /// @return actualFillableTakerTokenAmount How much of the order is fillable\n    ///         based on maker funds, in taker tokens.\n    /// @return isSignatureValid Whether the signature is valid.\n    function getLimitOrderRelevantState(\n        LimitOrder memory order,\n        Signature calldata signature\n    )\n        external\n        view\n        returns (\n            OrderInfo memory orderInfo,\n            uint128 actualFillableTakerTokenAmount,\n            bool isSignatureValid\n        );\n}\n\ncontract NativeOrderSampler {\n    using LibSafeMathV06 for uint256;\n    using LibBytesV06 for bytes;\n\n    /// @dev Gas limit for calls to `getOrderFillableTakerAmount()`.\n    uint256 constant internal DEFAULT_CALL_GAS = 200e3; // 200k\n\n    /// @dev Queries the fillable taker asset amounts of native orders.\n    ///      Effectively ignores orders that have empty signatures or\n    ///      maker/taker asset amounts (returning 0).\n    /// @param orders Native limit orders to query.\n    /// @param orderSignatures Signatures for each respective order in `orders`.\n    /// @param exchange The V4 exchange.\n    /// @return orderFillableTakerAssetAmounts How much taker asset can be filled\n    ///         by each order in `orders`.\n    function getLimitOrderFillableTakerAssetAmounts(\n        IExchange.LimitOrder[] memory orders,\n        IExchange.Signature[] memory orderSignatures,\n        IExchange exchange\n    )\n        public\n        view\n        returns (uint256[] memory orderFillableTakerAssetAmounts)\n    {\n        orderFillableTakerAssetAmounts = new uint256[](orders.length);\n        for (uint256 i = 0; i != orders.length; i++) {\n            try\n                this.getLimitOrderFillableTakerAmount\n                    {gas: DEFAULT_CALL_GAS}\n                    (\n                       orders[i],\n                       orderSignatures[i],\n                       exchange\n                    )\n                returns (uint256 amount)\n            {\n                orderFillableTakerAssetAmounts[i] = amount;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                orderFillableTakerAssetAmounts[i] = 0;\n            }\n        }\n    }\n\n    /// @dev Queries the fillable taker asset amounts of native orders.\n    ///      Effectively ignores orders that have empty signatures or\n    /// @param orders Native orders to query.\n    /// @param orderSignatures Signatures for each respective order in `orders`.\n    /// @param exchange The V4 exchange.\n    /// @return orderFillableMakerAssetAmounts How much maker asset can be filled\n    ///         by each order in `orders`.\n    function getLimitOrderFillableMakerAssetAmounts(\n        IExchange.LimitOrder[] memory orders,\n        IExchange.Signature[] memory orderSignatures,\n        IExchange exchange\n    )\n        public\n        view\n        returns (uint256[] memory orderFillableMakerAssetAmounts)\n    {\n        orderFillableMakerAssetAmounts = getLimitOrderFillableTakerAssetAmounts(\n            orders,\n            orderSignatures,\n            exchange\n        );\n        // `orderFillableMakerAssetAmounts` now holds taker asset amounts, so\n        // convert them to maker asset amounts.\n        for (uint256 i = 0; i < orders.length; ++i) {\n            if (orderFillableMakerAssetAmounts[i] != 0) {\n                orderFillableMakerAssetAmounts[i] = LibMathV06.getPartialAmountCeil(\n                    orderFillableMakerAssetAmounts[i],\n                    orders[i].takerAmount,\n                    orders[i].makerAmount\n                );\n            }\n        }\n    }\n\n    /// @dev Get the fillable taker amount of an order, taking into account\n    ///      order state, maker fees, and maker balances.\n    function getLimitOrderFillableTakerAmount(\n        IExchange.LimitOrder memory order,\n        IExchange.Signature memory signature,\n        IExchange exchange\n    )\n        virtual\n        public\n        view\n        returns (uint256 fillableTakerAmount)\n    {\n        if (signature.signatureType == IExchange.SignatureType.ILLEGAL ||\n            signature.signatureType == IExchange.SignatureType.INVALID ||\n            order.makerAmount == 0 ||\n            order.takerAmount == 0)\n        {\n            return 0;\n        }\n\n        (\n            IExchange.OrderInfo memory orderInfo,\n            uint128 remainingFillableTakerAmount,\n            bool isSignatureValid\n        ) = exchange.getLimitOrderRelevantState(order, signature);\n\n        if (\n              orderInfo.status != IExchange.OrderStatus.FILLABLE ||\n              !isSignatureValid ||\n              order.makerToken == IERC20TokenV06(0)\n            ) {\n            return 0;\n        }\n\n        fillableTakerAmount = uint256(remainingFillableTakerAmount);\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/LibMathV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./LibSafeMathV06.sol\";\nimport \"./errors/LibRichErrorsV06.sol\";\nimport \"./errors/LibMathRichErrorsV06.sol\";\n\n\nlibrary LibMathV06 {\n\n    using LibSafeMathV06 for uint256;\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    ///      Reverts if rounding error is >= 0.1%\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded down.\n    function safeGetPartialAmountFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        if (isRoundingErrorFloor(\n                numerator,\n                denominator,\n                target\n        )) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.RoundingError(\n                numerator,\n                denominator,\n                target\n            ));\n        }\n\n        partialAmount = numerator.safeMul(target).safeDiv(denominator);\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    ///      Reverts if rounding error is >= 0.1%\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded up.\n    function safeGetPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        if (isRoundingErrorCeil(\n                numerator,\n                denominator,\n                target\n        )) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.RoundingError(\n                numerator,\n                denominator,\n                target\n            ));\n        }\n\n        // safeDiv computes `floor(a / b)`. We use the identity (a, b integer):\n        //       ceil(a / b) = floor((a + b - 1) / b)\n        // To implement `ceil(a / b)` using safeDiv.\n        partialAmount = numerator.safeMul(target)\n            .safeAdd(denominator.safeSub(1))\n            .safeDiv(denominator);\n\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded down.\n    function getPartialAmountFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        partialAmount = numerator.safeMul(target).safeDiv(denominator);\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded up.\n    function getPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        // safeDiv computes `floor(a / b)`. We use the identity (a, b integer):\n        //       ceil(a / b) = floor((a + b - 1) / b)\n        // To implement `ceil(a / b)` using safeDiv.\n        partialAmount = numerator.safeMul(target)\n            .safeAdd(denominator.safeSub(1))\n            .safeDiv(denominator);\n\n        return partialAmount;\n    }\n\n    /// @dev Checks if rounding error >= 0.1% when rounding down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to multiply with numerator/denominator.\n    /// @return isError Rounding error is present.\n    function isRoundingErrorFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bool isError)\n    {\n        if (denominator == 0) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.DivisionByZeroError());\n        }\n\n        // The absolute rounding error is the difference between the rounded\n        // value and the ideal value. The relative rounding error is the\n        // absolute rounding error divided by the absolute value of the\n        // ideal value. This is undefined when the ideal value is zero.\n        //\n        // The ideal value is `numerator * target / denominator`.\n        // Let's call `numerator * target % denominator` the remainder.\n        // The absolute error is `remainder / denominator`.\n        //\n        // When the ideal value is zero, we require the absolute error to\n        // be zero. Fortunately, this is always the case. The ideal value is\n        // zero iff `numerator == 0` and/or `target == 0`. In this case the\n        // remainder and absolute error are also zero.\n        if (target == 0 || numerator == 0) {\n            return false;\n        }\n\n        // Otherwise, we want the relative rounding error to be strictly\n        // less than 0.1%.\n        // The relative error is `remainder / (numerator * target)`.\n        // We want the relative error less than 1 / 1000:\n        //        remainder / (numerator * denominator)  <  1 / 1000\n        // or equivalently:\n        //        1000 * remainder  <  numerator * target\n        // so we have a rounding error iff:\n        //        1000 * remainder  >=  numerator * target\n        uint256 remainder = mulmod(\n            target,\n            numerator,\n            denominator\n        );\n        isError = remainder.safeMul(1000) >= numerator.safeMul(target);\n        return isError;\n    }\n\n    /// @dev Checks if rounding error >= 0.1% when rounding up.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to multiply with numerator/denominator.\n    /// @return isError Rounding error is present.\n    function isRoundingErrorCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bool isError)\n    {\n        if (denominator == 0) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.DivisionByZeroError());\n        }\n\n        // See the comments in `isRoundingError`.\n        if (target == 0 || numerator == 0) {\n            // When either is zero, the ideal value and rounded value are zero\n            // and there is no rounding error. (Although the relative error\n            // is undefined.)\n            return false;\n        }\n        // Compute remainder as before\n        uint256 remainder = mulmod(\n            target,\n            numerator,\n            denominator\n        );\n        remainder = denominator.safeSub(remainder) % denominator;\n        isError = remainder.safeMul(1000) >= numerator.safeMul(target);\n        return isError;\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/errors/LibMathRichErrorsV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibMathRichErrorsV06 {\n\n    // bytes4(keccak256(\"DivisionByZeroError()\"))\n    bytes internal constant DIVISION_BY_ZERO_ERROR =\n        hex\"a791837c\";\n\n    // bytes4(keccak256(\"RoundingError(uint256,uint256,uint256)\"))\n    bytes4 internal constant ROUNDING_ERROR_SELECTOR =\n        0x339f3de2;\n\n    // solhint-disable func-name-mixedcase\n    function DivisionByZeroError()\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return DIVISION_BY_ZERO_ERROR;\n    }\n\n    function RoundingError(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            ROUNDING_ERROR_SELECTOR,\n            numerator,\n            denominator,\n            target\n        );\n    }\n}\n",
        "./ShellSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinShell.sol\";\nimport \"./SwapRevertSampler.sol\";\n\ncontract ShellSampler is\n    MixinShell,\n    SwapRevertSampler\n{\n\n    struct ShellInfo {\n        address poolAddress;\n    }\n\n    function sampleSwapFromShell(\n        address sellToken,\n        address buyToken,\n        bytes memory bridgeData,\n        uint256 takerTokenAmount\n    )\n        external\n        returns (uint256)\n    {\n        return _tradeShell(\n            IERC20TokenV06(sellToken),\n            IERC20TokenV06(buyToken),\n            takerTokenAmount,\n            bridgeData\n        );\n    }\n\n    /// @dev Sample sell quotes from the Shell pool contract\n    /// @param pool Address of the Shell pool contract\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return gasUsed gas consumed in each sample sell\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromShell(\n        address pool,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        returns (uint256[] memory gasUsed, uint256[] memory makerTokenAmounts)\n    {\n        (gasUsed, makerTokenAmounts) = _sampleSwapQuotesRevert(\n            SwapRevertSamplerQuoteOpts({\n                sellToken: takerToken,\n                buyToken: makerToken,\n                bridgeData: abi.encode(pool),\n                getSwapQuoteCallback: this.sampleSwapFromShell\n            }),\n            takerTokenAmounts\n        );\n    }\n\n    /// @dev Sample buy quotes from Shell pool contract\n    /// @param pool Address of the Shell pool contract\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return gasUsed gas consumed in each sample sell\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromShell(\n        address pool,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        returns (uint256[] memory gasUsed, uint256[] memory takerTokenAmounts)\n    {\n        (gasUsed, takerTokenAmounts) = _sampleSwapApproximateBuys(\n            SwapRevertSamplerBuyQuoteOpts({\n                sellToken: takerToken,\n                buyToken: makerToken,\n                sellTokenData: abi.encode(pool),\n                buyTokenData: abi.encode(pool),\n                getSwapQuoteCallback: this.sampleSwapFromShell\n            }),\n            makerTokenAmounts\n        );\n    }\n}\n",
        "@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinShell.sol": "// SPDX-License-Identifier: Apache-2.0\n\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\n\ninterface IShell {\n\n    function originSwap(\n        IERC20TokenV06 from,\n        IERC20TokenV06 to,\n        uint256 fromAmount,\n        uint256 minTargetAmount,\n        uint256 deadline\n    )\n        external\n        returns (uint256 toAmount);\n}\n\ncontract MixinShell {\n\n    using LibERC20TokenV06 for IERC20TokenV06;\n\n    function _tradeShell(\n        IERC20TokenV06 sellToken,\n        IERC20TokenV06 buyToken,\n        uint256 sellAmount,\n        bytes memory bridgeData\n    )\n        internal\n        returns (uint256 boughtAmount)\n    {\n        IShell pool = abi.decode(bridgeData, (IShell));\n\n        // Grant the Shell contract an allowance to sell the first token.\n        IERC20TokenV06(sellToken).approveIfBelow(\n            address(pool),\n            sellAmount\n        );\n\n        boughtAmount = pool.originSwap(\n            sellToken,\n            buyToken,\n             // Sell all tokens we hold.\n            sellAmount,\n             // Minimum buy amount.\n            1,\n            // deadline\n            block.timestamp + 1\n        );\n        return boughtAmount;\n    }\n}\n",
        "./TwoHopSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol\";\n\n\ncontract TwoHopSampler {\n    using LibBytesV06 for bytes;\n\n    struct HopInfo {\n        uint256 sourceIndex;\n        bytes returnData;\n    }\n\n    function sampleTwoHopSell(\n        bytes[] memory firstHopCalls,\n        bytes[] memory secondHopCalls,\n        uint256 sellAmount\n    )\n        public\n        returns (\n            HopInfo memory firstHop,\n            HopInfo memory secondHop,\n            uint256 intermediateAssetAmount,\n            uint256 buyAmount\n        )\n    {\n        intermediateAssetAmount = 0;\n        for (uint256 i = 0; i != firstHopCalls.length; ++i) {\n            firstHopCalls[i].writeUint256(firstHopCalls[i].length - 32, sellAmount);\n            (bool didSucceed, bytes memory returnData) = address(this).call(firstHopCalls[i]);\n            if (didSucceed) {\n                uint256 amount = returnData.readUint256(returnData.length - 32);\n                if (amount > intermediateAssetAmount) {\n                    intermediateAssetAmount = amount;\n                    firstHop.sourceIndex = i;\n                    firstHop.returnData = returnData;\n                }\n            }\n        }\n        if (intermediateAssetAmount == 0) {\n            return (firstHop, secondHop, intermediateAssetAmount, buyAmount);\n        }\n        for (uint256 j = 0; j != secondHopCalls.length; ++j) {\n            secondHopCalls[j].writeUint256(secondHopCalls[j].length - 32, intermediateAssetAmount);\n            (bool didSucceed, bytes memory returnData) = address(this).call(secondHopCalls[j]);\n            if (didSucceed) {\n                uint256 amount = returnData.readUint256(returnData.length - 32);\n                if (amount > buyAmount) {\n                    buyAmount = amount;\n                    secondHop.sourceIndex = j;\n                    secondHop.returnData = returnData;\n                }\n            }\n        }\n    }\n\n    function sampleTwoHopBuy(\n        bytes[] memory firstHopCalls,\n        bytes[] memory secondHopCalls,\n        uint256 buyAmount\n    )\n        public\n        returns (\n            HopInfo memory firstHop,\n            HopInfo memory secondHop,\n            uint256 sellAmount\n        )\n    {\n        sellAmount = uint256(-1);\n        uint256 intermediateAssetAmount = uint256(-1);\n        for (uint256 j = 0; j != secondHopCalls.length; ++j) {\n            secondHopCalls[j].writeUint256(secondHopCalls[j].length - 32, buyAmount);\n            (bool didSucceed, bytes memory returnData) = address(this).call(secondHopCalls[j]);\n            if (didSucceed) {\n                uint256 amount = returnData.readUint256(returnData.length - 32);\n                if (\n                    amount > 0 &&\n                    amount < intermediateAssetAmount\n                ) {\n                    intermediateAssetAmount = amount;\n                    secondHop.sourceIndex = j;\n                    secondHop.returnData = returnData;\n                }\n            }\n        }\n        if (intermediateAssetAmount == uint256(-1)) {\n            return (firstHop, secondHop, sellAmount);\n        }\n        for (uint256 i = 0; i != firstHopCalls.length; ++i) {\n            firstHopCalls[i].writeUint256(firstHopCalls[i].length - 32, intermediateAssetAmount);\n            (bool didSucceed, bytes memory returnData) = address(this).call(firstHopCalls[i]);\n            if (didSucceed) {\n                uint256 amount = returnData.readUint256(returnData.length - 32);\n                if (\n                    amount > 0 &&\n                    amount < sellAmount\n                ) {\n                    sellAmount = amount;\n                    firstHop.sourceIndex = i;\n                    firstHop.returnData = returnData;\n                }\n            }\n        }\n    }\n}\n",
        "./UniswapSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinUniswap.sol\";\nimport \"./SwapRevertSampler.sol\";\n\ncontract UniswapSampler is\n    MixinUniswap,\n    SwapRevertSampler\n{\n\n    constructor(IEtherTokenV06 weth)\n        public\n        MixinUniswap(weth)\n    { }\n\n    function sampleSwapFromUniswap(\n        address sellToken,\n        address buyToken,\n        bytes memory bridgeData,\n        uint256 takerTokenAmount\n    )\n        external\n        returns (uint256)\n    {\n        return _tradeUniswapInternal(\n            IEtherTokenV06(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2),\n            IERC20TokenV06(sellToken),\n            IERC20TokenV06(buyToken),\n            takerTokenAmount,\n            bridgeData\n        );\n    }\n\n    /// @dev Sample sell quotes from Uniswap.\n    /// @param router Address of the Uniswap Router\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return gasUsed gas consumed in each sample sell\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromUniswap(\n        address router,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        returns (uint256[] memory gasUsed, uint256[] memory makerTokenAmounts)\n    {\n        (gasUsed, makerTokenAmounts) = _sampleSwapQuotesRevert(\n            SwapRevertSamplerQuoteOpts({\n                sellToken: takerToken,\n                buyToken: makerToken,\n                bridgeData: abi.encode(router),\n                getSwapQuoteCallback: this.sampleSwapFromUniswap\n            }),\n            takerTokenAmounts\n        );\n    }\n\n    /// @dev Sample buy quotes from Uniswap.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token sell amount for each sample.\n    /// @return gasUsed gas consumed in each sample sell\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromUniswap(\n        address router,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        returns (uint256[] memory gasUsed, uint256[] memory takerTokenAmounts)\n    {\n        (gasUsed, takerTokenAmounts) = _sampleSwapApproximateBuys(\n            SwapRevertSamplerBuyQuoteOpts({\n                sellToken: takerToken,\n                buyToken: makerToken,\n                sellTokenData: abi.encode(router),\n                buyTokenData: abi.encode(router),\n                getSwapQuoteCallback: this.sampleSwapFromUniswap\n            }),\n            makerTokenAmounts\n        );\n    }\n\n}\n",
        "@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinUniswap.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol\";\nimport \"../IBridgeAdapter.sol\";\n\ninterface IUniswapExchangeFactory {\n\n    /// @dev Get the exchange for a token.\n    /// @param token The token contract.\n    function getExchange(IERC20TokenV06 token)\n        external\n        view\n        returns (IUniswapExchange exchange);\n}\n\ninterface IUniswapExchange {\n\n    /// @dev Buys at least `minTokensBought` tokens with ETH and transfer them\n    ///      to `recipient`.\n    /// @param minTokensBought The minimum number of tokens to buy.\n    /// @param deadline Time when this order expires.\n    /// @param recipient Who to transfer the tokens to.\n    /// @return tokensBought Amount of tokens bought.\n    function ethToTokenTransferInput(\n        uint256 minTokensBought,\n        uint256 deadline,\n        address recipient\n    )\n        external\n        payable\n        returns (uint256 tokensBought);\n\n    /// @dev Buys at least `minEthBought` ETH with tokens.\n    /// @param tokensSold Amount of tokens to sell.\n    /// @param minEthBought The minimum amount of ETH to buy.\n    /// @param deadline Time when this order expires.\n    /// @return ethBought Amount of tokens bought.\n    function tokenToEthSwapInput(\n        uint256 tokensSold,\n        uint256 minEthBought,\n        uint256 deadline\n    )\n        external\n        returns (uint256 ethBought);\n\n    /// @dev Buys at least `minTokensBought` tokens with the exchange token\n    ///      and transfer them to `recipient`.\n    /// @param tokensSold Amount of tokens to sell.\n    /// @param minTokensBought The minimum number of tokens to buy.\n    /// @param minEthBought The minimum amount of intermediate ETH to buy.\n    /// @param deadline Time when this order expires.\n    /// @param recipient Who to transfer the tokens to.\n    /// @param buyToken The token being bought.\n    /// @return tokensBought Amount of tokens bought.\n    function tokenToTokenTransferInput(\n        uint256 tokensSold,\n        uint256 minTokensBought,\n        uint256 minEthBought,\n        uint256 deadline,\n        address recipient,\n        IERC20TokenV06 buyToken\n    )\n        external\n        returns (uint256 tokensBought);\n\n    /// @dev Buys at least `minTokensBought` tokens with the exchange token.\n    /// @param tokensSold Amount of tokens to sell.\n    /// @param minTokensBought The minimum number of tokens to buy.\n    /// @param minEthBought The minimum amount of intermediate ETH to buy.\n    /// @param deadline Time when this order expires.\n    /// @param buyToken The token being bought.\n    /// @return tokensBought Amount of tokens bought.\n    function tokenToTokenSwapInput(\n        uint256 tokensSold,\n        uint256 minTokensBought,\n        uint256 minEthBought,\n        uint256 deadline,\n        IERC20TokenV06 buyToken\n    )\n        external\n        returns (uint256 tokensBought);\n}\n\ncontract MixinUniswap {\n\n    using LibERC20TokenV06 for IERC20TokenV06;\n\n    /// @dev Mainnet address of the WETH contract.\n    IEtherTokenV06 private immutable WETH;\n\n    constructor(IEtherTokenV06 weth)\n        public\n    {\n        WETH = weth;\n    }\n\n    function _tradeUniswap(\n        IERC20TokenV06 sellToken,\n        IERC20TokenV06 buyToken,\n        uint256 sellAmount,\n        bytes memory bridgeData\n    )\n        internal\n        returns (uint256 boughtAmount)\n    {\n        _tradeUniswapInternal(WETH, sellToken, buyToken, sellAmount, bridgeData);\n    }\n\n    function _tradeUniswapInternal(\n        IEtherTokenV06 weth,\n        IERC20TokenV06 sellToken,\n        IERC20TokenV06 buyToken,\n        uint256 sellAmount,\n        bytes memory bridgeData\n    )\n        internal\n        returns (uint256 boughtAmount)\n    {\n        IUniswapExchangeFactory exchangeFactory =\n            abi.decode(bridgeData, (IUniswapExchangeFactory));\n\n        // Get the exchange for the token pair.\n        IUniswapExchange exchange = _getUniswapExchangeForTokenPair(\n            weth,\n            exchangeFactory,\n            sellToken,\n            buyToken\n        );\n\n        // Convert from WETH to a token.\n        if (sellToken == weth) {\n            // Unwrap the WETH.\n            weth.withdraw(sellAmount);\n            // Buy as much of `buyToken` token with ETH as possible\n            boughtAmount = exchange.ethToTokenTransferInput{ value: sellAmount }(\n                // Minimum buy amount.\n                1,\n                // Expires after this block.\n                block.timestamp,\n                // Recipient is `this`.\n                address(this)\n            );\n\n        // Convert from a token to WETH.\n        } else if (buyToken == weth) {\n            // Grant the exchange an allowance.\n            sellToken.approveIfBelow(\n                address(exchange),\n                sellAmount\n            );\n            // Buy as much ETH with `sellToken` token as possible.\n            boughtAmount = exchange.tokenToEthSwapInput(\n                // Sell all tokens we hold.\n                sellAmount,\n                // Minimum buy amount.\n                1,\n                // Expires after this block.\n                block.timestamp\n            );\n            // Wrap the ETH.\n            weth.deposit{ value: boughtAmount }();\n        // Convert from one token to another.\n        } else {\n            // Grant the exchange an allowance.\n            sellToken.approveIfBelow(\n                address(exchange),\n                sellAmount\n            );\n            // Buy as much `buyToken` token with `sellToken` token\n            boughtAmount = exchange.tokenToTokenSwapInput(\n                // Sell all tokens we hold.\n                sellAmount,\n                // Minimum buy amount.\n                1,\n                // Must buy at least 1 intermediate wei of ETH.\n                1,\n                // Expires after this block.\n                block.timestamp,\n                // Convert to `buyToken`.\n                buyToken\n            );\n        }\n\n        return boughtAmount;\n    }\n\n    /// @dev Retrieves the uniswap exchange for a given token pair.\n    ///      In the case of a WETH-token exchange, this will be the non-WETH token.\n    ///      In th ecase of a token-token exchange, this will be the first token.\n    /// @param exchangeFactory The exchange factory.\n    /// @param sellToken The address of the token we are converting from.\n    /// @param buyToken The address of the token we are converting to.\n    /// @return exchange The uniswap exchange.\n    function _getUniswapExchangeForTokenPair(\n        IEtherTokenV06 weth,\n        IUniswapExchangeFactory exchangeFactory,\n        IERC20TokenV06 sellToken,\n        IERC20TokenV06 buyToken\n    )\n        private\n        view\n        returns (IUniswapExchange exchange)\n    {\n        // Whichever isn't WETH is the exchange token.\n        exchange = sellToken == weth\n            ? exchangeFactory.getExchange(buyToken)\n            : exchangeFactory.getExchange(sellToken);\n        require(address(exchange) != address(0), \"MixinUniswap/NO_EXCHANGE\");\n    }\n}\n",
        "./UniswapV2Sampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IUniswapV2Router01.sol\";\nimport \"@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinUniswapV2.sol\";\nimport \"./SwapRevertSampler.sol\";\n\n\ncontract UniswapV2Sampler is\n    MixinUniswapV2,\n    SwapRevertSampler\n{\n\n    function sampleSwapFromUniswapV2(\n        address sellToken,\n        address buyToken,\n        bytes memory bridgeData,\n        uint256 takerTokenAmount\n    )\n        external\n        returns (uint256)\n    {\n        return _tradeUniswapV2(\n            IERC20TokenV06(buyToken),\n            takerTokenAmount,\n            bridgeData\n        );\n    }\n\n    /// @dev Sample sell quotes from UniswapV2.\n    /// @param router Router to look up tokens and amounts\n    /// @param path Token route. Should be takerToken -> makerToken\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return gasUsed gas consumed for each sample amount\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromUniswapV2(\n        address router,\n        address[] memory path,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        returns (uint256[] memory gasUsed, uint256[] memory makerTokenAmounts)\n    {\n        (gasUsed, makerTokenAmounts) = _sampleSwapQuotesRevert(\n            SwapRevertSamplerQuoteOpts({\n                sellToken: path[0],\n                buyToken: path[path.length - 1],\n                bridgeData: abi.encode(router, path),\n                getSwapQuoteCallback: this.sampleSwapFromUniswapV2\n            }),\n            takerTokenAmounts\n        );\n    }\n\n    /// @dev Sample buy quotes from UniswapV2.\n    /// @param router Router to look up tokens and amounts\n    /// @param path Token route. Should be takerToken -> makerToken.\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return gasUsed gas consumed for each sample amount\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromUniswapV2(\n        address router,\n        address[] memory path,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        returns (uint256[] memory gasUsed, uint256[] memory takerTokenAmounts)\n    {\n        address[] memory reversedPath = new address[](path.length);\n        for (uint256 i = 0; i < path.length; ++i) {\n            reversedPath[i] = path[path.length - i - 1];\n        }\n\n        (gasUsed, takerTokenAmounts) = _sampleSwapApproximateBuys(\n            SwapRevertSamplerBuyQuoteOpts({\n                sellToken: path[0],\n                buyToken: path[path.length - 1],\n                sellTokenData: abi.encode(router, path),\n                buyTokenData: abi.encode(router, reversedPath),\n                getSwapQuoteCallback: this.sampleSwapFromUniswapV2\n            }),\n            makerTokenAmounts\n        );\n    }\n}\n",
        "./interfaces/IUniswapV2Router01.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface IUniswapV2Router01 {\n\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts);\n\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts);\n}\n",
        "@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinUniswapV2.sol": "// SPDX-License-Identifier: Apache-2.0\n\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"../IBridgeAdapter.sol\";\n\n/*\n    UniswapV2\n*/\ninterface IUniswapV2Router02 {\n\n    /// @dev Swaps an exact amount of input tokens for as many output tokens as possible, along the route determined by the path.\n    ///      The first element of path is the input token, the last is the output token, and any intermediate elements represent\n    ///      intermediate pairs to trade through (if, for example, a direct pair does not exist).\n    /// @param amountIn The amount of input tokens to send.\n    /// @param amountOutMin The minimum amount of output tokens that must be received for the transaction not to revert.\n    /// @param path An array of token addresses. path.length must be >= 2. Pools for each consecutive pair of addresses must exist and have liquidity.\n    /// @param to Recipient of the output tokens.\n    /// @param deadline Unix timestamp after which the transaction will revert.\n    /// @return amounts The input token amount and all subsequent output token amounts.\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        IERC20TokenV06[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n}\n\ncontract MixinUniswapV2 {\n\n    using LibERC20TokenV06 for IERC20TokenV06;\n\n    function _tradeUniswapV2(\n        IERC20TokenV06 buyToken,\n        uint256 sellAmount,\n        bytes memory bridgeData\n    )\n        internal\n        returns (uint256 boughtAmount)\n    {\n        IUniswapV2Router02 router;\n        IERC20TokenV06[] memory path;\n        {\n            address[] memory _path;\n            (router, _path) = abi.decode(bridgeData, (IUniswapV2Router02, address[]));\n            // To get around `abi.decode()` not supporting interface array types.\n            assembly { path := _path }\n        }\n\n        require(path.length >= 2, \"MixinUniswapV2/PATH_LENGTH_MUST_BE_AT_LEAST_TWO\");\n        require(\n            path[path.length - 1] == buyToken,\n            \"MixinUniswapV2/LAST_ELEMENT_OF_PATH_MUST_MATCH_OUTPUT_TOKEN\"\n        );\n        // Grant the Uniswap router an allowance to sell the first token.\n        path[0].approveIfBelow(address(router), sellAmount);\n\n        uint[] memory amounts = router.swapExactTokensForTokens(\n             // Sell all tokens we hold.\n            sellAmount,\n             // Minimum buy amount.\n            1,\n            // Convert to `buyToken` along this path.\n            path,\n            // Recipient is `this`.\n            address(this),\n            // Expires after this block.\n            block.timestamp\n        );\n        return amounts[amounts.length-1];\n    }\n}\n",
        "./UniswapV3Sampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\n\nimport \"@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinUniswapV3.sol\";\nimport \"./SwapRevertSampler.sol\";\n\ninterface IUniswapV3Quoter {\n    function factory()\n        external\n        view\n        returns (IUniswapV3Factory factory);\n}\n\ninterface IUniswapV3Factory {\n    function getPool(IERC20TokenV06 a, IERC20TokenV06 b, uint24 fee)\n        external\n        view\n        returns (IUniswapV3Pool pool);\n}\n\ninterface IUniswapV3Pool {\n    function token0() external view returns (IERC20TokenV06);\n    function token1() external view returns (IERC20TokenV06);\n    function fee() external view returns (uint24);\n}\n\ncontract UniswapV3Sampler is\n    MixinUniswapV3,\n    SwapRevertSampler\n{\n    using LibRichErrorsV06 for bytes;\n\n    function sampleSwapFromUniswapV3(\n        address sellToken,\n        address buyToken,\n        bytes memory bridgeData,\n        uint256 takerTokenAmount\n    )\n        external\n        returns (uint256)\n    {\n        return _tradeUniswapV3(\n            IERC20TokenV06(sellToken),\n            takerTokenAmount,\n            bridgeData\n        );\n    }\n\n    /// @dev Sample sell quotes from UniswapV3.\n    /// @param quoter UniswapV3 Quoter contract.\n    /// @param router UniswapV3 Router contract.\n    /// @param path Token route. Should be takerToken -> makerToken\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return uniswapPaths The encoded uniswap path for each sample.\n    /// @return gasUsed gas consumed in each sample sell\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromUniswapV3(\n        IUniswapV3Quoter quoter,\n        address router,\n        IERC20TokenV06[] memory path,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        returns (\n            bytes[] memory uniswapPaths,\n            uint256[] memory gasUsed,\n            uint256[] memory makerTokenAmounts\n        )\n    {\n        IUniswapV3Pool[][] memory poolPaths =\n            _getValidPoolPaths(quoter.factory(), path, 0);\n\n        makerTokenAmounts = new uint256[](takerTokenAmounts.length);\n        gasUsed = new uint256[](takerTokenAmounts.length);\n        uniswapPaths = new bytes[](takerTokenAmounts.length);\n\n        for (uint256 i = 0; i < poolPaths.length; ++i) {\n            bytes memory _uniswapPath = _toUniswapPath(path, poolPaths[i]);\n            (\n                uint256[] memory _gasUsed,\n                uint256[] memory _makerTokenAmounts\n            ) = _sampleSwapQuotesRevert(\n                SwapRevertSamplerQuoteOpts({\n                    sellToken: address(path[0]),\n                    buyToken: address(path[path.length - 1]),\n                    bridgeData: abi.encode(router, _uniswapPath),\n                    getSwapQuoteCallback: this.sampleSwapFromUniswapV3\n                }),\n                takerTokenAmounts\n            );\n            for (uint256 j = 0; j < _makerTokenAmounts.length; ++j) {\n                // Break early if we can't complete the sells.\n                if (_makerTokenAmounts[j] == 0) {\n                    break;\n                }\n                // If this is better than what we have found, prefer it\n                if (makerTokenAmounts[j] <= _makerTokenAmounts[j]) {\n                    makerTokenAmounts[j] = _makerTokenAmounts[j];\n                    gasUsed[j] = _gasUsed[j];\n                    uniswapPaths[j] = _uniswapPath;\n                }\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from UniswapV3.\n    /// @param quoter UniswapV3 Quoter contract.\n    /// @param router UniswapV3 Router contract.\n    /// @param path Token route. Should be takerToken -> makerToken.\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return uniswapPaths The encoded uniswap path for each sample.\n    /// @return gasUsed gas consumed in each sample sell\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromUniswapV3(\n        IUniswapV3Quoter quoter,\n        address router,\n        IERC20TokenV06[] memory path,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        returns (\n            bytes[] memory uniswapPaths,\n            uint256[] memory gasUsed,\n            uint256[] memory takerTokenAmounts\n        )\n    {\n        IUniswapV3Pool[][] memory poolPaths =\n            _getValidPoolPaths(quoter.factory(), path, 0);\n        IERC20TokenV06[] memory reversedPath = _reverseTokenPath(path);\n\n        takerTokenAmounts = new uint256[](makerTokenAmounts.length);\n        gasUsed = new uint256[](makerTokenAmounts.length);\n        uniswapPaths = new bytes[](makerTokenAmounts.length);\n\n        for (uint256 i = 0; i < poolPaths.length; ++i) {\n            (\n                uint256[] memory _gasUsed,\n                uint256[] memory _takerTokenAmounts\n            ) = _sampleSwapApproximateBuys(\n                SwapRevertSamplerBuyQuoteOpts({\n                    sellToken: address(path[0]),\n                    buyToken: address(path[path.length - 1]),\n                    sellTokenData: abi.encode(router, _toUniswapPath(path, poolPaths[i])),\n                    buyTokenData: abi.encode(\n                        router,\n                        _toUniswapPath(\n                            reversedPath,\n                            _reversePoolPath(poolPaths[i])\n                        )\n                    ),\n                    getSwapQuoteCallback: this.sampleSwapFromUniswapV3\n                }),\n                makerTokenAmounts\n            );\n\n            for (uint256 j = 0; j < _takerTokenAmounts.length; ++j) {\n                // Break early if we can't complete the buys.\n                if (_takerTokenAmounts[j] == 0) {\n                    break;\n                }\n                // We can go from high to low here\n                if (takerTokenAmounts[j] == 0 || takerTokenAmounts[j] >= _takerTokenAmounts[j]) {\n                    takerTokenAmounts[j] = _takerTokenAmounts[j];\n                    gasUsed[j] = _gasUsed[j];\n                    // But the output path should still be encoded for sells.\n                    uniswapPaths[j] = _toUniswapPath(path, poolPaths[i]);\n                }\n            }\n        }\n    }\n\n    function _getValidPoolPaths(\n        IUniswapV3Factory factory,\n        IERC20TokenV06[] memory tokenPath,\n        uint256 startIndex\n    )\n        private\n        view\n        returns (IUniswapV3Pool[][] memory poolPaths)\n    {\n        require(\n            tokenPath.length - startIndex >= 2,\n            \"UniswapV3Sampler/tokenPath too short\"\n        );\n        uint24[3] memory validPoolFees = [\n            // The launch pool fees. Could get hairier if they add more.\n            uint24(0.0005e6),\n            uint24(0.003e6),\n            uint24(0.01e6)\n        ];\n        IUniswapV3Pool[] memory validPools =\n            new IUniswapV3Pool[](validPoolFees.length);\n        uint256 numValidPools = 0;\n        {\n            IERC20TokenV06 inputToken = tokenPath[startIndex];\n            IERC20TokenV06 outputToken = tokenPath[startIndex + 1];\n            for (uint256 i = 0; i < validPoolFees.length; ++i) {\n                IUniswapV3Pool pool =\n                factory.getPool(inputToken, outputToken, validPoolFees[i]);\n                if (_isValidPool(pool)) {\n                    validPools[numValidPools++] = pool;\n                }\n            }\n        }\n        if (numValidPools == 0) {\n            // No valid pools for this hop.\n            return poolPaths;\n        }\n        if (startIndex + 2 == tokenPath.length) {\n            // End of path.\n            poolPaths = new IUniswapV3Pool[][](numValidPools);\n            for (uint256 i = 0; i < numValidPools; ++i) {\n                poolPaths[i] = new IUniswapV3Pool[](1);\n                poolPaths[i][0] = validPools[i];\n            }\n            return poolPaths;\n        }\n        // Get paths for subsequent hops.\n        IUniswapV3Pool[][] memory subsequentPoolPaths =\n            _getValidPoolPaths(factory, tokenPath, startIndex + 1);\n        if (subsequentPoolPaths.length == 0) {\n            // Could not complete the path.\n            return poolPaths;\n        }\n        // Combine our pools with the next hop paths.\n        poolPaths = new IUniswapV3Pool[][](\n            numValidPools * subsequentPoolPaths.length\n        );\n        for (uint256 i = 0; i < numValidPools; ++i) {\n            for (uint256 j = 0; j < subsequentPoolPaths.length; ++j) {\n                uint256 o = i * subsequentPoolPaths.length + j;\n                // Prepend pool to the subsequent path.\n                poolPaths[o] =\n                    new IUniswapV3Pool[](1 + subsequentPoolPaths[j].length);\n                poolPaths[o][0] = validPools[i];\n                for (uint256 k = 0; k < subsequentPoolPaths[j].length; ++k) {\n                    poolPaths[o][1 + k] = subsequentPoolPaths[j][k];\n                }\n            }\n        }\n        return poolPaths;\n    }\n\n    function _reverseTokenPath(IERC20TokenV06[] memory tokenPath)\n        private\n        returns (IERC20TokenV06[] memory reversed)\n    {\n        reversed = new IERC20TokenV06[](tokenPath.length);\n        for (uint256 i = 0; i < tokenPath.length; ++i) {\n            reversed[i] = tokenPath[tokenPath.length - i - 1];\n        }\n    }\n\n    function _reversePoolPath(IUniswapV3Pool[] memory poolPath)\n        private\n        returns (IUniswapV3Pool[] memory reversed)\n    {\n        reversed = new IUniswapV3Pool[](poolPath.length);\n        for (uint256 i = 0; i < poolPath.length; ++i) {\n            reversed[i] = poolPath[poolPath.length - i - 1];\n        }\n    }\n\n    function _isValidPool(IUniswapV3Pool pool)\n        private\n        view\n        returns (bool isValid)\n    {\n        // Check if it has been deployed.\n        {\n            uint256 codeSize;\n            assembly {\n                codeSize := extcodesize(pool)\n            }\n            if (codeSize == 0) {\n                return false;\n            }\n        }\n        // // Must have a balance of both tokens.\n        if (pool.token0().balanceOf(address(pool)) == 0) {\n            return false;\n        }\n        if (pool.token1().balanceOf(address(pool)) == 0) {\n            return false;\n        }\n        return true;\n    }\n\n    function _toUniswapPath(\n        IERC20TokenV06[] memory tokenPath,\n        IUniswapV3Pool[] memory poolPath\n    )\n        private\n        view\n        returns (bytes memory uniswapPath)\n    {\n        require(\n            tokenPath.length >= 2 && tokenPath.length == poolPath.length + 1,\n            \"UniswapV3Sampler/invalid path lengths\"\n        );\n        // Uniswap paths are tightly packed as:\n        // [token0, token0token1PairFee, token1, token1Token2PairFee, token2, ...]\n        uniswapPath = new bytes(tokenPath.length * 20 + poolPath.length * 3);\n        uint256 o;\n        assembly { o := add(uniswapPath, 32) }\n        for (uint256 i = 0; i < tokenPath.length; ++i) {\n            if (i > 0) {\n                uint24 poolFee = poolPath[i - 1].fee();\n                assembly {\n                    mstore(o, shl(232, poolFee))\n                    o := add(o, 3)\n                }\n            }\n            IERC20TokenV06 token = tokenPath[i];\n            assembly {\n                mstore(o, shl(96, token))\n                o := add(o, 20)\n            }\n        }\n    }\n}\n",
        "@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinUniswapV3.sol": "// SPDX-License-Identifier: Apache-2.0\n\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"../IBridgeAdapter.sol\";\n\ninterface IUniswapV3Router {\n\n    struct ExactInputParams {\n        bytes path;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n    }\n\n    function exactInput(ExactInputParams memory params)\n        external\n        payable\n        returns (uint256 amountOut);\n}\n\ncontract MixinUniswapV3 {\n\n    using LibERC20TokenV06 for IERC20TokenV06;\n\n    function _tradeUniswapV3(\n        IERC20TokenV06 sellToken,\n        uint256 sellAmount,\n        bytes memory bridgeData\n    )\n        internal\n        returns (uint256 boughtAmount)\n    {\n        (IUniswapV3Router router, bytes memory path) =\n            abi.decode(bridgeData, (IUniswapV3Router, bytes));\n\n        // Grant the Uniswap router an allowance to sell the sell token.\n        sellToken.approveIfBelow(address(router), sellAmount);\n\n        boughtAmount = router.exactInput(IUniswapV3Router.ExactInputParams({\n            path: path,\n            recipient: address(this),\n            deadline: block.timestamp,\n            amountIn: sellAmount,\n            amountOutMinimum: 1\n        }));\n    }\n}\n",
        "./UtilitySampler.sol": "\n// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\n\ncontract UtilitySampler {\n\n    using LibERC20TokenV06 for IERC20TokenV06;\n\n    IERC20TokenV06 private immutable UTILITY_ETH_ADDRESS = IERC20TokenV06(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\n\n    function getTokenDecimals(IERC20TokenV06[] memory tokens)\n        public\n        view\n        returns (uint256[] memory decimals)\n    {\n        decimals = new uint256[](tokens.length);\n        for (uint256 i = 0; i != tokens.length; i++) {\n            decimals[i] = tokens[i] == UTILITY_ETH_ADDRESS\n                ? 18\n                : tokens[i].compatDecimals();\n        }\n    }\n\n    function getBalanceOf(IERC20TokenV06[] memory tokens, address account)\n        public\n        view\n        returns (uint256[] memory balances)\n    {\n        balances = new uint256[](tokens.length);\n        for (uint256 i = 0; i != tokens.length; i++) {\n            balances[i] = tokens[i] == UTILITY_ETH_ADDRESS\n                ? account.balance\n                : tokens[i].compatBalanceOf(account);\n        }\n    }\n\n    function getAllowanceOf(IERC20TokenV06[] memory tokens, address account, address spender)\n        public\n        view\n        returns (uint256[] memory allowances)\n    {\n        allowances = new uint256[](tokens.length);\n        for (uint256 i = 0; i != tokens.length; i++) {\n            allowances[i] = tokens[i] == UTILITY_ETH_ADDRESS\n                ? 0\n                : tokens[i].compatAllowance(account, spender);\n        }\n    }\n\n    function isContract(address account)\n        public\n        view\n        returns (bool)\n    {\n        uint256 size;\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    function getCode(address addr)\n        public\n        view\n        returns (bytes memory code)\n    {\n        assembly {\n            // retrieve the size of the code, this needs assembly\n            let size := extcodesize(addr)\n            // allocate output byte array - this could also be done without assembly\n            // by using o_code = new bytes(size)\n            code := mload(0x40)\n            // new \"memory end\" including padding\n            mstore(0x40, add(code, and(add(add(size, 0x20), 0x1f), not(0x1f))))\n            // store length in memory\n            mstore(code, size)\n            // actually retrieve the code, this needs assembly\n            extcodecopy(addr, add(code, 0x20), 0, size)\n        }\n    }\n}"
    },
    "compiler": {
        "name": "solc",
        "version": "0.6.12+commit.27d51765",
        "settings": {
            "remappings": [
                "@0x/contracts-zero-ex=/Users/jacob/projects/ethdev/0x/workspace-remote/workspace/0x-monorepo/packages/asset-swapper/node_modules/@0x/contracts-zero-ex",
                "@0x/contracts-erc20=/Users/jacob/projects/ethdev/0x/workspace-remote/workspace/0x-monorepo/packages/asset-swapper/node_modules/@0x/contracts-erc20",
                "@0x/contracts-utils=/Users/jacob/projects/ethdev/0x/workspace-remote/workspace/0x-monorepo/packages/asset-swapper/node_modules/@0x/contracts-utils"
            ],
            "optimizer": {
                "enabled": true,
                "runs": 200,
                "details": {
                    "yul": true,
                    "deduplicate": true
                }
            },
            "outputSelection": {
                "*": {
                    "*": [
                        "abi",
                        "devdoc",
                        "evm.bytecode.object",
                        "evm.bytecode.sourceMap",
                        "evm.deployedBytecode.object",
                        "evm.deployedBytecode.sourceMap"
                    ]
                }
            },
            "evmVersion": "istanbul"
        }
    },
    "chains": {}
}
