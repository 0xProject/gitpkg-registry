{
    "schemaVersion": "2.0.0",
    "contractName": "ERC20BridgeSampler",
    "compilerOutput": {
        "abi": [
            {
                "constant": true,
                "inputs": [
                    {
                        "internalType": "bytes[]",
                        "name": "callDatas",
                        "type": "bytes[]"
                    }
                ],
                "name": "batchCall",
                "outputs": [
                    {
                        "internalType": "bytes[]",
                        "name": "callResults",
                        "type": "bytes[]"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "internalType": "bytes32",
                        "name": "reserveId",
                        "type": "bytes32"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    }
                ],
                "name": "encodeKyberHint",
                "outputs": [
                    {
                        "internalType": "bytes",
                        "name": "hint",
                        "type": "bytes"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "makerAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "takerAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "feeRecipientAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "senderAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "uint256",
                                "name": "makerAssetAmount",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "takerAssetAmount",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "makerFee",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "takerFee",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "expirationTimeSeconds",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "salt",
                                "type": "uint256"
                            },
                            {
                                "internalType": "bytes",
                                "name": "makerAssetData",
                                "type": "bytes"
                            },
                            {
                                "internalType": "bytes",
                                "name": "takerAssetData",
                                "type": "bytes"
                            },
                            {
                                "internalType": "bytes",
                                "name": "makerFeeAssetData",
                                "type": "bytes"
                            },
                            {
                                "internalType": "bytes",
                                "name": "takerFeeAssetData",
                                "type": "bytes"
                            }
                        ],
                        "internalType": "struct LibOrder.Order[]",
                        "name": "orders",
                        "type": "tuple[]"
                    },
                    {
                        "internalType": "bytes[]",
                        "name": "orderSignatures",
                        "type": "bytes[]"
                    },
                    {
                        "internalType": "contract IExchange",
                        "name": "exchange",
                        "type": "address"
                    }
                ],
                "name": "getOrderFillableMakerAssetAmounts",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "orderFillableMakerAssetAmounts",
                        "type": "uint256[]"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "makerAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "takerAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "feeRecipientAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "senderAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "uint256",
                                "name": "makerAssetAmount",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "takerAssetAmount",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "makerFee",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "takerFee",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "expirationTimeSeconds",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "salt",
                                "type": "uint256"
                            },
                            {
                                "internalType": "bytes",
                                "name": "makerAssetData",
                                "type": "bytes"
                            },
                            {
                                "internalType": "bytes",
                                "name": "takerAssetData",
                                "type": "bytes"
                            },
                            {
                                "internalType": "bytes",
                                "name": "makerFeeAssetData",
                                "type": "bytes"
                            },
                            {
                                "internalType": "bytes",
                                "name": "takerFeeAssetData",
                                "type": "bytes"
                            }
                        ],
                        "internalType": "struct LibOrder.Order",
                        "name": "order",
                        "type": "tuple"
                    },
                    {
                        "internalType": "bytes",
                        "name": "signature",
                        "type": "bytes"
                    },
                    {
                        "internalType": "contract IExchange",
                        "name": "exchange",
                        "type": "address"
                    }
                ],
                "name": "getOrderFillableTakerAmount",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "fillableTakerAmount",
                        "type": "uint256"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "makerAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "takerAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "feeRecipientAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "senderAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "uint256",
                                "name": "makerAssetAmount",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "takerAssetAmount",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "makerFee",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "takerFee",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "expirationTimeSeconds",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "salt",
                                "type": "uint256"
                            },
                            {
                                "internalType": "bytes",
                                "name": "makerAssetData",
                                "type": "bytes"
                            },
                            {
                                "internalType": "bytes",
                                "name": "takerAssetData",
                                "type": "bytes"
                            },
                            {
                                "internalType": "bytes",
                                "name": "makerFeeAssetData",
                                "type": "bytes"
                            },
                            {
                                "internalType": "bytes",
                                "name": "takerFeeAssetData",
                                "type": "bytes"
                            }
                        ],
                        "internalType": "struct LibOrder.Order[]",
                        "name": "orders",
                        "type": "tuple[]"
                    },
                    {
                        "internalType": "bytes[]",
                        "name": "orderSignatures",
                        "type": "bytes[]"
                    },
                    {
                        "internalType": "contract IExchange",
                        "name": "exchange",
                        "type": "address"
                    }
                ],
                "name": "getOrderFillableTakerAssetAmounts",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "orderFillableTakerAssetAmounts",
                        "type": "uint256[]"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "poolAddress",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromBalancer",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "poolAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes4",
                                "name": "sellQuoteFunctionSelector",
                                "type": "bytes4"
                            },
                            {
                                "internalType": "bytes4",
                                "name": "buyQuoteFunctionSelector",
                                "type": "bytes4"
                            }
                        ],
                        "internalType": "struct CurveSampler.CurveInfo",
                        "name": "curveInfo",
                        "type": "tuple"
                    },
                    {
                        "internalType": "int128",
                        "name": "fromTokenIdx",
                        "type": "int128"
                    },
                    {
                        "internalType": "int128",
                        "name": "toTokenIdx",
                        "type": "int128"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromCurve",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromDODO",
                "outputs": [
                    {
                        "internalType": "bool",
                        "name": "sellBase",
                        "type": "bool"
                    },
                    {
                        "internalType": "address",
                        "name": "pool",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromEth2Dai",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "internalType": "bytes32",
                        "name": "reserveId",
                        "type": "bytes32"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromKyberNetwork",
                "outputs": [
                    {
                        "internalType": "bytes",
                        "name": "hint",
                        "type": "bytes"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "registryAddress",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromLiquidityProviderRegistry",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    },
                    {
                        "internalType": "address",
                        "name": "providerAddress",
                        "type": "address"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromMStable",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromMooniswap",
                "outputs": [
                    {
                        "internalType": "contract IMooniswap",
                        "name": "pool",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromShell",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "router",
                        "type": "address"
                    },
                    {
                        "internalType": "address[]",
                        "name": "path",
                        "type": "address[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromSushiSwap",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromUniswap",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "internalType": "address[]",
                        "name": "path",
                        "type": "address[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromUniswapV2",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "internalType": "bytes",
                        "name": "hint",
                        "type": "bytes"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256",
                        "name": "takerTokenAmount",
                        "type": "uint256"
                    }
                ],
                "name": "sampleSellFromKyberNetwork",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "makerTokenAmount",
                        "type": "uint256"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "poolAddress",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromBalancer",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "poolAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes4",
                                "name": "sellQuoteFunctionSelector",
                                "type": "bytes4"
                            },
                            {
                                "internalType": "bytes4",
                                "name": "buyQuoteFunctionSelector",
                                "type": "bytes4"
                            }
                        ],
                        "internalType": "struct CurveSampler.CurveInfo",
                        "name": "curveInfo",
                        "type": "tuple"
                    },
                    {
                        "internalType": "int128",
                        "name": "fromTokenIdx",
                        "type": "int128"
                    },
                    {
                        "internalType": "int128",
                        "name": "toTokenIdx",
                        "type": "int128"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromCurve",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromDODO",
                "outputs": [
                    {
                        "internalType": "bool",
                        "name": "sellBase",
                        "type": "bool"
                    },
                    {
                        "internalType": "address",
                        "name": "pool",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromEth2Dai",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "internalType": "bytes32",
                        "name": "reserveId",
                        "type": "bytes32"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromKyberNetwork",
                "outputs": [
                    {
                        "internalType": "bytes",
                        "name": "hint",
                        "type": "bytes"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "registryAddress",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromLiquidityProviderRegistry",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    },
                    {
                        "internalType": "address",
                        "name": "providerAddress",
                        "type": "address"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromMStable",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromMooniswap",
                "outputs": [
                    {
                        "internalType": "contract IMooniswap",
                        "name": "pool",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "multibridge",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "intermediateToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromMultiBridge",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromShell",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "router",
                        "type": "address"
                    },
                    {
                        "internalType": "address[]",
                        "name": "path",
                        "type": "address[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromSushiSwap",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromUniswap",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "internalType": "address[]",
                        "name": "path",
                        "type": "address[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromUniswapV2",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "mooniswapTakerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "mooniswapMakerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256",
                        "name": "takerTokenAmount",
                        "type": "uint256"
                    }
                ],
                "name": "sampleSingleSellFromMooniswapPool",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "makerTokenAmount",
                        "type": "uint256"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "internalType": "bytes[]",
                        "name": "firstHopCalls",
                        "type": "bytes[]"
                    },
                    {
                        "internalType": "bytes[]",
                        "name": "secondHopCalls",
                        "type": "bytes[]"
                    },
                    {
                        "internalType": "uint256",
                        "name": "buyAmount",
                        "type": "uint256"
                    }
                ],
                "name": "sampleTwoHopBuy",
                "outputs": [
                    {
                        "components": [
                            {
                                "internalType": "uint256",
                                "name": "sourceIndex",
                                "type": "uint256"
                            },
                            {
                                "internalType": "bytes",
                                "name": "returnData",
                                "type": "bytes"
                            }
                        ],
                        "internalType": "struct TwoHopSampler.HopInfo",
                        "name": "firstHop",
                        "type": "tuple"
                    },
                    {
                        "components": [
                            {
                                "internalType": "uint256",
                                "name": "sourceIndex",
                                "type": "uint256"
                            },
                            {
                                "internalType": "bytes",
                                "name": "returnData",
                                "type": "bytes"
                            }
                        ],
                        "internalType": "struct TwoHopSampler.HopInfo",
                        "name": "secondHop",
                        "type": "tuple"
                    },
                    {
                        "internalType": "uint256",
                        "name": "sellAmount",
                        "type": "uint256"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "internalType": "bytes[]",
                        "name": "firstHopCalls",
                        "type": "bytes[]"
                    },
                    {
                        "internalType": "bytes[]",
                        "name": "secondHopCalls",
                        "type": "bytes[]"
                    },
                    {
                        "internalType": "uint256",
                        "name": "sellAmount",
                        "type": "uint256"
                    }
                ],
                "name": "sampleTwoHopSell",
                "outputs": [
                    {
                        "components": [
                            {
                                "internalType": "uint256",
                                "name": "sourceIndex",
                                "type": "uint256"
                            },
                            {
                                "internalType": "bytes",
                                "name": "returnData",
                                "type": "bytes"
                            }
                        ],
                        "internalType": "struct TwoHopSampler.HopInfo",
                        "name": "firstHop",
                        "type": "tuple"
                    },
                    {
                        "components": [
                            {
                                "internalType": "uint256",
                                "name": "sourceIndex",
                                "type": "uint256"
                            },
                            {
                                "internalType": "bytes",
                                "name": "returnData",
                                "type": "bytes"
                            }
                        ],
                        "internalType": "struct TwoHopSampler.HopInfo",
                        "name": "secondHop",
                        "type": "tuple"
                    },
                    {
                        "internalType": "uint256",
                        "name": "buyAmount",
                        "type": "uint256"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            }
        ],
        "devdoc": {
            "methods": {
                "batchCall(bytes[])": {
                    "details": "Call multiple public functions on this contract in a single transaction.",
                    "params": {
                        "callDatas": "ABI-encoded call data for each function call."
                    },
                    "return": "callResults ABI-encoded results data for each call."
                },
                "getOrderFillableMakerAssetAmounts((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes,bytes,bytes)[],bytes[],address)": {
                    "details": "Queries the fillable taker asset amounts of native orders.      Effectively ignores orders that have empty signatures or",
                    "params": {
                        "exchange": "The V3 exchange.",
                        "orderSignatures": "Signatures for each respective order in `orders`.",
                        "orders": "Native orders to query."
                    },
                    "return": "orderFillableMakerAssetAmounts How much maker asset can be filled         by each order in `orders`."
                },
                "getOrderFillableTakerAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes,bytes,bytes),bytes,address)": {
                    "details": "Get the fillable taker amount of an order, taking into account      order state, maker fees, and maker balances."
                },
                "getOrderFillableTakerAssetAmounts((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes,bytes,bytes)[],bytes[],address)": {
                    "details": "Queries the fillable taker asset amounts of native orders.      Effectively ignores orders that have empty signatures or      maker/taker asset amounts (returning 0).",
                    "params": {
                        "exchange": "The V3 exchange.",
                        "orderSignatures": "Signatures for each respective order in `orders`.",
                        "orders": "Native orders to query."
                    },
                    "return": "orderFillableTakerAssetAmounts How much taker asset can be filled         by each order in `orders`."
                },
                "sampleBuysFromBalancer(address,address,address,uint256[])": {
                    "details": "Sample buy quotes from Balancer.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "makerTokenAmounts": "Maker token buy amount for each sample.",
                        "poolAddress": "Address of the Balancer pool to query.",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "return": "takerTokenAmounts Taker amounts sold at each maker token         amount."
                },
                "sampleBuysFromCurve((address,bytes4,bytes4),int128,int128,uint256[])": {
                    "details": "Sample buy quotes from Curve.",
                    "params": {
                        "curveInfo": "Curve information specific to this token pair.",
                        "fromTokenIdx": "Index of the taker token (what to sell).",
                        "makerTokenAmounts": "Maker token buy amount for each sample.",
                        "toTokenIdx": "Index of the maker token (what to buy)."
                    },
                    "return": "takerTokenAmounts Taker amounts sold at each maker token         amount."
                },
                "sampleBuysFromDODO(address,address,uint256[])": {
                    "details": "Sample buy quotes from DODO.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "makerTokenAmounts": "Maker token sell amount for each sample.",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "return": "takerTokenAmounts Taker amounts sold at each maker token         amount."
                },
                "sampleBuysFromEth2Dai(address,address,uint256[])": {
                    "details": "Sample buy quotes from Eth2Dai/Oasis.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Maker token sell amount for each sample."
                    },
                    "return": "takerTokenAmounts Taker amounts sold at each maker token         amount."
                },
                "sampleBuysFromKyberNetwork(bytes32,address,address,uint256[])": {
                    "details": "Sample buy quotes from Kyber.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "makerTokenAmounts": "Maker token buy amount for each sample.",
                        "reserveId": "The selected kyber reserve",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "return": "hint The hint for the selected reservetakerTokenAmounts Taker amounts sold at each maker token amount."
                },
                "sampleBuysFromLiquidityProviderRegistry(address,address,address,uint256[])": {
                    "details": "Sample buy quotes from an arbitrary on-chain liquidity provider.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "makerTokenAmounts": "Maker token buy amount for each sample.",
                        "registryAddress": "Address of the liquidity provider registry contract.",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "return": "takerTokenAmounts Taker amounts sold at each maker token         amount."
                },
                "sampleBuysFromMStable(address,address,uint256[])": {
                    "details": "Sample buy quotes from MStable mUSD contract",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "makerTokenAmounts": "Maker token buy amount for each sample.",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "return": "takerTokenAmounts Taker amounts sold at each maker token         amount."
                },
                "sampleBuysFromMooniswap(address,address,uint256[])": {
                    "details": "Sample buy quotes from Mooniswap.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "makerTokenAmounts": "Maker token sell amount for each sample.",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "return": "takerTokenAmounts Taker amounts sold at each maker token         amount."
                },
                "sampleBuysFromShell(address,address,uint256[])": {
                    "details": "Sample buy quotes from Shell contract",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "makerTokenAmounts": "Maker token buy amount for each sample.",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "return": "takerTokenAmounts Taker amounts sold at each maker token         amount."
                },
                "sampleBuysFromSushiSwap(address,address[],uint256[])": {
                    "details": "Sample buy quotes from SushiSwap",
                    "params": {
                        "makerTokenAmounts": "Maker token buy amount for each sample.",
                        "path": "Token route. Should be takerToken -> makerToken.",
                        "router": "Router to look up tokens and amounts"
                    },
                    "return": "takerTokenAmounts Taker amounts sold at each maker token         amount."
                },
                "sampleBuysFromUniswap(address,address,uint256[])": {
                    "details": "Sample buy quotes from Uniswap.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "makerTokenAmounts": "Maker token sell amount for each sample.",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "return": "takerTokenAmounts Taker amounts sold at each maker token         amount."
                },
                "sampleBuysFromUniswapV2(address[],uint256[])": {
                    "details": "Sample buy quotes from UniswapV2.",
                    "params": {
                        "makerTokenAmounts": "Maker token buy amount for each sample.",
                        "path": "Token route. Should be takerToken -> makerToken."
                    },
                    "return": "takerTokenAmounts Taker amounts sold at each maker token         amount."
                },
                "sampleSellsFromBalancer(address,address,address,uint256[])": {
                    "details": "Sample sell quotes from Balancer.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "poolAddress": "Address of the Balancer pool to query.",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "return": "makerTokenAmounts Maker amounts bought at each taker token         amount."
                },
                "sampleSellsFromCurve((address,bytes4,bytes4),int128,int128,uint256[])": {
                    "details": "Sample sell quotes from Curve.",
                    "params": {
                        "curveInfo": "Curve information specific to this token pair.",
                        "fromTokenIdx": "Index of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample.",
                        "toTokenIdx": "Index of the maker token (what to buy)."
                    },
                    "return": "makerTokenAmounts Maker amounts bought at each taker token         amount."
                },
                "sampleSellsFromDODO(address,address,uint256[])": {
                    "details": "Sample sell quotes from DODO.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "return": "makerTokenAmounts Maker amounts bought at each taker token         amount."
                },
                "sampleSellsFromEth2Dai(address,address,uint256[])": {
                    "details": "Sample sell quotes from Eth2Dai/Oasis.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "return": "makerTokenAmounts Maker amounts bought at each taker token         amount."
                },
                "sampleSellsFromKyberNetwork(bytes32,address,address,uint256[])": {
                    "details": "Sample sell quotes from Kyber.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "reserveId": "The selected kyber reserve",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "return": "hint The hint for the selected reservemakerTokenAmounts Maker amounts bought at each taker token amount."
                },
                "sampleSellsFromLiquidityProviderRegistry(address,address,address,uint256[])": {
                    "details": "Sample sell quotes from an arbitrary on-chain liquidity provider.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "registryAddress": "Address of the liquidity provider registry contract.",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "return": "makerTokenAmounts Maker amounts bought at each taker token         amount."
                },
                "sampleSellsFromMStable(address,address,uint256[])": {
                    "details": "Sample sell quotes from the mStable mUSD contract",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "return": "makerTokenAmounts Maker amounts bought at each taker token         amount."
                },
                "sampleSellsFromMooniswap(address,address,uint256[])": {
                    "details": "Sample sell quotes from Mooniswap.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "return": "makerTokenAmounts Maker amounts bought at each taker token         amount."
                },
                "sampleSellsFromMultiBridge(address,address,address,address,uint256[])": {
                    "details": "Sample sell quotes from MultiBridge.",
                    "params": {
                        "intermediateToken": "The address of the intermediate token to        use in an indirect route.",
                        "makerToken": "Address of the maker token (what to buy).",
                        "multibridge": "Address of the MultiBridge contract.",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "return": "makerTokenAmounts Maker amounts bought at each taker token         amount."
                },
                "sampleSellsFromShell(address,address,uint256[])": {
                    "details": "Sample sell quotes from the Shell contract",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "return": "makerTokenAmounts Maker amounts bought at each taker token         amount."
                },
                "sampleSellsFromSushiSwap(address,address[],uint256[])": {
                    "details": "Sample sell quotes from SushiSwap.",
                    "params": {
                        "path": "Token route. Should be takerToken -> makerToken",
                        "router": "Router to look up tokens and amounts",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "return": "makerTokenAmounts Maker amounts bought at each taker token         amount."
                },
                "sampleSellsFromUniswap(address,address,uint256[])": {
                    "details": "Sample sell quotes from Uniswap.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "return": "makerTokenAmounts Maker amounts bought at each taker token         amount."
                },
                "sampleSellsFromUniswapV2(address[],uint256[])": {
                    "details": "Sample sell quotes from UniswapV2.",
                    "params": {
                        "path": "Token route. Should be takerToken -> makerToken",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "return": "makerTokenAmounts Maker amounts bought at each taker token         amount."
                }
            }
        },
        "evm": {
            "bytecode": {
                "linkReferences": {},
                "object": "",
                "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x82F3 DUP1 PUSH3 0x22 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x226 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8E5A0E07 GT PUSH2 0x12A JUMPI DUP1 PUSH4 0xBE5B12B4 GT PUSH2 0xBD JUMPI DUP1 PUSH4 0xD442057B GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xE68248F7 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xE68248F7 EQ PUSH2 0x4FD JUMPI DUP1 PUSH4 0xE9A8E442 EQ PUSH2 0x510 JUMPI DUP1 PUSH4 0xFC9FE41B EQ PUSH2 0x523 JUMPI PUSH2 0x226 JUMP JUMPDEST DUP1 PUSH4 0xD442057B EQ PUSH2 0x4D7 JUMPI DUP1 PUSH4 0xD4544424 EQ PUSH2 0x4EA JUMPI PUSH2 0x226 JUMP JUMPDEST DUP1 PUSH4 0xBE5B12B4 EQ PUSH2 0x47C JUMPI DUP1 PUSH4 0xCA7893BA EQ PUSH2 0x49E JUMPI DUP1 PUSH4 0xCDB3B4AF EQ PUSH2 0x4B1 JUMPI DUP1 PUSH4 0xCF879D7E EQ PUSH2 0x4C4 JUMPI PUSH2 0x226 JUMP JUMPDEST DUP1 PUSH4 0xA2C28D4B GT PUSH2 0xF9 JUMPI DUP1 PUSH4 0xA2C28D4B EQ PUSH2 0x423 JUMPI DUP1 PUSH4 0xABFFC761 EQ PUSH2 0x436 JUMPI DUP1 PUSH4 0xBC61A695 EQ PUSH2 0x449 JUMPI DUP1 PUSH4 0xBCCC34C6 EQ PUSH2 0x45C JUMPI PUSH2 0x226 JUMP JUMPDEST DUP1 PUSH4 0x8E5A0E07 EQ PUSH2 0x3BA JUMPI DUP1 PUSH4 0x9209483B EQ PUSH2 0x3DC JUMPI DUP1 PUSH4 0x98777748 EQ PUSH2 0x3EF JUMPI DUP1 PUSH4 0x9F76AD35 EQ PUSH2 0x402 JUMPI PUSH2 0x226 JUMP JUMPDEST DUP1 PUSH4 0x5FBAFC05 GT PUSH2 0x1BD JUMPI DUP1 PUSH4 0x68BE3CF2 GT PUSH2 0x18C JUMPI DUP1 PUSH4 0x6DD6B78D GT PUSH2 0x171 JUMPI DUP1 PUSH4 0x6DD6B78D EQ PUSH2 0x381 JUMPI DUP1 PUSH4 0x70BBA11A EQ PUSH2 0x394 JUMPI DUP1 PUSH4 0x742BD050 EQ PUSH2 0x3A7 JUMPI PUSH2 0x226 JUMP JUMPDEST DUP1 PUSH4 0x68BE3CF2 EQ PUSH2 0x34E JUMPI DUP1 PUSH4 0x6DB8658F EQ PUSH2 0x36E JUMPI PUSH2 0x226 JUMP JUMPDEST DUP1 PUSH4 0x5FBAFC05 EQ PUSH2 0x2F4 JUMPI DUP1 PUSH4 0x60EE052A EQ PUSH2 0x307 JUMPI DUP1 PUSH4 0x64EE6ADE EQ PUSH2 0x31A JUMPI DUP1 PUSH4 0x67B881E7 EQ PUSH2 0x32D JUMPI PUSH2 0x226 JUMP JUMPDEST DUP1 PUSH4 0x3B77EBAE GT PUSH2 0x1F9 JUMPI DUP1 PUSH4 0x3B77EBAE EQ PUSH2 0x2A8 JUMPI DUP1 PUSH4 0x40BC03AE EQ PUSH2 0x2BB JUMPI DUP1 PUSH4 0x4703A7E6 EQ PUSH2 0x2CE JUMPI DUP1 PUSH4 0x57494B1D EQ PUSH2 0x2E1 JUMPI PUSH2 0x226 JUMP JUMPDEST DUP1 PUSH4 0x15E42A61 EQ PUSH2 0x22B JUMPI DUP1 PUSH4 0x2CA854F3 EQ PUSH2 0x254 JUMPI DUP1 PUSH4 0x2D753AA4 EQ PUSH2 0x275 JUMPI DUP1 PUSH4 0x39B085AD EQ PUSH2 0x295 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x23E PUSH2 0x239 CALLDATASIZE PUSH1 0x4 PUSH2 0x7562 JUMP JUMPDEST PUSH2 0x536 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x24B SWAP2 SWAP1 PUSH2 0x80D2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x267 PUSH2 0x262 CALLDATASIZE PUSH1 0x4 PUSH2 0x7508 JUMP JUMPDEST PUSH2 0x7A9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x24B SWAP3 SWAP2 SWAP1 PUSH2 0x7EF5 JUMP JUMPDEST PUSH2 0x288 PUSH2 0x283 CALLDATASIZE PUSH1 0x4 PUSH2 0x6FF5 JUMP JUMPDEST PUSH2 0x985 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x24B SWAP2 SWAP1 PUSH2 0x7D8F JUMP JUMPDEST PUSH2 0x288 PUSH2 0x2A3 CALLDATASIZE PUSH1 0x4 PUSH2 0x7324 JUMP JUMPDEST PUSH2 0xB7C JUMP JUMPDEST PUSH2 0x23E PUSH2 0x2B6 CALLDATASIZE PUSH1 0x4 PUSH2 0x7765 JUMP JUMPDEST PUSH2 0xD31 JUMP JUMPDEST PUSH2 0x288 PUSH2 0x2C9 CALLDATASIZE PUSH1 0x4 PUSH2 0x7681 JUMP JUMPDEST PUSH2 0x1384 JUMP JUMPDEST PUSH2 0x288 PUSH2 0x2DC CALLDATASIZE PUSH1 0x4 PUSH2 0x70EE JUMP JUMPDEST PUSH2 0x153D JUMP JUMPDEST PUSH2 0x288 PUSH2 0x2EF CALLDATASIZE PUSH1 0x4 PUSH2 0x707B JUMP JUMPDEST PUSH2 0x171A JUMP JUMPDEST PUSH2 0x288 PUSH2 0x302 CALLDATASIZE PUSH1 0x4 PUSH2 0x70EE JUMP JUMPDEST PUSH2 0x1DCB JUMP JUMPDEST PUSH2 0x288 PUSH2 0x315 CALLDATASIZE PUSH1 0x4 PUSH2 0x70EE JUMP JUMPDEST PUSH2 0x1F9A JUMP JUMPDEST PUSH2 0x288 PUSH2 0x328 CALLDATASIZE PUSH1 0x4 PUSH2 0x70EE JUMP JUMPDEST PUSH2 0x225A JUMP JUMPDEST PUSH2 0x340 PUSH2 0x33B CALLDATASIZE PUSH1 0x4 PUSH2 0x70EE JUMP JUMPDEST PUSH2 0x242E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x24B SWAP3 SWAP2 SWAP1 PUSH2 0x7F1A JUMP JUMPDEST PUSH2 0x361 PUSH2 0x35C CALLDATASIZE PUSH1 0x4 PUSH2 0x724E JUMP JUMPDEST PUSH2 0x25FD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x24B SWAP2 SWAP1 PUSH2 0x7D11 JUMP JUMPDEST PUSH2 0x23E PUSH2 0x37C CALLDATASIZE PUSH1 0x4 PUSH2 0x714E JUMP JUMPDEST PUSH2 0x27C6 JUMP JUMPDEST PUSH2 0x288 PUSH2 0x38F CALLDATASIZE PUSH1 0x4 PUSH2 0x70EE JUMP JUMPDEST PUSH2 0x2ABD JUMP JUMPDEST PUSH2 0x288 PUSH2 0x3A2 CALLDATASIZE PUSH1 0x4 PUSH2 0x718E JUMP JUMPDEST PUSH2 0x2D65 JUMP JUMPDEST PUSH2 0x288 PUSH2 0x3B5 CALLDATASIZE PUSH1 0x4 PUSH2 0x718E JUMP JUMPDEST PUSH2 0x2F41 JUMP JUMPDEST PUSH2 0x3CD PUSH2 0x3C8 CALLDATASIZE PUSH1 0x4 PUSH2 0x72BA JUMP JUMPDEST PUSH2 0x310D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x24B SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x803D JUMP JUMPDEST PUSH2 0x288 PUSH2 0x3EA CALLDATASIZE PUSH1 0x4 PUSH2 0x7681 JUMP JUMPDEST PUSH2 0x333C JUMP JUMPDEST PUSH2 0x288 PUSH2 0x3FD CALLDATASIZE PUSH1 0x4 PUSH2 0x707B JUMP JUMPDEST PUSH2 0x357E JUMP JUMPDEST PUSH2 0x415 PUSH2 0x410 CALLDATASIZE PUSH1 0x4 PUSH2 0x707B JUMP JUMPDEST PUSH2 0x3C07 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x24B SWAP3 SWAP2 SWAP1 PUSH2 0x7DA2 JUMP JUMPDEST PUSH2 0x415 PUSH2 0x431 CALLDATASIZE PUSH1 0x4 PUSH2 0x707B JUMP JUMPDEST PUSH2 0x3DFE JUMP JUMPDEST PUSH2 0x288 PUSH2 0x444 CALLDATASIZE PUSH1 0x4 PUSH2 0x71F7 JUMP JUMPDEST PUSH2 0x3E82 JUMP JUMPDEST PUSH2 0x288 PUSH2 0x457 CALLDATASIZE PUSH1 0x4 PUSH2 0x70EE JUMP JUMPDEST PUSH2 0x406D JUMP JUMPDEST PUSH2 0x46F PUSH2 0x46A CALLDATASIZE PUSH1 0x4 PUSH2 0x74D2 JUMP JUMPDEST PUSH2 0x423E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x24B SWAP2 SWAP1 PUSH2 0x7E9F JUMP JUMPDEST PUSH2 0x48F PUSH2 0x48A CALLDATASIZE PUSH1 0x4 PUSH2 0x70EE JUMP JUMPDEST PUSH2 0x45FB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x24B SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7DDA JUMP JUMPDEST PUSH2 0x288 PUSH2 0x4AC CALLDATASIZE PUSH1 0x4 PUSH2 0x70EE JUMP JUMPDEST PUSH2 0x48E8 JUMP JUMPDEST PUSH2 0x340 PUSH2 0x4BF CALLDATASIZE PUSH1 0x4 PUSH2 0x70EE JUMP JUMPDEST PUSH2 0x494E JUMP JUMPDEST PUSH2 0x267 PUSH2 0x4D2 CALLDATASIZE PUSH1 0x4 PUSH2 0x7508 JUMP JUMPDEST PUSH2 0x4A7A JUMP JUMPDEST PUSH2 0x48F PUSH2 0x4E5 CALLDATASIZE PUSH1 0x4 PUSH2 0x70EE JUMP JUMPDEST PUSH2 0x4BAE JUMP JUMPDEST PUSH2 0x288 PUSH2 0x4F8 CALLDATASIZE PUSH1 0x4 PUSH2 0x70EE JUMP JUMPDEST PUSH2 0x4E65 JUMP JUMPDEST PUSH2 0x288 PUSH2 0x50B CALLDATASIZE PUSH1 0x4 PUSH2 0x71F7 JUMP JUMPDEST PUSH2 0x5034 JUMP JUMPDEST PUSH2 0x288 PUSH2 0x51E CALLDATASIZE PUSH1 0x4 PUSH2 0x7324 JUMP JUMPDEST PUSH2 0x5207 JUMP JUMPDEST PUSH2 0x3CD PUSH2 0x531 CALLDATASIZE PUSH1 0x4 PUSH2 0x72BA JUMP JUMPDEST PUSH2 0x52AA JUMP JUMPDEST PUSH1 0x0 DUP5 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x54A JUMPI POP PUSH1 0x0 PUSH2 0x7A1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH2 0x556 PUSH2 0x5511 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH3 0x7A120 PUSH32 0x418436BC00000000000000000000000000000000000000000000000000000000 PUSH2 0x599 PUSH2 0x5529 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x5D1 JUMPI DUP9 PUSH2 0x5E7 JUMP JUMPDEST PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE JUMPDEST PUSH2 0x5EF PUSH2 0x5529 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x627 JUMPI DUP9 PUSH2 0x63D JUMP JUMPDEST PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE JUMPDEST DUP9 PUSH1 0x0 DUP14 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x655 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7B79 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x6DE SWAP2 SWAP1 PUSH2 0x7A03 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x71A JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x71F JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x748 JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x741 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x77CF JUMP JUMPDEST SWAP1 POP PUSH2 0x754 JUMP JUMPDEST PUSH1 0x0 SWAP4 POP POP POP POP PUSH2 0x7A1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x75F DUP8 PUSH2 0x5541 JUMP JUMPDEST PUSH1 0xFF AND SWAP1 POP PUSH1 0x0 PUSH2 0x76F DUP10 PUSH2 0x5541 JUMP JUMPDEST PUSH1 0xFF AND SWAP1 POP PUSH8 0xDE0B6B3A7640000 DUP2 PUSH1 0xA EXP DUP4 PUSH1 0xA EXP DUP10 DUP7 MUL MUL DUP2 PUSH2 0x790 JUMPI INVALID JUMPDEST DIV DUP2 PUSH2 0x798 JUMPI INVALID JUMPDEST DIV SWAP6 POP POP POP POP POP POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH2 0x7B6 DUP5 DUP7 PUSH2 0x5554 JUMP JUMPDEST DUP3 MLOAD PUSH1 0x40 DUP1 MLOAD DUP3 DUP2 MSTORE PUSH1 0x20 DUP1 DUP5 MUL DUP3 ADD ADD SWAP1 SWAP2 MSTORE DUP2 DUP1 ISZERO PUSH2 0x7E1 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP PUSH1 0x40 MLOAD PUSH32 0xBCCC34C600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP1 SWAP3 POP ADDRESS SWAP1 PUSH4 0xBCCC34C6 SWAP1 PUSH2 0x825 SWAP1 DUP11 SWAP1 DUP11 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x7E11 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x83D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x851 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x897 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x752F JUMP JUMPDEST SWAP3 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x979 JUMPI PUSH1 0x0 ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x15E42A61 DUP7 DUP11 DUP11 DUP11 DUP8 DUP2 MLOAD DUP2 LT PUSH2 0x8D1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8F8 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7EB2 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x910 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x924 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x948 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x77CF JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x958 JUMPI POP PUSH2 0x97C SWAP2 POP POP JUMP JUMPDEST DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x965 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP PUSH1 0x1 ADD PUSH2 0x89C JUMP JUMPDEST POP POP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP3 MLOAD SWAP1 POP DUP1 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x9B7 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND PUSH2 0x9DB JUMPI POP PUSH2 0xB73 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xB70 JUMPI PUSH1 0x0 PUSH1 0x60 DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH3 0x61A80 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x6E79E133 SWAP1 POP PUSH1 0xE0 SHL DUP12 DUP12 DUP12 DUP12 DUP10 DUP2 MLOAD DUP2 LT PUSH2 0xA36 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xA51 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7AD8 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0xADA SWAP2 SWAP1 PUSH2 0x7A03 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0xB16 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xB1B JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0xB40 JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0xB3D SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x77CF JUMP JUMPDEST SWAP1 POP JUMPDEST DUP1 PUSH2 0xB4D JUMPI POP POP POP PUSH2 0xB70 JUMP JUMPDEST DUP1 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0xB5A JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x9DE JUMP JUMPDEST POP POP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 MLOAD PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xBA9 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 EQ PUSH2 0xD29 JUMPI PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH3 0x30D40 PUSH4 0x3B77EBAE PUSH1 0xE0 SHL DUP10 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0xBEA JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP10 DUP8 DUP2 MLOAD DUP2 LT PUSH2 0xBFE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP10 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xC19 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x8086 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0xCA2 SWAP2 SWAP1 PUSH2 0x7A03 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0xCDE JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xCE3 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH2 0xCF4 JUMPI PUSH1 0x0 PUSH2 0xD08 JUMP JUMPDEST DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0xD08 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x77CF JUMP JUMPDEST DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xD14 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP PUSH1 0x1 ADD PUSH2 0xBAF JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH1 0x0 EQ DUP1 PUSH2 0xD45 JUMPI POP PUSH1 0x80 DUP5 ADD MLOAD ISZERO JUMPDEST DUP1 PUSH2 0xD52 JUMPI POP PUSH1 0xA0 DUP5 ADD MLOAD ISZERO JUMPDEST ISZERO PUSH2 0xD5F JUMPI POP PUSH1 0x0 PUSH2 0x137D JUMP JUMPDEST PUSH2 0xD67 PUSH2 0x6AF4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x9D3FA4B900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND SWAP1 PUSH4 0x9D3FA4B9 SWAP1 PUSH2 0xDB9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x8073 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xDD1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xDE5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0xE09 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x771D JUMP JUMPDEST SWAP1 POP PUSH1 0x3 DUP2 MLOAD PUSH1 0x6 DUP2 GT ISZERO PUSH2 0xE1A JUMPI INVALID JUMPDEST EQ PUSH2 0xE29 JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x137D JUMP JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD DUP6 MLOAD PUSH1 0x40 MLOAD PUSH32 0x8171C40700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND SWAP3 PUSH4 0x8171C407 SWAP3 PUSH2 0xE82 SWAP3 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x7E3D JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xE9A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xEAE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0xED2 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x745E JUMP JUMPDEST PUSH2 0xEE0 JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x137D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x6070410800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND SWAP1 PUSH4 0x60704108 SWAP1 PUSH2 0xF55 SWAP1 PUSH32 0xF47261B000000000000000000000000000000000000000000000000000000000 SWAP1 PUSH1 0x4 ADD PUSH2 0x7E72 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xF6D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xF81 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0xFA5 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x6F05 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xFB7 DUP8 PUSH2 0x140 ADD MLOAD PUSH2 0x55C7 JUMP JUMPDEST SWAP1 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0xFE0 JUMPI PUSH1 0x0 SWAP4 POP POP POP POP PUSH2 0x137D JUMP JUMPDEST PUSH1 0x0 DUP1 DUP9 PUSH1 0xC0 ADD MLOAD GT PUSH2 0xFF4 JUMPI PUSH1 0x0 PUSH2 0x1002 JUMP JUMPDEST PUSH2 0x1002 DUP9 PUSH2 0x180 ADD MLOAD PUSH2 0x55C7 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1021 DUP6 PUSH1 0x40 ADD MLOAD DUP11 PUSH1 0xA0 ADD MLOAD PUSH2 0x565C SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 SWAP6 POP PUSH1 0x0 PUSH2 0x108C DUP3 DUP12 PUSH1 0xA0 ADD MLOAD DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x106E JUMPI DUP13 PUSH1 0x80 ADD MLOAD PUSH2 0x1087 JUMP JUMPDEST PUSH1 0xC0 DUP14 ADD MLOAD PUSH1 0x80 DUP15 ADD MLOAD PUSH2 0x1087 SWAP2 PUSH4 0xFFFFFFFF PUSH2 0x5685 AND JUMP JUMPDEST PUSH2 0x56A1 JUMP JUMPDEST DUP11 MLOAD PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP2 SWAP3 POP PUSH1 0x0 SWAP2 PUSH2 0x11E2 SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP9 AND SWAP2 PUSH4 0x70A08231 SWAP2 PUSH2 0x10E8 SWAP2 PUSH1 0x4 ADD PUSH2 0x7A1F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1100 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1114 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x1138 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x77CF JUMP JUMPDEST DUP13 MLOAD PUSH1 0x40 MLOAD PUSH32 0xDD62ED3E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 AND SWAP2 PUSH4 0xDD62ED3E SWAP2 PUSH2 0x118D SWAP2 SWAP1 DUP13 SWAP1 PUSH1 0x4 ADD PUSH2 0x7A40 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x11A5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x11B9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x11DD SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x77CF JUMP JUMPDEST PUSH2 0x56E1 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 LT ISZERO PUSH2 0x11FA JUMPI PUSH2 0x11F7 DUP2 DUP4 DUP6 PUSH2 0x56F7 JUMP JUMPDEST SWAP8 POP JUMPDEST DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO DUP1 ISZERO PUSH2 0x124B JUMPI POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND ISZERO ISZERO JUMPDEST ISZERO PUSH2 0x1375 JUMPI DUP11 MLOAD PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x0 SWAP2 PUSH2 0x134F SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP9 AND SWAP2 PUSH4 0x70A08231 SWAP2 PUSH2 0x12AA SWAP2 SWAP1 PUSH1 0x4 ADD PUSH2 0x7A1F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x12C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x12D6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x12FA SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x77CF JUMP JUMPDEST DUP14 MLOAD PUSH1 0x40 MLOAD PUSH32 0xDD62ED3E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 AND SWAP2 PUSH4 0xDD62ED3E SWAP2 PUSH2 0x118D SWAP2 SWAP1 DUP14 SWAP1 PUSH1 0x4 ADD PUSH2 0x7A40 JUMP JUMPDEST SWAP1 POP DUP12 PUSH1 0xC0 ADD MLOAD DUP2 LT ISZERO PUSH2 0x1373 JUMPI PUSH2 0x1370 DUP10 PUSH2 0x11DD DUP4 DUP16 PUSH1 0xC0 ADD MLOAD DUP9 PUSH2 0x56F7 JUMP JUMPDEST SWAP9 POP JUMPDEST POP JUMPDEST POP POP POP POP POP POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP3 MLOAD SWAP1 POP DUP1 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x13B6 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1533 JUMPI PUSH1 0x0 PUSH1 0x60 DUP9 PUSH1 0x0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH3 0x1E8480 DUP11 PUSH1 0x20 ADD MLOAD DUP11 DUP11 DUP11 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x13FA JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1414 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7F78 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x149D SWAP2 SWAP1 PUSH2 0x7A03 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x14D9 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x14DE JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x1503 JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x1500 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x77CF JUMP JUMPDEST SWAP1 POP JUMPDEST DUP1 PUSH2 0x1510 JUMPI POP POP POP PUSH2 0x1533 JUMP JUMPDEST DUP1 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x151D JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x13BC JUMP JUMPDEST POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1549 DUP4 DUP6 PUSH2 0x5554 JUMP JUMPDEST DUP2 MLOAD PUSH1 0x40 DUP1 MLOAD DUP3 DUP2 MSTORE PUSH1 0x20 DUP1 DUP5 MUL DUP3 ADD ADD SWAP1 SWAP2 MSTORE DUP2 DUP1 ISZERO PUSH2 0x1574 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1711 JUMPI PUSH1 0x0 PUSH1 0x60 PUSH2 0x158E PUSH2 0x572D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH3 0xF4240 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xFF1FD974 SWAP1 POP PUSH1 0xE0 SHL DUP11 DUP11 DUP11 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x15D8 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x15F2 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7B48 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x167B SWAP2 SWAP1 PUSH2 0x7A03 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x16B7 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x16BC JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x16E1 JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x16DE SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x77CF JUMP JUMPDEST SWAP1 POP JUMPDEST DUP1 PUSH2 0x16EE JUMPI POP POP POP PUSH2 0x1711 JUMP JUMPDEST DUP1 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x16FB JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x157A JUMP JUMPDEST POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x40 DUP1 MLOAD DUP3 DUP2 MSTORE PUSH1 0x20 DUP1 DUP5 MUL DUP3 ADD ADD SWAP1 SWAP2 MSTORE PUSH1 0x60 SWAP2 DUP7 SWAP2 DUP2 DUP1 ISZERO PUSH2 0x174A JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP PUSH1 0x40 MLOAD PUSH32 0x2F37B62400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP1 SWAP4 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND SWAP1 PUSH4 0x2F37B624 SWAP1 PUSH2 0x17A0 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x7A1F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x17B8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x17CC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x17F0 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x745E JUMP JUMPDEST ISZERO DUP1 PUSH2 0x189B JUMPI POP PUSH1 0x40 MLOAD PUSH32 0x2F37B62400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND SWAP1 PUSH4 0x2F37B624 SWAP1 PUSH2 0x1849 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x7A1F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1861 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1875 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x1899 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x745E JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x18A8 JUMPI POP PUSH2 0x7A1 SWAP1 POP JUMP JUMPDEST PUSH2 0x18B0 PUSH2 0x6B16 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xF8B2CB4F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND SWAP1 PUSH4 0xF8B2CB4F SWAP1 PUSH2 0x1902 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x7A1F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x191A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x192E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x1952 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x77CF JUMP JUMPDEST DUP2 MSTORE PUSH1 0x40 MLOAD PUSH32 0xF8B2CB4F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND SWAP1 PUSH4 0xF8B2CB4F SWAP1 PUSH2 0x19A6 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x7A1F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x19BE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x19D2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x19F6 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x77CF JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 MLOAD PUSH32 0x948D8CE600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND SWAP1 PUSH4 0x948D8CE6 SWAP1 PUSH2 0x1A4D SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x7A1F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1A65 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1A79 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x1A9D SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x77CF JUMP JUMPDEST PUSH1 0x40 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE MLOAD PUSH32 0x948D8CE600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND SWAP1 PUSH4 0x948D8CE6 SWAP1 PUSH2 0x1AF6 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x7A1F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1B0E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1B22 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x1B46 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x77CF JUMP JUMPDEST DUP2 PUSH1 0x60 ADD DUP2 DUP2 MSTORE POP POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xD4CADF68 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1B95 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1BA9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x1BCD SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x77CF JUMP JUMPDEST PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x1DBF JUMPI PUSH2 0x1C00 DUP3 PUSH1 0x20 ADD MLOAD PUSH1 0x3 PUSH8 0xDE0B6B3A7640000 DUP2 PUSH2 0x1BF7 JUMPI INVALID JUMPDEST DIV PUSH1 0x1 ADD PUSH2 0x5745 JUMP JUMPDEST DUP7 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1C0C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD GT ISZERO PUSH2 0x1C1F JUMPI PUSH2 0x1DBF JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP11 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH3 0x493E0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xF8D6AED4 SWAP1 POP PUSH1 0xE0 SHL DUP7 PUSH1 0x0 ADD MLOAD DUP8 PUSH1 0x40 ADD MLOAD DUP9 PUSH1 0x20 ADD MLOAD DUP10 PUSH1 0x60 ADD MLOAD DUP15 DUP11 DUP2 MLOAD DUP2 LT PUSH2 0x1C7F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP12 PUSH1 0x80 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1CA1 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x8155 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x1D2A SWAP2 SWAP1 PUSH2 0x7A03 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1D66 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1D6B JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x1D94 JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x1D8D SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x77CF JUMP JUMPDEST SWAP1 POP PUSH2 0x1D9C JUMP JUMPDEST POP POP POP PUSH2 0x1DBF JUMP JUMPDEST DUP1 DUP9 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x1DA9 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x1BD5 JUMP JUMPDEST POP POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP3 MLOAD SWAP1 POP DUP1 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1DFD JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1711 JUMPI PUSH1 0x0 PUSH1 0x60 PUSH2 0x1E17 PUSH2 0x57A2 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH3 0x493E0 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x838E6A22 SWAP1 POP PUSH1 0xE0 SHL DUP11 DUP11 DUP11 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x1E61 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1E7B SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7B48 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x1F04 SWAP2 SWAP1 PUSH2 0x7A03 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1F40 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1F45 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x1F6A JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x1F67 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x77CF JUMP JUMPDEST SWAP1 POP JUMPDEST DUP1 PUSH2 0x1F77 JUMPI POP POP POP PUSH2 0x1711 JUMP JUMPDEST DUP1 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x1F84 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x1E03 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1FA6 DUP4 DUP6 PUSH2 0x5554 JUMP JUMPDEST DUP2 MLOAD PUSH1 0x40 DUP1 MLOAD DUP3 DUP2 MSTORE PUSH1 0x20 DUP1 DUP5 MUL DUP3 ADD ADD SWAP1 SWAP2 MSTORE DUP2 DUP1 ISZERO PUSH2 0x1FD1 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 PUSH2 0x1FDE PUSH2 0x5529 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x201E JUMPI PUSH2 0x2019 DUP7 PUSH2 0x57BA JUMP JUMPDEST PUSH2 0x2021 JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x202D PUSH2 0x5529 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x206D JUMPI PUSH2 0x2068 DUP7 PUSH2 0x57BA JUMP JUMPDEST PUSH2 0x2070 JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x224F JUMPI PUSH1 0x1 PUSH2 0x2087 PUSH2 0x5529 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x211E JUMPI DUP7 MLOAD PUSH2 0x20FD SWAP1 DUP6 SWAP1 PUSH32 0x2640F62C00000000000000000000000000000000000000000000000000000000 SWAP1 DUP11 SWAP1 DUP7 SWAP1 DUP2 LT PUSH2 0x20F0 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x584C JUMP JUMPDEST DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2109 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP4 POP DUP3 DUP2 MSTORE POP POP POP PUSH2 0x223B JUMP JUMPDEST PUSH2 0x2126 PUSH2 0x5529 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x218F JUMPI DUP7 MLOAD PUSH2 0x20FD SWAP1 DUP5 SWAP1 PUSH32 0x59E9486200000000000000000000000000000000000000000000000000000000 SWAP1 DUP11 SWAP1 DUP7 SWAP1 DUP2 LT PUSH2 0x20F0 JUMPI INVALID JUMPDEST DUP7 MLOAD PUSH1 0x0 SWAP1 PUSH2 0x21C8 SWAP1 DUP6 SWAP1 PUSH32 0x59E9486200000000000000000000000000000000000000000000000000000000 SWAP1 DUP12 SWAP1 DUP8 SWAP1 DUP2 LT PUSH2 0x20F0 JUMPI INVALID JUMPDEST SWAP3 POP SWAP1 POP DUP1 ISZERO PUSH2 0x221E JUMPI PUSH2 0x21FD DUP6 PUSH32 0x2640F62C00000000000000000000000000000000000000000000000000000000 DUP4 PUSH2 0x584C JUMP JUMPDEST DUP9 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x2209 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP5 POP DUP3 DUP2 MSTORE POP POP POP PUSH2 0x2239 JUMP JUMPDEST PUSH1 0x0 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x222C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP JUMPDEST POP JUMPDEST DUP1 PUSH2 0x2246 JUMPI POP PUSH2 0x224F JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x2075 JUMP JUMPDEST POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x2266 DUP4 DUP6 PUSH2 0x5554 JUMP JUMPDEST DUP2 MLOAD PUSH1 0x40 DUP1 MLOAD DUP3 DUP2 MSTORE PUSH1 0x20 DUP1 DUP5 MUL DUP3 ADD ADD SWAP1 SWAP2 MSTORE DUP2 DUP1 ISZERO PUSH2 0x2291 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1711 JUMPI PUSH1 0x0 PUSH1 0x60 PUSH2 0x22AB PUSH2 0x572D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH3 0xF4240 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x144A2752 SWAP1 POP PUSH1 0xE0 SHL DUP10 DUP12 DUP11 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x22F5 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x230F SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7B48 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x2398 SWAP2 SWAP1 PUSH2 0x7A03 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x23D4 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x23D9 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x23FE JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x23FB SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x77CF JUMP JUMPDEST SWAP1 POP JUMPDEST DUP1 PUSH2 0x240B JUMPI POP POP POP PUSH2 0x1711 JUMP JUMPDEST DUP1 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x2418 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x2297 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH2 0x243C DUP5 DUP7 PUSH2 0x5554 JUMP JUMPDEST DUP3 MLOAD PUSH1 0x40 DUP1 MLOAD DUP3 DUP2 MSTORE PUSH1 0x20 DUP1 DUP5 MUL DUP3 ADD ADD SWAP1 SWAP2 MSTORE DUP2 DUP1 ISZERO PUSH2 0x2467 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 PUSH2 0x2474 PUSH2 0x5529 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x24AC JUMPI DUP7 PUSH2 0x24AF JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x24BB PUSH2 0x5529 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x24F3 JUMPI DUP7 PUSH2 0x24F6 JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP PUSH2 0x255C PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 DUP4 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2517 SWAP2 SWAP1 PUSH2 0x7A1F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x253C SWAP2 SWAP1 PUSH2 0x7A1F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x5995 DUP2 MSTORE POP DUP8 PUSH2 0x59DB JUMP JUMPDEST SWAP4 POP PUSH2 0x2566 PUSH2 0x5BC3 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x901754D7 DUP4 DUP4 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x25A0 SWAP3 SWAP2 SWAP1 PUSH2 0x7A40 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x25B8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x25CC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x25F0 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x6F05 JUMP JUMPDEST SWAP5 POP POP POP POP SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP3 DUP2 MSTORE PUSH1 0x20 DUP1 DUP5 MUL DUP3 ADD ADD SWAP1 SWAP2 MSTORE PUSH1 0x60 SWAP1 DUP3 DUP1 ISZERO PUSH2 0x2633 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x261E JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP1 DUP4 EQ PUSH2 0x27BF JUMPI DUP4 DUP4 DUP3 DUP2 DUP2 LT PUSH2 0x264C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL DUP3 ADD SWAP1 POP DUP1 CALLDATALOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE1 CALLDATASIZE DUP5 SWAP1 SUB ADD DUP2 SLT PUSH2 0x2686 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP2 ADD PUSH1 0x20 DUP2 ADD SWAP2 POP CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x26A5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLDATASIZE DUP2 SWAP1 SUB DUP3 SGT ISZERO PUSH2 0x26B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST ISZERO ISZERO SWAP1 POP PUSH2 0x26C2 JUMPI PUSH2 0x27B7 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 ADDRESS DUP7 DUP7 DUP6 DUP2 DUP2 LT PUSH2 0x26D3 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL DUP3 ADD SWAP1 POP DUP1 CALLDATALOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE1 CALLDATASIZE DUP5 SWAP1 SUB ADD DUP2 SLT PUSH2 0x270D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP2 ADD PUSH1 0x20 DUP2 ADD SWAP2 POP CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x272C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLDATASIZE DUP2 SWAP1 SUB DUP3 SGT ISZERO PUSH2 0x273C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x274A SWAP3 SWAP2 SWAP1 PUSH2 0x79F3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2785 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x278A JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH2 0x279C JUMPI DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST DUP1 DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x27A9 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP POP POP JUMPDEST PUSH1 0x1 ADD PUSH2 0x2639 JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x27D1 PUSH2 0x5BC3 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x901754D7 DUP7 DUP7 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x280B SWAP3 SWAP2 SWAP1 PUSH2 0x7A40 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2823 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2837 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x285B SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x6F05 JUMP JUMPDEST SWAP1 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x287E JUMPI POP PUSH2 0x137D JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND ISZERO PUSH2 0x2943 JUMPI PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH2 0x28EE SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x7A1F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2906 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x291A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x293E SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x77CF JUMP JUMPDEST PUSH2 0x295C JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND BALANCE JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x296E JUMPI POP PUSH2 0x137D SWAP1 POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 PUSH1 0x60 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND SWAP1 PUSH3 0x249F0 SWAP1 PUSH32 0x1E1401F800000000000000000000000000000000000000000000000000000000 SWAP1 PUSH2 0x29C8 SWAP1 DUP13 SWAP1 DUP13 SWAP1 DUP13 SWAP1 PUSH1 0x24 ADD PUSH2 0x7B48 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x2A51 SWAP2 SWAP1 PUSH2 0x7A03 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2A8D JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2A92 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0x224F JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x2AB1 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x77CF JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x2AC9 DUP4 DUP6 PUSH2 0x5554 JUMP JUMPDEST DUP2 MLOAD PUSH1 0x40 DUP1 MLOAD DUP3 DUP2 MSTORE PUSH1 0x20 DUP1 DUP5 MUL DUP3 ADD ADD SWAP1 SWAP2 MSTORE DUP2 DUP1 ISZERO PUSH2 0x2AF4 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 PUSH2 0x2B01 PUSH2 0x5529 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x2B41 JUMPI PUSH2 0x2B3C DUP7 PUSH2 0x57BA JUMP JUMPDEST PUSH2 0x2B44 JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2B50 PUSH2 0x5529 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x2B90 JUMPI PUSH2 0x2B8B DUP7 PUSH2 0x57BA JUMP JUMPDEST PUSH2 0x2B93 JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x224F JUMPI PUSH1 0x1 PUSH2 0x2BAA PUSH2 0x5529 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x2C34 JUMPI DUP7 MLOAD PUSH2 0x2C13 SWAP1 DUP6 SWAP1 PUSH32 0x95B68FE700000000000000000000000000000000000000000000000000000000 SWAP1 DUP11 SWAP1 DUP7 SWAP1 DUP2 LT PUSH2 0x20F0 JUMPI INVALID JUMPDEST DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2C1F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP4 POP DUP3 DUP2 MSTORE POP POP POP PUSH2 0x2D51 JUMP JUMPDEST PUSH2 0x2C3C PUSH2 0x5529 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x2CA5 JUMPI DUP7 MLOAD PUSH2 0x2C13 SWAP1 DUP5 SWAP1 PUSH32 0xCD7724C300000000000000000000000000000000000000000000000000000000 SWAP1 DUP11 SWAP1 DUP7 SWAP1 DUP2 LT PUSH2 0x20F0 JUMPI INVALID JUMPDEST DUP7 MLOAD PUSH1 0x0 SWAP1 PUSH2 0x2CDE SWAP1 DUP7 SWAP1 PUSH32 0x95B68FE700000000000000000000000000000000000000000000000000000000 SWAP1 DUP12 SWAP1 DUP8 SWAP1 DUP2 LT PUSH2 0x20F0 JUMPI INVALID JUMPDEST SWAP3 POP SWAP1 POP DUP1 ISZERO PUSH2 0x2D34 JUMPI PUSH2 0x2D13 DUP5 PUSH32 0xCD7724C300000000000000000000000000000000000000000000000000000000 DUP4 PUSH2 0x584C JUMP JUMPDEST DUP9 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x2D1F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP5 POP DUP3 DUP2 MSTORE POP POP POP PUSH2 0x2D4F JUMP JUMPDEST PUSH1 0x0 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2D42 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP JUMPDEST POP JUMPDEST DUP1 PUSH2 0x2D5C JUMPI POP PUSH2 0x224F JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x2B98 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP3 MLOAD SWAP1 POP DUP1 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2D97 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1711 JUMPI PUSH1 0x0 PUSH1 0x60 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH3 0x249F0 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xD06CA61F SWAP1 POP PUSH1 0xE0 SHL DUP9 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x2DF2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP11 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x2E0C SWAP3 SWAP2 SWAP1 PUSH2 0x80DB JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x2E95 SWAP2 SWAP1 PUSH2 0x7A03 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2ED1 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2ED6 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x2F16 JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x2EF8 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x73E6 JUMP JUMPDEST PUSH1 0x1 DUP10 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x2F07 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH2 0x2F1E JUMP JUMPDEST POP POP POP PUSH2 0x1711 JUMP JUMPDEST DUP1 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x2F2B JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x2D9D JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP3 MLOAD SWAP1 POP DUP1 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2F73 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1711 JUMPI PUSH1 0x0 PUSH1 0x60 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH3 0x249F0 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x1F00CA74 SWAP1 POP PUSH1 0xE0 SHL DUP9 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x2FCE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP11 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x2FE8 SWAP3 SWAP2 SWAP1 PUSH2 0x80DB JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x3071 SWAP2 SWAP1 PUSH2 0x7A03 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x30AD JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x30B2 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x2F16 JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x30D4 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x73E6 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x30E0 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP DUP1 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x30F7 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x2F79 JUMP JUMPDEST PUSH2 0x3115 PUSH2 0x6B45 JUMP JUMPDEST PUSH2 0x311D PUSH2 0x6B45 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 JUMPDEST DUP8 MLOAD DUP2 EQ PUSH2 0x322D JUMPI PUSH2 0x3169 PUSH1 0x20 DUP10 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x313B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD SUB DUP8 DUP11 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x3152 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x5BDB SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP11 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x3190 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x31A5 SWAP2 SWAP1 PUSH2 0x7A03 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x31E0 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x31E5 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0x3223 JUMPI PUSH1 0x0 PUSH2 0x3209 PUSH1 0x20 DUP4 MLOAD SUB DUP4 PUSH2 0x5BEB SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP5 DUP2 GT ISZERO PUSH2 0x3221 JUMPI DUP4 DUP9 MSTORE PUSH1 0x20 DUP9 ADD DUP3 SWAP1 MSTORE SWAP4 POP DUP4 JUMPDEST POP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x3122 JUMP JUMPDEST POP DUP1 PUSH2 0x3239 JUMPI POP PUSH2 0x3333 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP7 MLOAD DUP2 EQ PUSH2 0x3330 JUMPI PUSH2 0x326C PUSH1 0x20 DUP9 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x3255 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD SUB DUP4 DUP10 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x3152 JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP10 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x3293 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x32A8 SWAP2 SWAP1 PUSH2 0x7A03 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x32E3 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x32E8 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0x3326 JUMPI PUSH1 0x0 PUSH2 0x330C PUSH1 0x20 DUP4 MLOAD SUB DUP4 PUSH2 0x5BEB SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP6 DUP2 GT ISZERO PUSH2 0x3324 JUMPI DUP4 DUP8 MSTORE PUSH1 0x20 DUP8 ADD DUP3 SWAP1 MSTORE SWAP5 POP DUP5 JUMPDEST POP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x323C JUMP JUMPDEST POP POP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 DUP5 ADD MLOAD PUSH1 0x60 SWAP1 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH2 0x33D6 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH2 0x33CF SWAP1 DUP1 PUSH2 0x3388 DUP7 DUP10 PUSH1 0x80 DUP5 ADD PUSH2 0x7F96 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x33AF SWAP3 SWAP2 SWAP1 PUSH2 0x7F96 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x5BF7 DUP2 MSTORE POP DUP4 PUSH2 0x59DB JUMP JUMPDEST SWAP1 POP PUSH2 0x7A1 JUMP JUMPDEST DUP2 MLOAD PUSH1 0x40 DUP1 MLOAD DUP3 DUP2 MSTORE PUSH1 0x20 DUP1 DUP5 MUL DUP3 ADD ADD SWAP1 SWAP2 MSTORE DUP2 DUP1 ISZERO PUSH2 0x3401 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1533 JUMPI PUSH1 0x0 PUSH1 0x60 DUP9 PUSH1 0x0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH3 0x1E8480 DUP11 PUSH1 0x40 ADD MLOAD DUP11 DUP11 DUP11 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x3445 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x345F SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7F78 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x34E8 SWAP2 SWAP1 PUSH2 0x7A03 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x3524 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x3529 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x354E JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x354B SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x77CF JUMP JUMPDEST SWAP1 POP JUMPDEST DUP1 PUSH2 0x355B JUMPI POP POP POP PUSH2 0x1533 JUMP JUMPDEST DUP1 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x3568 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x3407 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x40 DUP1 MLOAD DUP3 DUP2 MSTORE PUSH1 0x20 DUP1 DUP5 MUL DUP3 ADD ADD SWAP1 SWAP2 MSTORE PUSH1 0x60 SWAP2 DUP7 SWAP2 DUP2 DUP1 ISZERO PUSH2 0x35AE JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP PUSH1 0x40 MLOAD PUSH32 0x2F37B62400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP1 SWAP4 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND SWAP1 PUSH4 0x2F37B624 SWAP1 PUSH2 0x3604 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x7A1F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x361C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3630 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x3654 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x745E JUMP JUMPDEST ISZERO DUP1 PUSH2 0x36FF JUMPI POP PUSH1 0x40 MLOAD PUSH32 0x2F37B62400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND SWAP1 PUSH4 0x2F37B624 SWAP1 PUSH2 0x36AD SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x7A1F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x36C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x36D9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x36FD SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x745E JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x370C JUMPI POP PUSH2 0x7A1 SWAP1 POP JUMP JUMPDEST PUSH2 0x3714 PUSH2 0x6B16 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xF8B2CB4F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND SWAP1 PUSH4 0xF8B2CB4F SWAP1 PUSH2 0x3766 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x7A1F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x377E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3792 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x37B6 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x77CF JUMP JUMPDEST DUP2 MSTORE PUSH1 0x40 MLOAD PUSH32 0xF8B2CB4F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND SWAP1 PUSH4 0xF8B2CB4F SWAP1 PUSH2 0x380A SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x7A1F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3822 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3836 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x385A SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x77CF JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 MLOAD PUSH32 0x948D8CE600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND SWAP1 PUSH4 0x948D8CE6 SWAP1 PUSH2 0x38B1 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x7A1F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x38C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x38DD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x3901 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x77CF JUMP JUMPDEST PUSH1 0x40 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE MLOAD PUSH32 0x948D8CE600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND SWAP1 PUSH4 0x948D8CE6 SWAP1 PUSH2 0x395A SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x7A1F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3972 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3986 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x39AA SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x77CF JUMP JUMPDEST DUP2 PUSH1 0x60 ADD DUP2 DUP2 MSTORE POP POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xD4CADF68 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x39F9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3A0D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x3A31 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x77CF JUMP JUMPDEST PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x1DBF JUMPI DUP2 MLOAD PUSH2 0x3A55 SWAP1 PUSH8 0x6F05B59D3B20000 PUSH2 0x5745 JUMP JUMPDEST DUP7 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3A61 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD GT ISZERO PUSH2 0x3A74 JUMPI PUSH2 0x1DBF JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP11 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH3 0x493E0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xBA9530A6 SWAP1 POP PUSH1 0xE0 SHL DUP7 PUSH1 0x0 ADD MLOAD DUP8 PUSH1 0x40 ADD MLOAD DUP9 PUSH1 0x20 ADD MLOAD DUP10 PUSH1 0x60 ADD MLOAD DUP15 DUP11 DUP2 MLOAD DUP2 LT PUSH2 0x3AD4 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP12 PUSH1 0x80 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x3AF6 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x8155 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x3B7F SWAP2 SWAP1 PUSH2 0x7A03 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x3BBB JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x3BC0 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x1D94 JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x3BE2 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x77CF JUMP JUMPDEST SWAP1 POP DUP1 DUP9 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x3BF1 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x3A39 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 DUP4 MLOAD SWAP1 POP DUP1 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x3C3A JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP3 POP PUSH2 0x3C48 DUP8 DUP8 DUP8 PUSH2 0x5D8E JUMP JUMPDEST SWAP2 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH2 0x3C6B JUMPI POP PUSH2 0x97C JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x979 JUMPI PUSH1 0x0 PUSH1 0x60 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH3 0x61A80 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x343FBCDD SWAP1 POP PUSH1 0xE0 SHL DUP12 DUP12 DUP12 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x3CC5 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x3CDF SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7B48 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x3D68 SWAP2 SWAP1 PUSH2 0x7A03 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x3DA4 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x3DA9 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x3DCE JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x3DCB SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x77CF JUMP JUMPDEST SWAP1 POP JUMPDEST DUP1 PUSH2 0x3DDB JUMPI POP POP POP PUSH2 0x979 JUMP JUMPDEST DUP1 DUP8 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x3DE8 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x3C6E JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x3E0D DUP7 DUP7 DUP7 PUSH2 0x5D8E JUMP JUMPDEST SWAP1 POP PUSH2 0x3E77 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 DUP7 DUP10 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x3E30 SWAP3 SWAP2 SWAP1 PUSH2 0x7A40 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP8 DUP10 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x3E57 SWAP3 SWAP2 SWAP1 PUSH2 0x7A40 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x5EEA DUP2 MSTORE POP DUP5 PUSH2 0x59DB JUMP JUMPDEST SWAP2 POP SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP3 MLOAD SWAP1 POP DUP1 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x3EB4 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x4065 JUMPI PUSH1 0x0 PUSH1 0x60 PUSH2 0x3ECE PUSH2 0x6082 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH3 0x249F0 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xD06CA61F SWAP1 POP PUSH1 0xE0 SHL DUP9 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x3F16 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP11 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x3F30 SWAP3 SWAP2 SWAP1 PUSH2 0x80DB JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x3FB9 SWAP2 SWAP1 PUSH2 0x7A03 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x3FF5 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x3FFA JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x403A JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x401C SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x73E6 JUMP JUMPDEST PUSH1 0x1 DUP10 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x402B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH2 0x4042 JUMP JUMPDEST POP POP POP PUSH2 0x4065 JUMP JUMPDEST DUP1 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x404F JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x3EBA JUMP JUMPDEST POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP3 MLOAD SWAP1 POP DUP1 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x409F JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1711 JUMPI PUSH1 0x0 PUSH1 0x60 PUSH2 0x40B9 PUSH2 0x609A JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH3 0xC3500 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x72EA9076 SWAP1 POP PUSH1 0xE0 SHL DUP11 DUP11 DUP11 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x4103 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x411D SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7B48 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x41A6 SWAP2 SWAP1 PUSH2 0x7A03 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x41E2 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x41E7 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x420E JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x4209 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x747A JUMP JUMPDEST SWAP3 POP POP POP JUMPDEST DUP1 PUSH2 0x421B JUMPI POP POP POP PUSH2 0x1711 JUMP JUMPDEST DUP1 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x4228 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x40A5 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x424A PUSH2 0x60B2 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE SWAP2 SWAP3 POP PUSH1 0x60 SWAP2 SWAP1 PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP POP SWAP1 POP DUP6 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x427E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP PUSH1 0x0 PUSH1 0x60 PUSH2 0x4296 PUSH2 0x5529 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x440A JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 SWAP3 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND SWAP2 PUSH3 0x7A120 SWAP2 PUSH32 0x81EFCBDD00000000000000000000000000000000000000000000000000000000 SWAP2 DUP11 SWAP2 PUSH1 0x1 SWAP2 DUP10 SWAP2 SWAP1 JUMPDEST POP PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x4335 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7BFB JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x43BE SWAP2 SWAP1 PUSH2 0x7A03 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x43FA JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x43FF JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH2 0x45E1 JUMP JUMPDEST PUSH2 0x4412 PUSH2 0x5529 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x44A1 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 SWAP3 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND SWAP2 PUSH3 0x7A120 SWAP2 PUSH32 0x61E597F900000000000000000000000000000000000000000000000000000000 SWAP2 DUP12 SWAP2 PUSH1 0x1 SWAP2 DUP10 SWAP2 SWAP1 PUSH2 0x4321 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 DUP2 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND SWAP2 PUSH3 0x7A120 SWAP2 PUSH32 0x5734D9A00000000000000000000000000000000000000000000000000000000 SWAP2 PUSH2 0x4510 SWAP2 DUP13 SWAP2 PUSH1 0x1 SWAP2 DUP11 SWAP2 DUP15 SWAP1 DUP5 SWAP1 DUP5 SWAP1 PUSH1 0x64 DUP6 ADD PUSH2 0x7C4B JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x4599 SWAP2 SWAP1 PUSH2 0x7A03 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x45D5 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x45DA JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP JUMPDEST DUP2 ISZERO PUSH2 0x224F JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x2AB1 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x752F JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 PUSH2 0x460A DUP6 DUP8 PUSH2 0x5554 JUMP JUMPDEST DUP4 MLOAD PUSH1 0x40 DUP1 MLOAD DUP3 DUP2 MSTORE PUSH1 0x20 DUP1 DUP5 MUL DUP3 ADD ADD SWAP1 SWAP2 MSTORE DUP2 DUP1 ISZERO PUSH2 0x4635 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH2 0x4640 PUSH2 0x60CA JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x1273B0C6 DUP9 DUP9 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x467A SWAP3 SWAP2 SWAP1 PUSH2 0x7A40 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4692 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x46A6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x46CA SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x6F05 JUMP JUMPDEST SWAP3 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND ISZERO PUSH2 0x46F5 JUMPI POP PUSH1 0x1 SWAP4 POP DUP7 PUSH2 0x47B3 JUMP JUMPDEST PUSH2 0x46FD PUSH2 0x60CA JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x1273B0C6 DUP9 DUP11 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4737 SWAP3 SWAP2 SWAP1 PUSH2 0x7A40 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x474F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4763 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x4787 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x6F05 JUMP JUMPDEST SWAP4 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH2 0x47AC JUMPI POP PUSH2 0x3333 SWAP1 POP JUMP JUMPDEST POP PUSH1 0x0 SWAP4 POP DUP6 JUMPDEST DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xDD58B41C PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x47F9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x480D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x4831 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x745E JUMP JUMPDEST PUSH2 0x483D JUMPI POP PUSH2 0x3333 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x48DC JUMPI PUSH1 0x0 PUSH2 0x48AE DUP11 DUP8 DUP6 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x4862 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7A67 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP11 DUP9 DUP7 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x4886 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7A67 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP11 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x48A1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x60E2 JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x48BB JUMPI POP PUSH2 0x48DC JUMP JUMPDEST DUP1 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x48C8 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP PUSH1 0x1 ADD PUSH2 0x4840 JUMP JUMPDEST POP POP POP SWAP4 POP SWAP4 POP SWAP4 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x7A1 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 DUP6 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x4909 SWAP2 SWAP1 PUSH2 0x7A1F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x492E SWAP2 SWAP1 PUSH2 0x7A1F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x63C0 DUP2 MSTORE POP DUP4 PUSH2 0x59DB JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH2 0x495C DUP5 DUP7 PUSH2 0x5554 JUMP JUMPDEST DUP3 MLOAD PUSH1 0x40 DUP1 MLOAD DUP3 DUP2 MSTORE PUSH1 0x20 DUP1 DUP5 MUL DUP3 ADD ADD SWAP1 SWAP2 MSTORE DUP2 DUP1 ISZERO PUSH2 0x4987 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 PUSH2 0x4994 PUSH2 0x5529 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x49CC JUMPI DUP7 PUSH2 0x49CF JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x49DB PUSH2 0x5529 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x4A13 JUMPI DUP7 PUSH2 0x4A16 JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x4A71 JUMPI PUSH1 0x0 PUSH2 0x4A43 DUP5 DUP5 DUP11 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x4A36 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x27C6 JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x4A50 JUMPI POP PUSH2 0x4A71 JUMP JUMPDEST DUP1 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x4A5D JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP PUSH1 0x1 ADD PUSH2 0x4A1B JUMP JUMPDEST POP PUSH2 0x2566 PUSH2 0x5BC3 JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH2 0x4A87 DUP5 DUP7 PUSH2 0x5554 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xBCCC34C600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS SWAP1 PUSH4 0xBCCC34C6 SWAP1 PUSH2 0x4AC7 SWAP1 DUP10 SWAP1 DUP10 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x7E11 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4ADF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4AF3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x4B39 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x752F JUMP JUMPDEST SWAP2 POP PUSH2 0x4BA3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 DUP7 DUP6 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x4B5C SWAP3 SWAP2 SWAP1 PUSH2 0x7BCC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP8 DUP6 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x4B83 SWAP3 SWAP2 SWAP1 PUSH2 0x7BCC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x6549 DUP2 MSTORE POP DUP5 PUSH2 0x59DB JUMP JUMPDEST SWAP1 POP SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 PUSH2 0x4BBD DUP6 DUP8 PUSH2 0x5554 JUMP JUMPDEST DUP4 MLOAD PUSH1 0x40 DUP1 MLOAD DUP3 DUP2 MSTORE PUSH1 0x20 DUP1 DUP5 MUL DUP3 ADD ADD SWAP1 SWAP2 MSTORE DUP2 DUP1 ISZERO PUSH2 0x4BE8 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH2 0x4BF3 PUSH2 0x60CA JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x1273B0C6 DUP9 DUP9 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4C2D SWAP3 SWAP2 SWAP1 PUSH2 0x7A40 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4C45 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4C59 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x4C7D SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x6F05 JUMP JUMPDEST SWAP3 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND ISZERO PUSH2 0x4CA8 JUMPI POP PUSH1 0x1 SWAP4 POP DUP7 PUSH2 0x4D66 JUMP JUMPDEST PUSH2 0x4CB0 PUSH2 0x60CA JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x1273B0C6 DUP9 DUP11 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4CEA SWAP3 SWAP2 SWAP1 PUSH2 0x7A40 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4D02 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4D16 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x4D3A SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x6F05 JUMP JUMPDEST SWAP4 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH2 0x4D5F JUMPI POP PUSH2 0x3333 SWAP1 POP JUMP JUMPDEST POP PUSH1 0x0 SWAP4 POP DUP6 JUMPDEST DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xDD58B41C PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4DAC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4DC0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x4DE4 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x745E JUMP JUMPDEST PUSH2 0x4DF0 JUMPI POP PUSH2 0x3333 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH2 0x4E58 SWAP1 DUP1 PUSH2 0x4E0F DUP11 DUP9 DUP7 PUSH1 0x80 DUP6 ADD PUSH2 0x7A67 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP11 DUP8 DUP6 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x4E38 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7A67 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x60E2 DUP2 MSTORE POP DUP8 PUSH2 0x59DB JUMP JUMPDEST SWAP3 POP POP POP SWAP4 POP SWAP4 POP SWAP4 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP3 MLOAD SWAP1 POP DUP1 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x4E97 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1711 JUMPI PUSH1 0x0 PUSH1 0x60 PUSH2 0x4EB1 PUSH2 0x57A2 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH3 0x493E0 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x525D0DA7 SWAP1 POP PUSH1 0xE0 SHL DUP11 DUP11 DUP11 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x4EFB JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x4F15 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7B48 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x4F9E SWAP2 SWAP1 PUSH2 0x7A03 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x4FDA JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x4FDF JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x5004 JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x5001 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x77CF JUMP JUMPDEST SWAP1 POP JUMPDEST DUP1 PUSH2 0x5011 JUMPI POP POP POP PUSH2 0x1711 JUMP JUMPDEST DUP1 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x501E JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x4E9D JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP3 MLOAD SWAP1 POP DUP1 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x5066 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x4065 JUMPI PUSH1 0x0 PUSH1 0x60 PUSH2 0x5080 PUSH2 0x6082 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH3 0x249F0 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x1F00CA74 SWAP1 POP PUSH1 0xE0 SHL DUP9 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x50C8 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP11 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x50E2 SWAP3 SWAP2 SWAP1 PUSH2 0x80DB JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x516B SWAP2 SWAP1 PUSH2 0x7A03 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x51A7 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x51AC JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x403A JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x51CE SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x73E6 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x51DA JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP DUP1 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x51F1 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x506C JUMP JUMPDEST PUSH1 0x60 PUSH2 0x5214 DUP5 DUP5 DUP5 PUSH2 0xB7C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0xD29 JUMPI DUP2 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x522E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ PUSH2 0x52A2 JUMPI PUSH2 0x5289 DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x524C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x5260 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0xA0 ADD MLOAD DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x5278 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x80 ADD MLOAD PUSH2 0x56F7 JUMP JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x5295 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP JUMPDEST PUSH1 0x1 ADD PUSH2 0x5219 JUMP JUMPDEST PUSH2 0x52B2 PUSH2 0x6B45 JUMP JUMPDEST PUSH2 0x52BA PUSH2 0x6B45 JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 PUSH1 0x0 JUMPDEST DUP7 MLOAD DUP2 EQ PUSH2 0x53DF JUMPI PUSH2 0x530F PUSH1 0x20 DUP9 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x52F8 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD SUB DUP8 DUP10 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x3152 JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP10 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x5336 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x534B SWAP2 SWAP1 PUSH2 0x7A03 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x5386 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x538B JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0x53D5 JUMPI PUSH1 0x0 PUSH2 0x53AF PUSH1 0x20 DUP4 MLOAD SUB DUP4 PUSH2 0x5BEB SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 GT DUP1 ISZERO PUSH2 0x53C0 JUMPI POP DUP5 DUP2 LT JUMPDEST ISZERO PUSH2 0x53D3 JUMPI DUP4 DUP8 MSTORE PUSH1 0x20 DUP8 ADD DUP3 SWAP1 MSTORE SWAP4 POP DUP4 JUMPDEST POP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x52DF JUMP JUMPDEST POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 EQ ISZERO PUSH2 0x540E JUMPI POP PUSH2 0x3333 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP8 MLOAD DUP2 EQ PUSH2 0x3330 JUMPI PUSH2 0x5441 PUSH1 0x20 DUP10 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x542A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD SUB DUP4 DUP11 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x3152 JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP11 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x5468 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x547D SWAP2 SWAP1 PUSH2 0x7A03 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x54B8 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x54BD JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0x5507 JUMPI PUSH1 0x0 PUSH2 0x54E1 PUSH1 0x20 DUP4 MLOAD SUB DUP4 PUSH2 0x5BEB SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 GT DUP1 ISZERO PUSH2 0x54F2 JUMPI POP DUP6 DUP2 LT JUMPDEST ISZERO PUSH2 0x5505 JUMPI DUP4 DUP9 MSTORE PUSH1 0x20 DUP9 ADD DUP3 SWAP1 MSTORE SWAP5 POP DUP5 JUMPDEST POP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x5411 JUMP JUMPDEST PUSH20 0x9AAB3F75489902F3A48495025729A0AF77D4B11E SWAP1 JUMP JUMPDEST PUSH20 0xC02AAA39B223FE8D0A0E5C4F27EAD9083C756CC2 SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x554C DUP3 PUSH2 0x669A JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x55C3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x55BA SWAP1 PUSH2 0x7FAE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x55DB JUMPI POP PUSH1 0x0 PUSH2 0x554F JUMP JUMPDEST DUP2 MLOAD PUSH1 0x24 EQ ISZERO DUP1 PUSH2 0x563E JUMPI POP PUSH32 0xF47261B000000000000000000000000000000000000000000000000000000000 PUSH2 0x5619 DUP4 PUSH1 0x0 PUSH4 0xFFFFFFFF PUSH2 0x676B AND JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x564B JUMPI POP PUSH1 0x0 PUSH2 0x554F JUMP JUMPDEST PUSH2 0x554C DUP3 PUSH1 0x10 PUSH4 0xFFFFFFFF PUSH2 0x67B7 AND JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x567A JUMPI PUSH2 0x567A PUSH2 0x5675 PUSH1 0x2 DUP6 DUP6 PUSH2 0x67F7 JUMP JUMPDEST PUSH2 0x689C JUMP JUMPDEST POP DUP1 DUP3 SUB JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x137D JUMPI PUSH2 0x137D PUSH2 0x5675 PUSH1 0x0 DUP7 DUP7 PUSH2 0x67F7 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x56AE DUP5 DUP5 DUP5 PUSH2 0x68A4 JUMP JUMPDEST ISZERO PUSH2 0x56C1 JUMPI PUSH2 0x56C1 PUSH2 0x5675 DUP6 DUP6 DUP6 PUSH2 0x690A JUMP JUMPDEST PUSH2 0x7A1 DUP4 PUSH2 0x56D5 DUP7 DUP6 PUSH4 0xFFFFFFFF PUSH2 0x6929 AND JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x695A AND JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0x56F0 JUMPI DUP2 PUSH2 0x137D JUMP JUMPDEST POP SWAP1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7A1 DUP4 PUSH2 0x56D5 PUSH2 0x5711 DUP3 PUSH1 0x1 PUSH4 0xFFFFFFFF PUSH2 0x565C AND JUMP JUMPDEST PUSH2 0x5721 DUP9 DUP8 PUSH4 0xFFFFFFFF PUSH2 0x6929 AND JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x5685 AND JUMP JUMPDEST PUSH20 0x794E6E91555438AFC3CCF1C5076A74F42133D08D SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MUL DUP4 ISZERO DUP1 ISZERO SWAP1 PUSH2 0x5762 JUMPI POP DUP3 DUP5 DUP3 DUP2 PUSH2 0x575E JUMPI INVALID JUMPDEST DIV EQ ISZERO JUMPDEST ISZERO PUSH2 0x5771 JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x567F JUMP JUMPDEST PUSH8 0x6F05B59D3B20000 DUP2 ADD DUP2 DUP2 LT ISZERO PUSH2 0x578F JUMPI PUSH1 0x0 SWAP3 POP POP POP PUSH2 0x567F JUMP JUMPDEST PUSH8 0xDE0B6B3A7640000 SWAP1 DIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH20 0x2E703D658F8DD21709A7B458967AB4081F8D3D05 SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x57C4 PUSH2 0x6984 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x6F2BF62 DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x57FC SWAP2 SWAP1 PUSH2 0x7A1F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5814 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5828 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x554C SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x6F05 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH2 0x586F JUMPI PUSH2 0x598D JUMP JUMPDEST PUSH1 0x60 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH3 0x249F0 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x589E SWAP2 SWAP1 PUSH2 0x80D2 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x5927 SWAP2 SWAP1 PUSH2 0x7A03 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x5963 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x5968 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP DUP2 ISZERO PUSH2 0x598B JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x5988 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x77CF JUMP JUMPDEST SWAP3 POP JUMPDEST POP JUMPDEST SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x59AC SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x6F05 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP5 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x59C4 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x6F05 JUMP JUMPDEST SWAP1 POP PUSH2 0x59D1 DUP3 DUP3 DUP7 PUSH2 0x27C6 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x5A08 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP2 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x5A1A JUMPI PUSH2 0x567F JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5A4B DUP5 PUSH1 0x0 ADD MLOAD DUP6 PUSH1 0x20 ADD MLOAD DUP6 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x5A36 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 PUSH1 0x40 ADD MLOAD PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x5A58 JUMPI POP PUSH2 0x567F JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5A75 DUP6 PUSH1 0x20 ADD MLOAD DUP7 PUSH1 0x0 ADD MLOAD DUP5 DUP9 PUSH1 0x40 ADD MLOAD PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x5A84 JUMPI POP PUSH2 0x567F SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x5BBA JUMPI PUSH1 0x0 JUMPDEST PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x5B7C JUMPI PUSH2 0x5ABA DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x5AAB JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 DUP7 PUSH2 0x699C JUMP JUMPDEST SWAP4 POP DUP4 PUSH2 0x5AC6 JUMPI PUSH2 0x5B7C JUMP JUMPDEST PUSH2 0x5AD5 PUSH2 0x2715 PUSH2 0x2710 DUP7 PUSH2 0x699C JUMP JUMPDEST SWAP4 POP DUP4 PUSH2 0x5AE1 JUMPI PUSH2 0x5B7C JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5AFE DUP9 PUSH1 0x20 ADD MLOAD DUP10 PUSH1 0x0 ADD MLOAD DUP8 DUP12 PUSH1 0x40 ADD MLOAD PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x5B0B JUMPI POP PUSH2 0x5B7C JUMP JUMPDEST DUP1 SWAP4 POP DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x5B1A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 LT PUSH2 0x5B73 JUMPI PUSH1 0x0 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x5B36 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x2710 DUP10 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x5B4D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 SUB MUL DUP2 PUSH2 0x5B5F JUMPI INVALID JUMPDEST DIV SWAP1 POP PUSH1 0x5 DUP2 GT PUSH2 0x5B71 JUMPI POP POP PUSH2 0x5B7C JUMP JUMPDEST POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x5A93 JUMP JUMPDEST POP PUSH2 0x5B9B DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x5B8C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP4 DUP6 PUSH2 0x699C JUMP JUMPDEST DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x5BA7 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x5A87 JUMP JUMPDEST POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH20 0x71CD6666064C3A1354A3B4DCA5FA1E2D3EE7D303 SWAP1 JUMP JUMPDEST PUSH2 0x5BE6 DUP4 DUP4 DUP4 PUSH2 0x69F4 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x137D DUP4 DUP4 PUSH2 0x6A1B JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x5C02 PUSH2 0x6B5F JUMP JUMPDEST DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x5C16 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x75E6 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x5C30 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x75CA JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH32 0x40BC03AE00000000000000000000000000000000000000000000000000000000 DUP6 DUP8 DUP7 PUSH2 0x5C64 DUP13 PUSH2 0x6A45 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x5C77 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x800B JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x5D00 SWAP2 SWAP1 PUSH2 0x7A03 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x5D3B JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x5D40 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH2 0x5D58 JUMPI PUSH1 0x0 SWAP6 POP POP POP POP POP POP PUSH2 0x137D JUMP JUMPDEST DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x5D6C SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x73E6 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x5D78 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP6 POP POP POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH2 0x5DB3 JUMPI POP PUSH1 0x0 PUSH2 0x137D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x60 SWAP1 PUSH32 0x153F599700000000000000000000000000000000000000000000000000000000 SWAP1 PUSH2 0x5DEB SWAP1 DUP7 SWAP1 DUP7 SWAP1 PUSH1 0x24 ADD PUSH2 0x7A40 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP SWAP1 POP PUSH1 0x0 PUSH1 0x60 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x40 MLOAD PUSH2 0x5E73 SWAP2 SWAP1 PUSH2 0x7A03 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x5EAE JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x5EB3 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x5EC6 JUMPI POP DUP1 MLOAD PUSH1 0x20 EQ JUMPDEST ISZERO PUSH2 0x5EE0 JUMPI PUSH2 0x5ED6 DUP2 PUSH1 0xC PUSH2 0x67B7 JUMP JUMPDEST SWAP4 POP POP POP POP PUSH2 0x137D JUMP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x5F03 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x6F21 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x5F1D SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x6F05 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH32 0x9F76AD3500000000000000000000000000000000000000000000000000000000 DUP6 DUP8 DUP7 PUSH2 0x5F51 DUP13 PUSH2 0x6A45 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x5F64 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7A97 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x5FED SWAP2 SWAP1 PUSH2 0x7A03 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x6028 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x602D JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH2 0x6045 JUMPI PUSH1 0x0 SWAP6 POP POP POP POP POP POP PUSH2 0x137D JUMP JUMPDEST PUSH1 0x60 DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x605B SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x7419 JUMP JUMPDEST POP SWAP1 POP DUP1 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x606B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP7 POP POP POP POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH20 0xF164FC0EC4E93095B804A4795BBE1E041497B92A SWAP1 JUMP JUMPDEST PUSH20 0xE2F2A5C287993345A840DB3B0845FBC70F5935A5 SWAP1 JUMP JUMPDEST PUSH20 0xA1C0FA73C39CFBCC11EC9EB1AFC665ABA9996E2C SWAP1 JUMP JUMPDEST PUSH20 0x3A97247DF274A17C59A3BD12735EA3FCDFB49950 SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP7 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x60FC SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x6F5A JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP PUSH1 0x0 PUSH1 0x60 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x625F JUMPI PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND SWAP1 PUSH3 0x493E0 SWAP1 PUSH32 0xA2801E1600000000000000000000000000000000000000000000000000000000 SWAP1 PUSH2 0x618A SWAP1 DUP12 SWAP1 PUSH1 0x24 ADD PUSH2 0x80D2 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x6213 SWAP2 SWAP1 PUSH2 0x7A03 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x624F JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x6254 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH2 0x638C JUMP JUMPDEST PUSH2 0x6267 PUSH2 0x6A86 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND SWAP1 PUSH3 0x493E0 SWAP1 PUSH32 0xCA19EBD900000000000000000000000000000000000000000000000000000000 SWAP1 PUSH2 0x62BB SWAP1 DUP9 SWAP1 DUP13 SWAP1 PUSH1 0x24 ADD PUSH2 0x7CEB JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x6344 SWAP2 SWAP1 PUSH2 0x7A03 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x6380 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x6385 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP JUMPDEST DUP2 PUSH2 0x639F JUMPI PUSH1 0x0 SWAP6 POP POP POP POP POP POP PUSH2 0x137D JUMP JUMPDEST DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x63B3 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x77CF JUMP JUMPDEST SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x63D7 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x6F05 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP5 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x63EF SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x6F05 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH32 0xBC61A69500000000000000000000000000000000000000000000000000000000 DUP6 DUP6 PUSH2 0x6422 DUP11 PUSH2 0x6A45 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x6434 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7B0F JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x64BD SWAP2 SWAP1 PUSH2 0x7A03 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x64F8 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x64FD JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH2 0x6514 JUMPI PUSH1 0x0 SWAP5 POP POP POP POP POP PUSH2 0x137D JUMP JUMPDEST DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x6528 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x73E6 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x6534 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP5 POP POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 DUP5 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x6562 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x6FA6 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP7 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x657C SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x6FA6 JUMP JUMPDEST POP SWAP1 POP PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x15E42A61 PUSH1 0xE0 SHL DUP6 DUP6 DUP9 DUP12 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x65B9 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7EB2 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x6642 SWAP2 SWAP1 PUSH2 0x7A03 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x667D JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x6682 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH2 0x639F JUMPI PUSH1 0x0 SWAP6 POP POP POP POP POP POP PUSH2 0x137D JUMP JUMPDEST PUSH1 0x0 PUSH1 0x12 SWAP1 POP PUSH1 0x0 PUSH1 0x60 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x4 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x313CE56700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x40 MLOAD PUSH2 0x66FE SWAP2 SWAP1 PUSH2 0x7A03 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x6739 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x673E JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x6751 JUMPI POP DUP1 MLOAD PUSH1 0x20 EQ JUMPDEST ISZERO PUSH2 0x6764 JUMPI PUSH2 0x6761 DUP2 PUSH1 0x0 PUSH2 0x5BEB JUMP JUMPDEST SWAP3 POP JUMPDEST POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x4 ADD DUP4 MLOAD LT ISZERO PUSH2 0x678C JUMPI PUSH2 0x678C PUSH2 0x5675 PUSH1 0x3 DUP6 MLOAD DUP6 PUSH1 0x4 ADD PUSH2 0x6A9E JUMP JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x14 ADD DUP4 MLOAD LT ISZERO PUSH2 0x67D8 JUMPI PUSH2 0x67D8 PUSH2 0x5675 PUSH1 0x4 DUP6 MLOAD DUP6 PUSH1 0x14 ADD PUSH2 0x6A9E JUMP JUMPDEST POP ADD PUSH1 0x14 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH4 0xE946C1BB PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x6816 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7F49 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x68B6 JUMPI PUSH2 0x68B6 PUSH2 0x5675 PUSH2 0x6ABD JUMP JUMPDEST DUP2 ISZERO DUP1 PUSH2 0x68C1 JUMPI POP DUP4 ISZERO JUMPDEST ISZERO PUSH2 0x68CE JUMPI POP PUSH1 0x0 PUSH2 0x137D JUMP JUMPDEST PUSH1 0x0 DUP4 DUP1 PUSH2 0x68D8 JUMPI INVALID JUMPDEST DUP6 DUP5 MULMOD SWAP1 POP PUSH2 0x68ED DUP6 DUP5 PUSH4 0xFFFFFFFF PUSH2 0x6929 AND JUMP JUMPDEST PUSH2 0x68FF DUP3 PUSH2 0x3E8 PUSH4 0xFFFFFFFF PUSH2 0x6929 AND JUMP JUMPDEST LT ISZERO SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH4 0x339F3DE2 PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x6816 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x813F JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x6938 JUMPI POP PUSH1 0x0 PUSH2 0x567F JUMP JUMPDEST DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 PUSH2 0x6945 JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x137D JUMPI PUSH2 0x137D PUSH2 0x5675 PUSH1 0x1 DUP7 DUP7 PUSH2 0x67F7 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x6970 JUMPI PUSH2 0x6970 PUSH2 0x5675 PUSH1 0x3 DUP6 DUP6 PUSH2 0x67F7 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP2 PUSH2 0x697B JUMPI INVALID JUMPDEST DIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH20 0xC0A47DFE034B400B47BDAD5FECDA2621DE6C4D95 SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP4 ISZERO DUP1 PUSH2 0x69A9 JUMPI POP DUP2 ISZERO JUMPDEST DUP1 PUSH2 0x69B2 JUMPI POP DUP3 ISZERO JUMPDEST ISZERO PUSH2 0x69BF JUMPI POP PUSH1 0x0 PUSH2 0x137D JUMP JUMPDEST DUP4 DUP3 MUL DUP3 DUP6 DUP3 DUP2 PUSH2 0x69CC JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x69DC JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x137D JUMP JUMPDEST DUP4 PUSH1 0x1 DUP6 SUB DUP3 ADD DUP2 PUSH2 0x69EA JUMPI INVALID JUMPDEST DIV SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO PUSH2 0x6A13 JUMPI PUSH2 0x6A13 PUSH2 0x5675 PUSH1 0x5 DUP6 MLOAD DUP6 PUSH1 0x20 ADD PUSH2 0x6A9E JUMP JUMPDEST SWAP2 ADD PUSH1 0x20 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO PUSH2 0x6A3C JUMPI PUSH2 0x6A3C PUSH2 0x5675 PUSH1 0x5 DUP6 MLOAD DUP6 PUSH1 0x20 ADD PUSH2 0x6A9E JUMP JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP2 PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP POP SWAP1 POP DUP2 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x6A75 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH20 0x533DA777AEDCE766CEAE696BF90F8541A4BA80EB SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH4 0x28006595 PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x6816 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7F6A JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x4 DUP2 MSTORE PUSH32 0xA791837C00000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD SWAP1 SWAP2 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x567F DUP2 PUSH2 0x8243 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x6B9A JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x6BAD PUSH2 0x6BA8 DUP3 PUSH2 0x81A4 JUMP JUMPDEST PUSH2 0x817D JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x6BCE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x6BF6 JUMPI DUP2 CALLDATALOAD PUSH2 0x6BE4 DUP2 PUSH2 0x8243 JUMP JUMPDEST DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x6BD1 JUMP JUMPDEST POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x6C11 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x6C1F PUSH2 0x6BA8 DUP3 PUSH2 0x81A4 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 ADD PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x6C5C JUMPI PUSH2 0x6C47 DUP8 PUSH1 0x20 DUP5 CALLDATALOAD DUP10 ADD ADD PUSH2 0x6D22 JUMP JUMPDEST DUP4 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x6C2F JUMP JUMPDEST POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x6C76 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x6C84 PUSH2 0x6BA8 DUP3 PUSH2 0x81A4 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x6CA5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x6BF6 JUMPI DUP2 MLOAD DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x6CA8 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x6CD4 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x6CE2 PUSH2 0x6BA8 DUP3 PUSH2 0x81A4 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x6D03 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x6BF6 JUMPI DUP2 CALLDATALOAD DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x6D06 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x6D32 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x6D40 PUSH2 0x6BA8 DUP3 PUSH2 0x81C4 JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x6D57 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP5 ADD CALLDATACOPY PUSH1 0x0 SWAP1 DUP3 ADD PUSH1 0x20 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x6D80 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x6D8E PUSH2 0x6BA8 DUP3 PUSH2 0x81C4 JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x6DA5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x27BF DUP2 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x8206 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C0 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x6DC9 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x6DD2 DUP2 PUSH2 0x817D JUMP JUMPDEST SWAP2 POP POP PUSH2 0x6DDF DUP4 DUP4 PUSH2 0x6B7F JUMP JUMPDEST DUP2 MSTORE PUSH2 0x6DEE DUP4 PUSH1 0x20 DUP5 ADD PUSH2 0x6B7F JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x6E00 DUP4 PUSH1 0x40 DUP5 ADD PUSH2 0x6B7F JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x6E12 DUP4 PUSH1 0x60 DUP5 ADD PUSH2 0x6B7F JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP3 ADD CALLDATALOAD PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 DUP3 ADD CALLDATALOAD PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 DUP3 ADD CALLDATALOAD PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0xE0 DUP3 ADD CALLDATALOAD PUSH1 0xE0 DUP3 ADD MSTORE PUSH2 0x100 DUP1 DUP4 ADD CALLDATALOAD DUP2 DUP4 ADD MSTORE POP PUSH2 0x120 DUP1 DUP4 ADD CALLDATALOAD DUP2 DUP4 ADD MSTORE POP PUSH2 0x140 DUP1 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x6E74 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x6E80 DUP7 DUP4 DUP8 ADD PUSH2 0x6D22 JUMP JUMPDEST DUP4 DUP6 ADD MSTORE PUSH2 0x160 SWAP3 POP DUP3 DUP6 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x6E9C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x6EA8 DUP7 DUP4 DUP8 ADD PUSH2 0x6D22 JUMP JUMPDEST DUP4 DUP6 ADD MSTORE PUSH2 0x180 SWAP3 POP DUP3 DUP6 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x6EC4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x6ED0 DUP7 DUP4 DUP8 ADD PUSH2 0x6D22 JUMP JUMPDEST DUP4 DUP6 ADD MSTORE PUSH2 0x1A0 SWAP3 POP DUP3 DUP6 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x6EEC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x6EF9 DUP6 DUP3 DUP7 ADD PUSH2 0x6D22 JUMP JUMPDEST DUP3 DUP5 ADD MSTORE POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x6F16 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x137D DUP2 PUSH2 0x8243 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x6F33 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP3 MLOAD PUSH2 0x6F3E DUP2 PUSH2 0x8243 JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 SWAP3 POP PUSH2 0x6F4F DUP2 PUSH2 0x8243 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x6F6E JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 MLOAD PUSH2 0x6F79 DUP2 PUSH2 0x8243 JUMP JUMPDEST PUSH1 0x20 DUP6 ADD MLOAD SWAP1 SWAP4 POP PUSH2 0x6F8A DUP2 PUSH2 0x8243 JUMP JUMPDEST PUSH1 0x40 DUP6 ADD MLOAD SWAP1 SWAP3 POP PUSH2 0x6F9B DUP2 PUSH2 0x8243 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x6FB8 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH2 0x6FC3 DUP2 PUSH2 0x8243 JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 SWAP3 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x6FDF JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x6FEB DUP6 DUP3 DUP7 ADD PUSH2 0x6D70 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x700C JUMPI DUP3 DUP4 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x7017 DUP2 PUSH2 0x8243 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x7027 DUP2 PUSH2 0x8243 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH2 0x7037 DUP2 PUSH2 0x8243 JUMP JUMPDEST SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH2 0x7047 DUP2 PUSH2 0x8243 JUMP JUMPDEST SWAP2 POP PUSH1 0x80 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x7062 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x706E DUP9 DUP3 DUP10 ADD PUSH2 0x6CC4 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x7090 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x709B DUP2 PUSH2 0x8243 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x70AB DUP2 PUSH2 0x8243 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x70BB DUP2 PUSH2 0x8243 JUMP JUMPDEST SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x70D6 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x70E2 DUP8 DUP3 DUP9 ADD PUSH2 0x6CC4 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x7102 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x710D DUP2 PUSH2 0x8243 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x711D DUP2 PUSH2 0x8243 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x7138 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x7144 DUP7 DUP3 DUP8 ADD PUSH2 0x6CC4 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x7162 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x716D DUP2 PUSH2 0x8243 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x717D DUP2 PUSH2 0x8243 JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x71A2 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x71AD DUP2 PUSH2 0x8243 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x71C9 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x71D5 DUP8 DUP4 DUP9 ADD PUSH2 0x6B8A JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x71EA JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x7144 DUP7 DUP3 DUP8 ADD PUSH2 0x6CC4 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x7209 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x7220 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x722C DUP7 DUP4 DUP8 ADD PUSH2 0x6B8A JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x7241 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x6FEB DUP6 DUP3 DUP7 ADD PUSH2 0x6CC4 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x7260 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x7277 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP6 ADD DUP7 PUSH1 0x1F DUP3 ADD SLT PUSH2 0x7288 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP3 POP DUP2 DUP4 GT ISZERO PUSH2 0x7298 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP7 PUSH1 0x20 DUP1 DUP6 MUL DUP4 ADD ADD GT ISZERO PUSH2 0x72AB JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH1 0x20 ADD SWAP7 SWAP2 SWAP6 POP SWAP1 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x72CE JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x72E5 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x72F1 DUP8 DUP4 DUP9 ADD PUSH2 0x6C01 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x7306 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x7313 DUP7 DUP3 DUP8 ADD PUSH2 0x6C01 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x7338 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x734F JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 DUP7 ADD DUP8 PUSH1 0x1F DUP3 ADD SLT PUSH2 0x7360 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP3 POP PUSH2 0x7370 PUSH2 0x6BA8 DUP5 PUSH2 0x81A4 JUMP JUMPDEST DUP4 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD SWAP2 SWAP1 DUP4 DUP2 ADD DUP8 JUMPDEST DUP8 DUP2 LT ISZERO PUSH2 0x73A8 JUMPI PUSH2 0x7396 DUP14 DUP5 DUP5 CALLDATALOAD DUP10 ADD ADD PUSH2 0x6DB6 JUMP JUMPDEST DUP6 MSTORE SWAP4 DUP3 ADD SWAP4 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x737F JUMP JUMPDEST POP SWAP2 SWAP9 POP DUP10 ADD CALLDATALOAD SWAP5 POP POP POP POP DUP1 DUP3 GT ISZERO PUSH2 0x73C0 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x73CD DUP7 DUP3 DUP8 ADD PUSH2 0x6C01 JUMP JUMPDEST SWAP3 POP POP PUSH2 0x73DD DUP6 PUSH1 0x40 DUP7 ADD PUSH2 0x6B7F JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x73F7 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x740D JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x7A1 DUP5 DUP3 DUP6 ADD PUSH2 0x6C66 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x742B JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x7441 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x744D DUP6 DUP3 DUP7 ADD PUSH2 0x6C66 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD MLOAD PUSH2 0x6F4F DUP2 PUSH2 0x8243 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x746F JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x137D DUP2 PUSH2 0x8265 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x748E JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 MLOAD PUSH2 0x7499 DUP2 PUSH2 0x8265 JUMP JUMPDEST PUSH1 0x20 DUP6 ADD MLOAD SWAP1 SWAP4 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x74B5 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x74C1 DUP7 DUP3 DUP8 ADD PUSH2 0x6D70 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 DUP5 ADD MLOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x74E6 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x74F8 DUP2 PUSH2 0x8243 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH2 0x6F9B DUP2 PUSH2 0x8243 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x751D JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x70AB DUP2 PUSH2 0x8243 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x7540 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x7556 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x7A1 DUP5 DUP3 DUP6 ADD PUSH2 0x6D70 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x7577 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x758D JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x7599 DUP8 DUP3 DUP9 ADD PUSH2 0x6D22 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x75AA DUP2 PUSH2 0x8243 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x75BA DUP2 PUSH2 0x8243 JUMP JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP3 SWAP4 PUSH1 0x60 ADD CALLDATALOAD SWAP3 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x75DB JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x137D DUP2 PUSH2 0x82A1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x80 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x75F8 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH2 0x7603 DUP2 PUSH2 0x82A1 JUMP JUMPDEST SWAP2 POP PUSH1 0x60 DUP4 DUP6 SUB PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 ADD SLT ISZERO PUSH2 0x7636 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x7640 PUSH1 0x60 PUSH2 0x817D JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD PUSH2 0x764E DUP2 PUSH2 0x8243 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x40 DUP5 ADD MLOAD PUSH2 0x765E DUP2 PUSH2 0x8273 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x60 DUP5 ADD MLOAD PUSH2 0x7671 DUP2 PUSH2 0x8273 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE SWAP2 SWAP5 SWAP2 SWAP4 POP SWAP1 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP5 DUP7 SUB PUSH1 0xC0 DUP2 SLT ISZERO PUSH2 0x7697 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x60 DUP2 SLT ISZERO PUSH2 0x76A4 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x76AF PUSH1 0x60 PUSH2 0x817D JUMP JUMPDEST DUP6 CALLDATALOAD PUSH2 0x76BA DUP2 PUSH2 0x8243 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x76CA DUP2 PUSH2 0x8273 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH2 0x76DD DUP2 PUSH2 0x8273 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE SWAP4 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH2 0x76F2 DUP2 PUSH2 0x82A1 JUMP JUMPDEST SWAP3 POP PUSH1 0x80 DUP6 ADD CALLDATALOAD PUSH2 0x7702 DUP2 PUSH2 0x82A1 JUMP JUMPDEST SWAP2 POP PUSH1 0xA0 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x70D6 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x772E JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x7738 PUSH1 0x60 PUSH2 0x817D JUMP JUMPDEST DUP3 MLOAD PUSH1 0x7 DUP2 LT PUSH2 0x7746 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP4 DUP2 ADD MLOAD SWAP1 DUP3 ADD MSTORE PUSH1 0x40 SWAP3 DUP4 ADD MLOAD SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x7779 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x7790 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x779C DUP8 DUP4 DUP9 ADD PUSH2 0x6DB6 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x77B1 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x77BE DUP7 DUP3 DUP8 ADD PUSH2 0x6D22 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH2 0x6F9B DUP2 PUSH2 0x8243 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x77E0 JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x20 DUP4 ADD DUP3 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x7832 JUMPI DUP2 MLOAD DUP7 MSTORE PUSH1 0x20 SWAP6 DUP7 ADD SWAP6 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x7814 JUMP JUMPDEST POP SWAP4 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x7854 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x8206 JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 MSTORE PUSH1 0x20 DUP1 DUP3 ADD MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 DUP2 AND SWAP2 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP2 DUP3 ADD MLOAD AND SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP4 MSTORE PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x40 PUSH1 0x20 DUP6 ADD MSTORE PUSH2 0x7A1 PUSH1 0x40 DUP6 ADD DUP3 PUSH2 0x783C JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C0 PUSH2 0x790C DUP5 DUP5 MLOAD PUSH2 0x77E7 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MLOAD PUSH2 0x791E PUSH1 0x20 DUP7 ADD DUP3 PUSH2 0x77E7 JUMP JUMPDEST POP PUSH1 0x40 DUP4 ADD MLOAD PUSH2 0x7931 PUSH1 0x40 DUP7 ADD DUP3 PUSH2 0x77E7 JUMP JUMPDEST POP PUSH1 0x60 DUP4 ADD MLOAD PUSH2 0x7944 PUSH1 0x60 DUP7 ADD DUP3 PUSH2 0x77E7 JUMP JUMPDEST POP PUSH1 0x80 DUP4 ADD MLOAD PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0xA0 DUP4 ADD MLOAD PUSH1 0xA0 DUP6 ADD MSTORE PUSH1 0xC0 DUP4 ADD MLOAD PUSH1 0xC0 DUP6 ADD MSTORE PUSH1 0xE0 DUP4 ADD MLOAD PUSH1 0xE0 DUP6 ADD MSTORE PUSH2 0x100 DUP1 DUP5 ADD MLOAD DUP2 DUP7 ADD MSTORE POP PUSH2 0x120 DUP1 DUP5 ADD MLOAD DUP2 DUP7 ADD MSTORE POP PUSH2 0x140 DUP1 DUP5 ADD MLOAD DUP3 DUP3 DUP8 ADD MSTORE PUSH2 0x799D DUP4 DUP8 ADD DUP3 PUSH2 0x783C JUMP JUMPDEST SWAP2 POP POP PUSH2 0x160 SWAP2 POP DUP2 DUP5 ADD MLOAD DUP6 DUP3 SUB DUP4 DUP8 ADD MSTORE PUSH2 0x79BA DUP3 DUP3 PUSH2 0x783C JUMP JUMPDEST SWAP3 POP POP POP PUSH2 0x180 DUP1 DUP5 ADD MLOAD DUP6 DUP4 SUB DUP3 DUP8 ADD MSTORE PUSH2 0x79D6 DUP4 DUP3 PUSH2 0x783C JUMP JUMPDEST SWAP2 POP POP PUSH2 0x1A0 SWAP2 POP DUP2 DUP5 ADD MLOAD DUP6 DUP3 SUB DUP4 DUP8 ADD MSTORE PUSH2 0x59D1 DUP3 DUP3 PUSH2 0x783C JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP4 CALLDATACOPY SWAP2 ADD SWAP1 DUP2 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x7A15 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x8206 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP4 DUP5 AND DUP2 MSTORE SWAP2 DUP4 AND PUSH1 0x20 DUP4 ADD MSTORE SWAP1 SWAP2 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP8 AND DUP4 MSTORE DUP1 DUP7 AND PUSH1 0x20 DUP5 ADD MSTORE DUP1 DUP6 AND PUSH1 0x40 DUP5 ADD MSTORE POP PUSH1 0x80 PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x59D1 PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0x7801 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP5 DUP6 AND DUP2 MSTORE SWAP3 DUP5 AND PUSH1 0x20 DUP5 ADD MSTORE SWAP3 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP7 AND DUP4 MSTORE DUP1 DUP6 AND PUSH1 0x20 DUP5 ADD MSTORE POP PUSH1 0x60 PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0xB73 PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x7801 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP9 AND DUP4 MSTORE DUP1 DUP8 AND PUSH1 0x20 DUP5 ADD MSTORE POP DUP5 PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0xFF DUP5 AND PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0xA0 PUSH1 0x80 DUP4 ADD MSTORE PUSH2 0x7BC1 PUSH1 0xA0 DUP4 ADD DUP5 PUSH2 0x783C JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND DUP3 MSTORE PUSH1 0x40 PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x7A1 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x783C JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP3 MSTORE PUSH2 0x7C1F DUP6 PUSH2 0x8236 JUMP JUMPDEST DUP5 PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x80 PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x7C39 PUSH1 0x80 DUP4 ADD DUP6 PUSH2 0x7801 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0x7BC1 DUP2 DUP6 PUSH2 0x7801 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x100 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP13 AND DUP5 MSTORE PUSH2 0x7C73 DUP12 PUSH2 0x8236 JUMP JUMPDEST DUP11 PUSH1 0x20 DUP6 ADD MSTORE DUP2 PUSH1 0x40 DUP6 ADD MSTORE PUSH2 0x7C8B DUP3 DUP6 ADD DUP12 PUSH2 0x7801 JUMP JUMPDEST DUP5 DUP2 SUB PUSH1 0x60 DUP7 ADD MSTORE PUSH2 0x7C9D DUP2 DUP12 PUSH2 0x7801 JUMP JUMPDEST SWAP2 DUP10 AND PUSH1 0x80 DUP7 ADD MSTORE POP SWAP1 POP PUSH2 0x7CB1 DUP7 PUSH2 0x8236 JUMP JUMPDEST DUP6 PUSH1 0xA0 DUP5 ADD MSTORE DUP3 DUP2 SUB PUSH1 0xC0 DUP5 ADD MSTORE PUSH2 0x7CC9 DUP2 DUP7 PUSH2 0x7801 JUMP JUMPDEST DUP4 DUP2 SUB PUSH1 0xE0 DUP6 ADD MSTORE PUSH2 0x7CDB DUP2 DUP7 PUSH2 0x7801 JUMP JUMPDEST SWAP13 SWAP12 POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 ADD DUP2 DUP5 MSTORE DUP1 DUP6 MLOAD DUP1 DUP4 MSTORE PUSH1 0x40 DUP7 ADD SWAP2 POP PUSH1 0x40 DUP5 DUP3 MUL DUP8 ADD ADD SWAP3 POP DUP4 DUP8 ADD DUP6 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x7D82 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0 DUP9 DUP7 SUB ADD DUP5 MSTORE PUSH2 0x7D70 DUP6 DUP4 MLOAD PUSH2 0x783C JUMP JUMPDEST SWAP5 POP SWAP3 DUP6 ADD SWAP3 SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x7D36 JUMP JUMPDEST POP SWAP3 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x137D PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x7801 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 MSTORE PUSH2 0x7DB5 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x7801 JUMP JUMPDEST SWAP1 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x20 DUP4 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP5 ISZERO ISZERO DUP3 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x60 PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0xB73 PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x7801 JUMP JUMPDEST SWAP3 DUP4 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 DUP3 AND PUSH1 0x20 DUP5 ADD MSTORE AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP3 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x60 PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0xB73 PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x783C JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x137D PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x783C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 MSTORE PUSH2 0x7EC5 PUSH1 0x80 DUP4 ADD DUP8 PUSH2 0x783C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP6 DUP7 AND PUSH1 0x20 DUP5 ADD MSTORE SWAP4 SWAP1 SWAP5 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 MSTORE PUSH2 0x7F08 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x783C JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0xB73 DUP2 DUP6 PUSH2 0x7801 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND DUP3 MSTORE PUSH1 0x40 PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x7A1 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x7801 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH2 0x7F56 DUP6 PUSH2 0x8236 JUMP JUMPDEST SWAP4 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH1 0x8 DUP6 LT PUSH2 0x7F56 JUMPI INVALID JUMPDEST PUSH1 0xF SWAP4 DUP5 SIGNEXTEND DUP2 MSTORE SWAP2 SWAP1 SWAP3 SIGNEXTEND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0xF DUP4 SWAP1 SIGNEXTEND DUP2 MSTORE PUSH1 0x80 DUP2 ADD PUSH2 0x137D PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x7886 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x455243323042726964676553616D706C65722F494E56414C49445F544F4B454E PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x5F50414952000000000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8017 DUP3 DUP8 PUSH2 0x7886 JUMP JUMPDEST DUP5 PUSH1 0xF SIGNEXTEND PUSH1 0x60 DUP4 ADD MSTORE DUP4 PUSH1 0xF SIGNEXTEND PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xC0 PUSH1 0xA0 DUP4 ADD MSTORE PUSH2 0x59D1 PUSH1 0xC0 DUP4 ADD DUP5 PUSH2 0x7801 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 MSTORE PUSH2 0x8050 PUSH1 0x60 DUP4 ADD DUP7 PUSH2 0x78DD JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x8062 DUP2 DUP7 PUSH2 0x78DD JUMP JUMPDEST SWAP2 POP POP DUP3 PUSH1 0x40 DUP4 ADD MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x137D PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x78FC JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 MSTORE PUSH2 0x8099 PUSH1 0x60 DUP4 ADD DUP7 PUSH2 0x78FC JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x80AB DUP2 DUP7 PUSH2 0x783C JUMP JUMPDEST SWAP2 POP POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x40 DUP4 ADD MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD DUP5 DUP4 MSTORE PUSH1 0x40 PUSH1 0x20 DUP5 ADD MSTORE DUP1 DUP5 MLOAD DUP1 DUP4 MSTORE PUSH1 0x60 DUP6 ADD SWAP2 POP PUSH1 0x20 DUP7 ADD SWAP3 POP DUP4 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x8133 JUMPI DUP4 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 MSTORE PUSH1 0x20 SWAP4 DUP5 ADD SWAP4 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x80FF JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST SWAP6 DUP7 MSTORE PUSH1 0x20 DUP7 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0x40 DUP6 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x819C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x81BA JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x81DA JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x8221 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x8209 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x8230 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x4 DUP2 LT PUSH2 0x8240 JUMPI INVALID JUMPDEST POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x8240 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x8240 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0x8240 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0xF SIGNEXTEND DUP2 EQ PUSH2 0x8240 JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG3 PUSH6 0x627A7A723158 KECCAK256 0xCD 0xB9 COINBASE 0xE7 PUSH12 0x2B13C302A2C0446B1E573683 0x1E 0xC8 0x2D SWAP10 0xA9 EXTCODESIZE DUP8 0xE7 0xAB PUSH9 0xF0C1CF199A6C657870 PUSH6 0x72696D656E74 PUSH2 0x6CF5 PUSH5 0x736F6C6343 STOP SDIV GT STOP BLOCKHASH ",
                "sourceMap": "1121:1177:4:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1121:1177:4;;;;;;;"
            },
            "deployedBytecode": {
                "linkReferences": {},
                "object": "",
                "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x226 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8E5A0E07 GT PUSH2 0x12A JUMPI DUP1 PUSH4 0xBE5B12B4 GT PUSH2 0xBD JUMPI DUP1 PUSH4 0xD442057B GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xE68248F7 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xE68248F7 EQ PUSH2 0x4FD JUMPI DUP1 PUSH4 0xE9A8E442 EQ PUSH2 0x510 JUMPI DUP1 PUSH4 0xFC9FE41B EQ PUSH2 0x523 JUMPI PUSH2 0x226 JUMP JUMPDEST DUP1 PUSH4 0xD442057B EQ PUSH2 0x4D7 JUMPI DUP1 PUSH4 0xD4544424 EQ PUSH2 0x4EA JUMPI PUSH2 0x226 JUMP JUMPDEST DUP1 PUSH4 0xBE5B12B4 EQ PUSH2 0x47C JUMPI DUP1 PUSH4 0xCA7893BA EQ PUSH2 0x49E JUMPI DUP1 PUSH4 0xCDB3B4AF EQ PUSH2 0x4B1 JUMPI DUP1 PUSH4 0xCF879D7E EQ PUSH2 0x4C4 JUMPI PUSH2 0x226 JUMP JUMPDEST DUP1 PUSH4 0xA2C28D4B GT PUSH2 0xF9 JUMPI DUP1 PUSH4 0xA2C28D4B EQ PUSH2 0x423 JUMPI DUP1 PUSH4 0xABFFC761 EQ PUSH2 0x436 JUMPI DUP1 PUSH4 0xBC61A695 EQ PUSH2 0x449 JUMPI DUP1 PUSH4 0xBCCC34C6 EQ PUSH2 0x45C JUMPI PUSH2 0x226 JUMP JUMPDEST DUP1 PUSH4 0x8E5A0E07 EQ PUSH2 0x3BA JUMPI DUP1 PUSH4 0x9209483B EQ PUSH2 0x3DC JUMPI DUP1 PUSH4 0x98777748 EQ PUSH2 0x3EF JUMPI DUP1 PUSH4 0x9F76AD35 EQ PUSH2 0x402 JUMPI PUSH2 0x226 JUMP JUMPDEST DUP1 PUSH4 0x5FBAFC05 GT PUSH2 0x1BD JUMPI DUP1 PUSH4 0x68BE3CF2 GT PUSH2 0x18C JUMPI DUP1 PUSH4 0x6DD6B78D GT PUSH2 0x171 JUMPI DUP1 PUSH4 0x6DD6B78D EQ PUSH2 0x381 JUMPI DUP1 PUSH4 0x70BBA11A EQ PUSH2 0x394 JUMPI DUP1 PUSH4 0x742BD050 EQ PUSH2 0x3A7 JUMPI PUSH2 0x226 JUMP JUMPDEST DUP1 PUSH4 0x68BE3CF2 EQ PUSH2 0x34E JUMPI DUP1 PUSH4 0x6DB8658F EQ PUSH2 0x36E JUMPI PUSH2 0x226 JUMP JUMPDEST DUP1 PUSH4 0x5FBAFC05 EQ PUSH2 0x2F4 JUMPI DUP1 PUSH4 0x60EE052A EQ PUSH2 0x307 JUMPI DUP1 PUSH4 0x64EE6ADE EQ PUSH2 0x31A JUMPI DUP1 PUSH4 0x67B881E7 EQ PUSH2 0x32D JUMPI PUSH2 0x226 JUMP JUMPDEST DUP1 PUSH4 0x3B77EBAE GT PUSH2 0x1F9 JUMPI DUP1 PUSH4 0x3B77EBAE EQ PUSH2 0x2A8 JUMPI DUP1 PUSH4 0x40BC03AE EQ PUSH2 0x2BB JUMPI DUP1 PUSH4 0x4703A7E6 EQ PUSH2 0x2CE JUMPI DUP1 PUSH4 0x57494B1D EQ PUSH2 0x2E1 JUMPI PUSH2 0x226 JUMP JUMPDEST DUP1 PUSH4 0x15E42A61 EQ PUSH2 0x22B JUMPI DUP1 PUSH4 0x2CA854F3 EQ PUSH2 0x254 JUMPI DUP1 PUSH4 0x2D753AA4 EQ PUSH2 0x275 JUMPI DUP1 PUSH4 0x39B085AD EQ PUSH2 0x295 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x23E PUSH2 0x239 CALLDATASIZE PUSH1 0x4 PUSH2 0x7562 JUMP JUMPDEST PUSH2 0x536 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x24B SWAP2 SWAP1 PUSH2 0x80D2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x267 PUSH2 0x262 CALLDATASIZE PUSH1 0x4 PUSH2 0x7508 JUMP JUMPDEST PUSH2 0x7A9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x24B SWAP3 SWAP2 SWAP1 PUSH2 0x7EF5 JUMP JUMPDEST PUSH2 0x288 PUSH2 0x283 CALLDATASIZE PUSH1 0x4 PUSH2 0x6FF5 JUMP JUMPDEST PUSH2 0x985 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x24B SWAP2 SWAP1 PUSH2 0x7D8F JUMP JUMPDEST PUSH2 0x288 PUSH2 0x2A3 CALLDATASIZE PUSH1 0x4 PUSH2 0x7324 JUMP JUMPDEST PUSH2 0xB7C JUMP JUMPDEST PUSH2 0x23E PUSH2 0x2B6 CALLDATASIZE PUSH1 0x4 PUSH2 0x7765 JUMP JUMPDEST PUSH2 0xD31 JUMP JUMPDEST PUSH2 0x288 PUSH2 0x2C9 CALLDATASIZE PUSH1 0x4 PUSH2 0x7681 JUMP JUMPDEST PUSH2 0x1384 JUMP JUMPDEST PUSH2 0x288 PUSH2 0x2DC CALLDATASIZE PUSH1 0x4 PUSH2 0x70EE JUMP JUMPDEST PUSH2 0x153D JUMP JUMPDEST PUSH2 0x288 PUSH2 0x2EF CALLDATASIZE PUSH1 0x4 PUSH2 0x707B JUMP JUMPDEST PUSH2 0x171A JUMP JUMPDEST PUSH2 0x288 PUSH2 0x302 CALLDATASIZE PUSH1 0x4 PUSH2 0x70EE JUMP JUMPDEST PUSH2 0x1DCB JUMP JUMPDEST PUSH2 0x288 PUSH2 0x315 CALLDATASIZE PUSH1 0x4 PUSH2 0x70EE JUMP JUMPDEST PUSH2 0x1F9A JUMP JUMPDEST PUSH2 0x288 PUSH2 0x328 CALLDATASIZE PUSH1 0x4 PUSH2 0x70EE JUMP JUMPDEST PUSH2 0x225A JUMP JUMPDEST PUSH2 0x340 PUSH2 0x33B CALLDATASIZE PUSH1 0x4 PUSH2 0x70EE JUMP JUMPDEST PUSH2 0x242E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x24B SWAP3 SWAP2 SWAP1 PUSH2 0x7F1A JUMP JUMPDEST PUSH2 0x361 PUSH2 0x35C CALLDATASIZE PUSH1 0x4 PUSH2 0x724E JUMP JUMPDEST PUSH2 0x25FD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x24B SWAP2 SWAP1 PUSH2 0x7D11 JUMP JUMPDEST PUSH2 0x23E PUSH2 0x37C CALLDATASIZE PUSH1 0x4 PUSH2 0x714E JUMP JUMPDEST PUSH2 0x27C6 JUMP JUMPDEST PUSH2 0x288 PUSH2 0x38F CALLDATASIZE PUSH1 0x4 PUSH2 0x70EE JUMP JUMPDEST PUSH2 0x2ABD JUMP JUMPDEST PUSH2 0x288 PUSH2 0x3A2 CALLDATASIZE PUSH1 0x4 PUSH2 0x718E JUMP JUMPDEST PUSH2 0x2D65 JUMP JUMPDEST PUSH2 0x288 PUSH2 0x3B5 CALLDATASIZE PUSH1 0x4 PUSH2 0x718E JUMP JUMPDEST PUSH2 0x2F41 JUMP JUMPDEST PUSH2 0x3CD PUSH2 0x3C8 CALLDATASIZE PUSH1 0x4 PUSH2 0x72BA JUMP JUMPDEST PUSH2 0x310D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x24B SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x803D JUMP JUMPDEST PUSH2 0x288 PUSH2 0x3EA CALLDATASIZE PUSH1 0x4 PUSH2 0x7681 JUMP JUMPDEST PUSH2 0x333C JUMP JUMPDEST PUSH2 0x288 PUSH2 0x3FD CALLDATASIZE PUSH1 0x4 PUSH2 0x707B JUMP JUMPDEST PUSH2 0x357E JUMP JUMPDEST PUSH2 0x415 PUSH2 0x410 CALLDATASIZE PUSH1 0x4 PUSH2 0x707B JUMP JUMPDEST PUSH2 0x3C07 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x24B SWAP3 SWAP2 SWAP1 PUSH2 0x7DA2 JUMP JUMPDEST PUSH2 0x415 PUSH2 0x431 CALLDATASIZE PUSH1 0x4 PUSH2 0x707B JUMP JUMPDEST PUSH2 0x3DFE JUMP JUMPDEST PUSH2 0x288 PUSH2 0x444 CALLDATASIZE PUSH1 0x4 PUSH2 0x71F7 JUMP JUMPDEST PUSH2 0x3E82 JUMP JUMPDEST PUSH2 0x288 PUSH2 0x457 CALLDATASIZE PUSH1 0x4 PUSH2 0x70EE JUMP JUMPDEST PUSH2 0x406D JUMP JUMPDEST PUSH2 0x46F PUSH2 0x46A CALLDATASIZE PUSH1 0x4 PUSH2 0x74D2 JUMP JUMPDEST PUSH2 0x423E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x24B SWAP2 SWAP1 PUSH2 0x7E9F JUMP JUMPDEST PUSH2 0x48F PUSH2 0x48A CALLDATASIZE PUSH1 0x4 PUSH2 0x70EE JUMP JUMPDEST PUSH2 0x45FB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x24B SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7DDA JUMP JUMPDEST PUSH2 0x288 PUSH2 0x4AC CALLDATASIZE PUSH1 0x4 PUSH2 0x70EE JUMP JUMPDEST PUSH2 0x48E8 JUMP JUMPDEST PUSH2 0x340 PUSH2 0x4BF CALLDATASIZE PUSH1 0x4 PUSH2 0x70EE JUMP JUMPDEST PUSH2 0x494E JUMP JUMPDEST PUSH2 0x267 PUSH2 0x4D2 CALLDATASIZE PUSH1 0x4 PUSH2 0x7508 JUMP JUMPDEST PUSH2 0x4A7A JUMP JUMPDEST PUSH2 0x48F PUSH2 0x4E5 CALLDATASIZE PUSH1 0x4 PUSH2 0x70EE JUMP JUMPDEST PUSH2 0x4BAE JUMP JUMPDEST PUSH2 0x288 PUSH2 0x4F8 CALLDATASIZE PUSH1 0x4 PUSH2 0x70EE JUMP JUMPDEST PUSH2 0x4E65 JUMP JUMPDEST PUSH2 0x288 PUSH2 0x50B CALLDATASIZE PUSH1 0x4 PUSH2 0x71F7 JUMP JUMPDEST PUSH2 0x5034 JUMP JUMPDEST PUSH2 0x288 PUSH2 0x51E CALLDATASIZE PUSH1 0x4 PUSH2 0x7324 JUMP JUMPDEST PUSH2 0x5207 JUMP JUMPDEST PUSH2 0x3CD PUSH2 0x531 CALLDATASIZE PUSH1 0x4 PUSH2 0x72BA JUMP JUMPDEST PUSH2 0x52AA JUMP JUMPDEST PUSH1 0x0 DUP5 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x54A JUMPI POP PUSH1 0x0 PUSH2 0x7A1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH2 0x556 PUSH2 0x5511 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH3 0x7A120 PUSH32 0x418436BC00000000000000000000000000000000000000000000000000000000 PUSH2 0x599 PUSH2 0x5529 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x5D1 JUMPI DUP9 PUSH2 0x5E7 JUMP JUMPDEST PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE JUMPDEST PUSH2 0x5EF PUSH2 0x5529 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x627 JUMPI DUP9 PUSH2 0x63D JUMP JUMPDEST PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE JUMPDEST DUP9 PUSH1 0x0 DUP14 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x655 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7B79 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x6DE SWAP2 SWAP1 PUSH2 0x7A03 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x71A JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x71F JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x748 JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x741 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x77CF JUMP JUMPDEST SWAP1 POP PUSH2 0x754 JUMP JUMPDEST PUSH1 0x0 SWAP4 POP POP POP POP PUSH2 0x7A1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x75F DUP8 PUSH2 0x5541 JUMP JUMPDEST PUSH1 0xFF AND SWAP1 POP PUSH1 0x0 PUSH2 0x76F DUP10 PUSH2 0x5541 JUMP JUMPDEST PUSH1 0xFF AND SWAP1 POP PUSH8 0xDE0B6B3A7640000 DUP2 PUSH1 0xA EXP DUP4 PUSH1 0xA EXP DUP10 DUP7 MUL MUL DUP2 PUSH2 0x790 JUMPI INVALID JUMPDEST DIV DUP2 PUSH2 0x798 JUMPI INVALID JUMPDEST DIV SWAP6 POP POP POP POP POP POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH2 0x7B6 DUP5 DUP7 PUSH2 0x5554 JUMP JUMPDEST DUP3 MLOAD PUSH1 0x40 DUP1 MLOAD DUP3 DUP2 MSTORE PUSH1 0x20 DUP1 DUP5 MUL DUP3 ADD ADD SWAP1 SWAP2 MSTORE DUP2 DUP1 ISZERO PUSH2 0x7E1 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP PUSH1 0x40 MLOAD PUSH32 0xBCCC34C600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP1 SWAP3 POP ADDRESS SWAP1 PUSH4 0xBCCC34C6 SWAP1 PUSH2 0x825 SWAP1 DUP11 SWAP1 DUP11 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x7E11 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x83D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x851 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x897 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x752F JUMP JUMPDEST SWAP3 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x979 JUMPI PUSH1 0x0 ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x15E42A61 DUP7 DUP11 DUP11 DUP11 DUP8 DUP2 MLOAD DUP2 LT PUSH2 0x8D1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8F8 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7EB2 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x910 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x924 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x948 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x77CF JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x958 JUMPI POP PUSH2 0x97C SWAP2 POP POP JUMP JUMPDEST DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x965 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP PUSH1 0x1 ADD PUSH2 0x89C JUMP JUMPDEST POP POP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP3 MLOAD SWAP1 POP DUP1 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x9B7 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND PUSH2 0x9DB JUMPI POP PUSH2 0xB73 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xB70 JUMPI PUSH1 0x0 PUSH1 0x60 DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH3 0x61A80 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x6E79E133 SWAP1 POP PUSH1 0xE0 SHL DUP12 DUP12 DUP12 DUP12 DUP10 DUP2 MLOAD DUP2 LT PUSH2 0xA36 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xA51 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7AD8 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0xADA SWAP2 SWAP1 PUSH2 0x7A03 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0xB16 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xB1B JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0xB40 JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0xB3D SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x77CF JUMP JUMPDEST SWAP1 POP JUMPDEST DUP1 PUSH2 0xB4D JUMPI POP POP POP PUSH2 0xB70 JUMP JUMPDEST DUP1 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0xB5A JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x9DE JUMP JUMPDEST POP POP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 MLOAD PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xBA9 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 EQ PUSH2 0xD29 JUMPI PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH3 0x30D40 PUSH4 0x3B77EBAE PUSH1 0xE0 SHL DUP10 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0xBEA JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP10 DUP8 DUP2 MLOAD DUP2 LT PUSH2 0xBFE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP10 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xC19 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x8086 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0xCA2 SWAP2 SWAP1 PUSH2 0x7A03 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0xCDE JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xCE3 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH2 0xCF4 JUMPI PUSH1 0x0 PUSH2 0xD08 JUMP JUMPDEST DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0xD08 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x77CF JUMP JUMPDEST DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xD14 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP PUSH1 0x1 ADD PUSH2 0xBAF JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH1 0x0 EQ DUP1 PUSH2 0xD45 JUMPI POP PUSH1 0x80 DUP5 ADD MLOAD ISZERO JUMPDEST DUP1 PUSH2 0xD52 JUMPI POP PUSH1 0xA0 DUP5 ADD MLOAD ISZERO JUMPDEST ISZERO PUSH2 0xD5F JUMPI POP PUSH1 0x0 PUSH2 0x137D JUMP JUMPDEST PUSH2 0xD67 PUSH2 0x6AF4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x9D3FA4B900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND SWAP1 PUSH4 0x9D3FA4B9 SWAP1 PUSH2 0xDB9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x8073 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xDD1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xDE5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0xE09 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x771D JUMP JUMPDEST SWAP1 POP PUSH1 0x3 DUP2 MLOAD PUSH1 0x6 DUP2 GT ISZERO PUSH2 0xE1A JUMPI INVALID JUMPDEST EQ PUSH2 0xE29 JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x137D JUMP JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD DUP6 MLOAD PUSH1 0x40 MLOAD PUSH32 0x8171C40700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND SWAP3 PUSH4 0x8171C407 SWAP3 PUSH2 0xE82 SWAP3 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x7E3D JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xE9A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xEAE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0xED2 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x745E JUMP JUMPDEST PUSH2 0xEE0 JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x137D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x6070410800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND SWAP1 PUSH4 0x60704108 SWAP1 PUSH2 0xF55 SWAP1 PUSH32 0xF47261B000000000000000000000000000000000000000000000000000000000 SWAP1 PUSH1 0x4 ADD PUSH2 0x7E72 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xF6D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xF81 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0xFA5 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x6F05 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xFB7 DUP8 PUSH2 0x140 ADD MLOAD PUSH2 0x55C7 JUMP JUMPDEST SWAP1 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0xFE0 JUMPI PUSH1 0x0 SWAP4 POP POP POP POP PUSH2 0x137D JUMP JUMPDEST PUSH1 0x0 DUP1 DUP9 PUSH1 0xC0 ADD MLOAD GT PUSH2 0xFF4 JUMPI PUSH1 0x0 PUSH2 0x1002 JUMP JUMPDEST PUSH2 0x1002 DUP9 PUSH2 0x180 ADD MLOAD PUSH2 0x55C7 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1021 DUP6 PUSH1 0x40 ADD MLOAD DUP11 PUSH1 0xA0 ADD MLOAD PUSH2 0x565C SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 SWAP6 POP PUSH1 0x0 PUSH2 0x108C DUP3 DUP12 PUSH1 0xA0 ADD MLOAD DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x106E JUMPI DUP13 PUSH1 0x80 ADD MLOAD PUSH2 0x1087 JUMP JUMPDEST PUSH1 0xC0 DUP14 ADD MLOAD PUSH1 0x80 DUP15 ADD MLOAD PUSH2 0x1087 SWAP2 PUSH4 0xFFFFFFFF PUSH2 0x5685 AND JUMP JUMPDEST PUSH2 0x56A1 JUMP JUMPDEST DUP11 MLOAD PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP2 SWAP3 POP PUSH1 0x0 SWAP2 PUSH2 0x11E2 SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP9 AND SWAP2 PUSH4 0x70A08231 SWAP2 PUSH2 0x10E8 SWAP2 PUSH1 0x4 ADD PUSH2 0x7A1F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1100 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1114 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x1138 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x77CF JUMP JUMPDEST DUP13 MLOAD PUSH1 0x40 MLOAD PUSH32 0xDD62ED3E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 AND SWAP2 PUSH4 0xDD62ED3E SWAP2 PUSH2 0x118D SWAP2 SWAP1 DUP13 SWAP1 PUSH1 0x4 ADD PUSH2 0x7A40 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x11A5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x11B9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x11DD SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x77CF JUMP JUMPDEST PUSH2 0x56E1 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 LT ISZERO PUSH2 0x11FA JUMPI PUSH2 0x11F7 DUP2 DUP4 DUP6 PUSH2 0x56F7 JUMP JUMPDEST SWAP8 POP JUMPDEST DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO DUP1 ISZERO PUSH2 0x124B JUMPI POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND ISZERO ISZERO JUMPDEST ISZERO PUSH2 0x1375 JUMPI DUP11 MLOAD PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x0 SWAP2 PUSH2 0x134F SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP9 AND SWAP2 PUSH4 0x70A08231 SWAP2 PUSH2 0x12AA SWAP2 SWAP1 PUSH1 0x4 ADD PUSH2 0x7A1F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x12C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x12D6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x12FA SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x77CF JUMP JUMPDEST DUP14 MLOAD PUSH1 0x40 MLOAD PUSH32 0xDD62ED3E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 AND SWAP2 PUSH4 0xDD62ED3E SWAP2 PUSH2 0x118D SWAP2 SWAP1 DUP14 SWAP1 PUSH1 0x4 ADD PUSH2 0x7A40 JUMP JUMPDEST SWAP1 POP DUP12 PUSH1 0xC0 ADD MLOAD DUP2 LT ISZERO PUSH2 0x1373 JUMPI PUSH2 0x1370 DUP10 PUSH2 0x11DD DUP4 DUP16 PUSH1 0xC0 ADD MLOAD DUP9 PUSH2 0x56F7 JUMP JUMPDEST SWAP9 POP JUMPDEST POP JUMPDEST POP POP POP POP POP POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP3 MLOAD SWAP1 POP DUP1 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x13B6 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1533 JUMPI PUSH1 0x0 PUSH1 0x60 DUP9 PUSH1 0x0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH3 0x1E8480 DUP11 PUSH1 0x20 ADD MLOAD DUP11 DUP11 DUP11 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x13FA JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1414 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7F78 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x149D SWAP2 SWAP1 PUSH2 0x7A03 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x14D9 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x14DE JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x1503 JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x1500 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x77CF JUMP JUMPDEST SWAP1 POP JUMPDEST DUP1 PUSH2 0x1510 JUMPI POP POP POP PUSH2 0x1533 JUMP JUMPDEST DUP1 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x151D JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x13BC JUMP JUMPDEST POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1549 DUP4 DUP6 PUSH2 0x5554 JUMP JUMPDEST DUP2 MLOAD PUSH1 0x40 DUP1 MLOAD DUP3 DUP2 MSTORE PUSH1 0x20 DUP1 DUP5 MUL DUP3 ADD ADD SWAP1 SWAP2 MSTORE DUP2 DUP1 ISZERO PUSH2 0x1574 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1711 JUMPI PUSH1 0x0 PUSH1 0x60 PUSH2 0x158E PUSH2 0x572D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH3 0xF4240 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xFF1FD974 SWAP1 POP PUSH1 0xE0 SHL DUP11 DUP11 DUP11 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x15D8 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x15F2 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7B48 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x167B SWAP2 SWAP1 PUSH2 0x7A03 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x16B7 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x16BC JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x16E1 JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x16DE SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x77CF JUMP JUMPDEST SWAP1 POP JUMPDEST DUP1 PUSH2 0x16EE JUMPI POP POP POP PUSH2 0x1711 JUMP JUMPDEST DUP1 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x16FB JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x157A JUMP JUMPDEST POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x40 DUP1 MLOAD DUP3 DUP2 MSTORE PUSH1 0x20 DUP1 DUP5 MUL DUP3 ADD ADD SWAP1 SWAP2 MSTORE PUSH1 0x60 SWAP2 DUP7 SWAP2 DUP2 DUP1 ISZERO PUSH2 0x174A JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP PUSH1 0x40 MLOAD PUSH32 0x2F37B62400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP1 SWAP4 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND SWAP1 PUSH4 0x2F37B624 SWAP1 PUSH2 0x17A0 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x7A1F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x17B8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x17CC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x17F0 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x745E JUMP JUMPDEST ISZERO DUP1 PUSH2 0x189B JUMPI POP PUSH1 0x40 MLOAD PUSH32 0x2F37B62400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND SWAP1 PUSH4 0x2F37B624 SWAP1 PUSH2 0x1849 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x7A1F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1861 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1875 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x1899 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x745E JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x18A8 JUMPI POP PUSH2 0x7A1 SWAP1 POP JUMP JUMPDEST PUSH2 0x18B0 PUSH2 0x6B16 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xF8B2CB4F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND SWAP1 PUSH4 0xF8B2CB4F SWAP1 PUSH2 0x1902 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x7A1F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x191A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x192E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x1952 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x77CF JUMP JUMPDEST DUP2 MSTORE PUSH1 0x40 MLOAD PUSH32 0xF8B2CB4F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND SWAP1 PUSH4 0xF8B2CB4F SWAP1 PUSH2 0x19A6 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x7A1F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x19BE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x19D2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x19F6 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x77CF JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 MLOAD PUSH32 0x948D8CE600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND SWAP1 PUSH4 0x948D8CE6 SWAP1 PUSH2 0x1A4D SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x7A1F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1A65 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1A79 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x1A9D SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x77CF JUMP JUMPDEST PUSH1 0x40 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE MLOAD PUSH32 0x948D8CE600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND SWAP1 PUSH4 0x948D8CE6 SWAP1 PUSH2 0x1AF6 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x7A1F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1B0E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1B22 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x1B46 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x77CF JUMP JUMPDEST DUP2 PUSH1 0x60 ADD DUP2 DUP2 MSTORE POP POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xD4CADF68 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1B95 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1BA9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x1BCD SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x77CF JUMP JUMPDEST PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x1DBF JUMPI PUSH2 0x1C00 DUP3 PUSH1 0x20 ADD MLOAD PUSH1 0x3 PUSH8 0xDE0B6B3A7640000 DUP2 PUSH2 0x1BF7 JUMPI INVALID JUMPDEST DIV PUSH1 0x1 ADD PUSH2 0x5745 JUMP JUMPDEST DUP7 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1C0C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD GT ISZERO PUSH2 0x1C1F JUMPI PUSH2 0x1DBF JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP11 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH3 0x493E0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xF8D6AED4 SWAP1 POP PUSH1 0xE0 SHL DUP7 PUSH1 0x0 ADD MLOAD DUP8 PUSH1 0x40 ADD MLOAD DUP9 PUSH1 0x20 ADD MLOAD DUP10 PUSH1 0x60 ADD MLOAD DUP15 DUP11 DUP2 MLOAD DUP2 LT PUSH2 0x1C7F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP12 PUSH1 0x80 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1CA1 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x8155 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x1D2A SWAP2 SWAP1 PUSH2 0x7A03 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1D66 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1D6B JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x1D94 JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x1D8D SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x77CF JUMP JUMPDEST SWAP1 POP PUSH2 0x1D9C JUMP JUMPDEST POP POP POP PUSH2 0x1DBF JUMP JUMPDEST DUP1 DUP9 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x1DA9 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x1BD5 JUMP JUMPDEST POP POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP3 MLOAD SWAP1 POP DUP1 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1DFD JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1711 JUMPI PUSH1 0x0 PUSH1 0x60 PUSH2 0x1E17 PUSH2 0x57A2 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH3 0x493E0 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x838E6A22 SWAP1 POP PUSH1 0xE0 SHL DUP11 DUP11 DUP11 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x1E61 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1E7B SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7B48 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x1F04 SWAP2 SWAP1 PUSH2 0x7A03 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1F40 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1F45 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x1F6A JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x1F67 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x77CF JUMP JUMPDEST SWAP1 POP JUMPDEST DUP1 PUSH2 0x1F77 JUMPI POP POP POP PUSH2 0x1711 JUMP JUMPDEST DUP1 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x1F84 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x1E03 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1FA6 DUP4 DUP6 PUSH2 0x5554 JUMP JUMPDEST DUP2 MLOAD PUSH1 0x40 DUP1 MLOAD DUP3 DUP2 MSTORE PUSH1 0x20 DUP1 DUP5 MUL DUP3 ADD ADD SWAP1 SWAP2 MSTORE DUP2 DUP1 ISZERO PUSH2 0x1FD1 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 PUSH2 0x1FDE PUSH2 0x5529 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x201E JUMPI PUSH2 0x2019 DUP7 PUSH2 0x57BA JUMP JUMPDEST PUSH2 0x2021 JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x202D PUSH2 0x5529 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x206D JUMPI PUSH2 0x2068 DUP7 PUSH2 0x57BA JUMP JUMPDEST PUSH2 0x2070 JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x224F JUMPI PUSH1 0x1 PUSH2 0x2087 PUSH2 0x5529 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x211E JUMPI DUP7 MLOAD PUSH2 0x20FD SWAP1 DUP6 SWAP1 PUSH32 0x2640F62C00000000000000000000000000000000000000000000000000000000 SWAP1 DUP11 SWAP1 DUP7 SWAP1 DUP2 LT PUSH2 0x20F0 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x584C JUMP JUMPDEST DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2109 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP4 POP DUP3 DUP2 MSTORE POP POP POP PUSH2 0x223B JUMP JUMPDEST PUSH2 0x2126 PUSH2 0x5529 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x218F JUMPI DUP7 MLOAD PUSH2 0x20FD SWAP1 DUP5 SWAP1 PUSH32 0x59E9486200000000000000000000000000000000000000000000000000000000 SWAP1 DUP11 SWAP1 DUP7 SWAP1 DUP2 LT PUSH2 0x20F0 JUMPI INVALID JUMPDEST DUP7 MLOAD PUSH1 0x0 SWAP1 PUSH2 0x21C8 SWAP1 DUP6 SWAP1 PUSH32 0x59E9486200000000000000000000000000000000000000000000000000000000 SWAP1 DUP12 SWAP1 DUP8 SWAP1 DUP2 LT PUSH2 0x20F0 JUMPI INVALID JUMPDEST SWAP3 POP SWAP1 POP DUP1 ISZERO PUSH2 0x221E JUMPI PUSH2 0x21FD DUP6 PUSH32 0x2640F62C00000000000000000000000000000000000000000000000000000000 DUP4 PUSH2 0x584C JUMP JUMPDEST DUP9 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x2209 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP5 POP DUP3 DUP2 MSTORE POP POP POP PUSH2 0x2239 JUMP JUMPDEST PUSH1 0x0 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x222C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP JUMPDEST POP JUMPDEST DUP1 PUSH2 0x2246 JUMPI POP PUSH2 0x224F JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x2075 JUMP JUMPDEST POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x2266 DUP4 DUP6 PUSH2 0x5554 JUMP JUMPDEST DUP2 MLOAD PUSH1 0x40 DUP1 MLOAD DUP3 DUP2 MSTORE PUSH1 0x20 DUP1 DUP5 MUL DUP3 ADD ADD SWAP1 SWAP2 MSTORE DUP2 DUP1 ISZERO PUSH2 0x2291 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1711 JUMPI PUSH1 0x0 PUSH1 0x60 PUSH2 0x22AB PUSH2 0x572D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH3 0xF4240 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x144A2752 SWAP1 POP PUSH1 0xE0 SHL DUP10 DUP12 DUP11 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x22F5 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x230F SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7B48 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x2398 SWAP2 SWAP1 PUSH2 0x7A03 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x23D4 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x23D9 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x23FE JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x23FB SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x77CF JUMP JUMPDEST SWAP1 POP JUMPDEST DUP1 PUSH2 0x240B JUMPI POP POP POP PUSH2 0x1711 JUMP JUMPDEST DUP1 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x2418 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x2297 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH2 0x243C DUP5 DUP7 PUSH2 0x5554 JUMP JUMPDEST DUP3 MLOAD PUSH1 0x40 DUP1 MLOAD DUP3 DUP2 MSTORE PUSH1 0x20 DUP1 DUP5 MUL DUP3 ADD ADD SWAP1 SWAP2 MSTORE DUP2 DUP1 ISZERO PUSH2 0x2467 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 PUSH2 0x2474 PUSH2 0x5529 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x24AC JUMPI DUP7 PUSH2 0x24AF JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x24BB PUSH2 0x5529 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x24F3 JUMPI DUP7 PUSH2 0x24F6 JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP PUSH2 0x255C PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 DUP4 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2517 SWAP2 SWAP1 PUSH2 0x7A1F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x253C SWAP2 SWAP1 PUSH2 0x7A1F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x5995 DUP2 MSTORE POP DUP8 PUSH2 0x59DB JUMP JUMPDEST SWAP4 POP PUSH2 0x2566 PUSH2 0x5BC3 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x901754D7 DUP4 DUP4 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x25A0 SWAP3 SWAP2 SWAP1 PUSH2 0x7A40 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x25B8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x25CC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x25F0 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x6F05 JUMP JUMPDEST SWAP5 POP POP POP POP SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP3 DUP2 MSTORE PUSH1 0x20 DUP1 DUP5 MUL DUP3 ADD ADD SWAP1 SWAP2 MSTORE PUSH1 0x60 SWAP1 DUP3 DUP1 ISZERO PUSH2 0x2633 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x261E JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP1 DUP4 EQ PUSH2 0x27BF JUMPI DUP4 DUP4 DUP3 DUP2 DUP2 LT PUSH2 0x264C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL DUP3 ADD SWAP1 POP DUP1 CALLDATALOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE1 CALLDATASIZE DUP5 SWAP1 SUB ADD DUP2 SLT PUSH2 0x2686 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP2 ADD PUSH1 0x20 DUP2 ADD SWAP2 POP CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x26A5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLDATASIZE DUP2 SWAP1 SUB DUP3 SGT ISZERO PUSH2 0x26B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST ISZERO ISZERO SWAP1 POP PUSH2 0x26C2 JUMPI PUSH2 0x27B7 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 ADDRESS DUP7 DUP7 DUP6 DUP2 DUP2 LT PUSH2 0x26D3 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL DUP3 ADD SWAP1 POP DUP1 CALLDATALOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE1 CALLDATASIZE DUP5 SWAP1 SUB ADD DUP2 SLT PUSH2 0x270D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP2 ADD PUSH1 0x20 DUP2 ADD SWAP2 POP CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x272C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLDATASIZE DUP2 SWAP1 SUB DUP3 SGT ISZERO PUSH2 0x273C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x274A SWAP3 SWAP2 SWAP1 PUSH2 0x79F3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2785 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x278A JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH2 0x279C JUMPI DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST DUP1 DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x27A9 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP POP POP JUMPDEST PUSH1 0x1 ADD PUSH2 0x2639 JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x27D1 PUSH2 0x5BC3 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x901754D7 DUP7 DUP7 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x280B SWAP3 SWAP2 SWAP1 PUSH2 0x7A40 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2823 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2837 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x285B SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x6F05 JUMP JUMPDEST SWAP1 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x287E JUMPI POP PUSH2 0x137D JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND ISZERO PUSH2 0x2943 JUMPI PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH2 0x28EE SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x7A1F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2906 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x291A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x293E SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x77CF JUMP JUMPDEST PUSH2 0x295C JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND BALANCE JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x296E JUMPI POP PUSH2 0x137D SWAP1 POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 PUSH1 0x60 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND SWAP1 PUSH3 0x249F0 SWAP1 PUSH32 0x1E1401F800000000000000000000000000000000000000000000000000000000 SWAP1 PUSH2 0x29C8 SWAP1 DUP13 SWAP1 DUP13 SWAP1 DUP13 SWAP1 PUSH1 0x24 ADD PUSH2 0x7B48 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x2A51 SWAP2 SWAP1 PUSH2 0x7A03 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2A8D JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2A92 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0x224F JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x2AB1 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x77CF JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x2AC9 DUP4 DUP6 PUSH2 0x5554 JUMP JUMPDEST DUP2 MLOAD PUSH1 0x40 DUP1 MLOAD DUP3 DUP2 MSTORE PUSH1 0x20 DUP1 DUP5 MUL DUP3 ADD ADD SWAP1 SWAP2 MSTORE DUP2 DUP1 ISZERO PUSH2 0x2AF4 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 PUSH2 0x2B01 PUSH2 0x5529 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x2B41 JUMPI PUSH2 0x2B3C DUP7 PUSH2 0x57BA JUMP JUMPDEST PUSH2 0x2B44 JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2B50 PUSH2 0x5529 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x2B90 JUMPI PUSH2 0x2B8B DUP7 PUSH2 0x57BA JUMP JUMPDEST PUSH2 0x2B93 JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x224F JUMPI PUSH1 0x1 PUSH2 0x2BAA PUSH2 0x5529 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x2C34 JUMPI DUP7 MLOAD PUSH2 0x2C13 SWAP1 DUP6 SWAP1 PUSH32 0x95B68FE700000000000000000000000000000000000000000000000000000000 SWAP1 DUP11 SWAP1 DUP7 SWAP1 DUP2 LT PUSH2 0x20F0 JUMPI INVALID JUMPDEST DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2C1F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP4 POP DUP3 DUP2 MSTORE POP POP POP PUSH2 0x2D51 JUMP JUMPDEST PUSH2 0x2C3C PUSH2 0x5529 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x2CA5 JUMPI DUP7 MLOAD PUSH2 0x2C13 SWAP1 DUP5 SWAP1 PUSH32 0xCD7724C300000000000000000000000000000000000000000000000000000000 SWAP1 DUP11 SWAP1 DUP7 SWAP1 DUP2 LT PUSH2 0x20F0 JUMPI INVALID JUMPDEST DUP7 MLOAD PUSH1 0x0 SWAP1 PUSH2 0x2CDE SWAP1 DUP7 SWAP1 PUSH32 0x95B68FE700000000000000000000000000000000000000000000000000000000 SWAP1 DUP12 SWAP1 DUP8 SWAP1 DUP2 LT PUSH2 0x20F0 JUMPI INVALID JUMPDEST SWAP3 POP SWAP1 POP DUP1 ISZERO PUSH2 0x2D34 JUMPI PUSH2 0x2D13 DUP5 PUSH32 0xCD7724C300000000000000000000000000000000000000000000000000000000 DUP4 PUSH2 0x584C JUMP JUMPDEST DUP9 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x2D1F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP5 POP DUP3 DUP2 MSTORE POP POP POP PUSH2 0x2D4F JUMP JUMPDEST PUSH1 0x0 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2D42 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP JUMPDEST POP JUMPDEST DUP1 PUSH2 0x2D5C JUMPI POP PUSH2 0x224F JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x2B98 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP3 MLOAD SWAP1 POP DUP1 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2D97 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1711 JUMPI PUSH1 0x0 PUSH1 0x60 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH3 0x249F0 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xD06CA61F SWAP1 POP PUSH1 0xE0 SHL DUP9 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x2DF2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP11 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x2E0C SWAP3 SWAP2 SWAP1 PUSH2 0x80DB JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x2E95 SWAP2 SWAP1 PUSH2 0x7A03 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2ED1 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2ED6 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x2F16 JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x2EF8 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x73E6 JUMP JUMPDEST PUSH1 0x1 DUP10 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x2F07 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH2 0x2F1E JUMP JUMPDEST POP POP POP PUSH2 0x1711 JUMP JUMPDEST DUP1 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x2F2B JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x2D9D JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP3 MLOAD SWAP1 POP DUP1 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2F73 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1711 JUMPI PUSH1 0x0 PUSH1 0x60 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH3 0x249F0 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x1F00CA74 SWAP1 POP PUSH1 0xE0 SHL DUP9 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x2FCE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP11 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x2FE8 SWAP3 SWAP2 SWAP1 PUSH2 0x80DB JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x3071 SWAP2 SWAP1 PUSH2 0x7A03 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x30AD JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x30B2 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x2F16 JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x30D4 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x73E6 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x30E0 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP DUP1 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x30F7 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x2F79 JUMP JUMPDEST PUSH2 0x3115 PUSH2 0x6B45 JUMP JUMPDEST PUSH2 0x311D PUSH2 0x6B45 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 JUMPDEST DUP8 MLOAD DUP2 EQ PUSH2 0x322D JUMPI PUSH2 0x3169 PUSH1 0x20 DUP10 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x313B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD SUB DUP8 DUP11 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x3152 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x5BDB SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP11 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x3190 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x31A5 SWAP2 SWAP1 PUSH2 0x7A03 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x31E0 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x31E5 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0x3223 JUMPI PUSH1 0x0 PUSH2 0x3209 PUSH1 0x20 DUP4 MLOAD SUB DUP4 PUSH2 0x5BEB SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP5 DUP2 GT ISZERO PUSH2 0x3221 JUMPI DUP4 DUP9 MSTORE PUSH1 0x20 DUP9 ADD DUP3 SWAP1 MSTORE SWAP4 POP DUP4 JUMPDEST POP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x3122 JUMP JUMPDEST POP DUP1 PUSH2 0x3239 JUMPI POP PUSH2 0x3333 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP7 MLOAD DUP2 EQ PUSH2 0x3330 JUMPI PUSH2 0x326C PUSH1 0x20 DUP9 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x3255 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD SUB DUP4 DUP10 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x3152 JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP10 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x3293 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x32A8 SWAP2 SWAP1 PUSH2 0x7A03 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x32E3 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x32E8 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0x3326 JUMPI PUSH1 0x0 PUSH2 0x330C PUSH1 0x20 DUP4 MLOAD SUB DUP4 PUSH2 0x5BEB SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP6 DUP2 GT ISZERO PUSH2 0x3324 JUMPI DUP4 DUP8 MSTORE PUSH1 0x20 DUP8 ADD DUP3 SWAP1 MSTORE SWAP5 POP DUP5 JUMPDEST POP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x323C JUMP JUMPDEST POP POP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 DUP5 ADD MLOAD PUSH1 0x60 SWAP1 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH2 0x33D6 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH2 0x33CF SWAP1 DUP1 PUSH2 0x3388 DUP7 DUP10 PUSH1 0x80 DUP5 ADD PUSH2 0x7F96 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x33AF SWAP3 SWAP2 SWAP1 PUSH2 0x7F96 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x5BF7 DUP2 MSTORE POP DUP4 PUSH2 0x59DB JUMP JUMPDEST SWAP1 POP PUSH2 0x7A1 JUMP JUMPDEST DUP2 MLOAD PUSH1 0x40 DUP1 MLOAD DUP3 DUP2 MSTORE PUSH1 0x20 DUP1 DUP5 MUL DUP3 ADD ADD SWAP1 SWAP2 MSTORE DUP2 DUP1 ISZERO PUSH2 0x3401 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1533 JUMPI PUSH1 0x0 PUSH1 0x60 DUP9 PUSH1 0x0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH3 0x1E8480 DUP11 PUSH1 0x40 ADD MLOAD DUP11 DUP11 DUP11 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x3445 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x345F SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7F78 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x34E8 SWAP2 SWAP1 PUSH2 0x7A03 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x3524 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x3529 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x354E JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x354B SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x77CF JUMP JUMPDEST SWAP1 POP JUMPDEST DUP1 PUSH2 0x355B JUMPI POP POP POP PUSH2 0x1533 JUMP JUMPDEST DUP1 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x3568 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x3407 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x40 DUP1 MLOAD DUP3 DUP2 MSTORE PUSH1 0x20 DUP1 DUP5 MUL DUP3 ADD ADD SWAP1 SWAP2 MSTORE PUSH1 0x60 SWAP2 DUP7 SWAP2 DUP2 DUP1 ISZERO PUSH2 0x35AE JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP PUSH1 0x40 MLOAD PUSH32 0x2F37B62400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP1 SWAP4 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND SWAP1 PUSH4 0x2F37B624 SWAP1 PUSH2 0x3604 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x7A1F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x361C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3630 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x3654 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x745E JUMP JUMPDEST ISZERO DUP1 PUSH2 0x36FF JUMPI POP PUSH1 0x40 MLOAD PUSH32 0x2F37B62400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND SWAP1 PUSH4 0x2F37B624 SWAP1 PUSH2 0x36AD SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x7A1F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x36C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x36D9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x36FD SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x745E JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x370C JUMPI POP PUSH2 0x7A1 SWAP1 POP JUMP JUMPDEST PUSH2 0x3714 PUSH2 0x6B16 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xF8B2CB4F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND SWAP1 PUSH4 0xF8B2CB4F SWAP1 PUSH2 0x3766 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x7A1F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x377E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3792 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x37B6 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x77CF JUMP JUMPDEST DUP2 MSTORE PUSH1 0x40 MLOAD PUSH32 0xF8B2CB4F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND SWAP1 PUSH4 0xF8B2CB4F SWAP1 PUSH2 0x380A SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x7A1F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3822 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3836 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x385A SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x77CF JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 MLOAD PUSH32 0x948D8CE600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND SWAP1 PUSH4 0x948D8CE6 SWAP1 PUSH2 0x38B1 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x7A1F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x38C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x38DD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x3901 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x77CF JUMP JUMPDEST PUSH1 0x40 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE MLOAD PUSH32 0x948D8CE600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND SWAP1 PUSH4 0x948D8CE6 SWAP1 PUSH2 0x395A SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x7A1F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3972 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3986 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x39AA SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x77CF JUMP JUMPDEST DUP2 PUSH1 0x60 ADD DUP2 DUP2 MSTORE POP POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xD4CADF68 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x39F9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3A0D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x3A31 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x77CF JUMP JUMPDEST PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x1DBF JUMPI DUP2 MLOAD PUSH2 0x3A55 SWAP1 PUSH8 0x6F05B59D3B20000 PUSH2 0x5745 JUMP JUMPDEST DUP7 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3A61 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD GT ISZERO PUSH2 0x3A74 JUMPI PUSH2 0x1DBF JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP11 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH3 0x493E0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xBA9530A6 SWAP1 POP PUSH1 0xE0 SHL DUP7 PUSH1 0x0 ADD MLOAD DUP8 PUSH1 0x40 ADD MLOAD DUP9 PUSH1 0x20 ADD MLOAD DUP10 PUSH1 0x60 ADD MLOAD DUP15 DUP11 DUP2 MLOAD DUP2 LT PUSH2 0x3AD4 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP12 PUSH1 0x80 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x3AF6 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x8155 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x3B7F SWAP2 SWAP1 PUSH2 0x7A03 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x3BBB JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x3BC0 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x1D94 JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x3BE2 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x77CF JUMP JUMPDEST SWAP1 POP DUP1 DUP9 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x3BF1 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x3A39 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 DUP4 MLOAD SWAP1 POP DUP1 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x3C3A JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP3 POP PUSH2 0x3C48 DUP8 DUP8 DUP8 PUSH2 0x5D8E JUMP JUMPDEST SWAP2 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH2 0x3C6B JUMPI POP PUSH2 0x97C JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x979 JUMPI PUSH1 0x0 PUSH1 0x60 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH3 0x61A80 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x343FBCDD SWAP1 POP PUSH1 0xE0 SHL DUP12 DUP12 DUP12 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x3CC5 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x3CDF SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7B48 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x3D68 SWAP2 SWAP1 PUSH2 0x7A03 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x3DA4 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x3DA9 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x3DCE JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x3DCB SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x77CF JUMP JUMPDEST SWAP1 POP JUMPDEST DUP1 PUSH2 0x3DDB JUMPI POP POP POP PUSH2 0x979 JUMP JUMPDEST DUP1 DUP8 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x3DE8 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x3C6E JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x3E0D DUP7 DUP7 DUP7 PUSH2 0x5D8E JUMP JUMPDEST SWAP1 POP PUSH2 0x3E77 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 DUP7 DUP10 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x3E30 SWAP3 SWAP2 SWAP1 PUSH2 0x7A40 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP8 DUP10 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x3E57 SWAP3 SWAP2 SWAP1 PUSH2 0x7A40 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x5EEA DUP2 MSTORE POP DUP5 PUSH2 0x59DB JUMP JUMPDEST SWAP2 POP SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP3 MLOAD SWAP1 POP DUP1 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x3EB4 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x4065 JUMPI PUSH1 0x0 PUSH1 0x60 PUSH2 0x3ECE PUSH2 0x6082 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH3 0x249F0 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xD06CA61F SWAP1 POP PUSH1 0xE0 SHL DUP9 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x3F16 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP11 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x3F30 SWAP3 SWAP2 SWAP1 PUSH2 0x80DB JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x3FB9 SWAP2 SWAP1 PUSH2 0x7A03 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x3FF5 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x3FFA JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x403A JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x401C SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x73E6 JUMP JUMPDEST PUSH1 0x1 DUP10 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x402B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH2 0x4042 JUMP JUMPDEST POP POP POP PUSH2 0x4065 JUMP JUMPDEST DUP1 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x404F JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x3EBA JUMP JUMPDEST POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP3 MLOAD SWAP1 POP DUP1 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x409F JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1711 JUMPI PUSH1 0x0 PUSH1 0x60 PUSH2 0x40B9 PUSH2 0x609A JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH3 0xC3500 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x72EA9076 SWAP1 POP PUSH1 0xE0 SHL DUP11 DUP11 DUP11 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x4103 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x411D SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7B48 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x41A6 SWAP2 SWAP1 PUSH2 0x7A03 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x41E2 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x41E7 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x420E JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x4209 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x747A JUMP JUMPDEST SWAP3 POP POP POP JUMPDEST DUP1 PUSH2 0x421B JUMPI POP POP POP PUSH2 0x1711 JUMP JUMPDEST DUP1 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x4228 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x40A5 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x424A PUSH2 0x60B2 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE SWAP2 SWAP3 POP PUSH1 0x60 SWAP2 SWAP1 PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP POP SWAP1 POP DUP6 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x427E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP PUSH1 0x0 PUSH1 0x60 PUSH2 0x4296 PUSH2 0x5529 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x440A JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 SWAP3 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND SWAP2 PUSH3 0x7A120 SWAP2 PUSH32 0x81EFCBDD00000000000000000000000000000000000000000000000000000000 SWAP2 DUP11 SWAP2 PUSH1 0x1 SWAP2 DUP10 SWAP2 SWAP1 JUMPDEST POP PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x4335 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7BFB JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x43BE SWAP2 SWAP1 PUSH2 0x7A03 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x43FA JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x43FF JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH2 0x45E1 JUMP JUMPDEST PUSH2 0x4412 PUSH2 0x5529 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x44A1 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 SWAP3 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND SWAP2 PUSH3 0x7A120 SWAP2 PUSH32 0x61E597F900000000000000000000000000000000000000000000000000000000 SWAP2 DUP12 SWAP2 PUSH1 0x1 SWAP2 DUP10 SWAP2 SWAP1 PUSH2 0x4321 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 DUP2 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND SWAP2 PUSH3 0x7A120 SWAP2 PUSH32 0x5734D9A00000000000000000000000000000000000000000000000000000000 SWAP2 PUSH2 0x4510 SWAP2 DUP13 SWAP2 PUSH1 0x1 SWAP2 DUP11 SWAP2 DUP15 SWAP1 DUP5 SWAP1 DUP5 SWAP1 PUSH1 0x64 DUP6 ADD PUSH2 0x7C4B JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x4599 SWAP2 SWAP1 PUSH2 0x7A03 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x45D5 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x45DA JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP JUMPDEST DUP2 ISZERO PUSH2 0x224F JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x2AB1 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x752F JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 PUSH2 0x460A DUP6 DUP8 PUSH2 0x5554 JUMP JUMPDEST DUP4 MLOAD PUSH1 0x40 DUP1 MLOAD DUP3 DUP2 MSTORE PUSH1 0x20 DUP1 DUP5 MUL DUP3 ADD ADD SWAP1 SWAP2 MSTORE DUP2 DUP1 ISZERO PUSH2 0x4635 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH2 0x4640 PUSH2 0x60CA JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x1273B0C6 DUP9 DUP9 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x467A SWAP3 SWAP2 SWAP1 PUSH2 0x7A40 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4692 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x46A6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x46CA SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x6F05 JUMP JUMPDEST SWAP3 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND ISZERO PUSH2 0x46F5 JUMPI POP PUSH1 0x1 SWAP4 POP DUP7 PUSH2 0x47B3 JUMP JUMPDEST PUSH2 0x46FD PUSH2 0x60CA JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x1273B0C6 DUP9 DUP11 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4737 SWAP3 SWAP2 SWAP1 PUSH2 0x7A40 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x474F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4763 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x4787 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x6F05 JUMP JUMPDEST SWAP4 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH2 0x47AC JUMPI POP PUSH2 0x3333 SWAP1 POP JUMP JUMPDEST POP PUSH1 0x0 SWAP4 POP DUP6 JUMPDEST DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xDD58B41C PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x47F9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x480D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x4831 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x745E JUMP JUMPDEST PUSH2 0x483D JUMPI POP PUSH2 0x3333 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x48DC JUMPI PUSH1 0x0 PUSH2 0x48AE DUP11 DUP8 DUP6 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x4862 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7A67 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP11 DUP9 DUP7 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x4886 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7A67 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP11 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x48A1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x60E2 JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x48BB JUMPI POP PUSH2 0x48DC JUMP JUMPDEST DUP1 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x48C8 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP PUSH1 0x1 ADD PUSH2 0x4840 JUMP JUMPDEST POP POP POP SWAP4 POP SWAP4 POP SWAP4 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x7A1 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 DUP6 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x4909 SWAP2 SWAP1 PUSH2 0x7A1F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x492E SWAP2 SWAP1 PUSH2 0x7A1F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x63C0 DUP2 MSTORE POP DUP4 PUSH2 0x59DB JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH2 0x495C DUP5 DUP7 PUSH2 0x5554 JUMP JUMPDEST DUP3 MLOAD PUSH1 0x40 DUP1 MLOAD DUP3 DUP2 MSTORE PUSH1 0x20 DUP1 DUP5 MUL DUP3 ADD ADD SWAP1 SWAP2 MSTORE DUP2 DUP1 ISZERO PUSH2 0x4987 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 PUSH2 0x4994 PUSH2 0x5529 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x49CC JUMPI DUP7 PUSH2 0x49CF JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x49DB PUSH2 0x5529 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x4A13 JUMPI DUP7 PUSH2 0x4A16 JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x4A71 JUMPI PUSH1 0x0 PUSH2 0x4A43 DUP5 DUP5 DUP11 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x4A36 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x27C6 JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x4A50 JUMPI POP PUSH2 0x4A71 JUMP JUMPDEST DUP1 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x4A5D JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP PUSH1 0x1 ADD PUSH2 0x4A1B JUMP JUMPDEST POP PUSH2 0x2566 PUSH2 0x5BC3 JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH2 0x4A87 DUP5 DUP7 PUSH2 0x5554 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xBCCC34C600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS SWAP1 PUSH4 0xBCCC34C6 SWAP1 PUSH2 0x4AC7 SWAP1 DUP10 SWAP1 DUP10 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x7E11 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4ADF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4AF3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x4B39 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x752F JUMP JUMPDEST SWAP2 POP PUSH2 0x4BA3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 DUP7 DUP6 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x4B5C SWAP3 SWAP2 SWAP1 PUSH2 0x7BCC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP8 DUP6 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x4B83 SWAP3 SWAP2 SWAP1 PUSH2 0x7BCC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x6549 DUP2 MSTORE POP DUP5 PUSH2 0x59DB JUMP JUMPDEST SWAP1 POP SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 PUSH2 0x4BBD DUP6 DUP8 PUSH2 0x5554 JUMP JUMPDEST DUP4 MLOAD PUSH1 0x40 DUP1 MLOAD DUP3 DUP2 MSTORE PUSH1 0x20 DUP1 DUP5 MUL DUP3 ADD ADD SWAP1 SWAP2 MSTORE DUP2 DUP1 ISZERO PUSH2 0x4BE8 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH2 0x4BF3 PUSH2 0x60CA JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x1273B0C6 DUP9 DUP9 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4C2D SWAP3 SWAP2 SWAP1 PUSH2 0x7A40 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4C45 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4C59 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x4C7D SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x6F05 JUMP JUMPDEST SWAP3 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND ISZERO PUSH2 0x4CA8 JUMPI POP PUSH1 0x1 SWAP4 POP DUP7 PUSH2 0x4D66 JUMP JUMPDEST PUSH2 0x4CB0 PUSH2 0x60CA JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x1273B0C6 DUP9 DUP11 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4CEA SWAP3 SWAP2 SWAP1 PUSH2 0x7A40 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4D02 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4D16 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x4D3A SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x6F05 JUMP JUMPDEST SWAP4 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH2 0x4D5F JUMPI POP PUSH2 0x3333 SWAP1 POP JUMP JUMPDEST POP PUSH1 0x0 SWAP4 POP DUP6 JUMPDEST DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xDD58B41C PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4DAC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4DC0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x4DE4 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x745E JUMP JUMPDEST PUSH2 0x4DF0 JUMPI POP PUSH2 0x3333 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH2 0x4E58 SWAP1 DUP1 PUSH2 0x4E0F DUP11 DUP9 DUP7 PUSH1 0x80 DUP6 ADD PUSH2 0x7A67 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP11 DUP8 DUP6 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x4E38 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7A67 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x60E2 DUP2 MSTORE POP DUP8 PUSH2 0x59DB JUMP JUMPDEST SWAP3 POP POP POP SWAP4 POP SWAP4 POP SWAP4 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP3 MLOAD SWAP1 POP DUP1 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x4E97 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1711 JUMPI PUSH1 0x0 PUSH1 0x60 PUSH2 0x4EB1 PUSH2 0x57A2 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH3 0x493E0 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x525D0DA7 SWAP1 POP PUSH1 0xE0 SHL DUP11 DUP11 DUP11 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x4EFB JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x4F15 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7B48 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x4F9E SWAP2 SWAP1 PUSH2 0x7A03 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x4FDA JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x4FDF JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x5004 JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x5001 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x77CF JUMP JUMPDEST SWAP1 POP JUMPDEST DUP1 PUSH2 0x5011 JUMPI POP POP POP PUSH2 0x1711 JUMP JUMPDEST DUP1 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x501E JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x4E9D JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP3 MLOAD SWAP1 POP DUP1 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x5066 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x4065 JUMPI PUSH1 0x0 PUSH1 0x60 PUSH2 0x5080 PUSH2 0x6082 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH3 0x249F0 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x1F00CA74 SWAP1 POP PUSH1 0xE0 SHL DUP9 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x50C8 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP11 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x50E2 SWAP3 SWAP2 SWAP1 PUSH2 0x80DB JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x516B SWAP2 SWAP1 PUSH2 0x7A03 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x51A7 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x51AC JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x403A JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x51CE SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x73E6 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x51DA JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP DUP1 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x51F1 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x506C JUMP JUMPDEST PUSH1 0x60 PUSH2 0x5214 DUP5 DUP5 DUP5 PUSH2 0xB7C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0xD29 JUMPI DUP2 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x522E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ PUSH2 0x52A2 JUMPI PUSH2 0x5289 DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x524C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x5260 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0xA0 ADD MLOAD DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x5278 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x80 ADD MLOAD PUSH2 0x56F7 JUMP JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x5295 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP JUMPDEST PUSH1 0x1 ADD PUSH2 0x5219 JUMP JUMPDEST PUSH2 0x52B2 PUSH2 0x6B45 JUMP JUMPDEST PUSH2 0x52BA PUSH2 0x6B45 JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 PUSH1 0x0 JUMPDEST DUP7 MLOAD DUP2 EQ PUSH2 0x53DF JUMPI PUSH2 0x530F PUSH1 0x20 DUP9 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x52F8 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD SUB DUP8 DUP10 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x3152 JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP10 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x5336 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x534B SWAP2 SWAP1 PUSH2 0x7A03 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x5386 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x538B JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0x53D5 JUMPI PUSH1 0x0 PUSH2 0x53AF PUSH1 0x20 DUP4 MLOAD SUB DUP4 PUSH2 0x5BEB SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 GT DUP1 ISZERO PUSH2 0x53C0 JUMPI POP DUP5 DUP2 LT JUMPDEST ISZERO PUSH2 0x53D3 JUMPI DUP4 DUP8 MSTORE PUSH1 0x20 DUP8 ADD DUP3 SWAP1 MSTORE SWAP4 POP DUP4 JUMPDEST POP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x52DF JUMP JUMPDEST POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 EQ ISZERO PUSH2 0x540E JUMPI POP PUSH2 0x3333 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP8 MLOAD DUP2 EQ PUSH2 0x3330 JUMPI PUSH2 0x5441 PUSH1 0x20 DUP10 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x542A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD SUB DUP4 DUP11 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x3152 JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP11 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x5468 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x547D SWAP2 SWAP1 PUSH2 0x7A03 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x54B8 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x54BD JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0x5507 JUMPI PUSH1 0x0 PUSH2 0x54E1 PUSH1 0x20 DUP4 MLOAD SUB DUP4 PUSH2 0x5BEB SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 GT DUP1 ISZERO PUSH2 0x54F2 JUMPI POP DUP6 DUP2 LT JUMPDEST ISZERO PUSH2 0x5505 JUMPI DUP4 DUP9 MSTORE PUSH1 0x20 DUP9 ADD DUP3 SWAP1 MSTORE SWAP5 POP DUP5 JUMPDEST POP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x5411 JUMP JUMPDEST PUSH20 0x9AAB3F75489902F3A48495025729A0AF77D4B11E SWAP1 JUMP JUMPDEST PUSH20 0xC02AAA39B223FE8D0A0E5C4F27EAD9083C756CC2 SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x554C DUP3 PUSH2 0x669A JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x55C3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x55BA SWAP1 PUSH2 0x7FAE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x55DB JUMPI POP PUSH1 0x0 PUSH2 0x554F JUMP JUMPDEST DUP2 MLOAD PUSH1 0x24 EQ ISZERO DUP1 PUSH2 0x563E JUMPI POP PUSH32 0xF47261B000000000000000000000000000000000000000000000000000000000 PUSH2 0x5619 DUP4 PUSH1 0x0 PUSH4 0xFFFFFFFF PUSH2 0x676B AND JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x564B JUMPI POP PUSH1 0x0 PUSH2 0x554F JUMP JUMPDEST PUSH2 0x554C DUP3 PUSH1 0x10 PUSH4 0xFFFFFFFF PUSH2 0x67B7 AND JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x567A JUMPI PUSH2 0x567A PUSH2 0x5675 PUSH1 0x2 DUP6 DUP6 PUSH2 0x67F7 JUMP JUMPDEST PUSH2 0x689C JUMP JUMPDEST POP DUP1 DUP3 SUB JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x137D JUMPI PUSH2 0x137D PUSH2 0x5675 PUSH1 0x0 DUP7 DUP7 PUSH2 0x67F7 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x56AE DUP5 DUP5 DUP5 PUSH2 0x68A4 JUMP JUMPDEST ISZERO PUSH2 0x56C1 JUMPI PUSH2 0x56C1 PUSH2 0x5675 DUP6 DUP6 DUP6 PUSH2 0x690A JUMP JUMPDEST PUSH2 0x7A1 DUP4 PUSH2 0x56D5 DUP7 DUP6 PUSH4 0xFFFFFFFF PUSH2 0x6929 AND JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x695A AND JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0x56F0 JUMPI DUP2 PUSH2 0x137D JUMP JUMPDEST POP SWAP1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7A1 DUP4 PUSH2 0x56D5 PUSH2 0x5711 DUP3 PUSH1 0x1 PUSH4 0xFFFFFFFF PUSH2 0x565C AND JUMP JUMPDEST PUSH2 0x5721 DUP9 DUP8 PUSH4 0xFFFFFFFF PUSH2 0x6929 AND JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x5685 AND JUMP JUMPDEST PUSH20 0x794E6E91555438AFC3CCF1C5076A74F42133D08D SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MUL DUP4 ISZERO DUP1 ISZERO SWAP1 PUSH2 0x5762 JUMPI POP DUP3 DUP5 DUP3 DUP2 PUSH2 0x575E JUMPI INVALID JUMPDEST DIV EQ ISZERO JUMPDEST ISZERO PUSH2 0x5771 JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x567F JUMP JUMPDEST PUSH8 0x6F05B59D3B20000 DUP2 ADD DUP2 DUP2 LT ISZERO PUSH2 0x578F JUMPI PUSH1 0x0 SWAP3 POP POP POP PUSH2 0x567F JUMP JUMPDEST PUSH8 0xDE0B6B3A7640000 SWAP1 DIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH20 0x2E703D658F8DD21709A7B458967AB4081F8D3D05 SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x57C4 PUSH2 0x6984 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x6F2BF62 DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x57FC SWAP2 SWAP1 PUSH2 0x7A1F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5814 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5828 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x554C SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x6F05 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH2 0x586F JUMPI PUSH2 0x598D JUMP JUMPDEST PUSH1 0x60 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH3 0x249F0 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x589E SWAP2 SWAP1 PUSH2 0x80D2 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x5927 SWAP2 SWAP1 PUSH2 0x7A03 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x5963 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x5968 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP DUP2 ISZERO PUSH2 0x598B JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x5988 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x77CF JUMP JUMPDEST SWAP3 POP JUMPDEST POP JUMPDEST SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x59AC SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x6F05 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP5 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x59C4 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x6F05 JUMP JUMPDEST SWAP1 POP PUSH2 0x59D1 DUP3 DUP3 DUP7 PUSH2 0x27C6 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x5A08 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP2 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x5A1A JUMPI PUSH2 0x567F JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5A4B DUP5 PUSH1 0x0 ADD MLOAD DUP6 PUSH1 0x20 ADD MLOAD DUP6 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x5A36 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 PUSH1 0x40 ADD MLOAD PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x5A58 JUMPI POP PUSH2 0x567F JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5A75 DUP6 PUSH1 0x20 ADD MLOAD DUP7 PUSH1 0x0 ADD MLOAD DUP5 DUP9 PUSH1 0x40 ADD MLOAD PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x5A84 JUMPI POP PUSH2 0x567F SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x5BBA JUMPI PUSH1 0x0 JUMPDEST PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x5B7C JUMPI PUSH2 0x5ABA DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x5AAB JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 DUP7 PUSH2 0x699C JUMP JUMPDEST SWAP4 POP DUP4 PUSH2 0x5AC6 JUMPI PUSH2 0x5B7C JUMP JUMPDEST PUSH2 0x5AD5 PUSH2 0x2715 PUSH2 0x2710 DUP7 PUSH2 0x699C JUMP JUMPDEST SWAP4 POP DUP4 PUSH2 0x5AE1 JUMPI PUSH2 0x5B7C JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5AFE DUP9 PUSH1 0x20 ADD MLOAD DUP10 PUSH1 0x0 ADD MLOAD DUP8 DUP12 PUSH1 0x40 ADD MLOAD PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x5B0B JUMPI POP PUSH2 0x5B7C JUMP JUMPDEST DUP1 SWAP4 POP DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x5B1A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 LT PUSH2 0x5B73 JUMPI PUSH1 0x0 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x5B36 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x2710 DUP10 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x5B4D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 SUB MUL DUP2 PUSH2 0x5B5F JUMPI INVALID JUMPDEST DIV SWAP1 POP PUSH1 0x5 DUP2 GT PUSH2 0x5B71 JUMPI POP POP PUSH2 0x5B7C JUMP JUMPDEST POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x5A93 JUMP JUMPDEST POP PUSH2 0x5B9B DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x5B8C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP4 DUP6 PUSH2 0x699C JUMP JUMPDEST DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x5BA7 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x5A87 JUMP JUMPDEST POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH20 0x71CD6666064C3A1354A3B4DCA5FA1E2D3EE7D303 SWAP1 JUMP JUMPDEST PUSH2 0x5BE6 DUP4 DUP4 DUP4 PUSH2 0x69F4 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x137D DUP4 DUP4 PUSH2 0x6A1B JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x5C02 PUSH2 0x6B5F JUMP JUMPDEST DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x5C16 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x75E6 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x5C30 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x75CA JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH32 0x40BC03AE00000000000000000000000000000000000000000000000000000000 DUP6 DUP8 DUP7 PUSH2 0x5C64 DUP13 PUSH2 0x6A45 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x5C77 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x800B JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x5D00 SWAP2 SWAP1 PUSH2 0x7A03 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x5D3B JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x5D40 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH2 0x5D58 JUMPI PUSH1 0x0 SWAP6 POP POP POP POP POP POP PUSH2 0x137D JUMP JUMPDEST DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x5D6C SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x73E6 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x5D78 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP6 POP POP POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH2 0x5DB3 JUMPI POP PUSH1 0x0 PUSH2 0x137D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x60 SWAP1 PUSH32 0x153F599700000000000000000000000000000000000000000000000000000000 SWAP1 PUSH2 0x5DEB SWAP1 DUP7 SWAP1 DUP7 SWAP1 PUSH1 0x24 ADD PUSH2 0x7A40 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP SWAP1 POP PUSH1 0x0 PUSH1 0x60 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x40 MLOAD PUSH2 0x5E73 SWAP2 SWAP1 PUSH2 0x7A03 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x5EAE JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x5EB3 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x5EC6 JUMPI POP DUP1 MLOAD PUSH1 0x20 EQ JUMPDEST ISZERO PUSH2 0x5EE0 JUMPI PUSH2 0x5ED6 DUP2 PUSH1 0xC PUSH2 0x67B7 JUMP JUMPDEST SWAP4 POP POP POP POP PUSH2 0x137D JUMP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x5F03 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x6F21 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x5F1D SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x6F05 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH32 0x9F76AD3500000000000000000000000000000000000000000000000000000000 DUP6 DUP8 DUP7 PUSH2 0x5F51 DUP13 PUSH2 0x6A45 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x5F64 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7A97 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x5FED SWAP2 SWAP1 PUSH2 0x7A03 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x6028 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x602D JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH2 0x6045 JUMPI PUSH1 0x0 SWAP6 POP POP POP POP POP POP PUSH2 0x137D JUMP JUMPDEST PUSH1 0x60 DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x605B SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x7419 JUMP JUMPDEST POP SWAP1 POP DUP1 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x606B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP7 POP POP POP POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH20 0xF164FC0EC4E93095B804A4795BBE1E041497B92A SWAP1 JUMP JUMPDEST PUSH20 0xE2F2A5C287993345A840DB3B0845FBC70F5935A5 SWAP1 JUMP JUMPDEST PUSH20 0xA1C0FA73C39CFBCC11EC9EB1AFC665ABA9996E2C SWAP1 JUMP JUMPDEST PUSH20 0x3A97247DF274A17C59A3BD12735EA3FCDFB49950 SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP7 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x60FC SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x6F5A JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP PUSH1 0x0 PUSH1 0x60 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x625F JUMPI PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND SWAP1 PUSH3 0x493E0 SWAP1 PUSH32 0xA2801E1600000000000000000000000000000000000000000000000000000000 SWAP1 PUSH2 0x618A SWAP1 DUP12 SWAP1 PUSH1 0x24 ADD PUSH2 0x80D2 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x6213 SWAP2 SWAP1 PUSH2 0x7A03 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x624F JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x6254 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH2 0x638C JUMP JUMPDEST PUSH2 0x6267 PUSH2 0x6A86 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND SWAP1 PUSH3 0x493E0 SWAP1 PUSH32 0xCA19EBD900000000000000000000000000000000000000000000000000000000 SWAP1 PUSH2 0x62BB SWAP1 DUP9 SWAP1 DUP13 SWAP1 PUSH1 0x24 ADD PUSH2 0x7CEB JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x6344 SWAP2 SWAP1 PUSH2 0x7A03 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x6380 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x6385 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP JUMPDEST DUP2 PUSH2 0x639F JUMPI PUSH1 0x0 SWAP6 POP POP POP POP POP POP PUSH2 0x137D JUMP JUMPDEST DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x63B3 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x77CF JUMP JUMPDEST SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x63D7 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x6F05 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP5 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x63EF SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x6F05 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH32 0xBC61A69500000000000000000000000000000000000000000000000000000000 DUP6 DUP6 PUSH2 0x6422 DUP11 PUSH2 0x6A45 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x6434 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7B0F JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x64BD SWAP2 SWAP1 PUSH2 0x7A03 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x64F8 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x64FD JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH2 0x6514 JUMPI PUSH1 0x0 SWAP5 POP POP POP POP POP PUSH2 0x137D JUMP JUMPDEST DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x6528 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x73E6 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x6534 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP5 POP POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 DUP5 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x6562 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x6FA6 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP7 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x657C SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x6FA6 JUMP JUMPDEST POP SWAP1 POP PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x15E42A61 PUSH1 0xE0 SHL DUP6 DUP6 DUP9 DUP12 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x65B9 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7EB2 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x6642 SWAP2 SWAP1 PUSH2 0x7A03 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x667D JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x6682 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH2 0x639F JUMPI PUSH1 0x0 SWAP6 POP POP POP POP POP POP PUSH2 0x137D JUMP JUMPDEST PUSH1 0x0 PUSH1 0x12 SWAP1 POP PUSH1 0x0 PUSH1 0x60 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x4 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x313CE56700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x40 MLOAD PUSH2 0x66FE SWAP2 SWAP1 PUSH2 0x7A03 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x6739 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x673E JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x6751 JUMPI POP DUP1 MLOAD PUSH1 0x20 EQ JUMPDEST ISZERO PUSH2 0x6764 JUMPI PUSH2 0x6761 DUP2 PUSH1 0x0 PUSH2 0x5BEB JUMP JUMPDEST SWAP3 POP JUMPDEST POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x4 ADD DUP4 MLOAD LT ISZERO PUSH2 0x678C JUMPI PUSH2 0x678C PUSH2 0x5675 PUSH1 0x3 DUP6 MLOAD DUP6 PUSH1 0x4 ADD PUSH2 0x6A9E JUMP JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x14 ADD DUP4 MLOAD LT ISZERO PUSH2 0x67D8 JUMPI PUSH2 0x67D8 PUSH2 0x5675 PUSH1 0x4 DUP6 MLOAD DUP6 PUSH1 0x14 ADD PUSH2 0x6A9E JUMP JUMPDEST POP ADD PUSH1 0x14 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH4 0xE946C1BB PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x6816 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7F49 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x68B6 JUMPI PUSH2 0x68B6 PUSH2 0x5675 PUSH2 0x6ABD JUMP JUMPDEST DUP2 ISZERO DUP1 PUSH2 0x68C1 JUMPI POP DUP4 ISZERO JUMPDEST ISZERO PUSH2 0x68CE JUMPI POP PUSH1 0x0 PUSH2 0x137D JUMP JUMPDEST PUSH1 0x0 DUP4 DUP1 PUSH2 0x68D8 JUMPI INVALID JUMPDEST DUP6 DUP5 MULMOD SWAP1 POP PUSH2 0x68ED DUP6 DUP5 PUSH4 0xFFFFFFFF PUSH2 0x6929 AND JUMP JUMPDEST PUSH2 0x68FF DUP3 PUSH2 0x3E8 PUSH4 0xFFFFFFFF PUSH2 0x6929 AND JUMP JUMPDEST LT ISZERO SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH4 0x339F3DE2 PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x6816 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x813F JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x6938 JUMPI POP PUSH1 0x0 PUSH2 0x567F JUMP JUMPDEST DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 PUSH2 0x6945 JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x137D JUMPI PUSH2 0x137D PUSH2 0x5675 PUSH1 0x1 DUP7 DUP7 PUSH2 0x67F7 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x6970 JUMPI PUSH2 0x6970 PUSH2 0x5675 PUSH1 0x3 DUP6 DUP6 PUSH2 0x67F7 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP2 PUSH2 0x697B JUMPI INVALID JUMPDEST DIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH20 0xC0A47DFE034B400B47BDAD5FECDA2621DE6C4D95 SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP4 ISZERO DUP1 PUSH2 0x69A9 JUMPI POP DUP2 ISZERO JUMPDEST DUP1 PUSH2 0x69B2 JUMPI POP DUP3 ISZERO JUMPDEST ISZERO PUSH2 0x69BF JUMPI POP PUSH1 0x0 PUSH2 0x137D JUMP JUMPDEST DUP4 DUP3 MUL DUP3 DUP6 DUP3 DUP2 PUSH2 0x69CC JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x69DC JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x137D JUMP JUMPDEST DUP4 PUSH1 0x1 DUP6 SUB DUP3 ADD DUP2 PUSH2 0x69EA JUMPI INVALID JUMPDEST DIV SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO PUSH2 0x6A13 JUMPI PUSH2 0x6A13 PUSH2 0x5675 PUSH1 0x5 DUP6 MLOAD DUP6 PUSH1 0x20 ADD PUSH2 0x6A9E JUMP JUMPDEST SWAP2 ADD PUSH1 0x20 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO PUSH2 0x6A3C JUMPI PUSH2 0x6A3C PUSH2 0x5675 PUSH1 0x5 DUP6 MLOAD DUP6 PUSH1 0x20 ADD PUSH2 0x6A9E JUMP JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP2 PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP POP SWAP1 POP DUP2 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x6A75 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH20 0x533DA777AEDCE766CEAE696BF90F8541A4BA80EB SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH4 0x28006595 PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x6816 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7F6A JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x4 DUP2 MSTORE PUSH32 0xA791837C00000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD SWAP1 SWAP2 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x567F DUP2 PUSH2 0x8243 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x6B9A JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x6BAD PUSH2 0x6BA8 DUP3 PUSH2 0x81A4 JUMP JUMPDEST PUSH2 0x817D JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x6BCE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x6BF6 JUMPI DUP2 CALLDATALOAD PUSH2 0x6BE4 DUP2 PUSH2 0x8243 JUMP JUMPDEST DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x6BD1 JUMP JUMPDEST POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x6C11 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x6C1F PUSH2 0x6BA8 DUP3 PUSH2 0x81A4 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 ADD PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x6C5C JUMPI PUSH2 0x6C47 DUP8 PUSH1 0x20 DUP5 CALLDATALOAD DUP10 ADD ADD PUSH2 0x6D22 JUMP JUMPDEST DUP4 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x6C2F JUMP JUMPDEST POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x6C76 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x6C84 PUSH2 0x6BA8 DUP3 PUSH2 0x81A4 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x6CA5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x6BF6 JUMPI DUP2 MLOAD DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x6CA8 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x6CD4 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x6CE2 PUSH2 0x6BA8 DUP3 PUSH2 0x81A4 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x6D03 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x6BF6 JUMPI DUP2 CALLDATALOAD DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x6D06 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x6D32 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x6D40 PUSH2 0x6BA8 DUP3 PUSH2 0x81C4 JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x6D57 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP5 ADD CALLDATACOPY PUSH1 0x0 SWAP1 DUP3 ADD PUSH1 0x20 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x6D80 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x6D8E PUSH2 0x6BA8 DUP3 PUSH2 0x81C4 JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x6DA5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x27BF DUP2 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x8206 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C0 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x6DC9 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x6DD2 DUP2 PUSH2 0x817D JUMP JUMPDEST SWAP2 POP POP PUSH2 0x6DDF DUP4 DUP4 PUSH2 0x6B7F JUMP JUMPDEST DUP2 MSTORE PUSH2 0x6DEE DUP4 PUSH1 0x20 DUP5 ADD PUSH2 0x6B7F JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x6E00 DUP4 PUSH1 0x40 DUP5 ADD PUSH2 0x6B7F JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x6E12 DUP4 PUSH1 0x60 DUP5 ADD PUSH2 0x6B7F JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP3 ADD CALLDATALOAD PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 DUP3 ADD CALLDATALOAD PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 DUP3 ADD CALLDATALOAD PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0xE0 DUP3 ADD CALLDATALOAD PUSH1 0xE0 DUP3 ADD MSTORE PUSH2 0x100 DUP1 DUP4 ADD CALLDATALOAD DUP2 DUP4 ADD MSTORE POP PUSH2 0x120 DUP1 DUP4 ADD CALLDATALOAD DUP2 DUP4 ADD MSTORE POP PUSH2 0x140 DUP1 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x6E74 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x6E80 DUP7 DUP4 DUP8 ADD PUSH2 0x6D22 JUMP JUMPDEST DUP4 DUP6 ADD MSTORE PUSH2 0x160 SWAP3 POP DUP3 DUP6 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x6E9C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x6EA8 DUP7 DUP4 DUP8 ADD PUSH2 0x6D22 JUMP JUMPDEST DUP4 DUP6 ADD MSTORE PUSH2 0x180 SWAP3 POP DUP3 DUP6 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x6EC4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x6ED0 DUP7 DUP4 DUP8 ADD PUSH2 0x6D22 JUMP JUMPDEST DUP4 DUP6 ADD MSTORE PUSH2 0x1A0 SWAP3 POP DUP3 DUP6 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x6EEC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x6EF9 DUP6 DUP3 DUP7 ADD PUSH2 0x6D22 JUMP JUMPDEST DUP3 DUP5 ADD MSTORE POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x6F16 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x137D DUP2 PUSH2 0x8243 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x6F33 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP3 MLOAD PUSH2 0x6F3E DUP2 PUSH2 0x8243 JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 SWAP3 POP PUSH2 0x6F4F DUP2 PUSH2 0x8243 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x6F6E JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 MLOAD PUSH2 0x6F79 DUP2 PUSH2 0x8243 JUMP JUMPDEST PUSH1 0x20 DUP6 ADD MLOAD SWAP1 SWAP4 POP PUSH2 0x6F8A DUP2 PUSH2 0x8243 JUMP JUMPDEST PUSH1 0x40 DUP6 ADD MLOAD SWAP1 SWAP3 POP PUSH2 0x6F9B DUP2 PUSH2 0x8243 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x6FB8 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH2 0x6FC3 DUP2 PUSH2 0x8243 JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 SWAP3 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x6FDF JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x6FEB DUP6 DUP3 DUP7 ADD PUSH2 0x6D70 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x700C JUMPI DUP3 DUP4 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x7017 DUP2 PUSH2 0x8243 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x7027 DUP2 PUSH2 0x8243 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH2 0x7037 DUP2 PUSH2 0x8243 JUMP JUMPDEST SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH2 0x7047 DUP2 PUSH2 0x8243 JUMP JUMPDEST SWAP2 POP PUSH1 0x80 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x7062 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x706E DUP9 DUP3 DUP10 ADD PUSH2 0x6CC4 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x7090 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x709B DUP2 PUSH2 0x8243 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x70AB DUP2 PUSH2 0x8243 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x70BB DUP2 PUSH2 0x8243 JUMP JUMPDEST SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x70D6 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x70E2 DUP8 DUP3 DUP9 ADD PUSH2 0x6CC4 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x7102 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x710D DUP2 PUSH2 0x8243 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x711D DUP2 PUSH2 0x8243 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x7138 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x7144 DUP7 DUP3 DUP8 ADD PUSH2 0x6CC4 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x7162 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x716D DUP2 PUSH2 0x8243 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x717D DUP2 PUSH2 0x8243 JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x71A2 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x71AD DUP2 PUSH2 0x8243 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x71C9 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x71D5 DUP8 DUP4 DUP9 ADD PUSH2 0x6B8A JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x71EA JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x7144 DUP7 DUP3 DUP8 ADD PUSH2 0x6CC4 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x7209 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x7220 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x722C DUP7 DUP4 DUP8 ADD PUSH2 0x6B8A JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x7241 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x6FEB DUP6 DUP3 DUP7 ADD PUSH2 0x6CC4 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x7260 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x7277 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP6 ADD DUP7 PUSH1 0x1F DUP3 ADD SLT PUSH2 0x7288 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP3 POP DUP2 DUP4 GT ISZERO PUSH2 0x7298 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP7 PUSH1 0x20 DUP1 DUP6 MUL DUP4 ADD ADD GT ISZERO PUSH2 0x72AB JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH1 0x20 ADD SWAP7 SWAP2 SWAP6 POP SWAP1 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x72CE JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x72E5 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x72F1 DUP8 DUP4 DUP9 ADD PUSH2 0x6C01 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x7306 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x7313 DUP7 DUP3 DUP8 ADD PUSH2 0x6C01 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x7338 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x734F JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 DUP7 ADD DUP8 PUSH1 0x1F DUP3 ADD SLT PUSH2 0x7360 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP3 POP PUSH2 0x7370 PUSH2 0x6BA8 DUP5 PUSH2 0x81A4 JUMP JUMPDEST DUP4 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD SWAP2 SWAP1 DUP4 DUP2 ADD DUP8 JUMPDEST DUP8 DUP2 LT ISZERO PUSH2 0x73A8 JUMPI PUSH2 0x7396 DUP14 DUP5 DUP5 CALLDATALOAD DUP10 ADD ADD PUSH2 0x6DB6 JUMP JUMPDEST DUP6 MSTORE SWAP4 DUP3 ADD SWAP4 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x737F JUMP JUMPDEST POP SWAP2 SWAP9 POP DUP10 ADD CALLDATALOAD SWAP5 POP POP POP POP DUP1 DUP3 GT ISZERO PUSH2 0x73C0 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x73CD DUP7 DUP3 DUP8 ADD PUSH2 0x6C01 JUMP JUMPDEST SWAP3 POP POP PUSH2 0x73DD DUP6 PUSH1 0x40 DUP7 ADD PUSH2 0x6B7F JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x73F7 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x740D JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x7A1 DUP5 DUP3 DUP6 ADD PUSH2 0x6C66 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x742B JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x7441 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x744D DUP6 DUP3 DUP7 ADD PUSH2 0x6C66 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD MLOAD PUSH2 0x6F4F DUP2 PUSH2 0x8243 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x746F JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x137D DUP2 PUSH2 0x8265 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x748E JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 MLOAD PUSH2 0x7499 DUP2 PUSH2 0x8265 JUMP JUMPDEST PUSH1 0x20 DUP6 ADD MLOAD SWAP1 SWAP4 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x74B5 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x74C1 DUP7 DUP3 DUP8 ADD PUSH2 0x6D70 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 DUP5 ADD MLOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x74E6 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x74F8 DUP2 PUSH2 0x8243 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH2 0x6F9B DUP2 PUSH2 0x8243 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x751D JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x70AB DUP2 PUSH2 0x8243 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x7540 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x7556 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x7A1 DUP5 DUP3 DUP6 ADD PUSH2 0x6D70 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x7577 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x758D JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x7599 DUP8 DUP3 DUP9 ADD PUSH2 0x6D22 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x75AA DUP2 PUSH2 0x8243 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x75BA DUP2 PUSH2 0x8243 JUMP JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP3 SWAP4 PUSH1 0x60 ADD CALLDATALOAD SWAP3 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x75DB JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x137D DUP2 PUSH2 0x82A1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x80 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x75F8 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH2 0x7603 DUP2 PUSH2 0x82A1 JUMP JUMPDEST SWAP2 POP PUSH1 0x60 DUP4 DUP6 SUB PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 ADD SLT ISZERO PUSH2 0x7636 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x7640 PUSH1 0x60 PUSH2 0x817D JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD PUSH2 0x764E DUP2 PUSH2 0x8243 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x40 DUP5 ADD MLOAD PUSH2 0x765E DUP2 PUSH2 0x8273 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x60 DUP5 ADD MLOAD PUSH2 0x7671 DUP2 PUSH2 0x8273 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE SWAP2 SWAP5 SWAP2 SWAP4 POP SWAP1 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP5 DUP7 SUB PUSH1 0xC0 DUP2 SLT ISZERO PUSH2 0x7697 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x60 DUP2 SLT ISZERO PUSH2 0x76A4 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x76AF PUSH1 0x60 PUSH2 0x817D JUMP JUMPDEST DUP6 CALLDATALOAD PUSH2 0x76BA DUP2 PUSH2 0x8243 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x76CA DUP2 PUSH2 0x8273 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH2 0x76DD DUP2 PUSH2 0x8273 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE SWAP4 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH2 0x76F2 DUP2 PUSH2 0x82A1 JUMP JUMPDEST SWAP3 POP PUSH1 0x80 DUP6 ADD CALLDATALOAD PUSH2 0x7702 DUP2 PUSH2 0x82A1 JUMP JUMPDEST SWAP2 POP PUSH1 0xA0 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x70D6 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x772E JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x7738 PUSH1 0x60 PUSH2 0x817D JUMP JUMPDEST DUP3 MLOAD PUSH1 0x7 DUP2 LT PUSH2 0x7746 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP4 DUP2 ADD MLOAD SWAP1 DUP3 ADD MSTORE PUSH1 0x40 SWAP3 DUP4 ADD MLOAD SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x7779 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x7790 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x779C DUP8 DUP4 DUP9 ADD PUSH2 0x6DB6 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x77B1 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x77BE DUP7 DUP3 DUP8 ADD PUSH2 0x6D22 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH2 0x6F9B DUP2 PUSH2 0x8243 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x77E0 JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x20 DUP4 ADD DUP3 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x7832 JUMPI DUP2 MLOAD DUP7 MSTORE PUSH1 0x20 SWAP6 DUP7 ADD SWAP6 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x7814 JUMP JUMPDEST POP SWAP4 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x7854 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x8206 JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 MSTORE PUSH1 0x20 DUP1 DUP3 ADD MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 DUP2 AND SWAP2 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP2 DUP3 ADD MLOAD AND SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP4 MSTORE PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x40 PUSH1 0x20 DUP6 ADD MSTORE PUSH2 0x7A1 PUSH1 0x40 DUP6 ADD DUP3 PUSH2 0x783C JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C0 PUSH2 0x790C DUP5 DUP5 MLOAD PUSH2 0x77E7 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MLOAD PUSH2 0x791E PUSH1 0x20 DUP7 ADD DUP3 PUSH2 0x77E7 JUMP JUMPDEST POP PUSH1 0x40 DUP4 ADD MLOAD PUSH2 0x7931 PUSH1 0x40 DUP7 ADD DUP3 PUSH2 0x77E7 JUMP JUMPDEST POP PUSH1 0x60 DUP4 ADD MLOAD PUSH2 0x7944 PUSH1 0x60 DUP7 ADD DUP3 PUSH2 0x77E7 JUMP JUMPDEST POP PUSH1 0x80 DUP4 ADD MLOAD PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0xA0 DUP4 ADD MLOAD PUSH1 0xA0 DUP6 ADD MSTORE PUSH1 0xC0 DUP4 ADD MLOAD PUSH1 0xC0 DUP6 ADD MSTORE PUSH1 0xE0 DUP4 ADD MLOAD PUSH1 0xE0 DUP6 ADD MSTORE PUSH2 0x100 DUP1 DUP5 ADD MLOAD DUP2 DUP7 ADD MSTORE POP PUSH2 0x120 DUP1 DUP5 ADD MLOAD DUP2 DUP7 ADD MSTORE POP PUSH2 0x140 DUP1 DUP5 ADD MLOAD DUP3 DUP3 DUP8 ADD MSTORE PUSH2 0x799D DUP4 DUP8 ADD DUP3 PUSH2 0x783C JUMP JUMPDEST SWAP2 POP POP PUSH2 0x160 SWAP2 POP DUP2 DUP5 ADD MLOAD DUP6 DUP3 SUB DUP4 DUP8 ADD MSTORE PUSH2 0x79BA DUP3 DUP3 PUSH2 0x783C JUMP JUMPDEST SWAP3 POP POP POP PUSH2 0x180 DUP1 DUP5 ADD MLOAD DUP6 DUP4 SUB DUP3 DUP8 ADD MSTORE PUSH2 0x79D6 DUP4 DUP3 PUSH2 0x783C JUMP JUMPDEST SWAP2 POP POP PUSH2 0x1A0 SWAP2 POP DUP2 DUP5 ADD MLOAD DUP6 DUP3 SUB DUP4 DUP8 ADD MSTORE PUSH2 0x59D1 DUP3 DUP3 PUSH2 0x783C JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP4 CALLDATACOPY SWAP2 ADD SWAP1 DUP2 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x7A15 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x8206 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP4 DUP5 AND DUP2 MSTORE SWAP2 DUP4 AND PUSH1 0x20 DUP4 ADD MSTORE SWAP1 SWAP2 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP8 AND DUP4 MSTORE DUP1 DUP7 AND PUSH1 0x20 DUP5 ADD MSTORE DUP1 DUP6 AND PUSH1 0x40 DUP5 ADD MSTORE POP PUSH1 0x80 PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x59D1 PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0x7801 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP5 DUP6 AND DUP2 MSTORE SWAP3 DUP5 AND PUSH1 0x20 DUP5 ADD MSTORE SWAP3 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP7 AND DUP4 MSTORE DUP1 DUP6 AND PUSH1 0x20 DUP5 ADD MSTORE POP PUSH1 0x60 PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0xB73 PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x7801 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP9 AND DUP4 MSTORE DUP1 DUP8 AND PUSH1 0x20 DUP5 ADD MSTORE POP DUP5 PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0xFF DUP5 AND PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0xA0 PUSH1 0x80 DUP4 ADD MSTORE PUSH2 0x7BC1 PUSH1 0xA0 DUP4 ADD DUP5 PUSH2 0x783C JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND DUP3 MSTORE PUSH1 0x40 PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x7A1 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x783C JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP3 MSTORE PUSH2 0x7C1F DUP6 PUSH2 0x8236 JUMP JUMPDEST DUP5 PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x80 PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x7C39 PUSH1 0x80 DUP4 ADD DUP6 PUSH2 0x7801 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0x7BC1 DUP2 DUP6 PUSH2 0x7801 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x100 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP13 AND DUP5 MSTORE PUSH2 0x7C73 DUP12 PUSH2 0x8236 JUMP JUMPDEST DUP11 PUSH1 0x20 DUP6 ADD MSTORE DUP2 PUSH1 0x40 DUP6 ADD MSTORE PUSH2 0x7C8B DUP3 DUP6 ADD DUP12 PUSH2 0x7801 JUMP JUMPDEST DUP5 DUP2 SUB PUSH1 0x60 DUP7 ADD MSTORE PUSH2 0x7C9D DUP2 DUP12 PUSH2 0x7801 JUMP JUMPDEST SWAP2 DUP10 AND PUSH1 0x80 DUP7 ADD MSTORE POP SWAP1 POP PUSH2 0x7CB1 DUP7 PUSH2 0x8236 JUMP JUMPDEST DUP6 PUSH1 0xA0 DUP5 ADD MSTORE DUP3 DUP2 SUB PUSH1 0xC0 DUP5 ADD MSTORE PUSH2 0x7CC9 DUP2 DUP7 PUSH2 0x7801 JUMP JUMPDEST DUP4 DUP2 SUB PUSH1 0xE0 DUP6 ADD MSTORE PUSH2 0x7CDB DUP2 DUP7 PUSH2 0x7801 JUMP JUMPDEST SWAP13 SWAP12 POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 ADD DUP2 DUP5 MSTORE DUP1 DUP6 MLOAD DUP1 DUP4 MSTORE PUSH1 0x40 DUP7 ADD SWAP2 POP PUSH1 0x40 DUP5 DUP3 MUL DUP8 ADD ADD SWAP3 POP DUP4 DUP8 ADD DUP6 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x7D82 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0 DUP9 DUP7 SUB ADD DUP5 MSTORE PUSH2 0x7D70 DUP6 DUP4 MLOAD PUSH2 0x783C JUMP JUMPDEST SWAP5 POP SWAP3 DUP6 ADD SWAP3 SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x7D36 JUMP JUMPDEST POP SWAP3 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x137D PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x7801 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 MSTORE PUSH2 0x7DB5 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x7801 JUMP JUMPDEST SWAP1 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x20 DUP4 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP5 ISZERO ISZERO DUP3 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x60 PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0xB73 PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x7801 JUMP JUMPDEST SWAP3 DUP4 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 DUP3 AND PUSH1 0x20 DUP5 ADD MSTORE AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP3 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x60 PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0xB73 PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x783C JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x137D PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x783C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 MSTORE PUSH2 0x7EC5 PUSH1 0x80 DUP4 ADD DUP8 PUSH2 0x783C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP6 DUP7 AND PUSH1 0x20 DUP5 ADD MSTORE SWAP4 SWAP1 SWAP5 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 MSTORE PUSH2 0x7F08 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x783C JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0xB73 DUP2 DUP6 PUSH2 0x7801 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND DUP3 MSTORE PUSH1 0x40 PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x7A1 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x7801 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH2 0x7F56 DUP6 PUSH2 0x8236 JUMP JUMPDEST SWAP4 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH1 0x8 DUP6 LT PUSH2 0x7F56 JUMPI INVALID JUMPDEST PUSH1 0xF SWAP4 DUP5 SIGNEXTEND DUP2 MSTORE SWAP2 SWAP1 SWAP3 SIGNEXTEND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0xF DUP4 SWAP1 SIGNEXTEND DUP2 MSTORE PUSH1 0x80 DUP2 ADD PUSH2 0x137D PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x7886 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x455243323042726964676553616D706C65722F494E56414C49445F544F4B454E PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x5F50414952000000000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8017 DUP3 DUP8 PUSH2 0x7886 JUMP JUMPDEST DUP5 PUSH1 0xF SIGNEXTEND PUSH1 0x60 DUP4 ADD MSTORE DUP4 PUSH1 0xF SIGNEXTEND PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xC0 PUSH1 0xA0 DUP4 ADD MSTORE PUSH2 0x59D1 PUSH1 0xC0 DUP4 ADD DUP5 PUSH2 0x7801 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 MSTORE PUSH2 0x8050 PUSH1 0x60 DUP4 ADD DUP7 PUSH2 0x78DD JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x8062 DUP2 DUP7 PUSH2 0x78DD JUMP JUMPDEST SWAP2 POP POP DUP3 PUSH1 0x40 DUP4 ADD MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x137D PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x78FC JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 MSTORE PUSH2 0x8099 PUSH1 0x60 DUP4 ADD DUP7 PUSH2 0x78FC JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x80AB DUP2 DUP7 PUSH2 0x783C JUMP JUMPDEST SWAP2 POP POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x40 DUP4 ADD MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD DUP5 DUP4 MSTORE PUSH1 0x40 PUSH1 0x20 DUP5 ADD MSTORE DUP1 DUP5 MLOAD DUP1 DUP4 MSTORE PUSH1 0x60 DUP6 ADD SWAP2 POP PUSH1 0x20 DUP7 ADD SWAP3 POP DUP4 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x8133 JUMPI DUP4 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 MSTORE PUSH1 0x20 SWAP4 DUP5 ADD SWAP4 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x80FF JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST SWAP6 DUP7 MSTORE PUSH1 0x20 DUP7 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0x40 DUP6 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x819C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x81BA JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x81DA JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x8221 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x8209 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x8230 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x4 DUP2 LT PUSH2 0x8240 JUMPI INVALID JUMPDEST POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x8240 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x8240 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0x8240 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0xF SIGNEXTEND DUP2 EQ PUSH2 0x8240 JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG3 PUSH6 0x627A7A723158 KECCAK256 0xCD 0xB9 COINBASE 0xE7 PUSH12 0x2B13C302A2C0446B1E573683 0x1E 0xC8 0x2D SWAP10 0xA9 EXTCODESIZE DUP8 0xE7 0xAB PUSH9 0xF0C1CF199A6C657870 PUSH6 0x72696D656E74 PUSH2 0x6CF5 PUSH5 0x736F6C6343 STOP SDIV GT STOP BLOCKHASH ",
                "sourceMap": "1121:1177:4:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1121:1177:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6866:1386:7;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;1452:882;;;;;;;;;:::i;:::-;;;;;;;;;1373:1411:11;;;;;;;;;:::i;:::-;;;;;;;;1857:1011:12;;;;;;;;;:::i;4381:3348::-;;;;;;;;;:::i;1694:1145:2:-;;;;;;;;;:::i;2844:1161:5:-;;;;;;;;;:::i;4171:2022:1:-;;;;;;;;;:::i;1275:1166:14:-;;;;;;;;;:::i;4278:2252:17:-;;;;;;;;;:::i;1321:1158:5:-;;;;;;;;;:::i;4328:1103:10:-;;;;;;;;;:::i;:::-;;;;;;;;;1697:599:4;;;;;;;;;:::i;:::-;;;;;;;;2563:1404:10;;;;;;;;;:::i;1662:2257:17:-;;;;;;;;;:::i;1272:1034:15:-;;;;;;;;;:::i;2656:1021::-;;;;;;;;;:::i;841:1674:16:-;;;;;;;;;:::i;:::-;;;;;;;;;;3265:1666:2;;;;;;;;;:::i;1727:2019:1:-;;;;;;;;;:::i;1538:1607:8:-;;;;;;;;;:::i;:::-;;;;;;;;;3620:842;;;;;;;;;:::i;1213:1034:18:-;;;;;;;;;:::i;1446:1188:9:-;;;;;;;;;:::i;3578:2406:7:-;;;;;;;;;:::i;:::-;;;;;;;;1720:1718:3;;;;;;;;;:::i;:::-;;;;;;;;;;3005:553:9;;;;;;;;;:::i;1363:1194:10:-;;;;;;;;;:::i;2781:791:7:-;;;;;;;;;:::i;3794:1711:3:-;;;;;;;;;:::i;2805:1169:14:-;;;;;;;;;:::i;2539:1021:18:-;;;;;;;;;:::i;3309:932:12:-;;;;;;;;;:::i;2521:1873:16:-;;;;;;;;;:::i;6866:1386:7:-;7070:24;7161:4;:11;7176:1;7161:16;7157:55;;;-1:-1:-1;7200:1:7;7193:8;;7157:55;7223:15;7240:23;7279:30;:28;:30::i;:::-;:41;;987:5;7402:54;7492:17;:15;:17::i;:::-;7478:31;;:10;:31;;;:64;;7532:10;7478:64;;;2460:42:49;7478:64:7;7578:17;:15;:17::i;:::-;7564:31;;:10;:31;;;:64;;7618:10;7564:64;;;2460:42:49;7564:64:7;7650:16;7688:1;7718:4;7358:382;;;;;;;;;;;;;;;;;22:32:-1;26:21;;;22:32;6:49;;7358:382:7;;;49:4:-1;25:18;;61:17;;7358:382:7;182:15:-1;7358:382:7;;;;179:29:-1;;;;160:49;;;7279:462:7;;;;7358:382;7279:462;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;-1:-1;7222:519:7;;-1:-1:-1;7222:519:7;-1:-1:-1;7751:12:7;7777:122;;;;7827:10;7816:33;;;;;;;;;;;;;;7807:42;;7777:122;;;7887:1;7880:8;;;;;;;7777:122;7909:26;7938:29;7956:10;7938:17;:29::i;:::-;7909:58;;;;7977:26;8006:29;8024:10;8006:17;:29::i;:::-;7977:58;;;;8204:8;8171:18;8165:2;:24;8132:18;8126:2;:24;8095:16;8076:4;:35;:74;:113;;;;;;:136;;;;;;;-1:-1:-1;;;;;;6866:1386:7;;;;;;;:::o;1452:882::-;1667:17;1686:34;1736:40;1753:10;1765;1736:16;:40::i;:::-;1807:24;;1861:25;;;;;;;;;;;;;;;;1807:24;1861:25;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;1861:25:7;-1:-1:-1;1903:55:7;;;;;1841:45;;-1:-1:-1;1903:4:7;;:20;;:55;;1924:9;;1935:10;;1947;;1903:55;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1903:55:7;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1903:55:7;;;;;;39:16:-1;36:1;17:17;2:54;101:4;1903:55:7;80:15:-1;;;97:9;76:31;65:43;;120:4;113:20;1903:55:7;;;;;;;;;1896:62;-1:-1:-1;1973:9:7;1968:360;1992:10;1988:1;:14;1968:360;;;2023:13;2039:4;:31;;;2071:4;2077:10;2089;2101:17;2119:1;2101:20;;;;;;;;;;;;;;2039:83;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2039:83:7;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2039:83:7;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;2039:83:7;;;;;;;;;2023:99;-1:-1:-1;2199:10:7;2195:81;;-1:-1:-1;2229:32:7;;-1:-1:-1;;2229:32:7;2195:81;2312:5;2289:17;2307:1;2289:20;;;;;;;;;;;;;;;;;:28;-1:-1:-1;2004:3:7;;1968:360;;;;1452:882;;;;;;;;;:::o;1373:1411:11:-;1624:34;1726:18;1747:17;:24;1726:45;;1815:10;1801:25;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;1801:25:11;-1:-1:-1;1781:45:11;-1:-1:-1;1894:25:11;;;1890:80;;-1:-1:-1;1935:24:11;;1890:80;1985:9;1980:798;2004:10;2000:1;:14;1980:798;;;2036:15;2053:23;2096:11;:22;;814:5;2223:1;2210:28;;;:37;;;;2273:10;2309:17;2352:10;2388:17;2406:1;2388:20;;;;;;;;;;;;;;2162:268;;;;;;;;;;;;;;;;22:32:-1;26:21;;;22:32;6:49;;2162:268:11;;;49:4:-1;25:18;;61:17;;2162:268:11;182:15:-1;2162:268:11;;;;179:29:-1;;;;160:49;;;2096:335:11;;;;2162:268;2096:335;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;-1:-1;2035:396:11;;-1:-1:-1;2035:396:11;-1:-1:-1;2445:17:11;2480:94;;;;2537:10;2526:33;;;;;;;;;;;;;;2514:45;;2480:94;2667:14;2663:58;;2701:5;;;;;2663:58;2758:9;2735:17;2753:1;2735:20;;;;;;;;;;;;;;;;;:32;-1:-1:-1;;;2016:3:11;;1980:798;;;;1373:1411;;;;;;;;;:::o;1857:1011:12:-;2059:47;2169:6;:13;2155:28;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;2155:28:12;-1:-1:-1;2122:61:12;-1:-1:-1;2198:9:12;2193:669;2218:6;:13;2213:1;:18;2193:669;;2291:15;2308:23;2359:4;2351:45;;1348:5;2508:41;;;2574:6;2581:1;2574:9;;;;;;;;;;;;;;2608:15;2624:1;2608:18;;;;;;;;;;;;;;2651:8;2461:220;;;;;;;;;;;;;;;22:32:-1;26:21;;;22:32;6:49;;2461:220:12;;;49:4:-1;25:18;;61:17;;2461:220:12;182:15:-1;2461:220:12;;;;179:29:-1;;;;160:49;;;2351:331:12;;;;2461:220;2351:331;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;2290:392:12;;;;2769:10;:82;;2850:1;2769:82;;;2809:10;2798:33;;;;;;;;;;;;;;2733:30;2764:1;2733:33;;;;;;;;;;;;;;;;;:118;-1:-1:-1;;2233:3:12;;2193:669;;;;1857:1011;;;;;:::o;4381:3348::-;4566:27;4613:9;:16;4633:1;4613:21;:64;;;-1:-1:-1;4650:22:12;;;;:27;4613:64;:107;;;-1:-1:-1;4693:22:12;;;;:27;4613:107;4609:154;;;-1:-1:-1;4751:1:12;4744:8;;4609:154;4773:35;;:::i;:::-;4811:28;;;;;:21;;;;;;:28;;4833:5;;4811:28;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4811:28:12;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;4811:28:12;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;4811:28:12;;;;;;;;;4773:66;-1:-1:-1;4878:29:12;4853:21;;:54;;;;;;;;;4849:93;;4930:1;4923:8;;;;;4849:93;4986:19;;;;5007:18;;4956:81;;;;;:29;;;;;;:81;;5027:9;;4956:81;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4956:81:12;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;4956:81:12;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;4956:81:12;;;;;;;;;4951:121;;5060:1;5053:8;;;;;4951:121;5099:44;;;;;5081:15;;5099:22;;;;;;:44;;5122:20;;5099:44;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5099:44:12;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;5099:44:12;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;5099:44:12;;;;;;;;;5081:62;;5153:22;5178:49;5206:5;:20;;;5178:27;:49::i;:::-;5153:74;-1:-1:-1;5241:28:12;;;5237:67;;5292:1;5285:8;;;;;;;5237:67;5313:25;5358:1;5341:5;:14;;;:18;:114;;5453:1;5341:114;;;5374:52;5402:5;:23;;;5374:27;:52::i;:::-;5313:142;;5465:28;5496:82;5540:9;:37;;;5496:5;:22;;;:43;;:82;;;;:::i;:::-;5465:113;;5610:20;5588:42;;5800:32;5835:260;5882:20;5916:5;:22;;;5969:10;5952:27;;:13;:27;;;:133;;6063:5;:22;;;5952:133;;;6029:14;;;;5998:22;;;;:46;;;:30;:46;:::i;:::-;5835:33;:260::i;:::-;6353:18;;6332:40;;;;;5800:295;;-1:-1:-1;6269:28:12;;6300:145;;6332:20;;;;;;:40;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6332:40:12;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;6332:40:12;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;6332:40:12;;;;;;;;;6407:18;;6386:49;;;;;:20;;;;;;:49;;6407:18;6427:7;;6386:49;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6386:49:12;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;6386:49:12;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;6386:49:12;;;;;;;;;6300:18;:145::i;:::-;6269:176;;6625:24;6602:20;:47;6598:260;;;6687:160;6733:20;6771:24;6813:20;6687:28;:160::i;:::-;6665:182;;6598:260;7041:10;7024:27;;:13;:27;;;;:62;;;;-1:-1:-1;7055:31:12;;;;;7024:62;7020:703;;;7201:18;;7177:43;;;;;7102:36;;7141:163;;7177:23;;;;;;:43;;7201:18;7177:43;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;7177:43:12;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;7177:43:12;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;7177:43:12;;;;;;;;;7262:18;;7238:52;;;;;:23;;;;;;:52;;7262:18;7282:7;;7238:52;;;;7141:163;7102:202;;7353:5;:14;;;7322:28;:45;7318:395;;;7409:289;7449:19;7490:190;7544:28;7598:5;:14;;;7638:20;7490:28;:190::i;7409:289::-;7387:311;;7318:395;7020:703;;4381:3348;;;;;;;;;;;;;:::o;1694:1145:2:-;1911:34;1961:18;1982:17;:24;1961:45;;2050:10;2036:25;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;2036:25:2;-1:-1:-1;2016:45:2;-1:-1:-1;2076:9:2;2071:762;2095:10;2091:1;:14;2071:762;;;2127:15;2144:23;2187:9;:21;;;:32;;1206:6;2309:9;:35;;;2370:12;2408:10;2444:17;2462:1;2444:20;;;;;;;;;;;;;;2261:225;;;;;;;;;;;;;;;22:32:-1;26:21;;;22:32;6:49;;2261:225:2;;;49:4:-1;25:18;;61:17;;2261:225:2;182:15:-1;2261:225:2;;;;179:29:-1;;;;160:49;;;2187:300:2;;;;2261:225;2187:300;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;-1:-1;2126:361:2;;-1:-1:-1;2126:361:2;-1:-1:-1;2501:17:2;2536:94;;;;2593:10;2582:33;;;;;;;;;;;;;;2570:45;;2536:94;2723:14;2719:58;;2757:5;;;;;2719:58;2813:9;2790:17;2808:1;2790:20;;;;;;;;;;;;;;;;;:32;-1:-1:-1;;;2107:3:2;;2071:762;;;;1694:1145;;;;;;;:::o;2844:1161:5:-;3026:34;3076:40;3093:10;3105;3076:16;:40::i;:::-;3147:24;;3201:25;;;;;;;;;;;;;;;;3147:24;3201:25;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;3201:25:5;-1:-1:-1;3181:45:5;-1:-1:-1;3241:9:5;3236:763;3260:10;3256:1;:14;3236:763;;;3292:15;3309:23;3352:20;:18;:20::i;:::-;:31;;940:6;3484:1;3475:24;;;:33;;;;3534:10;3570;3606:17;3624:1;3606:20;;;;;;;;;;;;;;3427:221;;;;;;;;;;;;;;;22:32:-1;26:21;;;22:32;6:49;;3427:221:5;;;49:4:-1;25:18;;61:17;;3427:221:5;182:15:-1;3427:221:5;;;;179:29:-1;;;;160:49;;;3352:297:5;;;;3427:221;3352:297;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;-1:-1;3291:358:5;;-1:-1:-1;3291:358:5;-1:-1:-1;3663:18:5;3699:95;;;;3757:10;3746:33;;;;;;;;;;;;;;3733:46;;3699:95;3887:15;3883:59;;3922:5;;;;;3883:59;3978:10;3955:17;3973:1;3955:20;;;;;;;;;;;;;;;;;:33;-1:-1:-1;;;3272:3:5;;3236:763;;;;2844:1161;;;;;;:::o;4171:2022:1:-;4503:24;;4557:25;;;;;;;;;;;;;;;;4383:34;;4460:11;;4503:24;4557:25;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;4557:25:1;-1:-1:-1;4597:24:1;;;;;4537:45;;-1:-1:-1;4597:12:1;;;;;;:24;;4610:10;;4597:24;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4597:24:1;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;4597:24:1;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;4597:24:1;;;;;;;;;4596:25;:54;;;-1:-1:-1;4626:24:1;;;;;:12;;;;;;:24;;4639:10;;4626:24;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4626:24:1;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;4626:24:1;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;4626:24:1;;;;;;;;;4625:25;4596:54;4592:109;;;-1:-1:-1;4666:24:1;;-1:-1:-1;4666:24:1;4592:109;4711:30;;:::i;:::-;4781:27;;;;;:15;;;;;;:27;;4797:10;;4781:27;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4781:27:1;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;4781:27:1;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;4781:27:1;;;;;;;;;4751:57;;4848:27;;;;;:15;;;;;;:27;;4864:10;;4848:27;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4848:27:1;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;4848:27:1;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;4848:27:1;;;;;;;;;4818;;;:57;4914:38;;;;;:26;;;;;;:38;;4941:10;;4914:38;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4914:38:1;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;4914:38:1;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;4914:38:1;;;;;;;;;4885:26;;;;:67;;;;4991:38;;;;:26;;;;;;:38;;5018:10;;4991:38;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4991:38:1;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;4991:38:1;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;4991:38:1;;;;;;;;;4962:9;:26;;:67;;;;;5059:4;:15;;;:17;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5059:17:1;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;5059:17:1;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;5059:17:1;;;;;;;;;5039;;;:37;5092:9;5087:1100;5111:10;5107:1;:14;5087:1100;;;5313:49;5319:9;:27;;;1090:1;973:8;1083;;;;;;1095:5;1082:18;5313:5;:49::i;:::-;5290:17;5308:1;5290:20;;;;;;;;;;;;;;:72;5286:116;;;5382:5;;5286:116;5416:15;5433:23;5476:11;:22;;803:5;5591:4;:19;;;:28;;;;5645:9;:27;;;5698:9;:26;;;5750:9;:27;;;5803:9;:26;;;5855:17;5873:1;5855:20;;;;;;;;;;;;;;5901:9;:17;;;5543:397;;;;;;;;;;;;;;;;;;22:32:-1;26:21;;;22:32;6:49;;5543:397:1;;;49:4:-1;25:18;;61:17;;5543:397:1;182:15:-1;5543:397:1;;;;179:29:-1;;;;160:49;;;5476:465:1;;;;5543:397;5476:465;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;-1:-1;5415:526:1;;-1:-1:-1;5415:526:1;-1:-1:-1;5955:18:1;5991:139;;;;6049:10;6038:33;;;;;;;;;;;;;;6025:46;;5991:139;;;6110:5;;;;;5991:139;6166:10;6143:17;6161:1;6143:20;;;;;;;;;;;;;;;;;:33;-1:-1:-1;;;5123:3:1;;5087:1100;;;;4171:2022;;;;;;;;;:::o;1275:1166:14:-;1456:34;1558:18;1579:17;:24;1558:45;;1647:10;1633:25;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;1633:25:14;-1:-1:-1;1613:45:14;-1:-1:-1;1674:9:14;1669:766;1693:10;1689:1;:14;1669:766;;;1725:15;1742:23;1793:18;:16;:18::i;:::-;1785:38;;889:5;1922:1;1915:24;;;:33;;;;1974:10;2010;2046:17;2064:1;2046:20;;;;;;;;;;;;;;1867:221;;;;;;;;;;;;;;;22:32:-1;26:21;;;22:32;6:49;;1867:221:14;;;49:4:-1;25:18;;61:17;;1867:221:14;182:15:-1;1867:221:14;;;;179:29:-1;;;;160:49;;;1785:304:14;;;;1867:221;1785:304;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;-1:-1;1724:365:14;;-1:-1:-1;1724:365:14;-1:-1:-1;2103:17:14;2138:94;;;;2195:10;2184:33;;;;;;;;;;;;;;2172:45;;2138:94;2325:14;2321:58;;2359:5;;;;;2321:58;2415:9;2392:17;2410:1;2392:20;;;;;;;;;;;;;;;;;:32;-1:-1:-1;;;1705:3:14;;1669:766;;4278:2252:17;4460:34;4510:40;4527:10;4539;4510:16;:40::i;:::-;4581:24;;4635:25;;;;;;;;;;;;;;;;4581:24;4635:25;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;4635:25:17;;4615:45;;4670:41;4728:17;:15;:17::i;:::-;4714:31;;:10;:31;;;:105;;4788:31;4808:10;4788:19;:31::i;:::-;4714:105;;;4783:1;4714:105;4670:149;;4829:41;4887:17;:15;:17::i;:::-;4873:31;;:10;:31;;;:105;;4947:31;4967:10;4947:19;:31::i;:::-;4873:105;;;4942:1;4873:105;4829:149;-1:-1:-1;4993:9:17;4988:1536;5012:10;5008:1;:14;4988:1536;;;5061:4;5097:17;:15;:17::i;:::-;5083:31;;:10;:31;;;5079:1367;;;5349:20;;5171:216;;5234:18;;5275:52;;5349:17;;5367:1;;5349:20;;;;;;;;;;;;5171:33;:216::i;:::-;5135:17;5153:1;5135:20;;;;;;;;;;;;;5134:253;;;;;;;;;5079:1367;;;5426:17;:15;:17::i;:::-;5412:31;;:10;:31;;;5408:1038;;;5678:20;;5500:216;;5563:18;;5604:52;;5678:17;;5696:1;;5678:20;;;;;5408:1038;5990:20;;5755:15;;5812:216;;5875:18;;5916:52;;5990:17;;6008:1;;5990:20;;;;;5812:216;5788:240;-1:-1:-1;5788:240:17;-1:-1:-1;6050:12:17;;6046:386;;6123:219;6190:18;6235:52;6313:7;6123:33;:219::i;:::-;6087:17;6105:1;6087:20;;;;;;;;;;;;;6086:256;;;;;;;;;6046:386;;;6412:1;6389:17;6407:1;6389:20;;;;;;;;;;;;;:24;;;;;6046:386;5408:1038;;6464:10;6459:55;;6494:5;;;6459:55;-1:-1:-1;5024:3:17;;4988:1536;;;;4278:2252;;;;;;;;:::o;1321:1158:5:-;1504:34;1554:40;1571:10;1583;1554:16;:40::i;:::-;1625:24;;1679:25;;;;;;;;;;;;;;;;1625:24;1679:25;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;1679:25:5;-1:-1:-1;1659:45:5;-1:-1:-1;1719:9:5;1714:759;1738:10;1734:1;:14;1714:759;;;1770:15;1787:23;1830:20;:18;:20::i;:::-;:31;;940:6;1962:1;1953:24;;;:33;;;;2012:10;2048;2084:17;2102:1;2084:20;;;;;;;;;;;;;;1905:221;;;;;;;;;;;;;;;22:32:-1;26:21;;;22:32;6:49;;1905:221:5;;;49:4:-1;25:18;;61:17;;1905:221:5;182:15:-1;1905:221:5;;;;179:29:-1;;;;160:49;;;1830:297:5;;;;1905:221;1830:297;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;-1:-1;1769:358:5;;-1:-1:-1;1769:358:5;-1:-1:-1;2141:17:5;2176:94;;;;2233:10;2222:33;;;;;;;;;;;;;;2210:45;;2176:94;2363:14;2359:58;;2397:5;;;;;2359:58;2453:9;2430:17;2448:1;2430:20;;;;;;;;;;;;;;;;;:32;-1:-1:-1;;;1750:3:5;;1714:759;;4328:1103:10;4512:15;4529:34;4579:40;4596:10;4608;4579:16;:40::i;:::-;4650:24;;4704:25;;;;;;;;;;;;;;;;4650:24;4704:25;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;4704:25:10;;4684:45;;4740:27;4784:17;:15;:17::i;:::-;4770:31;;:10;:31;;;:57;;4817:10;4770:57;;;4812:1;4770:57;4740:87;;4837:27;4881:17;:15;:17::i;:::-;4867:31;;:10;:31;;;:57;;4914:10;4867:57;;;4909:1;4867:57;4837:87;;4955:327;4991:250;;;;;;;;5060:19;5049:31;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;5049:31:10;;;4991:250;;;;5125:19;5114:31;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;5114:31:10;;;4991:250;;;;5185:41;4991:250;;;5255:17;4955:22;:327::i;:::-;4935:347;;5343:22;:20;:22::i;:::-;5324:48;;;5373:19;5394;5324:90;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5324:90:10;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;5324:90:10;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;5324:90:10;;;;;;;;;5293:131;;4328:1103;;;;;;;;;:::o;1697:599:4:-;1847:29;;;;;;;;;;;;;;;;1791:26;;1859:9;1847:29;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1833:43:4;-1:-1:-1;1891:9:4;1886:404;1906:21;;;1886:404;;1952:9;;1962:1;1952:12;;;;;;;;;;;;-1:-1:-1;30:25;;92:48;100:14;96:29;;;92:48;68:73;;58:2;;155:1;152;145:12;58:2;174:33;;;69:4;55:19;;;-1:-1;16:22;93:18;82:30;;79:2;;;125:1;122;115:12;79:2;155:14;151:38;;;137:53;;134:2;;;203:1;200;193:12;134:2;1952:24:4;1948:71;;-1:-1:-1;1948:71:4;;1996:8;;1948:71;2033:15;2050:23;2085:4;2102:9;;2112:1;2102:12;;;;;;;;;;;;-1:-1:-1;30:25;;92:48;100:14;96:29;;;92:48;68:73;;58:2;;155:1;152;145:12;58:2;174:33;;;69:4;55:19;;;-1:-1;16:22;93:18;82:30;;79:2;;;125:1;122;115:12;79:2;155:14;151:38;;;137:53;;134:2;;;203:1;200;193:12;134:2;2077:38:4;;;;;;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;2032:83:4;;;;2134:10;2129:110;;2211:10;2205:17;2198:4;2186:10;2182:21;2175:48;2173:52;2269:10;2252:11;2264:1;2252:14;;;;;;;;;;;;;:27;;;;1886:404;;;1929:3;;1886:404;;;;1697:599;;;;:::o;2563:1404:10:-;2765:24;2844:15;2905:22;:20;:22::i;:::-;2886:48;;;2935:19;2956;2886:90;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2886:90:10;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2886:90:10;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;2886:90:10;;;;;;;;;2844:142;-1:-1:-1;3049:27:10;;;3045:81;;-1:-1:-1;3092:23:10;;3045:81;3135:19;3157:33;;;;:141;;3241:57;;;;;:42;;;;;;:57;;3292:4;;3241:57;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3241:57:10;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;3241:57:10;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;3241:57:10;;;;;;;;;3157:141;;;3213:4;3205:21;;;3157:141;3135:163;;3454:16;3440:11;:30;3436:84;;;-1:-1:-1;3486:23:10;;-1:-1:-1;3486:23:10;3436:84;3652:205;;3530:15;;3547:23;;3586:24;;;;985:5;;3696:23;;3652:205;;3741:19;;3782;;3823:16;;3652:205;;;;;;;;22:32:-1;26:21;;;22:32;6:49;;3652:205:10;;;49:4:-1;25:18;;61:17;;3652:205:10;182:15:-1;3652:205:10;;;;179:29:-1;;;;160:49;;;3586:272:10;;;;3652:205;3586:272;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;3529:329:10;;;;3872:10;3868:93;;;3928:10;3917:33;;;;;;;;;;;;;;3898:52;2563:1404;-1:-1:-1;;;;;;;;2563:1404:10:o;1662:2257:17:-;1845:34;1895:40;1912:10;1924;1895:16;:40::i;:::-;1966:24;;2020:25;;;;;;;;;;;;;;;;1966:24;2020:25;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;2020:25:17;;2000:45;;2055:41;2113:17;:15;:17::i;:::-;2099:31;;:10;:31;;;:105;;2173:31;2193:10;2173:19;:31::i;:::-;2099:105;;;2168:1;2099:105;2055:149;;2214:41;2272:17;:15;:17::i;:::-;2258:31;;:10;:31;;;:105;;2332:31;2352:10;2332:19;:31::i;:::-;2258:105;;;2327:1;2258:105;2214:149;-1:-1:-1;2378:9:17;2373:1540;2397:10;2393:1;:14;2373:1540;;;2446:4;2482:17;:15;:17::i;:::-;2468:31;;:10;:31;;;2464:1371;;;2733:20;;2556:215;;2619:18;;2660:51;;2733:17;;2751:1;;2733:20;;;;;2556:215;2520:17;2538:1;2520:20;;;;;;;;;;;;;2519:252;;;;;;;;;2464:1371;;;2810:17;:15;:17::i;:::-;2796:31;;:10;:31;;;2792:1043;;;3061:20;;2884:215;;2947:18;;2988:51;;3061:17;;3079:1;;3061:20;;;;;2792:1043;3376:20;;3138:17;;3199:215;;3262:18;;3303:51;;3376:17;;3394:1;;3376:20;;;;;3199:215;3173:241;-1:-1:-1;3173:241:17;-1:-1:-1;3436:14:17;;3432:389;;3511:220;3578:18;3623:51;3700:9;3511:33;:220::i;:::-;3475:17;3493:1;3475:20;;;;;;;;;;;;;3474:257;;;;;;;;;3432:389;;;3801:1;3778:17;3796:1;3778:20;;;;;;;;;;;;;:24;;;;;3432:389;2792:1043;;3853:10;3848:55;;3883:5;;;3848:55;-1:-1:-1;2409:3:17;;2373:1540;;1272:1034:15;1456:34;1506:18;1527:17;:24;1506:45;;1595:10;1581:25;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;1581:25:15;-1:-1:-1;1561:45:15;-1:-1:-1;1621:9:15;1616:684;1640:10;1636:1;:14;1616:684;;;1672:15;1689:23;1732:6;:17;;904:5;1862:1;1843:35;;;:44;;;;1913:17;1931:1;1913:20;;;;;;;;;;;;;;1959:4;1795:190;;;;;;;;;;;;;;22:32:-1;26:21;;;22:32;6:49;;1795:190:15;;;49:4:-1;25:18;;61:17;;1795:190:15;182:15:-1;1795:190:15;;;;179:29:-1;;;;160:49;;;1732:254:15;;;;1795:190;1732:254;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;-1:-1;1671:315:15;;-1:-1:-1;1671:315:15;-1:-1:-1;2000:17:15;2035:209;;;;2144:10;2133:35;;;;;;;;;;;;;;2183:1;2169:4;:11;:15;2133:52;;;;;;;;;;;;;;2121:64;;2035:209;;;2224:5;;;;;2035:209;2280:9;2257:17;2275:1;2257:20;;;;;;;;;;;;;;;;;:32;-1:-1:-1;;;1652:3:15;;1616:684;;2656:1021;2839:34;2889:18;2910:17;:24;2889:45;;2978:10;2964:25;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;2964:25:15;-1:-1:-1;2944:45:15;-1:-1:-1;3004:9:15;2999:672;3023:10;3019:1;:14;2999:672;;;3055:15;3072:23;3115:6;:17;;904:5;3245:1;3226:34;;;:43;;;;3295:17;3313:1;3295:20;;;;;;;;;;;;;;3341:4;3178:189;;;;;;;;;;;;;;22:32:-1;26:21;;;22:32;6:49;;3178:189:15;;;49:4:-1;25:18;;61:17;;3178:189:15;182:15:-1;3178:189:15;;;;179:29:-1;;;;160:49;;;3115:253:15;;;;3178:189;3115:253;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;-1:-1;3054:314:15;;-1:-1:-1;3054:314:15;-1:-1:-1;3382:18:15;3418:196;;;;3528:10;3517:35;;;;;;;;;;;;;;3553:1;3517:38;;;;;;;;;;;;;;3504:51;;3650:10;3627:17;3645:1;3627:20;;;;;;;;;;;;;;;;;:33;-1:-1:-1;;;3035:3:15;;2999:672;;841:1674:16;1036:23;;:::i;:::-;1073:24;;:::i;:::-;1111:17;;;1198:602;1223:13;:20;1218:1;:25;1198:602;;1264:71;1320:2;1294:13;1308:1;1294:16;;;;;;;;;;;;;;:23;:28;1324:10;1264:13;1278:1;1264:16;;;;;;;;;;;;;;:29;;:71;;;;;:::i;:::-;1350:15;1367:23;1402:4;1394:24;;1419:13;1433:1;1419:16;;;;;;;;;;;;;;1394:42;;;;;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;1349:87:16;;;;1454:10;1450:340;;;1484:14;1501:46;1544:2;1524:10;:17;:22;1501:10;:22;;:46;;;;:::i;:::-;1484:63;;1578:23;1569:6;:32;1565:211;;;1679:24;;;1725:19;;;:32;;;1651:6;-1:-1:-1;1651:6:16;1565:211;1450:340;;-1:-1:-1;;1245:3:16;;1198:602;;;-1:-1:-1;1813:28:16;1809:98;;-1:-1:-1;1857:39:16;;1809:98;1921:9;1916:593;1941:14;:21;1936:1;:26;1916:593;;1983:86;2041:2;2014:14;2029:1;2014:17;;;;;;;;;;;;;;:24;:29;2045:23;1983:14;1998:1;1983:17;;;;;;;:86;2084:15;2101:23;2136:4;2128:24;;2153:14;2168:1;2153:17;;;;;;;;;;;;;;2128:43;;;;;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;2083:88:16;;;;2189:10;2185:314;;;2219:14;2236:46;2279:2;2259:10;:17;:22;2236:10;:22;;:46;;;;:::i;:::-;2219:63;;2313:9;2304:6;:18;2300:185;;;2386:25;;;2433:20;;;:33;;;2358:6;-1:-1:-1;2358:6:16;2300:185;2185:314;;-1:-1:-1;;1964:3:16;;1916:593;;;;841:1674;;;;;;;;;:::o;3265:1666:2:-;3535:34;;;;3481;;3535:47;;3531:510;;3713:268;;;;;;;;;3673:357;;3713:268;3775:33;3786:10;3798:9;3775:33;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;3775:33:2;;;3713:268;;;;3857:12;3871:9;3846:35;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;3846:35:2;;;3713:268;;;;3925:37;3713:268;;;3999:17;3673:22;:357::i;:::-;3666:364;;;;3531:510;4071:24;;4125:25;;;;;;;;;;;;;;;;4071:24;4125:25;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;4125:25:2;-1:-1:-1;4105:45:2;-1:-1:-1;4165:9:2;4160:765;4184:10;4180:1;:14;4160:765;;;4216:15;4233:23;4276:9;:21;;;:32;;1206:6;4398:9;:34;;;4458:12;4496:10;4532:17;4550:1;4532:20;;;;;;;;;;;;;;4350:224;;;;;;;;;;;;;;;22:32:-1;26:21;;;22:32;6:49;;4350:224:2;;;49:4:-1;25:18;;61:17;;4350:224:2;182:15:-1;4350:224:2;;;;179:29:-1;;;;160:49;;;4276:299:2;;;;4350:224;4276:299;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;-1:-1;4215:360:2;;-1:-1:-1;4215:360:2;-1:-1:-1;4589:18:2;4625:95;;;;4683:10;4672:33;;;;;;;;;;;;;;4659:46;;4625:95;4813:15;4809:59;;4848:5;;;;;4809:59;4904:10;4881:17;4899:1;4881:20;;;;;;;;;;;;;;;;;:33;-1:-1:-1;;;4196:3:2;;4160:765;;1727:2019:1;2060:24;;2114:25;;;;;;;;;;;;;;;;1940:34;;2017:11;;2060:24;2114:25;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;2114:25:1;-1:-1:-1;2154:24:1;;;;;2094:45;;-1:-1:-1;2154:12:1;;;;;;:24;;2167:10;;2154:24;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2154:24:1;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2154:24:1;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;2154:24:1;;;;;;;;;2153:25;:54;;;-1:-1:-1;2183:24:1;;;;;:12;;;;;;:24;;2196:10;;2183:24;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2183:24:1;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2183:24:1;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;2183:24:1;;;;;;;;;2182:25;2153:54;2149:109;;;-1:-1:-1;2223:24:1;;-1:-1:-1;2223:24:1;2149:109;2268:30;;:::i;:::-;2338:27;;;;;:15;;;;;;:27;;2354:10;;2338:27;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2338:27:1;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2338:27:1;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;2338:27:1;;;;;;;;;2308:57;;2405:27;;;;;:15;;;;;;:27;;2421:10;;2405:27;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2405:27:1;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2405:27:1;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;2405:27:1;;;;;;;;;2375;;;:57;2471:38;;;;;:26;;;;;;:38;;2498:10;;2471:38;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2471:38:1;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2471:38:1;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;2471:38:1;;;;;;;;;2442:26;;;;:67;;;;2548:38;;;;:26;;;;;;:38;;2575:10;;2548:38;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2548:38:1;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2548:38:1;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;2548:38:1;;;;;;;;;2519:9;:26;;:67;;;;;2616:4;:15;;;:17;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2616:17:1;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2616:17:1;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;2616:17:1;;;;;;;;;2596;;;:37;2649:9;2644:1096;2668:10;2664:1;:14;2644:1096;;;2876:27;;2870:48;;1027:8;2870:5;:48::i;:::-;2847:17;2865:1;2847:20;;;;;;;;;;;;;;:71;2843:115;;;2938:5;;2843:115;2972:15;2989:23;3032:11;:22;;803:5;3147:4;:19;;;:28;;;;3201:9;:27;;;3254:9;:26;;;3306:9;:27;;;3359:9;:26;;;3411:17;3429:1;3411:20;;;;;;;;;;;;;;3457:9;:17;;;3099:397;;;;;;;;;;;;;;;;;;22:32:-1;26:21;;;22:32;6:49;;3099:397:1;;;49:4:-1;25:18;;61:17;;3099:397:1;182:15:-1;3099:397:1;;;;179:29:-1;;;;160:49;;;3032:465:1;;;;3099:397;3032:465;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;-1:-1;2971:526:1;;-1:-1:-1;2971:526:1;-1:-1:-1;3511:17:1;3546:138;;;;3603:10;3592:33;;;;;;;;;;;;;;3580:45;;3720:9;3697:17;3715:1;3697:20;;;;;;;;;;;;;;;;;:32;-1:-1:-1;;;2680:3:1;;2644:1096;;1538:1607:8;1772:34;1808:23;1899:18;1920:17;:24;1899:45;;1988:10;1974:25;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;1974:25:8;;1954:45;;2076:120;2123:15;2152:10;2176;2076:33;:120::i;:::-;2058:138;-1:-1:-1;2266:29:8;;;2262:103;;-1:-1:-1;2311:43:8;;2262:103;2380:9;2375:764;2399:10;2395:1;:14;2375:764;;;2431:15;2448:23;2491:15;:26;;1045:5;2628:1;2609:34;;;:43;;;;2678:10;2714;2750:17;2768:1;2750:20;;;;;;;;;;;;;;2561:231;;;;;;;;;;;;;;;22:32:-1;26:21;;;22:32;6:49;;2561:231:8;;;49:4:-1;25:18;;61:17;;2561:231:8;182:15:-1;2561:231:8;;;;179:29:-1;;;;160:49;;;2491:302:8;;;;2561:231;2491:302;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;-1:-1;2430:363:8;;-1:-1:-1;2430:363:8;-1:-1:-1;2807:17:8;2842:94;;;;2899:10;2888:33;;;;;;;;;;;;;;2876:45;;2842:94;3029:14;3025:58;;3063:5;;;;;3025:58;3119:9;3096:17;3114:1;3096:20;;;;;;;;;;;;;;;;;:32;-1:-1:-1;;;2411:3:8;;2375:764;;3620:842;3853:34;3889:23;3946:120;3993:15;4022:10;4046;3946:33;:120::i;:::-;3928:138;;4096:359;4132:282;;;;;;;;4201:10;4213:15;4190:39;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;4190:39:8;;;4132:282;;;;4274:10;4286:15;4263:39;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;4263:39:8;;;4132:282;;;;4342:57;4132:282;;;4428:17;4096:22;:359::i;:::-;4076:379;;3620:842;;;;;;;:::o;1213:1034:18:-;1373:34;1423:18;1444:17;:24;1423:45;;1512:10;1498:25;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;1498:25:18;-1:-1:-1;1478:45:18;-1:-1:-1;1538:9:18;1533:708;1557:10;1553:1;:14;1533:708;;;1589:15;1606:23;1649:30;:28;:30::i;:::-;:41;;904:5;1803:1;1784:35;;;:44;;;;1854:17;1872:1;1854:20;;;;;;;;;;;;;;1900:4;1736:190;;;;;;;;;;;;;;22:32:-1;26:21;;;22:32;6:49;;1736:190:18;;;49:4:-1;25:18;;61:17;;1736:190:18;182:15:-1;1736:190:18;;;;179:29:-1;;;;160:49;;;1649:278:18;;;;1736:190;1649:278;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;-1:-1;1588:339:18;;-1:-1:-1;1588:339:18;-1:-1:-1;1941:17:18;1976:209;;;;2085:10;2074:35;;;;;;;;;;;;;;2124:1;2110:4;:11;:15;2074:52;;;;;;;;;;;;;;2062:64;;1976:209;;;2165:5;;;;;1976:209;2221:9;2198:17;2216:1;2198:20;;;;;;;;;;;;;;;;;:32;-1:-1:-1;;;1569:3:18;;1533:708;;;;1213:1034;;;;;:::o;1446:1188:9:-;1629:34;1731:18;1752:17;:24;1731:45;;1820:10;1806:25;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;1806:25:9;-1:-1:-1;1786:45:9;-1:-1:-1;1847:9:9;1842:786;1866:10;1862:1;:14;1842:786;;;1898:15;1915:23;1966:17;:15;:17::i;:::-;1958:37;;1053:5;2096:1;2087:25;;;:34;;;;2147:10;2183;2219:17;2237:1;2219:20;;;;;;;;;;;;;;2039:222;;;;;;;;;;;;;;;22:32:-1;26:21;;;22:32;6:49;;2039:222:9;;;49:4:-1;25:18;;61:17;;2039:222:9;182:15:-1;2039:222:9;;;;179:29:-1;;;;160:49;;;1958:304:9;;;;2039:222;1958:304;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;-1:-1;1897:365:9;;-1:-1:-1;1897:365:9;-1:-1:-1;2276:17:9;2311:114;;;;2374:10;2363:47;;;;;;;;;;;;;;2345:65;-1:-1:-1;;;2311:114:9;2518:14;2514:58;;2552:5;;;;;2514:58;2608:9;2585:17;2603:1;2585:20;;;;;;;;;;;;;;;;;:32;-1:-1:-1;;;1878:3:9;;1842:786;;3578:2406:7;3737:17;3823:27;3871:29;:27;:29::i;:::-;4011:16;;;4025:1;4011:16;;;;;;;;;3823:78;;-1:-1:-1;3975:33:7;;4011:16;;;;;;;105:10:-1;4011:16:7;88:34:-1;136:17;;-1:-1;4011:16:7;3975:52;;4059:9;4037:16;4054:1;4037:19;;;;;;;;;;;;;:31;;;;;4079:15;4104:23;4155:17;:15;:17::i;:::-;4141:31;;:10;:31;;;4137:1691;;;4591:16;;;4396:1;4591:16;;;;;;;;;4259:29;;;;987:5;;4378:49;;4453:10;;4489:34;;4549:16;;4591;;;4330:278;;;;;;;;;;;;;;;;22:32:-1;26:21;;;22:32;6:49;;4330:278:7;;;49:4:-1;25:18;;61:17;;4330:278:7;182:15:-1;4330:278:7;;;;179:29:-1;;;;160:49;;;4259:350:7;;;;4330:278;4259:350;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;-1:-1;4216:393:7;;-1:-1:-1;4216:393:7;-1:-1:-1;4137:1691:7;;;4644:17;:15;:17::i;:::-;4630:31;;:10;:31;;;4626:1202;;;5080:16;;;4885:1;5080:16;;;;;;;;;4748:29;;;;987:5;;4867:49;;4942:10;;4978:34;;5038:16;;5080;;;4626:1202;5585:16;;;5388:1;5585:16;;;;;;5765;;;;;;;;;5251:29;;;;987:5;;5370:51;;5322:481;;5447:10;;5483:34;;5543:16;;5627:10;;5483:34;;5543:16;;5322:481;;;;;;;;;22:32:-1;26:21;;;22:32;6:49;;5322:481:7;;;49:4:-1;25:18;;61:17;;5322:481:7;182:15:-1;5322:481:7;;;;179:29:-1;;;;160:49;;;5251:566:7;;;;5322:481;5251:566;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;-1:-1;5208:609:7;;-1:-1:-1;5208:609:7;-1:-1:-1;4626:1202:7;5882:10;5878:79;;;5926:10;5915:31;;;;;;;;;;;;;1720:1718:3;1900:13;1915:12;1929:34;1979:40;1996:10;2008;1979:16;:40::i;:::-;2050:24;;2104:25;;;;;;;;;;;;;;;;2050:24;2104:25;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;2104:25:3;;2084:45;;2156:25;:23;:25::i;:::-;2147:43;;;2191:10;2203;2147:67;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2147:67:3;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2147:67:3;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;2147:67:3;;;;;;;;;2140:74;-1:-1:-1;2224:17:3;2321:18;;;;2317:432;;-1:-1:-1;2402:4:3;;-1:-1:-1;2367:10:3;2317:432;;;2453:25;:23;:25::i;:::-;2444:43;;;2488:10;2500;2444:67;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2444:67:3;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2444:67:3;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;2444:67:3;;;;;;;;;2437:74;-1:-1:-1;2569:27:3;;;2565:108;;-1:-1:-1;2616:42:3;;-1:-1:-1;2616:42:3;2565:108;-1:-1:-1;2733:5:3;;-1:-1:-1;2698:10:3;2317:432;2809:4;2803:27;;;:29;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2803:29:3;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2803:29:3;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;2803:29:3;;;;;;;;;2798:103;;-1:-1:-1;2848:42:3;;-1:-1:-1;2848:42:3;2798:103;2916:9;2911:521;2935:10;2931:1;:14;2911:521;;;2966:17;2986:242;3051:10;3063:4;3069:9;3040:39;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;3040:39:3;;;3128:10;3140:4;3146:9;3117:39;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;3117:39:3;;;3194:17;3212:1;3194:20;;;;;;;;;;;;;;2986:36;:242::i;:::-;2966:262;-1:-1:-1;3322:14:3;3318:58;;3356:5;;;3318:58;3412:9;3389:17;3407:1;3389:20;;;;;;;;;;;;;;;;;:32;-1:-1:-1;2947:3:3;;2911:521;;;;1720:1718;;;;;;;;;:::o;3005:553:9:-;3187:34;3244:307;3280:230;;;;;;;;3349:10;3338:22;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;3338:22:9;;;3280:230;;;;3405:10;3394:22;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;3394:22:9;;;3280:230;;;;3456:39;3280:230;;;3524:17;3244:22;:307::i;1363:1194:10:-;1548:15;1565:34;1615:40;1632:10;1644;1615:16;:40::i;:::-;1686:24;;1740:25;;;;;;;;;;;;;;;;1686:24;1740:25;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;1740:25:10;;1720:45;;1776:27;1820:17;:15;:17::i;:::-;1806:31;;:10;:31;;;:57;;1853:10;1806:57;;;1848:1;1806:57;1776:87;;1873:27;1917:17;:15;:17::i;:::-;1903:31;;:10;:31;;;:57;;1950:10;1903:57;;;1945:1;1903:57;1873:87;-1:-1:-1;1976:9:10;1971:438;1995:10;1991:1;:14;1971:438;;;2026:17;2046:159;2097:19;2134;2171:17;2189:1;2171:20;;;;;;;;;;;;;;2046:33;:159::i;:::-;2026:179;-1:-1:-1;2299:14:10;2295:58;;2333:5;;;2295:58;2389:9;2366:17;2384:1;2366:20;;;;;;;;;;;;;;;;;:32;-1:-1:-1;2007:3:10;;1971:438;;;;2469:22;:20;:22::i;2781:791:7:-;2995:17;3014:34;3064:40;3081:10;3093;3064:16;:40::i;:::-;3121:55;;;;;:4;;:20;;:55;;3142:9;;3153:10;;3165;;3121:55;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3121:55:7;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;3121:55:7;;;;;;39:16:-1;36:1;17:17;2:54;101:4;3121:55:7;80:15:-1;;;97:9;76:31;65:43;;120:4;113:20;3121:55:7;;;;;;;;;3114:62;;3206:317;3242:240;;;;;;;;3311:10;3323:4;3300:28;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;3300:28:7;;;3242:240;;;;3373:10;3385:4;3362:28;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;3362:28:7;;;3242:240;;;;3430:37;3242:240;;;3496:17;3206:22;:317::i;:::-;3186:337;-1:-1:-1;2781:791:7;;;;;;;:::o;3794:1711:3:-;3973:13;3988:12;4002:34;4052:40;4069:10;4081;4052:16;:40::i;:::-;4123:24;;4177:25;;;;;;;;;;;;;;;;4123:24;4177:25;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;4177:25:3;;4157:45;;4320:25;:23;:25::i;:::-;4311:43;;;4355:10;4367;4311:67;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4311:67:3;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;4311:67:3;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;4311:67:3;;;;;;;;;4304:74;-1:-1:-1;4388:17:3;4485:18;;;;4481:497;;-1:-1:-1;4566:4:3;;-1:-1:-1;4531:10:3;4481:497;;;4682:25;:23;:25::i;:::-;4673:43;;;4717:10;4729;4673:67;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4673:67:3;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;4673:67:3;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;4673:67:3;;;;;;;;;4666:74;-1:-1:-1;4798:27:3;;;4794:108;;-1:-1:-1;4845:42:3;;-1:-1:-1;4845:42:3;4794:108;-1:-1:-1;4962:5:3;;-1:-1:-1;4927:10:3;4481:497;5038:4;5032:27;;;:29;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5032:29:3;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;5032:29:3;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;5032:29:3;;;;;;;;;5027:103;;-1:-1:-1;5077:42:3;;-1:-1:-1;5077:42:3;5027:103;5196:261;;;;;;;;;5160:338;;5196:261;5254:39;5265:10;5277:4;5283:9;5254:39;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;5254:39:3;;;5196:261;;;;5338:10;5350:4;5356:9;5327:39;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;5327:39:3;;;5196:261;;;;5406:36;5196:261;;;5471:17;5160:22;:338::i;:::-;5140:358;;3794:1711;;;;;;;;;:::o;2805:1169:14:-;2985:34;3087:18;3108:17;:24;3087:45;;3176:10;3162:25;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;3162:25:14;-1:-1:-1;3142:45:14;-1:-1:-1;3203:9:14;3198:770;3222:10;3218:1;:14;3198:770;;;3254:15;3271:23;3322:18;:16;:18::i;:::-;3314:38;;889:5;3451:1;3444:24;;;:33;;;;3503:10;3539;3575:17;3593:1;3575:20;;;;;;;;;;;;;;3396:221;;;;;;;;;;;;;;;22:32:-1;26:21;;;22:32;6:49;;3396:221:14;;;49:4:-1;25:18;;61:17;;3396:221:14;182:15:-1;3396:221:14;;;;179:29:-1;;;;160:49;;;3314:304:14;;;;3396:221;3314:304;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;-1:-1;3253:365:14;;-1:-1:-1;3253:365:14;-1:-1:-1;3632:18:14;3668:95;;;;3726:10;3715:33;;;;;;;;;;;;;;3702:46;;3668:95;3856:15;3852:59;;3891:5;;;;;3852:59;3947:10;3924:17;3942:1;3924:20;;;;;;;;;;;;;;;;;:33;-1:-1:-1;;;3234:3:14;;3198:770;;2539:1021:18;2698:34;2748:18;2769:17;:24;2748:45;;2837:10;2823:25;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;2823:25:18;-1:-1:-1;2803:45:18;-1:-1:-1;2863:9:18;2858:696;2882:10;2878:1;:14;2858:696;;;2914:15;2931:23;2974:30;:28;:30::i;:::-;:41;;904:5;3128:1;3109:34;;;:43;;;;3178:17;3196:1;3178:20;;;;;;;;;;;;;;3224:4;3061:189;;;;;;;;;;;;;;22:32:-1;26:21;;;22:32;6:49;;3061:189:18;;;49:4:-1;25:18;;61:17;;3061:189:18;182:15:-1;3061:189:18;;;;179:29:-1;;;;160:49;;;2974:277:18;;;;3061:189;2974:277;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;-1:-1;2913:338:18;;-1:-1:-1;2913:338:18;-1:-1:-1;3265:18:18;3301:196;;;;3411:10;3400:35;;;;;;;;;;;;;;3436:1;3400:38;;;;;;;;;;;;;;3387:51;;3533:10;3510:17;3528:1;3510:20;;;;;;;;;;;;;;;;;:33;-1:-1:-1;;;2894:3:18;;2858:696;;3309:932:12;3511:47;3607:114;3654:6;3674:15;3703:8;3607:33;:114::i;:::-;3574:147;-1:-1:-1;3862:9:12;3857:378;3881:6;:13;3877:1;:17;3857:378;;;3919:30;3950:1;3919:33;;;;;;;;;;;;;;3956:1;3919:38;3915:310;;4013:197;4063:30;4094:1;4063:33;;;;;;;;;;;;;;4118:6;4125:1;4118:9;;;;;;;;;;;;;;:26;;;4166:6;4173:1;4166:9;;;;;;;;;;;;;;:26;;;4013:28;:197::i;:::-;3977:30;4008:1;3977:33;;;;;;;;;;;;;:233;;;;;3915:310;3896:3;;3857:378;;2521:1873:16;2714:23;;:::i;:::-;2751:24;;:::i;:::-;2853:2;;2789:18;2921:679;2946:14;:21;2941:1;:26;2921:679;;2988:72;3046:2;3019:14;3034:1;3019:17;;;;;;;;;;;;;;:24;:29;3050:9;2988:14;3003:1;2988:17;;;;;;;:72;3075:15;3092:23;3127:4;3119:24;;3144:14;3159:1;3144:17;;;;;;;;;;;;;;3119:43;;;;;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;3074:88:16;;;;3180:10;3176:414;;;3210:14;3227:46;3270:2;3250:10;:17;:22;3227:10;:22;;:46;;;;:::i;:::-;3210:63;;3325:1;3316:6;:10;:66;;;;;3359:23;3350:6;:32;3316:66;3291:285;;;3477:25;;;3524:20;;;:33;;;3449:6;-1:-1:-1;3449:6:16;3291:285;3176:414;;-1:-1:-1;;2969:3:16;;2921:679;;;;3648:2;3613:23;:38;3609:109;;;-1:-1:-1;3667:40:16;;3609:109;3732:9;3727:661;3752:13;:20;3747:1;:25;3727:661;;3793:84;3849:2;3823:13;3837:1;3823:16;;;;;;;;;;;;;;:23;:28;3853:23;3793:13;3807:1;3793:16;;;;;;;:84;3892:15;3909:23;3944:4;3936:24;;3961:13;3975:1;3961:16;;;;;;;;;;;;;;3936:42;;;;;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;3891:87:16;;;;3996:10;3992:386;;;4026:14;4043:46;4086:2;4066:10;:17;:22;4043:10;:22;;:46;;;;:::i;:::-;4026:63;;4141:1;4132:6;:10;:53;;;;;4175:10;4166:6;:19;4132:53;4107:257;;;4267:24;;;4313:19;;;:32;;;4239:6;-1:-1:-1;4239:6:16;4107:257;3992:386;;-1:-1:-1;;3774:3:16;;3727:661;;10115:164:49;1038:42;10115:164;:::o;10689:135::-;871:42;10689:135;:::o;893:176:13:-;989:14;1026:36;1049:12;1026:22;:36::i;:::-;1019:43;;893:176;;;;:::o;1424:191::-;1556:10;1542:24;;:10;:24;;;;1534:74;;;;;;;;;;;;;;;;;;;;;;1424:191;;:::o;7735:446:12:-;7842:17;7879:9;:16;7899:1;7879:21;7875:82;;;-1:-1:-1;7943:1:12;7916:30;;7875:82;7970:9;:16;7990:2;7970:22;;:85;;;-1:-1:-1;8035:20:12;8008:23;:9;8029:1;8008:23;:20;:23;:::i;:::-;:47;;;;7970:85;7966:154;;;-1:-1:-1;8106:1:12;8079:30;;7966:154;8148:25;:9;8170:2;8148:25;:21;:25;:::i;965:364:54:-;1051:7;1082:1;1078;:5;1074:227;;;1099:191;1121:168;1178:59;1255:1;1274;1121:39;:168::i;:::-;1099:21;:191::i;:::-;-1:-1:-1;1317:5:54;;;965:364;;;;;:::o;1335:383::-;1421:7;1456:5;;;1475;;;1471:223;;;1496:187;1518:164;1575:55;1648:1;1667;1518:39;:164::i;1141:603:36:-;1309:21;1350:110;1388:9;1415:11;1444:6;1350:20;:110::i;:::-;1346:289;;;1476:148;1498:125;1547:9;1574:11;1603:6;1498:31;:125::i;1476:148::-;1661:46;1695:11;1661:25;:9;1679:6;1661:25;:17;:25;:::i;:::-;:33;:46;:33;:46;:::i;1866:135:54:-;1951:7;1985:1;1981;:5;:13;;1993:1;1981:13;;;-1:-1:-1;1989:1:54;;1974:20;-1:-1:-1;1866:135:54:o;3762:545:36:-;3925:21;4165:104;4257:11;4165:70;4212:22;4257:11;4232:1;4212:22;:19;:22;:::i;:::-;4165:25;:9;4183:6;4165:25;:17;:25;:::i;:::-;:46;:70;:46;:70;:::i;11626:144:49:-;1714:42;11626:144;:::o;6562:337:1:-;6645:9;6680:5;;;6699:6;;;;;:21;;;6719:1;6714;6709:2;:6;;;;;;:11;;6699:21;6695:60;;;6743:1;6736:8;;;;;6695:60;6780:8;6774:15;;6803:7;;;6799:46;;;6833:1;6826:8;;;;;;6799:46;973:8;6864:9;;;;-1:-1:-1;;;;6562:337:1:o;14315:126:49:-;3329:42;14315:126;:::o;7951:316:17:-;8048:31;8174:35;:33;:35::i;:::-;8150:85;;;8236:12;8150:99;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;8150:99:17;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;8150:99:17;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;8150:99:17;;;;;;;;6988:721;7185:20;;7242:36;;;7238:100;;7294:33;;7238:100;7347:23;7419:22;:33;;1286:5;7536:16;7574:11;7492:111;;;;;;;;;;;;;22:32:-1;26:21;;;22:32;6:49;;7492:111:17;;;49:4:-1;25:18;;61:17;;7492:111:17;182:15:-1;7492:111:17;;;;179:29:-1;;;;160:49;;;7419:185:17;;;;7492:111;7419:185;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;-1:-1;7380:224:17;;-1:-1:-1;7380:224:17;-1:-1:-1;7614:89:17;;;;7670:10;7659:33;;;;;;;;;;;;;;7644:48;;7614:89;6988:721;;;;;;;;:::o;5437:539:10:-;5642:17;5675:27;5716:14;5705:37;;;;;;;;;;;;;;5675:67;;5752:27;5793:14;5782:37;;;;;;;;;;;;;;5752:67;;5836:133;5883:19;5916;5949:10;5836:33;:133::i;:::-;5829:140;5437:539;-1:-1:-1;;;;;;5437:539:10:o;1655:2958:0:-;1829:34;1913:17;:24;1899:39;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;1899:39:0;;1879:59;;1952:17;:24;1980:1;1952:29;1948:84;;;1997:24;;1948:84;2042:18;2063:135;2102:4;:19;;;2135:4;:19;;;2168:17;2186:1;2168:20;;;;;;;;;;;;;;2063:4;:25;;;:135;;:::i;:::-;2042:156;-1:-1:-1;2212:15:0;2208:70;;-1:-1:-1;2243:24:0;;2208:70;2288:17;2308:125;2347:4;:19;;;2380:4;:19;;;2413:10;2308:4;:25;;;:125;;:::i;:::-;2288:145;-1:-1:-1;2447:14:0;2443:69;;-1:-1:-1;2477:24:0;;-1:-1:-1;2477:24:0;2443:69;2527:9;2522:2085;2546:17;:24;2542:1;:28;2522:2085;;;2596:12;2591:1604;1647:1;2614:4;:37;2591:1604;;;2787:148;2834:17;2852:1;2834:20;;;;;;;;;;;;;;2876:9;2907:10;2787:25;:148::i;:::-;2774:161;-1:-1:-1;2957:15:0;2953:67;;2996:5;;2953:67;3050:202;3098:59;1342:3;3224:10;3050:25;:202::i;:::-;3037:215;-1:-1:-1;3274:15:0;3270:67;;3313:5;;3270:67;3354:18;3375:157;3422:4;:19;;;3463:4;:19;;;3504:10;3375:4;:25;;;:157;;:::i;:::-;3354:178;-1:-1:-1;3554:15:0;3550:67;;3593:5;;;3550:67;3750:10;3738:22;;3852:17;3870:1;3852:20;;;;;;;;;;;;;;3839:9;:33;3835:346;;3896:11;4020:17;4038:1;4020:20;;;;;;;;;;;;;;1342:3;3947:17;3965:1;3947:20;;;;;;;;;;;;;;3935:9;:32;3934:59;:106;;;;;;3896:144;;1500:8;4066:3;:41;4062:101;;4135:5;;;;4062:101;3835:346;;-1:-1:-1;2653:6:0;;2591:1604;;;;4464:132;4507:17;4525:1;4507:20;;;;;;;;;;;;;;4545:9;4572:10;4464:25;:132::i;:::-;4441:17;4459:1;4441:20;;;;;;;;;;;;;;;;;:155;2572:3;;2522:2085;;;;1655:2958;;;;;;:::o;14050:134:49:-;3188:42;14050:134;:::o;16385:187:50:-;16527:38;16540:1;16543:5;16558;16527:12;:38::i;:::-;16385:187;;;:::o;15929:220::-;16050:14;16097:21;16109:1;16112:5;16097:11;:21::i;4937:907:2:-;5138:17;5172:20;5194:26;;:::i;:::-;5247:14;5236:47;;;;;;;;;;;;;;5171:112;;;;5294:20;5341:14;5330:36;;;;;;;;;;;;;;5293:73;-1:-1:-1;5377:12:2;5391:23;5438:4;5495:34;5547:9;5574:13;5293:73;5636:31;5656:10;5636:19;:31::i;:::-;5455:226;;;;;;;;;;;;;;;;22:32:-1;26:21;;;22:32;6:49;;5455:226:2;;;49:4:-1;25:18;;61:17;;5455:226:2;182:15:-1;5455:226:2;;;;179:29:-1;;;;160:49;;;5430:252:2;;;;5455:226;5430:252;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;5376:306:2;;;;5697:7;5692:47;;5727:1;5720:8;;;;;;;;;5692:47;5810:10;5799:35;;;;;;;;;;;;;;5835:1;5799:38;;;;;;;;;;;;;;5792:45;;;;;;;4937:907;;;;;:::o;4906:713:8:-;5090:23;5133:29;;;5129:77;;-1:-1:-1;5193:1:8;5178:17;;5129:77;5239:162;;5215:21;;5275:68;;5239:162;;5357:10;;5381;;5239:162;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;5239:162:8;;;;;;;38:4:-1;29:7;25:18;67:10;61:17;96:58;199:8;192:4;186;182:15;179:29;167:10;160:49;0:215;;;5239:162:8;5215:186;;5412:15;5429:23;5456:15;:26;;5483:8;5456:36;;;;;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;5411:81:8;;;;5506:10;:37;;;;;5520:10;:17;5541:2;5520:23;5506:37;5502:111;;;5566:36;5587:10;5599:2;5566:20;:36::i;:::-;5559:43;;;;;;;5502:111;4906:713;;;;;;;;:::o;5625:1003::-;5846:17;5880:18;5900:26;5953:14;5942:46;;;;;;;;;;;;;;5879:109;;;;5999:18;6044:14;6033:37;;;;;;;;;;;;;;5998:72;-1:-1:-1;6081:12:8;6095:23;6142:4;6199:54;6271:18;6307:10;5998:72;6363:31;6383:10;6363:19;:31::i;:::-;6159:249;;;;;;;;;;;;;;;;22:32:-1;26:21;;;22:32;6:49;;6159:249:8;;;49:4:-1;25:18;;61:17;;6159:249:8;182:15:-1;6159:249:8;;;;179:29:-1;;;;160:49;;;6134:275:8;;;;6159:249;6134:275;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;6080:329:8;;;;6424:7;6419:47;;6454:1;6447:8;;;;;;;;;6419:47;6520:24;6561:10;6550:44;;;;;;;;;;;;;;6519:75;;;6611:7;6619:1;6611:10;;;;;;;;;;;;;;6604:17;;;;;;;;5625:1003;;;;;:::o;11294:173:49:-;1552:42;11294:173;:::o;13783:128::-;3030:42;13783:128;:::o;10415:168::-;1203:42;10415:168;:::o;14588:132::-;3483:42;14588:132;:::o;5511:1457:3:-;5717:7;5741:18;5761:12;5775:17;5820:14;5796:89;;;;;;;;;;;;;;5740:145;;;;;;5896:15;5921:23;6064:9;6050:23;;:10;:23;;;6046:763;;;6257:142;;6201:15;;;;1347:5;;6305:36;;6257:142;;6367:10;;6257:142;;;;;;;;22:32:-1;26:21;;;22:32;6:49;;6257:142:3;;;49:4:-1;25:18;;61:17;;6257:142:3;182:15:-1;6257:142:3;;;;179:29:-1;;;;160:49;;;6201:199:3;;;;6257:142;6201:199;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;-1:-1;6158:242:3;;-1:-1:-1;6158:242:3;-1:-1:-1;6046:763:3;;;6543:23;:21;:23::i;:::-;6618:179;;6543:34;;;;;;1347:5;;6666:43;;6618:179;;6735:4;;6765:10;;6618:179;;;;;;;;22:32:-1;26:21;;;22:32;6:49;;6618:179:3;;;49:4:-1;25:18;;61:17;;6618:179:3;182:15:-1;6618:179:3;;;;179:29:-1;;;;160:49;;;6543:255:3;;;;6618:179;6543:255;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;-1:-1;6500:298:3;;-1:-1:-1;6500:298:3;-1:-1:-1;6046:763:3;6823:10;6818:50;;6856:1;6849:8;;;;;;;;;6818:50;6939:10;6928:33;;;;;;;;;;;;;;6921:40;5511:1457;-1:-1:-1;;;;;;;;;5511:1457:3:o;3564:837:9:-;3767:17;3801:18;3846:14;3835:37;;;;;;;;;;;;;;3800:72;;3883:18;3928:14;3917:37;;;;;;;;;;;;;;3882:72;-1:-1:-1;3965:12:9;3979:23;4026:4;4083:36;4137:10;3882:72;4193:31;4213:10;4193:19;:31::i;:::-;4043:195;;;;;;;;;;;;;;;22:32:-1;26:21;;;22:32;6:49;;4043:195:9;;;49:4:-1;25:18;;61:17;;4043:195:9;182:15:-1;4043:195:9;;;;179:29:-1;;;;160:49;;;4018:221:9;;;;4043:195;4018:221;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;3964:275:9;;;;4254:7;4249:47;;4284:1;4277:8;;;;;;;;4249:47;4367:10;4356:35;;;;;;;;;;;;;;4392:1;4356:38;;;;;;;;;;;;;;4349:45;;;;;;3564:837;;;;;:::o;5990:870:7:-;6191:17;6225:18;6245:17;6289:14;6278:44;;;;;;;;;;;;;;6224:98;;;;6333:18;6380:14;6369:44;;;;;;;;;;;;;;6332:81;;;6424:12;6438:23;6485:4;6477:24;;6542:40;;;6600:4;6622:10;6650;6678;6502:200;;;;;;;;;;;;;;;;22:32:-1;26:21;;;22:32;6:49;;6502:200:7;;;49:4:-1;25:18;;61:17;;6502:200:7;182:15:-1;6502:200:7;;;;179:29:-1;;;;160:49;;;6477:226:7;;;;6502:200;6477:226;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;6423:280:7;;;;6718:7;6713:47;;6748:1;6741:8;;;;;;;;;3905:366:33;3985:19;4036:2;4020:18;;4049:15;4066:23;4093:5;:16;;4110:18;;;;;;;;;;;;;;;;;4093:36;;;;;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;4048:81:33;;;;4143:10;:37;;;;;4157:10;:17;4178:2;4157:23;4143:37;4139:126;;;4218:35;4239:10;4251:1;4218:20;:35::i;:::-;4196:58;;4139:126;3905:366;;;;;:::o;16814:871:50:-;16934:13;16978:5;16986:1;16978:9;16967:1;:8;:20;16963:290;;;17003:239;17025:216;17087:87;17192:1;:8;17218:5;17226:1;17218:9;17025:44;:216::i;17003:239::-;-1:-1:-1;17426:13:50;17329:2;17426:13;17420:20;17579:66;17567:79;;16814:871::o;10753:1071::-;10874:14;10919:5;10927:2;10919:10;10908:1;:8;:21;10904:321;;;10945:269;10967:246;11029:89;11136:1;:8;11162:5;11170:2;11162:10;10967:44;:246::i;10945:269::-;-1:-1:-1;11726:13:50;11471:2;11726:13;11720:20;11742:42;11716:69;;10753:1071::o;731:322:55:-;884:12;196:10;955:28;;997:9;1020:1;1035;919:127;;;;;;;;;;;;;;;22:32:-1;26:21;;;22:32;6:49;;919:127:55;;;49:4:-1;25:18;;61:17;;919:127:55;182:15:-1;919:127:55;;;;179:29:-1;;;;160:49;;;919:127:55;-1:-1:-1;731:322:55;;;;;:::o;1511:170:53:-;1654:9;1648:16;1641:4;1630:9;1626:20;1619:46;4566:1880:36;4729:12;4761:16;4757:109;;4793:62;4815:39;:37;:39::i;4793:62::-;5676:11;;;:29;;-1:-1:-1;5691:14:36;;5676:29;5672:72;;;-1:-1:-1;5728:5:36;5721:12;;5672:72;6239:17;6322:11;6259:84;;;;;6299:9;6279:6;6259:84;6239:104;-1:-1:-1;6390:25:36;:9;6408:6;6390:25;:17;:25;:::i;:::-;6363:23;:9;6381:4;6363:23;:17;:23;:::i;:::-;:52;;;4566:1880;-1:-1:-1;;;;;4566:1880:36:o;520:335:37:-;676:12;312:10;747:23;;784:9;807:11;832:6;711:137;;;;;;;;;;;122:448:54;208:7;235:6;231:45;;-1:-1:-1;264:1:54;257:8;;231:45;297:5;;;301:1;297;:5;:1;316:5;;;;;:10;312:234;;342:193;364:170;421:61;500:1;519;364:39;:170::i;576:383::-;662:7;689:6;685:223;;711:186;733:163;790:54;862:1;881;733:39;:163::i;711:186::-;917:9;933:1;929;:5;;;;;;;576:383;-1:-1:-1;;;;576:383:54:o;10973:176:49:-;1382:42;10973:176;:::o;4619:416:0:-;4787:21;4828:14;;;:29;;-1:-1:-1;4846:11:0;;4828:29;:49;;;-1:-1:-1;4861:16:0;;4828:49;4824:63;;;-1:-1:-1;4886:1:0;4879:8;;4824:63;4909:18;;;4921:6;4909:9;:18;:9;4941:13;;;;;:23;4937:37;;4973:1;4966:8;;;;;4937:37;5017:11;5011:1;4997:11;:15;4992:1;:21;4991:37;;;;;;;4619:416;-1:-1:-1;;;;;4619:416:0:o;15048:645:50:-;15205:5;15213:2;15205:10;15194:1;:8;:21;15190:297;;;15231:245;15253:222;15315:92;15425:1;:8;15451:5;15459:2;15451:10;15253:44;:222::i;15231:245::-;15656:13;;15567:2;15656:13;15649:28;15635:52::o;14133:679::-;14254:14;14299:5;14307:2;14299:10;14288:1;:8;:21;14284:297;;;14325:245;14347:222;14409:92;14519:1;:8;14545:5;14553:2;14545:10;14347:44;:222::i;14325:245::-;-1:-1:-1;14759:13:50;14661:2;14759:13;14753:20;;14133:679::o;1075:172:13:-;1204:16;;;1218:1;1204:16;;;;;;;;;1162:20;;1204:16;;;;;;105:10:-1;1204:16:13;88:34:-1;136:17;;-1:-1;1204:16:13;1198:22;;1239:1;1230:3;1234:1;1230:6;;;;;;;;;;;;;:10;;;;;1075:172;;;:::o;14863:128:49:-;3627:42;14863:128;:::o;1292:378:51:-;1480:12;1232:10;1551:37;;1602:9;1625:6;1645:8;1515:148;;;;;;;;;;;372:142:37;485:22;;;;;;;;;;;;;;;;;372:142;:::o;1121:1177:4:-;;;;;;;;;;;-1:-1:-1;1121:1177:4;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;-1:-1:-1;1121:1177:4;;;;;;;;;;;;;;;;;:::o;5:130:-1:-;72:20;;97:33;72:20;97:33;;458:707;;575:3;568:4;560:6;556:17;552:27;542:2;;-1:-1;;583:12;542:2;630:6;617:20;652:80;667:64;724:6;667:64;;;652:80;;;760:21;;;643:89;-1:-1;804:4;817:14;;;;792:17;;;906;;;897:27;;;;894:36;-1:-1;891:2;;;943:1;;933:12;891:2;968:1;953:206;978:6;975:1;972:13;953:206;;;85:6;72:20;97:33;124:5;97:33;;;1046:50;;1110:14;;;;1138;;;;1000:1;993:9;953:206;;;957:14;;;;;535:630;;;;;1572:693;;1694:3;1687:4;1679:6;1675:17;1671:27;1661:2;;-1:-1;;1702:12;1661:2;1749:6;1736:20;1771:85;1786:69;1848:6;1786:69;;1771:85;1884:21;;;1762:94;-1:-1;1928:4;1941:14;;;;1916:17;;2036:1;2021:238;2046:6;2043:1;2040:13;2021:238;;;2153:42;2191:3;1928:4;2129:3;2116:17;1920:6;2104:30;;2153:42;;;2141:55;;1928:4;2210:14;;;;2238;;;;;2068:1;2061:9;2021:238;;;2025:14;;;;1654:611;;;;;3066:714;;3190:3;3183:4;3175:6;3171:17;3167:27;3157:2;;-1:-1;;3198:12;3157:2;3238:6;3232:13;3260:76;3275:60;3328:6;3275:60;;3260:76;3364:21;;;3251:85;-1:-1;3408:4;3421:14;;;;3396:17;;;3510;;;3501:27;;;;3498:36;-1:-1;3495:2;;;3547:1;;3537:12;3495:2;3572:1;3557:217;3582:6;3579:1;3576:13;3557:217;;;15963:13;;3650:61;;3725:14;;;;3753;;;;3604:1;3597:9;3557:217;;3806:707;;3923:3;3916:4;3908:6;3904:17;3900:27;3890:2;;-1:-1;;3931:12;3890:2;3978:6;3965:20;4000:80;4015:64;4072:6;4015:64;;4000:80;4108:21;;;3991:89;-1:-1;4152:4;4165:14;;;;4140:17;;;4254;;;4245:27;;;;4242:36;-1:-1;4239:2;;;4291:1;;4281:12;4239:2;4316:1;4301:206;4326:6;4323:1;4320:13;4301:206;;;15815:20;;4394:50;;4458:14;;;;4486;;;;4348:1;4341:9;4301:206;;5209:432;;5306:3;5299:4;5291:6;5287:17;5283:27;5273:2;;-1:-1;;5314:12;5273:2;5361:6;5348:20;5383:60;5398:44;5435:6;5398:44;;5383:60;5374:69;;5463:6;5456:5;5449:21;5567:3;5499:4;5558:6;5491;5549:16;;5546:25;5543:2;;;5584:1;;5574:12;5543:2;77271:6;5499:4;5491:6;5487:17;5499:4;5525:5;5521:16;77248:30;77327:1;77309:16;;;5499:4;77309:16;77302:27;5525:5;5266:375;-1:-1;;5266:375;5650:434;;5758:3;5751:4;5743:6;5739:17;5735:27;5725:2;;-1:-1;;5766:12;5725:2;5806:6;5800:13;5828:60;5843:44;5880:6;5843:44;;5828:60;5819:69;;5908:6;5901:5;5894:21;6012:3;5944:4;6003:6;5936;5994:16;;5991:25;5988:2;;;6029:1;;6019:12;5988:2;6039:39;6071:6;5944:4;5970:5;5966:16;5944:4;5936:6;5932:17;6039:39;;10274:2714;;10382:6;;10370:9;10365:3;10361:19;10357:32;10354:2;;;-1:-1;;10392:12;10354:2;10420:22;10382:6;10420:22;;;10411:31;;;10532:49;10577:3;10553:22;10532:49;;;10514:16;10507:75;10684:49;10729:3;10651:2;10709:9;10705:22;10684:49;;;10651:2;10670:5;10666:16;10659:75;10843:49;10888:3;10810:2;10868:9;10864:22;10843:49;;;10810:2;10829:5;10825:16;10818:75;10996:49;11041:3;10963:2;11021:9;11017:22;10996:49;;;10963:2;10982:5;10978:16;10971:75;11119:3;11178:9;11174:22;15815:20;11119:3;11139:5;11135:16;11128:75;11276:3;11335:9;11331:22;15815:20;11276:3;11296:5;11292:16;11285:75;11425:3;11484:9;11480:22;15815:20;11425:3;11445:5;11441:16;11434:75;11574:3;11633:9;11629:22;15815:20;11574:3;11594:5;11590:16;11583:75;11736:3;;11797:9;11793:22;15815:20;11736:3;11756:5;11752:18;11745:77;;11883:3;;11944:9;11940:22;15815:20;11883:3;11903:5;11899:18;11892:77;;12068:3;;12057:9;12053:19;12040:33;12093:18;;12085:6;12082:30;12079:2;;;10500:1;;12115:12;12079:2;12162:54;12212:3;12203:6;12192:9;12188:22;12162:54;;;12068:3;12146:5;12142:18;12135:82;12316:3;;;;12305:9;12301:19;12288:33;12274:47;;12093:18;12333:6;12330:30;12327:2;;;10500:1;;12363:12;12327:2;12410:54;12460:3;12451:6;12440:9;12436:22;12410:54;;;12316:3;12394:5;12390:18;12383:82;12567:3;;;;12556:9;12552:19;12539:33;12525:47;;12093:18;12584:6;12581:30;12578:2;;;10500:1;;12614:12;12578:2;12661:54;12711:3;12702:6;12691:9;12687:22;12661:54;;;12567:3;12645:5;12641:18;12634:82;12818:3;;;;12807:9;12803:19;12790:33;12776:47;;12093:18;12835:6;12832:30;12829:2;;;10500:1;;12865:12;12829:2;;12912:54;12962:3;12953:6;12942:9;12938:22;12912:54;;;12818:3;12896:5;12892:18;12885:82;;;10348:2640;;;;;16026:263;;16141:2;16129:9;16120:7;16116:23;16112:32;16109:2;;;-1:-1;;16147:12;16109:2;226:6;220:13;238:33;265:5;238:33;;16582:431;;;16730:2;16718:9;16709:7;16705:23;16701:32;16698:2;;;-1:-1;;16736:12;16698:2;375:6;369:13;387:41;422:5;387:41;;;16907:2;16965:22;;369:13;16788:82;;-1:-1;387:41;369:13;387:41;;;16915:82;;;;16692:321;;;;;;17020:583;;;;17193:2;17181:9;17172:7;17168:23;17164:32;17161:2;;;-1:-1;;17199:12;17161:2;375:6;369:13;387:41;422:5;387:41;;;17370:2;17428:22;;369:13;17251:82;;-1:-1;387:41;369:13;387:41;;;17497:2;17555:22;;369:13;17378:82;;-1:-1;387:41;369:13;387:41;;;17505:82;;;;17155:448;;;;;;17610:504;;;17755:2;17743:9;17734:7;17730:23;17726:32;17723:2;;;-1:-1;;17761:12;17723:2;375:6;369:13;387:41;422:5;387:41;;;17953:2;17938:18;;17932:25;17813:82;;-1:-1;17977:18;17966:30;;17963:2;;;-1:-1;;17999:12;17963:2;18029:69;18090:7;18081:6;18070:9;18066:22;18029:69;;;18019:79;;;17717:397;;;;;;18121:879;;;;;;18318:3;18306:9;18297:7;18293:23;18289:33;18286:2;;;-1:-1;;18325:12;18286:2;85:6;72:20;97:33;124:5;97:33;;;18377:63;-1:-1;18477:2;18516:22;;72:20;97:33;72:20;97:33;;;18485:63;-1:-1;18585:2;18624:22;;72:20;97:33;72:20;97:33;;;18593:63;-1:-1;18693:2;18732:22;;72:20;97:33;72:20;97:33;;;18701:63;-1:-1;18829:3;18814:19;;18801:33;18854:18;18843:30;;18840:2;;;-1:-1;;18876:12;18840:2;18906:78;18976:7;18967:6;18956:9;18952:22;18906:78;;;18896:88;;;18280:720;;;;;;;;;19007:753;;;;;19187:3;19175:9;19166:7;19162:23;19158:33;19155:2;;;-1:-1;;19194:12;19155:2;85:6;72:20;97:33;124:5;97:33;;;19246:63;-1:-1;19346:2;19385:22;;72:20;97:33;72:20;97:33;;;19354:63;-1:-1;19454:2;19493:22;;72:20;97:33;72:20;97:33;;;19462:63;-1:-1;19590:2;19575:18;;19562:32;19614:18;19603:30;;19600:2;;;-1:-1;;19636:12;19600:2;19666:78;19736:7;19727:6;19716:9;19712:22;19666:78;;;19656:88;;;19149:611;;;;;;;;19767:627;;;;19930:2;19918:9;19909:7;19905:23;19901:32;19898:2;;;-1:-1;;19936:12;19898:2;85:6;72:20;97:33;124:5;97:33;;;19988:63;-1:-1;20088:2;20127:22;;72:20;97:33;72:20;97:33;;;20096:63;-1:-1;20224:2;20209:18;;20196:32;20248:18;20237:30;;20234:2;;;-1:-1;;20270:12;20234:2;20300:78;20370:7;20361:6;20350:9;20346:22;20300:78;;;20290:88;;;19892:502;;;;;;20401:491;;;;20539:2;20527:9;20518:7;20514:23;20510:32;20507:2;;;-1:-1;;20545:12;20507:2;85:6;72:20;97:33;124:5;97:33;;;20597:63;-1:-1;20697:2;20736:22;;72:20;97:33;72:20;97:33;;;20501:391;;20705:63;;-1:-1;;;20805:2;20844:22;;;;15815:20;;20501:391;20899:763;;;;21087:2;21075:9;21066:7;21062:23;21058:32;21055:2;;;-1:-1;;21093:12;21055:2;85:6;72:20;97:33;124:5;97:33;;;21145:63;-1:-1;21273:2;21258:18;;21245:32;21297:18;21286:30;;;21283:2;;;-1:-1;;21319:12;21283:2;21349:78;21419:7;21410:6;21399:9;21395:22;21349:78;;;21339:88;;21492:2;21481:9;21477:18;21464:32;21450:46;;21297:18;21508:6;21505:30;21502:2;;;-1:-1;;21538:12;21502:2;;21568:78;21638:7;21629:6;21618:9;21614:22;21568:78;;21669:638;;;21840:2;21828:9;21819:7;21815:23;21811:32;21808:2;;;-1:-1;;21846:12;21808:2;21904:17;21891:31;21942:18;;21934:6;21931:30;21928:2;;;-1:-1;;21964:12;21928:2;21994:78;22064:7;22055:6;22044:9;22040:22;21994:78;;;21984:88;;22137:2;22126:9;22122:18;22109:32;22095:46;;21942:18;22153:6;22150:30;22147:2;;;-1:-1;;22183:12;22147:2;;22213:78;22283:7;22274:6;22263:9;22259:22;22213:78;;22314:411;;;22460:2;22448:9;22439:7;22435:23;22431:32;22428:2;;;-1:-1;;22466:12;22428:2;22524:17;22511:31;22562:18;;22554:6;22551:30;22548:2;;;-1:-1;;22584:12;22548:2;22692:6;22681:9;22677:22;1326:3;1319:4;1311:6;1307:17;1303:27;1293:2;;-1:-1;;1334:12;1293:2;1377:6;1364:20;1354:30;;22562:18;1396:6;1393:30;1390:2;;;-1:-1;;1426:12;1390:2;1521:3;22460:2;;1505:6;1501:17;1462:6;1487:32;;1484:41;1481:2;;;-1:-1;;1528:12;1481:2;22460;1458:17;;22612:97;;-1:-1;22422:303;;-1:-1;;;;22422:303;22732:783;;;;22930:2;22918:9;22909:7;22905:23;22901:32;22898:2;;;-1:-1;;22936:12;22898:2;22994:17;22981:31;23032:18;;23024:6;23021:30;23018:2;;;-1:-1;;23054:12;23018:2;23084:83;23159:7;23150:6;23139:9;23135:22;23084:83;;;23074:93;;23232:2;23221:9;23217:18;23204:32;23190:46;;23032:18;23248:6;23245:30;23242:2;;;-1:-1;;23278:12;23242:2;;23308:83;23383:7;23374:6;23363:9;23359:22;23308:83;;;23298:93;;;23428:2;23471:9;23467:22;15815:20;23436:63;;22892:623;;;;;;23522:847;;;;23752:2;23740:9;23731:7;23727:23;23723:32;23720:2;;;-1:-1;;23758:12;23720:2;23816:17;23803:31;23854:18;;23846:6;23843:30;23840:2;;;-1:-1;;23876:12;23840:2;23986:6;23975:9;23971:22;2441:3;2434:4;2426:6;2422:17;2418:27;2408:2;;-1:-1;;2449:12;2408:2;2496:6;2483:20;2469:34;;2518:99;2533:83;2609:6;2533:83;;2518:99;2645:21;;;2689:4;2702:14;;;;2623:16;2677:17;;;-1:-1;2782:252;2807:6;2804:1;2801:13;2782:252;;;2914:56;2966:3;2689:4;2890:3;2877:17;2681:6;2865:30;;2914:56;;;2902:69;;2985:14;;;;3013;;;;2829:1;2822:9;2782:252;;;-1:-1;23896:107;;-1:-1;24053:18;;24040:32;;-1:-1;;;;24081:30;;;24078:2;;;-1:-1;;24114:12;24078:2;;24144:83;24219:7;24210:6;24199:9;24195:22;24144:83;;;24134:93;;;24282:71;24345:7;24264:2;24325:9;24321:22;24282:71;;;24272:81;;23714:655;;;;;;24376:384;;24512:2;24500:9;24491:7;24487:23;24483:32;24480:2;;;-1:-1;;24518:12;24480:2;24569:17;24563:24;24607:18;24599:6;24596:30;24593:2;;;-1:-1;;24629:12;24593:2;24659:85;24736:7;24727:6;24716:9;24712:22;24659:85;;24767:536;;;24928:2;24916:9;24907:7;24903:23;24899:32;24896:2;;;-1:-1;;24934:12;24896:2;24985:17;24979:24;25023:18;25015:6;25012:30;25009:2;;;-1:-1;;25045:12;25009:2;25075:85;25152:7;25143:6;25132:9;25128:22;25075:85;;;25065:95;;;25197:2;25259:9;25255:22;369:13;387:41;422:5;387:41;;25310:257;;25422:2;25410:9;25401:7;25397:23;25393:32;25390:2;;;-1:-1;;25428:12;25390:2;4602:6;4596:13;4614:30;4638:5;4614:30;;25574:620;;;;25726:2;25714:9;25705:7;25701:23;25697:32;25694:2;;;-1:-1;;25732:12;25694:2;4602:6;4596:13;4614:30;4638:5;4614:30;;;25913:2;25898:18;;25892:25;25784:71;;-1:-1;25937:18;25926:30;;25923:2;;;-1:-1;;25959:12;25923:2;25989:70;26051:7;26042:6;26031:9;26027:22;25989:70;;;25979:80;;;26096:2;26150:9;26146:22;15963:13;26104:74;;25688:506;;;;;;26201:491;;;;26339:2;26327:9;26318:7;26314:23;26310:32;26307:2;;;-1:-1;;26345:12;26307:2;4736:6;4723:20;26397:63;;26497:2;26540:9;26536:22;72:20;97:33;124:5;97:33;;;26505:63;-1:-1;26605:2;26644:22;;72:20;97:33;72:20;97:33;;26699:753;;;;;26879:3;26867:9;26858:7;26854:23;26850:33;26847:2;;;-1:-1;;26886:12;26847:2;4736:6;4723:20;26938:63;;27038:2;27081:9;27077:22;72:20;97:33;124:5;97:33;;27459:352;;27579:2;27567:9;27558:7;27554:23;27550:32;27547:2;;;-1:-1;;27585:12;27547:2;27636:17;27630:24;27674:18;27666:6;27663:30;27660:2;;;-1:-1;;27696:12;27660:2;27726:69;27787:7;27778:6;27767:9;27763:22;27726:69;;28185:721;;;;;28349:3;28337:9;28328:7;28324:23;28320:33;28317:2;;;-1:-1;;28356:12;28317:2;28414:17;28401:31;28452:18;28444:6;28441:30;28438:2;;;-1:-1;;28474:12;28438:2;28504:62;28558:7;28549:6;28538:9;28534:22;28504:62;;;28494:72;;;28603:2;28646:9;28642:22;72:20;97:33;124:5;97:33;;;28611:63;-1:-1;28711:2;28750:22;;72:20;97:33;72:20;97:33;;;28311:595;;;;-1:-1;28719:63;;28819:2;28858:22;15815:20;;-1:-1;;28311:595;28913:261;;29027:2;29015:9;29006:7;29002:23;28998:32;28995:2;;;-1:-1;;29033:12;28995:2;7556:6;7550:13;7568:32;7594:5;7568:32;;29181:442;;;29334:3;29322:9;29313:7;29309:23;29305:33;29302:2;;;-1:-1;;29341:12;29302:2;7556:6;7550:13;7568:32;7594:5;7568:32;;;29393:73;-1:-1;8215:4;8194:19;;;;;8190:30;8187:2;;;-1:-1;;8223:12;8187:2;8251:20;8215:4;8251:20;;;29503:2;29579:9;29575:22;220:13;238:33;265:5;238:33;;;8335:86;;8567:22;;;5146:13;5164:32;5146:13;5164:32;;;29503:2;8518:16;;8511:85;8215:4;8741:22;;5146:13;5164:32;5146:13;5164:32;;;8567:22;8692:16;;8685:85;29296:327;;8696:5;;-1:-1;29296:327;;-1:-1;;29296:327;29630:803;;;;;29822:9;29813:7;29809:23;29834:3;29809:23;29805:33;29802:2;;;-1:-1;;29841:12;29802:2;8949:4;8928:19;8924:30;8921:2;;;-1:-1;;8957:12;8921:2;;8985:20;8949:4;8985:20;;;85:6;72:20;97:33;124:5;97:33;;;9069:75;;9226:2;9279:22;;5000:20;5025:32;5000:20;5025:32;;;9226:2;9241:16;;9234:74;9389:2;9442:22;;5000:20;5025:32;5000:20;5025:32;;;9389:2;9404:16;;9397:74;9408:5;-1:-1;8949:4;30057:22;;7404:20;7429:32;7404:20;7429:32;;;30027:62;-1:-1;30126:3;30165:22;;7404:20;7429:32;7404:20;7429:32;;;30135:62;-1:-1;30262:3;30247:19;;30234:33;30287:18;30276:30;;30273:2;;;-1:-1;;30309:12;30440:317;;30582:2;30570:9;30561:7;30557:23;30553:32;30550:2;;;-1:-1;;30588:12;30550:2;9694:20;30582:2;9694:20;;;7265:6;7259:13;78961:1;78954:5;78951:12;78941:2;;-1:-1;;78967:12;78941:2;9778:102;;9946:2;10011:22;;;4871:13;9961:16;;;9954:86;10124:2;10189:22;;;15963:13;10139:16;;;10132:86;;;;-1:-1;9785:16;30544:213;-1:-1;30544:213;30764:763;;;;30952:2;30940:9;30931:7;30927:23;30923:32;30920:2;;;-1:-1;;30958:12;30920:2;31016:17;31003:31;31054:18;;31046:6;31043:30;31040:2;;;-1:-1;;31076:12;31040:2;31106:76;31174:7;31165:6;31154:9;31150:22;31106:76;;;31096:86;;31247:2;31236:9;31232:18;31219:32;31205:46;;31054:18;31263:6;31260:30;31257:2;;;-1:-1;;31293:12;31257:2;;31323:62;31377:7;31368:6;31357:9;31353:22;31323:62;;;31313:72;;;31422:2;31483:9;31479:22;7077:20;7102:51;7147:5;7102:51;;31534:263;;31649:2;31637:9;31628:7;31624:23;31620:32;31617:2;;;-1:-1;;31655:12;31617:2;-1:-1;15963:13;;31611:186;-1:-1;31611:186;32536:103;75774:42;75763:54;32597:37;;32591:48;33526:690;;33719:5;71632:12;73209:6;73204:3;73197:19;73246:4;73241:3;73237:14;33731:93;;73246:4;33895:5;70853:14;-1:-1;33934:260;33959:6;33956:1;33953:13;33934:260;;;34020:13;;36761:37;;73246:4;32140:14;;;;72591;;;;33981:1;33974:9;33934:260;;;-1:-1;34200:10;;33650:566;-1:-1;;;;33650:566;37491:343;;37633:5;71632:12;73209:6;73204:3;73197:19;37726:52;37771:6;73246:4;73241:3;73237:14;73246:4;37752:5;37748:16;37726:52;;;77708:2;77688:14;77704:7;77684:28;37790:39;;;;73246:4;37790:39;;37581:253;-1:-1;;37581:253;40802:676;41020:23;;75774:42;75763:54;32597:37;;41212:4;41201:16;;;41195:23;74935:66;74924:78;;;41270:14;;;36989:36;;;;41384:4;41373:16;;;41367:23;74924:78;41442:14;;36989:36;40920:558;41552:578;;41782:16;41776:23;36768:3;36761:37;41953:4;41946:5;41942:16;41936:23;41703:4;41953;41983:3;41979:14;41972:38;42025:67;41703:4;41698:3;41694:14;42073:12;42025:67;;42190:2780;;42337:6;42442:63;42490:14;42419:16;42413:23;42442:63;;;42592:4;42585:5;42581:16;42575:23;42604:63;42592:4;42656:3;42652:14;42638:12;42604:63;;;;42761:4;42754:5;42750:16;42744:23;42773:63;42761:4;42825:3;42821:14;42807:12;42773:63;;;;42924:4;42917:5;42913:16;42907:23;42936:63;42924:4;42988:3;42984:14;42970:12;42936:63;;;;43090:4;43083:5;43079:16;43073:23;43090:4;43154:3;43150:14;36761:37;43256:4;43249:5;43245:16;43239:23;43256:4;43320:3;43316:14;36761:37;43414:4;43407:5;43403:16;43397:23;43414:4;43478:3;43474:14;36761:37;43572:4;43565:5;43561:16;43555:23;43572:4;43636:3;43632:14;36761:37;43743:6;;43736:5;43732:18;43726:25;43743:6;43809:3;43805:16;36761:37;;43901:6;;43894:5;43890:18;43884:25;43901:6;43967:3;43963:16;36761:37;;44069:6;;44062:5;44058:18;44052:25;42337:6;44069;44101:3;44097:16;44090:40;44145:67;42337:6;42332:3;42328:16;44193:12;44145:67;;;44137:75;;;44307:6;;;;44300:5;44296:18;44290:25;44363:3;44357:4;44353:14;44307:6;44339:3;44335:16;44328:40;44383:67;44445:4;44431:12;44383:67;;;44375:75;;;;44548:6;;44541:5;44537:18;44531:25;44604:3;44598:4;44594:14;44548:6;44580:3;44576:16;44569:40;44624:67;44686:4;44672:12;44624:67;;;44616:75;;;44789:6;;;;44782:5;44778:18;44772:25;44845:3;44839:4;44835:14;44789:6;44821:3;44817:16;44810:40;44865:67;44927:4;44913:12;44865:67;;48043:274;;77271:6;77266:3;77261;77248:30;77309:16;;77302:27;;;77309:16;48174:143;-1:-1;48174:143;48324:254;;38001:5;71632:12;38112:52;38157:6;38152:3;38145:4;38138:5;38134:16;38112:52;;;38176:16;;;;;48445:133;-1:-1;;48445:133;48854:213;75774:42;75763:54;;;;32597:37;;48972:2;48957:18;;48943:124;49074:324;75774:42;75763:54;;;32597:37;;75763:54;;49384:2;49369:18;;32597:37;49220:2;49205:18;;49191:207;49405:435;75774:42;75763:54;;;32597:37;;75763:54;;;49743:2;49728:18;;32597:37;75763:54;;;49826:2;49811:18;;32597:37;49579:2;49564:18;;49550:290;49847:695;;75774:42;;74568:5;75763:54;32604:3;32597:37;75774:42;74568:5;75763:54;50264:2;50253:9;50249:18;32597:37;75774:42;74568:5;75763:54;50347:2;50336:9;50332:18;32597:37;;50099:3;50384:2;50373:9;50369:18;50362:48;50424:108;50099:3;50088:9;50084:19;50518:6;50424:108;;50549:547;75774:42;75763:54;;;32597:37;;75763:54;;;50916:2;50901:18;;32597:37;75763:54;;50999:2;50984:18;;32597:37;51082:2;51067:18;;36761:37;;;;50751:3;50736:19;;50722:374;51103:583;;75774:42;;32627:5;75763:54;32604:3;32597:37;75774:42;32627:5;75763:54;51491:2;51480:9;51476:18;32597:37;;51327:2;51528;51517:9;51513:18;51506:48;51568:108;51327:2;51316:9;51312:18;51662:6;51568:108;;51693:435;75774:42;75763:54;;;32597:37;;75763:54;;;;52031:2;52016:18;;32597:37;52114:2;52099:18;;36761:37;;;;51867:2;51852:18;;51838:290;52135:755;;75774:42;;32627:5;75763:54;32604:3;32597:37;75774:42;32627:5;75763:54;52554:2;52543:9;52539:18;32597:37;;36791:5;52637:2;52626:9;52622:18;36761:37;75979:4;75972:5;75968:16;52726:2;52715:9;52711:18;40282:56;52389:3;52763;52752:9;52748:19;52741:49;52804:76;52389:3;52378:9;52374:19;52866:6;52804:76;;;52796:84;52360:530;-1:-1;;;;;;;52360:530;52897:408;;75774:42;32627:5;75763:54;32604:3;32597:37;53061:2;53179;53168:9;53164:18;53157:48;53219:76;53061:2;53050:9;53046:18;53281:6;53219:76;;53312:859;;75774:42;74568:5;75763:54;32604:3;32597:37;75218:53;75265:5;75218:53;;;77020:38;53799:2;53788:9;53784:18;40014:62;53622:3;53836:2;53825:9;53821:18;53814:48;53876:108;53622:3;53611:9;53607:19;53970:6;53876:108;;;54032:9;54026:4;54022:20;54017:2;54006:9;54002:18;53995:48;54057:104;54156:4;54147:6;54057:104;;54178:1619;;54708:3;75774:42;;74568:5;75763:54;32604:3;32597:37;75218:53;75265:5;75218:53;;;77020:38;54885:2;54874:9;54870:18;40014:62;54708:3;54922:2;54911:9;54907:18;54900:48;54962:108;54708:3;54697:9;54693:19;55056:6;54962:108;;;55118:9;55112:4;55108:20;55103:2;55092:9;55088:18;55081:48;55143:104;55242:4;55233:6;55143:104;;;75763:54;;;55326:3;55311:19;;32597:37;-1:-1;55135:112;-1:-1;75218:53;75265:5;75218:53;;;77020:38;55422:3;55411:9;55407:19;40014:62;55476:9;55470:4;55466:20;55460:3;55449:9;55445:19;55438:49;55501:108;55604:4;55595:6;55501:108;;;55658:9;55652:4;55648:20;55642:3;55631:9;55627:19;55620:49;55683:104;55782:4;55773:6;55683:104;;;55675:112;54679:1118;-1:-1;;;;;;;;;;;;54679:1118;55804:324;75774:42;75763:54;;;;32597:37;;56114:2;56099:18;;36761:37;55950:2;55935:18;;55921:207;56135:381;;56313:2;;56302:9;56298:18;56313:2;56334:17;56327:47;56388:118;34459:5;71632:12;73209:6;73204:3;73197:19;73237:14;56302:9;73237:14;34471:98;;73237:14;56313:2;34626:6;34622:17;56302:9;34613:27;;34601:39;;56313:2;34716:5;70853:14;-1:-1;34755:345;34780:6;34777:1;34774:13;34755:345;;;34832:20;56302:9;34836:4;34832:20;;34827:3;34820:33;32280:60;32336:3;34887:6;34881:13;32280:60;;;34901:82;-1:-1;35079:14;;;;72591;;;;34802:1;34795:9;34755:345;;;-1:-1;56380:126;;56284:232;-1:-1;;;;;;;56284:232;56523:361;;56691:2;56712:17;56705:47;56766:108;56691:2;56680:9;56676:18;56860:6;56766:108;;56891:472;;57087:2;57108:17;57101:47;57162:108;57087:2;57076:9;57072:18;57256:6;57162:108;;;57154:116;;75774:42;74568:5;75763:54;57349:2;57338:9;57334:18;32597:37;57058:305;;;;;;57370:571;;36681:5;74758:13;74751:21;36661:3;36654:34;75774:42;74568:5;75763:54;57746:2;57735:9;57731:18;32597:37;57588:2;57783;57772:9;57768:18;57761:48;57823:108;57588:2;57577:9;57573:18;57917:6;57823:108;;57948:435;36761:37;;;75774:42;75763:54;;;58286:2;58271:18;;32597:37;75763:54;58369:2;58354:18;;32597:37;58122:2;58107:18;;58093:290;58390:519;;36791:5;36768:3;36761:37;75774:42;74568:5;75763:54;58746:2;58735:9;58731:18;32597:37;58582:2;58783;58772:9;58768:18;58761:48;58823:76;58582:2;58571:9;58567:18;58885:6;58823:76;;58916:209;74935:66;74924:78;;;;36989:36;;59032:2;59017:18;;59003:122;59132:297;;59268:2;59289:17;59282:47;59343:76;59268:2;59257:9;59253:18;59405:6;59343:76;;59436:631;;59656:3;59678:17;59671:47;59732:76;59656:3;59645:9;59641:19;59794:6;59732:76;;;75774:42;75763:54;;;59887:2;59872:18;;32597:37;75763:54;;;;59970:2;59955:18;;32597:37;60053:2;60038:18;36761:37;59724:84;59627:440;-1:-1;;59627:440;60074:556;;60288:2;60309:17;60302:47;60363:76;60288:2;60277:9;60273:18;60425:6;60363:76;;;60487:9;60481:4;60477:20;60472:2;60461:9;60457:18;60450:48;60512:108;60615:4;60606:6;60512:108;;60637:510;;75774:42;74568:5;75763:54;39319:3;39312:68;60852:2;60989;60978:9;60974:18;60967:48;61029:108;60852:2;60841:9;60837:18;61123:6;61029:108;;61154:471;61346:2;61331:18;;75218:53;75265:5;75218:53;;;39652:68;;;61528:2;61513:18;;36761:37;;;;61611:2;61596:18;;;36761:37;61317:308;;61632:501;61839:2;61824:18;;77947:1;77937:12;;77927:2;;77953:9;62140:427;75679:2;75668:21;;;40157:36;;75668:21;;;;62470:2;62455:18;;40157:36;62553:2;62538:18;;36761:37;;;;62310:2;62295:18;;62281:286;62574:425;75679:2;75668:21;;;40157:36;;62770:3;62755:19;;62865:124;62985:2;62970:18;;62961:6;62865:124;;63006:407;63197:2;63211:47;;;40575:2;63182:18;;;73197:19;40611:34;73237:14;;;40591:55;40680:7;40666:12;;;40659:29;40707:12;;;63168:245;63420:793;;63735:123;63840:17;63831:6;63735:123;;;40186:5;75679:2;75668:21;63935:2;63924:9;63920:18;40157:36;40186:5;75679:2;75668:21;64016:3;64005:9;64001:19;40157:36;63720:3;64054;64043:9;64039:19;64032:49;64095:108;63720:3;63709:9;63705:19;64189:6;64095:108;;64220:731;;64494:2;64515:17;64508:47;64569:108;64494:2;64483:9;64479:18;64663:6;64569:108;;;64725:9;64719:4;64715:20;64710:2;64699:9;64695:18;64688:48;64750:108;64853:4;64844:6;64750:108;;;64742:116;;;36791:5;64937:2;64926:9;64922:18;36761:37;64465:486;;;;;;;64958:353;;65122:2;65143:17;65136:47;65197:104;65122:2;65111:9;65107:18;65287:6;65197:104;;65318:679;;65566:2;65587:17;65580:47;65641:100;65566:2;65555:9;65551:18;65727:6;65641:100;;;65789:9;65783:4;65779:20;65774:2;65763:9;65759:18;65752:48;65814:72;65881:4;65872:6;65814:72;;;65806:80;;;75774:42;74568:5;75763:54;65983:2;65972:9;65968:18;39312:68;65537:460;;;;;;;66004:213;36761:37;;;66122:2;66107:18;;66093:124;66224:472;;66420:2;66409:9;66405:18;36791:5;36768:3;36761:37;66420:2;66538;66527:9;66523:18;66516:48;66578:108;32990:5;71632:12;73209:6;73204:3;73197:19;73237:14;66409:9;73237:14;33002:93;;66538:2;33166:5;70853:14;33178:21;;-1:-1;33205:260;33230:6;33227:1;33224:13;33205:260;;;33291:13;;75774:42;75763:54;32597:37;;66538:2;72591:14;;;;31958;;;;33252:1;33245:9;33205:260;;;-1:-1;66570:116;;66391:305;-1:-1;;;;;;66391:305;66703:435;36761:37;;;67041:2;67026:18;;36761:37;;;;67124:2;67109:18;;36761:37;66877:2;66862:18;;66848:290;67145:771;36761:37;;;67568:2;67553:18;;36761:37;;;;67651:2;67636:18;;36761:37;;;;67734:2;67719:18;;36761:37;67817:3;67802:19;;36761:37;67901:3;67886:19;;36761:37;67403:3;67388:19;;67374:542;67923:256;67985:2;67979:9;68011:17;;;68086:18;68071:34;;68107:22;;;68068:62;68065:2;;;68143:1;;68133:12;68065:2;67985;68152:22;67963:216;;-1:-1;67963:216;68186:304;;68345:18;68337:6;68334:30;68331:2;;;-1:-1;;68367:12;68331:2;-1:-1;68412:4;68400:17;;;68465:15;;68268:222;69761:317;;69900:18;69892:6;69889:30;69886:2;;;-1:-1;;69922:12;69886:2;-1:-1;69999:4;69976:17;69995:9;69972:33;70063:4;70053:15;;69823:255;77344:268;77409:1;77416:101;77430:6;77427:1;77424:13;77416:101;;;77497:11;;;77491:18;77478:11;;;77471:39;77452:2;77445:10;77416:101;;;77532:6;77529:1;77526:13;77523:2;;;77409:1;77588:6;77583:3;77579:16;77572:27;77523:2;;77393:219;;;;77725:111;77814:1;77807:5;77804:12;77794:2;;77820:9;77794:2;77788:48;;78088:117;75774:42;78175:5;75763:54;78150:5;78147:35;78137:2;;78196:1;;78186:12;78352:111;78433:5;74758:13;74751:21;78411:5;78408:32;78398:2;;78454:1;;78444:12;78594:115;74935:66;78679:5;74924:78;78655:5;78652:34;78642:2;;78700:1;;78690:12;78993:115;79078:5;75679:2;75668:21;79054:5;79051:34;79041:2;;79099:1;;79089:12"
            }
        }
    },
    "sourceTreeHashHex": "0x5008060ab796229537f81db311e711da28ca41ecb56f8fe02533280ad304764e",
    "sources": {
        "./ERC20BridgeSampler.sol": {
            "id": 4
        },
        "./BalancerSampler.sol": {
            "id": 1
        },
        "./interfaces/IBalancer.sol": {
            "id": 19
        },
        "./CurveSampler.sol": {
            "id": 2
        },
        "./interfaces/ICurve.sol": {
            "id": 20
        },
        "./ApproximateBuys.sol": {
            "id": 0
        },
        "@0x/contracts-exchange-libs/contracts/src/LibMath.sol": {
            "id": 36
        },
        "@0x/contracts-utils/contracts/src/LibSafeMath.sol": {
            "id": 54
        },
        "@0x/contracts-utils/contracts/src/LibRichErrors.sol": {
            "id": 53
        },
        "@0x/contracts-utils/contracts/src/LibSafeMathRichErrors.sol": {
            "id": 55
        },
        "@0x/contracts-exchange-libs/contracts/src/LibMathRichErrors.sol": {
            "id": 37
        },
        "./SamplerUtils.sol": {
            "id": 13
        },
        "@0x/contracts-erc20/contracts/src/LibERC20Token.sol": {
            "id": 33
        },
        "@0x/contracts-utils/contracts/src/LibBytes.sol": {
            "id": 50
        },
        "@0x/contracts-utils/contracts/src/LibBytesRichErrors.sol": {
            "id": 51
        },
        "@0x/contracts-erc20/contracts/src/interfaces/IERC20Token.sol": {
            "id": 34
        },
        "./DODOSampler.sol": {
            "id": 3
        },
        "@0x/contracts-utils/contracts/src/DeploymentConstants.sol": {
            "id": 49
        },
        "./Eth2DaiSampler.sol": {
            "id": 5
        },
        "./interfaces/IEth2Dai.sol": {
            "id": 21
        },
        "./KyberSampler.sol": {
            "id": 7
        },
        "./interfaces/IKyberNetwork.sol": {
            "id": 22
        },
        "./LiquidityProviderSampler.sol": {
            "id": 8
        },
        "./interfaces/ILiquidityProvider.sol": {
            "id": 23
        },
        "./interfaces/ILiquidityProviderRegistry.sol": {
            "id": 24
        },
        "./MultiBridgeSampler.sol": {
            "id": 11
        },
        "./interfaces/IMultiBridge.sol": {
            "id": 26
        },
        "./MStableSampler.sol": {
            "id": 9
        },
        "./interfaces/IMStable.sol": {
            "id": 25
        },
        "./MooniswapSampler.sol": {
            "id": 10
        },
        "./IMooniswap.sol": {
            "id": 6
        },
        "./NativeOrderSampler.sol": {
            "id": 12
        },
        "@0x/contracts-exchange/contracts/src/interfaces/IExchange.sol": {
            "id": 41
        },
        "@0x/contracts-exchange/contracts/src/interfaces/IExchangeCore.sol": {
            "id": 42
        },
        "@0x/contracts-exchange-libs/contracts/src/LibOrder.sol": {
            "id": 38
        },
        "@0x/contracts-utils/contracts/src/LibEIP712.sol": {
            "id": 52
        },
        "@0x/contracts-exchange-libs/contracts/src/LibFillResults.sol": {
            "id": 35
        },
        "@0x/contracts-exchange/contracts/src/interfaces/IProtocolFees.sol": {
            "id": 44
        },
        "@0x/contracts-exchange/contracts/src/interfaces/IMatchOrders.sol": {
            "id": 43
        },
        "@0x/contracts-exchange/contracts/src/interfaces/ISignatureValidator.sol": {
            "id": 45
        },
        "@0x/contracts-exchange-libs/contracts/src/LibZeroExTransaction.sol": {
            "id": 39
        },
        "@0x/contracts-exchange/contracts/src/interfaces/ITransactions.sol": {
            "id": 46
        },
        "@0x/contracts-exchange/contracts/src/interfaces/IAssetProxyDispatcher.sol": {
            "id": 40
        },
        "@0x/contracts-exchange/contracts/src/interfaces/IWrapperFunctions.sol": {
            "id": 48
        },
        "@0x/contracts-exchange/contracts/src/interfaces/ITransferSimulator.sol": {
            "id": 47
        },
        "./ShellSampler.sol": {
            "id": 14
        },
        "./interfaces/IShell.sol": {
            "id": 27
        },
        "./SushiSwapSampler.sol": {
            "id": 15
        },
        "./interfaces/IUniswapV2Router01.sol": {
            "id": 29
        },
        "./TwoHopSampler.sol": {
            "id": 16
        },
        "./UniswapSampler.sol": {
            "id": 17
        },
        "@0x/contracts-asset-proxy/contracts/src/interfaces/IUniswapExchangeFactory.sol": {
            "id": 32
        },
        "@0x/contracts-asset-proxy/contracts/src/interfaces/IUniswapExchange.sol": {
            "id": 31
        },
        "./interfaces/IUniswapExchangeQuotes.sol": {
            "id": 28
        },
        "./UniswapV2Sampler.sol": {
            "id": 18
        }
    },
    "sourceCodes": {
        "./ERC20BridgeSampler.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"./BalancerSampler.sol\";\nimport \"./CurveSampler.sol\";\nimport \"./DODOSampler.sol\";\nimport \"./Eth2DaiSampler.sol\";\nimport \"./KyberSampler.sol\";\nimport \"./LiquidityProviderSampler.sol\";\nimport \"./MultiBridgeSampler.sol\";\nimport \"./MStableSampler.sol\";\nimport \"./MooniswapSampler.sol\";\nimport \"./NativeOrderSampler.sol\";\nimport \"./ShellSampler.sol\";\nimport \"./SushiSwapSampler.sol\";\nimport \"./TwoHopSampler.sol\";\nimport \"./UniswapSampler.sol\";\nimport \"./UniswapV2Sampler.sol\";\n\n\ncontract ERC20BridgeSampler is\n    BalancerSampler,\n    CurveSampler,\n    DODOSampler,\n    Eth2DaiSampler,\n    KyberSampler,\n    LiquidityProviderSampler,\n    MStableSampler,\n    MooniswapSampler,\n    MultiBridgeSampler,\n    NativeOrderSampler,\n    ShellSampler,\n    SushiSwapSampler,\n    TwoHopSampler,\n    UniswapSampler,\n    UniswapV2Sampler\n{\n    /// @dev Call multiple public functions on this contract in a single transaction.\n    /// @param callDatas ABI-encoded call data for each function call.\n    /// @return callResults ABI-encoded results data for each call.\n    function batchCall(bytes[] calldata callDatas)\n        external\n        view\n        returns (bytes[] memory callResults)\n    {\n        callResults = new bytes[](callDatas.length);\n        for (uint256 i = 0; i != callDatas.length; ++i) {\n            if (callDatas[i].length == 0) {\n                continue;\n            }\n            (bool didSucceed, bytes memory resultData) = address(this).staticcall(callDatas[i]);\n            if (!didSucceed) {\n                assembly { revert(add(resultData, 0x20), mload(resultData)) }\n            }\n            callResults[i] = resultData;\n        }\n    }\n}\n",
        "./BalancerSampler.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IBalancer.sol\";\n\n\ncontract BalancerSampler {\n\n    /// @dev Base gas limit for Balancer calls.\n    uint256 constant private BALANCER_CALL_GAS = 300e3; // 300k\n\n    // Balancer math constants\n    // https://github.com/balancer-labs/balancer-core/blob/master/contracts/BConst.sol\n    uint256 constant private BONE = 10 ** 18;\n    uint256 constant private MAX_IN_RATIO = BONE / 2;\n    uint256 constant private MAX_OUT_RATIO = (BONE / 3) + 1 wei;\n\n    struct BalancerState {\n        uint256 takerTokenBalance;\n        uint256 makerTokenBalance;\n        uint256 takerTokenWeight;\n        uint256 makerTokenWeight;\n        uint256 swapFee;\n    }\n\n    /// @dev Sample sell quotes from Balancer.\n    /// @param poolAddress Address of the Balancer pool to query.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromBalancer(\n        address poolAddress,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        IBalancer pool = IBalancer(poolAddress);\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        if (!pool.isBound(takerToken) || !pool.isBound(makerToken)) {\n            return makerTokenAmounts;\n        }\n\n        BalancerState memory poolState;\n        poolState.takerTokenBalance = pool.getBalance(takerToken);\n        poolState.makerTokenBalance = pool.getBalance(makerToken);\n        poolState.takerTokenWeight = pool.getDenormalizedWeight(takerToken);\n        poolState.makerTokenWeight = pool.getDenormalizedWeight(makerToken);\n        poolState.swapFee = pool.getSwapFee();\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            // Handles this revert scenario:\n            // https://github.com/balancer-labs/balancer-core/blob/master/contracts/BPool.sol#L443\n            if (takerTokenAmounts[i] > _bmul(poolState.takerTokenBalance, MAX_IN_RATIO)) {\n                break;\n            }\n            (bool didSucceed, bytes memory resultData) =\n                poolAddress.staticcall.gas(BALANCER_CALL_GAS)(\n                    abi.encodeWithSelector(\n                        pool.calcOutGivenIn.selector,\n                        poolState.takerTokenBalance,\n                        poolState.takerTokenWeight,\n                        poolState.makerTokenBalance,\n                        poolState.makerTokenWeight,\n                        takerTokenAmounts[i],\n                        poolState.swapFee\n                    ));\n            uint256 buyAmount = 0;\n            if (didSucceed) {\n                buyAmount = abi.decode(resultData, (uint256));\n            } else {\n                break;\n            }\n            makerTokenAmounts[i] = buyAmount;\n        }\n    }\n\n    /// @dev Sample buy quotes from Balancer.\n    /// @param poolAddress Address of the Balancer pool to query.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromBalancer(\n        address poolAddress,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        IBalancer pool = IBalancer(poolAddress);\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n        if (!pool.isBound(takerToken) || !pool.isBound(makerToken)) {\n            return takerTokenAmounts;\n        }\n\n        BalancerState memory poolState;\n        poolState.takerTokenBalance = pool.getBalance(takerToken);\n        poolState.makerTokenBalance = pool.getBalance(makerToken);\n        poolState.takerTokenWeight = pool.getDenormalizedWeight(takerToken);\n        poolState.makerTokenWeight = pool.getDenormalizedWeight(makerToken);\n        poolState.swapFee = pool.getSwapFee();\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            // Handles this revert scenario:\n            // https://github.com/balancer-labs/balancer-core/blob/master/contracts/BPool.sol#L505\n            if (makerTokenAmounts[i] > _bmul(poolState.makerTokenBalance, MAX_OUT_RATIO)) {\n                break;\n            }\n            (bool didSucceed, bytes memory resultData) =\n                poolAddress.staticcall.gas(BALANCER_CALL_GAS)(\n                    abi.encodeWithSelector(\n                        pool.calcInGivenOut.selector,\n                        poolState.takerTokenBalance,\n                        poolState.takerTokenWeight,\n                        poolState.makerTokenBalance,\n                        poolState.makerTokenWeight,\n                        makerTokenAmounts[i],\n                        poolState.swapFee\n                    ));\n            uint256 sellAmount = 0;\n            if (didSucceed) {\n                sellAmount = abi.decode(resultData, (uint256));\n            } else {\n                break;\n            }\n            takerTokenAmounts[i] = sellAmount;\n        }\n    }\n\n    /// @dev Hacked version of Balancer's `bmul` function, returning 0 instead\n    ///      of reverting.\n    ///      https://github.com/balancer-labs/balancer-core/blob/master/contracts/BNum.sol#L63-L73\n    /// @param a The first operand.\n    /// @param b The second operand.\n    /// @param c The result of the multiplication, or 0 if `bmul` would've reverted.\n    function _bmul(uint256 a, uint256 b)\n        private\n        pure\n        returns (uint256 c)\n    {\n        uint c0 = a * b;\n        if (a != 0 && c0 / a != b) {\n            return 0;\n        }\n        uint c1 = c0 + (BONE / 2);\n        if (c1 < c0) {\n            return 0;\n        }\n        uint c2 = c1 / BONE;\n        return c2;\n    }\n}\n",
        "./interfaces/IBalancer.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\ninterface IBalancer {\n    function isBound(address t) external view returns (bool);\n    function getDenormalizedWeight(address token) external view returns (uint256);\n    function getBalance(address token) external view returns (uint256);\n    function getSwapFee() external view returns (uint256);\n    function calcOutGivenIn(\n        uint256 tokenBalanceIn,\n        uint256 tokenWeightIn,\n        uint256 tokenBalanceOut,\n        uint256 tokenWeightOut,\n        uint256 tokenAmountIn,\n        uint256 swapFee\n    ) external pure returns (uint256 tokenAmountOut);\n    function calcInGivenOut(\n        uint256 tokenBalanceIn,\n        uint256 tokenWeightIn,\n        uint256 tokenBalanceOut,\n        uint256 tokenWeightOut,\n        uint256 tokenAmountOut,\n        uint256 swapFee\n    ) external pure returns (uint256 tokenAmountIn);\n}\n",
        "./CurveSampler.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/ICurve.sol\";\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\n\n\ncontract CurveSampler is\n    SamplerUtils,\n    ApproximateBuys\n{\n    /// @dev Information for sampling from curve sources.\n    struct CurveInfo {\n        address poolAddress;\n        bytes4 sellQuoteFunctionSelector;\n        bytes4 buyQuoteFunctionSelector;\n    }\n\n    /// @dev Base gas limit for Curve calls. Some Curves have multiple tokens\n    ///      So a reasonable ceil is 150k per token. Biggest Curve has 4 tokens.\n    uint256 constant private CURVE_CALL_GAS = 2000e3; // Was 600k for Curve but SnowSwap is using 1500k+\n\n    /// @dev Sample sell quotes from Curve.\n    /// @param curveInfo Curve information specific to this token pair.\n    /// @param fromTokenIdx Index of the taker token (what to sell).\n    /// @param toTokenIdx Index of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromCurve(\n        CurveInfo memory curveInfo,\n        int128 fromTokenIdx,\n        int128 toTokenIdx,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            (bool didSucceed, bytes memory resultData) =\n                curveInfo.poolAddress.staticcall.gas(CURVE_CALL_GAS)(\n                    abi.encodeWithSelector(\n                        curveInfo.sellQuoteFunctionSelector,\n                        fromTokenIdx,\n                        toTokenIdx,\n                        takerTokenAmounts[i]\n                    ));\n            uint256 buyAmount = 0;\n            if (didSucceed) {\n                buyAmount = abi.decode(resultData, (uint256));\n            }\n            // Exit early if the amount is too high for the source to serve\n            if (buyAmount == 0) {\n                break;\n            }\n            makerTokenAmounts[i] = buyAmount;\n        }\n    }\n\n    /// @dev Sample buy quotes from Curve.\n    /// @param curveInfo Curve information specific to this token pair.\n    /// @param fromTokenIdx Index of the taker token (what to sell).\n    /// @param toTokenIdx Index of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromCurve(\n        CurveInfo memory curveInfo,\n        int128 fromTokenIdx,\n        int128 toTokenIdx,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        if (curveInfo.buyQuoteFunctionSelector == bytes4(0)) {\n            // Buys not supported on this curve, so approximate it.\n            return _sampleApproximateBuys(\n                ApproximateBuyQuoteOpts({\n                    makerTokenData: abi.encode(toTokenIdx, curveInfo),\n                    takerTokenData: abi.encode(fromTokenIdx, curveInfo),\n                    getSellQuoteCallback: _sampleSellForApproximateBuyFromCurve\n                }),\n                makerTokenAmounts\n            );\n        }\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            (bool didSucceed, bytes memory resultData) =\n                curveInfo.poolAddress.staticcall.gas(CURVE_CALL_GAS)(\n                    abi.encodeWithSelector(\n                        curveInfo.buyQuoteFunctionSelector,\n                        fromTokenIdx,\n                        toTokenIdx,\n                        makerTokenAmounts[i]\n                    ));\n            uint256 sellAmount = 0;\n            if (didSucceed) {\n                sellAmount = abi.decode(resultData, (uint256));\n            }\n            // Exit early if the amount is too high for the source to serve\n            if (sellAmount == 0) {\n                break;\n            }\n            takerTokenAmounts[i] = sellAmount;\n        }\n    }\n\n    function _sampleSellForApproximateBuyFromCurve(\n        bytes memory takerTokenData,\n        bytes memory makerTokenData,\n        uint256 sellAmount\n    )\n        private\n        view\n        returns (uint256 buyAmount)\n    {\n        (int128 takerTokenIdx, CurveInfo memory curveInfo) =\n            abi.decode(takerTokenData, (int128, CurveInfo));\n        (int128 makerTokenIdx) =\n            abi.decode(makerTokenData, (int128));\n        (bool success, bytes memory resultData) =\n            address(this).staticcall(abi.encodeWithSelector(\n                this.sampleSellsFromCurve.selector,\n                curveInfo,\n                takerTokenIdx,\n                makerTokenIdx,\n                _toSingleValueArray(sellAmount)\n            ));\n        if (!success) {\n            return 0;\n        }\n        // solhint-disable-next-line indent\n        return abi.decode(resultData, (uint256[]))[0];\n    }\n}\n",
        "./interfaces/ICurve.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\n// solhint-disable func-name-mixedcase\ninterface ICurve {\n\n    /// @dev Sell `sellAmount` of `fromToken` token and receive `toToken` token.\n    ///      This function exists on later versions of Curve (USDC/DAI/USDT)\n    /// @param i The token index being sold.\n    /// @param j The token index being bought.\n    /// @param sellAmount The amount of token being bought.\n    /// @param minBuyAmount The minimum buy amount of the token being bought.\n    function exchange_underlying(\n        int128 i,\n        int128 j,\n        uint256 sellAmount,\n        uint256 minBuyAmount\n    )\n        external;\n\n    /// @dev Get the amount of `toToken` by selling `sellAmount` of `fromToken`\n    /// @param i The token index being sold.\n    /// @param j The token index being bought.\n    /// @param sellAmount The amount of token being bought.\n    function get_dy_underlying(\n        int128 i,\n        int128 j,\n        uint256 sellAmount\n    )\n        external\n        returns (uint256 dy);\n\n    /// @dev Get the amount of `fromToken` by buying `buyAmount` of `toToken`\n    ///      This function exists on later versions of Curve (USDC/DAI/USDT)\n    /// @param i The token index being sold.\n    /// @param j The token index being bought.\n    /// @param buyAmount The amount of token being bought.\n    function get_dx_underlying(\n        int128 i,\n        int128 j,\n        uint256 buyAmount\n    )\n        external\n        returns (uint256 dx);\n\n    /// @dev Get the underlying token address from the token index\n    /// @param i The token index.\n    function underlying_coins(\n        int128 i\n    )\n        external\n        returns (address tokenAddress);\n}\n",
        "./ApproximateBuys.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-exchange-libs/contracts/src/LibMath.sol\";\n\n\ncontract ApproximateBuys {\n\n    /// @dev Information computing buy quotes for sources that do not have native\n    ///      buy quote support.\n    struct ApproximateBuyQuoteOpts {\n        // Arbitrary maker token data to pass to `getSellQuoteCallback`.\n        bytes makerTokenData;\n        // Arbitrary taker token data to pass to `getSellQuoteCallback`.\n        bytes takerTokenData;\n        // Callback to retrieve a sell quote.\n        function (bytes memory, bytes memory, uint256)\n            internal\n            view\n            returns (uint256) getSellQuoteCallback;\n    }\n\n    uint256 private constant ONE_HUNDED_PERCENT_BPS = 1e4;\n    /// @dev Maximum approximate (positive) error rate when approximating a buy quote.\n    uint256 private constant APPROXIMATE_BUY_TARGET_EPSILON_BPS = 0.0005e4;\n    /// @dev Maximum iterations to perform when approximating a buy quote.\n    uint256 private constant APPROXIMATE_BUY_MAX_ITERATIONS = 5;\n\n    function _sampleApproximateBuys(\n        ApproximateBuyQuoteOpts memory opts,\n        uint256[] memory makerTokenAmounts\n    )\n        internal\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        takerTokenAmounts = new uint256[](makerTokenAmounts.length);\n        if (makerTokenAmounts.length == 0) {\n            return takerTokenAmounts;\n        }\n\n        uint256 sellAmount = opts.getSellQuoteCallback(\n            opts.makerTokenData,\n            opts.takerTokenData,\n            makerTokenAmounts[0]\n        );\n        if (sellAmount == 0) {\n            return takerTokenAmounts;\n        }\n\n        uint256 buyAmount = opts.getSellQuoteCallback(\n            opts.takerTokenData,\n            opts.makerTokenData,\n            sellAmount\n        );\n        if (buyAmount == 0) {\n            return takerTokenAmounts;\n        }\n\n        for (uint256 i = 0; i < makerTokenAmounts.length; i++) {\n            for (uint256 iter = 0; iter < APPROXIMATE_BUY_MAX_ITERATIONS; iter++) {\n                // adjustedSellAmount = previousSellAmount * (target/actual) * JUMP_MULTIPLIER\n                sellAmount = _safeGetPartialAmountCeil(\n                    makerTokenAmounts[i],\n                    buyAmount,\n                    sellAmount\n                );\n                if (sellAmount == 0) {\n                    break;\n                }\n                sellAmount = _safeGetPartialAmountCeil(\n                    (ONE_HUNDED_PERCENT_BPS + APPROXIMATE_BUY_TARGET_EPSILON_BPS),\n                    ONE_HUNDED_PERCENT_BPS,\n                    sellAmount\n                );\n                if (sellAmount == 0) {\n                    break;\n                }\n                uint256 _buyAmount = opts.getSellQuoteCallback(\n                    opts.takerTokenData,\n                    opts.makerTokenData,\n                    sellAmount\n                );\n                if (_buyAmount == 0) {\n                    break;\n                }\n                // We re-use buyAmount next iteration, only assign if it is\n                // non zero\n                buyAmount = _buyAmount;\n                // If we've reached our goal, exit early\n                if (buyAmount >= makerTokenAmounts[i]) {\n                    uint256 eps =\n                        (buyAmount - makerTokenAmounts[i]) * ONE_HUNDED_PERCENT_BPS /\n                        makerTokenAmounts[i];\n                    if (eps <= APPROXIMATE_BUY_TARGET_EPSILON_BPS) {\n                        break;\n                    }\n                }\n            }\n            // We do our best to close in on the requested amount, but we can either over buy or under buy and exit\n            // if we hit a max iteration limit\n            // We scale the sell amount to get the approximate target\n            takerTokenAmounts[i] = _safeGetPartialAmountCeil(\n                makerTokenAmounts[i],\n                buyAmount,\n                sellAmount\n            );\n        }\n    }\n\n    function _safeGetPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        view\n        returns (uint256 partialAmount)\n    {\n        if (numerator == 0 || target == 0 || denominator == 0) return 0;\n        uint256 c = numerator * target;\n        if (c / numerator != target) return 0;\n        return (c + (denominator - 1)) / denominator;\n    }\n}\n",
        "@0x/contracts-exchange-libs/contracts/src/LibMath.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\nimport \"@0x/contracts-utils/contracts/src/LibSafeMath.sol\";\nimport \"@0x/contracts-utils/contracts/src/LibRichErrors.sol\";\nimport \"./LibMathRichErrors.sol\";\n\n\nlibrary LibMath {\n\n    using LibSafeMath for uint256;\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    ///      Reverts if rounding error is >= 0.1%\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return Partial value of target rounded down.\n    function safeGetPartialAmountFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        if (isRoundingErrorFloor(\n                numerator,\n                denominator,\n                target\n        )) {\n            LibRichErrors.rrevert(LibMathRichErrors.RoundingError(\n                numerator,\n                denominator,\n                target\n            ));\n        }\n\n        partialAmount = numerator.safeMul(target).safeDiv(denominator);\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    ///      Reverts if rounding error is >= 0.1%\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return Partial value of target rounded up.\n    function safeGetPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        if (isRoundingErrorCeil(\n                numerator,\n                denominator,\n                target\n        )) {\n            LibRichErrors.rrevert(LibMathRichErrors.RoundingError(\n                numerator,\n                denominator,\n                target\n            ));\n        }\n\n        // safeDiv computes `floor(a / b)`. We use the identity (a, b integer):\n        //       ceil(a / b) = floor((a + b - 1) / b)\n        // To implement `ceil(a / b)` using safeDiv.\n        partialAmount = numerator.safeMul(target)\n            .safeAdd(denominator.safeSub(1))\n            .safeDiv(denominator);\n\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return Partial value of target rounded down.\n    function getPartialAmountFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        partialAmount = numerator.safeMul(target).safeDiv(denominator);\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return Partial value of target rounded up.\n    function getPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        // safeDiv computes `floor(a / b)`. We use the identity (a, b integer):\n        //       ceil(a / b) = floor((a + b - 1) / b)\n        // To implement `ceil(a / b)` using safeDiv.\n        partialAmount = numerator.safeMul(target)\n            .safeAdd(denominator.safeSub(1))\n            .safeDiv(denominator);\n\n        return partialAmount;\n    }\n\n    /// @dev Checks if rounding error >= 0.1% when rounding down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to multiply with numerator/denominator.\n    /// @return Rounding error is present.\n    function isRoundingErrorFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bool isError)\n    {\n        if (denominator == 0) {\n            LibRichErrors.rrevert(LibMathRichErrors.DivisionByZeroError());\n        }\n\n        // The absolute rounding error is the difference between the rounded\n        // value and the ideal value. The relative rounding error is the\n        // absolute rounding error divided by the absolute value of the\n        // ideal value. This is undefined when the ideal value is zero.\n        //\n        // The ideal value is `numerator * target / denominator`.\n        // Let's call `numerator * target % denominator` the remainder.\n        // The absolute error is `remainder / denominator`.\n        //\n        // When the ideal value is zero, we require the absolute error to\n        // be zero. Fortunately, this is always the case. The ideal value is\n        // zero iff `numerator == 0` and/or `target == 0`. In this case the\n        // remainder and absolute error are also zero.\n        if (target == 0 || numerator == 0) {\n            return false;\n        }\n\n        // Otherwise, we want the relative rounding error to be strictly\n        // less than 0.1%.\n        // The relative error is `remainder / (numerator * target)`.\n        // We want the relative error less than 1 / 1000:\n        //        remainder / (numerator * denominator)  <  1 / 1000\n        // or equivalently:\n        //        1000 * remainder  <  numerator * target\n        // so we have a rounding error iff:\n        //        1000 * remainder  >=  numerator * target\n        uint256 remainder = mulmod(\n            target,\n            numerator,\n            denominator\n        );\n        isError = remainder.safeMul(1000) >= numerator.safeMul(target);\n        return isError;\n    }\n\n    /// @dev Checks if rounding error >= 0.1% when rounding up.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to multiply with numerator/denominator.\n    /// @return Rounding error is present.\n    function isRoundingErrorCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bool isError)\n    {\n        if (denominator == 0) {\n            LibRichErrors.rrevert(LibMathRichErrors.DivisionByZeroError());\n        }\n\n        // See the comments in `isRoundingError`.\n        if (target == 0 || numerator == 0) {\n            // When either is zero, the ideal value and rounded value are zero\n            // and there is no rounding error. (Although the relative error\n            // is undefined.)\n            return false;\n        }\n        // Compute remainder as before\n        uint256 remainder = mulmod(\n            target,\n            numerator,\n            denominator\n        );\n        remainder = denominator.safeSub(remainder) % denominator;\n        isError = remainder.safeMul(1000) >= numerator.safeMul(target);\n        return isError;\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/LibSafeMath.sol": "pragma solidity ^0.5.9;\n\nimport \"./LibRichErrors.sol\";\nimport \"./LibSafeMathRichErrors.sol\";\n\n\nlibrary LibSafeMath {\n\n    function safeMul(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        if (c / a != b) {\n            LibRichErrors.rrevert(LibSafeMathRichErrors.Uint256BinOpError(\n                LibSafeMathRichErrors.BinOpErrorCodes.MULTIPLICATION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function safeDiv(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b == 0) {\n            LibRichErrors.rrevert(LibSafeMathRichErrors.Uint256BinOpError(\n                LibSafeMathRichErrors.BinOpErrorCodes.DIVISION_BY_ZERO,\n                a,\n                b\n            ));\n        }\n        uint256 c = a / b;\n        return c;\n    }\n\n    function safeSub(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b > a) {\n            LibRichErrors.rrevert(LibSafeMathRichErrors.Uint256BinOpError(\n                LibSafeMathRichErrors.BinOpErrorCodes.SUBTRACTION_UNDERFLOW,\n                a,\n                b\n            ));\n        }\n        return a - b;\n    }\n\n    function safeAdd(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint256 c = a + b;\n        if (c < a) {\n            LibRichErrors.rrevert(LibSafeMathRichErrors.Uint256BinOpError(\n                LibSafeMathRichErrors.BinOpErrorCodes.ADDITION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function max256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a < b ? a : b;\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/LibRichErrors.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\nlibrary LibRichErrors {\n\n    // bytes4(keccak256(\"Error(string)\"))\n    bytes4 internal constant STANDARD_ERROR_SELECTOR =\n        0x08c379a0;\n\n    // solhint-disable func-name-mixedcase\n    /// @dev ABI encode a standard, string revert error payload.\n    ///      This is the same payload that would be included by a `revert(string)`\n    ///      solidity statement. It has the function signature `Error(string)`.\n    /// @param message The error string.\n    /// @return The ABI encoded error.\n    function StandardError(\n        string memory message\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            STANDARD_ERROR_SELECTOR,\n            bytes(message)\n        );\n    }\n    // solhint-enable func-name-mixedcase\n\n    /// @dev Reverts an encoded rich revert reason `errorData`.\n    /// @param errorData ABI encoded error data.\n    function rrevert(bytes memory errorData)\n        internal\n        pure\n    {\n        assembly {\n            revert(add(errorData, 0x20), mload(errorData))\n        }\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/LibSafeMathRichErrors.sol": "pragma solidity ^0.5.9;\n\n\nlibrary LibSafeMathRichErrors {\n\n    // bytes4(keccak256(\"Uint256BinOpError(uint8,uint256,uint256)\"))\n    bytes4 internal constant UINT256_BINOP_ERROR_SELECTOR =\n        0xe946c1bb;\n\n    // bytes4(keccak256(\"Uint256DowncastError(uint8,uint256)\"))\n    bytes4 internal constant UINT256_DOWNCAST_ERROR_SELECTOR =\n        0xc996af7b;\n\n    enum BinOpErrorCodes {\n        ADDITION_OVERFLOW,\n        MULTIPLICATION_OVERFLOW,\n        SUBTRACTION_UNDERFLOW,\n        DIVISION_BY_ZERO\n    }\n\n    enum DowncastErrorCodes {\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT32,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT64,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT96\n    }\n\n    // solhint-disable func-name-mixedcase\n    function Uint256BinOpError(\n        BinOpErrorCodes errorCode,\n        uint256 a,\n        uint256 b\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            UINT256_BINOP_ERROR_SELECTOR,\n            errorCode,\n            a,\n            b\n        );\n    }\n\n    function Uint256DowncastError(\n        DowncastErrorCodes errorCode,\n        uint256 a\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            UINT256_DOWNCAST_ERROR_SELECTOR,\n            errorCode,\n            a\n        );\n    }\n}\n",
        "@0x/contracts-exchange-libs/contracts/src/LibMathRichErrors.sol": "pragma solidity ^0.5.9;\n\n\nlibrary LibMathRichErrors {\n\n    // bytes4(keccak256(\"DivisionByZeroError()\"))\n    bytes internal constant DIVISION_BY_ZERO_ERROR =\n        hex\"a791837c\";\n\n    // bytes4(keccak256(\"RoundingError(uint256,uint256,uint256)\"))\n    bytes4 internal constant ROUNDING_ERROR_SELECTOR =\n        0x339f3de2;\n\n    // solhint-disable func-name-mixedcase\n    function DivisionByZeroError()\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return DIVISION_BY_ZERO_ERROR;\n    }\n\n    function RoundingError(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            ROUNDING_ERROR_SELECTOR,\n            numerator,\n            denominator,\n            target\n        );\n    }\n}\n",
        "./SamplerUtils.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/LibERC20Token.sol\";\n\n\ncontract SamplerUtils {\n\n    /// @dev Overridable way to get token decimals.\n    /// @param tokenAddress Address of the token.\n    /// @return decimals The decimal places for the token.\n    function _getTokenDecimals(address tokenAddress)\n        internal\n        view\n        returns (uint8 decimals)\n    {\n        return LibERC20Token.decimals(tokenAddress);\n    }\n\n    function _toSingleValueArray(uint256 v)\n        internal\n        pure\n        returns (uint256[] memory arr)\n    {\n        arr = new uint256[](1);\n        arr[0] = v;\n    }\n\n    /// @dev Assert that the tokens in a trade pair are valid.\n    /// @param makerToken Address of the maker token.\n    /// @param takerToken Address of the taker token.\n    function _assertValidPair(address makerToken, address takerToken)\n        internal\n        pure\n    {\n        require(makerToken != takerToken, \"ERC20BridgeSampler/INVALID_TOKEN_PAIR\");\n    }\n}\n",
        "@0x/contracts-erc20/contracts/src/LibERC20Token.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\nimport \"@0x/contracts-utils/contracts/src/LibRichErrors.sol\";\nimport \"@0x/contracts-utils/contracts/src/LibBytes.sol\";\nimport \"../src/interfaces/IERC20Token.sol\";\n\n\nlibrary LibERC20Token {\n    bytes constant private DECIMALS_CALL_DATA = hex\"313ce567\";\n\n    /// @dev Calls `IERC20Token(token).approve()`.\n    ///      Reverts if `false` is returned or if the return\n    ///      data length is nonzero and not 32 bytes.\n    /// @param token The address of the token contract.\n    /// @param spender The address that receives an allowance.\n    /// @param allowance The allowance to set.\n    function approve(\n        address token,\n        address spender,\n        uint256 allowance\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            IERC20Token(0).approve.selector,\n            spender,\n            allowance\n        );\n        _callWithOptionalBooleanResult(token, callData);\n    }\n\n    /// @dev Calls `IERC20Token(token).approve()` and sets the allowance to the\n    ///      maximum if the current approval is not already >= an amount.\n    ///      Reverts if `false` is returned or if the return\n    ///      data length is nonzero and not 32 bytes.\n    /// @param token The address of the token contract.\n    /// @param spender The address that receives an allowance.\n    /// @param amount The minimum allowance needed.\n    function approveIfBelow(\n        address token,\n        address spender,\n        uint256 amount\n    )\n        internal\n    {\n        if (IERC20Token(token).allowance(address(this), spender) < amount) {\n            approve(token, spender, uint256(-1));\n        }\n    }\n\n    /// @dev Calls `IERC20Token(token).transfer()`.\n    ///      Reverts if `false` is returned or if the return\n    ///      data length is nonzero and not 32 bytes.\n    /// @param token The address of the token contract.\n    /// @param to The address that receives the tokens\n    /// @param amount Number of tokens to transfer.\n    function transfer(\n        address token,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            IERC20Token(0).transfer.selector,\n            to,\n            amount\n        );\n        _callWithOptionalBooleanResult(token, callData);\n    }\n\n    /// @dev Calls `IERC20Token(token).transferFrom()`.\n    ///      Reverts if `false` is returned or if the return\n    ///      data length is nonzero and not 32 bytes.\n    /// @param token The address of the token contract.\n    /// @param from The owner of the tokens.\n    /// @param to The address that receives the tokens\n    /// @param amount Number of tokens to transfer.\n    function transferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            IERC20Token(0).transferFrom.selector,\n            from,\n            to,\n            amount\n        );\n        _callWithOptionalBooleanResult(token, callData);\n    }\n\n    /// @dev Retrieves the number of decimals for a token.\n    ///      Returns `18` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @return tokenDecimals The number of decimals places for the token.\n    function decimals(address token)\n        internal\n        view\n        returns (uint8 tokenDecimals)\n    {\n        tokenDecimals = 18;\n        (bool didSucceed, bytes memory resultData) = token.staticcall(DECIMALS_CALL_DATA);\n        if (didSucceed && resultData.length == 32) {\n            tokenDecimals = uint8(LibBytes.readUint256(resultData, 0));\n        }\n    }\n\n    /// @dev Retrieves the allowance for a token, owner, and spender.\n    ///      Returns `0` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @param owner The owner of the tokens.\n    /// @param spender The address the spender.\n    /// @return allowance The allowance for a token, owner, and spender.\n    function allowance(address token, address owner, address spender)\n        internal\n        view\n        returns (uint256 allowance_)\n    {\n        (bool didSucceed, bytes memory resultData) = token.staticcall(\n            abi.encodeWithSelector(\n                IERC20Token(0).allowance.selector,\n                owner,\n                spender\n            )\n        );\n        if (didSucceed && resultData.length == 32) {\n            allowance_ = LibBytes.readUint256(resultData, 0);\n        }\n    }\n\n    /// @dev Retrieves the balance for a token owner.\n    ///      Returns `0` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @param owner The owner of the tokens.\n    /// @return balance The token balance of an owner.\n    function balanceOf(address token, address owner)\n        internal\n        view\n        returns (uint256 balance)\n    {\n        (bool didSucceed, bytes memory resultData) = token.staticcall(\n            abi.encodeWithSelector(\n                IERC20Token(0).balanceOf.selector,\n                owner\n            )\n        );\n        if (didSucceed && resultData.length == 32) {\n            balance = LibBytes.readUint256(resultData, 0);\n        }\n    }\n\n    /// @dev Executes a call on address `target` with calldata `callData`\n    ///      and asserts that either nothing was returned or a single boolean\n    ///      was returned equal to `true`.\n    /// @param target The call target.\n    /// @param callData The abi-encoded call data.\n    function _callWithOptionalBooleanResult(\n        address target,\n        bytes memory callData\n    )\n        private\n    {\n        (bool didSucceed, bytes memory resultData) = target.call(callData);\n        if (didSucceed) {\n            if (resultData.length == 0) {\n                return;\n            }\n            if (resultData.length == 32) {\n                uint256 result = LibBytes.readUint256(resultData, 0);\n                if (result == 1) {\n                    return;\n                }\n            }\n        }\n        LibRichErrors.rrevert(resultData);\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/LibBytes.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\nimport \"./LibBytesRichErrors.sol\";\nimport \"./LibRichErrors.sol\";\n\n\nlibrary LibBytes {\n\n    using LibBytes for bytes;\n\n    /// @dev Gets the memory address for a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of byte array. This\n    ///         points to the header of the byte array which contains\n    ///         the length.\n    function rawAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := input\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Gets the memory address for the contents of a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of the contents of the byte array.\n    function contentAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := add(input, 32)\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Copies `length` bytes from memory location `source` to `dest`.\n    /// @param dest memory address to copy bytes to.\n    /// @param source memory address to copy bytes from.\n    /// @param length number of bytes to copy.\n    function memCopy(\n        uint256 dest,\n        uint256 source,\n        uint256 length\n    )\n        internal\n        pure\n    {\n        if (length < 32) {\n            // Handle a partial word by reading destination and masking\n            // off the bits we are interested in.\n            // This correctly handles overlap, zero lengths and source == dest\n            assembly {\n                let mask := sub(exp(256, sub(32, length)), 1)\n                let s := and(mload(source), not(mask))\n                let d := and(mload(dest), mask)\n                mstore(dest, or(s, d))\n            }\n        } else {\n            // Skip the O(length) loop when source == dest.\n            if (source == dest) {\n                return;\n            }\n\n            // For large copies we copy whole words at a time. The final\n            // word is aligned to the end of the range (instead of after the\n            // previous) to handle partial words. So a copy will look like this:\n            //\n            //  ####\n            //      ####\n            //          ####\n            //            ####\n            //\n            // We handle overlap in the source and destination range by\n            // changing the copying direction. This prevents us from\n            // overwriting parts of source that we still need to copy.\n            //\n            // This correctly handles source == dest\n            //\n            if (source > dest) {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because it\n                    // is easier to compare with in the loop, and these\n                    // are also the addresses we need for copying the\n                    // last bytes.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the last 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the last bytes in\n                    // source already due to overlap.\n                    let last := mload(sEnd)\n\n                    // Copy whole words front to back\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} lt(source, sEnd) {} {\n                        mstore(dest, mload(source))\n                        source := add(source, 32)\n                        dest := add(dest, 32)\n                    }\n\n                    // Write the last 32 bytes\n                    mstore(dEnd, last)\n                }\n            } else {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because those\n                    // are the starting points when copying a word at the end.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the first 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the first bytes in\n                    // source already due to overlap.\n                    let first := mload(source)\n\n                    // Copy whole words back to front\n                    // We use a signed comparisson here to allow dEnd to become\n                    // negative (happens when source and dest < 32). Valid\n                    // addresses in local memory will never be larger than\n                    // 2**255, so they can be safely re-interpreted as signed.\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} slt(dest, dEnd) {} {\n                        mstore(dEnd, mload(sEnd))\n                        sEnd := sub(sEnd, 32)\n                        dEnd := sub(dEnd, 32)\n                    }\n\n                    // Write the first 32 bytes\n                    mstore(dest, first)\n                }\n            }\n        }\n    }\n\n    /// @dev Returns a slices from a byte array.\n    /// @param b The byte array to take a slice from.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function slice(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure and copy contents\n        result = new bytes(to - from);\n        memCopy(\n            result.contentAddress(),\n            b.contentAddress() + from,\n            result.length\n        );\n        return result;\n    }\n\n    /// @dev Returns a slice from a byte array without preserving the input.\n    /// @param b The byte array to take a slice from. Will be destroyed in the process.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    /// @dev When `from == 0`, the original array will match the slice. In other cases its state will be corrupted.\n    function sliceDestructive(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure around [from, to) in-place.\n        assembly {\n            result := add(b, from)\n            mstore(result, sub(to, from))\n        }\n        return result;\n    }\n\n    /// @dev Pops the last byte off of a byte array by modifying its length.\n    /// @param b Byte array that will be modified.\n    /// @return The byte that was popped off.\n    function popLastByte(bytes memory b)\n        internal\n        pure\n        returns (bytes1 result)\n    {\n        if (b.length == 0) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.LengthGreaterThanZeroRequired,\n                b.length,\n                0\n            ));\n        }\n\n        // Store last byte.\n        result = b[b.length - 1];\n\n        assembly {\n            // Decrement length of byte array.\n            let newLen := sub(mload(b), 1)\n            mstore(b, newLen)\n        }\n        return result;\n    }\n\n    /// @dev Tests equality of two byte arrays.\n    /// @param lhs First byte array to compare.\n    /// @param rhs Second byte array to compare.\n    /// @return True if arrays are the same. False otherwise.\n    function equals(\n        bytes memory lhs,\n        bytes memory rhs\n    )\n        internal\n        pure\n        returns (bool equal)\n    {\n        // Keccak gas cost is 30 + numWords * 6. This is a cheap way to compare.\n        // We early exit on unequal lengths, but keccak would also correctly\n        // handle this.\n        return lhs.length == rhs.length && keccak256(lhs) == keccak256(rhs);\n    }\n\n    /// @dev Reads an address from a position in a byte array.\n    /// @param b Byte array containing an address.\n    /// @param index Index in byte array of address.\n    /// @return address from byte array.\n    function readAddress(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (address result)\n    {\n        if (b.length < index + 20) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Read address from array memory\n        assembly {\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 20-byte mask to obtain address\n            result := and(mload(add(b, index)), 0xffffffffffffffffffffffffffffffffffffffff)\n        }\n        return result;\n    }\n\n    /// @dev Writes an address into a specific position in a byte array.\n    /// @param b Byte array to insert address into.\n    /// @param index Index in byte array of address.\n    /// @param input Address to put into byte array.\n    function writeAddress(\n        bytes memory b,\n        uint256 index,\n        address input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 20) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Store address into array memory\n        assembly {\n            // The address occupies 20 bytes and mstore stores 32 bytes.\n            // First fetch the 32-byte word where we'll be storing the address, then\n            // apply a mask so we have only the bytes in the word that the address will not occupy.\n            // Then combine these bytes with the address and store the 32 bytes back to memory with mstore.\n\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 12-byte mask to obtain extra bytes occupying word of memory where we'll store the address\n            let neighbors := and(\n                mload(add(b, index)),\n                0xffffffffffffffffffffffff0000000000000000000000000000000000000000\n            )\n\n            // Make sure input address is clean.\n            // (Solidity does not guarantee this)\n            input := and(input, 0xffffffffffffffffffffffffffffffffffffffff)\n\n            // Store the neighbors and address into memory\n            mstore(add(b, index), xor(input, neighbors))\n        }\n    }\n\n    /// @dev Reads a bytes32 value from a position in a byte array.\n    /// @param b Byte array containing a bytes32 value.\n    /// @param index Index in byte array of bytes32 value.\n    /// @return bytes32 value from byte array.\n    function readBytes32(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        if (b.length < index + 32) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            result := mload(add(b, index))\n        }\n        return result;\n    }\n\n    /// @dev Writes a bytes32 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input bytes32 to put into byte array.\n    function writeBytes32(\n        bytes memory b,\n        uint256 index,\n        bytes32 input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 32) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            mstore(add(b, index), input)\n        }\n    }\n\n    /// @dev Reads a uint256 value from a position in a byte array.\n    /// @param b Byte array containing a uint256 value.\n    /// @param index Index in byte array of uint256 value.\n    /// @return uint256 value from byte array.\n    function readUint256(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (uint256 result)\n    {\n        result = uint256(readBytes32(b, index));\n        return result;\n    }\n\n    /// @dev Writes a uint256 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input uint256 to put into byte array.\n    function writeUint256(\n        bytes memory b,\n        uint256 index,\n        uint256 input\n    )\n        internal\n        pure\n    {\n        writeBytes32(b, index, bytes32(input));\n    }\n\n    /// @dev Reads an unpadded bytes4 value from a position in a byte array.\n    /// @param b Byte array containing a bytes4 value.\n    /// @param index Index in byte array of bytes4 value.\n    /// @return bytes4 value from byte array.\n    function readBytes4(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes4 result)\n    {\n        if (b.length < index + 4) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsFourRequired,\n                b.length,\n                index + 4\n            ));\n        }\n\n        // Arrays are prefixed by a 32 byte length field\n        index += 32;\n\n        // Read the bytes4 from array memory\n        assembly {\n            result := mload(add(b, index))\n            // Solidity does not require us to clean the trailing bytes.\n            // We do it anyway\n            result := and(result, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)\n        }\n        return result;\n    }\n\n    /// @dev Writes a new length to a byte array.\n    ///      Decreasing length will lead to removing the corresponding lower order bytes from the byte array.\n    ///      Increasing length may lead to appending adjacent in-memory bytes to the end of the byte array.\n    /// @param b Bytes array to write new length to.\n    /// @param length New length of byte array.\n    function writeLength(bytes memory b, uint256 length)\n        internal\n        pure\n    {\n        assembly {\n            mstore(b, length)\n        }\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/LibBytesRichErrors.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\nlibrary LibBytesRichErrors {\n\n    enum InvalidByteOperationErrorCodes {\n        FromLessThanOrEqualsToRequired,\n        ToLessThanOrEqualsLengthRequired,\n        LengthGreaterThanZeroRequired,\n        LengthGreaterThanOrEqualsFourRequired,\n        LengthGreaterThanOrEqualsTwentyRequired,\n        LengthGreaterThanOrEqualsThirtyTwoRequired,\n        LengthGreaterThanOrEqualsNestedBytesLengthRequired,\n        DestinationLengthGreaterThanOrEqualSourceLengthRequired\n    }\n\n    // bytes4(keccak256(\"InvalidByteOperationError(uint8,uint256,uint256)\"))\n    bytes4 internal constant INVALID_BYTE_OPERATION_ERROR_SELECTOR =\n        0x28006595;\n\n    // solhint-disable func-name-mixedcase\n    function InvalidByteOperationError(\n        InvalidByteOperationErrorCodes errorCode,\n        uint256 offset,\n        uint256 required\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            INVALID_BYTE_OPERATION_ERROR_SELECTOR,\n            errorCode,\n            offset,\n            required\n        );\n    }\n}\n",
        "@0x/contracts-erc20/contracts/src/interfaces/IERC20Token.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\ncontract IERC20Token {\n\n    // solhint-disable no-simple-event-func-name\n    event Transfer(\n        address indexed _from,\n        address indexed _to,\n        uint256 _value\n    );\n\n    event Approval(\n        address indexed _owner,\n        address indexed _spender,\n        uint256 _value\n    );\n\n    /// @dev send `value` token to `to` from `msg.sender`\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transfer(address _to, uint256 _value)\n        external\n        returns (bool);\n\n    /// @dev send `value` token to `to` from `from` on the condition it is approved by `from`\n    /// @param _from The address of the sender\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _value\n    )\n        external\n        returns (bool);\n\n    /// @dev `msg.sender` approves `_spender` to spend `_value` tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @param _value The amount of wei to be approved for transfer\n    /// @return Always true if the call has enough gas to complete execution\n    function approve(address _spender, uint256 _value)\n        external\n        returns (bool);\n\n    /// @dev Query total supply of token\n    /// @return Total supply of token\n    function totalSupply()\n        external\n        view\n        returns (uint256);\n\n    /// @param _owner The address from which the balance will be retrieved\n    /// @return Balance of owner\n    function balanceOf(address _owner)\n        external\n        view\n        returns (uint256);\n\n    /// @param _owner The address of the account owning tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address _owner, address _spender)\n        external\n        view\n        returns (uint256);\n}\n",
        "./DODOSampler.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/DeploymentConstants.sol\";\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\n\n\ninterface IDODOZoo {\n    function getDODO(address baseToken, address quoteToken) external view returns (address);\n}\n\ninterface IDODOHelper {\n    function querySellQuoteToken(address dodo, uint256 amount) external view returns (uint256);\n}\n\ninterface IDODO {\n    function querySellBaseToken(uint256 amount) external view returns (uint256);\n    function _TRADE_ALLOWED_() external view returns (bool);\n}\n\ncontract DODOSampler is\n    DeploymentConstants,\n    SamplerUtils,\n    ApproximateBuys\n{\n\n    /// @dev Gas limit for DODO calls.\n    uint256 constant private DODO_CALL_GAS = 300e3; // 300k\n\n    /// @dev Sample sell quotes from DODO.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromDODO(\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (bool sellBase, address pool, uint256[] memory makerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        pool = IDODOZoo(_getDODORegistryAddress()).getDODO(takerToken, makerToken);\n        address baseToken;\n        // If pool exists we have the correct order of Base/Quote\n        if (pool != address(0)) {\n            baseToken = takerToken;\n            sellBase = true;\n        } else {\n            pool = IDODOZoo(_getDODORegistryAddress()).getDODO(makerToken, takerToken);\n            // No pool either direction\n            if (address(pool) == address(0)) {\n                return (sellBase, pool, makerTokenAmounts);\n            }\n            baseToken = makerToken;\n            sellBase = false;\n        }\n\n        // DODO Pool has been disabled\n        if (!IDODO(pool)._TRADE_ALLOWED_()) {\n            return (sellBase, pool, makerTokenAmounts);\n        }\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            uint256 buyAmount = _sampleSellForApproximateBuyFromDODO(\n                abi.encode(takerToken, pool, baseToken), // taker token data\n                abi.encode(makerToken, pool, baseToken), // maker token data\n                takerTokenAmounts[i]\n            );\n            // Exit early if the amount is too high for the source to serve\n            if (buyAmount == 0) {\n                break;\n            }\n            makerTokenAmounts[i] = buyAmount;\n        }\n    }\n\n    /// @dev Sample buy quotes from DODO.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token sell amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromDODO(\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (bool sellBase, address pool, uint256[] memory takerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n\n        // Pool is BASE/QUOTE\n        // Look up the pool from the taker/maker combination\n        pool = IDODOZoo(_getDODORegistryAddress()).getDODO(takerToken, makerToken);\n        address baseToken;\n        // If pool exists we have the correct order of Base/Quote\n        if (pool != address(0)) {\n            baseToken = takerToken;\n            sellBase = true;\n        } else {\n            // Look up the pool from the maker/taker combination\n            pool = IDODOZoo(_getDODORegistryAddress()).getDODO(makerToken, takerToken);\n            // No pool either direction\n            if (address(pool) == address(0)) {\n                return (sellBase, pool, takerTokenAmounts);\n            }\n            baseToken = makerToken;\n            sellBase = false;\n        }\n\n        // DODO Pool has been disabled\n        if (!IDODO(pool)._TRADE_ALLOWED_()) {\n            return (sellBase, pool, takerTokenAmounts);\n        }\n\n        takerTokenAmounts = _sampleApproximateBuys(\n            ApproximateBuyQuoteOpts({\n                makerTokenData: abi.encode(makerToken, pool, baseToken),\n                takerTokenData: abi.encode(takerToken, pool, baseToken),\n                getSellQuoteCallback: _sampleSellForApproximateBuyFromDODO\n            }),\n            makerTokenAmounts\n        );\n    }\n\n    function _sampleSellForApproximateBuyFromDODO(\n        bytes memory takerTokenData,\n        bytes memory /* makerTokenData */,\n        uint256 sellAmount\n    )\n        private\n        view\n        returns (uint256)\n    {\n        (address takerToken, address pool, address baseToken) = abi.decode(\n            takerTokenData,\n            (address, address, address)\n        );\n\n        bool didSucceed;\n        bytes memory resultData;\n        // We will get called to sell both the taker token and also to sell the maker token\n        if (takerToken == baseToken) {\n            // If base token then use the original query on the pool\n            (didSucceed, resultData) =\n                pool.staticcall.gas(DODO_CALL_GAS)(\n                    abi.encodeWithSelector(\n                        IDODO(0).querySellBaseToken.selector,\n                        sellAmount\n                    ));\n        } else {\n            // If quote token then use helper, this is less accurate\n            (didSucceed, resultData) =\n                _getDODOHelperAddress().staticcall.gas(DODO_CALL_GAS)(\n                    abi.encodeWithSelector(\n                        IDODOHelper(0).querySellQuoteToken.selector,\n                        pool,\n                        sellAmount\n                    ));\n        }\n        if (!didSucceed) {\n            return 0;\n        }\n        // solhint-disable-next-line indent\n        return abi.decode(resultData, (uint256));\n    }\n\n}\n",
        "@0x/contracts-utils/contracts/src/DeploymentConstants.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\ncontract DeploymentConstants {\n\n    // solhint-disable separate-by-one-line-in-contract\n\n    // Mainnet addresses ///////////////////////////////////////////////////////\n    /// @dev Mainnet address of the WETH contract.\n    address constant private WETH_ADDRESS = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n    /// @dev Mainnet address of the KyberNetworkProxy contract.\n    address constant private KYBER_NETWORK_PROXY_ADDRESS = 0x9AAb3f75489902f3a48495025729a0AF77d4b11e;\n    /// @dev Mainnet address of the KyberHintHandler contract.\n    address constant private KYBER_HINT_HANDLER_ADDRESS = 0xa1C0Fa73c39CFBcC11ec9Eb1Afc665aba9996E2C;\n    /// @dev Mainnet address of the `UniswapExchangeFactory` contract.\n    address constant private UNISWAP_EXCHANGE_FACTORY_ADDRESS = 0xc0a47dFe034B400B47bDaD5FecDa2621de6c4d95;\n    /// @dev Mainnet address of the `UniswapV2Router01` contract.\n    address constant private UNISWAP_V2_ROUTER_01_ADDRESS = 0xf164fC0Ec4E93095b804a4795bBe1e041497b92a;\n    /// @dev Mainnet address of the Eth2Dai `MatchingMarket` contract.\n    address constant private ETH2DAI_ADDRESS = 0x794e6e91555438aFc3ccF1c5076A74F42133d08D;\n    /// @dev Mainnet address of the `ERC20BridgeProxy` contract\n    address constant private ERC20_BRIDGE_PROXY_ADDRESS = 0x8ED95d1746bf1E4dAb58d8ED4724f1Ef95B20Db0;\n    ///@dev Mainnet address of the `Dai` (multi-collateral) contract\n    address constant private DAI_ADDRESS = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\n    /// @dev Mainnet address of the `Chai` contract\n    address constant private CHAI_ADDRESS = 0x06AF07097C9Eeb7fD685c692751D5C66dB49c215;\n    /// @dev Mainnet address of the 0x DevUtils contract.\n    address constant private DEV_UTILS_ADDRESS = 0x74134CF88b21383713E096a5ecF59e297dc7f547;\n    /// @dev Kyber ETH pseudo-address.\n    address constant internal KYBER_ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n    /// @dev Mainnet address of the dYdX contract.\n    address constant private DYDX_ADDRESS = 0x1E0447b19BB6EcFdAe1e4AE1694b0C3659614e4e;\n    /// @dev Mainnet address of the GST2 contract\n    address constant private GST_ADDRESS = 0x0000000000b3F879cb30FE243b4Dfee438691c04;\n    /// @dev Mainnet address of the GST Collector\n    address constant private GST_COLLECTOR_ADDRESS = 0x000000D3b08566BE75A6DB803C03C85C0c1c5B96;\n    /// @dev Mainnet address of the mStable mUSD contract.\n    address constant private MUSD_ADDRESS = 0xe2f2a5C287993345a840Db3B0845fbC70f5935a5;\n    /// @dev Mainnet address of the Mooniswap Registry contract\n    address constant private MOONISWAP_REGISTRY = 0x71CD6666064C3A1354a3B4dca5fA1E2D3ee7D303;\n    /// @dev Mainnet address of the Shell contract\n    address constant private SHELL_CONTRACT = 0x2E703D658f8dd21709a7B458967aB4081F8D3d05;\n    /// @dev Mainnet address of the DODO Registry (ZOO) contract\n    address constant private DODO_REGISTRY = 0x3A97247DF274a17C59A3bd12735ea3FcDFb49950;\n    /// @dev Mainnet address of the DODO Helper contract\n    address constant private DODO_HELPER = 0x533dA777aeDCE766CEAe696bf90f8541A4bA80Eb;\n\n    // // Ropsten addresses ///////////////////////////////////////////////////////\n    // /// @dev Mainnet address of the WETH contract.\n    // address constant private WETH_ADDRESS = 0xc778417E063141139Fce010982780140Aa0cD5Ab;\n    // /// @dev Mainnet address of the KyberNetworkProxy contract.\n    // address constant private KYBER_NETWORK_PROXY_ADDRESS = 0xd719c34261e099Fdb33030ac8909d5788D3039C4;\n    // /// @dev Mainnet address of the `UniswapExchangeFactory` contract.\n    // address constant private UNISWAP_EXCHANGE_FACTORY_ADDRESS = 0x9c83dCE8CA20E9aAF9D3efc003b2ea62aBC08351;\n    // /// @dev Mainnet address of the `UniswapV2Router01` contract.\n    // address constant private UNISWAP_V2_ROUTER_01_ADDRESS = 0xf164fC0Ec4E93095b804a4795bBe1e041497b92a;\n    // /// @dev Mainnet address of the Eth2Dai `MatchingMarket` contract.\n    // address constant private ETH2DAI_ADDRESS = address(0);\n    // /// @dev Mainnet address of the `ERC20BridgeProxy` contract\n    // address constant private ERC20_BRIDGE_PROXY_ADDRESS = 0xb344afeD348de15eb4a9e180205A2B0739628339;\n    // ///@dev Mainnet address of the `Dai` (multi-collateral) contract\n    // address constant private DAI_ADDRESS = address(0);\n    // /// @dev Mainnet address of the `Chai` contract\n    // address constant private CHAI_ADDRESS = address(0);\n    // /// @dev Mainnet address of the 0x DevUtils contract.\n    // address constant private DEV_UTILS_ADDRESS = 0xC812AF3f3fBC62F76ea4262576EC0f49dB8B7f1c;\n    // /// @dev Kyber ETH pseudo-address.\n    // address constant internal KYBER_ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n    // /// @dev Mainnet address of the dYdX contract.\n    // address constant private DYDX_ADDRESS = address(0);\n    // /// @dev Mainnet address of the GST2 contract\n    // address constant private GST_ADDRESS = address(0);\n    // /// @dev Mainnet address of the GST Collector\n    // address constant private GST_COLLECTOR_ADDRESS = address(0);\n    // /// @dev Mainnet address of the mStable mUSD contract.\n    // address constant private MUSD_ADDRESS = 0x4E1000616990D83e56f4b5fC6CC8602DcfD20459;\n\n    // // Rinkeby addresses ///////////////////////////////////////////////////////\n    // /// @dev Mainnet address of the WETH contract.\n    // address constant private WETH_ADDRESS = 0xc778417E063141139Fce010982780140Aa0cD5Ab;\n    // /// @dev Mainnet address of the KyberNetworkProxy contract.\n    // address constant private KYBER_NETWORK_PROXY_ADDRESS = 0x0d5371e5EE23dec7DF251A8957279629aa79E9C5;\n    // /// @dev Mainnet address of the `UniswapExchangeFactory` contract.\n    // address constant private UNISWAP_EXCHANGE_FACTORY_ADDRESS = 0xf5D915570BC477f9B8D6C0E980aA81757A3AaC36;\n    // /// @dev Mainnet address of the `UniswapV2Router01` contract.\n    // address constant private UNISWAP_V2_ROUTER_01_ADDRESS = 0xf164fC0Ec4E93095b804a4795bBe1e041497b92a;\n    // /// @dev Mainnet address of the Eth2Dai `MatchingMarket` contract.\n    // address constant private ETH2DAI_ADDRESS = address(0);\n    // /// @dev Mainnet address of the `ERC20BridgeProxy` contract\n    // address constant private ERC20_BRIDGE_PROXY_ADDRESS = 0xA2AA4bEFED748Fba27a3bE7Dfd2C4b2c6DB1F49B;\n    // ///@dev Mainnet address of the `Dai` (multi-collateral) contract\n    // address constant private DAI_ADDRESS = address(0);\n    // /// @dev Mainnet address of the `Chai` contract\n    // address constant private CHAI_ADDRESS = address(0);\n    // /// @dev Mainnet address of the 0x DevUtils contract.\n    // address constant private DEV_UTILS_ADDRESS = 0x46B5BC959e8A754c0256FFF73bF34A52Ad5CdfA9;\n    // /// @dev Kyber ETH pseudo-address.\n    // address constant internal KYBER_ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n    // /// @dev Mainnet address of the dYdX contract.\n    // address constant private DYDX_ADDRESS = address(0);\n    // /// @dev Mainnet address of the GST2 contract\n    // address constant private GST_ADDRESS = address(0);\n    // /// @dev Mainnet address of the GST Collector\n    // address constant private GST_COLLECTOR_ADDRESS = address(0);\n    // /// @dev Mainnet address of the mStable mUSD contract.\n    // address constant private MUSD_ADDRESS = address(0);\n\n    // // Kovan addresses /////////////////////////////////////////////////////////\n    // /// @dev Kovan address of the WETH contract.\n    // address constant private WETH_ADDRESS = 0xd0A1E359811322d97991E03f863a0C30C2cF029C;\n    // /// @dev Kovan address of the KyberNetworkProxy contract.\n    // address constant private KYBER_NETWORK_PROXY_ADDRESS = 0x692f391bCc85cefCe8C237C01e1f636BbD70EA4D;\n    // /// @dev Kovan address of the `UniswapExchangeFactory` contract.\n    // address constant private UNISWAP_EXCHANGE_FACTORY_ADDRESS = 0xD3E51Ef092B2845f10401a0159B2B96e8B6c3D30;\n    // /// @dev Kovan address of the `UniswapV2Router01` contract.\n    // address constant private UNISWAP_V2_ROUTER_01_ADDRESS = 0xf164fC0Ec4E93095b804a4795bBe1e041497b92a;\n    // /// @dev Kovan address of the Eth2Dai `MatchingMarket` contract.\n    // address constant private ETH2DAI_ADDRESS = 0xe325acB9765b02b8b418199bf9650972299235F4;\n    // /// @dev Kovan address of the `ERC20BridgeProxy` contract\n    // address constant private ERC20_BRIDGE_PROXY_ADDRESS = 0x3577552C1Fb7A44aD76BeEB7aB53251668A21F8D;\n    // /// @dev Kovan address of the `Chai` contract\n    // address constant private CHAI_ADDRESS = address(0);\n    // /// @dev Kovan address of the `Dai` (multi-collateral) contract\n    // address constant private DAI_ADDRESS = 0x4F96Fe3b7A6Cf9725f59d353F723c1bDb64CA6Aa;\n    // /// @dev Kovan address of the 0x DevUtils contract.\n    // address constant private DEV_UTILS_ADDRESS = 0x9402639A828BdF4E9e4103ac3B69E1a6E522eB59;\n    // /// @dev Kyber ETH pseudo-address.\n    // address constant internal KYBER_ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n    // /// @dev Kovan address of the dYdX contract.\n    // address constant private DYDX_ADDRESS = address(0);\n    // /// @dev Kovan address of the GST2 contract\n    // address constant private GST_ADDRESS = address(0);\n    // /// @dev Kovan address of the GST Collector\n    // address constant private GST_COLLECTOR_ADDRESS = address(0);\n    // /// @dev Mainnet address of the mStable mUSD contract.\n    // address constant private MUSD_ADDRESS = address(0);\n\n    /// @dev Overridable way to get the `KyberNetworkProxy` address.\n    /// @return kyberAddress The `IKyberNetworkProxy` address.\n    function _getKyberNetworkProxyAddress()\n        internal\n        view\n        returns (address kyberAddress)\n    {\n        return KYBER_NETWORK_PROXY_ADDRESS;\n    }\n\n    /// @dev Overridable way to get the `KyberHintHandler` address.\n    /// @return kyberAddress The `IKyberHintHandler` address.\n    function _getKyberHintHandlerAddress()\n        internal\n        view\n        returns (address hintHandlerAddress)\n    {\n        return KYBER_HINT_HANDLER_ADDRESS;\n    }\n\n    /// @dev Overridable way to get the WETH address.\n    /// @return wethAddress The WETH address.\n    function _getWethAddress()\n        internal\n        view\n        returns (address wethAddress)\n    {\n        return WETH_ADDRESS;\n    }\n\n    /// @dev Overridable way to get the `UniswapExchangeFactory` address.\n    /// @return uniswapAddress The `UniswapExchangeFactory` address.\n    function _getUniswapExchangeFactoryAddress()\n        internal\n        view\n        returns (address uniswapAddress)\n    {\n        return UNISWAP_EXCHANGE_FACTORY_ADDRESS;\n    }\n\n    /// @dev Overridable way to get the `UniswapV2Router01` address.\n    /// @return uniswapRouterAddress The `UniswapV2Router01` address.\n    function _getUniswapV2Router01Address()\n        internal\n        view\n        returns (address uniswapRouterAddress)\n    {\n        return UNISWAP_V2_ROUTER_01_ADDRESS;\n    }\n\n    /// @dev An overridable way to retrieve the Eth2Dai `MatchingMarket` contract.\n    /// @return eth2daiAddress The Eth2Dai `MatchingMarket` contract.\n    function _getEth2DaiAddress()\n        internal\n        view\n        returns (address eth2daiAddress)\n    {\n        return ETH2DAI_ADDRESS;\n    }\n\n    /// @dev An overridable way to retrieve the `ERC20BridgeProxy` contract.\n    /// @return erc20BridgeProxyAddress The `ERC20BridgeProxy` contract.\n    function _getERC20BridgeProxyAddress()\n        internal\n        view\n        returns (address erc20BridgeProxyAddress)\n    {\n        return ERC20_BRIDGE_PROXY_ADDRESS;\n    }\n\n    /// @dev An overridable way to retrieve the `Dai` contract.\n    /// @return daiAddress The `Dai` contract.\n    function _getDaiAddress()\n        internal\n        view\n        returns (address daiAddress)\n    {\n        return DAI_ADDRESS;\n    }\n\n    /// @dev An overridable way to retrieve the `Chai` contract.\n    /// @return chaiAddress The `Chai` contract.\n    function _getChaiAddress()\n        internal\n        view\n        returns (address chaiAddress)\n    {\n        return CHAI_ADDRESS;\n    }\n\n    /// @dev An overridable way to retrieve the 0x `DevUtils` contract address.\n    /// @return devUtils The 0x `DevUtils` contract address.\n    function _getDevUtilsAddress()\n        internal\n        view\n        returns (address devUtils)\n    {\n        return DEV_UTILS_ADDRESS;\n    }\n\n    /// @dev Overridable way to get the DyDx contract.\n    /// @return exchange The DyDx exchange contract.\n    function _getDydxAddress()\n        internal\n        view\n        returns (address dydxAddress)\n    {\n        return DYDX_ADDRESS;\n    }\n\n    /// @dev An overridable way to retrieve the GST2 contract address.\n    /// @return gst The GST contract.\n    function _getGstAddress()\n        internal\n        view\n        returns (address gst)\n    {\n        return GST_ADDRESS;\n    }\n\n    /// @dev An overridable way to retrieve the GST Collector address.\n    /// @return collector The GST collector address.\n    function _getGstCollectorAddress()\n        internal\n        view\n        returns (address collector)\n    {\n        return GST_COLLECTOR_ADDRESS;\n    }\n\n    /// @dev An overridable way to retrieve the mStable mUSD address.\n    /// @return musd The mStable mUSD address.\n    function _getMUsdAddress()\n        internal\n        view\n        returns (address musd)\n    {\n        return MUSD_ADDRESS;\n    }\n\n    /// @dev An overridable way to retrieve the Mooniswap registry address.\n    /// @return registry The Mooniswap registry address.\n    function _getMooniswapAddress()\n        internal\n        view\n        returns (address)\n    {\n        return MOONISWAP_REGISTRY;\n    }\n\n    /// @dev An overridable way to retrieve the Shell contract address.\n    /// @return registry The Shell contract address.\n    function _getShellAddress()\n        internal\n        view\n        returns (address)\n    {\n        return SHELL_CONTRACT;\n    }\n\n    /// @dev An overridable way to retrieve the DODO Registry contract address.\n    /// @return registry The DODO Registry contract address.\n    function _getDODORegistryAddress()\n        internal\n        view\n        returns (address)\n    {\n        return DODO_REGISTRY;\n    }\n\n    /// @dev An overridable way to retrieve the DODO Helper contract address.\n    /// @return registry The DODO Helper contract address.\n    function _getDODOHelperAddress()\n        internal\n        view\n        returns (address)\n    {\n        return DODO_HELPER;\n    }\n}\n",
        "./Eth2DaiSampler.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/DeploymentConstants.sol\";\nimport \"./interfaces/IEth2Dai.sol\";\nimport \"./SamplerUtils.sol\";\n\n\ncontract Eth2DaiSampler is\n    DeploymentConstants,\n    SamplerUtils\n{\n    /// @dev Base gas limit for Eth2Dai calls.\n    uint256 constant private ETH2DAI_CALL_GAS = 1000e3; // 1m\n\n    /// @dev Sample sell quotes from Eth2Dai/Oasis.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromEth2Dai(\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            (bool didSucceed, bytes memory resultData) =\n                _getEth2DaiAddress().staticcall.gas(ETH2DAI_CALL_GAS)(\n                    abi.encodeWithSelector(\n                        IEth2Dai(0).getBuyAmount.selector,\n                        makerToken,\n                        takerToken,\n                        takerTokenAmounts[i]\n                    ));\n            uint256 buyAmount = 0;\n            if (didSucceed) {\n                buyAmount = abi.decode(resultData, (uint256));\n            }\n            // Exit early if the amount is too high for the source to serve\n            if (buyAmount == 0) {\n                break;\n            }\n            makerTokenAmounts[i] = buyAmount;\n        }\n    }\n\n    /// @dev Sample buy quotes from Eth2Dai/Oasis.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Maker token sell amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromEth2Dai(\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            (bool didSucceed, bytes memory resultData) =\n                _getEth2DaiAddress().staticcall.gas(ETH2DAI_CALL_GAS)(\n                    abi.encodeWithSelector(\n                        IEth2Dai(0).getPayAmount.selector,\n                        takerToken,\n                        makerToken,\n                        makerTokenAmounts[i]\n                    ));\n            uint256 sellAmount = 0;\n            if (didSucceed) {\n                sellAmount = abi.decode(resultData, (uint256));\n            }\n            // Exit early if the amount is too high for the source to serve\n            if (sellAmount == 0) {\n                break;\n            }\n            takerTokenAmounts[i] = sellAmount;\n        }\n    }\n}\n",
        "./interfaces/IEth2Dai.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\ninterface IEth2Dai {\n\n    function getBuyAmount(\n        address buyToken,\n        address payToken,\n        uint256 payAmount\n    )\n        external\n        view\n        returns (uint256 buyAmount);\n\n    function getPayAmount(\n        address payToken,\n        address buyToken,\n        uint256 buyAmount\n    )\n        external\n        view\n        returns (uint256 payAmount);\n}\n",
        "./KyberSampler.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/DeploymentConstants.sol\";\nimport \"./interfaces/IKyberNetwork.sol\";\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\n\n\ncontract KyberSampler is\n    DeploymentConstants,\n    SamplerUtils,\n    ApproximateBuys\n{\n    /// @dev Gas limit for Kyber calls.\n    uint256 constant private KYBER_CALL_GAS = 500e3; // 500k\n\n    /// @dev Sample sell quotes from Kyber.\n    /// @param reserveId The selected kyber reserve\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return hint The hint for the selected reserve\n    /// @return makerTokenAmounts Maker amounts bought at each taker token amount.\n    function sampleSellsFromKyberNetwork(\n        bytes32 reserveId,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (bytes memory hint, uint256[] memory makerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        hint = this.encodeKyberHint(reserveId, takerToken, makerToken);\n        for (uint256 i = 0; i < numSamples; i++) {\n            uint256 value = this.sampleSellFromKyberNetwork(hint, takerToken, makerToken, takerTokenAmounts[i]);\n            // Return early if the source has no liquidity\n            if (value == 0) {\n                return (hint, makerTokenAmounts);\n            }\n            makerTokenAmounts[i] = value;\n        }\n    }\n\n    /// @dev Sample buy quotes from Kyber.\n    /// @param reserveId The selected kyber reserve\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return hint The hint for the selected reserve\n    /// @return takerTokenAmounts Taker amounts sold at each maker token amount.\n    function sampleBuysFromKyberNetwork(\n        bytes32 reserveId,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (bytes memory hint, uint256[] memory takerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        hint = this.encodeKyberHint(reserveId, takerToken, makerToken);\n        takerTokenAmounts = _sampleApproximateBuys(\n            ApproximateBuyQuoteOpts({\n                makerTokenData: abi.encode(makerToken, hint),\n                takerTokenData: abi.encode(takerToken, hint),\n                getSellQuoteCallback: _sampleSellForApproximateBuyFromKyber\n            }),\n            makerTokenAmounts\n        );\n        return (hint, takerTokenAmounts);\n    }\n\n    function encodeKyberHint(\n        bytes32 reserveId,\n        address takerToken,\n        address makerToken\n    )\n        public\n        view\n        returns (bytes memory hint)\n    {\n        // Build a hint selecting the single reserve\n        IKyberHintHandler kyberHint = IKyberHintHandler(_getKyberHintHandlerAddress());\n\n        // All other reserves should be ignored with this hint\n        bytes32[] memory selectedReserves = new bytes32[](1);\n        selectedReserves[0] = reserveId;\n\n        bool didSucceed;\n        bytes memory resultData;\n        if (takerToken == _getWethAddress()) {\n            // ETH to Token\n            (didSucceed, resultData) =\n                address(kyberHint).staticcall.gas(KYBER_CALL_GAS)(\n                    abi.encodeWithSelector(\n                        IKyberHintHandler(0).buildEthToTokenHint.selector,\n                        makerToken,\n                        IKyberHintHandler.TradeType.MaskIn,\n                        selectedReserves,\n                        new uint256[](0)));\n        } else if (makerToken == _getWethAddress()) {\n            // Token to ETH\n            (didSucceed, resultData) =\n                address(kyberHint).staticcall.gas(KYBER_CALL_GAS)(\n                    abi.encodeWithSelector(\n                        IKyberHintHandler(0).buildTokenToEthHint.selector,\n                        takerToken,\n                        IKyberHintHandler.TradeType.MaskIn,\n                        selectedReserves,\n                        new uint256[](0)));\n        } else {\n            // Token to Token\n            // We use the same reserve both ways\n            (didSucceed, resultData) =\n                address(kyberHint).staticcall.gas(KYBER_CALL_GAS)(\n                    abi.encodeWithSelector(\n                        IKyberHintHandler(0).buildTokenToTokenHint.selector,\n                        takerToken,\n                        IKyberHintHandler.TradeType.MaskIn,\n                        selectedReserves,\n                        new uint256[](0),\n                        makerToken,\n                        IKyberHintHandler.TradeType.MaskIn,\n                        selectedReserves,\n                        new uint256[](0)\n                    )\n            );\n        }\n        // If successful decode the hint\n        if (didSucceed) {\n            hint = abi.decode(resultData, (bytes));\n        }\n        return hint;\n    }\n\n    function _sampleSellForApproximateBuyFromKyber(\n        bytes memory takerTokenData,\n        bytes memory makerTokenData,\n        uint256 sellAmount\n    )\n        private\n        view\n        returns (uint256 buyAmount)\n    {\n        (address makerToken, bytes memory hint) =\n            abi.decode(makerTokenData, (address, bytes));\n        (address takerToken, ) =\n            abi.decode(takerTokenData, (address, bytes));\n        (bool success, bytes memory resultData) =\n            address(this).staticcall(abi.encodeWithSelector(\n                this.sampleSellFromKyberNetwork.selector,\n                hint,\n                takerToken,\n                makerToken,\n                sellAmount\n            ));\n        if (!success) {\n            return 0;\n        }\n        // solhint-disable-next-line indent\n        return abi.decode(resultData, (uint256));\n    }\n\n    function sampleSellFromKyberNetwork(\n        bytes memory hint,\n        address takerToken,\n        address makerToken,\n        uint256 takerTokenAmount\n    )\n        public\n        view\n        returns (uint256 makerTokenAmount)\n    {\n        // If there is no hint do not continue\n        if (hint.length == 0) {\n            return 0;\n        }\n\n        (bool didSucceed, bytes memory resultData) =\n            _getKyberNetworkProxyAddress().staticcall.gas(KYBER_CALL_GAS)(\n                abi.encodeWithSelector(\n                    IKyberNetworkProxy(0).getExpectedRateAfterFee.selector,\n                    takerToken == _getWethAddress() ? KYBER_ETH_ADDRESS : takerToken,\n                    makerToken == _getWethAddress() ? KYBER_ETH_ADDRESS : makerToken,\n                    takerTokenAmount,\n                    0, // fee\n                    hint\n                ));\n        uint256 rate = 0;\n        if (didSucceed) {\n            (rate) = abi.decode(resultData, (uint256));\n        } else {\n            return 0;\n        }\n\n        uint256 makerTokenDecimals = _getTokenDecimals(makerToken);\n        uint256 takerTokenDecimals = _getTokenDecimals(takerToken);\n        makerTokenAmount =\n            rate *\n            takerTokenAmount *\n            10 ** makerTokenDecimals /\n            10 ** takerTokenDecimals /\n            10 ** 18;\n        return makerTokenAmount;\n    }\n}\n",
        "./interfaces/IKyberNetwork.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n// Keepin everything together\ninterface IKyberNetwork {\n\n\n}\n\n\ninterface IKyberNetworkProxy {\n\n    function getExpectedRateAfterFee(\n        address src,\n        address dest,\n        uint256 srcQty,\n        uint256 platformFeeBps,\n        bytes calldata hint\n    )\n        external\n        view\n        returns (uint256 expectedRate);\n}\n\ninterface IKyberHintHandler {\n\n    enum TradeType {BestOfAll, MaskIn, MaskOut, Split}\n\n    function buildTokenToEthHint(\n        address tokenSrc,\n        TradeType tokenToEthType,\n        bytes32[] calldata tokenToEthReserveIds,\n        uint256[] calldata tokenToEthSplits\n    )\n        external\n        view\n        returns (bytes memory hint);\n\n    function buildEthToTokenHint(\n        address tokenDest,\n        TradeType ethToTokenType,\n        bytes32[] calldata ethToTokenReserveIds,\n        uint256[] calldata ethToTokenSplits\n    )\n        external\n        view\n        returns (bytes memory hint);\n\n    function buildTokenToTokenHint(\n        address tokenSrc,\n        TradeType tokenToEthType,\n        bytes32[] calldata tokenToEthReserveIds,\n        uint256[] calldata tokenToEthSplits,\n        address tokenDest,\n        TradeType ethToTokenType,\n        bytes32[] calldata ethToTokenReserveIds,\n        uint256[] calldata ethToTokenSplits\n    )\n        external\n        view\n        returns (bytes memory hint);\n}\n",
        "./LiquidityProviderSampler.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/LibBytes.sol\";\nimport \"./interfaces/ILiquidityProvider.sol\";\nimport \"./interfaces/ILiquidityProviderRegistry.sol\";\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\n\n\ncontract LiquidityProviderSampler is\n    SamplerUtils,\n    ApproximateBuys\n{\n    /// @dev Default gas limit for liquidity provider calls.\n    uint256 constant private DEFAULT_CALL_GAS = 400e3; // 400k\n\n    /// @dev Sample sell quotes from an arbitrary on-chain liquidity provider.\n    /// @param registryAddress Address of the liquidity provider registry contract.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromLiquidityProviderRegistry(\n        address registryAddress,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts, address providerAddress)\n    {\n        // Initialize array of maker token amounts.\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        // Query registry for provider address.\n        providerAddress = _getLiquidityProviderFromRegistry(\n            registryAddress,\n            takerToken,\n            makerToken\n        );\n        // If provider doesn't exist, return all zeros.\n        if (providerAddress == address(0)) {\n            return (makerTokenAmounts, providerAddress);\n        }\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            (bool didSucceed, bytes memory resultData) =\n                providerAddress.staticcall.gas(DEFAULT_CALL_GAS)(\n                    abi.encodeWithSelector(\n                        ILiquidityProvider(0).getSellQuote.selector,\n                        takerToken,\n                        makerToken,\n                        takerTokenAmounts[i]\n                    ));\n            uint256 buyAmount = 0;\n            if (didSucceed) {\n                buyAmount = abi.decode(resultData, (uint256));\n            }\n            // Exit early if the amount is too high for the source to serve\n            if (buyAmount == 0) {\n                break;\n            }\n            makerTokenAmounts[i] = buyAmount;\n        }\n    }\n\n    /// @dev Sample buy quotes from an arbitrary on-chain liquidity provider.\n    /// @param registryAddress Address of the liquidity provider registry contract.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromLiquidityProviderRegistry(\n        address registryAddress,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts, address providerAddress)\n    {\n        providerAddress = _getLiquidityProviderFromRegistry(\n            registryAddress,\n            takerToken,\n            makerToken\n        );\n        takerTokenAmounts = _sampleApproximateBuys(\n            ApproximateBuyQuoteOpts({\n                makerTokenData: abi.encode(makerToken, registryAddress),\n                takerTokenData: abi.encode(takerToken, registryAddress),\n                getSellQuoteCallback: _sampleSellForApproximateBuyFromLiquidityProviderRegistry\n            }),\n            makerTokenAmounts\n        );\n    }\n\n    /// @dev Returns the address of a liquidity provider for the given market\n    ///      (takerToken, makerToken), from a registry of liquidity providers.\n    ///      Returns address(0) if no such provider exists in the registry.\n    /// @param takerToken Taker asset managed by liquidity provider.\n    /// @param makerToken Maker asset managed by liquidity provider.\n    /// @return providerAddress Address of the liquidity provider.\n    function _getLiquidityProviderFromRegistry(\n        address registryAddress,\n        address takerToken,\n        address makerToken\n    )\n        private\n        view\n        returns (address providerAddress)\n    {\n        if (registryAddress == address(0)) {\n            return address(0);\n        }\n        bytes memory callData = abi.encodeWithSelector(\n            ILiquidityProviderRegistry(0).getLiquidityProviderForMarket.selector,\n            takerToken,\n            makerToken\n        );\n        (bool didSucceed, bytes memory returnData) = registryAddress.staticcall(callData);\n        if (didSucceed && returnData.length == 32) {\n            return LibBytes.readAddress(returnData, 12);\n        }\n    }\n\n    function _sampleSellForApproximateBuyFromLiquidityProviderRegistry(\n        bytes memory takerTokenData,\n        bytes memory makerTokenData,\n        uint256 sellAmount\n    )\n        private\n        view\n        returns (uint256 buyAmount)\n    {\n        (address takerToken, address plpRegistryAddress) =\n            abi.decode(takerTokenData, (address, address));\n        (address makerToken) =\n            abi.decode(makerTokenData, (address));\n        (bool success, bytes memory resultData) =\n            address(this).staticcall(abi.encodeWithSelector(\n                this.sampleSellsFromLiquidityProviderRegistry.selector,\n                plpRegistryAddress,\n                takerToken,\n                makerToken,\n                _toSingleValueArray(sellAmount)\n            ));\n        if (!success) {\n            return 0;\n        }\n        // solhint-disable-next-line indent\n        (uint256[] memory amounts, ) = abi.decode(resultData, (uint256[], address));\n        return amounts[0];\n    }\n}\n",
        "./interfaces/ILiquidityProvider.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\ninterface ILiquidityProvider {\n\n    /// @dev Transfers `amount` of the ERC20 `tokenAddress` from `from` to `to`.\n    /// @param tokenAddress The address of the ERC20 token to transfer.\n    /// @param from Address to transfer asset from.\n    /// @param to Address to transfer asset to.\n    /// @param amount Amount of asset to transfer.\n    /// @param bridgeData Arbitrary asset data needed by the bridge contract.\n    /// @return success The magic bytes `0xdc1600f3` if successful.\n    function bridgeTransferFrom(\n        address tokenAddress,\n        address from,\n        address to,\n        uint256 amount,\n        bytes calldata bridgeData\n    )\n        external\n        returns (bytes4 success);\n\n    /// @dev Quotes the amount of `makerToken` that would be obtained by\n    ///      selling `sellAmount` of `takerToken`.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param sellAmount Amount of `takerToken` to sell.\n    /// @return makerTokenAmount Amount of `makerToken` that would be obtained.\n    function getSellQuote(\n        address takerToken,\n        address makerToken,\n        uint256 sellAmount\n    )\n        external\n        view\n        returns (uint256 makerTokenAmount);\n\n    /// @dev Quotes the amount of `takerToken` that would need to be sold in\n    ///      order to obtain `buyAmount` of `makerToken`.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param buyAmount Amount of `makerToken` to buy.\n    /// @return takerTokenAmount Amount of `takerToken` that would need to be sold.\n    function getBuyQuote(\n        address takerToken,\n        address makerToken,\n        uint256 buyAmount\n    )\n        external\n        view\n        returns (uint256 takerTokenAmount);\n}\n",
        "./interfaces/ILiquidityProviderRegistry.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\ninterface ILiquidityProviderRegistry {\n\n    /// @dev Returns the address of a liquidity provider for the given market\n    ///      (takerToken, makerToken), reverting if the pool does not exist.\n    /// @param takerToken Taker asset managed by liquidity provider.\n    /// @param makerToken Maker asset managed by liquidity provider.\n    /// @return Address of the liquidity provider.\n    function getLiquidityProviderForMarket(\n        address takerToken,\n        address makerToken\n    )\n        external\n        view\n        returns (address providerAddress);\n}\n",
        "./MultiBridgeSampler.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IMultiBridge.sol\";\n\n\ncontract MultiBridgeSampler {\n\n    /// @dev Default gas limit for multibridge calls.\n    uint256 constant private DEFAULT_CALL_GAS = 400e3; // 400k\n\n    /// @dev Sample sell quotes from MultiBridge.\n    /// @param multibridge Address of the MultiBridge contract.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param intermediateToken The address of the intermediate token to\n    ///        use in an indirect route.\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromMultiBridge(\n        address multibridge,\n        address takerToken,\n        address intermediateToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        // Initialize array of maker token amounts.\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        // If no address provided, return all zeros.\n        if (multibridge == address(0)) {\n            return makerTokenAmounts;\n        }\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            (bool didSucceed, bytes memory resultData) =\n                multibridge.staticcall.gas(DEFAULT_CALL_GAS)(\n                    abi.encodeWithSelector(\n                        IMultiBridge(0).getSellQuote.selector,\n                        takerToken,\n                        intermediateToken,\n                        makerToken,\n                        takerTokenAmounts[i]\n                    ));\n            uint256 buyAmount = 0;\n            if (didSucceed) {\n                buyAmount = abi.decode(resultData, (uint256));\n            }\n            // Exit early if the amount is too high for the source to serve\n            if (buyAmount == 0) {\n                break;\n            }\n\n            makerTokenAmounts[i] = buyAmount;\n        }\n    }\n}\n",
        "./interfaces/IMultiBridge.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\ninterface IMultiBridge {\n\n    /// @dev Transfers `amount` of the ERC20 `tokenAddress` from `from` to `to`.\n    /// @param tokenAddress The address of the ERC20 token to transfer.\n    /// @param from Address to transfer asset from.\n    /// @param to Address to transfer asset to.\n    /// @param amount Amount of asset to transfer.\n    /// @param bridgeData Arbitrary asset data needed by the bridge contract.\n    /// @return success The magic bytes `0xdc1600f3` if successful.\n    function bridgeTransferFrom(\n        address tokenAddress,\n        address from,\n        address to,\n        uint256 amount,\n        bytes calldata bridgeData\n    )\n        external\n        returns (bytes4 success);\n\n    /// @dev Quotes the amount of `makerToken` that would be obtained by\n    ///      selling `sellAmount` of `takerToken`.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param intermediateToken The address of the intermediate token to\n    ///        use in an indirect route.\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param sellAmount Amount of `takerToken` to sell.\n    /// @return makerTokenAmount Amount of `makerToken` that would be obtained.\n    function getSellQuote(\n        address takerToken,\n        address intermediateToken,\n        address makerToken,\n        uint256 sellAmount\n    )\n        external\n        view\n        returns (uint256 makerTokenAmount);\n}\n",
        "./MStableSampler.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/DeploymentConstants.sol\";\nimport \"@0x/contracts-utils/contracts/src/LibBytes.sol\";\nimport \"./interfaces/IMStable.sol\";\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\n\n\ncontract MStableSampler is\n    DeploymentConstants,\n    SamplerUtils,\n    ApproximateBuys\n{\n    /// @dev Default gas limit for mStable calls.\n    uint256 constant private DEFAULT_CALL_GAS = 800e3; // 800k\n\n    /// @dev Sample sell quotes from the mStable mUSD contract\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromMStable(\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        // Initialize array of maker token amounts.\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            (bool didSucceed, bytes memory resultData) =\n                address(_getMUsdAddress()).staticcall.gas(DEFAULT_CALL_GAS)(\n                    abi.encodeWithSelector(\n                        IMStable(0).getSwapOutput.selector,\n                        takerToken,\n                        makerToken,\n                        takerTokenAmounts[i]\n                    ));\n            uint256 buyAmount = 0;\n            if (didSucceed) {\n                (, , buyAmount) = abi.decode(resultData, (bool, string, uint256));\n            }\n            // Exit early if the amount is too high for the source to serve\n            if (buyAmount == 0) {\n                break;\n            }\n            makerTokenAmounts[i] = buyAmount;\n        }\n    }\n\n    /// @dev Sample buy quotes from MStable mUSD contract\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromMStable(\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        return _sampleApproximateBuys(\n            ApproximateBuyQuoteOpts({\n                makerTokenData: abi.encode(makerToken),\n                takerTokenData: abi.encode(takerToken),\n                getSellQuoteCallback: _sampleSellForApproximateBuyFromMStable\n            }),\n            makerTokenAmounts\n        );\n    }\n\n    function _sampleSellForApproximateBuyFromMStable(\n        bytes memory takerTokenData,\n        bytes memory makerTokenData,\n        uint256 sellAmount\n    )\n        private\n        view\n        returns (uint256 buyAmount)\n    {\n        (address takerToken) =\n            abi.decode(takerTokenData, (address));\n        (address makerToken) =\n            abi.decode(makerTokenData, (address));\n        (bool success, bytes memory resultData) =\n            address(this).staticcall(abi.encodeWithSelector(\n                this.sampleSellsFromMStable.selector,\n                takerToken,\n                makerToken,\n                _toSingleValueArray(sellAmount)\n            ));\n        if (!success) {\n            return 0;\n        }\n        // solhint-disable-next-line indent\n        return abi.decode(resultData, (uint256[]))[0];\n    }\n}\n",
        "./interfaces/IMStable.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\ninterface IMStable {\n\n    function getSwapOutput(\n        address _input,\n        address _output,\n        uint256 _quantity\n    )\n        external\n        view\n        returns (bool, string memory, uint256 output);\n}\n",
        "./MooniswapSampler.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/DeploymentConstants.sol\";\nimport \"./IMooniswap.sol\";\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\n\n\ncontract MooniswapSampler is\n    DeploymentConstants,\n    SamplerUtils,\n    ApproximateBuys\n{\n    /// @dev Gas limit for Mooniswap calls.\n    uint256 constant private MOONISWAP_CALL_GAS = 150e3; // 150k\n\n    /// @dev Sample sell quotes from Mooniswap.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromMooniswap(\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (IMooniswap pool, uint256[] memory makerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        address mooniswapTakerToken = takerToken == _getWethAddress() ? address(0) : takerToken;\n        address mooniswapMakerToken = makerToken == _getWethAddress() ? address(0) : makerToken;\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            uint256 buyAmount = sampleSingleSellFromMooniswapPool(\n                mooniswapTakerToken,\n                mooniswapMakerToken,\n                takerTokenAmounts[i]\n            );\n            // Exit early if the amount is too high for the source to serve\n            if (buyAmount == 0) {\n                break;\n            }\n            makerTokenAmounts[i] = buyAmount;\n        }\n\n        pool = IMooniswap(\n            IMooniswapRegistry(_getMooniswapAddress()).pools(mooniswapTakerToken, mooniswapMakerToken)\n        );\n    }\n\n    function sampleSingleSellFromMooniswapPool(\n        address mooniswapTakerToken,\n        address mooniswapMakerToken,\n        uint256 takerTokenAmount\n    )\n        public\n        view\n        returns (uint256 makerTokenAmount)\n    {\n        // Find the pool for the pair.\n        IMooniswap pool = IMooniswap(\n            IMooniswapRegistry(_getMooniswapAddress()).pools(mooniswapTakerToken, mooniswapMakerToken)\n        );\n        // If there is no pool then return early\n        if (address(pool) == address(0)) {\n            return makerTokenAmount;\n        }\n        uint256 poolBalance = mooniswapTakerToken == address(0)\n            ? address(pool).balance\n            : IERC20Token(mooniswapTakerToken).balanceOf(address(pool));\n        // If the pool balance is smaller than the sell amount\n        // don't sample to avoid multiplication overflow in buys\n        if (poolBalance < takerTokenAmount) {\n            return makerTokenAmount;\n        }\n        (bool didSucceed, bytes memory resultData) =\n            address(pool).staticcall.gas(MOONISWAP_CALL_GAS)(\n                abi.encodeWithSelector(\n                    pool.getReturn.selector,\n                    mooniswapTakerToken,\n                    mooniswapMakerToken,\n                    takerTokenAmount\n                ));\n        if (didSucceed) {\n            makerTokenAmount = abi.decode(resultData, (uint256));\n        }\n    }\n\n    /// @dev Sample buy quotes from Mooniswap.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token sell amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromMooniswap(\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (IMooniswap pool, uint256[] memory takerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n\n        address mooniswapTakerToken = takerToken == _getWethAddress() ? address(0) : takerToken;\n        address mooniswapMakerToken = makerToken == _getWethAddress() ? address(0) : makerToken;\n\n        takerTokenAmounts = _sampleApproximateBuys(\n            ApproximateBuyQuoteOpts({\n                makerTokenData: abi.encode(mooniswapMakerToken),\n                takerTokenData: abi.encode(mooniswapTakerToken),\n                getSellQuoteCallback: _sampleSellForApproximateBuyFromMooniswap\n            }),\n            makerTokenAmounts\n        );\n\n        pool = IMooniswap(\n            IMooniswapRegistry(_getMooniswapAddress()).pools(mooniswapTakerToken, mooniswapMakerToken)\n        );\n    }\n\n    function _sampleSellForApproximateBuyFromMooniswap(\n        bytes memory takerTokenData,\n        bytes memory makerTokenData,\n        uint256 sellAmount\n    )\n        private\n        view\n        returns (uint256 buyAmount)\n    {\n        address mooniswapTakerToken = abi.decode(takerTokenData, (address));\n        address mooniswapMakerToken = abi.decode(makerTokenData, (address));\n        return sampleSingleSellFromMooniswapPool(\n            mooniswapTakerToken,\n            mooniswapMakerToken,\n            sellAmount\n        );\n    }\n}\n",
        "./IMooniswap.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\ninterface IMooniswapRegistry {\n\n    function pools(address token1, address token2) external view returns(address);\n}\n\ninterface IMooniswap {\n\n    function getReturn(\n        address fromToken,\n        address destToken,\n        uint256 amount\n    )\n        external\n        view\n        returns(uint256 returnAmount);\n}\n",
        "./NativeOrderSampler.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/interfaces/IERC20Token.sol\";\nimport \"@0x/contracts-exchange/contracts/src/interfaces/IExchange.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/LibOrder.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/LibMath.sol\";\nimport \"@0x/contracts-utils/contracts/src/LibBytes.sol\";\nimport \"@0x/contracts-utils/contracts/src/LibSafeMath.sol\";\n\n\ncontract NativeOrderSampler {\n    using LibSafeMath for uint256;\n    using LibBytes for bytes;\n\n    /// @dev The Exchange ERC20Proxy ID.\n    bytes4 private constant ERC20_ASSET_PROXY_ID = 0xf47261b0;\n    /// @dev Gas limit for calls to `getOrderFillableTakerAmount()`.\n    uint256 constant internal DEFAULT_CALL_GAS = 200e3; // 200k\n\n    /// @dev Queries the fillable taker asset amounts of native orders.\n    ///      Effectively ignores orders that have empty signatures or\n    ///      maker/taker asset amounts (returning 0).\n    /// @param orders Native orders to query.\n    /// @param orderSignatures Signatures for each respective order in `orders`.\n    /// @param exchange The V3 exchange.\n    /// @return orderFillableTakerAssetAmounts How much taker asset can be filled\n    ///         by each order in `orders`.\n    function getOrderFillableTakerAssetAmounts(\n        LibOrder.Order[] memory orders,\n        bytes[] memory orderSignatures,\n        IExchange exchange\n    )\n        public\n        view\n        returns (uint256[] memory orderFillableTakerAssetAmounts)\n    {\n        orderFillableTakerAssetAmounts = new uint256[](orders.length);\n        for (uint256 i = 0; i != orders.length; i++) {\n            // solhint-disable indent\n            (bool didSucceed, bytes memory resultData) =\n                address(this)\n                    .staticcall\n                    .gas(DEFAULT_CALL_GAS)\n                    (abi.encodeWithSelector(\n                       this.getOrderFillableTakerAmount.selector,\n                       orders[i],\n                       orderSignatures[i],\n                       exchange\n                    ));\n            // solhint-enable indent\n            orderFillableTakerAssetAmounts[i] = didSucceed\n                ? abi.decode(resultData, (uint256))\n                : 0;\n        }\n    }\n\n    /// @dev Queries the fillable taker asset amounts of native orders.\n    ///      Effectively ignores orders that have empty signatures or\n    /// @param orders Native orders to query.\n    /// @param orderSignatures Signatures for each respective order in `orders`.\n    /// @param exchange The V3 exchange.\n    /// @return orderFillableMakerAssetAmounts How much maker asset can be filled\n    ///         by each order in `orders`.\n    function getOrderFillableMakerAssetAmounts(\n        LibOrder.Order[] memory orders,\n        bytes[] memory orderSignatures,\n        IExchange exchange\n    )\n        public\n        view\n        returns (uint256[] memory orderFillableMakerAssetAmounts)\n    {\n        orderFillableMakerAssetAmounts = getOrderFillableTakerAssetAmounts(\n            orders,\n            orderSignatures,\n            exchange\n        );\n        // `orderFillableMakerAssetAmounts` now holds taker asset amounts, so\n        // convert them to maker asset amounts.\n        for (uint256 i = 0; i < orders.length; ++i) {\n            if (orderFillableMakerAssetAmounts[i] != 0) {\n                orderFillableMakerAssetAmounts[i] = LibMath.getPartialAmountCeil(\n                    orderFillableMakerAssetAmounts[i],\n                    orders[i].takerAssetAmount,\n                    orders[i].makerAssetAmount\n                );\n            }\n        }\n    }\n\n    /// @dev Get the fillable taker amount of an order, taking into account\n    ///      order state, maker fees, and maker balances.\n    function getOrderFillableTakerAmount(\n        LibOrder.Order memory order,\n        bytes memory signature,\n        IExchange exchange\n    )\n        public\n        view\n        returns (uint256 fillableTakerAmount)\n    {\n        if (signature.length == 0 ||\n            order.makerAssetAmount == 0 ||\n            order.takerAssetAmount == 0)\n        {\n            return 0;\n        }\n\n        LibOrder.OrderInfo memory orderInfo = exchange.getOrderInfo(order);\n        if (orderInfo.orderStatus != LibOrder.OrderStatus.FILLABLE) {\n            return 0;\n        }\n        if (!exchange.isValidHashSignature(orderInfo.orderHash, order.makerAddress, signature)) {\n            return 0;\n        }\n        address spender = exchange.getAssetProxy(ERC20_ASSET_PROXY_ID);\n        IERC20Token makerToken = _getTokenFromERC20AssetData(order.makerAssetData);\n        if (makerToken == IERC20Token(0)) {\n            return 0;\n        }\n        IERC20Token makerFeeToken = order.makerFee > 0\n            ? _getTokenFromERC20AssetData(order.makerFeeAssetData)\n            : IERC20Token(0);\n        uint256 remainingTakerAmount = order.takerAssetAmount\n            .safeSub(orderInfo.orderTakerAssetFilledAmount);\n        fillableTakerAmount = remainingTakerAmount;\n        // The total fillable maker amount is the remaining fillable maker amount\n        // PLUS maker fees, if maker fees are denominated in the maker token.\n        uint256 totalFillableMakerAmount = LibMath.safeGetPartialAmountFloor(\n            remainingTakerAmount,\n            order.takerAssetAmount,\n            makerFeeToken == makerToken\n                ? order.makerAssetAmount.safeAdd(order.makerFee)\n                : order.makerAssetAmount\n        );\n        // The spendable amount of maker tokens (by the maker) is the lesser of\n        // the maker's balance and the allowance they've granted to the ERC20Proxy.\n        uint256 spendableMakerAmount = LibSafeMath.min256(\n            makerToken.balanceOf(order.makerAddress),\n            makerToken.allowance(order.makerAddress, spender)\n        );\n        // Scale the fillable taker amount by the ratio of the maker's\n        // spendable maker amount over the total fillable maker amount.\n        if (spendableMakerAmount < totalFillableMakerAmount) {\n            fillableTakerAmount = LibMath.getPartialAmountCeil(\n                spendableMakerAmount,\n                totalFillableMakerAmount,\n                remainingTakerAmount\n            );\n        }\n        // If the maker fee is denominated in another token, constrain\n        // the fillable taker amount by how much the maker can pay of that token.\n        if (makerFeeToken != makerToken && makerFeeToken != IERC20Token(0)) {\n            uint256 spendableExtraMakerFeeAmount = LibSafeMath.min256(\n                makerFeeToken.balanceOf(order.makerAddress),\n                makerFeeToken.allowance(order.makerAddress, spender)\n            );\n            if (spendableExtraMakerFeeAmount < order.makerFee) {\n                fillableTakerAmount = LibSafeMath.min256(\n                    fillableTakerAmount,\n                    LibMath.getPartialAmountCeil(\n                        spendableExtraMakerFeeAmount,\n                        order.makerFee,\n                        remainingTakerAmount\n                    )\n                );\n            }\n        }\n    }\n\n    function _getTokenFromERC20AssetData(bytes memory assetData)\n        private\n        pure\n        returns (IERC20Token token)\n    {\n        if (assetData.length == 0) {\n            return IERC20Token(address(0));\n        }\n        if (assetData.length != 36 ||\n            assetData.readBytes4(0) != ERC20_ASSET_PROXY_ID)\n        {\n            return IERC20Token(address(0));\n        }\n        return IERC20Token(assetData.readAddress(16));\n    }\n}\n",
        "@0x/contracts-exchange/contracts/src/interfaces/IExchange.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"./IExchangeCore.sol\";\nimport \"./IProtocolFees.sol\";\nimport \"./IMatchOrders.sol\";\nimport \"./ISignatureValidator.sol\";\nimport \"./ITransactions.sol\";\nimport \"./IAssetProxyDispatcher.sol\";\nimport \"./IWrapperFunctions.sol\";\nimport \"./ITransferSimulator.sol\";\n\n\n// solhint-disable no-empty-blocks\ncontract IExchange is\n    IProtocolFees,\n    IExchangeCore,\n    IMatchOrders,\n    ISignatureValidator,\n    ITransactions,\n    IAssetProxyDispatcher,\n    ITransferSimulator,\n    IWrapperFunctions\n{}\n",
        "@0x/contracts-exchange/contracts/src/interfaces/IExchangeCore.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-exchange-libs/contracts/src/LibOrder.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/LibFillResults.sol\";\n\n\ncontract IExchangeCore {\n\n    // Fill event is emitted whenever an order is filled.\n    event Fill(\n        address indexed makerAddress,         // Address that created the order.\n        address indexed feeRecipientAddress,  // Address that received fees.\n        bytes makerAssetData,                 // Encoded data specific to makerAsset.\n        bytes takerAssetData,                 // Encoded data specific to takerAsset.\n        bytes makerFeeAssetData,              // Encoded data specific to makerFeeAsset.\n        bytes takerFeeAssetData,              // Encoded data specific to takerFeeAsset.\n        bytes32 indexed orderHash,            // EIP712 hash of order (see LibOrder.getTypedDataHash).\n        address takerAddress,                 // Address that filled the order.\n        address senderAddress,                // Address that called the Exchange contract (msg.sender).\n        uint256 makerAssetFilledAmount,       // Amount of makerAsset sold by maker and bought by taker.\n        uint256 takerAssetFilledAmount,       // Amount of takerAsset sold by taker and bought by maker.\n        uint256 makerFeePaid,                 // Amount of makerFeeAssetData paid to feeRecipient by maker.\n        uint256 takerFeePaid,                 // Amount of takerFeeAssetData paid to feeRecipient by taker.\n        uint256 protocolFeePaid               // Amount of eth or weth paid to the staking contract.\n    );\n\n    // Cancel event is emitted whenever an individual order is cancelled.\n    event Cancel(\n        address indexed makerAddress,         // Address that created the order.\n        address indexed feeRecipientAddress,  // Address that would have recieved fees if order was filled.\n        bytes makerAssetData,                 // Encoded data specific to makerAsset.\n        bytes takerAssetData,                 // Encoded data specific to takerAsset.\n        address senderAddress,                // Address that called the Exchange contract (msg.sender).\n        bytes32 indexed orderHash             // EIP712 hash of order (see LibOrder.getTypedDataHash).\n    );\n\n    // CancelUpTo event is emitted whenever `cancelOrdersUpTo` is executed succesfully.\n    event CancelUpTo(\n        address indexed makerAddress,         // Orders cancelled must have been created by this address.\n        address indexed orderSenderAddress,   // Orders cancelled must have a `senderAddress` equal to this address.\n        uint256 orderEpoch                    // Orders with specified makerAddress and senderAddress with a salt less than this value are considered cancelled.\n    );\n\n    /// @dev Cancels all orders created by makerAddress with a salt less than or equal to the targetOrderEpoch\n    ///      and senderAddress equal to msg.sender (or null address if msg.sender == makerAddress).\n    /// @param targetOrderEpoch Orders created with a salt less or equal to this value will be cancelled.\n    function cancelOrdersUpTo(uint256 targetOrderEpoch)\n        external\n        payable;\n\n    /// @dev Fills the input order.\n    /// @param order Order struct containing order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signature Proof that order has been created by maker.\n    /// @return Amounts filled and fees paid by maker and taker.\n    function fillOrder(\n        LibOrder.Order memory order,\n        uint256 takerAssetFillAmount,\n        bytes memory signature\n    )\n        public\n        payable\n        returns (LibFillResults.FillResults memory fillResults);\n\n    /// @dev After calling, the order can not be filled anymore.\n    /// @param order Order struct containing order specifications.\n    function cancelOrder(LibOrder.Order memory order)\n        public\n        payable;\n\n    /// @dev Gets information about an order: status, hash, and amount filled.\n    /// @param order Order to gather information on.\n    /// @return OrderInfo Information about the order and its state.\n    ///                   See LibOrder.OrderInfo for a complete description.\n    function getOrderInfo(LibOrder.Order memory order)\n        public\n        view\n        returns (LibOrder.OrderInfo memory orderInfo);\n}\n",
        "@0x/contracts-exchange-libs/contracts/src/LibOrder.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\nimport \"@0x/contracts-utils/contracts/src/LibEIP712.sol\";\n\n\nlibrary LibOrder {\n\n    using LibOrder for Order;\n\n    // Hash for the EIP712 Order Schema:\n    // keccak256(abi.encodePacked(\n    //     \"Order(\",\n    //     \"address makerAddress,\",\n    //     \"address takerAddress,\",\n    //     \"address feeRecipientAddress,\",\n    //     \"address senderAddress,\",\n    //     \"uint256 makerAssetAmount,\",\n    //     \"uint256 takerAssetAmount,\",\n    //     \"uint256 makerFee,\",\n    //     \"uint256 takerFee,\",\n    //     \"uint256 expirationTimeSeconds,\",\n    //     \"uint256 salt,\",\n    //     \"bytes makerAssetData,\",\n    //     \"bytes takerAssetData,\",\n    //     \"bytes makerFeeAssetData,\",\n    //     \"bytes takerFeeAssetData\",\n    //     \")\"\n    // ))\n    bytes32 constant internal _EIP712_ORDER_SCHEMA_HASH =\n        0xf80322eb8376aafb64eadf8f0d7623f22130fd9491a221e902b713cb984a7534;\n\n    // A valid order remains fillable until it is expired, fully filled, or cancelled.\n    // An order's status is unaffected by external factors, like account balances.\n    enum OrderStatus {\n        INVALID,                     // Default value\n        INVALID_MAKER_ASSET_AMOUNT,  // Order does not have a valid maker asset amount\n        INVALID_TAKER_ASSET_AMOUNT,  // Order does not have a valid taker asset amount\n        FILLABLE,                    // Order is fillable\n        EXPIRED,                     // Order has already expired\n        FULLY_FILLED,                // Order is fully filled\n        CANCELLED                    // Order has been cancelled\n    }\n\n    // solhint-disable max-line-length\n    /// @dev Canonical order structure.\n    struct Order {\n        address makerAddress;           // Address that created the order.\n        address takerAddress;           // Address that is allowed to fill the order. If set to 0, any address is allowed to fill the order.\n        address feeRecipientAddress;    // Address that will recieve fees when order is filled.\n        address senderAddress;          // Address that is allowed to call Exchange contract methods that affect this order. If set to 0, any address is allowed to call these methods.\n        uint256 makerAssetAmount;       // Amount of makerAsset being offered by maker. Must be greater than 0.\n        uint256 takerAssetAmount;       // Amount of takerAsset being bid on by maker. Must be greater than 0.\n        uint256 makerFee;               // Fee paid to feeRecipient by maker when order is filled.\n        uint256 takerFee;               // Fee paid to feeRecipient by taker when order is filled.\n        uint256 expirationTimeSeconds;  // Timestamp in seconds at which order expires.\n        uint256 salt;                   // Arbitrary number to facilitate uniqueness of the order's hash.\n        bytes makerAssetData;           // Encoded data that can be decoded by a specified proxy contract when transferring makerAsset. The leading bytes4 references the id of the asset proxy.\n        bytes takerAssetData;           // Encoded data that can be decoded by a specified proxy contract when transferring takerAsset. The leading bytes4 references the id of the asset proxy.\n        bytes makerFeeAssetData;        // Encoded data that can be decoded by a specified proxy contract when transferring makerFeeAsset. The leading bytes4 references the id of the asset proxy.\n        bytes takerFeeAssetData;        // Encoded data that can be decoded by a specified proxy contract when transferring takerFeeAsset. The leading bytes4 references the id of the asset proxy.\n    }\n    // solhint-enable max-line-length\n\n    /// @dev Order information returned by `getOrderInfo()`.\n    struct OrderInfo {\n        OrderStatus orderStatus;                    // Status that describes order's validity and fillability.\n        bytes32 orderHash;                    // EIP712 typed data hash of the order (see LibOrder.getTypedDataHash).\n        uint256 orderTakerAssetFilledAmount;  // Amount of order that has already been filled.\n    }\n\n    /// @dev Calculates the EIP712 typed data hash of an order with a given domain separator.\n    /// @param order The order structure.\n    /// @return EIP712 typed data hash of the order.\n    function getTypedDataHash(Order memory order, bytes32 eip712ExchangeDomainHash)\n        internal\n        pure\n        returns (bytes32 orderHash)\n    {\n        orderHash = LibEIP712.hashEIP712Message(\n            eip712ExchangeDomainHash,\n            order.getStructHash()\n        );\n        return orderHash;\n    }\n\n    /// @dev Calculates EIP712 hash of the order struct.\n    /// @param order The order structure.\n    /// @return EIP712 hash of the order struct.\n    function getStructHash(Order memory order)\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        bytes32 schemaHash = _EIP712_ORDER_SCHEMA_HASH;\n        bytes memory makerAssetData = order.makerAssetData;\n        bytes memory takerAssetData = order.takerAssetData;\n        bytes memory makerFeeAssetData = order.makerFeeAssetData;\n        bytes memory takerFeeAssetData = order.takerFeeAssetData;\n\n        // Assembly for more efficiently computing:\n        // keccak256(abi.encodePacked(\n        //     EIP712_ORDER_SCHEMA_HASH,\n        //     uint256(order.makerAddress),\n        //     uint256(order.takerAddress),\n        //     uint256(order.feeRecipientAddress),\n        //     uint256(order.senderAddress),\n        //     order.makerAssetAmount,\n        //     order.takerAssetAmount,\n        //     order.makerFee,\n        //     order.takerFee,\n        //     order.expirationTimeSeconds,\n        //     order.salt,\n        //     keccak256(order.makerAssetData),\n        //     keccak256(order.takerAssetData),\n        //     keccak256(order.makerFeeAssetData),\n        //     keccak256(order.takerFeeAssetData)\n        // ));\n\n        assembly {\n            // Assert order offset (this is an internal error that should never be triggered)\n            if lt(order, 32) {\n                invalid()\n            }\n\n            // Calculate memory addresses that will be swapped out before hashing\n            let pos1 := sub(order, 32)\n            let pos2 := add(order, 320)\n            let pos3 := add(order, 352)\n            let pos4 := add(order, 384)\n            let pos5 := add(order, 416)\n\n            // Backup\n            let temp1 := mload(pos1)\n            let temp2 := mload(pos2)\n            let temp3 := mload(pos3)\n            let temp4 := mload(pos4)\n            let temp5 := mload(pos5)\n\n            // Hash in place\n            mstore(pos1, schemaHash)\n            mstore(pos2, keccak256(add(makerAssetData, 32), mload(makerAssetData)))        // store hash of makerAssetData\n            mstore(pos3, keccak256(add(takerAssetData, 32), mload(takerAssetData)))        // store hash of takerAssetData\n            mstore(pos4, keccak256(add(makerFeeAssetData, 32), mload(makerFeeAssetData)))  // store hash of makerFeeAssetData\n            mstore(pos5, keccak256(add(takerFeeAssetData, 32), mload(takerFeeAssetData)))  // store hash of takerFeeAssetData\n            result := keccak256(pos1, 480)\n\n            // Restore\n            mstore(pos1, temp1)\n            mstore(pos2, temp2)\n            mstore(pos3, temp3)\n            mstore(pos4, temp4)\n            mstore(pos5, temp5)\n        }\n        return result;\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/LibEIP712.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\nlibrary LibEIP712 {\n\n    // Hash of the EIP712 Domain Separator Schema\n    // keccak256(abi.encodePacked(\n    //     \"EIP712Domain(\",\n    //     \"string name,\",\n    //     \"string version,\",\n    //     \"uint256 chainId,\",\n    //     \"address verifyingContract\",\n    //     \")\"\n    // ))\n    bytes32 constant internal _EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH = 0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f;\n\n    /// @dev Calculates a EIP712 domain separator.\n    /// @param name The EIP712 domain name.\n    /// @param version The EIP712 domain version.\n    /// @param verifyingContract The EIP712 verifying contract.\n    /// @return EIP712 domain separator.\n    function hashEIP712Domain(\n        string memory name,\n        string memory version,\n        uint256 chainId,\n        address verifyingContract\n    )\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        bytes32 schemaHash = _EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH;\n\n        // Assembly for more efficient computing:\n        // keccak256(abi.encodePacked(\n        //     _EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH,\n        //     keccak256(bytes(name)),\n        //     keccak256(bytes(version)),\n        //     chainId,\n        //     uint256(verifyingContract)\n        // ))\n\n        assembly {\n            // Calculate hashes of dynamic data\n            let nameHash := keccak256(add(name, 32), mload(name))\n            let versionHash := keccak256(add(version, 32), mload(version))\n\n            // Load free memory pointer\n            let memPtr := mload(64)\n\n            // Store params in memory\n            mstore(memPtr, schemaHash)\n            mstore(add(memPtr, 32), nameHash)\n            mstore(add(memPtr, 64), versionHash)\n            mstore(add(memPtr, 96), chainId)\n            mstore(add(memPtr, 128), verifyingContract)\n\n            // Compute hash\n            result := keccak256(memPtr, 160)\n        }\n        return result;\n    }\n\n    /// @dev Calculates EIP712 encoding for a hash struct with a given domain hash.\n    /// @param eip712DomainHash Hash of the domain domain separator data, computed\n    ///                         with getDomainHash().\n    /// @param hashStruct The EIP712 hash struct.\n    /// @return EIP712 hash applied to the given EIP712 Domain.\n    function hashEIP712Message(bytes32 eip712DomainHash, bytes32 hashStruct)\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        // Assembly for more efficient computing:\n        // keccak256(abi.encodePacked(\n        //     EIP191_HEADER,\n        //     EIP712_DOMAIN_HASH,\n        //     hashStruct\n        // ));\n\n        assembly {\n            // Load free memory pointer\n            let memPtr := mload(64)\n\n            mstore(memPtr, 0x1901000000000000000000000000000000000000000000000000000000000000)  // EIP191 header\n            mstore(add(memPtr, 2), eip712DomainHash)                                            // EIP712 domain hash\n            mstore(add(memPtr, 34), hashStruct)                                                 // Hash of struct\n\n            // Compute hash\n            result := keccak256(memPtr, 66)\n        }\n        return result;\n    }\n}\n",
        "@0x/contracts-exchange-libs/contracts/src/LibFillResults.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\nimport \"@0x/contracts-utils/contracts/src/LibSafeMath.sol\";\nimport \"./LibMath.sol\";\nimport \"./LibOrder.sol\";\n\n\nlibrary LibFillResults {\n\n    using LibSafeMath for uint256;\n\n    struct BatchMatchedFillResults {\n        FillResults[] left;              // Fill results for left orders\n        FillResults[] right;             // Fill results for right orders\n        uint256 profitInLeftMakerAsset;  // Profit taken from left makers\n        uint256 profitInRightMakerAsset; // Profit taken from right makers\n    }\n\n    struct FillResults {\n        uint256 makerAssetFilledAmount;  // Total amount of makerAsset(s) filled.\n        uint256 takerAssetFilledAmount;  // Total amount of takerAsset(s) filled.\n        uint256 makerFeePaid;            // Total amount of fees paid by maker(s) to feeRecipient(s).\n        uint256 takerFeePaid;            // Total amount of fees paid by taker to feeRecipients(s).\n        uint256 protocolFeePaid;         // Total amount of fees paid by taker to the staking contract.\n    }\n\n    struct MatchedFillResults {\n        FillResults left;                // Amounts filled and fees paid of left order.\n        FillResults right;               // Amounts filled and fees paid of right order.\n        uint256 profitInLeftMakerAsset;  // Profit taken from the left maker\n        uint256 profitInRightMakerAsset; // Profit taken from the right maker\n    }\n\n    /// @dev Calculates amounts filled and fees paid by maker and taker.\n    /// @param order to be filled.\n    /// @param takerAssetFilledAmount Amount of takerAsset that will be filled.\n    /// @param protocolFeeMultiplier The current protocol fee of the exchange contract.\n    /// @param gasPrice The gasprice of the transaction. This is provided so that the function call can continue\n    ///        to be pure rather than view.\n    /// @return fillResults Amounts filled and fees paid by maker and taker.\n    function calculateFillResults(\n        LibOrder.Order memory order,\n        uint256 takerAssetFilledAmount,\n        uint256 protocolFeeMultiplier,\n        uint256 gasPrice\n    )\n        internal\n        pure\n        returns (FillResults memory fillResults)\n    {\n        // Compute proportional transfer amounts\n        fillResults.takerAssetFilledAmount = takerAssetFilledAmount;\n        fillResults.makerAssetFilledAmount = LibMath.safeGetPartialAmountFloor(\n            takerAssetFilledAmount,\n            order.takerAssetAmount,\n            order.makerAssetAmount\n        );\n        fillResults.makerFeePaid = LibMath.safeGetPartialAmountFloor(\n            takerAssetFilledAmount,\n            order.takerAssetAmount,\n            order.makerFee\n        );\n        fillResults.takerFeePaid = LibMath.safeGetPartialAmountFloor(\n            takerAssetFilledAmount,\n            order.takerAssetAmount,\n            order.takerFee\n        );\n\n        // Compute the protocol fee that should be paid for a single fill.\n        fillResults.protocolFeePaid = gasPrice.safeMul(protocolFeeMultiplier);\n\n        return fillResults;\n    }\n\n    /// @dev Calculates fill amounts for the matched orders.\n    ///      Each order is filled at their respective price point. However, the calculations are\n    ///      carried out as though the orders are both being filled at the right order's price point.\n    ///      The profit made by the leftOrder order goes to the taker (who matched the two orders).\n    /// @param leftOrder First order to match.\n    /// @param rightOrder Second order to match.\n    /// @param leftOrderTakerAssetFilledAmount Amount of left order already filled.\n    /// @param rightOrderTakerAssetFilledAmount Amount of right order already filled.\n    /// @param protocolFeeMultiplier The current protocol fee of the exchange contract.\n    /// @param gasPrice The gasprice of the transaction. This is provided so that the function call can continue\n    ///        to be pure rather than view.\n    /// @param shouldMaximallyFillOrders A value that indicates whether or not this calculation should use\n    ///                                  the maximal fill order matching strategy.\n    /// @param matchedFillResults Amounts to fill and fees to pay by maker and taker of matched orders.\n    function calculateMatchedFillResults(\n        LibOrder.Order memory leftOrder,\n        LibOrder.Order memory rightOrder,\n        uint256 leftOrderTakerAssetFilledAmount,\n        uint256 rightOrderTakerAssetFilledAmount,\n        uint256 protocolFeeMultiplier,\n        uint256 gasPrice,\n        bool shouldMaximallyFillOrders\n    )\n        internal\n        pure\n        returns (MatchedFillResults memory matchedFillResults)\n    {\n        // Derive maker asset amounts for left & right orders, given store taker assert amounts\n        uint256 leftTakerAssetAmountRemaining = leftOrder.takerAssetAmount.safeSub(leftOrderTakerAssetFilledAmount);\n        uint256 leftMakerAssetAmountRemaining = LibMath.safeGetPartialAmountFloor(\n            leftOrder.makerAssetAmount,\n            leftOrder.takerAssetAmount,\n            leftTakerAssetAmountRemaining\n        );\n        uint256 rightTakerAssetAmountRemaining = rightOrder.takerAssetAmount.safeSub(rightOrderTakerAssetFilledAmount);\n        uint256 rightMakerAssetAmountRemaining = LibMath.safeGetPartialAmountFloor(\n            rightOrder.makerAssetAmount,\n            rightOrder.takerAssetAmount,\n            rightTakerAssetAmountRemaining\n        );\n\n        // Maximally fill the orders and pay out profits to the matcher in one or both of the maker assets.\n        if (shouldMaximallyFillOrders) {\n            matchedFillResults = _calculateMatchedFillResultsWithMaximalFill(\n                leftOrder,\n                rightOrder,\n                leftMakerAssetAmountRemaining,\n                leftTakerAssetAmountRemaining,\n                rightMakerAssetAmountRemaining,\n                rightTakerAssetAmountRemaining\n            );\n        } else {\n            matchedFillResults = _calculateMatchedFillResults(\n                leftOrder,\n                rightOrder,\n                leftMakerAssetAmountRemaining,\n                leftTakerAssetAmountRemaining,\n                rightMakerAssetAmountRemaining,\n                rightTakerAssetAmountRemaining\n            );\n        }\n\n        // Compute fees for left order\n        matchedFillResults.left.makerFeePaid = LibMath.safeGetPartialAmountFloor(\n            matchedFillResults.left.makerAssetFilledAmount,\n            leftOrder.makerAssetAmount,\n            leftOrder.makerFee\n        );\n        matchedFillResults.left.takerFeePaid = LibMath.safeGetPartialAmountFloor(\n            matchedFillResults.left.takerAssetFilledAmount,\n            leftOrder.takerAssetAmount,\n            leftOrder.takerFee\n        );\n\n        // Compute fees for right order\n        matchedFillResults.right.makerFeePaid = LibMath.safeGetPartialAmountFloor(\n            matchedFillResults.right.makerAssetFilledAmount,\n            rightOrder.makerAssetAmount,\n            rightOrder.makerFee\n        );\n        matchedFillResults.right.takerFeePaid = LibMath.safeGetPartialAmountFloor(\n            matchedFillResults.right.takerAssetFilledAmount,\n            rightOrder.takerAssetAmount,\n            rightOrder.takerFee\n        );\n\n        // Compute the protocol fee that should be paid for a single fill. In this\n        // case this should be made the protocol fee for both the left and right orders.\n        uint256 protocolFee = gasPrice.safeMul(protocolFeeMultiplier);\n        matchedFillResults.left.protocolFeePaid = protocolFee;\n        matchedFillResults.right.protocolFeePaid = protocolFee;\n\n        // Return fill results\n        return matchedFillResults;\n    }\n\n    /// @dev Adds properties of both FillResults instances.\n    /// @param fillResults1 The first FillResults.\n    /// @param fillResults2 The second FillResults.\n    /// @return The sum of both fill results.\n    function addFillResults(\n        FillResults memory fillResults1,\n        FillResults memory fillResults2\n    )\n        internal\n        pure\n        returns (FillResults memory totalFillResults)\n    {\n        totalFillResults.makerAssetFilledAmount = fillResults1.makerAssetFilledAmount.safeAdd(fillResults2.makerAssetFilledAmount);\n        totalFillResults.takerAssetFilledAmount = fillResults1.takerAssetFilledAmount.safeAdd(fillResults2.takerAssetFilledAmount);\n        totalFillResults.makerFeePaid = fillResults1.makerFeePaid.safeAdd(fillResults2.makerFeePaid);\n        totalFillResults.takerFeePaid = fillResults1.takerFeePaid.safeAdd(fillResults2.takerFeePaid);\n        totalFillResults.protocolFeePaid = fillResults1.protocolFeePaid.safeAdd(fillResults2.protocolFeePaid);\n\n        return totalFillResults;\n    }\n\n    /// @dev Calculates part of the matched fill results for a given situation using the fill strategy that only\n    ///      awards profit denominated in the left maker asset.\n    /// @param leftOrder The left order in the order matching situation.\n    /// @param rightOrder The right order in the order matching situation.\n    /// @param leftMakerAssetAmountRemaining The amount of the left order maker asset that can still be filled.\n    /// @param leftTakerAssetAmountRemaining The amount of the left order taker asset that can still be filled.\n    /// @param rightMakerAssetAmountRemaining The amount of the right order maker asset that can still be filled.\n    /// @param rightTakerAssetAmountRemaining The amount of the right order taker asset that can still be filled.\n    /// @return MatchFillResults struct that does not include fees paid.\n    function _calculateMatchedFillResults(\n        LibOrder.Order memory leftOrder,\n        LibOrder.Order memory rightOrder,\n        uint256 leftMakerAssetAmountRemaining,\n        uint256 leftTakerAssetAmountRemaining,\n        uint256 rightMakerAssetAmountRemaining,\n        uint256 rightTakerAssetAmountRemaining\n    )\n        private\n        pure\n        returns (MatchedFillResults memory matchedFillResults)\n    {\n        // Calculate fill results for maker and taker assets: at least one order will be fully filled.\n        // The maximum amount the left maker can buy is `leftTakerAssetAmountRemaining`\n        // The maximum amount the right maker can sell is `rightMakerAssetAmountRemaining`\n        // We have two distinct cases for calculating the fill results:\n        // Case 1.\n        //   If the left maker can buy more than the right maker can sell, then only the right order is fully filled.\n        //   If the left maker can buy exactly what the right maker can sell, then both orders are fully filled.\n        // Case 2.\n        //   If the left maker cannot buy more than the right maker can sell, then only the left order is fully filled.\n        // Case 3.\n        //   If the left maker can buy exactly as much as the right maker can sell, then both orders are fully filled.\n        if (leftTakerAssetAmountRemaining > rightMakerAssetAmountRemaining) {\n            // Case 1: Right order is fully filled\n            matchedFillResults = _calculateCompleteRightFill(\n                leftOrder,\n                rightMakerAssetAmountRemaining,\n                rightTakerAssetAmountRemaining\n            );\n        } else if (leftTakerAssetAmountRemaining < rightMakerAssetAmountRemaining) {\n            // Case 2: Left order is fully filled\n            matchedFillResults.left.makerAssetFilledAmount = leftMakerAssetAmountRemaining;\n            matchedFillResults.left.takerAssetFilledAmount = leftTakerAssetAmountRemaining;\n            matchedFillResults.right.makerAssetFilledAmount = leftTakerAssetAmountRemaining;\n            // Round up to ensure the maker's exchange rate does not exceed the price specified by the order.\n            // We favor the maker when the exchange rate must be rounded.\n            matchedFillResults.right.takerAssetFilledAmount = LibMath.safeGetPartialAmountCeil(\n                rightOrder.takerAssetAmount,\n                rightOrder.makerAssetAmount,\n                leftTakerAssetAmountRemaining // matchedFillResults.right.makerAssetFilledAmount\n            );\n        } else {\n            // leftTakerAssetAmountRemaining == rightMakerAssetAmountRemaining\n            // Case 3: Both orders are fully filled. Technically, this could be captured by the above cases, but\n            //         this calculation will be more precise since it does not include rounding.\n            matchedFillResults = _calculateCompleteFillBoth(\n                leftMakerAssetAmountRemaining,\n                leftTakerAssetAmountRemaining,\n                rightMakerAssetAmountRemaining,\n                rightTakerAssetAmountRemaining\n            );\n        }\n\n        // Calculate amount given to taker\n        matchedFillResults.profitInLeftMakerAsset = matchedFillResults.left.makerAssetFilledAmount.safeSub(\n            matchedFillResults.right.takerAssetFilledAmount\n        );\n\n        return matchedFillResults;\n    }\n\n    /// @dev Calculates part of the matched fill results for a given situation using the maximal fill order matching\n    ///      strategy.\n    /// @param leftOrder The left order in the order matching situation.\n    /// @param rightOrder The right order in the order matching situation.\n    /// @param leftMakerAssetAmountRemaining The amount of the left order maker asset that can still be filled.\n    /// @param leftTakerAssetAmountRemaining The amount of the left order taker asset that can still be filled.\n    /// @param rightMakerAssetAmountRemaining The amount of the right order maker asset that can still be filled.\n    /// @param rightTakerAssetAmountRemaining The amount of the right order taker asset that can still be filled.\n    /// @return MatchFillResults struct that does not include fees paid.\n    function _calculateMatchedFillResultsWithMaximalFill(\n        LibOrder.Order memory leftOrder,\n        LibOrder.Order memory rightOrder,\n        uint256 leftMakerAssetAmountRemaining,\n        uint256 leftTakerAssetAmountRemaining,\n        uint256 rightMakerAssetAmountRemaining,\n        uint256 rightTakerAssetAmountRemaining\n    )\n        private\n        pure\n        returns (MatchedFillResults memory matchedFillResults)\n    {\n        // If a maker asset is greater than the opposite taker asset, than there will be a spread denominated in that maker asset.\n        bool doesLeftMakerAssetProfitExist = leftMakerAssetAmountRemaining > rightTakerAssetAmountRemaining;\n        bool doesRightMakerAssetProfitExist = rightMakerAssetAmountRemaining > leftTakerAssetAmountRemaining;\n\n        // Calculate the maximum fill results for the maker and taker assets. At least one of the orders will be fully filled.\n        //\n        // The maximum that the left maker can possibly buy is the amount that the right order can sell.\n        // The maximum that the right maker can possibly buy is the amount that the left order can sell.\n        //\n        // If the left order is fully filled, profit will be paid out in the left maker asset. If the right order is fully filled,\n        // the profit will be out in the right maker asset.\n        //\n        // There are three cases to consider:\n        // Case 1.\n        //   If the left maker can buy more than the right maker can sell, then only the right order is fully filled.\n        // Case 2.\n        //   If the right maker can buy more than the left maker can sell, then only the right order is fully filled.\n        // Case 3.\n        //   If the right maker can sell the max of what the left maker can buy and the left maker can sell the max of\n        //   what the right maker can buy, then both orders are fully filled.\n        if (leftTakerAssetAmountRemaining > rightMakerAssetAmountRemaining) {\n            // Case 1: Right order is fully filled with the profit paid in the left makerAsset\n            matchedFillResults = _calculateCompleteRightFill(\n                leftOrder,\n                rightMakerAssetAmountRemaining,\n                rightTakerAssetAmountRemaining\n            );\n        } else if (rightTakerAssetAmountRemaining > leftMakerAssetAmountRemaining) {\n            // Case 2: Left order is fully filled with the profit paid in the right makerAsset.\n            matchedFillResults.left.makerAssetFilledAmount = leftMakerAssetAmountRemaining;\n            matchedFillResults.left.takerAssetFilledAmount = leftTakerAssetAmountRemaining;\n            // Round down to ensure the right maker's exchange rate does not exceed the price specified by the order.\n            // We favor the right maker when the exchange rate must be rounded and the profit is being paid in the\n            // right maker asset.\n            matchedFillResults.right.makerAssetFilledAmount = LibMath.safeGetPartialAmountFloor(\n                rightOrder.makerAssetAmount,\n                rightOrder.takerAssetAmount,\n                leftMakerAssetAmountRemaining\n            );\n            matchedFillResults.right.takerAssetFilledAmount = leftMakerAssetAmountRemaining;\n        } else {\n            // Case 3: The right and left orders are fully filled\n            matchedFillResults = _calculateCompleteFillBoth(\n                leftMakerAssetAmountRemaining,\n                leftTakerAssetAmountRemaining,\n                rightMakerAssetAmountRemaining,\n                rightTakerAssetAmountRemaining\n            );\n        }\n\n        // Calculate amount given to taker in the left order's maker asset if the left spread will be part of the profit.\n        if (doesLeftMakerAssetProfitExist) {\n            matchedFillResults.profitInLeftMakerAsset = matchedFillResults.left.makerAssetFilledAmount.safeSub(\n                matchedFillResults.right.takerAssetFilledAmount\n            );\n        }\n\n        // Calculate amount given to taker in the right order's maker asset if the right spread will be part of the profit.\n        if (doesRightMakerAssetProfitExist) {\n            matchedFillResults.profitInRightMakerAsset = matchedFillResults.right.makerAssetFilledAmount.safeSub(\n                matchedFillResults.left.takerAssetFilledAmount\n            );\n        }\n\n        return matchedFillResults;\n    }\n\n    /// @dev Calculates the fill results for the maker and taker in the order matching and writes the results\n    ///      to the fillResults that are being collected on the order. Both orders will be fully filled in this\n    ///      case.\n    /// @param leftMakerAssetAmountRemaining The amount of the left maker asset that is remaining to be filled.\n    /// @param leftTakerAssetAmountRemaining The amount of the left taker asset that is remaining to be filled.\n    /// @param rightMakerAssetAmountRemaining The amount of the right maker asset that is remaining to be filled.\n    /// @param rightTakerAssetAmountRemaining The amount of the right taker asset that is remaining to be filled.\n    /// @return MatchFillResults struct that does not include fees paid or spreads taken.\n    function _calculateCompleteFillBoth(\n        uint256 leftMakerAssetAmountRemaining,\n        uint256 leftTakerAssetAmountRemaining,\n        uint256 rightMakerAssetAmountRemaining,\n        uint256 rightTakerAssetAmountRemaining\n    )\n        private\n        pure\n        returns (MatchedFillResults memory matchedFillResults)\n    {\n        // Calculate the fully filled results for both orders.\n        matchedFillResults.left.makerAssetFilledAmount = leftMakerAssetAmountRemaining;\n        matchedFillResults.left.takerAssetFilledAmount = leftTakerAssetAmountRemaining;\n        matchedFillResults.right.makerAssetFilledAmount = rightMakerAssetAmountRemaining;\n        matchedFillResults.right.takerAssetFilledAmount = rightTakerAssetAmountRemaining;\n\n        return matchedFillResults;\n    }\n\n    /// @dev Calculates the fill results for the maker and taker in the order matching and writes the results\n    ///      to the fillResults that are being collected on the order.\n    /// @param leftOrder The left order that is being maximally filled. All of the information about fill amounts\n    ///                  can be derived from this order and the right asset remaining fields.\n    /// @param rightMakerAssetAmountRemaining The amount of the right maker asset that is remaining to be filled.\n    /// @param rightTakerAssetAmountRemaining The amount of the right taker asset that is remaining to be filled.\n    /// @return MatchFillResults struct that does not include fees paid or spreads taken.\n    function _calculateCompleteRightFill(\n        LibOrder.Order memory leftOrder,\n        uint256 rightMakerAssetAmountRemaining,\n        uint256 rightTakerAssetAmountRemaining\n    )\n        private\n        pure\n        returns (MatchedFillResults memory matchedFillResults)\n    {\n        matchedFillResults.right.makerAssetFilledAmount = rightMakerAssetAmountRemaining;\n        matchedFillResults.right.takerAssetFilledAmount = rightTakerAssetAmountRemaining;\n        matchedFillResults.left.takerAssetFilledAmount = rightMakerAssetAmountRemaining;\n        // Round down to ensure the left maker's exchange rate does not exceed the price specified by the order.\n        // We favor the left maker when the exchange rate must be rounded and the profit is being paid in the\n        // left maker asset.\n        matchedFillResults.left.makerAssetFilledAmount = LibMath.safeGetPartialAmountFloor(\n            leftOrder.makerAssetAmount,\n            leftOrder.takerAssetAmount,\n            rightMakerAssetAmountRemaining\n        );\n\n        return matchedFillResults;\n    }\n}\n",
        "@0x/contracts-exchange/contracts/src/interfaces/IProtocolFees.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\ncontract IProtocolFees {\n\n    // Logs updates to the protocol fee multiplier.\n    event ProtocolFeeMultiplier(uint256 oldProtocolFeeMultiplier, uint256 updatedProtocolFeeMultiplier);\n\n    // Logs updates to the protocolFeeCollector address.\n    event ProtocolFeeCollectorAddress(address oldProtocolFeeCollector, address updatedProtocolFeeCollector);\n\n    /// @dev Allows the owner to update the protocol fee multiplier.\n    /// @param updatedProtocolFeeMultiplier The updated protocol fee multiplier.\n    function setProtocolFeeMultiplier(uint256 updatedProtocolFeeMultiplier)\n        external;\n\n    /// @dev Allows the owner to update the protocolFeeCollector address.\n    /// @param updatedProtocolFeeCollector The updated protocolFeeCollector contract address.\n    function setProtocolFeeCollectorAddress(address updatedProtocolFeeCollector)\n        external;\n\n    /// @dev Returns the protocolFeeMultiplier\n    function protocolFeeMultiplier()\n        external\n        view\n        returns (uint256);\n\n    /// @dev Returns the protocolFeeCollector address\n    function protocolFeeCollector()\n        external\n        view\n        returns (address);\n}\n",
        "@0x/contracts-exchange/contracts/src/interfaces/IMatchOrders.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-exchange-libs/contracts/src/LibOrder.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/LibFillResults.sol\";\n\n\ncontract IMatchOrders {\n\n    /// @dev Match complementary orders that have a profitable spread.\n    ///      Each order is filled at their respective price point, and\n    ///      the matcher receives a profit denominated in the left maker asset.\n    /// @param leftOrders Set of orders with the same maker / taker asset.\n    /// @param rightOrders Set of orders to match against `leftOrders`\n    /// @param leftSignatures Proof that left orders were created by the left makers.\n    /// @param rightSignatures Proof that right orders were created by the right makers.\n    /// @return batchMatchedFillResults Amounts filled and profit generated.\n    function batchMatchOrders(\n        LibOrder.Order[] memory leftOrders,\n        LibOrder.Order[] memory rightOrders,\n        bytes[] memory leftSignatures,\n        bytes[] memory rightSignatures\n    )\n        public\n        payable\n        returns (LibFillResults.BatchMatchedFillResults memory batchMatchedFillResults);\n\n    /// @dev Match complementary orders that have a profitable spread.\n    ///      Each order is maximally filled at their respective price point, and\n    ///      the matcher receives a profit denominated in either the left maker asset,\n    ///      right maker asset, or a combination of both.\n    /// @param leftOrders Set of orders with the same maker / taker asset.\n    /// @param rightOrders Set of orders to match against `leftOrders`\n    /// @param leftSignatures Proof that left orders were created by the left makers.\n    /// @param rightSignatures Proof that right orders were created by the right makers.\n    /// @return batchMatchedFillResults Amounts filled and profit generated.\n    function batchMatchOrdersWithMaximalFill(\n        LibOrder.Order[] memory leftOrders,\n        LibOrder.Order[] memory rightOrders,\n        bytes[] memory leftSignatures,\n        bytes[] memory rightSignatures\n    )\n        public\n        payable\n        returns (LibFillResults.BatchMatchedFillResults memory batchMatchedFillResults);\n\n    /// @dev Match two complementary orders that have a profitable spread.\n    ///      Each order is filled at their respective price point. However, the calculations are\n    ///      carried out as though the orders are both being filled at the right order's price point.\n    ///      The profit made by the left order goes to the taker (who matched the two orders).\n    /// @param leftOrder First order to match.\n    /// @param rightOrder Second order to match.\n    /// @param leftSignature Proof that order was created by the left maker.\n    /// @param rightSignature Proof that order was created by the right maker.\n    /// @return matchedFillResults Amounts filled and fees paid by maker and taker of matched orders.\n    function matchOrders(\n        LibOrder.Order memory leftOrder,\n        LibOrder.Order memory rightOrder,\n        bytes memory leftSignature,\n        bytes memory rightSignature\n    )\n        public\n        payable\n        returns (LibFillResults.MatchedFillResults memory matchedFillResults);\n\n    /// @dev Match two complementary orders that have a profitable spread.\n    ///      Each order is maximally filled at their respective price point, and\n    ///      the matcher receives a profit denominated in either the left maker asset,\n    ///      right maker asset, or a combination of both.\n    /// @param leftOrder First order to match.\n    /// @param rightOrder Second order to match.\n    /// @param leftSignature Proof that order was created by the left maker.\n    /// @param rightSignature Proof that order was created by the right maker.\n    /// @return matchedFillResults Amounts filled by maker and taker of matched orders.\n    function matchOrdersWithMaximalFill(\n        LibOrder.Order memory leftOrder,\n        LibOrder.Order memory rightOrder,\n        bytes memory leftSignature,\n        bytes memory rightSignature\n    )\n        public\n        payable\n        returns (LibFillResults.MatchedFillResults memory matchedFillResults);\n}\n",
        "@0x/contracts-exchange/contracts/src/interfaces/ISignatureValidator.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-exchange-libs/contracts/src/LibOrder.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/LibZeroExTransaction.sol\";\n\n\ncontract ISignatureValidator {\n\n   // Allowed signature types.\n    enum SignatureType {\n        Illegal,                     // 0x00, default value\n        Invalid,                     // 0x01\n        EIP712,                      // 0x02\n        EthSign,                     // 0x03\n        Wallet,                      // 0x04\n        Validator,                   // 0x05\n        PreSigned,                   // 0x06\n        EIP1271Wallet,               // 0x07\n        NSignatureTypes              // 0x08, number of signature types. Always leave at end.\n    }\n\n    event SignatureValidatorApproval(\n        address indexed signerAddress,     // Address that approves or disapproves a contract to verify signatures.\n        address indexed validatorAddress,  // Address of signature validator contract.\n        bool isApproved                    // Approval or disapproval of validator contract.\n    );\n\n    /// @dev Approves a hash on-chain.\n    ///      After presigning a hash, the preSign signature type will become valid for that hash and signer.\n    /// @param hash Any 32-byte hash.\n    function preSign(bytes32 hash)\n        external\n        payable;\n\n    /// @dev Approves/unnapproves a Validator contract to verify signatures on signer's behalf.\n    /// @param validatorAddress Address of Validator contract.\n    /// @param approval Approval or disapproval of  Validator contract.\n    function setSignatureValidatorApproval(\n        address validatorAddress,\n        bool approval\n    )\n        external\n        payable;\n\n    /// @dev Verifies that a hash has been signed by the given signer.\n    /// @param hash Any 32-byte hash.\n    /// @param signature Proof that the hash has been signed by signer.\n    /// @return isValid `true` if the signature is valid for the given hash and signer.\n    function isValidHashSignature(\n        bytes32 hash,\n        address signerAddress,\n        bytes memory signature\n    )\n        public\n        view\n        returns (bool isValid);\n\n    /// @dev Verifies that a signature for an order is valid.\n    /// @param order The order.\n    /// @param signature Proof that the order has been signed by signer.\n    /// @return isValid true if the signature is valid for the given order and signer.\n    function isValidOrderSignature(\n        LibOrder.Order memory order,\n        bytes memory signature\n    )\n        public\n        view\n        returns (bool isValid);\n\n    /// @dev Verifies that a signature for a transaction is valid.\n    /// @param transaction The transaction.\n    /// @param signature Proof that the order has been signed by signer.\n    /// @return isValid true if the signature is valid for the given transaction and signer.\n    function isValidTransactionSignature(\n        LibZeroExTransaction.ZeroExTransaction memory transaction,\n        bytes memory signature\n    )\n        public\n        view\n        returns (bool isValid);\n\n    /// @dev Verifies that an order, with provided order hash, has been signed\n    ///      by the given signer.\n    /// @param order The order.\n    /// @param orderHash The hash of the order.\n    /// @param signature Proof that the hash has been signed by signer.\n    /// @return isValid True if the signature is valid for the given order and signer.\n    function _isValidOrderWithHashSignature(\n        LibOrder.Order memory order,\n        bytes32 orderHash,\n        bytes memory signature\n    )\n        internal\n        view\n        returns (bool isValid);\n\n    /// @dev Verifies that a transaction, with provided order hash, has been signed\n    ///      by the given signer.\n    /// @param transaction The transaction.\n    /// @param transactionHash The hash of the transaction.\n    /// @param signature Proof that the hash has been signed by signer.\n    /// @return isValid True if the signature is valid for the given transaction and signer.\n    function _isValidTransactionWithHashSignature(\n        LibZeroExTransaction.ZeroExTransaction memory transaction,\n        bytes32 transactionHash,\n        bytes memory signature\n    )\n        internal\n        view\n        returns (bool isValid);\n}\n",
        "@0x/contracts-exchange-libs/contracts/src/LibZeroExTransaction.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/LibEIP712.sol\";\n\n\nlibrary LibZeroExTransaction {\n\n    using LibZeroExTransaction for ZeroExTransaction;\n\n    // Hash for the EIP712 0x transaction schema\n    // keccak256(abi.encodePacked(\n    //    \"ZeroExTransaction(\",\n    //    \"uint256 salt,\",\n    //    \"uint256 expirationTimeSeconds,\",\n    //    \"uint256 gasPrice,\",\n    //    \"address signerAddress,\",\n    //    \"bytes data\",\n    //    \")\"\n    // ));\n    bytes32 constant internal _EIP712_ZEROEX_TRANSACTION_SCHEMA_HASH = 0xec69816980a3a3ca4554410e60253953e9ff375ba4536a98adfa15cc71541508;\n\n    struct ZeroExTransaction {\n        uint256 salt;                   // Arbitrary number to ensure uniqueness of transaction hash.\n        uint256 expirationTimeSeconds;  // Timestamp in seconds at which transaction expires.\n        uint256 gasPrice;               // gasPrice that transaction is required to be executed with.\n        address signerAddress;          // Address of transaction signer.\n        bytes data;                     // AbiV2 encoded calldata.\n    }\n\n    /// @dev Calculates the EIP712 typed data hash of a transaction with a given domain separator.\n    /// @param transaction 0x transaction structure.\n    /// @return EIP712 typed data hash of the transaction.\n    function getTypedDataHash(ZeroExTransaction memory transaction, bytes32 eip712ExchangeDomainHash)\n        internal\n        pure\n        returns (bytes32 transactionHash)\n    {\n        // Hash the transaction with the domain separator of the Exchange contract.\n        transactionHash = LibEIP712.hashEIP712Message(\n            eip712ExchangeDomainHash,\n            transaction.getStructHash()\n        );\n        return transactionHash;\n    }\n\n    /// @dev Calculates EIP712 hash of the 0x transaction struct.\n    /// @param transaction 0x transaction structure.\n    /// @return EIP712 hash of the transaction struct.\n    function getStructHash(ZeroExTransaction memory transaction)\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        bytes32 schemaHash = _EIP712_ZEROEX_TRANSACTION_SCHEMA_HASH;\n        bytes memory data = transaction.data;\n        uint256 salt = transaction.salt;\n        uint256 expirationTimeSeconds = transaction.expirationTimeSeconds;\n        uint256 gasPrice = transaction.gasPrice;\n        address signerAddress = transaction.signerAddress;\n\n        // Assembly for more efficiently computing:\n        // result = keccak256(abi.encodePacked(\n        //     schemaHash,\n        //     salt,\n        //     expirationTimeSeconds,\n        //     gasPrice,\n        //     uint256(signerAddress),\n        //     keccak256(data)\n        // ));\n\n        assembly {\n            // Compute hash of data\n            let dataHash := keccak256(add(data, 32), mload(data))\n\n            // Load free memory pointer\n            let memPtr := mload(64)\n\n            mstore(memPtr, schemaHash)                                                                // hash of schema\n            mstore(add(memPtr, 32), salt)                                                             // salt\n            mstore(add(memPtr, 64), expirationTimeSeconds)                                            // expirationTimeSeconds\n            mstore(add(memPtr, 96), gasPrice)                                                         // gasPrice\n            mstore(add(memPtr, 128), and(signerAddress, 0xffffffffffffffffffffffffffffffffffffffff))  // signerAddress\n            mstore(add(memPtr, 160), dataHash)                                                        // hash of data\n\n            // Compute hash\n            result := keccak256(memPtr, 192)\n        }\n        return result;\n    }\n}\n",
        "@0x/contracts-exchange/contracts/src/interfaces/ITransactions.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-exchange-libs/contracts/src/LibZeroExTransaction.sol\";\n\n\ncontract ITransactions {\n\n    // TransactionExecution event is emitted when a ZeroExTransaction is executed.\n    event TransactionExecution(bytes32 indexed transactionHash);\n\n    /// @dev Executes an Exchange method call in the context of signer.\n    /// @param transaction 0x transaction containing salt, signerAddress, and data.\n    /// @param signature Proof that transaction has been signed by signer.\n    /// @return ABI encoded return data of the underlying Exchange function call.\n    function executeTransaction(\n        LibZeroExTransaction.ZeroExTransaction memory transaction,\n        bytes memory signature\n    )\n        public\n        payable\n        returns (bytes memory);\n\n    /// @dev Executes a batch of Exchange method calls in the context of signer(s).\n    /// @param transactions Array of 0x transactions containing salt, signerAddress, and data.\n    /// @param signatures Array of proofs that transactions have been signed by signer(s).\n    /// @return Array containing ABI encoded return data for each of the underlying Exchange function calls.\n    function batchExecuteTransactions(\n        LibZeroExTransaction.ZeroExTransaction[] memory transactions,\n        bytes[] memory signatures\n    )\n        public\n        payable\n        returns (bytes[] memory);\n\n    /// @dev The current function will be called in the context of this address (either 0x transaction signer or `msg.sender`).\n    ///      If calling a fill function, this address will represent the taker.\n    ///      If calling a cancel function, this address will represent the maker.\n    /// @return Signer of 0x transaction if entry point is `executeTransaction`.\n    ///         `msg.sender` if entry point is any other function.\n    function _getCurrentContextAddress()\n        internal\n        view\n        returns (address);\n}\n",
        "@0x/contracts-exchange/contracts/src/interfaces/IAssetProxyDispatcher.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\ncontract IAssetProxyDispatcher {\n\n    // Logs registration of new asset proxy\n    event AssetProxyRegistered(\n        bytes4 id,              // Id of new registered AssetProxy.\n        address assetProxy      // Address of new registered AssetProxy.\n    );\n\n    /// @dev Registers an asset proxy to its asset proxy id.\n    ///      Once an asset proxy is registered, it cannot be unregistered.\n    /// @param assetProxy Address of new asset proxy to register.\n    function registerAssetProxy(address assetProxy)\n        external;\n\n    /// @dev Gets an asset proxy.\n    /// @param assetProxyId Id of the asset proxy.\n    /// @return The asset proxy registered to assetProxyId. Returns 0x0 if no proxy is registered.\n    function getAssetProxy(bytes4 assetProxyId)\n        external\n        view\n        returns (address);\n}\n",
        "@0x/contracts-exchange/contracts/src/interfaces/IWrapperFunctions.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-exchange-libs/contracts/src/LibOrder.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/LibFillResults.sol\";\n\n\ncontract IWrapperFunctions {\n\n    /// @dev Fills the input order. Reverts if exact takerAssetFillAmount not filled.\n    /// @param order Order struct containing order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signature Proof that order has been created by maker.\n    function fillOrKillOrder(\n        LibOrder.Order memory order,\n        uint256 takerAssetFillAmount,\n        bytes memory signature\n    )\n        public\n        payable\n        returns (LibFillResults.FillResults memory fillResults);\n\n    /// @dev Executes multiple calls of fillOrder.\n    /// @param orders Array of order specifications.\n    /// @param takerAssetFillAmounts Array of desired amounts of takerAsset to sell in orders.\n    /// @param signatures Proofs that orders have been created by makers.\n    /// @return Array of amounts filled and fees paid by makers and taker.\n    function batchFillOrders(\n        LibOrder.Order[] memory orders,\n        uint256[] memory takerAssetFillAmounts,\n        bytes[] memory signatures\n    )\n        public\n        payable\n        returns (LibFillResults.FillResults[] memory fillResults);\n\n    /// @dev Executes multiple calls of fillOrKillOrder.\n    /// @param orders Array of order specifications.\n    /// @param takerAssetFillAmounts Array of desired amounts of takerAsset to sell in orders.\n    /// @param signatures Proofs that orders have been created by makers.\n    /// @return Array of amounts filled and fees paid by makers and taker.\n    function batchFillOrKillOrders(\n        LibOrder.Order[] memory orders,\n        uint256[] memory takerAssetFillAmounts,\n        bytes[] memory signatures\n    )\n        public\n        payable\n        returns (LibFillResults.FillResults[] memory fillResults);\n\n    /// @dev Executes multiple calls of fillOrder. If any fill reverts, the error is caught and ignored.\n    /// @param orders Array of order specifications.\n    /// @param takerAssetFillAmounts Array of desired amounts of takerAsset to sell in orders.\n    /// @param signatures Proofs that orders have been created by makers.\n    /// @return Array of amounts filled and fees paid by makers and taker.\n    function batchFillOrdersNoThrow(\n        LibOrder.Order[] memory orders,\n        uint256[] memory takerAssetFillAmounts,\n        bytes[] memory signatures\n    )\n        public\n        payable\n        returns (LibFillResults.FillResults[] memory fillResults);\n\n    /// @dev Executes multiple calls of fillOrder until total amount of takerAsset is sold by taker.\n    ///      If any fill reverts, the error is caught and ignored.\n    ///      NOTE: This function does not enforce that the takerAsset is the same for each order.\n    /// @param orders Array of order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signatures Proofs that orders have been signed by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    function marketSellOrdersNoThrow(\n        LibOrder.Order[] memory orders,\n        uint256 takerAssetFillAmount,\n        bytes[] memory signatures\n    )\n        public\n        payable\n        returns (LibFillResults.FillResults memory fillResults);\n\n    /// @dev Executes multiple calls of fillOrder until total amount of makerAsset is bought by taker.\n    ///      If any fill reverts, the error is caught and ignored.\n    ///      NOTE: This function does not enforce that the makerAsset is the same for each order.\n    /// @param orders Array of order specifications.\n    /// @param makerAssetFillAmount Desired amount of makerAsset to buy.\n    /// @param signatures Proofs that orders have been signed by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    function marketBuyOrdersNoThrow(\n        LibOrder.Order[] memory orders,\n        uint256 makerAssetFillAmount,\n        bytes[] memory signatures\n    )\n        public\n        payable\n        returns (LibFillResults.FillResults memory fillResults);\n\n    /// @dev Calls marketSellOrdersNoThrow then reverts if < takerAssetFillAmount has been sold.\n    ///      NOTE: This function does not enforce that the takerAsset is the same for each order.\n    /// @param orders Array of order specifications.\n    /// @param takerAssetFillAmount Minimum amount of takerAsset to sell.\n    /// @param signatures Proofs that orders have been signed by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    function marketSellOrdersFillOrKill(\n        LibOrder.Order[] memory orders,\n        uint256 takerAssetFillAmount,\n        bytes[] memory signatures\n    )\n        public\n        payable\n        returns (LibFillResults.FillResults memory fillResults);\n\n    /// @dev Calls marketBuyOrdersNoThrow then reverts if < makerAssetFillAmount has been bought.\n    ///      NOTE: This function does not enforce that the makerAsset is the same for each order.\n    /// @param orders Array of order specifications.\n    /// @param makerAssetFillAmount Minimum amount of makerAsset to buy.\n    /// @param signatures Proofs that orders have been signed by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    function marketBuyOrdersFillOrKill(\n        LibOrder.Order[] memory orders,\n        uint256 makerAssetFillAmount,\n        bytes[] memory signatures\n    )\n        public\n        payable\n        returns (LibFillResults.FillResults memory fillResults);\n\n    /// @dev Executes multiple calls of cancelOrder.\n    /// @param orders Array of order specifications.\n    function batchCancelOrders(LibOrder.Order[] memory orders)\n        public\n        payable;\n}\n",
        "@0x/contracts-exchange/contracts/src/interfaces/ITransferSimulator.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\n\ncontract ITransferSimulator {\n\n    /// @dev This function may be used to simulate any amount of transfers\n    /// As they would occur through the Exchange contract. Note that this function\n    /// will always revert, even if all transfers are successful. However, it may\n    /// be used with eth_call or with a try/catch pattern in order to simulate\n    /// the results of the transfers.\n    /// @param assetData Array of asset details, each encoded per the AssetProxy contract specification.\n    /// @param fromAddresses Array containing the `from` addresses that correspond with each transfer.\n    /// @param toAddresses Array containing the `to` addresses that correspond with each transfer.\n    /// @param amounts Array containing the amounts that correspond to each transfer.\n    /// @return This function does not return a value. However, it will always revert with\n    /// `Error(\"TRANSFERS_SUCCESSFUL\")` if all of the transfers were successful.\n    function simulateDispatchTransferFromCalls(\n        bytes[] memory assetData,\n        address[] memory fromAddresses,\n        address[] memory toAddresses,\n        uint256[] memory amounts\n    )\n        public;\n}\n",
        "./ShellSampler.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/DeploymentConstants.sol\";\nimport \"./interfaces/IShell.sol\";\n\ncontract ShellSampler is\n    DeploymentConstants\n{\n    /// @dev Default gas limit for Shell calls.\n    uint256 constant private DEFAULT_CALL_GAS = 300e3; // 300k\n\n    /// @dev Sample sell quotes from the Shell contract\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromShell(\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        // Initialize array of maker token amounts.\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            (bool didSucceed, bytes memory resultData) =\n                address(_getShellAddress()).staticcall.gas(DEFAULT_CALL_GAS)(\n                    abi.encodeWithSelector(\n                        IShell(0).viewOriginSwap.selector,\n                        takerToken,\n                        makerToken,\n                        takerTokenAmounts[i]\n                    ));\n            uint256 buyAmount = 0;\n            if (didSucceed) {\n                buyAmount = abi.decode(resultData, (uint256));\n            }\n            // Exit early if the amount is too high for the source to serve\n            if (buyAmount == 0) {\n                break;\n            }\n            makerTokenAmounts[i] = buyAmount;\n        }\n    }\n\n    /// @dev Sample buy quotes from Shell contract\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromShell(\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        // Initialize array of maker token amounts.\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            (bool didSucceed, bytes memory resultData) =\n                address(_getShellAddress()).staticcall.gas(DEFAULT_CALL_GAS)(\n                    abi.encodeWithSelector(\n                        IShell(0).viewTargetSwap.selector,\n                        takerToken,\n                        makerToken,\n                        makerTokenAmounts[i]\n                    ));\n            uint256 sellAmount = 0;\n            if (didSucceed) {\n                sellAmount = abi.decode(resultData, (uint256));\n            }\n            // Exit early if the amount is too high for the source to serve\n            if (sellAmount == 0) {\n                break;\n            }\n            takerTokenAmounts[i] = sellAmount;\n        }\n    }\n}\n",
        "./interfaces/IShell.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\ninterface IShell {\n\n    function viewOriginSwap (\n        address from,\n        address to,\n        uint256 fromAmount\n    )\n        external\n        view\n        returns (uint256 toAmount);\n\n    function viewTargetSwap (\n        address from,\n        address to,\n        uint256 toAmount\n    )\n        external\n        view\n        returns (uint256 fromAmount);\n}\n\n",
        "./SushiSwapSampler.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/DeploymentConstants.sol\";\nimport \"./interfaces/IUniswapV2Router01.sol\";\n\n\ncontract SushiSwapSampler is\n    DeploymentConstants\n{\n    /// @dev Gas limit for SushiSwap calls.\n    uint256 constant private SUSHISWAP_CALL_GAS = 150e3; // 150k\n\n    /// @dev Sample sell quotes from SushiSwap.\n    /// @param router Router to look up tokens and amounts\n    /// @param path Token route. Should be takerToken -> makerToken\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromSushiSwap(\n        address router,\n        address[] memory path,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            (bool didSucceed, bytes memory resultData) =\n                router.staticcall.gas(SUSHISWAP_CALL_GAS)(\n                    abi.encodeWithSelector(\n                        IUniswapV2Router01(0).getAmountsOut.selector,\n                        takerTokenAmounts[i],\n                        path\n                    ));\n            uint256 buyAmount = 0;\n            if (didSucceed) {\n                // solhint-disable-next-line indent\n                buyAmount = abi.decode(resultData, (uint256[]))[path.length - 1];\n            } else {\n                break;\n            }\n            makerTokenAmounts[i] = buyAmount;\n        }\n    }\n\n    /// @dev Sample buy quotes from SushiSwap\n    /// @param router Router to look up tokens and amounts\n    /// @param path Token route. Should be takerToken -> makerToken.\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromSushiSwap(\n        address router,\n        address[] memory path,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            (bool didSucceed, bytes memory resultData) =\n                router.staticcall.gas(SUSHISWAP_CALL_GAS)(\n                    abi.encodeWithSelector(\n                        IUniswapV2Router01(0).getAmountsIn.selector,\n                        makerTokenAmounts[i],\n                        path\n                    ));\n            uint256 sellAmount = 0;\n            if (didSucceed) {\n                // solhint-disable-next-line indent\n                sellAmount = abi.decode(resultData, (uint256[]))[0];\n            } else {\n                break;\n            }\n            takerTokenAmounts[i] = sellAmount;\n        }\n    }\n}\n",
        "./interfaces/IUniswapV2Router01.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\ninterface IUniswapV2Router01 {\n\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts);\n\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts);\n}\n",
        "./TwoHopSampler.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/LibBytes.sol\";\n\n\ncontract TwoHopSampler {\n    using LibBytes for bytes;\n\n    struct HopInfo {\n        uint256 sourceIndex;\n        bytes returnData;\n    }\n\n    function sampleTwoHopSell(\n        bytes[] memory firstHopCalls,\n        bytes[] memory secondHopCalls,\n        uint256 sellAmount\n    )\n        public\n        view\n        returns (\n            HopInfo memory firstHop,\n            HopInfo memory secondHop,\n            uint256 buyAmount\n        )\n    {\n        uint256 intermediateAssetAmount = 0;\n        for (uint256 i = 0; i != firstHopCalls.length; ++i) {\n            firstHopCalls[i].writeUint256(firstHopCalls[i].length - 32, sellAmount);\n            (bool didSucceed, bytes memory returnData) = address(this).staticcall(firstHopCalls[i]);\n            if (didSucceed) {\n                uint256 amount = returnData.readUint256(returnData.length - 32);\n                if (amount > intermediateAssetAmount) {\n                    intermediateAssetAmount = amount;\n                    firstHop.sourceIndex = i;\n                    firstHop.returnData = returnData;\n                }\n            }\n        }\n        if (intermediateAssetAmount == 0) {\n            return (firstHop, secondHop, buyAmount);\n        }\n        for (uint256 j = 0; j != secondHopCalls.length; ++j) {\n            secondHopCalls[j].writeUint256(secondHopCalls[j].length - 32, intermediateAssetAmount);\n            (bool didSucceed, bytes memory returnData) = address(this).staticcall(secondHopCalls[j]);\n            if (didSucceed) {\n                uint256 amount = returnData.readUint256(returnData.length - 32);\n                if (amount > buyAmount) {\n                    buyAmount = amount;\n                    secondHop.sourceIndex = j;\n                    secondHop.returnData = returnData;\n                }\n            }\n        }\n    }\n\n    function sampleTwoHopBuy(\n        bytes[] memory firstHopCalls,\n        bytes[] memory secondHopCalls,\n        uint256 buyAmount\n    )\n        public\n        view\n        returns (\n            HopInfo memory firstHop,\n            HopInfo memory secondHop,\n            uint256 sellAmount\n        )\n    {\n        sellAmount = uint256(-1);\n        uint256 intermediateAssetAmount = uint256(-1);\n        for (uint256 j = 0; j != secondHopCalls.length; ++j) {\n            secondHopCalls[j].writeUint256(secondHopCalls[j].length - 32, buyAmount);\n            (bool didSucceed, bytes memory returnData) = address(this).staticcall(secondHopCalls[j]);\n            if (didSucceed) {\n                uint256 amount = returnData.readUint256(returnData.length - 32);\n                if (\n                    amount > 0 &&\n                    amount < intermediateAssetAmount\n                ) {\n                    intermediateAssetAmount = amount;\n                    secondHop.sourceIndex = j;\n                    secondHop.returnData = returnData;\n                }\n            }\n        }\n        if (intermediateAssetAmount == uint256(-1)) {\n            return (firstHop, secondHop, sellAmount);\n        }\n        for (uint256 i = 0; i != firstHopCalls.length; ++i) {\n            firstHopCalls[i].writeUint256(firstHopCalls[i].length - 32, intermediateAssetAmount);\n            (bool didSucceed, bytes memory returnData) = address(this).staticcall(firstHopCalls[i]);\n            if (didSucceed) {\n                uint256 amount = returnData.readUint256(returnData.length - 32);\n                if (\n                    amount > 0 &&\n                    amount < sellAmount\n                ) {\n                    sellAmount = amount;\n                    firstHop.sourceIndex = i;\n                    firstHop.returnData = returnData;\n                }\n            }\n        }\n    }\n}\n",
        "./UniswapSampler.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-asset-proxy/contracts/src/interfaces/IUniswapExchangeFactory.sol\";\nimport \"@0x/contracts-erc20/contracts/src/LibERC20Token.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/LibOrder.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/LibMath.sol\";\nimport \"@0x/contracts-utils/contracts/src/DeploymentConstants.sol\";\nimport \"@0x/contracts-utils/contracts/src/LibBytes.sol\";\nimport \"./interfaces/IUniswapExchangeQuotes.sol\";\nimport \"./SamplerUtils.sol\";\n\n\ncontract UniswapSampler is\n    DeploymentConstants,\n    SamplerUtils\n{\n    /// @dev Gas limit for Uniswap calls.\n    uint256 constant private UNISWAP_CALL_GAS = 150e3; // 150k\n\n    /// @dev Sample sell quotes from Uniswap.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromUniswap(\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        IUniswapExchangeQuotes takerTokenExchange = takerToken == _getWethAddress() ?\n            IUniswapExchangeQuotes(0) : _getUniswapExchange(takerToken);\n        IUniswapExchangeQuotes makerTokenExchange = makerToken == _getWethAddress() ?\n            IUniswapExchangeQuotes(0) : _getUniswapExchange(makerToken);\n        for (uint256 i = 0; i < numSamples; i++) {\n            bool didSucceed = true;\n            if (makerToken == _getWethAddress()) {\n                (makerTokenAmounts[i], didSucceed) = _callUniswapExchangePriceFunction(\n                    address(takerTokenExchange),\n                    takerTokenExchange.getTokenToEthInputPrice.selector,\n                    takerTokenAmounts[i]\n                );\n            } else if (takerToken == _getWethAddress()) {\n                (makerTokenAmounts[i], didSucceed) = _callUniswapExchangePriceFunction(\n                    address(makerTokenExchange),\n                    makerTokenExchange.getEthToTokenInputPrice.selector,\n                    takerTokenAmounts[i]\n                );\n            } else {\n                uint256 ethBought;\n                (ethBought, didSucceed) = _callUniswapExchangePriceFunction(\n                    address(takerTokenExchange),\n                    takerTokenExchange.getTokenToEthInputPrice.selector,\n                    takerTokenAmounts[i]\n                );\n                if (ethBought != 0) {\n                    (makerTokenAmounts[i], didSucceed) = _callUniswapExchangePriceFunction(\n                        address(makerTokenExchange),\n                        makerTokenExchange.getEthToTokenInputPrice.selector,\n                        ethBought\n                    );\n                } else {\n                    makerTokenAmounts[i] = 0;\n                }\n            }\n            if (!didSucceed) {\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from Uniswap.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token sell amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromUniswap(\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n        IUniswapExchangeQuotes takerTokenExchange = takerToken == _getWethAddress() ?\n            IUniswapExchangeQuotes(0) : _getUniswapExchange(takerToken);\n        IUniswapExchangeQuotes makerTokenExchange = makerToken == _getWethAddress() ?\n            IUniswapExchangeQuotes(0) : _getUniswapExchange(makerToken);\n        for (uint256 i = 0; i < numSamples; i++) {\n            bool didSucceed = true;\n            if (makerToken == _getWethAddress()) {\n                (takerTokenAmounts[i], didSucceed) = _callUniswapExchangePriceFunction(\n                    address(takerTokenExchange),\n                    takerTokenExchange.getTokenToEthOutputPrice.selector,\n                    makerTokenAmounts[i]\n                );\n            } else if (takerToken == _getWethAddress()) {\n                (takerTokenAmounts[i], didSucceed) = _callUniswapExchangePriceFunction(\n                    address(makerTokenExchange),\n                    makerTokenExchange.getEthToTokenOutputPrice.selector,\n                    makerTokenAmounts[i]\n                );\n            } else {\n                uint256 ethSold;\n                (ethSold, didSucceed) = _callUniswapExchangePriceFunction(\n                    address(makerTokenExchange),\n                    makerTokenExchange.getEthToTokenOutputPrice.selector,\n                    makerTokenAmounts[i]\n                );\n                if (ethSold != 0) {\n                    (takerTokenAmounts[i], didSucceed) = _callUniswapExchangePriceFunction(\n                        address(takerTokenExchange),\n                        takerTokenExchange.getTokenToEthOutputPrice.selector,\n                        ethSold\n                    );\n                } else {\n                    takerTokenAmounts[i] = 0;\n                }\n            }\n            if (!didSucceed) {\n                break;\n            }\n        }\n    }\n\n    /// @dev Gracefully calls a Uniswap pricing function.\n    /// @param uniswapExchangeAddress Address of an `IUniswapExchangeQuotes` exchange.\n    /// @param functionSelector Selector of the target function.\n    /// @param inputAmount Quantity parameter particular to the pricing function.\n    /// @return outputAmount The returned amount from the function call. Will be\n    ///         zero if the call fails or if `uniswapExchangeAddress` is zero.\n    function _callUniswapExchangePriceFunction(\n        address uniswapExchangeAddress,\n        bytes4 functionSelector,\n        uint256 inputAmount\n    )\n        private\n        view\n        returns (uint256 outputAmount, bool didSucceed)\n    {\n        if (uniswapExchangeAddress == address(0)) {\n            return (outputAmount, didSucceed);\n        }\n        bytes memory resultData;\n        (didSucceed, resultData) =\n            uniswapExchangeAddress.staticcall.gas(UNISWAP_CALL_GAS)(\n                abi.encodeWithSelector(\n                    functionSelector,\n                    inputAmount\n                ));\n        if (didSucceed) {\n            outputAmount = abi.decode(resultData, (uint256));\n        }\n    }\n\n    /// @dev Retrive an existing Uniswap exchange contract.\n    ///      Throws if the exchange does not exist.\n    /// @param tokenAddress Address of the token contract.\n    /// @return exchange `IUniswapExchangeQuotes` for the token.\n    function _getUniswapExchange(address tokenAddress)\n        private\n        view\n        returns (IUniswapExchangeQuotes exchange)\n    {\n        exchange = IUniswapExchangeQuotes(\n            address(IUniswapExchangeFactory(_getUniswapExchangeFactoryAddress())\n            .getExchange(tokenAddress))\n        );\n    }\n}\n",
        "@0x/contracts-asset-proxy/contracts/src/interfaces/IUniswapExchangeFactory.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\nimport \"./IUniswapExchange.sol\";\n\n\ninterface IUniswapExchangeFactory {\n\n    /// @dev Get the exchange for a token.\n    /// @param tokenAddress The address of the token contract.\n    function getExchange(address tokenAddress)\n        external\n        view\n        returns (address);\n}\n",
        "@0x/contracts-asset-proxy/contracts/src/interfaces/IUniswapExchange.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\ninterface IUniswapExchange {\n\n    /// @dev Buys at least `minTokensBought` tokens with ETH and transfer them\n    ///      to `recipient`.\n    /// @param minTokensBought The minimum number of tokens to buy.\n    /// @param deadline Time when this order expires.\n    /// @param recipient Who to transfer the tokens to.\n    /// @return tokensBought Amount of tokens bought.\n    function ethToTokenTransferInput(\n        uint256 minTokensBought,\n        uint256 deadline,\n        address recipient\n    )\n        external\n        payable\n        returns (uint256 tokensBought);\n\n    /// @dev Buys at least `minEthBought` ETH with tokens.\n    /// @param tokensSold Amount of tokens to sell.\n    /// @param minEthBought The minimum amount of ETH to buy.\n    /// @param deadline Time when this order expires.\n    /// @return ethBought Amount of tokens bought.\n    function tokenToEthSwapInput(\n        uint256 tokensSold,\n        uint256 minEthBought,\n        uint256 deadline\n    )\n        external\n        returns (uint256 ethBought);\n\n    /// @dev Buys at least `minTokensBought` tokens with the exchange token\n    ///      and transfer them to `recipient`.\n    /// @param minTokensBought The minimum number of tokens to buy.\n    /// @param minEthBought The minimum amount of intermediate ETH to buy.\n    /// @param deadline Time when this order expires.\n    /// @param recipient Who to transfer the tokens to.\n    /// @param toTokenAddress The token being bought.\n    /// @return tokensBought Amount of tokens bought.\n    function tokenToTokenTransferInput(\n        uint256 tokensSold,\n        uint256 minTokensBought,\n        uint256 minEthBought,\n        uint256 deadline,\n        address recipient,\n        address toTokenAddress\n    )\n        external\n        returns (uint256 tokensBought);\n}\n",
        "./interfaces/IUniswapExchangeQuotes.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\ninterface IUniswapExchangeQuotes {\n\n    function getEthToTokenInputPrice(\n        uint256 ethSold\n    )\n        external\n        view\n        returns (uint256 tokensBought);\n\n    function getEthToTokenOutputPrice(\n        uint256 tokensBought\n    )\n        external\n        view\n        returns (uint256 ethSold);\n\n    function getTokenToEthInputPrice(\n        uint256 tokensSold\n    )\n        external\n        view\n        returns (uint256 ethBought);\n\n    function getTokenToEthOutputPrice(\n        uint256 ethBought\n    )\n        external\n        view\n        returns (uint256 tokensSold);\n}\n",
        "./UniswapV2Sampler.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/DeploymentConstants.sol\";\nimport \"./interfaces/IUniswapV2Router01.sol\";\n\n\ncontract UniswapV2Sampler is\n    DeploymentConstants\n{\n    /// @dev Gas limit for UniswapV2 calls.\n    uint256 constant private UNISWAPV2_CALL_GAS = 150e3; // 150k\n\n    /// @dev Sample sell quotes from UniswapV2.\n    /// @param path Token route. Should be takerToken -> makerToken\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromUniswapV2(\n        address[] memory path,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            (bool didSucceed, bytes memory resultData) =\n                _getUniswapV2Router01Address().staticcall.gas(UNISWAPV2_CALL_GAS)(\n                    abi.encodeWithSelector(\n                        IUniswapV2Router01(0).getAmountsOut.selector,\n                        takerTokenAmounts[i],\n                        path\n                    ));\n            uint256 buyAmount = 0;\n            if (didSucceed) {\n                // solhint-disable-next-line indent\n                buyAmount = abi.decode(resultData, (uint256[]))[path.length - 1];\n            } else {\n                break;\n            }\n            makerTokenAmounts[i] = buyAmount;\n        }\n    }\n\n    /// @dev Sample buy quotes from UniswapV2.\n    /// @param path Token route. Should be takerToken -> makerToken.\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromUniswapV2(\n        address[] memory path,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            (bool didSucceed, bytes memory resultData) =\n                _getUniswapV2Router01Address().staticcall.gas(UNISWAPV2_CALL_GAS)(\n                    abi.encodeWithSelector(\n                        IUniswapV2Router01(0).getAmountsIn.selector,\n                        makerTokenAmounts[i],\n                        path\n                    ));\n            uint256 sellAmount = 0;\n            if (didSucceed) {\n                // solhint-disable-next-line indent\n                sellAmount = abi.decode(resultData, (uint256[]))[0];\n            } else {\n                break;\n            }\n            takerTokenAmounts[i] = sellAmount;\n        }\n    }\n}\n"
    },
    "compiler": {
        "name": "solc",
        "version": "0.5.17+commit.d19bba13",
        "settings": {
            "remappings": [
                "@0x/contracts-utils=/Users/romain/dev/0x-monorepo/packages/asset-swapper/node_modules/@0x/contracts-utils",
                "@0x/contracts-exchange-libs=/Users/romain/dev/0x-monorepo/packages/asset-swapper/node_modules/@0x/contracts-exchange-libs",
                "@0x/contracts-erc20=/Users/romain/dev/0x-monorepo/packages/asset-swapper/node_modules/@0x/contracts-erc20",
                "@0x/contracts-exchange=/Users/romain/dev/0x-monorepo/packages/asset-swapper/node_modules/@0x/contracts-exchange",
                "@0x/contracts-asset-proxy=/Users/romain/dev/0x-monorepo/packages/asset-swapper/node_modules/@0x/contracts-asset-proxy"
            ],
            "optimizer": {
                "enabled": true,
                "runs": 1000000,
                "details": {
                    "yul": true,
                    "deduplicate": true,
                    "cse": true,
                    "constantOptimizer": true
                }
            },
            "outputSelection": {
                "*": {
                    "*": [
                        "abi",
                        "devdoc",
                        "evm.bytecode.object",
                        "evm.bytecode.sourceMap",
                        "evm.deployedBytecode.object",
                        "evm.deployedBytecode.sourceMap"
                    ]
                }
            },
            "evmVersion": "istanbul"
        }
    },
    "chains": {}
}
