{
    "schemaVersion": "2.0.0",
    "contractName": "ERC20BridgeSampler",
    "compilerOutput": {
        "abi": [
            {
                "inputs": [
                    {
                        "internalType": "bytes[]",
                        "name": "callDatas",
                        "type": "bytes[]"
                    }
                ],
                "name": "batchCall",
                "outputs": [
                    {
                        "components": [
                            {
                                "internalType": "bytes",
                                "name": "data",
                                "type": "bytes"
                            },
                            {
                                "internalType": "bool",
                                "name": "success",
                                "type": "bool"
                            }
                        ],
                        "internalType": "struct ERC20BridgeSampler.CallResults[]",
                        "name": "callResults",
                        "type": "tuple[]"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "uint256",
                                "name": "reserveOffset",
                                "type": "uint256"
                            },
                            {
                                "internalType": "address",
                                "name": "hintHandler",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "networkProxy",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "weth",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes",
                                "name": "hint",
                                "type": "bytes"
                            }
                        ],
                        "internalType": "struct KyberSampler.KyberSamplerOpts",
                        "name": "opts",
                        "type": "tuple"
                    },
                    {
                        "internalType": "bytes32",
                        "name": "reserveId",
                        "type": "bytes32"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    }
                ],
                "name": "encodeKyberHint",
                "outputs": [
                    {
                        "internalType": "bytes",
                        "name": "hint",
                        "type": "bytes"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "contract IERC20TokenV06[]",
                        "name": "tokens",
                        "type": "address[]"
                    },
                    {
                        "internalType": "address",
                        "name": "account",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "spender",
                        "type": "address"
                    }
                ],
                "name": "getAllowanceOf",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "allowances",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "contract IERC20TokenV06[]",
                        "name": "tokens",
                        "type": "address[]"
                    },
                    {
                        "internalType": "address",
                        "name": "account",
                        "type": "address"
                    }
                ],
                "name": "getBalanceOf",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "balances",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "contract IERC20TokenV06",
                                "name": "makerToken",
                                "type": "address"
                            },
                            {
                                "internalType": "contract IERC20TokenV06",
                                "name": "takerToken",
                                "type": "address"
                            },
                            {
                                "internalType": "uint128",
                                "name": "makerAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "uint128",
                                "name": "takerAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "uint128",
                                "name": "takerTokenFeeAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "address",
                                "name": "maker",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "taker",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "sender",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "feeRecipient",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "pool",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "uint64",
                                "name": "expiry",
                                "type": "uint64"
                            },
                            {
                                "internalType": "uint256",
                                "name": "salt",
                                "type": "uint256"
                            }
                        ],
                        "internalType": "struct IExchange.LimitOrder[]",
                        "name": "orders",
                        "type": "tuple[]"
                    },
                    {
                        "components": [
                            {
                                "internalType": "enum IExchange.SignatureType",
                                "name": "signatureType",
                                "type": "uint8"
                            },
                            {
                                "internalType": "uint8",
                                "name": "v",
                                "type": "uint8"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "r",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "s",
                                "type": "bytes32"
                            }
                        ],
                        "internalType": "struct IExchange.Signature[]",
                        "name": "orderSignatures",
                        "type": "tuple[]"
                    },
                    {
                        "internalType": "contract IExchange",
                        "name": "exchange",
                        "type": "address"
                    }
                ],
                "name": "getLimitOrderFillableMakerAssetAmounts",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "orderFillableMakerAssetAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "contract IERC20TokenV06",
                                "name": "makerToken",
                                "type": "address"
                            },
                            {
                                "internalType": "contract IERC20TokenV06",
                                "name": "takerToken",
                                "type": "address"
                            },
                            {
                                "internalType": "uint128",
                                "name": "makerAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "uint128",
                                "name": "takerAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "uint128",
                                "name": "takerTokenFeeAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "address",
                                "name": "maker",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "taker",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "sender",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "feeRecipient",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "pool",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "uint64",
                                "name": "expiry",
                                "type": "uint64"
                            },
                            {
                                "internalType": "uint256",
                                "name": "salt",
                                "type": "uint256"
                            }
                        ],
                        "internalType": "struct IExchange.LimitOrder",
                        "name": "order",
                        "type": "tuple"
                    },
                    {
                        "components": [
                            {
                                "internalType": "enum IExchange.SignatureType",
                                "name": "signatureType",
                                "type": "uint8"
                            },
                            {
                                "internalType": "uint8",
                                "name": "v",
                                "type": "uint8"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "r",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "s",
                                "type": "bytes32"
                            }
                        ],
                        "internalType": "struct IExchange.Signature",
                        "name": "signature",
                        "type": "tuple"
                    },
                    {
                        "internalType": "contract IExchange",
                        "name": "exchange",
                        "type": "address"
                    }
                ],
                "name": "getLimitOrderFillableTakerAmount",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "fillableTakerAmount",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "contract IERC20TokenV06",
                                "name": "makerToken",
                                "type": "address"
                            },
                            {
                                "internalType": "contract IERC20TokenV06",
                                "name": "takerToken",
                                "type": "address"
                            },
                            {
                                "internalType": "uint128",
                                "name": "makerAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "uint128",
                                "name": "takerAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "uint128",
                                "name": "takerTokenFeeAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "address",
                                "name": "maker",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "taker",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "sender",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "feeRecipient",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "pool",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "uint64",
                                "name": "expiry",
                                "type": "uint64"
                            },
                            {
                                "internalType": "uint256",
                                "name": "salt",
                                "type": "uint256"
                            }
                        ],
                        "internalType": "struct IExchange.LimitOrder[]",
                        "name": "orders",
                        "type": "tuple[]"
                    },
                    {
                        "components": [
                            {
                                "internalType": "enum IExchange.SignatureType",
                                "name": "signatureType",
                                "type": "uint8"
                            },
                            {
                                "internalType": "uint8",
                                "name": "v",
                                "type": "uint8"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "r",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "s",
                                "type": "bytes32"
                            }
                        ],
                        "internalType": "struct IExchange.Signature[]",
                        "name": "orderSignatures",
                        "type": "tuple[]"
                    },
                    {
                        "internalType": "contract IExchange",
                        "name": "exchange",
                        "type": "address"
                    }
                ],
                "name": "getLimitOrderFillableTakerAssetAmounts",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "orderFillableTakerAssetAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "contract IERC20TokenV06[]",
                        "name": "tokens",
                        "type": "address[]"
                    }
                ],
                "name": "getTokenDecimals",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "decimals",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "account",
                        "type": "address"
                    }
                ],
                "name": "isContract",
                "outputs": [
                    {
                        "internalType": "bool",
                        "name": "",
                        "type": "bool"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "poolAddress",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromBalancer",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "bytes32",
                                "name": "poolId",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "address",
                                "name": "vault",
                                "type": "address"
                            }
                        ],
                        "internalType": "struct BalancerV2Sampler.BalancerV2PoolInfo",
                        "name": "poolInfo",
                        "type": "tuple"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromBalancerV2",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "contract IBancorRegistry",
                                "name": "registry",
                                "type": "address"
                            },
                            {
                                "internalType": "address[][]",
                                "name": "paths",
                                "type": "address[][]"
                            }
                        ],
                        "internalType": "struct BancorSampler.BancorSamplerOpts",
                        "name": "opts",
                        "type": "tuple"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromBancor",
                "outputs": [
                    {
                        "internalType": "address",
                        "name": "bancorNetwork",
                        "type": "address"
                    },
                    {
                        "internalType": "address[]",
                        "name": "path",
                        "type": "address[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "poolAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes4",
                                "name": "sellQuoteFunctionSelector",
                                "type": "bytes4"
                            },
                            {
                                "internalType": "bytes4",
                                "name": "buyQuoteFunctionSelector",
                                "type": "bytes4"
                            }
                        ],
                        "internalType": "struct CurveSampler.CurveInfo",
                        "name": "curveInfo",
                        "type": "tuple"
                    },
                    {
                        "internalType": "int128",
                        "name": "fromTokenIdx",
                        "type": "int128"
                    },
                    {
                        "internalType": "int128",
                        "name": "toTokenIdx",
                        "type": "int128"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromCurve",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "registry",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "helper",
                                "type": "address"
                            }
                        ],
                        "internalType": "struct DODOSampler.DODOSamplerOpts",
                        "name": "opts",
                        "type": "tuple"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromDODO",
                "outputs": [
                    {
                        "internalType": "bool",
                        "name": "sellBase",
                        "type": "bool"
                    },
                    {
                        "internalType": "address",
                        "name": "pool",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "registry",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256",
                        "name": "offset",
                        "type": "uint256"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromDODOV2",
                "outputs": [
                    {
                        "internalType": "bool",
                        "name": "sellBase",
                        "type": "bool"
                    },
                    {
                        "internalType": "address",
                        "name": "pool",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "router",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromEth2Dai",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "uint256",
                                "name": "reserveOffset",
                                "type": "uint256"
                            },
                            {
                                "internalType": "address",
                                "name": "hintHandler",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "networkProxy",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "weth",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes",
                                "name": "hint",
                                "type": "bytes"
                            }
                        ],
                        "internalType": "struct KyberSampler.KyberSamplerOpts",
                        "name": "opts",
                        "type": "tuple"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromKyberNetwork",
                "outputs": [
                    {
                        "internalType": "bytes32",
                        "name": "reserveId",
                        "type": "bytes32"
                    },
                    {
                        "internalType": "bytes",
                        "name": "hint",
                        "type": "bytes"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "providerAddress",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromLiquidityProvider",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "router",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromMStable",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "psmAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "ilkIdentifier",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "address",
                                "name": "gemTokenAddress",
                                "type": "address"
                            }
                        ],
                        "internalType": "struct MakerPSMSampler.MakerPsmInfo",
                        "name": "psmInfo",
                        "type": "tuple"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromMakerPsm",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "registry",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromMooniswap",
                "outputs": [
                    {
                        "internalType": "contract IMooniswap",
                        "name": "pool",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "pool",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromShell",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "poolAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes4",
                                "name": "sellQuoteFunctionSelector",
                                "type": "bytes4"
                            },
                            {
                                "internalType": "bytes4",
                                "name": "buyQuoteFunctionSelector",
                                "type": "bytes4"
                            }
                        ],
                        "internalType": "struct SmoothySampler.SmoothyInfo",
                        "name": "smoothyInfo",
                        "type": "tuple"
                    },
                    {
                        "internalType": "int128",
                        "name": "fromTokenIdx",
                        "type": "int128"
                    },
                    {
                        "internalType": "int128",
                        "name": "toTokenIdx",
                        "type": "int128"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromSmoothy",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "router",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromUniswap",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "router",
                        "type": "address"
                    },
                    {
                        "internalType": "address[]",
                        "name": "path",
                        "type": "address[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromUniswapV2",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "contract IUniswapV3Quoter",
                        "name": "quoter",
                        "type": "address"
                    },
                    {
                        "internalType": "contract IERC20TokenV06[]",
                        "name": "path",
                        "type": "address[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromUniswapV3",
                "outputs": [
                    {
                        "internalType": "bytes[]",
                        "name": "uniswapPaths",
                        "type": "bytes[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "uint256",
                                "name": "reserveOffset",
                                "type": "uint256"
                            },
                            {
                                "internalType": "address",
                                "name": "hintHandler",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "networkProxy",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "weth",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes",
                                "name": "hint",
                                "type": "bytes"
                            }
                        ],
                        "internalType": "struct KyberSampler.KyberSamplerOpts",
                        "name": "opts",
                        "type": "tuple"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256",
                        "name": "takerTokenAmount",
                        "type": "uint256"
                    }
                ],
                "name": "sampleSellFromKyberNetwork",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "makerTokenAmount",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "poolAddress",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromBalancer",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "bytes32",
                                "name": "poolId",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "address",
                                "name": "vault",
                                "type": "address"
                            }
                        ],
                        "internalType": "struct BalancerV2Sampler.BalancerV2PoolInfo",
                        "name": "poolInfo",
                        "type": "tuple"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromBalancerV2",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "contract IBancorRegistry",
                                "name": "registry",
                                "type": "address"
                            },
                            {
                                "internalType": "address[][]",
                                "name": "paths",
                                "type": "address[][]"
                            }
                        ],
                        "internalType": "struct BancorSampler.BancorSamplerOpts",
                        "name": "opts",
                        "type": "tuple"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromBancor",
                "outputs": [
                    {
                        "internalType": "address",
                        "name": "bancorNetwork",
                        "type": "address"
                    },
                    {
                        "internalType": "address[]",
                        "name": "path",
                        "type": "address[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "poolAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes4",
                                "name": "sellQuoteFunctionSelector",
                                "type": "bytes4"
                            },
                            {
                                "internalType": "bytes4",
                                "name": "buyQuoteFunctionSelector",
                                "type": "bytes4"
                            }
                        ],
                        "internalType": "struct CurveSampler.CurveInfo",
                        "name": "curveInfo",
                        "type": "tuple"
                    },
                    {
                        "internalType": "int128",
                        "name": "fromTokenIdx",
                        "type": "int128"
                    },
                    {
                        "internalType": "int128",
                        "name": "toTokenIdx",
                        "type": "int128"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromCurve",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "registry",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "helper",
                                "type": "address"
                            }
                        ],
                        "internalType": "struct DODOSampler.DODOSamplerOpts",
                        "name": "opts",
                        "type": "tuple"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromDODO",
                "outputs": [
                    {
                        "internalType": "bool",
                        "name": "sellBase",
                        "type": "bool"
                    },
                    {
                        "internalType": "address",
                        "name": "pool",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "registry",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256",
                        "name": "offset",
                        "type": "uint256"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromDODOV2",
                "outputs": [
                    {
                        "internalType": "bool",
                        "name": "sellBase",
                        "type": "bool"
                    },
                    {
                        "internalType": "address",
                        "name": "pool",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "router",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromEth2Dai",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "uint256",
                                "name": "reserveOffset",
                                "type": "uint256"
                            },
                            {
                                "internalType": "address",
                                "name": "hintHandler",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "networkProxy",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "weth",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes",
                                "name": "hint",
                                "type": "bytes"
                            }
                        ],
                        "internalType": "struct KyberSampler.KyberSamplerOpts",
                        "name": "opts",
                        "type": "tuple"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromKyberNetwork",
                "outputs": [
                    {
                        "internalType": "bytes32",
                        "name": "reserveId",
                        "type": "bytes32"
                    },
                    {
                        "internalType": "bytes",
                        "name": "hint",
                        "type": "bytes"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "providerAddress",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromLiquidityProvider",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "router",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromMStable",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "psmAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "ilkIdentifier",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "address",
                                "name": "gemTokenAddress",
                                "type": "address"
                            }
                        ],
                        "internalType": "struct MakerPSMSampler.MakerPsmInfo",
                        "name": "psmInfo",
                        "type": "tuple"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromMakerPsm",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "registry",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromMooniswap",
                "outputs": [
                    {
                        "internalType": "contract IMooniswap",
                        "name": "pool",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "multibridge",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "intermediateToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromMultiBridge",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "pool",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromShell",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "poolAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes4",
                                "name": "sellQuoteFunctionSelector",
                                "type": "bytes4"
                            },
                            {
                                "internalType": "bytes4",
                                "name": "buyQuoteFunctionSelector",
                                "type": "bytes4"
                            }
                        ],
                        "internalType": "struct SmoothySampler.SmoothyInfo",
                        "name": "smoothyInfo",
                        "type": "tuple"
                    },
                    {
                        "internalType": "int128",
                        "name": "fromTokenIdx",
                        "type": "int128"
                    },
                    {
                        "internalType": "int128",
                        "name": "toTokenIdx",
                        "type": "int128"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromSmoothy",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "router",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromUniswap",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "router",
                        "type": "address"
                    },
                    {
                        "internalType": "address[]",
                        "name": "path",
                        "type": "address[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromUniswapV2",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "contract IUniswapV3Quoter",
                        "name": "quoter",
                        "type": "address"
                    },
                    {
                        "internalType": "contract IERC20TokenV06[]",
                        "name": "path",
                        "type": "address[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromUniswapV3",
                "outputs": [
                    {
                        "internalType": "bytes[]",
                        "name": "uniswapPaths",
                        "type": "bytes[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "registry",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "mooniswapTakerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "mooniswapMakerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256",
                        "name": "takerTokenAmount",
                        "type": "uint256"
                    }
                ],
                "name": "sampleSingleSellFromMooniswapPool",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "bytes[]",
                        "name": "firstHopCalls",
                        "type": "bytes[]"
                    },
                    {
                        "internalType": "bytes[]",
                        "name": "secondHopCalls",
                        "type": "bytes[]"
                    },
                    {
                        "internalType": "uint256",
                        "name": "buyAmount",
                        "type": "uint256"
                    }
                ],
                "name": "sampleTwoHopBuy",
                "outputs": [
                    {
                        "components": [
                            {
                                "internalType": "uint256",
                                "name": "sourceIndex",
                                "type": "uint256"
                            },
                            {
                                "internalType": "bytes",
                                "name": "returnData",
                                "type": "bytes"
                            }
                        ],
                        "internalType": "struct TwoHopSampler.HopInfo",
                        "name": "firstHop",
                        "type": "tuple"
                    },
                    {
                        "components": [
                            {
                                "internalType": "uint256",
                                "name": "sourceIndex",
                                "type": "uint256"
                            },
                            {
                                "internalType": "bytes",
                                "name": "returnData",
                                "type": "bytes"
                            }
                        ],
                        "internalType": "struct TwoHopSampler.HopInfo",
                        "name": "secondHop",
                        "type": "tuple"
                    },
                    {
                        "internalType": "uint256",
                        "name": "sellAmount",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "bytes[]",
                        "name": "firstHopCalls",
                        "type": "bytes[]"
                    },
                    {
                        "internalType": "bytes[]",
                        "name": "secondHopCalls",
                        "type": "bytes[]"
                    },
                    {
                        "internalType": "uint256",
                        "name": "sellAmount",
                        "type": "uint256"
                    }
                ],
                "name": "sampleTwoHopSell",
                "outputs": [
                    {
                        "components": [
                            {
                                "internalType": "uint256",
                                "name": "sourceIndex",
                                "type": "uint256"
                            },
                            {
                                "internalType": "bytes",
                                "name": "returnData",
                                "type": "bytes"
                            }
                        ],
                        "internalType": "struct TwoHopSampler.HopInfo",
                        "name": "firstHop",
                        "type": "tuple"
                    },
                    {
                        "components": [
                            {
                                "internalType": "uint256",
                                "name": "sourceIndex",
                                "type": "uint256"
                            },
                            {
                                "internalType": "bytes",
                                "name": "returnData",
                                "type": "bytes"
                            }
                        ],
                        "internalType": "struct TwoHopSampler.HopInfo",
                        "name": "secondHop",
                        "type": "tuple"
                    },
                    {
                        "internalType": "uint256",
                        "name": "buyAmount",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            }
        ],
        "devdoc": {
            "kind": "dev",
            "methods": {
                "batchCall(bytes[])": {
                    "details": "Call multiple public functions on this contract in a single transaction.",
                    "params": {
                        "callDatas": "ABI-encoded call data for each function call."
                    },
                    "returns": {
                        "callResults": "ABI-encoded results data for each call."
                    }
                },
                "getLimitOrderFillableMakerAssetAmounts((address,address,uint128,uint128,uint128,address,address,address,address,bytes32,uint64,uint256)[],(uint8,uint8,bytes32,bytes32)[],address)": {
                    "details": "Queries the fillable taker asset amounts of native orders.      Effectively ignores orders that have empty signatures or",
                    "params": {
                        "exchange": "The V4 exchange.",
                        "orderSignatures": "Signatures for each respective order in `orders`.",
                        "orders": "Native orders to query."
                    },
                    "returns": {
                        "orderFillableMakerAssetAmounts": "How much maker asset can be filled         by each order in `orders`."
                    }
                },
                "getLimitOrderFillableTakerAmount((address,address,uint128,uint128,uint128,address,address,address,address,bytes32,uint64,uint256),(uint8,uint8,bytes32,bytes32),address)": {
                    "details": "Get the fillable taker amount of an order, taking into account      order state, maker fees, and maker balances."
                },
                "getLimitOrderFillableTakerAssetAmounts((address,address,uint128,uint128,uint128,address,address,address,address,bytes32,uint64,uint256)[],(uint8,uint8,bytes32,bytes32)[],address)": {
                    "details": "Queries the fillable taker asset amounts of native orders.      Effectively ignores orders that have empty signatures or      maker/taker asset amounts (returning 0).",
                    "params": {
                        "exchange": "The V4 exchange.",
                        "orderSignatures": "Signatures for each respective order in `orders`.",
                        "orders": "Native limit orders to query."
                    },
                    "returns": {
                        "orderFillableTakerAssetAmounts": "How much taker asset can be filled         by each order in `orders`."
                    }
                },
                "sampleBuysFromBalancer(address,address,address,uint256[])": {
                    "details": "Sample buy quotes from Balancer.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "makerTokenAmounts": "Maker token buy amount for each sample.",
                        "poolAddress": "Address of the Balancer pool to query.",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromBalancerV2((bytes32,address),address,address,uint256[])": {
                    "details": "Sample buy quotes from Balancer V2.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "makerTokenAmounts": "Maker token buy amount for each sample.",
                        "poolInfo": "Struct with pool related data",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromBancor((address,address[][]),address,address,uint256[])": {
                    "details": "Sample buy quotes from Bancor. Unimplemented",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "makerTokenAmounts": "Maker token buy amount for each sample.",
                        "opts": "BancorSamplerOpts The Bancor registry contract address and paths",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "bancorNetwork": "the Bancor Network address",
                        "path": "the selected conversion path from bancor",
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromCurve((address,bytes4,bytes4),int128,int128,uint256[])": {
                    "details": "Sample buy quotes from Curve.",
                    "params": {
                        "curveInfo": "Curve information specific to this token pair.",
                        "fromTokenIdx": "Index of the taker token (what to sell).",
                        "makerTokenAmounts": "Maker token buy amount for each sample.",
                        "toTokenIdx": "Index of the maker token (what to buy)."
                    },
                    "returns": {
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromDODO((address,address),address,address,uint256[])": {
                    "details": "Sample buy quotes from DODO.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "makerTokenAmounts": "Maker token sell amount for each sample.",
                        "opts": "DODOSamplerOpts DODO Registry and helper addresses",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "pool": "the DODO pool address",
                        "sellBase": "whether the bridge needs to sell the base token",
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromDODOV2(address,uint256,address,address,uint256[])": {
                    "details": "Sample buy quotes from DODO.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "makerTokenAmounts": "Maker token sell amount for each sample.",
                        "offset": "offset index for the pool in the registry.",
                        "registry": "Address of the registry to look up.",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "pool": "the DODO pool address",
                        "sellBase": "whether the bridge needs to sell the base token",
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromEth2Dai(address,address,address,uint256[])": {
                    "details": "Sample buy quotes from Eth2Dai/Oasis.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "router": "Address of the Eth2Dai/Oasis contract",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Maker token sell amount for each sample."
                    },
                    "returns": {
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromKyberNetwork((uint256,address,address,address,bytes),address,address,uint256[])": {
                    "details": "Sample buy quotes from Kyber.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "makerTokenAmounts": "Maker token buy amount for each sample.",
                        "opts": "KyberSamplerOpts The nth reserve",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "hint": "The hint for the selected reserve",
                        "reserveId": "The id of the reserve found at reserveOffset",
                        "takerTokenAmounts": "Taker amounts sold at each maker token amount."
                    }
                },
                "sampleBuysFromLiquidityProvider(address,address,address,uint256[])": {
                    "details": "Sample buy quotes from an arbitrary on-chain liquidity provider.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "makerTokenAmounts": "Maker token buy amount for each sample.",
                        "providerAddress": "Address of the liquidity provider.",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromMStable(address,address,address,uint256[])": {
                    "details": "Sample buy quotes from MStable contract",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "makerTokenAmounts": "Maker token buy amount for each sample.",
                        "router": "Address of the mStable contract",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromMooniswap(address,address,address,uint256[])": {
                    "details": "Sample buy quotes from Mooniswap.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "makerTokenAmounts": "Maker token sell amount for each sample.",
                        "registry": "Address of the Mooniswap Registry.",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "pool": "The contract address for the pool",
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromShell(address,address,address,uint256[])": {
                    "details": "Sample buy quotes from Shell pool contract",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "makerTokenAmounts": "Maker token buy amount for each sample.",
                        "pool": "Address of the Shell pool contract",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromSmoothy((address,bytes4,bytes4),int128,int128,uint256[])": {
                    "details": "Sample buy quotes from Smoothy.",
                    "params": {
                        "fromTokenIdx": "Index of the taker token (what to sell).",
                        "makerTokenAmounts": "Maker token buy amount for each sample.",
                        "smoothyInfo": "Smoothy information specific to this token pair.",
                        "toTokenIdx": "Index of the maker token (what to buy)."
                    },
                    "returns": {
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromUniswap(address,address,address,uint256[])": {
                    "details": "Sample buy quotes from Uniswap.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "makerTokenAmounts": "Maker token sell amount for each sample.",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromUniswapV2(address,address[],uint256[])": {
                    "details": "Sample buy quotes from UniswapV2.",
                    "params": {
                        "makerTokenAmounts": "Maker token buy amount for each sample.",
                        "path": "Token route. Should be takerToken -> makerToken.",
                        "router": "Router to look up tokens and amounts"
                    },
                    "returns": {
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromUniswapV3(address,address[],uint256[])": {
                    "details": "Sample buy quotes from UniswapV3.",
                    "params": {
                        "makerTokenAmounts": "Maker token buy amount for each sample.",
                        "path": "Token route. Should be takerToken -> makerToken.",
                        "quoter": "UniswapV3 Quoter contract."
                    },
                    "returns": {
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount.",
                        "uniswapPaths": "The encoded uniswap path for each sample."
                    }
                },
                "sampleSellsFromBalancer(address,address,address,uint256[])": {
                    "details": "Sample sell quotes from Balancer.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "poolAddress": "Address of the Balancer pool to query.",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount."
                    }
                },
                "sampleSellsFromBalancerV2((bytes32,address),address,address,uint256[])": {
                    "details": "Sample sell quotes from Balancer V2.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "poolInfo": "Struct with pool related data",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount."
                    }
                },
                "sampleSellsFromBancor((address,address[][]),address,address,uint256[])": {
                    "details": "Sample sell quotes from Bancor.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "opts": "BancorSamplerOpts The Bancor registry contract address and paths",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "bancorNetwork": "the Bancor Network address",
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount.",
                        "path": "the selected conversion path from bancor"
                    }
                },
                "sampleSellsFromCurve((address,bytes4,bytes4),int128,int128,uint256[])": {
                    "details": "Sample sell quotes from Curve.",
                    "params": {
                        "curveInfo": "Curve information specific to this token pair.",
                        "fromTokenIdx": "Index of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample.",
                        "toTokenIdx": "Index of the maker token (what to buy)."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount."
                    }
                },
                "sampleSellsFromDODO((address,address),address,address,uint256[])": {
                    "details": "Sample sell quotes from DODO.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "opts": "DODOSamplerOpts DODO Registry and helper addresses",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount.",
                        "pool": "the DODO pool address",
                        "sellBase": "whether the bridge needs to sell the base token"
                    }
                },
                "sampleSellsFromDODOV2(address,uint256,address,address,uint256[])": {
                    "details": "Sample sell quotes from DODO V2.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "offset": "offset index for the pool in the registry.",
                        "registry": "Address of the registry to look up.",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount.",
                        "pool": "the DODO pool address",
                        "sellBase": "whether the bridge needs to sell the base token"
                    }
                },
                "sampleSellsFromEth2Dai(address,address,address,uint256[])": {
                    "details": "Sample sell quotes from Eth2Dai/Oasis.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "router": "Address of the Eth2Dai/Oasis contract",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount."
                    }
                },
                "sampleSellsFromKyberNetwork((uint256,address,address,address,bytes),address,address,uint256[])": {
                    "details": "Sample sell quotes from Kyber.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "opts": "KyberSamplerOpts The nth reserve",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "hint": "The hint for the selected reserve",
                        "makerTokenAmounts": "Maker amounts bought at each taker token amount.",
                        "reserveId": "The id of the reserve found at reserveOffset"
                    }
                },
                "sampleSellsFromLiquidityProvider(address,address,address,uint256[])": {
                    "details": "Sample sell quotes from an arbitrary on-chain liquidity provider.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "providerAddress": "Address of the liquidity provider.",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount."
                    }
                },
                "sampleSellsFromMStable(address,address,address,uint256[])": {
                    "details": "Sample sell quotes from the mStable contract",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "router": "Address of the mStable contract",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount."
                    }
                },
                "sampleSellsFromMakerPsm((address,bytes32,address),address,address,uint256[])": {
                    "details": "Sample sell quotes from Maker PSM"
                },
                "sampleSellsFromMooniswap(address,address,address,uint256[])": {
                    "details": "Sample sell quotes from Mooniswap.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "registry": "Address of the Mooniswap Registry.",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount.",
                        "pool": "The contract address for the pool"
                    }
                },
                "sampleSellsFromMultiBridge(address,address,address,address,uint256[])": {
                    "details": "Sample sell quotes from MultiBridge.",
                    "params": {
                        "intermediateToken": "The address of the intermediate token to        use in an indirect route.",
                        "makerToken": "Address of the maker token (what to buy).",
                        "multibridge": "Address of the MultiBridge contract.",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount."
                    }
                },
                "sampleSellsFromShell(address,address,address,uint256[])": {
                    "details": "Sample sell quotes from the Shell pool contract",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "pool": "Address of the Shell pool contract",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount."
                    }
                },
                "sampleSellsFromSmoothy((address,bytes4,bytes4),int128,int128,uint256[])": {
                    "details": "Sample sell quotes from Smoothy.",
                    "params": {
                        "fromTokenIdx": "Index of the taker token (what to sell).",
                        "smoothyInfo": "Smoothy information specific to this token pair.",
                        "takerTokenAmounts": "Taker token sell amount for each sample.",
                        "toTokenIdx": "Index of the maker token (what to buy)."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount."
                    }
                },
                "sampleSellsFromUniswap(address,address,address,uint256[])": {
                    "details": "Sample sell quotes from Uniswap.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "router": "Address of the Uniswap Router",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount."
                    }
                },
                "sampleSellsFromUniswapV2(address,address[],uint256[])": {
                    "details": "Sample sell quotes from UniswapV2.",
                    "params": {
                        "path": "Token route. Should be takerToken -> makerToken",
                        "router": "Router to look up tokens and amounts",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount."
                    }
                },
                "sampleSellsFromUniswapV3(address,address[],uint256[])": {
                    "details": "Sample sell quotes from UniswapV3.",
                    "params": {
                        "path": "Token route. Should be takerToken -> makerToken",
                        "quoter": "UniswapV3 Quoter contract.",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount.",
                        "uniswapPaths": "The encoded uniswap path for each sample."
                    }
                }
            },
            "version": 1
        },
        "evm": {
            "bytecode": {
                "linkReferences": {},
                "object": "0x60a06040527feeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000006080523480156200003557600080fd5b5060805160601c619cd76200005e6000398061288c52806144b252806150035250619cd76000f3fe608060405234801561001057600080fd5b50600436106102a05760003560e01c80639209483b11610167578063c25c4138116100ce578063ddd5aa2811610087578063ddd5aa2814610665578063e78ac04514610678578063e8e4af091461068b578063f1ed7fa41461069e578063f5a4994d146106b1578063fc9fe41b146106c4576102a0565b8063c25c4138146105f3578063c831908414610606578063c8c74a3714610619578063c94706d81461062c578063cc1621c91461063f578063d9bca37214610652576102a0565b8063a469841711610120578063a469841714610573578063a75e744b14610586578063ab00027614610599578063adc636bf146105ac578063b90cd2fb146105cd578063bd71ecf6146105e0576102a0565b80639209483b146104e557806398777748146104f85780639bf3ee351461050b5780639e3f05c31461052b5780639ea0ff131461054d578063a0295b8b14610560576102a0565b80634edfb5b21161020b57806368be3cf2116101c457806368be3cf214610457578063706e2f9b1461047757806374c9d2551461048a5780637f7f4f131461049d5780638b6d7b44146104b05780638e5a0e07146104c3576102a0565b80634edfb5b2146103ca5780635505000a146103ea57806357494b1d1461040b5780635aae4e531461041e5780635d5b674f1461043157806366a1ac6b14610444576102a0565b806329fa4aa01161025d57806329fa4aa0146103495780632aa643191461035c5780632d753aa41461037e57806330d6570d146103915780633105fec1146103a457806340bc03ae146103b7576102a0565b80631022742b146102a5578063149dab0e146102ce57806316279055146102f05780632339078f14610310578063252322b314610323578063281e343214610336575b600080fd5b6102b86102b336600461890b565b6106d7565b6040516102c59190619713565b60405180910390f35b6102e16102dc366004618bdf565b61084a565b6040516102c5939291906194e0565b6103036102fe3660046181b2565b6109aa565b6040516102c59190619726565b6102b861031e366004618b60565b6109b4565b6102b8610331366004618416565b610bdb565b6102b8610344366004618e8f565b610db1565b6102b8610357366004618c98565b611006565b61036f61036a366004618cf1565b611075565b6040516102c593929190619731565b6102b861038c366004618391565b611352565b6102b861039f366004618416565b6114db565b6102b86103b23660046184d8565b61164f565b6102b86103c5366004618c98565b6117d3565b6103dd6103d8366004618df1565b611954565b6040516102c5919061977f565b6103fd6103f8366004618ac9565b611bd1565b6040516102c5929190619636565b6102b8610419366004618416565b611e26565b6103fd61042c366004618ac9565b612378565b6102b861043f366004618416565b6125bd565b6102b861045236600461890b565b612623565b61046a6104653660046186e5565b6126d8565b6040516102c5919061969e565b6102b86104853660046187bc565b612839565b6102e1610498366004618bdf565b61292b565b6102b86104ab366004618e8f565b61293a565b6102b86104be366004618c98565b612b87565b6104d66104d1366004618753565b612eea565b6040516102c593929190619a10565b6102b86104f3366004618c98565b613103565b6102b8610506366004618416565b613303565b61051e610519366004618e4f565b61383a565b6040516102c5919061975d565b61053e610539366004618d3a565b613981565b6040516102c593929190619766565b61051e61055b366004618488565b613aa7565b6102b861056e366004618b60565b613cbd565b6102b8610581366004618416565b613eb9565b61036f61059436600461854a565b61400e565b6102b86105a7366004618416565b61414b565b6105bf6105ba366004618416565b6142a9565b6040516102c59291906197cd565b6102b86105db366004618416565b6143f9565b6102b86105ee3660046187ee565b61445f565b6102b8610601366004618416565b61455b565b6102b8610614366004618416565b6145c1565b6102b86106273660046184d8565b61477e565b6102b861063a366004618416565b6148ea565b61053e61064d366004618d3a565b614a48565b61036f61066036600461854a565b614c2e565b61036f610673366004618cf1565b614d1d565b6102b8610686366004618832565b614fb0565b6102b8610699366004618416565b6150a5565b61051e6106ac366004618daa565b6151d8565b6105bf6106bf366004618416565b615377565b6104d66106d2366004618753565b615463565b606083516001600160401b03811180156106f057600080fd5b5060405190808252806020026020018201604052801561071a578160200160208202803683370190505b50905060005b8451811461084257306001600160a01b0316639bf3ee3562030d4087848151811061074757fe5b602002602001015187858151811061075b57fe5b6020026020010151876040518563ffffffff1660e01b815260040161078293929190619ad2565b60206040518083038187803b15801561079a57600080fd5b5086fa935050505080156107cb575060408051601f3d908101601f191682019092526107c891810190618a7f565b60015b61081f573d8080156107f9576040519150601f19603f3d011682016040523d82523d6000602084013e6107fe565b606091505b50600083838151811061080d57fe5b6020026020010181815250505061083a565b8083838151811061082c57fe5b602002602001018181525050505b600101610720565b509392505050565b600060608086602001515160001415610862576109a0565b61086e87878787615678565b855191945092506001600160401b038111801561088a57600080fd5b506040519080825280602002602001820160405280156108b4578160200160208202803683370190505b50905060005b815181101561099e57836001600160a01b0316637f9c0ecd620493e0858885815181106108e357fe5b60200260200101516040518463ffffffff1660e01b8152600401610908929190619614565b60206040518083038187803b15801561092057600080fd5b5086fa93505050508015610951575060408051601f3d908101601f1916820190925261094e91810190618a7f565b60015b61095a5761099e565b8083838151811061096757fe5b60200260200101818152505082828151811061097f57fe5b602002602001015160001415610995575061099e565b506001016108ba565b505b9450945094915050565b803b15155b919050565b60606109c083856158aa565b6020850151604080516002808252606082810190935281602001602082028036833701905050905085816000815181106109f657fe5b60200260200101906001600160a01b031690816001600160a01b0316815250508481600181518110610a2457fe5b6001600160a01b03909216602092830291909101909101528351806001600160401b0381118015610a5457600080fd5b50604051908082528060200260200182016040528015610a7e578160200160208202803683370190505b509350610a89617a39565b610a916158e9565b905060005b82811015610bce576060610abd8b898481518110610ab057fe5b6020026020010151615918565b604051637c26833760e11b81529091506001600160a01b0387169063f84d066e90610af39060009085908a908990600401619820565b600060405180830381600087803b158015610b0d57600080fd5b505af1925050508015610b4257506040513d6000823e601f3d908101601f19168201604052610b3f9190810190618888565b60015b610b7d573d808015610b70576040519150601f19603f3d011682016040523d82523d6000602084013e610b75565b606091505b505050610bce565b600081600181518110610b8c57fe5b602002602001015160001902905060008113610baa57505050610bce565b80898581518110610bb757fe5b602002602001018181525050505050600101610a96565b5050505050949350505050565b6060610be783856158aa565b8151806001600160401b0381118015610bff57600080fd5b50604051908082528060200260200182016040528015610c29578160200160208202803683370190505b50915060006001600160a01b03861615610c4c57610c4787876159ac565b610c4f565b60005b905060006001600160a01b03861615610c7157610c6c88876159ac565b610c74565b60005b905060005b83811015610da55760016001600160a01b038816610cd757610cb684632640f62c60e01b898581518110610ca957fe5b6020026020010151615a2b565b878481518110610cc257fe5b60200260200101819350828152505050610d71565b6001600160a01b038916610cfd57610cb6836359e9486260e01b898581518110610ca957fe5b6000610d17846359e9486260e01b8a8681518110610ca957fe5b925090508015610d5457610d33856309903d8b60e21b83615a2b565b888581518110610d3f57fe5b60200260200101819450828152505050610d6f565b6000878481518110610d6257fe5b6020026020010181815250505b505b801580610d915750858281518110610d8557fe5b60200260200101516000145b15610d9c5750610da5565b50600101610c79565b50505050949350505050565b6060610dbd83856158aa565b6000856000015190506000816001600160a01b03166336569e776040518163ffffffff1660e01b815260040160206040518083038186803b158015610e0157600080fd5b505afa158015610e15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e3991906181ce565b8451909150806001600160401b0381118015610e5457600080fd5b50604051908082528060200260200182016040528015610e7e578160200160208202803683370190505b509350826001600160a01b031663f4b9fa756040518163ffffffff1660e01b815260040160206040518083038186803b158015610eba57600080fd5b505afa158015610ece573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ef291906181ce565b6001600160a01b0316866001600160a01b031614158015610f955750826001600160a01b031663f4b9fa756040518163ffffffff1660e01b815260040160206040518083038186803b158015610f4757600080fd5b505afa158015610f5b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f7f91906181ce565b6001600160a01b0316876001600160a01b031614155b15610fa257505050610ffe565b60005b81811015610da5576000610fd08a898b8a8681518110610fc157fe5b60200260200101518989615b0f565b905080610fdd5750610da5565b80868381518110610fea57fe5b602090810291909101015250600101610fa5565b949350505050565b60408051606081810190925261106c90806110258689608084016198f8565b6040516020818303038152906040528152602001868860405160200161104c9291906198f8565b6040516020818303038152906040528152602001615dd081525083615f03565b95945050505050565b600080606061108485876158aa565b8351806001600160401b038111801561109c57600080fd5b506040519080825280602002602001820160405280156110c6578160200160208202803683370190505b508851604051630939d86360e11b81529193506001600160a01b031690631273b0c6906110f9908a908a9060040161937c565b60206040518083038186803b15801561111157600080fd5b505afa158015611125573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061114991906181ce565b925060006001600160a01b0384161561116757506001935086611206565b8851604051630939d86360e11b81526001600160a01b0390911690631273b0c690611198908a908c9060040161937c565b60206040518083038186803b1580156111b057600080fd5b505afa1580156111c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111e891906181ce565b93506001600160a01b0384166111ff5750506109a0565b5060009350855b836001600160a01b031663dd58b41c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561123f57600080fd5b505afa158015611253573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112779190618a0c565b6112825750506109a0565b60005b828110156113455760006112ff8a87858e602001516040516020016112ad9493929190619396565b6040516020818303038152906040528a88868f602001516040516020016112d79493929190619396565b6040516020818303038152906040528a85815181106112f257fe5b6020026020010151616100565b90508085838151811061130e57fe5b60200260200101818152505084828151811061132657fe5b60200260200101516000141561133c5750611345565b50600101611285565b5050509450945094915050565b8051606090806001600160401b038111801561136d57600080fd5b50604051908082528060200260200182016040528015611397578160200160208202803683370190505b5091506001600160a01b0387166113ae575061106c565b60005b818110156114d05760006060896001600160a01b031662061a80636e79e13360e01b8b8b8b8b89815181106113e257fe5b60200260200101516040516024016113fd94939291906193f5565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b031990941693909317909252905161143b9190619333565b6000604051808303818686fa925050503d8060008114611477576040519150601f19603f3d011682016040523d82523d6000602084013e61147c565b606091505b5091509150600082156114a0578180602001905181019061149d9190618a7f565b90505b806114ad575050506114d0565b808685815181106114ba57fe5b60209081029190910101525050506001016113b1565b505095945050505050565b8051606090806001600160401b03811180156114f657600080fd5b50604051908082528060200260200182016040528015611520578160200160208202803683370190505b50915060005b8181101561164557866001600160a01b03166372ea9076620c3500888888868151811061154f57fe5b60200260200101516040518563ffffffff1660e01b815260040161157593929190619477565b60006040518083038187803b15801561158d57600080fd5b5086fa935050505080156115c357506040513d6000823e601f3d908101601f191682016040526115c09190810190618a28565b60015b6115fd573d8080156115f1576040519150601f19603f3d011682016040523d82523d6000602084013e6115f6565b606091505b5050611645565b8086858151811061160a57fe5b60200260200101818152505085848151811061162257fe5b60200260200101516000141561163a57505050611645565b505050600101611526565b5050949350505050565b8051606090806001600160401b038111801561166a57600080fd5b50604051908082528060200260200182016040528015611694578160200160208202803683370190505b50915060005b818110156117ca57856001600160a01b031663d06ca61f620249f08684815181106116c157fe5b6020026020010151886040518463ffffffff1660e01b81526004016116e7929190619b09565b60006040518083038187803b1580156116ff57600080fd5b5086fa9350505050801561173557506040513d6000823e601f3d908101601f1916820160405261173291908101906189da565b60015b61176f573d808015611763576040519150601f19603f3d011682016040523d82523d6000602084013e611768565b606091505b50506117ca565b8060018751038151811061177f57fe5b602002602001015184838151811061179357fe5b6020026020010181815250508382815181106117ab57fe5b6020026020010151600014156117c157506117ca565b5060010161169a565b50509392505050565b8051606090806001600160401b03811180156117ee57600080fd5b50604051908082528060200260200182016040528015611818578160200160208202803683370190505b50915060005b81811015611645576000606088600001516001600160a01b0316621e84808a602001518a8a8a888151811061184f57fe5b6020026020010151604051602401611869939291906198da565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516118a79190619333565b6000604051808303818686fa925050503d80600081146118e3576040519150601f19603f3d011682016040523d82523d6000602084013e6118e8565b606091505b50915091506000821561190c57818060200190518101906119099190618a7f565b90505b8086858151811061191957fe5b60200260200101818152505085848151811061193157fe5b60200260200101516000141561194957505050611645565b50505060010161181e565b6020848101516040805160018082528183019092526060938492908281019080368337019050509050858160008151811061198b57fe5b6020908102919091010152606060006040519080825280602002602001820160405280156119c3578160200160208202803683370190505b50905087606001516001600160a01b0316866001600160a01b03161415611ab4576040516381efcbdd60e01b81526001600160a01b038416906381efcbdd906207a12090611a1c90899060019088908890600401619516565b60006040518083038187803b158015611a3457600080fd5b5086fa93505050508015611a6a57506040513d6000823e601f3d908101601f19168201604052611a679190810190618a97565b60015b611aa4573d808015611a98576040519150601f19603f3d011682016040523d82523d6000602084013e611a9d565b606091505b5050611aaf565b9350610ffe92505050565b611bc6565b87606001516001600160a01b0316856001600160a01b03161415611b0a576040516361e597f960e01b81526001600160a01b038416906361e597f9906207a12090611a1c908a9060019088908890600401619516565b6040516302b9a6cd60e11b81526001600160a01b038416906305734d9a906207a12090611b4a908a90600190889088908d90849084908490600401619559565b60006040518083038187803b158015611b6257600080fd5b5086fa93505050508015611b9857506040513d6000823e601f3d908101601f19168201604052611b959190810190618a97565b60015b611aa4573d808015610bce576040519150601f19603f3d011682016040523d82523d6000602084013e610bce565b505050949350505050565b6060806060611c52866001600160a01b031663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b158015611c1257600080fd5b505afa158015611c26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c4a91906181ce565b866000616239565b905083516001600160401b0381118015611c6b57600080fd5b50604051908082528060200260200182016040528015611c95578160200160208202803683370190505b50915083516001600160401b0381118015611caf57600080fd5b50604051908082528060200260200182016040528015611ce357816020015b6060815260200190600190039081611cce5790505b50925060005b8451811015611e1c5760606000805b8451811015611dd4576060611d208a878481518110611d1357fe5b60200260200101516166cf565b90508a6001600160a01b031663cdca1753620493e0838c8981518110611d4257fe5b60200260200101516040518463ffffffff1660e01b8152600401611d67929190619792565b602060405180830381600088803b158015611d8157600080fd5b5087f193505050508015611db2575060408051601f3d908101601f19168201909252611daf91810190618a7f565b60015b611dbb57611dcb565b808411611dc9578093508194505b505b50600101611cf8565b5080611de1575050611e1c565b80858481518110611dee57fe5b60200260200101818152505081868481518110611e0757fe5b60209081029190910101525050600101611ce9565b5050935093915050565b80516060908590806001600160401b0381118015611e4357600080fd5b50604051908082528060200260200182016040528015611e6d578160200160208202803683370190505b50604051630bcded8960e21b81529093506001600160a01b03831690632f37b62490611e9d90899060040161934f565b60206040518083038186803b158015611eb557600080fd5b505afa158015611ec9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eed9190618a0c565b1580611f725750604051630bcded8960e21b81526001600160a01b03831690632f37b62490611f2090889060040161934f565b60206040518083038186803b158015611f3857600080fd5b505afa158015611f4c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f709190618a0c565b155b15611f7e575050610ffe565b611f86617a60565b60405163f8b2cb4f60e01b81526001600160a01b0384169063f8b2cb4f90611fb2908a9060040161934f565b60206040518083038186803b158015611fca57600080fd5b505afa158015611fde573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120029190618a7f565b815260405163f8b2cb4f60e01b81526001600160a01b0384169063f8b2cb4f9061203090899060040161934f565b60206040518083038186803b15801561204857600080fd5b505afa15801561205c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120809190618a7f565b6020820152604051634a46c67360e11b81526001600160a01b0384169063948d8ce6906120b1908a9060040161934f565b60206040518083038186803b1580156120c957600080fd5b505afa1580156120dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121019190618a7f565b60408083019190915251634a46c67360e11b81526001600160a01b0384169063948d8ce69061213490899060040161934f565b60206040518083038186803b15801561214c57600080fd5b505afa158015612160573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121849190618a7f565b816060018181525050826001600160a01b031663d4cadf686040518163ffffffff1660e01b815260040160206040518083038186803b1580156121c657600080fd5b505afa1580156121da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121fe9190618a7f565b608082015260005b82811015610da55761223182602001516003670de0b6b3a76400008161222857fe5b04600101616832565b86828151811061223d57fe5b6020026020010151111561225057610da5565b836001600160a01b031663f8d6aed4620493e084600001518560400151866020015187606001518c888151811061228357fe5b602002602001015189608001516040518863ffffffff1660e01b81526004016122b196959493929190619b22565b60206040518083038187803b1580156122c957600080fd5b5086fa935050505080156122fa575060408051601f3d908101601f191682019092526122f791810190618a7f565b60015b612334573d808015612328576040519150601f19603f3d011682016040523d82523d6000602084013e61232d565b606091505b5050610da5565b8086838151811061234157fe5b60200260200101818152505085828151811061235957fe5b60200260200101516000141561236f5750610da5565b50600101612206565b60608060606123b9866001600160a01b031663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b158015611c1257600080fd5b905060606123c68661688f565b905084516001600160401b03811180156123df57600080fd5b50604051908082528060200260200182016040528015612409578160200160208202803683370190505b50925084516001600160401b038111801561242357600080fd5b5060405190808252806020026020018201604052801561245757816020015b60608152602001906001900390816124425790505b50935060005b85518110156125b25760606000805b855181101561256a57606061249c8661249789858151811061248a57fe5b6020026020010151616927565b6166cf565b90508b6001600160a01b0316632f80bb1d620493e0838d89815181106124be57fe5b60200260200101516040518463ffffffff1660e01b81526004016124e3929190619792565b602060405180830381600088803b1580156124fd57600080fd5b5087f19350505050801561252e575060408051601f3d908101601f1916820190925261252b91810190618a7f565b60015b61253757612561565b8315806125445750808410155b1561255f5780935061255c8c898581518110611d1357fe5b94505b505b5060010161246c565b50806125775750506125b2565b8086848151811061258457fe5b6020026020010181815250508187848151811061259d57fe5b6020908102919091010152505060010161245d565b505050935093915050565b60408051606081810190925261106c90806125dc86896080840161937c565b6040516020818303038152906040528152602001868860405160200161260392919061937c565b60405160208183030381529060405281526020016169bf81525083615f03565b60606126308484846106d7565b905060005b84518110156108425781818151811061264a57fe5b60200260200101516000146126d0576126b782828151811061266857fe5b602002602001015186838151811061267c57fe5b6020026020010151606001516001600160801b031687848151811061269d57fe5b6020026020010151604001516001600160801b0316616ad3565b8282815181106126c357fe5b6020026020010181815250505b600101612635565b6060816001600160401b03811180156126f057600080fd5b5060405190808252806020026020018201604052801561272a57816020015b612717617a8f565b81526020019060019003908161270f5790505b50905060005b80831461283257600182828151811061274557fe5b60209081029190910181015191151591015283838281811061276357fe5b90506020028101906127759190619b4a565b151590506127825761282a565b3084848381811061278f57fe5b90506020028101906127a19190619b4a565b6040516127af929190619323565b6000604051808303816000865af19150503d80600081146127ec576040519150601f19603f3d011682016040523d82523d6000602084013e6127f1565b606091505b508383815181106127fe57fe5b602002602001015160200184848151811061281557fe5b60209081029190910101519190915290151590525b600101612730565b5092915050565b606081516001600160401b038111801561285257600080fd5b5060405190808252806020026020018201604052801561287c578160200160208202803683370190505b50905060005b82518114612925577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168382815181106128c057fe5b60200260200101516001600160a01b031614612900576128fb8382815181106128e557fe5b60200260200101516001600160a01b0316616af7565b612903565b60125b60ff1682828151811061291257fe5b6020908102919091010152600101612882565b50919050565b60006060809450945094915050565b606061294683856158aa565b6000856000015190506000816001600160a01b03166336569e776040518163ffffffff1660e01b815260040160206040518083038186803b15801561298a57600080fd5b505afa15801561299e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129c291906181ce565b8451909150806001600160401b03811180156129dd57600080fd5b50604051908082528060200260200182016040528015612a07578160200160208202803683370190505b509350826001600160a01b031663f4b9fa756040518163ffffffff1660e01b815260040160206040518083038186803b158015612a4357600080fd5b505afa158015612a57573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a7b91906181ce565b6001600160a01b0316866001600160a01b031614158015612b1e5750826001600160a01b031663f4b9fa756040518163ffffffff1660e01b815260040160206040518083038186803b158015612ad057600080fd5b505afa158015612ae4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b0891906181ce565b6001600160a01b0316876001600160a01b031614155b15612b2b57505050610ffe565b60005b81811015610da5576000612b598a898b8a8681518110612b4a57fe5b60200260200101518989616ba3565b905080612b665750610da5565b80868381518110612b7357fe5b602090810291909101015250600101612b2e565b6060600085600001516001600160a01b031663bbd7f25585600f0b6040518263ffffffff1660e01b8152600401612bbe919061975d565b60206040518083038186803b158015612bd657600080fd5b505afa158015612bea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c0e9190618a7f565b8651604051631e01043960e01b81526001600160a01b0390911690631e01043990612c4190600f89900b9060040161975d565b60206040518083038186803b158015612c5957600080fd5b505afa158015612c6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c919190618a7f565b039050600086600001516001600160a01b031663c582951486600f0b6040518263ffffffff1660e01b8152600401612cc9919061975d565b60806040518083038186803b158015612ce157600080fd5b505afa158015612cf5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d199190618fc9565b935050505080601203600a0a8281612d2d57fe5b85519190049250806001600160401b0381118015612d4a57600080fd5b50604051908082528060200260200182016040528015612d74578160200160208202803683370190505b50935060005b81811015610da557600060608a600001516001600160a01b0316620927c08c602001518c8c8c8881518110612dab57fe5b6020026020010151604051602401612dc5939291906198da565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051612e039190619333565b6000604051808303818686fa925050503d8060008114612e3f576040519150601f19603f3d011682016040523d82523d6000602084013e612e44565b606091505b509150915060008215612e685781806020019051810190612e659190618a7f565b90505b868110612ea257835b85811015612e995787898281518110612e8657fe5b6020908102919091010152600101612e71565b50505050610da5565b80888581518110612eaf57fe5b602002602001018181525050878481518110612ec757fe5b602002602001015160001415612edf57505050610da5565b505050600101612d7a565b612ef2617aa7565b612efa617aa7565b600080805b87518114612fff57612f466020898381518110612f1857fe5b60200260200101515103878a8481518110612f2f57fe5b6020026020010151616e359092919063ffffffff16565b60006060306001600160a01b03168a8481518110612f6057fe5b6020026020010151604051612f759190619333565b6000604051808303816000865af19150503d8060008114612fb2576040519150601f19603f3d011682016040523d82523d6000602084013e612fb7565b606091505b50915091508115612ff5576000612fdb602083510383616e4590919063ffffffff16565b905084811115612ff357838852602088018290529350835b505b5050600101612eff565b508061300b57506130fa565b60005b865181146130f75761303e602088838151811061302757fe5b6020026020010151510383898481518110612f2f57fe5b60006060306001600160a01b031689848151811061305857fe5b602002602001015160405161306d9190619333565b6000604051808303816000865af19150503d80600081146130aa576040519150601f19603f3d011682016040523d82523d6000602084013e6130af565b606091505b509150915081156130ed5760006130d3602083510383616e4590919063ffffffff16565b9050858111156130eb57838752602087018290529450845b505b505060010161300e565b50505b93509350939050565b60408401516060906001600160e01b03191661318557604080516060810190915261317e90806131378689608084016198f8565b6040516020818303038152906040528152602001868860405160200161315e9291906198f8565b6040516020818303038152906040528152602001616e5181525083615f03565b9050610ffe565b8151806001600160401b038111801561319d57600080fd5b506040519080825280602002602001820160405280156131c7578160200160208202803683370190505b50915060005b81811015611645576000606088600001516001600160a01b0316621e84808a604001518a8a8a88815181106131fe57fe5b6020026020010151604051602401613218939291906198da565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516132569190619333565b6000604051808303818686fa925050503d8060008114613292576040519150601f19603f3d011682016040523d82523d6000602084013e613297565b606091505b5091509150600082156132bb57818060200190518101906132b89190618a7f565b90505b808685815181106132c857fe5b6020026020010181815250508584815181106132e057fe5b6020026020010151600014156132f857505050611645565b5050506001016131cd565b80516060908590806001600160401b038111801561332057600080fd5b5060405190808252806020026020018201604052801561334a578160200160208202803683370190505b50604051630bcded8960e21b81529093506001600160a01b03831690632f37b6249061337a90899060040161934f565b60206040518083038186803b15801561339257600080fd5b505afa1580156133a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133ca9190618a0c565b158061344f5750604051630bcded8960e21b81526001600160a01b03831690632f37b624906133fd90889060040161934f565b60206040518083038186803b15801561341557600080fd5b505afa158015613429573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061344d9190618a0c565b155b1561345b575050610ffe565b613463617a60565b60405163f8b2cb4f60e01b81526001600160a01b0384169063f8b2cb4f9061348f908a9060040161934f565b60206040518083038186803b1580156134a757600080fd5b505afa1580156134bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134df9190618a7f565b815260405163f8b2cb4f60e01b81526001600160a01b0384169063f8b2cb4f9061350d90899060040161934f565b60206040518083038186803b15801561352557600080fd5b505afa158015613539573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061355d9190618a7f565b6020820152604051634a46c67360e11b81526001600160a01b0384169063948d8ce69061358e908a9060040161934f565b60206040518083038186803b1580156135a657600080fd5b505afa1580156135ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135de9190618a7f565b60408083019190915251634a46c67360e11b81526001600160a01b0384169063948d8ce69061361190899060040161934f565b60206040518083038186803b15801561362957600080fd5b505afa15801561363d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136619190618a7f565b816060018181525050826001600160a01b031663d4cadf686040518163ffffffff1660e01b815260040160206040518083038186803b1580156136a357600080fd5b505afa1580156136b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136db9190618a7f565b608082015260005b82811015610da55781516136ff906706f05b59d3b20000616832565b86828151811061370b57fe5b6020026020010151111561371e57610da5565b836001600160a01b031663ba9530a6620493e084600001518560400151866020015187606001518c888151811061375157fe5b602002602001015189608001516040518863ffffffff1660e01b815260040161377f96959493929190619b22565b60206040518083038187803b15801561379757600080fd5b5086fa935050505080156137c8575060408051601f3d908101601f191682019092526137c591810190618a7f565b60015b6137f6573d808015612328576040519150601f19603f3d011682016040523d82523d6000602084013e61232d565b8086838151811061380357fe5b60200260200101818152505085828151811061381b57fe5b6020026020010151600014156138315750610da5565b506001016136e3565b6000808351600381111561384a57fe5b1480613862575060018351600381111561386057fe5b145b80613878575060408401516001600160801b0316155b8061388e575060608401516001600160801b0316155b1561389b5750600061397a565b6138a3617ac1565b600080846001600160a01b0316631fb0979588886040518363ffffffff1660e01b81526004016138d4929190619ab5565b60a06040518083038186803b1580156138ec57600080fd5b505afa158015613900573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139249190618f07565b9194509250905060018360200151600481111561393d57fe5b141580613948575080155b8061395b575086516001600160a01b0316155b1561396c576000935050505061397a565b506001600160801b03169150505b9392505050565b600060608061399085876158aa565b61399b878787616ea5565b9250826139a7576109a0565b60405163276fdad960e11b81523090634edfb5b2906139d0908a9087908b908b90600401619a7c565b60006040518083038186803b1580156139e857600080fd5b505afa1580156139fc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613a249190810190618a97565b876080018190525086608001519150613a9b6040518060600160405280878a604051602001613a549291906195f0565b6040516020818303038152906040528152602001888a604051602001613a7b9291906195f0565b604051602081830303815290604052815260200161700c81525085615f03565b90509450945094915050565b600080856001600160a01b031663901754d786866040518363ffffffff1660e01b8152600401613ad892919061937c565b60206040518083038186803b158015613af057600080fd5b505afa158015613b04573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b2891906181ce565b90506001600160a01b038116613b42576000915050610ffe565b60006001600160a01b03861615613bd4576040516370a0823160e01b81526001600160a01b038716906370a0823190613b7f90859060040161934f565b60206040518083038186803b158015613b9757600080fd5b505afa158015613bab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613bcf9190618a7f565b613be0565b816001600160a01b0316315b905083811015613bf557600092505050610ffe565b6040516303c2803f60e31b81526001600160a01b03831690631e1401f890620249f090613c2a908a908a908a90600401619477565b60206040518083038187803b158015613c4257600080fd5b5086fa93505050508015613c73575060408051601f3d908101601f19168201909252613c7091810190618a7f565b60015b613cb3573d808015613ca1576040519150601f19603f3d011682016040523d82523d6000602084013e613ca6565b606091505b5060009350505050610ffe565b9250610ffe915050565b6060613cc983856158aa565b602085015160408051600280825260608281019093528160200160208202803683370190505090508581600081518110613cff57fe5b60200260200101906001600160a01b031690816001600160a01b0316815250508481600181518110613d2d57fe5b6001600160a01b03909216602092830291909101909101528351806001600160401b0381118015613d5d57600080fd5b50604051908082528060200260200182016040528015613d87578160200160208202803683370190505b509350613d92617a39565b613d9a6158e9565b905060005b82811015610bce576060613db98b898481518110610ab057fe5b604051637c26833760e11b81529091506001600160a01b0387169063f84d066e90613def9060019085908a908990600401619820565b600060405180830381600087803b158015613e0957600080fd5b505af1925050508015613e3e57506040513d6000823e601f3d908101601f19168201604052613e3b9190810190618888565b60015b613e6c573d808015610b70576040519150601f19603f3d011682016040523d82523d6000602084013e610b75565b600081600081518110613e7b57fe5b6020026020010151905060008113613e9557505050610bce565b80898581518110613ea257fe5b602002602001018181525050505050600101613d9f565b8051606090806001600160401b0381118015613ed457600080fd5b50604051908082528060200260200182016040528015613efe578160200160208202803683370190505b50915060005b8181101561164557866001600160a01b031663343fbcdd62061a808888888681518110613f2d57fe5b60200260200101516040518563ffffffff1660e01b8152600401613f5393929190619477565b60206040518083038187803b158015613f6b57600080fd5b5086fa93505050508015613f9c575060408051601f3d908101601f19168201909252613f9991810190618a7f565b60015b613fca573d8080156115f1576040519150601f19603f3d011682016040523d82523d6000602084013e6115f6565b80848381518110613fd757fe5b602002602001018181525050838281518110613fef57fe5b6020026020010151600014156140055750611645565b50600101613f04565b600080606061401d85876158aa565b8351806001600160401b038111801561403557600080fd5b5060405190808252806020026020018201604052801561405f578160200160208202803683370190505b50915061406e898989896170f3565b945092506001600160a01b0383166140865750614140565b60005b8181101561413d5760006140f78986886040516020016140ab9392919061941f565b6040516020818303038152906040528987896040516020016140cf9392919061941f565b6040516020818303038152906040528985815181106140ea57fe5b6020026020010151617248565b90508084838151811061410657fe5b60200260200101818152505083828151811061411e57fe5b602002602001015160001415614134575061413d565b50600101614089565b50505b955095509592505050565b606061415783856158aa565b8151806001600160401b038111801561416f57600080fd5b50604051908082528060200260200182016040528015614199578160200160208202803683370190505b50915060005b8181101561164557866001600160a01b031663144a2752620f424087898886815181106141c857fe5b60200260200101516040518563ffffffff1660e01b81526004016141ee93929190619477565b60206040518083038187803b15801561420657600080fd5b5086fa93505050508015614237575060408051601f3d908101601f1916820190925261423491810190618a7f565b60015b614265573d8080156115f1576040519150601f19603f3d011682016040523d82523d6000602084013e6115f6565b8084838151811061427257fe5b60200260200101818152505083828151811061428a57fe5b6020026020010151600014156142a05750611645565b5060010161419f565b600060606142b784866158aa565b8251806001600160401b03811180156142cf57600080fd5b506040519080825280602002602001820160405280156142f9578160200160208202803683370190505b50915060005b8181101561436e57600061432889898989868151811061431b57fe5b6020026020010151613aa7565b90508084838151811061433757fe5b60200260200101818152505083828151811061434f57fe5b602002602001015160001415614365575061436e565b506001016142ff565b5060405163901754d760e01b81526001600160a01b0388169063901754d79061439d908990899060040161937c565b60206040518083038186803b1580156143b557600080fd5b505afa1580156143c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143ed91906181ce565b92505094509492505050565b60408051606081810190925261106c908061441886896080840161937c565b6040516020818303038152906040528152602001868860405160200161443f92919061937c565b604051602081830303815290604052815260200161733a81525083615f03565b606082516001600160401b038111801561447857600080fd5b506040519080825280602002602001820160405280156144a2578160200160208202803683370190505b50905060005b83518114612832577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168482815181106144e657fe5b60200260200101516001600160a01b0316146145305761452b8385838151811061450c57fe5b60200260200101516001600160a01b031661738190919063ffffffff16565b61453c565b826001600160a01b0316315b82828151811061454857fe5b60209081029190910101526001016144a8565b60408051606081810190925261106c908061457a86896080840161937c565b604051602081830303815290604052815260200186886040516020016145a192919061937c565b604051602081830303815290604052815260200161744b81525083615f03565b60606145cd83856158aa565b8151806001600160401b03811180156145e557600080fd5b5060405190808252806020026020018201604052801561460f578160200160208202803683370190505b50915060006001600160a01b038616156146325761462d87876159ac565b614635565b60005b905060006001600160a01b038616156146575761465288876159ac565b61465a565b60005b905060005b83811015610da55760016001600160a01b0388166146b05761468f846395b68fe760e01b898581518110610ca957fe5b87848151811061469b57fe5b6020026020010181935082815250505061474a565b6001600160a01b0389166146d65761468f8363cd7724c360e01b898581518110610ca957fe5b60006146f0856395b68fe760e01b8a8681518110610ca957fe5b92509050801561472d5761470c8463cd7724c360e01b83615a2b565b88858151811061471857fe5b60200260200101819450828152505050614748565b600087848151811061473b57fe5b6020026020010181815250505b505b80158061476a575085828151811061475e57fe5b60200260200101516000145b156147755750610da5565b5060010161465f565b8051606090806001600160401b038111801561479957600080fd5b506040519080825280602002602001820160405280156147c3578160200160208202803683370190505b50915060005b818110156117ca57856001600160a01b0316631f00ca74620249f08684815181106147f057fe5b6020026020010151886040518463ffffffff1660e01b8152600401614816929190619b09565b60006040518083038187803b15801561482e57600080fd5b5086fa9350505050801561486457506040513d6000823e601f3d908101601f1916820160405261486191908101906189da565b60015b614892573d808015611763576040519150601f19603f3d011682016040523d82523d6000602084013e611768565b8060008151811061489f57fe5b60200260200101518483815181106148b357fe5b6020026020010181815250508382815181106148cb57fe5b6020026020010151600014156148e157506117ca565b506001016147c9565b60606148f683856158aa565b8151806001600160401b038111801561490e57600080fd5b50604051908082528060200260200182016040528015614938578160200160208202803683370190505b50915060005b8181101561164557866001600160a01b031663ff1fd974620f4240888888868151811061496757fe5b60200260200101516040518563ffffffff1660e01b815260040161498d93929190619477565b60206040518083038187803b1580156149a557600080fd5b5086fa935050505080156149d6575060408051601f3d908101601f191682019092526149d391810190618a7f565b60015b614a04573d8080156115f1576040519150601f19603f3d011682016040523d82523d6000602084013e6115f6565b80848381518110614a1157fe5b602002602001018181525050838281518110614a2957fe5b602002602001015160001415614a3f5750611645565b5060010161493e565b6000606080614a5785876158aa565b614a62878787616ea5565b925082614a6e576109a0565b60405163276fdad960e11b81523090634edfb5b290614a97908a9087908b908b90600401619a7c565b60006040518083038186803b158015614aaf57600080fd5b505afa158015614ac3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052614aeb9190810190618a97565b608088018190528451909250806001600160401b0381118015614b0d57600080fd5b50604051908082528060200260200182016040528015614b37578160200160208202803683370190505b50915060005b81811015614c22576000306001600160a01b031663f1ed7fa48b8b8b8b8781518110614b6557fe5b60200260200101516040518563ffffffff1660e01b8152600401614b8c9493929190619a46565b60206040518083038186803b158015614ba457600080fd5b505afa158015614bb8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614bdc9190618a7f565b905080848381518110614beb57fe5b602002602001018181525050838281518110614c0357fe5b602002602001015160001415614c195750614c22565b50600101614b3d565b50509450945094915050565b6000806060614c3d85876158aa565b614c49888888886170f3565b935091506001600160a01b038216614c6057614140565b8351806001600160401b0381118015614c7857600080fd5b50604051908082528060200260200182016040528015614ca2578160200160208202803683370190505b506040805160608101909152909250614d0f9080614cc6898789156080850161941f565b6040516020818303038152906040528152602001898688604051602001614cef9392919061941f565b604051602081830303815290604052815260200161724881525086615f03565b915050955095509592505050565b6000806060614d2c85876158aa565b8351806001600160401b0381118015614d4457600080fd5b50604051908082528060200260200182016040528015614d6e578160200160208202803683370190505b508851604051630939d86360e11b81529193506001600160a01b031690631273b0c690614da1908a908a9060040161937c565b60206040518083038186803b158015614db957600080fd5b505afa158015614dcd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614df191906181ce565b925060006001600160a01b03841615614e0f57506001935086614eae565b8851604051630939d86360e11b81526001600160a01b0390911690631273b0c690614e40908a908c9060040161937c565b60206040518083038186803b158015614e5857600080fd5b505afa158015614e6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614e9091906181ce565b93506001600160a01b038416614ea75750506109a0565b5060009350855b836001600160a01b031663dd58b41c6040518163ffffffff1660e01b815260040160206040518083038186803b158015614ee757600080fd5b505afa158015614efb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614f1f9190618a0c565b614f2a5750506109a0565b614fa260405180606001604052808987858e60200151604051602001614f539493929190619396565b60405160208183030381529060405281526020018a87858e60200151604051602001614f829493929190619396565b604051602081830303815290604052815260200161610081525087615f03565b925050509450945094915050565b606083516001600160401b0381118015614fc957600080fd5b50604051908082528060200260200182016040528015614ff3578160200160208202803683370190505b50905060005b84518114610842577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031685828151811061503757fe5b60200260200101516001600160a01b0316146150835761507e848487848151811061505e57fe5b60200260200101516001600160a01b03166175009092919063ffffffff16565b615086565b60005b82828151811061509257fe5b6020908102919091010152600101614ff9565b8051606090806001600160401b03811180156150c057600080fd5b506040519080825280602002602001820160405280156150ea578160200160208202803683370190505b50915060005b8181101561164557866001600160a01b031663838e6a22620493e0888888868151811061511957fe5b60200260200101516040518563ffffffff1660e01b815260040161513f93929190619477565b60206040518083038187803b15801561515757600080fd5b5086fa93505050508015615188575060408051601f3d908101601f1916820190925261518591810190618a7f565b60015b6151b6573d8080156115f1576040519150601f19603f3d011682016040523d82523d6000602084013e6115f6565b808483815181106151c357fe5b602002602001018181525050506001016150f0565b6000846080015151600014156151f057506000610ffe565b84604001516001600160a01b031663418436bc6207a12087606001516001600160a01b0316876001600160a01b03161461522a5786615240565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee5b88606001516001600160a01b0316876001600160a01b0316146152635786615279565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee5b8660008b608001516040518763ffffffff1660e01b81526004016152a195949392919061949b565b60206040518083038187803b1580156152b957600080fd5b5086fa935050505080156152ea575060408051601f3d908101601f191682019092526152e791810190618a7f565b60015b615328573d808015615318576040519150601f19603f3d011682016040523d82523d6000602084013e61531d565b606091505b506000915050610ffe565b6000615333856175cc565b60ff1690506000615343876175cc565b60ff169050670de0b6b3a764000081600a0a83600a0a878602028161536457fe5b048161536c57fe5b049350505050610ffe565b6000606061538584866158aa565b8251806001600160401b038111801561539d57600080fd5b506040519080825280602002602001820160405280156153c7578160200160208202803683370190505b509150615432604051806060016040528089886040516020016153eb92919061937c565b6040516020818303038152906040528152602001898960405160200161541292919061937c565b60405160208183030381529060405281526020016175d781525085615f03565b60405163901754d760e01b81529092506001600160a01b0388169063901754d79061439d908990899060040161937c565b61546b617aa7565b615473617aa7565b6000198060005b8651811461556f576154aa602088838151811061549357fe5b6020026020010151510387898481518110612f2f57fe5b60006060306001600160a01b03168984815181106154c457fe5b60200260200101516040516154d99190619333565b6000604051808303816000865af19150503d8060008114615516576040519150601f19603f3d011682016040523d82523d6000602084013e61551b565b606091505b5091509150811561556557600061553f602083510383616e4590919063ffffffff16565b905060008111801561555057508481105b1561556357838752602087018290529350835b505b505060010161547a565b5060001981141561558057506130fa565b60005b875181146130f7576155b3602089838151811061559c57fe5b60200260200101515103838a8481518110612f2f57fe5b60006060306001600160a01b03168a84815181106155cd57fe5b60200260200101516040516155e29190619333565b6000604051808303816000865af19150503d806000811461561f576040519150601f19603f3d011682016040523d82523d6000602084013e615624565b606091505b5091509150811561566e576000615648602083510383616e4590919063ffffffff16565b905060008111801561565957508581105b1561566c57838852602088018290529450845b505b5050600101615583565b6000606085600001516001600160a01b03166321f8a72187600001516001600160a01b0316639232494e6040518163ffffffff1660e01b815260040160206040518083038186803b1580156156cc57600080fd5b505afa1580156156e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906157049190618a7f565b6040518263ffffffff1660e01b8152600401615720919061975d565b60206040518083038186803b15801561573857600080fd5b505afa15801561574c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061577091906181ce565b915085602001515160001415615785576158a1565b6000805b87602001515181101561589e576002886020015182815181106157a857fe5b60200260200101515110156157bc57615896565b836001600160a01b0316637f9c0ecd620493e08a6020015184815181106157df57fe5b60200260200101518860018a5103815181106157f757fe5b60200260200101516040518463ffffffff1660e01b815260040161581c929190619614565b60206040518083038187803b15801561583457600080fd5b5086fa93505050508015615865575060408051601f3d908101601f1916820190925261586291810190618a7f565b60015b61586e57615896565b82811115615894578092508860200151828151811061588957fe5b602002602001015193505b505b600101615789565b50505b94509492505050565b806001600160a01b0316826001600160a01b031614156158e55760405162461bcd60e51b81526004016158dc90619954565b60405180910390fd5b5050565b6158f1617a39565b50604080516080810182523080825260006020830181905292820152606081019190915290565b604080516001808252818301909252606091829190816020015b61593a617ae3565b8152602001906001900390816159325790505090506040518060a00160405280856000015181526020016000815260200160018152602001848152602001604051806020016040528060008152508152508160008151811061599857fe5b602090810291909101015290505b92915050565b6040516303795fb160e11b81526000906001600160a01b038416906306f2bf62906159db90859060040161934f565b60206040518083038186803b1580156159f357600080fd5b505afa158015615a07573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061397a91906181ce565b6000806001600160a01b038516615a4157615b07565b6060856001600160a01b0316620249f08686604051602401615a63919061975d565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051615aa19190619333565b6000604051808303818686fa925050503d8060008114615add576040519150601f19603f3d011682016040523d82523d6000602084013e615ae2565b606091505b5090925090508115615b055780806020019051810190615b029190618a7f565b92505b505b935093915050565b600080600080846001600160a01b031663d9638d368b602001516040518263ffffffff1660e01b8152600401615b45919061975d565b60a06040518083038186803b158015615b5d57600080fd5b505afa158015615b71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190615b959190618ffe565b94509450505092506000620f424090508a604001516001600160a01b0316896001600160a01b03161415615cbd576000615bd48964e8d4a51000617627565b90506000615bf86b033b2e3c9fd0803ce8000000615bf2888561765d565b90617627565b9050848110615c105760009650505050505050615dc6565b6000615c9f670de0b6b3a7640000615c998c6001600160a01b031663568d4b6f6040518163ffffffff1660e01b815260040160206040518083038186803b158015615c5a57600080fd5b505afa158015615c6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190615c929190618a7f565b8690617627565b90617679565b90506000615cad84836176a3565b9850615dc6975050505050505050565b8a604001516001600160a01b03168a6001600160a01b03161415615dbd578784811115615cf257600095505050505050615dc6565b6000615d0e6b033b2e3c9fd0803ce8000000615bf288856176a3565b9050838111615d265760009650505050505050615dc6565b6000615dab8a6001600160a01b031663fae036d56040518163ffffffff1660e01b815260040160206040518083038186803b158015615d6457600080fd5b505afa158015615d78573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190615d9c9190618a7f565b670de0b6b3a76400009061765d565b90506000615cad82615c998688617627565b60009450505050505b9695505050505050565b600080615ddb617b15565b85806020019051810190615def9190618b2b565b91509150600085806020019051810190615e099190618b0f565b905060006060306322db5ed160e21b858786615e248c6176c2565b604051602401615e3794939291906199de565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051615e759190619333565b600060405180830381855afa9150503d8060008114615eb0576040519150601f19603f3d011682016040523d82523d6000602084013e615eb5565b606091505b509150915081615ecd5760009550505050505061397a565b80806020019051810190615ee191906189da565b600081518110615eed57fe5b6020026020010151955050505050509392505050565b606081516001600160401b0381118015615f1c57600080fd5b50604051908082528060200260200182016040528015615f46578160200160208202803683370190505b509050815160001415615f58576159a6565b6000615f898460000151856020015185600081518110615f7457fe5b6020026020010151876040015163ffffffff16565b905080615f9657506159a6565b6000615fb38560200151866000015184886040015163ffffffff16565b905080615fc15750506159a6565b60005b84518110156160f75760005b60058110156160b957615ff7868381518110615fe857fe5b60200260200101518486617703565b935083616003576160b9565b61601261271561271086617703565b93508361601e576160b9565b600061603b88602001518960000151878b6040015163ffffffff16565b90508061604857506160b9565b80935086838151811061605757fe5b602002602001015184106160b057600087848151811061607357fe5b602002602001015161271089868151811061608a57fe5b60200260200101518703028161609c57fe5b049050600581116160ae5750506160b9565b505b50600101615fd0565b506160d88582815181106160c957fe5b60200260200101518385617703565b8482815181106160e457fe5b6020908102919091010152600101615fc4565b50505092915050565b60008060008060008780602001905181019061611c9190618223565b9350935093509350816001600160a01b0316846001600160a01b03161415616206576040516351400f0b60e11b81526001600160a01b0384169063a2801e1690620493e09061616f908a9060040161975d565b60206040518083038187803b15801561618757600080fd5b5086fa935050505080156161b8575060408051601f3d908101601f191682019092526161b591810190618a7f565b60015b6161fa573d8080156161e6576040519150601f19603f3d011682016040523d82523d6000602084013e6161eb565b606091505b5060009550505050505061397a565b945061397a9350505050565b60405163ca19ebd960e01b81526001600160a01b0382169063ca19ebd990620493e09061616f9087908b90600401619363565b6060600282845103101561625f5760405162461bcd60e51b81526004016158dc90619910565b616267617b35565b5060408051606080820183526101f48252610bb8602083015261271082840152825160038082526080820190945291929091908160200160208202803683370190505090506000808686815181106162bb57fe5b6020026020010151905060008787600101815181106162d657fe5b6020026020010151905060005b60038110156163cb5760008a6001600160a01b0316631698ee8285858a866003811061630b57fe5b60200201516040518463ffffffff1660e01b815260040161632e939291906197a5565b60206040518083038186803b15801561634657600080fd5b505afa15801561635a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061637e91906181ce565b90506163898161775b565b156163c257808686806001019750815181106163a157fe5b60200260200101906001600160a01b031690816001600160a01b0316815250505b506001016162e3565b505050806163db5750505061397a565b85518560020114156164d157806001600160401b03811180156163fd57600080fd5b5060405190808252806020026020018201604052801561643157816020015b606081526020019060019003908161641c5790505b50935060005b818110156164c85760408051600180825281830190925290602080830190803683370190505085828151811061646957fe5b602002602001018190525082818151811061648057fe5b602002602001015185828151811061649457fe5b60200260200101516000815181106164a857fe5b6001600160a01b0390921660209283029190910190910152600101616437565b5050505061397a565b60606164e1888888600101616239565b90508051600014156164f6575050505061397a565b805182026001600160401b038111801561650f57600080fd5b5060405190808252806020026020018201604052801561654357816020015b606081526020019060019003908161652e5790505b50945060005b828110156166c35760005b82518110156166ba57825182810282019084908390811061657157fe5b6020026020010151516001016001600160401b038111801561659257600080fd5b506040519080825280602002602001820160405280156165bc578160200160208202803683370190505b508882815181106165c957fe5b60200260200101819052508583815181106165e057fe5b60200260200101518882815181106165f457fe5b602002602001015160008151811061660857fe5b60200260200101906001600160a01b031690816001600160a01b03168152505060005b84838151811061663757fe5b6020026020010151518110156166b05784838151811061665357fe5b6020026020010151818151811061666657fe5b602002602001015189838151811061667a57fe5b6020026020010151826001018151811061669057fe5b6001600160a01b039092166020928302919091019091015260010161662b565b5050600101616554565b50600101616549565b50505050509392505050565b606060028351101580156166e7575081516001018351145b6167035760405162461bcd60e51b81526004016158dc90619999565b81516003028351601402016001600160401b038111801561672357600080fd5b506040519080825280601f01601f19166020018201604052801561674e576020820181803683370190505b5090506020810160005b845181101561682a5780156167fd57600084600183038151811061677857fe5b60200260200101516001600160a01b031663ddca3f436040518163ffffffff1660e01b815260040160206040518083038186803b1580156167b857600080fd5b505afa1580156167cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906167f09190618f83565b60e81b8352506003909101905b600085828151811061680b57fe5b602090810291909101015160601b835250601490910190600101616758565b505092915050565b6000828202831580159061684f57508284828161684b57fe5b0414155b1561685e5760009150506159a6565b6706f05b59d3b2000081018181101561687c576000925050506159a6565b670de0b6b3a76400009004949350505050565b606081516001600160401b03811180156168a857600080fd5b506040519080825280602002602001820160405280156168d2578160200160208202803683370190505b50905060005b8251811015612925578260018285510303815181106168f357fe5b602002602001015182828151811061690757fe5b6001600160a01b03909216602092830291909101909101526001016168d8565b606081516001600160401b038111801561694057600080fd5b5060405190808252806020026020018201604052801561696a578160200160208202803683370190505b50905060005b82518110156129255782600182855103038151811061698b57fe5b602002602001015182828151811061699f57fe5b6001600160a01b0390921660209283029190910190910152600101616970565b6000806000858060200190518101906169d891906181ea565b915091506000858060200190518101906169f291906181ce565b90503063e8e4af09838584616a068a6176c2565b6040518563ffffffff1660e01b8152600401616a2594939291906193c1565b60006040518083038186803b158015616a3d57600080fd5b505afa925050508015616a7257506040513d6000823e601f3d908101601f19168201604052616a6f91908101906189da565b60015b616ab3573d808015616aa0576040519150601f19603f3d011682016040523d82523d6000602084013e616aa5565b606091505b50600094505050505061397a565b80600081518110616ac057fe5b602002602001015194505050505061397a565b6000610ffe83615c99616ae78260016176a3565b616af18887617627565b9061765d565b60006012905060006060836001600160a01b031660405180604001604052806004815260200163313ce56760e01b815250604051616b359190619333565b600060405180830381855afa9150503d8060008114616b70576040519150601f19603f3d011682016040523d82523d6000602084013e616b75565b606091505b5091509150818015616b8957506020815110155b15616b9c57616b99816000616e45565b92505b5050919050565b600080600080846001600160a01b031663d9638d368b602001516040518263ffffffff1660e01b8152600401616bd9919061975d565b60a06040518083038186803b158015616bf157600080fd5b505afa158015616c05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190616c299190618ffe565b945094505050925089604001516001600160a01b0316886001600160a01b03161415616d405760008790506000616cd9886001600160a01b031663568d4b6f6040518163ffffffff1660e01b815260040160206040518083038186803b158015616c9257600080fd5b505afa158015616ca6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190616cca9190618a7f565b670de0b6b3a7640000906176a3565b90506000616cf382615c9985670de0b6b3a7640000617627565b90506000616d116b033b2e3c9fd0803ce8000000615bf2898561765d565b9050858110616d2a576000975050505050505050615dc6565b6000615cad6001616af18564e8d4a51000617679565b89604001516001600160a01b0316896001600160a01b03161415616e25576000616d6f8864e8d4a51000617627565b90506000616daf886001600160a01b031663fae036d56040518163ffffffff1660e01b815260040160206040518083038186803b158015615d6457600080fd5b90506000616dc9670de0b6b3a7640000615c998585617627565b905085811115616de25760009650505050505050615dc6565b6000616dfe6b033b2e3c9fd0803ce8000000615bf289856176a3565b9050848111616e17576000975050505050505050615dc6565b509550615dc6945050505050565b5060009998505050505050505050565b616e40838383617967565b505050565b600061397a838361798e565b600080616e5c617b15565b85806020019051810190616e709190618b2b565b91509150600085806020019051810190616e8a9190618b0f565b9050600060603063205e01d760e11b858786615e248c6176c2565b600080846020015190506060816001600160a01b031663910ffc7187606001516001600160a01b0316876001600160a01b031614616ee35786616ef9565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee5b88606001516001600160a01b0316876001600160a01b031614616f1c5786616f32565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee5b604080516000815260208101918290526001600160e01b031960e086901b16909152616f6692919060019060248101619443565b60006040518083038186803b158015616f7e57600080fd5b505afa158015616f92573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052616fba919081019061861b565b505090508051866000015110616fd657506000915061397a9050565b80866000015181518110616fe657fe5b6020026020010151925060f883901c60001c60bb14156117ca57506000915061397a9050565b600080617017617b53565b8480602001905181019061702b91906182d1565b9150915060008680602001905181019061704591906182d1565b50604051633c7b5fe960e21b8152909150309063f1ed7fa490617072908590859088908b90600401619a46565b60206040518083038186803b15801561708a57600080fd5b505afa9250505080156170ba575060408051601f3d908101601f191682019092526170b791810190618a7f565b60015b6170e8573d808015616aa0576040519150601f19603f3d011682016040523d82523d6000602084013e616aa5565b935061397a92505050565b6000806060866001600160a01b03166357a281dc86866040518363ffffffff1660e01b815260040161712692919061937c565b60006040518083038186803b15801561713e57600080fd5b505afa158015617152573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261717a9190810190618583565b905060019150805160001415617213576040516315e8a07760e21b81526001600160a01b038816906357a281dc906171b8908790899060040161937c565b60006040518083038186803b1580156171d057600080fd5b505afa1580156171e4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261720c9190810190618583565b9050600091505b805186106172285760008092509250506158a1565b80868151811061723457fe5b602002602001015192505094509492505050565b600080600080868060200190518101906172629190618281565b925092509250801561730657604051633cd0243b60e11b81526001600160a01b038316906379a0487690620493e0906172a2906000908a90600401619363565b604080518083038187803b1580156172b957600080fd5b5086fa935050505080156172ea575060408051601f3d908101601f191682019092526172e791810190618fa6565b60015b6172fa576000935050505061397a565b50935061397a92505050565b6040516366410a2160e01b81526001600160a01b038316906366410a2190620493e0906172a2906000908a90600401619363565b60008060008580602001905181019061735391906181ea565b9150915060008580602001905181019061736d91906181ce565b9050306330d6570d838584616a068a6176c2565b6000806060846001600160a01b03166370a0823160e01b856040516024016173a9919061934f565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516173e79190619333565b600060405180830381855afa9150503d8060008114617422576040519150601f19603f3d011682016040523d82523d6000602084013e617427565b606091505b509150915081801561743b57506020815110155b1561682a5761106c816000616e45565b60008060008580602001905181019061746491906181ea565b9150915060008580602001905181019061747e91906181ce565b90503063a469841762061a808486856174968b6176c2565b6040518663ffffffff1660e01b81526004016174b594939291906193c1565b60006040518083038187803b1580156174cd57600080fd5b5086fa93505050508015616a7257506040513d6000823e601f3d908101601f19168201604052616a6f91908101906189da565b6000806060856001600160a01b031663dd62ed3e60e01b868660405160240161752a92919061937c565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516175689190619333565b600060405180830381855afa9150503d80600081146175a3576040519150601f19603f3d011682016040523d82523d6000602084013e6175a8565b606091505b50915091508180156175bc57506020815110155b156117ca57615dc6816000616e45565b60006159a682616af7565b6000806000858060200190518101906175f091906181ea565b915091506000808680602001905181019061760b91906181ea565b9150915061761b84848389613aa7565b98975050505050505050565b600082617636575060006159a6565b8282028284828161764357fe5b041461397a5761397a617658600186866179b8565b617a12565b60008282018381101561397a5761397a617658600086866179b8565b60008161768f5761768f617658600385856179b8565b600082848161769a57fe5b04949350505050565b6000828211156176bc576176bc617658600285856179b8565b50900390565b6040805160018082528183019092526060916020808301908036833701905050905081816000815181106176f257fe5b602002602001018181525050919050565b6000831580617710575081155b80617719575082155b156177265750600061397a565b8382028285828161773357fe5b041461774357600091505061397a565b836001850382018161775157fe5b0495945050505050565b6000813b8061776e5760009150506109af565b50816001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b1580156177a857600080fd5b505afa1580156177bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906177e091906181ce565b6001600160a01b03166370a08231836040518263ffffffff1660e01b815260040161780b919061934f565b60206040518083038186803b15801561782357600080fd5b505afa158015617837573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061785b9190618a7f565b617867575060006109af565b816001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b1580156178a057600080fd5b505afa1580156178b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906178d891906181ce565b6001600160a01b03166370a08231836040518263ffffffff1660e01b8152600401617903919061934f565b60206040518083038186803b15801561791b57600080fd5b505afa15801561792f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906179539190618a7f565b61795f575060006109af565b506001919050565b8160200183511015617986576179866176586005855185602001617a1a565b910160200152565b600081602001835110156179af576179af6176586005855185602001617a1a565b50016020015190565b606063e946c1bb60e01b8484846040516024016179d7939291906197f1565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915290509392505050565b805160208201fd5b6060632800659560e01b8484846040516024016179d793929190619812565b60408051608081018252600080825260208201819052918101829052606081019190915290565b6040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b60408051808201909152606081526000602082015290565b604051806040016040528060008152602001606081525090565b6040805160608101909152600080825260208201908152600060209091015290565b6040518060a0016040528060008019168152602001600081526020016000815260200160008152602001606081525090565b604080516060810182526000808252602082018190529181019190915290565b60405180606001604052806003906020820280368337509192915050565b6040518060a001604052806000815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b03168152602001606081525090565b80356159a681619c44565b80516159a681619c44565b600082601f830112617bc3578081fd5b8135617bd6617bd182619bbb565b619b95565b818152915060208083019084810181840286018201871015617bf757600080fd5b60005b84811015617c1f578135617c0d81619c44565b84529282019290820190600101617bfa565b505050505092915050565b600082601f830112617c3a578081fd5b8135617c48617bd182619bbb565b818152915060208083019084810160005b84811015617c1f57617c70888484358a0101617bb3565b84529282019290820190600101617c59565b600082601f830112617c92578081fd5b8135617ca0617bd182619bbb565b818152915060208083019084810160005b84811015617c1f57617cc8888484358a0101617e71565b84529282019290820190600101617cb1565b600082601f830112617cea578081fd5b8135617cf8617bd182619bbb565b818152915060208083019084810181840286018201871015617d1957600080fd5b60005b84811015617c1f578135617d2f81619c44565b84529282019290820190600101617d1c565b600082601f830112617d51578081fd5b8135617d5f617bd182619bbb565b8181529150602080830190848101608080850287018301881015617d8257600080fd5b60005b85811015617da957617d97898461812d565b85529383019391810191600101617d85565b50505050505092915050565b600082601f830112617dc5578081fd5b8135617dd3617bd182619bbb565b818152915060208083019084810181840286018201871015617df457600080fd5b60005b84811015617c1f57813584529282019290820190600101617df7565b600082601f830112617e23578081fd5b8151617e31617bd182619bbb565b818152915060208083019084810181840286018201871015617e5257600080fd5b60005b84811015617c1f57815184529282019290820190600101617e55565b600082601f830112617e81578081fd5b8135617e8f617bd182619bda565b9150808252836020828501011115617ea657600080fd5b8060208401602084013760009082016020015292915050565b600082601f830112617ecf578081fd5b8151617edd617bd182619bda565b9150808252836020828501011115617ef457600080fd5b612832816020840160208601619bfd565b8051600281106159a657600080fd5b600060608284031215617f25578081fd5b617f2f6060619b95565b90508135617f3c81619c44565b81526020820135617f4c81619c67565b60208201526040820135617f5f81619c67565b604082015292915050565b600060608284031215617f7b578081fd5b617f856060619b95565b90508151617f9281619c44565b81526020820151617fa281619c67565b60208201526040820151617f5f81619c67565b600060a08284031215617fc6578081fd5b617fd060a0619b95565b9050813581526020820135617fe481619c44565b60208201526040820135617ff781619c44565b6040820152606082013561800a81619c44565b606082015260808201356001600160401b0381111561802857600080fd5b61803484828501617e71565b60808301525092915050565b6000610180808385031215618053578182fd5b61805c81619b95565b9150506180698383617b9d565b81526180788360208401617b9d565b602082015261808a8360408401618190565b604082015261809c8360608401618190565b60608201526180ae8360808401618190565b60808201526180c08360a08401617b9d565b60a08201526180d28360c08401617b9d565b60c08201526180e48360e08401617b9d565b60e08201526101006180f884828501617b9d565b9082015261012082810135908201526101406181168482850161819b565b818301525061016080830135818301525092915050565b60006080828403121561813e578081fd5b6181486080619b95565b905081356004811061815957600080fd5b8152602082013560ff8116811461816f57600080fd5b80602083015250604082013560408201526060820135606082015292915050565b80356159a681619c8c565b80356001600160401b03811681146159a657600080fd5b6000602082840312156181c3578081fd5b813561397a81619c44565b6000602082840312156181df578081fd5b815161397a81619c44565b600080604083850312156181fc578081fd5b825161820781619c44565b602084015190925061821881619c44565b809150509250929050565b60008060008060808587031215618238578182fd5b845161824381619c44565b602086015190945061825481619c44565b604086015190935061826581619c44565b606086015190925061827681619c44565b939692955090935050565b600080600060608486031215618295578081fd5b83516182a081619c44565b60208501519093506182b181619c44565b604085015190925080151581146182c6578182fd5b809150509250925092565b600080604083850312156182e3578182fd5b82516182ee81619c44565b60208401519092506001600160401b038082111561830a578283fd5b9084019060a0828703121561831d578283fd5b61832760a0619b95565b825181526183388760208501617ba8565b602082015261834a8760408501617ba8565b604082015261835c8760608501617ba8565b6060820152608083015182811115618372578485fd5b61837e88828601617ebf565b6080830152508093505050509250929050565b600080600080600060a086880312156183a8578283fd5b85356183b381619c44565b945060208601356183c381619c44565b935060408601356183d381619c44565b925060608601356183e381619c44565b915060808601356001600160401b038111156183fd578182fd5b61840988828901617db5565b9150509295509295909350565b6000806000806080858703121561842b578182fd5b843561843681619c44565b9350602085013561844681619c44565b9250604085013561845681619c44565b915060608501356001600160401b03811115618470578182fd5b61847c87828801617db5565b91505092959194509250565b6000806000806080858703121561849d578182fd5b84356184a881619c44565b935060208501356184b881619c44565b925060408501356184c881619c44565b9396929550929360600135925050565b6000806000606084860312156184ec578081fd5b83356184f781619c44565b925060208401356001600160401b0380821115618512578283fd5b61851e87838801617bb3565b93506040860135915080821115618533578283fd5b5061854086828701617db5565b9150509250925092565b600080600080600060a08688031215618561578283fd5b853561856c81619c44565b94506020860135935060408601356183d381619c44565b60006020808385031215618595578182fd5b82516001600160401b038111156185aa578283fd5b8301601f810185136185ba578283fd5b80516185c8617bd182619bbb565b81815283810190838501858402850186018910156185e4578687fd5b8694505b8385101561860f5780516185fb81619c44565b8352600194909401939185019185016185e8565b50979650505050505050565b60008060006060848603121561862f578081fd5b83516001600160401b0380821115618645578283fd5b818601915086601f830112618658578283fd5b8151618666617bd182619bbb565b80828252602080830192508086018b828387028901011115618686578788fd5b8796505b848710156186a857805184526001969096019592810192810161868a565b5089015190975093505050808211156186bf578283fd5b506186cc86828701617e13565b9250506186dc8560408601617f05565b90509250925092565b600080602083850312156186f7578182fd5b82356001600160401b038082111561870d578384fd5b818501915085601f830112618720578384fd5b81358181111561872e578485fd5b8660208083028501011115618741578485fd5b60209290920196919550909350505050565b600080600060608486031215618767578081fd5b83356001600160401b038082111561877d578283fd5b61878987838801617c82565b9450602086013591508082111561879e578283fd5b506187ab86828701617c82565b925050604084013590509250925092565b6000602082840312156187cd578081fd5b81356001600160401b038111156187e2578182fd5b610ffe84828501617cda565b60008060408385031215618800578182fd5b82356001600160401b03811115618815578283fd5b61882185828601617cda565b925050602083013561821881619c44565b600080600060608486031215618846578081fd5b83356001600160401b0381111561885b578182fd5b61886786828701617cda565b935050602084013561887881619c44565b915060408401356182c681619c44565b6000602080838503121561889a578182fd5b82516001600160401b038111156188af578283fd5b8301601f810185136188bf578283fd5b80516188cd617bd182619bbb565b81815283810190838501858402850186018910156188e9578687fd5b8694505b8385101561860f5780518352600194909401939185019185016188ed565b60008060006060848603121561891f578081fd5b83356001600160401b0380821115618935578283fd5b818601915086601f830112618948578283fd5b8135618956617bd182619bbb565b80828252602080830192508086016101808c838288028a01011115618979578889fd5b8897505b858810156189a55761898f8d83618040565b855260019790970196938201939081019061897d565b509198508901359450505050808211156189bd578283fd5b506189ca86828701617d41565b9250506186dc8560408601617b9d565b6000602082840312156189eb578081fd5b81516001600160401b03811115618a00578182fd5b610ffe84828501617e13565b600060208284031215618a1d578081fd5b815161397a81619c59565b600080600060608486031215618a3c578081fd5b8351618a4781619c59565b60208501519093506001600160401b03811115618a62578182fd5b618a6e86828701617ebf565b925050604084015190509250925092565b600060208284031215618a90578081fd5b5051919050565b600060208284031215618aa8578081fd5b81516001600160401b03811115618abd578182fd5b610ffe84828501617ebf565b600080600060608486031215618add578081fd5b8335618ae881619c44565b925060208401356001600160401b0380821115618b03578283fd5b61851e87838801617cda565b600060208284031215618b20578081fd5b815161397a81619c7d565b60008060808385031215618b3d578182fd5b8251618b4881619c7d565b9150618b578460208501617f6a565b90509250929050565b60008060008084860360a0811215618b76578283fd5b6040811215618b83578283fd5b50618b8e6040619b95565b853581526020860135618ba081619c44565b602082015293506040850135618bb581619c44565b92506060850135618bc581619c44565b915060808501356001600160401b03811115618470578182fd5b60008060008060808587031215618bf4578182fd5b84356001600160401b0380821115618c0a578384fd5b9086019060408289031215618c1d578384fd5b618c276040619b95565b618c318984617b9d565b8152602083013582811115618c44578586fd5b618c508a828601617c2a565b60208301525080965050618c678860208901617b9d565b9450618c768860408901617b9d565b93506060870135915080821115618c8b578283fd5b5061847c87828801617db5565b60008060008060c08587031215618cad578182fd5b618cb78686617f14565b93506060850135618cc781619c7d565b92506080850135618cd781619c7d565b915060a08501356001600160401b03811115618470578182fd5b60008060008084860360a0811215618d07578283fd5b6040811215618d14578283fd5b50618d1f6040619b95565b8535618d2a81619c44565b81526020860135618ba081619c44565b60008060008060808587031215618d4f578182fd5b84356001600160401b0380821115618d65578384fd5b618d7188838901617fb5565b955060208701359150618d8382619c44565b909350604086013590618d9582619c44565b90925060608601359080821115618c8b578283fd5b60008060008060808587031215618dbf578182fd5b84356001600160401b03811115618dd4578283fd5b618de087828801617fb5565b94505060208501356184b881619c44565b60008060008060808587031215618e06578182fd5b84356001600160401b03811115618e1b578283fd5b618e2787828801617fb5565b945050602085013592506040850135618e3f81619c44565b9150606085013561827681619c44565b60008060006102208486031215618e64578081fd5b618e6e8585618040565b9250618e7e85610180860161812d565b91506102008401356182c681619c44565b60008060008084860360c0811215618ea5578283fd5b6060811215618eb2578283fd5b50618ebd6060619b95565b8535618ec881619c44565b8152602086810135908201526040860135618ee281619c44565b604082015293506060850135618ef781619c44565b92506080850135618cd781619c44565b600080600083850360a0811215618f1c578182fd5b6060811215618f29578182fd5b50618f346060619b95565b84518152602085015160058110618f49578283fd5b60208201526040850151618f5c81619c8c565b60408201526060850151909350618f7281619c8c565b60808501519092506182c681619c59565b600060208284031215618f94578081fd5b815162ffffff8116811461397a578182fd5b60008060408385031215618fb8578182fd5b505080516020909101519092909150565b60008060008060808587031215618fde578182fd5b505082516020840151604085015160609095015191969095509092509050565b600080600080600060a08688031215619015578283fd5b5050835160208501516040860151606087015160809097015192989197509594509092509050565b6001600160a01b0316815260200190565b600081518352602082015160208401526040820151604084015260608201516060840152608082015160a06080850152610ffe60a085018261910a565b6001600160a01b03169052565b6000815180845260208085019450808401835b838110156190d05781516001600160a01b0316875295820195908201906001016190ab565b509495945050505050565b6000815180845260208085019450808401835b838110156190d0578151875295820195908201906001016190ee565b60008151808452619122816020860160208601619bfd565b601f01601f19169290920160200192915050565b80516001600160a01b031682526020808201516001600160e01b03199081169184019190915260409182015116910152565b80516001600160a01b039081168352602080830151151590840152604080830151909116908301526060908101511515910152565b600081518352602082015160406020850152610ffe604085018261910a565b600081518352602082015160018060a01b0380821660208601528060408501511660408601528060608501511660608601525050608082015160a06080850152610ffe60a085018261910a565b61921482825161908b565b6020810151619226602084018261908b565b5060408101516192396040840182619309565b50606081015161924c6060840182619309565b50608081015161925f6080840182619309565b5060a081015161927260a084018261908b565b5060c081015161928560c084018261908b565b5060e081015161929860e084018261908b565b50610100808201516192ac8285018261908b565b50506101208181015190830152610140808201516192cc82850182619316565b505061016090810151910152565b80516192e581619c2d565b825260208181015160ff169083015260408082015190830152606090810151910152565b6001600160801b03169052565b6001600160401b03169052565b6000828483379101908152919050565b60008251619345818460208701619bfd565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b03948516815292841660208401529083166040830152909116606082015260800190565b6001600160a01b038581168252848116602083015283166040820152608060608201819052600090615dc6908301846190db565b6001600160a01b039485168152928416602084015292166040820152606081019190915260800190565b6001600160a01b039384168152919092166020820152901515604082015260600190565b6001600160a01b038581168252841660208201528215156040820152608060608201819052600090615dc69083018461910a565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03868116825285166020820152604081018490526060810183905260a0608082018190526000906194d59083018461910a565b979650505050505050565b6001600160a01b038416815260606020820181905260009061950490830185619098565b8281036040840152615dc681856190db565b6001600160a01b0385168152600061952d85619c2d565b8460208301526080604083015261954760808301856190db565b82810360608401526194d581856190db565b6001600160a01b038981168252600090610100906195768b619c2d565b8a602085015281604085015261958e8285018b6190db565b915083820360608501526195a2828a6190db565b908816608085015290506195b586619c2d565b8560a084015282810360c08401526195cd81866190db565b905082810360e08401526195e181856190db565b9b9a5050505050505050505050565b6001600160a01b0383168152604060208201819052600090610ffe908301846191bc565b6000604082526196276040830185619098565b90508260208301529392505050565b60006040820160408352808551808352606085019150602092506060838202860101838801855b8381101561968b57605f1988840301855261967983835161910a565b9486019492509085019060010161965d565b50508581038487015261761b81886190db565b60208082528251828201819052600091906040908185019080840286018301878501865b8381101561970557888303603f19018552815180518785526196e68886018261910a565b91890151151594890194909452948701949250908601906001016196c2565b509098975050505050505050565b60006020825261397a60208301846190db565b901515815260200190565b83151581526001600160a01b038316602082015260606040820181905260009061106c908301846190db565b90815260200190565b600084825260606020830152619504606083018561910a565b60006020825261397a602083018461910a565b600060408252619627604083018561910a565b6001600160a01b03938416815291909216602082015262ffffff909116604082015260600190565b6001600160a01b0383168152604060208201819052600090610ffe908301846190db565b606081016197fe85619c2d565b938152602081019290925260409091015290565b60608101600885106197fe57fe5b600060e0820161982f87619c3a565b868352602060e081850152818751619847818561975d565b91508193508281028201838a01865b8381101561988057868303855261986e83835161904e565b94860194925090850190600101619856565b505086810360408801528094508851925061989b838261975d565b94505050818701845b828110156198c5576198b785835161903d565b9450908301906001016198a4565b505050508091505061106c6060830184619168565b600f93840b81529190920b6020820152604081019190915260600190565b600f83900b81526080810161397a6020830184619136565b60208082526024908201527f556e6973776170563353616d706c65722f746f6b656e5061746820746f6f20736040820152631a1bdc9d60e21b606082015260800190565b60208082526025908201527f455243323042726964676553616d706c65722f494e56414c49445f544f4b454e6040820152642fa820a4a960d91b606082015260800190565b60208082526025908201527f556e6973776170563353616d706c65722f696e76616c69642070617468206c656040820152646e6774687360d81b606082015260800190565b60006199ea8287619136565b84600f0b606083015283600f0b608083015260c060a0830152615dc660c08301846190db565b600060608252619a23606083018661919d565b8281036020840152619a35818661919d565b915050826040830152949350505050565b600060808252619a5960808301876191bc565b6001600160a01b0395861660208401529390941660408201526060015292915050565b600060808252619a8f60808301876191bc565b6020830195909552506001600160a01b0392831660408201529116606090910152919050565b6102008101619ac48285619209565b61397a6101808301846192da565b6102208101619ae18286619209565b619aef6101808301856192da565b6001600160a01b0392909216610200919091015292915050565b600083825260406020830152610ffe6040830184619098565b958652602086019490945260408501929092526060840152608083015260a082015260c00190565b6000808335601e19843603018112619b60578283fd5b8301803591506001600160401b03821115619b79578283fd5b602001915036819003821315619b8e57600080fd5b9250929050565b6040518181016001600160401b0381118282101715619bb357600080fd5b604052919050565b60006001600160401b03821115619bd0578081fd5b5060209081020190565b60006001600160401b03821115619bef578081fd5b50601f01601f191660200190565b60005b83811015619c18578181015183820152602001619c00565b83811115619c27576000848401525b50505050565b60048110619c3757fe5b50565b60028110619c3757fe5b6001600160a01b0381168114619c3757600080fd5b8015158114619c3757600080fd5b6001600160e01b031981168114619c3757600080fd5b80600f0b8114619c3757600080fd5b6001600160801b0381168114619c3757600080fdfea2646970667358221220c1f6148426ae90fe62d9fb20f2b2d0dfb05175627f257602d9223499b9bf406564736f6c634300060c0033",
                "opcodes": "PUSH1 0xA0 PUSH1 0x40 MSTORE PUSH32 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE000000000000000000000000 PUSH1 0x80 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x35 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x80 MLOAD PUSH1 0x60 SHR PUSH2 0x9CD7 PUSH3 0x5E PUSH1 0x0 CODECOPY DUP1 PUSH2 0x288C MSTORE DUP1 PUSH2 0x44B2 MSTORE DUP1 PUSH2 0x5003 MSTORE POP PUSH2 0x9CD7 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x2A0 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x9209483B GT PUSH2 0x167 JUMPI DUP1 PUSH4 0xC25C4138 GT PUSH2 0xCE JUMPI DUP1 PUSH4 0xDDD5AA28 GT PUSH2 0x87 JUMPI DUP1 PUSH4 0xDDD5AA28 EQ PUSH2 0x665 JUMPI DUP1 PUSH4 0xE78AC045 EQ PUSH2 0x678 JUMPI DUP1 PUSH4 0xE8E4AF09 EQ PUSH2 0x68B JUMPI DUP1 PUSH4 0xF1ED7FA4 EQ PUSH2 0x69E JUMPI DUP1 PUSH4 0xF5A4994D EQ PUSH2 0x6B1 JUMPI DUP1 PUSH4 0xFC9FE41B EQ PUSH2 0x6C4 JUMPI PUSH2 0x2A0 JUMP JUMPDEST DUP1 PUSH4 0xC25C4138 EQ PUSH2 0x5F3 JUMPI DUP1 PUSH4 0xC8319084 EQ PUSH2 0x606 JUMPI DUP1 PUSH4 0xC8C74A37 EQ PUSH2 0x619 JUMPI DUP1 PUSH4 0xC94706D8 EQ PUSH2 0x62C JUMPI DUP1 PUSH4 0xCC1621C9 EQ PUSH2 0x63F JUMPI DUP1 PUSH4 0xD9BCA372 EQ PUSH2 0x652 JUMPI PUSH2 0x2A0 JUMP JUMPDEST DUP1 PUSH4 0xA4698417 GT PUSH2 0x120 JUMPI DUP1 PUSH4 0xA4698417 EQ PUSH2 0x573 JUMPI DUP1 PUSH4 0xA75E744B EQ PUSH2 0x586 JUMPI DUP1 PUSH4 0xAB000276 EQ PUSH2 0x599 JUMPI DUP1 PUSH4 0xADC636BF EQ PUSH2 0x5AC JUMPI DUP1 PUSH4 0xB90CD2FB EQ PUSH2 0x5CD JUMPI DUP1 PUSH4 0xBD71ECF6 EQ PUSH2 0x5E0 JUMPI PUSH2 0x2A0 JUMP JUMPDEST DUP1 PUSH4 0x9209483B EQ PUSH2 0x4E5 JUMPI DUP1 PUSH4 0x98777748 EQ PUSH2 0x4F8 JUMPI DUP1 PUSH4 0x9BF3EE35 EQ PUSH2 0x50B JUMPI DUP1 PUSH4 0x9E3F05C3 EQ PUSH2 0x52B JUMPI DUP1 PUSH4 0x9EA0FF13 EQ PUSH2 0x54D JUMPI DUP1 PUSH4 0xA0295B8B EQ PUSH2 0x560 JUMPI PUSH2 0x2A0 JUMP JUMPDEST DUP1 PUSH4 0x4EDFB5B2 GT PUSH2 0x20B JUMPI DUP1 PUSH4 0x68BE3CF2 GT PUSH2 0x1C4 JUMPI DUP1 PUSH4 0x68BE3CF2 EQ PUSH2 0x457 JUMPI DUP1 PUSH4 0x706E2F9B EQ PUSH2 0x477 JUMPI DUP1 PUSH4 0x74C9D255 EQ PUSH2 0x48A JUMPI DUP1 PUSH4 0x7F7F4F13 EQ PUSH2 0x49D JUMPI DUP1 PUSH4 0x8B6D7B44 EQ PUSH2 0x4B0 JUMPI DUP1 PUSH4 0x8E5A0E07 EQ PUSH2 0x4C3 JUMPI PUSH2 0x2A0 JUMP JUMPDEST DUP1 PUSH4 0x4EDFB5B2 EQ PUSH2 0x3CA JUMPI DUP1 PUSH4 0x5505000A EQ PUSH2 0x3EA JUMPI DUP1 PUSH4 0x57494B1D EQ PUSH2 0x40B JUMPI DUP1 PUSH4 0x5AAE4E53 EQ PUSH2 0x41E JUMPI DUP1 PUSH4 0x5D5B674F EQ PUSH2 0x431 JUMPI DUP1 PUSH4 0x66A1AC6B EQ PUSH2 0x444 JUMPI PUSH2 0x2A0 JUMP JUMPDEST DUP1 PUSH4 0x29FA4AA0 GT PUSH2 0x25D JUMPI DUP1 PUSH4 0x29FA4AA0 EQ PUSH2 0x349 JUMPI DUP1 PUSH4 0x2AA64319 EQ PUSH2 0x35C JUMPI DUP1 PUSH4 0x2D753AA4 EQ PUSH2 0x37E JUMPI DUP1 PUSH4 0x30D6570D EQ PUSH2 0x391 JUMPI DUP1 PUSH4 0x3105FEC1 EQ PUSH2 0x3A4 JUMPI DUP1 PUSH4 0x40BC03AE EQ PUSH2 0x3B7 JUMPI PUSH2 0x2A0 JUMP JUMPDEST DUP1 PUSH4 0x1022742B EQ PUSH2 0x2A5 JUMPI DUP1 PUSH4 0x149DAB0E EQ PUSH2 0x2CE JUMPI DUP1 PUSH4 0x16279055 EQ PUSH2 0x2F0 JUMPI DUP1 PUSH4 0x2339078F EQ PUSH2 0x310 JUMPI DUP1 PUSH4 0x252322B3 EQ PUSH2 0x323 JUMPI DUP1 PUSH4 0x281E3432 EQ PUSH2 0x336 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2B8 PUSH2 0x2B3 CALLDATASIZE PUSH1 0x4 PUSH2 0x890B JUMP JUMPDEST PUSH2 0x6D7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2C5 SWAP2 SWAP1 PUSH2 0x9713 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2E1 PUSH2 0x2DC CALLDATASIZE PUSH1 0x4 PUSH2 0x8BDF JUMP JUMPDEST PUSH2 0x84A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2C5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x94E0 JUMP JUMPDEST PUSH2 0x303 PUSH2 0x2FE CALLDATASIZE PUSH1 0x4 PUSH2 0x81B2 JUMP JUMPDEST PUSH2 0x9AA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2C5 SWAP2 SWAP1 PUSH2 0x9726 JUMP JUMPDEST PUSH2 0x2B8 PUSH2 0x31E CALLDATASIZE PUSH1 0x4 PUSH2 0x8B60 JUMP JUMPDEST PUSH2 0x9B4 JUMP JUMPDEST PUSH2 0x2B8 PUSH2 0x331 CALLDATASIZE PUSH1 0x4 PUSH2 0x8416 JUMP JUMPDEST PUSH2 0xBDB JUMP JUMPDEST PUSH2 0x2B8 PUSH2 0x344 CALLDATASIZE PUSH1 0x4 PUSH2 0x8E8F JUMP JUMPDEST PUSH2 0xDB1 JUMP JUMPDEST PUSH2 0x2B8 PUSH2 0x357 CALLDATASIZE PUSH1 0x4 PUSH2 0x8C98 JUMP JUMPDEST PUSH2 0x1006 JUMP JUMPDEST PUSH2 0x36F PUSH2 0x36A CALLDATASIZE PUSH1 0x4 PUSH2 0x8CF1 JUMP JUMPDEST PUSH2 0x1075 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2C5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9731 JUMP JUMPDEST PUSH2 0x2B8 PUSH2 0x38C CALLDATASIZE PUSH1 0x4 PUSH2 0x8391 JUMP JUMPDEST PUSH2 0x1352 JUMP JUMPDEST PUSH2 0x2B8 PUSH2 0x39F CALLDATASIZE PUSH1 0x4 PUSH2 0x8416 JUMP JUMPDEST PUSH2 0x14DB JUMP JUMPDEST PUSH2 0x2B8 PUSH2 0x3B2 CALLDATASIZE PUSH1 0x4 PUSH2 0x84D8 JUMP JUMPDEST PUSH2 0x164F JUMP JUMPDEST PUSH2 0x2B8 PUSH2 0x3C5 CALLDATASIZE PUSH1 0x4 PUSH2 0x8C98 JUMP JUMPDEST PUSH2 0x17D3 JUMP JUMPDEST PUSH2 0x3DD PUSH2 0x3D8 CALLDATASIZE PUSH1 0x4 PUSH2 0x8DF1 JUMP JUMPDEST PUSH2 0x1954 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2C5 SWAP2 SWAP1 PUSH2 0x977F JUMP JUMPDEST PUSH2 0x3FD PUSH2 0x3F8 CALLDATASIZE PUSH1 0x4 PUSH2 0x8AC9 JUMP JUMPDEST PUSH2 0x1BD1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2C5 SWAP3 SWAP2 SWAP1 PUSH2 0x9636 JUMP JUMPDEST PUSH2 0x2B8 PUSH2 0x419 CALLDATASIZE PUSH1 0x4 PUSH2 0x8416 JUMP JUMPDEST PUSH2 0x1E26 JUMP JUMPDEST PUSH2 0x3FD PUSH2 0x42C CALLDATASIZE PUSH1 0x4 PUSH2 0x8AC9 JUMP JUMPDEST PUSH2 0x2378 JUMP JUMPDEST PUSH2 0x2B8 PUSH2 0x43F CALLDATASIZE PUSH1 0x4 PUSH2 0x8416 JUMP JUMPDEST PUSH2 0x25BD JUMP JUMPDEST PUSH2 0x2B8 PUSH2 0x452 CALLDATASIZE PUSH1 0x4 PUSH2 0x890B JUMP JUMPDEST PUSH2 0x2623 JUMP JUMPDEST PUSH2 0x46A PUSH2 0x465 CALLDATASIZE PUSH1 0x4 PUSH2 0x86E5 JUMP JUMPDEST PUSH2 0x26D8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2C5 SWAP2 SWAP1 PUSH2 0x969E JUMP JUMPDEST PUSH2 0x2B8 PUSH2 0x485 CALLDATASIZE PUSH1 0x4 PUSH2 0x87BC JUMP JUMPDEST PUSH2 0x2839 JUMP JUMPDEST PUSH2 0x2E1 PUSH2 0x498 CALLDATASIZE PUSH1 0x4 PUSH2 0x8BDF JUMP JUMPDEST PUSH2 0x292B JUMP JUMPDEST PUSH2 0x2B8 PUSH2 0x4AB CALLDATASIZE PUSH1 0x4 PUSH2 0x8E8F JUMP JUMPDEST PUSH2 0x293A JUMP JUMPDEST PUSH2 0x2B8 PUSH2 0x4BE CALLDATASIZE PUSH1 0x4 PUSH2 0x8C98 JUMP JUMPDEST PUSH2 0x2B87 JUMP JUMPDEST PUSH2 0x4D6 PUSH2 0x4D1 CALLDATASIZE PUSH1 0x4 PUSH2 0x8753 JUMP JUMPDEST PUSH2 0x2EEA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2C5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9A10 JUMP JUMPDEST PUSH2 0x2B8 PUSH2 0x4F3 CALLDATASIZE PUSH1 0x4 PUSH2 0x8C98 JUMP JUMPDEST PUSH2 0x3103 JUMP JUMPDEST PUSH2 0x2B8 PUSH2 0x506 CALLDATASIZE PUSH1 0x4 PUSH2 0x8416 JUMP JUMPDEST PUSH2 0x3303 JUMP JUMPDEST PUSH2 0x51E PUSH2 0x519 CALLDATASIZE PUSH1 0x4 PUSH2 0x8E4F JUMP JUMPDEST PUSH2 0x383A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2C5 SWAP2 SWAP1 PUSH2 0x975D JUMP JUMPDEST PUSH2 0x53E PUSH2 0x539 CALLDATASIZE PUSH1 0x4 PUSH2 0x8D3A JUMP JUMPDEST PUSH2 0x3981 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2C5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9766 JUMP JUMPDEST PUSH2 0x51E PUSH2 0x55B CALLDATASIZE PUSH1 0x4 PUSH2 0x8488 JUMP JUMPDEST PUSH2 0x3AA7 JUMP JUMPDEST PUSH2 0x2B8 PUSH2 0x56E CALLDATASIZE PUSH1 0x4 PUSH2 0x8B60 JUMP JUMPDEST PUSH2 0x3CBD JUMP JUMPDEST PUSH2 0x2B8 PUSH2 0x581 CALLDATASIZE PUSH1 0x4 PUSH2 0x8416 JUMP JUMPDEST PUSH2 0x3EB9 JUMP JUMPDEST PUSH2 0x36F PUSH2 0x594 CALLDATASIZE PUSH1 0x4 PUSH2 0x854A JUMP JUMPDEST PUSH2 0x400E JUMP JUMPDEST PUSH2 0x2B8 PUSH2 0x5A7 CALLDATASIZE PUSH1 0x4 PUSH2 0x8416 JUMP JUMPDEST PUSH2 0x414B JUMP JUMPDEST PUSH2 0x5BF PUSH2 0x5BA CALLDATASIZE PUSH1 0x4 PUSH2 0x8416 JUMP JUMPDEST PUSH2 0x42A9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2C5 SWAP3 SWAP2 SWAP1 PUSH2 0x97CD JUMP JUMPDEST PUSH2 0x2B8 PUSH2 0x5DB CALLDATASIZE PUSH1 0x4 PUSH2 0x8416 JUMP JUMPDEST PUSH2 0x43F9 JUMP JUMPDEST PUSH2 0x2B8 PUSH2 0x5EE CALLDATASIZE PUSH1 0x4 PUSH2 0x87EE JUMP JUMPDEST PUSH2 0x445F JUMP JUMPDEST PUSH2 0x2B8 PUSH2 0x601 CALLDATASIZE PUSH1 0x4 PUSH2 0x8416 JUMP JUMPDEST PUSH2 0x455B JUMP JUMPDEST PUSH2 0x2B8 PUSH2 0x614 CALLDATASIZE PUSH1 0x4 PUSH2 0x8416 JUMP JUMPDEST PUSH2 0x45C1 JUMP JUMPDEST PUSH2 0x2B8 PUSH2 0x627 CALLDATASIZE PUSH1 0x4 PUSH2 0x84D8 JUMP JUMPDEST PUSH2 0x477E JUMP JUMPDEST PUSH2 0x2B8 PUSH2 0x63A CALLDATASIZE PUSH1 0x4 PUSH2 0x8416 JUMP JUMPDEST PUSH2 0x48EA JUMP JUMPDEST PUSH2 0x53E PUSH2 0x64D CALLDATASIZE PUSH1 0x4 PUSH2 0x8D3A JUMP JUMPDEST PUSH2 0x4A48 JUMP JUMPDEST PUSH2 0x36F PUSH2 0x660 CALLDATASIZE PUSH1 0x4 PUSH2 0x854A JUMP JUMPDEST PUSH2 0x4C2E JUMP JUMPDEST PUSH2 0x36F PUSH2 0x673 CALLDATASIZE PUSH1 0x4 PUSH2 0x8CF1 JUMP JUMPDEST PUSH2 0x4D1D JUMP JUMPDEST PUSH2 0x2B8 PUSH2 0x686 CALLDATASIZE PUSH1 0x4 PUSH2 0x8832 JUMP JUMPDEST PUSH2 0x4FB0 JUMP JUMPDEST PUSH2 0x2B8 PUSH2 0x699 CALLDATASIZE PUSH1 0x4 PUSH2 0x8416 JUMP JUMPDEST PUSH2 0x50A5 JUMP JUMPDEST PUSH2 0x51E PUSH2 0x6AC CALLDATASIZE PUSH1 0x4 PUSH2 0x8DAA JUMP JUMPDEST PUSH2 0x51D8 JUMP JUMPDEST PUSH2 0x5BF PUSH2 0x6BF CALLDATASIZE PUSH1 0x4 PUSH2 0x8416 JUMP JUMPDEST PUSH2 0x5377 JUMP JUMPDEST PUSH2 0x4D6 PUSH2 0x6D2 CALLDATASIZE PUSH1 0x4 PUSH2 0x8753 JUMP JUMPDEST PUSH2 0x5463 JUMP JUMPDEST PUSH1 0x60 DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x6F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x71A JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 EQ PUSH2 0x842 JUMPI ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x9BF3EE35 PUSH3 0x30D40 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x747 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x75B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x782 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9AD2 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x79A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x7CB JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x7C8 SWAP2 DUP2 ADD SWAP1 PUSH2 0x8A7F JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x81F JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x7F9 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x7FE JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x80D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP PUSH2 0x83A JUMP JUMPDEST DUP1 DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x82C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP JUMPDEST PUSH1 0x1 ADD PUSH2 0x720 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP1 DUP7 PUSH1 0x20 ADD MLOAD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x862 JUMPI PUSH2 0x9A0 JUMP JUMPDEST PUSH2 0x86E DUP8 DUP8 DUP8 DUP8 PUSH2 0x5678 JUMP JUMPDEST DUP6 MLOAD SWAP2 SWAP5 POP SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x88A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x8B4 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0x99E JUMPI DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x7F9C0ECD PUSH3 0x493E0 DUP6 DUP9 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x8E3 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x908 SWAP3 SWAP2 SWAP1 PUSH2 0x9614 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x920 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x951 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x94E SWAP2 DUP2 ADD SWAP1 PUSH2 0x8A7F JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x95A JUMPI PUSH2 0x99E JUMP JUMPDEST DUP1 DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x967 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x97F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x995 JUMPI POP PUSH2 0x99E JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x8BA JUMP JUMPDEST POP JUMPDEST SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST DUP1 EXTCODESIZE ISZERO ISZERO JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x9C0 DUP4 DUP6 PUSH2 0x58AA JUMP JUMPDEST PUSH1 0x20 DUP6 ADD MLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x2 DUP1 DUP3 MSTORE PUSH1 0x60 DUP3 DUP2 ADD SWAP1 SWAP4 MSTORE DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP6 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x9F6 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP DUP5 DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0xA24 JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE DUP4 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0xA54 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xA7E JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP4 POP PUSH2 0xA89 PUSH2 0x7A39 JUMP JUMPDEST PUSH2 0xA91 PUSH2 0x58E9 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0xBCE JUMPI PUSH1 0x60 PUSH2 0xABD DUP12 DUP10 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xAB0 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x5918 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x7C268337 PUSH1 0xE1 SHL DUP2 MSTORE SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND SWAP1 PUSH4 0xF84D066E SWAP1 PUSH2 0xAF3 SWAP1 PUSH1 0x0 SWAP1 DUP6 SWAP1 DUP11 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x9820 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xB0D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0xB42 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0xB3F SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x8888 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0xB7D JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0xB70 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xB75 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP POP PUSH2 0xBCE JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0xB8C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 NOT MUL SWAP1 POP PUSH1 0x0 DUP2 SGT PUSH2 0xBAA JUMPI POP POP POP PUSH2 0xBCE JUMP JUMPDEST DUP1 DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0xBB7 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP POP POP PUSH1 0x1 ADD PUSH2 0xA96 JUMP JUMPDEST POP POP POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0xBE7 DUP4 DUP6 PUSH2 0x58AA JUMP JUMPDEST DUP2 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0xBFF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xC29 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND ISZERO PUSH2 0xC4C JUMPI PUSH2 0xC47 DUP8 DUP8 PUSH2 0x59AC JUMP JUMPDEST PUSH2 0xC4F JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND ISZERO PUSH2 0xC71 JUMPI PUSH2 0xC6C DUP9 DUP8 PUSH2 0x59AC JUMP JUMPDEST PUSH2 0xC74 JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xDA5 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH2 0xCD7 JUMPI PUSH2 0xCB6 DUP5 PUSH4 0x2640F62C PUSH1 0xE0 SHL DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0xCA9 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x5A2B JUMP JUMPDEST DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xCC2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP4 POP DUP3 DUP2 MSTORE POP POP POP PUSH2 0xD71 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND PUSH2 0xCFD JUMPI PUSH2 0xCB6 DUP4 PUSH4 0x59E94862 PUSH1 0xE0 SHL DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0xCA9 JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH2 0xD17 DUP5 PUSH4 0x59E94862 PUSH1 0xE0 SHL DUP11 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0xCA9 JUMPI INVALID JUMPDEST SWAP3 POP SWAP1 POP DUP1 ISZERO PUSH2 0xD54 JUMPI PUSH2 0xD33 DUP6 PUSH4 0x9903D8B PUSH1 0xE2 SHL DUP4 PUSH2 0x5A2B JUMP JUMPDEST DUP9 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0xD3F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP5 POP DUP3 DUP2 MSTORE POP POP POP PUSH2 0xD6F JUMP JUMPDEST PUSH1 0x0 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xD62 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP JUMPDEST POP JUMPDEST DUP1 ISZERO DUP1 PUSH2 0xD91 JUMPI POP DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xD85 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ JUMPDEST ISZERO PUSH2 0xD9C JUMPI POP PUSH2 0xDA5 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0xC79 JUMP JUMPDEST POP POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0xDBD DUP4 DUP6 PUSH2 0x58AA JUMP JUMPDEST PUSH1 0x0 DUP6 PUSH1 0x0 ADD MLOAD SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x36569E77 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xE01 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xE15 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xE39 SWAP2 SWAP1 PUSH2 0x81CE JUMP JUMPDEST DUP5 MLOAD SWAP1 SWAP2 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0xE54 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xE7E JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP4 POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xF4B9FA75 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xEBA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xECE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xEF2 SWAP2 SWAP1 PUSH2 0x81CE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO DUP1 ISZERO PUSH2 0xF95 JUMPI POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xF4B9FA75 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xF47 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xF5B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xF7F SWAP2 SWAP1 PUSH2 0x81CE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO JUMPDEST ISZERO PUSH2 0xFA2 JUMPI POP POP POP PUSH2 0xFFE JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xDA5 JUMPI PUSH1 0x0 PUSH2 0xFD0 DUP11 DUP10 DUP12 DUP11 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0xFC1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP10 DUP10 PUSH2 0x5B0F JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0xFDD JUMPI POP PUSH2 0xDA5 JUMP JUMPDEST DUP1 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xFEA JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP PUSH1 0x1 ADD PUSH2 0xFA5 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 DUP2 ADD SWAP1 SWAP3 MSTORE PUSH2 0x106C SWAP1 DUP1 PUSH2 0x1025 DUP7 DUP10 PUSH1 0x80 DUP5 ADD PUSH2 0x98F8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x104C SWAP3 SWAP2 SWAP1 PUSH2 0x98F8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x5DD0 DUP2 MSTORE POP DUP4 PUSH2 0x5F03 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 PUSH2 0x1084 DUP6 DUP8 PUSH2 0x58AA JUMP JUMPDEST DUP4 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x109C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x10C6 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP DUP9 MLOAD PUSH1 0x40 MLOAD PUSH4 0x939D863 PUSH1 0xE1 SHL DUP2 MSTORE SWAP2 SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x1273B0C6 SWAP1 PUSH2 0x10F9 SWAP1 DUP11 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x937C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1111 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1125 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1149 SWAP2 SWAP1 PUSH2 0x81CE JUMP JUMPDEST SWAP3 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND ISZERO PUSH2 0x1167 JUMPI POP PUSH1 0x1 SWAP4 POP DUP7 PUSH2 0x1206 JUMP JUMPDEST DUP9 MLOAD PUSH1 0x40 MLOAD PUSH4 0x939D863 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x1273B0C6 SWAP1 PUSH2 0x1198 SWAP1 DUP11 SWAP1 DUP13 SWAP1 PUSH1 0x4 ADD PUSH2 0x937C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x11B0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x11C4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x11E8 SWAP2 SWAP1 PUSH2 0x81CE JUMP JUMPDEST SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x11FF JUMPI POP POP PUSH2 0x9A0 JUMP JUMPDEST POP PUSH1 0x0 SWAP4 POP DUP6 JUMPDEST DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDD58B41C PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x123F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1253 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1277 SWAP2 SWAP1 PUSH2 0x8A0C JUMP JUMPDEST PUSH2 0x1282 JUMPI POP POP PUSH2 0x9A0 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x1345 JUMPI PUSH1 0x0 PUSH2 0x12FF DUP11 DUP8 DUP6 DUP15 PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x12AD SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9396 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP11 DUP9 DUP7 DUP16 PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x12D7 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9396 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP11 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x12F2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x6100 JUMP JUMPDEST SWAP1 POP DUP1 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x130E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1326 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x133C JUMPI POP PUSH2 0x1345 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x1285 JUMP JUMPDEST POP POP POP SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x136D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1397 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH2 0x13AE JUMPI POP PUSH2 0x106C JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x14D0 JUMPI PUSH1 0x0 PUSH1 0x60 DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH3 0x61A80 PUSH4 0x6E79E133 PUSH1 0xE0 SHL DUP12 DUP12 DUP12 DUP12 DUP10 DUP2 MLOAD DUP2 LT PUSH2 0x13E2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x13FD SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x93F5 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x143B SWAP2 SWAP1 PUSH2 0x9333 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1477 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x147C JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x14A0 JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x149D SWAP2 SWAP1 PUSH2 0x8A7F JUMP JUMPDEST SWAP1 POP JUMPDEST DUP1 PUSH2 0x14AD JUMPI POP POP POP PUSH2 0x14D0 JUMP JUMPDEST DUP1 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x14BA JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x13B1 JUMP JUMPDEST POP POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x14F6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1520 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1645 JUMPI DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x72EA9076 PUSH3 0xC3500 DUP9 DUP9 DUP9 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x154F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1575 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9477 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x158D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x15C3 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x15C0 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x8A28 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x15FD JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x15F1 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x15F6 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP PUSH2 0x1645 JUMP JUMPDEST DUP1 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x160A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x1622 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x163A JUMPI POP POP POP PUSH2 0x1645 JUMP JUMPDEST POP POP POP PUSH1 0x1 ADD PUSH2 0x1526 JUMP JUMPDEST POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x166A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1694 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x17CA JUMPI DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD06CA61F PUSH3 0x249F0 DUP7 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x16C1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x16E7 SWAP3 SWAP2 SWAP1 PUSH2 0x9B09 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x16FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x1735 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x1732 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x89DA JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x176F JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x1763 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1768 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP PUSH2 0x17CA JUMP JUMPDEST DUP1 PUSH1 0x1 DUP8 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x177F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1793 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x17AB JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x17C1 JUMPI POP PUSH2 0x17CA JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x169A JUMP JUMPDEST POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x17EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1818 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1645 JUMPI PUSH1 0x0 PUSH1 0x60 DUP9 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH3 0x1E8480 DUP11 PUSH1 0x20 ADD MLOAD DUP11 DUP11 DUP11 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x184F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1869 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x98DA JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x18A7 SWAP2 SWAP1 PUSH2 0x9333 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x18E3 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x18E8 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x190C JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x1909 SWAP2 SWAP1 PUSH2 0x8A7F JUMP JUMPDEST SWAP1 POP JUMPDEST DUP1 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x1919 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x1931 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x1949 JUMPI POP POP POP PUSH2 0x1645 JUMP JUMPDEST POP POP POP PUSH1 0x1 ADD PUSH2 0x181E JUMP JUMPDEST PUSH1 0x20 DUP5 DUP2 ADD MLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP4 DUP5 SWAP3 SWAP1 DUP3 DUP2 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP6 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x198B JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x60 PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x19C3 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP8 PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x1AB4 JUMPI PUSH1 0x40 MLOAD PUSH4 0x81EFCBDD PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x81EFCBDD SWAP1 PUSH3 0x7A120 SWAP1 PUSH2 0x1A1C SWAP1 DUP10 SWAP1 PUSH1 0x1 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x9516 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1A34 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x1A6A JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x1A67 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x8A97 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1AA4 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x1A98 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1A9D JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP PUSH2 0x1AAF JUMP JUMPDEST SWAP4 POP PUSH2 0xFFE SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x1BC6 JUMP JUMPDEST DUP8 PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x1B0A JUMPI PUSH1 0x40 MLOAD PUSH4 0x61E597F9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x61E597F9 SWAP1 PUSH3 0x7A120 SWAP1 PUSH2 0x1A1C SWAP1 DUP11 SWAP1 PUSH1 0x1 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x9516 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x2B9A6CD PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x5734D9A SWAP1 PUSH3 0x7A120 SWAP1 PUSH2 0x1B4A SWAP1 DUP11 SWAP1 PUSH1 0x1 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP14 SWAP1 DUP5 SWAP1 DUP5 SWAP1 DUP5 SWAP1 PUSH1 0x4 ADD PUSH2 0x9559 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1B62 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x1B98 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x1B95 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x8A97 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1AA4 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0xBCE JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xBCE JUMP JUMPDEST POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH1 0x60 PUSH2 0x1C52 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xC45A0155 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1C12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1C26 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1C4A SWAP2 SWAP1 PUSH2 0x81CE JUMP JUMPDEST DUP7 PUSH1 0x0 PUSH2 0x6239 JUMP JUMPDEST SWAP1 POP DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x1C6B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1C95 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x1CAF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1CE3 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x1CCE JUMPI SWAP1 POP JUMPDEST POP SWAP3 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x1E1C JUMPI PUSH1 0x60 PUSH1 0x0 DUP1 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x1DD4 JUMPI PUSH1 0x60 PUSH2 0x1D20 DUP11 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x1D13 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x66CF JUMP JUMPDEST SWAP1 POP DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xCDCA1753 PUSH3 0x493E0 DUP4 DUP13 DUP10 DUP2 MLOAD DUP2 LT PUSH2 0x1D42 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1D67 SWAP3 SWAP2 SWAP1 PUSH2 0x9792 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1D81 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP8 CALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x1DB2 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x1DAF SWAP2 DUP2 ADD SWAP1 PUSH2 0x8A7F JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1DBB JUMPI PUSH2 0x1DCB JUMP JUMPDEST DUP1 DUP5 GT PUSH2 0x1DC9 JUMPI DUP1 SWAP4 POP DUP2 SWAP5 POP JUMPDEST POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x1CF8 JUMP JUMPDEST POP DUP1 PUSH2 0x1DE1 JUMPI POP POP PUSH2 0x1E1C JUMP JUMPDEST DUP1 DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x1DEE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP2 DUP7 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x1E07 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP PUSH1 0x1 ADD PUSH2 0x1CE9 JUMP JUMPDEST POP POP SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP6 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x1E43 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1E6D JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0xBCDED89 PUSH1 0xE2 SHL DUP2 MSTORE SWAP1 SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x2F37B624 SWAP1 PUSH2 0x1E9D SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x934F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1EB5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1EC9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1EED SWAP2 SWAP1 PUSH2 0x8A0C JUMP JUMPDEST ISZERO DUP1 PUSH2 0x1F72 JUMPI POP PUSH1 0x40 MLOAD PUSH4 0xBCDED89 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x2F37B624 SWAP1 PUSH2 0x1F20 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x934F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1F38 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1F4C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1F70 SWAP2 SWAP1 PUSH2 0x8A0C JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x1F7E JUMPI POP POP PUSH2 0xFFE JUMP JUMPDEST PUSH2 0x1F86 PUSH2 0x7A60 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xF8B2CB4F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0xF8B2CB4F SWAP1 PUSH2 0x1FB2 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x934F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1FCA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1FDE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2002 SWAP2 SWAP1 PUSH2 0x8A7F JUMP JUMPDEST DUP2 MSTORE PUSH1 0x40 MLOAD PUSH4 0xF8B2CB4F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0xF8B2CB4F SWAP1 PUSH2 0x2030 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x934F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2048 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x205C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2080 SWAP2 SWAP1 PUSH2 0x8A7F JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 MLOAD PUSH4 0x4A46C673 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x948D8CE6 SWAP1 PUSH2 0x20B1 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x934F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x20C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x20DD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2101 SWAP2 SWAP1 PUSH2 0x8A7F JUMP JUMPDEST PUSH1 0x40 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE MLOAD PUSH4 0x4A46C673 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x948D8CE6 SWAP1 PUSH2 0x2134 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x934F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x214C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2160 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2184 SWAP2 SWAP1 PUSH2 0x8A7F JUMP JUMPDEST DUP2 PUSH1 0x60 ADD DUP2 DUP2 MSTORE POP POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD4CADF68 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x21C6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x21DA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x21FE SWAP2 SWAP1 PUSH2 0x8A7F JUMP JUMPDEST PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0xDA5 JUMPI PUSH2 0x2231 DUP3 PUSH1 0x20 ADD MLOAD PUSH1 0x3 PUSH8 0xDE0B6B3A7640000 DUP2 PUSH2 0x2228 JUMPI INVALID JUMPDEST DIV PUSH1 0x1 ADD PUSH2 0x6832 JUMP JUMPDEST DUP7 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x223D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD GT ISZERO PUSH2 0x2250 JUMPI PUSH2 0xDA5 JUMP JUMPDEST DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xF8D6AED4 PUSH3 0x493E0 DUP5 PUSH1 0x0 ADD MLOAD DUP6 PUSH1 0x40 ADD MLOAD DUP7 PUSH1 0x20 ADD MLOAD DUP8 PUSH1 0x60 ADD MLOAD DUP13 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x2283 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP10 PUSH1 0x80 ADD MLOAD PUSH1 0x40 MLOAD DUP9 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x22B1 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9B22 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x22C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x22FA JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x22F7 SWAP2 DUP2 ADD SWAP1 PUSH2 0x8A7F JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x2334 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x2328 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x232D JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP PUSH2 0xDA5 JUMP JUMPDEST DUP1 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x2341 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2359 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x236F JUMPI POP PUSH2 0xDA5 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x2206 JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH1 0x60 PUSH2 0x23B9 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xC45A0155 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1C12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP PUSH1 0x60 PUSH2 0x23C6 DUP7 PUSH2 0x688F JUMP JUMPDEST SWAP1 POP DUP5 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x23DF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2409 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP3 POP DUP5 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x2423 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2457 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x2442 JUMPI SWAP1 POP JUMPDEST POP SWAP4 POP PUSH1 0x0 JUMPDEST DUP6 MLOAD DUP2 LT ISZERO PUSH2 0x25B2 JUMPI PUSH1 0x60 PUSH1 0x0 DUP1 JUMPDEST DUP6 MLOAD DUP2 LT ISZERO PUSH2 0x256A JUMPI PUSH1 0x60 PUSH2 0x249C DUP7 PUSH2 0x2497 DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x248A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x6927 JUMP JUMPDEST PUSH2 0x66CF JUMP JUMPDEST SWAP1 POP DUP12 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x2F80BB1D PUSH3 0x493E0 DUP4 DUP14 DUP10 DUP2 MLOAD DUP2 LT PUSH2 0x24BE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x24E3 SWAP3 SWAP2 SWAP1 PUSH2 0x9792 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x24FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP8 CALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x252E JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x252B SWAP2 DUP2 ADD SWAP1 PUSH2 0x8A7F JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x2537 JUMPI PUSH2 0x2561 JUMP JUMPDEST DUP4 ISZERO DUP1 PUSH2 0x2544 JUMPI POP DUP1 DUP5 LT ISZERO JUMPDEST ISZERO PUSH2 0x255F JUMPI DUP1 SWAP4 POP PUSH2 0x255C DUP13 DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x1D13 JUMPI INVALID JUMPDEST SWAP5 POP JUMPDEST POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x246C JUMP JUMPDEST POP DUP1 PUSH2 0x2577 JUMPI POP POP PUSH2 0x25B2 JUMP JUMPDEST DUP1 DUP7 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2584 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP2 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x259D JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP PUSH1 0x1 ADD PUSH2 0x245D JUMP JUMPDEST POP POP POP SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 DUP2 ADD SWAP1 SWAP3 MSTORE PUSH2 0x106C SWAP1 DUP1 PUSH2 0x25DC DUP7 DUP10 PUSH1 0x80 DUP5 ADD PUSH2 0x937C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2603 SWAP3 SWAP2 SWAP1 PUSH2 0x937C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x69BF DUP2 MSTORE POP DUP4 PUSH2 0x5F03 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x2630 DUP5 DUP5 DUP5 PUSH2 0x6D7 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x842 JUMPI DUP2 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x264A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ PUSH2 0x26D0 JUMPI PUSH2 0x26B7 DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2668 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x267C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x269D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND PUSH2 0x6AD3 JUMP JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x26C3 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP JUMPDEST PUSH1 0x1 ADD PUSH2 0x2635 JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x26F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x272A JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x2717 PUSH2 0x7A8F JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x270F JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP1 DUP4 EQ PUSH2 0x2832 JUMPI PUSH1 0x1 DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2745 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD SWAP2 ISZERO ISZERO SWAP2 ADD MSTORE DUP4 DUP4 DUP3 DUP2 DUP2 LT PUSH2 0x2763 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x2775 SWAP2 SWAP1 PUSH2 0x9B4A JUMP JUMPDEST ISZERO ISZERO SWAP1 POP PUSH2 0x2782 JUMPI PUSH2 0x282A JUMP JUMPDEST ADDRESS DUP5 DUP5 DUP4 DUP2 DUP2 LT PUSH2 0x278F JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x27A1 SWAP2 SWAP1 PUSH2 0x9B4A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x27AF SWAP3 SWAP2 SWAP1 PUSH2 0x9323 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x27EC JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x27F1 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x27FE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2815 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 ISZERO ISZERO SWAP1 MSTORE JUMPDEST PUSH1 0x1 ADD PUSH2 0x2730 JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x2852 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x287C JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 EQ PUSH2 0x2925 JUMPI PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x28C0 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x2900 JUMPI PUSH2 0x28FB DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x28E5 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x6AF7 JUMP JUMPDEST PUSH2 0x2903 JUMP JUMPDEST PUSH1 0x12 JUMPDEST PUSH1 0xFF AND DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2912 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x2882 JUMP JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP1 SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x2946 DUP4 DUP6 PUSH2 0x58AA JUMP JUMPDEST PUSH1 0x0 DUP6 PUSH1 0x0 ADD MLOAD SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x36569E77 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x298A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x299E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x29C2 SWAP2 SWAP1 PUSH2 0x81CE JUMP JUMPDEST DUP5 MLOAD SWAP1 SWAP2 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x29DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2A07 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP4 POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xF4B9FA75 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2A43 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2A57 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2A7B SWAP2 SWAP1 PUSH2 0x81CE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO DUP1 ISZERO PUSH2 0x2B1E JUMPI POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xF4B9FA75 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2AD0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2AE4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2B08 SWAP2 SWAP1 PUSH2 0x81CE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x2B2B JUMPI POP POP POP PUSH2 0xFFE JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xDA5 JUMPI PUSH1 0x0 PUSH2 0x2B59 DUP11 DUP10 DUP12 DUP11 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x2B4A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP10 DUP10 PUSH2 0x6BA3 JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x2B66 JUMPI POP PUSH2 0xDA5 JUMP JUMPDEST DUP1 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x2B73 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP PUSH1 0x1 ADD PUSH2 0x2B2E JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP6 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xBBD7F255 DUP6 PUSH1 0xF SIGNEXTEND PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2BBE SWAP2 SWAP1 PUSH2 0x975D JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2BD6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2BEA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2C0E SWAP2 SWAP1 PUSH2 0x8A7F JUMP JUMPDEST DUP7 MLOAD PUSH1 0x40 MLOAD PUSH4 0x1E010439 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x1E010439 SWAP1 PUSH2 0x2C41 SWAP1 PUSH1 0xF DUP10 SWAP1 SIGNEXTEND SWAP1 PUSH1 0x4 ADD PUSH2 0x975D JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2C59 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2C6D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2C91 SWAP2 SWAP1 PUSH2 0x8A7F JUMP JUMPDEST SUB SWAP1 POP PUSH1 0x0 DUP7 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xC5829514 DUP7 PUSH1 0xF SIGNEXTEND PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2CC9 SWAP2 SWAP1 PUSH2 0x975D JUMP JUMPDEST PUSH1 0x80 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2CE1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2CF5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2D19 SWAP2 SWAP1 PUSH2 0x8FC9 JUMP JUMPDEST SWAP4 POP POP POP POP DUP1 PUSH1 0x12 SUB PUSH1 0xA EXP DUP3 DUP2 PUSH2 0x2D2D JUMPI INVALID JUMPDEST DUP6 MLOAD SWAP2 SWAP1 DIV SWAP3 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x2D4A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2D74 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP4 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xDA5 JUMPI PUSH1 0x0 PUSH1 0x60 DUP11 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH3 0x927C0 DUP13 PUSH1 0x20 ADD MLOAD DUP13 DUP13 DUP13 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x2DAB JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x2DC5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x98DA JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x2E03 SWAP2 SWAP1 PUSH2 0x9333 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2E3F JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2E44 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x2E68 JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x2E65 SWAP2 SWAP1 PUSH2 0x8A7F JUMP JUMPDEST SWAP1 POP JUMPDEST DUP7 DUP2 LT PUSH2 0x2EA2 JUMPI DUP4 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x2E99 JUMPI DUP8 DUP10 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2E86 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x2E71 JUMP JUMPDEST POP POP POP POP PUSH2 0xDA5 JUMP JUMPDEST DUP1 DUP9 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x2EAF JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2EC7 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x2EDF JUMPI POP POP POP PUSH2 0xDA5 JUMP JUMPDEST POP POP POP PUSH1 0x1 ADD PUSH2 0x2D7A JUMP JUMPDEST PUSH2 0x2EF2 PUSH2 0x7AA7 JUMP JUMPDEST PUSH2 0x2EFA PUSH2 0x7AA7 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 JUMPDEST DUP8 MLOAD DUP2 EQ PUSH2 0x2FFF JUMPI PUSH2 0x2F46 PUSH1 0x20 DUP10 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x2F18 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD SUB DUP8 DUP11 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2F2F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x6E35 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP11 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2F60 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x2F75 SWAP2 SWAP1 PUSH2 0x9333 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2FB2 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2FB7 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0x2FF5 JUMPI PUSH1 0x0 PUSH2 0x2FDB PUSH1 0x20 DUP4 MLOAD SUB DUP4 PUSH2 0x6E45 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP5 DUP2 GT ISZERO PUSH2 0x2FF3 JUMPI DUP4 DUP9 MSTORE PUSH1 0x20 DUP9 ADD DUP3 SWAP1 MSTORE SWAP4 POP DUP4 JUMPDEST POP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x2EFF JUMP JUMPDEST POP DUP1 PUSH2 0x300B JUMPI POP PUSH2 0x30FA JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP7 MLOAD DUP2 EQ PUSH2 0x30F7 JUMPI PUSH2 0x303E PUSH1 0x20 DUP9 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x3027 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD SUB DUP4 DUP10 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2F2F JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP10 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x3058 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x306D SWAP2 SWAP1 PUSH2 0x9333 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x30AA JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x30AF JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0x30ED JUMPI PUSH1 0x0 PUSH2 0x30D3 PUSH1 0x20 DUP4 MLOAD SUB DUP4 PUSH2 0x6E45 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP6 DUP2 GT ISZERO PUSH2 0x30EB JUMPI DUP4 DUP8 MSTORE PUSH1 0x20 DUP8 ADD DUP3 SWAP1 MSTORE SWAP5 POP DUP5 JUMPDEST POP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x300E JUMP JUMPDEST POP POP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 DUP5 ADD MLOAD PUSH1 0x60 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH2 0x3185 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH2 0x317E SWAP1 DUP1 PUSH2 0x3137 DUP7 DUP10 PUSH1 0x80 DUP5 ADD PUSH2 0x98F8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x315E SWAP3 SWAP2 SWAP1 PUSH2 0x98F8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x6E51 DUP2 MSTORE POP DUP4 PUSH2 0x5F03 JUMP JUMPDEST SWAP1 POP PUSH2 0xFFE JUMP JUMPDEST DUP2 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x319D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x31C7 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1645 JUMPI PUSH1 0x0 PUSH1 0x60 DUP9 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH3 0x1E8480 DUP11 PUSH1 0x40 ADD MLOAD DUP11 DUP11 DUP11 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x31FE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x3218 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x98DA JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x3256 SWAP2 SWAP1 PUSH2 0x9333 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x3292 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x3297 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x32BB JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x32B8 SWAP2 SWAP1 PUSH2 0x8A7F JUMP JUMPDEST SWAP1 POP JUMPDEST DUP1 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x32C8 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x32E0 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x32F8 JUMPI POP POP POP PUSH2 0x1645 JUMP JUMPDEST POP POP POP PUSH1 0x1 ADD PUSH2 0x31CD JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP6 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x3320 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x334A JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0xBCDED89 PUSH1 0xE2 SHL DUP2 MSTORE SWAP1 SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x2F37B624 SWAP1 PUSH2 0x337A SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x934F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3392 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x33A6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x33CA SWAP2 SWAP1 PUSH2 0x8A0C JUMP JUMPDEST ISZERO DUP1 PUSH2 0x344F JUMPI POP PUSH1 0x40 MLOAD PUSH4 0xBCDED89 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x2F37B624 SWAP1 PUSH2 0x33FD SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x934F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3415 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3429 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x344D SWAP2 SWAP1 PUSH2 0x8A0C JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x345B JUMPI POP POP PUSH2 0xFFE JUMP JUMPDEST PUSH2 0x3463 PUSH2 0x7A60 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xF8B2CB4F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0xF8B2CB4F SWAP1 PUSH2 0x348F SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x934F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x34A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x34BB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x34DF SWAP2 SWAP1 PUSH2 0x8A7F JUMP JUMPDEST DUP2 MSTORE PUSH1 0x40 MLOAD PUSH4 0xF8B2CB4F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0xF8B2CB4F SWAP1 PUSH2 0x350D SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x934F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3525 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3539 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x355D SWAP2 SWAP1 PUSH2 0x8A7F JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 MLOAD PUSH4 0x4A46C673 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x948D8CE6 SWAP1 PUSH2 0x358E SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x934F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x35A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x35BA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x35DE SWAP2 SWAP1 PUSH2 0x8A7F JUMP JUMPDEST PUSH1 0x40 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE MLOAD PUSH4 0x4A46C673 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x948D8CE6 SWAP1 PUSH2 0x3611 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x934F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3629 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x363D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3661 SWAP2 SWAP1 PUSH2 0x8A7F JUMP JUMPDEST DUP2 PUSH1 0x60 ADD DUP2 DUP2 MSTORE POP POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD4CADF68 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x36A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x36B7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x36DB SWAP2 SWAP1 PUSH2 0x8A7F JUMP JUMPDEST PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0xDA5 JUMPI DUP2 MLOAD PUSH2 0x36FF SWAP1 PUSH8 0x6F05B59D3B20000 PUSH2 0x6832 JUMP JUMPDEST DUP7 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x370B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD GT ISZERO PUSH2 0x371E JUMPI PUSH2 0xDA5 JUMP JUMPDEST DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xBA9530A6 PUSH3 0x493E0 DUP5 PUSH1 0x0 ADD MLOAD DUP6 PUSH1 0x40 ADD MLOAD DUP7 PUSH1 0x20 ADD MLOAD DUP8 PUSH1 0x60 ADD MLOAD DUP13 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x3751 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP10 PUSH1 0x80 ADD MLOAD PUSH1 0x40 MLOAD DUP9 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x377F SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9B22 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3797 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x37C8 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x37C5 SWAP2 DUP2 ADD SWAP1 PUSH2 0x8A7F JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x37F6 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x2328 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x232D JUMP JUMPDEST DUP1 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x3803 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x381B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x3831 JUMPI POP PUSH2 0xDA5 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x36E3 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 MLOAD PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x384A JUMPI INVALID JUMPDEST EQ DUP1 PUSH2 0x3862 JUMPI POP PUSH1 0x1 DUP4 MLOAD PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x3860 JUMPI INVALID JUMPDEST EQ JUMPDEST DUP1 PUSH2 0x3878 JUMPI POP PUSH1 0x40 DUP5 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND ISZERO JUMPDEST DUP1 PUSH2 0x388E JUMPI POP PUSH1 0x60 DUP5 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND ISZERO JUMPDEST ISZERO PUSH2 0x389B JUMPI POP PUSH1 0x0 PUSH2 0x397A JUMP JUMPDEST PUSH2 0x38A3 PUSH2 0x7AC1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x1FB09795 DUP9 DUP9 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x38D4 SWAP3 SWAP2 SWAP1 PUSH2 0x9AB5 JUMP JUMPDEST PUSH1 0xA0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x38EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3900 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3924 SWAP2 SWAP1 PUSH2 0x8F07 JUMP JUMPDEST SWAP2 SWAP5 POP SWAP3 POP SWAP1 POP PUSH1 0x1 DUP4 PUSH1 0x20 ADD MLOAD PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x393D JUMPI INVALID JUMPDEST EQ ISZERO DUP1 PUSH2 0x3948 JUMPI POP DUP1 ISZERO JUMPDEST DUP1 PUSH2 0x395B JUMPI POP DUP7 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO JUMPDEST ISZERO PUSH2 0x396C JUMPI PUSH1 0x0 SWAP4 POP POP POP POP PUSH2 0x397A JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND SWAP2 POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP1 PUSH2 0x3990 DUP6 DUP8 PUSH2 0x58AA JUMP JUMPDEST PUSH2 0x399B DUP8 DUP8 DUP8 PUSH2 0x6EA5 JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x39A7 JUMPI PUSH2 0x9A0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x276FDAD9 PUSH1 0xE1 SHL DUP2 MSTORE ADDRESS SWAP1 PUSH4 0x4EDFB5B2 SWAP1 PUSH2 0x39D0 SWAP1 DUP11 SWAP1 DUP8 SWAP1 DUP12 SWAP1 DUP12 SWAP1 PUSH1 0x4 ADD PUSH2 0x9A7C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x39E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x39FC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x3A24 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x8A97 JUMP JUMPDEST DUP8 PUSH1 0x80 ADD DUP2 SWAP1 MSTORE POP DUP7 PUSH1 0x80 ADD MLOAD SWAP2 POP PUSH2 0x3A9B PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 DUP8 DUP11 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x3A54 SWAP3 SWAP2 SWAP1 PUSH2 0x95F0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP9 DUP11 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x3A7B SWAP3 SWAP2 SWAP1 PUSH2 0x95F0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x700C DUP2 MSTORE POP DUP6 PUSH2 0x5F03 JUMP JUMPDEST SWAP1 POP SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x901754D7 DUP7 DUP7 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3AD8 SWAP3 SWAP2 SWAP1 PUSH2 0x937C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3AF0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3B04 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3B28 SWAP2 SWAP1 PUSH2 0x81CE JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x3B42 JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0xFFE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND ISZERO PUSH2 0x3BD4 JUMPI PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH2 0x3B7F SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x934F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3B97 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3BAB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3BCF SWAP2 SWAP1 PUSH2 0x8A7F JUMP JUMPDEST PUSH2 0x3BE0 JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND BALANCE JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x3BF5 JUMPI PUSH1 0x0 SWAP3 POP POP POP PUSH2 0xFFE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x3C2803F PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x1E1401F8 SWAP1 PUSH3 0x249F0 SWAP1 PUSH2 0x3C2A SWAP1 DUP11 SWAP1 DUP11 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x9477 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3C42 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x3C73 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x3C70 SWAP2 DUP2 ADD SWAP1 PUSH2 0x8A7F JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x3CB3 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x3CA1 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x3CA6 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 SWAP4 POP POP POP POP PUSH2 0xFFE JUMP JUMPDEST SWAP3 POP PUSH2 0xFFE SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x3CC9 DUP4 DUP6 PUSH2 0x58AA JUMP JUMPDEST PUSH1 0x20 DUP6 ADD MLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x2 DUP1 DUP3 MSTORE PUSH1 0x60 DUP3 DUP2 ADD SWAP1 SWAP4 MSTORE DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP6 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x3CFF JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP DUP5 DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x3D2D JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE DUP4 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x3D5D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x3D87 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP4 POP PUSH2 0x3D92 PUSH2 0x7A39 JUMP JUMPDEST PUSH2 0x3D9A PUSH2 0x58E9 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0xBCE JUMPI PUSH1 0x60 PUSH2 0x3DB9 DUP12 DUP10 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xAB0 JUMPI INVALID JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x7C268337 PUSH1 0xE1 SHL DUP2 MSTORE SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND SWAP1 PUSH4 0xF84D066E SWAP1 PUSH2 0x3DEF SWAP1 PUSH1 0x1 SWAP1 DUP6 SWAP1 DUP11 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x9820 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3E09 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x3E3E JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x3E3B SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x8888 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x3E6C JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0xB70 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xB75 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x3E7B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 DUP2 SGT PUSH2 0x3E95 JUMPI POP POP POP PUSH2 0xBCE JUMP JUMPDEST DUP1 DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x3EA2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP POP POP PUSH1 0x1 ADD PUSH2 0x3D9F JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x3ED4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x3EFE JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1645 JUMPI DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x343FBCDD PUSH3 0x61A80 DUP9 DUP9 DUP9 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x3F2D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3F53 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9477 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3F6B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x3F9C JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x3F99 SWAP2 DUP2 ADD SWAP1 PUSH2 0x8A7F JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x3FCA JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x15F1 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x15F6 JUMP JUMPDEST DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x3FD7 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3FEF JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x4005 JUMPI POP PUSH2 0x1645 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x3F04 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 PUSH2 0x401D DUP6 DUP8 PUSH2 0x58AA JUMP JUMPDEST DUP4 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x4035 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x405F JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH2 0x406E DUP10 DUP10 DUP10 DUP10 PUSH2 0x70F3 JUMP JUMPDEST SWAP5 POP SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x4086 JUMPI POP PUSH2 0x4140 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x413D JUMPI PUSH1 0x0 PUSH2 0x40F7 DUP10 DUP7 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x40AB SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x941F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP10 DUP8 DUP10 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x40CF SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x941F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x40EA JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x7248 JUMP JUMPDEST SWAP1 POP DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x4106 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x411E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x4134 JUMPI POP PUSH2 0x413D JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x4089 JUMP JUMPDEST POP POP JUMPDEST SWAP6 POP SWAP6 POP SWAP6 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x4157 DUP4 DUP6 PUSH2 0x58AA JUMP JUMPDEST DUP2 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x416F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x4199 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1645 JUMPI DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x144A2752 PUSH3 0xF4240 DUP8 DUP10 DUP9 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x41C8 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x41EE SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9477 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4206 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x4237 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x4234 SWAP2 DUP2 ADD SWAP1 PUSH2 0x8A7F JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x4265 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x15F1 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x15F6 JUMP JUMPDEST DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x4272 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x428A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x42A0 JUMPI POP PUSH2 0x1645 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x419F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH2 0x42B7 DUP5 DUP7 PUSH2 0x58AA JUMP JUMPDEST DUP3 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x42CF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x42F9 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x436E JUMPI PUSH1 0x0 PUSH2 0x4328 DUP10 DUP10 DUP10 DUP10 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x431B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x3AA7 JUMP JUMPDEST SWAP1 POP DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x4337 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x434F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x4365 JUMPI POP PUSH2 0x436E JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x42FF JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0x901754D7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND SWAP1 PUSH4 0x901754D7 SWAP1 PUSH2 0x439D SWAP1 DUP10 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x937C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x43B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x43C9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x43ED SWAP2 SWAP1 PUSH2 0x81CE JUMP JUMPDEST SWAP3 POP POP SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 DUP2 ADD SWAP1 SWAP3 MSTORE PUSH2 0x106C SWAP1 DUP1 PUSH2 0x4418 DUP7 DUP10 PUSH1 0x80 DUP5 ADD PUSH2 0x937C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x443F SWAP3 SWAP2 SWAP1 PUSH2 0x937C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x733A DUP2 MSTORE POP DUP4 PUSH2 0x5F03 JUMP JUMPDEST PUSH1 0x60 DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x4478 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x44A2 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP4 MLOAD DUP2 EQ PUSH2 0x2832 JUMPI PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x44E6 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x4530 JUMPI PUSH2 0x452B DUP4 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x450C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x7381 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x453C JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND BALANCE JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x4548 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x44A8 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 DUP2 ADD SWAP1 SWAP3 MSTORE PUSH2 0x106C SWAP1 DUP1 PUSH2 0x457A DUP7 DUP10 PUSH1 0x80 DUP5 ADD PUSH2 0x937C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x45A1 SWAP3 SWAP2 SWAP1 PUSH2 0x937C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x744B DUP2 MSTORE POP DUP4 PUSH2 0x5F03 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x45CD DUP4 DUP6 PUSH2 0x58AA JUMP JUMPDEST DUP2 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x45E5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x460F JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND ISZERO PUSH2 0x4632 JUMPI PUSH2 0x462D DUP8 DUP8 PUSH2 0x59AC JUMP JUMPDEST PUSH2 0x4635 JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND ISZERO PUSH2 0x4657 JUMPI PUSH2 0x4652 DUP9 DUP8 PUSH2 0x59AC JUMP JUMPDEST PUSH2 0x465A JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xDA5 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH2 0x46B0 JUMPI PUSH2 0x468F DUP5 PUSH4 0x95B68FE7 PUSH1 0xE0 SHL DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0xCA9 JUMPI INVALID JUMPDEST DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x469B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP4 POP DUP3 DUP2 MSTORE POP POP POP PUSH2 0x474A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND PUSH2 0x46D6 JUMPI PUSH2 0x468F DUP4 PUSH4 0xCD7724C3 PUSH1 0xE0 SHL DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0xCA9 JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH2 0x46F0 DUP6 PUSH4 0x95B68FE7 PUSH1 0xE0 SHL DUP11 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0xCA9 JUMPI INVALID JUMPDEST SWAP3 POP SWAP1 POP DUP1 ISZERO PUSH2 0x472D JUMPI PUSH2 0x470C DUP5 PUSH4 0xCD7724C3 PUSH1 0xE0 SHL DUP4 PUSH2 0x5A2B JUMP JUMPDEST DUP9 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x4718 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP5 POP DUP3 DUP2 MSTORE POP POP POP PUSH2 0x4748 JUMP JUMPDEST PUSH1 0x0 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x473B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP JUMPDEST POP JUMPDEST DUP1 ISZERO DUP1 PUSH2 0x476A JUMPI POP DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x475E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ JUMPDEST ISZERO PUSH2 0x4775 JUMPI POP PUSH2 0xDA5 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x465F JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x4799 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x47C3 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x17CA JUMPI DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x1F00CA74 PUSH3 0x249F0 DUP7 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x47F0 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4816 SWAP3 SWAP2 SWAP1 PUSH2 0x9B09 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x482E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x4864 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x4861 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x89DA JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x4892 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x1763 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1768 JUMP JUMPDEST DUP1 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x489F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x48B3 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x48CB JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x48E1 JUMPI POP PUSH2 0x17CA JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x47C9 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x48F6 DUP4 DUP6 PUSH2 0x58AA JUMP JUMPDEST DUP2 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x490E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x4938 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1645 JUMPI DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xFF1FD974 PUSH3 0xF4240 DUP9 DUP9 DUP9 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x4967 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x498D SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9477 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x49A5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x49D6 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x49D3 SWAP2 DUP2 ADD SWAP1 PUSH2 0x8A7F JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x4A04 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x15F1 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x15F6 JUMP JUMPDEST DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x4A11 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x4A29 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x4A3F JUMPI POP PUSH2 0x1645 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x493E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP1 PUSH2 0x4A57 DUP6 DUP8 PUSH2 0x58AA JUMP JUMPDEST PUSH2 0x4A62 DUP8 DUP8 DUP8 PUSH2 0x6EA5 JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x4A6E JUMPI PUSH2 0x9A0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x276FDAD9 PUSH1 0xE1 SHL DUP2 MSTORE ADDRESS SWAP1 PUSH4 0x4EDFB5B2 SWAP1 PUSH2 0x4A97 SWAP1 DUP11 SWAP1 DUP8 SWAP1 DUP12 SWAP1 DUP12 SWAP1 PUSH1 0x4 ADD PUSH2 0x9A7C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4AAF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4AC3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x4AEB SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x8A97 JUMP JUMPDEST PUSH1 0x80 DUP9 ADD DUP2 SWAP1 MSTORE DUP5 MLOAD SWAP1 SWAP3 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x4B0D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x4B37 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x4C22 JUMPI PUSH1 0x0 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xF1ED7FA4 DUP12 DUP12 DUP12 DUP12 DUP8 DUP2 MLOAD DUP2 LT PUSH2 0x4B65 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4B8C SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9A46 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4BA4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4BB8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4BDC SWAP2 SWAP1 PUSH2 0x8A7F JUMP JUMPDEST SWAP1 POP DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x4BEB JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x4C03 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x4C19 JUMPI POP PUSH2 0x4C22 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x4B3D JUMP JUMPDEST POP POP SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 PUSH2 0x4C3D DUP6 DUP8 PUSH2 0x58AA JUMP JUMPDEST PUSH2 0x4C49 DUP9 DUP9 DUP9 DUP9 PUSH2 0x70F3 JUMP JUMPDEST SWAP4 POP SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x4C60 JUMPI PUSH2 0x4140 JUMP JUMPDEST DUP4 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x4C78 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x4CA2 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD SWAP1 SWAP2 MSTORE SWAP1 SWAP3 POP PUSH2 0x4D0F SWAP1 DUP1 PUSH2 0x4CC6 DUP10 DUP8 DUP10 ISZERO PUSH1 0x80 DUP6 ADD PUSH2 0x941F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP10 DUP7 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x4CEF SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x941F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x7248 DUP2 MSTORE POP DUP7 PUSH2 0x5F03 JUMP JUMPDEST SWAP2 POP POP SWAP6 POP SWAP6 POP SWAP6 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 PUSH2 0x4D2C DUP6 DUP8 PUSH2 0x58AA JUMP JUMPDEST DUP4 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x4D44 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x4D6E JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP DUP9 MLOAD PUSH1 0x40 MLOAD PUSH4 0x939D863 PUSH1 0xE1 SHL DUP2 MSTORE SWAP2 SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x1273B0C6 SWAP1 PUSH2 0x4DA1 SWAP1 DUP11 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x937C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4DB9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4DCD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4DF1 SWAP2 SWAP1 PUSH2 0x81CE JUMP JUMPDEST SWAP3 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND ISZERO PUSH2 0x4E0F JUMPI POP PUSH1 0x1 SWAP4 POP DUP7 PUSH2 0x4EAE JUMP JUMPDEST DUP9 MLOAD PUSH1 0x40 MLOAD PUSH4 0x939D863 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x1273B0C6 SWAP1 PUSH2 0x4E40 SWAP1 DUP11 SWAP1 DUP13 SWAP1 PUSH1 0x4 ADD PUSH2 0x937C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4E58 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4E6C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4E90 SWAP2 SWAP1 PUSH2 0x81CE JUMP JUMPDEST SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x4EA7 JUMPI POP POP PUSH2 0x9A0 JUMP JUMPDEST POP PUSH1 0x0 SWAP4 POP DUP6 JUMPDEST DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDD58B41C PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4EE7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4EFB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4F1F SWAP2 SWAP1 PUSH2 0x8A0C JUMP JUMPDEST PUSH2 0x4F2A JUMPI POP POP PUSH2 0x9A0 JUMP JUMPDEST PUSH2 0x4FA2 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 DUP10 DUP8 DUP6 DUP15 PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x4F53 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9396 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP11 DUP8 DUP6 DUP15 PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x4F82 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9396 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x6100 DUP2 MSTORE POP DUP8 PUSH2 0x5F03 JUMP JUMPDEST SWAP3 POP POP POP SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x4FC9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x4FF3 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 EQ PUSH2 0x842 JUMPI PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x5037 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x5083 JUMPI PUSH2 0x507E DUP5 DUP5 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x505E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x7500 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x5086 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x5092 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x4FF9 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x50C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x50EA JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1645 JUMPI DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x838E6A22 PUSH3 0x493E0 DUP9 DUP9 DUP9 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x5119 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x513F SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9477 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5157 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x5188 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x5185 SWAP2 DUP2 ADD SWAP1 PUSH2 0x8A7F JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x51B6 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x15F1 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x15F6 JUMP JUMPDEST DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x51C3 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x50F0 JUMP JUMPDEST PUSH1 0x0 DUP5 PUSH1 0x80 ADD MLOAD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x51F0 JUMPI POP PUSH1 0x0 PUSH2 0xFFE JUMP JUMPDEST DUP5 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x418436BC PUSH3 0x7A120 DUP8 PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x522A JUMPI DUP7 PUSH2 0x5240 JUMP JUMPDEST PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE JUMPDEST DUP9 PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x5263 JUMPI DUP7 PUSH2 0x5279 JUMP JUMPDEST PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE JUMPDEST DUP7 PUSH1 0x0 DUP12 PUSH1 0x80 ADD MLOAD PUSH1 0x40 MLOAD DUP8 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x52A1 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x949B JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x52B9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x52EA JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x52E7 SWAP2 DUP2 ADD SWAP1 PUSH2 0x8A7F JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x5328 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x5318 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x531D JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 SWAP2 POP POP PUSH2 0xFFE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5333 DUP6 PUSH2 0x75CC JUMP JUMPDEST PUSH1 0xFF AND SWAP1 POP PUSH1 0x0 PUSH2 0x5343 DUP8 PUSH2 0x75CC JUMP JUMPDEST PUSH1 0xFF AND SWAP1 POP PUSH8 0xDE0B6B3A7640000 DUP2 PUSH1 0xA EXP DUP4 PUSH1 0xA EXP DUP8 DUP7 MUL MUL DUP2 PUSH2 0x5364 JUMPI INVALID JUMPDEST DIV DUP2 PUSH2 0x536C JUMPI INVALID JUMPDEST DIV SWAP4 POP POP POP POP PUSH2 0xFFE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH2 0x5385 DUP5 DUP7 PUSH2 0x58AA JUMP JUMPDEST DUP3 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x539D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x53C7 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH2 0x5432 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 DUP10 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x53EB SWAP3 SWAP2 SWAP1 PUSH2 0x937C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP10 DUP10 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x5412 SWAP3 SWAP2 SWAP1 PUSH2 0x937C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x75D7 DUP2 MSTORE POP DUP6 PUSH2 0x5F03 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x901754D7 PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND SWAP1 PUSH4 0x901754D7 SWAP1 PUSH2 0x439D SWAP1 DUP10 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x937C JUMP JUMPDEST PUSH2 0x546B PUSH2 0x7AA7 JUMP JUMPDEST PUSH2 0x5473 PUSH2 0x7AA7 JUMP JUMPDEST PUSH1 0x0 NOT DUP1 PUSH1 0x0 JUMPDEST DUP7 MLOAD DUP2 EQ PUSH2 0x556F JUMPI PUSH2 0x54AA PUSH1 0x20 DUP9 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x5493 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD SUB DUP8 DUP10 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2F2F JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP10 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x54C4 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x54D9 SWAP2 SWAP1 PUSH2 0x9333 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x5516 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x551B JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0x5565 JUMPI PUSH1 0x0 PUSH2 0x553F PUSH1 0x20 DUP4 MLOAD SUB DUP4 PUSH2 0x6E45 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 GT DUP1 ISZERO PUSH2 0x5550 JUMPI POP DUP5 DUP2 LT JUMPDEST ISZERO PUSH2 0x5563 JUMPI DUP4 DUP8 MSTORE PUSH1 0x20 DUP8 ADD DUP3 SWAP1 MSTORE SWAP4 POP DUP4 JUMPDEST POP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x547A JUMP JUMPDEST POP PUSH1 0x0 NOT DUP2 EQ ISZERO PUSH2 0x5580 JUMPI POP PUSH2 0x30FA JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP8 MLOAD DUP2 EQ PUSH2 0x30F7 JUMPI PUSH2 0x55B3 PUSH1 0x20 DUP10 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x559C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD SUB DUP4 DUP11 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2F2F JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP11 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x55CD JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x55E2 SWAP2 SWAP1 PUSH2 0x9333 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x561F JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x5624 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0x566E JUMPI PUSH1 0x0 PUSH2 0x5648 PUSH1 0x20 DUP4 MLOAD SUB DUP4 PUSH2 0x6E45 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 GT DUP1 ISZERO PUSH2 0x5659 JUMPI POP DUP6 DUP2 LT JUMPDEST ISZERO PUSH2 0x566C JUMPI DUP4 DUP9 MSTORE PUSH1 0x20 DUP9 ADD DUP3 SWAP1 MSTORE SWAP5 POP DUP5 JUMPDEST POP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x5583 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP6 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x21F8A721 DUP8 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x9232494E PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x56CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x56E0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5704 SWAP2 SWAP1 PUSH2 0x8A7F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5720 SWAP2 SWAP1 PUSH2 0x975D JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5738 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x574C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5770 SWAP2 SWAP1 PUSH2 0x81CE JUMP JUMPDEST SWAP2 POP DUP6 PUSH1 0x20 ADD MLOAD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x5785 JUMPI PUSH2 0x58A1 JUMP JUMPDEST PUSH1 0x0 DUP1 JUMPDEST DUP8 PUSH1 0x20 ADD MLOAD MLOAD DUP2 LT ISZERO PUSH2 0x589E JUMPI PUSH1 0x2 DUP9 PUSH1 0x20 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x57A8 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD LT ISZERO PUSH2 0x57BC JUMPI PUSH2 0x5896 JUMP JUMPDEST DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x7F9C0ECD PUSH3 0x493E0 DUP11 PUSH1 0x20 ADD MLOAD DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x57DF JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 PUSH1 0x1 DUP11 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x57F7 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x581C SWAP3 SWAP2 SWAP1 PUSH2 0x9614 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5834 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x5865 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x5862 SWAP2 DUP2 ADD SWAP1 PUSH2 0x8A7F JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x586E JUMPI PUSH2 0x5896 JUMP JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x5894 JUMPI DUP1 SWAP3 POP DUP9 PUSH1 0x20 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x5889 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP4 POP JUMPDEST POP JUMPDEST PUSH1 0x1 ADD PUSH2 0x5789 JUMP JUMPDEST POP POP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x58E5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x58DC SWAP1 PUSH2 0x9954 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x58F1 PUSH2 0x7A39 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP2 ADD DUP3 MSTORE ADDRESS DUP1 DUP3 MSTORE PUSH1 0x0 PUSH1 0x20 DUP4 ADD DUP2 SWAP1 MSTORE SWAP3 DUP3 ADD MSTORE PUSH1 0x60 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP2 DUP3 SWAP2 SWAP1 DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x593A PUSH2 0x7AE3 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x5932 JUMPI SWAP1 POP POP SWAP1 POP PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP6 PUSH1 0x0 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP DUP2 MSTORE POP DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x5998 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x3795FB1 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x6F2BF62 SWAP1 PUSH2 0x59DB SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x934F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x59F3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5A07 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x397A SWAP2 SWAP1 PUSH2 0x81CE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH2 0x5A41 JUMPI PUSH2 0x5B07 JUMP JUMPDEST PUSH1 0x60 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH3 0x249F0 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x5A63 SWAP2 SWAP1 PUSH2 0x975D JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x5AA1 SWAP2 SWAP1 PUSH2 0x9333 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x5ADD JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x5AE2 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP DUP2 ISZERO PUSH2 0x5B05 JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x5B02 SWAP2 SWAP1 PUSH2 0x8A7F JUMP JUMPDEST SWAP3 POP JUMPDEST POP JUMPDEST SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD9638D36 DUP12 PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5B45 SWAP2 SWAP1 PUSH2 0x975D JUMP JUMPDEST PUSH1 0xA0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5B5D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5B71 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5B95 SWAP2 SWAP1 PUSH2 0x8FFE JUMP JUMPDEST SWAP5 POP SWAP5 POP POP POP SWAP3 POP PUSH1 0x0 PUSH3 0xF4240 SWAP1 POP DUP11 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x5CBD JUMPI PUSH1 0x0 PUSH2 0x5BD4 DUP10 PUSH5 0xE8D4A51000 PUSH2 0x7627 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x5BF8 PUSH12 0x33B2E3C9FD0803CE8000000 PUSH2 0x5BF2 DUP9 DUP6 PUSH2 0x765D JUMP JUMPDEST SWAP1 PUSH2 0x7627 JUMP JUMPDEST SWAP1 POP DUP5 DUP2 LT PUSH2 0x5C10 JUMPI PUSH1 0x0 SWAP7 POP POP POP POP POP POP POP PUSH2 0x5DC6 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5C9F PUSH8 0xDE0B6B3A7640000 PUSH2 0x5C99 DUP13 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x568D4B6F PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5C5A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5C6E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5C92 SWAP2 SWAP1 PUSH2 0x8A7F JUMP JUMPDEST DUP7 SWAP1 PUSH2 0x7627 JUMP JUMPDEST SWAP1 PUSH2 0x7679 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x5CAD DUP5 DUP4 PUSH2 0x76A3 JUMP JUMPDEST SWAP9 POP PUSH2 0x5DC6 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP11 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x5DBD JUMPI DUP8 DUP5 DUP2 GT ISZERO PUSH2 0x5CF2 JUMPI PUSH1 0x0 SWAP6 POP POP POP POP POP POP PUSH2 0x5DC6 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5D0E PUSH12 0x33B2E3C9FD0803CE8000000 PUSH2 0x5BF2 DUP9 DUP6 PUSH2 0x76A3 JUMP JUMPDEST SWAP1 POP DUP4 DUP2 GT PUSH2 0x5D26 JUMPI PUSH1 0x0 SWAP7 POP POP POP POP POP POP POP PUSH2 0x5DC6 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5DAB DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xFAE036D5 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5D64 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5D78 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5D9C SWAP2 SWAP1 PUSH2 0x8A7F JUMP JUMPDEST PUSH8 0xDE0B6B3A7640000 SWAP1 PUSH2 0x765D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x5CAD DUP3 PUSH2 0x5C99 DUP7 DUP9 PUSH2 0x7627 JUMP JUMPDEST PUSH1 0x0 SWAP5 POP POP POP POP POP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x5DDB PUSH2 0x7B15 JUMP JUMPDEST DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x5DEF SWAP2 SWAP1 PUSH2 0x8B2B JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x5E09 SWAP2 SWAP1 PUSH2 0x8B0F JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH4 0x22DB5ED1 PUSH1 0xE2 SHL DUP6 DUP8 DUP7 PUSH2 0x5E24 DUP13 PUSH2 0x76C2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x5E37 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x99DE JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x5E75 SWAP2 SWAP1 PUSH2 0x9333 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x5EB0 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x5EB5 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH2 0x5ECD JUMPI PUSH1 0x0 SWAP6 POP POP POP POP POP POP PUSH2 0x397A JUMP JUMPDEST DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x5EE1 SWAP2 SWAP1 PUSH2 0x89DA JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x5EED JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP6 POP POP POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x5F1C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x5F46 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP2 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x5F58 JUMPI PUSH2 0x59A6 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5F89 DUP5 PUSH1 0x0 ADD MLOAD DUP6 PUSH1 0x20 ADD MLOAD DUP6 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x5F74 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 PUSH1 0x40 ADD MLOAD PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x5F96 JUMPI POP PUSH2 0x59A6 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5FB3 DUP6 PUSH1 0x20 ADD MLOAD DUP7 PUSH1 0x0 ADD MLOAD DUP5 DUP9 PUSH1 0x40 ADD MLOAD PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x5FC1 JUMPI POP POP PUSH2 0x59A6 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x60F7 JUMPI PUSH1 0x0 JUMPDEST PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x60B9 JUMPI PUSH2 0x5FF7 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x5FE8 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 DUP7 PUSH2 0x7703 JUMP JUMPDEST SWAP4 POP DUP4 PUSH2 0x6003 JUMPI PUSH2 0x60B9 JUMP JUMPDEST PUSH2 0x6012 PUSH2 0x2715 PUSH2 0x2710 DUP7 PUSH2 0x7703 JUMP JUMPDEST SWAP4 POP DUP4 PUSH2 0x601E JUMPI PUSH2 0x60B9 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x603B DUP9 PUSH1 0x20 ADD MLOAD DUP10 PUSH1 0x0 ADD MLOAD DUP8 DUP12 PUSH1 0x40 ADD MLOAD PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x6048 JUMPI POP PUSH2 0x60B9 JUMP JUMPDEST DUP1 SWAP4 POP DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x6057 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 LT PUSH2 0x60B0 JUMPI PUSH1 0x0 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x6073 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x2710 DUP10 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x608A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 SUB MUL DUP2 PUSH2 0x609C JUMPI INVALID JUMPDEST DIV SWAP1 POP PUSH1 0x5 DUP2 GT PUSH2 0x60AE JUMPI POP POP PUSH2 0x60B9 JUMP JUMPDEST POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x5FD0 JUMP JUMPDEST POP PUSH2 0x60D8 DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x60C9 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP4 DUP6 PUSH2 0x7703 JUMP JUMPDEST DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x60E4 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x5FC4 JUMP JUMPDEST POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP8 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x611C SWAP2 SWAP1 PUSH2 0x8223 JUMP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 POP SWAP4 POP DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x6206 JUMPI PUSH1 0x40 MLOAD PUSH4 0x51400F0B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0xA2801E16 SWAP1 PUSH3 0x493E0 SWAP1 PUSH2 0x616F SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x975D JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6187 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x61B8 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x61B5 SWAP2 DUP2 ADD SWAP1 PUSH2 0x8A7F JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x61FA JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x61E6 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x61EB JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 SWAP6 POP POP POP POP POP POP PUSH2 0x397A JUMP JUMPDEST SWAP5 POP PUSH2 0x397A SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xCA19EBD9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH4 0xCA19EBD9 SWAP1 PUSH3 0x493E0 SWAP1 PUSH2 0x616F SWAP1 DUP8 SWAP1 DUP12 SWAP1 PUSH1 0x4 ADD PUSH2 0x9363 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x2 DUP3 DUP5 MLOAD SUB LT ISZERO PUSH2 0x625F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x58DC SWAP1 PUSH2 0x9910 JUMP JUMPDEST PUSH2 0x6267 PUSH2 0x7B35 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP1 DUP3 ADD DUP4 MSTORE PUSH2 0x1F4 DUP3 MSTORE PUSH2 0xBB8 PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x2710 DUP3 DUP5 ADD MSTORE DUP3 MLOAD PUSH1 0x3 DUP1 DUP3 MSTORE PUSH1 0x80 DUP3 ADD SWAP1 SWAP5 MSTORE SWAP2 SWAP3 SWAP1 SWAP2 SWAP1 DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP PUSH1 0x0 DUP1 DUP7 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x62BB JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 DUP8 DUP8 PUSH1 0x1 ADD DUP2 MLOAD DUP2 LT PUSH2 0x62D6 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 JUMPDEST PUSH1 0x3 DUP2 LT ISZERO PUSH2 0x63CB JUMPI PUSH1 0x0 DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x1698EE82 DUP6 DUP6 DUP11 DUP7 PUSH1 0x3 DUP2 LT PUSH2 0x630B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x632E SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x97A5 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6346 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x635A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x637E SWAP2 SWAP1 PUSH2 0x81CE JUMP JUMPDEST SWAP1 POP PUSH2 0x6389 DUP2 PUSH2 0x775B JUMP JUMPDEST ISZERO PUSH2 0x63C2 JUMPI DUP1 DUP7 DUP7 DUP1 PUSH1 0x1 ADD SWAP8 POP DUP2 MLOAD DUP2 LT PUSH2 0x63A1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x62E3 JUMP JUMPDEST POP POP POP DUP1 PUSH2 0x63DB JUMPI POP POP POP PUSH2 0x397A JUMP JUMPDEST DUP6 MLOAD DUP6 PUSH1 0x2 ADD EQ ISZERO PUSH2 0x64D1 JUMPI DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x63FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x6431 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x641C JUMPI SWAP1 POP JUMPDEST POP SWAP4 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x64C8 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE SWAP1 PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x6469 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP3 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x6480 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x6494 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x64A8 JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE PUSH1 0x1 ADD PUSH2 0x6437 JUMP JUMPDEST POP POP POP POP PUSH2 0x397A JUMP JUMPDEST PUSH1 0x60 PUSH2 0x64E1 DUP9 DUP9 DUP9 PUSH1 0x1 ADD PUSH2 0x6239 JUMP JUMPDEST SWAP1 POP DUP1 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x64F6 JUMPI POP POP POP POP PUSH2 0x397A JUMP JUMPDEST DUP1 MLOAD DUP3 MUL PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x650F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x6543 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x652E JUMPI SWAP1 POP JUMPDEST POP SWAP5 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x66C3 JUMPI PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x66BA JUMPI DUP3 MLOAD DUP3 DUP2 MUL DUP3 ADD SWAP1 DUP5 SWAP1 DUP4 SWAP1 DUP2 LT PUSH2 0x6571 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD PUSH1 0x1 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x6592 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x65BC JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP DUP9 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x65C9 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x65E0 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x65F4 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x6608 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP PUSH1 0x0 JUMPDEST DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x6637 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD DUP2 LT ISZERO PUSH2 0x66B0 JUMPI DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x6653 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x6666 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP10 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x667A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 PUSH1 0x1 ADD DUP2 MLOAD DUP2 LT PUSH2 0x6690 JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE PUSH1 0x1 ADD PUSH2 0x662B JUMP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x6554 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x6549 JUMP JUMPDEST POP POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x2 DUP4 MLOAD LT ISZERO DUP1 ISZERO PUSH2 0x66E7 JUMPI POP DUP2 MLOAD PUSH1 0x1 ADD DUP4 MLOAD EQ JUMPDEST PUSH2 0x6703 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x58DC SWAP1 PUSH2 0x9999 JUMP JUMPDEST DUP2 MLOAD PUSH1 0x3 MUL DUP4 MLOAD PUSH1 0x14 MUL ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x6723 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x674E JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x20 DUP2 ADD PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x682A JUMPI DUP1 ISZERO PUSH2 0x67FD JUMPI PUSH1 0x0 DUP5 PUSH1 0x1 DUP4 SUB DUP2 MLOAD DUP2 LT PUSH2 0x6778 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDDCA3F43 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x67B8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x67CC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x67F0 SWAP2 SWAP1 PUSH2 0x8F83 JUMP JUMPDEST PUSH1 0xE8 SHL DUP4 MSTORE POP PUSH1 0x3 SWAP1 SWAP2 ADD SWAP1 JUMPDEST PUSH1 0x0 DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x680B JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD PUSH1 0x60 SHL DUP4 MSTORE POP PUSH1 0x14 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x6758 JUMP JUMPDEST POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MUL DUP4 ISZERO DUP1 ISZERO SWAP1 PUSH2 0x684F JUMPI POP DUP3 DUP5 DUP3 DUP2 PUSH2 0x684B JUMPI INVALID JUMPDEST DIV EQ ISZERO JUMPDEST ISZERO PUSH2 0x685E JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x59A6 JUMP JUMPDEST PUSH8 0x6F05B59D3B20000 DUP2 ADD DUP2 DUP2 LT ISZERO PUSH2 0x687C JUMPI PUSH1 0x0 SWAP3 POP POP POP PUSH2 0x59A6 JUMP JUMPDEST PUSH8 0xDE0B6B3A7640000 SWAP1 DIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x68A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x68D2 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x2925 JUMPI DUP3 PUSH1 0x1 DUP3 DUP6 MLOAD SUB SUB DUP2 MLOAD DUP2 LT PUSH2 0x68F3 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x6907 JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE PUSH1 0x1 ADD PUSH2 0x68D8 JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x6940 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x696A JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x2925 JUMPI DUP3 PUSH1 0x1 DUP3 DUP6 MLOAD SUB SUB DUP2 MLOAD DUP2 LT PUSH2 0x698B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x699F JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE PUSH1 0x1 ADD PUSH2 0x6970 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x69D8 SWAP2 SWAP1 PUSH2 0x81EA JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x69F2 SWAP2 SWAP1 PUSH2 0x81CE JUMP JUMPDEST SWAP1 POP ADDRESS PUSH4 0xE8E4AF09 DUP4 DUP6 DUP5 PUSH2 0x6A06 DUP11 PUSH2 0x76C2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A25 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x93C1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6A3D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x6A72 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x6A6F SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x89DA JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x6AB3 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x6AA0 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x6AA5 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 SWAP5 POP POP POP POP POP PUSH2 0x397A JUMP JUMPDEST DUP1 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x6AC0 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP5 POP POP POP POP POP PUSH2 0x397A JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFFE DUP4 PUSH2 0x5C99 PUSH2 0x6AE7 DUP3 PUSH1 0x1 PUSH2 0x76A3 JUMP JUMPDEST PUSH2 0x6AF1 DUP9 DUP8 PUSH2 0x7627 JUMP JUMPDEST SWAP1 PUSH2 0x765D JUMP JUMPDEST PUSH1 0x0 PUSH1 0x12 SWAP1 POP PUSH1 0x0 PUSH1 0x60 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x4 DUP2 MSTORE PUSH1 0x20 ADD PUSH4 0x313CE567 PUSH1 0xE0 SHL DUP2 MSTORE POP PUSH1 0x40 MLOAD PUSH2 0x6B35 SWAP2 SWAP1 PUSH2 0x9333 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x6B70 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x6B75 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x6B89 JUMPI POP PUSH1 0x20 DUP2 MLOAD LT ISZERO JUMPDEST ISZERO PUSH2 0x6B9C JUMPI PUSH2 0x6B99 DUP2 PUSH1 0x0 PUSH2 0x6E45 JUMP JUMPDEST SWAP3 POP JUMPDEST POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD9638D36 DUP12 PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6BD9 SWAP2 SWAP1 PUSH2 0x975D JUMP JUMPDEST PUSH1 0xA0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6BF1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x6C05 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x6C29 SWAP2 SWAP1 PUSH2 0x8FFE JUMP JUMPDEST SWAP5 POP SWAP5 POP POP POP SWAP3 POP DUP10 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x6D40 JUMPI PUSH1 0x0 DUP8 SWAP1 POP PUSH1 0x0 PUSH2 0x6CD9 DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x568D4B6F PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6C92 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x6CA6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x6CCA SWAP2 SWAP1 PUSH2 0x8A7F JUMP JUMPDEST PUSH8 0xDE0B6B3A7640000 SWAP1 PUSH2 0x76A3 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x6CF3 DUP3 PUSH2 0x5C99 DUP6 PUSH8 0xDE0B6B3A7640000 PUSH2 0x7627 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x6D11 PUSH12 0x33B2E3C9FD0803CE8000000 PUSH2 0x5BF2 DUP10 DUP6 PUSH2 0x765D JUMP JUMPDEST SWAP1 POP DUP6 DUP2 LT PUSH2 0x6D2A JUMPI PUSH1 0x0 SWAP8 POP POP POP POP POP POP POP POP PUSH2 0x5DC6 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5CAD PUSH1 0x1 PUSH2 0x6AF1 DUP6 PUSH5 0xE8D4A51000 PUSH2 0x7679 JUMP JUMPDEST DUP10 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x6E25 JUMPI PUSH1 0x0 PUSH2 0x6D6F DUP9 PUSH5 0xE8D4A51000 PUSH2 0x7627 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x6DAF DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xFAE036D5 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5D64 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x6DC9 PUSH8 0xDE0B6B3A7640000 PUSH2 0x5C99 DUP6 DUP6 PUSH2 0x7627 JUMP JUMPDEST SWAP1 POP DUP6 DUP2 GT ISZERO PUSH2 0x6DE2 JUMPI PUSH1 0x0 SWAP7 POP POP POP POP POP POP POP PUSH2 0x5DC6 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6DFE PUSH12 0x33B2E3C9FD0803CE8000000 PUSH2 0x5BF2 DUP10 DUP6 PUSH2 0x76A3 JUMP JUMPDEST SWAP1 POP DUP5 DUP2 GT PUSH2 0x6E17 JUMPI PUSH1 0x0 SWAP8 POP POP POP POP POP POP POP POP PUSH2 0x5DC6 JUMP JUMPDEST POP SWAP6 POP PUSH2 0x5DC6 SWAP5 POP POP POP POP POP JUMP JUMPDEST POP PUSH1 0x0 SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x6E40 DUP4 DUP4 DUP4 PUSH2 0x7967 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x397A DUP4 DUP4 PUSH2 0x798E JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x6E5C PUSH2 0x7B15 JUMP JUMPDEST DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x6E70 SWAP2 SWAP1 PUSH2 0x8B2B JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x6E8A SWAP2 SWAP1 PUSH2 0x8B0F JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH4 0x205E01D7 PUSH1 0xE1 SHL DUP6 DUP8 DUP7 PUSH2 0x5E24 DUP13 PUSH2 0x76C2 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH1 0x20 ADD MLOAD SWAP1 POP PUSH1 0x60 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x910FFC71 DUP8 PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x6EE3 JUMPI DUP7 PUSH2 0x6EF9 JUMP JUMPDEST PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE JUMPDEST DUP9 PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x6F1C JUMPI DUP7 PUSH2 0x6F32 JUMP JUMPDEST PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP2 DUP3 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP7 SWAP1 SHL AND SWAP1 SWAP2 MSTORE PUSH2 0x6F66 SWAP3 SWAP2 SWAP1 PUSH1 0x1 SWAP1 PUSH1 0x24 DUP2 ADD PUSH2 0x9443 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6F7E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x6F92 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x6FBA SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x861B JUMP JUMPDEST POP POP SWAP1 POP DUP1 MLOAD DUP7 PUSH1 0x0 ADD MLOAD LT PUSH2 0x6FD6 JUMPI POP PUSH1 0x0 SWAP2 POP PUSH2 0x397A SWAP1 POP JUMP JUMPDEST DUP1 DUP7 PUSH1 0x0 ADD MLOAD DUP2 MLOAD DUP2 LT PUSH2 0x6FE6 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP3 POP PUSH1 0xF8 DUP4 SWAP1 SHR PUSH1 0x0 SHR PUSH1 0xBB EQ ISZERO PUSH2 0x17CA JUMPI POP PUSH1 0x0 SWAP2 POP PUSH2 0x397A SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x7017 PUSH2 0x7B53 JUMP JUMPDEST DUP5 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x702B SWAP2 SWAP1 PUSH2 0x82D1 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP7 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x7045 SWAP2 SWAP1 PUSH2 0x82D1 JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0x3C7B5FE9 PUSH1 0xE2 SHL DUP2 MSTORE SWAP1 SWAP2 POP ADDRESS SWAP1 PUSH4 0xF1ED7FA4 SWAP1 PUSH2 0x7072 SWAP1 DUP6 SWAP1 DUP6 SWAP1 DUP9 SWAP1 DUP12 SWAP1 PUSH1 0x4 ADD PUSH2 0x9A46 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x708A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x70BA JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x70B7 SWAP2 DUP2 ADD SWAP1 PUSH2 0x8A7F JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x70E8 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x6AA0 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x6AA5 JUMP JUMPDEST SWAP4 POP PUSH2 0x397A SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x57A281DC DUP7 DUP7 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7126 SWAP3 SWAP2 SWAP1 PUSH2 0x937C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x713E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x7152 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x717A SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x8583 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 SWAP2 POP DUP1 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x7213 JUMPI PUSH1 0x40 MLOAD PUSH4 0x15E8A077 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND SWAP1 PUSH4 0x57A281DC SWAP1 PUSH2 0x71B8 SWAP1 DUP8 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x937C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x71D0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x71E4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x720C SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x8583 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 SWAP2 POP JUMPDEST DUP1 MLOAD DUP7 LT PUSH2 0x7228 JUMPI PUSH1 0x0 DUP1 SWAP3 POP SWAP3 POP POP PUSH2 0x58A1 JUMP JUMPDEST DUP1 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x7234 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP3 POP POP SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP7 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x7262 SWAP2 SWAP1 PUSH2 0x8281 JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP DUP1 ISZERO PUSH2 0x7306 JUMPI PUSH1 0x40 MLOAD PUSH4 0x3CD0243B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x79A04876 SWAP1 PUSH3 0x493E0 SWAP1 PUSH2 0x72A2 SWAP1 PUSH1 0x0 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x9363 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x72B9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x72EA JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x72E7 SWAP2 DUP2 ADD SWAP1 PUSH2 0x8FA6 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x72FA JUMPI PUSH1 0x0 SWAP4 POP POP POP POP PUSH2 0x397A JUMP JUMPDEST POP SWAP4 POP PUSH2 0x397A SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x66410A21 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x66410A21 SWAP1 PUSH3 0x493E0 SWAP1 PUSH2 0x72A2 SWAP1 PUSH1 0x0 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x9363 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x7353 SWAP2 SWAP1 PUSH2 0x81EA JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x736D SWAP2 SWAP1 PUSH2 0x81CE JUMP JUMPDEST SWAP1 POP ADDRESS PUSH4 0x30D6570D DUP4 DUP6 DUP5 PUSH2 0x6A06 DUP11 PUSH2 0x76C2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP6 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x73A9 SWAP2 SWAP1 PUSH2 0x934F JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x73E7 SWAP2 SWAP1 PUSH2 0x9333 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x7422 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x7427 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x743B JUMPI POP PUSH1 0x20 DUP2 MLOAD LT ISZERO JUMPDEST ISZERO PUSH2 0x682A JUMPI PUSH2 0x106C DUP2 PUSH1 0x0 PUSH2 0x6E45 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x7464 SWAP2 SWAP1 PUSH2 0x81EA JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x747E SWAP2 SWAP1 PUSH2 0x81CE JUMP JUMPDEST SWAP1 POP ADDRESS PUSH4 0xA4698417 PUSH3 0x61A80 DUP5 DUP7 DUP6 PUSH2 0x7496 DUP12 PUSH2 0x76C2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP7 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x74B5 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x93C1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x74CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x6A72 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x6A6F SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x89DA JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDD62ED3E PUSH1 0xE0 SHL DUP7 DUP7 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x752A SWAP3 SWAP2 SWAP1 PUSH2 0x937C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x7568 SWAP2 SWAP1 PUSH2 0x9333 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x75A3 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x75A8 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x75BC JUMPI POP PUSH1 0x20 DUP2 MLOAD LT ISZERO JUMPDEST ISZERO PUSH2 0x17CA JUMPI PUSH2 0x5DC6 DUP2 PUSH1 0x0 PUSH2 0x6E45 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x59A6 DUP3 PUSH2 0x6AF7 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x75F0 SWAP2 SWAP1 PUSH2 0x81EA JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP1 DUP7 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x760B SWAP2 SWAP1 PUSH2 0x81EA JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x761B DUP5 DUP5 DUP4 DUP10 PUSH2 0x3AA7 JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x7636 JUMPI POP PUSH1 0x0 PUSH2 0x59A6 JUMP JUMPDEST DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 PUSH2 0x7643 JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x397A JUMPI PUSH2 0x397A PUSH2 0x7658 PUSH1 0x1 DUP7 DUP7 PUSH2 0x79B8 JUMP JUMPDEST PUSH2 0x7A12 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x397A JUMPI PUSH2 0x397A PUSH2 0x7658 PUSH1 0x0 DUP7 DUP7 PUSH2 0x79B8 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x768F JUMPI PUSH2 0x768F PUSH2 0x7658 PUSH1 0x3 DUP6 DUP6 PUSH2 0x79B8 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP2 PUSH2 0x769A JUMPI INVALID JUMPDEST DIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x76BC JUMPI PUSH2 0x76BC PUSH2 0x7658 PUSH1 0x2 DUP6 DUP6 PUSH2 0x79B8 JUMP JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP2 PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP2 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x76F2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP4 ISZERO DUP1 PUSH2 0x7710 JUMPI POP DUP2 ISZERO JUMPDEST DUP1 PUSH2 0x7719 JUMPI POP DUP3 ISZERO JUMPDEST ISZERO PUSH2 0x7726 JUMPI POP PUSH1 0x0 PUSH2 0x397A JUMP JUMPDEST DUP4 DUP3 MUL DUP3 DUP6 DUP3 DUP2 PUSH2 0x7733 JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x7743 JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x397A JUMP JUMPDEST DUP4 PUSH1 0x1 DUP6 SUB DUP3 ADD DUP2 PUSH2 0x7751 JUMPI INVALID JUMPDEST DIV SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 EXTCODESIZE DUP1 PUSH2 0x776E JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x9AF JUMP JUMPDEST POP DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDFE1681 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x77A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x77BC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x77E0 SWAP2 SWAP1 PUSH2 0x81CE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x70A08231 DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x780B SWAP2 SWAP1 PUSH2 0x934F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7823 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x7837 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x785B SWAP2 SWAP1 PUSH2 0x8A7F JUMP JUMPDEST PUSH2 0x7867 JUMPI POP PUSH1 0x0 PUSH2 0x9AF JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD21220A7 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x78A0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x78B4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x78D8 SWAP2 SWAP1 PUSH2 0x81CE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x70A08231 DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7903 SWAP2 SWAP1 PUSH2 0x934F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x791B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x792F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x7953 SWAP2 SWAP1 PUSH2 0x8A7F JUMP JUMPDEST PUSH2 0x795F JUMPI POP PUSH1 0x0 PUSH2 0x9AF JUMP JUMPDEST POP PUSH1 0x1 SWAP2 SWAP1 POP JUMP JUMPDEST DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO PUSH2 0x7986 JUMPI PUSH2 0x7986 PUSH2 0x7658 PUSH1 0x5 DUP6 MLOAD DUP6 PUSH1 0x20 ADD PUSH2 0x7A1A JUMP JUMPDEST SWAP2 ADD PUSH1 0x20 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO PUSH2 0x79AF JUMPI PUSH2 0x79AF PUSH2 0x7658 PUSH1 0x5 DUP6 MLOAD DUP6 PUSH1 0x20 ADD PUSH2 0x7A1A JUMP JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH4 0xE946C1BB PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x79D7 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x97F1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH1 0x60 PUSH4 0x28006595 PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x79D7 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9812 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP1 NOT AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 SWAP1 PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY POP SWAP2 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x59A6 DUP2 PUSH2 0x9C44 JUMP JUMPDEST DUP1 MLOAD PUSH2 0x59A6 DUP2 PUSH2 0x9C44 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x7BC3 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x7BD6 PUSH2 0x7BD1 DUP3 PUSH2 0x9BBB JUMP JUMPDEST PUSH2 0x9B95 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x7BF7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x7C1F JUMPI DUP2 CALLDATALOAD PUSH2 0x7C0D DUP2 PUSH2 0x9C44 JUMP JUMPDEST DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x7BFA JUMP JUMPDEST POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x7C3A JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x7C48 PUSH2 0x7BD1 DUP3 PUSH2 0x9BBB JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x7C1F JUMPI PUSH2 0x7C70 DUP9 DUP5 DUP5 CALLDATALOAD DUP11 ADD ADD PUSH2 0x7BB3 JUMP JUMPDEST DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x7C59 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x7C92 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x7CA0 PUSH2 0x7BD1 DUP3 PUSH2 0x9BBB JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x7C1F JUMPI PUSH2 0x7CC8 DUP9 DUP5 DUP5 CALLDATALOAD DUP11 ADD ADD PUSH2 0x7E71 JUMP JUMPDEST DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x7CB1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x7CEA JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x7CF8 PUSH2 0x7BD1 DUP3 PUSH2 0x9BBB JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x7D19 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x7C1F JUMPI DUP2 CALLDATALOAD PUSH2 0x7D2F DUP2 PUSH2 0x9C44 JUMP JUMPDEST DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x7D1C JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x7D51 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x7D5F PUSH2 0x7BD1 DUP3 PUSH2 0x9BBB JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD PUSH1 0x80 DUP1 DUP6 MUL DUP8 ADD DUP4 ADD DUP9 LT ISZERO PUSH2 0x7D82 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x7DA9 JUMPI PUSH2 0x7D97 DUP10 DUP5 PUSH2 0x812D JUMP JUMPDEST DUP6 MSTORE SWAP4 DUP4 ADD SWAP4 SWAP2 DUP2 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x7D85 JUMP JUMPDEST POP POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x7DC5 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x7DD3 PUSH2 0x7BD1 DUP3 PUSH2 0x9BBB JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x7DF4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x7C1F JUMPI DUP2 CALLDATALOAD DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x7DF7 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x7E23 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x7E31 PUSH2 0x7BD1 DUP3 PUSH2 0x9BBB JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x7E52 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x7C1F JUMPI DUP2 MLOAD DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x7E55 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x7E81 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x7E8F PUSH2 0x7BD1 DUP3 PUSH2 0x9BDA JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x7EA6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP5 ADD CALLDATACOPY PUSH1 0x0 SWAP1 DUP3 ADD PUSH1 0x20 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x7ECF JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x7EDD PUSH2 0x7BD1 DUP3 PUSH2 0x9BDA JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x7EF4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2832 DUP2 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x9BFD JUMP JUMPDEST DUP1 MLOAD PUSH1 0x2 DUP2 LT PUSH2 0x59A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x7F25 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x7F2F PUSH1 0x60 PUSH2 0x9B95 JUMP JUMPDEST SWAP1 POP DUP2 CALLDATALOAD PUSH2 0x7F3C DUP2 PUSH2 0x9C44 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH2 0x7F4C DUP2 PUSH2 0x9C67 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP3 ADD CALLDATALOAD PUSH2 0x7F5F DUP2 PUSH2 0x9C67 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x7F7B JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x7F85 PUSH1 0x60 PUSH2 0x9B95 JUMP JUMPDEST SWAP1 POP DUP2 MLOAD PUSH2 0x7F92 DUP2 PUSH2 0x9C44 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x7FA2 DUP2 PUSH2 0x9C67 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0x7F5F DUP2 PUSH2 0x9C67 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x7FC6 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x7FD0 PUSH1 0xA0 PUSH2 0x9B95 JUMP JUMPDEST SWAP1 POP DUP2 CALLDATALOAD DUP2 MSTORE PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH2 0x7FE4 DUP2 PUSH2 0x9C44 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP3 ADD CALLDATALOAD PUSH2 0x7FF7 DUP2 PUSH2 0x9C44 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP3 ADD CALLDATALOAD PUSH2 0x800A DUP2 PUSH2 0x9C44 JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP3 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x8028 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x8034 DUP5 DUP3 DUP6 ADD PUSH2 0x7E71 JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x180 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x8053 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x805C DUP2 PUSH2 0x9B95 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x8069 DUP4 DUP4 PUSH2 0x7B9D JUMP JUMPDEST DUP2 MSTORE PUSH2 0x8078 DUP4 PUSH1 0x20 DUP5 ADD PUSH2 0x7B9D JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x808A DUP4 PUSH1 0x40 DUP5 ADD PUSH2 0x8190 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x809C DUP4 PUSH1 0x60 DUP5 ADD PUSH2 0x8190 JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH2 0x80AE DUP4 PUSH1 0x80 DUP5 ADD PUSH2 0x8190 JUMP JUMPDEST PUSH1 0x80 DUP3 ADD MSTORE PUSH2 0x80C0 DUP4 PUSH1 0xA0 DUP5 ADD PUSH2 0x7B9D JUMP JUMPDEST PUSH1 0xA0 DUP3 ADD MSTORE PUSH2 0x80D2 DUP4 PUSH1 0xC0 DUP5 ADD PUSH2 0x7B9D JUMP JUMPDEST PUSH1 0xC0 DUP3 ADD MSTORE PUSH2 0x80E4 DUP4 PUSH1 0xE0 DUP5 ADD PUSH2 0x7B9D JUMP JUMPDEST PUSH1 0xE0 DUP3 ADD MSTORE PUSH2 0x100 PUSH2 0x80F8 DUP5 DUP3 DUP6 ADD PUSH2 0x7B9D JUMP JUMPDEST SWAP1 DUP3 ADD MSTORE PUSH2 0x120 DUP3 DUP2 ADD CALLDATALOAD SWAP1 DUP3 ADD MSTORE PUSH2 0x140 PUSH2 0x8116 DUP5 DUP3 DUP6 ADD PUSH2 0x819B JUMP JUMPDEST DUP2 DUP4 ADD MSTORE POP PUSH2 0x160 DUP1 DUP4 ADD CALLDATALOAD DUP2 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x813E JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x8148 PUSH1 0x80 PUSH2 0x9B95 JUMP JUMPDEST SWAP1 POP DUP2 CALLDATALOAD PUSH1 0x4 DUP2 LT PUSH2 0x8159 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x816F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 DUP3 ADD CALLDATALOAD PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP3 ADD CALLDATALOAD PUSH1 0x60 DUP3 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x59A6 DUP2 PUSH2 0x9C8C JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x59A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x81C3 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x397A DUP2 PUSH2 0x9C44 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x81DF JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x397A DUP2 PUSH2 0x9C44 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x81FC JUMPI DUP1 DUP2 REVERT JUMPDEST DUP3 MLOAD PUSH2 0x8207 DUP2 PUSH2 0x9C44 JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 SWAP3 POP PUSH2 0x8218 DUP2 PUSH2 0x9C44 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x8238 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 MLOAD PUSH2 0x8243 DUP2 PUSH2 0x9C44 JUMP JUMPDEST PUSH1 0x20 DUP7 ADD MLOAD SWAP1 SWAP5 POP PUSH2 0x8254 DUP2 PUSH2 0x9C44 JUMP JUMPDEST PUSH1 0x40 DUP7 ADD MLOAD SWAP1 SWAP4 POP PUSH2 0x8265 DUP2 PUSH2 0x9C44 JUMP JUMPDEST PUSH1 0x60 DUP7 ADD MLOAD SWAP1 SWAP3 POP PUSH2 0x8276 DUP2 PUSH2 0x9C44 JUMP JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP1 SWAP4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x8295 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 MLOAD PUSH2 0x82A0 DUP2 PUSH2 0x9C44 JUMP JUMPDEST PUSH1 0x20 DUP6 ADD MLOAD SWAP1 SWAP4 POP PUSH2 0x82B1 DUP2 PUSH2 0x9C44 JUMP JUMPDEST PUSH1 0x40 DUP6 ADD MLOAD SWAP1 SWAP3 POP DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x82C6 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x82E3 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH2 0x82EE DUP2 PUSH2 0x9C44 JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x830A JUMPI DUP3 DUP4 REVERT JUMPDEST SWAP1 DUP5 ADD SWAP1 PUSH1 0xA0 DUP3 DUP8 SUB SLT ISZERO PUSH2 0x831D JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x8327 PUSH1 0xA0 PUSH2 0x9B95 JUMP JUMPDEST DUP3 MLOAD DUP2 MSTORE PUSH2 0x8338 DUP8 PUSH1 0x20 DUP6 ADD PUSH2 0x7BA8 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x834A DUP8 PUSH1 0x40 DUP6 ADD PUSH2 0x7BA8 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x835C DUP8 PUSH1 0x60 DUP6 ADD PUSH2 0x7BA8 JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP4 ADD MLOAD DUP3 DUP2 GT ISZERO PUSH2 0x8372 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x837E DUP9 DUP3 DUP7 ADD PUSH2 0x7EBF JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE POP DUP1 SWAP4 POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x83A8 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x83B3 DUP2 PUSH2 0x9C44 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x83C3 DUP2 PUSH2 0x9C44 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH2 0x83D3 DUP2 PUSH2 0x9C44 JUMP JUMPDEST SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH2 0x83E3 DUP2 PUSH2 0x9C44 JUMP JUMPDEST SWAP2 POP PUSH1 0x80 DUP7 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x83FD JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x8409 DUP9 DUP3 DUP10 ADD PUSH2 0x7DB5 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x842B JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x8436 DUP2 PUSH2 0x9C44 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x8446 DUP2 PUSH2 0x9C44 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x8456 DUP2 PUSH2 0x9C44 JUMP JUMPDEST SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x8470 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x847C DUP8 DUP3 DUP9 ADD PUSH2 0x7DB5 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x849D JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x84A8 DUP2 PUSH2 0x9C44 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x84B8 DUP2 PUSH2 0x9C44 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x84C8 DUP2 PUSH2 0x9C44 JUMP JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP3 SWAP4 PUSH1 0x60 ADD CALLDATALOAD SWAP3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x84EC JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x84F7 DUP2 PUSH2 0x9C44 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x8512 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x851E DUP8 DUP4 DUP9 ADD PUSH2 0x7BB3 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x8533 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x8540 DUP7 DUP3 DUP8 ADD PUSH2 0x7DB5 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x8561 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x856C DUP2 PUSH2 0x9C44 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH2 0x83D3 DUP2 PUSH2 0x9C44 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x8595 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x85AA JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 ADD PUSH1 0x1F DUP2 ADD DUP6 SGT PUSH2 0x85BA JUMPI DUP3 DUP4 REVERT JUMPDEST DUP1 MLOAD PUSH2 0x85C8 PUSH2 0x7BD1 DUP3 PUSH2 0x9BBB JUMP JUMPDEST DUP2 DUP2 MSTORE DUP4 DUP2 ADD SWAP1 DUP4 DUP6 ADD DUP6 DUP5 MUL DUP6 ADD DUP7 ADD DUP10 LT ISZERO PUSH2 0x85E4 JUMPI DUP7 DUP8 REVERT JUMPDEST DUP7 SWAP5 POP JUMPDEST DUP4 DUP6 LT ISZERO PUSH2 0x860F JUMPI DUP1 MLOAD PUSH2 0x85FB DUP2 PUSH2 0x9C44 JUMP JUMPDEST DUP4 MSTORE PUSH1 0x1 SWAP5 SWAP1 SWAP5 ADD SWAP4 SWAP2 DUP6 ADD SWAP2 DUP6 ADD PUSH2 0x85E8 JUMP JUMPDEST POP SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x862F JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x8645 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 DUP7 ADD SWAP2 POP DUP7 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x8658 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x8666 PUSH2 0x7BD1 DUP3 PUSH2 0x9BBB JUMP JUMPDEST DUP1 DUP3 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD SWAP3 POP DUP1 DUP7 ADD DUP12 DUP3 DUP4 DUP8 MUL DUP10 ADD ADD GT ISZERO PUSH2 0x8686 JUMPI DUP8 DUP9 REVERT JUMPDEST DUP8 SWAP7 POP JUMPDEST DUP5 DUP8 LT ISZERO PUSH2 0x86A8 JUMPI DUP1 MLOAD DUP5 MSTORE PUSH1 0x1 SWAP7 SWAP1 SWAP7 ADD SWAP6 SWAP3 DUP2 ADD SWAP3 DUP2 ADD PUSH2 0x868A JUMP JUMPDEST POP DUP10 ADD MLOAD SWAP1 SWAP8 POP SWAP4 POP POP POP DUP1 DUP3 GT ISZERO PUSH2 0x86BF JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x86CC DUP7 DUP3 DUP8 ADD PUSH2 0x7E13 JUMP JUMPDEST SWAP3 POP POP PUSH2 0x86DC DUP6 PUSH1 0x40 DUP7 ADD PUSH2 0x7F05 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x86F7 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x870D JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x8720 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x872E JUMPI DUP5 DUP6 REVERT JUMPDEST DUP7 PUSH1 0x20 DUP1 DUP4 MUL DUP6 ADD ADD GT ISZERO PUSH2 0x8741 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH1 0x20 SWAP3 SWAP1 SWAP3 ADD SWAP7 SWAP2 SWAP6 POP SWAP1 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x8767 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x877D JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x8789 DUP8 DUP4 DUP9 ADD PUSH2 0x7C82 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x879E JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x87AB DUP7 DUP3 DUP8 ADD PUSH2 0x7C82 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x87CD JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x87E2 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0xFFE DUP5 DUP3 DUP6 ADD PUSH2 0x7CDA JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x8800 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x8815 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x8821 DUP6 DUP3 DUP7 ADD PUSH2 0x7CDA JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x8218 DUP2 PUSH2 0x9C44 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x8846 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x885B JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x8867 DUP7 DUP3 DUP8 ADD PUSH2 0x7CDA JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x8878 DUP2 PUSH2 0x9C44 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH2 0x82C6 DUP2 PUSH2 0x9C44 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x889A JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x88AF JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 ADD PUSH1 0x1F DUP2 ADD DUP6 SGT PUSH2 0x88BF JUMPI DUP3 DUP4 REVERT JUMPDEST DUP1 MLOAD PUSH2 0x88CD PUSH2 0x7BD1 DUP3 PUSH2 0x9BBB JUMP JUMPDEST DUP2 DUP2 MSTORE DUP4 DUP2 ADD SWAP1 DUP4 DUP6 ADD DUP6 DUP5 MUL DUP6 ADD DUP7 ADD DUP10 LT ISZERO PUSH2 0x88E9 JUMPI DUP7 DUP8 REVERT JUMPDEST DUP7 SWAP5 POP JUMPDEST DUP4 DUP6 LT ISZERO PUSH2 0x860F JUMPI DUP1 MLOAD DUP4 MSTORE PUSH1 0x1 SWAP5 SWAP1 SWAP5 ADD SWAP4 SWAP2 DUP6 ADD SWAP2 DUP6 ADD PUSH2 0x88ED JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x891F JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x8935 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 DUP7 ADD SWAP2 POP DUP7 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x8948 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x8956 PUSH2 0x7BD1 DUP3 PUSH2 0x9BBB JUMP JUMPDEST DUP1 DUP3 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD SWAP3 POP DUP1 DUP7 ADD PUSH2 0x180 DUP13 DUP4 DUP3 DUP9 MUL DUP11 ADD ADD GT ISZERO PUSH2 0x8979 JUMPI DUP9 DUP10 REVERT JUMPDEST DUP9 SWAP8 POP JUMPDEST DUP6 DUP9 LT ISZERO PUSH2 0x89A5 JUMPI PUSH2 0x898F DUP14 DUP4 PUSH2 0x8040 JUMP JUMPDEST DUP6 MSTORE PUSH1 0x1 SWAP8 SWAP1 SWAP8 ADD SWAP7 SWAP4 DUP3 ADD SWAP4 SWAP1 DUP2 ADD SWAP1 PUSH2 0x897D JUMP JUMPDEST POP SWAP2 SWAP9 POP DUP10 ADD CALLDATALOAD SWAP5 POP POP POP POP DUP1 DUP3 GT ISZERO PUSH2 0x89BD JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x89CA DUP7 DUP3 DUP8 ADD PUSH2 0x7D41 JUMP JUMPDEST SWAP3 POP POP PUSH2 0x86DC DUP6 PUSH1 0x40 DUP7 ADD PUSH2 0x7B9D JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x89EB JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x8A00 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0xFFE DUP5 DUP3 DUP6 ADD PUSH2 0x7E13 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x8A1D JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x397A DUP2 PUSH2 0x9C59 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x8A3C JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 MLOAD PUSH2 0x8A47 DUP2 PUSH2 0x9C59 JUMP JUMPDEST PUSH1 0x20 DUP6 ADD MLOAD SWAP1 SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x8A62 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x8A6E DUP7 DUP3 DUP8 ADD PUSH2 0x7EBF JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 DUP5 ADD MLOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x8A90 JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x8AA8 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x8ABD JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0xFFE DUP5 DUP3 DUP6 ADD PUSH2 0x7EBF JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x8ADD JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x8AE8 DUP2 PUSH2 0x9C44 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x8B03 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x851E DUP8 DUP4 DUP9 ADD PUSH2 0x7CDA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x8B20 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x397A DUP2 PUSH2 0x9C7D JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x80 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x8B3D JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH2 0x8B48 DUP2 PUSH2 0x9C7D JUMP JUMPDEST SWAP2 POP PUSH2 0x8B57 DUP5 PUSH1 0x20 DUP6 ADD PUSH2 0x7F6A JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP5 DUP7 SUB PUSH1 0xA0 DUP2 SLT ISZERO PUSH2 0x8B76 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x40 DUP2 SLT ISZERO PUSH2 0x8B83 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x8B8E PUSH1 0x40 PUSH2 0x9B95 JUMP JUMPDEST DUP6 CALLDATALOAD DUP2 MSTORE PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x8BA0 DUP2 PUSH2 0x9C44 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE SWAP4 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x8BB5 DUP2 PUSH2 0x9C44 JUMP JUMPDEST SWAP3 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH2 0x8BC5 DUP2 PUSH2 0x9C44 JUMP JUMPDEST SWAP2 POP PUSH1 0x80 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x8470 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x8BF4 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x8C0A JUMPI DUP4 DUP5 REVERT JUMPDEST SWAP1 DUP7 ADD SWAP1 PUSH1 0x40 DUP3 DUP10 SUB SLT ISZERO PUSH2 0x8C1D JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x8C27 PUSH1 0x40 PUSH2 0x9B95 JUMP JUMPDEST PUSH2 0x8C31 DUP10 DUP5 PUSH2 0x7B9D JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP3 DUP2 GT ISZERO PUSH2 0x8C44 JUMPI DUP6 DUP7 REVERT JUMPDEST PUSH2 0x8C50 DUP11 DUP3 DUP7 ADD PUSH2 0x7C2A JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP DUP1 SWAP7 POP POP PUSH2 0x8C67 DUP9 PUSH1 0x20 DUP10 ADD PUSH2 0x7B9D JUMP JUMPDEST SWAP5 POP PUSH2 0x8C76 DUP9 PUSH1 0x40 DUP10 ADD PUSH2 0x7B9D JUMP JUMPDEST SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x8C8B JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x847C DUP8 DUP3 DUP9 ADD PUSH2 0x7DB5 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x8CAD JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x8CB7 DUP7 DUP7 PUSH2 0x7F14 JUMP JUMPDEST SWAP4 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH2 0x8CC7 DUP2 PUSH2 0x9C7D JUMP JUMPDEST SWAP3 POP PUSH1 0x80 DUP6 ADD CALLDATALOAD PUSH2 0x8CD7 DUP2 PUSH2 0x9C7D JUMP JUMPDEST SWAP2 POP PUSH1 0xA0 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x8470 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP5 DUP7 SUB PUSH1 0xA0 DUP2 SLT ISZERO PUSH2 0x8D07 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x40 DUP2 SLT ISZERO PUSH2 0x8D14 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x8D1F PUSH1 0x40 PUSH2 0x9B95 JUMP JUMPDEST DUP6 CALLDATALOAD PUSH2 0x8D2A DUP2 PUSH2 0x9C44 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x8BA0 DUP2 PUSH2 0x9C44 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x8D4F JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x8D65 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x8D71 DUP9 DUP4 DUP10 ADD PUSH2 0x7FB5 JUMP JUMPDEST SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP2 POP PUSH2 0x8D83 DUP3 PUSH2 0x9C44 JUMP JUMPDEST SWAP1 SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP1 PUSH2 0x8D95 DUP3 PUSH2 0x9C44 JUMP JUMPDEST SWAP1 SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD SWAP1 DUP1 DUP3 GT ISZERO PUSH2 0x8C8B JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x8DBF JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x8DD4 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x8DE0 DUP8 DUP3 DUP9 ADD PUSH2 0x7FB5 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x84B8 DUP2 PUSH2 0x9C44 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x8E06 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x8E1B JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x8E27 DUP8 DUP3 DUP9 ADD PUSH2 0x7FB5 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x8E3F DUP2 PUSH2 0x9C44 JUMP JUMPDEST SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH2 0x8276 DUP2 PUSH2 0x9C44 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x220 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x8E64 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x8E6E DUP6 DUP6 PUSH2 0x8040 JUMP JUMPDEST SWAP3 POP PUSH2 0x8E7E DUP6 PUSH2 0x180 DUP7 ADD PUSH2 0x812D JUMP JUMPDEST SWAP2 POP PUSH2 0x200 DUP5 ADD CALLDATALOAD PUSH2 0x82C6 DUP2 PUSH2 0x9C44 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP5 DUP7 SUB PUSH1 0xC0 DUP2 SLT ISZERO PUSH2 0x8EA5 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x60 DUP2 SLT ISZERO PUSH2 0x8EB2 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x8EBD PUSH1 0x60 PUSH2 0x9B95 JUMP JUMPDEST DUP6 CALLDATALOAD PUSH2 0x8EC8 DUP2 PUSH2 0x9C44 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP7 DUP2 ADD CALLDATALOAD SWAP1 DUP3 ADD MSTORE PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH2 0x8EE2 DUP2 PUSH2 0x9C44 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE SWAP4 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH2 0x8EF7 DUP2 PUSH2 0x9C44 JUMP JUMPDEST SWAP3 POP PUSH1 0x80 DUP6 ADD CALLDATALOAD PUSH2 0x8CD7 DUP2 PUSH2 0x9C44 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 DUP6 SUB PUSH1 0xA0 DUP2 SLT ISZERO PUSH2 0x8F1C JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x60 DUP2 SLT ISZERO PUSH2 0x8F29 JUMPI DUP2 DUP3 REVERT JUMPDEST POP PUSH2 0x8F34 PUSH1 0x60 PUSH2 0x9B95 JUMP JUMPDEST DUP5 MLOAD DUP2 MSTORE PUSH1 0x20 DUP6 ADD MLOAD PUSH1 0x5 DUP2 LT PUSH2 0x8F49 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP6 ADD MLOAD PUSH2 0x8F5C DUP2 PUSH2 0x9C8C JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP6 ADD MLOAD SWAP1 SWAP4 POP PUSH2 0x8F72 DUP2 PUSH2 0x9C8C JUMP JUMPDEST PUSH1 0x80 DUP6 ADD MLOAD SWAP1 SWAP3 POP PUSH2 0x82C6 DUP2 PUSH2 0x9C59 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x8F94 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH3 0xFFFFFF DUP2 AND DUP2 EQ PUSH2 0x397A JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x8FB8 JUMPI DUP2 DUP3 REVERT JUMPDEST POP POP DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD MLOAD SWAP1 SWAP3 SWAP1 SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x8FDE JUMPI DUP2 DUP3 REVERT JUMPDEST POP POP DUP3 MLOAD PUSH1 0x20 DUP5 ADD MLOAD PUSH1 0x40 DUP6 ADD MLOAD PUSH1 0x60 SWAP1 SWAP6 ADD MLOAD SWAP2 SWAP7 SWAP1 SWAP6 POP SWAP1 SWAP3 POP SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x9015 JUMPI DUP3 DUP4 REVERT JUMPDEST POP POP DUP4 MLOAD PUSH1 0x20 DUP6 ADD MLOAD PUSH1 0x40 DUP7 ADD MLOAD PUSH1 0x60 DUP8 ADD MLOAD PUSH1 0x80 SWAP1 SWAP8 ADD MLOAD SWAP3 SWAP9 SWAP2 SWAP8 POP SWAP6 SWAP5 POP SWAP1 SWAP3 POP SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP4 MSTORE PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x60 DUP3 ADD MLOAD PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP3 ADD MLOAD PUSH1 0xA0 PUSH1 0x80 DUP6 ADD MSTORE PUSH2 0xFFE PUSH1 0xA0 DUP6 ADD DUP3 PUSH2 0x910A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD DUP4 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x90D0 JUMPI DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x90AB JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD DUP4 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x90D0 JUMPI DUP2 MLOAD DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x90EE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x9122 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x9BFD JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 MSTORE PUSH1 0x20 DUP1 DUP3 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 DUP2 AND SWAP2 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP2 DUP3 ADD MLOAD AND SWAP2 ADD MSTORE JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP4 MSTORE PUSH1 0x20 DUP1 DUP4 ADD MLOAD ISZERO ISZERO SWAP1 DUP5 ADD MSTORE PUSH1 0x40 DUP1 DUP4 ADD MLOAD SWAP1 SWAP2 AND SWAP1 DUP4 ADD MSTORE PUSH1 0x60 SWAP1 DUP2 ADD MLOAD ISZERO ISZERO SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP4 MSTORE PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x40 PUSH1 0x20 DUP6 ADD MSTORE PUSH2 0xFFE PUSH1 0x40 DUP6 ADD DUP3 PUSH2 0x910A JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP4 MSTORE PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 DUP3 AND PUSH1 0x20 DUP7 ADD MSTORE DUP1 PUSH1 0x40 DUP6 ADD MLOAD AND PUSH1 0x40 DUP7 ADD MSTORE DUP1 PUSH1 0x60 DUP6 ADD MLOAD AND PUSH1 0x60 DUP7 ADD MSTORE POP POP PUSH1 0x80 DUP3 ADD MLOAD PUSH1 0xA0 PUSH1 0x80 DUP6 ADD MSTORE PUSH2 0xFFE PUSH1 0xA0 DUP6 ADD DUP3 PUSH2 0x910A JUMP JUMPDEST PUSH2 0x9214 DUP3 DUP3 MLOAD PUSH2 0x908B JUMP JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD PUSH2 0x9226 PUSH1 0x20 DUP5 ADD DUP3 PUSH2 0x908B JUMP JUMPDEST POP PUSH1 0x40 DUP2 ADD MLOAD PUSH2 0x9239 PUSH1 0x40 DUP5 ADD DUP3 PUSH2 0x9309 JUMP JUMPDEST POP PUSH1 0x60 DUP2 ADD MLOAD PUSH2 0x924C PUSH1 0x60 DUP5 ADD DUP3 PUSH2 0x9309 JUMP JUMPDEST POP PUSH1 0x80 DUP2 ADD MLOAD PUSH2 0x925F PUSH1 0x80 DUP5 ADD DUP3 PUSH2 0x9309 JUMP JUMPDEST POP PUSH1 0xA0 DUP2 ADD MLOAD PUSH2 0x9272 PUSH1 0xA0 DUP5 ADD DUP3 PUSH2 0x908B JUMP JUMPDEST POP PUSH1 0xC0 DUP2 ADD MLOAD PUSH2 0x9285 PUSH1 0xC0 DUP5 ADD DUP3 PUSH2 0x908B JUMP JUMPDEST POP PUSH1 0xE0 DUP2 ADD MLOAD PUSH2 0x9298 PUSH1 0xE0 DUP5 ADD DUP3 PUSH2 0x908B JUMP JUMPDEST POP PUSH2 0x100 DUP1 DUP3 ADD MLOAD PUSH2 0x92AC DUP3 DUP6 ADD DUP3 PUSH2 0x908B JUMP JUMPDEST POP POP PUSH2 0x120 DUP2 DUP2 ADD MLOAD SWAP1 DUP4 ADD MSTORE PUSH2 0x140 DUP1 DUP3 ADD MLOAD PUSH2 0x92CC DUP3 DUP6 ADD DUP3 PUSH2 0x9316 JUMP JUMPDEST POP POP PUSH2 0x160 SWAP1 DUP2 ADD MLOAD SWAP2 ADD MSTORE JUMP JUMPDEST DUP1 MLOAD PUSH2 0x92E5 DUP2 PUSH2 0x9C2D JUMP JUMPDEST DUP3 MSTORE PUSH1 0x20 DUP2 DUP2 ADD MLOAD PUSH1 0xFF AND SWAP1 DUP4 ADD MSTORE PUSH1 0x40 DUP1 DUP3 ADD MLOAD SWAP1 DUP4 ADD MSTORE PUSH1 0x60 SWAP1 DUP2 ADD MLOAD SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP4 CALLDATACOPY SWAP2 ADD SWAP1 DUP2 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x9345 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x9BFD JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND DUP2 MSTORE SWAP3 DUP5 AND PUSH1 0x20 DUP5 ADD MSTORE SWAP1 DUP4 AND PUSH1 0x40 DUP4 ADD MSTORE SWAP1 SWAP2 AND PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 DUP2 AND PUSH1 0x20 DUP4 ADD MSTORE DUP4 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x5DC6 SWAP1 DUP4 ADD DUP5 PUSH2 0x90DB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND DUP2 MSTORE SWAP3 DUP5 AND PUSH1 0x20 DUP5 ADD MSTORE SWAP3 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE SWAP1 ISZERO ISZERO PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE DUP3 ISZERO ISZERO PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x5DC6 SWAP1 DUP4 ADD DUP5 PUSH2 0x910A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND DUP3 MSTORE DUP6 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0xA0 PUSH1 0x80 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x94D5 SWAP1 DUP4 ADD DUP5 PUSH2 0x910A JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND DUP2 MSTORE PUSH1 0x60 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x9504 SWAP1 DUP4 ADD DUP6 PUSH2 0x9098 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x5DC6 DUP2 DUP6 PUSH2 0x90DB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP2 MSTORE PUSH1 0x0 PUSH2 0x952D DUP6 PUSH2 0x9C2D JUMP JUMPDEST DUP5 PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x80 PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x9547 PUSH1 0x80 DUP4 ADD DUP6 PUSH2 0x90DB JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0x94D5 DUP2 DUP6 PUSH2 0x90DB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 DUP2 AND DUP3 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x100 SWAP1 PUSH2 0x9576 DUP12 PUSH2 0x9C2D JUMP JUMPDEST DUP11 PUSH1 0x20 DUP6 ADD MSTORE DUP2 PUSH1 0x40 DUP6 ADD MSTORE PUSH2 0x958E DUP3 DUP6 ADD DUP12 PUSH2 0x90DB JUMP JUMPDEST SWAP2 POP DUP4 DUP3 SUB PUSH1 0x60 DUP6 ADD MSTORE PUSH2 0x95A2 DUP3 DUP11 PUSH2 0x90DB JUMP JUMPDEST SWAP1 DUP9 AND PUSH1 0x80 DUP6 ADD MSTORE SWAP1 POP PUSH2 0x95B5 DUP7 PUSH2 0x9C2D JUMP JUMPDEST DUP6 PUSH1 0xA0 DUP5 ADD MSTORE DUP3 DUP2 SUB PUSH1 0xC0 DUP5 ADD MSTORE PUSH2 0x95CD DUP2 DUP7 PUSH2 0x90DB JUMP JUMPDEST SWAP1 POP DUP3 DUP2 SUB PUSH1 0xE0 DUP5 ADD MSTORE PUSH2 0x95E1 DUP2 DUP6 PUSH2 0x90DB JUMP JUMPDEST SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND DUP2 MSTORE PUSH1 0x40 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0xFFE SWAP1 DUP4 ADD DUP5 PUSH2 0x91BC JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 MSTORE PUSH2 0x9627 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x9098 JUMP JUMPDEST SWAP1 POP DUP3 PUSH1 0x20 DUP4 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD PUSH1 0x40 DUP4 MSTORE DUP1 DUP6 MLOAD DUP1 DUP4 MSTORE PUSH1 0x60 DUP6 ADD SWAP2 POP PUSH1 0x20 SWAP3 POP PUSH1 0x60 DUP4 DUP3 MUL DUP7 ADD ADD DUP4 DUP9 ADD DUP6 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x968B JUMPI PUSH1 0x5F NOT DUP9 DUP5 SUB ADD DUP6 MSTORE PUSH2 0x9679 DUP4 DUP4 MLOAD PUSH2 0x910A JUMP JUMPDEST SWAP5 DUP7 ADD SWAP5 SWAP3 POP SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x965D JUMP JUMPDEST POP POP DUP6 DUP2 SUB DUP5 DUP8 ADD MSTORE PUSH2 0x761B DUP2 DUP9 PUSH2 0x90DB JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 PUSH1 0x40 SWAP1 DUP2 DUP6 ADD SWAP1 DUP1 DUP5 MUL DUP7 ADD DUP4 ADD DUP8 DUP6 ADD DUP7 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x9705 JUMPI DUP9 DUP4 SUB PUSH1 0x3F NOT ADD DUP6 MSTORE DUP2 MLOAD DUP1 MLOAD DUP8 DUP6 MSTORE PUSH2 0x96E6 DUP9 DUP7 ADD DUP3 PUSH2 0x910A JUMP JUMPDEST SWAP2 DUP10 ADD MLOAD ISZERO ISZERO SWAP5 DUP10 ADD SWAP5 SWAP1 SWAP5 MSTORE SWAP5 DUP8 ADD SWAP5 SWAP3 POP SWAP1 DUP7 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x96C2 JUMP JUMPDEST POP SWAP1 SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x397A PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x90DB JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST DUP4 ISZERO ISZERO DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x60 PUSH1 0x40 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x106C SWAP1 DUP4 ADD DUP5 PUSH2 0x90DB JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP3 MSTORE PUSH1 0x60 PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x9504 PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0x910A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x397A PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x910A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 MSTORE PUSH2 0x9627 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x910A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH3 0xFFFFFF SWAP1 SWAP2 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND DUP2 MSTORE PUSH1 0x40 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0xFFE SWAP1 DUP4 ADD DUP5 PUSH2 0x90DB JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH2 0x97FE DUP6 PUSH2 0x9C2D JUMP JUMPDEST SWAP4 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH1 0x8 DUP6 LT PUSH2 0x97FE JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH1 0xE0 DUP3 ADD PUSH2 0x982F DUP8 PUSH2 0x9C3A JUMP JUMPDEST DUP7 DUP4 MSTORE PUSH1 0x20 PUSH1 0xE0 DUP2 DUP6 ADD MSTORE DUP2 DUP8 MLOAD PUSH2 0x9847 DUP2 DUP6 PUSH2 0x975D JUMP JUMPDEST SWAP2 POP DUP2 SWAP4 POP DUP3 DUP2 MUL DUP3 ADD DUP4 DUP11 ADD DUP7 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x9880 JUMPI DUP7 DUP4 SUB DUP6 MSTORE PUSH2 0x986E DUP4 DUP4 MLOAD PUSH2 0x904E JUMP JUMPDEST SWAP5 DUP7 ADD SWAP5 SWAP3 POP SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x9856 JUMP JUMPDEST POP POP DUP7 DUP2 SUB PUSH1 0x40 DUP9 ADD MSTORE DUP1 SWAP5 POP DUP9 MLOAD SWAP3 POP PUSH2 0x989B DUP4 DUP3 PUSH2 0x975D JUMP JUMPDEST SWAP5 POP POP POP DUP2 DUP8 ADD DUP5 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x98C5 JUMPI PUSH2 0x98B7 DUP6 DUP4 MLOAD PUSH2 0x903D JUMP JUMPDEST SWAP5 POP SWAP1 DUP4 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x98A4 JUMP JUMPDEST POP POP POP POP DUP1 SWAP2 POP POP PUSH2 0x106C PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x9168 JUMP JUMPDEST PUSH1 0xF SWAP4 DUP5 SIGNEXTEND DUP2 MSTORE SWAP2 SWAP1 SWAP3 SIGNEXTEND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0xF DUP4 SWAP1 SIGNEXTEND DUP2 MSTORE PUSH1 0x80 DUP2 ADD PUSH2 0x397A PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x9136 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x24 SWAP1 DUP3 ADD MSTORE PUSH32 0x556E6973776170563353616D706C65722F746F6B656E5061746820746F6F2073 PUSH1 0x40 DUP3 ADD MSTORE PUSH4 0x1A1BDC9D PUSH1 0xE2 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x455243323042726964676553616D706C65722F494E56414C49445F544F4B454E PUSH1 0x40 DUP3 ADD MSTORE PUSH5 0x2FA820A4A9 PUSH1 0xD9 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x556E6973776170563353616D706C65722F696E76616C69642070617468206C65 PUSH1 0x40 DUP3 ADD MSTORE PUSH5 0x6E67746873 PUSH1 0xD8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x99EA DUP3 DUP8 PUSH2 0x9136 JUMP JUMPDEST DUP5 PUSH1 0xF SIGNEXTEND PUSH1 0x60 DUP4 ADD MSTORE DUP4 PUSH1 0xF SIGNEXTEND PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xC0 PUSH1 0xA0 DUP4 ADD MSTORE PUSH2 0x5DC6 PUSH1 0xC0 DUP4 ADD DUP5 PUSH2 0x90DB JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 MSTORE PUSH2 0x9A23 PUSH1 0x60 DUP4 ADD DUP7 PUSH2 0x919D JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x9A35 DUP2 DUP7 PUSH2 0x919D JUMP JUMPDEST SWAP2 POP POP DUP3 PUSH1 0x40 DUP4 ADD MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 MSTORE PUSH2 0x9A59 PUSH1 0x80 DUP4 ADD DUP8 PUSH2 0x91BC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP6 DUP7 AND PUSH1 0x20 DUP5 ADD MSTORE SWAP4 SWAP1 SWAP5 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 MSTORE PUSH2 0x9A8F PUSH1 0x80 DUP4 ADD DUP8 PUSH2 0x91BC JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP6 SWAP1 SWAP6 MSTORE POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x40 DUP3 ADD MSTORE SWAP2 AND PUSH1 0x60 SWAP1 SWAP2 ADD MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x200 DUP2 ADD PUSH2 0x9AC4 DUP3 DUP6 PUSH2 0x9209 JUMP JUMPDEST PUSH2 0x397A PUSH2 0x180 DUP4 ADD DUP5 PUSH2 0x92DA JUMP JUMPDEST PUSH2 0x220 DUP2 ADD PUSH2 0x9AE1 DUP3 DUP7 PUSH2 0x9209 JUMP JUMPDEST PUSH2 0x9AEF PUSH2 0x180 DUP4 ADD DUP6 PUSH2 0x92DA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND PUSH2 0x200 SWAP2 SWAP1 SWAP2 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 DUP3 MSTORE PUSH1 0x40 PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0xFFE PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x9098 JUMP JUMPDEST SWAP6 DUP7 MSTORE PUSH1 0x20 DUP7 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0x40 DUP6 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH1 0x1E NOT DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0x9B60 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 ADD DUP1 CALLDATALOAD SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0x9B79 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x20 ADD SWAP2 POP CALLDATASIZE DUP2 SWAP1 SUB DUP3 SGT ISZERO PUSH2 0x9B8E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x9BB3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0x9BD0 JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0x9BEF JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x9C18 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x9C00 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x9C27 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x4 DUP2 LT PUSH2 0x9C37 JUMPI INVALID JUMPDEST POP JUMP JUMPDEST PUSH1 0x2 DUP2 LT PUSH2 0x9C37 JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x9C37 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x9C37 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x9C37 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0xF SIGNEXTEND DUP2 EQ PUSH2 0x9C37 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x9C37 JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC1 0xF6 EQ DUP5 0x26 0xAE SWAP1 INVALID PUSH3 0xD9FB20 CALLCODE 0xB2 0xD0 0xDF 0xB0 MLOAD PUSH22 0x627F257602D9223499B9BF406564736F6C634300060C STOP CALLER ",
                "sourceMap": "1346:1249:8:-:0;;;826:113:25;;;1346:1249:8;;;;;;;;;;;;;;;;;;;;;"
            },
            "deployedBytecode": {
                "immutableReferences": {
                    "8071": [
                        {
                            "length": 32,
                            "start": 10380
                        },
                        {
                            "length": 32,
                            "start": 17586
                        },
                        {
                            "length": 32,
                            "start": 20483
                        }
                    ]
                },
                "linkReferences": {},
                "object": "0x608060405234801561001057600080fd5b50600436106102a05760003560e01c80639209483b11610167578063c25c4138116100ce578063ddd5aa2811610087578063ddd5aa2814610665578063e78ac04514610678578063e8e4af091461068b578063f1ed7fa41461069e578063f5a4994d146106b1578063fc9fe41b146106c4576102a0565b8063c25c4138146105f3578063c831908414610606578063c8c74a3714610619578063c94706d81461062c578063cc1621c91461063f578063d9bca37214610652576102a0565b8063a469841711610120578063a469841714610573578063a75e744b14610586578063ab00027614610599578063adc636bf146105ac578063b90cd2fb146105cd578063bd71ecf6146105e0576102a0565b80639209483b146104e557806398777748146104f85780639bf3ee351461050b5780639e3f05c31461052b5780639ea0ff131461054d578063a0295b8b14610560576102a0565b80634edfb5b21161020b57806368be3cf2116101c457806368be3cf214610457578063706e2f9b1461047757806374c9d2551461048a5780637f7f4f131461049d5780638b6d7b44146104b05780638e5a0e07146104c3576102a0565b80634edfb5b2146103ca5780635505000a146103ea57806357494b1d1461040b5780635aae4e531461041e5780635d5b674f1461043157806366a1ac6b14610444576102a0565b806329fa4aa01161025d57806329fa4aa0146103495780632aa643191461035c5780632d753aa41461037e57806330d6570d146103915780633105fec1146103a457806340bc03ae146103b7576102a0565b80631022742b146102a5578063149dab0e146102ce57806316279055146102f05780632339078f14610310578063252322b314610323578063281e343214610336575b600080fd5b6102b86102b336600461890b565b6106d7565b6040516102c59190619713565b60405180910390f35b6102e16102dc366004618bdf565b61084a565b6040516102c5939291906194e0565b6103036102fe3660046181b2565b6109aa565b6040516102c59190619726565b6102b861031e366004618b60565b6109b4565b6102b8610331366004618416565b610bdb565b6102b8610344366004618e8f565b610db1565b6102b8610357366004618c98565b611006565b61036f61036a366004618cf1565b611075565b6040516102c593929190619731565b6102b861038c366004618391565b611352565b6102b861039f366004618416565b6114db565b6102b86103b23660046184d8565b61164f565b6102b86103c5366004618c98565b6117d3565b6103dd6103d8366004618df1565b611954565b6040516102c5919061977f565b6103fd6103f8366004618ac9565b611bd1565b6040516102c5929190619636565b6102b8610419366004618416565b611e26565b6103fd61042c366004618ac9565b612378565b6102b861043f366004618416565b6125bd565b6102b861045236600461890b565b612623565b61046a6104653660046186e5565b6126d8565b6040516102c5919061969e565b6102b86104853660046187bc565b612839565b6102e1610498366004618bdf565b61292b565b6102b86104ab366004618e8f565b61293a565b6102b86104be366004618c98565b612b87565b6104d66104d1366004618753565b612eea565b6040516102c593929190619a10565b6102b86104f3366004618c98565b613103565b6102b8610506366004618416565b613303565b61051e610519366004618e4f565b61383a565b6040516102c5919061975d565b61053e610539366004618d3a565b613981565b6040516102c593929190619766565b61051e61055b366004618488565b613aa7565b6102b861056e366004618b60565b613cbd565b6102b8610581366004618416565b613eb9565b61036f61059436600461854a565b61400e565b6102b86105a7366004618416565b61414b565b6105bf6105ba366004618416565b6142a9565b6040516102c59291906197cd565b6102b86105db366004618416565b6143f9565b6102b86105ee3660046187ee565b61445f565b6102b8610601366004618416565b61455b565b6102b8610614366004618416565b6145c1565b6102b86106273660046184d8565b61477e565b6102b861063a366004618416565b6148ea565b61053e61064d366004618d3a565b614a48565b61036f61066036600461854a565b614c2e565b61036f610673366004618cf1565b614d1d565b6102b8610686366004618832565b614fb0565b6102b8610699366004618416565b6150a5565b61051e6106ac366004618daa565b6151d8565b6105bf6106bf366004618416565b615377565b6104d66106d2366004618753565b615463565b606083516001600160401b03811180156106f057600080fd5b5060405190808252806020026020018201604052801561071a578160200160208202803683370190505b50905060005b8451811461084257306001600160a01b0316639bf3ee3562030d4087848151811061074757fe5b602002602001015187858151811061075b57fe5b6020026020010151876040518563ffffffff1660e01b815260040161078293929190619ad2565b60206040518083038187803b15801561079a57600080fd5b5086fa935050505080156107cb575060408051601f3d908101601f191682019092526107c891810190618a7f565b60015b61081f573d8080156107f9576040519150601f19603f3d011682016040523d82523d6000602084013e6107fe565b606091505b50600083838151811061080d57fe5b6020026020010181815250505061083a565b8083838151811061082c57fe5b602002602001018181525050505b600101610720565b509392505050565b600060608086602001515160001415610862576109a0565b61086e87878787615678565b855191945092506001600160401b038111801561088a57600080fd5b506040519080825280602002602001820160405280156108b4578160200160208202803683370190505b50905060005b815181101561099e57836001600160a01b0316637f9c0ecd620493e0858885815181106108e357fe5b60200260200101516040518463ffffffff1660e01b8152600401610908929190619614565b60206040518083038187803b15801561092057600080fd5b5086fa93505050508015610951575060408051601f3d908101601f1916820190925261094e91810190618a7f565b60015b61095a5761099e565b8083838151811061096757fe5b60200260200101818152505082828151811061097f57fe5b602002602001015160001415610995575061099e565b506001016108ba565b505b9450945094915050565b803b15155b919050565b60606109c083856158aa565b6020850151604080516002808252606082810190935281602001602082028036833701905050905085816000815181106109f657fe5b60200260200101906001600160a01b031690816001600160a01b0316815250508481600181518110610a2457fe5b6001600160a01b03909216602092830291909101909101528351806001600160401b0381118015610a5457600080fd5b50604051908082528060200260200182016040528015610a7e578160200160208202803683370190505b509350610a89617a39565b610a916158e9565b905060005b82811015610bce576060610abd8b898481518110610ab057fe5b6020026020010151615918565b604051637c26833760e11b81529091506001600160a01b0387169063f84d066e90610af39060009085908a908990600401619820565b600060405180830381600087803b158015610b0d57600080fd5b505af1925050508015610b4257506040513d6000823e601f3d908101601f19168201604052610b3f9190810190618888565b60015b610b7d573d808015610b70576040519150601f19603f3d011682016040523d82523d6000602084013e610b75565b606091505b505050610bce565b600081600181518110610b8c57fe5b602002602001015160001902905060008113610baa57505050610bce565b80898581518110610bb757fe5b602002602001018181525050505050600101610a96565b5050505050949350505050565b6060610be783856158aa565b8151806001600160401b0381118015610bff57600080fd5b50604051908082528060200260200182016040528015610c29578160200160208202803683370190505b50915060006001600160a01b03861615610c4c57610c4787876159ac565b610c4f565b60005b905060006001600160a01b03861615610c7157610c6c88876159ac565b610c74565b60005b905060005b83811015610da55760016001600160a01b038816610cd757610cb684632640f62c60e01b898581518110610ca957fe5b6020026020010151615a2b565b878481518110610cc257fe5b60200260200101819350828152505050610d71565b6001600160a01b038916610cfd57610cb6836359e9486260e01b898581518110610ca957fe5b6000610d17846359e9486260e01b8a8681518110610ca957fe5b925090508015610d5457610d33856309903d8b60e21b83615a2b565b888581518110610d3f57fe5b60200260200101819450828152505050610d6f565b6000878481518110610d6257fe5b6020026020010181815250505b505b801580610d915750858281518110610d8557fe5b60200260200101516000145b15610d9c5750610da5565b50600101610c79565b50505050949350505050565b6060610dbd83856158aa565b6000856000015190506000816001600160a01b03166336569e776040518163ffffffff1660e01b815260040160206040518083038186803b158015610e0157600080fd5b505afa158015610e15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e3991906181ce565b8451909150806001600160401b0381118015610e5457600080fd5b50604051908082528060200260200182016040528015610e7e578160200160208202803683370190505b509350826001600160a01b031663f4b9fa756040518163ffffffff1660e01b815260040160206040518083038186803b158015610eba57600080fd5b505afa158015610ece573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ef291906181ce565b6001600160a01b0316866001600160a01b031614158015610f955750826001600160a01b031663f4b9fa756040518163ffffffff1660e01b815260040160206040518083038186803b158015610f4757600080fd5b505afa158015610f5b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f7f91906181ce565b6001600160a01b0316876001600160a01b031614155b15610fa257505050610ffe565b60005b81811015610da5576000610fd08a898b8a8681518110610fc157fe5b60200260200101518989615b0f565b905080610fdd5750610da5565b80868381518110610fea57fe5b602090810291909101015250600101610fa5565b949350505050565b60408051606081810190925261106c90806110258689608084016198f8565b6040516020818303038152906040528152602001868860405160200161104c9291906198f8565b6040516020818303038152906040528152602001615dd081525083615f03565b95945050505050565b600080606061108485876158aa565b8351806001600160401b038111801561109c57600080fd5b506040519080825280602002602001820160405280156110c6578160200160208202803683370190505b508851604051630939d86360e11b81529193506001600160a01b031690631273b0c6906110f9908a908a9060040161937c565b60206040518083038186803b15801561111157600080fd5b505afa158015611125573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061114991906181ce565b925060006001600160a01b0384161561116757506001935086611206565b8851604051630939d86360e11b81526001600160a01b0390911690631273b0c690611198908a908c9060040161937c565b60206040518083038186803b1580156111b057600080fd5b505afa1580156111c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111e891906181ce565b93506001600160a01b0384166111ff5750506109a0565b5060009350855b836001600160a01b031663dd58b41c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561123f57600080fd5b505afa158015611253573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112779190618a0c565b6112825750506109a0565b60005b828110156113455760006112ff8a87858e602001516040516020016112ad9493929190619396565b6040516020818303038152906040528a88868f602001516040516020016112d79493929190619396565b6040516020818303038152906040528a85815181106112f257fe5b6020026020010151616100565b90508085838151811061130e57fe5b60200260200101818152505084828151811061132657fe5b60200260200101516000141561133c5750611345565b50600101611285565b5050509450945094915050565b8051606090806001600160401b038111801561136d57600080fd5b50604051908082528060200260200182016040528015611397578160200160208202803683370190505b5091506001600160a01b0387166113ae575061106c565b60005b818110156114d05760006060896001600160a01b031662061a80636e79e13360e01b8b8b8b8b89815181106113e257fe5b60200260200101516040516024016113fd94939291906193f5565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b031990941693909317909252905161143b9190619333565b6000604051808303818686fa925050503d8060008114611477576040519150601f19603f3d011682016040523d82523d6000602084013e61147c565b606091505b5091509150600082156114a0578180602001905181019061149d9190618a7f565b90505b806114ad575050506114d0565b808685815181106114ba57fe5b60209081029190910101525050506001016113b1565b505095945050505050565b8051606090806001600160401b03811180156114f657600080fd5b50604051908082528060200260200182016040528015611520578160200160208202803683370190505b50915060005b8181101561164557866001600160a01b03166372ea9076620c3500888888868151811061154f57fe5b60200260200101516040518563ffffffff1660e01b815260040161157593929190619477565b60006040518083038187803b15801561158d57600080fd5b5086fa935050505080156115c357506040513d6000823e601f3d908101601f191682016040526115c09190810190618a28565b60015b6115fd573d8080156115f1576040519150601f19603f3d011682016040523d82523d6000602084013e6115f6565b606091505b5050611645565b8086858151811061160a57fe5b60200260200101818152505085848151811061162257fe5b60200260200101516000141561163a57505050611645565b505050600101611526565b5050949350505050565b8051606090806001600160401b038111801561166a57600080fd5b50604051908082528060200260200182016040528015611694578160200160208202803683370190505b50915060005b818110156117ca57856001600160a01b031663d06ca61f620249f08684815181106116c157fe5b6020026020010151886040518463ffffffff1660e01b81526004016116e7929190619b09565b60006040518083038187803b1580156116ff57600080fd5b5086fa9350505050801561173557506040513d6000823e601f3d908101601f1916820160405261173291908101906189da565b60015b61176f573d808015611763576040519150601f19603f3d011682016040523d82523d6000602084013e611768565b606091505b50506117ca565b8060018751038151811061177f57fe5b602002602001015184838151811061179357fe5b6020026020010181815250508382815181106117ab57fe5b6020026020010151600014156117c157506117ca565b5060010161169a565b50509392505050565b8051606090806001600160401b03811180156117ee57600080fd5b50604051908082528060200260200182016040528015611818578160200160208202803683370190505b50915060005b81811015611645576000606088600001516001600160a01b0316621e84808a602001518a8a8a888151811061184f57fe5b6020026020010151604051602401611869939291906198da565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516118a79190619333565b6000604051808303818686fa925050503d80600081146118e3576040519150601f19603f3d011682016040523d82523d6000602084013e6118e8565b606091505b50915091506000821561190c57818060200190518101906119099190618a7f565b90505b8086858151811061191957fe5b60200260200101818152505085848151811061193157fe5b60200260200101516000141561194957505050611645565b50505060010161181e565b6020848101516040805160018082528183019092526060938492908281019080368337019050509050858160008151811061198b57fe5b6020908102919091010152606060006040519080825280602002602001820160405280156119c3578160200160208202803683370190505b50905087606001516001600160a01b0316866001600160a01b03161415611ab4576040516381efcbdd60e01b81526001600160a01b038416906381efcbdd906207a12090611a1c90899060019088908890600401619516565b60006040518083038187803b158015611a3457600080fd5b5086fa93505050508015611a6a57506040513d6000823e601f3d908101601f19168201604052611a679190810190618a97565b60015b611aa4573d808015611a98576040519150601f19603f3d011682016040523d82523d6000602084013e611a9d565b606091505b5050611aaf565b9350610ffe92505050565b611bc6565b87606001516001600160a01b0316856001600160a01b03161415611b0a576040516361e597f960e01b81526001600160a01b038416906361e597f9906207a12090611a1c908a9060019088908890600401619516565b6040516302b9a6cd60e11b81526001600160a01b038416906305734d9a906207a12090611b4a908a90600190889088908d90849084908490600401619559565b60006040518083038187803b158015611b6257600080fd5b5086fa93505050508015611b9857506040513d6000823e601f3d908101601f19168201604052611b959190810190618a97565b60015b611aa4573d808015610bce576040519150601f19603f3d011682016040523d82523d6000602084013e610bce565b505050949350505050565b6060806060611c52866001600160a01b031663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b158015611c1257600080fd5b505afa158015611c26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c4a91906181ce565b866000616239565b905083516001600160401b0381118015611c6b57600080fd5b50604051908082528060200260200182016040528015611c95578160200160208202803683370190505b50915083516001600160401b0381118015611caf57600080fd5b50604051908082528060200260200182016040528015611ce357816020015b6060815260200190600190039081611cce5790505b50925060005b8451811015611e1c5760606000805b8451811015611dd4576060611d208a878481518110611d1357fe5b60200260200101516166cf565b90508a6001600160a01b031663cdca1753620493e0838c8981518110611d4257fe5b60200260200101516040518463ffffffff1660e01b8152600401611d67929190619792565b602060405180830381600088803b158015611d8157600080fd5b5087f193505050508015611db2575060408051601f3d908101601f19168201909252611daf91810190618a7f565b60015b611dbb57611dcb565b808411611dc9578093508194505b505b50600101611cf8565b5080611de1575050611e1c565b80858481518110611dee57fe5b60200260200101818152505081868481518110611e0757fe5b60209081029190910101525050600101611ce9565b5050935093915050565b80516060908590806001600160401b0381118015611e4357600080fd5b50604051908082528060200260200182016040528015611e6d578160200160208202803683370190505b50604051630bcded8960e21b81529093506001600160a01b03831690632f37b62490611e9d90899060040161934f565b60206040518083038186803b158015611eb557600080fd5b505afa158015611ec9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eed9190618a0c565b1580611f725750604051630bcded8960e21b81526001600160a01b03831690632f37b62490611f2090889060040161934f565b60206040518083038186803b158015611f3857600080fd5b505afa158015611f4c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f709190618a0c565b155b15611f7e575050610ffe565b611f86617a60565b60405163f8b2cb4f60e01b81526001600160a01b0384169063f8b2cb4f90611fb2908a9060040161934f565b60206040518083038186803b158015611fca57600080fd5b505afa158015611fde573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120029190618a7f565b815260405163f8b2cb4f60e01b81526001600160a01b0384169063f8b2cb4f9061203090899060040161934f565b60206040518083038186803b15801561204857600080fd5b505afa15801561205c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120809190618a7f565b6020820152604051634a46c67360e11b81526001600160a01b0384169063948d8ce6906120b1908a9060040161934f565b60206040518083038186803b1580156120c957600080fd5b505afa1580156120dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121019190618a7f565b60408083019190915251634a46c67360e11b81526001600160a01b0384169063948d8ce69061213490899060040161934f565b60206040518083038186803b15801561214c57600080fd5b505afa158015612160573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121849190618a7f565b816060018181525050826001600160a01b031663d4cadf686040518163ffffffff1660e01b815260040160206040518083038186803b1580156121c657600080fd5b505afa1580156121da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121fe9190618a7f565b608082015260005b82811015610da55761223182602001516003670de0b6b3a76400008161222857fe5b04600101616832565b86828151811061223d57fe5b6020026020010151111561225057610da5565b836001600160a01b031663f8d6aed4620493e084600001518560400151866020015187606001518c888151811061228357fe5b602002602001015189608001516040518863ffffffff1660e01b81526004016122b196959493929190619b22565b60206040518083038187803b1580156122c957600080fd5b5086fa935050505080156122fa575060408051601f3d908101601f191682019092526122f791810190618a7f565b60015b612334573d808015612328576040519150601f19603f3d011682016040523d82523d6000602084013e61232d565b606091505b5050610da5565b8086838151811061234157fe5b60200260200101818152505085828151811061235957fe5b60200260200101516000141561236f5750610da5565b50600101612206565b60608060606123b9866001600160a01b031663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b158015611c1257600080fd5b905060606123c68661688f565b905084516001600160401b03811180156123df57600080fd5b50604051908082528060200260200182016040528015612409578160200160208202803683370190505b50925084516001600160401b038111801561242357600080fd5b5060405190808252806020026020018201604052801561245757816020015b60608152602001906001900390816124425790505b50935060005b85518110156125b25760606000805b855181101561256a57606061249c8661249789858151811061248a57fe5b6020026020010151616927565b6166cf565b90508b6001600160a01b0316632f80bb1d620493e0838d89815181106124be57fe5b60200260200101516040518463ffffffff1660e01b81526004016124e3929190619792565b602060405180830381600088803b1580156124fd57600080fd5b5087f19350505050801561252e575060408051601f3d908101601f1916820190925261252b91810190618a7f565b60015b61253757612561565b8315806125445750808410155b1561255f5780935061255c8c898581518110611d1357fe5b94505b505b5060010161246c565b50806125775750506125b2565b8086848151811061258457fe5b6020026020010181815250508187848151811061259d57fe5b6020908102919091010152505060010161245d565b505050935093915050565b60408051606081810190925261106c90806125dc86896080840161937c565b6040516020818303038152906040528152602001868860405160200161260392919061937c565b60405160208183030381529060405281526020016169bf81525083615f03565b60606126308484846106d7565b905060005b84518110156108425781818151811061264a57fe5b60200260200101516000146126d0576126b782828151811061266857fe5b602002602001015186838151811061267c57fe5b6020026020010151606001516001600160801b031687848151811061269d57fe5b6020026020010151604001516001600160801b0316616ad3565b8282815181106126c357fe5b6020026020010181815250505b600101612635565b6060816001600160401b03811180156126f057600080fd5b5060405190808252806020026020018201604052801561272a57816020015b612717617a8f565b81526020019060019003908161270f5790505b50905060005b80831461283257600182828151811061274557fe5b60209081029190910181015191151591015283838281811061276357fe5b90506020028101906127759190619b4a565b151590506127825761282a565b3084848381811061278f57fe5b90506020028101906127a19190619b4a565b6040516127af929190619323565b6000604051808303816000865af19150503d80600081146127ec576040519150601f19603f3d011682016040523d82523d6000602084013e6127f1565b606091505b508383815181106127fe57fe5b602002602001015160200184848151811061281557fe5b60209081029190910101519190915290151590525b600101612730565b5092915050565b606081516001600160401b038111801561285257600080fd5b5060405190808252806020026020018201604052801561287c578160200160208202803683370190505b50905060005b82518114612925577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168382815181106128c057fe5b60200260200101516001600160a01b031614612900576128fb8382815181106128e557fe5b60200260200101516001600160a01b0316616af7565b612903565b60125b60ff1682828151811061291257fe5b6020908102919091010152600101612882565b50919050565b60006060809450945094915050565b606061294683856158aa565b6000856000015190506000816001600160a01b03166336569e776040518163ffffffff1660e01b815260040160206040518083038186803b15801561298a57600080fd5b505afa15801561299e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129c291906181ce565b8451909150806001600160401b03811180156129dd57600080fd5b50604051908082528060200260200182016040528015612a07578160200160208202803683370190505b509350826001600160a01b031663f4b9fa756040518163ffffffff1660e01b815260040160206040518083038186803b158015612a4357600080fd5b505afa158015612a57573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a7b91906181ce565b6001600160a01b0316866001600160a01b031614158015612b1e5750826001600160a01b031663f4b9fa756040518163ffffffff1660e01b815260040160206040518083038186803b158015612ad057600080fd5b505afa158015612ae4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b0891906181ce565b6001600160a01b0316876001600160a01b031614155b15612b2b57505050610ffe565b60005b81811015610da5576000612b598a898b8a8681518110612b4a57fe5b60200260200101518989616ba3565b905080612b665750610da5565b80868381518110612b7357fe5b602090810291909101015250600101612b2e565b6060600085600001516001600160a01b031663bbd7f25585600f0b6040518263ffffffff1660e01b8152600401612bbe919061975d565b60206040518083038186803b158015612bd657600080fd5b505afa158015612bea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c0e9190618a7f565b8651604051631e01043960e01b81526001600160a01b0390911690631e01043990612c4190600f89900b9060040161975d565b60206040518083038186803b158015612c5957600080fd5b505afa158015612c6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c919190618a7f565b039050600086600001516001600160a01b031663c582951486600f0b6040518263ffffffff1660e01b8152600401612cc9919061975d565b60806040518083038186803b158015612ce157600080fd5b505afa158015612cf5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d199190618fc9565b935050505080601203600a0a8281612d2d57fe5b85519190049250806001600160401b0381118015612d4a57600080fd5b50604051908082528060200260200182016040528015612d74578160200160208202803683370190505b50935060005b81811015610da557600060608a600001516001600160a01b0316620927c08c602001518c8c8c8881518110612dab57fe5b6020026020010151604051602401612dc5939291906198da565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051612e039190619333565b6000604051808303818686fa925050503d8060008114612e3f576040519150601f19603f3d011682016040523d82523d6000602084013e612e44565b606091505b509150915060008215612e685781806020019051810190612e659190618a7f565b90505b868110612ea257835b85811015612e995787898281518110612e8657fe5b6020908102919091010152600101612e71565b50505050610da5565b80888581518110612eaf57fe5b602002602001018181525050878481518110612ec757fe5b602002602001015160001415612edf57505050610da5565b505050600101612d7a565b612ef2617aa7565b612efa617aa7565b600080805b87518114612fff57612f466020898381518110612f1857fe5b60200260200101515103878a8481518110612f2f57fe5b6020026020010151616e359092919063ffffffff16565b60006060306001600160a01b03168a8481518110612f6057fe5b6020026020010151604051612f759190619333565b6000604051808303816000865af19150503d8060008114612fb2576040519150601f19603f3d011682016040523d82523d6000602084013e612fb7565b606091505b50915091508115612ff5576000612fdb602083510383616e4590919063ffffffff16565b905084811115612ff357838852602088018290529350835b505b5050600101612eff565b508061300b57506130fa565b60005b865181146130f75761303e602088838151811061302757fe5b6020026020010151510383898481518110612f2f57fe5b60006060306001600160a01b031689848151811061305857fe5b602002602001015160405161306d9190619333565b6000604051808303816000865af19150503d80600081146130aa576040519150601f19603f3d011682016040523d82523d6000602084013e6130af565b606091505b509150915081156130ed5760006130d3602083510383616e4590919063ffffffff16565b9050858111156130eb57838752602087018290529450845b505b505060010161300e565b50505b93509350939050565b60408401516060906001600160e01b03191661318557604080516060810190915261317e90806131378689608084016198f8565b6040516020818303038152906040528152602001868860405160200161315e9291906198f8565b6040516020818303038152906040528152602001616e5181525083615f03565b9050610ffe565b8151806001600160401b038111801561319d57600080fd5b506040519080825280602002602001820160405280156131c7578160200160208202803683370190505b50915060005b81811015611645576000606088600001516001600160a01b0316621e84808a604001518a8a8a88815181106131fe57fe5b6020026020010151604051602401613218939291906198da565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516132569190619333565b6000604051808303818686fa925050503d8060008114613292576040519150601f19603f3d011682016040523d82523d6000602084013e613297565b606091505b5091509150600082156132bb57818060200190518101906132b89190618a7f565b90505b808685815181106132c857fe5b6020026020010181815250508584815181106132e057fe5b6020026020010151600014156132f857505050611645565b5050506001016131cd565b80516060908590806001600160401b038111801561332057600080fd5b5060405190808252806020026020018201604052801561334a578160200160208202803683370190505b50604051630bcded8960e21b81529093506001600160a01b03831690632f37b6249061337a90899060040161934f565b60206040518083038186803b15801561339257600080fd5b505afa1580156133a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133ca9190618a0c565b158061344f5750604051630bcded8960e21b81526001600160a01b03831690632f37b624906133fd90889060040161934f565b60206040518083038186803b15801561341557600080fd5b505afa158015613429573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061344d9190618a0c565b155b1561345b575050610ffe565b613463617a60565b60405163f8b2cb4f60e01b81526001600160a01b0384169063f8b2cb4f9061348f908a9060040161934f565b60206040518083038186803b1580156134a757600080fd5b505afa1580156134bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134df9190618a7f565b815260405163f8b2cb4f60e01b81526001600160a01b0384169063f8b2cb4f9061350d90899060040161934f565b60206040518083038186803b15801561352557600080fd5b505afa158015613539573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061355d9190618a7f565b6020820152604051634a46c67360e11b81526001600160a01b0384169063948d8ce69061358e908a9060040161934f565b60206040518083038186803b1580156135a657600080fd5b505afa1580156135ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135de9190618a7f565b60408083019190915251634a46c67360e11b81526001600160a01b0384169063948d8ce69061361190899060040161934f565b60206040518083038186803b15801561362957600080fd5b505afa15801561363d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136619190618a7f565b816060018181525050826001600160a01b031663d4cadf686040518163ffffffff1660e01b815260040160206040518083038186803b1580156136a357600080fd5b505afa1580156136b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136db9190618a7f565b608082015260005b82811015610da55781516136ff906706f05b59d3b20000616832565b86828151811061370b57fe5b6020026020010151111561371e57610da5565b836001600160a01b031663ba9530a6620493e084600001518560400151866020015187606001518c888151811061375157fe5b602002602001015189608001516040518863ffffffff1660e01b815260040161377f96959493929190619b22565b60206040518083038187803b15801561379757600080fd5b5086fa935050505080156137c8575060408051601f3d908101601f191682019092526137c591810190618a7f565b60015b6137f6573d808015612328576040519150601f19603f3d011682016040523d82523d6000602084013e61232d565b8086838151811061380357fe5b60200260200101818152505085828151811061381b57fe5b6020026020010151600014156138315750610da5565b506001016136e3565b6000808351600381111561384a57fe5b1480613862575060018351600381111561386057fe5b145b80613878575060408401516001600160801b0316155b8061388e575060608401516001600160801b0316155b1561389b5750600061397a565b6138a3617ac1565b600080846001600160a01b0316631fb0979588886040518363ffffffff1660e01b81526004016138d4929190619ab5565b60a06040518083038186803b1580156138ec57600080fd5b505afa158015613900573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139249190618f07565b9194509250905060018360200151600481111561393d57fe5b141580613948575080155b8061395b575086516001600160a01b0316155b1561396c576000935050505061397a565b506001600160801b03169150505b9392505050565b600060608061399085876158aa565b61399b878787616ea5565b9250826139a7576109a0565b60405163276fdad960e11b81523090634edfb5b2906139d0908a9087908b908b90600401619a7c565b60006040518083038186803b1580156139e857600080fd5b505afa1580156139fc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613a249190810190618a97565b876080018190525086608001519150613a9b6040518060600160405280878a604051602001613a549291906195f0565b6040516020818303038152906040528152602001888a604051602001613a7b9291906195f0565b604051602081830303815290604052815260200161700c81525085615f03565b90509450945094915050565b600080856001600160a01b031663901754d786866040518363ffffffff1660e01b8152600401613ad892919061937c565b60206040518083038186803b158015613af057600080fd5b505afa158015613b04573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b2891906181ce565b90506001600160a01b038116613b42576000915050610ffe565b60006001600160a01b03861615613bd4576040516370a0823160e01b81526001600160a01b038716906370a0823190613b7f90859060040161934f565b60206040518083038186803b158015613b9757600080fd5b505afa158015613bab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613bcf9190618a7f565b613be0565b816001600160a01b0316315b905083811015613bf557600092505050610ffe565b6040516303c2803f60e31b81526001600160a01b03831690631e1401f890620249f090613c2a908a908a908a90600401619477565b60206040518083038187803b158015613c4257600080fd5b5086fa93505050508015613c73575060408051601f3d908101601f19168201909252613c7091810190618a7f565b60015b613cb3573d808015613ca1576040519150601f19603f3d011682016040523d82523d6000602084013e613ca6565b606091505b5060009350505050610ffe565b9250610ffe915050565b6060613cc983856158aa565b602085015160408051600280825260608281019093528160200160208202803683370190505090508581600081518110613cff57fe5b60200260200101906001600160a01b031690816001600160a01b0316815250508481600181518110613d2d57fe5b6001600160a01b03909216602092830291909101909101528351806001600160401b0381118015613d5d57600080fd5b50604051908082528060200260200182016040528015613d87578160200160208202803683370190505b509350613d92617a39565b613d9a6158e9565b905060005b82811015610bce576060613db98b898481518110610ab057fe5b604051637c26833760e11b81529091506001600160a01b0387169063f84d066e90613def9060019085908a908990600401619820565b600060405180830381600087803b158015613e0957600080fd5b505af1925050508015613e3e57506040513d6000823e601f3d908101601f19168201604052613e3b9190810190618888565b60015b613e6c573d808015610b70576040519150601f19603f3d011682016040523d82523d6000602084013e610b75565b600081600081518110613e7b57fe5b6020026020010151905060008113613e9557505050610bce565b80898581518110613ea257fe5b602002602001018181525050505050600101613d9f565b8051606090806001600160401b0381118015613ed457600080fd5b50604051908082528060200260200182016040528015613efe578160200160208202803683370190505b50915060005b8181101561164557866001600160a01b031663343fbcdd62061a808888888681518110613f2d57fe5b60200260200101516040518563ffffffff1660e01b8152600401613f5393929190619477565b60206040518083038187803b158015613f6b57600080fd5b5086fa93505050508015613f9c575060408051601f3d908101601f19168201909252613f9991810190618a7f565b60015b613fca573d8080156115f1576040519150601f19603f3d011682016040523d82523d6000602084013e6115f6565b80848381518110613fd757fe5b602002602001018181525050838281518110613fef57fe5b6020026020010151600014156140055750611645565b50600101613f04565b600080606061401d85876158aa565b8351806001600160401b038111801561403557600080fd5b5060405190808252806020026020018201604052801561405f578160200160208202803683370190505b50915061406e898989896170f3565b945092506001600160a01b0383166140865750614140565b60005b8181101561413d5760006140f78986886040516020016140ab9392919061941f565b6040516020818303038152906040528987896040516020016140cf9392919061941f565b6040516020818303038152906040528985815181106140ea57fe5b6020026020010151617248565b90508084838151811061410657fe5b60200260200101818152505083828151811061411e57fe5b602002602001015160001415614134575061413d565b50600101614089565b50505b955095509592505050565b606061415783856158aa565b8151806001600160401b038111801561416f57600080fd5b50604051908082528060200260200182016040528015614199578160200160208202803683370190505b50915060005b8181101561164557866001600160a01b031663144a2752620f424087898886815181106141c857fe5b60200260200101516040518563ffffffff1660e01b81526004016141ee93929190619477565b60206040518083038187803b15801561420657600080fd5b5086fa93505050508015614237575060408051601f3d908101601f1916820190925261423491810190618a7f565b60015b614265573d8080156115f1576040519150601f19603f3d011682016040523d82523d6000602084013e6115f6565b8084838151811061427257fe5b60200260200101818152505083828151811061428a57fe5b6020026020010151600014156142a05750611645565b5060010161419f565b600060606142b784866158aa565b8251806001600160401b03811180156142cf57600080fd5b506040519080825280602002602001820160405280156142f9578160200160208202803683370190505b50915060005b8181101561436e57600061432889898989868151811061431b57fe5b6020026020010151613aa7565b90508084838151811061433757fe5b60200260200101818152505083828151811061434f57fe5b602002602001015160001415614365575061436e565b506001016142ff565b5060405163901754d760e01b81526001600160a01b0388169063901754d79061439d908990899060040161937c565b60206040518083038186803b1580156143b557600080fd5b505afa1580156143c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143ed91906181ce565b92505094509492505050565b60408051606081810190925261106c908061441886896080840161937c565b6040516020818303038152906040528152602001868860405160200161443f92919061937c565b604051602081830303815290604052815260200161733a81525083615f03565b606082516001600160401b038111801561447857600080fd5b506040519080825280602002602001820160405280156144a2578160200160208202803683370190505b50905060005b83518114612832577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168482815181106144e657fe5b60200260200101516001600160a01b0316146145305761452b8385838151811061450c57fe5b60200260200101516001600160a01b031661738190919063ffffffff16565b61453c565b826001600160a01b0316315b82828151811061454857fe5b60209081029190910101526001016144a8565b60408051606081810190925261106c908061457a86896080840161937c565b604051602081830303815290604052815260200186886040516020016145a192919061937c565b604051602081830303815290604052815260200161744b81525083615f03565b60606145cd83856158aa565b8151806001600160401b03811180156145e557600080fd5b5060405190808252806020026020018201604052801561460f578160200160208202803683370190505b50915060006001600160a01b038616156146325761462d87876159ac565b614635565b60005b905060006001600160a01b038616156146575761465288876159ac565b61465a565b60005b905060005b83811015610da55760016001600160a01b0388166146b05761468f846395b68fe760e01b898581518110610ca957fe5b87848151811061469b57fe5b6020026020010181935082815250505061474a565b6001600160a01b0389166146d65761468f8363cd7724c360e01b898581518110610ca957fe5b60006146f0856395b68fe760e01b8a8681518110610ca957fe5b92509050801561472d5761470c8463cd7724c360e01b83615a2b565b88858151811061471857fe5b60200260200101819450828152505050614748565b600087848151811061473b57fe5b6020026020010181815250505b505b80158061476a575085828151811061475e57fe5b60200260200101516000145b156147755750610da5565b5060010161465f565b8051606090806001600160401b038111801561479957600080fd5b506040519080825280602002602001820160405280156147c3578160200160208202803683370190505b50915060005b818110156117ca57856001600160a01b0316631f00ca74620249f08684815181106147f057fe5b6020026020010151886040518463ffffffff1660e01b8152600401614816929190619b09565b60006040518083038187803b15801561482e57600080fd5b5086fa9350505050801561486457506040513d6000823e601f3d908101601f1916820160405261486191908101906189da565b60015b614892573d808015611763576040519150601f19603f3d011682016040523d82523d6000602084013e611768565b8060008151811061489f57fe5b60200260200101518483815181106148b357fe5b6020026020010181815250508382815181106148cb57fe5b6020026020010151600014156148e157506117ca565b506001016147c9565b60606148f683856158aa565b8151806001600160401b038111801561490e57600080fd5b50604051908082528060200260200182016040528015614938578160200160208202803683370190505b50915060005b8181101561164557866001600160a01b031663ff1fd974620f4240888888868151811061496757fe5b60200260200101516040518563ffffffff1660e01b815260040161498d93929190619477565b60206040518083038187803b1580156149a557600080fd5b5086fa935050505080156149d6575060408051601f3d908101601f191682019092526149d391810190618a7f565b60015b614a04573d8080156115f1576040519150601f19603f3d011682016040523d82523d6000602084013e6115f6565b80848381518110614a1157fe5b602002602001018181525050838281518110614a2957fe5b602002602001015160001415614a3f5750611645565b5060010161493e565b6000606080614a5785876158aa565b614a62878787616ea5565b925082614a6e576109a0565b60405163276fdad960e11b81523090634edfb5b290614a97908a9087908b908b90600401619a7c565b60006040518083038186803b158015614aaf57600080fd5b505afa158015614ac3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052614aeb9190810190618a97565b608088018190528451909250806001600160401b0381118015614b0d57600080fd5b50604051908082528060200260200182016040528015614b37578160200160208202803683370190505b50915060005b81811015614c22576000306001600160a01b031663f1ed7fa48b8b8b8b8781518110614b6557fe5b60200260200101516040518563ffffffff1660e01b8152600401614b8c9493929190619a46565b60206040518083038186803b158015614ba457600080fd5b505afa158015614bb8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614bdc9190618a7f565b905080848381518110614beb57fe5b602002602001018181525050838281518110614c0357fe5b602002602001015160001415614c195750614c22565b50600101614b3d565b50509450945094915050565b6000806060614c3d85876158aa565b614c49888888886170f3565b935091506001600160a01b038216614c6057614140565b8351806001600160401b0381118015614c7857600080fd5b50604051908082528060200260200182016040528015614ca2578160200160208202803683370190505b506040805160608101909152909250614d0f9080614cc6898789156080850161941f565b6040516020818303038152906040528152602001898688604051602001614cef9392919061941f565b604051602081830303815290604052815260200161724881525086615f03565b915050955095509592505050565b6000806060614d2c85876158aa565b8351806001600160401b0381118015614d4457600080fd5b50604051908082528060200260200182016040528015614d6e578160200160208202803683370190505b508851604051630939d86360e11b81529193506001600160a01b031690631273b0c690614da1908a908a9060040161937c565b60206040518083038186803b158015614db957600080fd5b505afa158015614dcd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614df191906181ce565b925060006001600160a01b03841615614e0f57506001935086614eae565b8851604051630939d86360e11b81526001600160a01b0390911690631273b0c690614e40908a908c9060040161937c565b60206040518083038186803b158015614e5857600080fd5b505afa158015614e6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614e9091906181ce565b93506001600160a01b038416614ea75750506109a0565b5060009350855b836001600160a01b031663dd58b41c6040518163ffffffff1660e01b815260040160206040518083038186803b158015614ee757600080fd5b505afa158015614efb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614f1f9190618a0c565b614f2a5750506109a0565b614fa260405180606001604052808987858e60200151604051602001614f539493929190619396565b60405160208183030381529060405281526020018a87858e60200151604051602001614f829493929190619396565b604051602081830303815290604052815260200161610081525087615f03565b925050509450945094915050565b606083516001600160401b0381118015614fc957600080fd5b50604051908082528060200260200182016040528015614ff3578160200160208202803683370190505b50905060005b84518114610842577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031685828151811061503757fe5b60200260200101516001600160a01b0316146150835761507e848487848151811061505e57fe5b60200260200101516001600160a01b03166175009092919063ffffffff16565b615086565b60005b82828151811061509257fe5b6020908102919091010152600101614ff9565b8051606090806001600160401b03811180156150c057600080fd5b506040519080825280602002602001820160405280156150ea578160200160208202803683370190505b50915060005b8181101561164557866001600160a01b031663838e6a22620493e0888888868151811061511957fe5b60200260200101516040518563ffffffff1660e01b815260040161513f93929190619477565b60206040518083038187803b15801561515757600080fd5b5086fa93505050508015615188575060408051601f3d908101601f1916820190925261518591810190618a7f565b60015b6151b6573d8080156115f1576040519150601f19603f3d011682016040523d82523d6000602084013e6115f6565b808483815181106151c357fe5b602002602001018181525050506001016150f0565b6000846080015151600014156151f057506000610ffe565b84604001516001600160a01b031663418436bc6207a12087606001516001600160a01b0316876001600160a01b03161461522a5786615240565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee5b88606001516001600160a01b0316876001600160a01b0316146152635786615279565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee5b8660008b608001516040518763ffffffff1660e01b81526004016152a195949392919061949b565b60206040518083038187803b1580156152b957600080fd5b5086fa935050505080156152ea575060408051601f3d908101601f191682019092526152e791810190618a7f565b60015b615328573d808015615318576040519150601f19603f3d011682016040523d82523d6000602084013e61531d565b606091505b506000915050610ffe565b6000615333856175cc565b60ff1690506000615343876175cc565b60ff169050670de0b6b3a764000081600a0a83600a0a878602028161536457fe5b048161536c57fe5b049350505050610ffe565b6000606061538584866158aa565b8251806001600160401b038111801561539d57600080fd5b506040519080825280602002602001820160405280156153c7578160200160208202803683370190505b509150615432604051806060016040528089886040516020016153eb92919061937c565b6040516020818303038152906040528152602001898960405160200161541292919061937c565b60405160208183030381529060405281526020016175d781525085615f03565b60405163901754d760e01b81529092506001600160a01b0388169063901754d79061439d908990899060040161937c565b61546b617aa7565b615473617aa7565b6000198060005b8651811461556f576154aa602088838151811061549357fe5b6020026020010151510387898481518110612f2f57fe5b60006060306001600160a01b03168984815181106154c457fe5b60200260200101516040516154d99190619333565b6000604051808303816000865af19150503d8060008114615516576040519150601f19603f3d011682016040523d82523d6000602084013e61551b565b606091505b5091509150811561556557600061553f602083510383616e4590919063ffffffff16565b905060008111801561555057508481105b1561556357838752602087018290529350835b505b505060010161547a565b5060001981141561558057506130fa565b60005b875181146130f7576155b3602089838151811061559c57fe5b60200260200101515103838a8481518110612f2f57fe5b60006060306001600160a01b03168a84815181106155cd57fe5b60200260200101516040516155e29190619333565b6000604051808303816000865af19150503d806000811461561f576040519150601f19603f3d011682016040523d82523d6000602084013e615624565b606091505b5091509150811561566e576000615648602083510383616e4590919063ffffffff16565b905060008111801561565957508581105b1561566c57838852602088018290529450845b505b5050600101615583565b6000606085600001516001600160a01b03166321f8a72187600001516001600160a01b0316639232494e6040518163ffffffff1660e01b815260040160206040518083038186803b1580156156cc57600080fd5b505afa1580156156e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906157049190618a7f565b6040518263ffffffff1660e01b8152600401615720919061975d565b60206040518083038186803b15801561573857600080fd5b505afa15801561574c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061577091906181ce565b915085602001515160001415615785576158a1565b6000805b87602001515181101561589e576002886020015182815181106157a857fe5b60200260200101515110156157bc57615896565b836001600160a01b0316637f9c0ecd620493e08a6020015184815181106157df57fe5b60200260200101518860018a5103815181106157f757fe5b60200260200101516040518463ffffffff1660e01b815260040161581c929190619614565b60206040518083038187803b15801561583457600080fd5b5086fa93505050508015615865575060408051601f3d908101601f1916820190925261586291810190618a7f565b60015b61586e57615896565b82811115615894578092508860200151828151811061588957fe5b602002602001015193505b505b600101615789565b50505b94509492505050565b806001600160a01b0316826001600160a01b031614156158e55760405162461bcd60e51b81526004016158dc90619954565b60405180910390fd5b5050565b6158f1617a39565b50604080516080810182523080825260006020830181905292820152606081019190915290565b604080516001808252818301909252606091829190816020015b61593a617ae3565b8152602001906001900390816159325790505090506040518060a00160405280856000015181526020016000815260200160018152602001848152602001604051806020016040528060008152508152508160008151811061599857fe5b602090810291909101015290505b92915050565b6040516303795fb160e11b81526000906001600160a01b038416906306f2bf62906159db90859060040161934f565b60206040518083038186803b1580156159f357600080fd5b505afa158015615a07573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061397a91906181ce565b6000806001600160a01b038516615a4157615b07565b6060856001600160a01b0316620249f08686604051602401615a63919061975d565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051615aa19190619333565b6000604051808303818686fa925050503d8060008114615add576040519150601f19603f3d011682016040523d82523d6000602084013e615ae2565b606091505b5090925090508115615b055780806020019051810190615b029190618a7f565b92505b505b935093915050565b600080600080846001600160a01b031663d9638d368b602001516040518263ffffffff1660e01b8152600401615b45919061975d565b60a06040518083038186803b158015615b5d57600080fd5b505afa158015615b71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190615b959190618ffe565b94509450505092506000620f424090508a604001516001600160a01b0316896001600160a01b03161415615cbd576000615bd48964e8d4a51000617627565b90506000615bf86b033b2e3c9fd0803ce8000000615bf2888561765d565b90617627565b9050848110615c105760009650505050505050615dc6565b6000615c9f670de0b6b3a7640000615c998c6001600160a01b031663568d4b6f6040518163ffffffff1660e01b815260040160206040518083038186803b158015615c5a57600080fd5b505afa158015615c6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190615c929190618a7f565b8690617627565b90617679565b90506000615cad84836176a3565b9850615dc6975050505050505050565b8a604001516001600160a01b03168a6001600160a01b03161415615dbd578784811115615cf257600095505050505050615dc6565b6000615d0e6b033b2e3c9fd0803ce8000000615bf288856176a3565b9050838111615d265760009650505050505050615dc6565b6000615dab8a6001600160a01b031663fae036d56040518163ffffffff1660e01b815260040160206040518083038186803b158015615d6457600080fd5b505afa158015615d78573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190615d9c9190618a7f565b670de0b6b3a76400009061765d565b90506000615cad82615c998688617627565b60009450505050505b9695505050505050565b600080615ddb617b15565b85806020019051810190615def9190618b2b565b91509150600085806020019051810190615e099190618b0f565b905060006060306322db5ed160e21b858786615e248c6176c2565b604051602401615e3794939291906199de565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051615e759190619333565b600060405180830381855afa9150503d8060008114615eb0576040519150601f19603f3d011682016040523d82523d6000602084013e615eb5565b606091505b509150915081615ecd5760009550505050505061397a565b80806020019051810190615ee191906189da565b600081518110615eed57fe5b6020026020010151955050505050509392505050565b606081516001600160401b0381118015615f1c57600080fd5b50604051908082528060200260200182016040528015615f46578160200160208202803683370190505b509050815160001415615f58576159a6565b6000615f898460000151856020015185600081518110615f7457fe5b6020026020010151876040015163ffffffff16565b905080615f9657506159a6565b6000615fb38560200151866000015184886040015163ffffffff16565b905080615fc15750506159a6565b60005b84518110156160f75760005b60058110156160b957615ff7868381518110615fe857fe5b60200260200101518486617703565b935083616003576160b9565b61601261271561271086617703565b93508361601e576160b9565b600061603b88602001518960000151878b6040015163ffffffff16565b90508061604857506160b9565b80935086838151811061605757fe5b602002602001015184106160b057600087848151811061607357fe5b602002602001015161271089868151811061608a57fe5b60200260200101518703028161609c57fe5b049050600581116160ae5750506160b9565b505b50600101615fd0565b506160d88582815181106160c957fe5b60200260200101518385617703565b8482815181106160e457fe5b6020908102919091010152600101615fc4565b50505092915050565b60008060008060008780602001905181019061611c9190618223565b9350935093509350816001600160a01b0316846001600160a01b03161415616206576040516351400f0b60e11b81526001600160a01b0384169063a2801e1690620493e09061616f908a9060040161975d565b60206040518083038187803b15801561618757600080fd5b5086fa935050505080156161b8575060408051601f3d908101601f191682019092526161b591810190618a7f565b60015b6161fa573d8080156161e6576040519150601f19603f3d011682016040523d82523d6000602084013e6161eb565b606091505b5060009550505050505061397a565b945061397a9350505050565b60405163ca19ebd960e01b81526001600160a01b0382169063ca19ebd990620493e09061616f9087908b90600401619363565b6060600282845103101561625f5760405162461bcd60e51b81526004016158dc90619910565b616267617b35565b5060408051606080820183526101f48252610bb8602083015261271082840152825160038082526080820190945291929091908160200160208202803683370190505090506000808686815181106162bb57fe5b6020026020010151905060008787600101815181106162d657fe5b6020026020010151905060005b60038110156163cb5760008a6001600160a01b0316631698ee8285858a866003811061630b57fe5b60200201516040518463ffffffff1660e01b815260040161632e939291906197a5565b60206040518083038186803b15801561634657600080fd5b505afa15801561635a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061637e91906181ce565b90506163898161775b565b156163c257808686806001019750815181106163a157fe5b60200260200101906001600160a01b031690816001600160a01b0316815250505b506001016162e3565b505050806163db5750505061397a565b85518560020114156164d157806001600160401b03811180156163fd57600080fd5b5060405190808252806020026020018201604052801561643157816020015b606081526020019060019003908161641c5790505b50935060005b818110156164c85760408051600180825281830190925290602080830190803683370190505085828151811061646957fe5b602002602001018190525082818151811061648057fe5b602002602001015185828151811061649457fe5b60200260200101516000815181106164a857fe5b6001600160a01b0390921660209283029190910190910152600101616437565b5050505061397a565b60606164e1888888600101616239565b90508051600014156164f6575050505061397a565b805182026001600160401b038111801561650f57600080fd5b5060405190808252806020026020018201604052801561654357816020015b606081526020019060019003908161652e5790505b50945060005b828110156166c35760005b82518110156166ba57825182810282019084908390811061657157fe5b6020026020010151516001016001600160401b038111801561659257600080fd5b506040519080825280602002602001820160405280156165bc578160200160208202803683370190505b508882815181106165c957fe5b60200260200101819052508583815181106165e057fe5b60200260200101518882815181106165f457fe5b602002602001015160008151811061660857fe5b60200260200101906001600160a01b031690816001600160a01b03168152505060005b84838151811061663757fe5b6020026020010151518110156166b05784838151811061665357fe5b6020026020010151818151811061666657fe5b602002602001015189838151811061667a57fe5b6020026020010151826001018151811061669057fe5b6001600160a01b039092166020928302919091019091015260010161662b565b5050600101616554565b50600101616549565b50505050509392505050565b606060028351101580156166e7575081516001018351145b6167035760405162461bcd60e51b81526004016158dc90619999565b81516003028351601402016001600160401b038111801561672357600080fd5b506040519080825280601f01601f19166020018201604052801561674e576020820181803683370190505b5090506020810160005b845181101561682a5780156167fd57600084600183038151811061677857fe5b60200260200101516001600160a01b031663ddca3f436040518163ffffffff1660e01b815260040160206040518083038186803b1580156167b857600080fd5b505afa1580156167cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906167f09190618f83565b60e81b8352506003909101905b600085828151811061680b57fe5b602090810291909101015160601b835250601490910190600101616758565b505092915050565b6000828202831580159061684f57508284828161684b57fe5b0414155b1561685e5760009150506159a6565b6706f05b59d3b2000081018181101561687c576000925050506159a6565b670de0b6b3a76400009004949350505050565b606081516001600160401b03811180156168a857600080fd5b506040519080825280602002602001820160405280156168d2578160200160208202803683370190505b50905060005b8251811015612925578260018285510303815181106168f357fe5b602002602001015182828151811061690757fe5b6001600160a01b03909216602092830291909101909101526001016168d8565b606081516001600160401b038111801561694057600080fd5b5060405190808252806020026020018201604052801561696a578160200160208202803683370190505b50905060005b82518110156129255782600182855103038151811061698b57fe5b602002602001015182828151811061699f57fe5b6001600160a01b0390921660209283029190910190910152600101616970565b6000806000858060200190518101906169d891906181ea565b915091506000858060200190518101906169f291906181ce565b90503063e8e4af09838584616a068a6176c2565b6040518563ffffffff1660e01b8152600401616a2594939291906193c1565b60006040518083038186803b158015616a3d57600080fd5b505afa925050508015616a7257506040513d6000823e601f3d908101601f19168201604052616a6f91908101906189da565b60015b616ab3573d808015616aa0576040519150601f19603f3d011682016040523d82523d6000602084013e616aa5565b606091505b50600094505050505061397a565b80600081518110616ac057fe5b602002602001015194505050505061397a565b6000610ffe83615c99616ae78260016176a3565b616af18887617627565b9061765d565b60006012905060006060836001600160a01b031660405180604001604052806004815260200163313ce56760e01b815250604051616b359190619333565b600060405180830381855afa9150503d8060008114616b70576040519150601f19603f3d011682016040523d82523d6000602084013e616b75565b606091505b5091509150818015616b8957506020815110155b15616b9c57616b99816000616e45565b92505b5050919050565b600080600080846001600160a01b031663d9638d368b602001516040518263ffffffff1660e01b8152600401616bd9919061975d565b60a06040518083038186803b158015616bf157600080fd5b505afa158015616c05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190616c299190618ffe565b945094505050925089604001516001600160a01b0316886001600160a01b03161415616d405760008790506000616cd9886001600160a01b031663568d4b6f6040518163ffffffff1660e01b815260040160206040518083038186803b158015616c9257600080fd5b505afa158015616ca6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190616cca9190618a7f565b670de0b6b3a7640000906176a3565b90506000616cf382615c9985670de0b6b3a7640000617627565b90506000616d116b033b2e3c9fd0803ce8000000615bf2898561765d565b9050858110616d2a576000975050505050505050615dc6565b6000615cad6001616af18564e8d4a51000617679565b89604001516001600160a01b0316896001600160a01b03161415616e25576000616d6f8864e8d4a51000617627565b90506000616daf886001600160a01b031663fae036d56040518163ffffffff1660e01b815260040160206040518083038186803b158015615d6457600080fd5b90506000616dc9670de0b6b3a7640000615c998585617627565b905085811115616de25760009650505050505050615dc6565b6000616dfe6b033b2e3c9fd0803ce8000000615bf289856176a3565b9050848111616e17576000975050505050505050615dc6565b509550615dc6945050505050565b5060009998505050505050505050565b616e40838383617967565b505050565b600061397a838361798e565b600080616e5c617b15565b85806020019051810190616e709190618b2b565b91509150600085806020019051810190616e8a9190618b0f565b9050600060603063205e01d760e11b858786615e248c6176c2565b600080846020015190506060816001600160a01b031663910ffc7187606001516001600160a01b0316876001600160a01b031614616ee35786616ef9565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee5b88606001516001600160a01b0316876001600160a01b031614616f1c5786616f32565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee5b604080516000815260208101918290526001600160e01b031960e086901b16909152616f6692919060019060248101619443565b60006040518083038186803b158015616f7e57600080fd5b505afa158015616f92573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052616fba919081019061861b565b505090508051866000015110616fd657506000915061397a9050565b80866000015181518110616fe657fe5b6020026020010151925060f883901c60001c60bb14156117ca57506000915061397a9050565b600080617017617b53565b8480602001905181019061702b91906182d1565b9150915060008680602001905181019061704591906182d1565b50604051633c7b5fe960e21b8152909150309063f1ed7fa490617072908590859088908b90600401619a46565b60206040518083038186803b15801561708a57600080fd5b505afa9250505080156170ba575060408051601f3d908101601f191682019092526170b791810190618a7f565b60015b6170e8573d808015616aa0576040519150601f19603f3d011682016040523d82523d6000602084013e616aa5565b935061397a92505050565b6000806060866001600160a01b03166357a281dc86866040518363ffffffff1660e01b815260040161712692919061937c565b60006040518083038186803b15801561713e57600080fd5b505afa158015617152573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261717a9190810190618583565b905060019150805160001415617213576040516315e8a07760e21b81526001600160a01b038816906357a281dc906171b8908790899060040161937c565b60006040518083038186803b1580156171d057600080fd5b505afa1580156171e4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261720c9190810190618583565b9050600091505b805186106172285760008092509250506158a1565b80868151811061723457fe5b602002602001015192505094509492505050565b600080600080868060200190518101906172629190618281565b925092509250801561730657604051633cd0243b60e11b81526001600160a01b038316906379a0487690620493e0906172a2906000908a90600401619363565b604080518083038187803b1580156172b957600080fd5b5086fa935050505080156172ea575060408051601f3d908101601f191682019092526172e791810190618fa6565b60015b6172fa576000935050505061397a565b50935061397a92505050565b6040516366410a2160e01b81526001600160a01b038316906366410a2190620493e0906172a2906000908a90600401619363565b60008060008580602001905181019061735391906181ea565b9150915060008580602001905181019061736d91906181ce565b9050306330d6570d838584616a068a6176c2565b6000806060846001600160a01b03166370a0823160e01b856040516024016173a9919061934f565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516173e79190619333565b600060405180830381855afa9150503d8060008114617422576040519150601f19603f3d011682016040523d82523d6000602084013e617427565b606091505b509150915081801561743b57506020815110155b1561682a5761106c816000616e45565b60008060008580602001905181019061746491906181ea565b9150915060008580602001905181019061747e91906181ce565b90503063a469841762061a808486856174968b6176c2565b6040518663ffffffff1660e01b81526004016174b594939291906193c1565b60006040518083038187803b1580156174cd57600080fd5b5086fa93505050508015616a7257506040513d6000823e601f3d908101601f19168201604052616a6f91908101906189da565b6000806060856001600160a01b031663dd62ed3e60e01b868660405160240161752a92919061937c565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516175689190619333565b600060405180830381855afa9150503d80600081146175a3576040519150601f19603f3d011682016040523d82523d6000602084013e6175a8565b606091505b50915091508180156175bc57506020815110155b156117ca57615dc6816000616e45565b60006159a682616af7565b6000806000858060200190518101906175f091906181ea565b915091506000808680602001905181019061760b91906181ea565b9150915061761b84848389613aa7565b98975050505050505050565b600082617636575060006159a6565b8282028284828161764357fe5b041461397a5761397a617658600186866179b8565b617a12565b60008282018381101561397a5761397a617658600086866179b8565b60008161768f5761768f617658600385856179b8565b600082848161769a57fe5b04949350505050565b6000828211156176bc576176bc617658600285856179b8565b50900390565b6040805160018082528183019092526060916020808301908036833701905050905081816000815181106176f257fe5b602002602001018181525050919050565b6000831580617710575081155b80617719575082155b156177265750600061397a565b8382028285828161773357fe5b041461774357600091505061397a565b836001850382018161775157fe5b0495945050505050565b6000813b8061776e5760009150506109af565b50816001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b1580156177a857600080fd5b505afa1580156177bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906177e091906181ce565b6001600160a01b03166370a08231836040518263ffffffff1660e01b815260040161780b919061934f565b60206040518083038186803b15801561782357600080fd5b505afa158015617837573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061785b9190618a7f565b617867575060006109af565b816001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b1580156178a057600080fd5b505afa1580156178b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906178d891906181ce565b6001600160a01b03166370a08231836040518263ffffffff1660e01b8152600401617903919061934f565b60206040518083038186803b15801561791b57600080fd5b505afa15801561792f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906179539190618a7f565b61795f575060006109af565b506001919050565b8160200183511015617986576179866176586005855185602001617a1a565b910160200152565b600081602001835110156179af576179af6176586005855185602001617a1a565b50016020015190565b606063e946c1bb60e01b8484846040516024016179d7939291906197f1565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915290509392505050565b805160208201fd5b6060632800659560e01b8484846040516024016179d793929190619812565b60408051608081018252600080825260208201819052918101829052606081019190915290565b6040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b60408051808201909152606081526000602082015290565b604051806040016040528060008152602001606081525090565b6040805160608101909152600080825260208201908152600060209091015290565b6040518060a0016040528060008019168152602001600081526020016000815260200160008152602001606081525090565b604080516060810182526000808252602082018190529181019190915290565b60405180606001604052806003906020820280368337509192915050565b6040518060a001604052806000815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b03168152602001606081525090565b80356159a681619c44565b80516159a681619c44565b600082601f830112617bc3578081fd5b8135617bd6617bd182619bbb565b619b95565b818152915060208083019084810181840286018201871015617bf757600080fd5b60005b84811015617c1f578135617c0d81619c44565b84529282019290820190600101617bfa565b505050505092915050565b600082601f830112617c3a578081fd5b8135617c48617bd182619bbb565b818152915060208083019084810160005b84811015617c1f57617c70888484358a0101617bb3565b84529282019290820190600101617c59565b600082601f830112617c92578081fd5b8135617ca0617bd182619bbb565b818152915060208083019084810160005b84811015617c1f57617cc8888484358a0101617e71565b84529282019290820190600101617cb1565b600082601f830112617cea578081fd5b8135617cf8617bd182619bbb565b818152915060208083019084810181840286018201871015617d1957600080fd5b60005b84811015617c1f578135617d2f81619c44565b84529282019290820190600101617d1c565b600082601f830112617d51578081fd5b8135617d5f617bd182619bbb565b8181529150602080830190848101608080850287018301881015617d8257600080fd5b60005b85811015617da957617d97898461812d565b85529383019391810191600101617d85565b50505050505092915050565b600082601f830112617dc5578081fd5b8135617dd3617bd182619bbb565b818152915060208083019084810181840286018201871015617df457600080fd5b60005b84811015617c1f57813584529282019290820190600101617df7565b600082601f830112617e23578081fd5b8151617e31617bd182619bbb565b818152915060208083019084810181840286018201871015617e5257600080fd5b60005b84811015617c1f57815184529282019290820190600101617e55565b600082601f830112617e81578081fd5b8135617e8f617bd182619bda565b9150808252836020828501011115617ea657600080fd5b8060208401602084013760009082016020015292915050565b600082601f830112617ecf578081fd5b8151617edd617bd182619bda565b9150808252836020828501011115617ef457600080fd5b612832816020840160208601619bfd565b8051600281106159a657600080fd5b600060608284031215617f25578081fd5b617f2f6060619b95565b90508135617f3c81619c44565b81526020820135617f4c81619c67565b60208201526040820135617f5f81619c67565b604082015292915050565b600060608284031215617f7b578081fd5b617f856060619b95565b90508151617f9281619c44565b81526020820151617fa281619c67565b60208201526040820151617f5f81619c67565b600060a08284031215617fc6578081fd5b617fd060a0619b95565b9050813581526020820135617fe481619c44565b60208201526040820135617ff781619c44565b6040820152606082013561800a81619c44565b606082015260808201356001600160401b0381111561802857600080fd5b61803484828501617e71565b60808301525092915050565b6000610180808385031215618053578182fd5b61805c81619b95565b9150506180698383617b9d565b81526180788360208401617b9d565b602082015261808a8360408401618190565b604082015261809c8360608401618190565b60608201526180ae8360808401618190565b60808201526180c08360a08401617b9d565b60a08201526180d28360c08401617b9d565b60c08201526180e48360e08401617b9d565b60e08201526101006180f884828501617b9d565b9082015261012082810135908201526101406181168482850161819b565b818301525061016080830135818301525092915050565b60006080828403121561813e578081fd5b6181486080619b95565b905081356004811061815957600080fd5b8152602082013560ff8116811461816f57600080fd5b80602083015250604082013560408201526060820135606082015292915050565b80356159a681619c8c565b80356001600160401b03811681146159a657600080fd5b6000602082840312156181c3578081fd5b813561397a81619c44565b6000602082840312156181df578081fd5b815161397a81619c44565b600080604083850312156181fc578081fd5b825161820781619c44565b602084015190925061821881619c44565b809150509250929050565b60008060008060808587031215618238578182fd5b845161824381619c44565b602086015190945061825481619c44565b604086015190935061826581619c44565b606086015190925061827681619c44565b939692955090935050565b600080600060608486031215618295578081fd5b83516182a081619c44565b60208501519093506182b181619c44565b604085015190925080151581146182c6578182fd5b809150509250925092565b600080604083850312156182e3578182fd5b82516182ee81619c44565b60208401519092506001600160401b038082111561830a578283fd5b9084019060a0828703121561831d578283fd5b61832760a0619b95565b825181526183388760208501617ba8565b602082015261834a8760408501617ba8565b604082015261835c8760608501617ba8565b6060820152608083015182811115618372578485fd5b61837e88828601617ebf565b6080830152508093505050509250929050565b600080600080600060a086880312156183a8578283fd5b85356183b381619c44565b945060208601356183c381619c44565b935060408601356183d381619c44565b925060608601356183e381619c44565b915060808601356001600160401b038111156183fd578182fd5b61840988828901617db5565b9150509295509295909350565b6000806000806080858703121561842b578182fd5b843561843681619c44565b9350602085013561844681619c44565b9250604085013561845681619c44565b915060608501356001600160401b03811115618470578182fd5b61847c87828801617db5565b91505092959194509250565b6000806000806080858703121561849d578182fd5b84356184a881619c44565b935060208501356184b881619c44565b925060408501356184c881619c44565b9396929550929360600135925050565b6000806000606084860312156184ec578081fd5b83356184f781619c44565b925060208401356001600160401b0380821115618512578283fd5b61851e87838801617bb3565b93506040860135915080821115618533578283fd5b5061854086828701617db5565b9150509250925092565b600080600080600060a08688031215618561578283fd5b853561856c81619c44565b94506020860135935060408601356183d381619c44565b60006020808385031215618595578182fd5b82516001600160401b038111156185aa578283fd5b8301601f810185136185ba578283fd5b80516185c8617bd182619bbb565b81815283810190838501858402850186018910156185e4578687fd5b8694505b8385101561860f5780516185fb81619c44565b8352600194909401939185019185016185e8565b50979650505050505050565b60008060006060848603121561862f578081fd5b83516001600160401b0380821115618645578283fd5b818601915086601f830112618658578283fd5b8151618666617bd182619bbb565b80828252602080830192508086018b828387028901011115618686578788fd5b8796505b848710156186a857805184526001969096019592810192810161868a565b5089015190975093505050808211156186bf578283fd5b506186cc86828701617e13565b9250506186dc8560408601617f05565b90509250925092565b600080602083850312156186f7578182fd5b82356001600160401b038082111561870d578384fd5b818501915085601f830112618720578384fd5b81358181111561872e578485fd5b8660208083028501011115618741578485fd5b60209290920196919550909350505050565b600080600060608486031215618767578081fd5b83356001600160401b038082111561877d578283fd5b61878987838801617c82565b9450602086013591508082111561879e578283fd5b506187ab86828701617c82565b925050604084013590509250925092565b6000602082840312156187cd578081fd5b81356001600160401b038111156187e2578182fd5b610ffe84828501617cda565b60008060408385031215618800578182fd5b82356001600160401b03811115618815578283fd5b61882185828601617cda565b925050602083013561821881619c44565b600080600060608486031215618846578081fd5b83356001600160401b0381111561885b578182fd5b61886786828701617cda565b935050602084013561887881619c44565b915060408401356182c681619c44565b6000602080838503121561889a578182fd5b82516001600160401b038111156188af578283fd5b8301601f810185136188bf578283fd5b80516188cd617bd182619bbb565b81815283810190838501858402850186018910156188e9578687fd5b8694505b8385101561860f5780518352600194909401939185019185016188ed565b60008060006060848603121561891f578081fd5b83356001600160401b0380821115618935578283fd5b818601915086601f830112618948578283fd5b8135618956617bd182619bbb565b80828252602080830192508086016101808c838288028a01011115618979578889fd5b8897505b858810156189a55761898f8d83618040565b855260019790970196938201939081019061897d565b509198508901359450505050808211156189bd578283fd5b506189ca86828701617d41565b9250506186dc8560408601617b9d565b6000602082840312156189eb578081fd5b81516001600160401b03811115618a00578182fd5b610ffe84828501617e13565b600060208284031215618a1d578081fd5b815161397a81619c59565b600080600060608486031215618a3c578081fd5b8351618a4781619c59565b60208501519093506001600160401b03811115618a62578182fd5b618a6e86828701617ebf565b925050604084015190509250925092565b600060208284031215618a90578081fd5b5051919050565b600060208284031215618aa8578081fd5b81516001600160401b03811115618abd578182fd5b610ffe84828501617ebf565b600080600060608486031215618add578081fd5b8335618ae881619c44565b925060208401356001600160401b0380821115618b03578283fd5b61851e87838801617cda565b600060208284031215618b20578081fd5b815161397a81619c7d565b60008060808385031215618b3d578182fd5b8251618b4881619c7d565b9150618b578460208501617f6a565b90509250929050565b60008060008084860360a0811215618b76578283fd5b6040811215618b83578283fd5b50618b8e6040619b95565b853581526020860135618ba081619c44565b602082015293506040850135618bb581619c44565b92506060850135618bc581619c44565b915060808501356001600160401b03811115618470578182fd5b60008060008060808587031215618bf4578182fd5b84356001600160401b0380821115618c0a578384fd5b9086019060408289031215618c1d578384fd5b618c276040619b95565b618c318984617b9d565b8152602083013582811115618c44578586fd5b618c508a828601617c2a565b60208301525080965050618c678860208901617b9d565b9450618c768860408901617b9d565b93506060870135915080821115618c8b578283fd5b5061847c87828801617db5565b60008060008060c08587031215618cad578182fd5b618cb78686617f14565b93506060850135618cc781619c7d565b92506080850135618cd781619c7d565b915060a08501356001600160401b03811115618470578182fd5b60008060008084860360a0811215618d07578283fd5b6040811215618d14578283fd5b50618d1f6040619b95565b8535618d2a81619c44565b81526020860135618ba081619c44565b60008060008060808587031215618d4f578182fd5b84356001600160401b0380821115618d65578384fd5b618d7188838901617fb5565b955060208701359150618d8382619c44565b909350604086013590618d9582619c44565b90925060608601359080821115618c8b578283fd5b60008060008060808587031215618dbf578182fd5b84356001600160401b03811115618dd4578283fd5b618de087828801617fb5565b94505060208501356184b881619c44565b60008060008060808587031215618e06578182fd5b84356001600160401b03811115618e1b578283fd5b618e2787828801617fb5565b945050602085013592506040850135618e3f81619c44565b9150606085013561827681619c44565b60008060006102208486031215618e64578081fd5b618e6e8585618040565b9250618e7e85610180860161812d565b91506102008401356182c681619c44565b60008060008084860360c0811215618ea5578283fd5b6060811215618eb2578283fd5b50618ebd6060619b95565b8535618ec881619c44565b8152602086810135908201526040860135618ee281619c44565b604082015293506060850135618ef781619c44565b92506080850135618cd781619c44565b600080600083850360a0811215618f1c578182fd5b6060811215618f29578182fd5b50618f346060619b95565b84518152602085015160058110618f49578283fd5b60208201526040850151618f5c81619c8c565b60408201526060850151909350618f7281619c8c565b60808501519092506182c681619c59565b600060208284031215618f94578081fd5b815162ffffff8116811461397a578182fd5b60008060408385031215618fb8578182fd5b505080516020909101519092909150565b60008060008060808587031215618fde578182fd5b505082516020840151604085015160609095015191969095509092509050565b600080600080600060a08688031215619015578283fd5b5050835160208501516040860151606087015160809097015192989197509594509092509050565b6001600160a01b0316815260200190565b600081518352602082015160208401526040820151604084015260608201516060840152608082015160a06080850152610ffe60a085018261910a565b6001600160a01b03169052565b6000815180845260208085019450808401835b838110156190d05781516001600160a01b0316875295820195908201906001016190ab565b509495945050505050565b6000815180845260208085019450808401835b838110156190d0578151875295820195908201906001016190ee565b60008151808452619122816020860160208601619bfd565b601f01601f19169290920160200192915050565b80516001600160a01b031682526020808201516001600160e01b03199081169184019190915260409182015116910152565b80516001600160a01b039081168352602080830151151590840152604080830151909116908301526060908101511515910152565b600081518352602082015160406020850152610ffe604085018261910a565b600081518352602082015160018060a01b0380821660208601528060408501511660408601528060608501511660608601525050608082015160a06080850152610ffe60a085018261910a565b61921482825161908b565b6020810151619226602084018261908b565b5060408101516192396040840182619309565b50606081015161924c6060840182619309565b50608081015161925f6080840182619309565b5060a081015161927260a084018261908b565b5060c081015161928560c084018261908b565b5060e081015161929860e084018261908b565b50610100808201516192ac8285018261908b565b50506101208181015190830152610140808201516192cc82850182619316565b505061016090810151910152565b80516192e581619c2d565b825260208181015160ff169083015260408082015190830152606090810151910152565b6001600160801b03169052565b6001600160401b03169052565b6000828483379101908152919050565b60008251619345818460208701619bfd565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b03948516815292841660208401529083166040830152909116606082015260800190565b6001600160a01b038581168252848116602083015283166040820152608060608201819052600090615dc6908301846190db565b6001600160a01b039485168152928416602084015292166040820152606081019190915260800190565b6001600160a01b039384168152919092166020820152901515604082015260600190565b6001600160a01b038581168252841660208201528215156040820152608060608201819052600090615dc69083018461910a565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03868116825285166020820152604081018490526060810183905260a0608082018190526000906194d59083018461910a565b979650505050505050565b6001600160a01b038416815260606020820181905260009061950490830185619098565b8281036040840152615dc681856190db565b6001600160a01b0385168152600061952d85619c2d565b8460208301526080604083015261954760808301856190db565b82810360608401526194d581856190db565b6001600160a01b038981168252600090610100906195768b619c2d565b8a602085015281604085015261958e8285018b6190db565b915083820360608501526195a2828a6190db565b908816608085015290506195b586619c2d565b8560a084015282810360c08401526195cd81866190db565b905082810360e08401526195e181856190db565b9b9a5050505050505050505050565b6001600160a01b0383168152604060208201819052600090610ffe908301846191bc565b6000604082526196276040830185619098565b90508260208301529392505050565b60006040820160408352808551808352606085019150602092506060838202860101838801855b8381101561968b57605f1988840301855261967983835161910a565b9486019492509085019060010161965d565b50508581038487015261761b81886190db565b60208082528251828201819052600091906040908185019080840286018301878501865b8381101561970557888303603f19018552815180518785526196e68886018261910a565b91890151151594890194909452948701949250908601906001016196c2565b509098975050505050505050565b60006020825261397a60208301846190db565b901515815260200190565b83151581526001600160a01b038316602082015260606040820181905260009061106c908301846190db565b90815260200190565b600084825260606020830152619504606083018561910a565b60006020825261397a602083018461910a565b600060408252619627604083018561910a565b6001600160a01b03938416815291909216602082015262ffffff909116604082015260600190565b6001600160a01b0383168152604060208201819052600090610ffe908301846190db565b606081016197fe85619c2d565b938152602081019290925260409091015290565b60608101600885106197fe57fe5b600060e0820161982f87619c3a565b868352602060e081850152818751619847818561975d565b91508193508281028201838a01865b8381101561988057868303855261986e83835161904e565b94860194925090850190600101619856565b505086810360408801528094508851925061989b838261975d565b94505050818701845b828110156198c5576198b785835161903d565b9450908301906001016198a4565b505050508091505061106c6060830184619168565b600f93840b81529190920b6020820152604081019190915260600190565b600f83900b81526080810161397a6020830184619136565b60208082526024908201527f556e6973776170563353616d706c65722f746f6b656e5061746820746f6f20736040820152631a1bdc9d60e21b606082015260800190565b60208082526025908201527f455243323042726964676553616d706c65722f494e56414c49445f544f4b454e6040820152642fa820a4a960d91b606082015260800190565b60208082526025908201527f556e6973776170563353616d706c65722f696e76616c69642070617468206c656040820152646e6774687360d81b606082015260800190565b60006199ea8287619136565b84600f0b606083015283600f0b608083015260c060a0830152615dc660c08301846190db565b600060608252619a23606083018661919d565b8281036020840152619a35818661919d565b915050826040830152949350505050565b600060808252619a5960808301876191bc565b6001600160a01b0395861660208401529390941660408201526060015292915050565b600060808252619a8f60808301876191bc565b6020830195909552506001600160a01b0392831660408201529116606090910152919050565b6102008101619ac48285619209565b61397a6101808301846192da565b6102208101619ae18286619209565b619aef6101808301856192da565b6001600160a01b0392909216610200919091015292915050565b600083825260406020830152610ffe6040830184619098565b958652602086019490945260408501929092526060840152608083015260a082015260c00190565b6000808335601e19843603018112619b60578283fd5b8301803591506001600160401b03821115619b79578283fd5b602001915036819003821315619b8e57600080fd5b9250929050565b6040518181016001600160401b0381118282101715619bb357600080fd5b604052919050565b60006001600160401b03821115619bd0578081fd5b5060209081020190565b60006001600160401b03821115619bef578081fd5b50601f01601f191660200190565b60005b83811015619c18578181015183820152602001619c00565b83811115619c27576000848401525b50505050565b60048110619c3757fe5b50565b60028110619c3757fe5b6001600160a01b0381168114619c3757600080fd5b8015158114619c3757600080fd5b6001600160e01b031981168114619c3757600080fd5b80600f0b8114619c3757600080fd5b6001600160801b0381168114619c3757600080fdfea2646970667358221220c1f6148426ae90fe62d9fb20f2b2d0dfb05175627f257602d9223499b9bf406564736f6c634300060c0033",
                "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x2A0 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x9209483B GT PUSH2 0x167 JUMPI DUP1 PUSH4 0xC25C4138 GT PUSH2 0xCE JUMPI DUP1 PUSH4 0xDDD5AA28 GT PUSH2 0x87 JUMPI DUP1 PUSH4 0xDDD5AA28 EQ PUSH2 0x665 JUMPI DUP1 PUSH4 0xE78AC045 EQ PUSH2 0x678 JUMPI DUP1 PUSH4 0xE8E4AF09 EQ PUSH2 0x68B JUMPI DUP1 PUSH4 0xF1ED7FA4 EQ PUSH2 0x69E JUMPI DUP1 PUSH4 0xF5A4994D EQ PUSH2 0x6B1 JUMPI DUP1 PUSH4 0xFC9FE41B EQ PUSH2 0x6C4 JUMPI PUSH2 0x2A0 JUMP JUMPDEST DUP1 PUSH4 0xC25C4138 EQ PUSH2 0x5F3 JUMPI DUP1 PUSH4 0xC8319084 EQ PUSH2 0x606 JUMPI DUP1 PUSH4 0xC8C74A37 EQ PUSH2 0x619 JUMPI DUP1 PUSH4 0xC94706D8 EQ PUSH2 0x62C JUMPI DUP1 PUSH4 0xCC1621C9 EQ PUSH2 0x63F JUMPI DUP1 PUSH4 0xD9BCA372 EQ PUSH2 0x652 JUMPI PUSH2 0x2A0 JUMP JUMPDEST DUP1 PUSH4 0xA4698417 GT PUSH2 0x120 JUMPI DUP1 PUSH4 0xA4698417 EQ PUSH2 0x573 JUMPI DUP1 PUSH4 0xA75E744B EQ PUSH2 0x586 JUMPI DUP1 PUSH4 0xAB000276 EQ PUSH2 0x599 JUMPI DUP1 PUSH4 0xADC636BF EQ PUSH2 0x5AC JUMPI DUP1 PUSH4 0xB90CD2FB EQ PUSH2 0x5CD JUMPI DUP1 PUSH4 0xBD71ECF6 EQ PUSH2 0x5E0 JUMPI PUSH2 0x2A0 JUMP JUMPDEST DUP1 PUSH4 0x9209483B EQ PUSH2 0x4E5 JUMPI DUP1 PUSH4 0x98777748 EQ PUSH2 0x4F8 JUMPI DUP1 PUSH4 0x9BF3EE35 EQ PUSH2 0x50B JUMPI DUP1 PUSH4 0x9E3F05C3 EQ PUSH2 0x52B JUMPI DUP1 PUSH4 0x9EA0FF13 EQ PUSH2 0x54D JUMPI DUP1 PUSH4 0xA0295B8B EQ PUSH2 0x560 JUMPI PUSH2 0x2A0 JUMP JUMPDEST DUP1 PUSH4 0x4EDFB5B2 GT PUSH2 0x20B JUMPI DUP1 PUSH4 0x68BE3CF2 GT PUSH2 0x1C4 JUMPI DUP1 PUSH4 0x68BE3CF2 EQ PUSH2 0x457 JUMPI DUP1 PUSH4 0x706E2F9B EQ PUSH2 0x477 JUMPI DUP1 PUSH4 0x74C9D255 EQ PUSH2 0x48A JUMPI DUP1 PUSH4 0x7F7F4F13 EQ PUSH2 0x49D JUMPI DUP1 PUSH4 0x8B6D7B44 EQ PUSH2 0x4B0 JUMPI DUP1 PUSH4 0x8E5A0E07 EQ PUSH2 0x4C3 JUMPI PUSH2 0x2A0 JUMP JUMPDEST DUP1 PUSH4 0x4EDFB5B2 EQ PUSH2 0x3CA JUMPI DUP1 PUSH4 0x5505000A EQ PUSH2 0x3EA JUMPI DUP1 PUSH4 0x57494B1D EQ PUSH2 0x40B JUMPI DUP1 PUSH4 0x5AAE4E53 EQ PUSH2 0x41E JUMPI DUP1 PUSH4 0x5D5B674F EQ PUSH2 0x431 JUMPI DUP1 PUSH4 0x66A1AC6B EQ PUSH2 0x444 JUMPI PUSH2 0x2A0 JUMP JUMPDEST DUP1 PUSH4 0x29FA4AA0 GT PUSH2 0x25D JUMPI DUP1 PUSH4 0x29FA4AA0 EQ PUSH2 0x349 JUMPI DUP1 PUSH4 0x2AA64319 EQ PUSH2 0x35C JUMPI DUP1 PUSH4 0x2D753AA4 EQ PUSH2 0x37E JUMPI DUP1 PUSH4 0x30D6570D EQ PUSH2 0x391 JUMPI DUP1 PUSH4 0x3105FEC1 EQ PUSH2 0x3A4 JUMPI DUP1 PUSH4 0x40BC03AE EQ PUSH2 0x3B7 JUMPI PUSH2 0x2A0 JUMP JUMPDEST DUP1 PUSH4 0x1022742B EQ PUSH2 0x2A5 JUMPI DUP1 PUSH4 0x149DAB0E EQ PUSH2 0x2CE JUMPI DUP1 PUSH4 0x16279055 EQ PUSH2 0x2F0 JUMPI DUP1 PUSH4 0x2339078F EQ PUSH2 0x310 JUMPI DUP1 PUSH4 0x252322B3 EQ PUSH2 0x323 JUMPI DUP1 PUSH4 0x281E3432 EQ PUSH2 0x336 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2B8 PUSH2 0x2B3 CALLDATASIZE PUSH1 0x4 PUSH2 0x890B JUMP JUMPDEST PUSH2 0x6D7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2C5 SWAP2 SWAP1 PUSH2 0x9713 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2E1 PUSH2 0x2DC CALLDATASIZE PUSH1 0x4 PUSH2 0x8BDF JUMP JUMPDEST PUSH2 0x84A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2C5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x94E0 JUMP JUMPDEST PUSH2 0x303 PUSH2 0x2FE CALLDATASIZE PUSH1 0x4 PUSH2 0x81B2 JUMP JUMPDEST PUSH2 0x9AA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2C5 SWAP2 SWAP1 PUSH2 0x9726 JUMP JUMPDEST PUSH2 0x2B8 PUSH2 0x31E CALLDATASIZE PUSH1 0x4 PUSH2 0x8B60 JUMP JUMPDEST PUSH2 0x9B4 JUMP JUMPDEST PUSH2 0x2B8 PUSH2 0x331 CALLDATASIZE PUSH1 0x4 PUSH2 0x8416 JUMP JUMPDEST PUSH2 0xBDB JUMP JUMPDEST PUSH2 0x2B8 PUSH2 0x344 CALLDATASIZE PUSH1 0x4 PUSH2 0x8E8F JUMP JUMPDEST PUSH2 0xDB1 JUMP JUMPDEST PUSH2 0x2B8 PUSH2 0x357 CALLDATASIZE PUSH1 0x4 PUSH2 0x8C98 JUMP JUMPDEST PUSH2 0x1006 JUMP JUMPDEST PUSH2 0x36F PUSH2 0x36A CALLDATASIZE PUSH1 0x4 PUSH2 0x8CF1 JUMP JUMPDEST PUSH2 0x1075 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2C5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9731 JUMP JUMPDEST PUSH2 0x2B8 PUSH2 0x38C CALLDATASIZE PUSH1 0x4 PUSH2 0x8391 JUMP JUMPDEST PUSH2 0x1352 JUMP JUMPDEST PUSH2 0x2B8 PUSH2 0x39F CALLDATASIZE PUSH1 0x4 PUSH2 0x8416 JUMP JUMPDEST PUSH2 0x14DB JUMP JUMPDEST PUSH2 0x2B8 PUSH2 0x3B2 CALLDATASIZE PUSH1 0x4 PUSH2 0x84D8 JUMP JUMPDEST PUSH2 0x164F JUMP JUMPDEST PUSH2 0x2B8 PUSH2 0x3C5 CALLDATASIZE PUSH1 0x4 PUSH2 0x8C98 JUMP JUMPDEST PUSH2 0x17D3 JUMP JUMPDEST PUSH2 0x3DD PUSH2 0x3D8 CALLDATASIZE PUSH1 0x4 PUSH2 0x8DF1 JUMP JUMPDEST PUSH2 0x1954 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2C5 SWAP2 SWAP1 PUSH2 0x977F JUMP JUMPDEST PUSH2 0x3FD PUSH2 0x3F8 CALLDATASIZE PUSH1 0x4 PUSH2 0x8AC9 JUMP JUMPDEST PUSH2 0x1BD1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2C5 SWAP3 SWAP2 SWAP1 PUSH2 0x9636 JUMP JUMPDEST PUSH2 0x2B8 PUSH2 0x419 CALLDATASIZE PUSH1 0x4 PUSH2 0x8416 JUMP JUMPDEST PUSH2 0x1E26 JUMP JUMPDEST PUSH2 0x3FD PUSH2 0x42C CALLDATASIZE PUSH1 0x4 PUSH2 0x8AC9 JUMP JUMPDEST PUSH2 0x2378 JUMP JUMPDEST PUSH2 0x2B8 PUSH2 0x43F CALLDATASIZE PUSH1 0x4 PUSH2 0x8416 JUMP JUMPDEST PUSH2 0x25BD JUMP JUMPDEST PUSH2 0x2B8 PUSH2 0x452 CALLDATASIZE PUSH1 0x4 PUSH2 0x890B JUMP JUMPDEST PUSH2 0x2623 JUMP JUMPDEST PUSH2 0x46A PUSH2 0x465 CALLDATASIZE PUSH1 0x4 PUSH2 0x86E5 JUMP JUMPDEST PUSH2 0x26D8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2C5 SWAP2 SWAP1 PUSH2 0x969E JUMP JUMPDEST PUSH2 0x2B8 PUSH2 0x485 CALLDATASIZE PUSH1 0x4 PUSH2 0x87BC JUMP JUMPDEST PUSH2 0x2839 JUMP JUMPDEST PUSH2 0x2E1 PUSH2 0x498 CALLDATASIZE PUSH1 0x4 PUSH2 0x8BDF JUMP JUMPDEST PUSH2 0x292B JUMP JUMPDEST PUSH2 0x2B8 PUSH2 0x4AB CALLDATASIZE PUSH1 0x4 PUSH2 0x8E8F JUMP JUMPDEST PUSH2 0x293A JUMP JUMPDEST PUSH2 0x2B8 PUSH2 0x4BE CALLDATASIZE PUSH1 0x4 PUSH2 0x8C98 JUMP JUMPDEST PUSH2 0x2B87 JUMP JUMPDEST PUSH2 0x4D6 PUSH2 0x4D1 CALLDATASIZE PUSH1 0x4 PUSH2 0x8753 JUMP JUMPDEST PUSH2 0x2EEA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2C5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9A10 JUMP JUMPDEST PUSH2 0x2B8 PUSH2 0x4F3 CALLDATASIZE PUSH1 0x4 PUSH2 0x8C98 JUMP JUMPDEST PUSH2 0x3103 JUMP JUMPDEST PUSH2 0x2B8 PUSH2 0x506 CALLDATASIZE PUSH1 0x4 PUSH2 0x8416 JUMP JUMPDEST PUSH2 0x3303 JUMP JUMPDEST PUSH2 0x51E PUSH2 0x519 CALLDATASIZE PUSH1 0x4 PUSH2 0x8E4F JUMP JUMPDEST PUSH2 0x383A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2C5 SWAP2 SWAP1 PUSH2 0x975D JUMP JUMPDEST PUSH2 0x53E PUSH2 0x539 CALLDATASIZE PUSH1 0x4 PUSH2 0x8D3A JUMP JUMPDEST PUSH2 0x3981 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2C5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9766 JUMP JUMPDEST PUSH2 0x51E PUSH2 0x55B CALLDATASIZE PUSH1 0x4 PUSH2 0x8488 JUMP JUMPDEST PUSH2 0x3AA7 JUMP JUMPDEST PUSH2 0x2B8 PUSH2 0x56E CALLDATASIZE PUSH1 0x4 PUSH2 0x8B60 JUMP JUMPDEST PUSH2 0x3CBD JUMP JUMPDEST PUSH2 0x2B8 PUSH2 0x581 CALLDATASIZE PUSH1 0x4 PUSH2 0x8416 JUMP JUMPDEST PUSH2 0x3EB9 JUMP JUMPDEST PUSH2 0x36F PUSH2 0x594 CALLDATASIZE PUSH1 0x4 PUSH2 0x854A JUMP JUMPDEST PUSH2 0x400E JUMP JUMPDEST PUSH2 0x2B8 PUSH2 0x5A7 CALLDATASIZE PUSH1 0x4 PUSH2 0x8416 JUMP JUMPDEST PUSH2 0x414B JUMP JUMPDEST PUSH2 0x5BF PUSH2 0x5BA CALLDATASIZE PUSH1 0x4 PUSH2 0x8416 JUMP JUMPDEST PUSH2 0x42A9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2C5 SWAP3 SWAP2 SWAP1 PUSH2 0x97CD JUMP JUMPDEST PUSH2 0x2B8 PUSH2 0x5DB CALLDATASIZE PUSH1 0x4 PUSH2 0x8416 JUMP JUMPDEST PUSH2 0x43F9 JUMP JUMPDEST PUSH2 0x2B8 PUSH2 0x5EE CALLDATASIZE PUSH1 0x4 PUSH2 0x87EE JUMP JUMPDEST PUSH2 0x445F JUMP JUMPDEST PUSH2 0x2B8 PUSH2 0x601 CALLDATASIZE PUSH1 0x4 PUSH2 0x8416 JUMP JUMPDEST PUSH2 0x455B JUMP JUMPDEST PUSH2 0x2B8 PUSH2 0x614 CALLDATASIZE PUSH1 0x4 PUSH2 0x8416 JUMP JUMPDEST PUSH2 0x45C1 JUMP JUMPDEST PUSH2 0x2B8 PUSH2 0x627 CALLDATASIZE PUSH1 0x4 PUSH2 0x84D8 JUMP JUMPDEST PUSH2 0x477E JUMP JUMPDEST PUSH2 0x2B8 PUSH2 0x63A CALLDATASIZE PUSH1 0x4 PUSH2 0x8416 JUMP JUMPDEST PUSH2 0x48EA JUMP JUMPDEST PUSH2 0x53E PUSH2 0x64D CALLDATASIZE PUSH1 0x4 PUSH2 0x8D3A JUMP JUMPDEST PUSH2 0x4A48 JUMP JUMPDEST PUSH2 0x36F PUSH2 0x660 CALLDATASIZE PUSH1 0x4 PUSH2 0x854A JUMP JUMPDEST PUSH2 0x4C2E JUMP JUMPDEST PUSH2 0x36F PUSH2 0x673 CALLDATASIZE PUSH1 0x4 PUSH2 0x8CF1 JUMP JUMPDEST PUSH2 0x4D1D JUMP JUMPDEST PUSH2 0x2B8 PUSH2 0x686 CALLDATASIZE PUSH1 0x4 PUSH2 0x8832 JUMP JUMPDEST PUSH2 0x4FB0 JUMP JUMPDEST PUSH2 0x2B8 PUSH2 0x699 CALLDATASIZE PUSH1 0x4 PUSH2 0x8416 JUMP JUMPDEST PUSH2 0x50A5 JUMP JUMPDEST PUSH2 0x51E PUSH2 0x6AC CALLDATASIZE PUSH1 0x4 PUSH2 0x8DAA JUMP JUMPDEST PUSH2 0x51D8 JUMP JUMPDEST PUSH2 0x5BF PUSH2 0x6BF CALLDATASIZE PUSH1 0x4 PUSH2 0x8416 JUMP JUMPDEST PUSH2 0x5377 JUMP JUMPDEST PUSH2 0x4D6 PUSH2 0x6D2 CALLDATASIZE PUSH1 0x4 PUSH2 0x8753 JUMP JUMPDEST PUSH2 0x5463 JUMP JUMPDEST PUSH1 0x60 DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x6F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x71A JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 EQ PUSH2 0x842 JUMPI ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x9BF3EE35 PUSH3 0x30D40 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x747 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x75B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x782 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9AD2 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x79A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x7CB JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x7C8 SWAP2 DUP2 ADD SWAP1 PUSH2 0x8A7F JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x81F JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x7F9 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x7FE JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x80D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP PUSH2 0x83A JUMP JUMPDEST DUP1 DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x82C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP JUMPDEST PUSH1 0x1 ADD PUSH2 0x720 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP1 DUP7 PUSH1 0x20 ADD MLOAD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x862 JUMPI PUSH2 0x9A0 JUMP JUMPDEST PUSH2 0x86E DUP8 DUP8 DUP8 DUP8 PUSH2 0x5678 JUMP JUMPDEST DUP6 MLOAD SWAP2 SWAP5 POP SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x88A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x8B4 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0x99E JUMPI DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x7F9C0ECD PUSH3 0x493E0 DUP6 DUP9 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x8E3 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x908 SWAP3 SWAP2 SWAP1 PUSH2 0x9614 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x920 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x951 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x94E SWAP2 DUP2 ADD SWAP1 PUSH2 0x8A7F JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x95A JUMPI PUSH2 0x99E JUMP JUMPDEST DUP1 DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x967 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x97F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x995 JUMPI POP PUSH2 0x99E JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x8BA JUMP JUMPDEST POP JUMPDEST SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST DUP1 EXTCODESIZE ISZERO ISZERO JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x9C0 DUP4 DUP6 PUSH2 0x58AA JUMP JUMPDEST PUSH1 0x20 DUP6 ADD MLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x2 DUP1 DUP3 MSTORE PUSH1 0x60 DUP3 DUP2 ADD SWAP1 SWAP4 MSTORE DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP6 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x9F6 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP DUP5 DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0xA24 JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE DUP4 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0xA54 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xA7E JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP4 POP PUSH2 0xA89 PUSH2 0x7A39 JUMP JUMPDEST PUSH2 0xA91 PUSH2 0x58E9 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0xBCE JUMPI PUSH1 0x60 PUSH2 0xABD DUP12 DUP10 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xAB0 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x5918 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x7C268337 PUSH1 0xE1 SHL DUP2 MSTORE SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND SWAP1 PUSH4 0xF84D066E SWAP1 PUSH2 0xAF3 SWAP1 PUSH1 0x0 SWAP1 DUP6 SWAP1 DUP11 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x9820 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xB0D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0xB42 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0xB3F SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x8888 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0xB7D JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0xB70 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xB75 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP POP PUSH2 0xBCE JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0xB8C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 NOT MUL SWAP1 POP PUSH1 0x0 DUP2 SGT PUSH2 0xBAA JUMPI POP POP POP PUSH2 0xBCE JUMP JUMPDEST DUP1 DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0xBB7 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP POP POP PUSH1 0x1 ADD PUSH2 0xA96 JUMP JUMPDEST POP POP POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0xBE7 DUP4 DUP6 PUSH2 0x58AA JUMP JUMPDEST DUP2 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0xBFF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xC29 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND ISZERO PUSH2 0xC4C JUMPI PUSH2 0xC47 DUP8 DUP8 PUSH2 0x59AC JUMP JUMPDEST PUSH2 0xC4F JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND ISZERO PUSH2 0xC71 JUMPI PUSH2 0xC6C DUP9 DUP8 PUSH2 0x59AC JUMP JUMPDEST PUSH2 0xC74 JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xDA5 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH2 0xCD7 JUMPI PUSH2 0xCB6 DUP5 PUSH4 0x2640F62C PUSH1 0xE0 SHL DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0xCA9 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x5A2B JUMP JUMPDEST DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xCC2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP4 POP DUP3 DUP2 MSTORE POP POP POP PUSH2 0xD71 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND PUSH2 0xCFD JUMPI PUSH2 0xCB6 DUP4 PUSH4 0x59E94862 PUSH1 0xE0 SHL DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0xCA9 JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH2 0xD17 DUP5 PUSH4 0x59E94862 PUSH1 0xE0 SHL DUP11 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0xCA9 JUMPI INVALID JUMPDEST SWAP3 POP SWAP1 POP DUP1 ISZERO PUSH2 0xD54 JUMPI PUSH2 0xD33 DUP6 PUSH4 0x9903D8B PUSH1 0xE2 SHL DUP4 PUSH2 0x5A2B JUMP JUMPDEST DUP9 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0xD3F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP5 POP DUP3 DUP2 MSTORE POP POP POP PUSH2 0xD6F JUMP JUMPDEST PUSH1 0x0 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xD62 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP JUMPDEST POP JUMPDEST DUP1 ISZERO DUP1 PUSH2 0xD91 JUMPI POP DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xD85 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ JUMPDEST ISZERO PUSH2 0xD9C JUMPI POP PUSH2 0xDA5 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0xC79 JUMP JUMPDEST POP POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0xDBD DUP4 DUP6 PUSH2 0x58AA JUMP JUMPDEST PUSH1 0x0 DUP6 PUSH1 0x0 ADD MLOAD SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x36569E77 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xE01 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xE15 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xE39 SWAP2 SWAP1 PUSH2 0x81CE JUMP JUMPDEST DUP5 MLOAD SWAP1 SWAP2 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0xE54 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xE7E JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP4 POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xF4B9FA75 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xEBA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xECE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xEF2 SWAP2 SWAP1 PUSH2 0x81CE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO DUP1 ISZERO PUSH2 0xF95 JUMPI POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xF4B9FA75 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xF47 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xF5B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xF7F SWAP2 SWAP1 PUSH2 0x81CE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO JUMPDEST ISZERO PUSH2 0xFA2 JUMPI POP POP POP PUSH2 0xFFE JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xDA5 JUMPI PUSH1 0x0 PUSH2 0xFD0 DUP11 DUP10 DUP12 DUP11 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0xFC1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP10 DUP10 PUSH2 0x5B0F JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0xFDD JUMPI POP PUSH2 0xDA5 JUMP JUMPDEST DUP1 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xFEA JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP PUSH1 0x1 ADD PUSH2 0xFA5 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 DUP2 ADD SWAP1 SWAP3 MSTORE PUSH2 0x106C SWAP1 DUP1 PUSH2 0x1025 DUP7 DUP10 PUSH1 0x80 DUP5 ADD PUSH2 0x98F8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x104C SWAP3 SWAP2 SWAP1 PUSH2 0x98F8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x5DD0 DUP2 MSTORE POP DUP4 PUSH2 0x5F03 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 PUSH2 0x1084 DUP6 DUP8 PUSH2 0x58AA JUMP JUMPDEST DUP4 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x109C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x10C6 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP DUP9 MLOAD PUSH1 0x40 MLOAD PUSH4 0x939D863 PUSH1 0xE1 SHL DUP2 MSTORE SWAP2 SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x1273B0C6 SWAP1 PUSH2 0x10F9 SWAP1 DUP11 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x937C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1111 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1125 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1149 SWAP2 SWAP1 PUSH2 0x81CE JUMP JUMPDEST SWAP3 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND ISZERO PUSH2 0x1167 JUMPI POP PUSH1 0x1 SWAP4 POP DUP7 PUSH2 0x1206 JUMP JUMPDEST DUP9 MLOAD PUSH1 0x40 MLOAD PUSH4 0x939D863 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x1273B0C6 SWAP1 PUSH2 0x1198 SWAP1 DUP11 SWAP1 DUP13 SWAP1 PUSH1 0x4 ADD PUSH2 0x937C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x11B0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x11C4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x11E8 SWAP2 SWAP1 PUSH2 0x81CE JUMP JUMPDEST SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x11FF JUMPI POP POP PUSH2 0x9A0 JUMP JUMPDEST POP PUSH1 0x0 SWAP4 POP DUP6 JUMPDEST DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDD58B41C PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x123F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1253 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1277 SWAP2 SWAP1 PUSH2 0x8A0C JUMP JUMPDEST PUSH2 0x1282 JUMPI POP POP PUSH2 0x9A0 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x1345 JUMPI PUSH1 0x0 PUSH2 0x12FF DUP11 DUP8 DUP6 DUP15 PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x12AD SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9396 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP11 DUP9 DUP7 DUP16 PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x12D7 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9396 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP11 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x12F2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x6100 JUMP JUMPDEST SWAP1 POP DUP1 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x130E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1326 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x133C JUMPI POP PUSH2 0x1345 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x1285 JUMP JUMPDEST POP POP POP SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x136D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1397 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH2 0x13AE JUMPI POP PUSH2 0x106C JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x14D0 JUMPI PUSH1 0x0 PUSH1 0x60 DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH3 0x61A80 PUSH4 0x6E79E133 PUSH1 0xE0 SHL DUP12 DUP12 DUP12 DUP12 DUP10 DUP2 MLOAD DUP2 LT PUSH2 0x13E2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x13FD SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x93F5 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x143B SWAP2 SWAP1 PUSH2 0x9333 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1477 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x147C JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x14A0 JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x149D SWAP2 SWAP1 PUSH2 0x8A7F JUMP JUMPDEST SWAP1 POP JUMPDEST DUP1 PUSH2 0x14AD JUMPI POP POP POP PUSH2 0x14D0 JUMP JUMPDEST DUP1 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x14BA JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x13B1 JUMP JUMPDEST POP POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x14F6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1520 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1645 JUMPI DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x72EA9076 PUSH3 0xC3500 DUP9 DUP9 DUP9 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x154F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1575 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9477 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x158D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x15C3 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x15C0 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x8A28 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x15FD JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x15F1 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x15F6 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP PUSH2 0x1645 JUMP JUMPDEST DUP1 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x160A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x1622 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x163A JUMPI POP POP POP PUSH2 0x1645 JUMP JUMPDEST POP POP POP PUSH1 0x1 ADD PUSH2 0x1526 JUMP JUMPDEST POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x166A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1694 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x17CA JUMPI DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD06CA61F PUSH3 0x249F0 DUP7 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x16C1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x16E7 SWAP3 SWAP2 SWAP1 PUSH2 0x9B09 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x16FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x1735 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x1732 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x89DA JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x176F JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x1763 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1768 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP PUSH2 0x17CA JUMP JUMPDEST DUP1 PUSH1 0x1 DUP8 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x177F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1793 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x17AB JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x17C1 JUMPI POP PUSH2 0x17CA JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x169A JUMP JUMPDEST POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x17EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1818 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1645 JUMPI PUSH1 0x0 PUSH1 0x60 DUP9 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH3 0x1E8480 DUP11 PUSH1 0x20 ADD MLOAD DUP11 DUP11 DUP11 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x184F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1869 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x98DA JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x18A7 SWAP2 SWAP1 PUSH2 0x9333 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x18E3 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x18E8 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x190C JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x1909 SWAP2 SWAP1 PUSH2 0x8A7F JUMP JUMPDEST SWAP1 POP JUMPDEST DUP1 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x1919 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x1931 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x1949 JUMPI POP POP POP PUSH2 0x1645 JUMP JUMPDEST POP POP POP PUSH1 0x1 ADD PUSH2 0x181E JUMP JUMPDEST PUSH1 0x20 DUP5 DUP2 ADD MLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP4 DUP5 SWAP3 SWAP1 DUP3 DUP2 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP6 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x198B JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x60 PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x19C3 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP8 PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x1AB4 JUMPI PUSH1 0x40 MLOAD PUSH4 0x81EFCBDD PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x81EFCBDD SWAP1 PUSH3 0x7A120 SWAP1 PUSH2 0x1A1C SWAP1 DUP10 SWAP1 PUSH1 0x1 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x9516 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1A34 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x1A6A JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x1A67 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x8A97 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1AA4 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x1A98 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1A9D JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP PUSH2 0x1AAF JUMP JUMPDEST SWAP4 POP PUSH2 0xFFE SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x1BC6 JUMP JUMPDEST DUP8 PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x1B0A JUMPI PUSH1 0x40 MLOAD PUSH4 0x61E597F9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x61E597F9 SWAP1 PUSH3 0x7A120 SWAP1 PUSH2 0x1A1C SWAP1 DUP11 SWAP1 PUSH1 0x1 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x9516 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x2B9A6CD PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x5734D9A SWAP1 PUSH3 0x7A120 SWAP1 PUSH2 0x1B4A SWAP1 DUP11 SWAP1 PUSH1 0x1 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP14 SWAP1 DUP5 SWAP1 DUP5 SWAP1 DUP5 SWAP1 PUSH1 0x4 ADD PUSH2 0x9559 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1B62 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x1B98 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x1B95 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x8A97 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1AA4 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0xBCE JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xBCE JUMP JUMPDEST POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH1 0x60 PUSH2 0x1C52 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xC45A0155 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1C12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1C26 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1C4A SWAP2 SWAP1 PUSH2 0x81CE JUMP JUMPDEST DUP7 PUSH1 0x0 PUSH2 0x6239 JUMP JUMPDEST SWAP1 POP DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x1C6B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1C95 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x1CAF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1CE3 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x1CCE JUMPI SWAP1 POP JUMPDEST POP SWAP3 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x1E1C JUMPI PUSH1 0x60 PUSH1 0x0 DUP1 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x1DD4 JUMPI PUSH1 0x60 PUSH2 0x1D20 DUP11 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x1D13 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x66CF JUMP JUMPDEST SWAP1 POP DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xCDCA1753 PUSH3 0x493E0 DUP4 DUP13 DUP10 DUP2 MLOAD DUP2 LT PUSH2 0x1D42 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1D67 SWAP3 SWAP2 SWAP1 PUSH2 0x9792 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1D81 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP8 CALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x1DB2 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x1DAF SWAP2 DUP2 ADD SWAP1 PUSH2 0x8A7F JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1DBB JUMPI PUSH2 0x1DCB JUMP JUMPDEST DUP1 DUP5 GT PUSH2 0x1DC9 JUMPI DUP1 SWAP4 POP DUP2 SWAP5 POP JUMPDEST POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x1CF8 JUMP JUMPDEST POP DUP1 PUSH2 0x1DE1 JUMPI POP POP PUSH2 0x1E1C JUMP JUMPDEST DUP1 DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x1DEE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP2 DUP7 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x1E07 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP PUSH1 0x1 ADD PUSH2 0x1CE9 JUMP JUMPDEST POP POP SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP6 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x1E43 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1E6D JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0xBCDED89 PUSH1 0xE2 SHL DUP2 MSTORE SWAP1 SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x2F37B624 SWAP1 PUSH2 0x1E9D SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x934F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1EB5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1EC9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1EED SWAP2 SWAP1 PUSH2 0x8A0C JUMP JUMPDEST ISZERO DUP1 PUSH2 0x1F72 JUMPI POP PUSH1 0x40 MLOAD PUSH4 0xBCDED89 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x2F37B624 SWAP1 PUSH2 0x1F20 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x934F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1F38 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1F4C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1F70 SWAP2 SWAP1 PUSH2 0x8A0C JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x1F7E JUMPI POP POP PUSH2 0xFFE JUMP JUMPDEST PUSH2 0x1F86 PUSH2 0x7A60 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xF8B2CB4F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0xF8B2CB4F SWAP1 PUSH2 0x1FB2 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x934F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1FCA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1FDE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2002 SWAP2 SWAP1 PUSH2 0x8A7F JUMP JUMPDEST DUP2 MSTORE PUSH1 0x40 MLOAD PUSH4 0xF8B2CB4F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0xF8B2CB4F SWAP1 PUSH2 0x2030 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x934F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2048 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x205C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2080 SWAP2 SWAP1 PUSH2 0x8A7F JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 MLOAD PUSH4 0x4A46C673 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x948D8CE6 SWAP1 PUSH2 0x20B1 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x934F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x20C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x20DD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2101 SWAP2 SWAP1 PUSH2 0x8A7F JUMP JUMPDEST PUSH1 0x40 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE MLOAD PUSH4 0x4A46C673 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x948D8CE6 SWAP1 PUSH2 0x2134 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x934F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x214C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2160 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2184 SWAP2 SWAP1 PUSH2 0x8A7F JUMP JUMPDEST DUP2 PUSH1 0x60 ADD DUP2 DUP2 MSTORE POP POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD4CADF68 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x21C6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x21DA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x21FE SWAP2 SWAP1 PUSH2 0x8A7F JUMP JUMPDEST PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0xDA5 JUMPI PUSH2 0x2231 DUP3 PUSH1 0x20 ADD MLOAD PUSH1 0x3 PUSH8 0xDE0B6B3A7640000 DUP2 PUSH2 0x2228 JUMPI INVALID JUMPDEST DIV PUSH1 0x1 ADD PUSH2 0x6832 JUMP JUMPDEST DUP7 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x223D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD GT ISZERO PUSH2 0x2250 JUMPI PUSH2 0xDA5 JUMP JUMPDEST DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xF8D6AED4 PUSH3 0x493E0 DUP5 PUSH1 0x0 ADD MLOAD DUP6 PUSH1 0x40 ADD MLOAD DUP7 PUSH1 0x20 ADD MLOAD DUP8 PUSH1 0x60 ADD MLOAD DUP13 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x2283 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP10 PUSH1 0x80 ADD MLOAD PUSH1 0x40 MLOAD DUP9 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x22B1 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9B22 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x22C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x22FA JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x22F7 SWAP2 DUP2 ADD SWAP1 PUSH2 0x8A7F JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x2334 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x2328 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x232D JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP PUSH2 0xDA5 JUMP JUMPDEST DUP1 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x2341 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2359 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x236F JUMPI POP PUSH2 0xDA5 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x2206 JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH1 0x60 PUSH2 0x23B9 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xC45A0155 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1C12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP PUSH1 0x60 PUSH2 0x23C6 DUP7 PUSH2 0x688F JUMP JUMPDEST SWAP1 POP DUP5 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x23DF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2409 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP3 POP DUP5 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x2423 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2457 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x2442 JUMPI SWAP1 POP JUMPDEST POP SWAP4 POP PUSH1 0x0 JUMPDEST DUP6 MLOAD DUP2 LT ISZERO PUSH2 0x25B2 JUMPI PUSH1 0x60 PUSH1 0x0 DUP1 JUMPDEST DUP6 MLOAD DUP2 LT ISZERO PUSH2 0x256A JUMPI PUSH1 0x60 PUSH2 0x249C DUP7 PUSH2 0x2497 DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x248A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x6927 JUMP JUMPDEST PUSH2 0x66CF JUMP JUMPDEST SWAP1 POP DUP12 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x2F80BB1D PUSH3 0x493E0 DUP4 DUP14 DUP10 DUP2 MLOAD DUP2 LT PUSH2 0x24BE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x24E3 SWAP3 SWAP2 SWAP1 PUSH2 0x9792 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x24FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP8 CALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x252E JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x252B SWAP2 DUP2 ADD SWAP1 PUSH2 0x8A7F JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x2537 JUMPI PUSH2 0x2561 JUMP JUMPDEST DUP4 ISZERO DUP1 PUSH2 0x2544 JUMPI POP DUP1 DUP5 LT ISZERO JUMPDEST ISZERO PUSH2 0x255F JUMPI DUP1 SWAP4 POP PUSH2 0x255C DUP13 DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x1D13 JUMPI INVALID JUMPDEST SWAP5 POP JUMPDEST POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x246C JUMP JUMPDEST POP DUP1 PUSH2 0x2577 JUMPI POP POP PUSH2 0x25B2 JUMP JUMPDEST DUP1 DUP7 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2584 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP2 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x259D JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP PUSH1 0x1 ADD PUSH2 0x245D JUMP JUMPDEST POP POP POP SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 DUP2 ADD SWAP1 SWAP3 MSTORE PUSH2 0x106C SWAP1 DUP1 PUSH2 0x25DC DUP7 DUP10 PUSH1 0x80 DUP5 ADD PUSH2 0x937C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2603 SWAP3 SWAP2 SWAP1 PUSH2 0x937C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x69BF DUP2 MSTORE POP DUP4 PUSH2 0x5F03 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x2630 DUP5 DUP5 DUP5 PUSH2 0x6D7 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x842 JUMPI DUP2 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x264A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ PUSH2 0x26D0 JUMPI PUSH2 0x26B7 DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2668 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x267C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x269D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND PUSH2 0x6AD3 JUMP JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x26C3 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP JUMPDEST PUSH1 0x1 ADD PUSH2 0x2635 JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x26F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x272A JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x2717 PUSH2 0x7A8F JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x270F JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP1 DUP4 EQ PUSH2 0x2832 JUMPI PUSH1 0x1 DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2745 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD SWAP2 ISZERO ISZERO SWAP2 ADD MSTORE DUP4 DUP4 DUP3 DUP2 DUP2 LT PUSH2 0x2763 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x2775 SWAP2 SWAP1 PUSH2 0x9B4A JUMP JUMPDEST ISZERO ISZERO SWAP1 POP PUSH2 0x2782 JUMPI PUSH2 0x282A JUMP JUMPDEST ADDRESS DUP5 DUP5 DUP4 DUP2 DUP2 LT PUSH2 0x278F JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x27A1 SWAP2 SWAP1 PUSH2 0x9B4A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x27AF SWAP3 SWAP2 SWAP1 PUSH2 0x9323 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x27EC JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x27F1 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x27FE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2815 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 ISZERO ISZERO SWAP1 MSTORE JUMPDEST PUSH1 0x1 ADD PUSH2 0x2730 JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x2852 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x287C JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 EQ PUSH2 0x2925 JUMPI PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x28C0 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x2900 JUMPI PUSH2 0x28FB DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x28E5 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x6AF7 JUMP JUMPDEST PUSH2 0x2903 JUMP JUMPDEST PUSH1 0x12 JUMPDEST PUSH1 0xFF AND DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2912 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x2882 JUMP JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP1 SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x2946 DUP4 DUP6 PUSH2 0x58AA JUMP JUMPDEST PUSH1 0x0 DUP6 PUSH1 0x0 ADD MLOAD SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x36569E77 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x298A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x299E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x29C2 SWAP2 SWAP1 PUSH2 0x81CE JUMP JUMPDEST DUP5 MLOAD SWAP1 SWAP2 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x29DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2A07 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP4 POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xF4B9FA75 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2A43 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2A57 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2A7B SWAP2 SWAP1 PUSH2 0x81CE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO DUP1 ISZERO PUSH2 0x2B1E JUMPI POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xF4B9FA75 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2AD0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2AE4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2B08 SWAP2 SWAP1 PUSH2 0x81CE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x2B2B JUMPI POP POP POP PUSH2 0xFFE JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xDA5 JUMPI PUSH1 0x0 PUSH2 0x2B59 DUP11 DUP10 DUP12 DUP11 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x2B4A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP10 DUP10 PUSH2 0x6BA3 JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x2B66 JUMPI POP PUSH2 0xDA5 JUMP JUMPDEST DUP1 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x2B73 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP PUSH1 0x1 ADD PUSH2 0x2B2E JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP6 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xBBD7F255 DUP6 PUSH1 0xF SIGNEXTEND PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2BBE SWAP2 SWAP1 PUSH2 0x975D JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2BD6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2BEA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2C0E SWAP2 SWAP1 PUSH2 0x8A7F JUMP JUMPDEST DUP7 MLOAD PUSH1 0x40 MLOAD PUSH4 0x1E010439 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x1E010439 SWAP1 PUSH2 0x2C41 SWAP1 PUSH1 0xF DUP10 SWAP1 SIGNEXTEND SWAP1 PUSH1 0x4 ADD PUSH2 0x975D JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2C59 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2C6D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2C91 SWAP2 SWAP1 PUSH2 0x8A7F JUMP JUMPDEST SUB SWAP1 POP PUSH1 0x0 DUP7 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xC5829514 DUP7 PUSH1 0xF SIGNEXTEND PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2CC9 SWAP2 SWAP1 PUSH2 0x975D JUMP JUMPDEST PUSH1 0x80 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2CE1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2CF5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2D19 SWAP2 SWAP1 PUSH2 0x8FC9 JUMP JUMPDEST SWAP4 POP POP POP POP DUP1 PUSH1 0x12 SUB PUSH1 0xA EXP DUP3 DUP2 PUSH2 0x2D2D JUMPI INVALID JUMPDEST DUP6 MLOAD SWAP2 SWAP1 DIV SWAP3 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x2D4A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2D74 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP4 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xDA5 JUMPI PUSH1 0x0 PUSH1 0x60 DUP11 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH3 0x927C0 DUP13 PUSH1 0x20 ADD MLOAD DUP13 DUP13 DUP13 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x2DAB JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x2DC5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x98DA JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x2E03 SWAP2 SWAP1 PUSH2 0x9333 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2E3F JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2E44 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x2E68 JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x2E65 SWAP2 SWAP1 PUSH2 0x8A7F JUMP JUMPDEST SWAP1 POP JUMPDEST DUP7 DUP2 LT PUSH2 0x2EA2 JUMPI DUP4 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x2E99 JUMPI DUP8 DUP10 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2E86 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x2E71 JUMP JUMPDEST POP POP POP POP PUSH2 0xDA5 JUMP JUMPDEST DUP1 DUP9 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x2EAF JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2EC7 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x2EDF JUMPI POP POP POP PUSH2 0xDA5 JUMP JUMPDEST POP POP POP PUSH1 0x1 ADD PUSH2 0x2D7A JUMP JUMPDEST PUSH2 0x2EF2 PUSH2 0x7AA7 JUMP JUMPDEST PUSH2 0x2EFA PUSH2 0x7AA7 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 JUMPDEST DUP8 MLOAD DUP2 EQ PUSH2 0x2FFF JUMPI PUSH2 0x2F46 PUSH1 0x20 DUP10 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x2F18 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD SUB DUP8 DUP11 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2F2F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x6E35 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP11 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2F60 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x2F75 SWAP2 SWAP1 PUSH2 0x9333 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2FB2 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2FB7 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0x2FF5 JUMPI PUSH1 0x0 PUSH2 0x2FDB PUSH1 0x20 DUP4 MLOAD SUB DUP4 PUSH2 0x6E45 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP5 DUP2 GT ISZERO PUSH2 0x2FF3 JUMPI DUP4 DUP9 MSTORE PUSH1 0x20 DUP9 ADD DUP3 SWAP1 MSTORE SWAP4 POP DUP4 JUMPDEST POP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x2EFF JUMP JUMPDEST POP DUP1 PUSH2 0x300B JUMPI POP PUSH2 0x30FA JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP7 MLOAD DUP2 EQ PUSH2 0x30F7 JUMPI PUSH2 0x303E PUSH1 0x20 DUP9 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x3027 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD SUB DUP4 DUP10 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2F2F JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP10 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x3058 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x306D SWAP2 SWAP1 PUSH2 0x9333 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x30AA JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x30AF JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0x30ED JUMPI PUSH1 0x0 PUSH2 0x30D3 PUSH1 0x20 DUP4 MLOAD SUB DUP4 PUSH2 0x6E45 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP6 DUP2 GT ISZERO PUSH2 0x30EB JUMPI DUP4 DUP8 MSTORE PUSH1 0x20 DUP8 ADD DUP3 SWAP1 MSTORE SWAP5 POP DUP5 JUMPDEST POP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x300E JUMP JUMPDEST POP POP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 DUP5 ADD MLOAD PUSH1 0x60 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH2 0x3185 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH2 0x317E SWAP1 DUP1 PUSH2 0x3137 DUP7 DUP10 PUSH1 0x80 DUP5 ADD PUSH2 0x98F8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x315E SWAP3 SWAP2 SWAP1 PUSH2 0x98F8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x6E51 DUP2 MSTORE POP DUP4 PUSH2 0x5F03 JUMP JUMPDEST SWAP1 POP PUSH2 0xFFE JUMP JUMPDEST DUP2 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x319D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x31C7 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1645 JUMPI PUSH1 0x0 PUSH1 0x60 DUP9 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH3 0x1E8480 DUP11 PUSH1 0x40 ADD MLOAD DUP11 DUP11 DUP11 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x31FE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x3218 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x98DA JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x3256 SWAP2 SWAP1 PUSH2 0x9333 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x3292 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x3297 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x32BB JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x32B8 SWAP2 SWAP1 PUSH2 0x8A7F JUMP JUMPDEST SWAP1 POP JUMPDEST DUP1 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x32C8 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x32E0 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x32F8 JUMPI POP POP POP PUSH2 0x1645 JUMP JUMPDEST POP POP POP PUSH1 0x1 ADD PUSH2 0x31CD JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP6 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x3320 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x334A JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0xBCDED89 PUSH1 0xE2 SHL DUP2 MSTORE SWAP1 SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x2F37B624 SWAP1 PUSH2 0x337A SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x934F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3392 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x33A6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x33CA SWAP2 SWAP1 PUSH2 0x8A0C JUMP JUMPDEST ISZERO DUP1 PUSH2 0x344F JUMPI POP PUSH1 0x40 MLOAD PUSH4 0xBCDED89 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x2F37B624 SWAP1 PUSH2 0x33FD SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x934F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3415 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3429 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x344D SWAP2 SWAP1 PUSH2 0x8A0C JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x345B JUMPI POP POP PUSH2 0xFFE JUMP JUMPDEST PUSH2 0x3463 PUSH2 0x7A60 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xF8B2CB4F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0xF8B2CB4F SWAP1 PUSH2 0x348F SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x934F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x34A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x34BB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x34DF SWAP2 SWAP1 PUSH2 0x8A7F JUMP JUMPDEST DUP2 MSTORE PUSH1 0x40 MLOAD PUSH4 0xF8B2CB4F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0xF8B2CB4F SWAP1 PUSH2 0x350D SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x934F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3525 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3539 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x355D SWAP2 SWAP1 PUSH2 0x8A7F JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 MLOAD PUSH4 0x4A46C673 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x948D8CE6 SWAP1 PUSH2 0x358E SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x934F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x35A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x35BA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x35DE SWAP2 SWAP1 PUSH2 0x8A7F JUMP JUMPDEST PUSH1 0x40 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE MLOAD PUSH4 0x4A46C673 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x948D8CE6 SWAP1 PUSH2 0x3611 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x934F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3629 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x363D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3661 SWAP2 SWAP1 PUSH2 0x8A7F JUMP JUMPDEST DUP2 PUSH1 0x60 ADD DUP2 DUP2 MSTORE POP POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD4CADF68 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x36A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x36B7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x36DB SWAP2 SWAP1 PUSH2 0x8A7F JUMP JUMPDEST PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0xDA5 JUMPI DUP2 MLOAD PUSH2 0x36FF SWAP1 PUSH8 0x6F05B59D3B20000 PUSH2 0x6832 JUMP JUMPDEST DUP7 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x370B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD GT ISZERO PUSH2 0x371E JUMPI PUSH2 0xDA5 JUMP JUMPDEST DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xBA9530A6 PUSH3 0x493E0 DUP5 PUSH1 0x0 ADD MLOAD DUP6 PUSH1 0x40 ADD MLOAD DUP7 PUSH1 0x20 ADD MLOAD DUP8 PUSH1 0x60 ADD MLOAD DUP13 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x3751 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP10 PUSH1 0x80 ADD MLOAD PUSH1 0x40 MLOAD DUP9 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x377F SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9B22 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3797 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x37C8 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x37C5 SWAP2 DUP2 ADD SWAP1 PUSH2 0x8A7F JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x37F6 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x2328 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x232D JUMP JUMPDEST DUP1 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x3803 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x381B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x3831 JUMPI POP PUSH2 0xDA5 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x36E3 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 MLOAD PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x384A JUMPI INVALID JUMPDEST EQ DUP1 PUSH2 0x3862 JUMPI POP PUSH1 0x1 DUP4 MLOAD PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x3860 JUMPI INVALID JUMPDEST EQ JUMPDEST DUP1 PUSH2 0x3878 JUMPI POP PUSH1 0x40 DUP5 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND ISZERO JUMPDEST DUP1 PUSH2 0x388E JUMPI POP PUSH1 0x60 DUP5 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND ISZERO JUMPDEST ISZERO PUSH2 0x389B JUMPI POP PUSH1 0x0 PUSH2 0x397A JUMP JUMPDEST PUSH2 0x38A3 PUSH2 0x7AC1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x1FB09795 DUP9 DUP9 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x38D4 SWAP3 SWAP2 SWAP1 PUSH2 0x9AB5 JUMP JUMPDEST PUSH1 0xA0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x38EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3900 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3924 SWAP2 SWAP1 PUSH2 0x8F07 JUMP JUMPDEST SWAP2 SWAP5 POP SWAP3 POP SWAP1 POP PUSH1 0x1 DUP4 PUSH1 0x20 ADD MLOAD PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x393D JUMPI INVALID JUMPDEST EQ ISZERO DUP1 PUSH2 0x3948 JUMPI POP DUP1 ISZERO JUMPDEST DUP1 PUSH2 0x395B JUMPI POP DUP7 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO JUMPDEST ISZERO PUSH2 0x396C JUMPI PUSH1 0x0 SWAP4 POP POP POP POP PUSH2 0x397A JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND SWAP2 POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP1 PUSH2 0x3990 DUP6 DUP8 PUSH2 0x58AA JUMP JUMPDEST PUSH2 0x399B DUP8 DUP8 DUP8 PUSH2 0x6EA5 JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x39A7 JUMPI PUSH2 0x9A0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x276FDAD9 PUSH1 0xE1 SHL DUP2 MSTORE ADDRESS SWAP1 PUSH4 0x4EDFB5B2 SWAP1 PUSH2 0x39D0 SWAP1 DUP11 SWAP1 DUP8 SWAP1 DUP12 SWAP1 DUP12 SWAP1 PUSH1 0x4 ADD PUSH2 0x9A7C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x39E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x39FC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x3A24 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x8A97 JUMP JUMPDEST DUP8 PUSH1 0x80 ADD DUP2 SWAP1 MSTORE POP DUP7 PUSH1 0x80 ADD MLOAD SWAP2 POP PUSH2 0x3A9B PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 DUP8 DUP11 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x3A54 SWAP3 SWAP2 SWAP1 PUSH2 0x95F0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP9 DUP11 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x3A7B SWAP3 SWAP2 SWAP1 PUSH2 0x95F0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x700C DUP2 MSTORE POP DUP6 PUSH2 0x5F03 JUMP JUMPDEST SWAP1 POP SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x901754D7 DUP7 DUP7 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3AD8 SWAP3 SWAP2 SWAP1 PUSH2 0x937C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3AF0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3B04 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3B28 SWAP2 SWAP1 PUSH2 0x81CE JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x3B42 JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0xFFE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND ISZERO PUSH2 0x3BD4 JUMPI PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH2 0x3B7F SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x934F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3B97 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3BAB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3BCF SWAP2 SWAP1 PUSH2 0x8A7F JUMP JUMPDEST PUSH2 0x3BE0 JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND BALANCE JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x3BF5 JUMPI PUSH1 0x0 SWAP3 POP POP POP PUSH2 0xFFE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x3C2803F PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x1E1401F8 SWAP1 PUSH3 0x249F0 SWAP1 PUSH2 0x3C2A SWAP1 DUP11 SWAP1 DUP11 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x9477 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3C42 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x3C73 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x3C70 SWAP2 DUP2 ADD SWAP1 PUSH2 0x8A7F JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x3CB3 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x3CA1 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x3CA6 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 SWAP4 POP POP POP POP PUSH2 0xFFE JUMP JUMPDEST SWAP3 POP PUSH2 0xFFE SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x3CC9 DUP4 DUP6 PUSH2 0x58AA JUMP JUMPDEST PUSH1 0x20 DUP6 ADD MLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x2 DUP1 DUP3 MSTORE PUSH1 0x60 DUP3 DUP2 ADD SWAP1 SWAP4 MSTORE DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP6 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x3CFF JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP DUP5 DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x3D2D JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE DUP4 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x3D5D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x3D87 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP4 POP PUSH2 0x3D92 PUSH2 0x7A39 JUMP JUMPDEST PUSH2 0x3D9A PUSH2 0x58E9 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0xBCE JUMPI PUSH1 0x60 PUSH2 0x3DB9 DUP12 DUP10 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xAB0 JUMPI INVALID JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x7C268337 PUSH1 0xE1 SHL DUP2 MSTORE SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND SWAP1 PUSH4 0xF84D066E SWAP1 PUSH2 0x3DEF SWAP1 PUSH1 0x1 SWAP1 DUP6 SWAP1 DUP11 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x9820 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3E09 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x3E3E JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x3E3B SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x8888 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x3E6C JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0xB70 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xB75 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x3E7B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 DUP2 SGT PUSH2 0x3E95 JUMPI POP POP POP PUSH2 0xBCE JUMP JUMPDEST DUP1 DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x3EA2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP POP POP PUSH1 0x1 ADD PUSH2 0x3D9F JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x3ED4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x3EFE JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1645 JUMPI DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x343FBCDD PUSH3 0x61A80 DUP9 DUP9 DUP9 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x3F2D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3F53 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9477 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3F6B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x3F9C JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x3F99 SWAP2 DUP2 ADD SWAP1 PUSH2 0x8A7F JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x3FCA JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x15F1 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x15F6 JUMP JUMPDEST DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x3FD7 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3FEF JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x4005 JUMPI POP PUSH2 0x1645 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x3F04 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 PUSH2 0x401D DUP6 DUP8 PUSH2 0x58AA JUMP JUMPDEST DUP4 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x4035 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x405F JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH2 0x406E DUP10 DUP10 DUP10 DUP10 PUSH2 0x70F3 JUMP JUMPDEST SWAP5 POP SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x4086 JUMPI POP PUSH2 0x4140 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x413D JUMPI PUSH1 0x0 PUSH2 0x40F7 DUP10 DUP7 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x40AB SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x941F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP10 DUP8 DUP10 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x40CF SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x941F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x40EA JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x7248 JUMP JUMPDEST SWAP1 POP DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x4106 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x411E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x4134 JUMPI POP PUSH2 0x413D JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x4089 JUMP JUMPDEST POP POP JUMPDEST SWAP6 POP SWAP6 POP SWAP6 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x4157 DUP4 DUP6 PUSH2 0x58AA JUMP JUMPDEST DUP2 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x416F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x4199 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1645 JUMPI DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x144A2752 PUSH3 0xF4240 DUP8 DUP10 DUP9 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x41C8 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x41EE SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9477 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4206 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x4237 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x4234 SWAP2 DUP2 ADD SWAP1 PUSH2 0x8A7F JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x4265 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x15F1 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x15F6 JUMP JUMPDEST DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x4272 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x428A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x42A0 JUMPI POP PUSH2 0x1645 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x419F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH2 0x42B7 DUP5 DUP7 PUSH2 0x58AA JUMP JUMPDEST DUP3 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x42CF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x42F9 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x436E JUMPI PUSH1 0x0 PUSH2 0x4328 DUP10 DUP10 DUP10 DUP10 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x431B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x3AA7 JUMP JUMPDEST SWAP1 POP DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x4337 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x434F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x4365 JUMPI POP PUSH2 0x436E JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x42FF JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0x901754D7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND SWAP1 PUSH4 0x901754D7 SWAP1 PUSH2 0x439D SWAP1 DUP10 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x937C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x43B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x43C9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x43ED SWAP2 SWAP1 PUSH2 0x81CE JUMP JUMPDEST SWAP3 POP POP SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 DUP2 ADD SWAP1 SWAP3 MSTORE PUSH2 0x106C SWAP1 DUP1 PUSH2 0x4418 DUP7 DUP10 PUSH1 0x80 DUP5 ADD PUSH2 0x937C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x443F SWAP3 SWAP2 SWAP1 PUSH2 0x937C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x733A DUP2 MSTORE POP DUP4 PUSH2 0x5F03 JUMP JUMPDEST PUSH1 0x60 DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x4478 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x44A2 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP4 MLOAD DUP2 EQ PUSH2 0x2832 JUMPI PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x44E6 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x4530 JUMPI PUSH2 0x452B DUP4 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x450C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x7381 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x453C JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND BALANCE JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x4548 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x44A8 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 DUP2 ADD SWAP1 SWAP3 MSTORE PUSH2 0x106C SWAP1 DUP1 PUSH2 0x457A DUP7 DUP10 PUSH1 0x80 DUP5 ADD PUSH2 0x937C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x45A1 SWAP3 SWAP2 SWAP1 PUSH2 0x937C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x744B DUP2 MSTORE POP DUP4 PUSH2 0x5F03 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x45CD DUP4 DUP6 PUSH2 0x58AA JUMP JUMPDEST DUP2 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x45E5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x460F JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND ISZERO PUSH2 0x4632 JUMPI PUSH2 0x462D DUP8 DUP8 PUSH2 0x59AC JUMP JUMPDEST PUSH2 0x4635 JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND ISZERO PUSH2 0x4657 JUMPI PUSH2 0x4652 DUP9 DUP8 PUSH2 0x59AC JUMP JUMPDEST PUSH2 0x465A JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xDA5 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH2 0x46B0 JUMPI PUSH2 0x468F DUP5 PUSH4 0x95B68FE7 PUSH1 0xE0 SHL DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0xCA9 JUMPI INVALID JUMPDEST DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x469B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP4 POP DUP3 DUP2 MSTORE POP POP POP PUSH2 0x474A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND PUSH2 0x46D6 JUMPI PUSH2 0x468F DUP4 PUSH4 0xCD7724C3 PUSH1 0xE0 SHL DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0xCA9 JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH2 0x46F0 DUP6 PUSH4 0x95B68FE7 PUSH1 0xE0 SHL DUP11 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0xCA9 JUMPI INVALID JUMPDEST SWAP3 POP SWAP1 POP DUP1 ISZERO PUSH2 0x472D JUMPI PUSH2 0x470C DUP5 PUSH4 0xCD7724C3 PUSH1 0xE0 SHL DUP4 PUSH2 0x5A2B JUMP JUMPDEST DUP9 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x4718 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP5 POP DUP3 DUP2 MSTORE POP POP POP PUSH2 0x4748 JUMP JUMPDEST PUSH1 0x0 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x473B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP JUMPDEST POP JUMPDEST DUP1 ISZERO DUP1 PUSH2 0x476A JUMPI POP DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x475E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ JUMPDEST ISZERO PUSH2 0x4775 JUMPI POP PUSH2 0xDA5 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x465F JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x4799 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x47C3 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x17CA JUMPI DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x1F00CA74 PUSH3 0x249F0 DUP7 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x47F0 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4816 SWAP3 SWAP2 SWAP1 PUSH2 0x9B09 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x482E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x4864 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x4861 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x89DA JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x4892 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x1763 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1768 JUMP JUMPDEST DUP1 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x489F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x48B3 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x48CB JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x48E1 JUMPI POP PUSH2 0x17CA JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x47C9 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x48F6 DUP4 DUP6 PUSH2 0x58AA JUMP JUMPDEST DUP2 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x490E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x4938 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1645 JUMPI DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xFF1FD974 PUSH3 0xF4240 DUP9 DUP9 DUP9 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x4967 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x498D SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9477 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x49A5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x49D6 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x49D3 SWAP2 DUP2 ADD SWAP1 PUSH2 0x8A7F JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x4A04 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x15F1 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x15F6 JUMP JUMPDEST DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x4A11 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x4A29 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x4A3F JUMPI POP PUSH2 0x1645 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x493E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP1 PUSH2 0x4A57 DUP6 DUP8 PUSH2 0x58AA JUMP JUMPDEST PUSH2 0x4A62 DUP8 DUP8 DUP8 PUSH2 0x6EA5 JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x4A6E JUMPI PUSH2 0x9A0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x276FDAD9 PUSH1 0xE1 SHL DUP2 MSTORE ADDRESS SWAP1 PUSH4 0x4EDFB5B2 SWAP1 PUSH2 0x4A97 SWAP1 DUP11 SWAP1 DUP8 SWAP1 DUP12 SWAP1 DUP12 SWAP1 PUSH1 0x4 ADD PUSH2 0x9A7C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4AAF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4AC3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x4AEB SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x8A97 JUMP JUMPDEST PUSH1 0x80 DUP9 ADD DUP2 SWAP1 MSTORE DUP5 MLOAD SWAP1 SWAP3 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x4B0D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x4B37 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x4C22 JUMPI PUSH1 0x0 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xF1ED7FA4 DUP12 DUP12 DUP12 DUP12 DUP8 DUP2 MLOAD DUP2 LT PUSH2 0x4B65 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4B8C SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9A46 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4BA4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4BB8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4BDC SWAP2 SWAP1 PUSH2 0x8A7F JUMP JUMPDEST SWAP1 POP DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x4BEB JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x4C03 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x4C19 JUMPI POP PUSH2 0x4C22 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x4B3D JUMP JUMPDEST POP POP SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 PUSH2 0x4C3D DUP6 DUP8 PUSH2 0x58AA JUMP JUMPDEST PUSH2 0x4C49 DUP9 DUP9 DUP9 DUP9 PUSH2 0x70F3 JUMP JUMPDEST SWAP4 POP SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x4C60 JUMPI PUSH2 0x4140 JUMP JUMPDEST DUP4 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x4C78 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x4CA2 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD SWAP1 SWAP2 MSTORE SWAP1 SWAP3 POP PUSH2 0x4D0F SWAP1 DUP1 PUSH2 0x4CC6 DUP10 DUP8 DUP10 ISZERO PUSH1 0x80 DUP6 ADD PUSH2 0x941F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP10 DUP7 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x4CEF SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x941F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x7248 DUP2 MSTORE POP DUP7 PUSH2 0x5F03 JUMP JUMPDEST SWAP2 POP POP SWAP6 POP SWAP6 POP SWAP6 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 PUSH2 0x4D2C DUP6 DUP8 PUSH2 0x58AA JUMP JUMPDEST DUP4 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x4D44 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x4D6E JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP DUP9 MLOAD PUSH1 0x40 MLOAD PUSH4 0x939D863 PUSH1 0xE1 SHL DUP2 MSTORE SWAP2 SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x1273B0C6 SWAP1 PUSH2 0x4DA1 SWAP1 DUP11 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x937C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4DB9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4DCD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4DF1 SWAP2 SWAP1 PUSH2 0x81CE JUMP JUMPDEST SWAP3 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND ISZERO PUSH2 0x4E0F JUMPI POP PUSH1 0x1 SWAP4 POP DUP7 PUSH2 0x4EAE JUMP JUMPDEST DUP9 MLOAD PUSH1 0x40 MLOAD PUSH4 0x939D863 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x1273B0C6 SWAP1 PUSH2 0x4E40 SWAP1 DUP11 SWAP1 DUP13 SWAP1 PUSH1 0x4 ADD PUSH2 0x937C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4E58 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4E6C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4E90 SWAP2 SWAP1 PUSH2 0x81CE JUMP JUMPDEST SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x4EA7 JUMPI POP POP PUSH2 0x9A0 JUMP JUMPDEST POP PUSH1 0x0 SWAP4 POP DUP6 JUMPDEST DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDD58B41C PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4EE7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4EFB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4F1F SWAP2 SWAP1 PUSH2 0x8A0C JUMP JUMPDEST PUSH2 0x4F2A JUMPI POP POP PUSH2 0x9A0 JUMP JUMPDEST PUSH2 0x4FA2 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 DUP10 DUP8 DUP6 DUP15 PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x4F53 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9396 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP11 DUP8 DUP6 DUP15 PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x4F82 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9396 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x6100 DUP2 MSTORE POP DUP8 PUSH2 0x5F03 JUMP JUMPDEST SWAP3 POP POP POP SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x4FC9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x4FF3 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 EQ PUSH2 0x842 JUMPI PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x5037 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x5083 JUMPI PUSH2 0x507E DUP5 DUP5 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x505E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x7500 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x5086 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x5092 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x4FF9 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x50C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x50EA JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1645 JUMPI DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x838E6A22 PUSH3 0x493E0 DUP9 DUP9 DUP9 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x5119 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x513F SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9477 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5157 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x5188 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x5185 SWAP2 DUP2 ADD SWAP1 PUSH2 0x8A7F JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x51B6 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x15F1 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x15F6 JUMP JUMPDEST DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x51C3 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x50F0 JUMP JUMPDEST PUSH1 0x0 DUP5 PUSH1 0x80 ADD MLOAD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x51F0 JUMPI POP PUSH1 0x0 PUSH2 0xFFE JUMP JUMPDEST DUP5 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x418436BC PUSH3 0x7A120 DUP8 PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x522A JUMPI DUP7 PUSH2 0x5240 JUMP JUMPDEST PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE JUMPDEST DUP9 PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x5263 JUMPI DUP7 PUSH2 0x5279 JUMP JUMPDEST PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE JUMPDEST DUP7 PUSH1 0x0 DUP12 PUSH1 0x80 ADD MLOAD PUSH1 0x40 MLOAD DUP8 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x52A1 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x949B JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x52B9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x52EA JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x52E7 SWAP2 DUP2 ADD SWAP1 PUSH2 0x8A7F JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x5328 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x5318 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x531D JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 SWAP2 POP POP PUSH2 0xFFE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5333 DUP6 PUSH2 0x75CC JUMP JUMPDEST PUSH1 0xFF AND SWAP1 POP PUSH1 0x0 PUSH2 0x5343 DUP8 PUSH2 0x75CC JUMP JUMPDEST PUSH1 0xFF AND SWAP1 POP PUSH8 0xDE0B6B3A7640000 DUP2 PUSH1 0xA EXP DUP4 PUSH1 0xA EXP DUP8 DUP7 MUL MUL DUP2 PUSH2 0x5364 JUMPI INVALID JUMPDEST DIV DUP2 PUSH2 0x536C JUMPI INVALID JUMPDEST DIV SWAP4 POP POP POP POP PUSH2 0xFFE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH2 0x5385 DUP5 DUP7 PUSH2 0x58AA JUMP JUMPDEST DUP3 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x539D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x53C7 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH2 0x5432 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 DUP10 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x53EB SWAP3 SWAP2 SWAP1 PUSH2 0x937C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP10 DUP10 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x5412 SWAP3 SWAP2 SWAP1 PUSH2 0x937C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x75D7 DUP2 MSTORE POP DUP6 PUSH2 0x5F03 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x901754D7 PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND SWAP1 PUSH4 0x901754D7 SWAP1 PUSH2 0x439D SWAP1 DUP10 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x937C JUMP JUMPDEST PUSH2 0x546B PUSH2 0x7AA7 JUMP JUMPDEST PUSH2 0x5473 PUSH2 0x7AA7 JUMP JUMPDEST PUSH1 0x0 NOT DUP1 PUSH1 0x0 JUMPDEST DUP7 MLOAD DUP2 EQ PUSH2 0x556F JUMPI PUSH2 0x54AA PUSH1 0x20 DUP9 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x5493 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD SUB DUP8 DUP10 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2F2F JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP10 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x54C4 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x54D9 SWAP2 SWAP1 PUSH2 0x9333 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x5516 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x551B JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0x5565 JUMPI PUSH1 0x0 PUSH2 0x553F PUSH1 0x20 DUP4 MLOAD SUB DUP4 PUSH2 0x6E45 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 GT DUP1 ISZERO PUSH2 0x5550 JUMPI POP DUP5 DUP2 LT JUMPDEST ISZERO PUSH2 0x5563 JUMPI DUP4 DUP8 MSTORE PUSH1 0x20 DUP8 ADD DUP3 SWAP1 MSTORE SWAP4 POP DUP4 JUMPDEST POP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x547A JUMP JUMPDEST POP PUSH1 0x0 NOT DUP2 EQ ISZERO PUSH2 0x5580 JUMPI POP PUSH2 0x30FA JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP8 MLOAD DUP2 EQ PUSH2 0x30F7 JUMPI PUSH2 0x55B3 PUSH1 0x20 DUP10 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x559C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD SUB DUP4 DUP11 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2F2F JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP11 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x55CD JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x55E2 SWAP2 SWAP1 PUSH2 0x9333 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x561F JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x5624 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0x566E JUMPI PUSH1 0x0 PUSH2 0x5648 PUSH1 0x20 DUP4 MLOAD SUB DUP4 PUSH2 0x6E45 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 GT DUP1 ISZERO PUSH2 0x5659 JUMPI POP DUP6 DUP2 LT JUMPDEST ISZERO PUSH2 0x566C JUMPI DUP4 DUP9 MSTORE PUSH1 0x20 DUP9 ADD DUP3 SWAP1 MSTORE SWAP5 POP DUP5 JUMPDEST POP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x5583 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP6 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x21F8A721 DUP8 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x9232494E PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x56CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x56E0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5704 SWAP2 SWAP1 PUSH2 0x8A7F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5720 SWAP2 SWAP1 PUSH2 0x975D JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5738 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x574C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5770 SWAP2 SWAP1 PUSH2 0x81CE JUMP JUMPDEST SWAP2 POP DUP6 PUSH1 0x20 ADD MLOAD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x5785 JUMPI PUSH2 0x58A1 JUMP JUMPDEST PUSH1 0x0 DUP1 JUMPDEST DUP8 PUSH1 0x20 ADD MLOAD MLOAD DUP2 LT ISZERO PUSH2 0x589E JUMPI PUSH1 0x2 DUP9 PUSH1 0x20 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x57A8 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD LT ISZERO PUSH2 0x57BC JUMPI PUSH2 0x5896 JUMP JUMPDEST DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x7F9C0ECD PUSH3 0x493E0 DUP11 PUSH1 0x20 ADD MLOAD DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x57DF JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 PUSH1 0x1 DUP11 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x57F7 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x581C SWAP3 SWAP2 SWAP1 PUSH2 0x9614 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5834 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x5865 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x5862 SWAP2 DUP2 ADD SWAP1 PUSH2 0x8A7F JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x586E JUMPI PUSH2 0x5896 JUMP JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x5894 JUMPI DUP1 SWAP3 POP DUP9 PUSH1 0x20 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x5889 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP4 POP JUMPDEST POP JUMPDEST PUSH1 0x1 ADD PUSH2 0x5789 JUMP JUMPDEST POP POP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x58E5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x58DC SWAP1 PUSH2 0x9954 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x58F1 PUSH2 0x7A39 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP2 ADD DUP3 MSTORE ADDRESS DUP1 DUP3 MSTORE PUSH1 0x0 PUSH1 0x20 DUP4 ADD DUP2 SWAP1 MSTORE SWAP3 DUP3 ADD MSTORE PUSH1 0x60 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP2 DUP3 SWAP2 SWAP1 DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x593A PUSH2 0x7AE3 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x5932 JUMPI SWAP1 POP POP SWAP1 POP PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP6 PUSH1 0x0 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP DUP2 MSTORE POP DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x5998 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x3795FB1 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x6F2BF62 SWAP1 PUSH2 0x59DB SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x934F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x59F3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5A07 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x397A SWAP2 SWAP1 PUSH2 0x81CE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH2 0x5A41 JUMPI PUSH2 0x5B07 JUMP JUMPDEST PUSH1 0x60 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH3 0x249F0 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x5A63 SWAP2 SWAP1 PUSH2 0x975D JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x5AA1 SWAP2 SWAP1 PUSH2 0x9333 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x5ADD JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x5AE2 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP DUP2 ISZERO PUSH2 0x5B05 JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x5B02 SWAP2 SWAP1 PUSH2 0x8A7F JUMP JUMPDEST SWAP3 POP JUMPDEST POP JUMPDEST SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD9638D36 DUP12 PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5B45 SWAP2 SWAP1 PUSH2 0x975D JUMP JUMPDEST PUSH1 0xA0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5B5D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5B71 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5B95 SWAP2 SWAP1 PUSH2 0x8FFE JUMP JUMPDEST SWAP5 POP SWAP5 POP POP POP SWAP3 POP PUSH1 0x0 PUSH3 0xF4240 SWAP1 POP DUP11 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x5CBD JUMPI PUSH1 0x0 PUSH2 0x5BD4 DUP10 PUSH5 0xE8D4A51000 PUSH2 0x7627 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x5BF8 PUSH12 0x33B2E3C9FD0803CE8000000 PUSH2 0x5BF2 DUP9 DUP6 PUSH2 0x765D JUMP JUMPDEST SWAP1 PUSH2 0x7627 JUMP JUMPDEST SWAP1 POP DUP5 DUP2 LT PUSH2 0x5C10 JUMPI PUSH1 0x0 SWAP7 POP POP POP POP POP POP POP PUSH2 0x5DC6 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5C9F PUSH8 0xDE0B6B3A7640000 PUSH2 0x5C99 DUP13 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x568D4B6F PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5C5A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5C6E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5C92 SWAP2 SWAP1 PUSH2 0x8A7F JUMP JUMPDEST DUP7 SWAP1 PUSH2 0x7627 JUMP JUMPDEST SWAP1 PUSH2 0x7679 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x5CAD DUP5 DUP4 PUSH2 0x76A3 JUMP JUMPDEST SWAP9 POP PUSH2 0x5DC6 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP11 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x5DBD JUMPI DUP8 DUP5 DUP2 GT ISZERO PUSH2 0x5CF2 JUMPI PUSH1 0x0 SWAP6 POP POP POP POP POP POP PUSH2 0x5DC6 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5D0E PUSH12 0x33B2E3C9FD0803CE8000000 PUSH2 0x5BF2 DUP9 DUP6 PUSH2 0x76A3 JUMP JUMPDEST SWAP1 POP DUP4 DUP2 GT PUSH2 0x5D26 JUMPI PUSH1 0x0 SWAP7 POP POP POP POP POP POP POP PUSH2 0x5DC6 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5DAB DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xFAE036D5 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5D64 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5D78 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5D9C SWAP2 SWAP1 PUSH2 0x8A7F JUMP JUMPDEST PUSH8 0xDE0B6B3A7640000 SWAP1 PUSH2 0x765D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x5CAD DUP3 PUSH2 0x5C99 DUP7 DUP9 PUSH2 0x7627 JUMP JUMPDEST PUSH1 0x0 SWAP5 POP POP POP POP POP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x5DDB PUSH2 0x7B15 JUMP JUMPDEST DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x5DEF SWAP2 SWAP1 PUSH2 0x8B2B JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x5E09 SWAP2 SWAP1 PUSH2 0x8B0F JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH4 0x22DB5ED1 PUSH1 0xE2 SHL DUP6 DUP8 DUP7 PUSH2 0x5E24 DUP13 PUSH2 0x76C2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x5E37 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x99DE JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x5E75 SWAP2 SWAP1 PUSH2 0x9333 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x5EB0 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x5EB5 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH2 0x5ECD JUMPI PUSH1 0x0 SWAP6 POP POP POP POP POP POP PUSH2 0x397A JUMP JUMPDEST DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x5EE1 SWAP2 SWAP1 PUSH2 0x89DA JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x5EED JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP6 POP POP POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x5F1C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x5F46 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP2 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x5F58 JUMPI PUSH2 0x59A6 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5F89 DUP5 PUSH1 0x0 ADD MLOAD DUP6 PUSH1 0x20 ADD MLOAD DUP6 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x5F74 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 PUSH1 0x40 ADD MLOAD PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x5F96 JUMPI POP PUSH2 0x59A6 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5FB3 DUP6 PUSH1 0x20 ADD MLOAD DUP7 PUSH1 0x0 ADD MLOAD DUP5 DUP9 PUSH1 0x40 ADD MLOAD PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x5FC1 JUMPI POP POP PUSH2 0x59A6 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x60F7 JUMPI PUSH1 0x0 JUMPDEST PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x60B9 JUMPI PUSH2 0x5FF7 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x5FE8 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 DUP7 PUSH2 0x7703 JUMP JUMPDEST SWAP4 POP DUP4 PUSH2 0x6003 JUMPI PUSH2 0x60B9 JUMP JUMPDEST PUSH2 0x6012 PUSH2 0x2715 PUSH2 0x2710 DUP7 PUSH2 0x7703 JUMP JUMPDEST SWAP4 POP DUP4 PUSH2 0x601E JUMPI PUSH2 0x60B9 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x603B DUP9 PUSH1 0x20 ADD MLOAD DUP10 PUSH1 0x0 ADD MLOAD DUP8 DUP12 PUSH1 0x40 ADD MLOAD PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x6048 JUMPI POP PUSH2 0x60B9 JUMP JUMPDEST DUP1 SWAP4 POP DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x6057 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 LT PUSH2 0x60B0 JUMPI PUSH1 0x0 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x6073 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x2710 DUP10 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x608A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 SUB MUL DUP2 PUSH2 0x609C JUMPI INVALID JUMPDEST DIV SWAP1 POP PUSH1 0x5 DUP2 GT PUSH2 0x60AE JUMPI POP POP PUSH2 0x60B9 JUMP JUMPDEST POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x5FD0 JUMP JUMPDEST POP PUSH2 0x60D8 DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x60C9 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP4 DUP6 PUSH2 0x7703 JUMP JUMPDEST DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x60E4 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x5FC4 JUMP JUMPDEST POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP8 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x611C SWAP2 SWAP1 PUSH2 0x8223 JUMP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 POP SWAP4 POP DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x6206 JUMPI PUSH1 0x40 MLOAD PUSH4 0x51400F0B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0xA2801E16 SWAP1 PUSH3 0x493E0 SWAP1 PUSH2 0x616F SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x975D JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6187 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x61B8 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x61B5 SWAP2 DUP2 ADD SWAP1 PUSH2 0x8A7F JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x61FA JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x61E6 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x61EB JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 SWAP6 POP POP POP POP POP POP PUSH2 0x397A JUMP JUMPDEST SWAP5 POP PUSH2 0x397A SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xCA19EBD9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH4 0xCA19EBD9 SWAP1 PUSH3 0x493E0 SWAP1 PUSH2 0x616F SWAP1 DUP8 SWAP1 DUP12 SWAP1 PUSH1 0x4 ADD PUSH2 0x9363 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x2 DUP3 DUP5 MLOAD SUB LT ISZERO PUSH2 0x625F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x58DC SWAP1 PUSH2 0x9910 JUMP JUMPDEST PUSH2 0x6267 PUSH2 0x7B35 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP1 DUP3 ADD DUP4 MSTORE PUSH2 0x1F4 DUP3 MSTORE PUSH2 0xBB8 PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x2710 DUP3 DUP5 ADD MSTORE DUP3 MLOAD PUSH1 0x3 DUP1 DUP3 MSTORE PUSH1 0x80 DUP3 ADD SWAP1 SWAP5 MSTORE SWAP2 SWAP3 SWAP1 SWAP2 SWAP1 DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP PUSH1 0x0 DUP1 DUP7 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x62BB JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 DUP8 DUP8 PUSH1 0x1 ADD DUP2 MLOAD DUP2 LT PUSH2 0x62D6 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 JUMPDEST PUSH1 0x3 DUP2 LT ISZERO PUSH2 0x63CB JUMPI PUSH1 0x0 DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x1698EE82 DUP6 DUP6 DUP11 DUP7 PUSH1 0x3 DUP2 LT PUSH2 0x630B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x632E SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x97A5 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6346 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x635A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x637E SWAP2 SWAP1 PUSH2 0x81CE JUMP JUMPDEST SWAP1 POP PUSH2 0x6389 DUP2 PUSH2 0x775B JUMP JUMPDEST ISZERO PUSH2 0x63C2 JUMPI DUP1 DUP7 DUP7 DUP1 PUSH1 0x1 ADD SWAP8 POP DUP2 MLOAD DUP2 LT PUSH2 0x63A1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x62E3 JUMP JUMPDEST POP POP POP DUP1 PUSH2 0x63DB JUMPI POP POP POP PUSH2 0x397A JUMP JUMPDEST DUP6 MLOAD DUP6 PUSH1 0x2 ADD EQ ISZERO PUSH2 0x64D1 JUMPI DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x63FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x6431 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x641C JUMPI SWAP1 POP JUMPDEST POP SWAP4 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x64C8 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE SWAP1 PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x6469 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP3 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x6480 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x6494 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x64A8 JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE PUSH1 0x1 ADD PUSH2 0x6437 JUMP JUMPDEST POP POP POP POP PUSH2 0x397A JUMP JUMPDEST PUSH1 0x60 PUSH2 0x64E1 DUP9 DUP9 DUP9 PUSH1 0x1 ADD PUSH2 0x6239 JUMP JUMPDEST SWAP1 POP DUP1 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x64F6 JUMPI POP POP POP POP PUSH2 0x397A JUMP JUMPDEST DUP1 MLOAD DUP3 MUL PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x650F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x6543 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x652E JUMPI SWAP1 POP JUMPDEST POP SWAP5 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x66C3 JUMPI PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x66BA JUMPI DUP3 MLOAD DUP3 DUP2 MUL DUP3 ADD SWAP1 DUP5 SWAP1 DUP4 SWAP1 DUP2 LT PUSH2 0x6571 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD PUSH1 0x1 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x6592 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x65BC JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP DUP9 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x65C9 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x65E0 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x65F4 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x6608 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP PUSH1 0x0 JUMPDEST DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x6637 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD DUP2 LT ISZERO PUSH2 0x66B0 JUMPI DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x6653 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x6666 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP10 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x667A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 PUSH1 0x1 ADD DUP2 MLOAD DUP2 LT PUSH2 0x6690 JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE PUSH1 0x1 ADD PUSH2 0x662B JUMP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x6554 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x6549 JUMP JUMPDEST POP POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x2 DUP4 MLOAD LT ISZERO DUP1 ISZERO PUSH2 0x66E7 JUMPI POP DUP2 MLOAD PUSH1 0x1 ADD DUP4 MLOAD EQ JUMPDEST PUSH2 0x6703 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x58DC SWAP1 PUSH2 0x9999 JUMP JUMPDEST DUP2 MLOAD PUSH1 0x3 MUL DUP4 MLOAD PUSH1 0x14 MUL ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x6723 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x674E JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x20 DUP2 ADD PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x682A JUMPI DUP1 ISZERO PUSH2 0x67FD JUMPI PUSH1 0x0 DUP5 PUSH1 0x1 DUP4 SUB DUP2 MLOAD DUP2 LT PUSH2 0x6778 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDDCA3F43 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x67B8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x67CC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x67F0 SWAP2 SWAP1 PUSH2 0x8F83 JUMP JUMPDEST PUSH1 0xE8 SHL DUP4 MSTORE POP PUSH1 0x3 SWAP1 SWAP2 ADD SWAP1 JUMPDEST PUSH1 0x0 DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x680B JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD PUSH1 0x60 SHL DUP4 MSTORE POP PUSH1 0x14 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x6758 JUMP JUMPDEST POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MUL DUP4 ISZERO DUP1 ISZERO SWAP1 PUSH2 0x684F JUMPI POP DUP3 DUP5 DUP3 DUP2 PUSH2 0x684B JUMPI INVALID JUMPDEST DIV EQ ISZERO JUMPDEST ISZERO PUSH2 0x685E JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x59A6 JUMP JUMPDEST PUSH8 0x6F05B59D3B20000 DUP2 ADD DUP2 DUP2 LT ISZERO PUSH2 0x687C JUMPI PUSH1 0x0 SWAP3 POP POP POP PUSH2 0x59A6 JUMP JUMPDEST PUSH8 0xDE0B6B3A7640000 SWAP1 DIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x68A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x68D2 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x2925 JUMPI DUP3 PUSH1 0x1 DUP3 DUP6 MLOAD SUB SUB DUP2 MLOAD DUP2 LT PUSH2 0x68F3 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x6907 JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE PUSH1 0x1 ADD PUSH2 0x68D8 JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x6940 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x696A JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x2925 JUMPI DUP3 PUSH1 0x1 DUP3 DUP6 MLOAD SUB SUB DUP2 MLOAD DUP2 LT PUSH2 0x698B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x699F JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE PUSH1 0x1 ADD PUSH2 0x6970 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x69D8 SWAP2 SWAP1 PUSH2 0x81EA JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x69F2 SWAP2 SWAP1 PUSH2 0x81CE JUMP JUMPDEST SWAP1 POP ADDRESS PUSH4 0xE8E4AF09 DUP4 DUP6 DUP5 PUSH2 0x6A06 DUP11 PUSH2 0x76C2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A25 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x93C1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6A3D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x6A72 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x6A6F SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x89DA JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x6AB3 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x6AA0 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x6AA5 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 SWAP5 POP POP POP POP POP PUSH2 0x397A JUMP JUMPDEST DUP1 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x6AC0 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP5 POP POP POP POP POP PUSH2 0x397A JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFFE DUP4 PUSH2 0x5C99 PUSH2 0x6AE7 DUP3 PUSH1 0x1 PUSH2 0x76A3 JUMP JUMPDEST PUSH2 0x6AF1 DUP9 DUP8 PUSH2 0x7627 JUMP JUMPDEST SWAP1 PUSH2 0x765D JUMP JUMPDEST PUSH1 0x0 PUSH1 0x12 SWAP1 POP PUSH1 0x0 PUSH1 0x60 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x4 DUP2 MSTORE PUSH1 0x20 ADD PUSH4 0x313CE567 PUSH1 0xE0 SHL DUP2 MSTORE POP PUSH1 0x40 MLOAD PUSH2 0x6B35 SWAP2 SWAP1 PUSH2 0x9333 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x6B70 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x6B75 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x6B89 JUMPI POP PUSH1 0x20 DUP2 MLOAD LT ISZERO JUMPDEST ISZERO PUSH2 0x6B9C JUMPI PUSH2 0x6B99 DUP2 PUSH1 0x0 PUSH2 0x6E45 JUMP JUMPDEST SWAP3 POP JUMPDEST POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD9638D36 DUP12 PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6BD9 SWAP2 SWAP1 PUSH2 0x975D JUMP JUMPDEST PUSH1 0xA0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6BF1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x6C05 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x6C29 SWAP2 SWAP1 PUSH2 0x8FFE JUMP JUMPDEST SWAP5 POP SWAP5 POP POP POP SWAP3 POP DUP10 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x6D40 JUMPI PUSH1 0x0 DUP8 SWAP1 POP PUSH1 0x0 PUSH2 0x6CD9 DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x568D4B6F PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6C92 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x6CA6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x6CCA SWAP2 SWAP1 PUSH2 0x8A7F JUMP JUMPDEST PUSH8 0xDE0B6B3A7640000 SWAP1 PUSH2 0x76A3 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x6CF3 DUP3 PUSH2 0x5C99 DUP6 PUSH8 0xDE0B6B3A7640000 PUSH2 0x7627 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x6D11 PUSH12 0x33B2E3C9FD0803CE8000000 PUSH2 0x5BF2 DUP10 DUP6 PUSH2 0x765D JUMP JUMPDEST SWAP1 POP DUP6 DUP2 LT PUSH2 0x6D2A JUMPI PUSH1 0x0 SWAP8 POP POP POP POP POP POP POP POP PUSH2 0x5DC6 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5CAD PUSH1 0x1 PUSH2 0x6AF1 DUP6 PUSH5 0xE8D4A51000 PUSH2 0x7679 JUMP JUMPDEST DUP10 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x6E25 JUMPI PUSH1 0x0 PUSH2 0x6D6F DUP9 PUSH5 0xE8D4A51000 PUSH2 0x7627 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x6DAF DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xFAE036D5 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5D64 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x6DC9 PUSH8 0xDE0B6B3A7640000 PUSH2 0x5C99 DUP6 DUP6 PUSH2 0x7627 JUMP JUMPDEST SWAP1 POP DUP6 DUP2 GT ISZERO PUSH2 0x6DE2 JUMPI PUSH1 0x0 SWAP7 POP POP POP POP POP POP POP PUSH2 0x5DC6 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6DFE PUSH12 0x33B2E3C9FD0803CE8000000 PUSH2 0x5BF2 DUP10 DUP6 PUSH2 0x76A3 JUMP JUMPDEST SWAP1 POP DUP5 DUP2 GT PUSH2 0x6E17 JUMPI PUSH1 0x0 SWAP8 POP POP POP POP POP POP POP POP PUSH2 0x5DC6 JUMP JUMPDEST POP SWAP6 POP PUSH2 0x5DC6 SWAP5 POP POP POP POP POP JUMP JUMPDEST POP PUSH1 0x0 SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x6E40 DUP4 DUP4 DUP4 PUSH2 0x7967 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x397A DUP4 DUP4 PUSH2 0x798E JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x6E5C PUSH2 0x7B15 JUMP JUMPDEST DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x6E70 SWAP2 SWAP1 PUSH2 0x8B2B JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x6E8A SWAP2 SWAP1 PUSH2 0x8B0F JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH4 0x205E01D7 PUSH1 0xE1 SHL DUP6 DUP8 DUP7 PUSH2 0x5E24 DUP13 PUSH2 0x76C2 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH1 0x20 ADD MLOAD SWAP1 POP PUSH1 0x60 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x910FFC71 DUP8 PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x6EE3 JUMPI DUP7 PUSH2 0x6EF9 JUMP JUMPDEST PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE JUMPDEST DUP9 PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x6F1C JUMPI DUP7 PUSH2 0x6F32 JUMP JUMPDEST PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP2 DUP3 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP7 SWAP1 SHL AND SWAP1 SWAP2 MSTORE PUSH2 0x6F66 SWAP3 SWAP2 SWAP1 PUSH1 0x1 SWAP1 PUSH1 0x24 DUP2 ADD PUSH2 0x9443 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6F7E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x6F92 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x6FBA SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x861B JUMP JUMPDEST POP POP SWAP1 POP DUP1 MLOAD DUP7 PUSH1 0x0 ADD MLOAD LT PUSH2 0x6FD6 JUMPI POP PUSH1 0x0 SWAP2 POP PUSH2 0x397A SWAP1 POP JUMP JUMPDEST DUP1 DUP7 PUSH1 0x0 ADD MLOAD DUP2 MLOAD DUP2 LT PUSH2 0x6FE6 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP3 POP PUSH1 0xF8 DUP4 SWAP1 SHR PUSH1 0x0 SHR PUSH1 0xBB EQ ISZERO PUSH2 0x17CA JUMPI POP PUSH1 0x0 SWAP2 POP PUSH2 0x397A SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x7017 PUSH2 0x7B53 JUMP JUMPDEST DUP5 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x702B SWAP2 SWAP1 PUSH2 0x82D1 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP7 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x7045 SWAP2 SWAP1 PUSH2 0x82D1 JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0x3C7B5FE9 PUSH1 0xE2 SHL DUP2 MSTORE SWAP1 SWAP2 POP ADDRESS SWAP1 PUSH4 0xF1ED7FA4 SWAP1 PUSH2 0x7072 SWAP1 DUP6 SWAP1 DUP6 SWAP1 DUP9 SWAP1 DUP12 SWAP1 PUSH1 0x4 ADD PUSH2 0x9A46 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x708A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x70BA JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x70B7 SWAP2 DUP2 ADD SWAP1 PUSH2 0x8A7F JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x70E8 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x6AA0 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x6AA5 JUMP JUMPDEST SWAP4 POP PUSH2 0x397A SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x57A281DC DUP7 DUP7 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7126 SWAP3 SWAP2 SWAP1 PUSH2 0x937C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x713E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x7152 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x717A SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x8583 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 SWAP2 POP DUP1 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x7213 JUMPI PUSH1 0x40 MLOAD PUSH4 0x15E8A077 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND SWAP1 PUSH4 0x57A281DC SWAP1 PUSH2 0x71B8 SWAP1 DUP8 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x937C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x71D0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x71E4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x720C SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x8583 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 SWAP2 POP JUMPDEST DUP1 MLOAD DUP7 LT PUSH2 0x7228 JUMPI PUSH1 0x0 DUP1 SWAP3 POP SWAP3 POP POP PUSH2 0x58A1 JUMP JUMPDEST DUP1 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x7234 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP3 POP POP SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP7 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x7262 SWAP2 SWAP1 PUSH2 0x8281 JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP DUP1 ISZERO PUSH2 0x7306 JUMPI PUSH1 0x40 MLOAD PUSH4 0x3CD0243B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x79A04876 SWAP1 PUSH3 0x493E0 SWAP1 PUSH2 0x72A2 SWAP1 PUSH1 0x0 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x9363 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x72B9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x72EA JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x72E7 SWAP2 DUP2 ADD SWAP1 PUSH2 0x8FA6 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x72FA JUMPI PUSH1 0x0 SWAP4 POP POP POP POP PUSH2 0x397A JUMP JUMPDEST POP SWAP4 POP PUSH2 0x397A SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x66410A21 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x66410A21 SWAP1 PUSH3 0x493E0 SWAP1 PUSH2 0x72A2 SWAP1 PUSH1 0x0 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x9363 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x7353 SWAP2 SWAP1 PUSH2 0x81EA JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x736D SWAP2 SWAP1 PUSH2 0x81CE JUMP JUMPDEST SWAP1 POP ADDRESS PUSH4 0x30D6570D DUP4 DUP6 DUP5 PUSH2 0x6A06 DUP11 PUSH2 0x76C2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP6 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x73A9 SWAP2 SWAP1 PUSH2 0x934F JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x73E7 SWAP2 SWAP1 PUSH2 0x9333 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x7422 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x7427 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x743B JUMPI POP PUSH1 0x20 DUP2 MLOAD LT ISZERO JUMPDEST ISZERO PUSH2 0x682A JUMPI PUSH2 0x106C DUP2 PUSH1 0x0 PUSH2 0x6E45 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x7464 SWAP2 SWAP1 PUSH2 0x81EA JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x747E SWAP2 SWAP1 PUSH2 0x81CE JUMP JUMPDEST SWAP1 POP ADDRESS PUSH4 0xA4698417 PUSH3 0x61A80 DUP5 DUP7 DUP6 PUSH2 0x7496 DUP12 PUSH2 0x76C2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP7 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x74B5 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x93C1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x74CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x6A72 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x6A6F SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x89DA JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDD62ED3E PUSH1 0xE0 SHL DUP7 DUP7 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x752A SWAP3 SWAP2 SWAP1 PUSH2 0x937C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x7568 SWAP2 SWAP1 PUSH2 0x9333 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x75A3 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x75A8 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x75BC JUMPI POP PUSH1 0x20 DUP2 MLOAD LT ISZERO JUMPDEST ISZERO PUSH2 0x17CA JUMPI PUSH2 0x5DC6 DUP2 PUSH1 0x0 PUSH2 0x6E45 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x59A6 DUP3 PUSH2 0x6AF7 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x75F0 SWAP2 SWAP1 PUSH2 0x81EA JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP1 DUP7 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x760B SWAP2 SWAP1 PUSH2 0x81EA JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x761B DUP5 DUP5 DUP4 DUP10 PUSH2 0x3AA7 JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x7636 JUMPI POP PUSH1 0x0 PUSH2 0x59A6 JUMP JUMPDEST DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 PUSH2 0x7643 JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x397A JUMPI PUSH2 0x397A PUSH2 0x7658 PUSH1 0x1 DUP7 DUP7 PUSH2 0x79B8 JUMP JUMPDEST PUSH2 0x7A12 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x397A JUMPI PUSH2 0x397A PUSH2 0x7658 PUSH1 0x0 DUP7 DUP7 PUSH2 0x79B8 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x768F JUMPI PUSH2 0x768F PUSH2 0x7658 PUSH1 0x3 DUP6 DUP6 PUSH2 0x79B8 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP2 PUSH2 0x769A JUMPI INVALID JUMPDEST DIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x76BC JUMPI PUSH2 0x76BC PUSH2 0x7658 PUSH1 0x2 DUP6 DUP6 PUSH2 0x79B8 JUMP JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP2 PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP2 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x76F2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP4 ISZERO DUP1 PUSH2 0x7710 JUMPI POP DUP2 ISZERO JUMPDEST DUP1 PUSH2 0x7719 JUMPI POP DUP3 ISZERO JUMPDEST ISZERO PUSH2 0x7726 JUMPI POP PUSH1 0x0 PUSH2 0x397A JUMP JUMPDEST DUP4 DUP3 MUL DUP3 DUP6 DUP3 DUP2 PUSH2 0x7733 JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x7743 JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x397A JUMP JUMPDEST DUP4 PUSH1 0x1 DUP6 SUB DUP3 ADD DUP2 PUSH2 0x7751 JUMPI INVALID JUMPDEST DIV SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 EXTCODESIZE DUP1 PUSH2 0x776E JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x9AF JUMP JUMPDEST POP DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDFE1681 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x77A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x77BC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x77E0 SWAP2 SWAP1 PUSH2 0x81CE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x70A08231 DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x780B SWAP2 SWAP1 PUSH2 0x934F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7823 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x7837 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x785B SWAP2 SWAP1 PUSH2 0x8A7F JUMP JUMPDEST PUSH2 0x7867 JUMPI POP PUSH1 0x0 PUSH2 0x9AF JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD21220A7 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x78A0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x78B4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x78D8 SWAP2 SWAP1 PUSH2 0x81CE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x70A08231 DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7903 SWAP2 SWAP1 PUSH2 0x934F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x791B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x792F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x7953 SWAP2 SWAP1 PUSH2 0x8A7F JUMP JUMPDEST PUSH2 0x795F JUMPI POP PUSH1 0x0 PUSH2 0x9AF JUMP JUMPDEST POP PUSH1 0x1 SWAP2 SWAP1 POP JUMP JUMPDEST DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO PUSH2 0x7986 JUMPI PUSH2 0x7986 PUSH2 0x7658 PUSH1 0x5 DUP6 MLOAD DUP6 PUSH1 0x20 ADD PUSH2 0x7A1A JUMP JUMPDEST SWAP2 ADD PUSH1 0x20 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO PUSH2 0x79AF JUMPI PUSH2 0x79AF PUSH2 0x7658 PUSH1 0x5 DUP6 MLOAD DUP6 PUSH1 0x20 ADD PUSH2 0x7A1A JUMP JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH4 0xE946C1BB PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x79D7 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x97F1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH1 0x60 PUSH4 0x28006595 PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x79D7 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9812 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP1 NOT AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 SWAP1 PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY POP SWAP2 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x59A6 DUP2 PUSH2 0x9C44 JUMP JUMPDEST DUP1 MLOAD PUSH2 0x59A6 DUP2 PUSH2 0x9C44 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x7BC3 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x7BD6 PUSH2 0x7BD1 DUP3 PUSH2 0x9BBB JUMP JUMPDEST PUSH2 0x9B95 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x7BF7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x7C1F JUMPI DUP2 CALLDATALOAD PUSH2 0x7C0D DUP2 PUSH2 0x9C44 JUMP JUMPDEST DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x7BFA JUMP JUMPDEST POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x7C3A JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x7C48 PUSH2 0x7BD1 DUP3 PUSH2 0x9BBB JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x7C1F JUMPI PUSH2 0x7C70 DUP9 DUP5 DUP5 CALLDATALOAD DUP11 ADD ADD PUSH2 0x7BB3 JUMP JUMPDEST DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x7C59 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x7C92 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x7CA0 PUSH2 0x7BD1 DUP3 PUSH2 0x9BBB JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x7C1F JUMPI PUSH2 0x7CC8 DUP9 DUP5 DUP5 CALLDATALOAD DUP11 ADD ADD PUSH2 0x7E71 JUMP JUMPDEST DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x7CB1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x7CEA JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x7CF8 PUSH2 0x7BD1 DUP3 PUSH2 0x9BBB JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x7D19 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x7C1F JUMPI DUP2 CALLDATALOAD PUSH2 0x7D2F DUP2 PUSH2 0x9C44 JUMP JUMPDEST DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x7D1C JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x7D51 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x7D5F PUSH2 0x7BD1 DUP3 PUSH2 0x9BBB JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD PUSH1 0x80 DUP1 DUP6 MUL DUP8 ADD DUP4 ADD DUP9 LT ISZERO PUSH2 0x7D82 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x7DA9 JUMPI PUSH2 0x7D97 DUP10 DUP5 PUSH2 0x812D JUMP JUMPDEST DUP6 MSTORE SWAP4 DUP4 ADD SWAP4 SWAP2 DUP2 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x7D85 JUMP JUMPDEST POP POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x7DC5 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x7DD3 PUSH2 0x7BD1 DUP3 PUSH2 0x9BBB JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x7DF4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x7C1F JUMPI DUP2 CALLDATALOAD DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x7DF7 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x7E23 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x7E31 PUSH2 0x7BD1 DUP3 PUSH2 0x9BBB JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x7E52 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x7C1F JUMPI DUP2 MLOAD DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x7E55 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x7E81 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x7E8F PUSH2 0x7BD1 DUP3 PUSH2 0x9BDA JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x7EA6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP5 ADD CALLDATACOPY PUSH1 0x0 SWAP1 DUP3 ADD PUSH1 0x20 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x7ECF JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x7EDD PUSH2 0x7BD1 DUP3 PUSH2 0x9BDA JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x7EF4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2832 DUP2 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x9BFD JUMP JUMPDEST DUP1 MLOAD PUSH1 0x2 DUP2 LT PUSH2 0x59A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x7F25 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x7F2F PUSH1 0x60 PUSH2 0x9B95 JUMP JUMPDEST SWAP1 POP DUP2 CALLDATALOAD PUSH2 0x7F3C DUP2 PUSH2 0x9C44 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH2 0x7F4C DUP2 PUSH2 0x9C67 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP3 ADD CALLDATALOAD PUSH2 0x7F5F DUP2 PUSH2 0x9C67 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x7F7B JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x7F85 PUSH1 0x60 PUSH2 0x9B95 JUMP JUMPDEST SWAP1 POP DUP2 MLOAD PUSH2 0x7F92 DUP2 PUSH2 0x9C44 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x7FA2 DUP2 PUSH2 0x9C67 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0x7F5F DUP2 PUSH2 0x9C67 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x7FC6 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x7FD0 PUSH1 0xA0 PUSH2 0x9B95 JUMP JUMPDEST SWAP1 POP DUP2 CALLDATALOAD DUP2 MSTORE PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH2 0x7FE4 DUP2 PUSH2 0x9C44 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP3 ADD CALLDATALOAD PUSH2 0x7FF7 DUP2 PUSH2 0x9C44 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP3 ADD CALLDATALOAD PUSH2 0x800A DUP2 PUSH2 0x9C44 JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP3 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x8028 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x8034 DUP5 DUP3 DUP6 ADD PUSH2 0x7E71 JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x180 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x8053 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x805C DUP2 PUSH2 0x9B95 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x8069 DUP4 DUP4 PUSH2 0x7B9D JUMP JUMPDEST DUP2 MSTORE PUSH2 0x8078 DUP4 PUSH1 0x20 DUP5 ADD PUSH2 0x7B9D JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x808A DUP4 PUSH1 0x40 DUP5 ADD PUSH2 0x8190 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x809C DUP4 PUSH1 0x60 DUP5 ADD PUSH2 0x8190 JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH2 0x80AE DUP4 PUSH1 0x80 DUP5 ADD PUSH2 0x8190 JUMP JUMPDEST PUSH1 0x80 DUP3 ADD MSTORE PUSH2 0x80C0 DUP4 PUSH1 0xA0 DUP5 ADD PUSH2 0x7B9D JUMP JUMPDEST PUSH1 0xA0 DUP3 ADD MSTORE PUSH2 0x80D2 DUP4 PUSH1 0xC0 DUP5 ADD PUSH2 0x7B9D JUMP JUMPDEST PUSH1 0xC0 DUP3 ADD MSTORE PUSH2 0x80E4 DUP4 PUSH1 0xE0 DUP5 ADD PUSH2 0x7B9D JUMP JUMPDEST PUSH1 0xE0 DUP3 ADD MSTORE PUSH2 0x100 PUSH2 0x80F8 DUP5 DUP3 DUP6 ADD PUSH2 0x7B9D JUMP JUMPDEST SWAP1 DUP3 ADD MSTORE PUSH2 0x120 DUP3 DUP2 ADD CALLDATALOAD SWAP1 DUP3 ADD MSTORE PUSH2 0x140 PUSH2 0x8116 DUP5 DUP3 DUP6 ADD PUSH2 0x819B JUMP JUMPDEST DUP2 DUP4 ADD MSTORE POP PUSH2 0x160 DUP1 DUP4 ADD CALLDATALOAD DUP2 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x813E JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x8148 PUSH1 0x80 PUSH2 0x9B95 JUMP JUMPDEST SWAP1 POP DUP2 CALLDATALOAD PUSH1 0x4 DUP2 LT PUSH2 0x8159 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x816F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 DUP3 ADD CALLDATALOAD PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP3 ADD CALLDATALOAD PUSH1 0x60 DUP3 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x59A6 DUP2 PUSH2 0x9C8C JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x59A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x81C3 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x397A DUP2 PUSH2 0x9C44 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x81DF JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x397A DUP2 PUSH2 0x9C44 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x81FC JUMPI DUP1 DUP2 REVERT JUMPDEST DUP3 MLOAD PUSH2 0x8207 DUP2 PUSH2 0x9C44 JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 SWAP3 POP PUSH2 0x8218 DUP2 PUSH2 0x9C44 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x8238 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 MLOAD PUSH2 0x8243 DUP2 PUSH2 0x9C44 JUMP JUMPDEST PUSH1 0x20 DUP7 ADD MLOAD SWAP1 SWAP5 POP PUSH2 0x8254 DUP2 PUSH2 0x9C44 JUMP JUMPDEST PUSH1 0x40 DUP7 ADD MLOAD SWAP1 SWAP4 POP PUSH2 0x8265 DUP2 PUSH2 0x9C44 JUMP JUMPDEST PUSH1 0x60 DUP7 ADD MLOAD SWAP1 SWAP3 POP PUSH2 0x8276 DUP2 PUSH2 0x9C44 JUMP JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP1 SWAP4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x8295 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 MLOAD PUSH2 0x82A0 DUP2 PUSH2 0x9C44 JUMP JUMPDEST PUSH1 0x20 DUP6 ADD MLOAD SWAP1 SWAP4 POP PUSH2 0x82B1 DUP2 PUSH2 0x9C44 JUMP JUMPDEST PUSH1 0x40 DUP6 ADD MLOAD SWAP1 SWAP3 POP DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x82C6 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x82E3 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH2 0x82EE DUP2 PUSH2 0x9C44 JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x830A JUMPI DUP3 DUP4 REVERT JUMPDEST SWAP1 DUP5 ADD SWAP1 PUSH1 0xA0 DUP3 DUP8 SUB SLT ISZERO PUSH2 0x831D JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x8327 PUSH1 0xA0 PUSH2 0x9B95 JUMP JUMPDEST DUP3 MLOAD DUP2 MSTORE PUSH2 0x8338 DUP8 PUSH1 0x20 DUP6 ADD PUSH2 0x7BA8 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x834A DUP8 PUSH1 0x40 DUP6 ADD PUSH2 0x7BA8 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x835C DUP8 PUSH1 0x60 DUP6 ADD PUSH2 0x7BA8 JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP4 ADD MLOAD DUP3 DUP2 GT ISZERO PUSH2 0x8372 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x837E DUP9 DUP3 DUP7 ADD PUSH2 0x7EBF JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE POP DUP1 SWAP4 POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x83A8 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x83B3 DUP2 PUSH2 0x9C44 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x83C3 DUP2 PUSH2 0x9C44 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH2 0x83D3 DUP2 PUSH2 0x9C44 JUMP JUMPDEST SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH2 0x83E3 DUP2 PUSH2 0x9C44 JUMP JUMPDEST SWAP2 POP PUSH1 0x80 DUP7 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x83FD JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x8409 DUP9 DUP3 DUP10 ADD PUSH2 0x7DB5 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x842B JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x8436 DUP2 PUSH2 0x9C44 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x8446 DUP2 PUSH2 0x9C44 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x8456 DUP2 PUSH2 0x9C44 JUMP JUMPDEST SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x8470 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x847C DUP8 DUP3 DUP9 ADD PUSH2 0x7DB5 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x849D JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x84A8 DUP2 PUSH2 0x9C44 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x84B8 DUP2 PUSH2 0x9C44 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x84C8 DUP2 PUSH2 0x9C44 JUMP JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP3 SWAP4 PUSH1 0x60 ADD CALLDATALOAD SWAP3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x84EC JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x84F7 DUP2 PUSH2 0x9C44 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x8512 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x851E DUP8 DUP4 DUP9 ADD PUSH2 0x7BB3 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x8533 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x8540 DUP7 DUP3 DUP8 ADD PUSH2 0x7DB5 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x8561 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x856C DUP2 PUSH2 0x9C44 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH2 0x83D3 DUP2 PUSH2 0x9C44 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x8595 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x85AA JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 ADD PUSH1 0x1F DUP2 ADD DUP6 SGT PUSH2 0x85BA JUMPI DUP3 DUP4 REVERT JUMPDEST DUP1 MLOAD PUSH2 0x85C8 PUSH2 0x7BD1 DUP3 PUSH2 0x9BBB JUMP JUMPDEST DUP2 DUP2 MSTORE DUP4 DUP2 ADD SWAP1 DUP4 DUP6 ADD DUP6 DUP5 MUL DUP6 ADD DUP7 ADD DUP10 LT ISZERO PUSH2 0x85E4 JUMPI DUP7 DUP8 REVERT JUMPDEST DUP7 SWAP5 POP JUMPDEST DUP4 DUP6 LT ISZERO PUSH2 0x860F JUMPI DUP1 MLOAD PUSH2 0x85FB DUP2 PUSH2 0x9C44 JUMP JUMPDEST DUP4 MSTORE PUSH1 0x1 SWAP5 SWAP1 SWAP5 ADD SWAP4 SWAP2 DUP6 ADD SWAP2 DUP6 ADD PUSH2 0x85E8 JUMP JUMPDEST POP SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x862F JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x8645 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 DUP7 ADD SWAP2 POP DUP7 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x8658 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x8666 PUSH2 0x7BD1 DUP3 PUSH2 0x9BBB JUMP JUMPDEST DUP1 DUP3 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD SWAP3 POP DUP1 DUP7 ADD DUP12 DUP3 DUP4 DUP8 MUL DUP10 ADD ADD GT ISZERO PUSH2 0x8686 JUMPI DUP8 DUP9 REVERT JUMPDEST DUP8 SWAP7 POP JUMPDEST DUP5 DUP8 LT ISZERO PUSH2 0x86A8 JUMPI DUP1 MLOAD DUP5 MSTORE PUSH1 0x1 SWAP7 SWAP1 SWAP7 ADD SWAP6 SWAP3 DUP2 ADD SWAP3 DUP2 ADD PUSH2 0x868A JUMP JUMPDEST POP DUP10 ADD MLOAD SWAP1 SWAP8 POP SWAP4 POP POP POP DUP1 DUP3 GT ISZERO PUSH2 0x86BF JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x86CC DUP7 DUP3 DUP8 ADD PUSH2 0x7E13 JUMP JUMPDEST SWAP3 POP POP PUSH2 0x86DC DUP6 PUSH1 0x40 DUP7 ADD PUSH2 0x7F05 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x86F7 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x870D JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x8720 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x872E JUMPI DUP5 DUP6 REVERT JUMPDEST DUP7 PUSH1 0x20 DUP1 DUP4 MUL DUP6 ADD ADD GT ISZERO PUSH2 0x8741 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH1 0x20 SWAP3 SWAP1 SWAP3 ADD SWAP7 SWAP2 SWAP6 POP SWAP1 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x8767 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x877D JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x8789 DUP8 DUP4 DUP9 ADD PUSH2 0x7C82 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x879E JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x87AB DUP7 DUP3 DUP8 ADD PUSH2 0x7C82 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x87CD JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x87E2 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0xFFE DUP5 DUP3 DUP6 ADD PUSH2 0x7CDA JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x8800 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x8815 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x8821 DUP6 DUP3 DUP7 ADD PUSH2 0x7CDA JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x8218 DUP2 PUSH2 0x9C44 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x8846 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x885B JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x8867 DUP7 DUP3 DUP8 ADD PUSH2 0x7CDA JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x8878 DUP2 PUSH2 0x9C44 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH2 0x82C6 DUP2 PUSH2 0x9C44 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x889A JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x88AF JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 ADD PUSH1 0x1F DUP2 ADD DUP6 SGT PUSH2 0x88BF JUMPI DUP3 DUP4 REVERT JUMPDEST DUP1 MLOAD PUSH2 0x88CD PUSH2 0x7BD1 DUP3 PUSH2 0x9BBB JUMP JUMPDEST DUP2 DUP2 MSTORE DUP4 DUP2 ADD SWAP1 DUP4 DUP6 ADD DUP6 DUP5 MUL DUP6 ADD DUP7 ADD DUP10 LT ISZERO PUSH2 0x88E9 JUMPI DUP7 DUP8 REVERT JUMPDEST DUP7 SWAP5 POP JUMPDEST DUP4 DUP6 LT ISZERO PUSH2 0x860F JUMPI DUP1 MLOAD DUP4 MSTORE PUSH1 0x1 SWAP5 SWAP1 SWAP5 ADD SWAP4 SWAP2 DUP6 ADD SWAP2 DUP6 ADD PUSH2 0x88ED JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x891F JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x8935 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 DUP7 ADD SWAP2 POP DUP7 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x8948 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x8956 PUSH2 0x7BD1 DUP3 PUSH2 0x9BBB JUMP JUMPDEST DUP1 DUP3 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD SWAP3 POP DUP1 DUP7 ADD PUSH2 0x180 DUP13 DUP4 DUP3 DUP9 MUL DUP11 ADD ADD GT ISZERO PUSH2 0x8979 JUMPI DUP9 DUP10 REVERT JUMPDEST DUP9 SWAP8 POP JUMPDEST DUP6 DUP9 LT ISZERO PUSH2 0x89A5 JUMPI PUSH2 0x898F DUP14 DUP4 PUSH2 0x8040 JUMP JUMPDEST DUP6 MSTORE PUSH1 0x1 SWAP8 SWAP1 SWAP8 ADD SWAP7 SWAP4 DUP3 ADD SWAP4 SWAP1 DUP2 ADD SWAP1 PUSH2 0x897D JUMP JUMPDEST POP SWAP2 SWAP9 POP DUP10 ADD CALLDATALOAD SWAP5 POP POP POP POP DUP1 DUP3 GT ISZERO PUSH2 0x89BD JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x89CA DUP7 DUP3 DUP8 ADD PUSH2 0x7D41 JUMP JUMPDEST SWAP3 POP POP PUSH2 0x86DC DUP6 PUSH1 0x40 DUP7 ADD PUSH2 0x7B9D JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x89EB JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x8A00 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0xFFE DUP5 DUP3 DUP6 ADD PUSH2 0x7E13 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x8A1D JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x397A DUP2 PUSH2 0x9C59 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x8A3C JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 MLOAD PUSH2 0x8A47 DUP2 PUSH2 0x9C59 JUMP JUMPDEST PUSH1 0x20 DUP6 ADD MLOAD SWAP1 SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x8A62 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x8A6E DUP7 DUP3 DUP8 ADD PUSH2 0x7EBF JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 DUP5 ADD MLOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x8A90 JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x8AA8 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x8ABD JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0xFFE DUP5 DUP3 DUP6 ADD PUSH2 0x7EBF JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x8ADD JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x8AE8 DUP2 PUSH2 0x9C44 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x8B03 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x851E DUP8 DUP4 DUP9 ADD PUSH2 0x7CDA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x8B20 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x397A DUP2 PUSH2 0x9C7D JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x80 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x8B3D JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH2 0x8B48 DUP2 PUSH2 0x9C7D JUMP JUMPDEST SWAP2 POP PUSH2 0x8B57 DUP5 PUSH1 0x20 DUP6 ADD PUSH2 0x7F6A JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP5 DUP7 SUB PUSH1 0xA0 DUP2 SLT ISZERO PUSH2 0x8B76 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x40 DUP2 SLT ISZERO PUSH2 0x8B83 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x8B8E PUSH1 0x40 PUSH2 0x9B95 JUMP JUMPDEST DUP6 CALLDATALOAD DUP2 MSTORE PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x8BA0 DUP2 PUSH2 0x9C44 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE SWAP4 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x8BB5 DUP2 PUSH2 0x9C44 JUMP JUMPDEST SWAP3 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH2 0x8BC5 DUP2 PUSH2 0x9C44 JUMP JUMPDEST SWAP2 POP PUSH1 0x80 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x8470 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x8BF4 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x8C0A JUMPI DUP4 DUP5 REVERT JUMPDEST SWAP1 DUP7 ADD SWAP1 PUSH1 0x40 DUP3 DUP10 SUB SLT ISZERO PUSH2 0x8C1D JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x8C27 PUSH1 0x40 PUSH2 0x9B95 JUMP JUMPDEST PUSH2 0x8C31 DUP10 DUP5 PUSH2 0x7B9D JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP3 DUP2 GT ISZERO PUSH2 0x8C44 JUMPI DUP6 DUP7 REVERT JUMPDEST PUSH2 0x8C50 DUP11 DUP3 DUP7 ADD PUSH2 0x7C2A JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP DUP1 SWAP7 POP POP PUSH2 0x8C67 DUP9 PUSH1 0x20 DUP10 ADD PUSH2 0x7B9D JUMP JUMPDEST SWAP5 POP PUSH2 0x8C76 DUP9 PUSH1 0x40 DUP10 ADD PUSH2 0x7B9D JUMP JUMPDEST SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x8C8B JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x847C DUP8 DUP3 DUP9 ADD PUSH2 0x7DB5 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x8CAD JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x8CB7 DUP7 DUP7 PUSH2 0x7F14 JUMP JUMPDEST SWAP4 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH2 0x8CC7 DUP2 PUSH2 0x9C7D JUMP JUMPDEST SWAP3 POP PUSH1 0x80 DUP6 ADD CALLDATALOAD PUSH2 0x8CD7 DUP2 PUSH2 0x9C7D JUMP JUMPDEST SWAP2 POP PUSH1 0xA0 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x8470 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP5 DUP7 SUB PUSH1 0xA0 DUP2 SLT ISZERO PUSH2 0x8D07 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x40 DUP2 SLT ISZERO PUSH2 0x8D14 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x8D1F PUSH1 0x40 PUSH2 0x9B95 JUMP JUMPDEST DUP6 CALLDATALOAD PUSH2 0x8D2A DUP2 PUSH2 0x9C44 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x8BA0 DUP2 PUSH2 0x9C44 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x8D4F JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x8D65 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x8D71 DUP9 DUP4 DUP10 ADD PUSH2 0x7FB5 JUMP JUMPDEST SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP2 POP PUSH2 0x8D83 DUP3 PUSH2 0x9C44 JUMP JUMPDEST SWAP1 SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP1 PUSH2 0x8D95 DUP3 PUSH2 0x9C44 JUMP JUMPDEST SWAP1 SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD SWAP1 DUP1 DUP3 GT ISZERO PUSH2 0x8C8B JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x8DBF JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x8DD4 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x8DE0 DUP8 DUP3 DUP9 ADD PUSH2 0x7FB5 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x84B8 DUP2 PUSH2 0x9C44 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x8E06 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x8E1B JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x8E27 DUP8 DUP3 DUP9 ADD PUSH2 0x7FB5 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x8E3F DUP2 PUSH2 0x9C44 JUMP JUMPDEST SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH2 0x8276 DUP2 PUSH2 0x9C44 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x220 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x8E64 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x8E6E DUP6 DUP6 PUSH2 0x8040 JUMP JUMPDEST SWAP3 POP PUSH2 0x8E7E DUP6 PUSH2 0x180 DUP7 ADD PUSH2 0x812D JUMP JUMPDEST SWAP2 POP PUSH2 0x200 DUP5 ADD CALLDATALOAD PUSH2 0x82C6 DUP2 PUSH2 0x9C44 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP5 DUP7 SUB PUSH1 0xC0 DUP2 SLT ISZERO PUSH2 0x8EA5 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x60 DUP2 SLT ISZERO PUSH2 0x8EB2 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x8EBD PUSH1 0x60 PUSH2 0x9B95 JUMP JUMPDEST DUP6 CALLDATALOAD PUSH2 0x8EC8 DUP2 PUSH2 0x9C44 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP7 DUP2 ADD CALLDATALOAD SWAP1 DUP3 ADD MSTORE PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH2 0x8EE2 DUP2 PUSH2 0x9C44 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE SWAP4 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH2 0x8EF7 DUP2 PUSH2 0x9C44 JUMP JUMPDEST SWAP3 POP PUSH1 0x80 DUP6 ADD CALLDATALOAD PUSH2 0x8CD7 DUP2 PUSH2 0x9C44 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 DUP6 SUB PUSH1 0xA0 DUP2 SLT ISZERO PUSH2 0x8F1C JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x60 DUP2 SLT ISZERO PUSH2 0x8F29 JUMPI DUP2 DUP3 REVERT JUMPDEST POP PUSH2 0x8F34 PUSH1 0x60 PUSH2 0x9B95 JUMP JUMPDEST DUP5 MLOAD DUP2 MSTORE PUSH1 0x20 DUP6 ADD MLOAD PUSH1 0x5 DUP2 LT PUSH2 0x8F49 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP6 ADD MLOAD PUSH2 0x8F5C DUP2 PUSH2 0x9C8C JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP6 ADD MLOAD SWAP1 SWAP4 POP PUSH2 0x8F72 DUP2 PUSH2 0x9C8C JUMP JUMPDEST PUSH1 0x80 DUP6 ADD MLOAD SWAP1 SWAP3 POP PUSH2 0x82C6 DUP2 PUSH2 0x9C59 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x8F94 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH3 0xFFFFFF DUP2 AND DUP2 EQ PUSH2 0x397A JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x8FB8 JUMPI DUP2 DUP3 REVERT JUMPDEST POP POP DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD MLOAD SWAP1 SWAP3 SWAP1 SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x8FDE JUMPI DUP2 DUP3 REVERT JUMPDEST POP POP DUP3 MLOAD PUSH1 0x20 DUP5 ADD MLOAD PUSH1 0x40 DUP6 ADD MLOAD PUSH1 0x60 SWAP1 SWAP6 ADD MLOAD SWAP2 SWAP7 SWAP1 SWAP6 POP SWAP1 SWAP3 POP SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x9015 JUMPI DUP3 DUP4 REVERT JUMPDEST POP POP DUP4 MLOAD PUSH1 0x20 DUP6 ADD MLOAD PUSH1 0x40 DUP7 ADD MLOAD PUSH1 0x60 DUP8 ADD MLOAD PUSH1 0x80 SWAP1 SWAP8 ADD MLOAD SWAP3 SWAP9 SWAP2 SWAP8 POP SWAP6 SWAP5 POP SWAP1 SWAP3 POP SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP4 MSTORE PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x60 DUP3 ADD MLOAD PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP3 ADD MLOAD PUSH1 0xA0 PUSH1 0x80 DUP6 ADD MSTORE PUSH2 0xFFE PUSH1 0xA0 DUP6 ADD DUP3 PUSH2 0x910A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD DUP4 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x90D0 JUMPI DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x90AB JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD DUP4 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x90D0 JUMPI DUP2 MLOAD DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x90EE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x9122 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x9BFD JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 MSTORE PUSH1 0x20 DUP1 DUP3 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 DUP2 AND SWAP2 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP2 DUP3 ADD MLOAD AND SWAP2 ADD MSTORE JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP4 MSTORE PUSH1 0x20 DUP1 DUP4 ADD MLOAD ISZERO ISZERO SWAP1 DUP5 ADD MSTORE PUSH1 0x40 DUP1 DUP4 ADD MLOAD SWAP1 SWAP2 AND SWAP1 DUP4 ADD MSTORE PUSH1 0x60 SWAP1 DUP2 ADD MLOAD ISZERO ISZERO SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP4 MSTORE PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x40 PUSH1 0x20 DUP6 ADD MSTORE PUSH2 0xFFE PUSH1 0x40 DUP6 ADD DUP3 PUSH2 0x910A JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP4 MSTORE PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 DUP3 AND PUSH1 0x20 DUP7 ADD MSTORE DUP1 PUSH1 0x40 DUP6 ADD MLOAD AND PUSH1 0x40 DUP7 ADD MSTORE DUP1 PUSH1 0x60 DUP6 ADD MLOAD AND PUSH1 0x60 DUP7 ADD MSTORE POP POP PUSH1 0x80 DUP3 ADD MLOAD PUSH1 0xA0 PUSH1 0x80 DUP6 ADD MSTORE PUSH2 0xFFE PUSH1 0xA0 DUP6 ADD DUP3 PUSH2 0x910A JUMP JUMPDEST PUSH2 0x9214 DUP3 DUP3 MLOAD PUSH2 0x908B JUMP JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD PUSH2 0x9226 PUSH1 0x20 DUP5 ADD DUP3 PUSH2 0x908B JUMP JUMPDEST POP PUSH1 0x40 DUP2 ADD MLOAD PUSH2 0x9239 PUSH1 0x40 DUP5 ADD DUP3 PUSH2 0x9309 JUMP JUMPDEST POP PUSH1 0x60 DUP2 ADD MLOAD PUSH2 0x924C PUSH1 0x60 DUP5 ADD DUP3 PUSH2 0x9309 JUMP JUMPDEST POP PUSH1 0x80 DUP2 ADD MLOAD PUSH2 0x925F PUSH1 0x80 DUP5 ADD DUP3 PUSH2 0x9309 JUMP JUMPDEST POP PUSH1 0xA0 DUP2 ADD MLOAD PUSH2 0x9272 PUSH1 0xA0 DUP5 ADD DUP3 PUSH2 0x908B JUMP JUMPDEST POP PUSH1 0xC0 DUP2 ADD MLOAD PUSH2 0x9285 PUSH1 0xC0 DUP5 ADD DUP3 PUSH2 0x908B JUMP JUMPDEST POP PUSH1 0xE0 DUP2 ADD MLOAD PUSH2 0x9298 PUSH1 0xE0 DUP5 ADD DUP3 PUSH2 0x908B JUMP JUMPDEST POP PUSH2 0x100 DUP1 DUP3 ADD MLOAD PUSH2 0x92AC DUP3 DUP6 ADD DUP3 PUSH2 0x908B JUMP JUMPDEST POP POP PUSH2 0x120 DUP2 DUP2 ADD MLOAD SWAP1 DUP4 ADD MSTORE PUSH2 0x140 DUP1 DUP3 ADD MLOAD PUSH2 0x92CC DUP3 DUP6 ADD DUP3 PUSH2 0x9316 JUMP JUMPDEST POP POP PUSH2 0x160 SWAP1 DUP2 ADD MLOAD SWAP2 ADD MSTORE JUMP JUMPDEST DUP1 MLOAD PUSH2 0x92E5 DUP2 PUSH2 0x9C2D JUMP JUMPDEST DUP3 MSTORE PUSH1 0x20 DUP2 DUP2 ADD MLOAD PUSH1 0xFF AND SWAP1 DUP4 ADD MSTORE PUSH1 0x40 DUP1 DUP3 ADD MLOAD SWAP1 DUP4 ADD MSTORE PUSH1 0x60 SWAP1 DUP2 ADD MLOAD SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP4 CALLDATACOPY SWAP2 ADD SWAP1 DUP2 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x9345 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x9BFD JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND DUP2 MSTORE SWAP3 DUP5 AND PUSH1 0x20 DUP5 ADD MSTORE SWAP1 DUP4 AND PUSH1 0x40 DUP4 ADD MSTORE SWAP1 SWAP2 AND PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 DUP2 AND PUSH1 0x20 DUP4 ADD MSTORE DUP4 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x5DC6 SWAP1 DUP4 ADD DUP5 PUSH2 0x90DB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND DUP2 MSTORE SWAP3 DUP5 AND PUSH1 0x20 DUP5 ADD MSTORE SWAP3 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE SWAP1 ISZERO ISZERO PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE DUP3 ISZERO ISZERO PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x5DC6 SWAP1 DUP4 ADD DUP5 PUSH2 0x910A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND DUP3 MSTORE DUP6 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0xA0 PUSH1 0x80 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x94D5 SWAP1 DUP4 ADD DUP5 PUSH2 0x910A JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND DUP2 MSTORE PUSH1 0x60 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x9504 SWAP1 DUP4 ADD DUP6 PUSH2 0x9098 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x5DC6 DUP2 DUP6 PUSH2 0x90DB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP2 MSTORE PUSH1 0x0 PUSH2 0x952D DUP6 PUSH2 0x9C2D JUMP JUMPDEST DUP5 PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x80 PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x9547 PUSH1 0x80 DUP4 ADD DUP6 PUSH2 0x90DB JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0x94D5 DUP2 DUP6 PUSH2 0x90DB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 DUP2 AND DUP3 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x100 SWAP1 PUSH2 0x9576 DUP12 PUSH2 0x9C2D JUMP JUMPDEST DUP11 PUSH1 0x20 DUP6 ADD MSTORE DUP2 PUSH1 0x40 DUP6 ADD MSTORE PUSH2 0x958E DUP3 DUP6 ADD DUP12 PUSH2 0x90DB JUMP JUMPDEST SWAP2 POP DUP4 DUP3 SUB PUSH1 0x60 DUP6 ADD MSTORE PUSH2 0x95A2 DUP3 DUP11 PUSH2 0x90DB JUMP JUMPDEST SWAP1 DUP9 AND PUSH1 0x80 DUP6 ADD MSTORE SWAP1 POP PUSH2 0x95B5 DUP7 PUSH2 0x9C2D JUMP JUMPDEST DUP6 PUSH1 0xA0 DUP5 ADD MSTORE DUP3 DUP2 SUB PUSH1 0xC0 DUP5 ADD MSTORE PUSH2 0x95CD DUP2 DUP7 PUSH2 0x90DB JUMP JUMPDEST SWAP1 POP DUP3 DUP2 SUB PUSH1 0xE0 DUP5 ADD MSTORE PUSH2 0x95E1 DUP2 DUP6 PUSH2 0x90DB JUMP JUMPDEST SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND DUP2 MSTORE PUSH1 0x40 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0xFFE SWAP1 DUP4 ADD DUP5 PUSH2 0x91BC JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 MSTORE PUSH2 0x9627 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x9098 JUMP JUMPDEST SWAP1 POP DUP3 PUSH1 0x20 DUP4 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD PUSH1 0x40 DUP4 MSTORE DUP1 DUP6 MLOAD DUP1 DUP4 MSTORE PUSH1 0x60 DUP6 ADD SWAP2 POP PUSH1 0x20 SWAP3 POP PUSH1 0x60 DUP4 DUP3 MUL DUP7 ADD ADD DUP4 DUP9 ADD DUP6 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x968B JUMPI PUSH1 0x5F NOT DUP9 DUP5 SUB ADD DUP6 MSTORE PUSH2 0x9679 DUP4 DUP4 MLOAD PUSH2 0x910A JUMP JUMPDEST SWAP5 DUP7 ADD SWAP5 SWAP3 POP SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x965D JUMP JUMPDEST POP POP DUP6 DUP2 SUB DUP5 DUP8 ADD MSTORE PUSH2 0x761B DUP2 DUP9 PUSH2 0x90DB JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 PUSH1 0x40 SWAP1 DUP2 DUP6 ADD SWAP1 DUP1 DUP5 MUL DUP7 ADD DUP4 ADD DUP8 DUP6 ADD DUP7 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x9705 JUMPI DUP9 DUP4 SUB PUSH1 0x3F NOT ADD DUP6 MSTORE DUP2 MLOAD DUP1 MLOAD DUP8 DUP6 MSTORE PUSH2 0x96E6 DUP9 DUP7 ADD DUP3 PUSH2 0x910A JUMP JUMPDEST SWAP2 DUP10 ADD MLOAD ISZERO ISZERO SWAP5 DUP10 ADD SWAP5 SWAP1 SWAP5 MSTORE SWAP5 DUP8 ADD SWAP5 SWAP3 POP SWAP1 DUP7 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x96C2 JUMP JUMPDEST POP SWAP1 SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x397A PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x90DB JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST DUP4 ISZERO ISZERO DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x60 PUSH1 0x40 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x106C SWAP1 DUP4 ADD DUP5 PUSH2 0x90DB JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP3 MSTORE PUSH1 0x60 PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x9504 PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0x910A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x397A PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x910A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 MSTORE PUSH2 0x9627 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x910A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH3 0xFFFFFF SWAP1 SWAP2 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND DUP2 MSTORE PUSH1 0x40 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0xFFE SWAP1 DUP4 ADD DUP5 PUSH2 0x90DB JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH2 0x97FE DUP6 PUSH2 0x9C2D JUMP JUMPDEST SWAP4 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH1 0x8 DUP6 LT PUSH2 0x97FE JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH1 0xE0 DUP3 ADD PUSH2 0x982F DUP8 PUSH2 0x9C3A JUMP JUMPDEST DUP7 DUP4 MSTORE PUSH1 0x20 PUSH1 0xE0 DUP2 DUP6 ADD MSTORE DUP2 DUP8 MLOAD PUSH2 0x9847 DUP2 DUP6 PUSH2 0x975D JUMP JUMPDEST SWAP2 POP DUP2 SWAP4 POP DUP3 DUP2 MUL DUP3 ADD DUP4 DUP11 ADD DUP7 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x9880 JUMPI DUP7 DUP4 SUB DUP6 MSTORE PUSH2 0x986E DUP4 DUP4 MLOAD PUSH2 0x904E JUMP JUMPDEST SWAP5 DUP7 ADD SWAP5 SWAP3 POP SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x9856 JUMP JUMPDEST POP POP DUP7 DUP2 SUB PUSH1 0x40 DUP9 ADD MSTORE DUP1 SWAP5 POP DUP9 MLOAD SWAP3 POP PUSH2 0x989B DUP4 DUP3 PUSH2 0x975D JUMP JUMPDEST SWAP5 POP POP POP DUP2 DUP8 ADD DUP5 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x98C5 JUMPI PUSH2 0x98B7 DUP6 DUP4 MLOAD PUSH2 0x903D JUMP JUMPDEST SWAP5 POP SWAP1 DUP4 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x98A4 JUMP JUMPDEST POP POP POP POP DUP1 SWAP2 POP POP PUSH2 0x106C PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x9168 JUMP JUMPDEST PUSH1 0xF SWAP4 DUP5 SIGNEXTEND DUP2 MSTORE SWAP2 SWAP1 SWAP3 SIGNEXTEND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0xF DUP4 SWAP1 SIGNEXTEND DUP2 MSTORE PUSH1 0x80 DUP2 ADD PUSH2 0x397A PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x9136 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x24 SWAP1 DUP3 ADD MSTORE PUSH32 0x556E6973776170563353616D706C65722F746F6B656E5061746820746F6F2073 PUSH1 0x40 DUP3 ADD MSTORE PUSH4 0x1A1BDC9D PUSH1 0xE2 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x455243323042726964676553616D706C65722F494E56414C49445F544F4B454E PUSH1 0x40 DUP3 ADD MSTORE PUSH5 0x2FA820A4A9 PUSH1 0xD9 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x556E6973776170563353616D706C65722F696E76616C69642070617468206C65 PUSH1 0x40 DUP3 ADD MSTORE PUSH5 0x6E67746873 PUSH1 0xD8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x99EA DUP3 DUP8 PUSH2 0x9136 JUMP JUMPDEST DUP5 PUSH1 0xF SIGNEXTEND PUSH1 0x60 DUP4 ADD MSTORE DUP4 PUSH1 0xF SIGNEXTEND PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xC0 PUSH1 0xA0 DUP4 ADD MSTORE PUSH2 0x5DC6 PUSH1 0xC0 DUP4 ADD DUP5 PUSH2 0x90DB JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 MSTORE PUSH2 0x9A23 PUSH1 0x60 DUP4 ADD DUP7 PUSH2 0x919D JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x9A35 DUP2 DUP7 PUSH2 0x919D JUMP JUMPDEST SWAP2 POP POP DUP3 PUSH1 0x40 DUP4 ADD MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 MSTORE PUSH2 0x9A59 PUSH1 0x80 DUP4 ADD DUP8 PUSH2 0x91BC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP6 DUP7 AND PUSH1 0x20 DUP5 ADD MSTORE SWAP4 SWAP1 SWAP5 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 MSTORE PUSH2 0x9A8F PUSH1 0x80 DUP4 ADD DUP8 PUSH2 0x91BC JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP6 SWAP1 SWAP6 MSTORE POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x40 DUP3 ADD MSTORE SWAP2 AND PUSH1 0x60 SWAP1 SWAP2 ADD MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x200 DUP2 ADD PUSH2 0x9AC4 DUP3 DUP6 PUSH2 0x9209 JUMP JUMPDEST PUSH2 0x397A PUSH2 0x180 DUP4 ADD DUP5 PUSH2 0x92DA JUMP JUMPDEST PUSH2 0x220 DUP2 ADD PUSH2 0x9AE1 DUP3 DUP7 PUSH2 0x9209 JUMP JUMPDEST PUSH2 0x9AEF PUSH2 0x180 DUP4 ADD DUP6 PUSH2 0x92DA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND PUSH2 0x200 SWAP2 SWAP1 SWAP2 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 DUP3 MSTORE PUSH1 0x40 PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0xFFE PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x9098 JUMP JUMPDEST SWAP6 DUP7 MSTORE PUSH1 0x20 DUP7 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0x40 DUP6 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH1 0x1E NOT DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0x9B60 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 ADD DUP1 CALLDATALOAD SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0x9B79 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x20 ADD SWAP2 POP CALLDATASIZE DUP2 SWAP1 SUB DUP3 SGT ISZERO PUSH2 0x9B8E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x9BB3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0x9BD0 JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0x9BEF JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x9C18 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x9C00 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x9C27 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x4 DUP2 LT PUSH2 0x9C37 JUMPI INVALID JUMPDEST POP JUMP JUMPDEST PUSH1 0x2 DUP2 LT PUSH2 0x9C37 JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x9C37 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x9C37 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x9C37 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0xF SIGNEXTEND DUP2 EQ PUSH2 0x9C37 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x9C37 JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC1 0xF6 EQ DUP5 0x26 0xAE SWAP1 INVALID PUSH3 0xD9FB20 CALLCODE 0xB2 0xD0 0xDF 0xB0 MLOAD PUSH22 0x627F257602D9223499B9BF406564736F6C634300060C STOP CALLER ",
                "sourceMap": "1346:1249:8:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4230:977:17;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1551:1290:4;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;:::i;2195:196:25:-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;2131:1734:3:-;;;;;;:::i;:::-;;:::i;4274:2338:22:-;;;;;;:::i;:::-;;:::i;3549:919:14:-;;;;;;:::i;:::-;;:::i;4133:670:20:-;;;;;;:::i;:::-;;:::i;1936:1742:6:-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;:::i;1410:1411:16:-;;;;;;:::i;:::-;;:::i;1382:1063:13:-;;;;;;:::i;:::-;;:::i;1214:988:23:-;;;;;;:::i;:::-;;:::i;1731:1130:5:-;;;;;;:::i;:::-;;:::i;4509:2595:11:-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;2047:1569:24:-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;4265:2076:2:-;;;;;;:::i;:::-;;:::i;4028:1924:24:-;;;;;;:::i;:::-;;:::i;2751:583:19:-;;;;;;:::i;:::-;;:::i;5648:955:17:-;;;;;;:::i;:::-;;:::i;2119:474:8:-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;946:381:25:-;;;;;;:::i;:::-;;:::i;3416:313:4:-;;;;;;:::i;:::-;;:::i;4474:920:14:-;;;;;;:::i;:::-;;:::i;1621:2080:20:-;;;;;;:::i;:::-;;:::i;888:1649:21:-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;:::i;3287:1650:5:-;;;;;;:::i;:::-;;:::i;1764:2076:2:-;;;;;;:::i;:::-;;:::i;6743:1029:17:-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;3464:1039:11:-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;:::i;2424:1290:15:-;;;;;;:::i;:::-;;:::i;4281:1535:3:-;;;;;;:::i;:::-;;:::i;1540:1205:12:-;;;;;;:::i;:::-;;:::i;2025:1175:7:-;;;;;;:::i;:::-;;:::i;1325:1038:9:-;;;;;;:::i;:::-;;:::i;1432:986:15:-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;2865:593:13:-;;;;;;:::i;:::-;;:::i;1333:415:25:-;;;;;;:::i;:::-;;:::i;3202:653:12:-;;;;;;:::i;:::-;;:::i;1572:2343:22:-;;;;;;:::i;:::-;;:::i;2553:972:23:-;;;;;;:::i;:::-;;:::i;2788:1037:9:-;;;;;;:::i;:::-;;:::i;1770:1175:11:-;;;;;;:::i;:::-;;:::i;3797:1026:7:-;;;;;;:::i;:::-;;:::i;4221:1750:6:-;;;;;;:::i;:::-;;:::i;1754:435:25:-;;;;;;:::i;:::-;;:::i;1440:887:19:-;;;;;;:::i;:::-;;:::i;7885:1337:11:-;;;;;;:::i;:::-;;:::i;4189:904:15:-;;;;;;:::i;:::-;;:::i;2543:1848:21:-;;;;;;:::i;:::-;;:::i;4230:977:17:-;4457:47;4567:6;:13;-1:-1:-1;;;;;4553:28:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4553:28:17;;4520:61;;4596:9;4591:610;4616:6;:13;4611:1;:18;4591:610;;4670:4;-1:-1:-1;;;;;4670:37:17;;3715:5;4797:6;4804:1;4797:9;;;;;;;;;;;;;;4831:15;4847:1;4831:18;;;;;;;;;;;;;;4874:8;4670:234;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4670:234:17;;;;;;;;-1:-1:-1;;4670:234:17;;;;;;;;;;;;:::i;:::-;;;4650:541;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5175:1;5139:30;5170:1;5139:33;;;;;;;;;;;;;:37;;;;;5034:157;4650:541;;;5012:6;4976:30;5007:1;4976:33;;;;;;;;;;;;;:42;;;;;4921:112;4650:541;4631:3;;4591:610;;;;4230:977;;;;;:::o;1551:1290:4:-;1772:21;1795;1818:34;1872:4;:10;;;:17;1893:1;1872:22;1868:100;;;1910:47;;1868:100;2001:62;2015:4;2021:10;2033;2045:17;2001:13;:62::i;:::-;2107:24;;1977:86;;-1:-1:-1;1977:86:4;-1:-1:-1;;;;;;2093:39:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2093:39:4;;2073:59;;2148:9;2143:635;2167:17;:24;2163:1;:28;2143:635;;;2247:13;-1:-1:-1;;;;;2232:61:4;;873:5;2366:4;2372:17;2390:1;2372:20;;;;;;;;;;;;;;2232:161;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2232:161:4;;;;;;;;-1:-1:-1;;2232:161:4;;;;;;;;;;;;:::i;:::-;;;2212:556;;2748:5;;2212:556;2488:6;2465:17;2483:1;2465:20;;;;;;;;;;;;;:29;;;;;2570:17;2588:1;2570:20;;;;;;;;;;;;;;2594:1;2570:25;2566:77;;;2619:5;;;2566:77;2410:247;2193:3;;2143:635;;;;1551:1290;;;;;;;;;:::o;2195:196:25:-;2338:20;;2376:8;;2195:196;;;;:::o;2131:1734:3:-;2348:34;2398:40;2415:10;2427;2398:16;:40::i;:::-;2490:14;;;;2544:15;;;2557:1;2544:15;;;2515:26;2544:15;;;;;;;;;;;;;;;;;;-1:-1:-1;2544:15:3;2515:44;;2592:10;2569;2580:1;2569:13;;;;;;;;;;;;;:34;-1:-1:-1;;;;;2569:34:3;;;-1:-1:-1;;;;;2569:34:3;;;;;2636:10;2613;2624:1;2613:13;;;;;;;;-1:-1:-1;;;;;2613:34:3;;;:13;;;;;;;;;;;:34;2679:24;;;-1:-1:-1;;;;;2733:25:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2733:25:3;;2713:45;;2768:48;;:::i;:::-;2831:18;:16;:18::i;:::-;2768:81;;2865:9;2860:999;2884:10;2880:1;:14;2860:999;;;2915:49;2983:48;3000:8;3010:17;3028:1;3010:20;;;;;;;;;;;;;;2983:16;:48::i;:::-;3173:90;;-1:-1:-1;;;3173:90:3;;2915:116;;-1:-1:-1;;;;;;3173:20:3;;;;;:90;;3194:34;;2915:116;;3241:10;;3253:9;;3173:90;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;3173:90:3;;;;;;;;;;;;:::i;:::-;;;3046:803;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3829:5;;;;3046:803;3508:24;3535:7;3543:1;3535:10;;;;;;;;;;;;;;-1:-1:-1;;3535:15:3;3508:42;;3593:1;3572:17;:22;3568:74;;3618:5;;;;;3568:74;3690:17;3659;3677:1;3659:20;;;;;;;;;;;;;:49;;;;;3380:343;;-1:-1:-1;2896:3:3;;2860:999;;;;2131:1734;;;;;;;;;;:::o;4274:2338:22:-;4480:34;4530:40;4547:10;4559;4530:16;:40::i;:::-;4601:24;;;-1:-1:-1;;;;;4655:25:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4655:25:22;-1:-1:-1;4635:45:22;-1:-1:-1;4691:41:22;-1:-1:-1;;;;;4735:24:22;;;:106;;4802:39;4822:6;4830:10;4802:19;:39::i;:::-;4735:106;;;4797:1;4735:106;4691:150;-1:-1:-1;4851:41:22;-1:-1:-1;;;;;4895:24:22;;;:106;;4962:39;4982:6;4990:10;4962:19;:39::i;:::-;4895:106;;;4957:1;4895:106;4851:150;;5016:9;5011:1595;5035:10;5031:1;:14;5011:1595;;;5084:4;-1:-1:-1;;;;;5106:24:22;;5102:1353;;5187:216;5250:18;5291:52;;;5365:17;5383:1;5365:20;;;;;;;;;;;;;;5187:33;:216::i;:::-;5151:17;5169:1;5151:20;;;;;;;;;;;;;5150:253;;;;;;;;;5102:1353;;;-1:-1:-1;;;;;5428:24:22;;5424:1031;;5509:216;5572:18;5613:52;;;5687:17;5705:1;5687:20;;;;;;;5424:1031;5764:15;5821:216;5884:18;5925:52;;;5999:17;6017:1;5999:20;;;;;;;5821:216;5797:240;-1:-1:-1;5797:240:22;-1:-1:-1;6059:12:22;;6055:386;;6132:219;6199:18;-1:-1:-1;;;6322:7:22;6132:33;:219::i;:::-;6096:17;6114:1;6096:20;;;;;;;;;;;;;6095:256;;;;;;;;;6055:386;;;6421:1;6398:17;6416:1;6398:20;;;;;;;;;;;;;:24;;;;;6055:386;5424:1031;;6517:10;6516:11;:40;;;;6531:17;6549:1;6531:20;;;;;;;;;;;;;;6555:1;6531:25;6516:40;6512:84;;;6576:5;;;6512:84;-1:-1:-1;5047:3:22;;5011:1595;;;;4274:2338;;;;;;;;;:::o;3549:919:14:-;3770:34;3820:40;3837:10;3849;3820:16;:40::i;:::-;3870:8;3886:7;:18;;;3870:35;;3915:8;3931:3;-1:-1:-1;;;;;3931:7:14;;:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3974:24;;3915:26;;-1:-1:-1;3974:24:14;-1:-1:-1;;;;;4028:25:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4028:25:14;;4008:45;;4082:3;-1:-1:-1;;;;;4082:7:14;;:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;4068:23:14;:10;-1:-1:-1;;;;;4068:23:14;;;:50;;;;;4109:3;-1:-1:-1;;;;;4109:7:14;;:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;4095:23:14;:10;-1:-1:-1;;;;;4095:23:14;;;4068:50;4064:105;;;4134:24;;;;;4064:105;4184:9;4179:283;4203:10;4199:1;:14;4179:283;;;4234:17;4254:79;4269:7;4278:10;4290;4302:17;4320:1;4302:20;;;;;;;;;;;;;;4324:3;4329;4254:14;:79::i;:::-;4234:99;-1:-1:-1;4352:14:14;4348:58;;4386:5;;;4348:58;4442:9;4419:17;4437:1;4419:20;;;;;;;;;;;;;;;;;:32;-1:-1:-1;4215:3:14;;4179:283;;3549:919;;;;;;;:::o;4133:670:20:-;4497:258;;;4355:34;4497:258;;;;;;4461:335;;4497:258;4555:35;4566:10;4578:11;4555:35;;;;:::i;:::-;;;;;;;;;;;;;4497:258;;;;4635:12;4649:11;4624:37;;;;;;;;;:::i;:::-;;;;;;;;;;;;;4497:258;;;;4701:39;4497:258;;;4769:17;4461:22;:335::i;:::-;4454:342;4133:670;-1:-1:-1;;;;;4133:670:20:o;1936:1742:6:-;2153:13;2168:12;2182:34;2232:40;2249:10;2261;2232:16;:40::i;:::-;2303:24;;;-1:-1:-1;;;;;2357:25:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2357:25:6;-1:-1:-1;2409:13:6;;2400:55;;-1:-1:-1;;;2400:55:6;;2337:45;;-1:-1:-1;;;;;;2400:31:6;;;;:55;;2432:10;;2444;;2400:55;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2393:62;-1:-1:-1;2465:17:6;-1:-1:-1;;;;;2562:18:6;;;2558:420;;-1:-1:-1;2643:4:6;;-1:-1:-1;2608:10:6;2558:420;;;2694:13;;2685:55;;-1:-1:-1;;;2685:55:6;;-1:-1:-1;;;;;2685:31:6;;;;;;:55;;2717:10;;2729;;2685:55;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2678:62;-1:-1:-1;;;;;;2798:27:6;;2794:108;;2845:42;;;;2794:108;-1:-1:-1;2962:5:6;;-1:-1:-1;2927:10:6;2558:420;3038:4;-1:-1:-1;;;;;3032:27:6;;:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3027:103;;3077:42;;;;3027:103;3145:9;3140:532;3164:10;3160:1;:14;3140:532;;;3195:17;3215:268;3280:10;3292:4;3298:9;3309:4;:11;;;3269:52;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;3370:10;3382:4;3388:9;3399:4;:11;;;3359:52;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;3449:17;3467:1;3449:20;;;;;;;;;;;;;;3215:36;:268::i;:::-;3195:288;;3520:9;3497:17;3515:1;3497:20;;;;;;;;;;;;;:32;;;;;3597:17;3615:1;3597:20;;;;;;;;;;;;;;3621:1;3597:25;3593:69;;;3642:5;;;3593:69;-1:-1:-1;3176:3:6;;3140:532;;;;1936:1742;;;;;;;;;;:::o;1410:1411:16:-;1784:24;;1661:34;;1784:24;-1:-1:-1;;;;;1838:25:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1838:25:16;-1:-1:-1;1818:45:16;-1:-1:-1;;;;;;1931:25:16;;1927:80;;1972:24;;;1927:80;2022:9;2017:798;2041:10;2037:1;:14;2017:798;;;2073:15;2090:23;2133:11;-1:-1:-1;;;;;2133:22:16;851:5;2247:37;;;2310:10;2346:17;2389:10;2425:17;2443:1;2425:20;;;;;;;;;;;;;;2199:268;;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;2199:268:16;;;;;;;;;;;;;;-1:-1:-1;;;;;2199:268:16;-1:-1:-1;;;;;;2199:268:16;;;;;;;;;;2133:335;;;;2199:268;2133:335;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2072:396;;;;2482:17;2521:10;2517:94;;;2574:10;2563:33;;;;;;;;;;;;:::i;:::-;2551:45;;2517:94;2704:14;2700:58;;2738:5;;;;;2700:58;2795:9;2772:17;2790:1;2772:20;;;;;;;;;;;;;;;;;:32;-1:-1:-1;;;2053:3:16;;2017:798;;;;1410:1411;;;;;;;;:::o;1382:1063:13:-;1712:24;;1589:34;;1712:24;-1:-1:-1;;;;;1766:25:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1766:25:13;;1746:45;;1807:9;1802:637;1826:10;1822:1;:14;1802:637;;;1886:6;-1:-1:-1;;;;;1877:30:13;;940:5;1973:10;1985;1997:17;2015:1;1997:20;;;;;;;;;;;;;;1877:141;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1877:141:13;;;;;;;;;;;;:::i;:::-;;;1857:572;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2409:5;;;1857:572;2134:6;2111:17;2129:1;2111:20;;;;;;;;;;;;;:29;;;;;2216:17;2234:1;2216:20;;;;;;;;;;;;;;2240:1;2216:25;2212:77;;;2265:5;;;;;2212:77;2035:268;;;1838:3;;1802:637;;;;1382:1063;;;;;;;:::o;1214:988:23:-;1469:24;;1398:34;;1469:24;-1:-1:-1;;;;;1523:25:23;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1523:25:23;;1503:45;;1563:9;1558:638;1582:10;1578:1;:14;1558:638;;;1652:6;-1:-1:-1;;;;;1633:40:23;;846:5;1741:17;1759:1;1741:20;;;;;;;;;;;;;;1763:4;1633:135;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1633:135:23;;;;;;;;;;;;:::i;:::-;;;1613:573;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2166:5;;;1613:573;1873:7;1895:1;1881:4;:11;:15;1873:24;;;;;;;;;;;;;;1850:17;1868:1;1850:20;;;;;;;;;;;;;:47;;;;;1973:17;1991:1;1973:20;;;;;;;;;;;;;;1997:1;1973:25;1969:77;;;2022:5;;;1969:77;1785:275;1594:3;;1558:638;;;;1214:988;;;;;;:::o;1731:1130:5:-;2019:24;;1948:34;;2019:24;-1:-1:-1;;;;;2073:25:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2073:25:5;;2053:45;;2113:9;2108:747;2132:10;2128:1;:14;2108:747;;;2164:15;2181:23;2224:9;:21;;;-1:-1:-1;;;;;2224:32:5;1243:6;2346:9;:35;;;2407:12;2445:10;2481:17;2499:1;2481:20;;;;;;;;;;;;;;2298:225;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;2298:225:5;;;;;;;;;;;;;;-1:-1:-1;;;;;2298:225:5;-1:-1:-1;;;;;;2298:225:5;;;;;;;;;;2224:300;;;;2298:225;2224:300;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2163:361;;;;2538:17;2577:10;2573:94;;;2630:10;2619:33;;;;;;;;;;;;:::i;:::-;2607:45;;2573:94;2703:9;2680:17;2698:1;2680:20;;;;;;;;;;;;;:32;;;;;2780:17;2798:1;2780:20;;;;;;;;;;;;;;2804:1;2780:25;2776:69;;;2825:5;;;;;2776:69;-1:-1:-1;;;2144:3:5;;2108:747;;4509:2595:11;4840:16;;;;;4967;;;4981:1;4967:16;;;;;;;;;4706:17;;;;4981:1;4967:16;;;;4840;4967;;;;;-1:-1:-1;4967:16:11;4931:52;;5015:9;4993:16;5010:1;4993:19;;;;;;;;;;;;;;;;;:31;5034:28;5079:1;5065:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5065:16:11;;5034:47;;5110:4;:9;;;-1:-1:-1;;;;;5096:23:11;:10;-1:-1:-1;;;;;5096:23:11;;5092:2006;;;5183:289;;-1:-1:-1;;;5183:289:11;;-1:-1:-1;;;;;5183:29:11;;;;;931:5;;5183:289;;5301:10;;5337:34;;5397:16;;5439:11;;5183:289;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;5183:289:11;;;;;;;;;;;;:::i;:::-;;;5163:517;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5578:102;5163:517;;;5556:6;-1:-1:-1;5549:13:11;;-1:-1:-1;;;5549:13:11;5163:517;5092:2006;;;5714:4;:9;;;-1:-1:-1;;;;;5700:23:11;:10;-1:-1:-1;;;;;5700:23:11;;5696:1402;;;5787:289;;-1:-1:-1;;;5787:289:11;;-1:-1:-1;;;;;5787:29:11;;;;;931:5;;5787:289;;5905:10;;5941:34;;6001:16;;6043:11;;5787:289;;;:::i;5696:1402::-;6414:466;;-1:-1:-1;;;6414:466:11;;-1:-1:-1;;;;;6414:31:11;;;;;931:5;;6414:466;;6534:10;;6570:34;;6630:16;;6672:11;;6709:10;;6570:34;;6630:16;;6672:11;;6414:466;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;6414:466:11;;;;;;;;;;;;:::i;:::-;;;6394:694;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4509:2595;;;;;;;;;:::o;2047:1569:24:-;2247:27;2288:34;2347:35;2397:45;2416:6;-1:-1:-1;;;;;2416:14:24;;:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2434:4;2440:1;2397:18;:45::i;:::-;2347:95;;2487:17;:24;-1:-1:-1;;;;;2473:39:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2473:39:24;;2453:59;;2549:17;:24;-1:-1:-1;;;;;2537:37:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2522:52;;2590:9;2585:1025;2609:17;:24;2605:1;:28;2585:1025;;;2710:27;2751:20;2794:9;2789:584;2813:9;:16;2809:1;:20;2789:584;;;2854:24;2881:34;2896:4;2902:9;2912:1;2902:12;;;;;;;;;;;;;;2881:14;:34::i;:::-;2854:61;;2957:6;-1:-1:-1;;;;;2957:22:24;;1626:5;3048:11;3061:17;3079:1;3061:20;;;;;;;;;;;;;;2957:125;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2957:125:24;;;;;;;;-1:-1:-1;;2957:125:24;;;;;;;;;;;;:::i;:::-;;;2933:426;;;;;3193:9;3177:12;:25;3173:158;;3245:9;3230:24;;3297:11;3280:28;;3173:158;3107:242;2933:426;-1:-1:-1;2831:3:24;;2789:584;;;-1:-1:-1;3448:17:24;3444:61;;3485:5;;;;3444:61;3541:12;3518:17;3536:1;3518:20;;;;;;;;;;;;;:35;;;;;3585:14;3567:12;3580:1;3567:15;;;;;;;;;;;;;;;;;:32;-1:-1:-1;;2635:3:24;;2585:1025;;;;2047:1569;;;;;;;:::o;4265:2076:2:-;4597:24;;4477:34;;4554:11;;4597:24;-1:-1:-1;;;;;4651:25:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4651:25:2;-1:-1:-1;4691:24:2;;-1:-1:-1;;;4691:24:2;;4631:45;;-1:-1:-1;;;;;;4691:12:2;;;;;:24;;4704:10;;4691:24;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4690:25;:54;;;-1:-1:-1;4720:24:2;;-1:-1:-1;;;4720:24:2;;-1:-1:-1;;;;;4720:12:2;;;;;:24;;4733:10;;4720:24;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4719:25;4690:54;4686:109;;;4760:24;;;;4686:109;4805:30;;:::i;:::-;4875:27;;-1:-1:-1;;;4875:27:2;;-1:-1:-1;;;;;4875:15:2;;;;;:27;;4891:10;;4875:27;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4845:57;;4942:27;;-1:-1:-1;;;4942:27:2;;-1:-1:-1;;;;;4942:15:2;;;;;:27;;4958:10;;4942:27;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4912;;;:57;5008:38;;-1:-1:-1;;;5008:38:2;;-1:-1:-1;;;;;5008:26:2;;;;;:38;;5035:10;;5008:38;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4979:26;;;;:67;;;;5085:38;-1:-1:-1;;;5085:38:2;;-1:-1:-1;;;;;5085:26:2;;;;;:38;;5112:10;;5085:38;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;5056:9;:26;;:67;;;;;5153:4;-1:-1:-1;;;;;5153:15:2;;:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;5133;;;:37;5186:9;5181:1154;5205:10;5201:1;:14;5181:1154;;;5407:49;5413:9;:27;;;1127:1;1010:8;1120;;;;;;1132:5;1119:18;5407:5;:49::i;:::-;5384:17;5402:1;5384:20;;;;;;;;;;;;;;:72;5380:116;;;5476:5;;5380:116;5529:4;-1:-1:-1;;;;;5529:19:2;;840:5;5640:9;:27;;;5693:9;:26;;;5745:9;:27;;;5798:9;:26;;;5850:17;5868:1;5850:20;;;;;;;;;;;;;;5896:9;:17;;;5529:406;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5529:406:2;;;;;;;;-1:-1:-1;;5529:406:2;;;;;;;;;;;;:::i;:::-;;;5509:816;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6305:5;;;5509:816;6030:6;6007:17;6025:1;6007:20;;;;;;;;;;;;;:29;;;;;6112:17;6130:1;6112:20;;;;;;;;;;;;;;6136:1;6112:25;6108:77;;;6161:5;;;6108:77;5952:247;5217:3;;5181:1154;;4028:1924:24;4227:27;4268:34;4327:35;4377:45;4396:6;-1:-1:-1;;;;;4396:14:24;;:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4377:45;4327:95;;4432:36;4471:23;4489:4;4471:17;:23::i;:::-;4432:62;;4539:17;:24;-1:-1:-1;;;;;4525:39:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4525:39:24;;4505:59;;4601:17;:24;-1:-1:-1;;;;;4589:37:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4574:52;;4642:9;4637:1309;4661:17;:24;4657:1;:28;4637:1309;;;4762:27;4803:21;4847:9;4842:865;4866:9;:16;4862:1;:20;4842:865;;;4972:24;4999:118;5035:12;5069:30;5086:9;5096:1;5086:12;;;;;;;;;;;;;;5069:16;:30::i;:::-;4999:14;:118::i;:::-;4972:145;;5159:6;-1:-1:-1;;;;;5159:23:24;;1626:5;5251:11;5264:17;5282:1;5264:20;;;;;;;;;;;;;;5159:126;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5159:126:24;;;;;;;;-1:-1:-1;;5159:126:24;;;;;;;;;;;;:::i;:::-;;;5135:558;;;;;5381:18;;;:49;;;5420:10;5403:13;:27;;5381:49;5377:289;;;5474:10;5458:26;;5609:34;5624:4;5630:9;5640:1;5630:12;;;;;;;5609:34;5592:51;;5377:289;5310:374;5135:558;-1:-1:-1;4884:3:24;;4842:865;;;-1:-1:-1;5782:18:24;5778:62;;5820:5;;;;5778:62;5876:13;5853:17;5871:1;5853:20;;;;;;;;;;;;;:36;;;;;5921:14;5903:12;5916:1;5903:15;;;;;;;;;;;;;;;;;:32;-1:-1:-1;;4687:3:24;;4637:1309;;;;4028:1924;;;;;;;;:::o;2751:583:19:-;3046:240;;;2953:34;3046:240;;;;;;3010:317;;3046:240;3104:28;3115:10;3127:4;3104:28;;;;:::i;:::-;;;;;;;;;;;;;3046:240;;;;3177:10;3189:4;3166:28;;;;;;;;;:::i;:::-;;;;;;;;;;;;;3046:240;;;;3234:37;3046:240;;;3300:17;3010:22;:317::i;5648:955:17:-;5875:47;5971:119;6023:6;6043:15;6072:8;5971:38;:119::i;:::-;5938:152;;6231:9;6226:371;6250:6;:13;6246:1;:17;6226:371;;;6288:30;6319:1;6288:33;;;;;;;;;;;;;;6325:1;6288:38;6284:303;;6382:190;6435:30;6466:1;6435:33;;;;;;;;;;;;;;6490:6;6497:1;6490:9;;;;;;;;;;;;;;:21;;;-1:-1:-1;;;;;6382:190:17;6533:6;6540:1;6533:9;;;;;;;;;;;;;;:21;;;-1:-1:-1;;;;;6382:190:17;:31;:190::i;:::-;6346:30;6377:1;6346:33;;;;;;;;;;;;;:226;;;;;6284:303;6265:3;;6226:371;;2119:474:8;2200:32;2280:9;-1:-1:-1;;;;;2262:35:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;2248:49;;2312:9;2307:280;2327:21;;;2307:280;;2394:4;2369:11;2381:1;2369:14;;;;;;;;;;;;;;;;;;;:29;;;:22;;:29;2416:9;;2426:1;2416:12;;;;;;;;;;;;;;;;;;:::i;:::-;:24;2412:71;;-1:-1:-1;2412:71:8;;2460:8;;2412:71;2552:4;2563:9;;2573:1;2563:12;;;;;;;;;;;;;;;;;;:::i;:::-;2544:32;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2497:11;2509:1;2497:14;;;;;;;;;;;;;;:22;;2521:11;2533:1;2521:14;;;;;;;;;;;;;;;;;;2496:80;;;;;;;;;2307:280;2350:3;;2307:280;;;;2119:474;;;;:::o;946:381:25:-;1049:25;1115:6;:13;-1:-1:-1;;;;;1101:28:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1101:28:25;;1090:39;;1144:9;1139:182;1164:6;:13;1159:1;:18;1139:182;;1225:19;-1:-1:-1;;;;;1212:32:25;:6;1219:1;1212:9;;;;;;;;;;;;;;-1:-1:-1;;;;;1212:32:25;;:98;;1284:26;:6;1291:1;1284:9;;;;;;;;;;;;;;-1:-1:-1;;;;;1284:24:25;;:26::i;:::-;1212:98;;;1263:2;1212:98;1198:112;;:8;1207:1;1198:11;;;;;;;;;;;;;;;;;:112;1179:3;;1139:182;;;;946:381;;;:::o;3416:313:4:-;3636:21;3659;3682:34;3416:313;;;;;;;;:::o;4474:920:14:-;4694:34;4744:40;4761:10;4773;4744:16;:40::i;:::-;4794:8;4810:7;:18;;;4794:35;;4839:8;4855:3;-1:-1:-1;;;;;4855:7:14;;:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4897:24;;4839:26;;-1:-1:-1;4897:24:14;-1:-1:-1;;;;;4951:25:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4951:25:14;;4931:45;;5004:3;-1:-1:-1;;;;;5004:7:14;;:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;4990:23:14;:10;-1:-1:-1;;;;;4990:23:14;;;:50;;;;;5031:3;-1:-1:-1;;;;;5031:7:14;;:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;5017:23:14;:10;-1:-1:-1;;;;;5017:23:14;;;4990:50;4986:105;;;5056:24;;;;;4986:105;5106:9;5101:286;5125:10;5121:1;:14;5101:286;;;5156:18;5177:78;5191:7;5200:10;5212;5224:17;5242:1;5224:20;;;;;;;;;;;;;;5246:3;5251;5177:13;:78::i;:::-;5156:99;-1:-1:-1;5274:15:14;5270:59;;5309:5;;;5270:59;5366:10;5343:17;5361:1;5343:20;;;;;;;;;;;;;;;;;:33;-1:-1:-1;5137:3:14;;5101:286;;1621:2080:20;1844:34;2006:30;2157:11;:23;;;-1:-1:-1;;;;;2148:44:20;;2201:10;2193:19;;2148:65;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2048:23;;2039:65;;-1:-1:-1;;;2039:65:20;;-1:-1:-1;;;;;2039:44:20;;;;;;:65;;2084:19;;;;;2039:65;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:174;2006:207;;2230:16;2259:11;:23;;;-1:-1:-1;;;;;2250:47:20;;2306:10;2298:19;;2250:68;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2223:95;;;;;2385:8;2382:2;:11;2377:2;:17;2353:22;:42;;;;;2427:24;;2353:42;;;;-1:-1:-1;2427:24:20;-1:-1:-1;;;;;2481:25:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2481:25:20;;2461:45;;2521:9;2516:1179;2540:10;2536:1;:14;2516:1179;;;2572:15;2589:23;2632:11;:23;;;-1:-1:-1;;;;;2632:34:20;1179:5;2758:11;:37;;;2821:12;2859:10;2895:17;2913:1;2895:20;;;;;;;;;;;;;;2710:227;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;2710:227:20;;;;;;;;;;;;;;-1:-1:-1;;;;;2710:227:20;-1:-1:-1;;;;;;2710:227:20;;;;;;;;;;2632:306;;;;2710:227;2632:306;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2571:367;;;;2952:17;2991:10;2987:94;;;3044:10;3033:33;;;;;;;;;;;;:::i;:::-;3021:45;;2987:94;3191:22;3178:9;:35;3174:378;;3334:1;3317:127;3341:10;3337:1;:14;3317:127;;;3403:22;3380:17;3398:1;3380:20;;;;;;;;;;;;;;;;;:45;3353:3;;3317:127;;;;3461:5;;;;;3174:378;3528:9;3505:17;3523:1;3505:20;;;;;;;;;;;;;:32;;;;;3620:17;3638:1;3620:20;;;;;;;;;;;;;;3644:1;3620:25;3616:69;;;3665:5;;;;;3616:69;-1:-1:-1;;;2552:3:20;;2516:1179;;888:1649:21;1070:23;;:::i;:::-;1107:24;;:::i;:::-;1145:17;;;1232:596;1257:13;:20;1252:1;:25;1232:596;;1298:71;1354:2;1328:13;1342:1;1328:16;;;;;;;;;;;;;;:23;:28;1358:10;1298:13;1312:1;1298:16;;;;;;;;;;;;;;:29;;:71;;;;;:::i;:::-;1384:15;1401:23;1436:4;-1:-1:-1;;;;;1428:18:21;1447:13;1461:1;1447:16;;;;;;;;;;;;;;1428:36;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1383:81;;;;1482:10;1478:340;;;1512:14;1529:46;1572:2;1552:10;:17;:22;1529:10;:22;;:46;;;;:::i;:::-;1512:63;;1606:23;1597:6;:32;1593:211;;;1707:24;;;1753:19;;;:32;;;1679:6;-1:-1:-1;1679:6:21;1593:211;1478:340;;-1:-1:-1;;1279:3:21;;1232:596;;;-1:-1:-1;1841:28:21;1837:98;;1885:39;;;1837:98;1949:9;1944:587;1969:14;:21;1964:1;:26;1944:587;;2011:86;2069:2;2042:14;2057:1;2042:17;;;;;;;;;;;;;;:24;:29;2073:23;2011:14;2026:1;2011:17;;;;;;;:86;2112:15;2129:23;2164:4;-1:-1:-1;;;;;2156:18:21;2175:14;2190:1;2175:17;;;;;;;;;;;;;;2156:37;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2111:82;;;;2211:10;2207:314;;;2241:14;2258:46;2301:2;2281:10;:17;:22;2258:10;:22;;:46;;;;:::i;:::-;2241:63;;2335:9;2326:6;:18;2322:185;;;2408:25;;;2455:20;;;:33;;;2380:6;-1:-1:-1;2380:6:21;2322:185;2207:314;;-1:-1:-1;;1992:3:21;;1944:587;;;;888:1649;;;;;;;;;:::o;3287:1650:5:-;3557:34;;;;3503;;-1:-1:-1;;;;;;3557:47:5;3553:510;;3735:268;;;;;;;;;3695:357;;3735:268;3797:33;3808:10;3820:9;3797:33;;;;:::i;:::-;;;;;;;;;;;;;3735:268;;;;3879:12;3893:9;3868:35;;;;;;;;;:::i;:::-;;;;;;;;;;;;;3735:268;;;;3947:37;3735:268;;;4021:17;3695:22;:357::i;:::-;3688:364;;;;3553:510;4093:24;;;-1:-1:-1;;;;;4147:25:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4147:25:5;;4127:45;;4187:9;4182:749;4206:10;4202:1;:14;4182:749;;;4238:15;4255:23;4298:9;:21;;;-1:-1:-1;;;;;4298:32:5;1243:6;4420:9;:34;;;4480:12;4518:10;4554:17;4572:1;4554:20;;;;;;;;;;;;;;4372:224;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;4372:224:5;;;;;;;;;;;;;;-1:-1:-1;;;;;4372:224:5;-1:-1:-1;;;;;;4372:224:5;;;;;;;;;;4298:299;;;;4372:224;4298:299;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4237:360;;;;4611:18;4651:10;4647:95;;;4705:10;4694:33;;;;;;;;;;;;:::i;:::-;4681:46;;4647:95;4778:10;4755:17;4773:1;4755:20;;;;;;;;;;;;;:33;;;;;4856:17;4874:1;4856:20;;;;;;;;;;;;;;4880:1;4856:25;4852:69;;;4901:5;;;;;4852:69;-1:-1:-1;;;4218:3:5;;4182:749;;1764:2076:2;2097:24;;1977:34;;2054:11;;2097:24;-1:-1:-1;;;;;2151:25:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2151:25:2;-1:-1:-1;2191:24:2;;-1:-1:-1;;;2191:24:2;;2131:45;;-1:-1:-1;;;;;;2191:12:2;;;;;:24;;2204:10;;2191:24;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2190:25;:54;;;-1:-1:-1;2220:24:2;;-1:-1:-1;;;2220:24:2;;-1:-1:-1;;;;;2220:12:2;;;;;:24;;2233:10;;2220:24;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2219:25;2190:54;2186:109;;;2260:24;;;;2186:109;2305:30;;:::i;:::-;2375:27;;-1:-1:-1;;;2375:27:2;;-1:-1:-1;;;;;2375:15:2;;;;;:27;;2391:10;;2375:27;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2345:57;;2442:27;;-1:-1:-1;;;2442:27:2;;-1:-1:-1;;;;;2442:15:2;;;;;:27;;2458:10;;2442:27;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2412;;;:57;2508:38;;-1:-1:-1;;;2508:38:2;;-1:-1:-1;;;;;2508:26:2;;;;;:38;;2535:10;;2508:38;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2479:26;;;;:67;;;;2585:38;-1:-1:-1;;;2585:38:2;;-1:-1:-1;;;;;2585:26:2;;;;;:38;;2612:10;;2585:38;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2556:9;:26;;:67;;;;;2653:4;-1:-1:-1;;;;;2653:15:2;;:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2633;;;:37;2686:9;2681:1153;2705:10;2701:1;:14;2681:1153;;;2913:27;;2907:48;;1064:8;2907:5;:48::i;:::-;2884:17;2902:1;2884:20;;;;;;;;;;;;;;:71;2880:115;;;2975:5;;2880:115;3028:4;-1:-1:-1;;;;;3028:19:2;;840:5;3139:9;:27;;;3192:9;:26;;;3244:9;:27;;;3297:9;:26;;;3349:17;3367:1;3349:20;;;;;;;;;;;;;;3395:9;:17;;;3028:406;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3028:406:2;;;;;;;;-1:-1:-1;;3028:406:2;;;;;;;;;;;;:::i;:::-;;;3008:816;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3529:6;3506:17;3524:1;3506:20;;;;;;;;;;;;;:29;;;;;3611:17;3629:1;3611:20;;;;;;;;;;;;;;3635:1;3611:25;3607:77;;;3660:5;;;3607:77;3451:247;2717:3;;2681:1153;;6743:1029:17;6969:27;;7016:23;;:58;;;;;;;;;:132;;;-1:-1:-1;7117:31:17;7090:23;;:58;;;;;;;;;7016:132;:170;;;-1:-1:-1;7164:17:17;;;;-1:-1:-1;;;;;7164:22:17;;7016:170;:208;;;-1:-1:-1;7202:17:17;;;;-1:-1:-1;;;;;7202:22:17;;7016:208;7012:255;;;-1:-1:-1;7255:1:17;7248:8;;7012:255;7291:36;;:::i;:::-;7341;7391:21;7425:8;-1:-1:-1;;;;;7425:35:17;;7461:5;7468:9;7425:53;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;7277:201;;-1:-1:-1;7277:201:17;-1:-1:-1;7277:201:17;-1:-1:-1;7528:30:17;7508:9;:16;;;:50;;;;;;;;;;:85;;;;7577:16;7576:17;7508:85;:140;;;-1:-1:-1;7611:16:17;;-1:-1:-1;;;;;7611:37:17;;7508:140;7489:207;;;7684:1;7677:8;;;;;;;7489:207;-1:-1:-1;;;;;;7728:37:17;;-1:-1:-1;;6743:1029:17;;;;;;:::o;3464:1039:11:-;3689:17;3708;3727:34;3777:40;3794:10;3806;3777:16;:40::i;:::-;3840:47;3858:4;3864:10;3876;3840:17;:47::i;:::-;3828:59;-1:-1:-1;3901:16:11;3897:90;;3933:43;;3897:90;4008:61;;-1:-1:-1;;;4008:61:11;;:4;;:20;;:61;;4029:4;;4035:9;;4046:10;;4058;;4008:61;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;4008:61:11;;;;;;;;;;;;:::i;:::-;3996:4;:9;;:73;;;;4086:4;:9;;;4079:16;;4126:317;4162:240;;;;;;;;4231:10;4243:4;4220:28;;;;;;;;;:::i;:::-;;;;;;;;;;;;;4162:240;;;;4293:10;4305:4;4282:28;;;;;;;;;:::i;:::-;;;;;;;;;;;;;4162:240;;;;4350:37;4162:240;;;4416:17;4126:22;:317::i;:::-;4106:337;;3464:1039;;;;;;;;:::o;2424:1290:15:-;2652:7;2714:15;2775:8;-1:-1:-1;;;;;2756:34:15;;2791:19;2812;2756:76;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2714:128;-1:-1:-1;;;;;;2905:27:15;;2901:66;;2955:1;2948:8;;;;;2901:66;2976:19;-1:-1:-1;;;;;2998:33:15;;;:144;;3082:60;;-1:-1:-1;;;3082:60:15;;-1:-1:-1;;;;;3082:45:15;;;;;:60;;3136:4;;3082:60;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2998:144;;;3054:4;-1:-1:-1;;;;;3046:21:15;;2998:144;2976:166;;3298:16;3284:11;:30;3280:69;;;3337:1;3330:8;;;;;;3280:69;3374:133;;-1:-1:-1;;;3374:133:15;;-1:-1:-1;;;;;3374:14:15;;;;;940:5;;3374:133;;3448:19;;3469;;3490:16;;3374:133;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3374:133:15;;;;;;;;-1:-1:-1;;3374:133:15;;;;;;;;;;;;:::i;:::-;;;3358:350;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3696:1;3689:8;;;;;;;3358:350;3574:6;-1:-1:-1;3567:13:15;;-1:-1:-1;;3567:13:15;4281:1535:3;4497:34;4547:40;4564:10;4576;4547:16;:40::i;:::-;4639:14;;;;4693:15;;;4706:1;4693:15;;;4664:26;4693:15;;;;;;;;;;;;;;;;;;-1:-1:-1;4693:15:3;4664:44;;4741:10;4718;4729:1;4718:13;;;;;;;;;;;;;:34;-1:-1:-1;;;;;4718:34:3;;;-1:-1:-1;;;;;4718:34:3;;;;;4785:10;4762;4773:1;4762:13;;;;;;;;-1:-1:-1;;;;;4762:34:3;;;:13;;;;;;;;;;;:34;4828:24;;;-1:-1:-1;;;;;4882:25:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4882:25:3;;4862:45;;4917:48;;:::i;:::-;4980:18;:16;:18::i;:::-;4917:81;;5014:9;5009:801;5033:10;5029:1;:14;5009:801;;;5064:49;5132:48;5149:8;5159:17;5177:1;5159:20;;;;;;;5132:48;5317:91;;-1:-1:-1;;;5317:91:3;;5064:116;;-1:-1:-1;;;;;;5317:20:3;;;;;:91;;5338:35;;5064:116;;5386:10;;5398:9;;5317:91;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;5317:91:3;;;;;;;;;;;;:::i;:::-;;;5195:605;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5473:21;5497:7;5505:1;5497:10;;;;;;;;;;;;;;5473:34;;5547:1;5529:14;:19;5525:71;;5572:5;;;;;5525:71;5644:14;5613:17;5631:1;5613:20;;;;;;;;;;;;;:46;;;;;5421:253;;-1:-1:-1;5045:3:3;;5009:801;;1540:1205:12;1889:24;;1766:34;;1889:24;-1:-1:-1;;;;;1943:25:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1943:25:12;;1923:45;;1984:9;1979:760;2003:10;1999:1;:14;1979:760;;;2073:15;-1:-1:-1;;;;;2054:48:12;;1065:5;2208:10;2260;2297:17;2315:1;2297:20;;;;;;;;;;;;;;2054:285;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2054:285:12;;;;;;;;-1:-1:-1;;2054:285:12;;;;;;;;;;;;:::i;:::-;;;2034:695;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2434:6;2411:17;2429:1;2411:20;;;;;;;;;;;;;:29;;;;;2516:17;2534:1;2516:20;;;;;;;;;;;;;;2540:1;2516:25;2512:77;;;2565:5;;;2512:77;2356:247;2015:3;;1979:760;;2025:1175:7;2257:13;2272:12;2286:34;2336:40;2353:10;2365;2336:16;:40::i;:::-;2408:24;;;-1:-1:-1;;;;;2462:25:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2462:25:7;;2442:45;;2517:60;2536:8;2546:6;2554:10;2566;2517:18;:60::i;:::-;2498:79;-1:-1:-1;2498:79:7;-1:-1:-1;;;;;;2591:18:7;;2587:91;;2625:42;;;2587:91;2693:9;2688:506;2712:10;2708:1;:14;2688:506;;;2743:17;2763:242;2830:10;2842:4;2848:8;2819:38;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;2906:10;2918:4;2924:8;2895:38;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;2971:17;2989:1;2971:20;;;;;;;;;;;;;;2763:38;:242::i;:::-;2743:262;;3042:9;3019:17;3037:1;3019:20;;;;;;;;;;;;;:32;;;;;3119:17;3137:1;3119:20;;;;;;;;;;;;;;3143:1;3119:25;3115:69;;;3164:5;;;3115:69;-1:-1:-1;2724:3:7;;2688:506;;;;2025:1175;;;;;;;;;;;:::o;1325:1038:9:-;1532:34;1582:40;1599:10;1611;1582:16;:40::i;:::-;1653:24;;;-1:-1:-1;;;;;1707:25:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1707:25:9;;1687:45;;1747:9;1742:615;1766:10;1762:1;:14;1742:615;;;1826:6;-1:-1:-1;;;;;1817:29:9;;884:6;1912:10;1924;1936:17;1954:1;1936:20;;;;;;;;;;;;;;1817:140;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1817:140:9;;;;;;;;-1:-1:-1;;1817:140:9;;;;;;;;;;;;:::i;:::-;;;1797:550;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2052:6;2029:17;2047:1;2029:20;;;;;;;;;;;;;:29;;;;;2134:17;2152:1;2134:20;;;;;;;;;;;;;;2158:1;2134:25;2130:77;;;2183:5;;;2130:77;1974:247;1778:3;;1742:615;;1432:986:15;1643:15;1660:34;1710:40;1727:10;1739;1710:16;:40::i;:::-;1781:24;;;-1:-1:-1;;;;;1835:25:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1835:25:15;;1815:45;;1876:9;1871:431;1895:10;1891:1;:14;1871:431;;;1926:17;1946:167;1997:8;2023:10;2051;2079:17;2097:1;2079:20;;;;;;;;;;;;;;1946:33;:167::i;:::-;1926:187;;2150:9;2127:17;2145:1;2127:20;;;;;;;;;;;;;:32;;;;;2227:17;2245:1;2227:20;;;;;;;;;;;;;;2251:1;2227:25;2223:69;;;2272:5;;;2223:69;-1:-1:-1;1907:3:15;;1871:431;;;-1:-1:-1;2343:58:15;;-1:-1:-1;;;2343:58:15;;-1:-1:-1;;;;;2343:34:15;;;;;:58;;2378:10;;2390;;2343:58;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2312:99;;1432:986;;;;;;;;:::o;2865:593:13:-;3164:246;;;3071:34;3164:246;;;;;;3128:323;;3164:246;3222:30;3233:10;3245:6;3222:30;;;;:::i;:::-;;;;;;;;;;;;;3164:246;;;;3297:10;3309:6;3286:30;;;;;;;;;:::i;:::-;;;;;;;;;;;;;3164:246;;;;3356:39;3164:246;;;3424:17;3128:22;:323::i;1333:415:25:-;1449:25;1515:6;:13;-1:-1:-1;;;;;1501:28:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1501:28:25;;1490:39;;1544:9;1539:203;1564:6;:13;1559:1;:18;1539:203;;1625:19;-1:-1:-1;;;;;1612:32:25;:6;1619:1;1612:9;;;;;;;;;;;;;;-1:-1:-1;;;;;1612:32:25;;:119;;1697:34;1723:7;1697:6;1704:1;1697:9;;;;;;;;;;;;;;-1:-1:-1;;;;;1697:25:25;;;:34;;;;:::i;:::-;1612:119;;;1663:7;-1:-1:-1;;;;;1663:15:25;;1612:119;1598:8;1607:1;1598:11;;;;;;;;;;;;;;;;;:133;1579:3;;1539:203;;3202:653:12;3533:274;;;3427:34;3533:274;;;;;;3497:351;;3533:274;3591:39;3602:10;3614:15;3591:39;;;;:::i;:::-;;;;;;;;;;;;;3533:274;;;;3675:10;3687:15;3664:39;;;;;;;;;:::i;:::-;;;;;;;;;;;;;3533:274;;;;3743:49;3533:274;;;3821:17;3497:22;:351::i;1572:2343:22:-;1779:34;1829:40;1846:10;1858;1829:16;:40::i;:::-;1900:24;;;-1:-1:-1;;;;;1954:25:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1954:25:22;-1:-1:-1;1934:45:22;-1:-1:-1;1990:41:22;-1:-1:-1;;;;;2034:24:22;;;:106;;2101:39;2121:6;2129:10;2101:19;:39::i;:::-;2034:106;;;2096:1;2034:106;1990:150;-1:-1:-1;2150:41:22;-1:-1:-1;;;;;2194:24:22;;;:106;;2261:39;2281:6;2289:10;2261:19;:39::i;:::-;2194:106;;;2256:1;2194:106;2150:150;;2315:9;2310:1599;2334:10;2330:1;:14;2310:1599;;;2383:4;-1:-1:-1;;;;;2405:24:22;;2401:1357;;2486:215;2549:18;2590:51;;;2663:17;2681:1;2663:20;;;;;;;2486:215;2450:17;2468:1;2450:20;;;;;;;;;;;;;2449:252;;;;;;;;;2401:1357;;;-1:-1:-1;;;;;2726:24:22;;2722:1036;;2807:215;2870:18;2911:51;;;2984:17;3002:1;2984:20;;;;;;;2722:1036;3061:17;3122:215;3185:18;3226:51;;;3299:17;3317:1;3299:20;;;;;;;3122:215;3096:241;-1:-1:-1;3096:241:22;-1:-1:-1;3359:14:22;;3355:389;;3434:220;3501:18;-1:-1:-1;;;3623:9:22;3434:33;:220::i;:::-;3398:17;3416:1;3398:20;;;;;;;;;;;;;3397:257;;;;;;;;;3355:389;;;3724:1;3701:17;3719:1;3701:20;;;;;;;;;;;;;:24;;;;;3355:389;2722:1036;;3820:10;3819:11;:40;;;;3834:17;3852:1;3834:20;;;;;;;;;;;;;;3858:1;3834:25;3819:40;3815:84;;;3879:5;;;3815:84;-1:-1:-1;2346:3:22;;2310:1599;;2553:972:23;2807:24;;2736:34;;2807:24;-1:-1:-1;;;;;2861:25:23;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2861:25:23;;2841:45;;2901:9;2896:623;2920:10;2916:1;:14;2896:623;;;2990:6;-1:-1:-1;;;;;2971:39:23;;846:5;3078:17;3096:1;3078:20;;;;;;;;;;;;;;3100:4;2971:134;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;2971:134:23;;;;;;;;;;;;:::i;:::-;;;2951:558;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3210:7;3218:1;3210:10;;;;;;;;;;;;;;3187:17;3205:1;3187:20;;;;;;;;;;;;;:33;;;;;3296:17;3314:1;3296:20;;;;;;;;;;;;;;3320:1;3296:25;3292:77;;;3345:5;;;3292:77;3122:261;2932:3;;2896:623;;2788:1037:9;2994:34;3044:40;3061:10;3073;3044:16;:40::i;:::-;3115:24;;;-1:-1:-1;;;;;3169:25:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3169:25:9;;3149:45;;3209:9;3204:615;3228:10;3224:1;:14;3204:615;;;3288:6;-1:-1:-1;;;;;3279:29:9;;884:6;3374:10;3386;3398:17;3416:1;3398:20;;;;;;;;;;;;;;3279:140;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3279:140:9;;;;;;;;-1:-1:-1;;3279:140:9;;;;;;;;;;;;:::i;:::-;;;3259:550;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3514:6;3491:17;3509:1;3491:20;;;;;;;;;;;;;:29;;;;;3596:17;3614:1;3596:20;;;;;;;;;;;;;;3620:1;3596:25;3592:77;;;3645:5;;;3592:77;3436:247;3240:3;;3204:615;;1770:1175:11;1996:17;2015;2034:34;2084:40;2101:10;2113;2084:16;:40::i;:::-;2146:47;2164:4;2170:10;2182;2146:17;:47::i;:::-;2134:59;-1:-1:-1;2207:16:11;2203:90;;2239:43;;2203:90;2314:61;;-1:-1:-1;;;2314:61:11;;:4;;:20;;:61;;2335:4;;2341:9;;2352:10;;2364;;2314:61;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;2314:61:11;;;;;;;;;;;;:::i;:::-;2302:9;;;:73;;;2433:24;;2302:73;;-1:-1:-1;2433:24:11;-1:-1:-1;;;;;2487:25:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2487:25:11;;2467:45;;2527:9;2522:417;2546:10;2542:1;:14;2522:417;;;2577:13;2593:4;-1:-1:-1;;;;;2593:31:11;;2642:4;2664:10;2692;2720:17;2738:1;2720:20;;;;;;;;;;;;;;2593:161;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2577:177;;2791:5;2768:17;2786:1;2768:20;;;;;;;;;;;;;:28;;;;;2864:17;2882:1;2864:20;;;;;;;;;;;;;;2888:1;2864:25;2860:69;;;2909:5;;;2860:69;-1:-1:-1;2558:3:11;;2522:417;;;;1770:1175;;;;;;;;;:::o;3797:1026:7:-;4028:13;4043:12;4057:34;4107:40;4124:10;4136;4107:16;:40::i;:::-;4176:60;4195:8;4205:6;4213:10;4225;4176:18;:60::i;:::-;4157:79;-1:-1:-1;4157:79:7;-1:-1:-1;;;;;;4250:18:7;;4246:91;;4284:42;;4246:91;4367:24;;;-1:-1:-1;;;;;4421:25:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4421:25:7;-1:-1:-1;4513:262:7;;;;;;;;;4401:45;;-1:-1:-1;4477:339:7;;4513:262;4571:39;4582:10;4594:4;4600:9;;4571:39;;;;:::i;:::-;;;;;;;;;;;;;4513:262;;;;4655:10;4667:4;4673:8;4644:38;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;4513:262;;;;4722:38;4513:262;;;4789:17;4477:22;:339::i;:::-;4457:359;;3797:1026;;;;;;;;;;:::o;4221:1750:6:-;4437:13;4452:12;4466:34;4516:40;4533:10;4545;4516:16;:40::i;:::-;4587:24;;;-1:-1:-1;;;;;4641:25:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4641:25:6;-1:-1:-1;4784:13:6;;4775:55;;-1:-1:-1;;;4775:55:6;;4621:45;;-1:-1:-1;;;;;;4775:31:6;;;;:55;;4807:10;;4819;;4775:55;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4768:62;-1:-1:-1;4840:17:6;-1:-1:-1;;;;;4937:18:6;;;4933:485;;-1:-1:-1;5018:4:6;;-1:-1:-1;4983:10:6;4933:485;;;5134:13;;5125:55;;-1:-1:-1;;;5125:55:6;;-1:-1:-1;;;;;5125:31:6;;;;;;:55;;5157:10;;5169;;5125:55;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;5118:62;-1:-1:-1;;;;;;5238:27:6;;5234:108;;5285:42;;;;5234:108;-1:-1:-1;5402:5:6;;-1:-1:-1;5367:10:6;4933:485;5478:4;-1:-1:-1;;;;;5472:27:6;;:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;5467:103;;5517:42;;;;5467:103;5600:364;5636:287;;;;;;;;5705:10;5717:4;5723:9;5734:4;:11;;;5694:52;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;5636:287;;;;5791:10;5803:4;5809:9;5820:4;:11;;;5780:52;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;5636:287;;;;5872:36;5636:287;;;5937:17;5600:22;:364::i;:::-;5580:384;;4221:1750;;;;;;;;;;:::o;1754:435:25:-;1889:27;1959:6;:13;-1:-1:-1;;;;;1945:28:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1945:28:25;;1932:41;;1988:9;1983:200;2008:6;:13;2003:1;:18;1983:200;;2071:19;-1:-1:-1;;;;;2058:32:25;:6;2065:1;2058:9;;;;;;;;;;;;;;-1:-1:-1;;;;;2058:32:25;;:114;;2129:43;2155:7;2164;2129:6;2136:1;2129:9;;;;;;;;;;;;;;-1:-1:-1;;;;;2129:25:25;;;:43;;;;;:::i;:::-;2058:114;;;2109:1;2058:114;2042:10;2053:1;2042:13;;;;;;;;;;;;;;;;;:130;2023:3;;1983:200;;1440:887:19;1766:24;;1643:34;;1766:24;-1:-1:-1;;;;;1820:25:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1820:25:19;;1800:45;;1861:9;1856:465;1880:10;1876:1;:14;1856:465;;;1938:4;-1:-1:-1;;;;;1931:27:19;;994:5;2024:10;2036;2048:17;2066:1;2048:20;;;;;;;;;;;;;;1931:138;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1931:138:19;;;;;;;;-1:-1:-1;;1931:138:19;;;;;;;;;;;;:::i;:::-;;;1911:400;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2164:6;2141:17;2159:1;2141:20;;;;;;;;;;;;;:29;;;;;2086:99;1892:3;;1856:465;;7885:1337:11;8100:24;8191:4;:9;;;:16;8211:1;8191:21;8187:60;;;-1:-1:-1;8235:1:11;8228:8;;8187:60;8292:4;:17;;;-1:-1:-1;;;;;8273:61:11;;931:5;8425:4;:9;;;-1:-1:-1;;;;;8411:23:11;:10;-1:-1:-1;;;;;8411:23:11;;:56;;8457:10;8411:56;;;1035:42;8411:56;8503:4;:9;;;-1:-1:-1;;;;;8489:23:11;:10;-1:-1:-1;;;;;8489:23:11;;:56;;8535:10;8489:56;;;1035:42;8489:56;8567:16;8605:1;8635:4;:9;;;8273:389;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;8273:389:11;;;;;;;;-1:-1:-1;;8273:389:11;;;;;;;;;;;;:::i;:::-;;;8257:959;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9204:1;9197:8;;;;;8257:959;8720:26;8749:29;8767:10;8749:17;:29::i;:::-;8720:58;;;;8792:26;8821:29;8839:10;8821:17;:29::i;:::-;8792:58;;;;9043:8;9006:18;9000:2;:24;8963:18;8957:2;:24;8922:16;8899:4;:39;:82;:125;;;;;;:152;;;;;;8864:187;;9065:23;;;;;4189:904:15;4399:15;4416:34;4466:40;4483:10;4495;4466:16;:40::i;:::-;4537:24;;;-1:-1:-1;;;;;4591:25:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4591:25:15;;4571:45;;4647:329;4683:252;;;;;;;;4752:8;4762:10;4741:32;;;;;;;;;:::i;:::-;;;;;;;;;;;;;4683:252;;;;4818:8;4828:10;4807:32;;;;;;;;;:::i;:::-;;;;;;;;;;;;;4683:252;;;;4879:41;4683:252;;;4949:17;4647:22;:329::i;:::-;5018:58;;-1:-1:-1;;;5018:58:15;;4627:349;;-1:-1:-1;;;;;;5018:34:15;;;;;:58;;5053:10;;5065;;5018:58;;;:::i;2543:1848:21:-;2723:23;;:::i;:::-;2760:24;;:::i;:::-;-1:-1:-1;;2862:2:21;2798:18;2930:673;2955:14;:21;2950:1;:26;2930:673;;2997:72;3055:2;3028:14;3043:1;3028:17;;;;;;;;;;;;;;:24;:29;3059:9;2997:14;3012:1;2997:17;;;;;;;:72;3084:15;3101:23;3136:4;-1:-1:-1;;;;;3128:18:21;3147:14;3162:1;3147:17;;;;;;;;;;;;;;3128:37;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3083:82;;;;3183:10;3179:414;;;3213:14;3230:46;3273:2;3253:10;:17;:22;3230:10;:22;;:46;;;;:::i;:::-;3213:63;;3328:1;3319:6;:10;:66;;;;;3362:23;3353:6;:32;3319:66;3294:285;;;3480:25;;;3527:20;;;:33;;;3452:6;-1:-1:-1;3452:6:21;3294:285;3179:414;;-1:-1:-1;;2978:3:21;;2930:673;;;;-1:-1:-1;;3616:23:21;:38;3612:109;;;3670:40;;;3612:109;3735:9;3730:655;3755:13;:20;3750:1;:25;3730:655;;3796:84;3852:2;3826:13;3840:1;3826:16;;;;;;;;;;;;;;:23;:28;3856:23;3796:13;3810:1;3796:16;;;;;;;:84;3895:15;3912:23;3947:4;-1:-1:-1;;;;;3939:18:21;3958:13;3972:1;3958:16;;;;;;;;;;;;;;3939:36;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3894:81;;;;3993:10;3989:386;;;4023:14;4040:46;4083:2;4063:10;:17;:22;4040:10;:22;;:46;;;;:::i;:::-;4023:63;;4138:1;4129:6;:10;:53;;;;;4172:10;4163:6;:19;4129:53;4104:257;;;4264:24;;;4310:19;;;:32;;;4236:6;-1:-1:-1;4236:6:21;4104:257;3989:386;;-1:-1:-1;;3777:3:21;;3730:655;;3735:1265:4;3950:21;3973;4026:4;:13;;;-1:-1:-1;;;;;4026:24:4;;4051:4;:13;;;-1:-1:-1;;;;;4051:28:4;;:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4026:56;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4010:72;;4096:4;:10;;;:17;4117:1;4096:22;4092:81;;;4134:28;;4092:81;4182:23;4290:9;4285:709;4309:4;:10;;;:17;4305:1;:21;4285:709;;;4374:1;4351:4;:10;;;4362:1;4351:13;;;;;;;;;;;;;;:20;:24;4347:71;;;4395:8;;4347:71;4467:13;-1:-1:-1;;;;;4452:61:4;;873:5;4586:4;:10;;;4597:1;4586:13;;;;;;;;;;;;;;4601:17;4644:1;4619:17;:24;:26;4601:45;;;;;;;;;;;;;;4452:195;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4452:195:4;;;;;;;;-1:-1:-1;;4452:195:4;;;;;;;;;;;;:::i;:::-;;;4432:552;;4961:8;;4432:552;4732:15;4723:6;:24;4719:137;;;4789:6;4771:24;;4824:4;:10;;;4835:1;4824:13;;;;;;;;;;;;;;4817:20;;4719:137;4664:206;4432:552;4328:3;;4285:709;;;;3735:1265;;;;;;;;;:::o;1509:191:18:-;1641:10;-1:-1:-1;;;;;1627:24:18;:10;-1:-1:-1;;;;;1627:24:18;;;1619:74;;;;-1:-1:-1;;;1619:74:18;;;;;;;:::i;:::-;;;;;;;;;1509:191;;:::o;6355:377:3:-;6429:38;;:::i;:::-;-1:-1:-1;6502:223:3;;;;;;;;6568:4;6502:223;;;-1:-1:-1;6502:223:3;;;;;;;;;;;;;;;;;6355:377;:::o;5822:527::-;6059:39;;;6096:1;6059:39;;;;;;;;;5944;;;;6059;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;5995:103;;6123:192;;;;;;;;6176:8;:15;;;6123:192;;;;6219:1;6123:192;;;;6249:1;6123:192;;;;6272:6;6123:192;;;;;;;;;;;;;;;;;;;6108:9;6118:1;6108:12;;;;;;;;;;;;;;;;;:207;6333:9;-1:-1:-1;5822:527:3;;;;;:::o;8086:303:22:-;8301:70;;-1:-1:-1;;;8301:70:22;;8199:31;;-1:-1:-1;;;;;8301:56:22;;;;;:70;;8358:12;;8301:70;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;7070:721::-;7267:20;;-1:-1:-1;;;;;7324:36:22;;7320:100;;7376:33;;7320:100;7429:23;7501:22;-1:-1:-1;;;;;7501:33:22;1144:5;7618:16;7656:11;7574:111;;;;;;;;:::i;:::-;;;;-1:-1:-1;;7574:111:22;;;;;;;;;;;;;;-1:-1:-1;;;;;7574:111:22;-1:-1:-1;;;;;;7574:111:22;;;;;;;;;;7501:185;;;;7574:111;7501:185;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;7462:224:22;;-1:-1:-1;7462:224:22;-1:-1:-1;7696:89:22;;;;7752:10;7741:33;;;;;;;;;;;;:::i;:::-;7726:48;;7696:89;7070:721;;;;;;;;:::o;5400:2077:14:-;5585:7;5609:22;5635:24;5661:22;5687:3;-1:-1:-1;;;;;5687:8:14;;5696:7;:21;;;5687:31;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;5608:110;;;;;;;;5728:24;5763:3;5728:39;;5796:7;:23;;;-1:-1:-1;;;;;5782:37:14;:10;-1:-1:-1;;;;;5782:37:14;;5778:1674;;;5993:29;6025:30;:16;6050:4;6025:24;:30::i;:::-;5993:62;-1:-1:-1;6070:25:14;6098:58;3269:8;6098:45;:14;5993:62;6098:22;:45::i;:::-;:53;;:58::i;:::-;6070:86;;6234:16;6213:17;:37;6209:84;;6277:1;6270:8;;;;;;;;;;6209:84;6307:16;6326:53;3138:8;6326:40;6356:3;-1:-1:-1;;;;;6356:7:14;;:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;6326:21;;:29;:40::i;:::-;:48;;:53::i;:::-;6307:72;-1:-1:-1;6393:29:14;6425:39;:21;6307:72;6425:29;:39::i;:::-;6393:71;-1:-1:-1;6479:28:14;;-1:-1:-1;;;;;;;;6479:28:14;5778:1674;6542:7;:23;;;-1:-1:-1;;;;;6528:37:14;:10;-1:-1:-1;;;;;6528:37:14;;6524:928;;;6777:16;6811:38;;;6807:85;;;6876:1;6869:8;;;;;;;;;6807:85;6905:25;6933:58;3269:8;6933:45;:14;6956:21;6933:22;:45::i;:58::-;6905:86;;7091:14;7070:17;:35;7066:82;;7132:1;7125:8;;;;;;;;;;7066:82;7162:23;7188;7200:3;-1:-1:-1;;;;;7200:8:14;;:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3138:8;;7188:11;:23::i;:::-;7162:49;-1:-1:-1;7265:43:14;7312:72;7162:49;7312:47;:21;7342:16;7312:29;:47::i;6524:928::-;7469:1;7462:8;;;;;;5400:2077;;;;;;;;;:::o;4809:919:20:-;5012:17;5046:20;5068:30;;:::i;:::-;5125:14;5114:49;;;;;;;;;;;;:::i;:::-;5045:118;;;;5174:20;5221:14;5210:36;;;;;;;;;;;;:::i;:::-;5173:73;-1:-1:-1;5257:12:20;5271:23;5318:4;-1:-1:-1;;;5429:11:20;5458:13;5173:73;5520:31;5540:10;5520:19;:31::i;:::-;5335:230;;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;5335:230:20;;;;;;;;;;;;;;-1:-1:-1;;;;;5335:230:20;-1:-1:-1;;;;;;5335:230:20;;;;;;;;;;5310:256;;;;5335:230;5310:256;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5256:310;;;;5581:7;5576:47;;5611:1;5604:8;;;;;;;;;5576:47;5694:10;5683:35;;;;;;;;;;;;:::i;:::-;5719:1;5683:38;;;;;;;;;;;;;;5676:45;;;;;;;4809:919;;;;;:::o;1691:2958:0:-;1865:34;1949:17;:24;-1:-1:-1;;;;;1935:39:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1935:39:0;;1915:59;;1988:17;:24;2016:1;1988:29;1984:84;;;2033:24;;1984:84;2078:18;2099:135;2138:4;:19;;;2171:4;:19;;;2204:17;2222:1;2204:20;;;;;;;;;;;;;;2099:4;:25;;;:135;;:::i;:::-;2078:156;-1:-1:-1;2248:15:0;2244:70;;2279:24;;;2244:70;2324:17;2344:125;2383:4;:19;;;2416:4;:19;;;2449:10;2344:4;:25;;;:125;;:::i;:::-;2324:145;-1:-1:-1;2483:14:0;2479:69;;2513:24;;;;2479:69;2563:9;2558:2085;2582:17;:24;2578:1;:28;2558:2085;;;2632:12;2627:1604;1683:1;2650:4;:37;2627:1604;;;2823:148;2870:17;2888:1;2870:20;;;;;;;;;;;;;;2912:9;2943:10;2823:25;:148::i;:::-;2810:161;-1:-1:-1;2993:15:0;2989:67;;3032:5;;2989:67;3086:202;3134:59;1378:3;3260:10;3086:25;:202::i;:::-;3073:215;-1:-1:-1;3310:15:0;3306:67;;3349:5;;3306:67;3390:18;3411:157;3458:4;:19;;;3499:4;:19;;;3540:10;3411:4;:25;;;:157;;:::i;:::-;3390:178;-1:-1:-1;3590:15:0;3586:67;;3629:5;;;3586:67;3786:10;3774:22;;3888:17;3906:1;3888:20;;;;;;;;;;;;;;3875:9;:33;3871:346;;3932:11;4056:17;4074:1;4056:20;;;;;;;;;;;;;;1378:3;3983:17;4001:1;3983:20;;;;;;;;;;;;;;3971:9;:32;3970:59;:106;;;;;;3932:144;;1536:8;4102:3;:41;4098:101;;4171:5;;;;4098:101;3871:346;;-1:-1:-1;2689:6:0;;2627:1604;;;;4500:132;4543:17;4561:1;4543:20;;;;;;;;;;;;;;4581:9;4608:10;4500:25;:132::i;:::-;4477:17;4495:1;4477:20;;;;;;;;;;;;;;;;;:155;2608:3;;2558:2085;;;;1691:2958;;;;;;:::o;5977:1450:6:-;6183:7;6207:18;6227:12;6241:17;6260:14;6302;6278:98;;;;;;;;;;;;:::i;:::-;6206:170;;;;;;;;6497:9;-1:-1:-1;;;;;6483:23:6;:10;-1:-1:-1;;;;;6483:23:6;;6479:942;;;6611:104;;-1:-1:-1;;;6611:104:6;;-1:-1:-1;;;;;6611:30:6;;;;;1291:5;;6611:104;;6704:10;;6611:104;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;6611:104:6;;;;;;;;-1:-1:-1;;6611:104:6;;;;;;;;;;;;:::i;:::-;;;6591:353;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6928:1;6921:8;;;;;;;;;6591:353;6794:6;-1:-1:-1;6787:13:6;;-1:-1:-1;;;;6787:13:6;6479:942;7063:119;;-1:-1:-1;;;7063:119:6;;-1:-1:-1;;;;;7063:39:6;;;;;1291:5;;7063:119;;7165:4;;7171:10;;7063:119;;;:::i;5958:2724:24:-;6144:35;6249:1;6235:10;6216:9;:16;:29;:34;;6195:117;;;;-1:-1:-1;;;6195:117:24;;;;;;;:::i;:::-;6322:30;;:::i;:::-;-1:-1:-1;6322:203:24;;;;;;;;;6449:8;6322:203;;6479:7;6322:203;;;;6508:6;6322:203;;;;6584:42;;6605:20;6584:42;;;;;;;;;6322:203;;;;6584:42;;;;;;;;;;;;;-1:-1:-1;6584:42:24;6535:91;;6636:21;6685:25;6713:9;6723:10;6713:21;;;;;;;;;;;;;;6685:49;;6748:26;6777:9;6787:10;6800:1;6787:14;6777:25;;;;;;;;;;;;;;6748:54;;6821:9;6816:296;6840:20;6836:1;:24;6816:296;;;6885:19;6923:7;-1:-1:-1;;;;;6923:15:24;;6939:10;6951:11;6964:13;6978:1;6964:16;;;;;;;;;;;6923:58;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;6885:96;;7003:18;7016:4;7003:12;:18::i;:::-;6999:99;;;7075:4;7045:10;7056:15;;;;;;7045:27;;;;;;;;;;;;;:34;-1:-1:-1;;;;;7045:34:24;;;-1:-1:-1;;;;;7045:34:24;;;;;6999:99;-1:-1:-1;6862:3:24;;6816:296;;;-1:-1:-1;;;7135:18:24;7131:109;;7213:16;;;;;7131:109;7271:9;:16;7253:10;7266:1;7253:14;:34;7249:349;;;7366:13;-1:-1:-1;;;;;7343:37:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7331:49;;7399:9;7394:164;7418:13;7414:1;:17;7394:164;;;7471:23;;;7492:1;7471:23;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;7471:23:24;7456:9;7466:1;7456:12;;;;;;;;;;;;;:38;;;;7530:10;7541:1;7530:13;;;;;;;;;;;;;;7512:9;7522:1;7512:12;;;;;;;;;;;;;;7525:1;7512:15;;;;;;;;-1:-1:-1;;;;;7512:31:24;;;:15;;;;;;;;;;;:31;7433:3;;7394:164;;;;7571:16;;;;;7249:349;7649:45;7709:54;7728:7;7737:9;7748:10;7761:1;7748:14;7709:18;:54::i;:::-;7649:114;;7777:19;:26;7807:1;7777:31;7773:122;;;7868:16;;;;;;7773:122;8022:19;:26;8006:13;:42;-1:-1:-1;;;;;7970:88:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7958:100;;8073:9;8068:582;8092:13;8088:1;:17;8068:582;;;8131:9;8126:514;8150:19;:26;8146:1;:30;8126:514;;;8217:26;;8213:30;;;:34;;;8217:19;;8246:1;;8381:22;;;;;;;;;;;;:29;8377:1;:33;-1:-1:-1;;;;;8356:55:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;8356:55:24;;8321:9;8331:1;8321:12;;;;;;;;;;;;;:90;;;;8447:10;8458:1;8447:13;;;;;;;;;;;;;;8429:9;8439:1;8429:12;;;;;;;;;;;;;;8442:1;8429:15;;;;;;;;;;;;;:31;-1:-1:-1;;;;;8429:31:24;;;-1:-1:-1;;;;;8429:31:24;;;;;8483:9;8478:148;8502:19;8522:1;8502:22;;;;;;;;;;;;;;:29;8498:1;:33;8478:148;;;8582:19;8602:1;8582:22;;;;;;;;;;;;;;8605:1;8582:25;;;;;;;;;;;;;;8560:9;8570:1;8560:12;;;;;;;;;;;;;;8577:1;8573;:5;8560:19;;;;;;;;-1:-1:-1;;;;;8560:47:24;;;:19;;;;;;;;;;;:47;8533:3;;8478:148;;;-1:-1:-1;;8178:3:24;;8126:514;;;-1:-1:-1;8107:3:24;;8068:582;;;;8659:16;;;;5958:2724;;;;;:::o;9982:1082::-;10143:24;10224:1;10204:9;:16;:21;;:64;;;;;10249:8;:15;10267:1;10249:19;10229:9;:16;:39;10204:64;10183:148;;;;-1:-1:-1;;;10183:148:24;;;;;;;:::i;:::-;10520:8;:15;10538:1;10520:19;10496:9;:16;10515:2;10496:21;:43;-1:-1:-1;;;;;10486:54:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;10486:54:24;-1:-1:-1;10472:68:24;-1:-1:-1;10602:2:24;10585:20;;10550:9;10616:442;10640:9;:16;10636:1;:20;10616:442;;;10681:5;;10677:211;;10706:14;10723:8;10736:1;10732;:5;10723:15;;;;;;;;;;;;;;-1:-1:-1;;;;;10723:19:24;;:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;10807:3;10803:17;10793:28;;-1:-1:-1;10854:1:24;10847:9;;;;10771:103;10901:20;10924:9;10934:1;10924:12;;;;;;;;;;;;;;;;;;10991:2;10987:14;10977:25;;-1:-1:-1;11031:2:24;11024:10;;;;10658:3;;10616:442;;;;9982:1082;;;;;:::o;6710:337:2:-;6793:9;6828:5;;;6847:6;;;;;:21;;;6867:1;6862;6857:2;:6;;;;;;:11;;6847:21;6843:60;;;6891:1;6884:8;;;;;6843:60;6928:8;6922:15;;6951:7;;;6947:46;;;6981:1;6974:8;;;;;;6947:46;1010:8;7012:9;;;;-1:-1:-1;;;;6710:337:2:o;8688:329:24:-;8783:32;8863:9;:16;-1:-1:-1;;;;;8842:38:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;8842:38:24;;8831:49;;8895:9;8890:121;8914:9;:16;8910:1;:20;8890:121;;;8965:9;8998:1;8994;8975:9;:16;:20;:24;8965:35;;;;;;;;;;;;;;8951:8;8960:1;8951:11;;;;;;;;-1:-1:-1;;;;;8951:49:24;;;:11;;;;;;;;;;;:49;8932:3;;8890:121;;9023:323;9116:32;9196:8;:15;-1:-1:-1;;;;;9175:37:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;9175:37:24;;9164:48;;9227:9;9222:118;9246:8;:15;9242:1;:19;9222:118;;;9296:8;9327:1;9323;9305:8;:15;:19;:23;9296:33;;;;;;;;;;;;;;9282:8;9291:1;9282:11;;;;;;;;-1:-1:-1;;;;;9282:47:24;;;:11;;;;;;;;;;;:47;9263:3;;9222:118;;3340:740:19;3541:17;3575:18;3595:12;3622:14;3611:46;;;;;;;;;;;;:::i;:::-;3574:83;;;;3668:18;3701:14;3690:37;;;;;;;;;;;;:::i;:::-;3667:60;-1:-1:-1;3754:4:19;:25;3797:4;3803:10;3667:60;3827:31;3847:10;3827:19;:31::i;:::-;3754:105;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;3754:105:19;;;;;;;;;;;;:::i;:::-;;;3738:336;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4062:1;4055:8;;;;;;;;3738:336;3936:7;3944:1;3936:10;;;;;;;;;;;;;;3929:17;;;;;;;;3834:545:44;3997:21;4237:104;4329:11;4237:70;4284:22;4329:11;4304:1;4284:19;:22::i;:::-;4237:25;:9;4255:6;4237:17;:25::i;:::-;:46;;:70::i;3886:391:42:-;3979:19;4030:2;4014:18;;4043:15;4060:23;4095:5;-1:-1:-1;;;;;4087:25:42;4113:18;;;;;;;;;;;;;-1:-1:-1;;;4113:18:42;;;4087:45;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4042:90;;;;4146:10;:37;;;;;4181:2;4160:10;:17;:23;;4146:37;4142:129;;;4221:38;4245:10;4257:1;4221:23;:38::i;:::-;4199:61;;4142:129;3886:391;;;;;:::o;7483:2082:14:-;7667:7;7691:22;7717:24;7743:22;7769:3;-1:-1:-1;;;;;7769:8:14;;7778:7;:21;;;7769:31;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;7690:110;;;;;;;;7829:7;:23;;;-1:-1:-1;;;;;7815:37:14;:10;-1:-1:-1;;;;;7815:37:14;;7811:1729;;;7966:29;7998:16;7966:48;;8028:23;8054:22;8066:3;-1:-1:-1;;;;;8066:7:14;;:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3138:8;;8054:11;:22::i;:::-;8028:48;-1:-1:-1;8129:29:14;8161:59;8028:48;8161:34;:21;3138:8;8161:29;:34::i;:59::-;8129:91;-1:-1:-1;8234:25:14;8262:58;3269:8;8262:45;:14;8129:91;8262:22;:45::i;:58::-;8234:86;;8398:16;8377:17;:37;8373:84;;8441:1;8434:8;;;;;;;;;;;8373:84;8471:43;8517:48;8563:1;8518:35;:21;8548:4;8518:29;:35::i;7811:1729::-;8725:7;:23;;;-1:-1:-1;;;;;8711:37:14;:10;-1:-1:-1;;;;;8711:37:14;;8707:833;;;8862:29;8894:30;:16;8919:4;8894:24;:30::i;:::-;8862:62;;8938:26;8967:23;8979:3;-1:-1:-1;;;;;8979:8:14;;:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8967:23;8938:52;-1:-1:-1;9044:29:14;9077:62;3138:8;9077:49;:21;8938:52;9077:29;:49::i;:62::-;9044:95;;9181:14;9157:21;:38;9153:85;;;9222:1;9215:8;;;;;;;;;;9153:85;9251:25;9279:58;3269:8;9279:45;:14;9302:21;9279:22;:45::i;:58::-;9251:86;;9429:14;9408:17;:35;9404:82;;9470:1;9463:8;;;;;;;;;;;9404:82;-1:-1:-1;9508:21:14;-1:-1:-1;9501:28:14;;-1:-1:-1;;;;;9501:28:14;8707:833;-1:-1:-1;9557:1:14;;7483:2082;-1:-1:-1;;;;;;;;;7483:2082:14:o;16578:187:43:-;16720:38;16733:1;16736:5;16751;16720:12;:38::i;:::-;16578:187;;;:::o;16122:220::-;16243:14;16290:21;16302:1;16305:5;16290:11;:21::i;4943:907:5:-;5144:17;5178:20;5200:26;;:::i;:::-;5253:14;5242:47;;;;;;;;;;;;:::i;:::-;5177:112;;;;5300:20;5347:14;5336:36;;;;;;;;;;;;:::i;:::-;5299:73;-1:-1:-1;5383:12:5;5397:23;5444:4;-1:-1:-1;;;5553:9:5;5580:13;5299:73;5642:31;5662:10;5642:19;:31::i;9228:916:11:-;9402:17;9490:27;9538:4;:16;;;9490:65;;9566:27;9600:9;-1:-1:-1;;;;;9600:28:11;;9656:4;:9;;;-1:-1:-1;;;;;9642:23:11;:10;-1:-1:-1;;;;;9642:23:11;;:56;;9688:10;9642:56;;;1035:42;9642:56;9726:4;:9;;;-1:-1:-1;;;;;9712:23:11;:10;-1:-1:-1;;;;;9712:23:11;;:56;;9758:10;9712:56;;;1035:42;9712:56;9800:12;;;9810:1;9800:12;;;;;;;;;-1:-1:-1;;;;;;9600:236:11;;;;;;;;;;;;9782:4;;9600:236;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;9600:236:11;;;;;;;;;;;;:::i;:::-;9565:271;;;;9873:10;:17;9851:4;:18;;;:39;9847:80;;-1:-1:-1;9913:3:11;;-1:-1:-1;9906:10:11;;-1:-1:-1;9906:10:11;9847:80;9949:10;9960:4;:18;;;9949:30;;;;;;;;;;;;;;9937:42;;10062:3;10049:9;:16;;10041:25;;10070:4;10041:33;10037:74;;;-1:-1:-1;10097:3:11;;-1:-1:-1;10090:10:11;;-1:-1:-1;10090:10:11;7110:769;7311:7;7335:18;7355:28;;:::i;:::-;7410:14;7399:55;;;;;;;;;;;;:::i;:::-;7334:120;;;;7465:18;7512:14;7501:55;;;;;;;;;;;;:::i;:::-;-1:-1:-1;7582:90:11;;-1:-1:-1;;;7582:90:11;;7464:92;;-1:-1:-1;7582:4:11;;:31;;:90;;7631:4;;7464:92;;7649:10;;7661;;7582:90;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;7582:90:11;;;;;;;;-1:-1:-1;;7582:90:11;;;;;;;;;;;;:::i;:::-;;;7566:307;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7739:6;-1:-1:-1;7732:13:11;;-1:-1:-1;;;7732:13:11;6047:836:7;6234:15;6251:13;6373:25;6417:8;-1:-1:-1;;;;;6401:37:7;;6439:10;6451;6401:61;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;6401:61:7;;;;;;;;;;;;:::i;:::-;6373:89;;6483:4;6472:15;;6501:8;:15;6520:1;6501:20;6497:251;;;6646:61;;-1:-1:-1;;;6646:61:7;;-1:-1:-1;;;;;6646:37:7;;;;;:61;;6684:10;;6696;;6646:61;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;6646:61:7;;;;;;;;;;;;:::i;:::-;6635:72;;6732:5;6721:16;;6497:251;6772:8;:15;6762:6;:25;6758:82;;6819:1;6823:5;6803:26;;;;;;;6758:82;6860:8;6869:6;6860:16;;;;;;;;;;;;;;6850:26;;6047:836;;;;;;;;:::o;4829:1212::-;5037:7;5061:18;5081:12;5095:13;5136:14;5112:86;;;;;;;;;;;;:::i;:::-;5060:138;;;;;;5372:8;5368:667;;;5416:122;;-1:-1:-1;;;5416:122:7;;-1:-1:-1;;;;;5416:31:7;;;;;1408:5;;5416:122;;5523:1;;5527:10;;5416:122;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5416:122:7;;;;;;;;-1:-1:-1;;5416:122:7;;;;;;;;;;;;:::i;:::-;;;5396:299;;5679:1;5672:8;;;;;;;5396:299;-1:-1:-1;5626:6:7;-1:-1:-1;5619:13:7;;-1:-1:-1;;;5619:13:7;5368:667;5745:123;;-1:-1:-1;;;5745:123:7;;-1:-1:-1;;;;;5745:32:7;;;;;1408:5;;5745:123;;5853:1;;5857:10;;5745:123;;;:::i;3464:771:13:-;3667:17;3701:18;3721:14;3762;3751:46;;;;;;;;;;;;:::i;:::-;3700:97;;;;3808:18;3853:14;3842:37;;;;;;;;;;;;:::i;:::-;3807:72;-1:-1:-1;3905:4:13;:27;3950:6;3958:10;3807:72;3982:31;4002:10;3982:19;:31::i;5401:467:42:-;5510:15;5542;5559:23;5594:5;-1:-1:-1;;;;;5586:25:42;5665:24;;;5707:5;5625:101;;;;;;;;:::i;:::-;;;;-1:-1:-1;;5625:101:42;;;;;;;;;;;;;;-1:-1:-1;;;;;5625:101:42;-1:-1:-1;;;;;;5625:101:42;;;;;;;;;;5586:150;;;;5625:101;5586:150;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5541:195;;;;5750:10;:37;;;;;5785:2;5764:10;:17;:23;;5750:37;5746:116;;;5813:38;5837:10;5849:1;5813:23;:38::i;3861:849:12:-;4074:17;4108:18;4128:23;4178:14;4167:46;;;;;;;;;;;;:::i;:::-;4107:106;;;;4224:18;4269:14;4258:37;;;;;;;;;;;;:::i;:::-;4223:72;-1:-1:-1;4321:4:12;:37;1065:5;4416:15;4433:10;4223:72;4457:31;4477:10;4457:19;:31::i;:::-;4321:168;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;4321:168:12;;;;;;;;;;;;:::i;4623:515:42:-;4749:18;4784:15;4801:23;4836:5;-1:-1:-1;;;;;4828:25:42;4907:24;;;4949:5;4972:7;4867:126;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;4867:126:42;;;;;;;;;;;;;;-1:-1:-1;;;;;4867:126:42;-1:-1:-1;;;;;;4867:126:42;;;;;;;;;;4828:175;;;;4867:126;4828:175;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4783:220;;;;5017:10;:37;;;;;5052:2;5031:10;:17;:23;;5017:37;5013:119;;;5083:38;5107:10;5119:1;5083:23;:38::i;937:217:18:-;1049:14;1086:61;1133:12;1086:31;:61::i;5099:620:15:-;5304:17;5338:16;5356:27;5398:14;5387:46;;;;;;;;;;;;:::i;:::-;5337:96;;;;5444:17;5463:27;5505:14;5494:46;;;;;;;;;;;;:::i;:::-;5443:97;;;;5557:155;5604:8;5626:19;5659;5692:10;5557:33;:155::i;:::-;5550:162;5099:620;-1:-1:-1;;;;;;;;5099:620:15:o;764:457:45:-;850:7;877:6;873:45;;-1:-1:-1;906:1:45;899:8;;873:45;939:5;;;943:1;939;:5;:1;958:5;;;;;:10;954:243;;984:202;1009:176;1069:64;1151:1;1170;1009:42;:176::i;:::-;984:24;:202::i;2004:392::-;2090:7;2125:5;;;2144;;;2140:232;;;2165:196;2190:170;2250:58;2326:1;2345;2190:42;:170::i;1227:392::-;1313:7;1340:6;1336:232;;1362:195;1387:169;1447:57;1522:1;1541;1387:42;:169::i;1362:195::-;1577:9;1593:1;1589;:5;;;;;;;1227:392;-1:-1:-1;;;;1227:392:45:o;1625:373::-;1711:7;1742:1;1738;:5;1734:236;;;1759:200;1784:174;1844:62;1924:1;1943;1784:42;:174::i;1759:200::-;-1:-1:-1;1986:5:45;;;1625:373::o;1160:172:18:-;1289:16;;;1303:1;1289:16;;;;;;;;;1247:20;;1289:16;;;;;;;;;;;-1:-1:-1;1289:16:18;1283:22;;1324:1;1315:3;1319:1;1315:6;;;;;;;;;;;;;:10;;;;;1160:172;;;:::o;4655:416:0:-;4823:21;4864:14;;;:29;;-1:-1:-1;4882:11:0;;4864:29;:49;;;-1:-1:-1;4897:16:0;;4864:49;4860:63;;;-1:-1:-1;4922:1:0;4915:8;;4860:63;4945:18;;;4957:6;4945:9;:18;:9;4977:13;;;;;:23;4973:37;;5009:1;5002:8;;;;;4973:37;5053:11;5047:1;5033:11;:15;5028:1;:21;5027:37;;;;;;;4655:416;-1:-1:-1;;;;;4655:416:0:o;9352:624:24:-;9441:12;9594:17;;9642:13;9638:64;;9682:5;9675:12;;;;;9638:64;9352:624;9772:4;-1:-1:-1;;;;;9772:11:24;;:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;9772:23:24;;9804:4;9772:38;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;9768:86;;-1:-1:-1;9838:5:24;9831:12;;9768:86;9867:4;-1:-1:-1;;;;;9867:11:24;;:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;9867:23:24;;9899:4;9867:38;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;9863:86;;-1:-1:-1;9933:5:24;9926:12;;9863:86;-1:-1:-1;9965:4:24;9352:624;;;:::o;15225:654:43:-;15382:5;15390:2;15382:10;15371:1;:8;:21;15367:306;;;15408:254;15433:228;15498:95;15611:1;:8;15637:5;15645:2;15637:10;15433:47;:228::i;15408:254::-;15842:13;;15753:2;15842:13;15835:28;15821:52::o;14301:688::-;14422:14;14467:5;14475:2;14467:10;14456:1;:8;:21;14452:306;;;14493:254;14518:228;14583:95;14696:1;:8;14722:5;14730:2;14722:10;14518:47;:228::i;14493:254::-;-1:-1:-1;14936:13:43;14838:2;14936:13;14930:20;;14301:688::o;1401:322:49:-;1554:12;818:10;1625:28;;1667:9;1690:1;1705;1589:127;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;1589:127:49;;;;;;;;;;;;;;-1:-1:-1;;;;;1589:127:49;-1:-1:-1;;;;;;1589:127:49;;;;;;;;;;;-1:-1:-1;1401:322:49;;;;;:::o;1531:170:48:-;1674:9;1668:16;1661:4;1650:9;1646:20;1639:46;1334:378:46;1522:12;1274:10;1593:37;;1644:9;1667:6;1687:8;1557:148;;;;;;;;;;:::i;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;5:130::-;72:20;;97:33;72:20;97:33;:::i;142:134::-;220:13;;238:33;220:13;238:33;:::i;458:707::-;;575:3;568:4;560:6;556:17;552:27;542:2;;-1:-1;;583:12;542:2;630:6;617:20;652:80;667:64;724:6;667:64;:::i;:::-;652:80;:::i;:::-;760:21;;;643:89;-1:-1;804:4;817:14;;;;792:17;;;906;;;897:27;;;;894:36;-1:-1;891:2;;;943:1;;933:12;891:2;968:1;953:206;978:6;975:1;972:13;953:206;;;85:6;72:20;97:33;124:5;97:33;:::i;:::-;1046:50;;1110:14;;;;1138;;;;1000:1;993:9;953:206;;;957:14;;;;;535:630;;;;:::o;1941:753::-;;2083:3;2076:4;2068:6;2064:17;2060:27;2050:2;;-1:-1;;2091:12;2050:2;2138:6;2125:20;2160:105;2175:89;2257:6;2175:89;:::i;2160:105::-;2293:21;;;2151:114;-1:-1;2337:4;2350:14;;;;2325:17;;;2445:1;2430:258;2455:6;2452:1;2449:13;2430:258;;;2562:62;2620:3;2337:4;2538:3;2525:17;2329:6;2513:30;;2562:62;:::i;:::-;2550:75;;2639:14;;;;2667;;;;2477:1;2470:9;2430:258;;3853:705;;3979:3;3972:4;3964:6;3960:17;3956:27;3946:2;;-1:-1;;3987:12;3946:2;4034:6;4021:20;4056:89;4071:73;4137:6;4071:73;:::i;4056:89::-;4173:21;;;4047:98;-1:-1;4217:4;4230:14;;;;4205:17;;;4325:1;4310:242;4335:6;4332:1;4329:13;4310:242;;;4442:46;4484:3;4217:4;4418:3;4405:17;4209:6;4393:30;;4442:46;:::i;:::-;4430:59;;4503:14;;;;4531;;;;4357:1;4350:9;4310:242;;4600:779;;4741:3;4734:4;4726:6;4722:17;4718:27;4708:2;;-1:-1;;4749:12;4708:2;4796:6;4783:20;4818:104;4833:88;4914:6;4833:88;:::i;4818:104::-;4950:21;;;4809:113;-1:-1;4994:4;5007:14;;;;4982:17;;;5096;;;5087:27;;;;5084:36;-1:-1;5081:2;;;5133:1;;5123:12;5081:2;5158:1;5143:230;5168:6;5165:1;5162:13;5143:230;;;11162:6;11149:20;11174:57;11225:5;11174:57;:::i;:::-;5236:74;;5324:14;;;;5352;;;;5190:1;5183:9;5143:230;;7009:788;;7153:3;7146:4;7138:6;7134:17;7130:27;7120:2;;-1:-1;;7161:12;7120:2;7208:6;7195:20;7230:107;7245:91;7329:6;7245:91;:::i;7230:107::-;7365:21;;;7221:116;-1:-1;7409:4;7422:14;;;;7397:17;;;7523:4;7511:17;;;7502:27;;;;7499:36;-1:-1;7496:2;;;7548:1;;7538:12;7496:2;7573:1;7558:233;7583:6;7580:1;7577:13;7558:233;;;7663:64;7723:3;7711:10;7663:64;:::i;:::-;7651:77;;7742:14;;;;7770;;;;7605:1;7598:9;7558:233;;;7562:14;;;;;;7113:684;;;;:::o;7823:707::-;;7940:3;7933:4;7925:6;7921:17;7917:27;7907:2;;-1:-1;;7948:12;7907:2;7995:6;7982:20;8017:80;8032:64;8089:6;8032:64;:::i;8017:80::-;8125:21;;;8008:89;-1:-1;8169:4;8182:14;;;;8157:17;;;8271;;;8262:27;;;;8259:36;-1:-1;8256:2;;;8308:1;;8298:12;8256:2;8333:1;8318:206;8343:6;8340:1;8337:13;8318:206;;;25248:20;;8411:50;;8475:14;;;;8503;;;;8365:1;8358:9;8318:206;;8556:722;;8684:3;8677:4;8669:6;8665:17;8661:27;8651:2;;-1:-1;;8692:12;8651:2;8732:6;8726:13;8754:80;8769:64;8826:6;8769:64;:::i;8754:80::-;8862:21;;;8745:89;-1:-1;8906:4;8919:14;;;;8894:17;;;9008;;;8999:27;;;;8996:36;-1:-1;8993:2;;;9045:1;;9035:12;8993:2;9070:1;9055:217;9080:6;9077:1;9074:13;9055:217;;;25396:13;;9148:61;;9223:14;;;;9251;;;;9102:1;9095:9;9055:217;;9974:440;;10075:3;10068:4;10060:6;10056:17;10052:27;10042:2;;-1:-1;;10083:12;10042:2;10130:6;10117:20;10152:64;10167:48;10208:6;10167:48;:::i;10152:64::-;10143:73;;10236:6;10229:5;10222:21;10340:3;10272:4;10331:6;10264;10322:16;;10319:25;10316:2;;;10357:1;;10347:12;10316:2;119736:6;10272:4;10264:6;10260:17;10272:4;10298:5;10294:16;119713:30;119792:1;119774:16;;;10272:4;119774:16;119767:27;10298:5;10035:379;-1:-1;;10035:379::o;10423:442::-;;10535:3;10528:4;10520:6;10516:17;10512:27;10502:2;;-1:-1;;10543:12;10502:2;10583:6;10577:13;10605:64;10620:48;10661:6;10620:48;:::i;10605:64::-;10596:73;;10689:6;10682:5;10675:21;10793:3;10725:4;10784:6;10717;10775:16;;10772:25;10769:2;;;10810:1;;10800:12;10769:2;10820:39;10852:6;10725:4;10751:5;10747:16;10725:4;10717:6;10713:17;10820:39;:::i;12345:174::-;12443:13;;122640:1;122630:12;;122620:2;;122656:1;;122646:12;14833:659;;14949:4;14937:9;14932:3;14928:19;14924:30;14921:2;;;-1:-1;;14957:12;14921:2;14985:20;14949:4;14985:20;:::i;:::-;14976:29;;85:6;72:20;97:33;124:5;97:33;:::i;:::-;15069:75;;15226:2;15279:22;;9765:20;9790:32;9765:20;9790:32;:::i;:::-;15226:2;15241:16;;15234:74;15389:2;15442:22;;9765:20;9790:32;9765:20;9790:32;:::i;:::-;15389:2;15404:16;;15397:74;15408:5;14915:577;-1:-1;;14915:577::o;15535:703::-;;15662:4;15650:9;15645:3;15641:19;15637:30;15634:2;;;-1:-1;;15670:12;15634:2;15698:20;15662:4;15698:20;:::i;:::-;15689:29;;226:6;220:13;238:33;265:5;238:33;:::i;:::-;15782:86;;15950:2;16014:22;;9911:13;9929:32;9911:13;9929:32;:::i;:::-;15950:2;15965:16;;15958:85;16124:2;16188:22;;9911:13;9929:32;9911:13;9929:32;:::i;16817:1028::-;;16940:4;16928:9;16923:3;16919:19;16915:30;16912:2;;;-1:-1;;16948:12;16912:2;16976:20;16940:4;16976:20;:::i;:::-;16967:29;;25261:6;25248:20;17069:16;17062:75;17205:2;17263:9;17259:22;72:20;97:33;124:5;97:33;:::i;:::-;17205:2;17220:16;;17213:75;17357:2;17411:22;;72:20;97:33;72:20;97:33;:::i;:::-;17357:2;17372:16;;17365:75;17501:2;17555:22;;72:20;97:33;72:20;97:33;:::i;:::-;17501:2;17516:16;;17509:75;17673:3;17658:19;;17645:33;-1:-1;;;;;17687:30;;17684:2;;;-1:-1;;17720:12;17684:2;17765:58;17819:3;17810:6;17799:9;17795:22;17765:58;:::i;:::-;17673:3;17751:5;17747:16;17740:84;;16906:939;;;;:::o;19023:2032::-;;19140:6;;19128:9;19123:3;19119:19;19115:32;19112:2;;;-1:-1;;19150:12;19112:2;19178:22;19140:6;19178:22;:::i;:::-;19169:31;;;19288:73;19357:3;19333:22;19288:73;:::i;:::-;19270:16;19263:99;19462:73;19531:3;19429:2;19511:9;19507:22;19462:73;:::i;:::-;19429:2;19448:5;19444:16;19437:99;19637:49;19682:3;19604:2;19662:9;19658:22;19637:49;:::i;:::-;19604:2;19623:5;19619:16;19612:75;19788:49;19833:3;19755:2;19813:9;19809:22;19788:49;:::i;:::-;19755:2;19774:5;19770:16;19763:75;19948:49;19993:3;19914;19973:9;19969:22;19948:49;:::i;:::-;19914:3;19934:5;19930:16;19923:75;20094:49;20139:3;20060;20119:9;20115:22;20094:49;:::i;:::-;20060:3;20080:5;20076:16;20069:75;20240:49;20285:3;20206;20265:9;20261:22;20240:49;:::i;:::-;20206:3;20226:5;20222:16;20215:75;20387:49;20432:3;20353;20412:9;20408:22;20387:49;:::i;:::-;20353:3;20373:5;20369:16;20362:75;20506:3;20542:49;20587:3;20506;20567:9;20563:22;20542:49;:::i;:::-;20522:18;;;20515:77;20653:3;20710:22;;;9488:20;20669:18;;;20662:77;20802:3;20838:48;20882:3;20858:22;;;20838:48;:::i;:::-;20802:3;20822:5;20818:18;20811:76;;20948:3;;21009:9;21005:22;25248:20;20948:3;20968:5;20964:18;20957:77;;19106:1949;;;;:::o;22524:773::-;;22640:4;22628:9;22623:3;22619:19;22615:30;22612:2;;;-1:-1;;22648:12;22612:2;22676:20;22640:4;22676:20;:::i;:::-;22667:29;;12624:6;12611:20;122759:1;122752:5;122749:12;122739:2;;122775:1;;122765:12;122739:2;22762:93;;22913:2;22965:22;;25659:20;117166:4;117155:16;;123584:33;;123574:2;;-1:-1;;123621:12;123574:2;22946:47;22913:2;22932:5;22928:16;22921:73;;23052:2;23110:9;23106:22;9488:20;23052:2;23071:5;23067:16;23060:75;23193:2;23251:9;23247:22;9488:20;23193:2;23212:5;23208:16;23201:75;22606:691;;;;:::o;24764:130::-;24831:20;;24856:33;24831:20;24856:33;:::i;25459:128::-;25525:20;;-1:-1;;;;;117053:30;;123463:34;;123453:2;;123511:1;;123501:12;25727:241;;25831:2;25819:9;25810:7;25806:23;25802:32;25799:2;;;-1:-1;;25837:12;25799:2;85:6;72:20;97:33;124:5;97:33;:::i;25975:263::-;;26090:2;26078:9;26069:7;26065:23;26061:32;26058:2;;;-1:-1;;26096:12;26058:2;226:6;220:13;238:33;265:5;238:33;:::i;26531:431::-;;;26679:2;26667:9;26658:7;26654:23;26650:32;26647:2;;;-1:-1;;26685:12;26647:2;375:6;369:13;387:41;422:5;387:41;:::i;:::-;26856:2;26914:22;;369:13;26737:82;;-1:-1;387:41;369:13;387:41;:::i;:::-;26864:82;;;;26641:321;;;;;:::o;26969:736::-;;;;;27167:3;27155:9;27146:7;27142:23;27138:33;27135:2;;;-1:-1;;27174:12;27135:2;375:6;369:13;387:41;422:5;387:41;:::i;:::-;27345:2;27403:22;;369:13;27226:82;;-1:-1;387:41;369:13;387:41;:::i;:::-;27472:2;27530:22;;369:13;27353:82;;-1:-1;387:41;369:13;387:41;:::i;:::-;27599:2;27657:22;;369:13;27480:82;;-1:-1;387:41;369:13;387:41;:::i;:::-;27129:576;;;;-1:-1;27129:576;;-1:-1;;27129:576::o;27712:561::-;;;;27874:2;27862:9;27853:7;27849:23;27845:32;27842:2;;;-1:-1;;27880:12;27842:2;375:6;369:13;387:41;422:5;387:41;:::i;:::-;28051:2;28109:22;;369:13;27932:82;;-1:-1;387:41;369:13;387:41;:::i;:::-;28178:2;28225:22;;9361:13;28059:82;;-1:-1;114647:13;;114640:21;121102:32;;121092:2;;-1:-1;;121138:12;121092:2;28186:71;;;;27836:437;;;;;:::o;28280:562::-;;;28454:2;28442:9;28433:7;28429:23;28425:32;28422:2;;;-1:-1;;28460:12;28422:2;375:6;369:13;387:41;422:5;387:41;:::i;:::-;28652:2;28637:18;;28631:25;28512:82;;-1:-1;;;;;;28665:30;;;28662:2;;;-1:-1;;28698:12;28662:2;28794:22;;;;18029:4;18008:19;;;18004:30;18001:2;;;-1:-1;;18037:12;18001:2;18065:20;18029:4;18065:20;:::i;:::-;18208:22;25396:13;18158:16;18151:86;18338:60;18394:3;28652:2;18374:9;18370:22;18338:60;:::i;:::-;28652:2;18324:5;18320:16;18313:86;18501:60;18557:3;28454:2;18537:9;18533:22;18501:60;:::i;:::-;28454:2;18487:5;18483:16;18476:86;18656:60;18712:3;18623:2;18692:9;18688:22;18656:60;:::i;:::-;18623:2;18642:5;18638:16;18631:86;18799:3;18788:9;18784:19;18778:26;28676:18;18816:6;18813:30;18810:2;;;-1:-1;;18846:12;18810:2;18891:69;18956:3;18947:6;18936:9;18932:22;18891:69;:::i;:::-;18799:3;18877:5;18873:16;18866:95;;28718:108;;;;;;28416:426;;;;;:::o;28849:879::-;;;;;;29046:3;29034:9;29025:7;29021:23;29017:33;29014:2;;;-1:-1;;29053:12;29014:2;85:6;72:20;97:33;124:5;97:33;:::i;:::-;29105:63;-1:-1;29205:2;29244:22;;72:20;97:33;72:20;97:33;:::i;:::-;29213:63;-1:-1;29313:2;29352:22;;72:20;97:33;72:20;97:33;:::i;:::-;29321:63;-1:-1;29421:2;29460:22;;72:20;97:33;72:20;97:33;:::i;:::-;29429:63;-1:-1;29557:3;29542:19;;29529:33;-1:-1;;;;;29571:30;;29568:2;;;-1:-1;;29604:12;29568:2;29634:78;29704:7;29695:6;29684:9;29680:22;29634:78;:::i;:::-;29624:88;;;29008:720;;;;;;;;:::o;29735:753::-;;;;;29915:3;29903:9;29894:7;29890:23;29886:33;29883:2;;;-1:-1;;29922:12;29883:2;85:6;72:20;97:33;124:5;97:33;:::i;:::-;29974:63;-1:-1;30074:2;30113:22;;72:20;97:33;72:20;97:33;:::i;:::-;30082:63;-1:-1;30182:2;30221:22;;72:20;97:33;72:20;97:33;:::i;:::-;30190:63;-1:-1;30318:2;30303:18;;30290:32;-1:-1;;;;;30331:30;;30328:2;;;-1:-1;;30364:12;30328:2;30394:78;30464:7;30455:6;30444:9;30440:22;30394:78;:::i;:::-;30384:88;;;29877:611;;;;;;;:::o;30495:617::-;;;;;30650:3;30638:9;30629:7;30625:23;30621:33;30618:2;;;-1:-1;;30657:12;30618:2;85:6;72:20;97:33;124:5;97:33;:::i;:::-;30709:63;-1:-1;30809:2;30848:22;;72:20;97:33;72:20;97:33;:::i;:::-;30817:63;-1:-1;30917:2;30956:22;;72:20;97:33;72:20;97:33;:::i;:::-;30612:500;;;;-1:-1;30925:63;;31025:2;31064:22;25248:20;;-1:-1;;30612:500::o;31119:763::-;;;;31307:2;31295:9;31286:7;31282:23;31278:32;31275:2;;;-1:-1;;31313:12;31275:2;85:6;72:20;97:33;124:5;97:33;:::i;:::-;31365:63;-1:-1;31493:2;31478:18;;31465:32;-1:-1;;;;;31506:30;;;31503:2;;;-1:-1;;31539:12;31503:2;31569:78;31639:7;31630:6;31619:9;31615:22;31569:78;:::i;:::-;31559:88;;31712:2;31701:9;31697:18;31684:32;31670:46;;31517:18;31728:6;31725:30;31722:2;;;-1:-1;;31758:12;31722:2;;31788:78;31858:7;31849:6;31838:9;31834:22;31788:78;:::i;:::-;31778:88;;;31269:613;;;;;:::o;31889:879::-;;;;;;32086:3;32074:9;32065:7;32061:23;32057:33;32054:2;;;-1:-1;;32093:12;32054:2;85:6;72:20;97:33;124:5;97:33;:::i;:::-;32145:63;-1:-1;32245:2;32284:22;;25248:20;;-1:-1;32353:2;32392:22;;72:20;97:33;72:20;97:33;:::i;32775:392::-;;32915:2;;32903:9;32894:7;32890:23;32886:32;32883:2;;;-1:-1;;32921:12;32883:2;32972:17;32966:24;-1:-1;;;;;33002:6;32999:30;32996:2;;;-1:-1;;33032:12;32996:2;33119:22;;1312:4;1300:17;;1296:27;-1:-1;1286:2;;-1:-1;;1327:12;1286:2;1367:6;1361:13;1389:80;1404:64;1461:6;1404:64;:::i;1389:80::-;1497:21;;;1554:14;;;;1529:17;;;1643;;;1634:27;;;;1631:36;-1:-1;1628:2;;;-1:-1;;1670:12;1628:2;-1:-1;1696:10;;1690:217;1715:6;1712:1;1709:13;1690:217;;;226:6;220:13;238:33;265:5;238:33;:::i;:::-;1783:61;;1737:1;1730:9;;;;;1858:14;;;;1886;;1690:217;;;-1:-1;33052:99;32877:290;-1:-1;;;;;;;32877:290::o;33174:833::-;;;;33393:2;33381:9;33372:7;33368:23;33364:32;33361:2;;;-1:-1;;33399:12;33361:2;33450:17;33444:24;-1:-1;;;;;33488:18;33480:6;33477:30;33474:2;;;-1:-1;;33510:12;33474:2;33612:6;33601:9;33597:22;;;2848:3;2841:4;2833:6;2829:17;2825:27;2815:2;;-1:-1;;2856:12;2815:2;2896:6;2890:13;2918:80;2933:64;2990:6;2933:64;:::i;2918:80::-;3004:16;3040:6;3033:5;3026:21;3070:4;;3087:3;3083:14;3076:21;;3070:4;3062:6;3058:17;3192:3;3070:4;;3176:6;3172:17;3062:6;3163:27;;3160:36;3157:2;;;-1:-1;;3199:12;3157:2;-1:-1;3225:10;;3219:217;3244:6;3241:1;3238:13;3219:217;;;9636:13;;3312:61;;3266:1;3259:9;;;;;3387:14;;;;3415;;3219:217;;;-1:-1;33672:18;;33666:25;33530:99;;-1:-1;33666:25;-1:-1;;;33700:30;;;33697:2;;;-1:-1;;33733:12;33697:2;;33763:89;33844:7;33835:6;33824:9;33820:22;33763:89;:::i;:::-;33753:99;;;33907:84;33983:7;33889:2;33963:9;33959:22;33907:84;:::i;:::-;33897:94;;33355:652;;;;;:::o;34014:419::-;;;34164:2;34152:9;34143:7;34139:23;34135:32;34132:2;;;-1:-1;;34170:12;34132:2;34228:17;34215:31;-1:-1;;;;;34266:18;34258:6;34255:30;34252:2;;;-1:-1;;34288:12;34252:2;34400:6;34389:9;34385:22;;;3607:3;3600:4;3592:6;3588:17;3584:27;3574:2;;-1:-1;;3615:12;3574:2;3658:6;3645:20;34266:18;3677:6;3674:30;3671:2;;;-1:-1;;3707:12;3671:2;3802:3;34164:2;;3786:6;3782:17;3743:6;3768:32;;3765:41;3762:2;;;-1:-1;;3809:12;3762:2;34164;3739:17;;;;;34308:109;;-1:-1;34126:307;;-1:-1;;;;34126:307::o;34440:799::-;;;;34646:2;34634:9;34625:7;34621:23;34617:32;34614:2;;;-1:-1;;34652:12;34614:2;34710:17;34697:31;-1:-1;;;;;34748:18;34740:6;34737:30;34734:2;;;-1:-1;;34770:12;34734:2;34800:87;34879:7;34870:6;34859:9;34855:22;34800:87;:::i;:::-;34790:97;;34952:2;34941:9;34937:18;34924:32;34910:46;;34748:18;34968:6;34965:30;34962:2;;;-1:-1;;34998:12;34962:2;;35028:87;35107:7;35098:6;35087:9;35083:22;35028:87;:::i;:::-;35018:97;;;35152:2;35195:9;35191:22;25248:20;35160:63;;34608:631;;;;;:::o;35246:425::-;;35399:2;35387:9;35378:7;35374:23;35370:32;35367:2;;;-1:-1;;35405:12;35367:2;35463:17;35450:31;-1:-1;;;;;35493:6;35490:30;35487:2;;;-1:-1;;35523:12;35487:2;35553:102;35647:7;35638:6;35627:9;35623:22;35553:102;:::i;35678:550::-;;;35848:2;35836:9;35827:7;35823:23;35819:32;35816:2;;;-1:-1;;35854:12;35816:2;35912:17;35899:31;-1:-1;;;;;35942:6;35939:30;35936:2;;;-1:-1;;35972:12;35936:2;36002:102;36096:7;36087:6;36076:9;36072:22;36002:102;:::i;:::-;35992:112;;;36141:2;36184:9;36180:22;72:20;97:33;124:5;97:33;:::i;36235:675::-;;;;36422:2;36410:9;36401:7;36397:23;36393:32;36390:2;;;-1:-1;;36428:12;36390:2;36486:17;36473:31;-1:-1;;;;;36516:6;36513:30;36510:2;;;-1:-1;;36546:12;36510:2;36576:102;36670:7;36661:6;36650:9;36646:22;36576:102;:::i;:::-;36566:112;;;36715:2;36758:9;36754:22;72:20;97:33;124:5;97:33;:::i;:::-;36723:63;-1:-1;36823:2;36862:22;;72:20;97:33;72:20;97:33;:::i;36917:390::-;;37056:2;;37044:9;37035:7;37031:23;37027:32;37024:2;;;-1:-1;;37062:12;37024:2;37113:17;37107:24;-1:-1;;;;;37143:6;37140:30;37137:2;;;-1:-1;;37173:12;37137:2;37259:22;;5524:4;5512:17;;5508:27;-1:-1;5498:2;;-1:-1;;5539:12;5498:2;5579:6;5573:13;5601:79;5616:63;5672:6;5616:63;:::i;5601:79::-;5708:21;;;5765:14;;;;5740:17;;;5854;;;5845:27;;;;5842:36;-1:-1;5839:2;;;-1:-1;;5881:12;5839:2;-1:-1;5907:10;;5901:216;5926:6;5923:1;5920:13;5901:216;;;13050:13;;5994:60;;5948:1;5941:9;;;;;6068:14;;;;6096;;5901:216;;37314:909;;;;37575:2;37563:9;37554:7;37550:23;37546:32;37543:2;;;-1:-1;;37581:12;37543:2;37639:17;37626:31;-1:-1;;;;;37677:18;37669:6;37666:30;37663:2;;;-1:-1;;37699:12;37663:2;37818:6;37807:9;37803:22;;;6314:3;6307:4;6299:6;6295:17;6291:27;6281:2;;-1:-1;;6322:12;6281:2;6369:6;6356:20;6391:108;6406:92;6491:6;6406:92;:::i;6391:108::-;6505:16;6541:6;6534:5;6527:21;6571:4;;6588:3;6584:14;6577:21;;6571:4;6563:6;6559:17;6685:6;6695:3;6571:4;6685:6;6677;6673:19;6563:6;6664:29;;6661:38;6658:2;;;-1:-1;;6702:12;6658:2;-1:-1;6728:10;;6722:236;6747:6;6744:1;6741:13;6722:236;;;6827:65;6888:3;6876:10;6827:65;:::i;:::-;6815:78;;6769:1;6762:9;;;;;6907:14;;;;6935:16;;;;6722:236;;;-1:-1;37719:116;;-1:-1;37885:18;;37872:32;;-1:-1;;;;37913:30;;;37910:2;;;-1:-1;;37946:12;37910:2;;37976:105;38073:7;38064:6;38053:9;38049:22;37976:105;:::i;:::-;37966:115;;;38136:71;38199:7;38118:2;38179:9;38175:22;38136:71;:::i;38230:392::-;;38370:2;38358:9;38349:7;38345:23;38341:32;38338:2;;;-1:-1;;38376:12;38338:2;38427:17;38421:24;-1:-1;;;;;38457:6;38454:30;38451:2;;;-1:-1;;38487:12;38451:2;38517:89;38598:7;38589:6;38578:9;38574:22;38517:89;:::i;38629:257::-;;38741:2;38729:9;38720:7;38716:23;38712:32;38709:2;;;-1:-1;;38747:12;38709:2;9367:6;9361:13;9379:30;9403:5;9379:30;:::i;38893:628::-;;;;39049:2;39037:9;39028:7;39024:23;39020:32;39017:2;;;-1:-1;;39055:12;39017:2;9367:6;9361:13;9379:30;9403:5;9379:30;:::i;:::-;39236:2;39221:18;;39215:25;39107:71;;-1:-1;;;;;;39249:30;;39246:2;;;-1:-1;;39282:12;39246:2;39312:74;39378:7;39369:6;39358:9;39354:22;39312:74;:::i;:::-;39302:84;;;39423:2;39477:9;39473:22;25396:13;39431:74;;39011:510;;;;;:::o;39528:263::-;;39643:2;39631:9;39622:7;39618:23;39614:32;39611:2;;;-1:-1;;39649:12;39611:2;-1:-1;9636:13;;39605:186;-1:-1;39605:186::o;39798:360::-;;39922:2;39910:9;39901:7;39897:23;39893:32;39890:2;;;-1:-1;;39928:12;39890:2;39979:17;39973:24;-1:-1;;;;;40009:6;40006:30;40003:2;;;-1:-1;;40039:12;40003:2;40069:73;40134:7;40125:6;40114:9;40110:22;40069:73;:::i;41121:861::-;;;;41358:2;41346:9;41337:7;41333:23;41329:32;41326:2;;;-1:-1;;41364:12;41326:2;12090:6;12077:20;12102:58;12154:5;12102:58;:::i;:::-;41416:88;-1:-1;41569:2;41554:18;;41541:32;-1:-1;;;;;41582:30;;;41579:2;;;-1:-1;;41615:12;41579:2;41645:102;41739:7;41730:6;41719:9;41715:22;41645:102;:::i;41989:261::-;;42103:2;42091:9;42082:7;42078:23;42074:32;42071:2;;;-1:-1;;42109:12;42071:2;12917:6;12911:13;12929:32;12955:5;12929:32;:::i;42257:452::-;;;42415:3;42403:9;42394:7;42390:23;42386:33;42383:2;;;-1:-1;;42422:12;42383:2;12917:6;12911:13;12929:32;12955:5;12929:32;:::i;:::-;42474:73;-1:-1;42602:91;42685:7;42584:2;42661:22;;42602:91;:::i;:::-;42592:101;;42377:332;;;;;:::o;43179:826::-;;;;;43383:9;43374:7;43370:23;43395:3;43370:23;43366:33;43363:2;;;-1:-1;;43402:12;43363:2;13740:4;13719:19;13715:30;13712:2;;;-1:-1;;13748:12;13712:2;;13776:20;13740:4;13776:20;:::i;:::-;13901:22;9488:20;13862:16;13855:75;13992:2;14050:9;14046:22;72:20;97:33;124:5;97:33;:::i;:::-;13992:2;14007:16;;14000:75;14011:5;-1:-1;13740:4;43629:22;;72:20;97:33;72:20;97:33;:::i;:::-;43598:63;-1:-1;43698:2;43737:22;;72:20;97:33;72:20;97:33;:::i;:::-;43706:63;-1:-1;43834:3;43819:19;;43806:33;-1:-1;;;;;43848:30;;43845:2;;;-1:-1;;43881:12;44012:909;;;;;44227:3;44215:9;44206:7;44202:23;44198:33;44195:2;;;-1:-1;;44234:12;44195:2;44292:17;44279:31;-1:-1;;;;;44330:18;44322:6;44319:30;44316:2;;;-1:-1;;44352:12;44316:2;44438:22;;;;14272:4;14251:19;;;14247:30;14244:2;;;-1:-1;;14280:12;14244:2;14308:20;14272:4;14308:20;:::i;:::-;14414:73;14483:3;14459:22;14414:73;:::i;:::-;14396:16;14389:99;14578:2;14567:9;14563:18;14550:32;44330:18;14594:6;14591:30;14588:2;;;-1:-1;;14624:12;14588:2;14669:99;14764:3;14755:6;14744:9;14740:22;14669:99;:::i;:::-;14578:2;14655:5;14651:16;14644:125;;44372:98;;;;44525:53;44570:7;14578:2;44550:9;44546:22;44525:53;:::i;:::-;44515:63;;44633:53;44678:7;14272:4;44658:9;44654:22;44633:53;:::i;:::-;44623:63;;44751:2;44740:9;44736:18;44723:32;44709:46;;44330:18;44767:6;44764:30;44761:2;;;-1:-1;;44797:12;44761:2;;44827:78;44897:7;44888:6;44877:9;44873:22;44827:78;:::i;44928:805::-;;;;;45133:3;45121:9;45112:7;45108:23;45104:33;45101:2;;;-1:-1;;45140:12;45101:2;45202:80;45274:7;45250:22;45202:80;:::i;:::-;45192:90;;45319:2;45361:9;45357:22;12765:20;12790:32;12816:5;12790:32;:::i;:::-;45327:62;-1:-1;45426:3;45465:22;;12765:20;12790:32;12765:20;12790:32;:::i;:::-;45435:62;-1:-1;45562:3;45547:19;;45534:33;-1:-1;;;;;45576:30;;45573:2;;;-1:-1;;45609:12;45740:820;;;;;45941:9;45932:7;45928:23;45953:3;45928:23;45924:33;45921:2;;;-1:-1;;45960:12;45921:2;16408:4;16387:19;16383:30;16380:2;;;-1:-1;;16416:12;16380:2;;16444:20;16408:4;16444:20;:::i;:::-;85:6;72:20;97:33;124:5;97:33;:::i;:::-;16525:75;;16663:2;16717:22;;72:20;97:33;72:20;97:33;:::i;46567:907::-;;;;;46781:3;46769:9;46760:7;46756:23;46752:33;46749:2;;;-1:-1;;46788:12;46749:2;46846:17;46833:31;-1:-1;;;;;46884:18;46876:6;46873:30;46870:2;;;-1:-1;;46906:12;46870:2;46936:87;47015:7;47006:6;46995:9;46991:22;46936:87;:::i;:::-;46926:97;;47060:2;47103:9;47099:22;72:20;63:29;;97:33;124:5;97:33;:::i;:::-;47068:63;;-1:-1;47168:2;47207:22;;72:20;;97:33;72:20;97:33;:::i;:::-;47176:63;;-1:-1;47304:2;47289:18;;47276:32;;47317:30;;;47314:2;;;-1:-1;;47350:12;47481:771;;;;;47670:3;47658:9;47649:7;47645:23;47641:33;47638:2;;;-1:-1;;47677:12;47638:2;47735:17;47722:31;-1:-1;;;;;47765:6;47762:30;47759:2;;;-1:-1;;47795:12;47759:2;47825:87;47904:7;47895:6;47884:9;47880:22;47825:87;:::i;:::-;47815:97;;;47949:2;47992:9;47988:22;72:20;97:33;124:5;97:33;:::i;48259:771::-;;;;;48448:3;48436:9;48427:7;48423:23;48419:33;48416:2;;;-1:-1;;48455:12;48416:2;48513:17;48500:31;-1:-1;;;;;48543:6;48540:30;48537:2;;;-1:-1;;48573:12;48537:2;48603:87;48682:7;48673:6;48662:9;48658:22;48603:87;:::i;:::-;48593:97;;;48727:2;48770:9;48766:22;9488:20;48735:63;;48835:2;48878:9;48874:22;72:20;97:33;124:5;97:33;:::i;:::-;48843:63;-1:-1;48943:2;48982:22;;72:20;97:33;72:20;97:33;:::i;49037:640::-;;;;49248:3;49236:9;49227:7;49223:23;49219:33;49216:2;;;-1:-1;;49255:12;49216:2;49317:81;49390:7;49366:22;49317:81;:::i;:::-;49307:91;;49454:80;49526:7;49435:3;49506:9;49502:22;49454:80;:::i;:::-;49444:90;;49571:3;49633:9;49629:22;11517:20;11542:51;11587:5;11542:51;:::i;49684:815::-;;;;;49882:9;49873:7;49869:23;49894:3;49869:23;49865:33;49862:2;;;-1:-1;;49901:12;49862:2;21223:4;21202:19;21198:30;21195:2;;;-1:-1;;21231:12;21195:2;;21259:20;21223:4;21259:20;:::i;:::-;85:6;72:20;97:33;124:5;97:33;:::i;:::-;21342:75;;21487:2;21541:22;;;9488:20;21502:16;;;21495:75;21642:2;21696:22;;72:20;97:33;72:20;97:33;:::i;:::-;21642:2;21657:16;;21650:75;21661:5;-1:-1;21223:4;50122:22;;72:20;97:33;72:20;97:33;:::i;:::-;50091:63;-1:-1;50191:3;50231:22;;72:20;97:33;72:20;97:33;:::i;50506:585::-;;;;50667:9;50658:7;50654:23;50679:3;50654:23;50650:33;50647:2;;;-1:-1;;50686:12;50647:2;21913:4;21892:19;21888:30;21885:2;;;-1:-1;;21921:12;21885:2;;21949:20;21913:4;21949:20;:::i;:::-;9642:6;9636:13;22038:16;22031:86;22180:2;22265:9;22261:22;12266:13;122519:1;122512:5;122509:12;122499:2;;-1:-1;;122525:12;122499:2;22180;22195:16;;22188:102;22369:2;22434:22;;24979:13;24997:33;24979:13;24997:33;:::i;:::-;22369:2;22384:16;;22377:86;21913:4;50926:22;;24979:13;22388:5;;-1:-1;24997:33;24979:13;24997:33;:::i;:::-;50995:3;51043:22;;9361:13;50884:74;;-1:-1;9379:30;9361:13;9379:30;:::i;51914:261::-;;52028:2;52016:9;52007:7;52003:23;51999:32;51996:2;;;-1:-1;;52034:12;51996:2;25125:6;25119:13;116892:8;123244:5;116881:20;123220:5;123217:34;123207:2;;-1:-1;;123255:12;52452:399;;;52584:2;52572:9;52563:7;52559:23;52555:32;52552:2;;;-1:-1;;52590:12;52552:2;-1:-1;;25396:13;;52753:2;52803:22;;;25396:13;;;;;-1:-1;52546:305::o;52858:672::-;;;;;53024:3;53012:9;53003:7;52999:23;52995:33;52992:2;;;-1:-1;;53031:12;52992:2;-1:-1;;25396:13;;53194:2;53244:22;;25396:13;53313:2;53363:22;;25396:13;53432:2;53482:22;;;25396:13;;;;;-1:-1;25396:13;;-1:-1;52986:544;-1:-1;52986:544::o;53537:809::-;;;;;;53720:3;53708:9;53699:7;53695:23;53691:33;53688:2;;;-1:-1;;53727:12;53688:2;-1:-1;;25396:13;;53890:2;53940:22;;25396:13;54009:2;54059:22;;25396:13;54128:2;54178:22;;25396:13;54247:3;54298:22;;;25396:13;;;;;-1:-1;25396:13;;-1:-1;25396:13;;-1:-1;53682:664;-1:-1;53682:664::o;54916:203::-;-1:-1;;;;;116754:54;64723:65;;55108:4;55099:14;;55011:108::o;55128:277::-;;68057:16;68051:23;62994:3;62987:37;68230:4;68223:5;68219:16;68213:23;68230:4;68294:3;68290:14;62987:37;68393:4;68386:5;68382:16;68376:23;68393:4;68457:3;68453:14;62987:37;68549:4;68542:5;68538:16;68532:23;68549:4;68613:3;68609:14;62987:37;68707:4;68700:5;68696:16;68690:23;67983:4;68707;68737:3;68733:14;68726:38;68779:71;67983:4;67978:3;67974:14;68831:12;68779:71;:::i;56022:127::-;-1:-1;;;;;116754:54;56099:45;;56093:56::o;56417:690::-;;56610:5;110523:12;112660:6;112655:3;112648:19;112697:4;;112692:3;112688:14;56622:93;;112697:4;56786:5;109345:14;-1:-1;56825:260;56850:6;56847:1;56844:13;56825:260;;;56911:13;;-1:-1;;;;;116754:54;56099:45;;54507:14;;;;111729;;;;17698:18;56865:9;56825:260;;;-1:-1;57091:10;;56541:566;-1:-1;;;;;56541:566::o;57146:690::-;;57339:5;110523:12;112660:6;112655:3;112648:19;112697:4;;112692:3;112688:14;57351:93;;112697:4;57515:5;109345:14;-1:-1;57554:260;57579:6;57576:1;57573:13;57554:260;;;57640:13;;62987:37;;54689:14;;;;111729;;;;57601:1;57594:9;57554:260;;63604:323;;63736:5;110523:12;112660:6;112655:3;112648:19;63819:52;63864:6;112697:4;112692:3;112688:14;112697:4;63845:5;63841:16;63819:52;:::i;:::-;120169:7;120153:14;-1:-1;;120149:28;63883:39;;;;112697:4;63883:39;;63684:243;-1:-1;;63684:243::o;69620:678::-;69840:23;;-1:-1;;;;;116754:54;56099:45;;70032:4;70021:16;;;70015:23;-1:-1;;;;;;114813:78;;;70090:14;;;63215:36;;;;70204:4;70193:16;;;70187:23;114813:78;70262:14;;63215:36;69740:558::o;70392:837::-;70617:23;;-1:-1;;;;;116754:54;;;56099:45;;70803:4;70792:16;;;70786:23;114647:13;114640:21;70857:14;;;62769:34;70956:4;70945:16;;;70939:23;116754:54;;;71032:14;;;56099:45;71139:4;71128:16;;;71122:23;114647:13;114640:21;71193:14;;62769:34;70522:707::o;71303:582::-;;71533:16;71527:23;62994:3;62987:37;71704:4;71697:5;71693:16;71687:23;71454:4;71704;71734:3;71730:14;71723:38;71776:71;71454:4;71449:3;71445:14;71828:12;71776:71;:::i;71975:1073::-;;72225:16;72219:23;62994:3;62987:37;72397:4;72390:5;72386:16;72380:23;17698:18;;116765:42;;;;114457:5;116754:54;72397:4;72461:3;72457:14;56099:45;116765:42;72559:4;72552:5;72548:16;72542:23;116754:54;72559:4;72623:3;72619:14;56099:45;116765:42;72713:4;72706:5;72702:16;72696:23;116754:54;72713:4;72777:3;72773:14;56099:45;;;72867:4;72860:5;72856:16;72850:23;72144:4;72867;72897:3;72893:14;72886:38;72939:71;72144:4;72139:3;72135:14;72991:12;72939:71;:::i;73120:2141::-;73372:87;73444:14;73349:16;73343:23;73372:87;:::i;:::-;73544:4;73537:5;73533:16;73527:23;73556:87;73544:4;73632:3;73628:14;73614:12;73556:87;:::i;:::-;;73729:4;73722:5;73718:16;73712:23;73741:63;73729:4;73793:3;73789:14;73775:12;73741:63;:::i;:::-;;73890:4;73883:5;73879:16;73873:23;73902:63;73890:4;73954:3;73950:14;73936:12;73902:63;:::i;:::-;;74059:4;74052:5;74048:16;74042:23;74071:63;74059:4;74123:3;74119:14;74105:12;74071:63;:::i;:::-;;74214:4;74207:5;74203:16;74197:23;74226:63;74214:4;74278:3;74274:14;74260:12;74226:63;:::i;:::-;;74369:4;74362:5;74358:16;74352:23;74381:63;74369:4;74433:3;74429:14;74415:12;74381:63;:::i;:::-;;74525:4;74518:5;74514:16;74508:23;74537:63;74525:4;74589:3;74585:14;74571:12;74537:63;:::i;:::-;;74687:6;;74680:5;74676:18;74670:25;74701:65;74687:6;74753:3;74749:16;74735:12;74701:65;:::i;:::-;-1:-1;;74845:6;74834:18;;;74828:25;74907:16;;;62987:37;75005:6;74994:18;;;74988:25;75019:63;75065:16;;;74988:25;75019:63;:::i;:::-;-1:-1;;75161:6;75150:18;;;75144:25;75223:16;;62987:37;73242:2019::o;75331:800::-;75559:16;75553:23;115720:54;115768:5;115720:54;:::i;:::-;65941:66;;75737:4;75726:16;;;75720:23;117166:4;117155:16;75793:14;;;77525:35;75884:4;75873:16;;;75867:23;75944:14;;;62987:37;76035:4;76024:16;;;76018:23;76095:14;;62987:37;75451:680::o;76904:103::-;-1:-1;;;;;116634:46;76965:37;;76959:48::o;77361:100::-;-1:-1;;;;;117053:30;77420:36;;77414:47::o;77572:291::-;;119736:6;119731:3;119726;119713:30;119774:16;;119767:27;;;119774:16;77716:147;-1:-1;77716:147::o;77870:271::-;;64444:5;110523:12;64555:52;64600:6;64595:3;64588:4;64581:5;64577:16;64555:52;:::i;:::-;64619:16;;;;;78004:137;-1:-1;;78004:137::o;78148:222::-;-1:-1;;;;;116754:54;;;;56099:45;;78275:2;78260:18;;78246:124::o;78377:349::-;-1:-1;;;;;116754:54;;;;55952:58;;78712:2;78697:18;;62987:37;78540:2;78525:18;;78511:215::o;78733:333::-;-1:-1;;;;;116754:54;;;56099:45;;116754:54;;79052:2;79037:18;;56099:45;78888:2;78873:18;;78859:207::o;79073:556::-;-1:-1;;;;;116754:54;;;56099:45;;116754:54;;;79449:2;79434:18;;56099:45;116754:54;;;79532:2;79517:18;;56099:45;116754:54;;;79615:2;79600:18;;56099:45;79284:3;79269:19;;79255:374::o;79636:704::-;-1:-1;;;;;116754:54;;;56099:45;;116754:54;;;80062:2;80047:18;;56099:45;116754:54;;80145:2;80130:18;;56099:45;79897:3;80182:2;80167:18;;80160:48;;;79636:704;;80222:108;;79882:19;;80316:6;80222:108;:::i;80347:556::-;-1:-1;;;;;116754:54;;;56099:45;;116754:54;;;80723:2;80708:18;;56099:45;116754:54;;80806:2;80791:18;;56099:45;80889:2;80874:18;;62987:37;;;;80558:3;80543:19;;80529:374::o;80910:432::-;-1:-1;;;;;116754:54;;;56099:45;;116754:54;;;;81251:2;81236:18;;56099:45;114647:13;;114640:21;81328:2;81313:18;;62769:34;81087:2;81072:18;;81058:284::o;81349:628::-;-1:-1;;;;;116754:54;;;56099:45;;116754:54;;81737:2;81722:18;;56099:45;114647:13;;114640:21;81814:2;81799:18;;62769:34;81572:3;81851:2;81836:18;;81829:48;;;81349:628;;81891:76;;81557:19;;81953:6;81891:76;:::i;81984:444::-;-1:-1;;;;;116754:54;;;56099:45;;116754:54;;;;82331:2;82316:18;;56099:45;82414:2;82399:18;;62987:37;;;;82167:2;82152:18;;82138:290::o;82435:768::-;-1:-1;;;;;116754:54;;;56099:45;;116754:54;;82865:2;82850:18;;56099:45;82948:2;82933:18;;62987:37;;;83039:2;83024:18;;66527:58;;;116765:42;83076:3;83061:19;;83054:49;;;82435:768;;83117:76;;82685:19;;83179:6;83117:76;:::i;:::-;83109:84;82671:532;-1:-1;;;;;;;82671:532::o;83210:740::-;-1:-1;;;;;116754:54;;56099:45;;83493:2;83611;83596:18;;83589:48;;;83210:740;;83651:108;;83478:18;;83745:6;83651:108;:::i;:::-;83807:9;83801:4;83797:20;83792:2;83781:9;83777:18;83770:48;83832:108;83935:4;83926:6;83832:108;:::i;83957:876::-;-1:-1;;;;;116754:54;;56099:45;;83957:876;115720:54;115768:5;115720:54;:::i;:::-;119238:38;84457:2;84446:9;84442:18;66257:62;84280:3;84494:2;84483:9;84479:18;84472:48;84534:108;84280:3;84269:9;84265:19;84628:6;84534:108;:::i;:::-;84690:9;84684:4;84680:20;84675:2;84664:9;84660:18;84653:48;84715:108;84818:4;84809:6;84715:108;:::i;84840:1644::-;-1:-1;;;;;116754:54;;;56099:45;;84840:1644;;85387:3;;115720:54;115768:5;115720:54;:::i;:::-;119238:38;85564:2;85553:9;85549:18;66257:62;85387:3;85601:2;85590:9;85586:18;85579:48;85641:108;85387:3;85376:9;85372:19;85735:6;85641:108;:::i;:::-;85633:116;;85797:9;85791:4;85787:20;85782:2;85771:9;85767:18;85760:48;85822:108;85925:4;85916:6;85822:108;:::i;:::-;116754:54;;;86009:3;85994:19;;56099:45;85814:116;-1:-1;115720:54;115768:5;115720:54;:::i;:::-;119238:38;86105:3;86094:9;86090:19;66257:62;86159:9;86153:4;86149:20;86143:3;86132:9;86128:19;86121:49;86184:108;86287:4;86278:6;86184:108;:::i;:::-;86176:116;;86341:9;86335:4;86331:20;86325:3;86314:9;86310:19;86303:49;86366:108;86469:4;86460:6;86366:108;:::i;:::-;86358:116;85358:1126;-1:-1;;;;;;;;;;;85358:1126::o;86491:517::-;-1:-1;;;;;116754:54;;56099:45;;86714:2;86832;86817:18;;86810:48;;;86491:517;;86872:126;;86699:18;;86984:6;86872:126;:::i;87355:481::-;;87560:2;87581:17;87574:47;87635:108;87560:2;87549:9;87545:18;87729:6;87635:108;:::i;:::-;87627:116;;63017:5;87822:2;87811:9;87807:18;62987:37;87531:305;;;;;:::o;87843:665::-;;88116:2;88105:9;88101:18;88116:2;88137:17;88130:47;88191:126;58091:5;110523:12;112660:6;112655:3;112648:19;112688:14;88105:9;112688:14;58103:102;;112697:4;;;112688:14;112697:4;58262:6;58258:17;88105:9;58249:27;;112697:4;58356:5;109345:14;-1:-1;58395:357;58420:6;58417:1;58414:13;58395:357;;;58472:20;;88105:9;58476:4;58472:20;;58467:3;58460:33;54837:64;54897:3;58527:6;58521:13;54837:64;:::i;:::-;58731:14;;;;58541:90;-1:-1;111729:14;;;;58442:1;58435:9;58395:357;;;58399:14;;88365:9;88359:4;88355:20;112697:4;88339:9;88335:18;88328:48;88390:108;88493:4;88484:6;88390:108;:::i;88515:486::-;88750:2;88764:47;;;110523:12;;88735:18;;;112648:19;;;88515:486;;88750:2;112688:14;;;;;;61364:17;;;61355:27;;;;109345:14;;;88515:486;61521:417;61546:6;61543:1;61540:13;61521:417;;;61598:20;;;-1:-1;;61598:20;61586:33;;61647:13;;69195:23;;69231:38;;;69284:71;69120:14;;;69195:23;69284:71;:::i;:::-;69432:16;;;69426:23;114647:13;114640:21;69497:14;;;62769:34;;;;61917:14;;;;69276:79;-1:-1;111729:14;;;;61568:1;61561:9;61521:417;;;-1:-1;88817:174;;88721:280;-1:-1;;;;;;;;88721:280::o;89008:370::-;;89185:2;89206:17;89199:47;89260:108;89185:2;89174:9;89170:18;89354:6;89260:108;:::i;89385:210::-;114647:13;;114640:21;62769:34;;89506:2;89491:18;;89477:118::o;89602:580::-;114647:13;;114640:21;62769:34;;-1:-1;;;;;116754:54;;89987:2;89972:18;;56099:45;89829:2;90024;90009:18;;90002:48;;;89602:580;;90064:108;;89814:18;;90158:6;90064:108;:::i;90189:222::-;62987:37;;;90316:2;90301:18;;90287:124::o;90418:676::-;;63017:5;62994:3;62987:37;90669:2;90787;90776:9;90772:18;90765:48;90827:76;90669:2;90658:9;90654:18;90889:6;90827:76;:::i;91101:306::-;;91246:2;91267:17;91260:47;91321:76;91246:2;91235:9;91231:18;91383:6;91321:76;:::i;91414:417::-;;91587:2;91608:17;91601:47;91662:76;91587:2;91576:9;91572:18;91724:6;91662:76;:::i;91838:536::-;-1:-1;;;;;116754:54;;;64723:65;;116754:54;;;;92279:2;92264:18;;64723:65;116892:8;116881:20;;;92360:2;92345:18;;77083:36;92067:2;92052:18;;92038:336::o;92928:519::-;-1:-1;;;;;116754:54;;64723:65;;93152:2;93289;93274:18;;93267:48;;;92928:519;;93329:108;;93137:18;;93423:6;93329:108;:::i;93454:482::-;93656:2;93641:18;;115720:54;115768:5;115720:54;:::i;:::-;65582:69;;;93839:2;93824:18;;62987:37;;;;93922:2;93907:18;;;62987:37;93627:309;:::o;93943:512::-;94160:2;94145:18;;120414:1;120404:12;;120394:2;;120420:9;94462:1156;;94925:3;94914:9;94910:19;116201:46;116241:5;116201:46;:::i;:::-;119098:37;66108:3;66101:61;95055:2;94925:3;95055:2;95044:9;95040:18;95033:48;95095:170;59988:5;110523:12;60007:117;60117:6;60112:3;60007:117;:::i;:::-;60000:124;;;;;95055:2;60181:6;60177:17;60172:3;60168:27;95055:2;60297:5;109345:14;-1:-1;60336:423;60361:6;60358:1;60355:13;60336:423;;;60423:9;60417:4;60413:20;60408:3;60401:33;60490:126;60611:4;60468:6;60462:13;60490:126;:::i;:::-;60738:14;;;;60482:134;-1:-1;111729:14;;;;60383:1;60376:9;60336:423;;;60340:14;;95313:9;95307:4;95303:20;95298:2;95287:9;95283:18;95276:48;95338:123;;;59061:5;110523:12;58984:83;;59080:86;59159:6;59154:3;59080:86;:::i;:::-;59073:93;;;;95055:2;59252:5;109345:14;-1:-1;59291:290;59316:6;59313:1;59310:13;59291:290;;;59404:78;59478:3;59383:6;59377:13;59404:78;:::i;:::-;59397:85;-1:-1;111729:14;;;;60383:1;59331:9;59291:290;;;59295:14;;;;95330:131;;;;95472:136;95604:2;95593:9;95589:18;95580:6;95472:136;:::i;95625:436::-;116472:2;116461:21;;;66400:36;;116461:21;;;;95964:2;95949:18;;66400:36;96047:2;96032:18;;62987:37;;;;95804:2;95789:18;;95775:286::o;96068:438::-;116472:2;116461:21;;;66400:36;;96275:3;96260:19;;96370:126;96492:2;96477:18;;96468:6;96370:126;:::i;96966:416::-;97166:2;97180:47;;;66822:2;97151:18;;;112648:19;66858:34;112688:14;;;66838:55;-1:-1;;;66913:12;;;66906:28;66953:12;;;97137:245::o;97389:416::-;97589:2;97603:47;;;67204:2;97574:18;;;112648:19;67240:34;112688:14;;;67220:55;-1:-1;;;67295:12;;;67288:29;67336:12;;;97560:245::o;97812:416::-;98012:2;98026:47;;;67587:2;97997:18;;;112648:19;67623:34;112688:14;;;67603:55;-1:-1;;;67678:12;;;67671:29;67719:12;;;97983:245::o;98235:806::-;;98561:125;98668:17;98659:6;98561:125;:::i;:::-;66429:5;116472:2;116461:21;98763:2;98752:9;98748:18;66400:36;66429:5;116472:2;116461:21;98844:3;98833:9;98829:19;66400:36;98546:3;98882;98871:9;98867:19;98860:49;98923:108;98546:3;98535:9;98531:19;99017:6;98923:108;:::i;99048:740::-;;99331:2;99352:17;99345:47;99406:108;99331:2;99320:9;99316:18;99500:6;99406:108;:::i;:::-;99562:9;99556:4;99552:20;99547:2;99536:9;99532:18;99525:48;99587:108;99690:4;99681:6;99587:108;:::i;:::-;99579:116;;;63017:5;99774:2;99763:9;99759:18;62987:37;99302:486;;;;;;:::o;99795:740::-;;100074:3;100096:17;100089:47;100150:126;100074:3;100063:9;100059:19;100262:6;100150:126;:::i;:::-;-1:-1;;;;;116754:54;;;100355:2;100340:18;;56099:45;116754:54;;;;100438:2;100423:18;;56099:45;100521:2;100506:18;62987:37;100142:134;100045:490;-1:-1;;100045:490::o;100542:740::-;;100821:3;100843:17;100836:47;100897:126;100821:3;100810:9;100806:19;101009:6;100897:126;:::i;:::-;101102:2;101087:18;;62987:37;;;;-1:-1;;;;;;116754:54;;;101185:2;101170:18;;56099:45;116754:54;;101268:2;101253:18;;;56099:45;100889:134;100792:490;-1:-1;100792:490::o;101289:555::-;101554:3;101539:19;;101569:127;101543:9;101669:6;101569:127;:::i;:::-;101707;101829:3;101818:9;101814:19;101805:6;101707:127;:::i;101851:703::-;102162:3;102147:19;;102177:127;102151:9;102277:6;102177:127;:::i;:::-;102315;102437:3;102426:9;102422:19;102413:6;102315:127;:::i;:::-;-1:-1;;;;;116754:54;;;;102539:3;102524:19;;;;64723:65;102133:421;;-1:-1;;102133:421::o;103611:481::-;;63017:5;62994:3;62987:37;103816:2;103934;103923:9;103919:18;103912:48;103974:108;103816:2;103805:9;103801:18;104068:6;103974:108;:::i;104099:780::-;62987:37;;;104531:2;104516:18;;62987:37;;;;104614:2;104599:18;;62987:37;;;;104697:2;104682:18;;62987:37;104780:3;104765:19;;62987:37;104864:3;104849:19;;62987:37;104366:3;104351:19;;104337:542::o;104886:506::-;;;105021:11;105008:25;105072:48;;105096:8;105080:14;105076:29;105072:48;105052:18;105048:73;105038:2;;-1:-1;;105125:12;105038:2;105152:33;;105206:18;;;-1:-1;;;;;;105233:30;;105230:2;;;-1:-1;;105266:12;105230:2;105111:4;105294:13;;-1:-1;105080:14;105326:38;;;105316:49;;105313:2;;;105378:1;;105368:12;105313:2;104976:416;;;;;:::o;105399:256::-;105461:2;105455:9;105487:17;;;-1:-1;;;;;105547:34;;105583:22;;;105544:62;105541:2;;;105619:1;;105609:12;105541:2;105461;105628:22;105439:216;;-1:-1;105439:216::o;105662:304::-;;-1:-1;;;;;105813:6;105810:30;105807:2;;;-1:-1;;105843:12;105807:2;-1:-1;105888:4;105876:17;;;105941:15;;105744:222::o;108573:321::-;;-1:-1;;;;;108708:6;108705:30;108702:2;;;-1:-1;;108738:12;108702:2;-1:-1;120169:7;108792:17;-1:-1;;108788:33;108879:4;108869:15;;108639:255::o;119809:268::-;119874:1;119881:101;119895:6;119892:1;119889:13;119881:101;;;119962:11;;;119956:18;119943:11;;;119936:39;119917:2;119910:10;119881:101;;;119997:6;119994:1;119991:13;119988:2;;;119874:1;120053:6;120048:3;120044:16;120037:27;119988:2;;119858:219;;;:::o;120190:112::-;120280:1;120273:5;120270:12;120260:2;;120286:9;120260:2;120254:48;:::o;120559:104::-;120641:1;120634:5;120631:12;120621:2;;120647:9;120782:117;-1:-1;;;;;116754:54;;120841:35;;120831:2;;120890:1;;120880:12;121046:111;121127:5;114647:13;114640:21;121105:5;121102:32;121092:2;;121148:1;;121138:12;121288:115;-1:-1;;;;;;114813:78;;121346:34;;121336:2;;121394:1;;121384:12;122791:115;122876:5;116472:2;116461:21;122852:5;122849:34;122839:2;;122897:1;;122887:12;123035:117;-1:-1;;;;;123122:5;116634:46;123097:5;123094:35;123084:2;;123143:1;;123133:12"
            }
        }
    },
    "sourceTreeHashHex": "0xe71ce61a319963e264a389fd0fbebf88cefefa28abd2fb6be9cbc12f49655593",
    "sources": {
        "./ERC20BridgeSampler.sol": {
            "id": 8,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./BalancerSampler.sol\";\nimport \"./BalancerV2Sampler.sol\";\nimport \"./BancorSampler.sol\";\nimport \"./CurveSampler.sol\";\nimport \"./DODOSampler.sol\";\nimport \"./DODOV2Sampler.sol\";\nimport \"./Eth2DaiSampler.sol\";\nimport \"./KyberSampler.sol\";\nimport \"./LiquidityProviderSampler.sol\";\nimport \"./MakerPSMSampler.sol\";\nimport \"./MultiBridgeSampler.sol\";\nimport \"./MStableSampler.sol\";\nimport \"./MooniswapSampler.sol\";\nimport \"./NativeOrderSampler.sol\";\nimport \"./ShellSampler.sol\";\nimport \"./SmoothySampler.sol\";\nimport \"./TwoHopSampler.sol\";\nimport \"./UniswapSampler.sol\";\nimport \"./UniswapV2Sampler.sol\";\nimport \"./UniswapV3Sampler.sol\";\nimport \"./UtilitySampler.sol\";\n\n\ncontract ERC20BridgeSampler is\n    BalancerSampler,\n    BalancerV2Sampler,\n    BancorSampler,\n    CurveSampler,\n    DODOSampler,\n    DODOV2Sampler,\n    Eth2DaiSampler,\n    KyberSampler,\n    LiquidityProviderSampler,\n    MakerPSMSampler,\n    MStableSampler,\n    MooniswapSampler,\n    MultiBridgeSampler,\n    NativeOrderSampler,\n    ShellSampler,\n    SmoothySampler,\n    TwoHopSampler,\n    UniswapSampler,\n    UniswapV2Sampler,\n    UniswapV3Sampler,\n    UtilitySampler\n{\n\n    struct CallResults {\n        bytes data;\n        bool success;\n    }\n\n    /// @dev Call multiple public functions on this contract in a single transaction.\n    /// @param callDatas ABI-encoded call data for each function call.\n    /// @return callResults ABI-encoded results data for each call.\n    function batchCall(bytes[] calldata callDatas)\n        external\n        returns (CallResults[] memory callResults)\n    {\n        callResults = new CallResults[](callDatas.length);\n        for (uint256 i = 0; i != callDatas.length; ++i) {\n            callResults[i].success = true;\n            if (callDatas[i].length == 0) {\n                continue;\n            }\n            (callResults[i].success, callResults[i].data) = address(this).call(callDatas[i]);\n        }\n    }\n}\n"
        },
        "./BalancerSampler.sol": {
            "id": 2,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IBalancer.sol\";\n\n\ncontract BalancerSampler {\n\n    /// @dev Base gas limit for Balancer calls.\n    uint256 constant private BALANCER_CALL_GAS = 300e3; // 300k\n\n    // Balancer math constants\n    // https://github.com/balancer-labs/balancer-core/blob/master/contracts/BConst.sol\n    uint256 constant private BONE = 10 ** 18;\n    uint256 constant private MAX_IN_RATIO = BONE / 2;\n    uint256 constant private MAX_OUT_RATIO = (BONE / 3) + 1 wei;\n\n    struct BalancerState {\n        uint256 takerTokenBalance;\n        uint256 makerTokenBalance;\n        uint256 takerTokenWeight;\n        uint256 makerTokenWeight;\n        uint256 swapFee;\n    }\n\n    /// @dev Sample sell quotes from Balancer.\n    /// @param poolAddress Address of the Balancer pool to query.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromBalancer(\n        address poolAddress,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        IBalancer pool = IBalancer(poolAddress);\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        if (!pool.isBound(takerToken) || !pool.isBound(makerToken)) {\n            return makerTokenAmounts;\n        }\n\n        BalancerState memory poolState;\n        poolState.takerTokenBalance = pool.getBalance(takerToken);\n        poolState.makerTokenBalance = pool.getBalance(makerToken);\n        poolState.takerTokenWeight = pool.getDenormalizedWeight(takerToken);\n        poolState.makerTokenWeight = pool.getDenormalizedWeight(makerToken);\n        poolState.swapFee = pool.getSwapFee();\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            // Handles this revert scenario:\n            // https://github.com/balancer-labs/balancer-core/blob/master/contracts/BPool.sol#L443\n            if (takerTokenAmounts[i] > _bmul(poolState.takerTokenBalance, MAX_IN_RATIO)) {\n                break;\n            }\n            try\n                pool.calcOutGivenIn\n                    {gas: BALANCER_CALL_GAS}\n                    (\n                        poolState.takerTokenBalance,\n                        poolState.takerTokenWeight,\n                        poolState.makerTokenBalance,\n                        poolState.makerTokenWeight,\n                        takerTokenAmounts[i],\n                        poolState.swapFee\n                    )\n                returns (uint256 amount)\n            {\n                makerTokenAmounts[i] = amount;\n                // Break early if there are 0 amounts\n                if (makerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from Balancer.\n    /// @param poolAddress Address of the Balancer pool to query.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromBalancer(\n        address poolAddress,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        IBalancer pool = IBalancer(poolAddress);\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n        if (!pool.isBound(takerToken) || !pool.isBound(makerToken)) {\n            return takerTokenAmounts;\n        }\n\n        BalancerState memory poolState;\n        poolState.takerTokenBalance = pool.getBalance(takerToken);\n        poolState.makerTokenBalance = pool.getBalance(makerToken);\n        poolState.takerTokenWeight = pool.getDenormalizedWeight(takerToken);\n        poolState.makerTokenWeight = pool.getDenormalizedWeight(makerToken);\n        poolState.swapFee = pool.getSwapFee();\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            // Handles this revert scenario:\n            // https://github.com/balancer-labs/balancer-core/blob/master/contracts/BPool.sol#L505\n            if (makerTokenAmounts[i] > _bmul(poolState.makerTokenBalance, MAX_OUT_RATIO)) {\n                break;\n            }\n            try\n                pool.calcInGivenOut\n                    {gas: BALANCER_CALL_GAS}\n                    (\n                        poolState.takerTokenBalance,\n                        poolState.takerTokenWeight,\n                        poolState.makerTokenBalance,\n                        poolState.makerTokenWeight,\n                        makerTokenAmounts[i],\n                        poolState.swapFee\n                    )\n                returns (uint256 amount)\n            {\n                takerTokenAmounts[i] = amount;\n                // Break early if there are 0 amounts\n                if (takerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    /// @dev Hacked version of Balancer's `bmul` function, returning 0 instead\n    ///      of reverting.\n    ///      https://github.com/balancer-labs/balancer-core/blob/master/contracts/BNum.sol#L63-L73\n    /// @param a The first operand.\n    /// @param b The second operand.\n    /// @param c The result of the multiplication, or 0 if `bmul` would've reverted.\n    function _bmul(uint256 a, uint256 b)\n        private\n        pure\n        returns (uint256 c)\n    {\n        uint c0 = a * b;\n        if (a != 0 && c0 / a != b) {\n            return 0;\n        }\n        uint c1 = c0 + (BONE / 2);\n        if (c1 < c0) {\n            return 0;\n        }\n        uint c2 = c1 / BONE;\n        return c2;\n    }\n}\n"
        },
        "./interfaces/IBalancer.sol": {
            "id": 26,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface IBalancer {\n    function isBound(address t) external view returns (bool);\n    function getDenormalizedWeight(address token) external view returns (uint256);\n    function getBalance(address token) external view returns (uint256);\n    function getSwapFee() external view returns (uint256);\n    function calcOutGivenIn(\n        uint256 tokenBalanceIn,\n        uint256 tokenWeightIn,\n        uint256 tokenBalanceOut,\n        uint256 tokenWeightOut,\n        uint256 tokenAmountIn,\n        uint256 swapFee\n    ) external pure returns (uint256 tokenAmountOut);\n    function calcInGivenOut(\n        uint256 tokenBalanceIn,\n        uint256 tokenWeightIn,\n        uint256 tokenBalanceOut,\n        uint256 tokenWeightOut,\n        uint256 tokenAmountOut,\n        uint256 swapFee\n    ) external pure returns (uint256 tokenAmountIn);\n}\n"
        },
        "./BalancerV2Sampler.sol": {
            "id": 3,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./SamplerUtils.sol\";\n\n/// @dev Minimal Balancer V2 Vault interface\n///      for documentation refer to https://github.com/balancer-labs/balancer-core-v2/blob/master/contracts/vault/interfaces/IVault.sol\ninterface IBalancerV2Vault {\n    enum SwapKind { GIVEN_IN, GIVEN_OUT }\n\n    struct BatchSwapStep {\n        bytes32 poolId;\n        uint256 assetInIndex;\n        uint256 assetOutIndex;\n        uint256 amount;\n        bytes userData;\n    }\n\n    struct FundManagement {\n        address sender;\n        bool fromInternalBalance;\n        address payable recipient;\n        bool toInternalBalance;\n    }\n\n    function queryBatchSwap(\n        SwapKind kind,\n        BatchSwapStep[] calldata swaps,\n        IAsset[] calldata assets,\n        FundManagement calldata funds\n    ) external returns (int256[] memory assetDeltas);\n}\ninterface IAsset {\n    // solhint-disable-previous-line no-empty-blocks\n}\n\ncontract BalancerV2Sampler is SamplerUtils {\n\n    struct BalancerV2PoolInfo {\n        bytes32 poolId;\n        address vault;\n    }\n\n    /// @dev Sample sell quotes from Balancer V2.\n    /// @param poolInfo Struct with pool related data\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromBalancerV2(\n        BalancerV2PoolInfo memory poolInfo,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        IBalancerV2Vault vault = IBalancerV2Vault(poolInfo.vault);\n        IAsset[] memory swapAssets = new IAsset[](2);\n        swapAssets[0] = IAsset(takerToken);\n        swapAssets[1] = IAsset(makerToken);\n\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        IBalancerV2Vault.FundManagement memory swapFunds =\n            _createSwapFunds();\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            IBalancerV2Vault.BatchSwapStep[] memory swapSteps =\n                _createSwapSteps(poolInfo, takerTokenAmounts[i]);\n\n            try\n                // For sells we specify the takerToken which is what the vault will receive from the trade\n                vault.queryBatchSwap(IBalancerV2Vault.SwapKind.GIVEN_IN, swapSteps, swapAssets, swapFunds)\n            // amounts represent pool balance deltas from the swap (incoming balance, outgoing balance)\n            returns (int256[] memory amounts) {\n                // Outgoing balance is negative so we need to flip the sign\n                int256 amountOutFromPool = amounts[1] * -1;\n                if (amountOutFromPool <= 0) {\n                    break;\n                }\n                makerTokenAmounts[i] = uint256(amountOutFromPool);\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from Balancer V2.\n    /// @param poolInfo Struct with pool related data\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromBalancerV2(\n        BalancerV2PoolInfo memory poolInfo,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        IBalancerV2Vault vault = IBalancerV2Vault(poolInfo.vault);\n        IAsset[] memory swapAssets = new IAsset[](2);\n        swapAssets[0] = IAsset(takerToken);\n        swapAssets[1] = IAsset(makerToken);\n\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n        IBalancerV2Vault.FundManagement memory swapFunds =\n            _createSwapFunds();\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            IBalancerV2Vault.BatchSwapStep[] memory swapSteps =\n                _createSwapSteps(poolInfo, makerTokenAmounts[i]);\n\n            try\n                // For buys we specify the makerToken which is what taker will receive from the trade\n                vault.queryBatchSwap(IBalancerV2Vault.SwapKind.GIVEN_OUT, swapSteps, swapAssets, swapFunds)\n            returns (int256[] memory amounts) {\n                int256 amountIntoPool = amounts[0];\n                if (amountIntoPool <= 0) {\n                    break;\n                }\n                takerTokenAmounts[i] = uint256(amountIntoPool);\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    function _createSwapSteps(\n        BalancerV2PoolInfo memory poolInfo,\n        uint256 amount\n    ) private pure returns (IBalancerV2Vault.BatchSwapStep[] memory) {\n        IBalancerV2Vault.BatchSwapStep[] memory swapSteps =\n            new IBalancerV2Vault.BatchSwapStep[](1);\n        swapSteps[0] = IBalancerV2Vault.BatchSwapStep({\n            poolId: poolInfo.poolId,\n            assetInIndex: 0,\n            assetOutIndex: 1,\n            amount: amount,\n            userData: \"\"\n        });\n\n        return swapSteps;\n    }\n\n    function _createSwapFunds()\n        private\n        view\n        returns (IBalancerV2Vault.FundManagement memory)\n    {\n        return\n            IBalancerV2Vault.FundManagement({\n                sender: address(this),\n                fromInternalBalance: false,\n                recipient: payable(address(this)),\n                toInternalBalance: false\n            });\n    }\n}\n"
        },
        "./SamplerUtils.sol": {
            "id": 18,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\n\n\ncontract SamplerUtils {\n\n    /// @dev Overridable way to get token decimals.\n    /// @param tokenAddress Address of the token.\n    /// @return decimals The decimal places for the token.\n    function _getTokenDecimals(address tokenAddress)\n        virtual\n        internal\n        view\n        returns (uint8 decimals)\n    {\n        return LibERC20TokenV06.compatDecimals(IERC20TokenV06(tokenAddress));\n    }\n\n    function _toSingleValueArray(uint256 v)\n        internal\n        pure\n        returns (uint256[] memory arr)\n    {\n        arr = new uint256[](1);\n        arr[0] = v;\n    }\n\n    /// @dev Assert that the tokens in a trade pair are valid.\n    /// @param makerToken Address of the maker token.\n    /// @param takerToken Address of the taker token.\n    function _assertValidPair(address makerToken, address takerToken)\n        internal\n        pure\n    {\n        require(makerToken != takerToken, \"ERC20BridgeSampler/INVALID_TOKEN_PAIR\");\n    }\n}\n"
        },
        "@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol": {
            "id": 42,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol\";\nimport \"./IERC20TokenV06.sol\";\n\n\nlibrary LibERC20TokenV06 {\n    bytes constant private DECIMALS_CALL_DATA = hex\"313ce567\";\n\n    /// @dev Calls `IERC20TokenV06(token).approve()`.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param spender The address that receives an allowance.\n    /// @param allowance The allowance to set.\n    function compatApprove(\n        IERC20TokenV06 token,\n        address spender,\n        uint256 allowance\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.approve.selector,\n            spender,\n            allowance\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).approve()` and sets the allowance to the\n    ///      maximum if the current approval is not already >= an amount.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param spender The address that receives an allowance.\n    /// @param amount The minimum allowance needed.\n    function approveIfBelow(\n        IERC20TokenV06 token,\n        address spender,\n        uint256 amount\n    )\n        internal\n    {\n        if (token.allowance(address(this), spender) < amount) {\n            compatApprove(token, spender, uint256(-1));\n        }\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).transfer()`.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param to The address that receives the tokens\n    /// @param amount Number of tokens to transfer.\n    function compatTransfer(\n        IERC20TokenV06 token,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.transfer.selector,\n            to,\n            amount\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).transferFrom()`.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param from The owner of the tokens.\n    /// @param to The address that receives the tokens\n    /// @param amount Number of tokens to transfer.\n    function compatTransferFrom(\n        IERC20TokenV06 token,\n        address from,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.transferFrom.selector,\n            from,\n            to,\n            amount\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Retrieves the number of decimals for a token.\n    ///      Returns `18` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @return tokenDecimals The number of decimals places for the token.\n    function compatDecimals(IERC20TokenV06 token)\n        internal\n        view\n        returns (uint8 tokenDecimals)\n    {\n        tokenDecimals = 18;\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(DECIMALS_CALL_DATA);\n        if (didSucceed && resultData.length >= 32) {\n            tokenDecimals = uint8(LibBytesV06.readUint256(resultData, 0));\n        }\n    }\n\n    /// @dev Retrieves the allowance for a token, owner, and spender.\n    ///      Returns `0` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @param owner The owner of the tokens.\n    /// @param spender The address the spender.\n    /// @return allowance_ The allowance for a token, owner, and spender.\n    function compatAllowance(IERC20TokenV06 token, address owner, address spender)\n        internal\n        view\n        returns (uint256 allowance_)\n    {\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(\n            abi.encodeWithSelector(\n                token.allowance.selector,\n                owner,\n                spender\n            )\n        );\n        if (didSucceed && resultData.length >= 32) {\n            allowance_ = LibBytesV06.readUint256(resultData, 0);\n        }\n    }\n\n    /// @dev Retrieves the balance for a token owner.\n    ///      Returns `0` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @param owner The owner of the tokens.\n    /// @return balance The token balance of an owner.\n    function compatBalanceOf(IERC20TokenV06 token, address owner)\n        internal\n        view\n        returns (uint256 balance)\n    {\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(\n            abi.encodeWithSelector(\n                token.balanceOf.selector,\n                owner\n            )\n        );\n        if (didSucceed && resultData.length >= 32) {\n            balance = LibBytesV06.readUint256(resultData, 0);\n        }\n    }\n\n    /// @dev Check if the data returned by a non-static call to an ERC20 token\n    ///      is a successful result. Supported functions are `transfer()`,\n    ///      `transferFrom()`, and `approve()`.\n    /// @param resultData The raw data returned by a non-static call to the ERC20 token.\n    /// @return isSuccessful Whether the result data indicates success.\n    function isSuccessfulResult(bytes memory resultData)\n        internal\n        pure\n        returns (bool isSuccessful)\n    {\n        if (resultData.length == 0) {\n            return true;\n        }\n        if (resultData.length >= 32) {\n            uint256 result = LibBytesV06.readUint256(resultData, 0);\n            if (result == 1) {\n                return true;\n            }\n        }\n    }\n\n    /// @dev Executes a call on address `target` with calldata `callData`\n    ///      and asserts that either nothing was returned or a single boolean\n    ///      was returned equal to `true`.\n    /// @param target The call target.\n    /// @param callData The abi-encoded call data.\n    function _callWithOptionalBooleanResult(\n        address target,\n        bytes memory callData\n    )\n        private\n    {\n        (bool didSucceed, bytes memory resultData) = target.call(callData);\n        if (didSucceed && isSuccessfulResult(resultData)) {\n            return;\n        }\n        LibRichErrorsV06.rrevert(resultData);\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol": {
            "id": 48,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibRichErrorsV06 {\n\n    // bytes4(keccak256(\"Error(string)\"))\n    bytes4 internal constant STANDARD_ERROR_SELECTOR = 0x08c379a0;\n\n    // solhint-disable func-name-mixedcase\n    /// @dev ABI encode a standard, string revert error payload.\n    ///      This is the same payload that would be included by a `revert(string)`\n    ///      solidity statement. It has the function signature `Error(string)`.\n    /// @param message The error string.\n    /// @return The ABI encoded error.\n    function StandardError(string memory message)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            STANDARD_ERROR_SELECTOR,\n            bytes(message)\n        );\n    }\n    // solhint-enable func-name-mixedcase\n\n    /// @dev Reverts an encoded rich revert reason `errorData`.\n    /// @param errorData ABI encoded error data.\n    function rrevert(bytes memory errorData)\n        internal\n        pure\n    {\n        assembly {\n            revert(add(errorData, 0x20), mload(errorData))\n        }\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol": {
            "id": 43,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./errors/LibBytesRichErrorsV06.sol\";\nimport \"./errors/LibRichErrorsV06.sol\";\n\n\nlibrary LibBytesV06 {\n\n    using LibBytesV06 for bytes;\n\n    /// @dev Gets the memory address for a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of byte array. This\n    ///         points to the header of the byte array which contains\n    ///         the length.\n    function rawAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := input\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Gets the memory address for the contents of a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of the contents of the byte array.\n    function contentAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := add(input, 32)\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Copies `length` bytes from memory location `source` to `dest`.\n    /// @param dest memory address to copy bytes to.\n    /// @param source memory address to copy bytes from.\n    /// @param length number of bytes to copy.\n    function memCopy(\n        uint256 dest,\n        uint256 source,\n        uint256 length\n    )\n        internal\n        pure\n    {\n        if (length < 32) {\n            // Handle a partial word by reading destination and masking\n            // off the bits we are interested in.\n            // This correctly handles overlap, zero lengths and source == dest\n            assembly {\n                let mask := sub(exp(256, sub(32, length)), 1)\n                let s := and(mload(source), not(mask))\n                let d := and(mload(dest), mask)\n                mstore(dest, or(s, d))\n            }\n        } else {\n            // Skip the O(length) loop when source == dest.\n            if (source == dest) {\n                return;\n            }\n\n            // For large copies we copy whole words at a time. The final\n            // word is aligned to the end of the range (instead of after the\n            // previous) to handle partial words. So a copy will look like this:\n            //\n            //  ####\n            //      ####\n            //          ####\n            //            ####\n            //\n            // We handle overlap in the source and destination range by\n            // changing the copying direction. This prevents us from\n            // overwriting parts of source that we still need to copy.\n            //\n            // This correctly handles source == dest\n            //\n            if (source > dest) {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because it\n                    // is easier to compare with in the loop, and these\n                    // are also the addresses we need for copying the\n                    // last bytes.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the last 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the last bytes in\n                    // source already due to overlap.\n                    let last := mload(sEnd)\n\n                    // Copy whole words front to back\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} lt(source, sEnd) {} {\n                        mstore(dest, mload(source))\n                        source := add(source, 32)\n                        dest := add(dest, 32)\n                    }\n\n                    // Write the last 32 bytes\n                    mstore(dEnd, last)\n                }\n            } else {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because those\n                    // are the starting points when copying a word at the end.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the first 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the first bytes in\n                    // source already due to overlap.\n                    let first := mload(source)\n\n                    // Copy whole words back to front\n                    // We use a signed comparisson here to allow dEnd to become\n                    // negative (happens when source and dest < 32). Valid\n                    // addresses in local memory will never be larger than\n                    // 2**255, so they can be safely re-interpreted as signed.\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} slt(dest, dEnd) {} {\n                        mstore(dEnd, mload(sEnd))\n                        sEnd := sub(sEnd, 32)\n                        dEnd := sub(dEnd, 32)\n                    }\n\n                    // Write the first 32 bytes\n                    mstore(dest, first)\n                }\n            }\n        }\n    }\n\n    /// @dev Returns a slices from a byte array.\n    /// @param b The byte array to take a slice from.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function slice(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure and copy contents\n        result = new bytes(to - from);\n        memCopy(\n            result.contentAddress(),\n            b.contentAddress() + from,\n            result.length\n        );\n        return result;\n    }\n\n    /// @dev Returns a slice from a byte array without preserving the input.\n    ///      When `from == 0`, the original array will match the slice.\n    ///      In other cases its state will be corrupted.\n    /// @param b The byte array to take a slice from. Will be destroyed in the process.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function sliceDestructive(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure around [from, to) in-place.\n        assembly {\n            result := add(b, from)\n            mstore(result, sub(to, from))\n        }\n        return result;\n    }\n\n    /// @dev Pops the last byte off of a byte array by modifying its length.\n    /// @param b Byte array that will be modified.\n    /// @return result The byte that was popped off.\n    function popLastByte(bytes memory b)\n        internal\n        pure\n        returns (bytes1 result)\n    {\n        if (b.length == 0) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanZeroRequired,\n                b.length,\n                0\n            ));\n        }\n\n        // Store last byte.\n        result = b[b.length - 1];\n\n        assembly {\n            // Decrement length of byte array.\n            let newLen := sub(mload(b), 1)\n            mstore(b, newLen)\n        }\n        return result;\n    }\n\n    /// @dev Tests equality of two byte arrays.\n    /// @param lhs First byte array to compare.\n    /// @param rhs Second byte array to compare.\n    /// @return equal True if arrays are the same. False otherwise.\n    function equals(\n        bytes memory lhs,\n        bytes memory rhs\n    )\n        internal\n        pure\n        returns (bool equal)\n    {\n        // Keccak gas cost is 30 + numWords * 6. This is a cheap way to compare.\n        // We early exit on unequal lengths, but keccak would also correctly\n        // handle this.\n        return lhs.length == rhs.length && keccak256(lhs) == keccak256(rhs);\n    }\n\n    /// @dev Reads an address from a position in a byte array.\n    /// @param b Byte array containing an address.\n    /// @param index Index in byte array of address.\n    /// @return result address from byte array.\n    function readAddress(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (address result)\n    {\n        if (b.length < index + 20) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Read address from array memory\n        assembly {\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 20-byte mask to obtain address\n            result := and(mload(add(b, index)), 0xffffffffffffffffffffffffffffffffffffffff)\n        }\n        return result;\n    }\n\n    /// @dev Writes an address into a specific position in a byte array.\n    /// @param b Byte array to insert address into.\n    /// @param index Index in byte array of address.\n    /// @param input Address to put into byte array.\n    function writeAddress(\n        bytes memory b,\n        uint256 index,\n        address input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 20) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Store address into array memory\n        assembly {\n            // The address occupies 20 bytes and mstore stores 32 bytes.\n            // First fetch the 32-byte word where we'll be storing the address, then\n            // apply a mask so we have only the bytes in the word that the address will not occupy.\n            // Then combine these bytes with the address and store the 32 bytes back to memory with mstore.\n\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 12-byte mask to obtain extra bytes occupying word of memory where we'll store the address\n            let neighbors := and(\n                mload(add(b, index)),\n                0xffffffffffffffffffffffff0000000000000000000000000000000000000000\n            )\n\n            // Make sure input address is clean.\n            // (Solidity does not guarantee this)\n            input := and(input, 0xffffffffffffffffffffffffffffffffffffffff)\n\n            // Store the neighbors and address into memory\n            mstore(add(b, index), xor(input, neighbors))\n        }\n    }\n\n    /// @dev Reads a bytes32 value from a position in a byte array.\n    /// @param b Byte array containing a bytes32 value.\n    /// @param index Index in byte array of bytes32 value.\n    /// @return result bytes32 value from byte array.\n    function readBytes32(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        if (b.length < index + 32) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            result := mload(add(b, index))\n        }\n        return result;\n    }\n\n    /// @dev Writes a bytes32 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input bytes32 to put into byte array.\n    function writeBytes32(\n        bytes memory b,\n        uint256 index,\n        bytes32 input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 32) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            mstore(add(b, index), input)\n        }\n    }\n\n    /// @dev Reads a uint256 value from a position in a byte array.\n    /// @param b Byte array containing a uint256 value.\n    /// @param index Index in byte array of uint256 value.\n    /// @return result uint256 value from byte array.\n    function readUint256(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (uint256 result)\n    {\n        result = uint256(readBytes32(b, index));\n        return result;\n    }\n\n    /// @dev Writes a uint256 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input uint256 to put into byte array.\n    function writeUint256(\n        bytes memory b,\n        uint256 index,\n        uint256 input\n    )\n        internal\n        pure\n    {\n        writeBytes32(b, index, bytes32(input));\n    }\n\n    /// @dev Reads an unpadded bytes4 value from a position in a byte array.\n    /// @param b Byte array containing a bytes4 value.\n    /// @param index Index in byte array of bytes4 value.\n    /// @return result bytes4 value from byte array.\n    function readBytes4(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes4 result)\n    {\n        if (b.length < index + 4) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsFourRequired,\n                b.length,\n                index + 4\n            ));\n        }\n\n        // Arrays are prefixed by a 32 byte length field\n        index += 32;\n\n        // Read the bytes4 from array memory\n        assembly {\n            result := mload(add(b, index))\n            // Solidity does not require us to clean the trailing bytes.\n            // We do it anyway\n            result := and(result, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)\n        }\n        return result;\n    }\n\n    /// @dev Writes a new length to a byte array.\n    ///      Decreasing length will lead to removing the corresponding lower order bytes from the byte array.\n    ///      Increasing length may lead to appending adjacent in-memory bytes to the end of the byte array.\n    /// @param b Bytes array to write new length to.\n    /// @param length New length of byte array.\n    function writeLength(bytes memory b, uint256 length)\n        internal\n        pure\n    {\n        assembly {\n            mstore(b, length)\n        }\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/errors/LibBytesRichErrorsV06.sol": {
            "id": 46,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibBytesRichErrorsV06 {\n\n    enum InvalidByteOperationErrorCodes {\n        FromLessThanOrEqualsToRequired,\n        ToLessThanOrEqualsLengthRequired,\n        LengthGreaterThanZeroRequired,\n        LengthGreaterThanOrEqualsFourRequired,\n        LengthGreaterThanOrEqualsTwentyRequired,\n        LengthGreaterThanOrEqualsThirtyTwoRequired,\n        LengthGreaterThanOrEqualsNestedBytesLengthRequired,\n        DestinationLengthGreaterThanOrEqualSourceLengthRequired\n    }\n\n    // bytes4(keccak256(\"InvalidByteOperationError(uint8,uint256,uint256)\"))\n    bytes4 internal constant INVALID_BYTE_OPERATION_ERROR_SELECTOR =\n        0x28006595;\n\n    // solhint-disable func-name-mixedcase\n    function InvalidByteOperationError(\n        InvalidByteOperationErrorCodes errorCode,\n        uint256 offset,\n        uint256 required\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            INVALID_BYTE_OPERATION_ERROR_SELECTOR,\n            errorCode,\n            offset,\n            required\n        );\n    }\n}\n"
        },
        "@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol": {
            "id": 41,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\ninterface IERC20TokenV06 {\n\n    // solhint-disable no-simple-event-func-name\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 value\n    );\n\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n\n    /// @dev send `value` token to `to` from `msg.sender`\n    /// @param to The address of the recipient\n    /// @param value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transfer(address to, uint256 value)\n        external\n        returns (bool);\n\n    /// @dev send `value` token to `to` from `from` on the condition it is approved by `from`\n    /// @param from The address of the sender\n    /// @param to The address of the recipient\n    /// @param value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    )\n        external\n        returns (bool);\n\n    /// @dev `msg.sender` approves `spender` to spend `value` tokens\n    /// @param spender The address of the account able to transfer the tokens\n    /// @param value The amount of wei to be approved for transfer\n    /// @return Always true if the call has enough gas to complete execution\n    function approve(address spender, uint256 value)\n        external\n        returns (bool);\n\n    /// @dev Query total supply of token\n    /// @return Total supply of token\n    function totalSupply()\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the balance of `owner`.\n    /// @param owner The address from which the balance will be retrieved\n    /// @return Balance of owner\n    function balanceOf(address owner)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the allowance for `spender` to spend from `owner`.\n    /// @param owner The address of the account owning tokens\n    /// @param spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the number of decimals this token has.\n    function decimals()\n        external\n        view\n        returns (uint8);\n}\n"
        },
        "./BancorSampler.sol": {
            "id": 4,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IBancor.sol\";\n\ncontract CompilerHack {}\n\ncontract BancorSampler is CompilerHack {\n\n    /// @dev Base gas limit for Bancor calls.\n    uint256 constant private BANCOR_CALL_GAS = 300e3; // 300k\n\n    struct BancorSamplerOpts {\n        IBancorRegistry registry;\n        address[][] paths;\n    }\n\n    /// @dev Sample sell quotes from Bancor.\n    /// @param opts BancorSamplerOpts The Bancor registry contract address and paths\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return bancorNetwork the Bancor Network address\n    /// @return path the selected conversion path from bancor\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromBancor(\n        BancorSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (address bancorNetwork, address[] memory path, uint256[] memory makerTokenAmounts)\n    {\n        if (opts.paths.length == 0) {\n            return (bancorNetwork, path, makerTokenAmounts);\n        }\n        (bancorNetwork, path) = _findBestPath(opts, takerToken, makerToken, takerTokenAmounts);\n        makerTokenAmounts = new uint256[](takerTokenAmounts.length);\n\n        for (uint256 i = 0; i < makerTokenAmounts.length; i++) {\n            try\n                IBancorNetwork(bancorNetwork)\n                    .rateByPath\n                        {gas: BANCOR_CALL_GAS}\n                        (path, takerTokenAmounts[i])\n                returns (uint256 amount)\n            {\n                makerTokenAmounts[i] = amount;\n                // Break early if there are 0 amounts\n                if (makerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n        return (bancorNetwork, path, makerTokenAmounts);\n    }\n\n    /// @dev Sample buy quotes from Bancor. Unimplemented\n    /// @param opts BancorSamplerOpts The Bancor registry contract address and paths\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return bancorNetwork the Bancor Network address\n    /// @return path the selected conversion path from bancor\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromBancor(\n        BancorSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (address bancorNetwork, address[] memory path, uint256[] memory takerTokenAmounts)\n    {\n    }\n\n    function _findBestPath(\n        BancorSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        internal\n        view\n        returns (address bancorNetwork, address[] memory path)\n    {\n        bancorNetwork = opts.registry.getAddress(opts.registry.BANCOR_NETWORK());\n        if (opts.paths.length == 0) {\n            return (bancorNetwork, path);\n        }\n        uint256 maxBoughtAmount = 0;\n        // Find the best path by selling the largest taker amount\n        for (uint256 i = 0; i < opts.paths.length; i++) {\n            if (opts.paths[i].length < 2) {\n                continue;\n            }\n\n            try\n                IBancorNetwork(bancorNetwork)\n                    .rateByPath\n                        {gas: BANCOR_CALL_GAS}\n                        (opts.paths[i], takerTokenAmounts[takerTokenAmounts.length-1])\n                returns (uint256 amount)\n            {\n                if (amount > maxBoughtAmount) {\n                    maxBoughtAmount = amount;\n                    path = opts.paths[i];\n                }\n            } catch {\n                // Swallow failures, leaving all results as zero.\n                continue;\n            }\n        }\n    }\n}\n"
        },
        "./interfaces/IBancor.sol": {
            "id": 27,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface IBancor {}\n\ninterface IBancorNetwork {\n  function conversionPath(address _sourceToken, address _targetToken) external view returns (address[] memory);\n  function rateByPath(address[] memory _path, uint256 _amount) external view returns (uint256);\n}\n\ninterface IBancorRegistry {\n    function getAddress(bytes32 _contractName) external view returns (address);\n    function BANCOR_NETWORK() external view returns (bytes32);\n}\n"
        },
        "./CurveSampler.sol": {
            "id": 5,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/ICurve.sol\";\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\n\n\ncontract CurveSampler is\n    SamplerUtils,\n    ApproximateBuys\n{\n    /// @dev Information for sampling from curve sources.\n    struct CurveInfo {\n        address poolAddress;\n        bytes4 sellQuoteFunctionSelector;\n        bytes4 buyQuoteFunctionSelector;\n    }\n\n    /// @dev Base gas limit for Curve calls. Some Curves have multiple tokens\n    ///      So a reasonable ceil is 150k per token. Biggest Curve has 4 tokens.\n    uint256 constant private CURVE_CALL_GAS = 2000e3; // Was 600k for Curve but SnowSwap is using 1500k+\n\n    /// @dev Sample sell quotes from Curve.\n    /// @param curveInfo Curve information specific to this token pair.\n    /// @param fromTokenIdx Index of the taker token (what to sell).\n    /// @param toTokenIdx Index of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromCurve(\n        CurveInfo memory curveInfo,\n        int128 fromTokenIdx,\n        int128 toTokenIdx,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            (bool didSucceed, bytes memory resultData) =\n                curveInfo.poolAddress.staticcall.gas(CURVE_CALL_GAS)(\n                    abi.encodeWithSelector(\n                        curveInfo.sellQuoteFunctionSelector,\n                        fromTokenIdx,\n                        toTokenIdx,\n                        takerTokenAmounts[i]\n                    ));\n            uint256 buyAmount = 0;\n            if (didSucceed) {\n                buyAmount = abi.decode(resultData, (uint256));\n            }\n            makerTokenAmounts[i] = buyAmount;\n            // Break early if there are 0 amounts\n            if (makerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from Curve.\n    /// @param curveInfo Curve information specific to this token pair.\n    /// @param fromTokenIdx Index of the taker token (what to sell).\n    /// @param toTokenIdx Index of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromCurve(\n        CurveInfo memory curveInfo,\n        int128 fromTokenIdx,\n        int128 toTokenIdx,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        if (curveInfo.buyQuoteFunctionSelector == bytes4(0)) {\n            // Buys not supported on this curve, so approximate it.\n            return _sampleApproximateBuys(\n                ApproximateBuyQuoteOpts({\n                    makerTokenData: abi.encode(toTokenIdx, curveInfo),\n                    takerTokenData: abi.encode(fromTokenIdx, curveInfo),\n                    getSellQuoteCallback: _sampleSellForApproximateBuyFromCurve\n                }),\n                makerTokenAmounts\n            );\n        }\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            (bool didSucceed, bytes memory resultData) =\n                curveInfo.poolAddress.staticcall.gas(CURVE_CALL_GAS)(\n                    abi.encodeWithSelector(\n                        curveInfo.buyQuoteFunctionSelector,\n                        fromTokenIdx,\n                        toTokenIdx,\n                        makerTokenAmounts[i]\n                    ));\n            uint256 sellAmount = 0;\n            if (didSucceed) {\n                sellAmount = abi.decode(resultData, (uint256));\n            }\n            takerTokenAmounts[i] = sellAmount;\n            // Break early if there are 0 amounts\n            if (takerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n    }\n\n    function _sampleSellForApproximateBuyFromCurve(\n        bytes memory takerTokenData,\n        bytes memory makerTokenData,\n        uint256 sellAmount\n    )\n        private\n        view\n        returns (uint256 buyAmount)\n    {\n        (int128 takerTokenIdx, CurveInfo memory curveInfo) =\n            abi.decode(takerTokenData, (int128, CurveInfo));\n        (int128 makerTokenIdx) =\n            abi.decode(makerTokenData, (int128));\n        (bool success, bytes memory resultData) =\n            address(this).staticcall(abi.encodeWithSelector(\n                this.sampleSellsFromCurve.selector,\n                curveInfo,\n                takerTokenIdx,\n                makerTokenIdx,\n                _toSingleValueArray(sellAmount)\n            ));\n        if (!success) {\n            return 0;\n        }\n        // solhint-disable-next-line indent\n        return abi.decode(resultData, (uint256[]))[0];\n    }\n}\n"
        },
        "./interfaces/ICurve.sol": {
            "id": 28,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\n// solhint-disable func-name-mixedcase\ninterface ICurve {\n\n    /// @dev Sell `sellAmount` of `fromToken` token and receive `toToken` token.\n    ///      This function exists on later versions of Curve (USDC/DAI/USDT)\n    /// @param i The token index being sold.\n    /// @param j The token index being bought.\n    /// @param sellAmount The amount of token being bought.\n    /// @param minBuyAmount The minimum buy amount of the token being bought.\n    function exchange_underlying(\n        int128 i,\n        int128 j,\n        uint256 sellAmount,\n        uint256 minBuyAmount\n    )\n        external;\n\n    /// @dev Get the amount of `toToken` by selling `sellAmount` of `fromToken`\n    /// @param i The token index being sold.\n    /// @param j The token index being bought.\n    /// @param sellAmount The amount of token being bought.\n    function get_dy_underlying(\n        int128 i,\n        int128 j,\n        uint256 sellAmount\n    )\n        external\n        returns (uint256 dy);\n\n    /// @dev Get the amount of `fromToken` by buying `buyAmount` of `toToken`\n    ///      This function exists on later versions of Curve (USDC/DAI/USDT)\n    /// @param i The token index being sold.\n    /// @param j The token index being bought.\n    /// @param buyAmount The amount of token being bought.\n    function get_dx_underlying(\n        int128 i,\n        int128 j,\n        uint256 buyAmount\n    )\n        external\n        returns (uint256 dx);\n\n    /// @dev Get the underlying token address from the token index\n    /// @param i The token index.\n    function underlying_coins(\n        int128 i\n    )\n        external\n        returns (address tokenAddress);\n}\n"
        },
        "./ApproximateBuys.sol": {
            "id": 0,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/LibMathV06.sol\";\n\n\ncontract ApproximateBuys {\n\n    /// @dev Information computing buy quotes for sources that do not have native\n    ///      buy quote support.\n    struct ApproximateBuyQuoteOpts {\n        // Arbitrary maker token data to pass to `getSellQuoteCallback`.\n        bytes makerTokenData;\n        // Arbitrary taker token data to pass to `getSellQuoteCallback`.\n        bytes takerTokenData;\n        // Callback to retrieve a sell quote.\n        function (bytes memory, bytes memory, uint256)\n            internal\n            view\n            returns (uint256) getSellQuoteCallback;\n    }\n\n    uint256 private constant ONE_HUNDED_PERCENT_BPS = 1e4;\n    /// @dev Maximum approximate (positive) error rate when approximating a buy quote.\n    uint256 private constant APPROXIMATE_BUY_TARGET_EPSILON_BPS = 0.0005e4;\n    /// @dev Maximum iterations to perform when approximating a buy quote.\n    uint256 private constant APPROXIMATE_BUY_MAX_ITERATIONS = 5;\n\n    function _sampleApproximateBuys(\n        ApproximateBuyQuoteOpts memory opts,\n        uint256[] memory makerTokenAmounts\n    )\n        internal\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        takerTokenAmounts = new uint256[](makerTokenAmounts.length);\n        if (makerTokenAmounts.length == 0) {\n            return takerTokenAmounts;\n        }\n\n        uint256 sellAmount = opts.getSellQuoteCallback(\n            opts.makerTokenData,\n            opts.takerTokenData,\n            makerTokenAmounts[0]\n        );\n        if (sellAmount == 0) {\n            return takerTokenAmounts;\n        }\n\n        uint256 buyAmount = opts.getSellQuoteCallback(\n            opts.takerTokenData,\n            opts.makerTokenData,\n            sellAmount\n        );\n        if (buyAmount == 0) {\n            return takerTokenAmounts;\n        }\n\n        for (uint256 i = 0; i < makerTokenAmounts.length; i++) {\n            for (uint256 iter = 0; iter < APPROXIMATE_BUY_MAX_ITERATIONS; iter++) {\n                // adjustedSellAmount = previousSellAmount * (target/actual) * JUMP_MULTIPLIER\n                sellAmount = _safeGetPartialAmountCeil(\n                    makerTokenAmounts[i],\n                    buyAmount,\n                    sellAmount\n                );\n                if (sellAmount == 0) {\n                    break;\n                }\n                sellAmount = _safeGetPartialAmountCeil(\n                    (ONE_HUNDED_PERCENT_BPS + APPROXIMATE_BUY_TARGET_EPSILON_BPS),\n                    ONE_HUNDED_PERCENT_BPS,\n                    sellAmount\n                );\n                if (sellAmount == 0) {\n                    break;\n                }\n                uint256 _buyAmount = opts.getSellQuoteCallback(\n                    opts.takerTokenData,\n                    opts.makerTokenData,\n                    sellAmount\n                );\n                if (_buyAmount == 0) {\n                    break;\n                }\n                // We re-use buyAmount next iteration, only assign if it is\n                // non zero\n                buyAmount = _buyAmount;\n                // If we've reached our goal, exit early\n                if (buyAmount >= makerTokenAmounts[i]) {\n                    uint256 eps =\n                        (buyAmount - makerTokenAmounts[i]) * ONE_HUNDED_PERCENT_BPS /\n                        makerTokenAmounts[i];\n                    if (eps <= APPROXIMATE_BUY_TARGET_EPSILON_BPS) {\n                        break;\n                    }\n                }\n            }\n            // We do our best to close in on the requested amount, but we can either over buy or under buy and exit\n            // if we hit a max iteration limit\n            // We scale the sell amount to get the approximate target\n            takerTokenAmounts[i] = _safeGetPartialAmountCeil(\n                makerTokenAmounts[i],\n                buyAmount,\n                sellAmount\n            );\n        }\n    }\n\n    function _safeGetPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        view\n        returns (uint256 partialAmount)\n    {\n        if (numerator == 0 || target == 0 || denominator == 0) return 0;\n        uint256 c = numerator * target;\n        if (c / numerator != target) return 0;\n        return (c + (denominator - 1)) / denominator;\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/LibMathV06.sol": {
            "id": 44,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./LibSafeMathV06.sol\";\nimport \"./errors/LibRichErrorsV06.sol\";\nimport \"./errors/LibMathRichErrorsV06.sol\";\n\n\nlibrary LibMathV06 {\n\n    using LibSafeMathV06 for uint256;\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    ///      Reverts if rounding error is >= 0.1%\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded down.\n    function safeGetPartialAmountFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        if (isRoundingErrorFloor(\n                numerator,\n                denominator,\n                target\n        )) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.RoundingError(\n                numerator,\n                denominator,\n                target\n            ));\n        }\n\n        partialAmount = numerator.safeMul(target).safeDiv(denominator);\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    ///      Reverts if rounding error is >= 0.1%\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded up.\n    function safeGetPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        if (isRoundingErrorCeil(\n                numerator,\n                denominator,\n                target\n        )) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.RoundingError(\n                numerator,\n                denominator,\n                target\n            ));\n        }\n\n        // safeDiv computes `floor(a / b)`. We use the identity (a, b integer):\n        //       ceil(a / b) = floor((a + b - 1) / b)\n        // To implement `ceil(a / b)` using safeDiv.\n        partialAmount = numerator.safeMul(target)\n            .safeAdd(denominator.safeSub(1))\n            .safeDiv(denominator);\n\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded down.\n    function getPartialAmountFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        partialAmount = numerator.safeMul(target).safeDiv(denominator);\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded up.\n    function getPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        // safeDiv computes `floor(a / b)`. We use the identity (a, b integer):\n        //       ceil(a / b) = floor((a + b - 1) / b)\n        // To implement `ceil(a / b)` using safeDiv.\n        partialAmount = numerator.safeMul(target)\n            .safeAdd(denominator.safeSub(1))\n            .safeDiv(denominator);\n\n        return partialAmount;\n    }\n\n    /// @dev Checks if rounding error >= 0.1% when rounding down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to multiply with numerator/denominator.\n    /// @return isError Rounding error is present.\n    function isRoundingErrorFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bool isError)\n    {\n        if (denominator == 0) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.DivisionByZeroError());\n        }\n\n        // The absolute rounding error is the difference between the rounded\n        // value and the ideal value. The relative rounding error is the\n        // absolute rounding error divided by the absolute value of the\n        // ideal value. This is undefined when the ideal value is zero.\n        //\n        // The ideal value is `numerator * target / denominator`.\n        // Let's call `numerator * target % denominator` the remainder.\n        // The absolute error is `remainder / denominator`.\n        //\n        // When the ideal value is zero, we require the absolute error to\n        // be zero. Fortunately, this is always the case. The ideal value is\n        // zero iff `numerator == 0` and/or `target == 0`. In this case the\n        // remainder and absolute error are also zero.\n        if (target == 0 || numerator == 0) {\n            return false;\n        }\n\n        // Otherwise, we want the relative rounding error to be strictly\n        // less than 0.1%.\n        // The relative error is `remainder / (numerator * target)`.\n        // We want the relative error less than 1 / 1000:\n        //        remainder / (numerator * denominator)  <  1 / 1000\n        // or equivalently:\n        //        1000 * remainder  <  numerator * target\n        // so we have a rounding error iff:\n        //        1000 * remainder  >=  numerator * target\n        uint256 remainder = mulmod(\n            target,\n            numerator,\n            denominator\n        );\n        isError = remainder.safeMul(1000) >= numerator.safeMul(target);\n        return isError;\n    }\n\n    /// @dev Checks if rounding error >= 0.1% when rounding up.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to multiply with numerator/denominator.\n    /// @return isError Rounding error is present.\n    function isRoundingErrorCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bool isError)\n    {\n        if (denominator == 0) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.DivisionByZeroError());\n        }\n\n        // See the comments in `isRoundingError`.\n        if (target == 0 || numerator == 0) {\n            // When either is zero, the ideal value and rounded value are zero\n            // and there is no rounding error. (Although the relative error\n            // is undefined.)\n            return false;\n        }\n        // Compute remainder as before\n        uint256 remainder = mulmod(\n            target,\n            numerator,\n            denominator\n        );\n        remainder = denominator.safeSub(remainder) % denominator;\n        isError = remainder.safeMul(1000) >= numerator.safeMul(target);\n        return isError;\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol": {
            "id": 45,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./errors/LibRichErrorsV06.sol\";\nimport \"./errors/LibSafeMathRichErrorsV06.sol\";\n\n\nlibrary LibSafeMathV06 {\n\n    function safeMul(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        if (c / a != b) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.MULTIPLICATION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function safeDiv(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b == 0) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.DIVISION_BY_ZERO,\n                a,\n                b\n            ));\n        }\n        uint256 c = a / b;\n        return c;\n    }\n\n    function safeSub(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b > a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.SUBTRACTION_UNDERFLOW,\n                a,\n                b\n            ));\n        }\n        return a - b;\n    }\n\n    function safeAdd(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint256 c = a + b;\n        if (c < a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.ADDITION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function max256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a < b ? a : b;\n    }\n\n    function safeMul128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (a == 0) {\n            return 0;\n        }\n        uint128 c = a * b;\n        if (c / a != b) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.MULTIPLICATION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function safeDiv128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (b == 0) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.DIVISION_BY_ZERO,\n                a,\n                b\n            ));\n        }\n        uint128 c = a / b;\n        return c;\n    }\n\n    function safeSub128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (b > a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.SUBTRACTION_UNDERFLOW,\n                a,\n                b\n            ));\n        }\n        return a - b;\n    }\n\n    function safeAdd128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        uint128 c = a + b;\n        if (c < a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.ADDITION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function max128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        return a < b ? a : b;\n    }\n\n    function safeDowncastToUint128(uint256 a)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (a > type(uint128).max) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256DowncastError(\n                LibSafeMathRichErrorsV06.DowncastErrorCodes.VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT128,\n                a\n            ));\n        }\n        return uint128(a);\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/errors/LibSafeMathRichErrorsV06.sol": {
            "id": 49,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibSafeMathRichErrorsV06 {\n\n    // bytes4(keccak256(\"Uint256BinOpError(uint8,uint256,uint256)\"))\n    bytes4 internal constant UINT256_BINOP_ERROR_SELECTOR =\n        0xe946c1bb;\n\n    // bytes4(keccak256(\"Uint256DowncastError(uint8,uint256)\"))\n    bytes4 internal constant UINT256_DOWNCAST_ERROR_SELECTOR =\n        0xc996af7b;\n\n    enum BinOpErrorCodes {\n        ADDITION_OVERFLOW,\n        MULTIPLICATION_OVERFLOW,\n        SUBTRACTION_UNDERFLOW,\n        DIVISION_BY_ZERO\n    }\n\n    enum DowncastErrorCodes {\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT32,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT64,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT96,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT128\n    }\n\n    // solhint-disable func-name-mixedcase\n    function Uint256BinOpError(\n        BinOpErrorCodes errorCode,\n        uint256 a,\n        uint256 b\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            UINT256_BINOP_ERROR_SELECTOR,\n            errorCode,\n            a,\n            b\n        );\n    }\n\n    function Uint256DowncastError(\n        DowncastErrorCodes errorCode,\n        uint256 a\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            UINT256_DOWNCAST_ERROR_SELECTOR,\n            errorCode,\n            a\n        );\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/errors/LibMathRichErrorsV06.sol": {
            "id": 47,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibMathRichErrorsV06 {\n\n    // bytes4(keccak256(\"DivisionByZeroError()\"))\n    bytes internal constant DIVISION_BY_ZERO_ERROR =\n        hex\"a791837c\";\n\n    // bytes4(keccak256(\"RoundingError(uint256,uint256,uint256)\"))\n    bytes4 internal constant ROUNDING_ERROR_SELECTOR =\n        0x339f3de2;\n\n    // solhint-disable func-name-mixedcase\n    function DivisionByZeroError()\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return DIVISION_BY_ZERO_ERROR;\n    }\n\n    function RoundingError(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            ROUNDING_ERROR_SELECTOR,\n            numerator,\n            denominator,\n            target\n        );\n    }\n}\n"
        },
        "./DODOSampler.sol": {
            "id": 6,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\n\n\ninterface IDODOZoo {\n    function getDODO(address baseToken, address quoteToken) external view returns (address);\n}\n\ninterface IDODOHelper {\n    function querySellQuoteToken(address dodo, uint256 amount) external view returns (uint256);\n}\n\ninterface IDODO {\n    function querySellBaseToken(uint256 amount) external view returns (uint256);\n    function _TRADE_ALLOWED_() external view returns (bool);\n}\n\ncontract DODOSampler is\n    SamplerUtils,\n    ApproximateBuys\n{\n\n    /// @dev Gas limit for DODO calls.\n    uint256 constant private DODO_CALL_GAS = 300e3; // 300k\n    struct DODOSamplerOpts {\n        address registry;\n        address helper;\n    }\n\n    /// @dev Sample sell quotes from DODO.\n    /// @param opts DODOSamplerOpts DODO Registry and helper addresses\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return sellBase whether the bridge needs to sell the base token\n    /// @return pool the DODO pool address\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromDODO(\n        DODOSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (bool sellBase, address pool, uint256[] memory makerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        pool = IDODOZoo(opts.registry).getDODO(takerToken, makerToken);\n        address baseToken;\n        // If pool exists we have the correct order of Base/Quote\n        if (pool != address(0)) {\n            baseToken = takerToken;\n            sellBase = true;\n        } else {\n            pool = IDODOZoo(opts.registry).getDODO(makerToken, takerToken);\n            // No pool either direction\n            if (address(pool) == address(0)) {\n                return (sellBase, pool, makerTokenAmounts);\n            }\n            baseToken = makerToken;\n            sellBase = false;\n        }\n\n        // DODO Pool has been disabled\n        if (!IDODO(pool)._TRADE_ALLOWED_()) {\n            return (sellBase, pool, makerTokenAmounts);\n        }\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            uint256 buyAmount = _sampleSellForApproximateBuyFromDODO(\n                abi.encode(takerToken, pool, baseToken, opts.helper), // taker token data\n                abi.encode(makerToken, pool, baseToken, opts.helper), // maker token data\n                takerTokenAmounts[i]\n            );\n            makerTokenAmounts[i] = buyAmount;\n            // Break early if there are 0 amounts\n            if (makerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from DODO.\n    /// @param opts DODOSamplerOpts DODO Registry and helper addresses\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token sell amount for each sample.\n    /// @return sellBase whether the bridge needs to sell the base token\n    /// @return pool the DODO pool address\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromDODO(\n        DODOSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (bool sellBase, address pool, uint256[] memory takerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n\n        // Pool is BASE/QUOTE\n        // Look up the pool from the taker/maker combination\n        pool = IDODOZoo(opts.registry).getDODO(takerToken, makerToken);\n        address baseToken;\n        // If pool exists we have the correct order of Base/Quote\n        if (pool != address(0)) {\n            baseToken = takerToken;\n            sellBase = true;\n        } else {\n            // Look up the pool from the maker/taker combination\n            pool = IDODOZoo(opts.registry).getDODO(makerToken, takerToken);\n            // No pool either direction\n            if (address(pool) == address(0)) {\n                return (sellBase, pool, takerTokenAmounts);\n            }\n            baseToken = makerToken;\n            sellBase = false;\n        }\n\n        // DODO Pool has been disabled\n        if (!IDODO(pool)._TRADE_ALLOWED_()) {\n            return (sellBase, pool, takerTokenAmounts);\n        }\n\n        takerTokenAmounts = _sampleApproximateBuys(\n            ApproximateBuyQuoteOpts({\n                makerTokenData: abi.encode(makerToken, pool, baseToken, opts.helper),\n                takerTokenData: abi.encode(takerToken, pool, baseToken, opts.helper),\n                getSellQuoteCallback: _sampleSellForApproximateBuyFromDODO\n            }),\n            makerTokenAmounts\n        );\n    }\n\n    function _sampleSellForApproximateBuyFromDODO(\n        bytes memory takerTokenData,\n        bytes memory /* makerTokenData */,\n        uint256 sellAmount\n    )\n        private\n        view\n        returns (uint256)\n    {\n        (address takerToken, address pool, address baseToken, address helper) = abi.decode(\n            takerTokenData,\n            (address, address, address, address)\n        );\n\n        // We will get called to sell both the taker token and also to sell the maker token\n        if (takerToken == baseToken) {\n            // If base token then use the original query on the pool\n            try\n                IDODO(pool).querySellBaseToken\n                    {gas: DODO_CALL_GAS}\n                    (sellAmount)\n                returns (uint256 amount)\n            {\n                return amount;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                return 0;\n            }\n        } else {\n            // If quote token then use helper, this is less accurate\n            try\n                IDODOHelper(helper).querySellQuoteToken\n                    {gas: DODO_CALL_GAS}\n                    (pool, sellAmount)\n                returns (uint256 amount)\n            {\n                return amount;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                return 0;\n            }\n        }\n    }\n\n}\n"
        },
        "./DODOV2Sampler.sol": {
            "id": 7,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\n\ninterface IDODOV2Registry {\n    function getDODOPool(address baseToken, address quoteToken)\n        external\n        view\n        returns (address[] memory machines);\n}\n\ninterface IDODOV2Pool {\n    function querySellBase(address trader, uint256 payBaseAmount)\n        external\n        view\n        returns (uint256 receiveQuoteAmount, uint256 mtFee);\n\n    function querySellQuote(address trader, uint256 payQuoteAmount)\n        external\n        view\n        returns (uint256 receiveBaseAmount, uint256 mtFee);\n}\n\ncontract DODOV2Sampler is\n    SamplerUtils,\n    ApproximateBuys\n{\n\n    /// @dev Gas limit for DODO V2 calls.\n    uint256 constant private DODO_V2_CALL_GAS = 300e3; // 300k\n\n    /// @dev Sample sell quotes from DODO V2.\n    /// @param registry Address of the registry to look up.\n    /// @param offset offset index for the pool in the registry.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return sellBase whether the bridge needs to sell the base token\n    /// @return pool the DODO pool address\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromDODOV2(\n        address registry,\n        uint256 offset,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (bool sellBase, address pool, uint256[] memory makerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        (pool, sellBase) = _getNextDODOV2Pool(registry, offset, takerToken, makerToken);\n        if (pool == address(0)) {\n            return (sellBase, pool, makerTokenAmounts);\n        }\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            uint256 buyAmount = _sampleSellForApproximateBuyFromDODOV2(\n                abi.encode(takerToken, pool, sellBase), // taker token data\n                abi.encode(makerToken, pool, sellBase), // maker token data\n                takerTokenAmounts[i]\n            );\n            makerTokenAmounts[i] = buyAmount;\n            // Break early if there are 0 amounts\n            if (makerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from DODO.\n    /// @param registry Address of the registry to look up.\n    /// @param offset offset index for the pool in the registry.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token sell amount for each sample.\n    /// @return sellBase whether the bridge needs to sell the base token\n    /// @return pool the DODO pool address\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromDODOV2(\n        address registry,\n        uint256 offset,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (bool sellBase, address pool, uint256[] memory takerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        (pool, sellBase) = _getNextDODOV2Pool(registry, offset, takerToken, makerToken);\n        if (pool == address(0)) {\n            return (sellBase, pool, takerTokenAmounts);\n        }\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n\n        takerTokenAmounts = _sampleApproximateBuys(\n            ApproximateBuyQuoteOpts({\n                makerTokenData: abi.encode(makerToken, pool, !sellBase),\n                takerTokenData: abi.encode(takerToken, pool, sellBase),\n                getSellQuoteCallback: _sampleSellForApproximateBuyFromDODOV2\n            }),\n            makerTokenAmounts\n        );\n    }\n\n    function _sampleSellForApproximateBuyFromDODOV2(\n        bytes memory takerTokenData,\n        bytes memory /* makerTokenData */,\n        uint256 sellAmount\n    )\n        private\n        view\n        returns (uint256)\n    {\n        (address takerToken, address pool, bool sellBase) = abi.decode(\n            takerTokenData,\n            (address, address, bool)\n        );\n\n        // We will get called to sell both the taker token and also to sell the maker token\n        // since we use approximate buy for sell and buy functions\n        if (sellBase) {\n            try\n                IDODOV2Pool(pool).querySellBase\n                    { gas: DODO_V2_CALL_GAS }\n                    (address(0), sellAmount)\n                returns (uint256 amount, uint256)\n            {\n                return amount;\n            } catch {\n                return 0;\n            }\n        } else {\n            try\n                IDODOV2Pool(pool).querySellQuote\n                    { gas: DODO_V2_CALL_GAS }\n                    (address(0), sellAmount)\n                returns (uint256 amount, uint256)\n            {\n                return amount;\n            } catch {\n                return 0;\n            }\n        }\n    }\n\n    function _getNextDODOV2Pool(\n        address registry,\n        uint256 offset,\n        address takerToken,\n        address makerToken\n    )\n        internal\n        view\n        returns (address machine, bool sellBase)\n    {\n        // Query in base -> quote direction, if a pool is found then we are selling the base\n        address[] memory machines = IDODOV2Registry(registry).getDODOPool(takerToken, makerToken);\n        sellBase = true;\n        if (machines.length == 0) {\n            // Query in quote -> base direction, if a pool is found then we are selling the quote\n            machines = IDODOV2Registry(registry).getDODOPool(makerToken, takerToken);\n            sellBase = false;\n        }\n\n        if (offset >= machines.length) {\n            return (address(0), false);\n        }\n\n        machine = machines[offset];\n    }\n\n}\n"
        },
        "./Eth2DaiSampler.sol": {
            "id": 9,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IEth2Dai.sol\";\nimport \"./SamplerUtils.sol\";\n\n\ncontract Eth2DaiSampler is\n    SamplerUtils\n{\n    /// @dev Base gas limit for Eth2Dai calls.\n    uint256 constant private ETH2DAI_CALL_GAS = 1000e3; // 1m\n\n    /// @dev Sample sell quotes from Eth2Dai/Oasis.\n    /// @param router Address of the Eth2Dai/Oasis contract\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromEth2Dai(\n        address router,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            try\n                IEth2Dai(router).getBuyAmount\n                    {gas: ETH2DAI_CALL_GAS}\n                    (makerToken, takerToken, takerTokenAmounts[i])\n                returns (uint256 amount)\n            {\n                makerTokenAmounts[i] = amount;\n                // Break early if there are 0 amounts\n                if (makerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from Eth2Dai/Oasis.\n    /// @param router Address of the Eth2Dai/Oasis contract\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Maker token sell amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromEth2Dai(\n        address router,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            try\n                IEth2Dai(router).getPayAmount\n                    {gas: ETH2DAI_CALL_GAS}\n                    (takerToken, makerToken, makerTokenAmounts[i])\n                returns (uint256 amount)\n            {\n                takerTokenAmounts[i] = amount;\n                // Break early if there are 0 amounts\n                if (takerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n}\n"
        },
        "./interfaces/IEth2Dai.sol": {
            "id": 29,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface IEth2Dai {\n\n    function getBuyAmount(\n        address buyToken,\n        address payToken,\n        uint256 payAmount\n    )\n        external\n        view\n        returns (uint256 buyAmount);\n\n    function getPayAmount(\n        address payToken,\n        address buyToken,\n        uint256 buyAmount\n    )\n        external\n        view\n        returns (uint256 payAmount);\n}\n"
        },
        "./KyberSampler.sol": {
            "id": 11,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IKyberNetwork.sol\";\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\n\n\ncontract KyberSampler is\n    SamplerUtils,\n    ApproximateBuys\n{\n    /// @dev Gas limit for Kyber calls.\n    uint256 constant private KYBER_CALL_GAS = 500e3; // 500k\n    /// @dev Kyber ETH pseudo-address.\n    address constant internal KYBER_ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n\n    struct KyberSamplerOpts {\n        uint256 reserveOffset;\n        address hintHandler;\n        address networkProxy;\n        address weth;\n        bytes hint;\n    }\n\n    /// @dev Sample sell quotes from Kyber.\n    /// @param opts KyberSamplerOpts The nth reserve\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return reserveId The id of the reserve found at reserveOffset\n    /// @return hint The hint for the selected reserve\n    /// @return makerTokenAmounts Maker amounts bought at each taker token amount.\n    function sampleSellsFromKyberNetwork(\n        KyberSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (bytes32 reserveId, bytes memory hint, uint256[] memory makerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        reserveId = _getNextReserveId(opts, takerToken, makerToken);\n        if (reserveId == 0x0) {\n            return (reserveId, hint, makerTokenAmounts);\n        }\n        opts.hint = this.encodeKyberHint(opts, reserveId, takerToken, makerToken);\n        hint = opts.hint;\n\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            uint256 value = this.sampleSellFromKyberNetwork(\n                opts,\n                takerToken,\n                makerToken,\n                takerTokenAmounts[i]\n            );\n            makerTokenAmounts[i] = value;\n            // Break early if there are 0 amounts\n            if (makerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from Kyber.\n    /// @param opts KyberSamplerOpts The nth reserve\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return reserveId The id of the reserve found at reserveOffset\n    /// @return hint The hint for the selected reserve\n    /// @return takerTokenAmounts Taker amounts sold at each maker token amount.\n    function sampleBuysFromKyberNetwork(\n        KyberSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (bytes32 reserveId, bytes memory hint, uint256[] memory takerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n\n        reserveId = _getNextReserveId(opts, takerToken, makerToken);\n        if (reserveId == 0x0) {\n            return (reserveId, hint, takerTokenAmounts);\n        }\n        opts.hint = this.encodeKyberHint(opts, reserveId, takerToken, makerToken);\n        hint = opts.hint;\n\n        takerTokenAmounts = _sampleApproximateBuys(\n            ApproximateBuyQuoteOpts({\n                makerTokenData: abi.encode(makerToken, opts),\n                takerTokenData: abi.encode(takerToken, opts),\n                getSellQuoteCallback: _sampleSellForApproximateBuyFromKyber\n            }),\n            makerTokenAmounts\n        );\n        return (reserveId, hint, takerTokenAmounts);\n    }\n\n    function encodeKyberHint(\n        KyberSamplerOpts memory opts,\n        bytes32 reserveId,\n        address takerToken,\n        address makerToken\n    )\n        public\n        view\n        returns (bytes memory hint)\n    {\n        // Build a hint selecting the single reserve\n        IKyberHintHandler kyberHint = IKyberHintHandler(opts.hintHandler);\n\n        // All other reserves should be ignored with this hint\n        bytes32[] memory selectedReserves = new bytes32[](1);\n        selectedReserves[0] = reserveId;\n        uint256[] memory emptySplits = new uint256[](0);\n\n        if (takerToken == opts.weth) {\n            // ETH to Token\n            try\n                kyberHint.buildEthToTokenHint\n                    {gas: KYBER_CALL_GAS}\n                    (\n                        makerToken,\n                        IKyberHintHandler.TradeType.MaskIn,\n                        selectedReserves,\n                        emptySplits\n                    )\n                returns (bytes memory result)\n            {\n                return result;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n            }\n        } else if (makerToken == opts.weth) {\n            // Token to ETH\n            try\n                kyberHint.buildTokenToEthHint\n                    {gas: KYBER_CALL_GAS}\n                    (\n                        takerToken,\n                        IKyberHintHandler.TradeType.MaskIn,\n                        selectedReserves,\n                        emptySplits\n                    )\n                returns (bytes memory result)\n            {\n                return result;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n            }\n\n        } else {\n            // Token to Token\n            // We use the same reserve both ways\n            try\n                kyberHint.buildTokenToTokenHint\n                    {gas: KYBER_CALL_GAS}\n                    (\n                        takerToken,\n                        IKyberHintHandler.TradeType.MaskIn,\n                        selectedReserves,\n                        emptySplits,\n                        makerToken,\n                        IKyberHintHandler.TradeType.MaskIn,\n                        selectedReserves,\n                        emptySplits\n                    )\n                returns (bytes memory result)\n            {\n                return result;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n            }\n        }\n    }\n\n    function _sampleSellForApproximateBuyFromKyber(\n        bytes memory takerTokenData,\n        bytes memory makerTokenData,\n        uint256 sellAmount\n    )\n        private\n        view\n        returns (uint256)\n    {\n        (address makerToken, KyberSamplerOpts memory opts) =\n            abi.decode(makerTokenData, (address, KyberSamplerOpts));\n        (address takerToken, ) =\n            abi.decode(takerTokenData, (address, KyberSamplerOpts));\n        try\n            this.sampleSellFromKyberNetwork\n                (opts, takerToken, makerToken, sellAmount)\n            returns (uint256 amount)\n        {\n            return amount;\n        } catch (bytes memory) {\n            // Swallow failures, leaving all results as zero.\n            return 0;\n        }\n    }\n\n    function sampleSellFromKyberNetwork(\n        KyberSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256 takerTokenAmount\n    )\n        public\n        view\n        returns (uint256 makerTokenAmount)\n    {\n        // If there is no hint do not continue\n        if (opts.hint.length == 0) {\n            return 0;\n        }\n\n        try\n            IKyberNetworkProxy(opts.networkProxy).getExpectedRateAfterFee\n                {gas: KYBER_CALL_GAS}\n                (\n                    takerToken == opts.weth ? KYBER_ETH_ADDRESS : takerToken,\n                    makerToken == opts.weth ? KYBER_ETH_ADDRESS : makerToken,\n                    takerTokenAmount,\n                    0, // fee\n                    opts.hint\n                )\n            returns (uint256 rate)\n        {\n            uint256 makerTokenDecimals = _getTokenDecimals(makerToken);\n            uint256 takerTokenDecimals = _getTokenDecimals(takerToken);\n            makerTokenAmount =\n                rate *\n                takerTokenAmount *\n                10 ** makerTokenDecimals /\n                10 ** takerTokenDecimals /\n                10 ** 18;\n            return makerTokenAmount;\n        } catch (bytes memory) {\n            // Swallow failures, leaving all results as zero.\n            return 0;\n        }\n    }\n\n    function _getNextReserveId(\n        KyberSamplerOpts memory opts,\n        address takerToken,\n        address makerToken\n    )\n        internal\n        view\n        returns (bytes32 reserveId)\n    {\n        // Fetch the registered reserves for this pair\n        IKyberHintHandler kyberHint = IKyberHintHandler(opts.hintHandler);\n        (bytes32[] memory reserveIds, ,) = kyberHint.getTradingReserves(\n            takerToken == opts.weth ? KYBER_ETH_ADDRESS : takerToken,\n            makerToken == opts.weth ? KYBER_ETH_ADDRESS : makerToken,\n            true,\n            new bytes(0) // empty hint\n        );\n\n        if (opts.reserveOffset >= reserveIds.length) {\n            return 0x0;\n        }\n\n        reserveId = reserveIds[opts.reserveOffset];\n        // Ignore Kyber Bridged Reserves (0xbb)\n        if (uint256(reserveId >> 248) == 0xbb) {\n            return 0x0;\n        }\n\n        return reserveId;\n    }\n}\n"
        },
        "./interfaces/IKyberNetwork.sol": {
            "id": 30,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n// Keepin everything together\ninterface IKyberNetwork {\n\n\n}\n\n\ninterface IKyberNetworkProxy {\n\n    function getExpectedRateAfterFee(\n        address src,\n        address dest,\n        uint256 srcQty,\n        uint256 platformFeeBps,\n        bytes calldata hint\n    )\n        external\n        view\n        returns (uint256 expectedRate);\n}\n\ninterface IKyberHintHandler {\n\n    enum TradeType {BestOfAll, MaskIn, MaskOut, Split}\n\n    enum ProcessWithRate {NotRequired, Required}\n\n    function getTradingReserves(\n        address tokenSrc,\n        address tokenDest,\n        bool isTokenToToken,\n        bytes calldata hint\n    )\n        external\n        view\n        returns (\n            bytes32[] memory reserveIds,\n            uint256[] memory splitValuesBps,\n            ProcessWithRate processWithRate\n        );\n\n    function buildTokenToEthHint(\n        address tokenSrc,\n        TradeType tokenToEthType,\n        bytes32[] calldata tokenToEthReserveIds,\n        uint256[] calldata tokenToEthSplits\n    )\n        external\n        view\n        returns (bytes memory hint);\n\n    function buildEthToTokenHint(\n        address tokenDest,\n        TradeType ethToTokenType,\n        bytes32[] calldata ethToTokenReserveIds,\n        uint256[] calldata ethToTokenSplits\n    )\n        external\n        view\n        returns (bytes memory hint);\n\n    function buildTokenToTokenHint(\n        address tokenSrc,\n        TradeType tokenToEthType,\n        bytes32[] calldata tokenToEthReserveIds,\n        uint256[] calldata tokenToEthSplits,\n        address tokenDest,\n        TradeType ethToTokenType,\n        bytes32[] calldata ethToTokenReserveIds,\n        uint256[] calldata ethToTokenSplits\n    )\n        external\n        view\n        returns (bytes memory hint);\n}\n"
        },
        "./LiquidityProviderSampler.sol": {
            "id": 12,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol\";\nimport \"@0x/contracts-zero-ex/contracts/src/vendor/ILiquidityProvider.sol\";\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\n\n\ncontract LiquidityProviderSampler is\n    SamplerUtils,\n    ApproximateBuys\n{\n    /// @dev Default gas limit for liquidity provider calls.\n    uint256 constant private DEFAULT_CALL_GAS = 400e3; // 400k\n\n    /// @dev Sample sell quotes from an arbitrary on-chain liquidity provider.\n    /// @param providerAddress Address of the liquidity provider.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromLiquidityProvider(\n        address providerAddress,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        // Initialize array of maker token amounts.\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            try\n                ILiquidityProvider(providerAddress).getSellQuote\n                    {gas: DEFAULT_CALL_GAS}\n                    (\n                        IERC20TokenV06(takerToken),\n                        IERC20TokenV06(makerToken),\n                        takerTokenAmounts[i]\n                    )\n                returns (uint256 amount)\n            {\n                makerTokenAmounts[i] = amount;\n                // Break early if there are 0 amounts\n                if (makerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from an arbitrary on-chain liquidity provider.\n    /// @param providerAddress Address of the liquidity provider.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromLiquidityProvider(\n        address providerAddress,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        takerTokenAmounts = _sampleApproximateBuys(\n            ApproximateBuyQuoteOpts({\n                makerTokenData: abi.encode(makerToken, providerAddress),\n                takerTokenData: abi.encode(takerToken, providerAddress),\n                getSellQuoteCallback: _sampleSellForApproximateBuyFromLiquidityProvider\n            }),\n            makerTokenAmounts\n        );\n    }\n\n    function _sampleSellForApproximateBuyFromLiquidityProvider(\n        bytes memory takerTokenData,\n        bytes memory makerTokenData,\n        uint256 sellAmount\n    )\n        private\n        view\n        returns (uint256 buyAmount)\n    {\n        (address takerToken, address providerAddress) =\n            abi.decode(takerTokenData, (address, address));\n        (address makerToken) =\n            abi.decode(makerTokenData, (address));\n        try\n            this.sampleSellsFromLiquidityProvider\n                {gas: DEFAULT_CALL_GAS}\n                (providerAddress, takerToken, makerToken, _toSingleValueArray(sellAmount))\n            returns (uint256[] memory amounts)\n        {\n            return amounts[0];\n        } catch (bytes memory) {\n            // Swallow failures, leaving all results as zero.\n            return 0;\n        }\n    }\n}\n"
        },
        "@0x/contracts-zero-ex/contracts/src/vendor/ILiquidityProvider.sol": {
            "id": 50,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\n\n\ninterface ILiquidityProvider {\n\n    /// @dev An optional event an LP can emit for each fill against a source.\n    /// @param inputToken The input token.\n    /// @param outputToken The output token.\n    /// @param inputTokenAmount How much input token was sold.\n    /// @param outputTokenAmount How much output token was bought.\n    /// @param sourceId A bytes32 encoded ascii source ID. E.g., `bytes32('Curve')`/\n    /// @param sourceAddress An optional address associated with the source (e.g, a curve pool).\n    /// @param sourceId A bytes32 encoded ascii source ID. E.g., `bytes32('Curve')`/\n    /// @param sourceAddress An optional address associated with the source (e.g, a curve pool).\n    /// @param sender The caller of the LP.\n    /// @param recipient The recipient of the output tokens.\n    event LiquidityProviderFill(\n        IERC20TokenV06 inputToken,\n        IERC20TokenV06 outputToken,\n        uint256 inputTokenAmount,\n        uint256 outputTokenAmount,\n        bytes32 sourceId,\n        address sourceAddress,\n        address sender,\n        address recipient\n    );\n\n    /// @dev Trades `inputToken` for `outputToken`. The amount of `inputToken`\n    ///      to sell must be transferred to the contract prior to calling this\n    ///      function to trigger the trade.\n    /// @param inputToken The token being sold.\n    /// @param outputToken The token being bought.\n    /// @param recipient The recipient of the bought tokens.\n    /// @param minBuyAmount The minimum acceptable amount of `outputToken` to buy.\n    /// @param auxiliaryData Arbitrary auxiliary data supplied to the contract.\n    /// @return boughtAmount The amount of `outputToken` bought.\n    function sellTokenForToken(\n        IERC20TokenV06 inputToken,\n        IERC20TokenV06 outputToken,\n        address recipient,\n        uint256 minBuyAmount,\n        bytes calldata auxiliaryData\n    )\n        external\n        returns (uint256 boughtAmount);\n\n    /// @dev Trades ETH for token. ETH must either be attached to this function\n    ///      call or sent to the contract prior to calling this function to\n    ///      trigger the trade.\n    /// @param outputToken The token being bought.\n    /// @param recipient The recipient of the bought tokens.\n    /// @param minBuyAmount The minimum acceptable amount of `outputToken` to buy.\n    /// @param auxiliaryData Arbitrary auxiliary data supplied to the contract.\n    /// @return boughtAmount The amount of `outputToken` bought.\n    function sellEthForToken(\n        IERC20TokenV06 outputToken,\n        address recipient,\n        uint256 minBuyAmount,\n        bytes calldata auxiliaryData\n    )\n        external\n        payable\n        returns (uint256 boughtAmount);\n\n    /// @dev Trades token for ETH. The token must be sent to the contract prior\n    ///      to calling this function to trigger the trade.\n    /// @param inputToken The token being sold.\n    /// @param recipient The recipient of the bought tokens.\n    /// @param minBuyAmount The minimum acceptable amount of ETH to buy.\n    /// @param auxiliaryData Arbitrary auxiliary data supplied to the contract.\n    /// @return boughtAmount The amount of ETH bought.\n    function sellTokenForEth(\n        IERC20TokenV06 inputToken,\n        address payable recipient,\n        uint256 minBuyAmount,\n        bytes calldata auxiliaryData\n    )\n        external\n        returns (uint256 boughtAmount);\n\n    /// @dev Quotes the amount of `outputToken` that would be obtained by\n    ///      selling `sellAmount` of `inputToken`.\n    /// @param inputToken Address of the taker token (what to sell). Use\n    ///        the wETH address if selling ETH.\n    /// @param outputToken Address of the maker token (what to buy). Use\n    ///        the wETH address if buying ETH.\n    /// @param sellAmount Amount of `inputToken` to sell.\n    /// @return outputTokenAmount Amount of `outputToken` that would be obtained.\n    function getSellQuote(\n        IERC20TokenV06 inputToken,\n        IERC20TokenV06 outputToken,\n        uint256 sellAmount\n    )\n        external\n        view\n        returns (uint256 outputTokenAmount);\n}\n"
        },
        "./MakerPSMSampler.sol": {
            "id": 14,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./SamplerUtils.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibMathV06.sol\";\n\ninterface IPSM {\n    // @dev Get the fee for selling USDC to DAI in PSM\n    // @return tin toll in [wad]\n    function tin() external view returns (uint256);\n    // @dev Get the fee for selling DAI to USDC in PSM\n    // @return tout toll out [wad]\n    function tout() external view returns (uint256);\n\n    // @dev Get the address of the PSM state Vat\n    // @return address of the Vat\n    function vat() external view returns (address);\n\n    // @dev Get the address of the underlying vault powering PSM\n    // @return address of gemJoin contract\n    function gemJoin() external view returns (address);\n\n    // @dev Get the address of DAI\n    // @return address of DAI contract\n    function dai() external view returns (address);\n\n    // @dev Sell USDC for DAI\n    // @param usr The address of the account trading USDC for DAI.\n    // @param gemAmt The amount of USDC to sell in USDC base units\n    function sellGem(\n        address usr,\n        uint256 gemAmt\n    ) external;\n    // @dev Buy USDC for DAI\n    // @param usr The address of the account trading DAI for USDC\n    // @param gemAmt The amount of USDC to buy in USDC base units\n    function buyGem(\n        address usr,\n        uint256 gemAmt\n    ) external;\n}\n\ninterface IVAT {\n    // @dev Get a collateral type by identifier\n    // @param ilkIdentifier bytes32 identifier. Example: ethers.utils.formatBytes32String(\"PSM-USDC-A\")\n    // @return ilk\n    // @return ilk.Art Total Normalised Debt in wad\n    // @return ilk.rate Accumulated Rates in ray\n    // @return ilk.spot Price with Safety Margin in ray\n    // @return ilk.line Debt Ceiling in rad\n    // @return ilk.dust Urn Debt Floor in rad\n    function ilks(\n        bytes32 ilkIdentifier\n    ) external view returns (\n        uint256 Art,\n        uint256 rate,\n        uint256 spot,\n        uint256 line,\n        uint256 dust\n    );\n}\n\ncontract MakerPSMSampler is\n    SamplerUtils\n{\n    using LibSafeMathV06 for uint256;\n\n    /// @dev Information about which PSM module to use\n    struct MakerPsmInfo {\n        address psmAddress;\n        bytes32 ilkIdentifier;\n        address gemTokenAddress;\n    }\n\n    /// @dev Gas limit for MakerPsm calls.\n    uint256 constant private MAKER_PSM_CALL_GAS = 300e3; // 300k\n\n\n    // Maker units\n    // wad: fixed point decimal with 18 decimals (for basic quantities, e.g. balances)\n    uint256 constant private WAD = 10 ** 18;\n    // ray: fixed point decimal with 27 decimals (for precise quantites, e.g. ratios)\n    uint256 constant private RAY = 10 ** 27;\n    // rad: fixed point decimal with 45 decimals (result of integer multiplication with a wad and a ray)\n    uint256 constant private RAD = 10 ** 45;\n    // See https://github.com/makerdao/dss/blob/master/DEVELOPING.m\n\n    /// @dev Sample sell quotes from Maker PSM\n    function sampleSellsFromMakerPsm(\n        MakerPsmInfo memory psmInfo,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        IPSM psm = IPSM(psmInfo.psmAddress);\n        IVAT vat = IVAT(psm.vat());\n\n\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        if (makerToken != psm.dai() && takerToken != psm.dai()) {\n            return makerTokenAmounts;\n        }\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            uint256 buyAmount = _samplePSMSell(psmInfo, makerToken, takerToken, takerTokenAmounts[i], psm, vat);\n\n            if (buyAmount == 0) {\n                break;\n            }\n            makerTokenAmounts[i] = buyAmount;\n        }\n    }\n\n    function sampleBuysFromMakerPsm(\n        MakerPsmInfo memory psmInfo,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        IPSM psm = IPSM(psmInfo.psmAddress);\n        IVAT vat = IVAT(psm.vat());\n\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n        if (makerToken != psm.dai() && takerToken != psm.dai()) {\n            return takerTokenAmounts;\n        }\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            uint256 sellAmount = _samplePSMBuy(psmInfo, makerToken, takerToken, makerTokenAmounts[i], psm, vat);\n\n            if (sellAmount == 0) {\n                break;\n            }\n\n            takerTokenAmounts[i] = sellAmount;\n        }\n\n    }\n\n    function _samplePSMSell(MakerPsmInfo memory psmInfo, address makerToken, address takerToken, uint256 takerTokenAmount, IPSM psm, IVAT vat)\n        private\n        view\n        returns (uint256)\n    {\n        (uint256 totalDebtInWad,,, uint256 debtCeilingInRad, uint256 debtFloorInRad) = vat.ilks(psmInfo.ilkIdentifier);\n        uint256 gemTokenBaseUnit = uint256(1e6);\n\n        if (takerToken == psmInfo.gemTokenAddress) {\n            // Simulate sellGem\n            // Selling USDC to the PSM, increasing the total debt\n            // Convert USDC 6 decimals to 18 decimals [wad]\n            uint256 takerTokenAmountInWad = takerTokenAmount.safeMul(1e12);\n\n            uint256 newTotalDebtInRad = totalDebtInWad.safeAdd(takerTokenAmountInWad).safeMul(RAY);\n\n            // PSM is too full to fit\n            if (newTotalDebtInRad >= debtCeilingInRad) {\n                return 0;\n            }\n\n            uint256 feeInWad = takerTokenAmountInWad.safeMul(psm.tin()).safeDiv(WAD);\n            uint256 makerTokenAmountInWad = takerTokenAmountInWad.safeSub(feeInWad);\n\n            return makerTokenAmountInWad;\n        } else if (makerToken == psmInfo.gemTokenAddress) {\n            // Simulate buyGem\n            // Buying USDC from the PSM, decreasing the total debt\n            // Selling DAI for USDC, already in 18 decimals [wad]\n            uint256 takerTokenAmountInWad = takerTokenAmount;\n            if (takerTokenAmountInWad > totalDebtInWad) {\n                return 0;\n            }\n            uint256 newTotalDebtInRad = totalDebtInWad.safeSub(takerTokenAmountInWad).safeMul(RAY);\n\n            // PSM is empty, not enough USDC to buy from it\n            if (newTotalDebtInRad <= debtFloorInRad) {\n                return 0;\n            }\n\n            uint256 feeDivisorInWad = WAD.safeAdd(psm.tout()); // eg. 1.001 * 10 ** 18 with 0.1% tout;\n            uint256 makerTokenAmountInGemTokenBaseUnits =  takerTokenAmountInWad.safeMul(gemTokenBaseUnit).safeDiv(feeDivisorInWad);\n\n            return makerTokenAmountInGemTokenBaseUnits;\n        }\n\n        return 0;\n    }\n\n    function _samplePSMBuy(MakerPsmInfo memory psmInfo, address makerToken, address takerToken, uint256 makerTokenAmount, IPSM psm, IVAT vat)\n        private\n        view\n        returns (uint256)\n    {\n        (uint256 totalDebtInWad,,, uint256 debtCeilingInRad, uint256 debtFloorInRad) = vat.ilks(psmInfo.ilkIdentifier);\n\n        if (takerToken == psmInfo.gemTokenAddress) {\n            // Simulate sellGem\n            // Selling USDC to the PSM, increasing the total debt\n            uint256 makerTokenAmountInWad = makerTokenAmount;\n            uint256 feeDivisorInWad = WAD.safeSub(psm.tin()); // eg. 0.999 * 10 ** 18 with 0.1% tin;\n            uint256 takerTokenAmountInWad = makerTokenAmountInWad.safeMul(WAD).safeDiv(feeDivisorInWad);\n            uint256 newTotalDebtInRad = totalDebtInWad.safeAdd(takerTokenAmountInWad).safeMul(RAY);\n\n            // PSM is too full to fit\n            if (newTotalDebtInRad >= debtCeilingInRad) {\n                return 0;\n            }\n\n            uint256 takerTokenAmountInGemInGemBaseUnits = (takerTokenAmountInWad.safeDiv(1e12)).safeAdd(1); // Add 1 to deal with cut off decimals converting to lower decimals\n\n            return takerTokenAmountInGemInGemBaseUnits;\n        } else if (makerToken == psmInfo.gemTokenAddress) {\n            // Simulate buyGem\n            // Buying USDC from the PSM, decreasing the total debt\n            uint256 makerTokenAmountInWad = makerTokenAmount.safeMul(1e12);\n            uint256 feeMultiplierInWad = WAD.safeAdd(psm.tout()); // eg. 1.001 * 10 ** 18 with 0.1% tout;\n            uint256 takerTokenAmountInWad =  makerTokenAmountInWad.safeMul(feeMultiplierInWad).safeDiv(WAD);\n            if (takerTokenAmountInWad > totalDebtInWad) {\n                return 0;\n            }\n            uint256 newTotalDebtInRad = totalDebtInWad.safeSub(takerTokenAmountInWad).safeMul(RAY);\n\n            // PSM is empty, not enough USDC to buy\n            if (newTotalDebtInRad <= debtFloorInRad) {\n                return 0;\n            }\n\n\n            return takerTokenAmountInWad;\n        }\n\n        return 0;\n    }\n\n}\n"
        },
        "./MultiBridgeSampler.sol": {
            "id": 16,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IMultiBridge.sol\";\n\n\ncontract MultiBridgeSampler {\n\n    /// @dev Default gas limit for multibridge calls.\n    uint256 constant private DEFAULT_CALL_GAS = 400e3; // 400k\n\n    /// @dev Sample sell quotes from MultiBridge.\n    /// @param multibridge Address of the MultiBridge contract.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param intermediateToken The address of the intermediate token to\n    ///        use in an indirect route.\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromMultiBridge(\n        address multibridge,\n        address takerToken,\n        address intermediateToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        // Initialize array of maker token amounts.\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        // If no address provided, return all zeros.\n        if (multibridge == address(0)) {\n            return makerTokenAmounts;\n        }\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            (bool didSucceed, bytes memory resultData) =\n                multibridge.staticcall.gas(DEFAULT_CALL_GAS)(\n                    abi.encodeWithSelector(\n                        IMultiBridge(0).getSellQuote.selector,\n                        takerToken,\n                        intermediateToken,\n                        makerToken,\n                        takerTokenAmounts[i]\n                    ));\n            uint256 buyAmount = 0;\n            if (didSucceed) {\n                buyAmount = abi.decode(resultData, (uint256));\n            }\n            // Exit early if the amount is too high for the source to serve\n            if (buyAmount == 0) {\n                break;\n            }\n\n            makerTokenAmounts[i] = buyAmount;\n        }\n    }\n}\n"
        },
        "./interfaces/IMultiBridge.sol": {
            "id": 33,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface IMultiBridge {\n\n    /// @dev Transfers `amount` of the ERC20 `tokenAddress` from `from` to `to`.\n    /// @param tokenAddress The address of the ERC20 token to transfer.\n    /// @param from Address to transfer asset from.\n    /// @param to Address to transfer asset to.\n    /// @param amount Amount of asset to transfer.\n    /// @param bridgeData Arbitrary asset data needed by the bridge contract.\n    /// @return success The magic bytes `0xdc1600f3` if successful.\n    function bridgeTransferFrom(\n        address tokenAddress,\n        address from,\n        address to,\n        uint256 amount,\n        bytes calldata bridgeData\n    )\n        external\n        returns (bytes4 success);\n\n    /// @dev Quotes the amount of `makerToken` that would be obtained by\n    ///      selling `sellAmount` of `takerToken`.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param intermediateToken The address of the intermediate token to\n    ///        use in an indirect route.\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param sellAmount Amount of `takerToken` to sell.\n    /// @return makerTokenAmount Amount of `makerToken` that would be obtained.\n    function getSellQuote(\n        address takerToken,\n        address intermediateToken,\n        address makerToken,\n        uint256 sellAmount\n    )\n        external\n        view\n        returns (uint256 makerTokenAmount);\n}\n"
        },
        "./MStableSampler.sol": {
            "id": 13,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IMStable.sol\";\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\n\n\ncontract MStableSampler is\n    SamplerUtils,\n    ApproximateBuys\n{\n    /// @dev Default gas limit for mStable calls.\n    uint256 constant private DEFAULT_CALL_GAS = 800e3; // 800k\n\n    /// @dev Sample sell quotes from the mStable contract\n    /// @param router Address of the mStable contract\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromMStable(\n        address router,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        // Initialize array of maker token amounts.\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            try\n                IMStable(router).getSwapOutput\n                    {gas: DEFAULT_CALL_GAS}\n                    (takerToken, makerToken, takerTokenAmounts[i])\n                returns (bool, string memory, uint256 amount)\n            {\n                makerTokenAmounts[i] = amount;\n                // Break early if there are 0 amounts\n                if (makerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from MStable contract\n    /// @param router Address of the mStable contract\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromMStable(\n        address router,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        return _sampleApproximateBuys(\n            ApproximateBuyQuoteOpts({\n                makerTokenData: abi.encode(makerToken, router),\n                takerTokenData: abi.encode(takerToken, router),\n                getSellQuoteCallback: _sampleSellForApproximateBuyFromMStable\n            }),\n            makerTokenAmounts\n        );\n    }\n\n    function _sampleSellForApproximateBuyFromMStable(\n        bytes memory takerTokenData,\n        bytes memory makerTokenData,\n        uint256 sellAmount\n    )\n        private\n        view\n        returns (uint256 buyAmount)\n    {\n        (address takerToken, address router) =\n            abi.decode(takerTokenData, (address, address));\n        (address makerToken) =\n            abi.decode(makerTokenData, (address));\n        try\n            this.sampleSellsFromMStable\n                (router, takerToken, makerToken, _toSingleValueArray(sellAmount))\n            returns (uint256[] memory amounts)\n        {\n            return amounts[0];\n        } catch (bytes memory) {\n            // Swallow failures, leaving all results as zero.\n            return 0;\n        }\n    }\n}\n"
        },
        "./interfaces/IMStable.sol": {
            "id": 31,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface IMStable {\n\n    function getSwapOutput(\n        address _input,\n        address _output,\n        uint256 _quantity\n    )\n        external\n        view\n        returns (bool, string memory, uint256 output);\n}\n"
        },
        "./MooniswapSampler.sol": {
            "id": 15,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IMooniswap.sol\";\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\n\n\ncontract MooniswapSampler is\n    SamplerUtils,\n    ApproximateBuys\n{\n    /// @dev Gas limit for Mooniswap calls.\n    uint256 constant private MOONISWAP_CALL_GAS = 150e3; // 150k\n\n    /// @dev Sample sell quotes from Mooniswap.\n    /// @param registry Address of the Mooniswap Registry.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return pool The contract address for the pool\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromMooniswap(\n        address registry,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (IMooniswap pool, uint256[] memory makerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            uint256 buyAmount = sampleSingleSellFromMooniswapPool(\n                registry,\n                takerToken,\n                makerToken,\n                takerTokenAmounts[i]\n            );\n            makerTokenAmounts[i] = buyAmount;\n            // Break early if there are 0 amounts\n            if (makerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n\n        pool = IMooniswap(\n            IMooniswapRegistry(registry).pools(takerToken, makerToken)\n        );\n    }\n\n    function sampleSingleSellFromMooniswapPool(\n        address registry,\n        address mooniswapTakerToken,\n        address mooniswapMakerToken,\n        uint256 takerTokenAmount\n    )\n        public\n        view\n        returns (uint256)\n    {\n        // Find the pool for the pair.\n        IMooniswap pool = IMooniswap(\n            IMooniswapRegistry(registry).pools(mooniswapTakerToken, mooniswapMakerToken)\n        );\n        // If there is no pool then return early\n        if (address(pool) == address(0)) {\n            return 0;\n        }\n        uint256 poolBalance = mooniswapTakerToken == address(0)\n            ? address(pool).balance\n            : IERC20TokenV06(mooniswapTakerToken).balanceOf(address(pool));\n        // If the pool balance is smaller than the sell amount\n        // don't sample to avoid multiplication overflow in buys\n        if (poolBalance < takerTokenAmount) {\n            return 0;\n        }\n        try\n            pool.getReturn\n                {gas: MOONISWAP_CALL_GAS}\n                (mooniswapTakerToken, mooniswapMakerToken, takerTokenAmount)\n            returns (uint256 amount)\n        {\n            return amount;\n        } catch (bytes memory) {\n            // Swallow failures, leaving all results as zero.\n            return 0;\n        }\n    }\n\n    /// @dev Sample buy quotes from Mooniswap.\n    /// @param registry Address of the Mooniswap Registry.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token sell amount for each sample.\n    /// @return pool The contract address for the pool\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromMooniswap(\n        address registry,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (IMooniswap pool, uint256[] memory takerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n\n        takerTokenAmounts = _sampleApproximateBuys(\n            ApproximateBuyQuoteOpts({\n                makerTokenData: abi.encode(registry, makerToken),\n                takerTokenData: abi.encode(registry, takerToken),\n                getSellQuoteCallback: _sampleSellForApproximateBuyFromMooniswap\n            }),\n            makerTokenAmounts\n        );\n\n        pool = IMooniswap(\n            IMooniswapRegistry(registry).pools(takerToken, makerToken)\n        );\n    }\n\n    function _sampleSellForApproximateBuyFromMooniswap(\n        bytes memory takerTokenData,\n        bytes memory makerTokenData,\n        uint256 sellAmount\n    )\n        private\n        view\n        returns (uint256 buyAmount)\n    {\n        (address registry, address mooniswapTakerToken) = abi.decode(takerTokenData, (address, address));\n        (address _registry, address mooniswapMakerToken) = abi.decode(makerTokenData, (address, address));\n        return sampleSingleSellFromMooniswapPool(\n            registry,\n            mooniswapTakerToken,\n            mooniswapMakerToken,\n            sellAmount\n        );\n    }\n}\n"
        },
        "./interfaces/IMooniswap.sol": {
            "id": 32,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface IMooniswapRegistry {\n\n    function pools(address token1, address token2) external view returns(address);\n}\n\ninterface IMooniswap {\n\n    function getReturn(\n        address fromToken,\n        address destToken,\n        uint256 amount\n    )\n        external\n        view\n        returns(uint256 returnAmount);\n}\n"
        },
        "./NativeOrderSampler.sol": {
            "id": 17,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibMathV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol\";\n\n\ninterface IExchange {\n\n    enum OrderStatus {\n        INVALID,\n        FILLABLE,\n        FILLED,\n        CANCELLED,\n        EXPIRED\n    }\n\n    /// @dev A standard OTC or OO limit order.\n    struct LimitOrder {\n        IERC20TokenV06 makerToken;\n        IERC20TokenV06 takerToken;\n        uint128 makerAmount;\n        uint128 takerAmount;\n        uint128 takerTokenFeeAmount;\n        address maker;\n        address taker;\n        address sender;\n        address feeRecipient;\n        bytes32 pool;\n        uint64 expiry;\n        uint256 salt;\n    }\n\n    /// @dev An RFQ limit order.\n    struct RfqOrder {\n        IERC20TokenV06 makerToken;\n        IERC20TokenV06 takerToken;\n        uint128 makerAmount;\n        uint128 takerAmount;\n        address maker;\n        address taker;\n        address txOrigin;\n        bytes32 pool;\n        uint64 expiry;\n        uint256 salt;\n    }\n\n    /// @dev Info on a limit or RFQ order.\n    struct OrderInfo {\n        bytes32 orderHash;\n        OrderStatus status;\n        uint128 takerTokenFilledAmount;\n    }\n\n    /// @dev Allowed signature types.\n    enum SignatureType {\n        ILLEGAL,\n        INVALID,\n        EIP712,\n        ETHSIGN\n    }\n\n    /// @dev Encoded EC signature.\n    struct Signature {\n        // How to validate the signature.\n        SignatureType signatureType;\n        // EC Signature data.\n        uint8 v;\n        // EC Signature data.\n        bytes32 r;\n        // EC Signature data.\n        bytes32 s;\n    }\n\n    /// @dev Get the order info for a limit order.\n    /// @param order The limit order.\n    /// @return orderInfo Info about the order.\n    function getLimitOrderInfo(LimitOrder memory order)\n        external\n        view\n        returns (OrderInfo memory orderInfo);\n\n    /// @dev Get order info, fillable amount, and signature validity for a limit order.\n    ///      Fillable amount is determined using balances and allowances of the maker.\n    /// @param order The limit order.\n    /// @param signature The order signature.\n    /// @return orderInfo Info about the order.\n    /// @return actualFillableTakerTokenAmount How much of the order is fillable\n    ///         based on maker funds, in taker tokens.\n    /// @return isSignatureValid Whether the signature is valid.\n    function getLimitOrderRelevantState(\n        LimitOrder memory order,\n        Signature calldata signature\n    )\n        external\n        view\n        returns (\n            OrderInfo memory orderInfo,\n            uint128 actualFillableTakerTokenAmount,\n            bool isSignatureValid\n        );\n}\n\ncontract NativeOrderSampler {\n    using LibSafeMathV06 for uint256;\n    using LibBytesV06 for bytes;\n\n    /// @dev Gas limit for calls to `getOrderFillableTakerAmount()`.\n    uint256 constant internal DEFAULT_CALL_GAS = 200e3; // 200k\n\n    /// @dev Queries the fillable taker asset amounts of native orders.\n    ///      Effectively ignores orders that have empty signatures or\n    ///      maker/taker asset amounts (returning 0).\n    /// @param orders Native limit orders to query.\n    /// @param orderSignatures Signatures for each respective order in `orders`.\n    /// @param exchange The V4 exchange.\n    /// @return orderFillableTakerAssetAmounts How much taker asset can be filled\n    ///         by each order in `orders`.\n    function getLimitOrderFillableTakerAssetAmounts(\n        IExchange.LimitOrder[] memory orders,\n        IExchange.Signature[] memory orderSignatures,\n        IExchange exchange\n    )\n        public\n        view\n        returns (uint256[] memory orderFillableTakerAssetAmounts)\n    {\n        orderFillableTakerAssetAmounts = new uint256[](orders.length);\n        for (uint256 i = 0; i != orders.length; i++) {\n            try\n                this.getLimitOrderFillableTakerAmount\n                    {gas: DEFAULT_CALL_GAS}\n                    (\n                       orders[i],\n                       orderSignatures[i],\n                       exchange\n                    )\n                returns (uint256 amount)\n            {\n                orderFillableTakerAssetAmounts[i] = amount;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                orderFillableTakerAssetAmounts[i] = 0;\n            }\n        }\n    }\n\n    /// @dev Queries the fillable taker asset amounts of native orders.\n    ///      Effectively ignores orders that have empty signatures or\n    /// @param orders Native orders to query.\n    /// @param orderSignatures Signatures for each respective order in `orders`.\n    /// @param exchange The V4 exchange.\n    /// @return orderFillableMakerAssetAmounts How much maker asset can be filled\n    ///         by each order in `orders`.\n    function getLimitOrderFillableMakerAssetAmounts(\n        IExchange.LimitOrder[] memory orders,\n        IExchange.Signature[] memory orderSignatures,\n        IExchange exchange\n    )\n        public\n        view\n        returns (uint256[] memory orderFillableMakerAssetAmounts)\n    {\n        orderFillableMakerAssetAmounts = getLimitOrderFillableTakerAssetAmounts(\n            orders,\n            orderSignatures,\n            exchange\n        );\n        // `orderFillableMakerAssetAmounts` now holds taker asset amounts, so\n        // convert them to maker asset amounts.\n        for (uint256 i = 0; i < orders.length; ++i) {\n            if (orderFillableMakerAssetAmounts[i] != 0) {\n                orderFillableMakerAssetAmounts[i] = LibMathV06.getPartialAmountCeil(\n                    orderFillableMakerAssetAmounts[i],\n                    orders[i].takerAmount,\n                    orders[i].makerAmount\n                );\n            }\n        }\n    }\n\n    /// @dev Get the fillable taker amount of an order, taking into account\n    ///      order state, maker fees, and maker balances.\n    function getLimitOrderFillableTakerAmount(\n        IExchange.LimitOrder memory order,\n        IExchange.Signature memory signature,\n        IExchange exchange\n    )\n        virtual\n        public\n        view\n        returns (uint256 fillableTakerAmount)\n    {\n        if (signature.signatureType == IExchange.SignatureType.ILLEGAL ||\n            signature.signatureType == IExchange.SignatureType.INVALID ||\n            order.makerAmount == 0 ||\n            order.takerAmount == 0)\n        {\n            return 0;\n        }\n\n        (\n            IExchange.OrderInfo memory orderInfo,\n            uint128 remainingFillableTakerAmount,\n            bool isSignatureValid\n        ) = exchange.getLimitOrderRelevantState(order, signature);\n\n        if (\n              orderInfo.status != IExchange.OrderStatus.FILLABLE ||\n              !isSignatureValid ||\n              order.makerToken == IERC20TokenV06(0)\n            ) {\n            return 0;\n        }\n\n        fillableTakerAmount = uint256(remainingFillableTakerAmount);\n    }\n}\n"
        },
        "./ShellSampler.sol": {
            "id": 19,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./ApproximateBuys.sol\";\nimport \"./interfaces/IShell.sol\";\nimport \"./SamplerUtils.sol\";\n\n\ncontract ShellSampler is\n    SamplerUtils,\n    ApproximateBuys\n{\n\n    struct ShellInfo {\n        address poolAddress;\n    }\n\n    /// @dev Default gas limit for Shell calls.\n    uint256 constant private DEFAULT_CALL_GAS = 300e3; // 300k\n\n    /// @dev Sample sell quotes from the Shell pool contract\n    /// @param pool Address of the Shell pool contract\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromShell(\n        address pool,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        // Initialize array of maker token amounts.\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            try\n                IShell(pool).viewOriginSwap\n                    {gas: DEFAULT_CALL_GAS}\n                    (takerToken, makerToken, takerTokenAmounts[i])\n                returns (uint256 amount)\n            {\n                makerTokenAmounts[i] = amount;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from Shell pool contract\n    /// @param pool Address of the Shell pool contract\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromShell(\n        address pool,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        return _sampleApproximateBuys(\n            ApproximateBuyQuoteOpts({\n                makerTokenData: abi.encode(makerToken, pool),\n                takerTokenData: abi.encode(takerToken, pool),\n                getSellQuoteCallback: _sampleSellForApproximateBuyFromShell\n            }),\n            makerTokenAmounts\n        );\n    }\n\n    function _sampleSellForApproximateBuyFromShell(\n        bytes memory takerTokenData,\n        bytes memory makerTokenData,\n        uint256 sellAmount\n    )\n        private\n        view\n        returns (uint256 buyAmount)\n    {\n        (address takerToken, address pool) = abi.decode(takerTokenData, (address, address));\n        (address makerToken) = abi.decode(makerTokenData, (address));\n\n        try\n            this.sampleSellsFromShell\n                (pool, takerToken, makerToken, _toSingleValueArray(sellAmount))\n            returns (uint256[] memory amounts)\n        {\n            return amounts[0];\n        } catch (bytes memory) {\n            // Swallow failures, leaving all results as zero.\n            return 0;\n        }\n    }\n}\n"
        },
        "./interfaces/IShell.sol": {
            "id": 34,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface IShell {\n\n    function viewOriginSwap (\n        address from,\n        address to,\n        uint256 fromAmount\n    )\n        external\n        view\n        returns (uint256 toAmount);\n\n    function viewTargetSwap (\n        address from,\n        address to,\n        uint256 toAmount\n    )\n        external\n        view\n        returns (uint256 fromAmount);\n}\n\n"
        },
        "./SmoothySampler.sol": {
            "id": 20,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\n// import \"./interfaces/ISmoothy.sol\";\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\nimport \"./interfaces/ISmoothy.sol\";\n\ncontract SmoothySampler is\n    SamplerUtils,\n    ApproximateBuys\n{\n    /// @dev Information for sampling from smoothy sources.\n    struct SmoothyInfo {\n        address poolAddress;\n        bytes4 sellQuoteFunctionSelector;\n        bytes4 buyQuoteFunctionSelector;\n    }\n\n    /// @dev Base gas limit for Smoothy calls.\n    uint256 constant private SMOOTHY_CALL_GAS = 600e3;\n\n    /// @dev Sample sell quotes from Smoothy.\n    /// @param smoothyInfo Smoothy information specific to this token pair.\n    /// @param fromTokenIdx Index of the taker token (what to sell).\n    /// @param toTokenIdx Index of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromSmoothy(\n        SmoothyInfo memory smoothyInfo,\n        int128 fromTokenIdx,\n        int128 toTokenIdx,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        // Basically a Curve fork\n\n        // Smoothy only keep a percentage of its tokens available in reserve\n        uint256 poolReserveMakerAmount = ISmoothy(smoothyInfo.poolAddress).getBalance(uint256(toTokenIdx)) -\n                                         ISmoothy(smoothyInfo.poolAddress)._yBalances(uint256(toTokenIdx));\n        (, , , uint256 decimals) = ISmoothy(smoothyInfo.poolAddress).getTokenStats(uint256(toTokenIdx));\n        poolReserveMakerAmount = poolReserveMakerAmount/(10**(18-decimals));\n\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            (bool didSucceed, bytes memory resultData) =\n                smoothyInfo.poolAddress.staticcall.gas(SMOOTHY_CALL_GAS)(\n                    abi.encodeWithSelector(\n                        smoothyInfo.sellQuoteFunctionSelector,\n                        fromTokenIdx,\n                        toTokenIdx,\n                        takerTokenAmounts[i]\n                    ));\n            uint256 buyAmount = 0;\n            if (didSucceed) {\n                buyAmount = abi.decode(resultData, (uint256));\n            }\n\n            // Make sure the quoted buyAmount is available in the pool reserve\n            if (buyAmount >= poolReserveMakerAmount) {\n                // Assign pool reserve amount for all higher samples to break early\n                for (uint256 j = i; j < numSamples; j++) {\n                    makerTokenAmounts[j] = poolReserveMakerAmount;\n                }\n                break;\n            } else {\n                makerTokenAmounts[i] = buyAmount;\n            }\n\n            // Break early if there are 0 amounts\n            if (makerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from Smoothy.\n    /// @param smoothyInfo Smoothy information specific to this token pair.\n    /// @param fromTokenIdx Index of the taker token (what to sell).\n    /// @param toTokenIdx Index of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromSmoothy(\n        SmoothyInfo memory smoothyInfo,\n        int128 fromTokenIdx,\n        int128 toTokenIdx,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        // Buys not supported so approximate it.\n        return _sampleApproximateBuys(\n            ApproximateBuyQuoteOpts({\n                makerTokenData: abi.encode(toTokenIdx, smoothyInfo),\n                takerTokenData: abi.encode(fromTokenIdx, smoothyInfo),\n                getSellQuoteCallback: _sampleSellForApproximateBuyFromSmoothy\n            }),\n            makerTokenAmounts\n        );\n    }\n\n    function _sampleSellForApproximateBuyFromSmoothy(\n        bytes memory takerTokenData,\n        bytes memory makerTokenData,\n        uint256 sellAmount\n    )\n        private\n        view\n        returns (uint256 buyAmount)\n    {\n        (int128 takerTokenIdx, SmoothyInfo memory smoothyInfo) =\n            abi.decode(takerTokenData, (int128, SmoothyInfo));\n        (int128 makerTokenIdx) =\n            abi.decode(makerTokenData, (int128));\n        (bool success, bytes memory resultData) =\n            address(this).staticcall(abi.encodeWithSelector(\n                this.sampleSellsFromSmoothy.selector,\n                smoothyInfo,\n                takerTokenIdx,\n                makerTokenIdx,\n                _toSingleValueArray(sellAmount)\n            ));\n        if (!success) {\n            return 0;\n        }\n        // solhint-disable-next-line indent\n        return abi.decode(resultData, (uint256[]))[0];\n    }\n}\n"
        },
        "./interfaces/ISmoothy.sol": {
            "id": 35,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface ISmoothy {\n\n    function getBalance (\n        uint256 tid\n    )\n        external\n        view\n        returns (uint256 balance);\n\n    function _yBalances (\n        uint256 tid\n    )\n        external\n        view\n        returns (uint256 balance);\n\n    function getTokenStats (\n        uint256 tid\n    )\n        external\n        view\n        returns (uint256 softWeight, uint256 hardWeight, uint256 balance, uint256 decimals);\n}\n"
        },
        "./TwoHopSampler.sol": {
            "id": 21,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol\";\n\n\ncontract TwoHopSampler {\n    using LibBytesV06 for bytes;\n\n    struct HopInfo {\n        uint256 sourceIndex;\n        bytes returnData;\n    }\n\n    function sampleTwoHopSell(\n        bytes[] memory firstHopCalls,\n        bytes[] memory secondHopCalls,\n        uint256 sellAmount\n    )\n        public\n        returns (\n            HopInfo memory firstHop,\n            HopInfo memory secondHop,\n            uint256 buyAmount\n        )\n    {\n        uint256 intermediateAssetAmount = 0;\n        for (uint256 i = 0; i != firstHopCalls.length; ++i) {\n            firstHopCalls[i].writeUint256(firstHopCalls[i].length - 32, sellAmount);\n            (bool didSucceed, bytes memory returnData) = address(this).call(firstHopCalls[i]);\n            if (didSucceed) {\n                uint256 amount = returnData.readUint256(returnData.length - 32);\n                if (amount > intermediateAssetAmount) {\n                    intermediateAssetAmount = amount;\n                    firstHop.sourceIndex = i;\n                    firstHop.returnData = returnData;\n                }\n            }\n        }\n        if (intermediateAssetAmount == 0) {\n            return (firstHop, secondHop, buyAmount);\n        }\n        for (uint256 j = 0; j != secondHopCalls.length; ++j) {\n            secondHopCalls[j].writeUint256(secondHopCalls[j].length - 32, intermediateAssetAmount);\n            (bool didSucceed, bytes memory returnData) = address(this).call(secondHopCalls[j]);\n            if (didSucceed) {\n                uint256 amount = returnData.readUint256(returnData.length - 32);\n                if (amount > buyAmount) {\n                    buyAmount = amount;\n                    secondHop.sourceIndex = j;\n                    secondHop.returnData = returnData;\n                }\n            }\n        }\n    }\n\n    function sampleTwoHopBuy(\n        bytes[] memory firstHopCalls,\n        bytes[] memory secondHopCalls,\n        uint256 buyAmount\n    )\n        public\n        returns (\n            HopInfo memory firstHop,\n            HopInfo memory secondHop,\n            uint256 sellAmount\n        )\n    {\n        sellAmount = uint256(-1);\n        uint256 intermediateAssetAmount = uint256(-1);\n        for (uint256 j = 0; j != secondHopCalls.length; ++j) {\n            secondHopCalls[j].writeUint256(secondHopCalls[j].length - 32, buyAmount);\n            (bool didSucceed, bytes memory returnData) = address(this).call(secondHopCalls[j]);\n            if (didSucceed) {\n                uint256 amount = returnData.readUint256(returnData.length - 32);\n                if (\n                    amount > 0 &&\n                    amount < intermediateAssetAmount\n                ) {\n                    intermediateAssetAmount = amount;\n                    secondHop.sourceIndex = j;\n                    secondHop.returnData = returnData;\n                }\n            }\n        }\n        if (intermediateAssetAmount == uint256(-1)) {\n            return (firstHop, secondHop, sellAmount);\n        }\n        for (uint256 i = 0; i != firstHopCalls.length; ++i) {\n            firstHopCalls[i].writeUint256(firstHopCalls[i].length - 32, intermediateAssetAmount);\n            (bool didSucceed, bytes memory returnData) = address(this).call(firstHopCalls[i]);\n            if (didSucceed) {\n                uint256 amount = returnData.readUint256(returnData.length - 32);\n                if (\n                    amount > 0 &&\n                    amount < sellAmount\n                ) {\n                    sellAmount = amount;\n                    firstHop.sourceIndex = i;\n                    firstHop.returnData = returnData;\n                }\n            }\n        }\n    }\n}\n"
        },
        "./UniswapSampler.sol": {
            "id": 22,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IUniswapExchangeQuotes.sol\";\nimport \"./SamplerUtils.sol\";\n\n\ninterface IUniswapExchangeFactory {\n\n    /// @dev Get the exchange for a token.\n    /// @param tokenAddress The address of the token contract.\n    function getExchange(address tokenAddress)\n        external\n        view\n        returns (address);\n}\n\n\ncontract UniswapSampler is\n    SamplerUtils\n{\n    /// @dev Gas limit for Uniswap calls.\n    uint256 constant private UNISWAP_CALL_GAS = 150e3; // 150k\n\n    /// @dev Sample sell quotes from Uniswap.\n    /// @param router Address of the Uniswap Router\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromUniswap(\n        address router,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        IUniswapExchangeQuotes takerTokenExchange = takerToken == address(0) ?\n            IUniswapExchangeQuotes(0) : _getUniswapExchange(router, takerToken);\n        IUniswapExchangeQuotes makerTokenExchange = makerToken == address(0) ?\n            IUniswapExchangeQuotes(0) : _getUniswapExchange(router, makerToken);\n        for (uint256 i = 0; i < numSamples; i++) {\n            bool didSucceed = true;\n            if (makerToken == address(0)) {\n                (makerTokenAmounts[i], didSucceed) = _callUniswapExchangePriceFunction(\n                    address(takerTokenExchange),\n                    takerTokenExchange.getTokenToEthInputPrice.selector,\n                    takerTokenAmounts[i]\n                );\n            } else if (takerToken == address(0)) {\n                (makerTokenAmounts[i], didSucceed) = _callUniswapExchangePriceFunction(\n                    address(makerTokenExchange),\n                    makerTokenExchange.getEthToTokenInputPrice.selector,\n                    takerTokenAmounts[i]\n                );\n            } else {\n                uint256 ethBought;\n                (ethBought, didSucceed) = _callUniswapExchangePriceFunction(\n                    address(takerTokenExchange),\n                    takerTokenExchange.getTokenToEthInputPrice.selector,\n                    takerTokenAmounts[i]\n                );\n                if (ethBought != 0) {\n                    (makerTokenAmounts[i], didSucceed) = _callUniswapExchangePriceFunction(\n                        address(makerTokenExchange),\n                        makerTokenExchange.getEthToTokenInputPrice.selector,\n                        ethBought\n                    );\n                } else {\n                    makerTokenAmounts[i] = 0;\n                }\n            }\n            // Break early if amounts are 0\n            if (!didSucceed || makerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from Uniswap.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token sell amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromUniswap(\n        address router,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n\n        IUniswapExchangeQuotes takerTokenExchange = takerToken == address(0) ?\n            IUniswapExchangeQuotes(0) : _getUniswapExchange(router, takerToken);\n        IUniswapExchangeQuotes makerTokenExchange = makerToken == address(0) ?\n            IUniswapExchangeQuotes(0) : _getUniswapExchange(router, makerToken);\n        for (uint256 i = 0; i < numSamples; i++) {\n            bool didSucceed = true;\n            if (makerToken == address(0)) {\n                (takerTokenAmounts[i], didSucceed) = _callUniswapExchangePriceFunction(\n                    address(takerTokenExchange),\n                    takerTokenExchange.getTokenToEthOutputPrice.selector,\n                    makerTokenAmounts[i]\n                );\n            } else if (takerToken == address(0)) {\n                (takerTokenAmounts[i], didSucceed) = _callUniswapExchangePriceFunction(\n                    address(makerTokenExchange),\n                    makerTokenExchange.getEthToTokenOutputPrice.selector,\n                    makerTokenAmounts[i]\n                );\n            } else {\n                uint256 ethSold;\n                (ethSold, didSucceed) = _callUniswapExchangePriceFunction(\n                    address(makerTokenExchange),\n                    makerTokenExchange.getEthToTokenOutputPrice.selector,\n                    makerTokenAmounts[i]\n                );\n                if (ethSold != 0) {\n                    (takerTokenAmounts[i], didSucceed) = _callUniswapExchangePriceFunction(\n                        address(takerTokenExchange),\n                        takerTokenExchange.getTokenToEthOutputPrice.selector,\n                        ethSold\n                    );\n                } else {\n                    takerTokenAmounts[i] = 0;\n                }\n            }\n            // Break early if amounts are 0\n            if (!didSucceed || takerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n    }\n\n    /// @dev Gracefully calls a Uniswap pricing function.\n    /// @param uniswapExchangeAddress Address of an `IUniswapExchangeQuotes` exchange.\n    /// @param functionSelector Selector of the target function.\n    /// @param inputAmount Quantity parameter particular to the pricing function.\n    /// @return outputAmount The returned amount from the function call. Will be\n    ///         zero if the call fails or if `uniswapExchangeAddress` is zero.\n    function _callUniswapExchangePriceFunction(\n        address uniswapExchangeAddress,\n        bytes4 functionSelector,\n        uint256 inputAmount\n    )\n        private\n        view\n        returns (uint256 outputAmount, bool didSucceed)\n    {\n        if (uniswapExchangeAddress == address(0)) {\n            return (outputAmount, didSucceed);\n        }\n        bytes memory resultData;\n        (didSucceed, resultData) =\n            uniswapExchangeAddress.staticcall.gas(UNISWAP_CALL_GAS)(\n                abi.encodeWithSelector(\n                    functionSelector,\n                    inputAmount\n                ));\n        if (didSucceed) {\n            outputAmount = abi.decode(resultData, (uint256));\n        }\n    }\n\n    /// @dev Retrive an existing Uniswap exchange contract.\n    ///      Throws if the exchange does not exist.\n    /// @param router Address of the Uniswap router.\n    /// @param tokenAddress Address of the token contract.\n    /// @return exchange `IUniswapExchangeQuotes` for the token.\n    function _getUniswapExchange(address router, address tokenAddress)\n        private\n        view\n        returns (IUniswapExchangeQuotes exchange)\n    {\n        exchange = IUniswapExchangeQuotes(\n            address(IUniswapExchangeFactory(router)\n            .getExchange(tokenAddress))\n        );\n    }\n}\n"
        },
        "./interfaces/IUniswapExchangeQuotes.sol": {
            "id": 36,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface IUniswapExchangeQuotes {\n\n    function getEthToTokenInputPrice(\n        uint256 ethSold\n    )\n        external\n        view\n        returns (uint256 tokensBought);\n\n    function getEthToTokenOutputPrice(\n        uint256 tokensBought\n    )\n        external\n        view\n        returns (uint256 ethSold);\n\n    function getTokenToEthInputPrice(\n        uint256 tokensSold\n    )\n        external\n        view\n        returns (uint256 ethBought);\n\n    function getTokenToEthOutputPrice(\n        uint256 ethBought\n    )\n        external\n        view\n        returns (uint256 tokensSold);\n}\n"
        },
        "./UniswapV2Sampler.sol": {
            "id": 23,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IUniswapV2Router01.sol\";\n\n\ncontract UniswapV2Sampler\n{\n    /// @dev Gas limit for UniswapV2 calls.\n    uint256 constant private UNISWAPV2_CALL_GAS = 150e3; // 150k\n\n    /// @dev Sample sell quotes from UniswapV2.\n    /// @param router Router to look up tokens and amounts\n    /// @param path Token route. Should be takerToken -> makerToken\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromUniswapV2(\n        address router,\n        address[] memory path,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            try\n                IUniswapV2Router01(router).getAmountsOut\n                    {gas: UNISWAPV2_CALL_GAS}\n                    (takerTokenAmounts[i], path)\n                returns (uint256[] memory amounts)\n            {\n                makerTokenAmounts[i] = amounts[path.length - 1];\n                // Break early if there are 0 amounts\n                if (makerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from UniswapV2.\n    /// @param router Router to look up tokens and amounts\n    /// @param path Token route. Should be takerToken -> makerToken.\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromUniswapV2(\n        address router,\n        address[] memory path,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            try\n                IUniswapV2Router01(router).getAmountsIn\n                    {gas: UNISWAPV2_CALL_GAS}\n                    (makerTokenAmounts[i], path)\n                returns (uint256[] memory amounts)\n            {\n                takerTokenAmounts[i] = amounts[0];\n                // Break early if there are 0 amounts\n                if (takerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n}\n"
        },
        "./interfaces/IUniswapV2Router01.sol": {
            "id": 37,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface IUniswapV2Router01 {\n\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts);\n\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts);\n}\n"
        },
        "./UniswapV3Sampler.sol": {
            "id": 24,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\n\ninterface IUniswapV3Quoter {\n    function factory()\n        external\n        view\n        returns (IUniswapV3Factory factory);\n    function quoteExactInput(bytes memory path, uint256 amountIn)\n        external\n        returns (uint256 amountOut);\n    function quoteExactOutput(bytes memory path, uint256 amountOut)\n        external\n        returns (uint256 amountIn);\n}\n\ninterface IUniswapV3Factory {\n    function getPool(IERC20TokenV06 a, IERC20TokenV06 b, uint24 fee)\n        external\n        view\n        returns (IUniswapV3Pool pool);\n}\n\ninterface IUniswapV3Pool {\n    function token0() external view returns (IERC20TokenV06);\n    function token1() external view returns (IERC20TokenV06);\n    function fee() external view returns (uint24);\n}\n\ncontract UniswapV3Sampler\n{\n    /// @dev Gas limit for UniswapV3 calls. This is 100% a guess.\n    uint256 constant private QUOTE_GAS = 300e3;\n\n    /// @dev Sample sell quotes from UniswapV3.\n    /// @param quoter UniswapV3 Quoter contract.\n    /// @param path Token route. Should be takerToken -> makerToken\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return uniswapPaths The encoded uniswap path for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromUniswapV3(\n        IUniswapV3Quoter quoter,\n        IERC20TokenV06[] memory path,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        returns (\n            bytes[] memory uniswapPaths,\n            uint256[] memory makerTokenAmounts\n        )\n    {\n        IUniswapV3Pool[][] memory poolPaths =\n            _getValidPoolPaths(quoter.factory(), path, 0);\n\n        makerTokenAmounts = new uint256[](takerTokenAmounts.length);\n        uniswapPaths = new bytes[](takerTokenAmounts.length);\n\n        for (uint256 i = 0; i < takerTokenAmounts.length; ++i) {\n            // Pick the best result from all the paths.\n            bytes memory topUniswapPath;\n            uint256 topBuyAmount = 0;\n            for (uint256 j = 0; j < poolPaths.length; ++j) {\n                bytes memory uniswapPath = _toUniswapPath(path, poolPaths[j]);\n                try\n                    quoter.quoteExactInput\n                        { gas: QUOTE_GAS }\n                        (uniswapPath, takerTokenAmounts[i])\n                        returns (uint256 buyAmount)\n                {\n                    if (topBuyAmount <= buyAmount) {\n                        topBuyAmount = buyAmount;\n                        topUniswapPath = uniswapPath;\n                    }\n                } catch { }\n            }\n            // Break early if we can't complete the buys.\n            if (topBuyAmount == 0) {\n                break;\n            }\n            makerTokenAmounts[i] = topBuyAmount;\n            uniswapPaths[i] = topUniswapPath;\n        }\n    }\n\n    /// @dev Sample buy quotes from UniswapV3.\n    /// @param quoter UniswapV3 Quoter contract.\n    /// @param path Token route. Should be takerToken -> makerToken.\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return uniswapPaths The encoded uniswap path for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromUniswapV3(\n        IUniswapV3Quoter quoter,\n        IERC20TokenV06[] memory path,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        returns (\n            bytes[] memory uniswapPaths,\n            uint256[] memory takerTokenAmounts\n        )\n    {\n        IUniswapV3Pool[][] memory poolPaths =\n            _getValidPoolPaths(quoter.factory(), path, 0);\n        IERC20TokenV06[] memory reversedPath = _reverseTokenPath(path);\n\n        takerTokenAmounts = new uint256[](makerTokenAmounts.length);\n        uniswapPaths = new bytes[](makerTokenAmounts.length);\n\n        for (uint256 i = 0; i < makerTokenAmounts.length; ++i) {\n            // Pick the best result from all the paths.\n            bytes memory topUniswapPath;\n            uint256 topSellAmount = 0;\n            for (uint256 j = 0; j < poolPaths.length; ++j) {\n                // quoter requires path to be reversed for buys.\n                bytes memory uniswapPath = _toUniswapPath(\n                    reversedPath,\n                    _reversePoolPath(poolPaths[j])\n                );\n                try\n                    quoter.quoteExactOutput\n                        { gas: QUOTE_GAS }\n                        (uniswapPath, makerTokenAmounts[i])\n                        returns (uint256 sellAmount)\n                {\n                    if (topSellAmount == 0 || topSellAmount >= sellAmount) {\n                        topSellAmount = sellAmount;\n                        // But the output path should still be encoded for sells.\n                        topUniswapPath = _toUniswapPath(path, poolPaths[j]);\n                    }\n                } catch {}\n            }\n            // Break early if we can't complete the buys.\n            if (topSellAmount == 0) {\n                break;\n            }\n            takerTokenAmounts[i] = topSellAmount;\n            uniswapPaths[i] = topUniswapPath;\n        }\n    }\n\n    function _getValidPoolPaths(\n        IUniswapV3Factory factory,\n        IERC20TokenV06[] memory tokenPath,\n        uint256 startIndex\n    )\n        private\n        view\n        returns (IUniswapV3Pool[][] memory poolPaths)\n    {\n        require(\n            tokenPath.length - startIndex >= 2,\n            \"UniswapV3Sampler/tokenPath too short\"\n        );\n        uint24[3] memory validPoolFees = [\n            // The launch pool fees. Could get hairier if they add more.\n            uint24(0.0005e6),\n            uint24(0.003e6),\n            uint24(0.01e6)\n        ];\n        IUniswapV3Pool[] memory validPools =\n            new IUniswapV3Pool[](validPoolFees.length);\n        uint256 numValidPools = 0;\n        {\n            IERC20TokenV06 inputToken = tokenPath[startIndex];\n            IERC20TokenV06 outputToken = tokenPath[startIndex + 1];\n            for (uint256 i = 0; i < validPoolFees.length; ++i) {\n                IUniswapV3Pool pool =\n                factory.getPool(inputToken, outputToken, validPoolFees[i]);\n                if (_isValidPool(pool)) {\n                    validPools[numValidPools++] = pool;\n                }\n            }\n        }\n        if (numValidPools == 0) {\n            // No valid pools for this hop.\n            return poolPaths;\n        }\n        if (startIndex + 2 == tokenPath.length) {\n            // End of path.\n            poolPaths = new IUniswapV3Pool[][](numValidPools);\n            for (uint256 i = 0; i < numValidPools; ++i) {\n                poolPaths[i] = new IUniswapV3Pool[](1);\n                poolPaths[i][0] = validPools[i];\n            }\n            return poolPaths;\n        }\n        // Get paths for subsequent hops.\n        IUniswapV3Pool[][] memory subsequentPoolPaths =\n            _getValidPoolPaths(factory, tokenPath, startIndex + 1);\n        if (subsequentPoolPaths.length == 0) {\n            // Could not complete the path.\n            return poolPaths;\n        }\n        // Combine our pools with the next hop paths.\n        poolPaths = new IUniswapV3Pool[][](\n            numValidPools * subsequentPoolPaths.length\n        );\n        for (uint256 i = 0; i < numValidPools; ++i) {\n            for (uint256 j = 0; j < subsequentPoolPaths.length; ++j) {\n                uint256 o = i * subsequentPoolPaths.length + j;\n                // Prepend pool to the subsequent path.\n                poolPaths[o] =\n                    new IUniswapV3Pool[](1 + subsequentPoolPaths[j].length);\n                poolPaths[o][0] = validPools[i];\n                for (uint256 k = 0; k < subsequentPoolPaths[j].length; ++k) {\n                    poolPaths[o][1 + k] = subsequentPoolPaths[j][k];\n                }\n            }\n        }\n        return poolPaths;\n    }\n\n    function _reverseTokenPath(IERC20TokenV06[] memory tokenPath)\n        private\n        returns (IERC20TokenV06[] memory reversed)\n    {\n        reversed = new IERC20TokenV06[](tokenPath.length);\n        for (uint256 i = 0; i < tokenPath.length; ++i) {\n            reversed[i] = tokenPath[tokenPath.length - i - 1];\n        }\n    }\n\n    function _reversePoolPath(IUniswapV3Pool[] memory poolPath)\n        private\n        returns (IUniswapV3Pool[] memory reversed)\n    {\n        reversed = new IUniswapV3Pool[](poolPath.length);\n        for (uint256 i = 0; i < poolPath.length; ++i) {\n            reversed[i] = poolPath[poolPath.length - i - 1];\n        }\n    }\n\n    function _isValidPool(IUniswapV3Pool pool)\n        private\n        view\n        returns (bool isValid)\n    {\n        // Check if it has been deployed.\n        {\n            uint256 codeSize;\n            assembly {\n                codeSize := extcodesize(pool)\n            }\n            if (codeSize == 0) {\n                return false;\n            }\n        }\n        // Must have a balance of both tokens.\n        if (pool.token0().balanceOf(address(pool)) == 0) {\n            return false;\n        }\n        if (pool.token1().balanceOf(address(pool)) == 0) {\n            return false;\n        }\n        return true;\n    }\n\n    function _toUniswapPath(\n        IERC20TokenV06[] memory tokenPath,\n        IUniswapV3Pool[] memory poolPath\n    )\n        private\n        view\n        returns (bytes memory uniswapPath)\n    {\n        require(\n            tokenPath.length >= 2 && tokenPath.length == poolPath.length + 1,\n            \"UniswapV3Sampler/invalid path lengths\"\n        );\n        // Uniswap paths are tightly packed as:\n        // [token0, token0token1PairFee, token1, token1Token2PairFee, token2, ...]\n        uniswapPath = new bytes(tokenPath.length * 20 + poolPath.length * 3);\n        uint256 o;\n        assembly { o := add(uniswapPath, 32) }\n        for (uint256 i = 0; i < tokenPath.length; ++i) {\n            if (i > 0) {\n                uint24 poolFee = poolPath[i - 1].fee();\n                assembly {\n                    mstore(o, shl(232, poolFee))\n                    o := add(o, 3)\n                }\n            }\n            IERC20TokenV06 token = tokenPath[i];\n            assembly {\n                mstore(o, shl(96, token))\n                o := add(o, 20)\n            }\n        }\n    }\n}\n"
        },
        "./UtilitySampler.sol": {
            "id": 25,
            "content": "\n// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\n\ncontract UtilitySampler {\n\n    using LibERC20TokenV06 for IERC20TokenV06;\n\n    IERC20TokenV06 private immutable UTILITY_ETH_ADDRESS = IERC20TokenV06(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\n\n    function getTokenDecimals(IERC20TokenV06[] memory tokens)\n        public\n        view\n        returns (uint256[] memory decimals)\n    {\n        decimals = new uint256[](tokens.length);\n        for (uint256 i = 0; i != tokens.length; i++) {\n            decimals[i] = tokens[i] == UTILITY_ETH_ADDRESS\n                ? 18\n                : tokens[i].compatDecimals();\n        }\n    }\n\n    function getBalanceOf(IERC20TokenV06[] memory tokens, address account)\n        public\n        view\n        returns (uint256[] memory balances)\n    {\n        balances = new uint256[](tokens.length);\n        for (uint256 i = 0; i != tokens.length; i++) {\n            balances[i] = tokens[i] == UTILITY_ETH_ADDRESS\n                ? account.balance\n                : tokens[i].compatBalanceOf(account);\n        }\n    }\n\n    function getAllowanceOf(IERC20TokenV06[] memory tokens, address account, address spender)\n        public\n        view\n        returns (uint256[] memory allowances)\n    {\n        allowances = new uint256[](tokens.length);\n        for (uint256 i = 0; i != tokens.length; i++) {\n            allowances[i] = tokens[i] == UTILITY_ETH_ADDRESS\n                ? 0\n                : tokens[i].compatAllowance(account, spender);\n        }\n    }\n\n    function isContract(address account)\n        public\n        view\n        returns (bool)\n    {\n        uint256 size;\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n}"
        }
    },
    "sourceCodes": {
        "./ERC20BridgeSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./BalancerSampler.sol\";\nimport \"./BalancerV2Sampler.sol\";\nimport \"./BancorSampler.sol\";\nimport \"./CurveSampler.sol\";\nimport \"./DODOSampler.sol\";\nimport \"./DODOV2Sampler.sol\";\nimport \"./Eth2DaiSampler.sol\";\nimport \"./KyberSampler.sol\";\nimport \"./LiquidityProviderSampler.sol\";\nimport \"./MakerPSMSampler.sol\";\nimport \"./MultiBridgeSampler.sol\";\nimport \"./MStableSampler.sol\";\nimport \"./MooniswapSampler.sol\";\nimport \"./NativeOrderSampler.sol\";\nimport \"./ShellSampler.sol\";\nimport \"./SmoothySampler.sol\";\nimport \"./TwoHopSampler.sol\";\nimport \"./UniswapSampler.sol\";\nimport \"./UniswapV2Sampler.sol\";\nimport \"./UniswapV3Sampler.sol\";\nimport \"./UtilitySampler.sol\";\n\n\ncontract ERC20BridgeSampler is\n    BalancerSampler,\n    BalancerV2Sampler,\n    BancorSampler,\n    CurveSampler,\n    DODOSampler,\n    DODOV2Sampler,\n    Eth2DaiSampler,\n    KyberSampler,\n    LiquidityProviderSampler,\n    MakerPSMSampler,\n    MStableSampler,\n    MooniswapSampler,\n    MultiBridgeSampler,\n    NativeOrderSampler,\n    ShellSampler,\n    SmoothySampler,\n    TwoHopSampler,\n    UniswapSampler,\n    UniswapV2Sampler,\n    UniswapV3Sampler,\n    UtilitySampler\n{\n\n    struct CallResults {\n        bytes data;\n        bool success;\n    }\n\n    /// @dev Call multiple public functions on this contract in a single transaction.\n    /// @param callDatas ABI-encoded call data for each function call.\n    /// @return callResults ABI-encoded results data for each call.\n    function batchCall(bytes[] calldata callDatas)\n        external\n        returns (CallResults[] memory callResults)\n    {\n        callResults = new CallResults[](callDatas.length);\n        for (uint256 i = 0; i != callDatas.length; ++i) {\n            callResults[i].success = true;\n            if (callDatas[i].length == 0) {\n                continue;\n            }\n            (callResults[i].success, callResults[i].data) = address(this).call(callDatas[i]);\n        }\n    }\n}\n",
        "./BalancerSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IBalancer.sol\";\n\n\ncontract BalancerSampler {\n\n    /// @dev Base gas limit for Balancer calls.\n    uint256 constant private BALANCER_CALL_GAS = 300e3; // 300k\n\n    // Balancer math constants\n    // https://github.com/balancer-labs/balancer-core/blob/master/contracts/BConst.sol\n    uint256 constant private BONE = 10 ** 18;\n    uint256 constant private MAX_IN_RATIO = BONE / 2;\n    uint256 constant private MAX_OUT_RATIO = (BONE / 3) + 1 wei;\n\n    struct BalancerState {\n        uint256 takerTokenBalance;\n        uint256 makerTokenBalance;\n        uint256 takerTokenWeight;\n        uint256 makerTokenWeight;\n        uint256 swapFee;\n    }\n\n    /// @dev Sample sell quotes from Balancer.\n    /// @param poolAddress Address of the Balancer pool to query.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromBalancer(\n        address poolAddress,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        IBalancer pool = IBalancer(poolAddress);\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        if (!pool.isBound(takerToken) || !pool.isBound(makerToken)) {\n            return makerTokenAmounts;\n        }\n\n        BalancerState memory poolState;\n        poolState.takerTokenBalance = pool.getBalance(takerToken);\n        poolState.makerTokenBalance = pool.getBalance(makerToken);\n        poolState.takerTokenWeight = pool.getDenormalizedWeight(takerToken);\n        poolState.makerTokenWeight = pool.getDenormalizedWeight(makerToken);\n        poolState.swapFee = pool.getSwapFee();\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            // Handles this revert scenario:\n            // https://github.com/balancer-labs/balancer-core/blob/master/contracts/BPool.sol#L443\n            if (takerTokenAmounts[i] > _bmul(poolState.takerTokenBalance, MAX_IN_RATIO)) {\n                break;\n            }\n            try\n                pool.calcOutGivenIn\n                    {gas: BALANCER_CALL_GAS}\n                    (\n                        poolState.takerTokenBalance,\n                        poolState.takerTokenWeight,\n                        poolState.makerTokenBalance,\n                        poolState.makerTokenWeight,\n                        takerTokenAmounts[i],\n                        poolState.swapFee\n                    )\n                returns (uint256 amount)\n            {\n                makerTokenAmounts[i] = amount;\n                // Break early if there are 0 amounts\n                if (makerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from Balancer.\n    /// @param poolAddress Address of the Balancer pool to query.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromBalancer(\n        address poolAddress,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        IBalancer pool = IBalancer(poolAddress);\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n        if (!pool.isBound(takerToken) || !pool.isBound(makerToken)) {\n            return takerTokenAmounts;\n        }\n\n        BalancerState memory poolState;\n        poolState.takerTokenBalance = pool.getBalance(takerToken);\n        poolState.makerTokenBalance = pool.getBalance(makerToken);\n        poolState.takerTokenWeight = pool.getDenormalizedWeight(takerToken);\n        poolState.makerTokenWeight = pool.getDenormalizedWeight(makerToken);\n        poolState.swapFee = pool.getSwapFee();\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            // Handles this revert scenario:\n            // https://github.com/balancer-labs/balancer-core/blob/master/contracts/BPool.sol#L505\n            if (makerTokenAmounts[i] > _bmul(poolState.makerTokenBalance, MAX_OUT_RATIO)) {\n                break;\n            }\n            try\n                pool.calcInGivenOut\n                    {gas: BALANCER_CALL_GAS}\n                    (\n                        poolState.takerTokenBalance,\n                        poolState.takerTokenWeight,\n                        poolState.makerTokenBalance,\n                        poolState.makerTokenWeight,\n                        makerTokenAmounts[i],\n                        poolState.swapFee\n                    )\n                returns (uint256 amount)\n            {\n                takerTokenAmounts[i] = amount;\n                // Break early if there are 0 amounts\n                if (takerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    /// @dev Hacked version of Balancer's `bmul` function, returning 0 instead\n    ///      of reverting.\n    ///      https://github.com/balancer-labs/balancer-core/blob/master/contracts/BNum.sol#L63-L73\n    /// @param a The first operand.\n    /// @param b The second operand.\n    /// @param c The result of the multiplication, or 0 if `bmul` would've reverted.\n    function _bmul(uint256 a, uint256 b)\n        private\n        pure\n        returns (uint256 c)\n    {\n        uint c0 = a * b;\n        if (a != 0 && c0 / a != b) {\n            return 0;\n        }\n        uint c1 = c0 + (BONE / 2);\n        if (c1 < c0) {\n            return 0;\n        }\n        uint c2 = c1 / BONE;\n        return c2;\n    }\n}\n",
        "./interfaces/IBalancer.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface IBalancer {\n    function isBound(address t) external view returns (bool);\n    function getDenormalizedWeight(address token) external view returns (uint256);\n    function getBalance(address token) external view returns (uint256);\n    function getSwapFee() external view returns (uint256);\n    function calcOutGivenIn(\n        uint256 tokenBalanceIn,\n        uint256 tokenWeightIn,\n        uint256 tokenBalanceOut,\n        uint256 tokenWeightOut,\n        uint256 tokenAmountIn,\n        uint256 swapFee\n    ) external pure returns (uint256 tokenAmountOut);\n    function calcInGivenOut(\n        uint256 tokenBalanceIn,\n        uint256 tokenWeightIn,\n        uint256 tokenBalanceOut,\n        uint256 tokenWeightOut,\n        uint256 tokenAmountOut,\n        uint256 swapFee\n    ) external pure returns (uint256 tokenAmountIn);\n}\n",
        "./BalancerV2Sampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./SamplerUtils.sol\";\n\n/// @dev Minimal Balancer V2 Vault interface\n///      for documentation refer to https://github.com/balancer-labs/balancer-core-v2/blob/master/contracts/vault/interfaces/IVault.sol\ninterface IBalancerV2Vault {\n    enum SwapKind { GIVEN_IN, GIVEN_OUT }\n\n    struct BatchSwapStep {\n        bytes32 poolId;\n        uint256 assetInIndex;\n        uint256 assetOutIndex;\n        uint256 amount;\n        bytes userData;\n    }\n\n    struct FundManagement {\n        address sender;\n        bool fromInternalBalance;\n        address payable recipient;\n        bool toInternalBalance;\n    }\n\n    function queryBatchSwap(\n        SwapKind kind,\n        BatchSwapStep[] calldata swaps,\n        IAsset[] calldata assets,\n        FundManagement calldata funds\n    ) external returns (int256[] memory assetDeltas);\n}\ninterface IAsset {\n    // solhint-disable-previous-line no-empty-blocks\n}\n\ncontract BalancerV2Sampler is SamplerUtils {\n\n    struct BalancerV2PoolInfo {\n        bytes32 poolId;\n        address vault;\n    }\n\n    /// @dev Sample sell quotes from Balancer V2.\n    /// @param poolInfo Struct with pool related data\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromBalancerV2(\n        BalancerV2PoolInfo memory poolInfo,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        IBalancerV2Vault vault = IBalancerV2Vault(poolInfo.vault);\n        IAsset[] memory swapAssets = new IAsset[](2);\n        swapAssets[0] = IAsset(takerToken);\n        swapAssets[1] = IAsset(makerToken);\n\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        IBalancerV2Vault.FundManagement memory swapFunds =\n            _createSwapFunds();\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            IBalancerV2Vault.BatchSwapStep[] memory swapSteps =\n                _createSwapSteps(poolInfo, takerTokenAmounts[i]);\n\n            try\n                // For sells we specify the takerToken which is what the vault will receive from the trade\n                vault.queryBatchSwap(IBalancerV2Vault.SwapKind.GIVEN_IN, swapSteps, swapAssets, swapFunds)\n            // amounts represent pool balance deltas from the swap (incoming balance, outgoing balance)\n            returns (int256[] memory amounts) {\n                // Outgoing balance is negative so we need to flip the sign\n                int256 amountOutFromPool = amounts[1] * -1;\n                if (amountOutFromPool <= 0) {\n                    break;\n                }\n                makerTokenAmounts[i] = uint256(amountOutFromPool);\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from Balancer V2.\n    /// @param poolInfo Struct with pool related data\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromBalancerV2(\n        BalancerV2PoolInfo memory poolInfo,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        IBalancerV2Vault vault = IBalancerV2Vault(poolInfo.vault);\n        IAsset[] memory swapAssets = new IAsset[](2);\n        swapAssets[0] = IAsset(takerToken);\n        swapAssets[1] = IAsset(makerToken);\n\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n        IBalancerV2Vault.FundManagement memory swapFunds =\n            _createSwapFunds();\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            IBalancerV2Vault.BatchSwapStep[] memory swapSteps =\n                _createSwapSteps(poolInfo, makerTokenAmounts[i]);\n\n            try\n                // For buys we specify the makerToken which is what taker will receive from the trade\n                vault.queryBatchSwap(IBalancerV2Vault.SwapKind.GIVEN_OUT, swapSteps, swapAssets, swapFunds)\n            returns (int256[] memory amounts) {\n                int256 amountIntoPool = amounts[0];\n                if (amountIntoPool <= 0) {\n                    break;\n                }\n                takerTokenAmounts[i] = uint256(amountIntoPool);\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    function _createSwapSteps(\n        BalancerV2PoolInfo memory poolInfo,\n        uint256 amount\n    ) private pure returns (IBalancerV2Vault.BatchSwapStep[] memory) {\n        IBalancerV2Vault.BatchSwapStep[] memory swapSteps =\n            new IBalancerV2Vault.BatchSwapStep[](1);\n        swapSteps[0] = IBalancerV2Vault.BatchSwapStep({\n            poolId: poolInfo.poolId,\n            assetInIndex: 0,\n            assetOutIndex: 1,\n            amount: amount,\n            userData: \"\"\n        });\n\n        return swapSteps;\n    }\n\n    function _createSwapFunds()\n        private\n        view\n        returns (IBalancerV2Vault.FundManagement memory)\n    {\n        return\n            IBalancerV2Vault.FundManagement({\n                sender: address(this),\n                fromInternalBalance: false,\n                recipient: payable(address(this)),\n                toInternalBalance: false\n            });\n    }\n}\n",
        "./SamplerUtils.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\n\n\ncontract SamplerUtils {\n\n    /// @dev Overridable way to get token decimals.\n    /// @param tokenAddress Address of the token.\n    /// @return decimals The decimal places for the token.\n    function _getTokenDecimals(address tokenAddress)\n        virtual\n        internal\n        view\n        returns (uint8 decimals)\n    {\n        return LibERC20TokenV06.compatDecimals(IERC20TokenV06(tokenAddress));\n    }\n\n    function _toSingleValueArray(uint256 v)\n        internal\n        pure\n        returns (uint256[] memory arr)\n    {\n        arr = new uint256[](1);\n        arr[0] = v;\n    }\n\n    /// @dev Assert that the tokens in a trade pair are valid.\n    /// @param makerToken Address of the maker token.\n    /// @param takerToken Address of the taker token.\n    function _assertValidPair(address makerToken, address takerToken)\n        internal\n        pure\n    {\n        require(makerToken != takerToken, \"ERC20BridgeSampler/INVALID_TOKEN_PAIR\");\n    }\n}\n",
        "@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol\";\nimport \"./IERC20TokenV06.sol\";\n\n\nlibrary LibERC20TokenV06 {\n    bytes constant private DECIMALS_CALL_DATA = hex\"313ce567\";\n\n    /// @dev Calls `IERC20TokenV06(token).approve()`.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param spender The address that receives an allowance.\n    /// @param allowance The allowance to set.\n    function compatApprove(\n        IERC20TokenV06 token,\n        address spender,\n        uint256 allowance\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.approve.selector,\n            spender,\n            allowance\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).approve()` and sets the allowance to the\n    ///      maximum if the current approval is not already >= an amount.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param spender The address that receives an allowance.\n    /// @param amount The minimum allowance needed.\n    function approveIfBelow(\n        IERC20TokenV06 token,\n        address spender,\n        uint256 amount\n    )\n        internal\n    {\n        if (token.allowance(address(this), spender) < amount) {\n            compatApprove(token, spender, uint256(-1));\n        }\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).transfer()`.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param to The address that receives the tokens\n    /// @param amount Number of tokens to transfer.\n    function compatTransfer(\n        IERC20TokenV06 token,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.transfer.selector,\n            to,\n            amount\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).transferFrom()`.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param from The owner of the tokens.\n    /// @param to The address that receives the tokens\n    /// @param amount Number of tokens to transfer.\n    function compatTransferFrom(\n        IERC20TokenV06 token,\n        address from,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.transferFrom.selector,\n            from,\n            to,\n            amount\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Retrieves the number of decimals for a token.\n    ///      Returns `18` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @return tokenDecimals The number of decimals places for the token.\n    function compatDecimals(IERC20TokenV06 token)\n        internal\n        view\n        returns (uint8 tokenDecimals)\n    {\n        tokenDecimals = 18;\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(DECIMALS_CALL_DATA);\n        if (didSucceed && resultData.length >= 32) {\n            tokenDecimals = uint8(LibBytesV06.readUint256(resultData, 0));\n        }\n    }\n\n    /// @dev Retrieves the allowance for a token, owner, and spender.\n    ///      Returns `0` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @param owner The owner of the tokens.\n    /// @param spender The address the spender.\n    /// @return allowance_ The allowance for a token, owner, and spender.\n    function compatAllowance(IERC20TokenV06 token, address owner, address spender)\n        internal\n        view\n        returns (uint256 allowance_)\n    {\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(\n            abi.encodeWithSelector(\n                token.allowance.selector,\n                owner,\n                spender\n            )\n        );\n        if (didSucceed && resultData.length >= 32) {\n            allowance_ = LibBytesV06.readUint256(resultData, 0);\n        }\n    }\n\n    /// @dev Retrieves the balance for a token owner.\n    ///      Returns `0` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @param owner The owner of the tokens.\n    /// @return balance The token balance of an owner.\n    function compatBalanceOf(IERC20TokenV06 token, address owner)\n        internal\n        view\n        returns (uint256 balance)\n    {\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(\n            abi.encodeWithSelector(\n                token.balanceOf.selector,\n                owner\n            )\n        );\n        if (didSucceed && resultData.length >= 32) {\n            balance = LibBytesV06.readUint256(resultData, 0);\n        }\n    }\n\n    /// @dev Check if the data returned by a non-static call to an ERC20 token\n    ///      is a successful result. Supported functions are `transfer()`,\n    ///      `transferFrom()`, and `approve()`.\n    /// @param resultData The raw data returned by a non-static call to the ERC20 token.\n    /// @return isSuccessful Whether the result data indicates success.\n    function isSuccessfulResult(bytes memory resultData)\n        internal\n        pure\n        returns (bool isSuccessful)\n    {\n        if (resultData.length == 0) {\n            return true;\n        }\n        if (resultData.length >= 32) {\n            uint256 result = LibBytesV06.readUint256(resultData, 0);\n            if (result == 1) {\n                return true;\n            }\n        }\n    }\n\n    /// @dev Executes a call on address `target` with calldata `callData`\n    ///      and asserts that either nothing was returned or a single boolean\n    ///      was returned equal to `true`.\n    /// @param target The call target.\n    /// @param callData The abi-encoded call data.\n    function _callWithOptionalBooleanResult(\n        address target,\n        bytes memory callData\n    )\n        private\n    {\n        (bool didSucceed, bytes memory resultData) = target.call(callData);\n        if (didSucceed && isSuccessfulResult(resultData)) {\n            return;\n        }\n        LibRichErrorsV06.rrevert(resultData);\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibRichErrorsV06 {\n\n    // bytes4(keccak256(\"Error(string)\"))\n    bytes4 internal constant STANDARD_ERROR_SELECTOR = 0x08c379a0;\n\n    // solhint-disable func-name-mixedcase\n    /// @dev ABI encode a standard, string revert error payload.\n    ///      This is the same payload that would be included by a `revert(string)`\n    ///      solidity statement. It has the function signature `Error(string)`.\n    /// @param message The error string.\n    /// @return The ABI encoded error.\n    function StandardError(string memory message)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            STANDARD_ERROR_SELECTOR,\n            bytes(message)\n        );\n    }\n    // solhint-enable func-name-mixedcase\n\n    /// @dev Reverts an encoded rich revert reason `errorData`.\n    /// @param errorData ABI encoded error data.\n    function rrevert(bytes memory errorData)\n        internal\n        pure\n    {\n        assembly {\n            revert(add(errorData, 0x20), mload(errorData))\n        }\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./errors/LibBytesRichErrorsV06.sol\";\nimport \"./errors/LibRichErrorsV06.sol\";\n\n\nlibrary LibBytesV06 {\n\n    using LibBytesV06 for bytes;\n\n    /// @dev Gets the memory address for a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of byte array. This\n    ///         points to the header of the byte array which contains\n    ///         the length.\n    function rawAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := input\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Gets the memory address for the contents of a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of the contents of the byte array.\n    function contentAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := add(input, 32)\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Copies `length` bytes from memory location `source` to `dest`.\n    /// @param dest memory address to copy bytes to.\n    /// @param source memory address to copy bytes from.\n    /// @param length number of bytes to copy.\n    function memCopy(\n        uint256 dest,\n        uint256 source,\n        uint256 length\n    )\n        internal\n        pure\n    {\n        if (length < 32) {\n            // Handle a partial word by reading destination and masking\n            // off the bits we are interested in.\n            // This correctly handles overlap, zero lengths and source == dest\n            assembly {\n                let mask := sub(exp(256, sub(32, length)), 1)\n                let s := and(mload(source), not(mask))\n                let d := and(mload(dest), mask)\n                mstore(dest, or(s, d))\n            }\n        } else {\n            // Skip the O(length) loop when source == dest.\n            if (source == dest) {\n                return;\n            }\n\n            // For large copies we copy whole words at a time. The final\n            // word is aligned to the end of the range (instead of after the\n            // previous) to handle partial words. So a copy will look like this:\n            //\n            //  ####\n            //      ####\n            //          ####\n            //            ####\n            //\n            // We handle overlap in the source and destination range by\n            // changing the copying direction. This prevents us from\n            // overwriting parts of source that we still need to copy.\n            //\n            // This correctly handles source == dest\n            //\n            if (source > dest) {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because it\n                    // is easier to compare with in the loop, and these\n                    // are also the addresses we need for copying the\n                    // last bytes.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the last 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the last bytes in\n                    // source already due to overlap.\n                    let last := mload(sEnd)\n\n                    // Copy whole words front to back\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} lt(source, sEnd) {} {\n                        mstore(dest, mload(source))\n                        source := add(source, 32)\n                        dest := add(dest, 32)\n                    }\n\n                    // Write the last 32 bytes\n                    mstore(dEnd, last)\n                }\n            } else {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because those\n                    // are the starting points when copying a word at the end.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the first 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the first bytes in\n                    // source already due to overlap.\n                    let first := mload(source)\n\n                    // Copy whole words back to front\n                    // We use a signed comparisson here to allow dEnd to become\n                    // negative (happens when source and dest < 32). Valid\n                    // addresses in local memory will never be larger than\n                    // 2**255, so they can be safely re-interpreted as signed.\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} slt(dest, dEnd) {} {\n                        mstore(dEnd, mload(sEnd))\n                        sEnd := sub(sEnd, 32)\n                        dEnd := sub(dEnd, 32)\n                    }\n\n                    // Write the first 32 bytes\n                    mstore(dest, first)\n                }\n            }\n        }\n    }\n\n    /// @dev Returns a slices from a byte array.\n    /// @param b The byte array to take a slice from.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function slice(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure and copy contents\n        result = new bytes(to - from);\n        memCopy(\n            result.contentAddress(),\n            b.contentAddress() + from,\n            result.length\n        );\n        return result;\n    }\n\n    /// @dev Returns a slice from a byte array without preserving the input.\n    ///      When `from == 0`, the original array will match the slice.\n    ///      In other cases its state will be corrupted.\n    /// @param b The byte array to take a slice from. Will be destroyed in the process.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function sliceDestructive(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure around [from, to) in-place.\n        assembly {\n            result := add(b, from)\n            mstore(result, sub(to, from))\n        }\n        return result;\n    }\n\n    /// @dev Pops the last byte off of a byte array by modifying its length.\n    /// @param b Byte array that will be modified.\n    /// @return result The byte that was popped off.\n    function popLastByte(bytes memory b)\n        internal\n        pure\n        returns (bytes1 result)\n    {\n        if (b.length == 0) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanZeroRequired,\n                b.length,\n                0\n            ));\n        }\n\n        // Store last byte.\n        result = b[b.length - 1];\n\n        assembly {\n            // Decrement length of byte array.\n            let newLen := sub(mload(b), 1)\n            mstore(b, newLen)\n        }\n        return result;\n    }\n\n    /// @dev Tests equality of two byte arrays.\n    /// @param lhs First byte array to compare.\n    /// @param rhs Second byte array to compare.\n    /// @return equal True if arrays are the same. False otherwise.\n    function equals(\n        bytes memory lhs,\n        bytes memory rhs\n    )\n        internal\n        pure\n        returns (bool equal)\n    {\n        // Keccak gas cost is 30 + numWords * 6. This is a cheap way to compare.\n        // We early exit on unequal lengths, but keccak would also correctly\n        // handle this.\n        return lhs.length == rhs.length && keccak256(lhs) == keccak256(rhs);\n    }\n\n    /// @dev Reads an address from a position in a byte array.\n    /// @param b Byte array containing an address.\n    /// @param index Index in byte array of address.\n    /// @return result address from byte array.\n    function readAddress(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (address result)\n    {\n        if (b.length < index + 20) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Read address from array memory\n        assembly {\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 20-byte mask to obtain address\n            result := and(mload(add(b, index)), 0xffffffffffffffffffffffffffffffffffffffff)\n        }\n        return result;\n    }\n\n    /// @dev Writes an address into a specific position in a byte array.\n    /// @param b Byte array to insert address into.\n    /// @param index Index in byte array of address.\n    /// @param input Address to put into byte array.\n    function writeAddress(\n        bytes memory b,\n        uint256 index,\n        address input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 20) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Store address into array memory\n        assembly {\n            // The address occupies 20 bytes and mstore stores 32 bytes.\n            // First fetch the 32-byte word where we'll be storing the address, then\n            // apply a mask so we have only the bytes in the word that the address will not occupy.\n            // Then combine these bytes with the address and store the 32 bytes back to memory with mstore.\n\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 12-byte mask to obtain extra bytes occupying word of memory where we'll store the address\n            let neighbors := and(\n                mload(add(b, index)),\n                0xffffffffffffffffffffffff0000000000000000000000000000000000000000\n            )\n\n            // Make sure input address is clean.\n            // (Solidity does not guarantee this)\n            input := and(input, 0xffffffffffffffffffffffffffffffffffffffff)\n\n            // Store the neighbors and address into memory\n            mstore(add(b, index), xor(input, neighbors))\n        }\n    }\n\n    /// @dev Reads a bytes32 value from a position in a byte array.\n    /// @param b Byte array containing a bytes32 value.\n    /// @param index Index in byte array of bytes32 value.\n    /// @return result bytes32 value from byte array.\n    function readBytes32(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        if (b.length < index + 32) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            result := mload(add(b, index))\n        }\n        return result;\n    }\n\n    /// @dev Writes a bytes32 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input bytes32 to put into byte array.\n    function writeBytes32(\n        bytes memory b,\n        uint256 index,\n        bytes32 input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 32) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            mstore(add(b, index), input)\n        }\n    }\n\n    /// @dev Reads a uint256 value from a position in a byte array.\n    /// @param b Byte array containing a uint256 value.\n    /// @param index Index in byte array of uint256 value.\n    /// @return result uint256 value from byte array.\n    function readUint256(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (uint256 result)\n    {\n        result = uint256(readBytes32(b, index));\n        return result;\n    }\n\n    /// @dev Writes a uint256 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input uint256 to put into byte array.\n    function writeUint256(\n        bytes memory b,\n        uint256 index,\n        uint256 input\n    )\n        internal\n        pure\n    {\n        writeBytes32(b, index, bytes32(input));\n    }\n\n    /// @dev Reads an unpadded bytes4 value from a position in a byte array.\n    /// @param b Byte array containing a bytes4 value.\n    /// @param index Index in byte array of bytes4 value.\n    /// @return result bytes4 value from byte array.\n    function readBytes4(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes4 result)\n    {\n        if (b.length < index + 4) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsFourRequired,\n                b.length,\n                index + 4\n            ));\n        }\n\n        // Arrays are prefixed by a 32 byte length field\n        index += 32;\n\n        // Read the bytes4 from array memory\n        assembly {\n            result := mload(add(b, index))\n            // Solidity does not require us to clean the trailing bytes.\n            // We do it anyway\n            result := and(result, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)\n        }\n        return result;\n    }\n\n    /// @dev Writes a new length to a byte array.\n    ///      Decreasing length will lead to removing the corresponding lower order bytes from the byte array.\n    ///      Increasing length may lead to appending adjacent in-memory bytes to the end of the byte array.\n    /// @param b Bytes array to write new length to.\n    /// @param length New length of byte array.\n    function writeLength(bytes memory b, uint256 length)\n        internal\n        pure\n    {\n        assembly {\n            mstore(b, length)\n        }\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/errors/LibBytesRichErrorsV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibBytesRichErrorsV06 {\n\n    enum InvalidByteOperationErrorCodes {\n        FromLessThanOrEqualsToRequired,\n        ToLessThanOrEqualsLengthRequired,\n        LengthGreaterThanZeroRequired,\n        LengthGreaterThanOrEqualsFourRequired,\n        LengthGreaterThanOrEqualsTwentyRequired,\n        LengthGreaterThanOrEqualsThirtyTwoRequired,\n        LengthGreaterThanOrEqualsNestedBytesLengthRequired,\n        DestinationLengthGreaterThanOrEqualSourceLengthRequired\n    }\n\n    // bytes4(keccak256(\"InvalidByteOperationError(uint8,uint256,uint256)\"))\n    bytes4 internal constant INVALID_BYTE_OPERATION_ERROR_SELECTOR =\n        0x28006595;\n\n    // solhint-disable func-name-mixedcase\n    function InvalidByteOperationError(\n        InvalidByteOperationErrorCodes errorCode,\n        uint256 offset,\n        uint256 required\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            INVALID_BYTE_OPERATION_ERROR_SELECTOR,\n            errorCode,\n            offset,\n            required\n        );\n    }\n}\n",
        "@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\ninterface IERC20TokenV06 {\n\n    // solhint-disable no-simple-event-func-name\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 value\n    );\n\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n\n    /// @dev send `value` token to `to` from `msg.sender`\n    /// @param to The address of the recipient\n    /// @param value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transfer(address to, uint256 value)\n        external\n        returns (bool);\n\n    /// @dev send `value` token to `to` from `from` on the condition it is approved by `from`\n    /// @param from The address of the sender\n    /// @param to The address of the recipient\n    /// @param value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    )\n        external\n        returns (bool);\n\n    /// @dev `msg.sender` approves `spender` to spend `value` tokens\n    /// @param spender The address of the account able to transfer the tokens\n    /// @param value The amount of wei to be approved for transfer\n    /// @return Always true if the call has enough gas to complete execution\n    function approve(address spender, uint256 value)\n        external\n        returns (bool);\n\n    /// @dev Query total supply of token\n    /// @return Total supply of token\n    function totalSupply()\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the balance of `owner`.\n    /// @param owner The address from which the balance will be retrieved\n    /// @return Balance of owner\n    function balanceOf(address owner)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the allowance for `spender` to spend from `owner`.\n    /// @param owner The address of the account owning tokens\n    /// @param spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the number of decimals this token has.\n    function decimals()\n        external\n        view\n        returns (uint8);\n}\n",
        "./BancorSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IBancor.sol\";\n\ncontract CompilerHack {}\n\ncontract BancorSampler is CompilerHack {\n\n    /// @dev Base gas limit for Bancor calls.\n    uint256 constant private BANCOR_CALL_GAS = 300e3; // 300k\n\n    struct BancorSamplerOpts {\n        IBancorRegistry registry;\n        address[][] paths;\n    }\n\n    /// @dev Sample sell quotes from Bancor.\n    /// @param opts BancorSamplerOpts The Bancor registry contract address and paths\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return bancorNetwork the Bancor Network address\n    /// @return path the selected conversion path from bancor\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromBancor(\n        BancorSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (address bancorNetwork, address[] memory path, uint256[] memory makerTokenAmounts)\n    {\n        if (opts.paths.length == 0) {\n            return (bancorNetwork, path, makerTokenAmounts);\n        }\n        (bancorNetwork, path) = _findBestPath(opts, takerToken, makerToken, takerTokenAmounts);\n        makerTokenAmounts = new uint256[](takerTokenAmounts.length);\n\n        for (uint256 i = 0; i < makerTokenAmounts.length; i++) {\n            try\n                IBancorNetwork(bancorNetwork)\n                    .rateByPath\n                        {gas: BANCOR_CALL_GAS}\n                        (path, takerTokenAmounts[i])\n                returns (uint256 amount)\n            {\n                makerTokenAmounts[i] = amount;\n                // Break early if there are 0 amounts\n                if (makerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n        return (bancorNetwork, path, makerTokenAmounts);\n    }\n\n    /// @dev Sample buy quotes from Bancor. Unimplemented\n    /// @param opts BancorSamplerOpts The Bancor registry contract address and paths\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return bancorNetwork the Bancor Network address\n    /// @return path the selected conversion path from bancor\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromBancor(\n        BancorSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (address bancorNetwork, address[] memory path, uint256[] memory takerTokenAmounts)\n    {\n    }\n\n    function _findBestPath(\n        BancorSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        internal\n        view\n        returns (address bancorNetwork, address[] memory path)\n    {\n        bancorNetwork = opts.registry.getAddress(opts.registry.BANCOR_NETWORK());\n        if (opts.paths.length == 0) {\n            return (bancorNetwork, path);\n        }\n        uint256 maxBoughtAmount = 0;\n        // Find the best path by selling the largest taker amount\n        for (uint256 i = 0; i < opts.paths.length; i++) {\n            if (opts.paths[i].length < 2) {\n                continue;\n            }\n\n            try\n                IBancorNetwork(bancorNetwork)\n                    .rateByPath\n                        {gas: BANCOR_CALL_GAS}\n                        (opts.paths[i], takerTokenAmounts[takerTokenAmounts.length-1])\n                returns (uint256 amount)\n            {\n                if (amount > maxBoughtAmount) {\n                    maxBoughtAmount = amount;\n                    path = opts.paths[i];\n                }\n            } catch {\n                // Swallow failures, leaving all results as zero.\n                continue;\n            }\n        }\n    }\n}\n",
        "./interfaces/IBancor.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface IBancor {}\n\ninterface IBancorNetwork {\n  function conversionPath(address _sourceToken, address _targetToken) external view returns (address[] memory);\n  function rateByPath(address[] memory _path, uint256 _amount) external view returns (uint256);\n}\n\ninterface IBancorRegistry {\n    function getAddress(bytes32 _contractName) external view returns (address);\n    function BANCOR_NETWORK() external view returns (bytes32);\n}\n",
        "./CurveSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/ICurve.sol\";\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\n\n\ncontract CurveSampler is\n    SamplerUtils,\n    ApproximateBuys\n{\n    /// @dev Information for sampling from curve sources.\n    struct CurveInfo {\n        address poolAddress;\n        bytes4 sellQuoteFunctionSelector;\n        bytes4 buyQuoteFunctionSelector;\n    }\n\n    /// @dev Base gas limit for Curve calls. Some Curves have multiple tokens\n    ///      So a reasonable ceil is 150k per token. Biggest Curve has 4 tokens.\n    uint256 constant private CURVE_CALL_GAS = 2000e3; // Was 600k for Curve but SnowSwap is using 1500k+\n\n    /// @dev Sample sell quotes from Curve.\n    /// @param curveInfo Curve information specific to this token pair.\n    /// @param fromTokenIdx Index of the taker token (what to sell).\n    /// @param toTokenIdx Index of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromCurve(\n        CurveInfo memory curveInfo,\n        int128 fromTokenIdx,\n        int128 toTokenIdx,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            (bool didSucceed, bytes memory resultData) =\n                curveInfo.poolAddress.staticcall.gas(CURVE_CALL_GAS)(\n                    abi.encodeWithSelector(\n                        curveInfo.sellQuoteFunctionSelector,\n                        fromTokenIdx,\n                        toTokenIdx,\n                        takerTokenAmounts[i]\n                    ));\n            uint256 buyAmount = 0;\n            if (didSucceed) {\n                buyAmount = abi.decode(resultData, (uint256));\n            }\n            makerTokenAmounts[i] = buyAmount;\n            // Break early if there are 0 amounts\n            if (makerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from Curve.\n    /// @param curveInfo Curve information specific to this token pair.\n    /// @param fromTokenIdx Index of the taker token (what to sell).\n    /// @param toTokenIdx Index of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromCurve(\n        CurveInfo memory curveInfo,\n        int128 fromTokenIdx,\n        int128 toTokenIdx,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        if (curveInfo.buyQuoteFunctionSelector == bytes4(0)) {\n            // Buys not supported on this curve, so approximate it.\n            return _sampleApproximateBuys(\n                ApproximateBuyQuoteOpts({\n                    makerTokenData: abi.encode(toTokenIdx, curveInfo),\n                    takerTokenData: abi.encode(fromTokenIdx, curveInfo),\n                    getSellQuoteCallback: _sampleSellForApproximateBuyFromCurve\n                }),\n                makerTokenAmounts\n            );\n        }\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            (bool didSucceed, bytes memory resultData) =\n                curveInfo.poolAddress.staticcall.gas(CURVE_CALL_GAS)(\n                    abi.encodeWithSelector(\n                        curveInfo.buyQuoteFunctionSelector,\n                        fromTokenIdx,\n                        toTokenIdx,\n                        makerTokenAmounts[i]\n                    ));\n            uint256 sellAmount = 0;\n            if (didSucceed) {\n                sellAmount = abi.decode(resultData, (uint256));\n            }\n            takerTokenAmounts[i] = sellAmount;\n            // Break early if there are 0 amounts\n            if (takerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n    }\n\n    function _sampleSellForApproximateBuyFromCurve(\n        bytes memory takerTokenData,\n        bytes memory makerTokenData,\n        uint256 sellAmount\n    )\n        private\n        view\n        returns (uint256 buyAmount)\n    {\n        (int128 takerTokenIdx, CurveInfo memory curveInfo) =\n            abi.decode(takerTokenData, (int128, CurveInfo));\n        (int128 makerTokenIdx) =\n            abi.decode(makerTokenData, (int128));\n        (bool success, bytes memory resultData) =\n            address(this).staticcall(abi.encodeWithSelector(\n                this.sampleSellsFromCurve.selector,\n                curveInfo,\n                takerTokenIdx,\n                makerTokenIdx,\n                _toSingleValueArray(sellAmount)\n            ));\n        if (!success) {\n            return 0;\n        }\n        // solhint-disable-next-line indent\n        return abi.decode(resultData, (uint256[]))[0];\n    }\n}\n",
        "./interfaces/ICurve.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\n// solhint-disable func-name-mixedcase\ninterface ICurve {\n\n    /// @dev Sell `sellAmount` of `fromToken` token and receive `toToken` token.\n    ///      This function exists on later versions of Curve (USDC/DAI/USDT)\n    /// @param i The token index being sold.\n    /// @param j The token index being bought.\n    /// @param sellAmount The amount of token being bought.\n    /// @param minBuyAmount The minimum buy amount of the token being bought.\n    function exchange_underlying(\n        int128 i,\n        int128 j,\n        uint256 sellAmount,\n        uint256 minBuyAmount\n    )\n        external;\n\n    /// @dev Get the amount of `toToken` by selling `sellAmount` of `fromToken`\n    /// @param i The token index being sold.\n    /// @param j The token index being bought.\n    /// @param sellAmount The amount of token being bought.\n    function get_dy_underlying(\n        int128 i,\n        int128 j,\n        uint256 sellAmount\n    )\n        external\n        returns (uint256 dy);\n\n    /// @dev Get the amount of `fromToken` by buying `buyAmount` of `toToken`\n    ///      This function exists on later versions of Curve (USDC/DAI/USDT)\n    /// @param i The token index being sold.\n    /// @param j The token index being bought.\n    /// @param buyAmount The amount of token being bought.\n    function get_dx_underlying(\n        int128 i,\n        int128 j,\n        uint256 buyAmount\n    )\n        external\n        returns (uint256 dx);\n\n    /// @dev Get the underlying token address from the token index\n    /// @param i The token index.\n    function underlying_coins(\n        int128 i\n    )\n        external\n        returns (address tokenAddress);\n}\n",
        "./ApproximateBuys.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/LibMathV06.sol\";\n\n\ncontract ApproximateBuys {\n\n    /// @dev Information computing buy quotes for sources that do not have native\n    ///      buy quote support.\n    struct ApproximateBuyQuoteOpts {\n        // Arbitrary maker token data to pass to `getSellQuoteCallback`.\n        bytes makerTokenData;\n        // Arbitrary taker token data to pass to `getSellQuoteCallback`.\n        bytes takerTokenData;\n        // Callback to retrieve a sell quote.\n        function (bytes memory, bytes memory, uint256)\n            internal\n            view\n            returns (uint256) getSellQuoteCallback;\n    }\n\n    uint256 private constant ONE_HUNDED_PERCENT_BPS = 1e4;\n    /// @dev Maximum approximate (positive) error rate when approximating a buy quote.\n    uint256 private constant APPROXIMATE_BUY_TARGET_EPSILON_BPS = 0.0005e4;\n    /// @dev Maximum iterations to perform when approximating a buy quote.\n    uint256 private constant APPROXIMATE_BUY_MAX_ITERATIONS = 5;\n\n    function _sampleApproximateBuys(\n        ApproximateBuyQuoteOpts memory opts,\n        uint256[] memory makerTokenAmounts\n    )\n        internal\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        takerTokenAmounts = new uint256[](makerTokenAmounts.length);\n        if (makerTokenAmounts.length == 0) {\n            return takerTokenAmounts;\n        }\n\n        uint256 sellAmount = opts.getSellQuoteCallback(\n            opts.makerTokenData,\n            opts.takerTokenData,\n            makerTokenAmounts[0]\n        );\n        if (sellAmount == 0) {\n            return takerTokenAmounts;\n        }\n\n        uint256 buyAmount = opts.getSellQuoteCallback(\n            opts.takerTokenData,\n            opts.makerTokenData,\n            sellAmount\n        );\n        if (buyAmount == 0) {\n            return takerTokenAmounts;\n        }\n\n        for (uint256 i = 0; i < makerTokenAmounts.length; i++) {\n            for (uint256 iter = 0; iter < APPROXIMATE_BUY_MAX_ITERATIONS; iter++) {\n                // adjustedSellAmount = previousSellAmount * (target/actual) * JUMP_MULTIPLIER\n                sellAmount = _safeGetPartialAmountCeil(\n                    makerTokenAmounts[i],\n                    buyAmount,\n                    sellAmount\n                );\n                if (sellAmount == 0) {\n                    break;\n                }\n                sellAmount = _safeGetPartialAmountCeil(\n                    (ONE_HUNDED_PERCENT_BPS + APPROXIMATE_BUY_TARGET_EPSILON_BPS),\n                    ONE_HUNDED_PERCENT_BPS,\n                    sellAmount\n                );\n                if (sellAmount == 0) {\n                    break;\n                }\n                uint256 _buyAmount = opts.getSellQuoteCallback(\n                    opts.takerTokenData,\n                    opts.makerTokenData,\n                    sellAmount\n                );\n                if (_buyAmount == 0) {\n                    break;\n                }\n                // We re-use buyAmount next iteration, only assign if it is\n                // non zero\n                buyAmount = _buyAmount;\n                // If we've reached our goal, exit early\n                if (buyAmount >= makerTokenAmounts[i]) {\n                    uint256 eps =\n                        (buyAmount - makerTokenAmounts[i]) * ONE_HUNDED_PERCENT_BPS /\n                        makerTokenAmounts[i];\n                    if (eps <= APPROXIMATE_BUY_TARGET_EPSILON_BPS) {\n                        break;\n                    }\n                }\n            }\n            // We do our best to close in on the requested amount, but we can either over buy or under buy and exit\n            // if we hit a max iteration limit\n            // We scale the sell amount to get the approximate target\n            takerTokenAmounts[i] = _safeGetPartialAmountCeil(\n                makerTokenAmounts[i],\n                buyAmount,\n                sellAmount\n            );\n        }\n    }\n\n    function _safeGetPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        view\n        returns (uint256 partialAmount)\n    {\n        if (numerator == 0 || target == 0 || denominator == 0) return 0;\n        uint256 c = numerator * target;\n        if (c / numerator != target) return 0;\n        return (c + (denominator - 1)) / denominator;\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/LibMathV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./LibSafeMathV06.sol\";\nimport \"./errors/LibRichErrorsV06.sol\";\nimport \"./errors/LibMathRichErrorsV06.sol\";\n\n\nlibrary LibMathV06 {\n\n    using LibSafeMathV06 for uint256;\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    ///      Reverts if rounding error is >= 0.1%\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded down.\n    function safeGetPartialAmountFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        if (isRoundingErrorFloor(\n                numerator,\n                denominator,\n                target\n        )) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.RoundingError(\n                numerator,\n                denominator,\n                target\n            ));\n        }\n\n        partialAmount = numerator.safeMul(target).safeDiv(denominator);\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    ///      Reverts if rounding error is >= 0.1%\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded up.\n    function safeGetPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        if (isRoundingErrorCeil(\n                numerator,\n                denominator,\n                target\n        )) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.RoundingError(\n                numerator,\n                denominator,\n                target\n            ));\n        }\n\n        // safeDiv computes `floor(a / b)`. We use the identity (a, b integer):\n        //       ceil(a / b) = floor((a + b - 1) / b)\n        // To implement `ceil(a / b)` using safeDiv.\n        partialAmount = numerator.safeMul(target)\n            .safeAdd(denominator.safeSub(1))\n            .safeDiv(denominator);\n\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded down.\n    function getPartialAmountFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        partialAmount = numerator.safeMul(target).safeDiv(denominator);\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded up.\n    function getPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        // safeDiv computes `floor(a / b)`. We use the identity (a, b integer):\n        //       ceil(a / b) = floor((a + b - 1) / b)\n        // To implement `ceil(a / b)` using safeDiv.\n        partialAmount = numerator.safeMul(target)\n            .safeAdd(denominator.safeSub(1))\n            .safeDiv(denominator);\n\n        return partialAmount;\n    }\n\n    /// @dev Checks if rounding error >= 0.1% when rounding down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to multiply with numerator/denominator.\n    /// @return isError Rounding error is present.\n    function isRoundingErrorFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bool isError)\n    {\n        if (denominator == 0) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.DivisionByZeroError());\n        }\n\n        // The absolute rounding error is the difference between the rounded\n        // value and the ideal value. The relative rounding error is the\n        // absolute rounding error divided by the absolute value of the\n        // ideal value. This is undefined when the ideal value is zero.\n        //\n        // The ideal value is `numerator * target / denominator`.\n        // Let's call `numerator * target % denominator` the remainder.\n        // The absolute error is `remainder / denominator`.\n        //\n        // When the ideal value is zero, we require the absolute error to\n        // be zero. Fortunately, this is always the case. The ideal value is\n        // zero iff `numerator == 0` and/or `target == 0`. In this case the\n        // remainder and absolute error are also zero.\n        if (target == 0 || numerator == 0) {\n            return false;\n        }\n\n        // Otherwise, we want the relative rounding error to be strictly\n        // less than 0.1%.\n        // The relative error is `remainder / (numerator * target)`.\n        // We want the relative error less than 1 / 1000:\n        //        remainder / (numerator * denominator)  <  1 / 1000\n        // or equivalently:\n        //        1000 * remainder  <  numerator * target\n        // so we have a rounding error iff:\n        //        1000 * remainder  >=  numerator * target\n        uint256 remainder = mulmod(\n            target,\n            numerator,\n            denominator\n        );\n        isError = remainder.safeMul(1000) >= numerator.safeMul(target);\n        return isError;\n    }\n\n    /// @dev Checks if rounding error >= 0.1% when rounding up.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to multiply with numerator/denominator.\n    /// @return isError Rounding error is present.\n    function isRoundingErrorCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bool isError)\n    {\n        if (denominator == 0) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.DivisionByZeroError());\n        }\n\n        // See the comments in `isRoundingError`.\n        if (target == 0 || numerator == 0) {\n            // When either is zero, the ideal value and rounded value are zero\n            // and there is no rounding error. (Although the relative error\n            // is undefined.)\n            return false;\n        }\n        // Compute remainder as before\n        uint256 remainder = mulmod(\n            target,\n            numerator,\n            denominator\n        );\n        remainder = denominator.safeSub(remainder) % denominator;\n        isError = remainder.safeMul(1000) >= numerator.safeMul(target);\n        return isError;\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./errors/LibRichErrorsV06.sol\";\nimport \"./errors/LibSafeMathRichErrorsV06.sol\";\n\n\nlibrary LibSafeMathV06 {\n\n    function safeMul(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        if (c / a != b) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.MULTIPLICATION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function safeDiv(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b == 0) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.DIVISION_BY_ZERO,\n                a,\n                b\n            ));\n        }\n        uint256 c = a / b;\n        return c;\n    }\n\n    function safeSub(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b > a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.SUBTRACTION_UNDERFLOW,\n                a,\n                b\n            ));\n        }\n        return a - b;\n    }\n\n    function safeAdd(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint256 c = a + b;\n        if (c < a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.ADDITION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function max256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a < b ? a : b;\n    }\n\n    function safeMul128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (a == 0) {\n            return 0;\n        }\n        uint128 c = a * b;\n        if (c / a != b) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.MULTIPLICATION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function safeDiv128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (b == 0) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.DIVISION_BY_ZERO,\n                a,\n                b\n            ));\n        }\n        uint128 c = a / b;\n        return c;\n    }\n\n    function safeSub128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (b > a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.SUBTRACTION_UNDERFLOW,\n                a,\n                b\n            ));\n        }\n        return a - b;\n    }\n\n    function safeAdd128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        uint128 c = a + b;\n        if (c < a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.ADDITION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function max128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        return a < b ? a : b;\n    }\n\n    function safeDowncastToUint128(uint256 a)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (a > type(uint128).max) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256DowncastError(\n                LibSafeMathRichErrorsV06.DowncastErrorCodes.VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT128,\n                a\n            ));\n        }\n        return uint128(a);\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/errors/LibSafeMathRichErrorsV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibSafeMathRichErrorsV06 {\n\n    // bytes4(keccak256(\"Uint256BinOpError(uint8,uint256,uint256)\"))\n    bytes4 internal constant UINT256_BINOP_ERROR_SELECTOR =\n        0xe946c1bb;\n\n    // bytes4(keccak256(\"Uint256DowncastError(uint8,uint256)\"))\n    bytes4 internal constant UINT256_DOWNCAST_ERROR_SELECTOR =\n        0xc996af7b;\n\n    enum BinOpErrorCodes {\n        ADDITION_OVERFLOW,\n        MULTIPLICATION_OVERFLOW,\n        SUBTRACTION_UNDERFLOW,\n        DIVISION_BY_ZERO\n    }\n\n    enum DowncastErrorCodes {\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT32,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT64,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT96,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT128\n    }\n\n    // solhint-disable func-name-mixedcase\n    function Uint256BinOpError(\n        BinOpErrorCodes errorCode,\n        uint256 a,\n        uint256 b\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            UINT256_BINOP_ERROR_SELECTOR,\n            errorCode,\n            a,\n            b\n        );\n    }\n\n    function Uint256DowncastError(\n        DowncastErrorCodes errorCode,\n        uint256 a\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            UINT256_DOWNCAST_ERROR_SELECTOR,\n            errorCode,\n            a\n        );\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/errors/LibMathRichErrorsV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibMathRichErrorsV06 {\n\n    // bytes4(keccak256(\"DivisionByZeroError()\"))\n    bytes internal constant DIVISION_BY_ZERO_ERROR =\n        hex\"a791837c\";\n\n    // bytes4(keccak256(\"RoundingError(uint256,uint256,uint256)\"))\n    bytes4 internal constant ROUNDING_ERROR_SELECTOR =\n        0x339f3de2;\n\n    // solhint-disable func-name-mixedcase\n    function DivisionByZeroError()\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return DIVISION_BY_ZERO_ERROR;\n    }\n\n    function RoundingError(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            ROUNDING_ERROR_SELECTOR,\n            numerator,\n            denominator,\n            target\n        );\n    }\n}\n",
        "./DODOSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\n\n\ninterface IDODOZoo {\n    function getDODO(address baseToken, address quoteToken) external view returns (address);\n}\n\ninterface IDODOHelper {\n    function querySellQuoteToken(address dodo, uint256 amount) external view returns (uint256);\n}\n\ninterface IDODO {\n    function querySellBaseToken(uint256 amount) external view returns (uint256);\n    function _TRADE_ALLOWED_() external view returns (bool);\n}\n\ncontract DODOSampler is\n    SamplerUtils,\n    ApproximateBuys\n{\n\n    /// @dev Gas limit for DODO calls.\n    uint256 constant private DODO_CALL_GAS = 300e3; // 300k\n    struct DODOSamplerOpts {\n        address registry;\n        address helper;\n    }\n\n    /// @dev Sample sell quotes from DODO.\n    /// @param opts DODOSamplerOpts DODO Registry and helper addresses\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return sellBase whether the bridge needs to sell the base token\n    /// @return pool the DODO pool address\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromDODO(\n        DODOSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (bool sellBase, address pool, uint256[] memory makerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        pool = IDODOZoo(opts.registry).getDODO(takerToken, makerToken);\n        address baseToken;\n        // If pool exists we have the correct order of Base/Quote\n        if (pool != address(0)) {\n            baseToken = takerToken;\n            sellBase = true;\n        } else {\n            pool = IDODOZoo(opts.registry).getDODO(makerToken, takerToken);\n            // No pool either direction\n            if (address(pool) == address(0)) {\n                return (sellBase, pool, makerTokenAmounts);\n            }\n            baseToken = makerToken;\n            sellBase = false;\n        }\n\n        // DODO Pool has been disabled\n        if (!IDODO(pool)._TRADE_ALLOWED_()) {\n            return (sellBase, pool, makerTokenAmounts);\n        }\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            uint256 buyAmount = _sampleSellForApproximateBuyFromDODO(\n                abi.encode(takerToken, pool, baseToken, opts.helper), // taker token data\n                abi.encode(makerToken, pool, baseToken, opts.helper), // maker token data\n                takerTokenAmounts[i]\n            );\n            makerTokenAmounts[i] = buyAmount;\n            // Break early if there are 0 amounts\n            if (makerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from DODO.\n    /// @param opts DODOSamplerOpts DODO Registry and helper addresses\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token sell amount for each sample.\n    /// @return sellBase whether the bridge needs to sell the base token\n    /// @return pool the DODO pool address\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromDODO(\n        DODOSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (bool sellBase, address pool, uint256[] memory takerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n\n        // Pool is BASE/QUOTE\n        // Look up the pool from the taker/maker combination\n        pool = IDODOZoo(opts.registry).getDODO(takerToken, makerToken);\n        address baseToken;\n        // If pool exists we have the correct order of Base/Quote\n        if (pool != address(0)) {\n            baseToken = takerToken;\n            sellBase = true;\n        } else {\n            // Look up the pool from the maker/taker combination\n            pool = IDODOZoo(opts.registry).getDODO(makerToken, takerToken);\n            // No pool either direction\n            if (address(pool) == address(0)) {\n                return (sellBase, pool, takerTokenAmounts);\n            }\n            baseToken = makerToken;\n            sellBase = false;\n        }\n\n        // DODO Pool has been disabled\n        if (!IDODO(pool)._TRADE_ALLOWED_()) {\n            return (sellBase, pool, takerTokenAmounts);\n        }\n\n        takerTokenAmounts = _sampleApproximateBuys(\n            ApproximateBuyQuoteOpts({\n                makerTokenData: abi.encode(makerToken, pool, baseToken, opts.helper),\n                takerTokenData: abi.encode(takerToken, pool, baseToken, opts.helper),\n                getSellQuoteCallback: _sampleSellForApproximateBuyFromDODO\n            }),\n            makerTokenAmounts\n        );\n    }\n\n    function _sampleSellForApproximateBuyFromDODO(\n        bytes memory takerTokenData,\n        bytes memory /* makerTokenData */,\n        uint256 sellAmount\n    )\n        private\n        view\n        returns (uint256)\n    {\n        (address takerToken, address pool, address baseToken, address helper) = abi.decode(\n            takerTokenData,\n            (address, address, address, address)\n        );\n\n        // We will get called to sell both the taker token and also to sell the maker token\n        if (takerToken == baseToken) {\n            // If base token then use the original query on the pool\n            try\n                IDODO(pool).querySellBaseToken\n                    {gas: DODO_CALL_GAS}\n                    (sellAmount)\n                returns (uint256 amount)\n            {\n                return amount;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                return 0;\n            }\n        } else {\n            // If quote token then use helper, this is less accurate\n            try\n                IDODOHelper(helper).querySellQuoteToken\n                    {gas: DODO_CALL_GAS}\n                    (pool, sellAmount)\n                returns (uint256 amount)\n            {\n                return amount;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                return 0;\n            }\n        }\n    }\n\n}\n",
        "./DODOV2Sampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\n\ninterface IDODOV2Registry {\n    function getDODOPool(address baseToken, address quoteToken)\n        external\n        view\n        returns (address[] memory machines);\n}\n\ninterface IDODOV2Pool {\n    function querySellBase(address trader, uint256 payBaseAmount)\n        external\n        view\n        returns (uint256 receiveQuoteAmount, uint256 mtFee);\n\n    function querySellQuote(address trader, uint256 payQuoteAmount)\n        external\n        view\n        returns (uint256 receiveBaseAmount, uint256 mtFee);\n}\n\ncontract DODOV2Sampler is\n    SamplerUtils,\n    ApproximateBuys\n{\n\n    /// @dev Gas limit for DODO V2 calls.\n    uint256 constant private DODO_V2_CALL_GAS = 300e3; // 300k\n\n    /// @dev Sample sell quotes from DODO V2.\n    /// @param registry Address of the registry to look up.\n    /// @param offset offset index for the pool in the registry.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return sellBase whether the bridge needs to sell the base token\n    /// @return pool the DODO pool address\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromDODOV2(\n        address registry,\n        uint256 offset,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (bool sellBase, address pool, uint256[] memory makerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        (pool, sellBase) = _getNextDODOV2Pool(registry, offset, takerToken, makerToken);\n        if (pool == address(0)) {\n            return (sellBase, pool, makerTokenAmounts);\n        }\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            uint256 buyAmount = _sampleSellForApproximateBuyFromDODOV2(\n                abi.encode(takerToken, pool, sellBase), // taker token data\n                abi.encode(makerToken, pool, sellBase), // maker token data\n                takerTokenAmounts[i]\n            );\n            makerTokenAmounts[i] = buyAmount;\n            // Break early if there are 0 amounts\n            if (makerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from DODO.\n    /// @param registry Address of the registry to look up.\n    /// @param offset offset index for the pool in the registry.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token sell amount for each sample.\n    /// @return sellBase whether the bridge needs to sell the base token\n    /// @return pool the DODO pool address\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromDODOV2(\n        address registry,\n        uint256 offset,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (bool sellBase, address pool, uint256[] memory takerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        (pool, sellBase) = _getNextDODOV2Pool(registry, offset, takerToken, makerToken);\n        if (pool == address(0)) {\n            return (sellBase, pool, takerTokenAmounts);\n        }\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n\n        takerTokenAmounts = _sampleApproximateBuys(\n            ApproximateBuyQuoteOpts({\n                makerTokenData: abi.encode(makerToken, pool, !sellBase),\n                takerTokenData: abi.encode(takerToken, pool, sellBase),\n                getSellQuoteCallback: _sampleSellForApproximateBuyFromDODOV2\n            }),\n            makerTokenAmounts\n        );\n    }\n\n    function _sampleSellForApproximateBuyFromDODOV2(\n        bytes memory takerTokenData,\n        bytes memory /* makerTokenData */,\n        uint256 sellAmount\n    )\n        private\n        view\n        returns (uint256)\n    {\n        (address takerToken, address pool, bool sellBase) = abi.decode(\n            takerTokenData,\n            (address, address, bool)\n        );\n\n        // We will get called to sell both the taker token and also to sell the maker token\n        // since we use approximate buy for sell and buy functions\n        if (sellBase) {\n            try\n                IDODOV2Pool(pool).querySellBase\n                    { gas: DODO_V2_CALL_GAS }\n                    (address(0), sellAmount)\n                returns (uint256 amount, uint256)\n            {\n                return amount;\n            } catch {\n                return 0;\n            }\n        } else {\n            try\n                IDODOV2Pool(pool).querySellQuote\n                    { gas: DODO_V2_CALL_GAS }\n                    (address(0), sellAmount)\n                returns (uint256 amount, uint256)\n            {\n                return amount;\n            } catch {\n                return 0;\n            }\n        }\n    }\n\n    function _getNextDODOV2Pool(\n        address registry,\n        uint256 offset,\n        address takerToken,\n        address makerToken\n    )\n        internal\n        view\n        returns (address machine, bool sellBase)\n    {\n        // Query in base -> quote direction, if a pool is found then we are selling the base\n        address[] memory machines = IDODOV2Registry(registry).getDODOPool(takerToken, makerToken);\n        sellBase = true;\n        if (machines.length == 0) {\n            // Query in quote -> base direction, if a pool is found then we are selling the quote\n            machines = IDODOV2Registry(registry).getDODOPool(makerToken, takerToken);\n            sellBase = false;\n        }\n\n        if (offset >= machines.length) {\n            return (address(0), false);\n        }\n\n        machine = machines[offset];\n    }\n\n}\n",
        "./Eth2DaiSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IEth2Dai.sol\";\nimport \"./SamplerUtils.sol\";\n\n\ncontract Eth2DaiSampler is\n    SamplerUtils\n{\n    /// @dev Base gas limit for Eth2Dai calls.\n    uint256 constant private ETH2DAI_CALL_GAS = 1000e3; // 1m\n\n    /// @dev Sample sell quotes from Eth2Dai/Oasis.\n    /// @param router Address of the Eth2Dai/Oasis contract\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromEth2Dai(\n        address router,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            try\n                IEth2Dai(router).getBuyAmount\n                    {gas: ETH2DAI_CALL_GAS}\n                    (makerToken, takerToken, takerTokenAmounts[i])\n                returns (uint256 amount)\n            {\n                makerTokenAmounts[i] = amount;\n                // Break early if there are 0 amounts\n                if (makerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from Eth2Dai/Oasis.\n    /// @param router Address of the Eth2Dai/Oasis contract\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Maker token sell amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromEth2Dai(\n        address router,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            try\n                IEth2Dai(router).getPayAmount\n                    {gas: ETH2DAI_CALL_GAS}\n                    (takerToken, makerToken, makerTokenAmounts[i])\n                returns (uint256 amount)\n            {\n                takerTokenAmounts[i] = amount;\n                // Break early if there are 0 amounts\n                if (takerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n}\n",
        "./interfaces/IEth2Dai.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface IEth2Dai {\n\n    function getBuyAmount(\n        address buyToken,\n        address payToken,\n        uint256 payAmount\n    )\n        external\n        view\n        returns (uint256 buyAmount);\n\n    function getPayAmount(\n        address payToken,\n        address buyToken,\n        uint256 buyAmount\n    )\n        external\n        view\n        returns (uint256 payAmount);\n}\n",
        "./KyberSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IKyberNetwork.sol\";\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\n\n\ncontract KyberSampler is\n    SamplerUtils,\n    ApproximateBuys\n{\n    /// @dev Gas limit for Kyber calls.\n    uint256 constant private KYBER_CALL_GAS = 500e3; // 500k\n    /// @dev Kyber ETH pseudo-address.\n    address constant internal KYBER_ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n\n    struct KyberSamplerOpts {\n        uint256 reserveOffset;\n        address hintHandler;\n        address networkProxy;\n        address weth;\n        bytes hint;\n    }\n\n    /// @dev Sample sell quotes from Kyber.\n    /// @param opts KyberSamplerOpts The nth reserve\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return reserveId The id of the reserve found at reserveOffset\n    /// @return hint The hint for the selected reserve\n    /// @return makerTokenAmounts Maker amounts bought at each taker token amount.\n    function sampleSellsFromKyberNetwork(\n        KyberSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (bytes32 reserveId, bytes memory hint, uint256[] memory makerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        reserveId = _getNextReserveId(opts, takerToken, makerToken);\n        if (reserveId == 0x0) {\n            return (reserveId, hint, makerTokenAmounts);\n        }\n        opts.hint = this.encodeKyberHint(opts, reserveId, takerToken, makerToken);\n        hint = opts.hint;\n\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            uint256 value = this.sampleSellFromKyberNetwork(\n                opts,\n                takerToken,\n                makerToken,\n                takerTokenAmounts[i]\n            );\n            makerTokenAmounts[i] = value;\n            // Break early if there are 0 amounts\n            if (makerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from Kyber.\n    /// @param opts KyberSamplerOpts The nth reserve\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return reserveId The id of the reserve found at reserveOffset\n    /// @return hint The hint for the selected reserve\n    /// @return takerTokenAmounts Taker amounts sold at each maker token amount.\n    function sampleBuysFromKyberNetwork(\n        KyberSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (bytes32 reserveId, bytes memory hint, uint256[] memory takerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n\n        reserveId = _getNextReserveId(opts, takerToken, makerToken);\n        if (reserveId == 0x0) {\n            return (reserveId, hint, takerTokenAmounts);\n        }\n        opts.hint = this.encodeKyberHint(opts, reserveId, takerToken, makerToken);\n        hint = opts.hint;\n\n        takerTokenAmounts = _sampleApproximateBuys(\n            ApproximateBuyQuoteOpts({\n                makerTokenData: abi.encode(makerToken, opts),\n                takerTokenData: abi.encode(takerToken, opts),\n                getSellQuoteCallback: _sampleSellForApproximateBuyFromKyber\n            }),\n            makerTokenAmounts\n        );\n        return (reserveId, hint, takerTokenAmounts);\n    }\n\n    function encodeKyberHint(\n        KyberSamplerOpts memory opts,\n        bytes32 reserveId,\n        address takerToken,\n        address makerToken\n    )\n        public\n        view\n        returns (bytes memory hint)\n    {\n        // Build a hint selecting the single reserve\n        IKyberHintHandler kyberHint = IKyberHintHandler(opts.hintHandler);\n\n        // All other reserves should be ignored with this hint\n        bytes32[] memory selectedReserves = new bytes32[](1);\n        selectedReserves[0] = reserveId;\n        uint256[] memory emptySplits = new uint256[](0);\n\n        if (takerToken == opts.weth) {\n            // ETH to Token\n            try\n                kyberHint.buildEthToTokenHint\n                    {gas: KYBER_CALL_GAS}\n                    (\n                        makerToken,\n                        IKyberHintHandler.TradeType.MaskIn,\n                        selectedReserves,\n                        emptySplits\n                    )\n                returns (bytes memory result)\n            {\n                return result;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n            }\n        } else if (makerToken == opts.weth) {\n            // Token to ETH\n            try\n                kyberHint.buildTokenToEthHint\n                    {gas: KYBER_CALL_GAS}\n                    (\n                        takerToken,\n                        IKyberHintHandler.TradeType.MaskIn,\n                        selectedReserves,\n                        emptySplits\n                    )\n                returns (bytes memory result)\n            {\n                return result;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n            }\n\n        } else {\n            // Token to Token\n            // We use the same reserve both ways\n            try\n                kyberHint.buildTokenToTokenHint\n                    {gas: KYBER_CALL_GAS}\n                    (\n                        takerToken,\n                        IKyberHintHandler.TradeType.MaskIn,\n                        selectedReserves,\n                        emptySplits,\n                        makerToken,\n                        IKyberHintHandler.TradeType.MaskIn,\n                        selectedReserves,\n                        emptySplits\n                    )\n                returns (bytes memory result)\n            {\n                return result;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n            }\n        }\n    }\n\n    function _sampleSellForApproximateBuyFromKyber(\n        bytes memory takerTokenData,\n        bytes memory makerTokenData,\n        uint256 sellAmount\n    )\n        private\n        view\n        returns (uint256)\n    {\n        (address makerToken, KyberSamplerOpts memory opts) =\n            abi.decode(makerTokenData, (address, KyberSamplerOpts));\n        (address takerToken, ) =\n            abi.decode(takerTokenData, (address, KyberSamplerOpts));\n        try\n            this.sampleSellFromKyberNetwork\n                (opts, takerToken, makerToken, sellAmount)\n            returns (uint256 amount)\n        {\n            return amount;\n        } catch (bytes memory) {\n            // Swallow failures, leaving all results as zero.\n            return 0;\n        }\n    }\n\n    function sampleSellFromKyberNetwork(\n        KyberSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256 takerTokenAmount\n    )\n        public\n        view\n        returns (uint256 makerTokenAmount)\n    {\n        // If there is no hint do not continue\n        if (opts.hint.length == 0) {\n            return 0;\n        }\n\n        try\n            IKyberNetworkProxy(opts.networkProxy).getExpectedRateAfterFee\n                {gas: KYBER_CALL_GAS}\n                (\n                    takerToken == opts.weth ? KYBER_ETH_ADDRESS : takerToken,\n                    makerToken == opts.weth ? KYBER_ETH_ADDRESS : makerToken,\n                    takerTokenAmount,\n                    0, // fee\n                    opts.hint\n                )\n            returns (uint256 rate)\n        {\n            uint256 makerTokenDecimals = _getTokenDecimals(makerToken);\n            uint256 takerTokenDecimals = _getTokenDecimals(takerToken);\n            makerTokenAmount =\n                rate *\n                takerTokenAmount *\n                10 ** makerTokenDecimals /\n                10 ** takerTokenDecimals /\n                10 ** 18;\n            return makerTokenAmount;\n        } catch (bytes memory) {\n            // Swallow failures, leaving all results as zero.\n            return 0;\n        }\n    }\n\n    function _getNextReserveId(\n        KyberSamplerOpts memory opts,\n        address takerToken,\n        address makerToken\n    )\n        internal\n        view\n        returns (bytes32 reserveId)\n    {\n        // Fetch the registered reserves for this pair\n        IKyberHintHandler kyberHint = IKyberHintHandler(opts.hintHandler);\n        (bytes32[] memory reserveIds, ,) = kyberHint.getTradingReserves(\n            takerToken == opts.weth ? KYBER_ETH_ADDRESS : takerToken,\n            makerToken == opts.weth ? KYBER_ETH_ADDRESS : makerToken,\n            true,\n            new bytes(0) // empty hint\n        );\n\n        if (opts.reserveOffset >= reserveIds.length) {\n            return 0x0;\n        }\n\n        reserveId = reserveIds[opts.reserveOffset];\n        // Ignore Kyber Bridged Reserves (0xbb)\n        if (uint256(reserveId >> 248) == 0xbb) {\n            return 0x0;\n        }\n\n        return reserveId;\n    }\n}\n",
        "./interfaces/IKyberNetwork.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n// Keepin everything together\ninterface IKyberNetwork {\n\n\n}\n\n\ninterface IKyberNetworkProxy {\n\n    function getExpectedRateAfterFee(\n        address src,\n        address dest,\n        uint256 srcQty,\n        uint256 platformFeeBps,\n        bytes calldata hint\n    )\n        external\n        view\n        returns (uint256 expectedRate);\n}\n\ninterface IKyberHintHandler {\n\n    enum TradeType {BestOfAll, MaskIn, MaskOut, Split}\n\n    enum ProcessWithRate {NotRequired, Required}\n\n    function getTradingReserves(\n        address tokenSrc,\n        address tokenDest,\n        bool isTokenToToken,\n        bytes calldata hint\n    )\n        external\n        view\n        returns (\n            bytes32[] memory reserveIds,\n            uint256[] memory splitValuesBps,\n            ProcessWithRate processWithRate\n        );\n\n    function buildTokenToEthHint(\n        address tokenSrc,\n        TradeType tokenToEthType,\n        bytes32[] calldata tokenToEthReserveIds,\n        uint256[] calldata tokenToEthSplits\n    )\n        external\n        view\n        returns (bytes memory hint);\n\n    function buildEthToTokenHint(\n        address tokenDest,\n        TradeType ethToTokenType,\n        bytes32[] calldata ethToTokenReserveIds,\n        uint256[] calldata ethToTokenSplits\n    )\n        external\n        view\n        returns (bytes memory hint);\n\n    function buildTokenToTokenHint(\n        address tokenSrc,\n        TradeType tokenToEthType,\n        bytes32[] calldata tokenToEthReserveIds,\n        uint256[] calldata tokenToEthSplits,\n        address tokenDest,\n        TradeType ethToTokenType,\n        bytes32[] calldata ethToTokenReserveIds,\n        uint256[] calldata ethToTokenSplits\n    )\n        external\n        view\n        returns (bytes memory hint);\n}\n",
        "./LiquidityProviderSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol\";\nimport \"@0x/contracts-zero-ex/contracts/src/vendor/ILiquidityProvider.sol\";\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\n\n\ncontract LiquidityProviderSampler is\n    SamplerUtils,\n    ApproximateBuys\n{\n    /// @dev Default gas limit for liquidity provider calls.\n    uint256 constant private DEFAULT_CALL_GAS = 400e3; // 400k\n\n    /// @dev Sample sell quotes from an arbitrary on-chain liquidity provider.\n    /// @param providerAddress Address of the liquidity provider.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromLiquidityProvider(\n        address providerAddress,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        // Initialize array of maker token amounts.\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            try\n                ILiquidityProvider(providerAddress).getSellQuote\n                    {gas: DEFAULT_CALL_GAS}\n                    (\n                        IERC20TokenV06(takerToken),\n                        IERC20TokenV06(makerToken),\n                        takerTokenAmounts[i]\n                    )\n                returns (uint256 amount)\n            {\n                makerTokenAmounts[i] = amount;\n                // Break early if there are 0 amounts\n                if (makerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from an arbitrary on-chain liquidity provider.\n    /// @param providerAddress Address of the liquidity provider.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromLiquidityProvider(\n        address providerAddress,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        takerTokenAmounts = _sampleApproximateBuys(\n            ApproximateBuyQuoteOpts({\n                makerTokenData: abi.encode(makerToken, providerAddress),\n                takerTokenData: abi.encode(takerToken, providerAddress),\n                getSellQuoteCallback: _sampleSellForApproximateBuyFromLiquidityProvider\n            }),\n            makerTokenAmounts\n        );\n    }\n\n    function _sampleSellForApproximateBuyFromLiquidityProvider(\n        bytes memory takerTokenData,\n        bytes memory makerTokenData,\n        uint256 sellAmount\n    )\n        private\n        view\n        returns (uint256 buyAmount)\n    {\n        (address takerToken, address providerAddress) =\n            abi.decode(takerTokenData, (address, address));\n        (address makerToken) =\n            abi.decode(makerTokenData, (address));\n        try\n            this.sampleSellsFromLiquidityProvider\n                {gas: DEFAULT_CALL_GAS}\n                (providerAddress, takerToken, makerToken, _toSingleValueArray(sellAmount))\n            returns (uint256[] memory amounts)\n        {\n            return amounts[0];\n        } catch (bytes memory) {\n            // Swallow failures, leaving all results as zero.\n            return 0;\n        }\n    }\n}\n",
        "@0x/contracts-zero-ex/contracts/src/vendor/ILiquidityProvider.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\n\n\ninterface ILiquidityProvider {\n\n    /// @dev An optional event an LP can emit for each fill against a source.\n    /// @param inputToken The input token.\n    /// @param outputToken The output token.\n    /// @param inputTokenAmount How much input token was sold.\n    /// @param outputTokenAmount How much output token was bought.\n    /// @param sourceId A bytes32 encoded ascii source ID. E.g., `bytes32('Curve')`/\n    /// @param sourceAddress An optional address associated with the source (e.g, a curve pool).\n    /// @param sourceId A bytes32 encoded ascii source ID. E.g., `bytes32('Curve')`/\n    /// @param sourceAddress An optional address associated with the source (e.g, a curve pool).\n    /// @param sender The caller of the LP.\n    /// @param recipient The recipient of the output tokens.\n    event LiquidityProviderFill(\n        IERC20TokenV06 inputToken,\n        IERC20TokenV06 outputToken,\n        uint256 inputTokenAmount,\n        uint256 outputTokenAmount,\n        bytes32 sourceId,\n        address sourceAddress,\n        address sender,\n        address recipient\n    );\n\n    /// @dev Trades `inputToken` for `outputToken`. The amount of `inputToken`\n    ///      to sell must be transferred to the contract prior to calling this\n    ///      function to trigger the trade.\n    /// @param inputToken The token being sold.\n    /// @param outputToken The token being bought.\n    /// @param recipient The recipient of the bought tokens.\n    /// @param minBuyAmount The minimum acceptable amount of `outputToken` to buy.\n    /// @param auxiliaryData Arbitrary auxiliary data supplied to the contract.\n    /// @return boughtAmount The amount of `outputToken` bought.\n    function sellTokenForToken(\n        IERC20TokenV06 inputToken,\n        IERC20TokenV06 outputToken,\n        address recipient,\n        uint256 minBuyAmount,\n        bytes calldata auxiliaryData\n    )\n        external\n        returns (uint256 boughtAmount);\n\n    /// @dev Trades ETH for token. ETH must either be attached to this function\n    ///      call or sent to the contract prior to calling this function to\n    ///      trigger the trade.\n    /// @param outputToken The token being bought.\n    /// @param recipient The recipient of the bought tokens.\n    /// @param minBuyAmount The minimum acceptable amount of `outputToken` to buy.\n    /// @param auxiliaryData Arbitrary auxiliary data supplied to the contract.\n    /// @return boughtAmount The amount of `outputToken` bought.\n    function sellEthForToken(\n        IERC20TokenV06 outputToken,\n        address recipient,\n        uint256 minBuyAmount,\n        bytes calldata auxiliaryData\n    )\n        external\n        payable\n        returns (uint256 boughtAmount);\n\n    /// @dev Trades token for ETH. The token must be sent to the contract prior\n    ///      to calling this function to trigger the trade.\n    /// @param inputToken The token being sold.\n    /// @param recipient The recipient of the bought tokens.\n    /// @param minBuyAmount The minimum acceptable amount of ETH to buy.\n    /// @param auxiliaryData Arbitrary auxiliary data supplied to the contract.\n    /// @return boughtAmount The amount of ETH bought.\n    function sellTokenForEth(\n        IERC20TokenV06 inputToken,\n        address payable recipient,\n        uint256 minBuyAmount,\n        bytes calldata auxiliaryData\n    )\n        external\n        returns (uint256 boughtAmount);\n\n    /// @dev Quotes the amount of `outputToken` that would be obtained by\n    ///      selling `sellAmount` of `inputToken`.\n    /// @param inputToken Address of the taker token (what to sell). Use\n    ///        the wETH address if selling ETH.\n    /// @param outputToken Address of the maker token (what to buy). Use\n    ///        the wETH address if buying ETH.\n    /// @param sellAmount Amount of `inputToken` to sell.\n    /// @return outputTokenAmount Amount of `outputToken` that would be obtained.\n    function getSellQuote(\n        IERC20TokenV06 inputToken,\n        IERC20TokenV06 outputToken,\n        uint256 sellAmount\n    )\n        external\n        view\n        returns (uint256 outputTokenAmount);\n}\n",
        "./MakerPSMSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./SamplerUtils.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibMathV06.sol\";\n\ninterface IPSM {\n    // @dev Get the fee for selling USDC to DAI in PSM\n    // @return tin toll in [wad]\n    function tin() external view returns (uint256);\n    // @dev Get the fee for selling DAI to USDC in PSM\n    // @return tout toll out [wad]\n    function tout() external view returns (uint256);\n\n    // @dev Get the address of the PSM state Vat\n    // @return address of the Vat\n    function vat() external view returns (address);\n\n    // @dev Get the address of the underlying vault powering PSM\n    // @return address of gemJoin contract\n    function gemJoin() external view returns (address);\n\n    // @dev Get the address of DAI\n    // @return address of DAI contract\n    function dai() external view returns (address);\n\n    // @dev Sell USDC for DAI\n    // @param usr The address of the account trading USDC for DAI.\n    // @param gemAmt The amount of USDC to sell in USDC base units\n    function sellGem(\n        address usr,\n        uint256 gemAmt\n    ) external;\n    // @dev Buy USDC for DAI\n    // @param usr The address of the account trading DAI for USDC\n    // @param gemAmt The amount of USDC to buy in USDC base units\n    function buyGem(\n        address usr,\n        uint256 gemAmt\n    ) external;\n}\n\ninterface IVAT {\n    // @dev Get a collateral type by identifier\n    // @param ilkIdentifier bytes32 identifier. Example: ethers.utils.formatBytes32String(\"PSM-USDC-A\")\n    // @return ilk\n    // @return ilk.Art Total Normalised Debt in wad\n    // @return ilk.rate Accumulated Rates in ray\n    // @return ilk.spot Price with Safety Margin in ray\n    // @return ilk.line Debt Ceiling in rad\n    // @return ilk.dust Urn Debt Floor in rad\n    function ilks(\n        bytes32 ilkIdentifier\n    ) external view returns (\n        uint256 Art,\n        uint256 rate,\n        uint256 spot,\n        uint256 line,\n        uint256 dust\n    );\n}\n\ncontract MakerPSMSampler is\n    SamplerUtils\n{\n    using LibSafeMathV06 for uint256;\n\n    /// @dev Information about which PSM module to use\n    struct MakerPsmInfo {\n        address psmAddress;\n        bytes32 ilkIdentifier;\n        address gemTokenAddress;\n    }\n\n    /// @dev Gas limit for MakerPsm calls.\n    uint256 constant private MAKER_PSM_CALL_GAS = 300e3; // 300k\n\n\n    // Maker units\n    // wad: fixed point decimal with 18 decimals (for basic quantities, e.g. balances)\n    uint256 constant private WAD = 10 ** 18;\n    // ray: fixed point decimal with 27 decimals (for precise quantites, e.g. ratios)\n    uint256 constant private RAY = 10 ** 27;\n    // rad: fixed point decimal with 45 decimals (result of integer multiplication with a wad and a ray)\n    uint256 constant private RAD = 10 ** 45;\n    // See https://github.com/makerdao/dss/blob/master/DEVELOPING.m\n\n    /// @dev Sample sell quotes from Maker PSM\n    function sampleSellsFromMakerPsm(\n        MakerPsmInfo memory psmInfo,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        IPSM psm = IPSM(psmInfo.psmAddress);\n        IVAT vat = IVAT(psm.vat());\n\n\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        if (makerToken != psm.dai() && takerToken != psm.dai()) {\n            return makerTokenAmounts;\n        }\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            uint256 buyAmount = _samplePSMSell(psmInfo, makerToken, takerToken, takerTokenAmounts[i], psm, vat);\n\n            if (buyAmount == 0) {\n                break;\n            }\n            makerTokenAmounts[i] = buyAmount;\n        }\n    }\n\n    function sampleBuysFromMakerPsm(\n        MakerPsmInfo memory psmInfo,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        IPSM psm = IPSM(psmInfo.psmAddress);\n        IVAT vat = IVAT(psm.vat());\n\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n        if (makerToken != psm.dai() && takerToken != psm.dai()) {\n            return takerTokenAmounts;\n        }\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            uint256 sellAmount = _samplePSMBuy(psmInfo, makerToken, takerToken, makerTokenAmounts[i], psm, vat);\n\n            if (sellAmount == 0) {\n                break;\n            }\n\n            takerTokenAmounts[i] = sellAmount;\n        }\n\n    }\n\n    function _samplePSMSell(MakerPsmInfo memory psmInfo, address makerToken, address takerToken, uint256 takerTokenAmount, IPSM psm, IVAT vat)\n        private\n        view\n        returns (uint256)\n    {\n        (uint256 totalDebtInWad,,, uint256 debtCeilingInRad, uint256 debtFloorInRad) = vat.ilks(psmInfo.ilkIdentifier);\n        uint256 gemTokenBaseUnit = uint256(1e6);\n\n        if (takerToken == psmInfo.gemTokenAddress) {\n            // Simulate sellGem\n            // Selling USDC to the PSM, increasing the total debt\n            // Convert USDC 6 decimals to 18 decimals [wad]\n            uint256 takerTokenAmountInWad = takerTokenAmount.safeMul(1e12);\n\n            uint256 newTotalDebtInRad = totalDebtInWad.safeAdd(takerTokenAmountInWad).safeMul(RAY);\n\n            // PSM is too full to fit\n            if (newTotalDebtInRad >= debtCeilingInRad) {\n                return 0;\n            }\n\n            uint256 feeInWad = takerTokenAmountInWad.safeMul(psm.tin()).safeDiv(WAD);\n            uint256 makerTokenAmountInWad = takerTokenAmountInWad.safeSub(feeInWad);\n\n            return makerTokenAmountInWad;\n        } else if (makerToken == psmInfo.gemTokenAddress) {\n            // Simulate buyGem\n            // Buying USDC from the PSM, decreasing the total debt\n            // Selling DAI for USDC, already in 18 decimals [wad]\n            uint256 takerTokenAmountInWad = takerTokenAmount;\n            if (takerTokenAmountInWad > totalDebtInWad) {\n                return 0;\n            }\n            uint256 newTotalDebtInRad = totalDebtInWad.safeSub(takerTokenAmountInWad).safeMul(RAY);\n\n            // PSM is empty, not enough USDC to buy from it\n            if (newTotalDebtInRad <= debtFloorInRad) {\n                return 0;\n            }\n\n            uint256 feeDivisorInWad = WAD.safeAdd(psm.tout()); // eg. 1.001 * 10 ** 18 with 0.1% tout;\n            uint256 makerTokenAmountInGemTokenBaseUnits =  takerTokenAmountInWad.safeMul(gemTokenBaseUnit).safeDiv(feeDivisorInWad);\n\n            return makerTokenAmountInGemTokenBaseUnits;\n        }\n\n        return 0;\n    }\n\n    function _samplePSMBuy(MakerPsmInfo memory psmInfo, address makerToken, address takerToken, uint256 makerTokenAmount, IPSM psm, IVAT vat)\n        private\n        view\n        returns (uint256)\n    {\n        (uint256 totalDebtInWad,,, uint256 debtCeilingInRad, uint256 debtFloorInRad) = vat.ilks(psmInfo.ilkIdentifier);\n\n        if (takerToken == psmInfo.gemTokenAddress) {\n            // Simulate sellGem\n            // Selling USDC to the PSM, increasing the total debt\n            uint256 makerTokenAmountInWad = makerTokenAmount;\n            uint256 feeDivisorInWad = WAD.safeSub(psm.tin()); // eg. 0.999 * 10 ** 18 with 0.1% tin;\n            uint256 takerTokenAmountInWad = makerTokenAmountInWad.safeMul(WAD).safeDiv(feeDivisorInWad);\n            uint256 newTotalDebtInRad = totalDebtInWad.safeAdd(takerTokenAmountInWad).safeMul(RAY);\n\n            // PSM is too full to fit\n            if (newTotalDebtInRad >= debtCeilingInRad) {\n                return 0;\n            }\n\n            uint256 takerTokenAmountInGemInGemBaseUnits = (takerTokenAmountInWad.safeDiv(1e12)).safeAdd(1); // Add 1 to deal with cut off decimals converting to lower decimals\n\n            return takerTokenAmountInGemInGemBaseUnits;\n        } else if (makerToken == psmInfo.gemTokenAddress) {\n            // Simulate buyGem\n            // Buying USDC from the PSM, decreasing the total debt\n            uint256 makerTokenAmountInWad = makerTokenAmount.safeMul(1e12);\n            uint256 feeMultiplierInWad = WAD.safeAdd(psm.tout()); // eg. 1.001 * 10 ** 18 with 0.1% tout;\n            uint256 takerTokenAmountInWad =  makerTokenAmountInWad.safeMul(feeMultiplierInWad).safeDiv(WAD);\n            if (takerTokenAmountInWad > totalDebtInWad) {\n                return 0;\n            }\n            uint256 newTotalDebtInRad = totalDebtInWad.safeSub(takerTokenAmountInWad).safeMul(RAY);\n\n            // PSM is empty, not enough USDC to buy\n            if (newTotalDebtInRad <= debtFloorInRad) {\n                return 0;\n            }\n\n\n            return takerTokenAmountInWad;\n        }\n\n        return 0;\n    }\n\n}\n",
        "./MultiBridgeSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IMultiBridge.sol\";\n\n\ncontract MultiBridgeSampler {\n\n    /// @dev Default gas limit for multibridge calls.\n    uint256 constant private DEFAULT_CALL_GAS = 400e3; // 400k\n\n    /// @dev Sample sell quotes from MultiBridge.\n    /// @param multibridge Address of the MultiBridge contract.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param intermediateToken The address of the intermediate token to\n    ///        use in an indirect route.\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromMultiBridge(\n        address multibridge,\n        address takerToken,\n        address intermediateToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        // Initialize array of maker token amounts.\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        // If no address provided, return all zeros.\n        if (multibridge == address(0)) {\n            return makerTokenAmounts;\n        }\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            (bool didSucceed, bytes memory resultData) =\n                multibridge.staticcall.gas(DEFAULT_CALL_GAS)(\n                    abi.encodeWithSelector(\n                        IMultiBridge(0).getSellQuote.selector,\n                        takerToken,\n                        intermediateToken,\n                        makerToken,\n                        takerTokenAmounts[i]\n                    ));\n            uint256 buyAmount = 0;\n            if (didSucceed) {\n                buyAmount = abi.decode(resultData, (uint256));\n            }\n            // Exit early if the amount is too high for the source to serve\n            if (buyAmount == 0) {\n                break;\n            }\n\n            makerTokenAmounts[i] = buyAmount;\n        }\n    }\n}\n",
        "./interfaces/IMultiBridge.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface IMultiBridge {\n\n    /// @dev Transfers `amount` of the ERC20 `tokenAddress` from `from` to `to`.\n    /// @param tokenAddress The address of the ERC20 token to transfer.\n    /// @param from Address to transfer asset from.\n    /// @param to Address to transfer asset to.\n    /// @param amount Amount of asset to transfer.\n    /// @param bridgeData Arbitrary asset data needed by the bridge contract.\n    /// @return success The magic bytes `0xdc1600f3` if successful.\n    function bridgeTransferFrom(\n        address tokenAddress,\n        address from,\n        address to,\n        uint256 amount,\n        bytes calldata bridgeData\n    )\n        external\n        returns (bytes4 success);\n\n    /// @dev Quotes the amount of `makerToken` that would be obtained by\n    ///      selling `sellAmount` of `takerToken`.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param intermediateToken The address of the intermediate token to\n    ///        use in an indirect route.\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param sellAmount Amount of `takerToken` to sell.\n    /// @return makerTokenAmount Amount of `makerToken` that would be obtained.\n    function getSellQuote(\n        address takerToken,\n        address intermediateToken,\n        address makerToken,\n        uint256 sellAmount\n    )\n        external\n        view\n        returns (uint256 makerTokenAmount);\n}\n",
        "./MStableSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IMStable.sol\";\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\n\n\ncontract MStableSampler is\n    SamplerUtils,\n    ApproximateBuys\n{\n    /// @dev Default gas limit for mStable calls.\n    uint256 constant private DEFAULT_CALL_GAS = 800e3; // 800k\n\n    /// @dev Sample sell quotes from the mStable contract\n    /// @param router Address of the mStable contract\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromMStable(\n        address router,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        // Initialize array of maker token amounts.\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            try\n                IMStable(router).getSwapOutput\n                    {gas: DEFAULT_CALL_GAS}\n                    (takerToken, makerToken, takerTokenAmounts[i])\n                returns (bool, string memory, uint256 amount)\n            {\n                makerTokenAmounts[i] = amount;\n                // Break early if there are 0 amounts\n                if (makerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from MStable contract\n    /// @param router Address of the mStable contract\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromMStable(\n        address router,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        return _sampleApproximateBuys(\n            ApproximateBuyQuoteOpts({\n                makerTokenData: abi.encode(makerToken, router),\n                takerTokenData: abi.encode(takerToken, router),\n                getSellQuoteCallback: _sampleSellForApproximateBuyFromMStable\n            }),\n            makerTokenAmounts\n        );\n    }\n\n    function _sampleSellForApproximateBuyFromMStable(\n        bytes memory takerTokenData,\n        bytes memory makerTokenData,\n        uint256 sellAmount\n    )\n        private\n        view\n        returns (uint256 buyAmount)\n    {\n        (address takerToken, address router) =\n            abi.decode(takerTokenData, (address, address));\n        (address makerToken) =\n            abi.decode(makerTokenData, (address));\n        try\n            this.sampleSellsFromMStable\n                (router, takerToken, makerToken, _toSingleValueArray(sellAmount))\n            returns (uint256[] memory amounts)\n        {\n            return amounts[0];\n        } catch (bytes memory) {\n            // Swallow failures, leaving all results as zero.\n            return 0;\n        }\n    }\n}\n",
        "./interfaces/IMStable.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface IMStable {\n\n    function getSwapOutput(\n        address _input,\n        address _output,\n        uint256 _quantity\n    )\n        external\n        view\n        returns (bool, string memory, uint256 output);\n}\n",
        "./MooniswapSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IMooniswap.sol\";\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\n\n\ncontract MooniswapSampler is\n    SamplerUtils,\n    ApproximateBuys\n{\n    /// @dev Gas limit for Mooniswap calls.\n    uint256 constant private MOONISWAP_CALL_GAS = 150e3; // 150k\n\n    /// @dev Sample sell quotes from Mooniswap.\n    /// @param registry Address of the Mooniswap Registry.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return pool The contract address for the pool\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromMooniswap(\n        address registry,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (IMooniswap pool, uint256[] memory makerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            uint256 buyAmount = sampleSingleSellFromMooniswapPool(\n                registry,\n                takerToken,\n                makerToken,\n                takerTokenAmounts[i]\n            );\n            makerTokenAmounts[i] = buyAmount;\n            // Break early if there are 0 amounts\n            if (makerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n\n        pool = IMooniswap(\n            IMooniswapRegistry(registry).pools(takerToken, makerToken)\n        );\n    }\n\n    function sampleSingleSellFromMooniswapPool(\n        address registry,\n        address mooniswapTakerToken,\n        address mooniswapMakerToken,\n        uint256 takerTokenAmount\n    )\n        public\n        view\n        returns (uint256)\n    {\n        // Find the pool for the pair.\n        IMooniswap pool = IMooniswap(\n            IMooniswapRegistry(registry).pools(mooniswapTakerToken, mooniswapMakerToken)\n        );\n        // If there is no pool then return early\n        if (address(pool) == address(0)) {\n            return 0;\n        }\n        uint256 poolBalance = mooniswapTakerToken == address(0)\n            ? address(pool).balance\n            : IERC20TokenV06(mooniswapTakerToken).balanceOf(address(pool));\n        // If the pool balance is smaller than the sell amount\n        // don't sample to avoid multiplication overflow in buys\n        if (poolBalance < takerTokenAmount) {\n            return 0;\n        }\n        try\n            pool.getReturn\n                {gas: MOONISWAP_CALL_GAS}\n                (mooniswapTakerToken, mooniswapMakerToken, takerTokenAmount)\n            returns (uint256 amount)\n        {\n            return amount;\n        } catch (bytes memory) {\n            // Swallow failures, leaving all results as zero.\n            return 0;\n        }\n    }\n\n    /// @dev Sample buy quotes from Mooniswap.\n    /// @param registry Address of the Mooniswap Registry.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token sell amount for each sample.\n    /// @return pool The contract address for the pool\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromMooniswap(\n        address registry,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (IMooniswap pool, uint256[] memory takerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n\n        takerTokenAmounts = _sampleApproximateBuys(\n            ApproximateBuyQuoteOpts({\n                makerTokenData: abi.encode(registry, makerToken),\n                takerTokenData: abi.encode(registry, takerToken),\n                getSellQuoteCallback: _sampleSellForApproximateBuyFromMooniswap\n            }),\n            makerTokenAmounts\n        );\n\n        pool = IMooniswap(\n            IMooniswapRegistry(registry).pools(takerToken, makerToken)\n        );\n    }\n\n    function _sampleSellForApproximateBuyFromMooniswap(\n        bytes memory takerTokenData,\n        bytes memory makerTokenData,\n        uint256 sellAmount\n    )\n        private\n        view\n        returns (uint256 buyAmount)\n    {\n        (address registry, address mooniswapTakerToken) = abi.decode(takerTokenData, (address, address));\n        (address _registry, address mooniswapMakerToken) = abi.decode(makerTokenData, (address, address));\n        return sampleSingleSellFromMooniswapPool(\n            registry,\n            mooniswapTakerToken,\n            mooniswapMakerToken,\n            sellAmount\n        );\n    }\n}\n",
        "./interfaces/IMooniswap.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface IMooniswapRegistry {\n\n    function pools(address token1, address token2) external view returns(address);\n}\n\ninterface IMooniswap {\n\n    function getReturn(\n        address fromToken,\n        address destToken,\n        uint256 amount\n    )\n        external\n        view\n        returns(uint256 returnAmount);\n}\n",
        "./NativeOrderSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibMathV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol\";\n\n\ninterface IExchange {\n\n    enum OrderStatus {\n        INVALID,\n        FILLABLE,\n        FILLED,\n        CANCELLED,\n        EXPIRED\n    }\n\n    /// @dev A standard OTC or OO limit order.\n    struct LimitOrder {\n        IERC20TokenV06 makerToken;\n        IERC20TokenV06 takerToken;\n        uint128 makerAmount;\n        uint128 takerAmount;\n        uint128 takerTokenFeeAmount;\n        address maker;\n        address taker;\n        address sender;\n        address feeRecipient;\n        bytes32 pool;\n        uint64 expiry;\n        uint256 salt;\n    }\n\n    /// @dev An RFQ limit order.\n    struct RfqOrder {\n        IERC20TokenV06 makerToken;\n        IERC20TokenV06 takerToken;\n        uint128 makerAmount;\n        uint128 takerAmount;\n        address maker;\n        address taker;\n        address txOrigin;\n        bytes32 pool;\n        uint64 expiry;\n        uint256 salt;\n    }\n\n    /// @dev Info on a limit or RFQ order.\n    struct OrderInfo {\n        bytes32 orderHash;\n        OrderStatus status;\n        uint128 takerTokenFilledAmount;\n    }\n\n    /// @dev Allowed signature types.\n    enum SignatureType {\n        ILLEGAL,\n        INVALID,\n        EIP712,\n        ETHSIGN\n    }\n\n    /// @dev Encoded EC signature.\n    struct Signature {\n        // How to validate the signature.\n        SignatureType signatureType;\n        // EC Signature data.\n        uint8 v;\n        // EC Signature data.\n        bytes32 r;\n        // EC Signature data.\n        bytes32 s;\n    }\n\n    /// @dev Get the order info for a limit order.\n    /// @param order The limit order.\n    /// @return orderInfo Info about the order.\n    function getLimitOrderInfo(LimitOrder memory order)\n        external\n        view\n        returns (OrderInfo memory orderInfo);\n\n    /// @dev Get order info, fillable amount, and signature validity for a limit order.\n    ///      Fillable amount is determined using balances and allowances of the maker.\n    /// @param order The limit order.\n    /// @param signature The order signature.\n    /// @return orderInfo Info about the order.\n    /// @return actualFillableTakerTokenAmount How much of the order is fillable\n    ///         based on maker funds, in taker tokens.\n    /// @return isSignatureValid Whether the signature is valid.\n    function getLimitOrderRelevantState(\n        LimitOrder memory order,\n        Signature calldata signature\n    )\n        external\n        view\n        returns (\n            OrderInfo memory orderInfo,\n            uint128 actualFillableTakerTokenAmount,\n            bool isSignatureValid\n        );\n}\n\ncontract NativeOrderSampler {\n    using LibSafeMathV06 for uint256;\n    using LibBytesV06 for bytes;\n\n    /// @dev Gas limit for calls to `getOrderFillableTakerAmount()`.\n    uint256 constant internal DEFAULT_CALL_GAS = 200e3; // 200k\n\n    /// @dev Queries the fillable taker asset amounts of native orders.\n    ///      Effectively ignores orders that have empty signatures or\n    ///      maker/taker asset amounts (returning 0).\n    /// @param orders Native limit orders to query.\n    /// @param orderSignatures Signatures for each respective order in `orders`.\n    /// @param exchange The V4 exchange.\n    /// @return orderFillableTakerAssetAmounts How much taker asset can be filled\n    ///         by each order in `orders`.\n    function getLimitOrderFillableTakerAssetAmounts(\n        IExchange.LimitOrder[] memory orders,\n        IExchange.Signature[] memory orderSignatures,\n        IExchange exchange\n    )\n        public\n        view\n        returns (uint256[] memory orderFillableTakerAssetAmounts)\n    {\n        orderFillableTakerAssetAmounts = new uint256[](orders.length);\n        for (uint256 i = 0; i != orders.length; i++) {\n            try\n                this.getLimitOrderFillableTakerAmount\n                    {gas: DEFAULT_CALL_GAS}\n                    (\n                       orders[i],\n                       orderSignatures[i],\n                       exchange\n                    )\n                returns (uint256 amount)\n            {\n                orderFillableTakerAssetAmounts[i] = amount;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                orderFillableTakerAssetAmounts[i] = 0;\n            }\n        }\n    }\n\n    /// @dev Queries the fillable taker asset amounts of native orders.\n    ///      Effectively ignores orders that have empty signatures or\n    /// @param orders Native orders to query.\n    /// @param orderSignatures Signatures for each respective order in `orders`.\n    /// @param exchange The V4 exchange.\n    /// @return orderFillableMakerAssetAmounts How much maker asset can be filled\n    ///         by each order in `orders`.\n    function getLimitOrderFillableMakerAssetAmounts(\n        IExchange.LimitOrder[] memory orders,\n        IExchange.Signature[] memory orderSignatures,\n        IExchange exchange\n    )\n        public\n        view\n        returns (uint256[] memory orderFillableMakerAssetAmounts)\n    {\n        orderFillableMakerAssetAmounts = getLimitOrderFillableTakerAssetAmounts(\n            orders,\n            orderSignatures,\n            exchange\n        );\n        // `orderFillableMakerAssetAmounts` now holds taker asset amounts, so\n        // convert them to maker asset amounts.\n        for (uint256 i = 0; i < orders.length; ++i) {\n            if (orderFillableMakerAssetAmounts[i] != 0) {\n                orderFillableMakerAssetAmounts[i] = LibMathV06.getPartialAmountCeil(\n                    orderFillableMakerAssetAmounts[i],\n                    orders[i].takerAmount,\n                    orders[i].makerAmount\n                );\n            }\n        }\n    }\n\n    /// @dev Get the fillable taker amount of an order, taking into account\n    ///      order state, maker fees, and maker balances.\n    function getLimitOrderFillableTakerAmount(\n        IExchange.LimitOrder memory order,\n        IExchange.Signature memory signature,\n        IExchange exchange\n    )\n        virtual\n        public\n        view\n        returns (uint256 fillableTakerAmount)\n    {\n        if (signature.signatureType == IExchange.SignatureType.ILLEGAL ||\n            signature.signatureType == IExchange.SignatureType.INVALID ||\n            order.makerAmount == 0 ||\n            order.takerAmount == 0)\n        {\n            return 0;\n        }\n\n        (\n            IExchange.OrderInfo memory orderInfo,\n            uint128 remainingFillableTakerAmount,\n            bool isSignatureValid\n        ) = exchange.getLimitOrderRelevantState(order, signature);\n\n        if (\n              orderInfo.status != IExchange.OrderStatus.FILLABLE ||\n              !isSignatureValid ||\n              order.makerToken == IERC20TokenV06(0)\n            ) {\n            return 0;\n        }\n\n        fillableTakerAmount = uint256(remainingFillableTakerAmount);\n    }\n}\n",
        "./ShellSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./ApproximateBuys.sol\";\nimport \"./interfaces/IShell.sol\";\nimport \"./SamplerUtils.sol\";\n\n\ncontract ShellSampler is\n    SamplerUtils,\n    ApproximateBuys\n{\n\n    struct ShellInfo {\n        address poolAddress;\n    }\n\n    /// @dev Default gas limit for Shell calls.\n    uint256 constant private DEFAULT_CALL_GAS = 300e3; // 300k\n\n    /// @dev Sample sell quotes from the Shell pool contract\n    /// @param pool Address of the Shell pool contract\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromShell(\n        address pool,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        // Initialize array of maker token amounts.\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            try\n                IShell(pool).viewOriginSwap\n                    {gas: DEFAULT_CALL_GAS}\n                    (takerToken, makerToken, takerTokenAmounts[i])\n                returns (uint256 amount)\n            {\n                makerTokenAmounts[i] = amount;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from Shell pool contract\n    /// @param pool Address of the Shell pool contract\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromShell(\n        address pool,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        return _sampleApproximateBuys(\n            ApproximateBuyQuoteOpts({\n                makerTokenData: abi.encode(makerToken, pool),\n                takerTokenData: abi.encode(takerToken, pool),\n                getSellQuoteCallback: _sampleSellForApproximateBuyFromShell\n            }),\n            makerTokenAmounts\n        );\n    }\n\n    function _sampleSellForApproximateBuyFromShell(\n        bytes memory takerTokenData,\n        bytes memory makerTokenData,\n        uint256 sellAmount\n    )\n        private\n        view\n        returns (uint256 buyAmount)\n    {\n        (address takerToken, address pool) = abi.decode(takerTokenData, (address, address));\n        (address makerToken) = abi.decode(makerTokenData, (address));\n\n        try\n            this.sampleSellsFromShell\n                (pool, takerToken, makerToken, _toSingleValueArray(sellAmount))\n            returns (uint256[] memory amounts)\n        {\n            return amounts[0];\n        } catch (bytes memory) {\n            // Swallow failures, leaving all results as zero.\n            return 0;\n        }\n    }\n}\n",
        "./interfaces/IShell.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface IShell {\n\n    function viewOriginSwap (\n        address from,\n        address to,\n        uint256 fromAmount\n    )\n        external\n        view\n        returns (uint256 toAmount);\n\n    function viewTargetSwap (\n        address from,\n        address to,\n        uint256 toAmount\n    )\n        external\n        view\n        returns (uint256 fromAmount);\n}\n\n",
        "./SmoothySampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\n// import \"./interfaces/ISmoothy.sol\";\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\nimport \"./interfaces/ISmoothy.sol\";\n\ncontract SmoothySampler is\n    SamplerUtils,\n    ApproximateBuys\n{\n    /// @dev Information for sampling from smoothy sources.\n    struct SmoothyInfo {\n        address poolAddress;\n        bytes4 sellQuoteFunctionSelector;\n        bytes4 buyQuoteFunctionSelector;\n    }\n\n    /// @dev Base gas limit for Smoothy calls.\n    uint256 constant private SMOOTHY_CALL_GAS = 600e3;\n\n    /// @dev Sample sell quotes from Smoothy.\n    /// @param smoothyInfo Smoothy information specific to this token pair.\n    /// @param fromTokenIdx Index of the taker token (what to sell).\n    /// @param toTokenIdx Index of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromSmoothy(\n        SmoothyInfo memory smoothyInfo,\n        int128 fromTokenIdx,\n        int128 toTokenIdx,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        // Basically a Curve fork\n\n        // Smoothy only keep a percentage of its tokens available in reserve\n        uint256 poolReserveMakerAmount = ISmoothy(smoothyInfo.poolAddress).getBalance(uint256(toTokenIdx)) -\n                                         ISmoothy(smoothyInfo.poolAddress)._yBalances(uint256(toTokenIdx));\n        (, , , uint256 decimals) = ISmoothy(smoothyInfo.poolAddress).getTokenStats(uint256(toTokenIdx));\n        poolReserveMakerAmount = poolReserveMakerAmount/(10**(18-decimals));\n\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            (bool didSucceed, bytes memory resultData) =\n                smoothyInfo.poolAddress.staticcall.gas(SMOOTHY_CALL_GAS)(\n                    abi.encodeWithSelector(\n                        smoothyInfo.sellQuoteFunctionSelector,\n                        fromTokenIdx,\n                        toTokenIdx,\n                        takerTokenAmounts[i]\n                    ));\n            uint256 buyAmount = 0;\n            if (didSucceed) {\n                buyAmount = abi.decode(resultData, (uint256));\n            }\n\n            // Make sure the quoted buyAmount is available in the pool reserve\n            if (buyAmount >= poolReserveMakerAmount) {\n                // Assign pool reserve amount for all higher samples to break early\n                for (uint256 j = i; j < numSamples; j++) {\n                    makerTokenAmounts[j] = poolReserveMakerAmount;\n                }\n                break;\n            } else {\n                makerTokenAmounts[i] = buyAmount;\n            }\n\n            // Break early if there are 0 amounts\n            if (makerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from Smoothy.\n    /// @param smoothyInfo Smoothy information specific to this token pair.\n    /// @param fromTokenIdx Index of the taker token (what to sell).\n    /// @param toTokenIdx Index of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromSmoothy(\n        SmoothyInfo memory smoothyInfo,\n        int128 fromTokenIdx,\n        int128 toTokenIdx,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        // Buys not supported so approximate it.\n        return _sampleApproximateBuys(\n            ApproximateBuyQuoteOpts({\n                makerTokenData: abi.encode(toTokenIdx, smoothyInfo),\n                takerTokenData: abi.encode(fromTokenIdx, smoothyInfo),\n                getSellQuoteCallback: _sampleSellForApproximateBuyFromSmoothy\n            }),\n            makerTokenAmounts\n        );\n    }\n\n    function _sampleSellForApproximateBuyFromSmoothy(\n        bytes memory takerTokenData,\n        bytes memory makerTokenData,\n        uint256 sellAmount\n    )\n        private\n        view\n        returns (uint256 buyAmount)\n    {\n        (int128 takerTokenIdx, SmoothyInfo memory smoothyInfo) =\n            abi.decode(takerTokenData, (int128, SmoothyInfo));\n        (int128 makerTokenIdx) =\n            abi.decode(makerTokenData, (int128));\n        (bool success, bytes memory resultData) =\n            address(this).staticcall(abi.encodeWithSelector(\n                this.sampleSellsFromSmoothy.selector,\n                smoothyInfo,\n                takerTokenIdx,\n                makerTokenIdx,\n                _toSingleValueArray(sellAmount)\n            ));\n        if (!success) {\n            return 0;\n        }\n        // solhint-disable-next-line indent\n        return abi.decode(resultData, (uint256[]))[0];\n    }\n}\n",
        "./interfaces/ISmoothy.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface ISmoothy {\n\n    function getBalance (\n        uint256 tid\n    )\n        external\n        view\n        returns (uint256 balance);\n\n    function _yBalances (\n        uint256 tid\n    )\n        external\n        view\n        returns (uint256 balance);\n\n    function getTokenStats (\n        uint256 tid\n    )\n        external\n        view\n        returns (uint256 softWeight, uint256 hardWeight, uint256 balance, uint256 decimals);\n}\n",
        "./TwoHopSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol\";\n\n\ncontract TwoHopSampler {\n    using LibBytesV06 for bytes;\n\n    struct HopInfo {\n        uint256 sourceIndex;\n        bytes returnData;\n    }\n\n    function sampleTwoHopSell(\n        bytes[] memory firstHopCalls,\n        bytes[] memory secondHopCalls,\n        uint256 sellAmount\n    )\n        public\n        returns (\n            HopInfo memory firstHop,\n            HopInfo memory secondHop,\n            uint256 buyAmount\n        )\n    {\n        uint256 intermediateAssetAmount = 0;\n        for (uint256 i = 0; i != firstHopCalls.length; ++i) {\n            firstHopCalls[i].writeUint256(firstHopCalls[i].length - 32, sellAmount);\n            (bool didSucceed, bytes memory returnData) = address(this).call(firstHopCalls[i]);\n            if (didSucceed) {\n                uint256 amount = returnData.readUint256(returnData.length - 32);\n                if (amount > intermediateAssetAmount) {\n                    intermediateAssetAmount = amount;\n                    firstHop.sourceIndex = i;\n                    firstHop.returnData = returnData;\n                }\n            }\n        }\n        if (intermediateAssetAmount == 0) {\n            return (firstHop, secondHop, buyAmount);\n        }\n        for (uint256 j = 0; j != secondHopCalls.length; ++j) {\n            secondHopCalls[j].writeUint256(secondHopCalls[j].length - 32, intermediateAssetAmount);\n            (bool didSucceed, bytes memory returnData) = address(this).call(secondHopCalls[j]);\n            if (didSucceed) {\n                uint256 amount = returnData.readUint256(returnData.length - 32);\n                if (amount > buyAmount) {\n                    buyAmount = amount;\n                    secondHop.sourceIndex = j;\n                    secondHop.returnData = returnData;\n                }\n            }\n        }\n    }\n\n    function sampleTwoHopBuy(\n        bytes[] memory firstHopCalls,\n        bytes[] memory secondHopCalls,\n        uint256 buyAmount\n    )\n        public\n        returns (\n            HopInfo memory firstHop,\n            HopInfo memory secondHop,\n            uint256 sellAmount\n        )\n    {\n        sellAmount = uint256(-1);\n        uint256 intermediateAssetAmount = uint256(-1);\n        for (uint256 j = 0; j != secondHopCalls.length; ++j) {\n            secondHopCalls[j].writeUint256(secondHopCalls[j].length - 32, buyAmount);\n            (bool didSucceed, bytes memory returnData) = address(this).call(secondHopCalls[j]);\n            if (didSucceed) {\n                uint256 amount = returnData.readUint256(returnData.length - 32);\n                if (\n                    amount > 0 &&\n                    amount < intermediateAssetAmount\n                ) {\n                    intermediateAssetAmount = amount;\n                    secondHop.sourceIndex = j;\n                    secondHop.returnData = returnData;\n                }\n            }\n        }\n        if (intermediateAssetAmount == uint256(-1)) {\n            return (firstHop, secondHop, sellAmount);\n        }\n        for (uint256 i = 0; i != firstHopCalls.length; ++i) {\n            firstHopCalls[i].writeUint256(firstHopCalls[i].length - 32, intermediateAssetAmount);\n            (bool didSucceed, bytes memory returnData) = address(this).call(firstHopCalls[i]);\n            if (didSucceed) {\n                uint256 amount = returnData.readUint256(returnData.length - 32);\n                if (\n                    amount > 0 &&\n                    amount < sellAmount\n                ) {\n                    sellAmount = amount;\n                    firstHop.sourceIndex = i;\n                    firstHop.returnData = returnData;\n                }\n            }\n        }\n    }\n}\n",
        "./UniswapSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IUniswapExchangeQuotes.sol\";\nimport \"./SamplerUtils.sol\";\n\n\ninterface IUniswapExchangeFactory {\n\n    /// @dev Get the exchange for a token.\n    /// @param tokenAddress The address of the token contract.\n    function getExchange(address tokenAddress)\n        external\n        view\n        returns (address);\n}\n\n\ncontract UniswapSampler is\n    SamplerUtils\n{\n    /// @dev Gas limit for Uniswap calls.\n    uint256 constant private UNISWAP_CALL_GAS = 150e3; // 150k\n\n    /// @dev Sample sell quotes from Uniswap.\n    /// @param router Address of the Uniswap Router\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromUniswap(\n        address router,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        IUniswapExchangeQuotes takerTokenExchange = takerToken == address(0) ?\n            IUniswapExchangeQuotes(0) : _getUniswapExchange(router, takerToken);\n        IUniswapExchangeQuotes makerTokenExchange = makerToken == address(0) ?\n            IUniswapExchangeQuotes(0) : _getUniswapExchange(router, makerToken);\n        for (uint256 i = 0; i < numSamples; i++) {\n            bool didSucceed = true;\n            if (makerToken == address(0)) {\n                (makerTokenAmounts[i], didSucceed) = _callUniswapExchangePriceFunction(\n                    address(takerTokenExchange),\n                    takerTokenExchange.getTokenToEthInputPrice.selector,\n                    takerTokenAmounts[i]\n                );\n            } else if (takerToken == address(0)) {\n                (makerTokenAmounts[i], didSucceed) = _callUniswapExchangePriceFunction(\n                    address(makerTokenExchange),\n                    makerTokenExchange.getEthToTokenInputPrice.selector,\n                    takerTokenAmounts[i]\n                );\n            } else {\n                uint256 ethBought;\n                (ethBought, didSucceed) = _callUniswapExchangePriceFunction(\n                    address(takerTokenExchange),\n                    takerTokenExchange.getTokenToEthInputPrice.selector,\n                    takerTokenAmounts[i]\n                );\n                if (ethBought != 0) {\n                    (makerTokenAmounts[i], didSucceed) = _callUniswapExchangePriceFunction(\n                        address(makerTokenExchange),\n                        makerTokenExchange.getEthToTokenInputPrice.selector,\n                        ethBought\n                    );\n                } else {\n                    makerTokenAmounts[i] = 0;\n                }\n            }\n            // Break early if amounts are 0\n            if (!didSucceed || makerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from Uniswap.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token sell amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromUniswap(\n        address router,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n\n        IUniswapExchangeQuotes takerTokenExchange = takerToken == address(0) ?\n            IUniswapExchangeQuotes(0) : _getUniswapExchange(router, takerToken);\n        IUniswapExchangeQuotes makerTokenExchange = makerToken == address(0) ?\n            IUniswapExchangeQuotes(0) : _getUniswapExchange(router, makerToken);\n        for (uint256 i = 0; i < numSamples; i++) {\n            bool didSucceed = true;\n            if (makerToken == address(0)) {\n                (takerTokenAmounts[i], didSucceed) = _callUniswapExchangePriceFunction(\n                    address(takerTokenExchange),\n                    takerTokenExchange.getTokenToEthOutputPrice.selector,\n                    makerTokenAmounts[i]\n                );\n            } else if (takerToken == address(0)) {\n                (takerTokenAmounts[i], didSucceed) = _callUniswapExchangePriceFunction(\n                    address(makerTokenExchange),\n                    makerTokenExchange.getEthToTokenOutputPrice.selector,\n                    makerTokenAmounts[i]\n                );\n            } else {\n                uint256 ethSold;\n                (ethSold, didSucceed) = _callUniswapExchangePriceFunction(\n                    address(makerTokenExchange),\n                    makerTokenExchange.getEthToTokenOutputPrice.selector,\n                    makerTokenAmounts[i]\n                );\n                if (ethSold != 0) {\n                    (takerTokenAmounts[i], didSucceed) = _callUniswapExchangePriceFunction(\n                        address(takerTokenExchange),\n                        takerTokenExchange.getTokenToEthOutputPrice.selector,\n                        ethSold\n                    );\n                } else {\n                    takerTokenAmounts[i] = 0;\n                }\n            }\n            // Break early if amounts are 0\n            if (!didSucceed || takerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n    }\n\n    /// @dev Gracefully calls a Uniswap pricing function.\n    /// @param uniswapExchangeAddress Address of an `IUniswapExchangeQuotes` exchange.\n    /// @param functionSelector Selector of the target function.\n    /// @param inputAmount Quantity parameter particular to the pricing function.\n    /// @return outputAmount The returned amount from the function call. Will be\n    ///         zero if the call fails or if `uniswapExchangeAddress` is zero.\n    function _callUniswapExchangePriceFunction(\n        address uniswapExchangeAddress,\n        bytes4 functionSelector,\n        uint256 inputAmount\n    )\n        private\n        view\n        returns (uint256 outputAmount, bool didSucceed)\n    {\n        if (uniswapExchangeAddress == address(0)) {\n            return (outputAmount, didSucceed);\n        }\n        bytes memory resultData;\n        (didSucceed, resultData) =\n            uniswapExchangeAddress.staticcall.gas(UNISWAP_CALL_GAS)(\n                abi.encodeWithSelector(\n                    functionSelector,\n                    inputAmount\n                ));\n        if (didSucceed) {\n            outputAmount = abi.decode(resultData, (uint256));\n        }\n    }\n\n    /// @dev Retrive an existing Uniswap exchange contract.\n    ///      Throws if the exchange does not exist.\n    /// @param router Address of the Uniswap router.\n    /// @param tokenAddress Address of the token contract.\n    /// @return exchange `IUniswapExchangeQuotes` for the token.\n    function _getUniswapExchange(address router, address tokenAddress)\n        private\n        view\n        returns (IUniswapExchangeQuotes exchange)\n    {\n        exchange = IUniswapExchangeQuotes(\n            address(IUniswapExchangeFactory(router)\n            .getExchange(tokenAddress))\n        );\n    }\n}\n",
        "./interfaces/IUniswapExchangeQuotes.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface IUniswapExchangeQuotes {\n\n    function getEthToTokenInputPrice(\n        uint256 ethSold\n    )\n        external\n        view\n        returns (uint256 tokensBought);\n\n    function getEthToTokenOutputPrice(\n        uint256 tokensBought\n    )\n        external\n        view\n        returns (uint256 ethSold);\n\n    function getTokenToEthInputPrice(\n        uint256 tokensSold\n    )\n        external\n        view\n        returns (uint256 ethBought);\n\n    function getTokenToEthOutputPrice(\n        uint256 ethBought\n    )\n        external\n        view\n        returns (uint256 tokensSold);\n}\n",
        "./UniswapV2Sampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IUniswapV2Router01.sol\";\n\n\ncontract UniswapV2Sampler\n{\n    /// @dev Gas limit for UniswapV2 calls.\n    uint256 constant private UNISWAPV2_CALL_GAS = 150e3; // 150k\n\n    /// @dev Sample sell quotes from UniswapV2.\n    /// @param router Router to look up tokens and amounts\n    /// @param path Token route. Should be takerToken -> makerToken\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromUniswapV2(\n        address router,\n        address[] memory path,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            try\n                IUniswapV2Router01(router).getAmountsOut\n                    {gas: UNISWAPV2_CALL_GAS}\n                    (takerTokenAmounts[i], path)\n                returns (uint256[] memory amounts)\n            {\n                makerTokenAmounts[i] = amounts[path.length - 1];\n                // Break early if there are 0 amounts\n                if (makerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from UniswapV2.\n    /// @param router Router to look up tokens and amounts\n    /// @param path Token route. Should be takerToken -> makerToken.\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromUniswapV2(\n        address router,\n        address[] memory path,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            try\n                IUniswapV2Router01(router).getAmountsIn\n                    {gas: UNISWAPV2_CALL_GAS}\n                    (makerTokenAmounts[i], path)\n                returns (uint256[] memory amounts)\n            {\n                takerTokenAmounts[i] = amounts[0];\n                // Break early if there are 0 amounts\n                if (takerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n}\n",
        "./interfaces/IUniswapV2Router01.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface IUniswapV2Router01 {\n\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts);\n\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts);\n}\n",
        "./UniswapV3Sampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\n\ninterface IUniswapV3Quoter {\n    function factory()\n        external\n        view\n        returns (IUniswapV3Factory factory);\n    function quoteExactInput(bytes memory path, uint256 amountIn)\n        external\n        returns (uint256 amountOut);\n    function quoteExactOutput(bytes memory path, uint256 amountOut)\n        external\n        returns (uint256 amountIn);\n}\n\ninterface IUniswapV3Factory {\n    function getPool(IERC20TokenV06 a, IERC20TokenV06 b, uint24 fee)\n        external\n        view\n        returns (IUniswapV3Pool pool);\n}\n\ninterface IUniswapV3Pool {\n    function token0() external view returns (IERC20TokenV06);\n    function token1() external view returns (IERC20TokenV06);\n    function fee() external view returns (uint24);\n}\n\ncontract UniswapV3Sampler\n{\n    /// @dev Gas limit for UniswapV3 calls. This is 100% a guess.\n    uint256 constant private QUOTE_GAS = 300e3;\n\n    /// @dev Sample sell quotes from UniswapV3.\n    /// @param quoter UniswapV3 Quoter contract.\n    /// @param path Token route. Should be takerToken -> makerToken\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return uniswapPaths The encoded uniswap path for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromUniswapV3(\n        IUniswapV3Quoter quoter,\n        IERC20TokenV06[] memory path,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        returns (\n            bytes[] memory uniswapPaths,\n            uint256[] memory makerTokenAmounts\n        )\n    {\n        IUniswapV3Pool[][] memory poolPaths =\n            _getValidPoolPaths(quoter.factory(), path, 0);\n\n        makerTokenAmounts = new uint256[](takerTokenAmounts.length);\n        uniswapPaths = new bytes[](takerTokenAmounts.length);\n\n        for (uint256 i = 0; i < takerTokenAmounts.length; ++i) {\n            // Pick the best result from all the paths.\n            bytes memory topUniswapPath;\n            uint256 topBuyAmount = 0;\n            for (uint256 j = 0; j < poolPaths.length; ++j) {\n                bytes memory uniswapPath = _toUniswapPath(path, poolPaths[j]);\n                try\n                    quoter.quoteExactInput\n                        { gas: QUOTE_GAS }\n                        (uniswapPath, takerTokenAmounts[i])\n                        returns (uint256 buyAmount)\n                {\n                    if (topBuyAmount <= buyAmount) {\n                        topBuyAmount = buyAmount;\n                        topUniswapPath = uniswapPath;\n                    }\n                } catch { }\n            }\n            // Break early if we can't complete the buys.\n            if (topBuyAmount == 0) {\n                break;\n            }\n            makerTokenAmounts[i] = topBuyAmount;\n            uniswapPaths[i] = topUniswapPath;\n        }\n    }\n\n    /// @dev Sample buy quotes from UniswapV3.\n    /// @param quoter UniswapV3 Quoter contract.\n    /// @param path Token route. Should be takerToken -> makerToken.\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return uniswapPaths The encoded uniswap path for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromUniswapV3(\n        IUniswapV3Quoter quoter,\n        IERC20TokenV06[] memory path,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        returns (\n            bytes[] memory uniswapPaths,\n            uint256[] memory takerTokenAmounts\n        )\n    {\n        IUniswapV3Pool[][] memory poolPaths =\n            _getValidPoolPaths(quoter.factory(), path, 0);\n        IERC20TokenV06[] memory reversedPath = _reverseTokenPath(path);\n\n        takerTokenAmounts = new uint256[](makerTokenAmounts.length);\n        uniswapPaths = new bytes[](makerTokenAmounts.length);\n\n        for (uint256 i = 0; i < makerTokenAmounts.length; ++i) {\n            // Pick the best result from all the paths.\n            bytes memory topUniswapPath;\n            uint256 topSellAmount = 0;\n            for (uint256 j = 0; j < poolPaths.length; ++j) {\n                // quoter requires path to be reversed for buys.\n                bytes memory uniswapPath = _toUniswapPath(\n                    reversedPath,\n                    _reversePoolPath(poolPaths[j])\n                );\n                try\n                    quoter.quoteExactOutput\n                        { gas: QUOTE_GAS }\n                        (uniswapPath, makerTokenAmounts[i])\n                        returns (uint256 sellAmount)\n                {\n                    if (topSellAmount == 0 || topSellAmount >= sellAmount) {\n                        topSellAmount = sellAmount;\n                        // But the output path should still be encoded for sells.\n                        topUniswapPath = _toUniswapPath(path, poolPaths[j]);\n                    }\n                } catch {}\n            }\n            // Break early if we can't complete the buys.\n            if (topSellAmount == 0) {\n                break;\n            }\n            takerTokenAmounts[i] = topSellAmount;\n            uniswapPaths[i] = topUniswapPath;\n        }\n    }\n\n    function _getValidPoolPaths(\n        IUniswapV3Factory factory,\n        IERC20TokenV06[] memory tokenPath,\n        uint256 startIndex\n    )\n        private\n        view\n        returns (IUniswapV3Pool[][] memory poolPaths)\n    {\n        require(\n            tokenPath.length - startIndex >= 2,\n            \"UniswapV3Sampler/tokenPath too short\"\n        );\n        uint24[3] memory validPoolFees = [\n            // The launch pool fees. Could get hairier if they add more.\n            uint24(0.0005e6),\n            uint24(0.003e6),\n            uint24(0.01e6)\n        ];\n        IUniswapV3Pool[] memory validPools =\n            new IUniswapV3Pool[](validPoolFees.length);\n        uint256 numValidPools = 0;\n        {\n            IERC20TokenV06 inputToken = tokenPath[startIndex];\n            IERC20TokenV06 outputToken = tokenPath[startIndex + 1];\n            for (uint256 i = 0; i < validPoolFees.length; ++i) {\n                IUniswapV3Pool pool =\n                factory.getPool(inputToken, outputToken, validPoolFees[i]);\n                if (_isValidPool(pool)) {\n                    validPools[numValidPools++] = pool;\n                }\n            }\n        }\n        if (numValidPools == 0) {\n            // No valid pools for this hop.\n            return poolPaths;\n        }\n        if (startIndex + 2 == tokenPath.length) {\n            // End of path.\n            poolPaths = new IUniswapV3Pool[][](numValidPools);\n            for (uint256 i = 0; i < numValidPools; ++i) {\n                poolPaths[i] = new IUniswapV3Pool[](1);\n                poolPaths[i][0] = validPools[i];\n            }\n            return poolPaths;\n        }\n        // Get paths for subsequent hops.\n        IUniswapV3Pool[][] memory subsequentPoolPaths =\n            _getValidPoolPaths(factory, tokenPath, startIndex + 1);\n        if (subsequentPoolPaths.length == 0) {\n            // Could not complete the path.\n            return poolPaths;\n        }\n        // Combine our pools with the next hop paths.\n        poolPaths = new IUniswapV3Pool[][](\n            numValidPools * subsequentPoolPaths.length\n        );\n        for (uint256 i = 0; i < numValidPools; ++i) {\n            for (uint256 j = 0; j < subsequentPoolPaths.length; ++j) {\n                uint256 o = i * subsequentPoolPaths.length + j;\n                // Prepend pool to the subsequent path.\n                poolPaths[o] =\n                    new IUniswapV3Pool[](1 + subsequentPoolPaths[j].length);\n                poolPaths[o][0] = validPools[i];\n                for (uint256 k = 0; k < subsequentPoolPaths[j].length; ++k) {\n                    poolPaths[o][1 + k] = subsequentPoolPaths[j][k];\n                }\n            }\n        }\n        return poolPaths;\n    }\n\n    function _reverseTokenPath(IERC20TokenV06[] memory tokenPath)\n        private\n        returns (IERC20TokenV06[] memory reversed)\n    {\n        reversed = new IERC20TokenV06[](tokenPath.length);\n        for (uint256 i = 0; i < tokenPath.length; ++i) {\n            reversed[i] = tokenPath[tokenPath.length - i - 1];\n        }\n    }\n\n    function _reversePoolPath(IUniswapV3Pool[] memory poolPath)\n        private\n        returns (IUniswapV3Pool[] memory reversed)\n    {\n        reversed = new IUniswapV3Pool[](poolPath.length);\n        for (uint256 i = 0; i < poolPath.length; ++i) {\n            reversed[i] = poolPath[poolPath.length - i - 1];\n        }\n    }\n\n    function _isValidPool(IUniswapV3Pool pool)\n        private\n        view\n        returns (bool isValid)\n    {\n        // Check if it has been deployed.\n        {\n            uint256 codeSize;\n            assembly {\n                codeSize := extcodesize(pool)\n            }\n            if (codeSize == 0) {\n                return false;\n            }\n        }\n        // Must have a balance of both tokens.\n        if (pool.token0().balanceOf(address(pool)) == 0) {\n            return false;\n        }\n        if (pool.token1().balanceOf(address(pool)) == 0) {\n            return false;\n        }\n        return true;\n    }\n\n    function _toUniswapPath(\n        IERC20TokenV06[] memory tokenPath,\n        IUniswapV3Pool[] memory poolPath\n    )\n        private\n        view\n        returns (bytes memory uniswapPath)\n    {\n        require(\n            tokenPath.length >= 2 && tokenPath.length == poolPath.length + 1,\n            \"UniswapV3Sampler/invalid path lengths\"\n        );\n        // Uniswap paths are tightly packed as:\n        // [token0, token0token1PairFee, token1, token1Token2PairFee, token2, ...]\n        uniswapPath = new bytes(tokenPath.length * 20 + poolPath.length * 3);\n        uint256 o;\n        assembly { o := add(uniswapPath, 32) }\n        for (uint256 i = 0; i < tokenPath.length; ++i) {\n            if (i > 0) {\n                uint24 poolFee = poolPath[i - 1].fee();\n                assembly {\n                    mstore(o, shl(232, poolFee))\n                    o := add(o, 3)\n                }\n            }\n            IERC20TokenV06 token = tokenPath[i];\n            assembly {\n                mstore(o, shl(96, token))\n                o := add(o, 20)\n            }\n        }\n    }\n}\n",
        "./UtilitySampler.sol": "\n// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\n\ncontract UtilitySampler {\n\n    using LibERC20TokenV06 for IERC20TokenV06;\n\n    IERC20TokenV06 private immutable UTILITY_ETH_ADDRESS = IERC20TokenV06(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\n\n    function getTokenDecimals(IERC20TokenV06[] memory tokens)\n        public\n        view\n        returns (uint256[] memory decimals)\n    {\n        decimals = new uint256[](tokens.length);\n        for (uint256 i = 0; i != tokens.length; i++) {\n            decimals[i] = tokens[i] == UTILITY_ETH_ADDRESS\n                ? 18\n                : tokens[i].compatDecimals();\n        }\n    }\n\n    function getBalanceOf(IERC20TokenV06[] memory tokens, address account)\n        public\n        view\n        returns (uint256[] memory balances)\n    {\n        balances = new uint256[](tokens.length);\n        for (uint256 i = 0; i != tokens.length; i++) {\n            balances[i] = tokens[i] == UTILITY_ETH_ADDRESS\n                ? account.balance\n                : tokens[i].compatBalanceOf(account);\n        }\n    }\n\n    function getAllowanceOf(IERC20TokenV06[] memory tokens, address account, address spender)\n        public\n        view\n        returns (uint256[] memory allowances)\n    {\n        allowances = new uint256[](tokens.length);\n        for (uint256 i = 0; i != tokens.length; i++) {\n            allowances[i] = tokens[i] == UTILITY_ETH_ADDRESS\n                ? 0\n                : tokens[i].compatAllowance(account, spender);\n        }\n    }\n\n    function isContract(address account)\n        public\n        view\n        returns (bool)\n    {\n        uint256 size;\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n}"
    },
    "compiler": {
        "name": "solc",
        "version": "0.6.12+commit.27d51765",
        "settings": {
            "remappings": [
                "@0x/contracts-utils=/Users/danielpyrathon/Desktop/Projects/protocol/packages/asset-swapper/node_modules/@0x/contracts-utils",
                "@0x/contracts-erc20=/Users/danielpyrathon/Desktop/Projects/protocol/packages/asset-swapper/node_modules/@0x/contracts-erc20",
                "@0x/contracts-zero-ex=/Users/danielpyrathon/Desktop/Projects/protocol/packages/asset-swapper/node_modules/@0x/contracts-zero-ex"
            ],
            "optimizer": {
                "enabled": true,
                "runs": 200,
                "details": {
                    "yul": true,
                    "deduplicate": true
                }
            },
            "outputSelection": {
                "*": {
                    "*": [
                        "abi",
                        "devdoc",
                        "evm.bytecode.object",
                        "evm.bytecode.sourceMap",
                        "evm.deployedBytecode.object",
                        "evm.deployedBytecode.sourceMap"
                    ]
                }
            },
            "evmVersion": "istanbul"
        }
    },
    "chains": {}
}
