{
    "schemaVersion": "2.0.0",
    "contractName": "DexForwarderBridge",
    "compilerOutput": {
        "abi": [
            {
                "anonymous": false,
                "inputs": [
                    {
                        "indexed": false,
                        "internalType": "address",
                        "name": "inputToken",
                        "type": "address"
                    },
                    {
                        "indexed": false,
                        "internalType": "address",
                        "name": "outputToken",
                        "type": "address"
                    },
                    {
                        "indexed": false,
                        "internalType": "uint256",
                        "name": "inputTokenAmount",
                        "type": "uint256"
                    },
                    {
                        "indexed": false,
                        "internalType": "uint256",
                        "name": "outputTokenAmount",
                        "type": "uint256"
                    },
                    {
                        "indexed": false,
                        "internalType": "address",
                        "name": "from",
                        "type": "address"
                    },
                    {
                        "indexed": false,
                        "internalType": "address",
                        "name": "to",
                        "type": "address"
                    }
                ],
                "name": "ERC20BridgeTransfer",
                "type": "event"
            },
            {
                "constant": false,
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "outputToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "to",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256",
                        "name": "",
                        "type": "uint256"
                    },
                    {
                        "internalType": "bytes",
                        "name": "bridgeData",
                        "type": "bytes"
                    }
                ],
                "name": "bridgeTransferFrom",
                "outputs": [
                    {
                        "internalType": "bytes4",
                        "name": "success",
                        "type": "bytes4"
                    }
                ],
                "payable": false,
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "constant": false,
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "bridge",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "to",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "inputToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "outputToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256",
                        "name": "inputTokenAmount",
                        "type": "uint256"
                    },
                    {
                        "internalType": "uint256",
                        "name": "outputTokenAmount",
                        "type": "uint256"
                    },
                    {
                        "internalType": "bytes",
                        "name": "bridgeData",
                        "type": "bytes"
                    }
                ],
                "name": "executeBridgeCall",
                "outputs": [],
                "payable": false,
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "internalType": "bytes32",
                        "name": "",
                        "type": "bytes32"
                    },
                    {
                        "internalType": "bytes",
                        "name": "",
                        "type": "bytes"
                    }
                ],
                "name": "isValidSignature",
                "outputs": [
                    {
                        "internalType": "bytes4",
                        "name": "magicValue",
                        "type": "bytes4"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            }
        ],
        "devdoc": {
            "methods": {
                "bridgeTransferFrom(address,address,address,uint256,bytes)": {
                    "details": "Spends this contract's entire balance of input tokens by forwarding them to other bridges. Reverts if the entire balance is not spent.",
                    "params": {
                        "bridgeData": "The abi-encoded input token address.",
                        "outputToken": "The token being bought.",
                        "to": "The recipient of the bought tokens."
                    },
                    "return": "success The magic bytes if successful."
                },
                "executeBridgeCall(address,address,address,address,uint256,uint256,bytes)": {
                    "params": {
                        "bridge": "The bridge contract.",
                        "inputToken": "The input token.",
                        "inputTokenAmount": "The amount of input tokens to transfer to `bridge`.",
                        "outputToken": "The output token.",
                        "outputTokenAmount": "The amount of expected output tokens to be sent        to `to` by `bridge`.",
                        "to": "The recipient of `outputToken` tokens."
                    }
                },
                "isValidSignature(bytes32,bytes)": {
                    "details": "`SignatureType.Wallet` callback, so that this bridge can be the maker      and sign for itself in orders. Always succeeds.",
                    "return": "magicValue Magic success bytes, always."
                }
            }
        },
        "evm": {
            "bytecode": {
                "linkReferences": {},
                "object": "0x608060405234801561001057600080fd5b5061131a806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80631626ba7e14610046578063216b5fc11461006f578063c2df82e614610084575b600080fd5b610059610054366004610f87565b610097565b604051610066919061116e565b60405180910390f35b61008261007d366004610e65565b6100bf565b005b610059610092366004610f04565b6103fe565b7fb0671381000000000000000000000000000000000000000000000000000000009392505050565b333014610101576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100f8906111cb565b60405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff881630141561012457600080fd5b6040517f70a0823100000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff8716906370a0823190610179908b90600401611005565b60206040518083038186803b15801561019157600080fd5b505afa1580156101a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506101c99190810190610fd1565b90506101d6878a8761086f565b60405160009060609073ffffffffffffffffffffffffffffffffffffffff8c16907fc2df82e60000000000000000000000000000000000000000000000000000000090610231908b908f908f908c908c908c906024016110c3565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009094169390931790925290516102ba9190610fe9565b6000604051808303816000865af19150503d80600081146102f7576040519150601f19603f3d011682016040523d82523d6000602084013e6102fc565b606091505b509150915081801561030f575080516020145b801561034457507fdc1600f300000000000000000000000000000000000000000000000000000000610342826000610936565b145b80156103e85750856103e5848a73ffffffffffffffffffffffffffffffffffffffff166370a082318e6040518263ffffffff1660e01b81526004016103899190611005565b60206040518083038186803b1580156103a157600080fd5b505afa1580156103b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506103d99190810190610fd1565b9063ffffffff61096f16565b10155b6103f157600080fd5b5050505050505050505050565b6000805a905061040c61098e565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610470576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100f890611202565b610478610c1b565b61048484860186610d40565b60a083015273ffffffffffffffffffffffffffffffffffffffff168082526040517f70a082310000000000000000000000000000000000000000000000000000000081526370a08231906104dc903090600401611005565b60206040518083038186803b1580156104f457600080fd5b505afa158015610508573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061052c9190810190610fd1565b602082015260005b8160a001515181101561076957816020015182608001511061055557610769565b6105948260a00151828151811061056857fe5b60200260200101516020015161058f8460800151856020015161096f90919063ffffffff16565b6109a6565b6040830181905260a083015180516105df929190849081106105b257fe5b6020026020010151602001518460a0015184815181106105ce57fe5b6020026020010151604001516109be565b606083015260a0820151805160009130917f216b5fc10000000000000000000000000000000000000000000000000000000091908590811061061d57fe5b6020026020010151600001518b86600001518f886040015189606001518a60a001518a8151811061064a57fe5b60200260200101516060015160405160240161066c9796959493929190611026565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009094169390931790925290516106f59190610fe9565b6000604051808303816000865af19150503d8060008114610732576040519150601f19603f3d011682016040523d82523d6000602084013e610737565b606091505b505090508015610760576040830151608084015161075a9163ffffffff6109e816565b60808401525b50600101610534565b507fdc1600f3000000000000000000000000000000000000000000000000000000009250506000610798610a04565b905073ffffffffffffffffffffffffffffffffffffffff81161561086357600061a0aa5a840361374a01816107c957fe5b0490508173ffffffffffffffffffffffffffffffffffffffff1663079d229f6107f0610a17565b836040518363ffffffff1660e01b815260040161080e929190611148565b602060405180830381600087803b15801561082857600080fd5b505af115801561083c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506108609190810190610fd1565b50505b50509695505050505050565b6040516060907fa9059cbb00000000000000000000000000000000000000000000000000000000906108a79085908590602401611148565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915290506109308482610a2c565b50505050565b6000816020018351101561095c5761095c6109576005855185602001610ae8565b610b8d565b5060208183018101519101905b92915050565b6000828211156109885761098861095760028585610b95565b50900390565b738ed95d1746bf1e4dab58d8ed4724f1ef95b20db090565b60008183106109b557816109b7565b825b9392505050565b60006109e0836109d4868563ffffffff610bb416565b9063ffffffff610be516565b949350505050565b6000828201838110156109b7576109b761095760008686610b95565b6eb3f879cb30fe243b4dfee438691c0490565b70d3b08566be75a6db803c03c85c0c1c5b9690565b600060608373ffffffffffffffffffffffffffffffffffffffff1683604051610a559190610fe9565b6000604051808303816000865af19150503d8060008114610a92576040519150601f19603f3d011682016040523d82523d6000602084013e610a97565b606091505b50915091508115610adb578051610aaf575050610ae4565b805160201415610adb576000610ac6826000610c0f565b90508060011415610ad957505050610ae4565b505b61093081610b8d565b5050565b6060632800659560e01b848484604051602401610b07939291906111bd565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915290509392505050565b805160208201fd5b606063e946c1bb60e01b848484604051602401610b079392919061119b565b600082610bc357506000610969565b82820282848281610bd057fe5b04146109b7576109b761095760018686610b95565b600081610bfb57610bfb61095760038585610b95565b6000828481610c0657fe5b04949350505050565b60006109b78383610936565b6040518060c00160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081526020016000815260200160008152602001606081525090565b8035610969816112b2565b60008083601f840112610c83578182fd5b50813567ffffffffffffffff811115610c9a578182fd5b602083019150836020828501011115610cb257600080fd5b9250929050565b600082601f830112610cc9578081fd5b813567ffffffffffffffff811115610cdf578182fd5b610d1060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8401160161125f565b9150808252836020828501011115610d2757600080fd5b8060208401602084013760009082016020015292915050565b60008060408385031215610d52578182fd5b8235610d5d816112b2565b915060208381013567ffffffffffffffff80821115610d7a578384fd5b81860187601f820112610d8b578485fd5b8035925081831115610d9b578485fd5b610da8848585020161125f565b83815284810190828601875b86811015610e54578135850160807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0828f03011215610df157898afd5b610dfb608061125f565b610e078e8b8401610c67565b815260408201358a82015260608201356040820152608082013588811115610e2d578b8cfd5b610e3b8f8c83860101610cb9565b6060830152508552509287019290870190600101610db4565b50979a909950975050505050505050565b60008060008060008060008060e0898b031215610e80578384fd5b8835610e8b816112b2565b97506020890135610e9b816112b2565b96506040890135610eab816112b2565b95506060890135610ebb816112b2565b94506080890135935060a0890135925060c089013567ffffffffffffffff811115610ee4578283fd5b610ef08b828c01610c72565b999c989b5096995094979396929594505050565b60008060008060008060a08789031215610f1c578182fd5b8635610f27816112b2565b95506020870135610f37816112b2565b94506040870135610f47816112b2565b935060608701359250608087013567ffffffffffffffff811115610f69578283fd5b610f7589828a01610c72565b979a9699509497509295939492505050565b600080600060408486031215610f9b578283fd5b83359250602084013567ffffffffffffffff811115610fb8578283fd5b610fc486828701610c72565b9497909650939450505050565b600060208284031215610fe2578081fd5b5051919050565b60008251610ffb818460208701611286565b9190910192915050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b600073ffffffffffffffffffffffffffffffffffffffff808a168352808916602084015280881660408401528087166060840152508460808301528360a083015260e060c083015282518060e08401526101006110898282860160208801611286565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8401168501019250505098975050505050505050565b600073ffffffffffffffffffffffffffffffffffffffff8089168352808816602084015280871660408401525084606083015260a060808301528260a0830152828460c084013781830160c090810191909152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016010195945050505050565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b7fffffffff0000000000000000000000000000000000000000000000000000000091909116815260200190565b60608101600485106111a957fe5b938152602081019290925260409091015290565b60608101600885106111a957fe5b6020808252601c908201527f446578466f727761726465724272696467652f4f4e4c595f53454c4600000000604082015260600190565b60208082526028908201527f446578466f727761726465724272696467652f53454e4445525f4e4f545f415560408201527f54484f52495a4544000000000000000000000000000000000000000000000000606082015260800190565b60405181810167ffffffffffffffff8111828210171561127e57600080fd5b604052919050565b60005b838110156112a1578181015183820152602001611289565b838111156109305750506000910152565b73ffffffffffffffffffffffffffffffffffffffff811681146112d457600080fd5b5056fea365627a7a7231582038c6bbbafbda5aef35f40d19652c6e083529a998b1f17fba8ab5094a36eb4b536c6578706572696d656e74616cf564736f6c63430005110040",
                "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x131A DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x41 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x1626BA7E EQ PUSH2 0x46 JUMPI DUP1 PUSH4 0x216B5FC1 EQ PUSH2 0x6F JUMPI DUP1 PUSH4 0xC2DF82E6 EQ PUSH2 0x84 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x59 PUSH2 0x54 CALLDATASIZE PUSH1 0x4 PUSH2 0xF87 JUMP JUMPDEST PUSH2 0x97 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x66 SWAP2 SWAP1 PUSH2 0x116E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x82 PUSH2 0x7D CALLDATASIZE PUSH1 0x4 PUSH2 0xE65 JUMP JUMPDEST PUSH2 0xBF JUMP JUMPDEST STOP JUMPDEST PUSH2 0x59 PUSH2 0x92 CALLDATASIZE PUSH1 0x4 PUSH2 0xF04 JUMP JUMPDEST PUSH2 0x3FE JUMP JUMPDEST PUSH32 0xB067138100000000000000000000000000000000000000000000000000000000 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST CALLER ADDRESS EQ PUSH2 0x101 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF8 SWAP1 PUSH2 0x11CB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP9 AND ADDRESS EQ ISZERO PUSH2 0x124 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH2 0x179 SWAP1 DUP12 SWAP1 PUSH1 0x4 ADD PUSH2 0x1005 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x191 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1A5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x1C9 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0xFD1 JUMP JUMPDEST SWAP1 POP PUSH2 0x1D6 DUP8 DUP11 DUP8 PUSH2 0x86F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 PUSH1 0x60 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP13 AND SWAP1 PUSH32 0xC2DF82E600000000000000000000000000000000000000000000000000000000 SWAP1 PUSH2 0x231 SWAP1 DUP12 SWAP1 DUP16 SWAP1 DUP16 SWAP1 DUP13 SWAP1 DUP13 SWAP1 DUP13 SWAP1 PUSH1 0x24 ADD PUSH2 0x10C3 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x2BA SWAP2 SWAP1 PUSH2 0xFE9 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2F7 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2FC JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x30F JUMPI POP DUP1 MLOAD PUSH1 0x20 EQ JUMPDEST DUP1 ISZERO PUSH2 0x344 JUMPI POP PUSH32 0xDC1600F300000000000000000000000000000000000000000000000000000000 PUSH2 0x342 DUP3 PUSH1 0x0 PUSH2 0x936 JUMP JUMPDEST EQ JUMPDEST DUP1 ISZERO PUSH2 0x3E8 JUMPI POP DUP6 PUSH2 0x3E5 DUP5 DUP11 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x70A08231 DUP15 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x389 SWAP2 SWAP1 PUSH2 0x1005 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3A1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3B5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x3D9 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0xFD1 JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x96F AND JUMP JUMPDEST LT ISZERO JUMPDEST PUSH2 0x3F1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 GAS SWAP1 POP PUSH2 0x40C PUSH2 0x98E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x470 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF8 SWAP1 PUSH2 0x1202 JUMP JUMPDEST PUSH2 0x478 PUSH2 0xC1B JUMP JUMPDEST PUSH2 0x484 DUP5 DUP7 ADD DUP7 PUSH2 0xD40 JUMP JUMPDEST PUSH1 0xA0 DUP4 ADD MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP1 DUP3 MSTORE PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH4 0x70A08231 SWAP1 PUSH2 0x4DC SWAP1 ADDRESS SWAP1 PUSH1 0x4 ADD PUSH2 0x1005 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x508 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x52C SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0xFD1 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 PUSH1 0xA0 ADD MLOAD MLOAD DUP2 LT ISZERO PUSH2 0x769 JUMPI DUP2 PUSH1 0x20 ADD MLOAD DUP3 PUSH1 0x80 ADD MLOAD LT PUSH2 0x555 JUMPI PUSH2 0x769 JUMP JUMPDEST PUSH2 0x594 DUP3 PUSH1 0xA0 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x568 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD PUSH2 0x58F DUP5 PUSH1 0x80 ADD MLOAD DUP6 PUSH1 0x20 ADD MLOAD PUSH2 0x96F SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x9A6 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD DUP2 SWAP1 MSTORE PUSH1 0xA0 DUP4 ADD MLOAD DUP1 MLOAD PUSH2 0x5DF SWAP3 SWAP2 SWAP1 DUP5 SWAP1 DUP2 LT PUSH2 0x5B2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD DUP5 PUSH1 0xA0 ADD MLOAD DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x5CE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 ADD MLOAD PUSH2 0x9BE JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 ADD MLOAD DUP1 MLOAD PUSH1 0x0 SWAP2 ADDRESS SWAP2 PUSH32 0x216B5FC100000000000000000000000000000000000000000000000000000000 SWAP2 SWAP1 DUP6 SWAP1 DUP2 LT PUSH2 0x61D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 ADD MLOAD DUP12 DUP7 PUSH1 0x0 ADD MLOAD DUP16 DUP9 PUSH1 0x40 ADD MLOAD DUP10 PUSH1 0x60 ADD MLOAD DUP11 PUSH1 0xA0 ADD MLOAD DUP11 DUP2 MLOAD DUP2 LT PUSH2 0x64A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x60 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x66C SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1026 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x6F5 SWAP2 SWAP1 PUSH2 0xFE9 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x732 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x737 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 ISZERO PUSH2 0x760 JUMPI PUSH1 0x40 DUP4 ADD MLOAD PUSH1 0x80 DUP5 ADD MLOAD PUSH2 0x75A SWAP2 PUSH4 0xFFFFFFFF PUSH2 0x9E8 AND JUMP JUMPDEST PUSH1 0x80 DUP5 ADD MSTORE JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x534 JUMP JUMPDEST POP PUSH32 0xDC1600F300000000000000000000000000000000000000000000000000000000 SWAP3 POP POP PUSH1 0x0 PUSH2 0x798 PUSH2 0xA04 JUMP JUMPDEST SWAP1 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND ISZERO PUSH2 0x863 JUMPI PUSH1 0x0 PUSH2 0xA0AA GAS DUP5 SUB PUSH2 0x374A ADD DUP2 PUSH2 0x7C9 JUMPI INVALID JUMPDEST DIV SWAP1 POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x79D229F PUSH2 0x7F0 PUSH2 0xA17 JUMP JUMPDEST DUP4 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x80E SWAP3 SWAP2 SWAP1 PUSH2 0x1148 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x828 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x83C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x860 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0xFD1 JUMP JUMPDEST POP POP JUMPDEST POP POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x60 SWAP1 PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 SWAP1 PUSH2 0x8A7 SWAP1 DUP6 SWAP1 DUP6 SWAP1 PUSH1 0x24 ADD PUSH2 0x1148 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP PUSH2 0x930 DUP5 DUP3 PUSH2 0xA2C JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO PUSH2 0x95C JUMPI PUSH2 0x95C PUSH2 0x957 PUSH1 0x5 DUP6 MLOAD DUP6 PUSH1 0x20 ADD PUSH2 0xAE8 JUMP JUMPDEST PUSH2 0xB8D JUMP JUMPDEST POP PUSH1 0x20 DUP2 DUP4 ADD DUP2 ADD MLOAD SWAP2 ADD SWAP1 JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x988 JUMPI PUSH2 0x988 PUSH2 0x957 PUSH1 0x2 DUP6 DUP6 PUSH2 0xB95 JUMP JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH20 0x8ED95D1746BF1E4DAB58D8ED4724F1EF95B20DB0 SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0x9B5 JUMPI DUP2 PUSH2 0x9B7 JUMP JUMPDEST DUP3 JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x9E0 DUP4 PUSH2 0x9D4 DUP7 DUP6 PUSH4 0xFFFFFFFF PUSH2 0xBB4 AND JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xBE5 AND JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x9B7 JUMPI PUSH2 0x9B7 PUSH2 0x957 PUSH1 0x0 DUP7 DUP7 PUSH2 0xB95 JUMP JUMPDEST PUSH15 0xB3F879CB30FE243B4DFEE438691C04 SWAP1 JUMP JUMPDEST PUSH17 0xD3B08566BE75A6DB803C03C85C0C1C5B96 SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x40 MLOAD PUSH2 0xA55 SWAP2 SWAP1 PUSH2 0xFE9 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0xA92 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xA97 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0xADB JUMPI DUP1 MLOAD PUSH2 0xAAF JUMPI POP POP PUSH2 0xAE4 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 EQ ISZERO PUSH2 0xADB JUMPI PUSH1 0x0 PUSH2 0xAC6 DUP3 PUSH1 0x0 PUSH2 0xC0F JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 EQ ISZERO PUSH2 0xAD9 JUMPI POP POP POP PUSH2 0xAE4 JUMP JUMPDEST POP JUMPDEST PUSH2 0x930 DUP2 PUSH2 0xB8D JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x60 PUSH4 0x28006595 PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xB07 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x11BD JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH1 0x60 PUSH4 0xE946C1BB PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xB07 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x119B JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xBC3 JUMPI POP PUSH1 0x0 PUSH2 0x969 JUMP JUMPDEST DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 PUSH2 0xBD0 JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x9B7 JUMPI PUSH2 0x9B7 PUSH2 0x957 PUSH1 0x1 DUP7 DUP7 PUSH2 0xB95 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0xBFB JUMPI PUSH2 0xBFB PUSH2 0x957 PUSH1 0x3 DUP6 DUP6 PUSH2 0xB95 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP2 PUSH2 0xC06 JUMPI INVALID JUMPDEST DIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x9B7 DUP4 DUP4 PUSH2 0x936 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xC0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x969 DUP2 PUSH2 0x12B2 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0xC83 JUMPI DUP2 DUP3 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xC9A JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0xCB2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xCC9 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xCDF JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0xD10 PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F DUP5 ADD AND ADD PUSH2 0x125F JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0xD27 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP5 ADD CALLDATACOPY PUSH1 0x0 SWAP1 DUP3 ADD PUSH1 0x20 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xD52 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0xD5D DUP2 PUSH2 0x12B2 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 DUP2 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xD7A JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP7 ADD DUP8 PUSH1 0x1F DUP3 ADD SLT PUSH2 0xD8B JUMPI DUP5 DUP6 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP3 POP DUP2 DUP4 GT ISZERO PUSH2 0xD9B JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0xDA8 DUP5 DUP6 DUP6 MUL ADD PUSH2 0x125F JUMP JUMPDEST DUP4 DUP2 MSTORE DUP5 DUP2 ADD SWAP1 DUP3 DUP7 ADD DUP8 JUMPDEST DUP7 DUP2 LT ISZERO PUSH2 0xE54 JUMPI DUP2 CALLDATALOAD DUP6 ADD PUSH1 0x80 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP3 DUP16 SUB ADD SLT ISZERO PUSH2 0xDF1 JUMPI DUP10 DUP11 REVERT JUMPDEST PUSH2 0xDFB PUSH1 0x80 PUSH2 0x125F JUMP JUMPDEST PUSH2 0xE07 DUP15 DUP12 DUP5 ADD PUSH2 0xC67 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x40 DUP3 ADD CALLDATALOAD DUP11 DUP3 ADD MSTORE PUSH1 0x60 DUP3 ADD CALLDATALOAD PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x80 DUP3 ADD CALLDATALOAD DUP9 DUP2 GT ISZERO PUSH2 0xE2D JUMPI DUP12 DUP13 REVERT JUMPDEST PUSH2 0xE3B DUP16 DUP13 DUP4 DUP7 ADD ADD PUSH2 0xCB9 JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE POP DUP6 MSTORE POP SWAP3 DUP8 ADD SWAP3 SWAP1 DUP8 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0xDB4 JUMP JUMPDEST POP SWAP8 SWAP11 SWAP1 SWAP10 POP SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xE0 DUP10 DUP12 SUB SLT ISZERO PUSH2 0xE80 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP9 CALLDATALOAD PUSH2 0xE8B DUP2 PUSH2 0x12B2 JUMP JUMPDEST SWAP8 POP PUSH1 0x20 DUP10 ADD CALLDATALOAD PUSH2 0xE9B DUP2 PUSH2 0x12B2 JUMP JUMPDEST SWAP7 POP PUSH1 0x40 DUP10 ADD CALLDATALOAD PUSH2 0xEAB DUP2 PUSH2 0x12B2 JUMP JUMPDEST SWAP6 POP PUSH1 0x60 DUP10 ADD CALLDATALOAD PUSH2 0xEBB DUP2 PUSH2 0x12B2 JUMP JUMPDEST SWAP5 POP PUSH1 0x80 DUP10 ADD CALLDATALOAD SWAP4 POP PUSH1 0xA0 DUP10 ADD CALLDATALOAD SWAP3 POP PUSH1 0xC0 DUP10 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xEE4 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0xEF0 DUP12 DUP3 DUP13 ADD PUSH2 0xC72 JUMP JUMPDEST SWAP10 SWAP13 SWAP9 SWAP12 POP SWAP7 SWAP10 POP SWAP5 SWAP8 SWAP4 SWAP7 SWAP3 SWAP6 SWAP5 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0xF1C JUMPI DUP2 DUP3 REVERT JUMPDEST DUP7 CALLDATALOAD PUSH2 0xF27 DUP2 PUSH2 0x12B2 JUMP JUMPDEST SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD PUSH2 0xF37 DUP2 PUSH2 0x12B2 JUMP JUMPDEST SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD PUSH2 0xF47 DUP2 PUSH2 0x12B2 JUMP JUMPDEST SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP3 POP PUSH1 0x80 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xF69 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0xF75 DUP10 DUP3 DUP11 ADD PUSH2 0xC72 JUMP JUMPDEST SWAP8 SWAP11 SWAP7 SWAP10 POP SWAP5 SWAP8 POP SWAP3 SWAP6 SWAP4 SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x40 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xF9B JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xFB8 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0xFC4 DUP7 DUP3 DUP8 ADD PUSH2 0xC72 JUMP JUMPDEST SWAP5 SWAP8 SWAP1 SWAP7 POP SWAP4 SWAP5 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xFE2 JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0xFFB DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x1286 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP11 AND DUP4 MSTORE DUP1 DUP10 AND PUSH1 0x20 DUP5 ADD MSTORE DUP1 DUP9 AND PUSH1 0x40 DUP5 ADD MSTORE DUP1 DUP8 AND PUSH1 0x60 DUP5 ADD MSTORE POP DUP5 PUSH1 0x80 DUP4 ADD MSTORE DUP4 PUSH1 0xA0 DUP4 ADD MSTORE PUSH1 0xE0 PUSH1 0xC0 DUP4 ADD MSTORE DUP3 MLOAD DUP1 PUSH1 0xE0 DUP5 ADD MSTORE PUSH2 0x100 PUSH2 0x1089 DUP3 DUP3 DUP7 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x1286 JUMP JUMPDEST DUP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F DUP5 ADD AND DUP6 ADD ADD SWAP3 POP POP POP SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP10 AND DUP4 MSTORE DUP1 DUP9 AND PUSH1 0x20 DUP5 ADD MSTORE DUP1 DUP8 AND PUSH1 0x40 DUP5 ADD MSTORE POP DUP5 PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0xA0 PUSH1 0x80 DUP4 ADD MSTORE DUP3 PUSH1 0xA0 DUP4 ADD MSTORE DUP3 DUP5 PUSH1 0xC0 DUP5 ADD CALLDATACOPY DUP2 DUP4 ADD PUSH1 0xC0 SWAP1 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1F SWAP1 SWAP3 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND ADD ADD SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH1 0x4 DUP6 LT PUSH2 0x11A9 JUMPI INVALID JUMPDEST SWAP4 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH1 0x8 DUP6 LT PUSH2 0x11A9 JUMPI INVALID JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1C SWAP1 DUP3 ADD MSTORE PUSH32 0x446578466F727761726465724272696467652F4F4E4C595F53454C4600000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x28 SWAP1 DUP3 ADD MSTORE PUSH32 0x446578466F727761726465724272696467652F53454E4445525F4E4F545F4155 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x54484F52495A4544000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x127E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x12A1 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1289 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x930 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x12D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG3 PUSH6 0x627A7A723158 KECCAK256 CODESIZE 0xC6 0xBB 0xBA 0xFB 0xDA GAS 0xEF CALLDATALOAD DELEGATECALL 0xD NOT PUSH6 0x2C6E083529A9 SWAP9 0xB1 CALL PUSH32 0xBA8AB5094A36EB4B536C6578706572696D656E74616CF564736F6C6343000511 STOP BLOCKHASH ",
                "sourceMap": "1203:5945:13:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1203:5945:13;;;;;;;"
            },
            "deployedBytecode": {
                "linkReferences": {},
                "object": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c80631626ba7e14610046578063216b5fc11461006f578063c2df82e614610084575b600080fd5b610059610054366004610f87565b610097565b604051610066919061116e565b60405180910390f35b61008261007d366004610e65565b6100bf565b005b610059610092366004610f04565b6103fe565b7fb0671381000000000000000000000000000000000000000000000000000000009392505050565b333014610101576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100f8906111cb565b60405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff881630141561012457600080fd5b6040517f70a0823100000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff8716906370a0823190610179908b90600401611005565b60206040518083038186803b15801561019157600080fd5b505afa1580156101a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506101c99190810190610fd1565b90506101d6878a8761086f565b60405160009060609073ffffffffffffffffffffffffffffffffffffffff8c16907fc2df82e60000000000000000000000000000000000000000000000000000000090610231908b908f908f908c908c908c906024016110c3565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009094169390931790925290516102ba9190610fe9565b6000604051808303816000865af19150503d80600081146102f7576040519150601f19603f3d011682016040523d82523d6000602084013e6102fc565b606091505b509150915081801561030f575080516020145b801561034457507fdc1600f300000000000000000000000000000000000000000000000000000000610342826000610936565b145b80156103e85750856103e5848a73ffffffffffffffffffffffffffffffffffffffff166370a082318e6040518263ffffffff1660e01b81526004016103899190611005565b60206040518083038186803b1580156103a157600080fd5b505afa1580156103b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506103d99190810190610fd1565b9063ffffffff61096f16565b10155b6103f157600080fd5b5050505050505050505050565b6000805a905061040c61098e565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610470576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100f890611202565b610478610c1b565b61048484860186610d40565b60a083015273ffffffffffffffffffffffffffffffffffffffff168082526040517f70a082310000000000000000000000000000000000000000000000000000000081526370a08231906104dc903090600401611005565b60206040518083038186803b1580156104f457600080fd5b505afa158015610508573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061052c9190810190610fd1565b602082015260005b8160a001515181101561076957816020015182608001511061055557610769565b6105948260a00151828151811061056857fe5b60200260200101516020015161058f8460800151856020015161096f90919063ffffffff16565b6109a6565b6040830181905260a083015180516105df929190849081106105b257fe5b6020026020010151602001518460a0015184815181106105ce57fe5b6020026020010151604001516109be565b606083015260a0820151805160009130917f216b5fc10000000000000000000000000000000000000000000000000000000091908590811061061d57fe5b6020026020010151600001518b86600001518f886040015189606001518a60a001518a8151811061064a57fe5b60200260200101516060015160405160240161066c9796959493929190611026565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009094169390931790925290516106f59190610fe9565b6000604051808303816000865af19150503d8060008114610732576040519150601f19603f3d011682016040523d82523d6000602084013e610737565b606091505b505090508015610760576040830151608084015161075a9163ffffffff6109e816565b60808401525b50600101610534565b507fdc1600f3000000000000000000000000000000000000000000000000000000009250506000610798610a04565b905073ffffffffffffffffffffffffffffffffffffffff81161561086357600061a0aa5a840361374a01816107c957fe5b0490508173ffffffffffffffffffffffffffffffffffffffff1663079d229f6107f0610a17565b836040518363ffffffff1660e01b815260040161080e929190611148565b602060405180830381600087803b15801561082857600080fd5b505af115801561083c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506108609190810190610fd1565b50505b50509695505050505050565b6040516060907fa9059cbb00000000000000000000000000000000000000000000000000000000906108a79085908590602401611148565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915290506109308482610a2c565b50505050565b6000816020018351101561095c5761095c6109576005855185602001610ae8565b610b8d565b5060208183018101519101905b92915050565b6000828211156109885761098861095760028585610b95565b50900390565b738ed95d1746bf1e4dab58d8ed4724f1ef95b20db090565b60008183106109b557816109b7565b825b9392505050565b60006109e0836109d4868563ffffffff610bb416565b9063ffffffff610be516565b949350505050565b6000828201838110156109b7576109b761095760008686610b95565b6eb3f879cb30fe243b4dfee438691c0490565b70d3b08566be75a6db803c03c85c0c1c5b9690565b600060608373ffffffffffffffffffffffffffffffffffffffff1683604051610a559190610fe9565b6000604051808303816000865af19150503d8060008114610a92576040519150601f19603f3d011682016040523d82523d6000602084013e610a97565b606091505b50915091508115610adb578051610aaf575050610ae4565b805160201415610adb576000610ac6826000610c0f565b90508060011415610ad957505050610ae4565b505b61093081610b8d565b5050565b6060632800659560e01b848484604051602401610b07939291906111bd565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915290509392505050565b805160208201fd5b606063e946c1bb60e01b848484604051602401610b079392919061119b565b600082610bc357506000610969565b82820282848281610bd057fe5b04146109b7576109b761095760018686610b95565b600081610bfb57610bfb61095760038585610b95565b6000828481610c0657fe5b04949350505050565b60006109b78383610936565b6040518060c00160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081526020016000815260200160008152602001606081525090565b8035610969816112b2565b60008083601f840112610c83578182fd5b50813567ffffffffffffffff811115610c9a578182fd5b602083019150836020828501011115610cb257600080fd5b9250929050565b600082601f830112610cc9578081fd5b813567ffffffffffffffff811115610cdf578182fd5b610d1060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8401160161125f565b9150808252836020828501011115610d2757600080fd5b8060208401602084013760009082016020015292915050565b60008060408385031215610d52578182fd5b8235610d5d816112b2565b915060208381013567ffffffffffffffff80821115610d7a578384fd5b81860187601f820112610d8b578485fd5b8035925081831115610d9b578485fd5b610da8848585020161125f565b83815284810190828601875b86811015610e54578135850160807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0828f03011215610df157898afd5b610dfb608061125f565b610e078e8b8401610c67565b815260408201358a82015260608201356040820152608082013588811115610e2d578b8cfd5b610e3b8f8c83860101610cb9565b6060830152508552509287019290870190600101610db4565b50979a909950975050505050505050565b60008060008060008060008060e0898b031215610e80578384fd5b8835610e8b816112b2565b97506020890135610e9b816112b2565b96506040890135610eab816112b2565b95506060890135610ebb816112b2565b94506080890135935060a0890135925060c089013567ffffffffffffffff811115610ee4578283fd5b610ef08b828c01610c72565b999c989b5096995094979396929594505050565b60008060008060008060a08789031215610f1c578182fd5b8635610f27816112b2565b95506020870135610f37816112b2565b94506040870135610f47816112b2565b935060608701359250608087013567ffffffffffffffff811115610f69578283fd5b610f7589828a01610c72565b979a9699509497509295939492505050565b600080600060408486031215610f9b578283fd5b83359250602084013567ffffffffffffffff811115610fb8578283fd5b610fc486828701610c72565b9497909650939450505050565b600060208284031215610fe2578081fd5b5051919050565b60008251610ffb818460208701611286565b9190910192915050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b600073ffffffffffffffffffffffffffffffffffffffff808a168352808916602084015280881660408401528087166060840152508460808301528360a083015260e060c083015282518060e08401526101006110898282860160208801611286565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8401168501019250505098975050505050505050565b600073ffffffffffffffffffffffffffffffffffffffff8089168352808816602084015280871660408401525084606083015260a060808301528260a0830152828460c084013781830160c090810191909152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016010195945050505050565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b7fffffffff0000000000000000000000000000000000000000000000000000000091909116815260200190565b60608101600485106111a957fe5b938152602081019290925260409091015290565b60608101600885106111a957fe5b6020808252601c908201527f446578466f727761726465724272696467652f4f4e4c595f53454c4600000000604082015260600190565b60208082526028908201527f446578466f727761726465724272696467652f53454e4445525f4e4f545f415560408201527f54484f52495a4544000000000000000000000000000000000000000000000000606082015260800190565b60405181810167ffffffffffffffff8111828210171561127e57600080fd5b604052919050565b60005b838110156112a1578181015183820152602001611289565b838111156109305750506000910152565b73ffffffffffffffffffffffffffffffffffffffff811681146112d457600080fd5b5056fea365627a7a7231582038c6bbbafbda5aef35f40d19652c6e083529a998b1f17fba8ab5094a36eb4b536c6578706572696d656e74616cf564736f6c63430005110040",
                "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x41 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x1626BA7E EQ PUSH2 0x46 JUMPI DUP1 PUSH4 0x216B5FC1 EQ PUSH2 0x6F JUMPI DUP1 PUSH4 0xC2DF82E6 EQ PUSH2 0x84 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x59 PUSH2 0x54 CALLDATASIZE PUSH1 0x4 PUSH2 0xF87 JUMP JUMPDEST PUSH2 0x97 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x66 SWAP2 SWAP1 PUSH2 0x116E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x82 PUSH2 0x7D CALLDATASIZE PUSH1 0x4 PUSH2 0xE65 JUMP JUMPDEST PUSH2 0xBF JUMP JUMPDEST STOP JUMPDEST PUSH2 0x59 PUSH2 0x92 CALLDATASIZE PUSH1 0x4 PUSH2 0xF04 JUMP JUMPDEST PUSH2 0x3FE JUMP JUMPDEST PUSH32 0xB067138100000000000000000000000000000000000000000000000000000000 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST CALLER ADDRESS EQ PUSH2 0x101 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF8 SWAP1 PUSH2 0x11CB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP9 AND ADDRESS EQ ISZERO PUSH2 0x124 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH2 0x179 SWAP1 DUP12 SWAP1 PUSH1 0x4 ADD PUSH2 0x1005 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x191 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1A5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x1C9 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0xFD1 JUMP JUMPDEST SWAP1 POP PUSH2 0x1D6 DUP8 DUP11 DUP8 PUSH2 0x86F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 PUSH1 0x60 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP13 AND SWAP1 PUSH32 0xC2DF82E600000000000000000000000000000000000000000000000000000000 SWAP1 PUSH2 0x231 SWAP1 DUP12 SWAP1 DUP16 SWAP1 DUP16 SWAP1 DUP13 SWAP1 DUP13 SWAP1 DUP13 SWAP1 PUSH1 0x24 ADD PUSH2 0x10C3 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x2BA SWAP2 SWAP1 PUSH2 0xFE9 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2F7 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2FC JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x30F JUMPI POP DUP1 MLOAD PUSH1 0x20 EQ JUMPDEST DUP1 ISZERO PUSH2 0x344 JUMPI POP PUSH32 0xDC1600F300000000000000000000000000000000000000000000000000000000 PUSH2 0x342 DUP3 PUSH1 0x0 PUSH2 0x936 JUMP JUMPDEST EQ JUMPDEST DUP1 ISZERO PUSH2 0x3E8 JUMPI POP DUP6 PUSH2 0x3E5 DUP5 DUP11 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x70A08231 DUP15 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x389 SWAP2 SWAP1 PUSH2 0x1005 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3A1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3B5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x3D9 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0xFD1 JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x96F AND JUMP JUMPDEST LT ISZERO JUMPDEST PUSH2 0x3F1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 GAS SWAP1 POP PUSH2 0x40C PUSH2 0x98E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x470 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF8 SWAP1 PUSH2 0x1202 JUMP JUMPDEST PUSH2 0x478 PUSH2 0xC1B JUMP JUMPDEST PUSH2 0x484 DUP5 DUP7 ADD DUP7 PUSH2 0xD40 JUMP JUMPDEST PUSH1 0xA0 DUP4 ADD MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP1 DUP3 MSTORE PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH4 0x70A08231 SWAP1 PUSH2 0x4DC SWAP1 ADDRESS SWAP1 PUSH1 0x4 ADD PUSH2 0x1005 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x508 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x52C SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0xFD1 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 PUSH1 0xA0 ADD MLOAD MLOAD DUP2 LT ISZERO PUSH2 0x769 JUMPI DUP2 PUSH1 0x20 ADD MLOAD DUP3 PUSH1 0x80 ADD MLOAD LT PUSH2 0x555 JUMPI PUSH2 0x769 JUMP JUMPDEST PUSH2 0x594 DUP3 PUSH1 0xA0 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x568 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD PUSH2 0x58F DUP5 PUSH1 0x80 ADD MLOAD DUP6 PUSH1 0x20 ADD MLOAD PUSH2 0x96F SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x9A6 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD DUP2 SWAP1 MSTORE PUSH1 0xA0 DUP4 ADD MLOAD DUP1 MLOAD PUSH2 0x5DF SWAP3 SWAP2 SWAP1 DUP5 SWAP1 DUP2 LT PUSH2 0x5B2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD DUP5 PUSH1 0xA0 ADD MLOAD DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x5CE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 ADD MLOAD PUSH2 0x9BE JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 ADD MLOAD DUP1 MLOAD PUSH1 0x0 SWAP2 ADDRESS SWAP2 PUSH32 0x216B5FC100000000000000000000000000000000000000000000000000000000 SWAP2 SWAP1 DUP6 SWAP1 DUP2 LT PUSH2 0x61D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 ADD MLOAD DUP12 DUP7 PUSH1 0x0 ADD MLOAD DUP16 DUP9 PUSH1 0x40 ADD MLOAD DUP10 PUSH1 0x60 ADD MLOAD DUP11 PUSH1 0xA0 ADD MLOAD DUP11 DUP2 MLOAD DUP2 LT PUSH2 0x64A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x60 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x66C SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1026 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x6F5 SWAP2 SWAP1 PUSH2 0xFE9 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x732 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x737 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 ISZERO PUSH2 0x760 JUMPI PUSH1 0x40 DUP4 ADD MLOAD PUSH1 0x80 DUP5 ADD MLOAD PUSH2 0x75A SWAP2 PUSH4 0xFFFFFFFF PUSH2 0x9E8 AND JUMP JUMPDEST PUSH1 0x80 DUP5 ADD MSTORE JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x534 JUMP JUMPDEST POP PUSH32 0xDC1600F300000000000000000000000000000000000000000000000000000000 SWAP3 POP POP PUSH1 0x0 PUSH2 0x798 PUSH2 0xA04 JUMP JUMPDEST SWAP1 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND ISZERO PUSH2 0x863 JUMPI PUSH1 0x0 PUSH2 0xA0AA GAS DUP5 SUB PUSH2 0x374A ADD DUP2 PUSH2 0x7C9 JUMPI INVALID JUMPDEST DIV SWAP1 POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x79D229F PUSH2 0x7F0 PUSH2 0xA17 JUMP JUMPDEST DUP4 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x80E SWAP3 SWAP2 SWAP1 PUSH2 0x1148 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x828 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x83C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x860 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0xFD1 JUMP JUMPDEST POP POP JUMPDEST POP POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x60 SWAP1 PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 SWAP1 PUSH2 0x8A7 SWAP1 DUP6 SWAP1 DUP6 SWAP1 PUSH1 0x24 ADD PUSH2 0x1148 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP PUSH2 0x930 DUP5 DUP3 PUSH2 0xA2C JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO PUSH2 0x95C JUMPI PUSH2 0x95C PUSH2 0x957 PUSH1 0x5 DUP6 MLOAD DUP6 PUSH1 0x20 ADD PUSH2 0xAE8 JUMP JUMPDEST PUSH2 0xB8D JUMP JUMPDEST POP PUSH1 0x20 DUP2 DUP4 ADD DUP2 ADD MLOAD SWAP2 ADD SWAP1 JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x988 JUMPI PUSH2 0x988 PUSH2 0x957 PUSH1 0x2 DUP6 DUP6 PUSH2 0xB95 JUMP JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH20 0x8ED95D1746BF1E4DAB58D8ED4724F1EF95B20DB0 SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0x9B5 JUMPI DUP2 PUSH2 0x9B7 JUMP JUMPDEST DUP3 JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x9E0 DUP4 PUSH2 0x9D4 DUP7 DUP6 PUSH4 0xFFFFFFFF PUSH2 0xBB4 AND JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xBE5 AND JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x9B7 JUMPI PUSH2 0x9B7 PUSH2 0x957 PUSH1 0x0 DUP7 DUP7 PUSH2 0xB95 JUMP JUMPDEST PUSH15 0xB3F879CB30FE243B4DFEE438691C04 SWAP1 JUMP JUMPDEST PUSH17 0xD3B08566BE75A6DB803C03C85C0C1C5B96 SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x40 MLOAD PUSH2 0xA55 SWAP2 SWAP1 PUSH2 0xFE9 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0xA92 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xA97 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0xADB JUMPI DUP1 MLOAD PUSH2 0xAAF JUMPI POP POP PUSH2 0xAE4 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 EQ ISZERO PUSH2 0xADB JUMPI PUSH1 0x0 PUSH2 0xAC6 DUP3 PUSH1 0x0 PUSH2 0xC0F JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 EQ ISZERO PUSH2 0xAD9 JUMPI POP POP POP PUSH2 0xAE4 JUMP JUMPDEST POP JUMPDEST PUSH2 0x930 DUP2 PUSH2 0xB8D JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x60 PUSH4 0x28006595 PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xB07 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x11BD JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH1 0x60 PUSH4 0xE946C1BB PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xB07 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x119B JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xBC3 JUMPI POP PUSH1 0x0 PUSH2 0x969 JUMP JUMPDEST DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 PUSH2 0xBD0 JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x9B7 JUMPI PUSH2 0x9B7 PUSH2 0x957 PUSH1 0x1 DUP7 DUP7 PUSH2 0xB95 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0xBFB JUMPI PUSH2 0xBFB PUSH2 0x957 PUSH1 0x3 DUP6 DUP6 PUSH2 0xB95 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP2 PUSH2 0xC06 JUMPI INVALID JUMPDEST DIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x9B7 DUP4 DUP4 PUSH2 0x936 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xC0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x969 DUP2 PUSH2 0x12B2 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0xC83 JUMPI DUP2 DUP3 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xC9A JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0xCB2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xCC9 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xCDF JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0xD10 PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F DUP5 ADD AND ADD PUSH2 0x125F JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0xD27 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP5 ADD CALLDATACOPY PUSH1 0x0 SWAP1 DUP3 ADD PUSH1 0x20 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xD52 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0xD5D DUP2 PUSH2 0x12B2 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 DUP2 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xD7A JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP7 ADD DUP8 PUSH1 0x1F DUP3 ADD SLT PUSH2 0xD8B JUMPI DUP5 DUP6 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP3 POP DUP2 DUP4 GT ISZERO PUSH2 0xD9B JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0xDA8 DUP5 DUP6 DUP6 MUL ADD PUSH2 0x125F JUMP JUMPDEST DUP4 DUP2 MSTORE DUP5 DUP2 ADD SWAP1 DUP3 DUP7 ADD DUP8 JUMPDEST DUP7 DUP2 LT ISZERO PUSH2 0xE54 JUMPI DUP2 CALLDATALOAD DUP6 ADD PUSH1 0x80 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP3 DUP16 SUB ADD SLT ISZERO PUSH2 0xDF1 JUMPI DUP10 DUP11 REVERT JUMPDEST PUSH2 0xDFB PUSH1 0x80 PUSH2 0x125F JUMP JUMPDEST PUSH2 0xE07 DUP15 DUP12 DUP5 ADD PUSH2 0xC67 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x40 DUP3 ADD CALLDATALOAD DUP11 DUP3 ADD MSTORE PUSH1 0x60 DUP3 ADD CALLDATALOAD PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x80 DUP3 ADD CALLDATALOAD DUP9 DUP2 GT ISZERO PUSH2 0xE2D JUMPI DUP12 DUP13 REVERT JUMPDEST PUSH2 0xE3B DUP16 DUP13 DUP4 DUP7 ADD ADD PUSH2 0xCB9 JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE POP DUP6 MSTORE POP SWAP3 DUP8 ADD SWAP3 SWAP1 DUP8 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0xDB4 JUMP JUMPDEST POP SWAP8 SWAP11 SWAP1 SWAP10 POP SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xE0 DUP10 DUP12 SUB SLT ISZERO PUSH2 0xE80 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP9 CALLDATALOAD PUSH2 0xE8B DUP2 PUSH2 0x12B2 JUMP JUMPDEST SWAP8 POP PUSH1 0x20 DUP10 ADD CALLDATALOAD PUSH2 0xE9B DUP2 PUSH2 0x12B2 JUMP JUMPDEST SWAP7 POP PUSH1 0x40 DUP10 ADD CALLDATALOAD PUSH2 0xEAB DUP2 PUSH2 0x12B2 JUMP JUMPDEST SWAP6 POP PUSH1 0x60 DUP10 ADD CALLDATALOAD PUSH2 0xEBB DUP2 PUSH2 0x12B2 JUMP JUMPDEST SWAP5 POP PUSH1 0x80 DUP10 ADD CALLDATALOAD SWAP4 POP PUSH1 0xA0 DUP10 ADD CALLDATALOAD SWAP3 POP PUSH1 0xC0 DUP10 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xEE4 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0xEF0 DUP12 DUP3 DUP13 ADD PUSH2 0xC72 JUMP JUMPDEST SWAP10 SWAP13 SWAP9 SWAP12 POP SWAP7 SWAP10 POP SWAP5 SWAP8 SWAP4 SWAP7 SWAP3 SWAP6 SWAP5 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0xF1C JUMPI DUP2 DUP3 REVERT JUMPDEST DUP7 CALLDATALOAD PUSH2 0xF27 DUP2 PUSH2 0x12B2 JUMP JUMPDEST SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD PUSH2 0xF37 DUP2 PUSH2 0x12B2 JUMP JUMPDEST SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD PUSH2 0xF47 DUP2 PUSH2 0x12B2 JUMP JUMPDEST SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP3 POP PUSH1 0x80 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xF69 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0xF75 DUP10 DUP3 DUP11 ADD PUSH2 0xC72 JUMP JUMPDEST SWAP8 SWAP11 SWAP7 SWAP10 POP SWAP5 SWAP8 POP SWAP3 SWAP6 SWAP4 SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x40 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xF9B JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xFB8 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0xFC4 DUP7 DUP3 DUP8 ADD PUSH2 0xC72 JUMP JUMPDEST SWAP5 SWAP8 SWAP1 SWAP7 POP SWAP4 SWAP5 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xFE2 JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0xFFB DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x1286 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP11 AND DUP4 MSTORE DUP1 DUP10 AND PUSH1 0x20 DUP5 ADD MSTORE DUP1 DUP9 AND PUSH1 0x40 DUP5 ADD MSTORE DUP1 DUP8 AND PUSH1 0x60 DUP5 ADD MSTORE POP DUP5 PUSH1 0x80 DUP4 ADD MSTORE DUP4 PUSH1 0xA0 DUP4 ADD MSTORE PUSH1 0xE0 PUSH1 0xC0 DUP4 ADD MSTORE DUP3 MLOAD DUP1 PUSH1 0xE0 DUP5 ADD MSTORE PUSH2 0x100 PUSH2 0x1089 DUP3 DUP3 DUP7 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x1286 JUMP JUMPDEST DUP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F DUP5 ADD AND DUP6 ADD ADD SWAP3 POP POP POP SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP10 AND DUP4 MSTORE DUP1 DUP9 AND PUSH1 0x20 DUP5 ADD MSTORE DUP1 DUP8 AND PUSH1 0x40 DUP5 ADD MSTORE POP DUP5 PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0xA0 PUSH1 0x80 DUP4 ADD MSTORE DUP3 PUSH1 0xA0 DUP4 ADD MSTORE DUP3 DUP5 PUSH1 0xC0 DUP5 ADD CALLDATACOPY DUP2 DUP4 ADD PUSH1 0xC0 SWAP1 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1F SWAP1 SWAP3 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND ADD ADD SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH1 0x4 DUP6 LT PUSH2 0x11A9 JUMPI INVALID JUMPDEST SWAP4 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH1 0x8 DUP6 LT PUSH2 0x11A9 JUMPI INVALID JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1C SWAP1 DUP3 ADD MSTORE PUSH32 0x446578466F727761726465724272696467652F4F4E4C595F53454C4600000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x28 SWAP1 DUP3 ADD MSTORE PUSH32 0x446578466F727761726465724272696467652F53454E4445525F4E4F545F4155 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x54484F52495A4544000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x127E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x12A1 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1289 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x930 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x12D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG3 PUSH6 0x627A7A723158 KECCAK256 CODESIZE 0xC6 0xBB 0xBA 0xFB 0xDA GAS 0xEF CALLDATALOAD DELEGATECALL 0xD NOT PUSH6 0x2C6E083529A9 SWAP9 0xB1 CALL PUSH32 0xBA8AB5094A36EB4B536C6578706572696D656E74616CF564736F6C6343000511 STOP BLOCKHASH ",
                "sourceMap": "1203:5945:13:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1203:5945:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6954:192;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;5251:1497;;;;;;;;;:::i;:::-;;2314:2275;;;;;;;;;:::i;6954:192::-;7114:25;6954:192;;;;;:::o;5251:1497::-;5586:10;5608:4;5586:27;5578:68;;;;;;;;;;;;;;;;;;;;;;5711:23;;;5729:4;5711:23;;5703:32;;;;;;5843:38;;;;;5809:31;;5843:34;;;;;;:38;;5878:2;;5843:38;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5843:38:13;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;5843:38:13;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;5843:38:13;;;;;;;;;5809:72;;5940:60;5963:10;5975:6;5983:16;5940:22;:60::i;:::-;6108:233;;6040:15;;6057:23;;6096:11;;;;6148:43;;6108:233;;6209:11;;6096:6;;6262:2;;6282:17;;6317:10;;;;6108:233;;;;;;;;22:32:-1;26:21;;;22:32;6:49;;6108:233:13;;;49:4:-1;25:18;;61:17;;6108:233:13;182:15:-1;6108:233:13;;;;179:29:-1;;;;160:49;;;6096:246:13;;;;6108:233;6096:246;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;6039:303:13;;;;6496:10;:49;;;;;6522:10;:17;6543:2;6522:23;6496:49;:127;;;;-1:-1:-1;6608:14:13;6561:35;6582:10;6594:1;6561:20;:35::i;:::-;:62;6496:127;:235;;;;;6714:17;6639:71;6686:23;6651:11;6639:34;;;6674:2;6639:38;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6639:38:13;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;6639:38:13;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;6639:38:13;;;;;;;;;:46;:71;:46;:71;:::i;:::-;:92;;6496:235;6475:266;;;;;;5251:1497;;;;;;;;;;;:::o;2314:2275::-;2560:14;1455:17:17;1475:9;1455:29;;2625::13;:27;:29::i;:::-;2611:43;;:10;:43;;;2590:130;;;;;;;;;;;;;;2730:30;;:::i;:::-;2838:47;;;;2849:10;2838:47;;;2814:11;;;2770:115;;;;;;2941:54;;;;;:39;;:54;;2989:4;;2941:54;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2941:54:13;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2941:54:13;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;2941:54:13;;;;;;;;;2896:30;;;:99;3011:9;3006:1519;3030:5;:11;;;:18;3026:1;:22;3006:1519;;;3162:5;:30;;;3133:5;:25;;;:59;3129:103;;3212:5;;3129:103;3313:164;3349:5;:11;;;3361:1;3349:14;;;;;;;;;;;;;;:31;;;3398:65;3437:5;:25;;;3398:5;:30;;;:38;;:65;;;;:::i;:::-;3313:18;:164::i;:::-;3284:26;;;:193;;;3612:11;;;;:14;;3521:186;;3284:193;3612:11;3624:1;;3612:14;;;;;;;;;;;;:31;;;3661:5;:11;;;3673:1;3661:14;;;;;;;;;;;;;;:32;;;3521:29;:186::i;:::-;3491:27;;;:216;3990:11;;;;:14;;3836:15;;3865:4;;3937:31;;3990:11;4002:1;;3990:14;;;;;;;;;;;;:21;;;4033:2;4057:5;:16;;;4095:11;4128:5;:26;;;4176:5;:27;;;4225:5;:11;;;4237:1;4225:14;;;;;;;;;;;;;;:25;;;3893:375;;;;;;;;;;;;;;;;;;;22:32:-1;26:21;;;22:32;6:49;;3893:375:13;;;49:4:-1;25:18;;61:17;;3893:375:13;182:15:-1;3893:375:13;;;;179:29:-1;;;;160:49;;;3857:412:13;;;;3893:375;3857:412;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;3835:434:13;;;4288:10;4284:231;;;4456:26;;;;4401:25;;;;:99;;;:33;:99;:::i;:::-;4373:25;;;:127;4284:231;-1:-1:-1;3050:3:13;;3006:1519;;;-1:-1:-1;4568:14:13;;-1:-1:-1;;1505:13:17;1531:16;:14;:16::i;:::-;1505:43;-1:-1:-1;1562:26:17;;;;1558:306;;1734:13;1784:5;1763:9;1751;:21;1775:5;1751:29;1750:39;;;;;;1734:55;;1803:3;:16;;;1820:25;:23;:25::i;:::-;1847:5;1803:50;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1803:50:17;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1803:50:17;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;1803:50:17;;;;;;;;;;1558:306;;2314:2275:13;;;;;;;;;;:::o;2581:324:50:-;2727:114;;2703:21;;2763:32;;2727:114;;2809:2;;2825:6;;2727:114;;;;;;;;22:32:-1;26:21;;;22:32;6:49;;2727:114:50;;;49:4:-1;25:18;;61:17;;2727:114:50;182:15:-1;2727:114:50;;;;179:29:-1;;;;160:49;;;2727:114:50;-1:-1:-1;2851:47:50;2882:5;2727:114;2851:30;:47::i;:::-;2581:324;;;;:::o;14133:679:64:-;14254:14;14299:5;14307:2;14299:10;14288:1;:8;:21;14284:297;;;14325:245;14347:222;14409:92;14519:1;:8;14545:5;14553:2;14545:10;14347:44;:222::i;:::-;14325:21;:245::i;:::-;-1:-1:-1;14661:2:64;14759:13;;;;;14753:20;14652:11;;;14133:679;;;;;:::o;965:364:70:-;1051:7;1082:1;1078;:5;1074:227;;;1099:191;1121:168;1178:59;1255:1;1274;1121:39;:168::i;1099:191::-;-1:-1:-1;1317:5:70;;;965:364::o;6401:173:60:-;1715:42;6401:173;:::o;1866:135:70:-;1951:7;1985:1;1981;:5;:13;;1993:1;1981:13;;;1989:1;1981:13;1974:20;1866:135;-1:-1:-1;;;1866:135:70:o;3189:300:55:-;3353:21;3406:46;3440:11;3406:25;:9;3424:6;3406:25;:17;:25;:::i;:::-;:33;:46;:33;:46;:::i;:::-;3390:62;3189:300;-1:-1:-1;;;;3189:300:55:o;1335:383:70:-;1421:7;1456:5;;;1475;;;1471:223;;;1496:187;1518:164;1575:55;1648:1;1667;1518:39;:164::i;7730:125:60:-;2571:42;7730:125;:::o;7985:150::-;2718:42;7985:150;:::o;6120:571:50:-;6252:15;6269:23;6296:6;:11;;6308:8;6296:21;;;;;;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;6251:66:50;;;;6331:10;6327:315;;;6361:17;;6357:67;;6403:7;;;;6357:67;6441:10;:17;6462:2;6441:23;6437:195;;;6484:14;6501:35;6522:10;6534:1;6501:20;:35::i;:::-;6484:52;;6558:6;6568:1;6558:11;6554:64;;;6593:7;;;;;6554:64;6437:195;;6651:33;6673:10;6651:21;:33::i;6120:571::-;;;:::o;1292:378:65:-;1480:12;1232:10;1551:37;;1602:9;1625:6;1645:8;1515:148;;;;;;;;;;;;;;;22:32:-1;26:21;;;22:32;6:49;;1515:148:65;;;49:4:-1;25:18;;61:17;;1515:148:65;182:15:-1;1515:148:65;;;;179:29:-1;;;;160:49;;;1515:148:65;-1:-1:-1;1292:378:65;;;;;:::o;1511:170:69:-;1654:9;1648:16;1641:4;1630:9;1626:20;1619:46;731:322:71;884:12;196:10;955:28;;997:9;1020:1;1035;919:127;;;;;;;;;;;122:448:70;208:7;235:6;231:45;;-1:-1:-1;264:1:70;257:8;;231:45;297:5;;;301:1;297;:5;:1;316:5;;;;;:10;312:234;;342:193;364:170;421:61;500:1;519;364:39;:170::i;576:383::-;662:7;689:6;685:223;;711:186;733:163;790:54;862:1;881;733:39;:163::i;711:186::-;917:9;933:1;929;:5;;;;;;;576:383;-1:-1:-1;;;;576:383:70:o;15929:220:64:-;16050:14;16097:21;16109:1;16112:5;16097:11;:21::i;1203:5945:13:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;5:130:-1:-;72:20;;97:33;72:20;97:33;;1243:336;;;1357:3;1350:4;1342:6;1338:17;1334:27;1324:2;;-1:-1;;1365:12;1324:2;-1:-1;1395:20;;1435:18;1424:30;;1421:2;;;-1:-1;;1457:12;1421:2;1501:4;1493:6;1489:17;1477:29;;1552:3;1501:4;1532:17;1493:6;1518:32;;1515:41;1512:2;;;1569:1;;1559:12;1512:2;1317:262;;;;;;1588:432;;1685:3;1678:4;1670:6;1666:17;1662:27;1652:2;;-1:-1;;1693:12;1652:2;1740:6;1727:20;14374:18;14366:6;14363:30;14360:2;;;-1:-1;;14396:12;14360:2;1762:60;14537:4;14469:9;1678:4;14454:6;14450:17;14446:33;14527:15;1762:60;;;1753:69;;1842:6;1835:5;1828:21;1946:3;14537:4;1937:6;1870;1928:16;;1925:25;1922:2;;;1963:1;;1953:12;1922:2;16710:6;14537:4;1870:6;1866:17;14537:4;1904:5;1900:16;16687:30;16766:1;16748:16;;;14537:4;16748:16;16741:27;1904:5;1645:375;-1:-1;;1645:375;3234:558;;;3408:2;3396:9;3387:7;3383:23;3379:32;3376:2;;;-1:-1;;3414:12;3376:2;230:6;217:20;242:41;277:5;242:41;;;3466:71;-1:-1;3602:2;3587:18;;;3574:32;3626:18;3615:30;;;3612:2;;;-1:-1;;3648:12;3612:2;3759:6;3748:9;3744:22;479:3;472:4;464:6;460:17;456:27;446:2;;-1:-1;;487:12;446:2;534:6;521:20;507:34;;3626:18;14075:6;14072:30;14069:2;;;-1:-1;;14105:12;14069:2;556:100;3602:2;;14142:6;14138:17;14203:15;556:100;;;684:21;;;741:14;;;;716:17;;;-1:-1;821:257;846:6;843:1;840:13;821:257;;;929:3;916:17;720:6;904:30;2184:4;2163:19;904:30;2167:3;2163:19;;2159:30;2156:2;;;-1:-1;;2192:12;2156:2;2220:20;2184:4;2220:20;;;2324:49;2369:3;3602:2;904:30;;2324:49;;;2306:16;2299:75;3408:2;904:30;2501:22;3023:20;3602:2;2466:5;2462:16;2455:75;2658:22;904:30;2658:22;3023:20;3408:2;2623:5;2619:16;2612:75;2184:4;904:30;2767:18;2754:32;3626:18;2798:6;2795:30;2792:2;;;-1:-1;;2828:12;2792:2;2873:54;2923:3;3602:2;2914:6;904:30;2899:22;;2873:54;;;2658:22;2855:16;;2848:80;-1:-1;941:74;;-1:-1;1029:14;;;;1057;;;;868:1;861:9;821:257;;;-1:-1;3370:422;;3668:108;;-1:-1;3370:422;-1:-1;;;;;;;;3370:422;3799:1119;;;;;;;;;4024:3;4012:9;4003:7;3999:23;3995:33;3992:2;;;-1:-1;;4031:12;3992:2;85:6;72:20;97:33;124:5;97:33;;;4083:63;-1:-1;4183:2;4222:22;;72:20;97:33;72:20;97:33;;;4191:63;-1:-1;4291:2;4330:22;;72:20;97:33;72:20;97:33;;;4299:63;-1:-1;4399:2;4438:22;;72:20;97:33;72:20;97:33;;;4407:63;-1:-1;4507:3;4547:22;;3023:20;;-1:-1;4616:3;4656:22;;3023:20;;-1:-1;4753:3;4738:19;;4725:33;4778:18;4767:30;;4764:2;;;-1:-1;;4800:12;4764:2;4838:64;4894:7;4885:6;4874:9;4870:22;4838:64;;;3986:932;;;;-1:-1;3986:932;;-1:-1;3986:932;;;;;;4828:74;-1:-1;;;3986:932;4925:867;;;;;;;5116:3;5104:9;5095:7;5091:23;5087:33;5084:2;;;-1:-1;;5123:12;5084:2;85:6;72:20;97:33;124:5;97:33;;;5175:63;-1:-1;5275:2;5314:22;;72:20;97:33;72:20;97:33;;;5283:63;-1:-1;5383:2;5422:22;;72:20;97:33;72:20;97:33;;;5391:63;-1:-1;5491:2;5530:22;;3023:20;;-1:-1;5627:3;5612:19;;5599:33;5652:18;5641:30;;5638:2;;;-1:-1;;5674:12;5638:2;5712:64;5768:7;5759:6;5748:9;5744:22;5712:64;;;5078:714;;;;-1:-1;5078:714;;-1:-1;5078:714;;5702:74;;5078:714;-1:-1;;;5078:714;5799:490;;;;5939:2;5927:9;5918:7;5914:23;5910:32;5907:2;;;-1:-1;;5945:12;5907:2;1172:6;1159:20;5997:63;;6125:2;6114:9;6110:18;6097:32;6149:18;6141:6;6138:30;6135:2;;;-1:-1;;6171:12;6135:2;6209:64;6265:7;6256:6;6245:9;6241:22;6209:64;;;5901:388;;6199:74;;-1:-1;6199:74;;-1:-1;;;;5901:388;6296:263;;6411:2;6399:9;6390:7;6386:23;6382:32;6379:2;;;-1:-1;;6417:12;6379:2;-1:-1;3171:13;;6373:186;-1:-1;6373:186;9051:262;;7291:5;14642:12;7402:52;7447:6;7442:3;7435:4;7428:5;7424:16;7402:52;;;7466:16;;;;;9176:137;-1:-1;;9176:137;9320:213;16154:42;16143:54;;;;6637:37;;9438:2;9423:18;;9409:124;9540:959;;16154:42;;16147:5;16143:54;6644:3;6637:37;16154:42;16147:5;16143:54;10005:2;9994:9;9990:18;6637:37;16154:42;16147:5;16143:54;10088:2;10077:9;10073:18;6637:37;16154:42;16147:5;16143:54;10171:2;10160:9;10156:18;6637:37;;9032:5;10254:3;10243:9;10239:19;9002:37;9032:5;10338:3;10327:9;10323:19;9002:37;9840:3;10376;10365:9;10361:19;10354:49;7628:5;14642:12;14926:6;9840:3;9829:9;9825:19;14914;14954:14;7721:52;7766:6;14954:14;9829:9;14954:14;10005:2;7747:5;7743:16;7721:52;;;14954:14;17143:7;17147:2;7816:6;17127:14;17123:28;9829:9;7785:39;;10409:80;;;;9811:688;;;;;;;;;;;10506:763;;16154:42;;16147:5;16143:54;6644:3;6637:37;16154:42;16147:5;16143:54;10929:2;10918:9;10914:18;6637:37;16154:42;16147:5;16143:54;11012:2;11001:9;10997:18;6637:37;;9032:5;11095:2;11084:9;11080:18;9002:37;10764:3;11132;11121:9;11117:19;11110:49;14926:6;10764:3;10753:9;10749:19;14914;16710:6;16705:3;14954:14;10753:9;14954:14;16687:30;16748:16;;;14954:14;16748:16;;;16741:27;;;;17147:2;17127:14;;;17143:7;17123:28;7078:39;;;10735:534;-1:-1;;;;;10735:534;11276:324;16154:42;16143:54;;;;6637:37;;11586:2;11571:18;;9002:37;11422:2;11407:18;;11393:207;11607:209;15662:66;15651:78;;;;6755:36;;11723:2;11708:18;;11694:122;11823:473;12016:2;12001:18;;17254:1;17244:12;;17234:2;;17260:9;17234:2;7926:69;;;12199:2;12184:18;;9002:37;;;;12282:2;12267:18;;;9002:37;11987:309;;12303:503;12511:2;12496:18;;17388:1;17378:12;;17368:2;;17394:9;12813:407;13004:2;13018:47;;;8433:2;12989:18;;;14914:19;8469:30;14954:14;;;8449:51;8519:12;;;12975:245;13227:407;13418:2;13432:47;;;8770:2;13403:18;;;14914:19;8806:34;14954:14;;;8786:55;8875:10;8861:12;;;8854:32;8905:12;;;13389:245;13641:256;13703:2;13697:9;13729:17;;;13804:18;13789:34;;13825:22;;;13786:62;13783:2;;;13861:1;;13851:12;13783:2;13703;13870:22;13681:216;;-1:-1;13681:216;16783:268;16848:1;16855:101;16869:6;16866:1;16863:13;16855:101;;;16936:11;;;16930:18;16917:11;;;16910:39;16891:2;16884:10;16855:101;;;16971:6;16968:1;16965:13;16962:2;;;-1:-1;;16848:1;17018:16;;17011:27;16832:219;17417:117;16154:42;17504:5;16143:54;17479:5;17476:35;17466:2;;17525:1;;17515:12;17466:2;17460:74;"
            }
        }
    },
    "sourceTreeHashHex": "0xf882628f10c749825fa5a47761c9f7e6b82734aac6d68cc8fea00666fbeaff0d",
    "sources": {
        "./DexForwarderBridge.sol": {
            "id": 13
        },
        "@0x/contracts-erc20/contracts/src/interfaces/IERC20Token.sol": {
            "id": 51
        },
        "@0x/contracts-erc20/contracts/src/LibERC20Token.sol": {
            "id": 50
        },
        "@0x/contracts-utils/contracts/src/LibRichErrors.sol": {
            "id": 69
        },
        "@0x/contracts-utils/contracts/src/LibBytes.sol": {
            "id": 64
        },
        "@0x/contracts-utils/contracts/src/LibBytesRichErrors.sol": {
            "id": 65
        },
        "@0x/contracts-exchange-libs/contracts/src/IWallet.sol": {
            "id": 53
        },
        "@0x/contracts-exchange-libs/contracts/src/LibMath.sol": {
            "id": 55
        },
        "@0x/contracts-utils/contracts/src/LibSafeMath.sol": {
            "id": 70
        },
        "@0x/contracts-utils/contracts/src/LibSafeMathRichErrors.sol": {
            "id": 71
        },
        "@0x/contracts-exchange-libs/contracts/src/LibMathRichErrors.sol": {
            "id": 56
        },
        "@0x/contracts-utils/contracts/src/DeploymentConstants.sol": {
            "id": 60
        },
        "../interfaces/IERC20Bridge.sol": {
            "id": 31
        },
        "./MixinGasToken.sol": {
            "id": 17
        },
        "../interfaces/IGasToken.sol": {
            "id": 33
        }
    },
    "sourceCodes": {
        "./DexForwarderBridge.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/interfaces/IERC20Token.sol\";\nimport \"@0x/contracts-erc20/contracts/src/LibERC20Token.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/IWallet.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/LibMath.sol\";\nimport \"@0x/contracts-utils/contracts/src/DeploymentConstants.sol\";\nimport \"@0x/contracts-utils/contracts/src/LibBytes.sol\";\nimport \"@0x/contracts-utils/contracts/src/LibSafeMath.sol\";\nimport \"../interfaces/IERC20Bridge.sol\";\nimport \"./MixinGasToken.sol\";\n\n\n// solhint-disable space-after-comma, indent\ncontract DexForwarderBridge is\n    IERC20Bridge,\n    IWallet,\n    DeploymentConstants,\n    MixinGasToken\n{\n    using LibSafeMath for uint256;\n\n    /// @dev Data needed to reconstruct a bridge call.\n    struct BridgeCall {\n        address target;\n        uint256 inputTokenAmount;\n        uint256 outputTokenAmount;\n        bytes bridgeData;\n    }\n\n    /// @dev Intermediate state variables used by `bridgeTransferFrom()`, in\n    ///      struct form to get around stack limits.\n    struct TransferFromState {\n        address inputToken;\n        uint256 initialInputTokenBalance;\n        uint256 callInputTokenAmount;\n        uint256 callOutputTokenAmount;\n        uint256 totalInputTokenSold;\n        BridgeCall[] calls;\n    }\n\n    /// @dev Spends this contract's entire balance of input tokens by forwarding\n    /// them to other bridges. Reverts if the entire balance is not spent.\n    /// @param outputToken The token being bought.\n    /// @param to The recipient of the bought tokens.\n    /// @param bridgeData The abi-encoded input token address.\n    /// @return success The magic bytes if successful.\n    function bridgeTransferFrom(\n        address outputToken,\n        address /* from */,\n        address to,\n        uint256 /* amount */,\n        bytes calldata bridgeData\n    )\n        external\n        freesGasTokensFromCollector\n        returns (bytes4 success)\n    {\n        require(\n            msg.sender == _getERC20BridgeProxyAddress(),\n            \"DexForwarderBridge/SENDER_NOT_AUTHORIZED\"\n        );\n        TransferFromState memory state;\n        (\n            state.inputToken,\n            state.calls\n        ) = abi.decode(bridgeData, (address, BridgeCall[]));\n\n        state.initialInputTokenBalance =\n            IERC20Token(state.inputToken).balanceOf(address(this));\n\n        for (uint256 i = 0; i < state.calls.length; ++i) {\n            // Stop if the we've sold all our input tokens.\n            if (state.totalInputTokenSold >= state.initialInputTokenBalance) {\n                break;\n            }\n\n            // Compute token amounts.\n            state.callInputTokenAmount = LibSafeMath.min256(\n                state.calls[i].inputTokenAmount,\n                state.initialInputTokenBalance.safeSub(state.totalInputTokenSold)\n            );\n            state.callOutputTokenAmount = LibMath.getPartialAmountFloor(\n                state.callInputTokenAmount,\n                state.calls[i].inputTokenAmount,\n                state.calls[i].outputTokenAmount\n            );\n\n            // Execute the call in a new context so we can recoup transferred\n            // funds by reverting.\n            (bool didSucceed, ) = address(this)\n                .call(abi.encodeWithSelector(\n                    this.executeBridgeCall.selector,\n                    state.calls[i].target,\n                    to,\n                    state.inputToken,\n                    outputToken,\n                    state.callInputTokenAmount,\n                    state.callOutputTokenAmount,\n                    state.calls[i].bridgeData\n                ));\n\n            if (didSucceed) {\n                // Increase the amount of tokens sold.\n                state.totalInputTokenSold = state.totalInputTokenSold.safeAdd(\n                    state.callInputTokenAmount\n                );\n            }\n        }\n        // Always succeed.\n        return BRIDGE_SUCCESS;\n    }\n\n    /// @dev Transfers `inputToken` token to a bridge contract then calls\n    ///      its `bridgeTransferFrom()`. This is executed in separate context\n    ///      so we can revert the transfer on error. This can only be called\n    //       by this contract itself.\n    /// @param bridge The bridge contract.\n    /// @param to The recipient of `outputToken` tokens.\n    /// @param inputToken The input token.\n    /// @param outputToken The output token.\n    /// @param inputTokenAmount The amount of input tokens to transfer to `bridge`.\n    /// @param outputTokenAmount The amount of expected output tokens to be sent\n    ///        to `to` by `bridge`.\n    function executeBridgeCall(\n        address bridge,\n        address to,\n        address inputToken,\n        address outputToken,\n        uint256 inputTokenAmount,\n        uint256 outputTokenAmount,\n        bytes calldata bridgeData\n    )\n        external\n    {\n        // Must be called through `bridgeTransferFrom()`.\n        require(msg.sender == address(this), \"DexForwarderBridge/ONLY_SELF\");\n        // `bridge` must not be this contract.\n        require(bridge != address(this));\n\n        // Get the starting balance of output tokens for `to`.\n        uint256 initialRecipientBalance = IERC20Token(outputToken).balanceOf(to);\n\n        // Transfer input tokens to the bridge.\n        LibERC20Token.transfer(inputToken, bridge, inputTokenAmount);\n\n        // Call the bridge.\n        (bool didSucceed, bytes memory resultData) =\n            bridge.call(abi.encodeWithSelector(\n                IERC20Bridge(0).bridgeTransferFrom.selector,\n                outputToken,\n                bridge,\n                to,\n                outputTokenAmount,\n                bridgeData\n            ));\n\n        // Revert if the call failed or not enough tokens were bought.\n        // This will also undo the token transfer.\n        require(\n            didSucceed\n            && resultData.length == 32\n            && LibBytes.readBytes32(resultData, 0) == bytes32(BRIDGE_SUCCESS)\n            && IERC20Token(outputToken).balanceOf(to).safeSub(initialRecipientBalance) >= outputTokenAmount\n        );\n    }\n\n    /// @dev `SignatureType.Wallet` callback, so that this bridge can be the maker\n    ///      and sign for itself in orders. Always succeeds.\n    /// @return magicValue Magic success bytes, always.\n    function isValidSignature(\n        bytes32,\n        bytes calldata\n    )\n        external\n        view\n        returns (bytes4 magicValue)\n    {\n        return LEGACY_WALLET_MAGIC_VALUE;\n    }\n}\n",
        "@0x/contracts-erc20/contracts/src/interfaces/IERC20Token.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\ncontract IERC20Token {\n\n    // solhint-disable no-simple-event-func-name\n    event Transfer(\n        address indexed _from,\n        address indexed _to,\n        uint256 _value\n    );\n\n    event Approval(\n        address indexed _owner,\n        address indexed _spender,\n        uint256 _value\n    );\n\n    /// @dev send `value` token to `to` from `msg.sender`\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transfer(address _to, uint256 _value)\n        external\n        returns (bool);\n\n    /// @dev send `value` token to `to` from `from` on the condition it is approved by `from`\n    /// @param _from The address of the sender\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _value\n    )\n        external\n        returns (bool);\n\n    /// @dev `msg.sender` approves `_spender` to spend `_value` tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @param _value The amount of wei to be approved for transfer\n    /// @return Always true if the call has enough gas to complete execution\n    function approve(address _spender, uint256 _value)\n        external\n        returns (bool);\n\n    /// @dev Query total supply of token\n    /// @return Total supply of token\n    function totalSupply()\n        external\n        view\n        returns (uint256);\n\n    /// @param _owner The address from which the balance will be retrieved\n    /// @return Balance of owner\n    function balanceOf(address _owner)\n        external\n        view\n        returns (uint256);\n\n    /// @param _owner The address of the account owning tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address _owner, address _spender)\n        external\n        view\n        returns (uint256);\n}\n",
        "@0x/contracts-erc20/contracts/src/LibERC20Token.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\nimport \"@0x/contracts-utils/contracts/src/LibRichErrors.sol\";\nimport \"@0x/contracts-utils/contracts/src/LibBytes.sol\";\nimport \"../src/interfaces/IERC20Token.sol\";\n\n\nlibrary LibERC20Token {\n    bytes constant private DECIMALS_CALL_DATA = hex\"313ce567\";\n\n    /// @dev Calls `IERC20Token(token).approve()`.\n    ///      Reverts if `false` is returned or if the return\n    ///      data length is nonzero and not 32 bytes.\n    /// @param token The address of the token contract.\n    /// @param spender The address that receives an allowance.\n    /// @param allowance The allowance to set.\n    function approve(\n        address token,\n        address spender,\n        uint256 allowance\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            IERC20Token(0).approve.selector,\n            spender,\n            allowance\n        );\n        _callWithOptionalBooleanResult(token, callData);\n    }\n\n    /// @dev Calls `IERC20Token(token).approve()` and sets the allowance to the\n    ///      maximum if the current approval is not already >= an amount.\n    ///      Reverts if `false` is returned or if the return\n    ///      data length is nonzero and not 32 bytes.\n    /// @param token The address of the token contract.\n    /// @param spender The address that receives an allowance.\n    /// @param amount The minimum allowance needed.\n    function approveIfBelow(\n        address token,\n        address spender,\n        uint256 amount\n    )\n        internal\n    {\n        if (IERC20Token(token).allowance(address(this), spender) < amount) {\n            approve(token, spender, uint256(-1));\n        }\n    }\n\n    /// @dev Calls `IERC20Token(token).transfer()`.\n    ///      Reverts if `false` is returned or if the return\n    ///      data length is nonzero and not 32 bytes.\n    /// @param token The address of the token contract.\n    /// @param to The address that receives the tokens\n    /// @param amount Number of tokens to transfer.\n    function transfer(\n        address token,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            IERC20Token(0).transfer.selector,\n            to,\n            amount\n        );\n        _callWithOptionalBooleanResult(token, callData);\n    }\n\n    /// @dev Calls `IERC20Token(token).transferFrom()`.\n    ///      Reverts if `false` is returned or if the return\n    ///      data length is nonzero and not 32 bytes.\n    /// @param token The address of the token contract.\n    /// @param from The owner of the tokens.\n    /// @param to The address that receives the tokens\n    /// @param amount Number of tokens to transfer.\n    function transferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            IERC20Token(0).transferFrom.selector,\n            from,\n            to,\n            amount\n        );\n        _callWithOptionalBooleanResult(token, callData);\n    }\n\n    /// @dev Retrieves the number of decimals for a token.\n    ///      Returns `18` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @return tokenDecimals The number of decimals places for the token.\n    function decimals(address token)\n        internal\n        view\n        returns (uint8 tokenDecimals)\n    {\n        tokenDecimals = 18;\n        (bool didSucceed, bytes memory resultData) = token.staticcall(DECIMALS_CALL_DATA);\n        if (didSucceed && resultData.length == 32) {\n            tokenDecimals = uint8(LibBytes.readUint256(resultData, 0));\n        }\n    }\n\n    /// @dev Retrieves the allowance for a token, owner, and spender.\n    ///      Returns `0` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @param owner The owner of the tokens.\n    /// @param spender The address the spender.\n    /// @return allowance The allowance for a token, owner, and spender.\n    function allowance(address token, address owner, address spender)\n        internal\n        view\n        returns (uint256 allowance_)\n    {\n        (bool didSucceed, bytes memory resultData) = token.staticcall(\n            abi.encodeWithSelector(\n                IERC20Token(0).allowance.selector,\n                owner,\n                spender\n            )\n        );\n        if (didSucceed && resultData.length == 32) {\n            allowance_ = LibBytes.readUint256(resultData, 0);\n        }\n    }\n\n    /// @dev Retrieves the balance for a token owner.\n    ///      Returns `0` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @param owner The owner of the tokens.\n    /// @return balance The token balance of an owner.\n    function balanceOf(address token, address owner)\n        internal\n        view\n        returns (uint256 balance)\n    {\n        (bool didSucceed, bytes memory resultData) = token.staticcall(\n            abi.encodeWithSelector(\n                IERC20Token(0).balanceOf.selector,\n                owner\n            )\n        );\n        if (didSucceed && resultData.length == 32) {\n            balance = LibBytes.readUint256(resultData, 0);\n        }\n    }\n\n    /// @dev Executes a call on address `target` with calldata `callData`\n    ///      and asserts that either nothing was returned or a single boolean\n    ///      was returned equal to `true`.\n    /// @param target The call target.\n    /// @param callData The abi-encoded call data.\n    function _callWithOptionalBooleanResult(\n        address target,\n        bytes memory callData\n    )\n        private\n    {\n        (bool didSucceed, bytes memory resultData) = target.call(callData);\n        if (didSucceed) {\n            if (resultData.length == 0) {\n                return;\n            }\n            if (resultData.length == 32) {\n                uint256 result = LibBytes.readUint256(resultData, 0);\n                if (result == 1) {\n                    return;\n                }\n            }\n        }\n        LibRichErrors.rrevert(resultData);\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/LibRichErrors.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\nlibrary LibRichErrors {\n\n    // bytes4(keccak256(\"Error(string)\"))\n    bytes4 internal constant STANDARD_ERROR_SELECTOR =\n        0x08c379a0;\n\n    // solhint-disable func-name-mixedcase\n    /// @dev ABI encode a standard, string revert error payload.\n    ///      This is the same payload that would be included by a `revert(string)`\n    ///      solidity statement. It has the function signature `Error(string)`.\n    /// @param message The error string.\n    /// @return The ABI encoded error.\n    function StandardError(\n        string memory message\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            STANDARD_ERROR_SELECTOR,\n            bytes(message)\n        );\n    }\n    // solhint-enable func-name-mixedcase\n\n    /// @dev Reverts an encoded rich revert reason `errorData`.\n    /// @param errorData ABI encoded error data.\n    function rrevert(bytes memory errorData)\n        internal\n        pure\n    {\n        assembly {\n            revert(add(errorData, 0x20), mload(errorData))\n        }\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/LibBytes.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\nimport \"./LibBytesRichErrors.sol\";\nimport \"./LibRichErrors.sol\";\n\n\nlibrary LibBytes {\n\n    using LibBytes for bytes;\n\n    /// @dev Gets the memory address for a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of byte array. This\n    ///         points to the header of the byte array which contains\n    ///         the length.\n    function rawAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := input\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Gets the memory address for the contents of a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of the contents of the byte array.\n    function contentAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := add(input, 32)\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Copies `length` bytes from memory location `source` to `dest`.\n    /// @param dest memory address to copy bytes to.\n    /// @param source memory address to copy bytes from.\n    /// @param length number of bytes to copy.\n    function memCopy(\n        uint256 dest,\n        uint256 source,\n        uint256 length\n    )\n        internal\n        pure\n    {\n        if (length < 32) {\n            // Handle a partial word by reading destination and masking\n            // off the bits we are interested in.\n            // This correctly handles overlap, zero lengths and source == dest\n            assembly {\n                let mask := sub(exp(256, sub(32, length)), 1)\n                let s := and(mload(source), not(mask))\n                let d := and(mload(dest), mask)\n                mstore(dest, or(s, d))\n            }\n        } else {\n            // Skip the O(length) loop when source == dest.\n            if (source == dest) {\n                return;\n            }\n\n            // For large copies we copy whole words at a time. The final\n            // word is aligned to the end of the range (instead of after the\n            // previous) to handle partial words. So a copy will look like this:\n            //\n            //  ####\n            //      ####\n            //          ####\n            //            ####\n            //\n            // We handle overlap in the source and destination range by\n            // changing the copying direction. This prevents us from\n            // overwriting parts of source that we still need to copy.\n            //\n            // This correctly handles source == dest\n            //\n            if (source > dest) {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because it\n                    // is easier to compare with in the loop, and these\n                    // are also the addresses we need for copying the\n                    // last bytes.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the last 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the last bytes in\n                    // source already due to overlap.\n                    let last := mload(sEnd)\n\n                    // Copy whole words front to back\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} lt(source, sEnd) {} {\n                        mstore(dest, mload(source))\n                        source := add(source, 32)\n                        dest := add(dest, 32)\n                    }\n\n                    // Write the last 32 bytes\n                    mstore(dEnd, last)\n                }\n            } else {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because those\n                    // are the starting points when copying a word at the end.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the first 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the first bytes in\n                    // source already due to overlap.\n                    let first := mload(source)\n\n                    // Copy whole words back to front\n                    // We use a signed comparisson here to allow dEnd to become\n                    // negative (happens when source and dest < 32). Valid\n                    // addresses in local memory will never be larger than\n                    // 2**255, so they can be safely re-interpreted as signed.\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} slt(dest, dEnd) {} {\n                        mstore(dEnd, mload(sEnd))\n                        sEnd := sub(sEnd, 32)\n                        dEnd := sub(dEnd, 32)\n                    }\n\n                    // Write the first 32 bytes\n                    mstore(dest, first)\n                }\n            }\n        }\n    }\n\n    /// @dev Returns a slices from a byte array.\n    /// @param b The byte array to take a slice from.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function slice(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure and copy contents\n        result = new bytes(to - from);\n        memCopy(\n            result.contentAddress(),\n            b.contentAddress() + from,\n            result.length\n        );\n        return result;\n    }\n\n    /// @dev Returns a slice from a byte array without preserving the input.\n    /// @param b The byte array to take a slice from. Will be destroyed in the process.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    /// @dev When `from == 0`, the original array will match the slice. In other cases its state will be corrupted.\n    function sliceDestructive(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure around [from, to) in-place.\n        assembly {\n            result := add(b, from)\n            mstore(result, sub(to, from))\n        }\n        return result;\n    }\n\n    /// @dev Pops the last byte off of a byte array by modifying its length.\n    /// @param b Byte array that will be modified.\n    /// @return The byte that was popped off.\n    function popLastByte(bytes memory b)\n        internal\n        pure\n        returns (bytes1 result)\n    {\n        if (b.length == 0) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.LengthGreaterThanZeroRequired,\n                b.length,\n                0\n            ));\n        }\n\n        // Store last byte.\n        result = b[b.length - 1];\n\n        assembly {\n            // Decrement length of byte array.\n            let newLen := sub(mload(b), 1)\n            mstore(b, newLen)\n        }\n        return result;\n    }\n\n    /// @dev Tests equality of two byte arrays.\n    /// @param lhs First byte array to compare.\n    /// @param rhs Second byte array to compare.\n    /// @return True if arrays are the same. False otherwise.\n    function equals(\n        bytes memory lhs,\n        bytes memory rhs\n    )\n        internal\n        pure\n        returns (bool equal)\n    {\n        // Keccak gas cost is 30 + numWords * 6. This is a cheap way to compare.\n        // We early exit on unequal lengths, but keccak would also correctly\n        // handle this.\n        return lhs.length == rhs.length && keccak256(lhs) == keccak256(rhs);\n    }\n\n    /// @dev Reads an address from a position in a byte array.\n    /// @param b Byte array containing an address.\n    /// @param index Index in byte array of address.\n    /// @return address from byte array.\n    function readAddress(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (address result)\n    {\n        if (b.length < index + 20) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Read address from array memory\n        assembly {\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 20-byte mask to obtain address\n            result := and(mload(add(b, index)), 0xffffffffffffffffffffffffffffffffffffffff)\n        }\n        return result;\n    }\n\n    /// @dev Writes an address into a specific position in a byte array.\n    /// @param b Byte array to insert address into.\n    /// @param index Index in byte array of address.\n    /// @param input Address to put into byte array.\n    function writeAddress(\n        bytes memory b,\n        uint256 index,\n        address input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 20) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Store address into array memory\n        assembly {\n            // The address occupies 20 bytes and mstore stores 32 bytes.\n            // First fetch the 32-byte word where we'll be storing the address, then\n            // apply a mask so we have only the bytes in the word that the address will not occupy.\n            // Then combine these bytes with the address and store the 32 bytes back to memory with mstore.\n\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 12-byte mask to obtain extra bytes occupying word of memory where we'll store the address\n            let neighbors := and(\n                mload(add(b, index)),\n                0xffffffffffffffffffffffff0000000000000000000000000000000000000000\n            )\n\n            // Make sure input address is clean.\n            // (Solidity does not guarantee this)\n            input := and(input, 0xffffffffffffffffffffffffffffffffffffffff)\n\n            // Store the neighbors and address into memory\n            mstore(add(b, index), xor(input, neighbors))\n        }\n    }\n\n    /// @dev Reads a bytes32 value from a position in a byte array.\n    /// @param b Byte array containing a bytes32 value.\n    /// @param index Index in byte array of bytes32 value.\n    /// @return bytes32 value from byte array.\n    function readBytes32(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        if (b.length < index + 32) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            result := mload(add(b, index))\n        }\n        return result;\n    }\n\n    /// @dev Writes a bytes32 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input bytes32 to put into byte array.\n    function writeBytes32(\n        bytes memory b,\n        uint256 index,\n        bytes32 input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 32) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            mstore(add(b, index), input)\n        }\n    }\n\n    /// @dev Reads a uint256 value from a position in a byte array.\n    /// @param b Byte array containing a uint256 value.\n    /// @param index Index in byte array of uint256 value.\n    /// @return uint256 value from byte array.\n    function readUint256(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (uint256 result)\n    {\n        result = uint256(readBytes32(b, index));\n        return result;\n    }\n\n    /// @dev Writes a uint256 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input uint256 to put into byte array.\n    function writeUint256(\n        bytes memory b,\n        uint256 index,\n        uint256 input\n    )\n        internal\n        pure\n    {\n        writeBytes32(b, index, bytes32(input));\n    }\n\n    /// @dev Reads an unpadded bytes4 value from a position in a byte array.\n    /// @param b Byte array containing a bytes4 value.\n    /// @param index Index in byte array of bytes4 value.\n    /// @return bytes4 value from byte array.\n    function readBytes4(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes4 result)\n    {\n        if (b.length < index + 4) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsFourRequired,\n                b.length,\n                index + 4\n            ));\n        }\n\n        // Arrays are prefixed by a 32 byte length field\n        index += 32;\n\n        // Read the bytes4 from array memory\n        assembly {\n            result := mload(add(b, index))\n            // Solidity does not require us to clean the trailing bytes.\n            // We do it anyway\n            result := and(result, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)\n        }\n        return result;\n    }\n\n    /// @dev Writes a new length to a byte array.\n    ///      Decreasing length will lead to removing the corresponding lower order bytes from the byte array.\n    ///      Increasing length may lead to appending adjacent in-memory bytes to the end of the byte array.\n    /// @param b Bytes array to write new length to.\n    /// @param length New length of byte array.\n    function writeLength(bytes memory b, uint256 length)\n        internal\n        pure\n    {\n        assembly {\n            mstore(b, length)\n        }\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/LibBytesRichErrors.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\nlibrary LibBytesRichErrors {\n\n    enum InvalidByteOperationErrorCodes {\n        FromLessThanOrEqualsToRequired,\n        ToLessThanOrEqualsLengthRequired,\n        LengthGreaterThanZeroRequired,\n        LengthGreaterThanOrEqualsFourRequired,\n        LengthGreaterThanOrEqualsTwentyRequired,\n        LengthGreaterThanOrEqualsThirtyTwoRequired,\n        LengthGreaterThanOrEqualsNestedBytesLengthRequired,\n        DestinationLengthGreaterThanOrEqualSourceLengthRequired\n    }\n\n    // bytes4(keccak256(\"InvalidByteOperationError(uint8,uint256,uint256)\"))\n    bytes4 internal constant INVALID_BYTE_OPERATION_ERROR_SELECTOR =\n        0x28006595;\n\n    // solhint-disable func-name-mixedcase\n    function InvalidByteOperationError(\n        InvalidByteOperationErrorCodes errorCode,\n        uint256 offset,\n        uint256 required\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            INVALID_BYTE_OPERATION_ERROR_SELECTOR,\n            errorCode,\n            offset,\n            required\n        );\n    }\n}\n",
        "@0x/contracts-exchange-libs/contracts/src/IWallet.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\n\ncontract IWallet {\n\n    bytes4 internal constant LEGACY_WALLET_MAGIC_VALUE = 0xb0671381;\n\n    /// @dev Validates a hash with the `Wallet` signature type.\n    /// @param hash Message hash that is signed.\n    /// @param signature Proof of signing.\n    /// @return magicValue `bytes4(0xb0671381)` if the signature check succeeds.\n    function isValidSignature(\n        bytes32 hash,\n        bytes calldata signature\n    )\n        external\n        view\n        returns (bytes4 magicValue);\n}\n",
        "@0x/contracts-exchange-libs/contracts/src/LibMath.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\nimport \"@0x/contracts-utils/contracts/src/LibSafeMath.sol\";\nimport \"@0x/contracts-utils/contracts/src/LibRichErrors.sol\";\nimport \"./LibMathRichErrors.sol\";\n\n\nlibrary LibMath {\n\n    using LibSafeMath for uint256;\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    ///      Reverts if rounding error is >= 0.1%\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return Partial value of target rounded down.\n    function safeGetPartialAmountFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        if (isRoundingErrorFloor(\n                numerator,\n                denominator,\n                target\n        )) {\n            LibRichErrors.rrevert(LibMathRichErrors.RoundingError(\n                numerator,\n                denominator,\n                target\n            ));\n        }\n\n        partialAmount = numerator.safeMul(target).safeDiv(denominator);\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    ///      Reverts if rounding error is >= 0.1%\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return Partial value of target rounded up.\n    function safeGetPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        if (isRoundingErrorCeil(\n                numerator,\n                denominator,\n                target\n        )) {\n            LibRichErrors.rrevert(LibMathRichErrors.RoundingError(\n                numerator,\n                denominator,\n                target\n            ));\n        }\n\n        // safeDiv computes `floor(a / b)`. We use the identity (a, b integer):\n        //       ceil(a / b) = floor((a + b - 1) / b)\n        // To implement `ceil(a / b)` using safeDiv.\n        partialAmount = numerator.safeMul(target)\n            .safeAdd(denominator.safeSub(1))\n            .safeDiv(denominator);\n\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return Partial value of target rounded down.\n    function getPartialAmountFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        partialAmount = numerator.safeMul(target).safeDiv(denominator);\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return Partial value of target rounded up.\n    function getPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        // safeDiv computes `floor(a / b)`. We use the identity (a, b integer):\n        //       ceil(a / b) = floor((a + b - 1) / b)\n        // To implement `ceil(a / b)` using safeDiv.\n        partialAmount = numerator.safeMul(target)\n            .safeAdd(denominator.safeSub(1))\n            .safeDiv(denominator);\n\n        return partialAmount;\n    }\n\n    /// @dev Checks if rounding error >= 0.1% when rounding down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to multiply with numerator/denominator.\n    /// @return Rounding error is present.\n    function isRoundingErrorFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bool isError)\n    {\n        if (denominator == 0) {\n            LibRichErrors.rrevert(LibMathRichErrors.DivisionByZeroError());\n        }\n\n        // The absolute rounding error is the difference between the rounded\n        // value and the ideal value. The relative rounding error is the\n        // absolute rounding error divided by the absolute value of the\n        // ideal value. This is undefined when the ideal value is zero.\n        //\n        // The ideal value is `numerator * target / denominator`.\n        // Let's call `numerator * target % denominator` the remainder.\n        // The absolute error is `remainder / denominator`.\n        //\n        // When the ideal value is zero, we require the absolute error to\n        // be zero. Fortunately, this is always the case. The ideal value is\n        // zero iff `numerator == 0` and/or `target == 0`. In this case the\n        // remainder and absolute error are also zero.\n        if (target == 0 || numerator == 0) {\n            return false;\n        }\n\n        // Otherwise, we want the relative rounding error to be strictly\n        // less than 0.1%.\n        // The relative error is `remainder / (numerator * target)`.\n        // We want the relative error less than 1 / 1000:\n        //        remainder / (numerator * denominator)  <  1 / 1000\n        // or equivalently:\n        //        1000 * remainder  <  numerator * target\n        // so we have a rounding error iff:\n        //        1000 * remainder  >=  numerator * target\n        uint256 remainder = mulmod(\n            target,\n            numerator,\n            denominator\n        );\n        isError = remainder.safeMul(1000) >= numerator.safeMul(target);\n        return isError;\n    }\n\n    /// @dev Checks if rounding error >= 0.1% when rounding up.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to multiply with numerator/denominator.\n    /// @return Rounding error is present.\n    function isRoundingErrorCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bool isError)\n    {\n        if (denominator == 0) {\n            LibRichErrors.rrevert(LibMathRichErrors.DivisionByZeroError());\n        }\n\n        // See the comments in `isRoundingError`.\n        if (target == 0 || numerator == 0) {\n            // When either is zero, the ideal value and rounded value are zero\n            // and there is no rounding error. (Although the relative error\n            // is undefined.)\n            return false;\n        }\n        // Compute remainder as before\n        uint256 remainder = mulmod(\n            target,\n            numerator,\n            denominator\n        );\n        remainder = denominator.safeSub(remainder) % denominator;\n        isError = remainder.safeMul(1000) >= numerator.safeMul(target);\n        return isError;\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/LibSafeMath.sol": "pragma solidity ^0.5.9;\n\nimport \"./LibRichErrors.sol\";\nimport \"./LibSafeMathRichErrors.sol\";\n\n\nlibrary LibSafeMath {\n\n    function safeMul(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        if (c / a != b) {\n            LibRichErrors.rrevert(LibSafeMathRichErrors.Uint256BinOpError(\n                LibSafeMathRichErrors.BinOpErrorCodes.MULTIPLICATION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function safeDiv(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b == 0) {\n            LibRichErrors.rrevert(LibSafeMathRichErrors.Uint256BinOpError(\n                LibSafeMathRichErrors.BinOpErrorCodes.DIVISION_BY_ZERO,\n                a,\n                b\n            ));\n        }\n        uint256 c = a / b;\n        return c;\n    }\n\n    function safeSub(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b > a) {\n            LibRichErrors.rrevert(LibSafeMathRichErrors.Uint256BinOpError(\n                LibSafeMathRichErrors.BinOpErrorCodes.SUBTRACTION_UNDERFLOW,\n                a,\n                b\n            ));\n        }\n        return a - b;\n    }\n\n    function safeAdd(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint256 c = a + b;\n        if (c < a) {\n            LibRichErrors.rrevert(LibSafeMathRichErrors.Uint256BinOpError(\n                LibSafeMathRichErrors.BinOpErrorCodes.ADDITION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function max256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a < b ? a : b;\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/LibSafeMathRichErrors.sol": "pragma solidity ^0.5.9;\n\n\nlibrary LibSafeMathRichErrors {\n\n    // bytes4(keccak256(\"Uint256BinOpError(uint8,uint256,uint256)\"))\n    bytes4 internal constant UINT256_BINOP_ERROR_SELECTOR =\n        0xe946c1bb;\n\n    // bytes4(keccak256(\"Uint256DowncastError(uint8,uint256)\"))\n    bytes4 internal constant UINT256_DOWNCAST_ERROR_SELECTOR =\n        0xc996af7b;\n\n    enum BinOpErrorCodes {\n        ADDITION_OVERFLOW,\n        MULTIPLICATION_OVERFLOW,\n        SUBTRACTION_UNDERFLOW,\n        DIVISION_BY_ZERO\n    }\n\n    enum DowncastErrorCodes {\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT32,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT64,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT96\n    }\n\n    // solhint-disable func-name-mixedcase\n    function Uint256BinOpError(\n        BinOpErrorCodes errorCode,\n        uint256 a,\n        uint256 b\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            UINT256_BINOP_ERROR_SELECTOR,\n            errorCode,\n            a,\n            b\n        );\n    }\n\n    function Uint256DowncastError(\n        DowncastErrorCodes errorCode,\n        uint256 a\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            UINT256_DOWNCAST_ERROR_SELECTOR,\n            errorCode,\n            a\n        );\n    }\n}\n",
        "@0x/contracts-exchange-libs/contracts/src/LibMathRichErrors.sol": "pragma solidity ^0.5.9;\n\n\nlibrary LibMathRichErrors {\n\n    // bytes4(keccak256(\"DivisionByZeroError()\"))\n    bytes internal constant DIVISION_BY_ZERO_ERROR =\n        hex\"a791837c\";\n\n    // bytes4(keccak256(\"RoundingError(uint256,uint256,uint256)\"))\n    bytes4 internal constant ROUNDING_ERROR_SELECTOR =\n        0x339f3de2;\n\n    // solhint-disable func-name-mixedcase\n    function DivisionByZeroError()\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return DIVISION_BY_ZERO_ERROR;\n    }\n\n    function RoundingError(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            ROUNDING_ERROR_SELECTOR,\n            numerator,\n            denominator,\n            target\n        );\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/DeploymentConstants.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\ncontract DeploymentConstants {\n\n    // solhint-disable separate-by-one-line-in-contract\n\n    // Mainnet addresses ///////////////////////////////////////////////////////\n    /// @dev Mainnet address of the WETH contract.\n    address constant private WETH_ADDRESS = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n    /// @dev Mainnet address of the KyberNetworkProxy contract.\n    address constant private KYBER_NETWORK_PROXY_ADDRESS = 0x9AAb3f75489902f3a48495025729a0AF77d4b11e;\n    /// @dev Mainnet address of the `UniswapExchangeFactory` contract.\n    address constant private UNISWAP_EXCHANGE_FACTORY_ADDRESS = 0xc0a47dFe034B400B47bDaD5FecDa2621de6c4d95;\n    /// @dev Mainnet address of the `UniswapV2Router01` contract.\n    address constant private UNISWAP_V2_ROUTER_01_ADDRESS = 0xf164fC0Ec4E93095b804a4795bBe1e041497b92a;\n    /// @dev Mainnet address of the Eth2Dai `MatchingMarket` contract.\n    address constant private ETH2DAI_ADDRESS = 0x794e6e91555438aFc3ccF1c5076A74F42133d08D;\n    /// @dev Mainnet address of the `ERC20BridgeProxy` contract\n    address constant private ERC20_BRIDGE_PROXY_ADDRESS = 0x8ED95d1746bf1E4dAb58d8ED4724f1Ef95B20Db0;\n    ///@dev Mainnet address of the `Dai` (multi-collateral) contract\n    address constant private DAI_ADDRESS = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\n    /// @dev Mainnet address of the `Chai` contract\n    address constant private CHAI_ADDRESS = 0x06AF07097C9Eeb7fD685c692751D5C66dB49c215;\n    /// @dev Mainnet address of the 0x DevUtils contract.\n    address constant private DEV_UTILS_ADDRESS = 0x74134CF88b21383713E096a5ecF59e297dc7f547;\n    /// @dev Kyber ETH pseudo-address.\n    address constant internal KYBER_ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n    /// @dev Mainnet address of the dYdX contract.\n    address constant private DYDX_ADDRESS = 0x1E0447b19BB6EcFdAe1e4AE1694b0C3659614e4e;\n    /// @dev Mainnet address of the GST2 contract\n    address constant private GST_ADDRESS = 0x0000000000b3F879cb30FE243b4Dfee438691c04;\n    /// @dev Mainnet address of the GST Collector\n    address constant private GST_COLLECTOR_ADDRESS = 0x000000D3b08566BE75A6DB803C03C85C0c1c5B96;\n\n    // Kovan addresses /////////////////////////////////////////////////////////\n    // /// @dev Kovan address of the WETH contract.\n    // address constant private WETH_ADDRESS = 0xd0A1E359811322d97991E03f863a0C30C2cF029C;\n    // /// @dev Kovan address of the KyberNetworkProxy contract.\n    // address constant private KYBER_NETWORK_PROXY_ADDRESS = 0x692f391bCc85cefCe8C237C01e1f636BbD70EA4D;\n    // /// @dev Kovan address of the `UniswapExchangeFactory` contract.\n    // address constant private UNISWAP_EXCHANGE_FACTORY_ADDRESS = 0xD3E51Ef092B2845f10401a0159B2B96e8B6c3D30;\n    // /// @dev Kovan address of the `UniswapV2Router01` contract.\n    // address constant private UNISWAP_V2_ROUTER_01_ADDRESS = 0xf164fC0Ec4E93095b804a4795bBe1e041497b92a;\n    // /// @dev Kovan address of the Eth2Dai `MatchingMarket` contract.\n    // address constant private ETH2DAI_ADDRESS = 0xe325acB9765b02b8b418199bf9650972299235F4;\n    // /// @dev Kovan address of the `ERC20BridgeProxy` contract\n    // address constant private ERC20_BRIDGE_PROXY_ADDRESS = 0xFb2DD2A1366dE37f7241C83d47DA58fd503E2C64;\n    // /// @dev Kovan address of the `Chai` contract\n    // address constant private CHAI_ADDRESS = address(0);\n    // /// @dev Kovan address of the `Dai` (multi-collateral) contract\n    // address constant private DAI_ADDRESS = 0x4F96Fe3b7A6Cf9725f59d353F723c1bDb64CA6Aa;\n    // /// @dev Kovan address of the 0x DevUtils contract.\n    // address constant private DEV_UTILS_ADDRESS = 0x9402639A828BdF4E9e4103ac3B69E1a6E522eB59;\n    // /// @dev Kyber ETH pseudo-address.\n    // address constant internal KYBER_ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n    // /// @dev Kovan address of the dYdX contract.\n    // address constant private DYDX_ADDRESS = address(0);\n    // /// @dev Kovan address of the GST2 contract\n    // address constant private GST_ADDRESS = address(0);\n    // /// @dev Kovan address of the GST Collector\n    // address constant private GST_COLLECTOR_ADDRESS = address(0);\n\n    /// @dev Overridable way to get the `KyberNetworkProxy` address.\n    /// @return kyberAddress The `IKyberNetworkProxy` address.\n    function _getKyberNetworkProxyAddress()\n        internal\n        view\n        returns (address kyberAddress)\n    {\n        return KYBER_NETWORK_PROXY_ADDRESS;\n    }\n\n    /// @dev Overridable way to get the WETH address.\n    /// @return wethAddress The WETH address.\n    function _getWethAddress()\n        internal\n        view\n        returns (address wethAddress)\n    {\n        return WETH_ADDRESS;\n    }\n\n    /// @dev Overridable way to get the `UniswapExchangeFactory` address.\n    /// @return uniswapAddress The `UniswapExchangeFactory` address.\n    function _getUniswapExchangeFactoryAddress()\n        internal\n        view\n        returns (address uniswapAddress)\n    {\n        return UNISWAP_EXCHANGE_FACTORY_ADDRESS;\n    }\n\n    /// @dev Overridable way to get the `UniswapV2Router01` address.\n    /// @return uniswapRouterAddress The `UniswapV2Router01` address.\n    function _getUniswapV2Router01Address()\n        internal\n        view\n        returns (address uniswapRouterAddress)\n    {\n        return UNISWAP_V2_ROUTER_01_ADDRESS;\n    }\n\n    /// @dev An overridable way to retrieve the Eth2Dai `MatchingMarket` contract.\n    /// @return eth2daiAddress The Eth2Dai `MatchingMarket` contract.\n    function _getEth2DaiAddress()\n        internal\n        view\n        returns (address eth2daiAddress)\n    {\n        return ETH2DAI_ADDRESS;\n    }\n\n    /// @dev An overridable way to retrieve the `ERC20BridgeProxy` contract.\n    /// @return erc20BridgeProxyAddress The `ERC20BridgeProxy` contract.\n    function _getERC20BridgeProxyAddress()\n        internal\n        view\n        returns (address erc20BridgeProxyAddress)\n    {\n        return ERC20_BRIDGE_PROXY_ADDRESS;\n    }\n\n    /// @dev An overridable way to retrieve the `Dai` contract.\n    /// @return daiAddress The `Dai` contract.\n    function _getDaiAddress()\n        internal\n        view\n        returns (address daiAddress)\n    {\n        return DAI_ADDRESS;\n    }\n\n    /// @dev An overridable way to retrieve the `Chai` contract.\n    /// @return chaiAddress The `Chai` contract.\n    function _getChaiAddress()\n        internal\n        view\n        returns (address chaiAddress)\n    {\n        return CHAI_ADDRESS;\n    }\n\n    /// @dev An overridable way to retrieve the 0x `DevUtils` contract address.\n    /// @return devUtils The 0x `DevUtils` contract address.\n    function _getDevUtilsAddress()\n        internal\n        view\n        returns (address devUtils)\n    {\n        return DEV_UTILS_ADDRESS;\n    }\n\n    /// @dev Overridable way to get the DyDx contract.\n    /// @return exchange The DyDx exchange contract.\n    function _getDydxAddress()\n        internal\n        view\n        returns (address dydxAddress)\n    {\n        return DYDX_ADDRESS;\n    }\n\n    /// @dev An overridable way to retrieve the GST2 contract address.\n    /// @return gst The GST contract.\n    function _getGstAddress()\n        internal\n        view\n        returns (address gst)\n    {\n        return GST_ADDRESS;\n    }\n\n    /// @dev An overridable way to retrieve the GST Collector address.\n    /// @return collector The GST collector address.\n    function _getGstCollectorAddress()\n        internal\n        view\n        returns (address collector)\n    {\n        return GST_COLLECTOR_ADDRESS;\n    }\n}\n",
        "../interfaces/IERC20Bridge.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\ncontract IERC20Bridge {\n\n    /// @dev Result of a successful bridge call.\n    bytes4 constant internal BRIDGE_SUCCESS = 0xdc1600f3;\n\n    /// @dev Emitted when a trade occurs.\n    /// @param inputToken The token the bridge is converting from.\n    /// @param outputToken The token the bridge is converting to.\n    /// @param inputTokenAmount Amount of input token.\n    /// @param outputTokenAmount Amount of output token.\n    /// @param from The `from` address in `bridgeTransferFrom()`\n    /// @param to The `to` address in `bridgeTransferFrom()`\n    event ERC20BridgeTransfer(\n        address inputToken,\n        address outputToken,\n        uint256 inputTokenAmount,\n        uint256 outputTokenAmount,\n        address from,\n        address to\n    );\n\n    /// @dev Transfers `amount` of the ERC20 `tokenAddress` from `from` to `to`.\n    /// @param tokenAddress The address of the ERC20 token to transfer.\n    /// @param from Address to transfer asset from.\n    /// @param to Address to transfer asset to.\n    /// @param amount Amount of asset to transfer.\n    /// @param bridgeData Arbitrary asset data needed by the bridge contract.\n    /// @return success The magic bytes `0xdc1600f3` if successful.\n    function bridgeTransferFrom(\n        address tokenAddress,\n        address from,\n        address to,\n        uint256 amount,\n        bytes calldata bridgeData\n    )\n        external\n        returns (bytes4 success);\n}\n",
        "./MixinGasToken.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.16;\n\nimport \"@0x/contracts-utils/contracts/src/DeploymentConstants.sol\";\nimport \"../interfaces/IGasToken.sol\";\n\n\ncontract MixinGasToken is\n    DeploymentConstants\n{\n\n    /// @dev Frees gas tokens based on the amount of gas consumed in the function\n    modifier freesGasTokens {\n        uint256 gasBefore = gasleft();\n        _;\n        IGasToken gst = IGasToken(_getGstAddress());\n        if (address(gst) != address(0)) {\n            // (gasUsed + FREE_BASE) / (2 * REIMBURSE - FREE_TOKEN)\n            //            14154             24000        6870\n            uint256 value = (gasBefore - gasleft() + 14154) / 41130;\n            gst.freeUpTo(value);\n        }\n    }\n\n    /// @dev Frees gas tokens using the balance of `from`. Amount freed is based\n    ///     on the gas consumed in the function\n    modifier freesGasTokensFromCollector() {\n        uint256 gasBefore = gasleft();\n        _;\n        IGasToken gst = IGasToken(_getGstAddress());\n        if (address(gst) != address(0)) {\n            // (gasUsed + FREE_BASE) / (2 * REIMBURSE - FREE_TOKEN)\n            //            14154             24000        6870\n            uint256 value = (gasBefore - gasleft() + 14154) / 41130;\n            gst.freeFromUpTo(_getGstCollectorAddress(), value);\n        }\n    }\n}\n",
        "../interfaces/IGasToken.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.15;\n\nimport \"@0x/contracts-erc20/contracts/src/interfaces/IERC20Token.sol\";\n\n\ncontract IGasToken is IERC20Token {\n\n    /// @dev Frees up to `value` sub-tokens\n    /// @param value The amount of tokens to free\n    /// @return How many tokens were freed\n    function freeUpTo(uint256 value) external returns (uint256 freed);\n\n    /// @dev Frees up to `value` sub-tokens owned by `from`\n    /// @param from The owner of tokens to spend\n    /// @param value The amount of tokens to free\n    /// @return How many tokens were freed\n    function freeFromUpTo(address from, uint256 value) external returns (uint256 freed);\n\n    /// @dev Mints `value` amount of tokens\n    /// @param value The amount of tokens to mint\n    function mint(uint256 value) external;\n}\n"
    },
    "compiler": {
        "name": "solc",
        "version": "0.5.17+commit.d19bba13",
        "settings": {
            "remappings": [
                "@0x/contracts-utils=/Users/michaelzhu/monorepo/contracts/asset-proxy/node_modules/@0x/contracts-utils",
                "@0x/contracts-erc1155=/Users/michaelzhu/monorepo/contracts/asset-proxy/node_modules/@0x/contracts-erc1155",
                "@0x/contracts-erc20=/Users/michaelzhu/monorepo/contracts/asset-proxy/node_modules/@0x/contracts-erc20",
                "@0x/contracts-exchange-libs=/Users/michaelzhu/monorepo/contracts/asset-proxy/node_modules/@0x/contracts-exchange-libs",
                "@0x/contracts-exchange=/Users/michaelzhu/monorepo/node_modules/@0x/contracts-exchange"
            ],
            "optimizer": {
                "enabled": true,
                "runs": 1000000,
                "details": {
                    "yul": true,
                    "deduplicate": true,
                    "cse": true,
                    "constantOptimizer": true
                }
            },
            "outputSelection": {
                "*": {
                    "*": [
                        "abi",
                        "devdoc",
                        "evm.bytecode.object",
                        "evm.bytecode.sourceMap",
                        "evm.deployedBytecode.object",
                        "evm.deployedBytecode.sourceMap"
                    ]
                }
            },
            "evmVersion": "istanbul"
        }
    },
    "chains": {}
}
