{
    "schemaVersion": "2.0.0",
    "contractName": "LibDydxBalance",
    "compilerOutput": {
        "abi": [
            {
                "constant": true,
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "makerAddress",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "bridgeAddress",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "dydx",
                        "type": "address"
                    }
                ],
                "name": "getDydxMakerAllowance",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "allowance",
                        "type": "uint256"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "makerAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "takerAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "feeRecipientAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "senderAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "uint256",
                                "name": "makerAssetAmount",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "takerAssetAmount",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "makerFee",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "takerFee",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "expirationTimeSeconds",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "salt",
                                "type": "uint256"
                            },
                            {
                                "internalType": "bytes",
                                "name": "makerAssetData",
                                "type": "bytes"
                            },
                            {
                                "internalType": "bytes",
                                "name": "takerAssetData",
                                "type": "bytes"
                            },
                            {
                                "internalType": "bytes",
                                "name": "makerFeeAssetData",
                                "type": "bytes"
                            },
                            {
                                "internalType": "bytes",
                                "name": "takerFeeAssetData",
                                "type": "bytes"
                            }
                        ],
                        "internalType": "struct LibOrder.Order",
                        "name": "order",
                        "type": "tuple"
                    },
                    {
                        "internalType": "address",
                        "name": "dydx",
                        "type": "address"
                    }
                ],
                "name": "getDydxMakerBalance",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "balance",
                        "type": "uint256"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            }
        ],
        "devdoc": {
            "methods": {
                "getDydxMakerAllowance(address,address,address)": {
                    "details": "Gets the maker asset allowance for a Dydx bridge order.",
                    "params": {
                        "bridgeAddress": "The address of the Dydx bridge.",
                        "dydx": "The Dydx contract address.",
                        "makerAddress": "The maker of the order."
                    },
                    "return": "allowance The maker asset allowance."
                },
                "getDydxMakerBalance(LibOrder.Order,address)": {
                    "details": "Gets the maker allowance for aGet the maker asset balance of an order with a `DydxBridge` maker asset.",
                    "params": {
                        "dydx": "The address of the dydx contract.",
                        "order": "An order with a dydx maker asset."
                    },
                    "return": "balance The maker asset balance."
                }
            }
        },
        "evm": {
            "bytecode": {
                "linkReferences": {
                    "/Users/rickmorty/Documents/projects/0x/0x-monorepo/contracts/dev-utils/contracts/src/LibAssetData.sol": {
                        "LibAssetData": [
                            {
                                "length": 20,
                                "start": 515
                            },
                            {
                                "length": 20,
                                "start": 837
                            }
                        ]
                    }
                },
                "object": "0x612065610026600b82828239805160001a60731461001957fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100405760003560e01c80630e70a03314610045578063d12a79601461006e575b600080fd5b6100586100533660046118d9565b610081565b6040516100659190611f66565b60405180910390f35b61005861007c366004611b78565b610132565b6040517f3a031bf00000000000000000000000000000000000000000000000000000000081526000906001600160a01b03831690633a031bf0906100cb9087908790600401611db6565b60206040518083038186803b1580156100e357600080fd5b505afa1580156100f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061011b9190810190611923565b61012657600061012a565b6000195b949350505050565b600061013c611672565b61014684846101a4565b9050610151816103f1565b61015f57600091505061019e565b6101676105f4565b61017082610600565b121561018057600091505061019e565b61019a61018c82610639565b610195836107b4565b6109cd565b9150505b92915050565b6101ac611672565b6101408301516040517f750bdb3000000000000000000000000000000000000000000000000000000000815260609173__$a2317ed4aecd4fd151d12b4b79c9600dfe$__9163750bdb309161020391600401611dd0565b60006040518083038186803b15801561021b57600080fd5b505af415801561022f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261025791908101906119a0565b6001600160a01b039182166020870152918116606086015285811685528651166040850152610160860151519092506024141590506103a5576101608401517ff47261b000000000000000000000000000000000000000000000000000000000906102c990600063ffffffff6109e316565b7fffffffff000000000000000000000000000000000000000000000000000000001614156103a5576101608401516040517f8f4ce47900000000000000000000000000000000000000000000000000000000815273__$a2317ed4aecd4fd151d12b4b79c9600dfe$__91638f4ce479916103469190600401611dd0565b604080518083038186803b15801561035d57600080fd5b505af4158015610371573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506103959190810190611943565b6001600160a01b03166080840152505b6103b78460a001518560800151610a34565b60a08301526103c46116e4565b818060200190516103d89190810190611a75565b805160c08501526020015160e084015250909392505050565b60008160e001515160001415610409575060006105ef565b60005b8260e00151518110156104cf576104216116fe565b8360e00151828151811061043157fe5b602002602001015190506000600181111561044857fe5b8151600181111561045557fe5b1461046057506104cf565b604081015160005b838110156104a857818660e00151828151811061048157fe5b60200260200101516040015114156104a05760009450505050506105ef565b600101610468565b508460c00151518260200151106104c557600093505050506105ef565b505060010161040c565b8260e001515181600101146104e85760009150506105ef565b6104f06116fe565b8360e00151828151811061050057fe5b6020026020010151905060018081111561051657fe5b8151600181111561052357fe5b14610533576000925050506105ef565b83606001516001600160a01b031684600001516001600160a01b031663062bd3e983604001516040518263ffffffff1660e01b81526004016105759190611f66565b60206040518083038186803b15801561058d57600080fd5b505afa1580156105a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506105c591908101906118bd565b6001600160a01b0316146105de576000925050506105ef565b8360c0015151816020015110925050505b919050565b670de0b6b3a764000090565b600061060a6116fe565b60e08301518051600019810190811061061f57fe5b6020026020010151905061063281610a9b565b9392505050565b60001960005b8260e00151518110156107ae576106546116fe565b8360e00151828151811061066457fe5b602002602001015190506000600181111561067b57fe5b8151600181111561068857fe5b1461069357506107a6565b600061069e82610a9b565b9050600085600001516001600160a01b031663062bd3e984604001516040518263ffffffff1660e01b81526004016106d69190611f66565b60206040518083038186803b1580156106ee57600080fd5b505afa158015610702573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061072691908101906118bd565b60808701519091506001600160a01b03161580159061075a575085608001516001600160a01b0316816001600160a01b0316145b156107705761076d828760a00151610ac8565b91505b60008213156107a257600061078e8288604001518960000151610ad7565b905061079e866101958386610af1565b9550505b5050505b60010161063f565b50919050565b60e08101515160001990600111156107c857fe5b6107d06116fe565b60e0830151805160001981019081106107e557fe5b602002602001015190506001808111156107fb57fe5b8151600181111561080857fe5b1461080f57fe5b600061082d6108218560000151610b13565b655af3107a4000610ba7565b905060005b8460c00151518110156109c557600080610863878860c00151858151811061085657fe5b6020026020010151610bb3565b915091508060001415801561088057508361087e8383610a34565b125b15610893576000955050505050506105ef565b846020015183146108a55750506109bd565b6000805b60018960e001515103811015610927576108c16116fe565b8960e0015182815181106108d157fe5b60200260200101519050600060018111156108e857fe5b815160018111156108f557fe5b146108fc57fe5b858160200151141561091e5761091b836109168c84610c9b565b610ba7565b92505b506001016108a9565b5060006109348988610c9b565b9050856109418383610f74565b1261094f57505050506109bd565b8161095a8783610f8b565b141561096957505050506109bd565b60006109996109818661097c8a88610fa8565b610fd7565b61099461098e8a86610f8b565b86610ac8565b610f74565b90506109b5896101958c606001516109b085611006565b61101d565b985050505050505b600101610832565b505050919050565b60008183106109dc5781610632565b5090919050565b60008160040183511015610a0957610a09610a046003855185600401611087565b61110e565b5001602001517fffffffff000000000000000000000000000000000000000000000000000000001690565b600080831215610a5f5760405162461bcd60e51b8152600401610a5690611e6a565b60405180910390fd5b6000821215610a805760405162461bcd60e51b8152600401610a5690611e6a565b610632610a9584670de0b6b3a7640000611116565b83611170565b60008160800151600014610ac057610abb82606001518360800151610a34565b61019e565b61019e6105f4565b600061063283836000036111ed565b600061012a610ae7858585611249565b610195868661136b565b600080831215610a805760405162461bcd60e51b8152600401610a5690611e6a565b6000610b1d61172e565b826001600160a01b031663697947956040518163ffffffff1660e01b815260040160806040518083038186803b158015610b5657600080fd5b505afa158015610b6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610b8e9190810190611cf7565b9050610632610b9b6105f4565b8251516109169061148a565b600061063283836111ed565b600080610bbe61176d565b610bc661176d565b85600001516001600160a01b031663f9416052604051806040016040528089604001516001600160a01b03168152602001888152506040518263ffffffff1660e01b8152600401610c179190611f46565b604080518083038186803b158015610c2e57600080fd5b505afa158015610c42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610c669190810190611d5b565b81519193509150670de0b6b3a76400009004670de0b6b3a7640000826000015181610c8d57fe5b049350935050509250929050565b60008083600001516001600160a01b031663062bd3e984604001516040518263ffffffff1660e01b8152600401610cd29190611f66565b60206040518083038186803b158015610cea57600080fd5b505afa158015610cfe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610d2291908101906118bd565b90506000610d3385606001516114b0565b60ff1690506000610d43836114b0565b60ff169050818111610d7257610d6d818303600a0a610d6187610a9b565b9063ffffffff61157416565b610d90565b610d90828203600a0a610d8487610a9b565b9063ffffffff6115a516565b9350600086600001516001600160a01b0316638928378e87604001516040518263ffffffff1660e01b8152600401610dc89190611f66565b60206040518083038186803b158015610de057600080fd5b505afa158015610df4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610e189190810190611b5d565b5190506012821115610e6057610e59817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffee8401600a0a63ffffffff61157416565b9050610e7a565b610e77816012849003600a0a63ffffffff6115a516565b90505b610e8481866115cf565b94506000610f34610e936105f4565b89516040808b015190517ffd04b6060000000000000000000000000000000000000000000000000000000081526001600160a01b039092169163fd04b60691610ede91600401611f66565b60206040518083038186803b158015610ef657600080fd5b505afa158015610f0a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610f2e9190810190611b5d565b516115f1565b9050600087516001811115610f4557fe5b1415610f5c57610f558682610f74565b9550610f69565b610f668682610f8b565b95505b505050505092915050565b6000610632610a9584670de0b6b3a7640000611116565b6000610632610f9a8484611116565b670de0b6b3a7640000611170565b600080821215610fca5760405162461bcd60e51b8152600401610a5690611e6a565b610632610f9a8484611116565b600080831215610ff95760405162461bcd60e51b8152600401610a5690611e6a565b61063283836000036111ed565b6000808212611015578161019e565b600092915050565b600080611029846114b0565b60ff169050601281116110525761104d836012839003600a0a63ffffffff6115a516565b61019a565b61019a837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffee8301600a0a63ffffffff61157416565b6060632800659560e01b8484846040516024016110a693929190611e25565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915290509392505050565b805160208201fd5b6000821580611123575081155b156111305750600061019e565b508181028183828161113e57fe5b0514801561115457508282828161115157fe5b05145b61019e5760405162461bcd60e51b8152600401610a5690611ea1565b60008161118f5760405162461bcd60e51b8152600401610a5690611f0f565b7f8000000000000000000000000000000000000000000000000000000000000000831415806111c057508160001914155b6111dc5760405162461bcd60e51b8152600401610a5690611ed8565b8183816111e557fe5b059392505050565b8181016000831280156112005750600082125b801561120b57508281135b8061122c57506000831380156112215750600082135b801561122c57508281125b1561019e5760405162461bcd60e51b8152600401610a5690611e33565b60405160009081906060906001600160a01b038716907fdd62ed3e00000000000000000000000000000000000000000000000000000000906112919088908890602401611db6565b60408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009094169390931790925290516112fc9190611d86565b600060405180830381855afa9150503d8060008114611337576040519150601f19603f3d011682016040523d82523d6000602084013e61133c565b606091505b509150915081801561134f575080516020145b156113625761135f81600061161d565b92505b50509392505050565b60405160009081906060906001600160a01b038616907f70a0823100000000000000000000000000000000000000000000000000000000906113b1908790602401611da2565b60408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090941693909317909252905161141c9190611d86565b600060405180830381855afa9150503d8060008114611457576040519150601f19603f3d011682016040523d82523d6000602084013e61145c565b606091505b509150915081801561146f575080516020145b156114825761147f81600061161d565b92505b505092915050565b6000808212156114ac5760405162461bcd60e51b8152600401610a5690611e6a565b5090565b60006012905060006060836001600160a01b03166040518060400160405280600481526020017f313ce567000000000000000000000000000000000000000000000000000000008152506040516115079190611d86565b600060405180830381855afa9150503d8060008114611542576040519150601f19603f3d011682016040523d82523d6000602084013e611547565b606091505b509150915081801561155a575080516020145b1561156d5761156a81600061161d565b92505b5050919050565b6000826115835750600061019e565b8282028284828161159057fe5b041461063257610632610a0460018686611629565b6000816115bb576115bb610a0460038585611629565b60008284816115c657fe5b04949350505050565b600080831215610fca5760405162461bcd60e51b8152600401610a5690611e6a565b6000808212156116135760405162461bcd60e51b8152600401610a5690611e6a565b61063283836111ed565b60006106328383611648565b606063e946c1bb60e01b8484846040516024016110a693929190611e03565b6000816020018351101561166957611669610a046005855185602001611087565b50016020015190565b60405180610100016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b031681526020016000815260200160608152602001606081525090565b604051806040016040528060608152602001606081525090565b6040805160a081019091528060008152602001600081526020016000815260200160008152602001600081525090565b604051806080016040528061174161176d565b815260200161174e61176d565b815260200161175b61176d565b815260200161176861176d565b905290565b6040518060200160405280600081525090565b803561019e8161200a565b600082601f83011261179b578081fd5b81516117ae6117a982611f96565b611f6f565b818152915060208083019084810160a08402860182018710156117d057600080fd5b60005b84811015610f695760a082890312156117eb57600080fd5b6117f560a0611f6f565b6117ff8984611889565b8152828401518482015260408084015190820152606080840151908201526080808401519082015284529282019260a0909101906001016117d3565b600082601f83011261184b578081fd5b81356118596117a982611fb6565b915080825283602082850101111561187057600080fd5b8060208401602084013760009082016020015292915050565b80516002811061019e57600080fd5b6000602082840312156118a9578081fd5b6118b36020611f6f565b9151825250919050565b6000602082840312156118ce578081fd5b81516106328161200a565b6000806000606084860312156118ed578182fd5b83356118f88161200a565b925060208401356119088161200a565b915060408401356119188161200a565b809150509250925092565b600060208284031215611934578081fd5b81518015158114610632578182fd5b60008060408385031215611955578182fd5b82517fffffffff0000000000000000000000000000000000000000000000000000000081168114611984578283fd5b60208401519092506119958161200a565b809150509250929050565b600080600080608085870312156119b5578182fd5b84517fffffffff00000000000000000000000000000000000000000000000000000000811681146119e4578283fd5b60208601519094506119f58161200a565b6040860151909350611a068161200a565b606086015190925067ffffffffffffffff811115611a22578182fd5b80860187601f820112611a33578283fd5b80519150611a436117a983611fb6565b828152886020848401011115611a57578384fd5b611a68836020830160208501611fda565b9598949750929550505050565b60006020808385031215611a87578182fd5b825167ffffffffffffffff80821115611a9e578384fd5b81850160408188031215611ab0578485fd5b611aba6040611f6f565b9250805182811115611aca578586fd5b80820188601f820112611adb578687fd5b80519150611aeb6117a983611f96565b82815286810190828801888502840189018c1015611b0757898afd5b8993505b84841015611b29578051835260019390930192918801918801611b0b565b5086525050508084015182811115611b3f578586fd5b611b4b8882840161178b565b85850152505050809250505092915050565b600060208284031215611b6e578081fd5b6106328383611898565b60008060408385031215611b8a578182fd5b823567ffffffffffffffff80821115611ba1578384fd5b6101c0918501808703831315611bb5578485fd5b611bbe83611f6f565b611bc88883611780565b8152611bd78860208401611780565b6020820152611be98860408401611780565b6040820152611bfb8860608401611780565b60608201526080820135608082015260a082013560a082015260c082013560c082015260e082013560e0820152610100935083820135848201526101209350838201358482015261014093508382013583811115611c57578687fd5b611c638982850161183b565b858301525061016093508382013583811115611c7d578687fd5b611c898982850161183b565b858301525061018093508382013583811115611ca3578687fd5b611caf8982850161183b565b85830152506101a093508382013583811115611cc9578687fd5b611cd58982850161183b565b858301525080955050505050611cee8460208501611780565b90509250929050565b600060808284031215611d08578081fd5b611d126080611f6f565b611d1c8484611898565b8152611d2b8460208501611898565b6020820152611d3d8460408501611898565b6040820152611d4f8460608501611898565b60608201529392505050565b60008060408385031215611d6d578182fd5b611d778484611898565b9150611cee8460208501611898565b60008251611d98818460208701611fda565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6000602082528251806020840152611def816040850160208701611fda565b601f01601f19169190910160400192915050565b6060810160048510611e1157fe5b938152602081019290925260409091015290565b6060810160088510611e1157fe5b60208082526018908201527f4431382f444543494d414c5f4144445f4f564552464c4f570000000000000000604082015260600190565b60208082526019908201527f4431382f444543494d414c5f56414c55455f544f4f5f42494700000000000000604082015260600190565b60208082526018908201527f4431382f444543494d414c5f4d554c5f4f564552464c4f570000000000000000604082015260600190565b60208082526018908201527f4431382f444543494d414c5f4449565f4f564552464c4f570000000000000000604082015260600190565b60208082526017908201527f4431382f444543494d414c5f4449565f42595f5a45524f000000000000000000604082015260600190565b81516001600160a01b031681526020918201519181019190915260400190565b90815260200190565b60405181810167ffffffffffffffff81118282101715611f8e57600080fd5b604052919050565b600067ffffffffffffffff821115611fac578081fd5b5060209081020190565b600067ffffffffffffffff821115611fcc578081fd5b50601f01601f191660200190565b60005b83811015611ff5578181015183820152602001611fdd565b83811115612004576000848401525b50505050565b6001600160a01b038116811461201f57600080fd5b5056fea365627a7a72315820b37b623718e85582e3b696cc95cf6163ddf3045bd0c7e06a84b566df684ef6fd6c6578706572696d656e74616cf564736f6c63430005110040",
                "opcodes": "PUSH2 0x2065 PUSH2 0x26 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH2 0x19 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x40 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xE70A033 EQ PUSH2 0x45 JUMPI DUP1 PUSH4 0xD12A7960 EQ PUSH2 0x6E JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x58 PUSH2 0x53 CALLDATASIZE PUSH1 0x4 PUSH2 0x18D9 JUMP JUMPDEST PUSH2 0x81 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x65 SWAP2 SWAP1 PUSH2 0x1F66 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x58 PUSH2 0x7C CALLDATASIZE PUSH1 0x4 PUSH2 0x1B78 JUMP JUMPDEST PUSH2 0x132 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x3A031BF000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x3A031BF0 SWAP1 PUSH2 0xCB SWAP1 DUP8 SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x1DB6 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xE3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xF7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x11B SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1923 JUMP JUMPDEST PUSH2 0x126 JUMPI PUSH1 0x0 PUSH2 0x12A JUMP JUMPDEST PUSH1 0x0 NOT JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x13C PUSH2 0x1672 JUMP JUMPDEST PUSH2 0x146 DUP5 DUP5 PUSH2 0x1A4 JUMP JUMPDEST SWAP1 POP PUSH2 0x151 DUP2 PUSH2 0x3F1 JUMP JUMPDEST PUSH2 0x15F JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x19E JUMP JUMPDEST PUSH2 0x167 PUSH2 0x5F4 JUMP JUMPDEST PUSH2 0x170 DUP3 PUSH2 0x600 JUMP JUMPDEST SLT ISZERO PUSH2 0x180 JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x19E JUMP JUMPDEST PUSH2 0x19A PUSH2 0x18C DUP3 PUSH2 0x639 JUMP JUMPDEST PUSH2 0x195 DUP4 PUSH2 0x7B4 JUMP JUMPDEST PUSH2 0x9CD JUMP JUMPDEST SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1AC PUSH2 0x1672 JUMP JUMPDEST PUSH2 0x140 DUP4 ADD MLOAD PUSH1 0x40 MLOAD PUSH32 0x750BDB3000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x60 SWAP2 PUSH20 0x0 SWAP2 PUSH4 0x750BDB30 SWAP2 PUSH2 0x203 SWAP2 PUSH1 0x4 ADD PUSH2 0x1DD0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x21B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x22F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x257 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x19A0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x20 DUP8 ADD MSTORE SWAP2 DUP2 AND PUSH1 0x60 DUP7 ADD MSTORE DUP6 DUP2 AND DUP6 MSTORE DUP7 MLOAD AND PUSH1 0x40 DUP6 ADD MSTORE PUSH2 0x160 DUP7 ADD MLOAD MLOAD SWAP1 SWAP3 POP PUSH1 0x24 EQ ISZERO SWAP1 POP PUSH2 0x3A5 JUMPI PUSH2 0x160 DUP5 ADD MLOAD PUSH32 0xF47261B000000000000000000000000000000000000000000000000000000000 SWAP1 PUSH2 0x2C9 SWAP1 PUSH1 0x0 PUSH4 0xFFFFFFFF PUSH2 0x9E3 AND JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND EQ ISZERO PUSH2 0x3A5 JUMPI PUSH2 0x160 DUP5 ADD MLOAD PUSH1 0x40 MLOAD PUSH32 0x8F4CE47900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0x0 SWAP2 PUSH4 0x8F4CE479 SWAP2 PUSH2 0x346 SWAP2 SWAP1 PUSH1 0x4 ADD PUSH2 0x1DD0 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x35D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x371 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x395 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1943 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x80 DUP5 ADD MSTORE POP JUMPDEST PUSH2 0x3B7 DUP5 PUSH1 0xA0 ADD MLOAD DUP6 PUSH1 0x80 ADD MLOAD PUSH2 0xA34 JUMP JUMPDEST PUSH1 0xA0 DUP4 ADD MSTORE PUSH2 0x3C4 PUSH2 0x16E4 JUMP JUMPDEST DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x3D8 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1A75 JUMP JUMPDEST DUP1 MLOAD PUSH1 0xC0 DUP6 ADD MSTORE PUSH1 0x20 ADD MLOAD PUSH1 0xE0 DUP5 ADD MSTORE POP SWAP1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0xE0 ADD MLOAD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x409 JUMPI POP PUSH1 0x0 PUSH2 0x5EF JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 PUSH1 0xE0 ADD MLOAD MLOAD DUP2 LT ISZERO PUSH2 0x4CF JUMPI PUSH2 0x421 PUSH2 0x16FE JUMP JUMPDEST DUP4 PUSH1 0xE0 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x431 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x448 JUMPI INVALID JUMPDEST DUP2 MLOAD PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x455 JUMPI INVALID JUMPDEST EQ PUSH2 0x460 JUMPI POP PUSH2 0x4CF JUMP JUMPDEST PUSH1 0x40 DUP2 ADD MLOAD PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x4A8 JUMPI DUP2 DUP7 PUSH1 0xE0 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x481 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 ADD MLOAD EQ ISZERO PUSH2 0x4A0 JUMPI PUSH1 0x0 SWAP5 POP POP POP POP POP PUSH2 0x5EF JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x468 JUMP JUMPDEST POP DUP5 PUSH1 0xC0 ADD MLOAD MLOAD DUP3 PUSH1 0x20 ADD MLOAD LT PUSH2 0x4C5 JUMPI PUSH1 0x0 SWAP4 POP POP POP POP PUSH2 0x5EF JUMP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x40C JUMP JUMPDEST DUP3 PUSH1 0xE0 ADD MLOAD MLOAD DUP2 PUSH1 0x1 ADD EQ PUSH2 0x4E8 JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x5EF JUMP JUMPDEST PUSH2 0x4F0 PUSH2 0x16FE JUMP JUMPDEST DUP4 PUSH1 0xE0 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x500 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x1 DUP1 DUP2 GT ISZERO PUSH2 0x516 JUMPI INVALID JUMPDEST DUP2 MLOAD PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x523 JUMPI INVALID JUMPDEST EQ PUSH2 0x533 JUMPI PUSH1 0x0 SWAP3 POP POP POP PUSH2 0x5EF JUMP JUMPDEST DUP4 PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x62BD3E9 DUP4 PUSH1 0x40 ADD MLOAD PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x575 SWAP2 SWAP1 PUSH2 0x1F66 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x58D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5A1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x5C5 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x18BD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x5DE JUMPI PUSH1 0x0 SWAP3 POP POP POP PUSH2 0x5EF JUMP JUMPDEST DUP4 PUSH1 0xC0 ADD MLOAD MLOAD DUP2 PUSH1 0x20 ADD MLOAD LT SWAP3 POP POP POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH8 0xDE0B6B3A7640000 SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x60A PUSH2 0x16FE JUMP JUMPDEST PUSH1 0xE0 DUP4 ADD MLOAD DUP1 MLOAD PUSH1 0x0 NOT DUP2 ADD SWAP1 DUP2 LT PUSH2 0x61F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH2 0x632 DUP2 PUSH2 0xA9B JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 NOT PUSH1 0x0 JUMPDEST DUP3 PUSH1 0xE0 ADD MLOAD MLOAD DUP2 LT ISZERO PUSH2 0x7AE JUMPI PUSH2 0x654 PUSH2 0x16FE JUMP JUMPDEST DUP4 PUSH1 0xE0 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x664 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x67B JUMPI INVALID JUMPDEST DUP2 MLOAD PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x688 JUMPI INVALID JUMPDEST EQ PUSH2 0x693 JUMPI POP PUSH2 0x7A6 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x69E DUP3 PUSH2 0xA9B JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP6 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x62BD3E9 DUP5 PUSH1 0x40 ADD MLOAD PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6D6 SWAP2 SWAP1 PUSH2 0x1F66 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x702 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x726 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x18BD JUMP JUMPDEST PUSH1 0x80 DUP8 ADD MLOAD SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO DUP1 ISZERO SWAP1 PUSH2 0x75A JUMPI POP DUP6 PUSH1 0x80 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST ISZERO PUSH2 0x770 JUMPI PUSH2 0x76D DUP3 DUP8 PUSH1 0xA0 ADD MLOAD PUSH2 0xAC8 JUMP JUMPDEST SWAP2 POP JUMPDEST PUSH1 0x0 DUP3 SGT ISZERO PUSH2 0x7A2 JUMPI PUSH1 0x0 PUSH2 0x78E DUP3 DUP9 PUSH1 0x40 ADD MLOAD DUP10 PUSH1 0x0 ADD MLOAD PUSH2 0xAD7 JUMP JUMPDEST SWAP1 POP PUSH2 0x79E DUP7 PUSH2 0x195 DUP4 DUP7 PUSH2 0xAF1 JUMP JUMPDEST SWAP6 POP POP JUMPDEST POP POP POP JUMPDEST PUSH1 0x1 ADD PUSH2 0x63F JUMP JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0xE0 DUP2 ADD MLOAD MLOAD PUSH1 0x0 NOT SWAP1 PUSH1 0x1 GT ISZERO PUSH2 0x7C8 JUMPI INVALID JUMPDEST PUSH2 0x7D0 PUSH2 0x16FE JUMP JUMPDEST PUSH1 0xE0 DUP4 ADD MLOAD DUP1 MLOAD PUSH1 0x0 NOT DUP2 ADD SWAP1 DUP2 LT PUSH2 0x7E5 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x1 DUP1 DUP2 GT ISZERO PUSH2 0x7FB JUMPI INVALID JUMPDEST DUP2 MLOAD PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x808 JUMPI INVALID JUMPDEST EQ PUSH2 0x80F JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH2 0x82D PUSH2 0x821 DUP6 PUSH1 0x0 ADD MLOAD PUSH2 0xB13 JUMP JUMPDEST PUSH6 0x5AF3107A4000 PUSH2 0xBA7 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 PUSH1 0xC0 ADD MLOAD MLOAD DUP2 LT ISZERO PUSH2 0x9C5 JUMPI PUSH1 0x0 DUP1 PUSH2 0x863 DUP8 DUP9 PUSH1 0xC0 ADD MLOAD DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x856 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0xBB3 JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP1 PUSH1 0x0 EQ ISZERO DUP1 ISZERO PUSH2 0x880 JUMPI POP DUP4 PUSH2 0x87E DUP4 DUP4 PUSH2 0xA34 JUMP JUMPDEST SLT JUMPDEST ISZERO PUSH2 0x893 JUMPI PUSH1 0x0 SWAP6 POP POP POP POP POP POP PUSH2 0x5EF JUMP JUMPDEST DUP5 PUSH1 0x20 ADD MLOAD DUP4 EQ PUSH2 0x8A5 JUMPI POP POP PUSH2 0x9BD JUMP JUMPDEST PUSH1 0x0 DUP1 JUMPDEST PUSH1 0x1 DUP10 PUSH1 0xE0 ADD MLOAD MLOAD SUB DUP2 LT ISZERO PUSH2 0x927 JUMPI PUSH2 0x8C1 PUSH2 0x16FE JUMP JUMPDEST DUP10 PUSH1 0xE0 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x8D1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x8E8 JUMPI INVALID JUMPDEST DUP2 MLOAD PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x8F5 JUMPI INVALID JUMPDEST EQ PUSH2 0x8FC JUMPI INVALID JUMPDEST DUP6 DUP2 PUSH1 0x20 ADD MLOAD EQ ISZERO PUSH2 0x91E JUMPI PUSH2 0x91B DUP4 PUSH2 0x916 DUP13 DUP5 PUSH2 0xC9B JUMP JUMPDEST PUSH2 0xBA7 JUMP JUMPDEST SWAP3 POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x8A9 JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0x934 DUP10 DUP9 PUSH2 0xC9B JUMP JUMPDEST SWAP1 POP DUP6 PUSH2 0x941 DUP4 DUP4 PUSH2 0xF74 JUMP JUMPDEST SLT PUSH2 0x94F JUMPI POP POP POP POP PUSH2 0x9BD JUMP JUMPDEST DUP2 PUSH2 0x95A DUP8 DUP4 PUSH2 0xF8B JUMP JUMPDEST EQ ISZERO PUSH2 0x969 JUMPI POP POP POP POP PUSH2 0x9BD JUMP JUMPDEST PUSH1 0x0 PUSH2 0x999 PUSH2 0x981 DUP7 PUSH2 0x97C DUP11 DUP9 PUSH2 0xFA8 JUMP JUMPDEST PUSH2 0xFD7 JUMP JUMPDEST PUSH2 0x994 PUSH2 0x98E DUP11 DUP7 PUSH2 0xF8B JUMP JUMPDEST DUP7 PUSH2 0xAC8 JUMP JUMPDEST PUSH2 0xF74 JUMP JUMPDEST SWAP1 POP PUSH2 0x9B5 DUP10 PUSH2 0x195 DUP13 PUSH1 0x60 ADD MLOAD PUSH2 0x9B0 DUP6 PUSH2 0x1006 JUMP JUMPDEST PUSH2 0x101D JUMP JUMPDEST SWAP9 POP POP POP POP POP POP JUMPDEST PUSH1 0x1 ADD PUSH2 0x832 JUMP JUMPDEST POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0x9DC JUMPI DUP2 PUSH2 0x632 JUMP JUMPDEST POP SWAP1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x4 ADD DUP4 MLOAD LT ISZERO PUSH2 0xA09 JUMPI PUSH2 0xA09 PUSH2 0xA04 PUSH1 0x3 DUP6 MLOAD DUP6 PUSH1 0x4 ADD PUSH2 0x1087 JUMP JUMPDEST PUSH2 0x110E JUMP JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 SLT ISZERO PUSH2 0xA5F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA56 SWAP1 PUSH2 0x1E6A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 SLT ISZERO PUSH2 0xA80 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA56 SWAP1 PUSH2 0x1E6A JUMP JUMPDEST PUSH2 0x632 PUSH2 0xA95 DUP5 PUSH8 0xDE0B6B3A7640000 PUSH2 0x1116 JUMP JUMPDEST DUP4 PUSH2 0x1170 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x80 ADD MLOAD PUSH1 0x0 EQ PUSH2 0xAC0 JUMPI PUSH2 0xABB DUP3 PUSH1 0x60 ADD MLOAD DUP4 PUSH1 0x80 ADD MLOAD PUSH2 0xA34 JUMP JUMPDEST PUSH2 0x19E JUMP JUMPDEST PUSH2 0x19E PUSH2 0x5F4 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x632 DUP4 DUP4 PUSH1 0x0 SUB PUSH2 0x11ED JUMP JUMPDEST PUSH1 0x0 PUSH2 0x12A PUSH2 0xAE7 DUP6 DUP6 DUP6 PUSH2 0x1249 JUMP JUMPDEST PUSH2 0x195 DUP7 DUP7 PUSH2 0x136B JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 SLT ISZERO PUSH2 0xA80 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA56 SWAP1 PUSH2 0x1E6A JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB1D PUSH2 0x172E JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x69794795 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x80 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xB56 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xB6A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0xB8E SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1CF7 JUMP JUMPDEST SWAP1 POP PUSH2 0x632 PUSH2 0xB9B PUSH2 0x5F4 JUMP JUMPDEST DUP3 MLOAD MLOAD PUSH2 0x916 SWAP1 PUSH2 0x148A JUMP JUMPDEST PUSH1 0x0 PUSH2 0x632 DUP4 DUP4 PUSH2 0x11ED JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xBBE PUSH2 0x176D JUMP JUMPDEST PUSH2 0xBC6 PUSH2 0x176D JUMP JUMPDEST DUP6 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xF9416052 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP10 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC17 SWAP2 SWAP1 PUSH2 0x1F46 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xC2E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xC42 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0xC66 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1D5B JUMP JUMPDEST DUP2 MLOAD SWAP2 SWAP4 POP SWAP2 POP PUSH8 0xDE0B6B3A7640000 SWAP1 DIV PUSH8 0xDE0B6B3A7640000 DUP3 PUSH1 0x0 ADD MLOAD DUP2 PUSH2 0xC8D JUMPI INVALID JUMPDEST DIV SWAP4 POP SWAP4 POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x62BD3E9 DUP5 PUSH1 0x40 ADD MLOAD PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCD2 SWAP2 SWAP1 PUSH2 0x1F66 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xCEA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xCFE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0xD22 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x18BD JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xD33 DUP6 PUSH1 0x60 ADD MLOAD PUSH2 0x14B0 JUMP JUMPDEST PUSH1 0xFF AND SWAP1 POP PUSH1 0x0 PUSH2 0xD43 DUP4 PUSH2 0x14B0 JUMP JUMPDEST PUSH1 0xFF AND SWAP1 POP DUP2 DUP2 GT PUSH2 0xD72 JUMPI PUSH2 0xD6D DUP2 DUP4 SUB PUSH1 0xA EXP PUSH2 0xD61 DUP8 PUSH2 0xA9B JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x1574 AND JUMP JUMPDEST PUSH2 0xD90 JUMP JUMPDEST PUSH2 0xD90 DUP3 DUP3 SUB PUSH1 0xA EXP PUSH2 0xD84 DUP8 PUSH2 0xA9B JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x15A5 AND JUMP JUMPDEST SWAP4 POP PUSH1 0x0 DUP7 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x8928378E DUP8 PUSH1 0x40 ADD MLOAD PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xDC8 SWAP2 SWAP1 PUSH2 0x1F66 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xDE0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xDF4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0xE18 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1B5D JUMP JUMPDEST MLOAD SWAP1 POP PUSH1 0x12 DUP3 GT ISZERO PUSH2 0xE60 JUMPI PUSH2 0xE59 DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEE DUP5 ADD PUSH1 0xA EXP PUSH4 0xFFFFFFFF PUSH2 0x1574 AND JUMP JUMPDEST SWAP1 POP PUSH2 0xE7A JUMP JUMPDEST PUSH2 0xE77 DUP2 PUSH1 0x12 DUP5 SWAP1 SUB PUSH1 0xA EXP PUSH4 0xFFFFFFFF PUSH2 0x15A5 AND JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH2 0xE84 DUP2 DUP7 PUSH2 0x15CF JUMP JUMPDEST SWAP5 POP PUSH1 0x0 PUSH2 0xF34 PUSH2 0xE93 PUSH2 0x5F4 JUMP JUMPDEST DUP10 MLOAD PUSH1 0x40 DUP1 DUP12 ADD MLOAD SWAP1 MLOAD PUSH32 0xFD04B60600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 PUSH4 0xFD04B606 SWAP2 PUSH2 0xEDE SWAP2 PUSH1 0x4 ADD PUSH2 0x1F66 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xEF6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xF0A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0xF2E SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1B5D JUMP JUMPDEST MLOAD PUSH2 0x15F1 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP8 MLOAD PUSH1 0x1 DUP2 GT ISZERO PUSH2 0xF45 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0xF5C JUMPI PUSH2 0xF55 DUP7 DUP3 PUSH2 0xF74 JUMP JUMPDEST SWAP6 POP PUSH2 0xF69 JUMP JUMPDEST PUSH2 0xF66 DUP7 DUP3 PUSH2 0xF8B JUMP JUMPDEST SWAP6 POP JUMPDEST POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x632 PUSH2 0xA95 DUP5 PUSH8 0xDE0B6B3A7640000 PUSH2 0x1116 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x632 PUSH2 0xF9A DUP5 DUP5 PUSH2 0x1116 JUMP JUMPDEST PUSH8 0xDE0B6B3A7640000 PUSH2 0x1170 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 SLT ISZERO PUSH2 0xFCA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA56 SWAP1 PUSH2 0x1E6A JUMP JUMPDEST PUSH2 0x632 PUSH2 0xF9A DUP5 DUP5 PUSH2 0x1116 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 SLT ISZERO PUSH2 0xFF9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA56 SWAP1 PUSH2 0x1E6A JUMP JUMPDEST PUSH2 0x632 DUP4 DUP4 PUSH1 0x0 SUB PUSH2 0x11ED JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 SLT PUSH2 0x1015 JUMPI DUP2 PUSH2 0x19E JUMP JUMPDEST PUSH1 0x0 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1029 DUP5 PUSH2 0x14B0 JUMP JUMPDEST PUSH1 0xFF AND SWAP1 POP PUSH1 0x12 DUP2 GT PUSH2 0x1052 JUMPI PUSH2 0x104D DUP4 PUSH1 0x12 DUP4 SWAP1 SUB PUSH1 0xA EXP PUSH4 0xFFFFFFFF PUSH2 0x15A5 AND JUMP JUMPDEST PUSH2 0x19A JUMP JUMPDEST PUSH2 0x19A DUP4 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEE DUP4 ADD PUSH1 0xA EXP PUSH4 0xFFFFFFFF PUSH2 0x1574 AND JUMP JUMPDEST PUSH1 0x60 PUSH4 0x28006595 PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x10A6 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1E25 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH1 0x0 DUP3 ISZERO DUP1 PUSH2 0x1123 JUMPI POP DUP2 ISZERO JUMPDEST ISZERO PUSH2 0x1130 JUMPI POP PUSH1 0x0 PUSH2 0x19E JUMP JUMPDEST POP DUP2 DUP2 MUL DUP2 DUP4 DUP3 DUP2 PUSH2 0x113E JUMPI INVALID JUMPDEST SDIV EQ DUP1 ISZERO PUSH2 0x1154 JUMPI POP DUP3 DUP3 DUP3 DUP2 PUSH2 0x1151 JUMPI INVALID JUMPDEST SDIV EQ JUMPDEST PUSH2 0x19E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA56 SWAP1 PUSH2 0x1EA1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x118F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA56 SWAP1 PUSH2 0x1F0F JUMP JUMPDEST PUSH32 0x8000000000000000000000000000000000000000000000000000000000000000 DUP4 EQ ISZERO DUP1 PUSH2 0x11C0 JUMPI POP DUP2 PUSH1 0x0 NOT EQ ISZERO JUMPDEST PUSH2 0x11DC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA56 SWAP1 PUSH2 0x1ED8 JUMP JUMPDEST DUP2 DUP4 DUP2 PUSH2 0x11E5 JUMPI INVALID JUMPDEST SDIV SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP2 DUP2 ADD PUSH1 0x0 DUP4 SLT DUP1 ISZERO PUSH2 0x1200 JUMPI POP PUSH1 0x0 DUP3 SLT JUMPDEST DUP1 ISZERO PUSH2 0x120B JUMPI POP DUP3 DUP2 SGT JUMPDEST DUP1 PUSH2 0x122C JUMPI POP PUSH1 0x0 DUP4 SGT DUP1 ISZERO PUSH2 0x1221 JUMPI POP PUSH1 0x0 DUP3 SGT JUMPDEST DUP1 ISZERO PUSH2 0x122C JUMPI POP DUP3 DUP2 SLT JUMPDEST ISZERO PUSH2 0x19E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA56 SWAP1 PUSH2 0x1E33 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 DUP2 SWAP1 PUSH1 0x60 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND SWAP1 PUSH32 0xDD62ED3E00000000000000000000000000000000000000000000000000000000 SWAP1 PUSH2 0x1291 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x24 ADD PUSH2 0x1DB6 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x12FC SWAP2 SWAP1 PUSH2 0x1D86 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1337 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x133C JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x134F JUMPI POP DUP1 MLOAD PUSH1 0x20 EQ JUMPDEST ISZERO PUSH2 0x1362 JUMPI PUSH2 0x135F DUP2 PUSH1 0x0 PUSH2 0x161D JUMP JUMPDEST SWAP3 POP JUMPDEST POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 DUP2 SWAP1 PUSH1 0x60 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SWAP1 PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 SWAP1 PUSH2 0x13B1 SWAP1 DUP8 SWAP1 PUSH1 0x24 ADD PUSH2 0x1DA2 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x141C SWAP2 SWAP1 PUSH2 0x1D86 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1457 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x145C JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x146F JUMPI POP DUP1 MLOAD PUSH1 0x20 EQ JUMPDEST ISZERO PUSH2 0x1482 JUMPI PUSH2 0x147F DUP2 PUSH1 0x0 PUSH2 0x161D JUMP JUMPDEST SWAP3 POP JUMPDEST POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 SLT ISZERO PUSH2 0x14AC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA56 SWAP1 PUSH2 0x1E6A JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x12 SWAP1 POP PUSH1 0x0 PUSH1 0x60 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x4 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x313CE56700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x40 MLOAD PUSH2 0x1507 SWAP2 SWAP1 PUSH2 0x1D86 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1542 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1547 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x155A JUMPI POP DUP1 MLOAD PUSH1 0x20 EQ JUMPDEST ISZERO PUSH2 0x156D JUMPI PUSH2 0x156A DUP2 PUSH1 0x0 PUSH2 0x161D JUMP JUMPDEST SWAP3 POP JUMPDEST POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x1583 JUMPI POP PUSH1 0x0 PUSH2 0x19E JUMP JUMPDEST DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 PUSH2 0x1590 JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x632 JUMPI PUSH2 0x632 PUSH2 0xA04 PUSH1 0x1 DUP7 DUP7 PUSH2 0x1629 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x15BB JUMPI PUSH2 0x15BB PUSH2 0xA04 PUSH1 0x3 DUP6 DUP6 PUSH2 0x1629 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP2 PUSH2 0x15C6 JUMPI INVALID JUMPDEST DIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 SLT ISZERO PUSH2 0xFCA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA56 SWAP1 PUSH2 0x1E6A JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 SLT ISZERO PUSH2 0x1613 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA56 SWAP1 PUSH2 0x1E6A JUMP JUMPDEST PUSH2 0x632 DUP4 DUP4 PUSH2 0x11ED JUMP JUMPDEST PUSH1 0x0 PUSH2 0x632 DUP4 DUP4 PUSH2 0x1648 JUMP JUMPDEST PUSH1 0x60 PUSH4 0xE946C1BB PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x10A6 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1E03 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO PUSH2 0x1669 JUMPI PUSH2 0x1669 PUSH2 0xA04 PUSH1 0x5 DUP6 MLOAD DUP6 PUSH1 0x20 ADD PUSH2 0x1087 JUMP JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x100 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xA0 DUP2 ADD SWAP1 SWAP2 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 PUSH2 0x1741 PUSH2 0x176D JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x174E PUSH2 0x176D JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x175B PUSH2 0x176D JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1768 PUSH2 0x176D JUMP JUMPDEST SWAP1 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x19E DUP2 PUSH2 0x200A JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x179B JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x17AE PUSH2 0x17A9 DUP3 PUSH2 0x1F96 JUMP JUMPDEST PUSH2 0x1F6F JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD PUSH1 0xA0 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x17D0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0xF69 JUMPI PUSH1 0xA0 DUP3 DUP10 SUB SLT ISZERO PUSH2 0x17EB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x17F5 PUSH1 0xA0 PUSH2 0x1F6F JUMP JUMPDEST PUSH2 0x17FF DUP10 DUP5 PUSH2 0x1889 JUMP JUMPDEST DUP2 MSTORE DUP3 DUP5 ADD MLOAD DUP5 DUP3 ADD MSTORE PUSH1 0x40 DUP1 DUP5 ADD MLOAD SWAP1 DUP3 ADD MSTORE PUSH1 0x60 DUP1 DUP5 ADD MLOAD SWAP1 DUP3 ADD MSTORE PUSH1 0x80 DUP1 DUP5 ADD MLOAD SWAP1 DUP3 ADD MSTORE DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 PUSH1 0xA0 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x17D3 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x184B JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1859 PUSH2 0x17A9 DUP3 PUSH2 0x1FB6 JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x1870 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP5 ADD CALLDATACOPY PUSH1 0x0 SWAP1 DUP3 ADD PUSH1 0x20 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x2 DUP2 LT PUSH2 0x19E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x18A9 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x18B3 PUSH1 0x20 PUSH2 0x1F6F JUMP JUMPDEST SWAP2 MLOAD DUP3 MSTORE POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x18CE JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x632 DUP2 PUSH2 0x200A JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x18ED JUMPI DUP2 DUP3 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x18F8 DUP2 PUSH2 0x200A JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x1908 DUP2 PUSH2 0x200A JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH2 0x1918 DUP2 PUSH2 0x200A JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1934 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x632 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1955 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0x1984 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 SWAP3 POP PUSH2 0x1995 DUP2 PUSH2 0x200A JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x19B5 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0x19E4 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x20 DUP7 ADD MLOAD SWAP1 SWAP5 POP PUSH2 0x19F5 DUP2 PUSH2 0x200A JUMP JUMPDEST PUSH1 0x40 DUP7 ADD MLOAD SWAP1 SWAP4 POP PUSH2 0x1A06 DUP2 PUSH2 0x200A JUMP JUMPDEST PUSH1 0x60 DUP7 ADD MLOAD SWAP1 SWAP3 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1A22 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP1 DUP7 ADD DUP8 PUSH1 0x1F DUP3 ADD SLT PUSH2 0x1A33 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP1 MLOAD SWAP2 POP PUSH2 0x1A43 PUSH2 0x17A9 DUP4 PUSH2 0x1FB6 JUMP JUMPDEST DUP3 DUP2 MSTORE DUP9 PUSH1 0x20 DUP5 DUP5 ADD ADD GT ISZERO PUSH2 0x1A57 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x1A68 DUP4 PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP6 ADD PUSH2 0x1FDA JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP3 SWAP6 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1A87 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1A9E JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP6 ADD PUSH1 0x40 DUP2 DUP9 SUB SLT ISZERO PUSH2 0x1AB0 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x1ABA PUSH1 0x40 PUSH2 0x1F6F JUMP JUMPDEST SWAP3 POP DUP1 MLOAD DUP3 DUP2 GT ISZERO PUSH2 0x1ACA JUMPI DUP6 DUP7 REVERT JUMPDEST DUP1 DUP3 ADD DUP9 PUSH1 0x1F DUP3 ADD SLT PUSH2 0x1ADB JUMPI DUP7 DUP8 REVERT JUMPDEST DUP1 MLOAD SWAP2 POP PUSH2 0x1AEB PUSH2 0x17A9 DUP4 PUSH2 0x1F96 JUMP JUMPDEST DUP3 DUP2 MSTORE DUP7 DUP2 ADD SWAP1 DUP3 DUP9 ADD DUP9 DUP6 MUL DUP5 ADD DUP10 ADD DUP13 LT ISZERO PUSH2 0x1B07 JUMPI DUP10 DUP11 REVERT JUMPDEST DUP10 SWAP4 POP JUMPDEST DUP5 DUP5 LT ISZERO PUSH2 0x1B29 JUMPI DUP1 MLOAD DUP4 MSTORE PUSH1 0x1 SWAP4 SWAP1 SWAP4 ADD SWAP3 SWAP2 DUP9 ADD SWAP2 DUP9 ADD PUSH2 0x1B0B JUMP JUMPDEST POP DUP7 MSTORE POP POP POP DUP1 DUP5 ADD MLOAD DUP3 DUP2 GT ISZERO PUSH2 0x1B3F JUMPI DUP6 DUP7 REVERT JUMPDEST PUSH2 0x1B4B DUP9 DUP3 DUP5 ADD PUSH2 0x178B JUMP JUMPDEST DUP6 DUP6 ADD MSTORE POP POP POP DUP1 SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1B6E JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x632 DUP4 DUP4 PUSH2 0x1898 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1B8A JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1BA1 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x1C0 SWAP2 DUP6 ADD DUP1 DUP8 SUB DUP4 SGT ISZERO PUSH2 0x1BB5 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x1BBE DUP4 PUSH2 0x1F6F JUMP JUMPDEST PUSH2 0x1BC8 DUP9 DUP4 PUSH2 0x1780 JUMP JUMPDEST DUP2 MSTORE PUSH2 0x1BD7 DUP9 PUSH1 0x20 DUP5 ADD PUSH2 0x1780 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x1BE9 DUP9 PUSH1 0x40 DUP5 ADD PUSH2 0x1780 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x1BFB DUP9 PUSH1 0x60 DUP5 ADD PUSH2 0x1780 JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP3 ADD CALLDATALOAD PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 DUP3 ADD CALLDATALOAD PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 DUP3 ADD CALLDATALOAD PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0xE0 DUP3 ADD CALLDATALOAD PUSH1 0xE0 DUP3 ADD MSTORE PUSH2 0x100 SWAP4 POP DUP4 DUP3 ADD CALLDATALOAD DUP5 DUP3 ADD MSTORE PUSH2 0x120 SWAP4 POP DUP4 DUP3 ADD CALLDATALOAD DUP5 DUP3 ADD MSTORE PUSH2 0x140 SWAP4 POP DUP4 DUP3 ADD CALLDATALOAD DUP4 DUP2 GT ISZERO PUSH2 0x1C57 JUMPI DUP7 DUP8 REVERT JUMPDEST PUSH2 0x1C63 DUP10 DUP3 DUP6 ADD PUSH2 0x183B JUMP JUMPDEST DUP6 DUP4 ADD MSTORE POP PUSH2 0x160 SWAP4 POP DUP4 DUP3 ADD CALLDATALOAD DUP4 DUP2 GT ISZERO PUSH2 0x1C7D JUMPI DUP7 DUP8 REVERT JUMPDEST PUSH2 0x1C89 DUP10 DUP3 DUP6 ADD PUSH2 0x183B JUMP JUMPDEST DUP6 DUP4 ADD MSTORE POP PUSH2 0x180 SWAP4 POP DUP4 DUP3 ADD CALLDATALOAD DUP4 DUP2 GT ISZERO PUSH2 0x1CA3 JUMPI DUP7 DUP8 REVERT JUMPDEST PUSH2 0x1CAF DUP10 DUP3 DUP6 ADD PUSH2 0x183B JUMP JUMPDEST DUP6 DUP4 ADD MSTORE POP PUSH2 0x1A0 SWAP4 POP DUP4 DUP3 ADD CALLDATALOAD DUP4 DUP2 GT ISZERO PUSH2 0x1CC9 JUMPI DUP7 DUP8 REVERT JUMPDEST PUSH2 0x1CD5 DUP10 DUP3 DUP6 ADD PUSH2 0x183B JUMP JUMPDEST DUP6 DUP4 ADD MSTORE POP DUP1 SWAP6 POP POP POP POP POP PUSH2 0x1CEE DUP5 PUSH1 0x20 DUP6 ADD PUSH2 0x1780 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1D08 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x1D12 PUSH1 0x80 PUSH2 0x1F6F JUMP JUMPDEST PUSH2 0x1D1C DUP5 DUP5 PUSH2 0x1898 JUMP JUMPDEST DUP2 MSTORE PUSH2 0x1D2B DUP5 PUSH1 0x20 DUP6 ADD PUSH2 0x1898 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x1D3D DUP5 PUSH1 0x40 DUP6 ADD PUSH2 0x1898 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x1D4F DUP5 PUSH1 0x60 DUP6 ADD PUSH2 0x1898 JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1D6D JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x1D77 DUP5 DUP5 PUSH2 0x1898 JUMP JUMPDEST SWAP2 POP PUSH2 0x1CEE DUP5 PUSH1 0x20 DUP6 ADD PUSH2 0x1898 JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x1D98 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x1FDA JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x1DEF DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x1FDA JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH1 0x4 DUP6 LT PUSH2 0x1E11 JUMPI INVALID JUMPDEST SWAP4 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH1 0x8 DUP6 LT PUSH2 0x1E11 JUMPI INVALID JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x18 SWAP1 DUP3 ADD MSTORE PUSH32 0x4431382F444543494D414C5F4144445F4F564552464C4F570000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x19 SWAP1 DUP3 ADD MSTORE PUSH32 0x4431382F444543494D414C5F56414C55455F544F4F5F42494700000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x18 SWAP1 DUP3 ADD MSTORE PUSH32 0x4431382F444543494D414C5F4D554C5F4F564552464C4F570000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x18 SWAP1 DUP3 ADD MSTORE PUSH32 0x4431382F444543494D414C5F4449565F4F564552464C4F570000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x17 SWAP1 DUP3 ADD MSTORE PUSH32 0x4431382F444543494D414C5F4449565F42595F5A45524F000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 SWAP2 DUP3 ADD MLOAD SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x1F8E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1FAC JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1FCC JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1FF5 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1FDD JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x2004 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x201F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG3 PUSH6 0x627A7A723158 KECCAK256 0xB3 PUSH28 0x623718E85582E3B696CC95CF6163DDF3045BD0C7E06A84B566DF684E 0xF6 REVERT PUSH13 0x6578706572696D656E74616CF5 PUSH5 0x736F6C6343 STOP SDIV GT STOP BLOCKHASH ",
                "sourceMap": "1191:16798:6:-;;132:2:-1;166:7;155:9;146:7;137:37;255:7;249:14;246:1;241:23;235:4;232:33;222:2;;269:9;222:2;293:9;290:1;283:20;323:4;314:7;306:22;347:7;338;331:24"
            },
            "deployedBytecode": {
                "linkReferences": {
                    "/Users/rickmorty/Documents/projects/0x/0x-monorepo/contracts/dev-utils/contracts/src/LibAssetData.sol": {
                        "LibAssetData": [
                            {
                                "length": 20,
                                "start": 477
                            },
                            {
                                "length": 20,
                                "start": 799
                            }
                        ]
                    }
                },
                "object": "0x73000000000000000000000000000000000000000030146080604052600436106100405760003560e01c80630e70a03314610045578063d12a79601461006e575b600080fd5b6100586100533660046118d9565b610081565b6040516100659190611f66565b60405180910390f35b61005861007c366004611b78565b610132565b6040517f3a031bf00000000000000000000000000000000000000000000000000000000081526000906001600160a01b03831690633a031bf0906100cb9087908790600401611db6565b60206040518083038186803b1580156100e357600080fd5b505afa1580156100f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061011b9190810190611923565b61012657600061012a565b6000195b949350505050565b600061013c611672565b61014684846101a4565b9050610151816103f1565b61015f57600091505061019e565b6101676105f4565b61017082610600565b121561018057600091505061019e565b61019a61018c82610639565b610195836107b4565b6109cd565b9150505b92915050565b6101ac611672565b6101408301516040517f750bdb3000000000000000000000000000000000000000000000000000000000815260609173__$a2317ed4aecd4fd151d12b4b79c9600dfe$__9163750bdb309161020391600401611dd0565b60006040518083038186803b15801561021b57600080fd5b505af415801561022f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261025791908101906119a0565b6001600160a01b039182166020870152918116606086015285811685528651166040850152610160860151519092506024141590506103a5576101608401517ff47261b000000000000000000000000000000000000000000000000000000000906102c990600063ffffffff6109e316565b7fffffffff000000000000000000000000000000000000000000000000000000001614156103a5576101608401516040517f8f4ce47900000000000000000000000000000000000000000000000000000000815273__$a2317ed4aecd4fd151d12b4b79c9600dfe$__91638f4ce479916103469190600401611dd0565b604080518083038186803b15801561035d57600080fd5b505af4158015610371573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506103959190810190611943565b6001600160a01b03166080840152505b6103b78460a001518560800151610a34565b60a08301526103c46116e4565b818060200190516103d89190810190611a75565b805160c08501526020015160e084015250909392505050565b60008160e001515160001415610409575060006105ef565b60005b8260e00151518110156104cf576104216116fe565b8360e00151828151811061043157fe5b602002602001015190506000600181111561044857fe5b8151600181111561045557fe5b1461046057506104cf565b604081015160005b838110156104a857818660e00151828151811061048157fe5b60200260200101516040015114156104a05760009450505050506105ef565b600101610468565b508460c00151518260200151106104c557600093505050506105ef565b505060010161040c565b8260e001515181600101146104e85760009150506105ef565b6104f06116fe565b8360e00151828151811061050057fe5b6020026020010151905060018081111561051657fe5b8151600181111561052357fe5b14610533576000925050506105ef565b83606001516001600160a01b031684600001516001600160a01b031663062bd3e983604001516040518263ffffffff1660e01b81526004016105759190611f66565b60206040518083038186803b15801561058d57600080fd5b505afa1580156105a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506105c591908101906118bd565b6001600160a01b0316146105de576000925050506105ef565b8360c0015151816020015110925050505b919050565b670de0b6b3a764000090565b600061060a6116fe565b60e08301518051600019810190811061061f57fe5b6020026020010151905061063281610a9b565b9392505050565b60001960005b8260e00151518110156107ae576106546116fe565b8360e00151828151811061066457fe5b602002602001015190506000600181111561067b57fe5b8151600181111561068857fe5b1461069357506107a6565b600061069e82610a9b565b9050600085600001516001600160a01b031663062bd3e984604001516040518263ffffffff1660e01b81526004016106d69190611f66565b60206040518083038186803b1580156106ee57600080fd5b505afa158015610702573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061072691908101906118bd565b60808701519091506001600160a01b03161580159061075a575085608001516001600160a01b0316816001600160a01b0316145b156107705761076d828760a00151610ac8565b91505b60008213156107a257600061078e8288604001518960000151610ad7565b905061079e866101958386610af1565b9550505b5050505b60010161063f565b50919050565b60e08101515160001990600111156107c857fe5b6107d06116fe565b60e0830151805160001981019081106107e557fe5b602002602001015190506001808111156107fb57fe5b8151600181111561080857fe5b1461080f57fe5b600061082d6108218560000151610b13565b655af3107a4000610ba7565b905060005b8460c00151518110156109c557600080610863878860c00151858151811061085657fe5b6020026020010151610bb3565b915091508060001415801561088057508361087e8383610a34565b125b15610893576000955050505050506105ef565b846020015183146108a55750506109bd565b6000805b60018960e001515103811015610927576108c16116fe565b8960e0015182815181106108d157fe5b60200260200101519050600060018111156108e857fe5b815160018111156108f557fe5b146108fc57fe5b858160200151141561091e5761091b836109168c84610c9b565b610ba7565b92505b506001016108a9565b5060006109348988610c9b565b9050856109418383610f74565b1261094f57505050506109bd565b8161095a8783610f8b565b141561096957505050506109bd565b60006109996109818661097c8a88610fa8565b610fd7565b61099461098e8a86610f8b565b86610ac8565b610f74565b90506109b5896101958c606001516109b085611006565b61101d565b985050505050505b600101610832565b505050919050565b60008183106109dc5781610632565b5090919050565b60008160040183511015610a0957610a09610a046003855185600401611087565b61110e565b5001602001517fffffffff000000000000000000000000000000000000000000000000000000001690565b600080831215610a5f5760405162461bcd60e51b8152600401610a5690611e6a565b60405180910390fd5b6000821215610a805760405162461bcd60e51b8152600401610a5690611e6a565b610632610a9584670de0b6b3a7640000611116565b83611170565b60008160800151600014610ac057610abb82606001518360800151610a34565b61019e565b61019e6105f4565b600061063283836000036111ed565b600061012a610ae7858585611249565b610195868661136b565b600080831215610a805760405162461bcd60e51b8152600401610a5690611e6a565b6000610b1d61172e565b826001600160a01b031663697947956040518163ffffffff1660e01b815260040160806040518083038186803b158015610b5657600080fd5b505afa158015610b6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610b8e9190810190611cf7565b9050610632610b9b6105f4565b8251516109169061148a565b600061063283836111ed565b600080610bbe61176d565b610bc661176d565b85600001516001600160a01b031663f9416052604051806040016040528089604001516001600160a01b03168152602001888152506040518263ffffffff1660e01b8152600401610c179190611f46565b604080518083038186803b158015610c2e57600080fd5b505afa158015610c42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610c669190810190611d5b565b81519193509150670de0b6b3a76400009004670de0b6b3a7640000826000015181610c8d57fe5b049350935050509250929050565b60008083600001516001600160a01b031663062bd3e984604001516040518263ffffffff1660e01b8152600401610cd29190611f66565b60206040518083038186803b158015610cea57600080fd5b505afa158015610cfe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610d2291908101906118bd565b90506000610d3385606001516114b0565b60ff1690506000610d43836114b0565b60ff169050818111610d7257610d6d818303600a0a610d6187610a9b565b9063ffffffff61157416565b610d90565b610d90828203600a0a610d8487610a9b565b9063ffffffff6115a516565b9350600086600001516001600160a01b0316638928378e87604001516040518263ffffffff1660e01b8152600401610dc89190611f66565b60206040518083038186803b158015610de057600080fd5b505afa158015610df4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610e189190810190611b5d565b5190506012821115610e6057610e59817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffee8401600a0a63ffffffff61157416565b9050610e7a565b610e77816012849003600a0a63ffffffff6115a516565b90505b610e8481866115cf565b94506000610f34610e936105f4565b89516040808b015190517ffd04b6060000000000000000000000000000000000000000000000000000000081526001600160a01b039092169163fd04b60691610ede91600401611f66565b60206040518083038186803b158015610ef657600080fd5b505afa158015610f0a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610f2e9190810190611b5d565b516115f1565b9050600087516001811115610f4557fe5b1415610f5c57610f558682610f74565b9550610f69565b610f668682610f8b565b95505b505050505092915050565b6000610632610a9584670de0b6b3a7640000611116565b6000610632610f9a8484611116565b670de0b6b3a7640000611170565b600080821215610fca5760405162461bcd60e51b8152600401610a5690611e6a565b610632610f9a8484611116565b600080831215610ff95760405162461bcd60e51b8152600401610a5690611e6a565b61063283836000036111ed565b6000808212611015578161019e565b600092915050565b600080611029846114b0565b60ff169050601281116110525761104d836012839003600a0a63ffffffff6115a516565b61019a565b61019a837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffee8301600a0a63ffffffff61157416565b6060632800659560e01b8484846040516024016110a693929190611e25565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915290509392505050565b805160208201fd5b6000821580611123575081155b156111305750600061019e565b508181028183828161113e57fe5b0514801561115457508282828161115157fe5b05145b61019e5760405162461bcd60e51b8152600401610a5690611ea1565b60008161118f5760405162461bcd60e51b8152600401610a5690611f0f565b7f8000000000000000000000000000000000000000000000000000000000000000831415806111c057508160001914155b6111dc5760405162461bcd60e51b8152600401610a5690611ed8565b8183816111e557fe5b059392505050565b8181016000831280156112005750600082125b801561120b57508281135b8061122c57506000831380156112215750600082135b801561122c57508281125b1561019e5760405162461bcd60e51b8152600401610a5690611e33565b60405160009081906060906001600160a01b038716907fdd62ed3e00000000000000000000000000000000000000000000000000000000906112919088908890602401611db6565b60408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009094169390931790925290516112fc9190611d86565b600060405180830381855afa9150503d8060008114611337576040519150601f19603f3d011682016040523d82523d6000602084013e61133c565b606091505b509150915081801561134f575080516020145b156113625761135f81600061161d565b92505b50509392505050565b60405160009081906060906001600160a01b038616907f70a0823100000000000000000000000000000000000000000000000000000000906113b1908790602401611da2565b60408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090941693909317909252905161141c9190611d86565b600060405180830381855afa9150503d8060008114611457576040519150601f19603f3d011682016040523d82523d6000602084013e61145c565b606091505b509150915081801561146f575080516020145b156114825761147f81600061161d565b92505b505092915050565b6000808212156114ac5760405162461bcd60e51b8152600401610a5690611e6a565b5090565b60006012905060006060836001600160a01b03166040518060400160405280600481526020017f313ce567000000000000000000000000000000000000000000000000000000008152506040516115079190611d86565b600060405180830381855afa9150503d8060008114611542576040519150601f19603f3d011682016040523d82523d6000602084013e611547565b606091505b509150915081801561155a575080516020145b1561156d5761156a81600061161d565b92505b5050919050565b6000826115835750600061019e565b8282028284828161159057fe5b041461063257610632610a0460018686611629565b6000816115bb576115bb610a0460038585611629565b60008284816115c657fe5b04949350505050565b600080831215610fca5760405162461bcd60e51b8152600401610a5690611e6a565b6000808212156116135760405162461bcd60e51b8152600401610a5690611e6a565b61063283836111ed565b60006106328383611648565b606063e946c1bb60e01b8484846040516024016110a693929190611e03565b6000816020018351101561166957611669610a046005855185602001611087565b50016020015190565b60405180610100016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b031681526020016000815260200160608152602001606081525090565b604051806040016040528060608152602001606081525090565b6040805160a081019091528060008152602001600081526020016000815260200160008152602001600081525090565b604051806080016040528061174161176d565b815260200161174e61176d565b815260200161175b61176d565b815260200161176861176d565b905290565b6040518060200160405280600081525090565b803561019e8161200a565b600082601f83011261179b578081fd5b81516117ae6117a982611f96565b611f6f565b818152915060208083019084810160a08402860182018710156117d057600080fd5b60005b84811015610f695760a082890312156117eb57600080fd5b6117f560a0611f6f565b6117ff8984611889565b8152828401518482015260408084015190820152606080840151908201526080808401519082015284529282019260a0909101906001016117d3565b600082601f83011261184b578081fd5b81356118596117a982611fb6565b915080825283602082850101111561187057600080fd5b8060208401602084013760009082016020015292915050565b80516002811061019e57600080fd5b6000602082840312156118a9578081fd5b6118b36020611f6f565b9151825250919050565b6000602082840312156118ce578081fd5b81516106328161200a565b6000806000606084860312156118ed578182fd5b83356118f88161200a565b925060208401356119088161200a565b915060408401356119188161200a565b809150509250925092565b600060208284031215611934578081fd5b81518015158114610632578182fd5b60008060408385031215611955578182fd5b82517fffffffff0000000000000000000000000000000000000000000000000000000081168114611984578283fd5b60208401519092506119958161200a565b809150509250929050565b600080600080608085870312156119b5578182fd5b84517fffffffff00000000000000000000000000000000000000000000000000000000811681146119e4578283fd5b60208601519094506119f58161200a565b6040860151909350611a068161200a565b606086015190925067ffffffffffffffff811115611a22578182fd5b80860187601f820112611a33578283fd5b80519150611a436117a983611fb6565b828152886020848401011115611a57578384fd5b611a68836020830160208501611fda565b9598949750929550505050565b60006020808385031215611a87578182fd5b825167ffffffffffffffff80821115611a9e578384fd5b81850160408188031215611ab0578485fd5b611aba6040611f6f565b9250805182811115611aca578586fd5b80820188601f820112611adb578687fd5b80519150611aeb6117a983611f96565b82815286810190828801888502840189018c1015611b0757898afd5b8993505b84841015611b29578051835260019390930192918801918801611b0b565b5086525050508084015182811115611b3f578586fd5b611b4b8882840161178b565b85850152505050809250505092915050565b600060208284031215611b6e578081fd5b6106328383611898565b60008060408385031215611b8a578182fd5b823567ffffffffffffffff80821115611ba1578384fd5b6101c0918501808703831315611bb5578485fd5b611bbe83611f6f565b611bc88883611780565b8152611bd78860208401611780565b6020820152611be98860408401611780565b6040820152611bfb8860608401611780565b60608201526080820135608082015260a082013560a082015260c082013560c082015260e082013560e0820152610100935083820135848201526101209350838201358482015261014093508382013583811115611c57578687fd5b611c638982850161183b565b858301525061016093508382013583811115611c7d578687fd5b611c898982850161183b565b858301525061018093508382013583811115611ca3578687fd5b611caf8982850161183b565b85830152506101a093508382013583811115611cc9578687fd5b611cd58982850161183b565b858301525080955050505050611cee8460208501611780565b90509250929050565b600060808284031215611d08578081fd5b611d126080611f6f565b611d1c8484611898565b8152611d2b8460208501611898565b6020820152611d3d8460408501611898565b6040820152611d4f8460608501611898565b60608201529392505050565b60008060408385031215611d6d578182fd5b611d778484611898565b9150611cee8460208501611898565b60008251611d98818460208701611fda565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6000602082528251806020840152611def816040850160208701611fda565b601f01601f19169190910160400192915050565b6060810160048510611e1157fe5b938152602081019290925260409091015290565b6060810160088510611e1157fe5b60208082526018908201527f4431382f444543494d414c5f4144445f4f564552464c4f570000000000000000604082015260600190565b60208082526019908201527f4431382f444543494d414c5f56414c55455f544f4f5f42494700000000000000604082015260600190565b60208082526018908201527f4431382f444543494d414c5f4d554c5f4f564552464c4f570000000000000000604082015260600190565b60208082526018908201527f4431382f444543494d414c5f4449565f4f564552464c4f570000000000000000604082015260600190565b60208082526017908201527f4431382f444543494d414c5f4449565f42595f5a45524f000000000000000000604082015260600190565b81516001600160a01b031681526020918201519181019190915260400190565b90815260200190565b60405181810167ffffffffffffffff81118282101715611f8e57600080fd5b604052919050565b600067ffffffffffffffff821115611fac578081fd5b5060209081020190565b600067ffffffffffffffff821115611fcc578081fd5b50601f01601f191660200190565b60005b83811015611ff5578181015183820152602001611fdd565b83811115612004576000848401525b50505050565b6001600160a01b038116811461201f57600080fd5b5056fea365627a7a72315820b37b623718e85582e3b696cc95cf6163ddf3045bd0c7e06a84b566df684ef6fd6c6578706572696d656e74616cf564736f6c63430005110040",
                "opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x40 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xE70A033 EQ PUSH2 0x45 JUMPI DUP1 PUSH4 0xD12A7960 EQ PUSH2 0x6E JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x58 PUSH2 0x53 CALLDATASIZE PUSH1 0x4 PUSH2 0x18D9 JUMP JUMPDEST PUSH2 0x81 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x65 SWAP2 SWAP1 PUSH2 0x1F66 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x58 PUSH2 0x7C CALLDATASIZE PUSH1 0x4 PUSH2 0x1B78 JUMP JUMPDEST PUSH2 0x132 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x3A031BF000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x3A031BF0 SWAP1 PUSH2 0xCB SWAP1 DUP8 SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x1DB6 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xE3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xF7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x11B SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1923 JUMP JUMPDEST PUSH2 0x126 JUMPI PUSH1 0x0 PUSH2 0x12A JUMP JUMPDEST PUSH1 0x0 NOT JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x13C PUSH2 0x1672 JUMP JUMPDEST PUSH2 0x146 DUP5 DUP5 PUSH2 0x1A4 JUMP JUMPDEST SWAP1 POP PUSH2 0x151 DUP2 PUSH2 0x3F1 JUMP JUMPDEST PUSH2 0x15F JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x19E JUMP JUMPDEST PUSH2 0x167 PUSH2 0x5F4 JUMP JUMPDEST PUSH2 0x170 DUP3 PUSH2 0x600 JUMP JUMPDEST SLT ISZERO PUSH2 0x180 JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x19E JUMP JUMPDEST PUSH2 0x19A PUSH2 0x18C DUP3 PUSH2 0x639 JUMP JUMPDEST PUSH2 0x195 DUP4 PUSH2 0x7B4 JUMP JUMPDEST PUSH2 0x9CD JUMP JUMPDEST SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1AC PUSH2 0x1672 JUMP JUMPDEST PUSH2 0x140 DUP4 ADD MLOAD PUSH1 0x40 MLOAD PUSH32 0x750BDB3000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x60 SWAP2 PUSH20 0x0 SWAP2 PUSH4 0x750BDB30 SWAP2 PUSH2 0x203 SWAP2 PUSH1 0x4 ADD PUSH2 0x1DD0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x21B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x22F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x257 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x19A0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x20 DUP8 ADD MSTORE SWAP2 DUP2 AND PUSH1 0x60 DUP7 ADD MSTORE DUP6 DUP2 AND DUP6 MSTORE DUP7 MLOAD AND PUSH1 0x40 DUP6 ADD MSTORE PUSH2 0x160 DUP7 ADD MLOAD MLOAD SWAP1 SWAP3 POP PUSH1 0x24 EQ ISZERO SWAP1 POP PUSH2 0x3A5 JUMPI PUSH2 0x160 DUP5 ADD MLOAD PUSH32 0xF47261B000000000000000000000000000000000000000000000000000000000 SWAP1 PUSH2 0x2C9 SWAP1 PUSH1 0x0 PUSH4 0xFFFFFFFF PUSH2 0x9E3 AND JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND EQ ISZERO PUSH2 0x3A5 JUMPI PUSH2 0x160 DUP5 ADD MLOAD PUSH1 0x40 MLOAD PUSH32 0x8F4CE47900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0x0 SWAP2 PUSH4 0x8F4CE479 SWAP2 PUSH2 0x346 SWAP2 SWAP1 PUSH1 0x4 ADD PUSH2 0x1DD0 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x35D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x371 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x395 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1943 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x80 DUP5 ADD MSTORE POP JUMPDEST PUSH2 0x3B7 DUP5 PUSH1 0xA0 ADD MLOAD DUP6 PUSH1 0x80 ADD MLOAD PUSH2 0xA34 JUMP JUMPDEST PUSH1 0xA0 DUP4 ADD MSTORE PUSH2 0x3C4 PUSH2 0x16E4 JUMP JUMPDEST DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x3D8 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1A75 JUMP JUMPDEST DUP1 MLOAD PUSH1 0xC0 DUP6 ADD MSTORE PUSH1 0x20 ADD MLOAD PUSH1 0xE0 DUP5 ADD MSTORE POP SWAP1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0xE0 ADD MLOAD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x409 JUMPI POP PUSH1 0x0 PUSH2 0x5EF JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 PUSH1 0xE0 ADD MLOAD MLOAD DUP2 LT ISZERO PUSH2 0x4CF JUMPI PUSH2 0x421 PUSH2 0x16FE JUMP JUMPDEST DUP4 PUSH1 0xE0 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x431 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x448 JUMPI INVALID JUMPDEST DUP2 MLOAD PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x455 JUMPI INVALID JUMPDEST EQ PUSH2 0x460 JUMPI POP PUSH2 0x4CF JUMP JUMPDEST PUSH1 0x40 DUP2 ADD MLOAD PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x4A8 JUMPI DUP2 DUP7 PUSH1 0xE0 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x481 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 ADD MLOAD EQ ISZERO PUSH2 0x4A0 JUMPI PUSH1 0x0 SWAP5 POP POP POP POP POP PUSH2 0x5EF JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x468 JUMP JUMPDEST POP DUP5 PUSH1 0xC0 ADD MLOAD MLOAD DUP3 PUSH1 0x20 ADD MLOAD LT PUSH2 0x4C5 JUMPI PUSH1 0x0 SWAP4 POP POP POP POP PUSH2 0x5EF JUMP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x40C JUMP JUMPDEST DUP3 PUSH1 0xE0 ADD MLOAD MLOAD DUP2 PUSH1 0x1 ADD EQ PUSH2 0x4E8 JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x5EF JUMP JUMPDEST PUSH2 0x4F0 PUSH2 0x16FE JUMP JUMPDEST DUP4 PUSH1 0xE0 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x500 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x1 DUP1 DUP2 GT ISZERO PUSH2 0x516 JUMPI INVALID JUMPDEST DUP2 MLOAD PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x523 JUMPI INVALID JUMPDEST EQ PUSH2 0x533 JUMPI PUSH1 0x0 SWAP3 POP POP POP PUSH2 0x5EF JUMP JUMPDEST DUP4 PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x62BD3E9 DUP4 PUSH1 0x40 ADD MLOAD PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x575 SWAP2 SWAP1 PUSH2 0x1F66 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x58D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5A1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x5C5 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x18BD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x5DE JUMPI PUSH1 0x0 SWAP3 POP POP POP PUSH2 0x5EF JUMP JUMPDEST DUP4 PUSH1 0xC0 ADD MLOAD MLOAD DUP2 PUSH1 0x20 ADD MLOAD LT SWAP3 POP POP POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH8 0xDE0B6B3A7640000 SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x60A PUSH2 0x16FE JUMP JUMPDEST PUSH1 0xE0 DUP4 ADD MLOAD DUP1 MLOAD PUSH1 0x0 NOT DUP2 ADD SWAP1 DUP2 LT PUSH2 0x61F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH2 0x632 DUP2 PUSH2 0xA9B JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 NOT PUSH1 0x0 JUMPDEST DUP3 PUSH1 0xE0 ADD MLOAD MLOAD DUP2 LT ISZERO PUSH2 0x7AE JUMPI PUSH2 0x654 PUSH2 0x16FE JUMP JUMPDEST DUP4 PUSH1 0xE0 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x664 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x67B JUMPI INVALID JUMPDEST DUP2 MLOAD PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x688 JUMPI INVALID JUMPDEST EQ PUSH2 0x693 JUMPI POP PUSH2 0x7A6 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x69E DUP3 PUSH2 0xA9B JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP6 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x62BD3E9 DUP5 PUSH1 0x40 ADD MLOAD PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6D6 SWAP2 SWAP1 PUSH2 0x1F66 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x702 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x726 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x18BD JUMP JUMPDEST PUSH1 0x80 DUP8 ADD MLOAD SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO DUP1 ISZERO SWAP1 PUSH2 0x75A JUMPI POP DUP6 PUSH1 0x80 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST ISZERO PUSH2 0x770 JUMPI PUSH2 0x76D DUP3 DUP8 PUSH1 0xA0 ADD MLOAD PUSH2 0xAC8 JUMP JUMPDEST SWAP2 POP JUMPDEST PUSH1 0x0 DUP3 SGT ISZERO PUSH2 0x7A2 JUMPI PUSH1 0x0 PUSH2 0x78E DUP3 DUP9 PUSH1 0x40 ADD MLOAD DUP10 PUSH1 0x0 ADD MLOAD PUSH2 0xAD7 JUMP JUMPDEST SWAP1 POP PUSH2 0x79E DUP7 PUSH2 0x195 DUP4 DUP7 PUSH2 0xAF1 JUMP JUMPDEST SWAP6 POP POP JUMPDEST POP POP POP JUMPDEST PUSH1 0x1 ADD PUSH2 0x63F JUMP JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0xE0 DUP2 ADD MLOAD MLOAD PUSH1 0x0 NOT SWAP1 PUSH1 0x1 GT ISZERO PUSH2 0x7C8 JUMPI INVALID JUMPDEST PUSH2 0x7D0 PUSH2 0x16FE JUMP JUMPDEST PUSH1 0xE0 DUP4 ADD MLOAD DUP1 MLOAD PUSH1 0x0 NOT DUP2 ADD SWAP1 DUP2 LT PUSH2 0x7E5 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x1 DUP1 DUP2 GT ISZERO PUSH2 0x7FB JUMPI INVALID JUMPDEST DUP2 MLOAD PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x808 JUMPI INVALID JUMPDEST EQ PUSH2 0x80F JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH2 0x82D PUSH2 0x821 DUP6 PUSH1 0x0 ADD MLOAD PUSH2 0xB13 JUMP JUMPDEST PUSH6 0x5AF3107A4000 PUSH2 0xBA7 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 PUSH1 0xC0 ADD MLOAD MLOAD DUP2 LT ISZERO PUSH2 0x9C5 JUMPI PUSH1 0x0 DUP1 PUSH2 0x863 DUP8 DUP9 PUSH1 0xC0 ADD MLOAD DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x856 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0xBB3 JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP1 PUSH1 0x0 EQ ISZERO DUP1 ISZERO PUSH2 0x880 JUMPI POP DUP4 PUSH2 0x87E DUP4 DUP4 PUSH2 0xA34 JUMP JUMPDEST SLT JUMPDEST ISZERO PUSH2 0x893 JUMPI PUSH1 0x0 SWAP6 POP POP POP POP POP POP PUSH2 0x5EF JUMP JUMPDEST DUP5 PUSH1 0x20 ADD MLOAD DUP4 EQ PUSH2 0x8A5 JUMPI POP POP PUSH2 0x9BD JUMP JUMPDEST PUSH1 0x0 DUP1 JUMPDEST PUSH1 0x1 DUP10 PUSH1 0xE0 ADD MLOAD MLOAD SUB DUP2 LT ISZERO PUSH2 0x927 JUMPI PUSH2 0x8C1 PUSH2 0x16FE JUMP JUMPDEST DUP10 PUSH1 0xE0 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x8D1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x8E8 JUMPI INVALID JUMPDEST DUP2 MLOAD PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x8F5 JUMPI INVALID JUMPDEST EQ PUSH2 0x8FC JUMPI INVALID JUMPDEST DUP6 DUP2 PUSH1 0x20 ADD MLOAD EQ ISZERO PUSH2 0x91E JUMPI PUSH2 0x91B DUP4 PUSH2 0x916 DUP13 DUP5 PUSH2 0xC9B JUMP JUMPDEST PUSH2 0xBA7 JUMP JUMPDEST SWAP3 POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x8A9 JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0x934 DUP10 DUP9 PUSH2 0xC9B JUMP JUMPDEST SWAP1 POP DUP6 PUSH2 0x941 DUP4 DUP4 PUSH2 0xF74 JUMP JUMPDEST SLT PUSH2 0x94F JUMPI POP POP POP POP PUSH2 0x9BD JUMP JUMPDEST DUP2 PUSH2 0x95A DUP8 DUP4 PUSH2 0xF8B JUMP JUMPDEST EQ ISZERO PUSH2 0x969 JUMPI POP POP POP POP PUSH2 0x9BD JUMP JUMPDEST PUSH1 0x0 PUSH2 0x999 PUSH2 0x981 DUP7 PUSH2 0x97C DUP11 DUP9 PUSH2 0xFA8 JUMP JUMPDEST PUSH2 0xFD7 JUMP JUMPDEST PUSH2 0x994 PUSH2 0x98E DUP11 DUP7 PUSH2 0xF8B JUMP JUMPDEST DUP7 PUSH2 0xAC8 JUMP JUMPDEST PUSH2 0xF74 JUMP JUMPDEST SWAP1 POP PUSH2 0x9B5 DUP10 PUSH2 0x195 DUP13 PUSH1 0x60 ADD MLOAD PUSH2 0x9B0 DUP6 PUSH2 0x1006 JUMP JUMPDEST PUSH2 0x101D JUMP JUMPDEST SWAP9 POP POP POP POP POP POP JUMPDEST PUSH1 0x1 ADD PUSH2 0x832 JUMP JUMPDEST POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0x9DC JUMPI DUP2 PUSH2 0x632 JUMP JUMPDEST POP SWAP1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x4 ADD DUP4 MLOAD LT ISZERO PUSH2 0xA09 JUMPI PUSH2 0xA09 PUSH2 0xA04 PUSH1 0x3 DUP6 MLOAD DUP6 PUSH1 0x4 ADD PUSH2 0x1087 JUMP JUMPDEST PUSH2 0x110E JUMP JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 SLT ISZERO PUSH2 0xA5F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA56 SWAP1 PUSH2 0x1E6A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 SLT ISZERO PUSH2 0xA80 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA56 SWAP1 PUSH2 0x1E6A JUMP JUMPDEST PUSH2 0x632 PUSH2 0xA95 DUP5 PUSH8 0xDE0B6B3A7640000 PUSH2 0x1116 JUMP JUMPDEST DUP4 PUSH2 0x1170 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x80 ADD MLOAD PUSH1 0x0 EQ PUSH2 0xAC0 JUMPI PUSH2 0xABB DUP3 PUSH1 0x60 ADD MLOAD DUP4 PUSH1 0x80 ADD MLOAD PUSH2 0xA34 JUMP JUMPDEST PUSH2 0x19E JUMP JUMPDEST PUSH2 0x19E PUSH2 0x5F4 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x632 DUP4 DUP4 PUSH1 0x0 SUB PUSH2 0x11ED JUMP JUMPDEST PUSH1 0x0 PUSH2 0x12A PUSH2 0xAE7 DUP6 DUP6 DUP6 PUSH2 0x1249 JUMP JUMPDEST PUSH2 0x195 DUP7 DUP7 PUSH2 0x136B JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 SLT ISZERO PUSH2 0xA80 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA56 SWAP1 PUSH2 0x1E6A JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB1D PUSH2 0x172E JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x69794795 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x80 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xB56 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xB6A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0xB8E SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1CF7 JUMP JUMPDEST SWAP1 POP PUSH2 0x632 PUSH2 0xB9B PUSH2 0x5F4 JUMP JUMPDEST DUP3 MLOAD MLOAD PUSH2 0x916 SWAP1 PUSH2 0x148A JUMP JUMPDEST PUSH1 0x0 PUSH2 0x632 DUP4 DUP4 PUSH2 0x11ED JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xBBE PUSH2 0x176D JUMP JUMPDEST PUSH2 0xBC6 PUSH2 0x176D JUMP JUMPDEST DUP6 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xF9416052 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP10 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC17 SWAP2 SWAP1 PUSH2 0x1F46 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xC2E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xC42 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0xC66 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1D5B JUMP JUMPDEST DUP2 MLOAD SWAP2 SWAP4 POP SWAP2 POP PUSH8 0xDE0B6B3A7640000 SWAP1 DIV PUSH8 0xDE0B6B3A7640000 DUP3 PUSH1 0x0 ADD MLOAD DUP2 PUSH2 0xC8D JUMPI INVALID JUMPDEST DIV SWAP4 POP SWAP4 POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x62BD3E9 DUP5 PUSH1 0x40 ADD MLOAD PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCD2 SWAP2 SWAP1 PUSH2 0x1F66 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xCEA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xCFE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0xD22 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x18BD JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xD33 DUP6 PUSH1 0x60 ADD MLOAD PUSH2 0x14B0 JUMP JUMPDEST PUSH1 0xFF AND SWAP1 POP PUSH1 0x0 PUSH2 0xD43 DUP4 PUSH2 0x14B0 JUMP JUMPDEST PUSH1 0xFF AND SWAP1 POP DUP2 DUP2 GT PUSH2 0xD72 JUMPI PUSH2 0xD6D DUP2 DUP4 SUB PUSH1 0xA EXP PUSH2 0xD61 DUP8 PUSH2 0xA9B JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x1574 AND JUMP JUMPDEST PUSH2 0xD90 JUMP JUMPDEST PUSH2 0xD90 DUP3 DUP3 SUB PUSH1 0xA EXP PUSH2 0xD84 DUP8 PUSH2 0xA9B JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x15A5 AND JUMP JUMPDEST SWAP4 POP PUSH1 0x0 DUP7 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x8928378E DUP8 PUSH1 0x40 ADD MLOAD PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xDC8 SWAP2 SWAP1 PUSH2 0x1F66 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xDE0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xDF4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0xE18 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1B5D JUMP JUMPDEST MLOAD SWAP1 POP PUSH1 0x12 DUP3 GT ISZERO PUSH2 0xE60 JUMPI PUSH2 0xE59 DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEE DUP5 ADD PUSH1 0xA EXP PUSH4 0xFFFFFFFF PUSH2 0x1574 AND JUMP JUMPDEST SWAP1 POP PUSH2 0xE7A JUMP JUMPDEST PUSH2 0xE77 DUP2 PUSH1 0x12 DUP5 SWAP1 SUB PUSH1 0xA EXP PUSH4 0xFFFFFFFF PUSH2 0x15A5 AND JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH2 0xE84 DUP2 DUP7 PUSH2 0x15CF JUMP JUMPDEST SWAP5 POP PUSH1 0x0 PUSH2 0xF34 PUSH2 0xE93 PUSH2 0x5F4 JUMP JUMPDEST DUP10 MLOAD PUSH1 0x40 DUP1 DUP12 ADD MLOAD SWAP1 MLOAD PUSH32 0xFD04B60600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 PUSH4 0xFD04B606 SWAP2 PUSH2 0xEDE SWAP2 PUSH1 0x4 ADD PUSH2 0x1F66 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xEF6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xF0A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0xF2E SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1B5D JUMP JUMPDEST MLOAD PUSH2 0x15F1 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP8 MLOAD PUSH1 0x1 DUP2 GT ISZERO PUSH2 0xF45 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0xF5C JUMPI PUSH2 0xF55 DUP7 DUP3 PUSH2 0xF74 JUMP JUMPDEST SWAP6 POP PUSH2 0xF69 JUMP JUMPDEST PUSH2 0xF66 DUP7 DUP3 PUSH2 0xF8B JUMP JUMPDEST SWAP6 POP JUMPDEST POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x632 PUSH2 0xA95 DUP5 PUSH8 0xDE0B6B3A7640000 PUSH2 0x1116 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x632 PUSH2 0xF9A DUP5 DUP5 PUSH2 0x1116 JUMP JUMPDEST PUSH8 0xDE0B6B3A7640000 PUSH2 0x1170 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 SLT ISZERO PUSH2 0xFCA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA56 SWAP1 PUSH2 0x1E6A JUMP JUMPDEST PUSH2 0x632 PUSH2 0xF9A DUP5 DUP5 PUSH2 0x1116 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 SLT ISZERO PUSH2 0xFF9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA56 SWAP1 PUSH2 0x1E6A JUMP JUMPDEST PUSH2 0x632 DUP4 DUP4 PUSH1 0x0 SUB PUSH2 0x11ED JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 SLT PUSH2 0x1015 JUMPI DUP2 PUSH2 0x19E JUMP JUMPDEST PUSH1 0x0 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1029 DUP5 PUSH2 0x14B0 JUMP JUMPDEST PUSH1 0xFF AND SWAP1 POP PUSH1 0x12 DUP2 GT PUSH2 0x1052 JUMPI PUSH2 0x104D DUP4 PUSH1 0x12 DUP4 SWAP1 SUB PUSH1 0xA EXP PUSH4 0xFFFFFFFF PUSH2 0x15A5 AND JUMP JUMPDEST PUSH2 0x19A JUMP JUMPDEST PUSH2 0x19A DUP4 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEE DUP4 ADD PUSH1 0xA EXP PUSH4 0xFFFFFFFF PUSH2 0x1574 AND JUMP JUMPDEST PUSH1 0x60 PUSH4 0x28006595 PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x10A6 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1E25 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH1 0x0 DUP3 ISZERO DUP1 PUSH2 0x1123 JUMPI POP DUP2 ISZERO JUMPDEST ISZERO PUSH2 0x1130 JUMPI POP PUSH1 0x0 PUSH2 0x19E JUMP JUMPDEST POP DUP2 DUP2 MUL DUP2 DUP4 DUP3 DUP2 PUSH2 0x113E JUMPI INVALID JUMPDEST SDIV EQ DUP1 ISZERO PUSH2 0x1154 JUMPI POP DUP3 DUP3 DUP3 DUP2 PUSH2 0x1151 JUMPI INVALID JUMPDEST SDIV EQ JUMPDEST PUSH2 0x19E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA56 SWAP1 PUSH2 0x1EA1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x118F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA56 SWAP1 PUSH2 0x1F0F JUMP JUMPDEST PUSH32 0x8000000000000000000000000000000000000000000000000000000000000000 DUP4 EQ ISZERO DUP1 PUSH2 0x11C0 JUMPI POP DUP2 PUSH1 0x0 NOT EQ ISZERO JUMPDEST PUSH2 0x11DC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA56 SWAP1 PUSH2 0x1ED8 JUMP JUMPDEST DUP2 DUP4 DUP2 PUSH2 0x11E5 JUMPI INVALID JUMPDEST SDIV SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP2 DUP2 ADD PUSH1 0x0 DUP4 SLT DUP1 ISZERO PUSH2 0x1200 JUMPI POP PUSH1 0x0 DUP3 SLT JUMPDEST DUP1 ISZERO PUSH2 0x120B JUMPI POP DUP3 DUP2 SGT JUMPDEST DUP1 PUSH2 0x122C JUMPI POP PUSH1 0x0 DUP4 SGT DUP1 ISZERO PUSH2 0x1221 JUMPI POP PUSH1 0x0 DUP3 SGT JUMPDEST DUP1 ISZERO PUSH2 0x122C JUMPI POP DUP3 DUP2 SLT JUMPDEST ISZERO PUSH2 0x19E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA56 SWAP1 PUSH2 0x1E33 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 DUP2 SWAP1 PUSH1 0x60 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND SWAP1 PUSH32 0xDD62ED3E00000000000000000000000000000000000000000000000000000000 SWAP1 PUSH2 0x1291 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x24 ADD PUSH2 0x1DB6 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x12FC SWAP2 SWAP1 PUSH2 0x1D86 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1337 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x133C JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x134F JUMPI POP DUP1 MLOAD PUSH1 0x20 EQ JUMPDEST ISZERO PUSH2 0x1362 JUMPI PUSH2 0x135F DUP2 PUSH1 0x0 PUSH2 0x161D JUMP JUMPDEST SWAP3 POP JUMPDEST POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 DUP2 SWAP1 PUSH1 0x60 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SWAP1 PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 SWAP1 PUSH2 0x13B1 SWAP1 DUP8 SWAP1 PUSH1 0x24 ADD PUSH2 0x1DA2 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x141C SWAP2 SWAP1 PUSH2 0x1D86 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1457 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x145C JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x146F JUMPI POP DUP1 MLOAD PUSH1 0x20 EQ JUMPDEST ISZERO PUSH2 0x1482 JUMPI PUSH2 0x147F DUP2 PUSH1 0x0 PUSH2 0x161D JUMP JUMPDEST SWAP3 POP JUMPDEST POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 SLT ISZERO PUSH2 0x14AC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA56 SWAP1 PUSH2 0x1E6A JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x12 SWAP1 POP PUSH1 0x0 PUSH1 0x60 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x4 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x313CE56700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x40 MLOAD PUSH2 0x1507 SWAP2 SWAP1 PUSH2 0x1D86 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1542 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1547 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x155A JUMPI POP DUP1 MLOAD PUSH1 0x20 EQ JUMPDEST ISZERO PUSH2 0x156D JUMPI PUSH2 0x156A DUP2 PUSH1 0x0 PUSH2 0x161D JUMP JUMPDEST SWAP3 POP JUMPDEST POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x1583 JUMPI POP PUSH1 0x0 PUSH2 0x19E JUMP JUMPDEST DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 PUSH2 0x1590 JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x632 JUMPI PUSH2 0x632 PUSH2 0xA04 PUSH1 0x1 DUP7 DUP7 PUSH2 0x1629 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x15BB JUMPI PUSH2 0x15BB PUSH2 0xA04 PUSH1 0x3 DUP6 DUP6 PUSH2 0x1629 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP2 PUSH2 0x15C6 JUMPI INVALID JUMPDEST DIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 SLT ISZERO PUSH2 0xFCA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA56 SWAP1 PUSH2 0x1E6A JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 SLT ISZERO PUSH2 0x1613 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA56 SWAP1 PUSH2 0x1E6A JUMP JUMPDEST PUSH2 0x632 DUP4 DUP4 PUSH2 0x11ED JUMP JUMPDEST PUSH1 0x0 PUSH2 0x632 DUP4 DUP4 PUSH2 0x1648 JUMP JUMPDEST PUSH1 0x60 PUSH4 0xE946C1BB PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x10A6 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1E03 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO PUSH2 0x1669 JUMPI PUSH2 0x1669 PUSH2 0xA04 PUSH1 0x5 DUP6 MLOAD DUP6 PUSH1 0x20 ADD PUSH2 0x1087 JUMP JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x100 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xA0 DUP2 ADD SWAP1 SWAP2 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 PUSH2 0x1741 PUSH2 0x176D JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x174E PUSH2 0x176D JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x175B PUSH2 0x176D JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1768 PUSH2 0x176D JUMP JUMPDEST SWAP1 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x19E DUP2 PUSH2 0x200A JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x179B JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x17AE PUSH2 0x17A9 DUP3 PUSH2 0x1F96 JUMP JUMPDEST PUSH2 0x1F6F JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD PUSH1 0xA0 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x17D0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0xF69 JUMPI PUSH1 0xA0 DUP3 DUP10 SUB SLT ISZERO PUSH2 0x17EB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x17F5 PUSH1 0xA0 PUSH2 0x1F6F JUMP JUMPDEST PUSH2 0x17FF DUP10 DUP5 PUSH2 0x1889 JUMP JUMPDEST DUP2 MSTORE DUP3 DUP5 ADD MLOAD DUP5 DUP3 ADD MSTORE PUSH1 0x40 DUP1 DUP5 ADD MLOAD SWAP1 DUP3 ADD MSTORE PUSH1 0x60 DUP1 DUP5 ADD MLOAD SWAP1 DUP3 ADD MSTORE PUSH1 0x80 DUP1 DUP5 ADD MLOAD SWAP1 DUP3 ADD MSTORE DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 PUSH1 0xA0 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x17D3 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x184B JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1859 PUSH2 0x17A9 DUP3 PUSH2 0x1FB6 JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x1870 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP5 ADD CALLDATACOPY PUSH1 0x0 SWAP1 DUP3 ADD PUSH1 0x20 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x2 DUP2 LT PUSH2 0x19E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x18A9 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x18B3 PUSH1 0x20 PUSH2 0x1F6F JUMP JUMPDEST SWAP2 MLOAD DUP3 MSTORE POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x18CE JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x632 DUP2 PUSH2 0x200A JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x18ED JUMPI DUP2 DUP3 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x18F8 DUP2 PUSH2 0x200A JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x1908 DUP2 PUSH2 0x200A JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH2 0x1918 DUP2 PUSH2 0x200A JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1934 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x632 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1955 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0x1984 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 SWAP3 POP PUSH2 0x1995 DUP2 PUSH2 0x200A JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x19B5 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0x19E4 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x20 DUP7 ADD MLOAD SWAP1 SWAP5 POP PUSH2 0x19F5 DUP2 PUSH2 0x200A JUMP JUMPDEST PUSH1 0x40 DUP7 ADD MLOAD SWAP1 SWAP4 POP PUSH2 0x1A06 DUP2 PUSH2 0x200A JUMP JUMPDEST PUSH1 0x60 DUP7 ADD MLOAD SWAP1 SWAP3 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1A22 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP1 DUP7 ADD DUP8 PUSH1 0x1F DUP3 ADD SLT PUSH2 0x1A33 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP1 MLOAD SWAP2 POP PUSH2 0x1A43 PUSH2 0x17A9 DUP4 PUSH2 0x1FB6 JUMP JUMPDEST DUP3 DUP2 MSTORE DUP9 PUSH1 0x20 DUP5 DUP5 ADD ADD GT ISZERO PUSH2 0x1A57 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x1A68 DUP4 PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP6 ADD PUSH2 0x1FDA JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP3 SWAP6 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1A87 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1A9E JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP6 ADD PUSH1 0x40 DUP2 DUP9 SUB SLT ISZERO PUSH2 0x1AB0 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x1ABA PUSH1 0x40 PUSH2 0x1F6F JUMP JUMPDEST SWAP3 POP DUP1 MLOAD DUP3 DUP2 GT ISZERO PUSH2 0x1ACA JUMPI DUP6 DUP7 REVERT JUMPDEST DUP1 DUP3 ADD DUP9 PUSH1 0x1F DUP3 ADD SLT PUSH2 0x1ADB JUMPI DUP7 DUP8 REVERT JUMPDEST DUP1 MLOAD SWAP2 POP PUSH2 0x1AEB PUSH2 0x17A9 DUP4 PUSH2 0x1F96 JUMP JUMPDEST DUP3 DUP2 MSTORE DUP7 DUP2 ADD SWAP1 DUP3 DUP9 ADD DUP9 DUP6 MUL DUP5 ADD DUP10 ADD DUP13 LT ISZERO PUSH2 0x1B07 JUMPI DUP10 DUP11 REVERT JUMPDEST DUP10 SWAP4 POP JUMPDEST DUP5 DUP5 LT ISZERO PUSH2 0x1B29 JUMPI DUP1 MLOAD DUP4 MSTORE PUSH1 0x1 SWAP4 SWAP1 SWAP4 ADD SWAP3 SWAP2 DUP9 ADD SWAP2 DUP9 ADD PUSH2 0x1B0B JUMP JUMPDEST POP DUP7 MSTORE POP POP POP DUP1 DUP5 ADD MLOAD DUP3 DUP2 GT ISZERO PUSH2 0x1B3F JUMPI DUP6 DUP7 REVERT JUMPDEST PUSH2 0x1B4B DUP9 DUP3 DUP5 ADD PUSH2 0x178B JUMP JUMPDEST DUP6 DUP6 ADD MSTORE POP POP POP DUP1 SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1B6E JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x632 DUP4 DUP4 PUSH2 0x1898 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1B8A JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1BA1 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x1C0 SWAP2 DUP6 ADD DUP1 DUP8 SUB DUP4 SGT ISZERO PUSH2 0x1BB5 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x1BBE DUP4 PUSH2 0x1F6F JUMP JUMPDEST PUSH2 0x1BC8 DUP9 DUP4 PUSH2 0x1780 JUMP JUMPDEST DUP2 MSTORE PUSH2 0x1BD7 DUP9 PUSH1 0x20 DUP5 ADD PUSH2 0x1780 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x1BE9 DUP9 PUSH1 0x40 DUP5 ADD PUSH2 0x1780 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x1BFB DUP9 PUSH1 0x60 DUP5 ADD PUSH2 0x1780 JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP3 ADD CALLDATALOAD PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 DUP3 ADD CALLDATALOAD PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 DUP3 ADD CALLDATALOAD PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0xE0 DUP3 ADD CALLDATALOAD PUSH1 0xE0 DUP3 ADD MSTORE PUSH2 0x100 SWAP4 POP DUP4 DUP3 ADD CALLDATALOAD DUP5 DUP3 ADD MSTORE PUSH2 0x120 SWAP4 POP DUP4 DUP3 ADD CALLDATALOAD DUP5 DUP3 ADD MSTORE PUSH2 0x140 SWAP4 POP DUP4 DUP3 ADD CALLDATALOAD DUP4 DUP2 GT ISZERO PUSH2 0x1C57 JUMPI DUP7 DUP8 REVERT JUMPDEST PUSH2 0x1C63 DUP10 DUP3 DUP6 ADD PUSH2 0x183B JUMP JUMPDEST DUP6 DUP4 ADD MSTORE POP PUSH2 0x160 SWAP4 POP DUP4 DUP3 ADD CALLDATALOAD DUP4 DUP2 GT ISZERO PUSH2 0x1C7D JUMPI DUP7 DUP8 REVERT JUMPDEST PUSH2 0x1C89 DUP10 DUP3 DUP6 ADD PUSH2 0x183B JUMP JUMPDEST DUP6 DUP4 ADD MSTORE POP PUSH2 0x180 SWAP4 POP DUP4 DUP3 ADD CALLDATALOAD DUP4 DUP2 GT ISZERO PUSH2 0x1CA3 JUMPI DUP7 DUP8 REVERT JUMPDEST PUSH2 0x1CAF DUP10 DUP3 DUP6 ADD PUSH2 0x183B JUMP JUMPDEST DUP6 DUP4 ADD MSTORE POP PUSH2 0x1A0 SWAP4 POP DUP4 DUP3 ADD CALLDATALOAD DUP4 DUP2 GT ISZERO PUSH2 0x1CC9 JUMPI DUP7 DUP8 REVERT JUMPDEST PUSH2 0x1CD5 DUP10 DUP3 DUP6 ADD PUSH2 0x183B JUMP JUMPDEST DUP6 DUP4 ADD MSTORE POP DUP1 SWAP6 POP POP POP POP POP PUSH2 0x1CEE DUP5 PUSH1 0x20 DUP6 ADD PUSH2 0x1780 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1D08 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x1D12 PUSH1 0x80 PUSH2 0x1F6F JUMP JUMPDEST PUSH2 0x1D1C DUP5 DUP5 PUSH2 0x1898 JUMP JUMPDEST DUP2 MSTORE PUSH2 0x1D2B DUP5 PUSH1 0x20 DUP6 ADD PUSH2 0x1898 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x1D3D DUP5 PUSH1 0x40 DUP6 ADD PUSH2 0x1898 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x1D4F DUP5 PUSH1 0x60 DUP6 ADD PUSH2 0x1898 JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1D6D JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x1D77 DUP5 DUP5 PUSH2 0x1898 JUMP JUMPDEST SWAP2 POP PUSH2 0x1CEE DUP5 PUSH1 0x20 DUP6 ADD PUSH2 0x1898 JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x1D98 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x1FDA JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x1DEF DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x1FDA JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH1 0x4 DUP6 LT PUSH2 0x1E11 JUMPI INVALID JUMPDEST SWAP4 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH1 0x8 DUP6 LT PUSH2 0x1E11 JUMPI INVALID JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x18 SWAP1 DUP3 ADD MSTORE PUSH32 0x4431382F444543494D414C5F4144445F4F564552464C4F570000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x19 SWAP1 DUP3 ADD MSTORE PUSH32 0x4431382F444543494D414C5F56414C55455F544F4F5F42494700000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x18 SWAP1 DUP3 ADD MSTORE PUSH32 0x4431382F444543494D414C5F4D554C5F4F564552464C4F570000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x18 SWAP1 DUP3 ADD MSTORE PUSH32 0x4431382F444543494D414C5F4449565F4F564552464C4F570000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x17 SWAP1 DUP3 ADD MSTORE PUSH32 0x4431382F444543494D414C5F4449565F42595F5A45524F000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 SWAP2 DUP3 ADD MLOAD SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x1F8E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1FAC JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1FCC JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1FF5 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1FDD JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x2004 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x201F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG3 PUSH6 0x627A7A723158 KECCAK256 0xB3 PUSH28 0x623718E85582E3B696CC95CF6163DDF3045BD0C7E06A84B566DF684E 0xF6 REVERT PUSH13 0x6578706572696D656E74616CF5 PUSH5 0x736F6C6343 STOP SDIV GT STOP BLOCKHASH ",
                "sourceMap": "1191:16798:6:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2212:353;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;2859:982;;;;;;;;;:::i;2212:353::-;2469:59;;;;;2347:17;;-1:-1:-1;;;;;2469:30:6;;;;;:59;;2500:12;;2514:13;;2469:59;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2469:59:6;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2469:59:6;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;2469:59:6;;;;;;;;;:89;;2557:1;2469:89;;;-1:-1:-1;;2469:89:6;2462:96;2212:353;-1:-1:-1;;;;2212:353:6:o;2859:982::-;2976:15;3007:28;;:::i;:::-;3038:33;3059:5;3066:4;3038:20;:33::i;:::-;3007:64;;3126:27;3148:4;3126:21;:27::i;:::-;3121:67;;3176:1;3169:8;;;;;3121:67;3413:9;:7;:9::i;:::-;3378:32;3405:4;3378:26;:32::i;:::-;:44;3374:83;;;3445:1;3438:8;;;;;3374:83;3521:313;3623:32;3650:4;3623:26;:32::i;:::-;3796:28;3819:4;3796:22;:28::i;:::-;3521:18;:313::i;:::-;3514:320;;;2859:982;;;;;:::o;12166:1016::-;12285:28;;:::i;:::-;12481:20;;;;12441:61;;;;;12329:26;;12441:12;;:39;;:61;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;12441:61:6;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;12441:61:6;;;;;;39:16:-1;36:1;17:17;2:54;101:4;12441:61:6;80:15:-1;;;-1:-1;;76:31;65:43;;120:4;113:20;12441:61:6;;;;;;;;;-1:-1:-1;;;;;12365:137:6;;;12392:18;;;12365:137;;;;12368:22;;;12365:137;12512:23;;;;;12565:18;;12545:38;:17;;;:38;12597:20;;;;:27;12365:137;;-1:-1:-1;12628:2:6;12597:33;12593:277;;-1:-1:-1;12593:277:6;;12650:20;;;;12688:33;;12650:34;;12699:1;12650:34;:31;:34;:::i;:::-;:71;;;12646:214;;;12824:20;;;;12790:55;;;;;:12;;:33;;:55;;12824:20;12790:55;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;12790:55:6;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;12790:55:6;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;12790:55:6;;;;;;;;;-1:-1:-1;;;;;12741:104:6;12744:22;;;12741:104;-1:-1:-1;12646:214:6;12908:55;12916:5;:22;;;12940:5;:22;;;12908:7;:55::i;:::-;12879:26;;;:84;12974:40;;:::i;:::-;13041:13;13030:51;;;;;;;;;;;;;;13107:25;;13091:13;;;:41;13157:18;;;13142:12;;;:33;-1:-1:-1;13091:4:6;;12166:1016;-1:-1:-1;;;12166:1016:6:o;4284:1700::-;4392:18;4430:4;:12;;;:19;4453:1;4430:24;4426:67;;;-1:-1:-1;4477:5:6;4470:12;;4426:67;4502:20;4577:784;4599:4;:12;;;:19;4584:12;:34;4577:784;;;4650:38;;:::i;:::-;4691:4;:12;;;4704;4691:26;;;;;;;;;;;;;;4650:67;;4756:36;4735:57;;;;;;;;:17;;:57;;;;;;;;;4731:101;;4812:5;;;4731:101;4928:15;;;;4909:16;4957:218;4981:12;4977:1;:16;4957:218;;;5050:8;5022:4;:12;;;5035:1;5022:15;;;;;;;;;;;;;;:24;;;:36;5018:143;;;5137:5;5130:12;;;;;;;;5018:143;4995:3;;4957:218;;;;5284:4;:13;;;:20;5263:6;:17;;;:41;5259:92;;5331:5;5324:12;;;;;;;5259:92;-1:-1:-1;;4620:14:6;;4577:784;;;5459:4;:12;;;:19;5439:12;5454:1;5439:16;:39;5435:82;;5501:5;5494:12;;;;;5435:82;5526:40;;:::i;:::-;5569:4;:12;;;5582;5569:26;;;;;;;;;;;;;;5526:69;;5632:37;5609:60;;;;;;;;:19;;:60;;;;;;;;;5605:103;;5692:5;5685:12;;;;;;5605:103;5822:4;:22;;;-1:-1:-1;;;;;5768:76:6;:4;:9;;;-1:-1:-1;;;;;5768:31:6;;5800:8;:17;;;5768:50;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5768:50:6;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;5768:50:6;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;5768:50:6;;;;;;;;;-1:-1:-1;;;;;5768:76:6;;5764:119;;5867:5;5860:12;;;;;;5764:119;5957:4;:13;;;:20;5935:8;:19;;;:42;5928:49;;;;4284:1700;;;;:::o;1087:108:39:-;872:15;;1087:108::o;6178:355:6:-;6291:29;6405:40;;:::i;:::-;6448:12;;;;6461:19;;-1:-1:-1;;6461:23:6;;;6448:37;;;;;;;;;;;;6405:80;;6502:24;6517:8;6502:14;:24::i;:::-;6495:31;6178:355;-1:-1:-1;;;6178:355:6:o;6674:1752::-;-1:-1:-1;;6787:30:6;6939:1481;6963:4;:12;;;:19;6959:1;:23;6939:1481;;;7003:38;;:::i;:::-;7044:4;:12;;;7057:1;7044:15;;;;;;;;;;;;;;7003:56;;7146:36;7125:57;;;;;;;;:17;;:57;;;;;;;;;7121:104;;7202:8;;;7121:104;7360:18;7381:22;7396:6;7381:14;:22::i;:::-;7360:43;;7601:20;7624:4;:9;;;-1:-1:-1;;;;;7624:31:6;;7656:6;:15;;;7624:48;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;7624:48:6;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;7624:48:6;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;7624:48:6;;;;;;;;;7690:22;;;;7601:71;;-1:-1:-1;;;;;;7690:36:6;;;;;:78;;;7746:4;:22;;;-1:-1:-1;;;;;7730:38:6;:12;-1:-1:-1;;;;;7730:38:6;;7690:78;7686:179;;;7802:48;7810:11;7823:4;:26;;;7802:7;:48::i;:::-;7788:62;;7686:179;8018:1;8004:11;:15;8000:410;;;8039:14;8056:157;8104:12;8138:4;:17;;;8185:4;:9;;;8056:26;:157::i;:::-;8039:174;;8256:139;8296:22;8348:28;8356:6;8364:11;8348:7;:28::i;8256:139::-;8231:164;;8000:410;;6939:1481;;;;6984:3;;6939:1481;;;;6674:1752;;;:::o;8593:3349::-;8793:12;;;;:19;-1:-1:-1;;8773:2:6;8816:1;-1:-1:-1;8793:24:6;8786:32;;;;8828:40;;:::i;:::-;8871:12;;;;8884:19;;-1:-1:-1;;8884:23:6;;;8871:37;;;;;;;;;;;;8828:80;;8948:37;8925:60;;;;;;;;:19;;:60;;;;;;;;;8918:68;;;;8996:12;9011:75;9019:44;9053:4;:9;;;9019:33;:44::i;:::-;1515:9;9011:7;:75::i;:::-;8996:90;-1:-1:-1;9139:18:6;9134:2802;9176:4;:13;;;:20;9163:10;:33;9134:2802;;;9227:19;9248;9287:56;9311:4;9317;:13;;;9331:10;9317:25;;;;;;;;;;;;;;9287:23;:56::i;:::-;9226:117;;;;9416:11;9431:1;9416:16;;:61;;;;;9472:5;9436:33;9444:11;9457;9436:7;:33::i;:::-;:41;9416:61;9412:108;;;9504:1;9497:8;;;;;;;;;9412:108;9708:8;:19;;;9694:10;:33;9690:80;;9747:8;;;;9690:80;9940:9;;9967:528;10013:1;9991:4;:12;;;:19;:23;9987:1;:27;9967:528;;;10039:39;;:::i;:::-;10081:4;:12;;;10094:1;10081:15;;;;;;;;;;;;;;10039:57;;10143:36;10121:58;;;;;;;;:18;;:58;;;;;;;;;10114:66;;;;10224:10;10202:7;:18;;;:32;10198:283;;;10263:199;10296:2;10324:116;10373:4;10407:7;10324:19;:116::i;:::-;10263:7;:199::i;:::-;10258:204;;10198:283;-1:-1:-1;10016:3:6;;9967:528;;;;10641:9;10653:81;10690:4;10712:8;10653:19;:81::i;:::-;10641:93;;10930:5;10911:15;10919:2;10923;10911:7;:15::i;:::-;:24;10907:71;;10955:8;;;;;;10907:71;11152:2;11130:18;11138:5;11145:2;11130:7;:18::i;:::-;:24;11126:71;;;11174:8;;;;;;11126:71;11528:8;11539:137;11564:49;11572:11;11585:27;11593:5;11600:11;11585:7;:27::i;:::-;11564:7;:49::i;:::-;11631:31;11639:18;11647:5;11654:2;11639:7;:18::i;:::-;11659:2;11631:7;:31::i;:::-;11539:7;:137::i;:::-;11528:148;;11711:214;11747:18;11859:52;11866:4;:22;;;11898:11;11907:1;11898:8;:11::i;:::-;11859:6;:52::i;11711:214::-;11690:235;;9134:2802;;;;;;9198:12;;9134:2802;;;;8593:3349;;;;;:::o;1866:135:45:-;1951:7;1985:1;1981;:5;:13;;1993:1;1981:13;;;-1:-1:-1;1989:1:45;;1974:20;-1:-1:-1;1866:135:45:o;16814:871:41:-;16934:13;16978:5;16986:1;16978:9;16967:1;:8;:20;16963:290;;;17003:239;17025:216;17087:87;17192:1;:8;17218:5;17226:1;17218:9;17025:44;:216::i;:::-;17003:21;:239::i;:::-;-1:-1:-1;17426:13:41;17329:2;17426:13;17420:20;17579:66;17567:79;;16814:871::o;4603:286:39:-;4685:8;4730:1;4724;4717:14;;4709:52;;;;-1:-1:-1;;;4709:52:39;;;;;;;;;;;;;;;;;4792:1;4786;4779:14;;4771:52;;;;-1:-1:-1;;;4771:52:39;;;;;;;;;4837:45;4842:28;4854:1;872:15;4842:4;:28::i;:::-;4879:1;4837:4;:45::i;13284:346:6:-;13394:11;13428:6;:32;;;13464:1;13428:37;:195;;13504:119;13529:6;:30;;;13577:6;:32;;;13504:7;:119::i;:::-;13428:195;;;13480:9;:7;:9::i;2168:126:39:-;2248:8;2276:11;2281:1;2285;2284:2;;2276:4;:11::i;17612:375:6:-;17778:26;17827:153;17859:53;17883:12;17897:5;17904:7;17859:23;:53::i;:::-;17926:44;17950:12;17964:5;17926:23;:44::i;4093:215:39:-;4174:8;4219:1;4213;4206:14;;4198:52;;;;-1:-1:-1;;;4198:52:39;;;;;;;;16263:272:6;16364:12;16392:34;;:::i;:::-;16429:4;-1:-1:-1;;;;;16429:18:6;;:20;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;16429:20:6;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;16429:20:6;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;16429:20:6;;;;;;;;;16392:57;;16466:62;16474:9;:7;:9::i;:::-;16498:22;;:28;16485:42;;:12;:42::i;1232:125:39:-;1312:8;1340:10;1345:1;1348;1340:4;:10::i;16737:585:6:-;16863:19;16884;16920:31;;:::i;:::-;16953;;:::i;:::-;17000:4;:9;;;-1:-1:-1;;;;;17000:34:6;;17035:91;;;;;;;;17070:4;:17;;;-1:-1:-1;;;;;17035:91:6;;;;;17105:7;17035:91;;;17000:127;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;17000:127:6;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;17000:127:6;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;17000:127:6;;;;;;;;;17262:18;;16919:208;;-1:-1:-1;16919:208:6;-1:-1:-1;17283:4:6;;17262:25;17310:4;17289:12;:18;;;:25;;;;;;17254:61;;;;;;16737:585;;;;;:::o;13842:1744::-;14009:12;14037:15;14055:4;:9;;;-1:-1:-1;;;;;14055:31:6;;14087:6;:15;;;14055:48;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;14055:48:6;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;14055:48:6;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;14055:48:6;;;;;;;;;14037:66;;14113:25;14141:46;14164:4;:22;;;14141;:46::i;:::-;14113:74;;;;14197:23;14223:31;14246:7;14223:22;:31::i;:::-;14197:57;;;;14345:17;14327:15;:35;:351;;14559:105;14647:15;14627:17;:35;14620:2;:43;14567:22;14582:6;14567:14;:22::i;:::-;14559:60;:105;:60;:105;:::i;:::-;14327:351;;;14401:105;14487:17;14469:15;:35;14462:2;:43;14409:22;14424:6;14409:14;:22::i;:::-;14401:60;:105;:60;:105;:::i;:::-;14319:359;;14795:13;14811:4;:9;;;-1:-1:-1;;;;;14811:24:6;;14836:6;:15;;;14811:41;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;14811:41:6;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;14811:41:6;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;14811:41:6;;;;;;;;;:47;;-1:-1:-1;14931:2:6;14913:20;;14909:184;;;14957:43;:5;14978:20;;;14971:2;:28;14957:43;:13;:43;:::i;:::-;14949:51;;14909:184;;;15039:43;:5;15060:2;:20;;;15053:2;:28;15039:43;:13;:43;:::i;:::-;15031:51;;14909:184;15174:21;15182:5;15189;15174:7;:21::i;:::-;15166:29;;15245:20;15268:109;15289:9;:7;:9::i;:::-;15312;;15345:15;;;;;15312:49;;;;;-1:-1:-1;;;;;15312:32:6;;;;;;:49;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;15312:49:6;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;15312:49:6;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;15312:49:6;;;;;;;;;:55;15268:7;:109::i;:::-;15245:132;-1:-1:-1;15412:36:6;15391:17;;:57;;;;;;;;;15387:193;;;15472:29;15480:5;15487:13;15472:7;:29::i;:::-;15464:37;;15387:193;;;15540:29;15548:5;15555:13;15540:7;:29::i;:::-;15532:37;;15387:193;13842:1744;;;;;;;;;:::o;3909:144:39:-;3989:8;4017:29;4022:20;4027:1;872:15;4022:4;:20::i;2883:144::-;2963:8;2991:29;2996:10;3001:1;3004;2996:4;:10::i;:::-;872:15;2991:4;:29::i;3326:215::-;3407:8;3452:1;3446;3439:14;;3431:52;;;;-1:-1:-1;;;3431:52:39;;;;;;;;;3497:37;3502:18;3507:1;3517;3502:4;:18::i;2335:197::-;2416:8;2461:1;2455;2448:14;;2440:52;;;;-1:-1:-1;;;2440:52:39;;;;;;;;;2506:19;2518:1;2523;2522:2;;2506:4;:19::i;5203:119::-;5274:8;5306:1;5302;:5;:13;;5314:1;5302:13;;;5310:1;5298:17;5203:119;-1:-1:-1;;5203:119:39:o;15787:307:6:-;15879:12;15907:16;15926:29;15949:5;15926:22;:29::i;:::-;15907:48;;;;15983:2;15972:8;:13;:115;;16051:36;:5;16072:2;:13;;;16065:2;:21;16051:36;:13;:36;:::i;:::-;15972:115;;;16000:36;:5;16021:13;;;16014:2;:21;16000:36;:13;:36;:::i;1292:378:42:-;1480:12;1232:10;1551:37;;1602:9;1625:6;1645:8;1515:148;;;;;;;;;;;;;;;-1:-1:-1;;26:21;;;22:32;6:49;;1515:148:42;;;49:4:-1;25:18;;61:17;;1515:148:42;182:15:-1;1515:148:42;;;;179:29:-1;;;;160:49;;;1515:148:42;-1:-1:-1;1292:378:42;;;;;:::o;1511:170:44:-;1654:9;1648:16;1641:4;1630:9;1626:20;1619:46;5378:273:39;5458:8;5486:6;;;:16;;-1:-1:-1;5496:6:39;;5486:16;5482:55;;;-1:-1:-1;5525:1:39;5518:8;;5482:55;-1:-1:-1;5550:5:39;;;5554:1;5550;:5;:1;5573:5;;;;;:10;:24;;;;;5596:1;5591;5587;:5;;;;;;:10;5573:24;5565:61;;;;-1:-1:-1;;;5565:61:39;;;;;;;;5705:251;5785:8;5817:6;5809:42;;;;-1:-1:-1;;;5809:42:39;;;;;;;;;987:66;5869:1;:21;;:32;;;;5894:1;-1:-1:-1;;5894:7:39;;5869:32;5861:69;;;;-1:-1:-1;;;5861:69:39;;;;;;;;;5948:1;5944;:5;;;;;;;5705:251;-1:-1:-1;;;5705:251:39:o;6007:258::-;6115:5;;;6087:8;6154:5;;:14;;;;;6167:1;6163;:5;6154:14;:23;;;;;6176:1;6172;:5;6154:23;6153:54;;;;6187:1;6183;:5;:14;;;;;6196:1;6192;:5;6183:14;:23;;;;;6205:1;6201;:5;6183:23;6151:57;6130:128;;;;-1:-1:-1;;;6130:128:39;;;;;;;;4616:499:19;4838:135;;4729:18;;;;4781:23;;-1:-1:-1;;;;;4808:16:19;;;4878:33;;4838:135;;4929:5;;4952:7;;4838:135;;;;;;;;-1:-1:-1;;26:21;;;22:32;6:49;;4838:135:19;;;49:4:-1;25:18;;61:17;;4838:135:19;182:15:-1;4838:135:19;;;;179:29:-1;;;;160:49;;;4808:175:19;;;;4838:135;4808:175;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;4763:220:19;;;;4997:10;:37;;;;;5011:10;:17;5032:2;5011:23;4997:37;4993:116;;;5063:35;5084:10;5096:1;5063:20;:35::i;:::-;5050:48;;4993:116;4616:499;;;;;;;:::o;5378:451::-;5580:110;;5474:15;;;;5523:23;;-1:-1:-1;;;;;5550:16:19;;;5620:33;;5580:110;;5671:5;;5580:110;;;;;;;;-1:-1:-1;;26:21;;;22:32;6:49;;5580:110:19;;;49:4:-1;25:18;;61:17;;5580:110:19;182:15:-1;5580:110:19;;;;179:29:-1;;;;160:49;;;5550:150:19;;;;5580:110;5550:150;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;5505:195:19;;;;5714:10;:37;;;;;5728:10;:17;5749:2;5728:23;5714:37;5710:113;;;5777:35;5798:10;5810:1;5777:20;:35::i;:::-;5767:45;;5710:113;5378:451;;;;;;:::o;4966:182:39:-;5042:8;5087:1;5081;5074:14;;5066:52;;;;-1:-1:-1;;;5066:52:39;;;;;;;;;-1:-1:-1;5139:1:39;4966:182::o;3905:366:19:-;3985:19;4036:2;4020:18;;4049:15;4066:23;4093:5;-1:-1:-1;;;;;4093:16:19;4110:18;;;;;;;;;;;;;;;;;4093:36;;;;;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;4048:81:19;;;;4143:10;:37;;;;;4157:10;:17;4178:2;4157:23;4143:37;4139:126;;;4218:35;4239:10;4251:1;4218:20;:35::i;:::-;4196:58;;4139:126;3905:366;;;;;:::o;122:448:45:-;208:7;235:6;231:45;;-1:-1:-1;264:1:45;257:8;;231:45;297:5;;;301:1;297;:5;:1;316:5;;;;;:10;312:234;;342:193;364:170;421:61;500:1;519;364:39;:170::i;576:383::-;662:7;689:6;685:223;;711:186;733:163;790:54;862:1;881;733:39;:163::i;711:186::-;917:9;933:1;929;:5;;;;;;;576:383;-1:-1:-1;;;;576:383:45:o;3069:215:39:-;3150:8;3195:1;3189;3182:14;;3174:52;;;;-1:-1:-1;;;3174:52:39;;;;;;;;1627:196;1708:8;1753:1;1747;1740:14;;1732:52;;;;-1:-1:-1;;;1732:52:39;;;;;;;;;1798:18;1803:1;1813;1798:4;:18::i;15929:220:41:-;16050:14;16097:21;16109:1;16112:5;16097:11;:21::i;731:322:46:-;884:12;196:10;955:28;;997:9;1020:1;1035;919:127;;;;;;;;;;;14133:679:41;14254:14;14299:5;14307:2;14299:10;14288:1;:8;:21;14284:297;;;14325:245;14347:222;14409:92;14519:1;:8;14545:5;14553:2;14545:10;14347:44;:222::i;14325:245::-;-1:-1:-1;14759:13:41;14661:2;14759:13;14753:20;;14133:679::o;1191:16798:6:-;;;;;;;;;;-1:-1:-1;;;;;1191:16798:6;;;;;;-1:-1:-1;;;;;1191:16798:6;;;;;;-1:-1:-1;;;;;1191:16798:6;;;;;;-1:-1:-1;;;;;1191:16798:6;;;;;;-1:-1:-1;;;;;1191:16798:6;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;-1:-1:-1;1191:16798:6;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;:::o;:::-;;;;;;;;;;;;;;:::o;5:130:-1:-;72:20;;97:33;72:20;97:33;;325:792;;475:3;468:4;460:6;456:17;452:27;442:2;;-1:-1;;483:12;442:2;523:6;517:13;545:102;560:86;639:6;560:86;;;545:102;;;675:21;;;536:111;-1:-1;719:4;732:14;;;;707:17;;;833:4;821:17;;812:27;;;;809:36;-1:-1;806:2;;;858:1;;848:12;806:2;883:1;868:243;893:6;890:1;887:13;868:243;;;833:4;3366:9;3361:3;3357:19;3353:30;3350:2;;;883:1;;3386:12;3350:2;3414:20;833:4;3414:20;;;3522:81;3599:3;3575:22;3522:81;;;3497:107;;3736:22;;;10883:13;3686:16;;;3679:86;3830:2;3895:22;;;10883:13;3845:16;;;3838:86;4004:2;4069:22;;;10883:13;4019:16;;;4012:86;4180:3;4246:22;;;10883:13;4196:16;;;4189:86;961:87;;1062:14;;;;833:4;1090:14;;;;915:1;908:9;868:243;;2140:432;;2237:3;2230:4;2222:6;2218:17;2214:27;2204:2;;-1:-1;;2245:12;2204:2;2292:6;2279:20;2314:60;2329:44;2366:6;2329:44;;2314:60;2305:69;;2394:6;2387:5;2380:21;2498:3;2430:4;2489:6;2422;2480:16;;2477:25;2474:2;;;2515:1;;2505:12;2474:2;28621:6;2430:4;2422:6;2418:17;2430:4;2456:5;2452:16;28598:30;28677:1;28659:16;;;2430:4;28659:16;28652:27;2456:5;2197:375;-1:-1;;2197:375;3031:176;3130:13;;29782:1;29772:12;;29762:2;;29798:1;;29788:12;5108:339;;5226:4;5214:9;5209:3;5205:19;5201:30;5198:2;;;-1:-1;;5234:12;5198:2;5262:20;5226:4;5262:20;;;10883:13;;5340:86;;-1:-1;5253:29;5192:255;-1:-1;5192:255;10946:263;;11061:2;11049:9;11040:7;11036:23;11032:32;11029:2;;;-1:-1;;11067:12;11029:2;226:6;220:13;238:33;265:5;238:33;;11216:491;;;;11354:2;11342:9;11333:7;11329:23;11325:32;11322:2;;;-1:-1;;11360:12;11322:2;85:6;72:20;97:33;124:5;97:33;;;11412:63;-1:-1;11512:2;11551:22;;72:20;97:33;72:20;97:33;;;11520:63;-1:-1;11620:2;11659:22;;72:20;97:33;72:20;97:33;;;11628:63;;;;11316:391;;;;;;11714:257;;11826:2;11814:9;11805:7;11801:23;11797:32;11794:2;;;-1:-1;;11832:12;11794:2;1946:6;1940:13;29533:5;27475:13;27468:21;29511:5;29508:32;29498:2;;-1:-1;;29544:12;11978:397;;;12109:2;12097:9;12088:7;12084:23;12080:32;12077:2;;;-1:-1;;12115:12;12077:2;2083:6;2077:13;27573:66;29655:5;27562:78;29631:5;29628:34;29618:2;;-1:-1;;29666:12;29618:2;12277;12327:22;;220:13;12167:73;;-1:-1;238:33;220:13;238:33;;;12285:74;;;;12071:304;;;;;;12382:767;;;;;12556:3;12544:9;12535:7;12531:23;12527:33;12524:2;;;-1:-1;;12563:12;12524:2;2083:6;2077:13;27573:66;29655:5;27562:78;29631:5;29628:34;29618:2;;-1:-1;;29666:12;29618:2;12725;12775:22;;220:13;12615:73;;-1:-1;238:33;220:13;238:33;;;12844:2;12894:22;;220:13;12733:74;;-1:-1;238:33;220:13;238:33;;;12984:2;12969:18;;12963:25;12852:74;;-1:-1;13008:18;12997:30;;12994:2;;;-1:-1;;13030:12;12994:2;13116:6;13105:9;13101:22;2693:3;2686:4;2678:6;2674:17;2670:27;2660:2;;-1:-1;;2701:12;2660:2;2741:6;2735:13;2721:27;;2763:64;2778:48;2819:6;2778:48;;2763:64;2847:6;2840:5;2833:21;2951:3;12725:2;2942:6;2875;2933:16;;2930:25;2927:2;;;-1:-1;;2958:12;2927:2;2978:39;3010:6;12725:2;2909:5;2905:16;12725:2;2875:6;2871:17;2978:39;;;12518:631;;;;-1:-1;12518:631;;-1:-1;;;;12518:631;13156:390;;13295:2;;13283:9;13274:7;13270:23;13266:32;13263:2;;;-1:-1;;13301:12;13263:2;13352:17;13346:24;13390:18;;13382:6;13379:30;13376:2;;;-1:-1;;13412:12;13376:2;13513:6;13502:9;13498:22;4463:4;4451:9;4446:3;4442:19;4438:30;4435:2;;;-1:-1;;4471:12;4435:2;4499:20;4463:4;4499:20;;;4490:29;;4585:17;4579:24;13390:18;4615:6;4612:30;4609:2;;;-1:-1;;4645:12;4609:2;4758:6;4747:9;4743:22;1267:3;1260:4;1252:6;1248:17;1244:27;1234:2;;-1:-1;;1275:12;1234:2;1315:6;1309:13;1295:27;;1337:76;1352:60;1405:6;1352:60;;1337:76;1441:21;;;1498:14;;;;1473:17;;;1587;;;1578:27;;;;1575:36;-1:-1;1572:2;;;-1:-1;;1614:12;1572:2;-1:-1;1640:10;;1634:217;1659:6;1656:1;1653:13;1634:217;;;10883:13;;1727:61;;1681:1;1674:9;;;;;1802:14;;;;1830;;1634:217;;;-1:-1;4665:107;;-1:-1;;;4842:18;;;4836:25;4870:30;;;4867:2;;;-1:-1;;4903:12;4867:2;4948:107;5051:3;5042:6;5031:9;5027:22;4948:107;;;13295:2;4934:5;4930:16;4923:133;;;;13432:98;;;;;13257:289;;;;;13553:307;;13690:2;13678:9;13669:7;13665:23;13661:32;13658:2;;;-1:-1;;13696:12;13658:2;13758:86;13836:7;13812:22;13758:86;;13867:498;;;14011:2;13999:9;13990:7;13986:23;13982:32;13979:2;;;-1:-1;;14017:12;13979:2;14075:17;14062:31;14113:18;;14105:6;14102:30;14099:2;;;-1:-1;;14135:12;14099:2;5968:6;;14209:22;;5947:19;;;5943:32;-1:-1;5940:2;;;-1:-1;;5978:12;5940:2;6006:22;5968:6;6006:22;;;6118:49;6163:3;6139:22;6118:49;;;6100:16;6093:75;6270:49;6315:3;6237:2;6295:9;6291:22;6270:49;;;6237:2;6256:5;6252:16;6245:75;6429:49;6474:3;14011:2;6454:9;6450:22;6429:49;;;14011:2;6415:5;6411:16;6404:75;6582:49;6627:3;6549:2;6607:9;6603:22;6582:49;;;6549:2;6568:5;6564:16;6557:75;6705:3;6764:9;6760:22;10735:20;6705:3;6725:5;6721:16;6714:75;6862:3;6921:9;6917:22;10735:20;6862:3;6882:5;6878:16;6871:75;7011:3;7070:9;7066:22;10735:20;7011:3;7031:5;7027:16;7020:75;7160:3;7219:9;7215:22;10735:20;7160:3;7180:5;7176:16;7169:75;7322:3;;;;7383:9;7379:22;10735:20;7322:3;7342:5;7338:18;7331:77;7469:3;;;;7530:9;7526:22;10735:20;7469:3;7489:5;7485:18;7478:77;7654:3;;;;7643:9;7639:19;7626:33;14113:18;7671:6;7668:30;7665:2;;;-1:-1;;7701:12;7665:2;7748:54;7798:3;7789:6;7778:9;7774:22;7748:54;;;7654:3;7732:5;7728:18;7721:82;;7902:3;;;;7891:9;7887:19;7874:33;14113:18;7919:6;7916:30;7913:2;;;-1:-1;;7949:12;7913:2;7996:54;8046:3;8037:6;8026:9;8022:22;7996:54;;;7902:3;7980:5;7976:18;7969:82;;8153:3;;;;8142:9;8138:19;8125:33;14113:18;8170:6;8167:30;8164:2;;;-1:-1;;8200:12;8164:2;8247:54;8297:3;8288:6;8277:9;8273:22;8247:54;;;8153:3;8231:5;8227:18;8220:82;;8404:3;;;;8393:9;8389:19;8376:33;14113:18;8421:6;8418:30;8415:2;;;-1:-1;;8451:12;8415:2;8498:54;8548:3;8539:6;8528:9;8524:22;8498:54;;;8404:3;8482:5;8478:18;8471:82;;14155:86;;;;;;;14296:53;14341:7;6237:2;14321:9;14317:22;14296:53;;;14286:63;;13973:392;;;;;;14688:320;;14831:3;14819:9;14810:7;14806:23;14802:33;14799:2;;;-1:-1;;14838:12;14799:2;9151:20;14831:3;9151:20;;;9260:78;9334:3;9310:22;9260:78;;;9242:16;9235:104;9446:78;9520:3;9413:2;9500:9;9496:22;9446:78;;;9413:2;9432:5;9428:16;9421:104;9627:78;9701:3;9594:2;9681:9;9677:22;9627:78;;;9594:2;9613:5;9609:16;9602:104;9812:79;9887:3;9779:2;9867:9;9863:22;9812:79;;;9779:2;9794:16;;9787:105;9798:5;14793:215;-1:-1;;;14793:215;15015:491;;;15193:2;15181:9;15172:7;15168:23;15164:32;15161:2;;;-1:-1;;15199:12;15161:2;15261:87;15340:7;15316:22;15261:87;;;15251:97;;15403:87;15482:7;15385:2;15462:9;15458:22;15403:87;;19763:254;;15903:5;26638:12;16014:52;16059:6;16054:3;16047:4;16040:5;16036:16;16014:52;;;16078:16;;;;;19884:133;-1:-1;;19884:133;20293:213;-1:-1;;;;;28054:54;;;;15574:37;;20411:2;20396:18;;20382:124;20513:324;-1:-1;;;;;28054:54;;;15574:37;;28054:54;;20823:2;20808:18;;15574:37;20659:2;20644:18;;20630:207;20844:305;;20984:2;21005:17;20998:47;16248:5;26638:12;26930:6;20984:2;20973:9;20969:18;26918:19;16349:52;16394:6;26958:14;20973:9;26958:14;20984:2;16375:5;16371:16;16349:52;;;29058:2;29038:14;-1:-1;;29034:28;16413:39;;;;26958:14;16413:39;;20955:194;-1:-1;;20955:194;21156:473;21349:2;21334:18;;29165:1;29155:12;;29145:2;;29171:9;29145:2;16909:69;;;21532:2;21517:18;;19466:37;;;;21615:2;21600:18;;;19466:37;21320:309;;21636:503;21844:2;21829:18;;29299:1;29289:12;;29279:2;;29305:9;22146:407;22337:2;22351:47;;;17416:2;22322:18;;;26918:19;17452:26;26958:14;;;17432:47;17498:12;;;22308:245;22560:407;22751:2;22765:47;;;17749:2;22736:18;;;26918:19;17785:27;26958:14;;;17765:48;17832:12;;;22722:245;22974:407;23165:2;23179:47;;;18083:2;23150:18;;;26918:19;18119:26;26958:14;;;18099:47;18165:12;;;23136:245;23388:407;23579:2;23593:47;;;18416:2;23564:18;;;26918:19;18452:26;26958:14;;;18432:47;18498:12;;;23550:245;23802:407;23993:2;24007:47;;;18749:2;23978:18;;;26918:19;18785:25;26958:14;;;18765:46;18830:12;;;23964:245;24216:321;19129:23;;-1:-1;;;;;28054:54;15574:37;;19302:4;19291:16;;;19285:23;19362:14;;;19466:37;;;;24388:2;24373:18;;24359:178;24544:213;19466:37;;;24662:2;24647:18;;24633:124;25000:256;25062:2;25056:9;25088:17;;;25163:18;25148:34;;25184:22;;;25145:62;25142:2;;;25220:1;;25210:12;25142:2;25062;25229:22;25040:216;;-1:-1;25040:216;25263:326;;25444:18;25436:6;25433:30;25430:2;;;-1:-1;;25466:12;25430:2;-1:-1;25511:4;25499:17;;;25564:15;;25367:222;25903:317;;26042:18;26034:6;26031:30;26028:2;;;-1:-1;;26064:12;26028:2;-1:-1;26141:4;26118:17;-1:-1;;26114:33;26205:4;26195:15;;25965:255;28694:268;28759:1;28766:101;28780:6;28777:1;28774:13;28766:101;;;28847:11;;;28841:18;28828:11;;;28821:39;28802:2;28795:10;28766:101;;;28882:6;28879:1;28876:13;28873:2;;;28759:1;28938:6;28933:3;28929:16;28922:27;28873:2;;28743:219;;;;29328:117;-1:-1;;;;;29415:5;28054:54;29390:5;29387:35;29377:2;;29436:1;;29426:12;29377:2;29371:74;"
            }
        }
    },
    "sourceTreeHashHex": "0xd64f6c56b0082455585e8c6899b2d0617a575a60408d00a2866e0be5f594616e",
    "sources": {
        "./LibDydxBalance.sol": {
            "id": 6
        },
        "@0x/contracts-asset-proxy/contracts/src/interfaces/IAssetData.sol": {
            "id": 13
        },
        "@0x/contracts-asset-proxy/contracts/src/interfaces/IDydxBridge.sol": {
            "id": 17
        },
        "@0x/contracts-asset-proxy/contracts/src/interfaces/IDydx.sol": {
            "id": 16
        },
        "@0x/contracts-erc20/contracts/src/LibERC20Token.sol": {
            "id": 19
        },
        "@0x/contracts-utils/contracts/src/LibRichErrors.sol": {
            "id": 44
        },
        "@0x/contracts-utils/contracts/src/LibBytes.sol": {
            "id": 41
        },
        "@0x/contracts-utils/contracts/src/LibBytesRichErrors.sol": {
            "id": 42
        },
        "@0x/contracts-erc20/contracts/src/interfaces/IERC20Token.sol": {
            "id": 20
        },
        "@0x/contracts-exchange-libs/contracts/src/LibOrder.sol": {
            "id": 27
        },
        "@0x/contracts-utils/contracts/src/LibEIP712.sol": {
            "id": 43
        },
        "@0x/contracts-utils/contracts/src/LibSafeMath.sol": {
            "id": 45
        },
        "@0x/contracts-utils/contracts/src/LibSafeMathRichErrors.sol": {
            "id": 46
        },
        "@0x/contracts-utils/contracts/src/D18.sol": {
            "id": 39
        },
        "./LibAssetData.sol": {
            "id": 5
        }
    },
    "sourceCodes": {
        "./LibDydxBalance.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.16;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-asset-proxy/contracts/src/interfaces/IAssetData.sol\";\nimport \"@0x/contracts-asset-proxy/contracts/src/interfaces/IDydxBridge.sol\";\nimport \"@0x/contracts-asset-proxy/contracts/src/interfaces/IDydx.sol\";\nimport \"@0x/contracts-erc20/contracts/src/LibERC20Token.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/LibOrder.sol\";\nimport \"@0x/contracts-utils/contracts/src/LibBytes.sol\";\nimport \"@0x/contracts-utils/contracts/src/LibSafeMath.sol\";\nimport \"@0x/contracts-utils/contracts/src/D18.sol\";\nimport \"./LibAssetData.sol\";\n\n\nlibrary LibDydxBalance {\n\n    using LibBytes for bytes;\n    using LibSafeMath for uint256;\n\n    /// @dev Padding % added to the minimum collateralization ratio to\n    ///      prevent withdrawing exactly the amount that would make an account\n    ///      insolvent. 1 bps.\n    int256 private constant MARGIN_RATIO_PADDING = 0.0001e18;\n\n    /// @dev Structure that holds all pertinent info needed to perform a balance\n    ///      check.\n    struct BalanceCheckInfo {\n        IDydx dydx;\n        address bridgeAddress;\n        address makerAddress;\n        address makerTokenAddress;\n        address takerTokenAddress;\n        int256 orderMakerToTakerRate;\n        uint256[] accounts;\n        IDydxBridge.BridgeAction[] actions;\n    }\n\n    /// @dev Gets the maker asset allowance for a Dydx bridge order.\n    /// @param makerAddress The maker of the order.\n    /// @param bridgeAddress The address of the Dydx bridge.\n    /// @param dydx The Dydx contract address.\n    /// @return allowance The maker asset allowance.\n    function getDydxMakerAllowance(address makerAddress, address bridgeAddress, address dydx)\n        public\n        view\n        returns (uint256 allowance)\n    {\n        // Allowance is infinite if the dydx bridge is an operator for the maker.\n        return IDydx(dydx).getIsLocalOperator(makerAddress, bridgeAddress)\n            ? uint256(-1) : 0;\n    }\n\n    /// @dev Gets the maker allowance for a\n    /// @dev Get the maker asset balance of an order with a `DydxBridge` maker asset.\n    /// @param order An order with a dydx maker asset.\n    /// @param dydx The address of the dydx contract.\n    /// @return balance The maker asset balance.\n    function getDydxMakerBalance(LibOrder.Order memory order, address dydx)\n        public\n        view\n        returns (uint256 balance)\n    {\n        BalanceCheckInfo memory info = _getBalanceCheckInfo(order, dydx);\n        // Actions must be well-formed.\n        if (!_areActionsWellFormed(info)) {\n            return 0;\n        }\n        // If the rate we withdraw maker tokens is less than one, the asset\n        // proxy will throw because we will always transfer less maker tokens\n        // than asked.\n        if (_getMakerTokenWithdrawRate(info) < D18.one()) {\n            return 0;\n        }\n        // The maker balance is the smaller of:\n        return LibSafeMath.min256(\n            // How many times we can execute all the deposit actions.\n            _getDepositableMakerAmount(info),\n            // How many times we can execute all the actions before the an\n            // account becomes undercollateralized.\n            _getSolventMakerAmount(info)\n        );\n    }\n\n    /// @dev Checks that:\n    ///      1. Actions are arranged as [...deposits, withdraw].\n    ///      2. There is only one deposit for each market ID.\n    ///      3. Every action has a valid account index.\n    ///      4. There is exactly one withdraw at the end and it is for the\n    ///         maker token.\n    /// @param info State from `_getBalanceCheckInfo()`.\n    /// @return areWellFormed Whether the actions are well-formed.\n    function _areActionsWellFormed(BalanceCheckInfo memory info)\n        internal\n        view\n        returns (bool areWellFormed)\n    {\n        if (info.actions.length == 0) {\n            return false;\n        }\n        uint256 depositCount = 0;\n        // Count the number of deposits.\n        for (; depositCount < info.actions.length; ++depositCount) {\n            IDydxBridge.BridgeAction memory action = info.actions[depositCount];\n            if (action.actionType != IDydxBridge.BridgeActionType.Deposit) {\n                break;\n            }\n            // Search all prior actions for the same market ID.\n            uint256 marketId = action.marketId;\n            for (uint256 j = 0; j < depositCount; ++j) {\n                if (info.actions[j].marketId == marketId) {\n                    // Market ID is not unique.\n                    return false;\n                }\n            }\n            // Check that the account index is within the valid range.\n            if (action.accountIdx >= info.accounts.length) {\n                return false;\n            }\n        }\n        // There must be exactly one withdraw action at the end.\n        if (depositCount + 1 != info.actions.length) {\n            return false;\n        }\n        IDydxBridge.BridgeAction memory withdraw = info.actions[depositCount];\n        if (withdraw.actionType != IDydxBridge.BridgeActionType.Withdraw) {\n            return false;\n        }\n        // And it must be for the maker token.\n        if (info.dydx.getMarketTokenAddress(withdraw.marketId) != info.makerTokenAddress) {\n            return false;\n        }\n        // Check the account index.\n        return withdraw.accountIdx < info.accounts.length;\n    }\n\n    /// @dev Returns the rate at which we withdraw maker tokens.\n    /// @param info State from `_getBalanceCheckInfo()`.\n    /// @return makerTokenWithdrawRate Maker token withdraw rate.\n    function _getMakerTokenWithdrawRate(BalanceCheckInfo memory info)\n        internal\n        pure\n        returns (int256 makerTokenWithdrawRate)\n    {\n        // The last action is always a withdraw for the maker token.\n        IDydxBridge.BridgeAction memory withdraw = info.actions[info.actions.length - 1];\n        return _getActionRate(withdraw);\n    }\n\n    /// @dev Get how much maker asset we can transfer before a deposit fails.\n    /// @param info State from `_getBalanceCheckInfo()`.\n    function _getDepositableMakerAmount(BalanceCheckInfo memory info)\n        internal\n        view\n        returns (uint256 depositableMakerAmount)\n    {\n        depositableMakerAmount = uint256(-1);\n        // Take the minimum maker amount from all deposits.\n        for (uint256 i = 0; i < info.actions.length; ++i) {\n            IDydxBridge.BridgeAction memory action = info.actions[i];\n            // Only looking at deposit actions.\n            if (action.actionType != IDydxBridge.BridgeActionType.Deposit) {\n                continue;\n            }\n            // `depositRate` is the rate at which we convert a maker token into\n            // a taker token for deposit.\n            int256 depositRate = _getActionRate(action);\n            // Taker tokens will be transferred to the maker for every fill, so\n            // we reduce the effective deposit rate if we're depositing the taker\n            // token.\n            address depositToken = info.dydx.getMarketTokenAddress(action.marketId);\n            if (info.takerTokenAddress != address(0) && depositToken == info.takerTokenAddress) {\n                depositRate = D18.sub(depositRate, info.orderMakerToTakerRate);\n            }\n            // If the deposit rate is > 0, we are limited by the transferrable\n            // token balance of the maker.\n            if (depositRate > 0) {\n                uint256 supply = _getTransferabeTokenAmount(\n                    depositToken,\n                    info.makerAddress,\n                    address(info.dydx)\n                );\n                depositableMakerAmount = LibSafeMath.min256(\n                    depositableMakerAmount,\n                    uint256(D18.div(supply, depositRate))\n                );\n            }\n        }\n    }\n\n    /// @dev Get how much maker asset we can transfer before an account\n    ///      becomes insolvent.\n    /// @param info State from `_getBalanceCheckInfo()`.\n    function _getSolventMakerAmount(BalanceCheckInfo memory info)\n        internal\n        view\n        returns (uint256 solventMakerAmount)\n    {\n        solventMakerAmount = uint256(-1);\n        assert(info.actions.length >= 1);\n        IDydxBridge.BridgeAction memory withdraw = info.actions[info.actions.length - 1];\n        assert(withdraw.actionType == IDydxBridge.BridgeActionType.Withdraw);\n        int256 minCr = D18.add(_getMinimumCollateralizationRatio(info.dydx), MARGIN_RATIO_PADDING);\n        // Loop through the accounts.\n        for (uint256 accountIdx = 0; accountIdx < info.accounts.length; ++accountIdx) {\n            (uint256 supplyValue, uint256 borrowValue) =\n                _getAccountMarketValues(info, info.accounts[accountIdx]);\n            // All accounts must currently be solvent.\n            if (borrowValue != 0 && D18.div(supplyValue, borrowValue) < minCr) {\n                return 0;\n            }\n            // If this is the same account used to in the withdraw/borrow action,\n            // compute the maker amount at which it will become insolvent.\n            if (accountIdx != withdraw.accountIdx) {\n                continue;\n            }\n            // Compute the deposit/collateralization rate, which is the rate at\n            // which (USD) value is added to the account across all markets.\n            int256 dd = 0;\n            for (uint256 i = 0; i < info.actions.length - 1; ++i) {\n                IDydxBridge.BridgeAction memory deposit = info.actions[i];\n                assert(deposit.actionType == IDydxBridge.BridgeActionType.Deposit);\n                if (deposit.accountIdx == accountIdx) {\n                    dd = D18.add(\n                        dd,\n                        _getActionRateValue(\n                            info,\n                            deposit\n                        )\n                    );\n                }\n            }\n            // Compute the borrow/withdraw rate, which is the rate at which\n            // (USD) value is deducted from the account.\n            int256 db = _getActionRateValue(\n                info,\n                withdraw\n            );\n            // If the deposit to withdraw ratio is >= the minimum collateralization\n            // ratio, then we will never become insolvent at these prices.\n            if (D18.div(dd, db) >= minCr) {\n                continue;\n            }\n            // If the adjusted deposit rates are equal, the account will remain\n            // at the same level of collateralization.\n            if (D18.mul(minCr, db) == dd) {\n                continue;\n            }\n            // The collateralization ratio for this account, parameterized by\n            // `t` (maker amount), is given by:\n            //      `cr = (supplyValue + t * dd) / (borrowValue + t * db)`\n            // Solving for `t` gives us:\n            //      `t = (supplyValue - cr * borrowValue) / (cr * db - dd)`\n            int256 t = D18.div(\n                D18.sub(supplyValue, D18.mul(minCr, borrowValue)),\n                D18.sub(D18.mul(minCr, db), dd)\n            );\n            solventMakerAmount = LibSafeMath.min256(\n                solventMakerAmount,\n                // `t` is in maker token units, so convert it to maker wei.\n                _toWei(info.makerTokenAddress, uint256(D18.clip(t)))\n            );\n        }\n    }\n\n    /// @dev Create a `BalanceCheckInfo` struct.\n    /// @param order An order with a `DydxBridge` maker asset.\n    /// @param dydx The address of the Dydx contract.\n    /// @return info The `BalanceCheckInfo` struct.\n    function _getBalanceCheckInfo(LibOrder.Order memory order, address dydx)\n        private\n        pure\n        returns (BalanceCheckInfo memory info)\n    {\n        bytes memory rawBridgeData;\n        (, info.makerTokenAddress, info.bridgeAddress, rawBridgeData) =\n            LibAssetData.decodeERC20BridgeAssetData(order.makerAssetData);\n        info.dydx = IDydx(dydx);\n        info.makerAddress = order.makerAddress;\n        if (order.takerAssetData.length == 36) {\n            if (order.takerAssetData.readBytes4(0) == IAssetData(0).ERC20Token.selector) {\n                (, info.takerTokenAddress) =\n                    LibAssetData.decodeERC20AssetData(order.takerAssetData);\n            }\n        }\n        info.orderMakerToTakerRate = D18.div(order.takerAssetAmount, order.makerAssetAmount);\n        (IDydxBridge.BridgeData memory bridgeData) =\n            abi.decode(rawBridgeData, (IDydxBridge.BridgeData));\n        info.accounts = bridgeData.accountNumbers;\n        info.actions = bridgeData.actions;\n    }\n\n    /// @dev Returns the conversion rate for an action.\n    /// @param action A `BridgeAction`.\n    function _getActionRate(IDydxBridge.BridgeAction memory action)\n        private\n        pure\n        returns (int256 rate)\n    {\n        rate = action.conversionRateDenominator == 0\n            ? D18.one()\n            : D18.div(\n                action.conversionRateNumerator,\n                action.conversionRateDenominator\n            );\n    }\n\n    /// @dev Returns the USD value of an action based on its conversion rate\n    ///      and market prices.\n    /// @param info State from `_getBalanceCheckInfo()`.\n    /// @param action A `BridgeAction`.\n    function _getActionRateValue(\n        BalanceCheckInfo memory info,\n        IDydxBridge.BridgeAction memory action\n    )\n        private\n        view\n        returns (int256 value)\n    {\n        address toToken = info.dydx.getMarketTokenAddress(action.marketId);\n        uint256 fromTokenDecimals = LibERC20Token.decimals(info.makerTokenAddress);\n        uint256 toTokenDecimals = LibERC20Token.decimals(toToken);\n        // First express the rate as 18-decimal units.\n        value = toTokenDecimals > fromTokenDecimals\n            ? int256(\n                uint256(_getActionRate(action))\n                    .safeDiv(10 ** (toTokenDecimals - fromTokenDecimals))\n            )\n            : int256(\n                uint256(_getActionRate(action))\n                    .safeMul(10 ** (fromTokenDecimals - toTokenDecimals))\n            );\n        // Prices have 18 + (18 - TOKEN_DECIMALS) decimal places because\n        // consistency is stupid.\n        uint256 price = info.dydx.getMarketPrice(action.marketId).value;\n        // Make prices have 18 decimals.\n        if (toTokenDecimals > 18) {\n            price = price.safeMul(10 ** (toTokenDecimals - 18));\n        } else {\n            price = price.safeDiv(10 ** (18 - toTokenDecimals));\n        }\n        // The action value is the action rate times the price.\n        value = D18.mul(price, value);\n        // Scale by the market premium.\n        int256 marketPremium = D18.add(\n            D18.one(),\n            info.dydx.getMarketMarginPremium(action.marketId).value\n        );\n        if (action.actionType == IDydxBridge.BridgeActionType.Deposit) {\n            value = D18.div(value, marketPremium);\n        } else {\n            value = D18.mul(value, marketPremium);\n        }\n    }\n\n    /// @dev Convert a `D18` fraction of 1 token to the equivalent integer wei.\n    /// @param token Address the of the token.\n    /// @param units Token units expressed with 18 digit precision.\n    function _toWei(address token, uint256 units)\n        private\n        view\n        returns (uint256 rate)\n    {\n        uint256 decimals = LibERC20Token.decimals(token);\n        rate = decimals > 18\n            ? units.safeMul(10 ** (decimals - 18))\n            : units.safeDiv(10 ** (18 - decimals));\n    }\n\n    /// @dev Get the global minimum collateralization ratio required for\n    ///      an account to be considered solvent.\n    /// @param dydx The Dydx interface.\n    function _getMinimumCollateralizationRatio(IDydx dydx)\n        private\n        view\n        returns (int256 ratio)\n    {\n        IDydx.RiskParams memory riskParams = dydx.getRiskParams();\n        return D18.add(D18.one(), D18.toSigned(riskParams.marginRatio.value));\n    }\n\n    /// @dev Get the total supply and borrow values for an account across all markets.\n    /// @param info State from `_getBalanceCheckInfo()`.\n    /// @param account The Dydx account identifier.\n    function _getAccountMarketValues(BalanceCheckInfo memory info, uint256 account)\n        private\n        view\n        returns (uint256 supplyValue, uint256 borrowValue)\n    {\n        (IDydx.Value memory supplyValue_, IDydx.Value memory borrowValue_) =\n            info.dydx.getAdjustedAccountValues(IDydx.AccountInfo(\n                info.makerAddress,\n                account\n            ));\n        // Account values have 36 decimal places because dydx likes to make sure\n        // you're paying attention.\n        return (supplyValue_.value / 1e18, borrowValue_.value / 1e18);\n    }\n\n    /// @dev Get the amount of an ERC20 token held by `owner` that can be transferred\n    ///      by `spender`.\n    /// @param tokenAddress The address of the ERC20 token.\n    /// @param owner The address of the token holder.\n    /// @param spender The address of the token spender.\n    function _getTransferabeTokenAmount(\n        address tokenAddress,\n        address owner,\n        address spender\n    )\n        private\n        view\n        returns (uint256 transferableAmount)\n    {\n        return LibSafeMath.min256(\n            LibERC20Token.allowance(tokenAddress, owner, spender),\n            LibERC20Token.balanceOf(tokenAddress, owner)\n        );\n    }\n}\n",
        "@0x/contracts-asset-proxy/contracts/src/interfaces/IAssetData.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\n// solhint-disable\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\n\n// @dev Interface of the asset proxy's assetData.\n// The asset proxies take an ABI encoded `bytes assetData` as argument.\n// This argument is ABI encoded as one of the methods of this interface.\ninterface IAssetData {\n\n    /// @dev Function signature for encoding ERC20 assetData.\n    /// @param tokenAddress Address of ERC20Token contract.\n    function ERC20Token(address tokenAddress)\n        external;\n\n    /// @dev Function signature for encoding ERC721 assetData.\n    /// @param tokenAddress Address of ERC721 token contract.\n    /// @param tokenId Id of ERC721 token to be transferred.\n    function ERC721Token(\n        address tokenAddress,\n        uint256 tokenId\n    )\n        external;\n\n    /// @dev Function signature for encoding ERC1155 assetData.\n    /// @param tokenAddress Address of ERC1155 token contract.\n    /// @param tokenIds Array of ids of tokens to be transferred.\n    /// @param values Array of values that correspond to each token id to be transferred.\n    ///        Note that each value will be multiplied by the amount being filled in the order before transferring.\n    /// @param callbackData Extra data to be passed to receiver's `onERC1155Received` callback function.\n    function ERC1155Assets(\n        address tokenAddress,\n        uint256[] calldata tokenIds,\n        uint256[] calldata values,\n        bytes calldata callbackData\n    )\n        external;\n\n    /// @dev Function signature for encoding MultiAsset assetData.\n    /// @param values Array of amounts that correspond to each asset to be transferred.\n    ///        Note that each value will be multiplied by the amount being filled in the order before transferring.\n    /// @param nestedAssetData Array of assetData fields that will be be dispatched to their correspnding AssetProxy contract.\n    function MultiAsset(\n        uint256[] calldata values,\n        bytes[] calldata nestedAssetData\n    )\n        external;\n\n    /// @dev Function signature for encoding StaticCall assetData.\n    /// @param staticCallTargetAddress Address that will execute the staticcall.\n    /// @param staticCallData Data that will be executed via staticcall on the staticCallTargetAddress.\n    /// @param expectedReturnDataHash Keccak-256 hash of the expected staticcall return data.\n    function StaticCall(\n        address staticCallTargetAddress,\n        bytes calldata staticCallData,\n        bytes32 expectedReturnDataHash\n    )\n        external;\n\n    /// @dev Function signature for encoding ERC20Bridge assetData.\n    /// @param tokenAddress Address of token to transfer.\n    /// @param bridgeAddress Address of the bridge contract.\n    /// @param bridgeData Arbitrary data to be passed to the bridge contract.\n    function ERC20Bridge(\n        address tokenAddress,\n        address bridgeAddress,\n        bytes calldata bridgeData\n    )\n        external;\n}\n",
        "@0x/contracts-asset-proxy/contracts/src/interfaces/IDydxBridge.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\ninterface IDydxBridge {\n\n    /// @dev This is the subset of `IDydx.ActionType` that are supported by the bridge.\n    enum BridgeActionType {\n        Deposit,                    // Deposit tokens into dydx account.\n        Withdraw                    // Withdraw tokens from dydx account.\n    }\n\n    struct BridgeAction {\n        BridgeActionType actionType;            // Action to run on dydx account.\n        uint256 accountIdx;                     // Index in `BridgeData.accountNumbers` for this action.\n        uint256 marketId;                       // Market to operate on.\n        uint256 conversionRateNumerator;        // Optional. If set, transfer amount is scaled by (conversionRateNumerator/conversionRateDenominator).\n        uint256 conversionRateDenominator;      // Optional. If set, transfer amount is scaled by (conversionRateNumerator/conversionRateDenominator).\n    }\n\n    struct BridgeData {\n        uint256[] accountNumbers;               // Account number used to identify the owner's specific account.\n        BridgeAction[] actions;                 // Actions to carry out on the owner's accounts.\n    }\n}\n",
        "@0x/contracts-asset-proxy/contracts/src/interfaces/IDydx.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\n\ninterface IDydx {\n\n    /// @dev Represents the unique key that specifies an account\n    struct AccountInfo {\n        address owner;  // The address that owns the account\n        uint256 number; // A nonce that allows a single address to control many accounts\n    }\n\n    enum ActionType {\n        Deposit,   // supply tokens\n        Withdraw,  // borrow tokens\n        Transfer,  // transfer balance between accounts\n        Buy,       // buy an amount of some token (externally)\n        Sell,      // sell an amount of some token (externally)\n        Trade,     // trade tokens against another account\n        Liquidate, // liquidate an undercollateralized or expiring account\n        Vaporize,  // use excess tokens to zero-out a completely negative account\n        Call       // send arbitrary data to an address\n    }\n\n    /// @dev Arguments that are passed to Solo in an ordered list as part of a single operation.\n    /// Each ActionArgs has an actionType which specifies which action struct that this data will be\n    /// parsed into before being processed.\n    struct ActionArgs {\n        ActionType actionType;\n        uint256 accountIdx;\n        AssetAmount amount;\n        uint256 primaryMarketId;\n        uint256 secondaryMarketId;\n        address otherAddress;\n        uint256 otherAccountIdx;\n        bytes data;\n    }\n\n    enum AssetDenomination {\n        Wei, // the amount is denominated in wei\n        Par  // the amount is denominated in par\n    }\n\n    enum AssetReference {\n        Delta, // the amount is given as a delta from the current value\n        Target // the amount is given as an exact number to end up at\n    }\n\n    struct AssetAmount {\n        bool sign; // true if positive\n        AssetDenomination denomination;\n        AssetReference ref;\n        uint256 value;\n    }\n\n    struct D256 {\n        uint256 value;\n    }\n\n    struct Value {\n        uint256 value;\n    }\n\n    struct Price {\n        uint256 value;\n    }\n\n    struct OperatorArg {\n        address operator;\n        bool trusted;\n    }\n\n    /// @dev The global risk parameters that govern the health and security of the system\n    struct RiskParams {\n        // Required ratio of over-collateralization\n        D256 marginRatio;\n        // Percentage penalty incurred by liquidated accounts\n        D256 liquidationSpread;\n        // Percentage of the borrower's interest fee that gets passed to the suppliers\n        D256 earningsRate;\n        // The minimum absolute borrow value of an account\n        // There must be sufficient incentivize to liquidate undercollateralized accounts\n        Value minBorrowedValue;\n    }\n\n    /// @dev The main entry-point to Solo that allows users and contracts to manage accounts.\n    ///      Take one or more actions on one or more accounts. The msg.sender must be the owner or\n    ///      operator of all accounts except for those being liquidated, vaporized, or traded with.\n    ///      One call to operate() is considered a singular \"operation\". Account collateralization is\n    ///      ensured only after the completion of the entire operation.\n    /// @param  accounts  A list of all accounts that will be used in this operation. Cannot contain\n    ///                   duplicates. In each action, the relevant account will be referred-to by its\n    ///                   index in the list.\n    /// @param  actions   An ordered list of all actions that will be taken in this operation. The\n    ///                   actions will be processed in order.\n    function operate(\n        AccountInfo[] calldata accounts,\n        ActionArgs[] calldata actions\n    )\n        external;\n\n    // @dev Approves/disapproves any number of operators. An operator is an external address that has the\n    //      same permissions to manipulate an account as the owner of the account. Operators are simply\n    //      addresses and therefore may either be externally-owned Ethereum accounts OR smart contracts.\n    //      Operators are also able to act as AutoTrader contracts on behalf of the account owner if the\n    //      operator is a smart contract and implements the IAutoTrader interface.\n    // @param args A list of OperatorArgs which have an address and a boolean. The boolean value\n    //        denotes whether to approve (true) or revoke approval (false) for that address.\n    function setOperators(OperatorArg[] calldata args) external;\n\n    /// @dev Return true if a particular address is approved as an operator for an owner's accounts.\n    ///      Approved operators can act on the accounts of the owner as if it were the operator's own.\n    /// @param owner The owner of the accounts\n    /// @param operator The possible operator\n    /// @return isLocalOperator True if operator is approved for owner's accounts\n    function getIsLocalOperator(\n        address owner,\n        address operator\n    )\n        external\n        view\n        returns (bool isLocalOperator);\n\n    /// @dev Get the ERC20 token address for a market.\n    /// @param marketId The market to query\n    /// @return tokenAddress The token address\n    function getMarketTokenAddress(\n        uint256 marketId\n    )\n        external\n        view\n        returns (address tokenAddress);\n\n    /// @dev Get all risk parameters in a single struct.\n    /// @return riskParams All global risk parameters\n    function getRiskParams()\n        external\n        view\n        returns (RiskParams memory riskParams);\n\n    /// @dev Get the price of the token for a market.\n    /// @param marketId The market to query\n    /// @return price The price of each atomic unit of the token\n    function getMarketPrice(\n        uint256 marketId\n    )\n        external\n        view\n        returns (Price memory price);\n\n    /// @dev Get the margin premium for a market. A margin premium makes it so that any positions that\n    ///      include the market require a higher collateralization to avoid being liquidated.\n    /// @param  marketId  The market to query\n    /// @return premium The market's margin premium\n    function getMarketMarginPremium(uint256 marketId)\n        external\n        view\n        returns (D256 memory premium);\n\n    /// @dev Get the total supplied and total borrowed values of an account adjusted by the marginPremium\n    ///      of each market. Supplied values are divided by (1 + marginPremium) for each market and\n    ///      borrowed values are multiplied by (1 + marginPremium) for each market. Comparing these\n    ///      adjusted values gives the margin-ratio of the account which will be compared to the global\n    ///      margin-ratio when determining if the account can be liquidated.\n    /// @param account The account to query\n    /// @return supplyValue The supplied value of the account (adjusted for marginPremium)\n    /// @return borrowValue The borrowed value of the account (adjusted for marginPremium)\n    function getAdjustedAccountValues(\n        AccountInfo calldata account\n    )\n        external\n        view\n        returns (Value memory supplyValue, Value memory borrowValue);\n}\n",
        "@0x/contracts-erc20/contracts/src/LibERC20Token.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\nimport \"@0x/contracts-utils/contracts/src/LibRichErrors.sol\";\nimport \"@0x/contracts-utils/contracts/src/LibBytes.sol\";\nimport \"../src/interfaces/IERC20Token.sol\";\n\n\nlibrary LibERC20Token {\n    bytes constant private DECIMALS_CALL_DATA = hex\"313ce567\";\n\n    /// @dev Calls `IERC20Token(token).approve()`.\n    ///      Reverts if `false` is returned or if the return\n    ///      data length is nonzero and not 32 bytes.\n    /// @param token The address of the token contract.\n    /// @param spender The address that receives an allowance.\n    /// @param allowance The allowance to set.\n    function approve(\n        address token,\n        address spender,\n        uint256 allowance\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            IERC20Token(0).approve.selector,\n            spender,\n            allowance\n        );\n        _callWithOptionalBooleanResult(token, callData);\n    }\n\n    /// @dev Calls `IERC20Token(token).approve()` and sets the allowance to the\n    ///      maximum if the current approval is not already >= an amount.\n    ///      Reverts if `false` is returned or if the return\n    ///      data length is nonzero and not 32 bytes.\n    /// @param token The address of the token contract.\n    /// @param spender The address that receives an allowance.\n    /// @param amount The minimum allowance needed.\n    function approveIfBelow(\n        address token,\n        address spender,\n        uint256 amount\n    )\n        internal\n    {\n        if (IERC20Token(token).allowance(address(this), spender) < amount) {\n            approve(token, spender, uint256(-1));\n        }\n    }\n\n    /// @dev Calls `IERC20Token(token).transfer()`.\n    ///      Reverts if `false` is returned or if the return\n    ///      data length is nonzero and not 32 bytes.\n    /// @param token The address of the token contract.\n    /// @param to The address that receives the tokens\n    /// @param amount Number of tokens to transfer.\n    function transfer(\n        address token,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            IERC20Token(0).transfer.selector,\n            to,\n            amount\n        );\n        _callWithOptionalBooleanResult(token, callData);\n    }\n\n    /// @dev Calls `IERC20Token(token).transferFrom()`.\n    ///      Reverts if `false` is returned or if the return\n    ///      data length is nonzero and not 32 bytes.\n    /// @param token The address of the token contract.\n    /// @param from The owner of the tokens.\n    /// @param to The address that receives the tokens\n    /// @param amount Number of tokens to transfer.\n    function transferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            IERC20Token(0).transferFrom.selector,\n            from,\n            to,\n            amount\n        );\n        _callWithOptionalBooleanResult(token, callData);\n    }\n\n    /// @dev Retrieves the number of decimals for a token.\n    ///      Returns `18` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @return tokenDecimals The number of decimals places for the token.\n    function decimals(address token)\n        internal\n        view\n        returns (uint8 tokenDecimals)\n    {\n        tokenDecimals = 18;\n        (bool didSucceed, bytes memory resultData) = token.staticcall(DECIMALS_CALL_DATA);\n        if (didSucceed && resultData.length == 32) {\n            tokenDecimals = uint8(LibBytes.readUint256(resultData, 0));\n        }\n    }\n\n    /// @dev Retrieves the allowance for a token, owner, and spender.\n    ///      Returns `0` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @param owner The owner of the tokens.\n    /// @param spender The address the spender.\n    /// @return allowance The allowance for a token, owner, and spender.\n    function allowance(address token, address owner, address spender)\n        internal\n        view\n        returns (uint256 allowance_)\n    {\n        (bool didSucceed, bytes memory resultData) = token.staticcall(\n            abi.encodeWithSelector(\n                IERC20Token(0).allowance.selector,\n                owner,\n                spender\n            )\n        );\n        if (didSucceed && resultData.length == 32) {\n            allowance_ = LibBytes.readUint256(resultData, 0);\n        }\n    }\n\n    /// @dev Retrieves the balance for a token owner.\n    ///      Returns `0` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @param owner The owner of the tokens.\n    /// @return balance The token balance of an owner.\n    function balanceOf(address token, address owner)\n        internal\n        view\n        returns (uint256 balance)\n    {\n        (bool didSucceed, bytes memory resultData) = token.staticcall(\n            abi.encodeWithSelector(\n                IERC20Token(0).balanceOf.selector,\n                owner\n            )\n        );\n        if (didSucceed && resultData.length == 32) {\n            balance = LibBytes.readUint256(resultData, 0);\n        }\n    }\n\n    /// @dev Executes a call on address `target` with calldata `callData`\n    ///      and asserts that either nothing was returned or a single boolean\n    ///      was returned equal to `true`.\n    /// @param target The call target.\n    /// @param callData The abi-encoded call data.\n    function _callWithOptionalBooleanResult(\n        address target,\n        bytes memory callData\n    )\n        private\n    {\n        (bool didSucceed, bytes memory resultData) = target.call(callData);\n        if (didSucceed) {\n            if (resultData.length == 0) {\n                return;\n            }\n            if (resultData.length == 32) {\n                uint256 result = LibBytes.readUint256(resultData, 0);\n                if (result == 1) {\n                    return;\n                }\n            }\n        }\n        LibRichErrors.rrevert(resultData);\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/LibRichErrors.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\nlibrary LibRichErrors {\n\n    // bytes4(keccak256(\"Error(string)\"))\n    bytes4 internal constant STANDARD_ERROR_SELECTOR =\n        0x08c379a0;\n\n    // solhint-disable func-name-mixedcase\n    /// @dev ABI encode a standard, string revert error payload.\n    ///      This is the same payload that would be included by a `revert(string)`\n    ///      solidity statement. It has the function signature `Error(string)`.\n    /// @param message The error string.\n    /// @return The ABI encoded error.\n    function StandardError(\n        string memory message\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            STANDARD_ERROR_SELECTOR,\n            bytes(message)\n        );\n    }\n    // solhint-enable func-name-mixedcase\n\n    /// @dev Reverts an encoded rich revert reason `errorData`.\n    /// @param errorData ABI encoded error data.\n    function rrevert(bytes memory errorData)\n        internal\n        pure\n    {\n        assembly {\n            revert(add(errorData, 0x20), mload(errorData))\n        }\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/LibBytes.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\nimport \"./LibBytesRichErrors.sol\";\nimport \"./LibRichErrors.sol\";\n\n\nlibrary LibBytes {\n\n    using LibBytes for bytes;\n\n    /// @dev Gets the memory address for a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of byte array. This\n    ///         points to the header of the byte array which contains\n    ///         the length.\n    function rawAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := input\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Gets the memory address for the contents of a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of the contents of the byte array.\n    function contentAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := add(input, 32)\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Copies `length` bytes from memory location `source` to `dest`.\n    /// @param dest memory address to copy bytes to.\n    /// @param source memory address to copy bytes from.\n    /// @param length number of bytes to copy.\n    function memCopy(\n        uint256 dest,\n        uint256 source,\n        uint256 length\n    )\n        internal\n        pure\n    {\n        if (length < 32) {\n            // Handle a partial word by reading destination and masking\n            // off the bits we are interested in.\n            // This correctly handles overlap, zero lengths and source == dest\n            assembly {\n                let mask := sub(exp(256, sub(32, length)), 1)\n                let s := and(mload(source), not(mask))\n                let d := and(mload(dest), mask)\n                mstore(dest, or(s, d))\n            }\n        } else {\n            // Skip the O(length) loop when source == dest.\n            if (source == dest) {\n                return;\n            }\n\n            // For large copies we copy whole words at a time. The final\n            // word is aligned to the end of the range (instead of after the\n            // previous) to handle partial words. So a copy will look like this:\n            //\n            //  ####\n            //      ####\n            //          ####\n            //            ####\n            //\n            // We handle overlap in the source and destination range by\n            // changing the copying direction. This prevents us from\n            // overwriting parts of source that we still need to copy.\n            //\n            // This correctly handles source == dest\n            //\n            if (source > dest) {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because it\n                    // is easier to compare with in the loop, and these\n                    // are also the addresses we need for copying the\n                    // last bytes.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the last 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the last bytes in\n                    // source already due to overlap.\n                    let last := mload(sEnd)\n\n                    // Copy whole words front to back\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} lt(source, sEnd) {} {\n                        mstore(dest, mload(source))\n                        source := add(source, 32)\n                        dest := add(dest, 32)\n                    }\n\n                    // Write the last 32 bytes\n                    mstore(dEnd, last)\n                }\n            } else {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because those\n                    // are the starting points when copying a word at the end.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the first 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the first bytes in\n                    // source already due to overlap.\n                    let first := mload(source)\n\n                    // Copy whole words back to front\n                    // We use a signed comparisson here to allow dEnd to become\n                    // negative (happens when source and dest < 32). Valid\n                    // addresses in local memory will never be larger than\n                    // 2**255, so they can be safely re-interpreted as signed.\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} slt(dest, dEnd) {} {\n                        mstore(dEnd, mload(sEnd))\n                        sEnd := sub(sEnd, 32)\n                        dEnd := sub(dEnd, 32)\n                    }\n\n                    // Write the first 32 bytes\n                    mstore(dest, first)\n                }\n            }\n        }\n    }\n\n    /// @dev Returns a slices from a byte array.\n    /// @param b The byte array to take a slice from.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function slice(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure and copy contents\n        result = new bytes(to - from);\n        memCopy(\n            result.contentAddress(),\n            b.contentAddress() + from,\n            result.length\n        );\n        return result;\n    }\n\n    /// @dev Returns a slice from a byte array without preserving the input.\n    /// @param b The byte array to take a slice from. Will be destroyed in the process.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    /// @dev When `from == 0`, the original array will match the slice. In other cases its state will be corrupted.\n    function sliceDestructive(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure around [from, to) in-place.\n        assembly {\n            result := add(b, from)\n            mstore(result, sub(to, from))\n        }\n        return result;\n    }\n\n    /// @dev Pops the last byte off of a byte array by modifying its length.\n    /// @param b Byte array that will be modified.\n    /// @return The byte that was popped off.\n    function popLastByte(bytes memory b)\n        internal\n        pure\n        returns (bytes1 result)\n    {\n        if (b.length == 0) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.LengthGreaterThanZeroRequired,\n                b.length,\n                0\n            ));\n        }\n\n        // Store last byte.\n        result = b[b.length - 1];\n\n        assembly {\n            // Decrement length of byte array.\n            let newLen := sub(mload(b), 1)\n            mstore(b, newLen)\n        }\n        return result;\n    }\n\n    /// @dev Tests equality of two byte arrays.\n    /// @param lhs First byte array to compare.\n    /// @param rhs Second byte array to compare.\n    /// @return True if arrays are the same. False otherwise.\n    function equals(\n        bytes memory lhs,\n        bytes memory rhs\n    )\n        internal\n        pure\n        returns (bool equal)\n    {\n        // Keccak gas cost is 30 + numWords * 6. This is a cheap way to compare.\n        // We early exit on unequal lengths, but keccak would also correctly\n        // handle this.\n        return lhs.length == rhs.length && keccak256(lhs) == keccak256(rhs);\n    }\n\n    /// @dev Reads an address from a position in a byte array.\n    /// @param b Byte array containing an address.\n    /// @param index Index in byte array of address.\n    /// @return address from byte array.\n    function readAddress(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (address result)\n    {\n        if (b.length < index + 20) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Read address from array memory\n        assembly {\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 20-byte mask to obtain address\n            result := and(mload(add(b, index)), 0xffffffffffffffffffffffffffffffffffffffff)\n        }\n        return result;\n    }\n\n    /// @dev Writes an address into a specific position in a byte array.\n    /// @param b Byte array to insert address into.\n    /// @param index Index in byte array of address.\n    /// @param input Address to put into byte array.\n    function writeAddress(\n        bytes memory b,\n        uint256 index,\n        address input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 20) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Store address into array memory\n        assembly {\n            // The address occupies 20 bytes and mstore stores 32 bytes.\n            // First fetch the 32-byte word where we'll be storing the address, then\n            // apply a mask so we have only the bytes in the word that the address will not occupy.\n            // Then combine these bytes with the address and store the 32 bytes back to memory with mstore.\n\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 12-byte mask to obtain extra bytes occupying word of memory where we'll store the address\n            let neighbors := and(\n                mload(add(b, index)),\n                0xffffffffffffffffffffffff0000000000000000000000000000000000000000\n            )\n\n            // Make sure input address is clean.\n            // (Solidity does not guarantee this)\n            input := and(input, 0xffffffffffffffffffffffffffffffffffffffff)\n\n            // Store the neighbors and address into memory\n            mstore(add(b, index), xor(input, neighbors))\n        }\n    }\n\n    /// @dev Reads a bytes32 value from a position in a byte array.\n    /// @param b Byte array containing a bytes32 value.\n    /// @param index Index in byte array of bytes32 value.\n    /// @return bytes32 value from byte array.\n    function readBytes32(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        if (b.length < index + 32) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            result := mload(add(b, index))\n        }\n        return result;\n    }\n\n    /// @dev Writes a bytes32 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input bytes32 to put into byte array.\n    function writeBytes32(\n        bytes memory b,\n        uint256 index,\n        bytes32 input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 32) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            mstore(add(b, index), input)\n        }\n    }\n\n    /// @dev Reads a uint256 value from a position in a byte array.\n    /// @param b Byte array containing a uint256 value.\n    /// @param index Index in byte array of uint256 value.\n    /// @return uint256 value from byte array.\n    function readUint256(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (uint256 result)\n    {\n        result = uint256(readBytes32(b, index));\n        return result;\n    }\n\n    /// @dev Writes a uint256 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input uint256 to put into byte array.\n    function writeUint256(\n        bytes memory b,\n        uint256 index,\n        uint256 input\n    )\n        internal\n        pure\n    {\n        writeBytes32(b, index, bytes32(input));\n    }\n\n    /// @dev Reads an unpadded bytes4 value from a position in a byte array.\n    /// @param b Byte array containing a bytes4 value.\n    /// @param index Index in byte array of bytes4 value.\n    /// @return bytes4 value from byte array.\n    function readBytes4(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes4 result)\n    {\n        if (b.length < index + 4) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsFourRequired,\n                b.length,\n                index + 4\n            ));\n        }\n\n        // Arrays are prefixed by a 32 byte length field\n        index += 32;\n\n        // Read the bytes4 from array memory\n        assembly {\n            result := mload(add(b, index))\n            // Solidity does not require us to clean the trailing bytes.\n            // We do it anyway\n            result := and(result, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)\n        }\n        return result;\n    }\n\n    /// @dev Writes a new length to a byte array.\n    ///      Decreasing length will lead to removing the corresponding lower order bytes from the byte array.\n    ///      Increasing length may lead to appending adjacent in-memory bytes to the end of the byte array.\n    /// @param b Bytes array to write new length to.\n    /// @param length New length of byte array.\n    function writeLength(bytes memory b, uint256 length)\n        internal\n        pure\n    {\n        assembly {\n            mstore(b, length)\n        }\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/LibBytesRichErrors.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\nlibrary LibBytesRichErrors {\n\n    enum InvalidByteOperationErrorCodes {\n        FromLessThanOrEqualsToRequired,\n        ToLessThanOrEqualsLengthRequired,\n        LengthGreaterThanZeroRequired,\n        LengthGreaterThanOrEqualsFourRequired,\n        LengthGreaterThanOrEqualsTwentyRequired,\n        LengthGreaterThanOrEqualsThirtyTwoRequired,\n        LengthGreaterThanOrEqualsNestedBytesLengthRequired,\n        DestinationLengthGreaterThanOrEqualSourceLengthRequired\n    }\n\n    // bytes4(keccak256(\"InvalidByteOperationError(uint8,uint256,uint256)\"))\n    bytes4 internal constant INVALID_BYTE_OPERATION_ERROR_SELECTOR =\n        0x28006595;\n\n    // solhint-disable func-name-mixedcase\n    function InvalidByteOperationError(\n        InvalidByteOperationErrorCodes errorCode,\n        uint256 offset,\n        uint256 required\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            INVALID_BYTE_OPERATION_ERROR_SELECTOR,\n            errorCode,\n            offset,\n            required\n        );\n    }\n}\n",
        "@0x/contracts-erc20/contracts/src/interfaces/IERC20Token.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\ncontract IERC20Token {\n\n    // solhint-disable no-simple-event-func-name\n    event Transfer(\n        address indexed _from,\n        address indexed _to,\n        uint256 _value\n    );\n\n    event Approval(\n        address indexed _owner,\n        address indexed _spender,\n        uint256 _value\n    );\n\n    /// @dev send `value` token to `to` from `msg.sender`\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transfer(address _to, uint256 _value)\n        external\n        returns (bool);\n\n    /// @dev send `value` token to `to` from `from` on the condition it is approved by `from`\n    /// @param _from The address of the sender\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _value\n    )\n        external\n        returns (bool);\n\n    /// @dev `msg.sender` approves `_spender` to spend `_value` tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @param _value The amount of wei to be approved for transfer\n    /// @return Always true if the call has enough gas to complete execution\n    function approve(address _spender, uint256 _value)\n        external\n        returns (bool);\n\n    /// @dev Query total supply of token\n    /// @return Total supply of token\n    function totalSupply()\n        external\n        view\n        returns (uint256);\n\n    /// @param _owner The address from which the balance will be retrieved\n    /// @return Balance of owner\n    function balanceOf(address _owner)\n        external\n        view\n        returns (uint256);\n\n    /// @param _owner The address of the account owning tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address _owner, address _spender)\n        external\n        view\n        returns (uint256);\n}\n",
        "@0x/contracts-exchange-libs/contracts/src/LibOrder.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\nimport \"@0x/contracts-utils/contracts/src/LibEIP712.sol\";\n\n\nlibrary LibOrder {\n\n    using LibOrder for Order;\n\n    // Hash for the EIP712 Order Schema:\n    // keccak256(abi.encodePacked(\n    //     \"Order(\",\n    //     \"address makerAddress,\",\n    //     \"address takerAddress,\",\n    //     \"address feeRecipientAddress,\",\n    //     \"address senderAddress,\",\n    //     \"uint256 makerAssetAmount,\",\n    //     \"uint256 takerAssetAmount,\",\n    //     \"uint256 makerFee,\",\n    //     \"uint256 takerFee,\",\n    //     \"uint256 expirationTimeSeconds,\",\n    //     \"uint256 salt,\",\n    //     \"bytes makerAssetData,\",\n    //     \"bytes takerAssetData,\",\n    //     \"bytes makerFeeAssetData,\",\n    //     \"bytes takerFeeAssetData\",\n    //     \")\"\n    // ))\n    bytes32 constant internal _EIP712_ORDER_SCHEMA_HASH =\n        0xf80322eb8376aafb64eadf8f0d7623f22130fd9491a221e902b713cb984a7534;\n\n    // A valid order remains fillable until it is expired, fully filled, or cancelled.\n    // An order's status is unaffected by external factors, like account balances.\n    enum OrderStatus {\n        INVALID,                     // Default value\n        INVALID_MAKER_ASSET_AMOUNT,  // Order does not have a valid maker asset amount\n        INVALID_TAKER_ASSET_AMOUNT,  // Order does not have a valid taker asset amount\n        FILLABLE,                    // Order is fillable\n        EXPIRED,                     // Order has already expired\n        FULLY_FILLED,                // Order is fully filled\n        CANCELLED                    // Order has been cancelled\n    }\n\n    // solhint-disable max-line-length\n    /// @dev Canonical order structure.\n    struct Order {\n        address makerAddress;           // Address that created the order.\n        address takerAddress;           // Address that is allowed to fill the order. If set to 0, any address is allowed to fill the order.\n        address feeRecipientAddress;    // Address that will recieve fees when order is filled.\n        address senderAddress;          // Address that is allowed to call Exchange contract methods that affect this order. If set to 0, any address is allowed to call these methods.\n        uint256 makerAssetAmount;       // Amount of makerAsset being offered by maker. Must be greater than 0.\n        uint256 takerAssetAmount;       // Amount of takerAsset being bid on by maker. Must be greater than 0.\n        uint256 makerFee;               // Fee paid to feeRecipient by maker when order is filled.\n        uint256 takerFee;               // Fee paid to feeRecipient by taker when order is filled.\n        uint256 expirationTimeSeconds;  // Timestamp in seconds at which order expires.\n        uint256 salt;                   // Arbitrary number to facilitate uniqueness of the order's hash.\n        bytes makerAssetData;           // Encoded data that can be decoded by a specified proxy contract when transferring makerAsset. The leading bytes4 references the id of the asset proxy.\n        bytes takerAssetData;           // Encoded data that can be decoded by a specified proxy contract when transferring takerAsset. The leading bytes4 references the id of the asset proxy.\n        bytes makerFeeAssetData;        // Encoded data that can be decoded by a specified proxy contract when transferring makerFeeAsset. The leading bytes4 references the id of the asset proxy.\n        bytes takerFeeAssetData;        // Encoded data that can be decoded by a specified proxy contract when transferring takerFeeAsset. The leading bytes4 references the id of the asset proxy.\n    }\n    // solhint-enable max-line-length\n\n    /// @dev Order information returned by `getOrderInfo()`.\n    struct OrderInfo {\n        OrderStatus orderStatus;                    // Status that describes order's validity and fillability.\n        bytes32 orderHash;                    // EIP712 typed data hash of the order (see LibOrder.getTypedDataHash).\n        uint256 orderTakerAssetFilledAmount;  // Amount of order that has already been filled.\n    }\n\n    /// @dev Calculates the EIP712 typed data hash of an order with a given domain separator.\n    /// @param order The order structure.\n    /// @return EIP712 typed data hash of the order.\n    function getTypedDataHash(Order memory order, bytes32 eip712ExchangeDomainHash)\n        internal\n        pure\n        returns (bytes32 orderHash)\n    {\n        orderHash = LibEIP712.hashEIP712Message(\n            eip712ExchangeDomainHash,\n            order.getStructHash()\n        );\n        return orderHash;\n    }\n\n    /// @dev Calculates EIP712 hash of the order struct.\n    /// @param order The order structure.\n    /// @return EIP712 hash of the order struct.\n    function getStructHash(Order memory order)\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        bytes32 schemaHash = _EIP712_ORDER_SCHEMA_HASH;\n        bytes memory makerAssetData = order.makerAssetData;\n        bytes memory takerAssetData = order.takerAssetData;\n        bytes memory makerFeeAssetData = order.makerFeeAssetData;\n        bytes memory takerFeeAssetData = order.takerFeeAssetData;\n\n        // Assembly for more efficiently computing:\n        // keccak256(abi.encodePacked(\n        //     EIP712_ORDER_SCHEMA_HASH,\n        //     uint256(order.makerAddress),\n        //     uint256(order.takerAddress),\n        //     uint256(order.feeRecipientAddress),\n        //     uint256(order.senderAddress),\n        //     order.makerAssetAmount,\n        //     order.takerAssetAmount,\n        //     order.makerFee,\n        //     order.takerFee,\n        //     order.expirationTimeSeconds,\n        //     order.salt,\n        //     keccak256(order.makerAssetData),\n        //     keccak256(order.takerAssetData),\n        //     keccak256(order.makerFeeAssetData),\n        //     keccak256(order.takerFeeAssetData)\n        // ));\n\n        assembly {\n            // Assert order offset (this is an internal error that should never be triggered)\n            if lt(order, 32) {\n                invalid()\n            }\n\n            // Calculate memory addresses that will be swapped out before hashing\n            let pos1 := sub(order, 32)\n            let pos2 := add(order, 320)\n            let pos3 := add(order, 352)\n            let pos4 := add(order, 384)\n            let pos5 := add(order, 416)\n\n            // Backup\n            let temp1 := mload(pos1)\n            let temp2 := mload(pos2)\n            let temp3 := mload(pos3)\n            let temp4 := mload(pos4)\n            let temp5 := mload(pos5)\n\n            // Hash in place\n            mstore(pos1, schemaHash)\n            mstore(pos2, keccak256(add(makerAssetData, 32), mload(makerAssetData)))        // store hash of makerAssetData\n            mstore(pos3, keccak256(add(takerAssetData, 32), mload(takerAssetData)))        // store hash of takerAssetData\n            mstore(pos4, keccak256(add(makerFeeAssetData, 32), mload(makerFeeAssetData)))  // store hash of makerFeeAssetData\n            mstore(pos5, keccak256(add(takerFeeAssetData, 32), mload(takerFeeAssetData)))  // store hash of takerFeeAssetData\n            result := keccak256(pos1, 480)\n\n            // Restore\n            mstore(pos1, temp1)\n            mstore(pos2, temp2)\n            mstore(pos3, temp3)\n            mstore(pos4, temp4)\n            mstore(pos5, temp5)\n        }\n        return result;\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/LibEIP712.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\nlibrary LibEIP712 {\n\n    // Hash of the EIP712 Domain Separator Schema\n    // keccak256(abi.encodePacked(\n    //     \"EIP712Domain(\",\n    //     \"string name,\",\n    //     \"string version,\",\n    //     \"uint256 chainId,\",\n    //     \"address verifyingContract\",\n    //     \")\"\n    // ))\n    bytes32 constant internal _EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH = 0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f;\n\n    /// @dev Calculates a EIP712 domain separator.\n    /// @param name The EIP712 domain name.\n    /// @param version The EIP712 domain version.\n    /// @param verifyingContract The EIP712 verifying contract.\n    /// @return EIP712 domain separator.\n    function hashEIP712Domain(\n        string memory name,\n        string memory version,\n        uint256 chainId,\n        address verifyingContract\n    )\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        bytes32 schemaHash = _EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH;\n\n        // Assembly for more efficient computing:\n        // keccak256(abi.encodePacked(\n        //     _EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH,\n        //     keccak256(bytes(name)),\n        //     keccak256(bytes(version)),\n        //     chainId,\n        //     uint256(verifyingContract)\n        // ))\n\n        assembly {\n            // Calculate hashes of dynamic data\n            let nameHash := keccak256(add(name, 32), mload(name))\n            let versionHash := keccak256(add(version, 32), mload(version))\n\n            // Load free memory pointer\n            let memPtr := mload(64)\n\n            // Store params in memory\n            mstore(memPtr, schemaHash)\n            mstore(add(memPtr, 32), nameHash)\n            mstore(add(memPtr, 64), versionHash)\n            mstore(add(memPtr, 96), chainId)\n            mstore(add(memPtr, 128), verifyingContract)\n\n            // Compute hash\n            result := keccak256(memPtr, 160)\n        }\n        return result;\n    }\n\n    /// @dev Calculates EIP712 encoding for a hash struct with a given domain hash.\n    /// @param eip712DomainHash Hash of the domain domain separator data, computed\n    ///                         with getDomainHash().\n    /// @param hashStruct The EIP712 hash struct.\n    /// @return EIP712 hash applied to the given EIP712 Domain.\n    function hashEIP712Message(bytes32 eip712DomainHash, bytes32 hashStruct)\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        // Assembly for more efficient computing:\n        // keccak256(abi.encodePacked(\n        //     EIP191_HEADER,\n        //     EIP712_DOMAIN_HASH,\n        //     hashStruct\n        // ));\n\n        assembly {\n            // Load free memory pointer\n            let memPtr := mload(64)\n\n            mstore(memPtr, 0x1901000000000000000000000000000000000000000000000000000000000000)  // EIP191 header\n            mstore(add(memPtr, 2), eip712DomainHash)                                            // EIP712 domain hash\n            mstore(add(memPtr, 34), hashStruct)                                                 // Hash of struct\n\n            // Compute hash\n            result := keccak256(memPtr, 66)\n        }\n        return result;\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/LibSafeMath.sol": "pragma solidity ^0.5.9;\n\nimport \"./LibRichErrors.sol\";\nimport \"./LibSafeMathRichErrors.sol\";\n\n\nlibrary LibSafeMath {\n\n    function safeMul(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        if (c / a != b) {\n            LibRichErrors.rrevert(LibSafeMathRichErrors.Uint256BinOpError(\n                LibSafeMathRichErrors.BinOpErrorCodes.MULTIPLICATION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function safeDiv(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b == 0) {\n            LibRichErrors.rrevert(LibSafeMathRichErrors.Uint256BinOpError(\n                LibSafeMathRichErrors.BinOpErrorCodes.DIVISION_BY_ZERO,\n                a,\n                b\n            ));\n        }\n        uint256 c = a / b;\n        return c;\n    }\n\n    function safeSub(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b > a) {\n            LibRichErrors.rrevert(LibSafeMathRichErrors.Uint256BinOpError(\n                LibSafeMathRichErrors.BinOpErrorCodes.SUBTRACTION_UNDERFLOW,\n                a,\n                b\n            ));\n        }\n        return a - b;\n    }\n\n    function safeAdd(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint256 c = a + b;\n        if (c < a) {\n            LibRichErrors.rrevert(LibSafeMathRichErrors.Uint256BinOpError(\n                LibSafeMathRichErrors.BinOpErrorCodes.ADDITION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function max256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a < b ? a : b;\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/LibSafeMathRichErrors.sol": "pragma solidity ^0.5.9;\n\n\nlibrary LibSafeMathRichErrors {\n\n    // bytes4(keccak256(\"Uint256BinOpError(uint8,uint256,uint256)\"))\n    bytes4 internal constant UINT256_BINOP_ERROR_SELECTOR =\n        0xe946c1bb;\n\n    // bytes4(keccak256(\"Uint256DowncastError(uint8,uint256)\"))\n    bytes4 internal constant UINT256_DOWNCAST_ERROR_SELECTOR =\n        0xc996af7b;\n\n    enum BinOpErrorCodes {\n        ADDITION_OVERFLOW,\n        MULTIPLICATION_OVERFLOW,\n        SUBTRACTION_UNDERFLOW,\n        DIVISION_BY_ZERO\n    }\n\n    enum DowncastErrorCodes {\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT32,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT64,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT96\n    }\n\n    // solhint-disable func-name-mixedcase\n    function Uint256BinOpError(\n        BinOpErrorCodes errorCode,\n        uint256 a,\n        uint256 b\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            UINT256_BINOP_ERROR_SELECTOR,\n            errorCode,\n            a,\n            b\n        );\n    }\n\n    function Uint256DowncastError(\n        DowncastErrorCodes errorCode,\n        uint256 a\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            UINT256_DOWNCAST_ERROR_SELECTOR,\n            errorCode,\n            a\n        );\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/D18.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.16;\n\n\n/// @dev A library for working with 18 digit, base 10 decimals.\nlibrary D18 {\n\n    /// @dev Decimal places for dydx value quantities.\n    uint256 private constant PRECISION = 18;\n    /// @dev 1.0 in base-18 decimal.\n    int256 private constant DECIMAL_ONE = int256(10 ** PRECISION);\n    /// @dev Minimum signed integer value.\n    int256 private constant MIN_INT256_VALUE = int256(0x8000000000000000000000000000000000000000000000000000000000000000);\n\n    /// @dev Return `1.0`\n    function one()\n        internal\n        pure\n        returns (int256 r)\n    {\n        r = DECIMAL_ONE;\n    }\n\n    /// @dev Add two decimals.\n    function add(int256 a, int256 b)\n        internal\n        pure\n        returns (int256 r)\n    {\n        r = _add(a, b);\n    }\n\n    /// @dev Add two decimals.\n    function add(uint256 a, int256 b)\n        internal\n        pure\n        returns (int256 r)\n    {\n        require(int256(a) >= 0, \"D18/DECIMAL_VALUE_TOO_BIG\");\n        r = _add(int256(a), b);\n    }\n\n    /// @dev Add two decimals.\n    function add(int256 a, uint256 b)\n        internal\n        pure\n        returns (int256 r)\n    {\n        require(int256(b) >= 0, \"D18/DECIMAL_VALUE_TOO_BIG\");\n        r = _add(a, int256(b));\n    }\n\n    /// @dev Add two decimals.\n    function add(uint256 a, uint256 b)\n        internal\n        pure\n        returns (int256 r)\n    {\n        require(int256(a) >= 0, \"D18/DECIMAL_VALUE_TOO_BIG\");\n        require(int256(b) >= 0, \"D18/DECIMAL_VALUE_TOO_BIG\");\n        r = _add(int256(a), int256(b));\n    }\n\n    /// @dev Subract two decimals.\n    function sub(int256 a, int256 b)\n        internal\n        pure\n        returns (int256 r)\n    {\n        r = _add(a, -b);\n    }\n\n    /// @dev Subract two decimals.\n    function sub(uint256 a, int256 b)\n        internal\n        pure\n        returns (int256 r)\n    {\n        require(int256(a) >= 0, \"D18/DECIMAL_VALUE_TOO_BIG\");\n        r = _add(int256(a), -b);\n    }\n\n    /// @dev Subract two decimals.\n    function sub(uint256 a, uint256 b)\n        internal\n        pure\n        returns (int256 r)\n    {\n        require(int256(a) >= 0, \"D18/DECIMAL_VALUE_TOO_BIG\");\n        require(int256(b) >= 0, \"D18/DECIMAL_VALUE_TOO_BIG\");\n        r = _add(int256(a), -int256(b));\n    }\n\n    /// @dev Multiply two decimals.\n    function mul(int256 a, int256 b)\n        internal\n        pure\n        returns (int256 r)\n    {\n        r = _div(_mul(a, b), DECIMAL_ONE);\n    }\n\n    /// @dev Multiply two decimals.\n    function mul(uint256 a, int256 b)\n        internal\n        pure\n        returns (int256 r)\n    {\n        require(int256(a) >= 0, \"D18/DECIMAL_VALUE_TOO_BIG\");\n        r = _div(_mul(int256(a), b), DECIMAL_ONE);\n    }\n\n    /// @dev Multiply two decimals.\n    function mul(int256 a, uint256 b)\n        internal\n        pure\n        returns (int256 r)\n    {\n        require(int256(b) >= 0, \"D18/DECIMAL_VALUE_TOO_BIG\");\n        r = _div(_mul(a, int256(b)), DECIMAL_ONE);\n    }\n\n    /// @dev Multiply two decimals.\n    function mul(uint256 a, uint256 b)\n        internal\n        pure\n        returns (int256 r)\n    {\n        require(int256(a) >= 0, \"D18/DECIMAL_VALUE_TOO_BIG\");\n        require(int256(b) >= 0, \"D18/DECIMAL_VALUE_TOO_BIG\");\n        r = _div(_mul(int256(a), int256(b)), DECIMAL_ONE);\n    }\n\n    /// @dev Divide two decimals.\n    function div(int256 a, int256 b)\n        internal\n        pure\n        returns (int256 r)\n    {\n        r = _div(_mul(a, DECIMAL_ONE), b);\n    }\n\n    /// @dev Divide two decimals.\n    function div(uint256 a, int256 b)\n        internal\n        pure\n        returns (int256 r)\n    {\n        require(int256(a) >= 0, \"D18/DECIMAL_VALUE_TOO_BIG\");\n        r = _div(_mul(int256(a), DECIMAL_ONE), b);\n    }\n\n    /// @dev Divide two decimals.\n    function div(int256 a, uint256 b)\n        internal\n        pure\n        returns (int256 r)\n    {\n        require(int256(b) >= 0, \"D18/DECIMAL_VALUE_TOO_BIG\");\n        r = _div(_mul(a, DECIMAL_ONE), int256(b));\n    }\n\n    /// @dev Divide two decimals.\n    function div(uint256 a, uint256 b)\n        internal\n        pure\n        returns (int256 r)\n    {\n        require(int256(a) >= 0, \"D18/DECIMAL_VALUE_TOO_BIG\");\n        require(int256(b) >= 0, \"D18/DECIMAL_VALUE_TOO_BIG\");\n        r = _div(_mul(int256(a), DECIMAL_ONE), int256(b));\n    }\n\n    /// @dev Safely convert an unsigned integer into a signed integer.\n    function toSigned(uint256 a)\n        internal\n        pure\n        returns (int256 r)\n    {\n        require(int256(a) >= 0, \"D18/DECIMAL_VALUE_TOO_BIG\");\n        r = int256(a);\n    }\n\n    /// @dev Clip a signed value to be positive.\n    function clip(int256 a)\n        internal\n        pure\n        returns (int256 r)\n    {\n        r = a < 0 ? 0 : a;\n    }\n\n    /// @dev Safely multiply two signed integers.\n    function _mul(int256 a, int256 b)\n        private\n        pure\n        returns (int256 r)\n    {\n        if (a == 0 || b == 0) {\n            return 0;\n        }\n        r = a * b;\n        require(r / a == b && r / b == a, \"D18/DECIMAL_MUL_OVERFLOW\");\n        return r;\n    }\n\n    /// @dev Safely divide two signed integers.\n    function _div(int256 a, int256 b)\n        private\n        pure\n        returns (int256 r)\n    {\n        require(b != 0, \"D18/DECIMAL_DIV_BY_ZERO\");\n        require(a != MIN_INT256_VALUE || b != -1, \"D18/DECIMAL_DIV_OVERFLOW\");\n        r = a / b;\n    }\n\n    /// @dev Safely add two signed integers.\n    function _add(int256 a, int256 b)\n        private\n        pure\n        returns (int256 r)\n    {\n        r = a + b;\n        require(\n            !((a < 0 && b < 0 && r > a) || (a > 0 && b > 0 && r < a)),\n            \"D18/DECIMAL_ADD_OVERFLOW\"\n        );\n    }\n\n}\n",
        "./LibAssetData.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.16;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/LibBytes.sol\";\nimport \"@0x/contracts-asset-proxy/contracts/src/interfaces/IAssetData.sol\";\n\n\nlibrary LibAssetData {\n\n    using LibBytes for bytes;\n\n    /// @dev Decode AssetProxy identifier\n    /// @param assetData AssetProxy-compliant asset data describing an ERC-20, ERC-721, ERC1155, or MultiAsset asset.\n    /// @return The AssetProxy identifier\n    function decodeAssetProxyId(bytes memory assetData)\n        public\n        pure\n        returns (\n            bytes4 assetProxyId\n        )\n    {\n        assetProxyId = assetData.readBytes4(0);\n\n        require(\n            assetProxyId == IAssetData(address(0)).ERC20Token.selector ||\n            assetProxyId == IAssetData(address(0)).ERC721Token.selector ||\n            assetProxyId == IAssetData(address(0)).ERC1155Assets.selector ||\n            assetProxyId == IAssetData(address(0)).MultiAsset.selector ||\n            assetProxyId == IAssetData(address(0)).StaticCall.selector,\n            \"WRONG_PROXY_ID\"\n        );\n        return assetProxyId;\n    }\n\n    /// @dev Encode ERC-20 asset data into the format described in the AssetProxy contract specification.\n    /// @param tokenAddress The address of the ERC-20 contract hosting the asset to be traded.\n    /// @return AssetProxy-compliant data describing the asset.\n    function encodeERC20AssetData(address tokenAddress)\n        public\n        pure\n        returns (bytes memory assetData)\n    {\n        assetData = abi.encodeWithSelector(IAssetData(address(0)).ERC20Token.selector, tokenAddress);\n        return assetData;\n    }\n\n    /// @dev Decode ERC-20 asset data from the format described in the AssetProxy contract specification.\n    /// @param assetData AssetProxy-compliant asset data describing an ERC-20 asset.\n    /// @return The AssetProxy identifier, and the address of the ERC-20\n    /// contract hosting this asset.\n    function decodeERC20AssetData(bytes memory assetData)\n        public\n        pure\n        returns (\n            bytes4 assetProxyId,\n            address tokenAddress\n        )\n    {\n        assetProxyId = assetData.readBytes4(0);\n\n        require(\n            assetProxyId == IAssetData(address(0)).ERC20Token.selector,\n            \"WRONG_PROXY_ID\"\n        );\n\n        tokenAddress = assetData.readAddress(16);\n        return (assetProxyId, tokenAddress);\n    }\n\n    /// @dev Encode ERC-721 asset data into the format described in the AssetProxy specification.\n    /// @param tokenAddress The address of the ERC-721 contract hosting the asset to be traded.\n    /// @param tokenId The identifier of the specific asset to be traded.\n    /// @return AssetProxy-compliant asset data describing the asset.\n    function encodeERC721AssetData(address tokenAddress, uint256 tokenId)\n        public\n        pure\n        returns (bytes memory assetData)\n    {\n        assetData = abi.encodeWithSelector(\n            IAssetData(address(0)).ERC721Token.selector,\n            tokenAddress,\n            tokenId\n        );\n        return assetData;\n    }\n\n    /// @dev Decode ERC-721 asset data from the format described in the AssetProxy contract specification.\n    /// @param assetData AssetProxy-compliant asset data describing an ERC-721 asset.\n    /// @return The ERC-721 AssetProxy identifier, the address of the ERC-721\n    /// contract hosting this asset, and the identifier of the specific\n    /// asset to be traded.\n    function decodeERC721AssetData(bytes memory assetData)\n        public\n        pure\n        returns (\n            bytes4 assetProxyId,\n            address tokenAddress,\n            uint256 tokenId\n        )\n    {\n        assetProxyId = assetData.readBytes4(0);\n\n        require(\n            assetProxyId == IAssetData(address(0)).ERC721Token.selector,\n            \"WRONG_PROXY_ID\"\n        );\n\n        tokenAddress = assetData.readAddress(16);\n        tokenId = assetData.readUint256(36);\n        return (assetProxyId, tokenAddress, tokenId);\n    }\n\n    /// @dev Encode ERC-1155 asset data into the format described in the AssetProxy contract specification.\n    /// @param tokenAddress The address of the ERC-1155 contract hosting the asset(s) to be traded.\n    /// @param tokenIds The identifiers of the specific assets to be traded.\n    /// @param tokenValues The amounts of each asset to be traded.\n    /// @param callbackData Data to be passed to receiving contracts when a transfer is performed.\n    /// @return AssetProxy-compliant asset data describing the set of assets.\n    function encodeERC1155AssetData(\n        address tokenAddress,\n        uint256[] memory tokenIds,\n        uint256[] memory tokenValues,\n        bytes memory callbackData\n    )\n        public\n        pure\n        returns (bytes memory assetData)\n    {\n        assetData = abi.encodeWithSelector(\n            IAssetData(address(0)).ERC1155Assets.selector,\n            tokenAddress,\n            tokenIds,\n            tokenValues,\n            callbackData\n        );\n        return assetData;\n    }\n\n    /// @dev Decode ERC-1155 asset data from the format described in the AssetProxy contract specification.\n    /// @param assetData AssetProxy-compliant asset data describing an ERC-1155 set of assets.\n    /// @return The ERC-1155 AssetProxy identifier, the address of the ERC-1155\n    /// contract hosting the assets, an array of the identifiers of the\n    /// assets to be traded, an array of asset amounts to be traded, and\n    /// callback data.  Each element of the arrays corresponds to the\n    /// same-indexed element of the other array.  Return values specified as\n    /// `memory` are returned as pointers to locations within the memory of\n    /// the input parameter `assetData`.\n    function decodeERC1155AssetData(bytes memory assetData)\n        public\n        pure\n        returns (\n            bytes4 assetProxyId,\n            address tokenAddress,\n            uint256[] memory tokenIds,\n            uint256[] memory tokenValues,\n            bytes memory callbackData\n        )\n    {\n        assetProxyId = assetData.readBytes4(0);\n\n        require(\n            assetProxyId == IAssetData(address(0)).ERC1155Assets.selector,\n            \"WRONG_PROXY_ID\"\n        );\n\n        assembly {\n            // Skip selector and length to get to the first parameter:\n            assetData := add(assetData, 36)\n            // Read the value of the first parameter:\n            tokenAddress := mload(assetData)\n            // Point to the next parameter's data:\n            tokenIds := add(assetData, mload(add(assetData, 32)))\n            // Point to the next parameter's data:\n            tokenValues := add(assetData, mload(add(assetData, 64)))\n            // Point to the next parameter's data:\n            callbackData := add(assetData, mload(add(assetData, 96)))\n        }\n\n        return (\n            assetProxyId,\n            tokenAddress,\n            tokenIds,\n            tokenValues,\n            callbackData\n        );\n    }\n\n    /// @dev Encode data for multiple assets, per the AssetProxy contract specification.\n    /// @param amounts The amounts of each asset to be traded.\n    /// @param nestedAssetData AssetProxy-compliant data describing each asset to be traded.\n    /// @return AssetProxy-compliant data describing the set of assets.\n    function encodeMultiAssetData(uint256[] memory amounts, bytes[] memory nestedAssetData)\n        public\n        pure\n        returns (bytes memory assetData)\n    {\n        assetData = abi.encodeWithSelector(\n            IAssetData(address(0)).MultiAsset.selector,\n            amounts,\n            nestedAssetData\n        );\n        return assetData;\n    }\n\n    /// @dev Decode multi-asset data from the format described in the AssetProxy contract specification.\n    /// @param assetData AssetProxy-compliant data describing a multi-asset basket.\n    /// @return The Multi-Asset AssetProxy identifier, an array of the amounts\n    /// of the assets to be traded, and an array of the\n    /// AssetProxy-compliant data describing each asset to be traded.  Each\n    /// element of the arrays corresponds to the same-indexed element of the other array.\n    function decodeMultiAssetData(bytes memory assetData)\n        public\n        pure\n        returns (\n            bytes4 assetProxyId,\n            uint256[] memory amounts,\n            bytes[] memory nestedAssetData\n        )\n    {\n        assetProxyId = assetData.readBytes4(0);\n\n        require(\n            assetProxyId == IAssetData(address(0)).MultiAsset.selector,\n            \"WRONG_PROXY_ID\"\n        );\n\n        // solhint-disable indent\n        (amounts, nestedAssetData) = abi.decode(\n            assetData.slice(4, assetData.length),\n            (uint256[], bytes[])\n        );\n        // solhint-enable indent\n    }\n\n    /// @dev Encode StaticCall asset data into the format described in the AssetProxy contract specification.\n    /// @param staticCallTargetAddress Target address of StaticCall.\n    /// @param staticCallData Data that will be passed to staticCallTargetAddress in the StaticCall.\n    /// @param expectedReturnDataHash Expected Keccak-256 hash of the StaticCall return data.\n    /// @return AssetProxy-compliant asset data describing the set of assets.\n    function encodeStaticCallAssetData(\n        address staticCallTargetAddress,\n        bytes memory staticCallData,\n        bytes32 expectedReturnDataHash\n    )\n        public\n        pure\n        returns (bytes memory assetData)\n    {\n        assetData = abi.encodeWithSelector(\n            IAssetData(address(0)).StaticCall.selector,\n            staticCallTargetAddress,\n            staticCallData,\n            expectedReturnDataHash\n        );\n        return assetData;\n    }\n\n    /// @dev Decode StaticCall asset data from the format described in the AssetProxy contract specification.\n    /// @param assetData AssetProxy-compliant asset data describing a StaticCall asset\n    /// @return The StaticCall AssetProxy identifier, the target address of the StaticCAll, the data to be\n    /// passed to the target address, and the expected Keccak-256 hash of the static call return data.\n    function decodeStaticCallAssetData(bytes memory assetData)\n        public\n        pure\n        returns (\n            bytes4 assetProxyId,\n            address staticCallTargetAddress,\n            bytes memory staticCallData,\n            bytes32 expectedReturnDataHash\n        )\n    {\n        assetProxyId = assetData.readBytes4(0);\n\n        require(\n            assetProxyId == IAssetData(address(0)).StaticCall.selector,\n            \"WRONG_PROXY_ID\"\n        );\n\n        (staticCallTargetAddress, staticCallData, expectedReturnDataHash) = abi.decode(\n            assetData.slice(4, assetData.length),\n            (address, bytes, bytes32)\n        );\n    }\n\n    /// @dev Decode ERC20Bridge asset data from the format described in the AssetProxy contract specification.\n    /// @param assetData AssetProxy-compliant asset data describing an ERC20Bridge asset\n    /// @return The ERC20BridgeProxy identifier, the address of the ERC20 token to transfer, the address\n    /// of the bridge contract, and extra data to be passed to the bridge contract.\n    function decodeERC20BridgeAssetData(bytes memory assetData)\n        public\n        pure\n        returns (\n            bytes4 assetProxyId,\n            address tokenAddress,\n            address bridgeAddress,\n            bytes memory bridgeData\n        )\n    {\n        assetProxyId = assetData.readBytes4(0);\n\n        require(\n            assetProxyId == IAssetData(address(0)).ERC20Bridge.selector,\n            \"WRONG_PROXY_ID\"\n        );\n\n        (tokenAddress, bridgeAddress, bridgeData) = abi.decode(\n            assetData.slice(4, assetData.length),\n            (address, address, bytes)\n        );\n    }\n\n    /// @dev Reverts if assetData is not of a valid format for its given proxy id.\n    /// @param assetData AssetProxy compliant asset data.\n    function revertIfInvalidAssetData(bytes memory assetData)\n        public\n        pure\n    {\n        bytes4 assetProxyId = assetData.readBytes4(0);\n\n        if (assetProxyId == IAssetData(address(0)).ERC20Token.selector) {\n            decodeERC20AssetData(assetData);\n        } else if (assetProxyId == IAssetData(address(0)).ERC721Token.selector) {\n            decodeERC721AssetData(assetData);\n        } else if (assetProxyId == IAssetData(address(0)).ERC1155Assets.selector) {\n            decodeERC1155AssetData(assetData);\n        } else if (assetProxyId == IAssetData(address(0)).MultiAsset.selector) {\n            decodeMultiAssetData(assetData);\n        } else if (assetProxyId == IAssetData(address(0)).StaticCall.selector) {\n            decodeStaticCallAssetData(assetData);\n        } else if (assetProxyId == IAssetData(address(0)).ERC20Bridge.selector) {\n            decodeERC20BridgeAssetData(assetData);\n        } else {\n            revert(\"WRONG_PROXY_ID\");\n        }\n    }\n}\n"
    },
    "compiler": {
        "name": "solc",
        "version": "0.5.17+commit.d19bba13",
        "settings": {
            "remappings": [
                "@0x/contracts-asset-proxy=/Users/rickmorty/Documents/projects/0x/0x-monorepo/node_modules/@0x/contracts-asset-proxy",
                "@0x/contracts-exchange=/Users/rickmorty/Documents/projects/0x/0x-monorepo/node_modules/@0x/contracts-exchange",
                "@0x/contracts-exchange-libs=/Users/rickmorty/Documents/projects/0x/0x-monorepo/node_modules/@0x/contracts-exchange-libs",
                "@0x/contracts-utils=/Users/rickmorty/Documents/projects/0x/0x-monorepo/node_modules/@0x/contracts-utils",
                "@0x/contracts-erc20=/Users/rickmorty/Documents/projects/0x/0x-monorepo/node_modules/@0x/contracts-erc20",
                "@0x/contracts-erc721=/Users/rickmorty/Documents/projects/0x/0x-monorepo/node_modules/@0x/contracts-erc721",
                "@0x/contracts-erc1155=/Users/rickmorty/Documents/projects/0x/0x-monorepo/node_modules/@0x/contracts-erc1155"
            ],
            "optimizer": {
                "enabled": true,
                "runs": 5000,
                "details": {
                    "yul": true,
                    "deduplicate": true,
                    "cse": true,
                    "constantOptimizer": true
                }
            },
            "outputSelection": {
                "*": {
                    "*": [
                        "abi",
                        "devdoc",
                        "evm.bytecode.object",
                        "evm.bytecode.sourceMap",
                        "evm.deployedBytecode.object",
                        "evm.deployedBytecode.sourceMap"
                    ]
                }
            },
            "evmVersion": "istanbul"
        }
    },
    "chains": {}
}
