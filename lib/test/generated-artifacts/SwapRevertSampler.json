{
    "schemaVersion": "2.0.0",
    "contractName": "SwapRevertSampler",
    "compilerOutput": {
        "abi": [
            {
                "inputs": [
                    {
                        "internalType": "bytes4",
                        "name": "selector",
                        "type": "bytes4"
                    },
                    {
                        "internalType": "address",
                        "name": "sellToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "buyToken",
                        "type": "address"
                    },
                    {
                        "internalType": "bytes",
                        "name": "bridgeData",
                        "type": "bytes"
                    },
                    {
                        "internalType": "uint256",
                        "name": "amountIn",
                        "type": "uint256"
                    }
                ],
                "name": "_callRevert",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "bytes4",
                        "name": "selector",
                        "type": "bytes4"
                    },
                    {
                        "internalType": "address",
                        "name": "sellToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "buyToken",
                        "type": "address"
                    },
                    {
                        "internalType": "bytes",
                        "name": "bridgeData",
                        "type": "bytes"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "amountsIn",
                        "type": "uint256[]"
                    }
                ],
                "name": "_mintCallRevert",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            }
        ],
        "devdoc": {
            "kind": "dev",
            "methods": {
                "_mintCallRevert(bytes4,address,address,bytes,uint256[])": {
                    "details": "Mints the sell token, then performs the swap, then reverts with the amount out. The SwapRevertSamplerQuoteOpts has been unrolled here as our ABI encoder cannot support encoding the function"
                }
            },
            "stateVariables": {
                "APPROXIMATE_BUY_MAX_ITERATIONS": {
                    "details": "Maximum iterations to perform when approximating a buy quote."
                },
                "APPROXIMATE_BUY_TARGET_EPSILON_BPS": {
                    "details": "Maximum approximate (positive) error rate when approximating a buy quote."
                },
                "CALL_STIPEND": {
                    "details": "Upper limit of gas to give to a single Swap call"
                },
                "GAS_OVERHEAD": {
                    "details": "Fixed address to register and read Gas overhead introduced by Swap revert sampling"
                }
            },
            "version": 1
        },
        "evm": {
            "bytecode": {
                "linkReferences": {},
                "object": "0x608060405234801561001057600080fd5b50610a89806100206000396000f3fe60806040526004361061002d5760003560e01c80631f4ff03e1461003957806378fee41c1461005b57610034565b3661003457005b600080fd5b34801561004557600080fd5b50610059610054366004610671565b61007b565b005b34801561006757600080fd5b50610059610076366004610766565b6103af565b600084905060008260018451038151811061009257fe5b60200260200101519050816001600160a01b031663e326c7d760016040518263ffffffff1660e01b81526004016100c99190610920565b600060405180830381600087803b1580156100e357600080fd5b505af19250505080156100f4575060015b506040516355c3705360e11b81526001600160a01b0383169063ab86e0a690610123903090859060040161089c565b600060405180830381600087803b15801561013d57600080fd5b505af192505050801561014e575060015b50856001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b15801561018a57600080fd5b505af19350505050801561019c575060015b506040516000904780156108fc029183818181858288f193505050501580156101c9573d6000803e3d6000fd5b506060835167ffffffffffffffff811180156101e457600080fd5b5060405190808252806020026020018201604052801561020e578160200160208202803683370190505b5090506060845167ffffffffffffffff8111801561022b57600080fd5b50604051908082528060200260200182016040528015610255578160200160208202803683370190505b50905060005b855181101561039957306001600160a01b03166378fee41c621e84808c8c8c8c8c888151811061028757fe5b60200260200101516040518763ffffffff1660e01b81526004016102af95949392919061092b565b600060405180830381600088803b1580156102c957600080fd5b5087f1935050505080156102db575060015b610370573d808015610309576040519150601f19603f3d011682016040523d82523d6000602084013e61030e565b606091505b506103188161056f565b85848151811061032457fe5b6020026020010185858151811061033757fe5b602002602001018281525082815250505083828151811061035457fe5b60200260200101516000141561036a5750610399565b50610391565b60405162461bcd60e51b815260040161038890610979565b60405180910390fd5b60010161025b565b506103a482826105a4565b505050505050505050565b61133761def160901b016001600160a01b031663d0afdca96040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156103f357600080fd5b505af1925050508015610404575060015b5060005a905060006060306001600160a01b0316888888888860405160240161043094939291906108b5565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b031990941693909317909252905161046e9190610880565b6000604051808303816000865af19150503d80600081146104ab576040519150601f19603f3d011682016040523d82523d6000602084013e6104b0565b606091505b50915091505a8303925061133761def160901b016001600160a01b0316630c18c1626040518163ffffffff1660e01b815260040160206040518083038186803b1580156104fc57600080fd5b505afa92505050801561052c575060408051601f3d908101601f19168201909252610529918101906107df565b60015b6105355761053a565b909203915b8161054857610548816105d2565b6105658180602001905181019061055f91906107df565b846105da565b5050505050505050565b60008082516040146105865750600090508061059f565b8280602001905181019061059a91906107f7565b915091505b915091565b606082826040516020016105b99291906108f2565b6040516020818303038152906040529050805160208201fd5b805160208201fd5b604051828152816020820152604081fd5b80356001600160a01b038116811461060257600080fd5b92915050565b600082601f830112610618578081fd5b813567ffffffffffffffff81111561062e578182fd5b610641601f8201601f19166020016109ae565b915080825283602082850101111561065857600080fd5b8060208401602084013760009082016020015292915050565b600080600080600060a08688031215610688578081fd5b853561069381610a3d565b94506020868101356106a481610a25565b945060408701356106b481610a25565b9350606087013567ffffffffffffffff808211156106d0578384fd5b6106dc8a838b01610608565b945060808901359150808211156106f1578384fd5b508701601f81018913610702578283fd5b8035610715610710826109d5565b6109ae565b81815283810190838501858402850186018d1015610731578687fd5b8694505b83851015610753578035835260019490940193918501918501610735565b5080955050505050509295509295909350565b600080600080600060a0868803121561077d578081fd5b853561078881610a3d565b945061079787602088016105eb565b93506107a687604088016105eb565b9250606086013567ffffffffffffffff8111156107c1578182fd5b6107cd88828901610608565b95989497509295608001359392505050565b6000602082840312156107f0578081fd5b5051919050565b60008060408385031215610809578182fd5b505080516020909101519092909150565b6000815180845260208085019450808401835b838110156108495781518752958201959082019060010161082d565b509495945050505050565b6000815180845261086c8160208601602086016109f5565b601f01601f19169290920160200192915050565b600082516108928184602087016109f5565b9190910192915050565b6001600160a01b03929092168252602082015260400190565b6001600160a01b038581168252841660208201526080604082018190526000906108e190830185610854565b905082606083015295945050505050565b600060408252610905604083018561081a565b8281036020840152610917818561081a565b95945050505050565b901515815260200190565b6001600160e01b0319861681526001600160a01b0385811660208301528416604082015260a06060820181905260009061096790830185610854565b90508260808301529695505050505050565b6020808252818101527f537761702053616d706c652073686f756c642068617665207265766572746564604082015260600190565b60405181810167ffffffffffffffff811182821017156109cd57600080fd5b604052919050565b600067ffffffffffffffff8211156109eb578081fd5b5060209081020190565b60005b83811015610a105781810151838201526020016109f8565b83811115610a1f576000848401525b50505050565b6001600160a01b0381168114610a3a57600080fd5b50565b6001600160e01b031981168114610a3a57600080fdfea26469706673582212204ab4d48280d6c34aa90072b32faa2d6df698aca5accbaf2e1ccf88372f84ef6664736f6c634300060c0033",
                "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xA89 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x2D JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x1F4FF03E EQ PUSH2 0x39 JUMPI DUP1 PUSH4 0x78FEE41C EQ PUSH2 0x5B JUMPI PUSH2 0x34 JUMP JUMPDEST CALLDATASIZE PUSH2 0x34 JUMPI STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x45 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x59 PUSH2 0x54 CALLDATASIZE PUSH1 0x4 PUSH2 0x671 JUMP JUMPDEST PUSH2 0x7B JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x67 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x59 PUSH2 0x76 CALLDATASIZE PUSH1 0x4 PUSH2 0x766 JUMP JUMPDEST PUSH2 0x3AF JUMP JUMPDEST PUSH1 0x0 DUP5 SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x1 DUP5 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x92 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xE326C7D7 PUSH1 0x1 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC9 SWAP2 SWAP1 PUSH2 0x920 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xE3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0xF4 JUMPI POP PUSH1 0x1 JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0x55C37053 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0xAB86E0A6 SWAP1 PUSH2 0x123 SWAP1 ADDRESS SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x89C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x13D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x14E JUMPI POP PUSH1 0x1 JUMPDEST POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD0E30DB0 DUP3 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x18A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x19C JUMPI POP PUSH1 0x1 JUMPDEST POP PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 SELFBALANCE DUP1 ISZERO PUSH2 0x8FC MUL SWAP2 DUP4 DUP2 DUP2 DUP2 DUP6 DUP3 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x1C9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x60 DUP4 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x1E4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x20E JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x60 DUP5 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x22B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x255 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP6 MLOAD DUP2 LT ISZERO PUSH2 0x399 JUMPI ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x78FEE41C PUSH3 0x1E8480 DUP13 DUP13 DUP13 DUP13 DUP13 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x287 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP8 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2AF SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x92B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP8 CALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x2DB JUMPI POP PUSH1 0x1 JUMPDEST PUSH2 0x370 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x309 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x30E JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH2 0x318 DUP2 PUSH2 0x56F JUMP JUMPDEST DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x324 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP6 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x337 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP3 DUP2 MSTORE POP DUP3 DUP2 MSTORE POP POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x354 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x36A JUMPI POP PUSH2 0x399 JUMP JUMPDEST POP PUSH2 0x391 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x388 SWAP1 PUSH2 0x979 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 ADD PUSH2 0x25B JUMP JUMPDEST POP PUSH2 0x3A4 DUP3 DUP3 PUSH2 0x5A4 JUMP JUMPDEST POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x1337 PUSH2 0xDEF1 PUSH1 0x90 SHL ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD0AFDCA9 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3F3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x404 JUMPI POP PUSH1 0x1 JUMPDEST POP PUSH1 0x0 GAS SWAP1 POP PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP9 DUP9 DUP9 DUP9 DUP9 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x430 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x8B5 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x46E SWAP2 SWAP1 PUSH2 0x880 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x4AB JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x4B0 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP GAS DUP4 SUB SWAP3 POP PUSH2 0x1337 PUSH2 0xDEF1 PUSH1 0x90 SHL ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xC18C162 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x52C JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x529 SWAP2 DUP2 ADD SWAP1 PUSH2 0x7DF JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x535 JUMPI PUSH2 0x53A JUMP JUMPDEST SWAP1 SWAP3 SUB SWAP2 JUMPDEST DUP2 PUSH2 0x548 JUMPI PUSH2 0x548 DUP2 PUSH2 0x5D2 JUMP JUMPDEST PUSH2 0x565 DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x55F SWAP2 SWAP1 PUSH2 0x7DF JUMP JUMPDEST DUP5 PUSH2 0x5DA JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 MLOAD PUSH1 0x40 EQ PUSH2 0x586 JUMPI POP PUSH1 0x0 SWAP1 POP DUP1 PUSH2 0x59F JUMP JUMPDEST DUP3 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x59A SWAP2 SWAP1 PUSH2 0x7F7 JUMP JUMPDEST SWAP2 POP SWAP2 POP JUMPDEST SWAP2 POP SWAP2 JUMP JUMPDEST PUSH1 0x60 DUP3 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x5B9 SWAP3 SWAP2 SWAP1 PUSH2 0x8F2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH1 0x40 MLOAD DUP3 DUP2 MSTORE DUP2 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x602 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x618 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x62E JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x641 PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD PUSH2 0x9AE JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x658 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP5 ADD CALLDATACOPY PUSH1 0x0 SWAP1 DUP3 ADD PUSH1 0x20 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x688 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x693 DUP2 PUSH2 0xA3D JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 DUP2 ADD CALLDATALOAD PUSH2 0x6A4 DUP2 PUSH2 0xA25 JUMP JUMPDEST SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD PUSH2 0x6B4 DUP2 PUSH2 0xA25 JUMP JUMPDEST SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x6D0 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x6DC DUP11 DUP4 DUP12 ADD PUSH2 0x608 JUMP JUMPDEST SWAP5 POP PUSH1 0x80 DUP10 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x6F1 JUMPI DUP4 DUP5 REVERT JUMPDEST POP DUP8 ADD PUSH1 0x1F DUP2 ADD DUP10 SGT PUSH2 0x702 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH2 0x715 PUSH2 0x710 DUP3 PUSH2 0x9D5 JUMP JUMPDEST PUSH2 0x9AE JUMP JUMPDEST DUP2 DUP2 MSTORE DUP4 DUP2 ADD SWAP1 DUP4 DUP6 ADD DUP6 DUP5 MUL DUP6 ADD DUP7 ADD DUP14 LT ISZERO PUSH2 0x731 JUMPI DUP7 DUP8 REVERT JUMPDEST DUP7 SWAP5 POP JUMPDEST DUP4 DUP6 LT ISZERO PUSH2 0x753 JUMPI DUP1 CALLDATALOAD DUP4 MSTORE PUSH1 0x1 SWAP5 SWAP1 SWAP5 ADD SWAP4 SWAP2 DUP6 ADD SWAP2 DUP6 ADD PUSH2 0x735 JUMP JUMPDEST POP DUP1 SWAP6 POP POP POP POP POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x77D JUMPI DUP1 DUP2 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x788 DUP2 PUSH2 0xA3D JUMP JUMPDEST SWAP5 POP PUSH2 0x797 DUP8 PUSH1 0x20 DUP9 ADD PUSH2 0x5EB JUMP JUMPDEST SWAP4 POP PUSH2 0x7A6 DUP8 PUSH1 0x40 DUP9 ADD PUSH2 0x5EB JUMP JUMPDEST SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x7C1 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x7CD DUP9 DUP3 DUP10 ADD PUSH2 0x608 JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP3 SWAP6 PUSH1 0x80 ADD CALLDATALOAD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x7F0 JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x809 JUMPI DUP2 DUP3 REVERT JUMPDEST POP POP DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD MLOAD SWAP1 SWAP3 SWAP1 SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD DUP4 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x849 JUMPI DUP2 MLOAD DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x82D JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x86C DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x9F5 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x892 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x9F5 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x80 PUSH1 0x40 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x8E1 SWAP1 DUP4 ADD DUP6 PUSH2 0x854 JUMP JUMPDEST SWAP1 POP DUP3 PUSH1 0x60 DUP4 ADD MSTORE SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 MSTORE PUSH2 0x905 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x81A JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x917 DUP2 DUP6 PUSH2 0x81A JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP7 AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND PUSH1 0x20 DUP4 ADD MSTORE DUP5 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0xA0 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x967 SWAP1 DUP4 ADD DUP6 PUSH2 0x854 JUMP JUMPDEST SWAP1 POP DUP3 PUSH1 0x80 DUP4 ADD MSTORE SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x537761702053616D706C652073686F756C642068617665207265766572746564 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x9CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x9EB JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xA10 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x9F8 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0xA1F JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xA3A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0xA3A JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x4A 0xB4 0xD4 DUP3 DUP1 0xD6 0xC3 0x4A 0xA9 STOP PUSH19 0xB32FAA2D6DF698ACA5ACCBAF2E1CCF88372F84 0xEF PUSH7 0x64736F6C634300 MOD 0xC STOP CALLER ",
                "sourceMap": "993:13170:18:-:0;;;;;;;;;;;;;;;;;;;"
            },
            "deployedBytecode": {
                "immutableReferences": {},
                "linkReferences": {},
                "object": "0x60806040526004361061002d5760003560e01c80631f4ff03e1461003957806378fee41c1461005b57610034565b3661003457005b600080fd5b34801561004557600080fd5b50610059610054366004610671565b61007b565b005b34801561006757600080fd5b50610059610076366004610766565b6103af565b600084905060008260018451038151811061009257fe5b60200260200101519050816001600160a01b031663e326c7d760016040518263ffffffff1660e01b81526004016100c99190610920565b600060405180830381600087803b1580156100e357600080fd5b505af19250505080156100f4575060015b506040516355c3705360e11b81526001600160a01b0383169063ab86e0a690610123903090859060040161089c565b600060405180830381600087803b15801561013d57600080fd5b505af192505050801561014e575060015b50856001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b15801561018a57600080fd5b505af19350505050801561019c575060015b506040516000904780156108fc029183818181858288f193505050501580156101c9573d6000803e3d6000fd5b506060835167ffffffffffffffff811180156101e457600080fd5b5060405190808252806020026020018201604052801561020e578160200160208202803683370190505b5090506060845167ffffffffffffffff8111801561022b57600080fd5b50604051908082528060200260200182016040528015610255578160200160208202803683370190505b50905060005b855181101561039957306001600160a01b03166378fee41c621e84808c8c8c8c8c888151811061028757fe5b60200260200101516040518763ffffffff1660e01b81526004016102af95949392919061092b565b600060405180830381600088803b1580156102c957600080fd5b5087f1935050505080156102db575060015b610370573d808015610309576040519150601f19603f3d011682016040523d82523d6000602084013e61030e565b606091505b506103188161056f565b85848151811061032457fe5b6020026020010185858151811061033757fe5b602002602001018281525082815250505083828151811061035457fe5b60200260200101516000141561036a5750610399565b50610391565b60405162461bcd60e51b815260040161038890610979565b60405180910390fd5b60010161025b565b506103a482826105a4565b505050505050505050565b61133761def160901b016001600160a01b031663d0afdca96040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156103f357600080fd5b505af1925050508015610404575060015b5060005a905060006060306001600160a01b0316888888888860405160240161043094939291906108b5565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b031990941693909317909252905161046e9190610880565b6000604051808303816000865af19150503d80600081146104ab576040519150601f19603f3d011682016040523d82523d6000602084013e6104b0565b606091505b50915091505a8303925061133761def160901b016001600160a01b0316630c18c1626040518163ffffffff1660e01b815260040160206040518083038186803b1580156104fc57600080fd5b505afa92505050801561052c575060408051601f3d908101601f19168201909252610529918101906107df565b60015b6105355761053a565b909203915b8161054857610548816105d2565b6105658180602001905181019061055f91906107df565b846105da565b5050505050505050565b60008082516040146105865750600090508061059f565b8280602001905181019061059a91906107f7565b915091505b915091565b606082826040516020016105b99291906108f2565b6040516020818303038152906040529050805160208201fd5b805160208201fd5b604051828152816020820152604081fd5b80356001600160a01b038116811461060257600080fd5b92915050565b600082601f830112610618578081fd5b813567ffffffffffffffff81111561062e578182fd5b610641601f8201601f19166020016109ae565b915080825283602082850101111561065857600080fd5b8060208401602084013760009082016020015292915050565b600080600080600060a08688031215610688578081fd5b853561069381610a3d565b94506020868101356106a481610a25565b945060408701356106b481610a25565b9350606087013567ffffffffffffffff808211156106d0578384fd5b6106dc8a838b01610608565b945060808901359150808211156106f1578384fd5b508701601f81018913610702578283fd5b8035610715610710826109d5565b6109ae565b81815283810190838501858402850186018d1015610731578687fd5b8694505b83851015610753578035835260019490940193918501918501610735565b5080955050505050509295509295909350565b600080600080600060a0868803121561077d578081fd5b853561078881610a3d565b945061079787602088016105eb565b93506107a687604088016105eb565b9250606086013567ffffffffffffffff8111156107c1578182fd5b6107cd88828901610608565b95989497509295608001359392505050565b6000602082840312156107f0578081fd5b5051919050565b60008060408385031215610809578182fd5b505080516020909101519092909150565b6000815180845260208085019450808401835b838110156108495781518752958201959082019060010161082d565b509495945050505050565b6000815180845261086c8160208601602086016109f5565b601f01601f19169290920160200192915050565b600082516108928184602087016109f5565b9190910192915050565b6001600160a01b03929092168252602082015260400190565b6001600160a01b038581168252841660208201526080604082018190526000906108e190830185610854565b905082606083015295945050505050565b600060408252610905604083018561081a565b8281036020840152610917818561081a565b95945050505050565b901515815260200190565b6001600160e01b0319861681526001600160a01b0385811660208301528416604082015260a06060820181905260009061096790830185610854565b90508260808301529695505050505050565b6020808252818101527f537761702053616d706c652073686f756c642068617665207265766572746564604082015260600190565b60405181810167ffffffffffffffff811182821017156109cd57600080fd5b604052919050565b600067ffffffffffffffff8211156109eb578081fd5b5060209081020190565b60005b83811015610a105781810151838201526020016109f8565b83811115610a1f576000848401525b50505050565b6001600160a01b0381168114610a3a57600080fd5b50565b6001600160e01b031981168114610a3a57600080fdfea26469706673582212204ab4d48280d6c34aa90072b32faa2d6df698aca5accbaf2e1ccf88372f84ef6664736f6c634300060c0033",
                "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x2D JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x1F4FF03E EQ PUSH2 0x39 JUMPI DUP1 PUSH4 0x78FEE41C EQ PUSH2 0x5B JUMPI PUSH2 0x34 JUMP JUMPDEST CALLDATASIZE PUSH2 0x34 JUMPI STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x45 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x59 PUSH2 0x54 CALLDATASIZE PUSH1 0x4 PUSH2 0x671 JUMP JUMPDEST PUSH2 0x7B JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x67 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x59 PUSH2 0x76 CALLDATASIZE PUSH1 0x4 PUSH2 0x766 JUMP JUMPDEST PUSH2 0x3AF JUMP JUMPDEST PUSH1 0x0 DUP5 SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x1 DUP5 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x92 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xE326C7D7 PUSH1 0x1 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC9 SWAP2 SWAP1 PUSH2 0x920 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xE3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0xF4 JUMPI POP PUSH1 0x1 JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0x55C37053 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0xAB86E0A6 SWAP1 PUSH2 0x123 SWAP1 ADDRESS SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x89C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x13D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x14E JUMPI POP PUSH1 0x1 JUMPDEST POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD0E30DB0 DUP3 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x18A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x19C JUMPI POP PUSH1 0x1 JUMPDEST POP PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 SELFBALANCE DUP1 ISZERO PUSH2 0x8FC MUL SWAP2 DUP4 DUP2 DUP2 DUP2 DUP6 DUP3 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x1C9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x60 DUP4 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x1E4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x20E JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x60 DUP5 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x22B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x255 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP6 MLOAD DUP2 LT ISZERO PUSH2 0x399 JUMPI ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x78FEE41C PUSH3 0x1E8480 DUP13 DUP13 DUP13 DUP13 DUP13 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x287 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP8 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2AF SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x92B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP8 CALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x2DB JUMPI POP PUSH1 0x1 JUMPDEST PUSH2 0x370 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x309 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x30E JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH2 0x318 DUP2 PUSH2 0x56F JUMP JUMPDEST DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x324 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP6 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x337 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP3 DUP2 MSTORE POP DUP3 DUP2 MSTORE POP POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x354 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x36A JUMPI POP PUSH2 0x399 JUMP JUMPDEST POP PUSH2 0x391 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x388 SWAP1 PUSH2 0x979 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 ADD PUSH2 0x25B JUMP JUMPDEST POP PUSH2 0x3A4 DUP3 DUP3 PUSH2 0x5A4 JUMP JUMPDEST POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x1337 PUSH2 0xDEF1 PUSH1 0x90 SHL ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD0AFDCA9 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3F3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x404 JUMPI POP PUSH1 0x1 JUMPDEST POP PUSH1 0x0 GAS SWAP1 POP PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP9 DUP9 DUP9 DUP9 DUP9 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x430 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x8B5 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x46E SWAP2 SWAP1 PUSH2 0x880 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x4AB JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x4B0 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP GAS DUP4 SUB SWAP3 POP PUSH2 0x1337 PUSH2 0xDEF1 PUSH1 0x90 SHL ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xC18C162 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x52C JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x529 SWAP2 DUP2 ADD SWAP1 PUSH2 0x7DF JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x535 JUMPI PUSH2 0x53A JUMP JUMPDEST SWAP1 SWAP3 SUB SWAP2 JUMPDEST DUP2 PUSH2 0x548 JUMPI PUSH2 0x548 DUP2 PUSH2 0x5D2 JUMP JUMPDEST PUSH2 0x565 DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x55F SWAP2 SWAP1 PUSH2 0x7DF JUMP JUMPDEST DUP5 PUSH2 0x5DA JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 MLOAD PUSH1 0x40 EQ PUSH2 0x586 JUMPI POP PUSH1 0x0 SWAP1 POP DUP1 PUSH2 0x59F JUMP JUMPDEST DUP3 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x59A SWAP2 SWAP1 PUSH2 0x7F7 JUMP JUMPDEST SWAP2 POP SWAP2 POP JUMPDEST SWAP2 POP SWAP2 JUMP JUMPDEST PUSH1 0x60 DUP3 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x5B9 SWAP3 SWAP2 SWAP1 PUSH2 0x8F2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH1 0x40 MLOAD DUP3 DUP2 MSTORE DUP2 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x602 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x618 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x62E JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x641 PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD PUSH2 0x9AE JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x658 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP5 ADD CALLDATACOPY PUSH1 0x0 SWAP1 DUP3 ADD PUSH1 0x20 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x688 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x693 DUP2 PUSH2 0xA3D JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 DUP2 ADD CALLDATALOAD PUSH2 0x6A4 DUP2 PUSH2 0xA25 JUMP JUMPDEST SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD PUSH2 0x6B4 DUP2 PUSH2 0xA25 JUMP JUMPDEST SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x6D0 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x6DC DUP11 DUP4 DUP12 ADD PUSH2 0x608 JUMP JUMPDEST SWAP5 POP PUSH1 0x80 DUP10 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x6F1 JUMPI DUP4 DUP5 REVERT JUMPDEST POP DUP8 ADD PUSH1 0x1F DUP2 ADD DUP10 SGT PUSH2 0x702 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH2 0x715 PUSH2 0x710 DUP3 PUSH2 0x9D5 JUMP JUMPDEST PUSH2 0x9AE JUMP JUMPDEST DUP2 DUP2 MSTORE DUP4 DUP2 ADD SWAP1 DUP4 DUP6 ADD DUP6 DUP5 MUL DUP6 ADD DUP7 ADD DUP14 LT ISZERO PUSH2 0x731 JUMPI DUP7 DUP8 REVERT JUMPDEST DUP7 SWAP5 POP JUMPDEST DUP4 DUP6 LT ISZERO PUSH2 0x753 JUMPI DUP1 CALLDATALOAD DUP4 MSTORE PUSH1 0x1 SWAP5 SWAP1 SWAP5 ADD SWAP4 SWAP2 DUP6 ADD SWAP2 DUP6 ADD PUSH2 0x735 JUMP JUMPDEST POP DUP1 SWAP6 POP POP POP POP POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x77D JUMPI DUP1 DUP2 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x788 DUP2 PUSH2 0xA3D JUMP JUMPDEST SWAP5 POP PUSH2 0x797 DUP8 PUSH1 0x20 DUP9 ADD PUSH2 0x5EB JUMP JUMPDEST SWAP4 POP PUSH2 0x7A6 DUP8 PUSH1 0x40 DUP9 ADD PUSH2 0x5EB JUMP JUMPDEST SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x7C1 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x7CD DUP9 DUP3 DUP10 ADD PUSH2 0x608 JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP3 SWAP6 PUSH1 0x80 ADD CALLDATALOAD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x7F0 JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x809 JUMPI DUP2 DUP3 REVERT JUMPDEST POP POP DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD MLOAD SWAP1 SWAP3 SWAP1 SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD DUP4 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x849 JUMPI DUP2 MLOAD DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x82D JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x86C DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x9F5 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x892 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x9F5 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x80 PUSH1 0x40 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x8E1 SWAP1 DUP4 ADD DUP6 PUSH2 0x854 JUMP JUMPDEST SWAP1 POP DUP3 PUSH1 0x60 DUP4 ADD MSTORE SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 MSTORE PUSH2 0x905 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x81A JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x917 DUP2 DUP6 PUSH2 0x81A JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP7 AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND PUSH1 0x20 DUP4 ADD MSTORE DUP5 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0xA0 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x967 SWAP1 DUP4 ADD DUP6 PUSH2 0x854 JUMP JUMPDEST SWAP1 POP DUP3 PUSH1 0x80 DUP4 ADD MSTORE SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x537761702053616D706C652073686F756C642068617665207265766572746564 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x9CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x9EB JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xA10 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x9F8 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0xA1F JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xA3A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0xA3A JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x4A 0xB4 0xD4 DUP3 DUP1 0xD6 0xC3 0x4A 0xA9 STOP PUSH19 0xB32FAA2D6DF698ACA5ACCBAF2E1CCF88372F84 0xEF PUSH7 0x64736F6C634300 MOD 0xC STOP CALLER ",
                "sourceMap": "993:13170:18:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4294:2209;;;;;;;;;;-1:-1:-1;4294:2209:18;;;;;:::i;:::-;;:::i;:::-;;3054:1014;;;;;;;;;;-1:-1:-1;3054:1014:18;;;;;:::i;:::-;;:::i;4294:2209::-;4503:28;4555:9;4503:63;;4700:16;4719:9;4748:1;4729:9;:16;:20;4719:31;;;;;;;;;;;;;;4700:50;;4833:15;-1:-1:-1;;;;;4833:27:18;;4861:4;4833:33;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4817:71;4945:52;;-1:-1:-1;;;4945:52:18;;-1:-1:-1;;;;;4945:27:18;;;;;:52;;4981:4;;4988:8;;4945:52;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4929:90;5068:9;-1:-1:-1;;;;;5045:42:18;;5096:8;5045:63;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5029:101;5230:42;;5238:1;;5250:21;5230:42;;;;;5238:1;5230:42;5238:1;5230:42;5250:21;5238:1;5230:42;;;;;;;;;;;;;;;;;;;;;5283:27;5327:9;:16;5313:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5313:31:18;;5283:61;;5354:24;5395:9;:16;5381:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5381:31:18;;5354:58;;5428:9;5423:988;5447:9;:16;5443:1;:20;5423:988;;;5504:4;-1:-1:-1;;;;;5504:16:18;;1713:3;5561:8;5591:9;5622:8;5652:10;5684:9;5694:1;5684:12;;;;;;;;;;;;;;5504:210;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5484:917;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5937:38;5968:6;5937:30;:38::i;:::-;5908:10;5919:1;5908:13;;;;;;;;;;;;;5923:7;5931:1;5923:10;;;;;;;;;;;;;5907:68;;;;;;;;;;6321:10;6332:1;6321:13;;;;;;;;;;;;;;6338:1;6321:18;6317:70;;;6363:5;;;6317:70;5811:590;5484:917;;;5745:50;;-1:-1:-1;;;5745:50:18;;;;;;;:::i;:::-;;;;;;;;;5465:3;;5423:988;;;;6458:38;6476:10;6488:7;6458:17;:38::i;:::-;4294:2209;;;;;;;;;:::o;3054:1014::-;-1:-1:-1;;;;;;;;;;3306:39:18;;:41;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3290:79;3405:15;3423:9;3405:27;;3471:12;3485:17;3514:4;-1:-1:-1;;;;;3506:18:18;3561:8;3571:9;3582:8;3592:10;3604:8;3538:75;;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;3538:75:18;;;;;;;;;;;;;;-1:-1:-1;;;;;3538:75:18;-1:-1:-1;;;;;;3538:75:18;;;;;;;;;;3506:117;;;;3538:75;3506:117;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3470:153;;;;3653:9;3643:7;:19;3633:29;;-1:-1:-1;;;;;;;;;;3734:34:18;;:36;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3734:36:18;;;;;;;;-1:-1:-1;;3734:36:18;;;;;;;;;;;;:::i;:::-;;;3718:169;;;;;3845:21;;;;3718:169;3902:7;3897:53;;3925:14;:4;:12;:14::i;:::-;4000:61;4035:4;4024:27;;;;;;;;;;;;:::i;:::-;4053:7;4000:23;:61::i;:::-;3054:1014;;;;;;;;:::o;9394:277::-;9516:7;9525;9552:6;:13;9569:2;9552:19;9548:62;;-1:-1:-1;9595:1:18;;-1:-1:-1;9595:1:18;9587:12;;9548:62;9637:6;9626:38;;;;;;;;;;;;:::i;:::-;9619:45;;;;9394:277;;;;:::o;8785:312::-;8917:17;8948:7;8957;8937:28;;;;;;;;;:::i;:::-;;;;;;;;;;;;;8917:48;;9075:4;9069:11;9064:2;9058:4;9054:13;9047:34;1531:170:36;1674:9;1668:16;1661:4;1650:9;1646:20;1639:46;8448:331:18;8656:4;8650:11;8686:6;8681:3;8674:19;8727:7;8722:2;8717:3;8713:12;8706:29;8760:2;8755:3;8748:15;5:130:-1;72:20;;-1:-1;;;;;12790:54;;13909:35;;13899:2;;13958:1;;13948:12;13899:2;57:78;;;;:::o;1011:440::-;;1112:3;1105:4;1097:6;1093:17;1089:27;1079:2;;-1:-1;;1120:12;1079:2;1167:6;1154:20;10974:18;10966:6;10963:30;10960:2;;;-1:-1;;10996:12;10960:2;1189:64;11069:9;11050:17;;-1:-1;;11046:33;11137:4;11127:15;1189:64;:::i;:::-;1180:73;;1273:6;1266:5;1259:21;1377:3;11137:4;1368:6;1301;1359:16;;1356:25;1353:2;;;1394:1;;1384:12;1353:2;13396:6;11137:4;1301:6;1297:17;11137:4;1335:5;1331:16;13373:30;13452:1;13434:16;;;11137:4;13434:16;13427:27;1335:5;1072:379;-1:-1;;1072:379::o;1737:981::-;;;;;;1942:3;1930:9;1921:7;1917:23;1913:33;1910:2;;;-1:-1;;1949:12;1910:2;954:6;941:20;966:32;992:5;966:32;:::i;:::-;2001:62;-1:-1;2100:2;2139:22;;;72:20;97:33;72:20;97:33;:::i;:::-;2108:63;-1:-1;2208:2;2247:22;;72:20;97:33;72:20;97:33;:::i;:::-;2216:63;-1:-1;2344:2;2329:18;;2316:32;2368:18;2357:30;;;2354:2;;;-1:-1;;2390:12;2354:2;2420:62;2474:7;2465:6;2454:9;2450:22;2420:62;:::i;:::-;2410:72;;2547:3;2536:9;2532:19;2519:33;2505:47;;2368:18;2564:6;2561:30;2558:2;;;-1:-1;;2594:12;2558:2;-1:-1;2670:22;;270:4;258:17;;254:27;-1:-1;244:2;;-1:-1;;285:12;244:2;332:6;319:20;354:80;369:64;426:6;369:64;:::i;:::-;354:80;:::i;:::-;462:21;;;519:14;;;;494:17;;;608;;;599:27;;;;596:36;-1:-1;593:2;;;-1:-1;;635:12;593:2;-1:-1;661:10;;655:206;680:6;677:1;674:13;655:206;;;1526:20;;748:50;;702:1;695:9;;;;;812:14;;;;840;;655:206;;;659:14;2614:88;;;;;;;;1904:814;;;;;;;;:::o;2725:845::-;;;;;;2905:3;2893:9;2884:7;2880:23;2876:33;2873:2;;;-1:-1;;2912:12;2873:2;954:6;941:20;966:32;992:5;966:32;:::i;:::-;2964:62;-1:-1;3081:53;3126:7;3063:2;3102:22;;3081:53;:::i;:::-;3071:63;;3189:53;3234:7;3171:2;3214:9;3210:22;3189:53;:::i;:::-;3179:63;;3307:2;3296:9;3292:18;3279:32;3331:18;3323:6;3320:30;3317:2;;;-1:-1;;3353:12;3317:2;3383:62;3437:7;3428:6;3417:9;3413:22;3383:62;:::i;:::-;2867:703;;;;-1:-1;2867:703;;3482:3;3522:22;1526:20;;2867:703;-1:-1;;;2867:703::o;3577:263::-;;3692:2;3680:9;3671:7;3667:23;3663:32;3660:2;;;-1:-1;;3698:12;3660:2;-1:-1;1674:13;;3654:186;-1:-1;3654:186::o;3847:399::-;;;3979:2;3967:9;3958:7;3954:23;3950:32;3947:2;;;-1:-1;;3985:12;3947:2;-1:-1;;1674:13;;4148:2;4198:22;;;1674:13;;;;;-1:-1;3941:305::o;4735:690::-;;4928:5;11420:12;11835:6;11830:3;11823:19;11872:4;;11867:3;11863:14;4940:93;;11872:4;5104:5;11274:14;-1:-1;5143:260;5168:6;5165:1;5162:13;5143:260;;;5229:13;;6776:37;;4407:14;;;;11678;;;;5190:1;5183:9;5143:260;;;-1:-1;5409:10;;4859:566;-1:-1;;;;;4859:566::o;5661:343::-;;5803:5;11420:12;11835:6;11830:3;11823:19;5896:52;5941:6;11872:4;11867:3;11863:14;11872:4;5922:5;5918:16;5896:52;:::i;:::-;11069:9;13813:14;-1:-1;;13809:28;5960:39;;;;11872:4;5960:39;;5751:253;-1:-1;;5751:253::o;6945:271::-;;6171:5;11420:12;6282:52;6327:6;6322:3;6315:4;6308:5;6304:16;6282:52;:::i;:::-;6346:16;;;;;7079:137;-1:-1;;7079:137::o;7223:349::-;-1:-1;;;;;12790:54;;;;4514:58;;7558:2;7543:18;;6776:37;7386:2;7371:18;;7357:215::o;7579:640::-;-1:-1;;;;;12790:54;;;4655:37;;12790:54;;7973:2;7958:18;;4655:37;7808:3;8010:2;7995:18;;7988:48;;;7579:640;;8050:76;;7793:19;;8112:6;8050:76;:::i;:::-;8042:84;;6806:5;8205:2;8194:9;8190:18;6776:37;7779:440;;;;;;;:::o;8226:629::-;;8481:2;8502:17;8495:47;8556:108;8481:2;8470:9;8466:18;8650:6;8556:108;:::i;:::-;8712:9;8706:4;8702:20;8697:2;8686:9;8682:18;8675:48;8737:108;8840:4;8831:6;8737:108;:::i;:::-;8729:116;8452:403;-1:-1;;;;;8452:403::o;8862:210::-;12551:13;;12544:21;5498:34;;8983:2;8968:18;;8954:118::o;9079:748::-;-1:-1;;;;;;12638:78;;5613:36;;-1:-1;;;;;12790:54;;;9497:2;9482:18;;4655:37;12790:54;;9580:2;9565:18;;4655:37;12801:42;9617:2;9602:18;;9595:48;;;9079:748;;9657:76;;9319:19;;9719:6;9657:76;:::i;:::-;9649:84;;6806:5;9812:3;9801:9;9797:19;6776:37;9305:522;;;;;;;;:::o;9834:416::-;10034:2;10048:47;;;10019:18;;;11823:19;6635:34;11863:14;;;6615:55;6689:12;;;10005:245::o;10257:256::-;10319:2;10313:9;10345:17;;;10420:18;10405:34;;10441:22;;;10402:62;10399:2;;;10477:1;;10467:12;10399:2;10319;10486:22;10297:216;;-1:-1;10297:216::o;10520:304::-;;10679:18;10671:6;10668:30;10665:2;;;-1:-1;;10701:12;10665:2;-1:-1;10746:4;10734:17;;;10799:15;;10602:222::o;13469:268::-;13534:1;13541:101;13555:6;13552:1;13549:13;13541:101;;;13622:11;;;13616:18;13603:11;;;13596:39;13577:2;13570:10;13541:101;;;13657:6;13654:1;13651:13;13648:2;;;13534:1;13713:6;13708:3;13704:16;13697:27;13648:2;;13518:219;;;:::o;13850:117::-;-1:-1;;;;;12790:54;;13909:35;;13899:2;;13958:1;;13948:12;13899:2;13893:74;:::o;13974:115::-;-1:-1;;;;;;12638:78;;14032:34;;14022:2;;14080:1;;14070:12"
            }
        }
    },
    "sourceTreeHashHex": "0xf8ed7b0491899c37ef8fae9aa343559e5d11c95deaa6b41cc947bdc3a97f2814",
    "sources": {
        "./SwapRevertSampler.sol": {
            "id": 18,
            "content": "\n\n// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./GasOverhead.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\n\ninterface IHackedERC20 {\n    function _setBalance(address owner, uint256 amount) external;\n    function _setEnabled(bool enabled) external;\n}\n\ncontract SwapRevertSampler {\n    using LibRichErrorsV06 for bytes;\n\n    /// @dev Fixed address to register and read Gas overhead introduced by Swap revert sampling\n    address private constant GAS_OVERHEAD = 0xDeF1000000000000000000000000000000001337;\n    /// @dev Maximum approximate (positive) error rate when approximating a buy quote.\n    uint256 private constant APPROXIMATE_BUY_TARGET_EPSILON_BPS = 0.0005e4;\n    /// @dev Maximum iterations to perform when approximating a buy quote.\n    uint256 private constant APPROXIMATE_BUY_MAX_ITERATIONS = 3;\n    uint256 private constant ONE_HUNDED_PERCENT_BPS = 1e4;\n    /// @dev Upper limit of gas to give to a single Swap call\n    uint256 private constant CALL_STIPEND = 2e6;\n\n\n    // solhint-disable no-empty-blocks\n    /// @dev Payable fallback to receive ETH from Kyber/WETH.\n    receive ()\n        external\n        payable\n    { }\n\n    struct SwapRevertSamplerQuoteOpts {\n        // Address of the token which is being sold\n        address sellToken;\n        // Address of the token which is wanted\n        address buyToken;\n        // Data required for the bridge to execute the swap\n        bytes bridgeData;\n        // Callback to retrieve a swap quote.\n        function (address sellToken, address buyToken, bytes memory bridgeData, uint256 sellAmount)\n            external\n            returns (uint256)\n            getSwapQuoteCallback;\n    }\n\n    struct SwapRevertSamplerBuyQuoteOpts {\n        // Address of the token which is being sold\n        address sellToken;\n        // Address of the token which is wanted\n        address buyToken;\n        // Data required for the bridge to execute the SELL_TOKEN->BUY_TOKEN swap\n        bytes sellTokenData;\n        // Data required for the bridge to execute the BUY_TOKEN->SELL_TOKEN swap\n        bytes buyTokenData;\n        // Callback to retrieve a swap quote.\n        function (address sellToken, address buyToken, bytes memory bridgeData, uint256 sellAmount)\n            external\n            returns (uint256)\n            getSwapQuoteCallback;\n    }\n\n    function _callRevert(\n        bytes4 selector,\n        address sellToken,\n        address buyToken,\n        bytes memory bridgeData,\n        uint256 amountIn\n    )\n        external\n    {\n        // Clear any registered overhead\n        try\n            GasOverhead(GAS_OVERHEAD).clearOverhead()\n        { } catch { }\n        // Measure the gas\n        uint256 gasUsed = gasleft();\n        // Perform the sell\n        (bool success, bytes memory data) = address(this).call(\n            abi.encodeWithSelector(selector, sellToken, buyToken, bridgeData, amountIn)\n        );\n        gasUsed = gasUsed - gasleft();\n        // Remove any registered gas overhead\n        try\n            GasOverhead(GAS_OVERHEAD).overhead()\n            returns (uint256 gasOverhead)\n        {\n            gasUsed = gasUsed - gasOverhead;\n        } catch { }\n\n        if (!success) {\n            data.rrevert();\n        }\n        // Revert with the amount bought\n        _revertSingleSwapSample(abi.decode(data, (uint256)), gasUsed);\n    }\n\n    /// @dev  Mints the sell token, then performs the swap, then reverts with the amount out.\n    /// The SwapRevertSamplerQuoteOpts has been unrolled here as our ABI encoder cannot support\n    /// encoding the function\n    function _mintCallRevert(\n        bytes4 selector,\n        address sellToken,\n        address buyToken,\n        bytes memory bridgeData,\n        uint256[] memory amountsIn\n    )\n        external\n    {\n        IHackedERC20 hackedSellToken = IHackedERC20(payable(sellToken));\n        // We assume the amounts are ascending and that\n        // the underlying call can handle selling a specific amount\n        uint256 amountIn = amountsIn[amountsIn.length - 1];\n\n        // Enable sell token to be tracked and shadowed\n        try\n            hackedSellToken._setEnabled(true)\n        { } catch { }\n\n        // Mint enough to sell\n        try\n            hackedSellToken._setBalance(address(this), amountIn)\n        { } catch { }\n\n        try\n            IEtherTokenV06(payable(sellToken)).deposit{ value: amountIn }()\n        { } catch { }\n\n        // Burn any excess ETH to avoid balance issues for sources which use ETH directly\n        address(0).transfer(address(this).balance);\n\n        uint256[] memory amountsOut = new uint256[](amountsIn.length);\n        uint256[] memory gasUsed = new uint256[](amountsIn.length);\n\n        for (uint256 i = 0; i < amountsIn.length; i++) {\n            try\n                this._callRevert{gas: CALL_STIPEND}(\n                    selector,\n                    sellToken,\n                    buyToken,\n                    bridgeData,\n                    amountsIn[i]\n                )\n            {\n                require(false, \"Swap Sample should have reverted\");\n            } catch (bytes memory reason) {\n                // Parse the reverted sample data\n                (amountsOut[i], gasUsed[i]) = _parseRevertedSingleSwapSample(reason);\n                // If we detect the amount out is 0 then we return early\n                // rather than continue performing excess work\n\n                // Some sources (Balancer) display issues, especially with small amounts\n                // Where the amountsOut can range, e.g 448,0,0,0,2476,3048,0,4279,4941,0,0,7133,\n\n                if (amountsOut[i] == 0) {\n                    break;\n                }\n            }\n        }\n        // Revert the entire sampling\n        _revertSwapSample(amountsOut, gasUsed);\n    }\n\n    function _sampleSwapQuotesRevert(\n        SwapRevertSamplerQuoteOpts memory opts,\n        uint256[] memory amountsIn\n    )\n        internal\n        returns (uint256[] memory gasUsed, uint256[] memory amountsOut)\n    {\n        try\n            this._mintCallRevert(\n                opts.getSwapQuoteCallback.selector,\n                opts.sellToken,\n                opts.buyToken,\n                opts.bridgeData,\n                amountsIn\n            )\n        {\n            require(false, \"Swap Sample should have reverted\");\n        } catch (bytes memory reason) {\n            // Parse the reverted sample datas\n            (amountsOut, gasUsed) = abi.decode(reason, (uint256[], uint256[]));\n        }\n    }\n\n    function _getNativeWrappedToken()\n        internal\n        view\n        returns (IEtherTokenV06)\n    {\n        uint256 chainId;\n        assembly {\n            chainId := chainid()\n        }\n        address token;\n        if (chainId == 1) {\n            // Ethereum Mainnet\n            token = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n        } else if (chainId == 3) {\n            // Ropsten\n            token = 0xc778417E063141139Fce010982780140Aa0cD5Ab;\n        } else if (chainId == 4) {\n            // Rinkeby\n            token = 0xc778417E063141139Fce010982780140Aa0cD5Ab;\n        } else if (chainId == 42) {\n            // Kovan\n            token = 0xd0A1E359811322d97991E03f863a0C30C2cF029C;\n        } else if (chainId == 56) {\n            // BSC \n            token = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\n        } else if (chainId == 137) {\n            // Polygon\n            token = 0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270;\n        } else if (chainId == 1337) {\n            // 0x Ganache\n            token = 0x0B1ba0af832d7C05fD64161E0Db78E85978E8082;\n        }\n        if (token == address(0)) {\n            revert(\"No native wrapped token\");\n        }\n        return IEtherTokenV06(token);\n    }\n\n    function _revertSingleSwapSample(\n        uint256 amount,\n        uint256 gasUsed\n    )\n        internal\n    {\n        // Revert it so there is no state change\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, amount)\n            mstore(add(ptr, 32), gasUsed)\n            revert(ptr, 64)\n        }\n    }\n\n    function _revertSwapSample(\n        uint256[] memory amounts,\n        uint256[] memory gasUsed\n    )\n        internal\n    {\n        bytes memory data = abi.encode(amounts, gasUsed);\n        // Revert it so there is no state change\n        assembly {\n            revert(add(data, 32), mload(data))\n        }\n    }\n\n    /// @dev Parses the reverted swap sample data. If no amount\n    ///      is decoded, 0 is returned.\n    /// @param reason the string which contains the possible\n    ///               sample amount\n    /// @return the decoded sample amount or 0\n    /// @return the gas used in the sample\n    function _parseRevertedSingleSwapSample(\n        bytes memory reason\n    )\n        internal\n        pure\n        returns (uint256, uint256)\n    {\n        if (reason.length != 64) {\n            return (0,0);\n        }\n        return abi.decode(reason, (uint256, uint256));\n    }\n\n    function _sampleSwapApproximateBuys(\n        SwapRevertSamplerBuyQuoteOpts memory opts,\n        uint256[] memory makerTokenAmounts\n    )\n        internal\n        returns (uint256[] memory gasUsed, uint256[] memory takerTokenAmounts)\n    {\n        if (makerTokenAmounts.length == 0) {\n            return (gasUsed, takerTokenAmounts);\n        }\n\n        takerTokenAmounts = new uint256[](makerTokenAmounts.length);\n        gasUsed = new uint256[](makerTokenAmounts.length);\n\n        uint256[] memory sellAmounts = new uint256[](1);\n        sellAmounts[0] = makerTokenAmounts[0];\n\n        SwapRevertSamplerQuoteOpts memory sellOpts = SwapRevertSamplerQuoteOpts({\n            sellToken: opts.sellToken,\n            buyToken: opts.buyToken,\n            bridgeData: opts.sellTokenData,\n            getSwapQuoteCallback: opts.getSwapQuoteCallback\n        });\n\n        SwapRevertSamplerQuoteOpts memory buyOpts = SwapRevertSamplerQuoteOpts({\n            sellToken: opts.buyToken,\n            buyToken: opts.sellToken,\n            bridgeData: opts.buyTokenData,\n            getSwapQuoteCallback: opts.getSwapQuoteCallback\n        });\n        // Inverted, perform a sell of the token the user wants to buy\n        (, sellAmounts) = _sampleSwapQuotesRevert(buyOpts, sellAmounts);\n        if (sellAmounts.length == 0 || sellAmounts[0] == 0) {\n            return (gasUsed, takerTokenAmounts);\n        }\n\n        uint256[] memory buyAmounts;\n        // Sell of the token the user wishes to dispose, see how much we buy\n        (, buyAmounts) = _sampleSwapQuotesRevert(sellOpts, sellAmounts);\n\n        if (buyAmounts.length == 0 || buyAmounts[0] == 0) {\n            return (gasUsed, takerTokenAmounts);\n        }\n\n        for (uint256 i = 0; i < makerTokenAmounts.length; i++) {\n            uint256[] memory _gasUsed;\n            for (uint256 iter = 0; iter < APPROXIMATE_BUY_MAX_ITERATIONS; iter++) {\n                // adjustedSellAmount = previousSellAmount * (target/actual) * JUMP_MULTIPLIER\n                sellAmounts[0] = _safeGetPartialAmountCeil(\n                    makerTokenAmounts[i],\n                    buyAmounts[0],\n                    sellAmounts[0]\n                );\n                if (sellAmounts.length == 0 || sellAmounts[0] == 0) {\n                    break;\n                }\n                sellAmounts[0] = _safeGetPartialAmountCeil(\n                    (ONE_HUNDED_PERCENT_BPS + APPROXIMATE_BUY_TARGET_EPSILON_BPS),\n                    ONE_HUNDED_PERCENT_BPS,\n                    sellAmounts[0]\n                );\n                if (sellAmounts.length == 0 || sellAmounts[0] == 0) {\n                    break;\n                }\n                uint256[] memory _buyAmounts;\n                (_gasUsed, _buyAmounts) = _sampleSwapQuotesRevert(sellOpts, sellAmounts);\n                if (_buyAmounts.length == 0 || _buyAmounts[0] == 0) {\n                    break;\n                }\n                // We re-use buyAmount next iteration, only assign if it is\n                // non zero\n                buyAmounts = _buyAmounts;\n                // If we've reached our goal, exit early\n                if (buyAmounts[0] >= makerTokenAmounts[i]) {\n                    uint256 eps =\n                        (buyAmounts[0] - makerTokenAmounts[i]) * ONE_HUNDED_PERCENT_BPS /\n                        makerTokenAmounts[i];\n                    if (eps <= APPROXIMATE_BUY_TARGET_EPSILON_BPS) {\n                        break;\n                    }\n                }\n            }\n            if (_gasUsed.length > 0 && buyAmounts.length > 0) {\n                gasUsed[i] = _gasUsed[0];\n                // We do our best to close in on the requested amount, but we can either over buy or under buy and exit\n                // if we hit a max iteration limit\n                // We scale the sell amount to get the approximate target\n                takerTokenAmounts[i] = _safeGetPartialAmountCeil(\n                    makerTokenAmounts[i],\n                    buyAmounts[0],\n                    sellAmounts[0]\n                );\n            }\n        }\n    }\n\n    function _safeGetPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        view\n        returns (uint256 partialAmount)\n    {\n        if (numerator == 0 || target == 0 || denominator == 0) return 0;\n        uint256 c = numerator * target;\n        if (c / numerator != target) return 0;\n        return (c + (denominator - 1)) / denominator;\n    }\n\n\n}"
        },
        "./GasOverhead.sol": {
            "id": 9,
            "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.6;\n\ncontract GasOverhead {\n    uint256 public _overhead = 2;\n    // Overhead incurred from updating the overhead storage slot\n    uint256 constant SSTORE_OVERHEAD = 20000;\n\n    function addOverhead(uint256 gas, uint256 gasBefore)\n        external\n    {\n        uint256 callOverhead = gasBefore - gasleft();\n        // Add additional est overhead of performing this update\n        _overhead += gas + callOverhead + SSTORE_OVERHEAD;\n    }\n\n    function clearOverhead()\n        external\n    {\n        _overhead = 2;\n    }\n\n    function overhead()\n        external\n        view\n        returns (uint256)\n    {\n        return _overhead;\n    }\n}\n"
        },
        "@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol": {
            "id": 29,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./IERC20TokenV06.sol\";\n\n\ninterface IEtherTokenV06 is\n    IERC20TokenV06\n{\n    /// @dev Wrap ether.\n    function deposit() external payable;\n\n    /// @dev Unwrap ether.\n    function withdraw(uint256 amount) external;\n}\n"
        },
        "@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol": {
            "id": 28,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\ninterface IERC20TokenV06 {\n\n    // solhint-disable no-simple-event-func-name\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 value\n    );\n\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n\n    /// @dev send `value` token to `to` from `msg.sender`\n    /// @param to The address of the recipient\n    /// @param value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transfer(address to, uint256 value)\n        external\n        returns (bool);\n\n    /// @dev send `value` token to `to` from `from` on the condition it is approved by `from`\n    /// @param from The address of the sender\n    /// @param to The address of the recipient\n    /// @param value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    )\n        external\n        returns (bool);\n\n    /// @dev `msg.sender` approves `spender` to spend `value` tokens\n    /// @param spender The address of the account able to transfer the tokens\n    /// @param value The amount of wei to be approved for transfer\n    /// @return Always true if the call has enough gas to complete execution\n    function approve(address spender, uint256 value)\n        external\n        returns (bool);\n\n    /// @dev Query total supply of token\n    /// @return Total supply of token\n    function totalSupply()\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the balance of `owner`.\n    /// @param owner The address from which the balance will be retrieved\n    /// @return Balance of owner\n    function balanceOf(address owner)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the allowance for `spender` to spend from `owner`.\n    /// @param owner The address of the account owning tokens\n    /// @param spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the number of decimals this token has.\n    function decimals()\n        external\n        view\n        returns (uint8);\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol": {
            "id": 36,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibRichErrorsV06 {\n\n    // bytes4(keccak256(\"Error(string)\"))\n    bytes4 internal constant STANDARD_ERROR_SELECTOR = 0x08c379a0;\n\n    // solhint-disable func-name-mixedcase\n    /// @dev ABI encode a standard, string revert error payload.\n    ///      This is the same payload that would be included by a `revert(string)`\n    ///      solidity statement. It has the function signature `Error(string)`.\n    /// @param message The error string.\n    /// @return The ABI encoded error.\n    function StandardError(string memory message)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            STANDARD_ERROR_SELECTOR,\n            bytes(message)\n        );\n    }\n    // solhint-enable func-name-mixedcase\n\n    /// @dev Reverts an encoded rich revert reason `errorData`.\n    /// @param errorData ABI encoded error data.\n    function rrevert(bytes memory errorData)\n        internal\n        pure\n    {\n        assembly {\n            revert(add(errorData, 0x20), mload(errorData))\n        }\n    }\n}\n"
        }
    },
    "sourceCodes": {
        "./SwapRevertSampler.sol": "\n\n// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./GasOverhead.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\n\ninterface IHackedERC20 {\n    function _setBalance(address owner, uint256 amount) external;\n    function _setEnabled(bool enabled) external;\n}\n\ncontract SwapRevertSampler {\n    using LibRichErrorsV06 for bytes;\n\n    /// @dev Fixed address to register and read Gas overhead introduced by Swap revert sampling\n    address private constant GAS_OVERHEAD = 0xDeF1000000000000000000000000000000001337;\n    /// @dev Maximum approximate (positive) error rate when approximating a buy quote.\n    uint256 private constant APPROXIMATE_BUY_TARGET_EPSILON_BPS = 0.0005e4;\n    /// @dev Maximum iterations to perform when approximating a buy quote.\n    uint256 private constant APPROXIMATE_BUY_MAX_ITERATIONS = 3;\n    uint256 private constant ONE_HUNDED_PERCENT_BPS = 1e4;\n    /// @dev Upper limit of gas to give to a single Swap call\n    uint256 private constant CALL_STIPEND = 2e6;\n\n\n    // solhint-disable no-empty-blocks\n    /// @dev Payable fallback to receive ETH from Kyber/WETH.\n    receive ()\n        external\n        payable\n    { }\n\n    struct SwapRevertSamplerQuoteOpts {\n        // Address of the token which is being sold\n        address sellToken;\n        // Address of the token which is wanted\n        address buyToken;\n        // Data required for the bridge to execute the swap\n        bytes bridgeData;\n        // Callback to retrieve a swap quote.\n        function (address sellToken, address buyToken, bytes memory bridgeData, uint256 sellAmount)\n            external\n            returns (uint256)\n            getSwapQuoteCallback;\n    }\n\n    struct SwapRevertSamplerBuyQuoteOpts {\n        // Address of the token which is being sold\n        address sellToken;\n        // Address of the token which is wanted\n        address buyToken;\n        // Data required for the bridge to execute the SELL_TOKEN->BUY_TOKEN swap\n        bytes sellTokenData;\n        // Data required for the bridge to execute the BUY_TOKEN->SELL_TOKEN swap\n        bytes buyTokenData;\n        // Callback to retrieve a swap quote.\n        function (address sellToken, address buyToken, bytes memory bridgeData, uint256 sellAmount)\n            external\n            returns (uint256)\n            getSwapQuoteCallback;\n    }\n\n    function _callRevert(\n        bytes4 selector,\n        address sellToken,\n        address buyToken,\n        bytes memory bridgeData,\n        uint256 amountIn\n    )\n        external\n    {\n        // Clear any registered overhead\n        try\n            GasOverhead(GAS_OVERHEAD).clearOverhead()\n        { } catch { }\n        // Measure the gas\n        uint256 gasUsed = gasleft();\n        // Perform the sell\n        (bool success, bytes memory data) = address(this).call(\n            abi.encodeWithSelector(selector, sellToken, buyToken, bridgeData, amountIn)\n        );\n        gasUsed = gasUsed - gasleft();\n        // Remove any registered gas overhead\n        try\n            GasOverhead(GAS_OVERHEAD).overhead()\n            returns (uint256 gasOverhead)\n        {\n            gasUsed = gasUsed - gasOverhead;\n        } catch { }\n\n        if (!success) {\n            data.rrevert();\n        }\n        // Revert with the amount bought\n        _revertSingleSwapSample(abi.decode(data, (uint256)), gasUsed);\n    }\n\n    /// @dev  Mints the sell token, then performs the swap, then reverts with the amount out.\n    /// The SwapRevertSamplerQuoteOpts has been unrolled here as our ABI encoder cannot support\n    /// encoding the function\n    function _mintCallRevert(\n        bytes4 selector,\n        address sellToken,\n        address buyToken,\n        bytes memory bridgeData,\n        uint256[] memory amountsIn\n    )\n        external\n    {\n        IHackedERC20 hackedSellToken = IHackedERC20(payable(sellToken));\n        // We assume the amounts are ascending and that\n        // the underlying call can handle selling a specific amount\n        uint256 amountIn = amountsIn[amountsIn.length - 1];\n\n        // Enable sell token to be tracked and shadowed\n        try\n            hackedSellToken._setEnabled(true)\n        { } catch { }\n\n        // Mint enough to sell\n        try\n            hackedSellToken._setBalance(address(this), amountIn)\n        { } catch { }\n\n        try\n            IEtherTokenV06(payable(sellToken)).deposit{ value: amountIn }()\n        { } catch { }\n\n        // Burn any excess ETH to avoid balance issues for sources which use ETH directly\n        address(0).transfer(address(this).balance);\n\n        uint256[] memory amountsOut = new uint256[](amountsIn.length);\n        uint256[] memory gasUsed = new uint256[](amountsIn.length);\n\n        for (uint256 i = 0; i < amountsIn.length; i++) {\n            try\n                this._callRevert{gas: CALL_STIPEND}(\n                    selector,\n                    sellToken,\n                    buyToken,\n                    bridgeData,\n                    amountsIn[i]\n                )\n            {\n                require(false, \"Swap Sample should have reverted\");\n            } catch (bytes memory reason) {\n                // Parse the reverted sample data\n                (amountsOut[i], gasUsed[i]) = _parseRevertedSingleSwapSample(reason);\n                // If we detect the amount out is 0 then we return early\n                // rather than continue performing excess work\n\n                // Some sources (Balancer) display issues, especially with small amounts\n                // Where the amountsOut can range, e.g 448,0,0,0,2476,3048,0,4279,4941,0,0,7133,\n\n                if (amountsOut[i] == 0) {\n                    break;\n                }\n            }\n        }\n        // Revert the entire sampling\n        _revertSwapSample(amountsOut, gasUsed);\n    }\n\n    function _sampleSwapQuotesRevert(\n        SwapRevertSamplerQuoteOpts memory opts,\n        uint256[] memory amountsIn\n    )\n        internal\n        returns (uint256[] memory gasUsed, uint256[] memory amountsOut)\n    {\n        try\n            this._mintCallRevert(\n                opts.getSwapQuoteCallback.selector,\n                opts.sellToken,\n                opts.buyToken,\n                opts.bridgeData,\n                amountsIn\n            )\n        {\n            require(false, \"Swap Sample should have reverted\");\n        } catch (bytes memory reason) {\n            // Parse the reverted sample datas\n            (amountsOut, gasUsed) = abi.decode(reason, (uint256[], uint256[]));\n        }\n    }\n\n    function _getNativeWrappedToken()\n        internal\n        view\n        returns (IEtherTokenV06)\n    {\n        uint256 chainId;\n        assembly {\n            chainId := chainid()\n        }\n        address token;\n        if (chainId == 1) {\n            // Ethereum Mainnet\n            token = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n        } else if (chainId == 3) {\n            // Ropsten\n            token = 0xc778417E063141139Fce010982780140Aa0cD5Ab;\n        } else if (chainId == 4) {\n            // Rinkeby\n            token = 0xc778417E063141139Fce010982780140Aa0cD5Ab;\n        } else if (chainId == 42) {\n            // Kovan\n            token = 0xd0A1E359811322d97991E03f863a0C30C2cF029C;\n        } else if (chainId == 56) {\n            // BSC \n            token = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\n        } else if (chainId == 137) {\n            // Polygon\n            token = 0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270;\n        } else if (chainId == 1337) {\n            // 0x Ganache\n            token = 0x0B1ba0af832d7C05fD64161E0Db78E85978E8082;\n        }\n        if (token == address(0)) {\n            revert(\"No native wrapped token\");\n        }\n        return IEtherTokenV06(token);\n    }\n\n    function _revertSingleSwapSample(\n        uint256 amount,\n        uint256 gasUsed\n    )\n        internal\n    {\n        // Revert it so there is no state change\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, amount)\n            mstore(add(ptr, 32), gasUsed)\n            revert(ptr, 64)\n        }\n    }\n\n    function _revertSwapSample(\n        uint256[] memory amounts,\n        uint256[] memory gasUsed\n    )\n        internal\n    {\n        bytes memory data = abi.encode(amounts, gasUsed);\n        // Revert it so there is no state change\n        assembly {\n            revert(add(data, 32), mload(data))\n        }\n    }\n\n    /// @dev Parses the reverted swap sample data. If no amount\n    ///      is decoded, 0 is returned.\n    /// @param reason the string which contains the possible\n    ///               sample amount\n    /// @return the decoded sample amount or 0\n    /// @return the gas used in the sample\n    function _parseRevertedSingleSwapSample(\n        bytes memory reason\n    )\n        internal\n        pure\n        returns (uint256, uint256)\n    {\n        if (reason.length != 64) {\n            return (0,0);\n        }\n        return abi.decode(reason, (uint256, uint256));\n    }\n\n    function _sampleSwapApproximateBuys(\n        SwapRevertSamplerBuyQuoteOpts memory opts,\n        uint256[] memory makerTokenAmounts\n    )\n        internal\n        returns (uint256[] memory gasUsed, uint256[] memory takerTokenAmounts)\n    {\n        if (makerTokenAmounts.length == 0) {\n            return (gasUsed, takerTokenAmounts);\n        }\n\n        takerTokenAmounts = new uint256[](makerTokenAmounts.length);\n        gasUsed = new uint256[](makerTokenAmounts.length);\n\n        uint256[] memory sellAmounts = new uint256[](1);\n        sellAmounts[0] = makerTokenAmounts[0];\n\n        SwapRevertSamplerQuoteOpts memory sellOpts = SwapRevertSamplerQuoteOpts({\n            sellToken: opts.sellToken,\n            buyToken: opts.buyToken,\n            bridgeData: opts.sellTokenData,\n            getSwapQuoteCallback: opts.getSwapQuoteCallback\n        });\n\n        SwapRevertSamplerQuoteOpts memory buyOpts = SwapRevertSamplerQuoteOpts({\n            sellToken: opts.buyToken,\n            buyToken: opts.sellToken,\n            bridgeData: opts.buyTokenData,\n            getSwapQuoteCallback: opts.getSwapQuoteCallback\n        });\n        // Inverted, perform a sell of the token the user wants to buy\n        (, sellAmounts) = _sampleSwapQuotesRevert(buyOpts, sellAmounts);\n        if (sellAmounts.length == 0 || sellAmounts[0] == 0) {\n            return (gasUsed, takerTokenAmounts);\n        }\n\n        uint256[] memory buyAmounts;\n        // Sell of the token the user wishes to dispose, see how much we buy\n        (, buyAmounts) = _sampleSwapQuotesRevert(sellOpts, sellAmounts);\n\n        if (buyAmounts.length == 0 || buyAmounts[0] == 0) {\n            return (gasUsed, takerTokenAmounts);\n        }\n\n        for (uint256 i = 0; i < makerTokenAmounts.length; i++) {\n            uint256[] memory _gasUsed;\n            for (uint256 iter = 0; iter < APPROXIMATE_BUY_MAX_ITERATIONS; iter++) {\n                // adjustedSellAmount = previousSellAmount * (target/actual) * JUMP_MULTIPLIER\n                sellAmounts[0] = _safeGetPartialAmountCeil(\n                    makerTokenAmounts[i],\n                    buyAmounts[0],\n                    sellAmounts[0]\n                );\n                if (sellAmounts.length == 0 || sellAmounts[0] == 0) {\n                    break;\n                }\n                sellAmounts[0] = _safeGetPartialAmountCeil(\n                    (ONE_HUNDED_PERCENT_BPS + APPROXIMATE_BUY_TARGET_EPSILON_BPS),\n                    ONE_HUNDED_PERCENT_BPS,\n                    sellAmounts[0]\n                );\n                if (sellAmounts.length == 0 || sellAmounts[0] == 0) {\n                    break;\n                }\n                uint256[] memory _buyAmounts;\n                (_gasUsed, _buyAmounts) = _sampleSwapQuotesRevert(sellOpts, sellAmounts);\n                if (_buyAmounts.length == 0 || _buyAmounts[0] == 0) {\n                    break;\n                }\n                // We re-use buyAmount next iteration, only assign if it is\n                // non zero\n                buyAmounts = _buyAmounts;\n                // If we've reached our goal, exit early\n                if (buyAmounts[0] >= makerTokenAmounts[i]) {\n                    uint256 eps =\n                        (buyAmounts[0] - makerTokenAmounts[i]) * ONE_HUNDED_PERCENT_BPS /\n                        makerTokenAmounts[i];\n                    if (eps <= APPROXIMATE_BUY_TARGET_EPSILON_BPS) {\n                        break;\n                    }\n                }\n            }\n            if (_gasUsed.length > 0 && buyAmounts.length > 0) {\n                gasUsed[i] = _gasUsed[0];\n                // We do our best to close in on the requested amount, but we can either over buy or under buy and exit\n                // if we hit a max iteration limit\n                // We scale the sell amount to get the approximate target\n                takerTokenAmounts[i] = _safeGetPartialAmountCeil(\n                    makerTokenAmounts[i],\n                    buyAmounts[0],\n                    sellAmounts[0]\n                );\n            }\n        }\n    }\n\n    function _safeGetPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        view\n        returns (uint256 partialAmount)\n    {\n        if (numerator == 0 || target == 0 || denominator == 0) return 0;\n        uint256 c = numerator * target;\n        if (c / numerator != target) return 0;\n        return (c + (denominator - 1)) / denominator;\n    }\n\n\n}",
        "./GasOverhead.sol": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.6;\n\ncontract GasOverhead {\n    uint256 public _overhead = 2;\n    // Overhead incurred from updating the overhead storage slot\n    uint256 constant SSTORE_OVERHEAD = 20000;\n\n    function addOverhead(uint256 gas, uint256 gasBefore)\n        external\n    {\n        uint256 callOverhead = gasBefore - gasleft();\n        // Add additional est overhead of performing this update\n        _overhead += gas + callOverhead + SSTORE_OVERHEAD;\n    }\n\n    function clearOverhead()\n        external\n    {\n        _overhead = 2;\n    }\n\n    function overhead()\n        external\n        view\n        returns (uint256)\n    {\n        return _overhead;\n    }\n}\n",
        "@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./IERC20TokenV06.sol\";\n\n\ninterface IEtherTokenV06 is\n    IERC20TokenV06\n{\n    /// @dev Wrap ether.\n    function deposit() external payable;\n\n    /// @dev Unwrap ether.\n    function withdraw(uint256 amount) external;\n}\n",
        "@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\ninterface IERC20TokenV06 {\n\n    // solhint-disable no-simple-event-func-name\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 value\n    );\n\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n\n    /// @dev send `value` token to `to` from `msg.sender`\n    /// @param to The address of the recipient\n    /// @param value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transfer(address to, uint256 value)\n        external\n        returns (bool);\n\n    /// @dev send `value` token to `to` from `from` on the condition it is approved by `from`\n    /// @param from The address of the sender\n    /// @param to The address of the recipient\n    /// @param value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    )\n        external\n        returns (bool);\n\n    /// @dev `msg.sender` approves `spender` to spend `value` tokens\n    /// @param spender The address of the account able to transfer the tokens\n    /// @param value The amount of wei to be approved for transfer\n    /// @return Always true if the call has enough gas to complete execution\n    function approve(address spender, uint256 value)\n        external\n        returns (bool);\n\n    /// @dev Query total supply of token\n    /// @return Total supply of token\n    function totalSupply()\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the balance of `owner`.\n    /// @param owner The address from which the balance will be retrieved\n    /// @return Balance of owner\n    function balanceOf(address owner)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the allowance for `spender` to spend from `owner`.\n    /// @param owner The address of the account owning tokens\n    /// @param spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the number of decimals this token has.\n    function decimals()\n        external\n        view\n        returns (uint8);\n}\n",
        "@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibRichErrorsV06 {\n\n    // bytes4(keccak256(\"Error(string)\"))\n    bytes4 internal constant STANDARD_ERROR_SELECTOR = 0x08c379a0;\n\n    // solhint-disable func-name-mixedcase\n    /// @dev ABI encode a standard, string revert error payload.\n    ///      This is the same payload that would be included by a `revert(string)`\n    ///      solidity statement. It has the function signature `Error(string)`.\n    /// @param message The error string.\n    /// @return The ABI encoded error.\n    function StandardError(string memory message)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            STANDARD_ERROR_SELECTOR,\n            bytes(message)\n        );\n    }\n    // solhint-enable func-name-mixedcase\n\n    /// @dev Reverts an encoded rich revert reason `errorData`.\n    /// @param errorData ABI encoded error data.\n    function rrevert(bytes memory errorData)\n        internal\n        pure\n    {\n        assembly {\n            revert(add(errorData, 0x20), mload(errorData))\n        }\n    }\n}\n"
    },
    "compiler": {
        "name": "solc",
        "version": "0.6.12+commit.27d51765",
        "settings": {
            "remappings": [
                "@0x/contracts-zero-ex=/Users/jacob/projects/ethdev/0x/workspace-remote/workspace/0x-monorepo/packages/asset-swapper/node_modules/@0x/contracts-zero-ex",
                "@0x/contracts-erc20=/Users/jacob/projects/ethdev/0x/workspace-remote/workspace/0x-monorepo/packages/asset-swapper/node_modules/@0x/contracts-erc20",
                "@0x/contracts-utils=/Users/jacob/projects/ethdev/0x/workspace-remote/workspace/0x-monorepo/packages/asset-swapper/node_modules/@0x/contracts-utils"
            ],
            "optimizer": {
                "enabled": true,
                "runs": 200,
                "details": {
                    "yul": true,
                    "deduplicate": true
                }
            },
            "outputSelection": {
                "*": {
                    "*": [
                        "abi",
                        "devdoc",
                        "evm.bytecode.object",
                        "evm.bytecode.sourceMap",
                        "evm.deployedBytecode.object",
                        "evm.deployedBytecode.sourceMap"
                    ]
                }
            },
            "evmVersion": "istanbul"
        }
    },
    "chains": {}
}
