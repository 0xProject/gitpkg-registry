{
    "schemaVersion": "2.0.0",
    "contractName": "IntermediateSampler",
    "compilerOutput": {
        "abi": [
            {
                "inputs": [
                    {
                        "internalType": "bytes[]",
                        "name": "firstHopCalls",
                        "type": "bytes[]"
                    },
                    {
                        "internalType": "bytes[]",
                        "name": "secondHopCalls",
                        "type": "bytes[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleIntermediateSell",
                "outputs": [
                    {
                        "components": [
                            {
                                "internalType": "bytes",
                                "name": "returnData",
                                "type": "bytes"
                            },
                            {
                                "internalType": "uint256[]",
                                "name": "makerTokenAmounts",
                                "type": "uint256[]"
                            }
                        ],
                        "internalType": "struct IntermediateSampler.IntermediaryInfo[]",
                        "name": "intermediaryInfo",
                        "type": "tuple[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "intermediaryAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            }
        ],
        "devdoc": {
            "kind": "dev",
            "methods": {
                "sampleIntermediateSell(bytes[],bytes[],uint256[])": {
                    "details": "Sample sells of an intermediate token, i.e X->Y->X. Discovers the highest output      from the first hop calls (X->Y). Then uses the highest output (Y) as an indicator      of price for the second hop calls (Y->Z).",
                    "params": {
                        "firstHopCalls": "Encoded calls for price discovery of X->Y",
                        "secondHopCalls": "Encoded calls for sampling of Y->Z",
                        "takerTokenAmounts": "Taker amounts for the first hop X->Y"
                    },
                    "returns": {
                        "intermediaryAmounts": "Amounts of Y from takerTokenAmounts exchanged at the best rate",
                        "intermediaryInfo": "Z values for each Y and the final returnData for additional info"
                    }
                }
            },
            "version": 1
        },
        "evm": {
            "bytecode": {
                "linkReferences": {},
                "object": "0x608060405234801561001057600080fd5b50610a0e806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80633ea8938814610030575b600080fd5b61004361003e3660046106eb565b61005a565b60405161005192919061081c565b60405180910390f35b6060806000808460008151811061006d57fe5b6020026020010151905060005b8751811461017b576100c1602089838151811061009357fe5b60200260200101515103838a84815181106100aa57fe5b60200260200101516104729092919063ffffffff16565b600060603073ffffffffffffffffffffffffffffffffffffffff168a84815181106100e857fe5b60200260200101516040516100fd9190610800565b600060405180830381855afa9150503d8060008114610138576040519150601f19603f3d011682016040523d82523d6000602084013e61013d565b606091505b5091509150811561017157600061016160208351038361048290919063ffffffff16565b90508581111561016f578095505b505b505060010161007a565b50816101bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101b39061092a565b60405180910390fd5b855167ffffffffffffffff811180156101d457600080fd5b5060405190808252806020026020018201604052801561020e57816020015b6101fb6105f0565b8152602001906001900390816101f35790505b509350845167ffffffffffffffff8111801561022957600080fd5b50604051908082528060200260200182016040528015610253578160200160208202803683370190505b50925060005b8651811461046757855167ffffffffffffffff8111801561027957600080fd5b506040519080825280602002602001820160405280156102a3578160200160208202803683370190505b508582815181106102b057fe5b60200260200101516020018190525060005b8651811461045e5760006102ea85858a85815181106102dd57fe5b6020026020010151610495565b90506001885103821415610308576103058160646069610495565b90505b8086838151811061031557fe5b60200260200101818152505061034960208a858151811061033257fe5b60200260200101515103828b86815181106100aa57fe5b600060603073ffffffffffffffffffffffffffffffffffffffff168b868151811061037057fe5b60200260200101516040516103859190610800565b600060405180830381855afa9150503d80600081146103c0576040519150601f19603f3d011682016040523d82523d6000602084013e6103c5565b606091505b509150915081156104485760006103e960208351038361048290919063ffffffff16565b9050808a87815181106103f857fe5b602002602001015160200151868151811061040f57fe5b602002602001018181525050818a878151811061042857fe5b60209081029190910101515280610442575050505061045e565b50610450565b50505061045e565b5050508060010190506102c2565b50600101610259565b505050935093915050565b61047d8383836104ed565b505050565b600061048e8383610519565b9392505050565b60008315806104a2575081155b806104ab575082155b156104b85750600061048e565b838202828582816104c557fe5b04146104d557600091505061048e565b83600185038201816104e357fe5b0495945050505050565b81602001835110156105115761051161050c6005855185602001610543565b6105e8565b910160200152565b6000816020018351101561053a5761053a61050c6005855185602001610543565b50016020015190565b6060632800659560e01b84848460405160240161056293929190610908565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915290509392505050565b805160208201fd5b604051806040016040528060608152602001606081525090565b6000601f838184011261061b578182fd5b823561062e61062982610988565b610961565b818152925060208084019085810160005b848110156106df578135880189603f82011261065a57600080fd5b8381013567ffffffffffffffff81111561067357600080fd5b6106a2857fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08a84011601610961565b81815260408c818486010111156106b857600080fd5b8281850188840137506000918101860191909152855250928201929082019060010161063f565b50505050505092915050565b6000806000606084860312156106ff578283fd5b833567ffffffffffffffff80821115610716578485fd5b6107228783880161060a565b9450602091508186013581811115610738578485fd5b6107448882890161060a565b945050604086013581811115610758578384fd5b86019050601f8101871361076a578283fd5b803561077861062982610988565b81815283810190838501858402850186018b1015610794578687fd5b8694505b838510156107b6578035835260019490940193918501918501610798565b5080955050505050509250925092565b6000815180845260208085019450808401835b838110156107f5578151875295820195908201906001016107d9565b509495945050505050565b600082516108128184602087016109a8565b9190910192915050565b604080825283518282018190526000919060609081850190602080820287018401818a01875b848110156108e7577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa08a8403018652815180518985528051808b87015261088e818b88018985016109a8565b91860151601f929092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01685018581038a018787015290506108d3898201836107c6565b978601979450505090830190600101610842565b5050878103828901526108fa818a6107c6565b9a9950505050505050505050565b606081016008851061091657fe5b938152602081019290925260409091015290565b6020808252600a908201527f4e4f20524f555445203000000000000000000000000000000000000000000000604082015260600190565b60405181810167ffffffffffffffff8111828210171561098057600080fd5b604052919050565b600067ffffffffffffffff82111561099e578081fd5b5060209081020190565b60005b838110156109c35781810151838201526020016109ab565b838111156109d2576000848401525b5050505056fea2646970667358221220876cd5a72c776ee181c3e29899d71daa48b0dd4dfe4731f1af01d2abdbfa6a5964736f6c634300060c0033",
                "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xA0E DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x2B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x3EA89388 EQ PUSH2 0x30 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x43 PUSH2 0x3E CALLDATASIZE PUSH1 0x4 PUSH2 0x6EB JUMP JUMPDEST PUSH2 0x5A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x51 SWAP3 SWAP2 SWAP1 PUSH2 0x81C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x60 DUP1 PUSH1 0x0 DUP1 DUP5 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x6D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 JUMPDEST DUP8 MLOAD DUP2 EQ PUSH2 0x17B JUMPI PUSH2 0xC1 PUSH1 0x20 DUP10 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x93 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD SUB DUP4 DUP11 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xAA JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x472 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP11 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xE8 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0xFD SWAP2 SWAP1 PUSH2 0x800 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x138 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x13D JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0x171 JUMPI PUSH1 0x0 PUSH2 0x161 PUSH1 0x20 DUP4 MLOAD SUB DUP4 PUSH2 0x482 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP6 DUP2 GT ISZERO PUSH2 0x16F JUMPI DUP1 SWAP6 POP JUMPDEST POP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x7A JUMP JUMPDEST POP DUP2 PUSH2 0x1BC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1B3 SWAP1 PUSH2 0x92A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP6 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x1D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x20E JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x1FB PUSH2 0x5F0 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x1F3 JUMPI SWAP1 POP JUMPDEST POP SWAP4 POP DUP5 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x229 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x253 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP3 POP PUSH1 0x0 JUMPDEST DUP7 MLOAD DUP2 EQ PUSH2 0x467 JUMPI DUP6 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x279 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2A3 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2B0 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD DUP2 SWAP1 MSTORE POP PUSH1 0x0 JUMPDEST DUP7 MLOAD DUP2 EQ PUSH2 0x45E JUMPI PUSH1 0x0 PUSH2 0x2EA DUP6 DUP6 DUP11 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x2DD JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x495 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 DUP9 MLOAD SUB DUP3 EQ ISZERO PUSH2 0x308 JUMPI PUSH2 0x305 DUP2 PUSH1 0x64 PUSH1 0x69 PUSH2 0x495 JUMP JUMPDEST SWAP1 POP JUMPDEST DUP1 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x315 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP PUSH2 0x349 PUSH1 0x20 DUP11 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x332 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD SUB DUP3 DUP12 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0xAA JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP12 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x370 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x385 SWAP2 SWAP1 PUSH2 0x800 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x3C0 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x3C5 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0x448 JUMPI PUSH1 0x0 PUSH2 0x3E9 PUSH1 0x20 DUP4 MLOAD SUB DUP4 PUSH2 0x482 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 DUP11 DUP8 DUP2 MLOAD DUP2 LT PUSH2 0x3F8 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x40F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP2 DUP11 DUP8 DUP2 MLOAD DUP2 LT PUSH2 0x428 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD MSTORE DUP1 PUSH2 0x442 JUMPI POP POP POP POP PUSH2 0x45E JUMP JUMPDEST POP PUSH2 0x450 JUMP JUMPDEST POP POP POP PUSH2 0x45E JUMP JUMPDEST POP POP POP DUP1 PUSH1 0x1 ADD SWAP1 POP PUSH2 0x2C2 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x259 JUMP JUMPDEST POP POP POP SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x47D DUP4 DUP4 DUP4 PUSH2 0x4ED JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x48E DUP4 DUP4 PUSH2 0x519 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 ISZERO DUP1 PUSH2 0x4A2 JUMPI POP DUP2 ISZERO JUMPDEST DUP1 PUSH2 0x4AB JUMPI POP DUP3 ISZERO JUMPDEST ISZERO PUSH2 0x4B8 JUMPI POP PUSH1 0x0 PUSH2 0x48E JUMP JUMPDEST DUP4 DUP3 MUL DUP3 DUP6 DUP3 DUP2 PUSH2 0x4C5 JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x4D5 JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x48E JUMP JUMPDEST DUP4 PUSH1 0x1 DUP6 SUB DUP3 ADD DUP2 PUSH2 0x4E3 JUMPI INVALID JUMPDEST DIV SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO PUSH2 0x511 JUMPI PUSH2 0x511 PUSH2 0x50C PUSH1 0x5 DUP6 MLOAD DUP6 PUSH1 0x20 ADD PUSH2 0x543 JUMP JUMPDEST PUSH2 0x5E8 JUMP JUMPDEST SWAP2 ADD PUSH1 0x20 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO PUSH2 0x53A JUMPI PUSH2 0x53A PUSH2 0x50C PUSH1 0x5 DUP6 MLOAD DUP6 PUSH1 0x20 ADD PUSH2 0x543 JUMP JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH4 0x28006595 PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x562 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x908 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP4 DUP2 DUP5 ADD SLT PUSH2 0x61B JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x62E PUSH2 0x629 DUP3 PUSH2 0x988 JUMP JUMPDEST PUSH2 0x961 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP3 POP PUSH1 0x20 DUP1 DUP5 ADD SWAP1 DUP6 DUP2 ADD PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x6DF JUMPI DUP2 CALLDATALOAD DUP9 ADD DUP10 PUSH1 0x3F DUP3 ADD SLT PUSH2 0x65A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 DUP2 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x673 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x6A2 DUP6 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP11 DUP5 ADD AND ADD PUSH2 0x961 JUMP JUMPDEST DUP2 DUP2 MSTORE PUSH1 0x40 DUP13 DUP2 DUP5 DUP7 ADD ADD GT ISZERO PUSH2 0x6B8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP2 DUP6 ADD DUP9 DUP5 ADD CALLDATACOPY POP PUSH1 0x0 SWAP2 DUP2 ADD DUP7 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP6 MSTORE POP SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x63F JUMP JUMPDEST POP POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x6FF JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x716 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x722 DUP8 DUP4 DUP9 ADD PUSH2 0x60A JUMP JUMPDEST SWAP5 POP PUSH1 0x20 SWAP2 POP DUP2 DUP7 ADD CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x738 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x744 DUP9 DUP3 DUP10 ADD PUSH2 0x60A JUMP JUMPDEST SWAP5 POP POP PUSH1 0x40 DUP7 ADD CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x758 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP7 ADD SWAP1 POP PUSH1 0x1F DUP2 ADD DUP8 SGT PUSH2 0x76A JUMPI DUP3 DUP4 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH2 0x778 PUSH2 0x629 DUP3 PUSH2 0x988 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP4 DUP2 ADD SWAP1 DUP4 DUP6 ADD DUP6 DUP5 MUL DUP6 ADD DUP7 ADD DUP12 LT ISZERO PUSH2 0x794 JUMPI DUP7 DUP8 REVERT JUMPDEST DUP7 SWAP5 POP JUMPDEST DUP4 DUP6 LT ISZERO PUSH2 0x7B6 JUMPI DUP1 CALLDATALOAD DUP4 MSTORE PUSH1 0x1 SWAP5 SWAP1 SWAP5 ADD SWAP4 SWAP2 DUP6 ADD SWAP2 DUP6 ADD PUSH2 0x798 JUMP JUMPDEST POP DUP1 SWAP6 POP POP POP POP POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD DUP4 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x7F5 JUMPI DUP2 MLOAD DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x7D9 JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x812 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x9A8 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 DUP3 MSTORE DUP4 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 PUSH1 0x60 SWAP1 DUP2 DUP6 ADD SWAP1 PUSH1 0x20 DUP1 DUP3 MUL DUP8 ADD DUP5 ADD DUP2 DUP11 ADD DUP8 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x8E7 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA0 DUP11 DUP5 SUB ADD DUP7 MSTORE DUP2 MLOAD DUP1 MLOAD DUP10 DUP6 MSTORE DUP1 MLOAD DUP1 DUP12 DUP8 ADD MSTORE PUSH2 0x88E DUP2 DUP12 DUP9 ADD DUP10 DUP6 ADD PUSH2 0x9A8 JUMP JUMPDEST SWAP2 DUP7 ADD MLOAD PUSH1 0x1F SWAP3 SWAP1 SWAP3 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP6 ADD DUP6 DUP2 SUB DUP11 ADD DUP8 DUP8 ADD MSTORE SWAP1 POP PUSH2 0x8D3 DUP10 DUP3 ADD DUP4 PUSH2 0x7C6 JUMP JUMPDEST SWAP8 DUP7 ADD SWAP8 SWAP5 POP POP POP SWAP1 DUP4 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x842 JUMP JUMPDEST POP POP DUP8 DUP2 SUB DUP3 DUP10 ADD MSTORE PUSH2 0x8FA DUP2 DUP11 PUSH2 0x7C6 JUMP JUMPDEST SWAP11 SWAP10 POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH1 0x8 DUP6 LT PUSH2 0x916 JUMPI INVALID JUMPDEST SWAP4 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xA SWAP1 DUP3 ADD MSTORE PUSH32 0x4E4F20524F555445203000000000000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x980 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x99E JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x9C3 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x9AB JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x9D2 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP8 PUSH13 0xD5A72C776EE181C3E29899D71D 0xAA 0x48 0xB0 0xDD 0x4D INVALID SELFBALANCE BALANCE CALL 0xAF ADD 0xD2 0xAB 0xDB STATICCALL PUSH11 0x5964736F6C634300060C00 CALLER ",
                "sourceMap": "742:5148:18:-:0;;;;;;;;;;;;;;;;;;;"
            },
            "deployedBytecode": {
                "immutableReferences": {},
                "linkReferences": {},
                "object": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c80633ea8938814610030575b600080fd5b61004361003e3660046106eb565b61005a565b60405161005192919061081c565b60405180910390f35b6060806000808460008151811061006d57fe5b6020026020010151905060005b8751811461017b576100c1602089838151811061009357fe5b60200260200101515103838a84815181106100aa57fe5b60200260200101516104729092919063ffffffff16565b600060603073ffffffffffffffffffffffffffffffffffffffff168a84815181106100e857fe5b60200260200101516040516100fd9190610800565b600060405180830381855afa9150503d8060008114610138576040519150601f19603f3d011682016040523d82523d6000602084013e61013d565b606091505b5091509150811561017157600061016160208351038361048290919063ffffffff16565b90508581111561016f578095505b505b505060010161007a565b50816101bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101b39061092a565b60405180910390fd5b855167ffffffffffffffff811180156101d457600080fd5b5060405190808252806020026020018201604052801561020e57816020015b6101fb6105f0565b8152602001906001900390816101f35790505b509350845167ffffffffffffffff8111801561022957600080fd5b50604051908082528060200260200182016040528015610253578160200160208202803683370190505b50925060005b8651811461046757855167ffffffffffffffff8111801561027957600080fd5b506040519080825280602002602001820160405280156102a3578160200160208202803683370190505b508582815181106102b057fe5b60200260200101516020018190525060005b8651811461045e5760006102ea85858a85815181106102dd57fe5b6020026020010151610495565b90506001885103821415610308576103058160646069610495565b90505b8086838151811061031557fe5b60200260200101818152505061034960208a858151811061033257fe5b60200260200101515103828b86815181106100aa57fe5b600060603073ffffffffffffffffffffffffffffffffffffffff168b868151811061037057fe5b60200260200101516040516103859190610800565b600060405180830381855afa9150503d80600081146103c0576040519150601f19603f3d011682016040523d82523d6000602084013e6103c5565b606091505b509150915081156104485760006103e960208351038361048290919063ffffffff16565b9050808a87815181106103f857fe5b602002602001015160200151868151811061040f57fe5b602002602001018181525050818a878151811061042857fe5b60209081029190910101515280610442575050505061045e565b50610450565b50505061045e565b5050508060010190506102c2565b50600101610259565b505050935093915050565b61047d8383836104ed565b505050565b600061048e8383610519565b9392505050565b60008315806104a2575081155b806104ab575082155b156104b85750600061048e565b838202828582816104c557fe5b04146104d557600091505061048e565b83600185038201816104e357fe5b0495945050505050565b81602001835110156105115761051161050c6005855185602001610543565b6105e8565b910160200152565b6000816020018351101561053a5761053a61050c6005855185602001610543565b50016020015190565b6060632800659560e01b84848460405160240161056293929190610908565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915290509392505050565b805160208201fd5b604051806040016040528060608152602001606081525090565b6000601f838184011261061b578182fd5b823561062e61062982610988565b610961565b818152925060208084019085810160005b848110156106df578135880189603f82011261065a57600080fd5b8381013567ffffffffffffffff81111561067357600080fd5b6106a2857fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08a84011601610961565b81815260408c818486010111156106b857600080fd5b8281850188840137506000918101860191909152855250928201929082019060010161063f565b50505050505092915050565b6000806000606084860312156106ff578283fd5b833567ffffffffffffffff80821115610716578485fd5b6107228783880161060a565b9450602091508186013581811115610738578485fd5b6107448882890161060a565b945050604086013581811115610758578384fd5b86019050601f8101871361076a578283fd5b803561077861062982610988565b81815283810190838501858402850186018b1015610794578687fd5b8694505b838510156107b6578035835260019490940193918501918501610798565b5080955050505050509250925092565b6000815180845260208085019450808401835b838110156107f5578151875295820195908201906001016107d9565b509495945050505050565b600082516108128184602087016109a8565b9190910192915050565b604080825283518282018190526000919060609081850190602080820287018401818a01875b848110156108e7577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa08a8403018652815180518985528051808b87015261088e818b88018985016109a8565b91860151601f929092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01685018581038a018787015290506108d3898201836107c6565b978601979450505090830190600101610842565b5050878103828901526108fa818a6107c6565b9a9950505050505050505050565b606081016008851061091657fe5b938152602081019290925260409091015290565b6020808252600a908201527f4e4f20524f555445203000000000000000000000000000000000000000000000604082015260600190565b60405181810167ffffffffffffffff8111828210171561098057600080fd5b604052919050565b600067ffffffffffffffff82111561099e578081fd5b5060209081020190565b60005b838110156109c35781810151838201526020016109ab565b838111156109d2576000848401525b5050505056fea2646970667358221220876cd5a72c776ee181c3e29899d71daa48b0dd4dfe4731f1af01d2abdbfa6a5964736f6c634300060c0033",
                "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x2B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x3EA89388 EQ PUSH2 0x30 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x43 PUSH2 0x3E CALLDATASIZE PUSH1 0x4 PUSH2 0x6EB JUMP JUMPDEST PUSH2 0x5A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x51 SWAP3 SWAP2 SWAP1 PUSH2 0x81C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x60 DUP1 PUSH1 0x0 DUP1 DUP5 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x6D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 JUMPDEST DUP8 MLOAD DUP2 EQ PUSH2 0x17B JUMPI PUSH2 0xC1 PUSH1 0x20 DUP10 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x93 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD SUB DUP4 DUP11 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xAA JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x472 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP11 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xE8 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0xFD SWAP2 SWAP1 PUSH2 0x800 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x138 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x13D JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0x171 JUMPI PUSH1 0x0 PUSH2 0x161 PUSH1 0x20 DUP4 MLOAD SUB DUP4 PUSH2 0x482 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP6 DUP2 GT ISZERO PUSH2 0x16F JUMPI DUP1 SWAP6 POP JUMPDEST POP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x7A JUMP JUMPDEST POP DUP2 PUSH2 0x1BC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1B3 SWAP1 PUSH2 0x92A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP6 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x1D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x20E JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x1FB PUSH2 0x5F0 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x1F3 JUMPI SWAP1 POP JUMPDEST POP SWAP4 POP DUP5 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x229 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x253 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP3 POP PUSH1 0x0 JUMPDEST DUP7 MLOAD DUP2 EQ PUSH2 0x467 JUMPI DUP6 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x279 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2A3 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2B0 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD DUP2 SWAP1 MSTORE POP PUSH1 0x0 JUMPDEST DUP7 MLOAD DUP2 EQ PUSH2 0x45E JUMPI PUSH1 0x0 PUSH2 0x2EA DUP6 DUP6 DUP11 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x2DD JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x495 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 DUP9 MLOAD SUB DUP3 EQ ISZERO PUSH2 0x308 JUMPI PUSH2 0x305 DUP2 PUSH1 0x64 PUSH1 0x69 PUSH2 0x495 JUMP JUMPDEST SWAP1 POP JUMPDEST DUP1 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x315 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP PUSH2 0x349 PUSH1 0x20 DUP11 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x332 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD SUB DUP3 DUP12 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0xAA JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP12 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x370 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x385 SWAP2 SWAP1 PUSH2 0x800 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x3C0 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x3C5 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0x448 JUMPI PUSH1 0x0 PUSH2 0x3E9 PUSH1 0x20 DUP4 MLOAD SUB DUP4 PUSH2 0x482 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 DUP11 DUP8 DUP2 MLOAD DUP2 LT PUSH2 0x3F8 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x40F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP2 DUP11 DUP8 DUP2 MLOAD DUP2 LT PUSH2 0x428 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD MSTORE DUP1 PUSH2 0x442 JUMPI POP POP POP POP PUSH2 0x45E JUMP JUMPDEST POP PUSH2 0x450 JUMP JUMPDEST POP POP POP PUSH2 0x45E JUMP JUMPDEST POP POP POP DUP1 PUSH1 0x1 ADD SWAP1 POP PUSH2 0x2C2 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x259 JUMP JUMPDEST POP POP POP SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x47D DUP4 DUP4 DUP4 PUSH2 0x4ED JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x48E DUP4 DUP4 PUSH2 0x519 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 ISZERO DUP1 PUSH2 0x4A2 JUMPI POP DUP2 ISZERO JUMPDEST DUP1 PUSH2 0x4AB JUMPI POP DUP3 ISZERO JUMPDEST ISZERO PUSH2 0x4B8 JUMPI POP PUSH1 0x0 PUSH2 0x48E JUMP JUMPDEST DUP4 DUP3 MUL DUP3 DUP6 DUP3 DUP2 PUSH2 0x4C5 JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x4D5 JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x48E JUMP JUMPDEST DUP4 PUSH1 0x1 DUP6 SUB DUP3 ADD DUP2 PUSH2 0x4E3 JUMPI INVALID JUMPDEST DIV SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO PUSH2 0x511 JUMPI PUSH2 0x511 PUSH2 0x50C PUSH1 0x5 DUP6 MLOAD DUP6 PUSH1 0x20 ADD PUSH2 0x543 JUMP JUMPDEST PUSH2 0x5E8 JUMP JUMPDEST SWAP2 ADD PUSH1 0x20 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO PUSH2 0x53A JUMPI PUSH2 0x53A PUSH2 0x50C PUSH1 0x5 DUP6 MLOAD DUP6 PUSH1 0x20 ADD PUSH2 0x543 JUMP JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH4 0x28006595 PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x562 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x908 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP4 DUP2 DUP5 ADD SLT PUSH2 0x61B JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x62E PUSH2 0x629 DUP3 PUSH2 0x988 JUMP JUMPDEST PUSH2 0x961 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP3 POP PUSH1 0x20 DUP1 DUP5 ADD SWAP1 DUP6 DUP2 ADD PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x6DF JUMPI DUP2 CALLDATALOAD DUP9 ADD DUP10 PUSH1 0x3F DUP3 ADD SLT PUSH2 0x65A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 DUP2 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x673 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x6A2 DUP6 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP11 DUP5 ADD AND ADD PUSH2 0x961 JUMP JUMPDEST DUP2 DUP2 MSTORE PUSH1 0x40 DUP13 DUP2 DUP5 DUP7 ADD ADD GT ISZERO PUSH2 0x6B8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP2 DUP6 ADD DUP9 DUP5 ADD CALLDATACOPY POP PUSH1 0x0 SWAP2 DUP2 ADD DUP7 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP6 MSTORE POP SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x63F JUMP JUMPDEST POP POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x6FF JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x716 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x722 DUP8 DUP4 DUP9 ADD PUSH2 0x60A JUMP JUMPDEST SWAP5 POP PUSH1 0x20 SWAP2 POP DUP2 DUP7 ADD CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x738 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x744 DUP9 DUP3 DUP10 ADD PUSH2 0x60A JUMP JUMPDEST SWAP5 POP POP PUSH1 0x40 DUP7 ADD CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x758 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP7 ADD SWAP1 POP PUSH1 0x1F DUP2 ADD DUP8 SGT PUSH2 0x76A JUMPI DUP3 DUP4 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH2 0x778 PUSH2 0x629 DUP3 PUSH2 0x988 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP4 DUP2 ADD SWAP1 DUP4 DUP6 ADD DUP6 DUP5 MUL DUP6 ADD DUP7 ADD DUP12 LT ISZERO PUSH2 0x794 JUMPI DUP7 DUP8 REVERT JUMPDEST DUP7 SWAP5 POP JUMPDEST DUP4 DUP6 LT ISZERO PUSH2 0x7B6 JUMPI DUP1 CALLDATALOAD DUP4 MSTORE PUSH1 0x1 SWAP5 SWAP1 SWAP5 ADD SWAP4 SWAP2 DUP6 ADD SWAP2 DUP6 ADD PUSH2 0x798 JUMP JUMPDEST POP DUP1 SWAP6 POP POP POP POP POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD DUP4 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x7F5 JUMPI DUP2 MLOAD DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x7D9 JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x812 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x9A8 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 DUP3 MSTORE DUP4 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 PUSH1 0x60 SWAP1 DUP2 DUP6 ADD SWAP1 PUSH1 0x20 DUP1 DUP3 MUL DUP8 ADD DUP5 ADD DUP2 DUP11 ADD DUP8 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x8E7 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA0 DUP11 DUP5 SUB ADD DUP7 MSTORE DUP2 MLOAD DUP1 MLOAD DUP10 DUP6 MSTORE DUP1 MLOAD DUP1 DUP12 DUP8 ADD MSTORE PUSH2 0x88E DUP2 DUP12 DUP9 ADD DUP10 DUP6 ADD PUSH2 0x9A8 JUMP JUMPDEST SWAP2 DUP7 ADD MLOAD PUSH1 0x1F SWAP3 SWAP1 SWAP3 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP6 ADD DUP6 DUP2 SUB DUP11 ADD DUP8 DUP8 ADD MSTORE SWAP1 POP PUSH2 0x8D3 DUP10 DUP3 ADD DUP4 PUSH2 0x7C6 JUMP JUMPDEST SWAP8 DUP7 ADD SWAP8 SWAP5 POP POP POP SWAP1 DUP4 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x842 JUMP JUMPDEST POP POP DUP8 DUP2 SUB DUP3 DUP10 ADD MSTORE PUSH2 0x8FA DUP2 DUP11 PUSH2 0x7C6 JUMP JUMPDEST SWAP11 SWAP10 POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH1 0x8 DUP6 LT PUSH2 0x916 JUMPI INVALID JUMPDEST SWAP4 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xA SWAP1 DUP3 ADD MSTORE PUSH32 0x4E4F20524F555445203000000000000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x980 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x99E JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x9C3 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x9AB JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x9D2 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP8 PUSH13 0xD5A72C776EE181C3E29899D71D 0xAA 0x48 0xB0 0xDD 0x4D INVALID SELFBALANCE BALANCE CALL 0xAF ADD 0xD2 0xAB 0xDB STATICCALL PUSH11 0x5964736F6C634300060C00 CALLER ",
                "sourceMap": "742:5148:18:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1558:3907;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;1775:42;1831:36;1892:31;2055:29;2087:17;2105:1;2087:20;;;;;;;;;;;;;;2055:52;;2127:9;2122:513;2147:13;:20;2142:1;:25;2122:513;;2188:82;2244:2;2218:13;2232:1;2218:16;;;;;;;;;;;;;;:23;:28;2248:21;2188:13;2202:1;2188:16;;;;;;;;;;;;;;:29;;:82;;;;;:::i;:::-;2285:15;2302:23;2337:4;2329:24;;2354:13;2368:1;2354:16;;;;;;;;;;;;;;2329:42;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2284:87;;;;2389:10;2385:240;;;2419:14;2436:46;2479:2;2459:10;:17;:22;2436:10;:22;;:46;;;;:::i;:::-;2419:63;;2513:23;2504:6;:32;2500:111;;;2586:6;2560:32;;2500:111;2385:240;;-1:-1:-1;;2169:3:18;;2122:513;;;-1:-1:-1;2648:28:18;2644:147;;2692:28;;;;;;;;;;:::i;:::-;;;;;;;;2644:147;2918:14;:21;2895:45;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;2876:64;;3053:17;:24;3039:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3039:39:18;;3017:61;;3280:9;3275:2184;3300:14;:21;3295:1;:26;3275:2184;;3507:17;:24;3493:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3493:39:18;;3453:16;3470:1;3453:19;;;;;;;;;;;;;;:37;;:79;;;;3551:9;3546:1903;3571:17;:24;3566:1;:29;3546:1903;;3755:32;3790:174;3838:23;3883:21;3926:17;3944:1;3926:20;;;;;;;;;;;;;;3790:26;:174::i;:::-;3755:209;;4097:1;4072:17;:24;:26;4067:1;:31;4063:261;;;4149:156;4201:24;4251:3;4280;4149:26;:156::i;:::-;4122:183;;4063:261;4482:24;4457:19;4477:1;4457:22;;;;;;;;;;;;;:49;;;;;4529:87;4587:2;4560:14;4575:1;4560:17;;;;;;;;;;;;;;:24;:29;4591:24;4529:14;4544:1;4529:17;;;;;;;:87;4659:15;4676:23;4711:4;4703:24;;4728:14;4743:1;4728:17;;;;;;;;;;;;;;4703:43;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4658:88;;;;4768:10;4764:671;;;4802:14;4819:46;4862:2;4842:10;:17;:22;4819:10;:22;;:46;;;;:::i;:::-;4802:63;;5017:6;4974:16;4991:1;4974:19;;;;;;;;;;;;;;:37;;;5012:1;4974:40;;;;;;;;;;;;;:49;;;;;5262:10;5229:16;5246:1;5229:19;;;;;;;;;;;;;;;;;;:43;5298:11;5294:71;;5337:5;;;;;;5294:71;4764:671;;;;5411:5;;;;;4764:671;3546:1903;;;3597:3;;;;;3546:1903;;;-1:-1:-1;3323:3:18;;3275:2184;;;;1558:3907;;;;;;;;:::o;16578:187:2:-;16720:38;16733:1;16736:5;16751;16720:12;:38::i;:::-;16578:187;;;:::o;16122:220::-;16243:14;16290:21;16302:1;16305:5;16290:11;:21::i;:::-;16282:30;16122:220;-1:-1:-1;;;16122:220:2:o;5471:417:18:-;5640:21;5681:14;;;:29;;-1:-1:-1;5699:11:18;;5681:29;:49;;;-1:-1:-1;5714:16:18;;5681:49;5677:63;;;-1:-1:-1;5739:1:18;5732:8;;5677:63;5762:18;;;5774:6;5762:9;:18;:9;5794:13;;;;;:23;5790:37;;5826:1;5819:8;;;;;5790:37;5870:11;5864:1;5850:11;:15;5845:1;:21;5844:37;;;;;;;5471:417;-1:-1:-1;;;;;5471:417:18:o;15225:654:2:-;15382:5;15390:2;15382:10;15371:1;:8;:21;15367:306;;;15408:254;15433:228;15498:95;15611:1;:8;15637:5;15645:2;15637:10;15433:47;:228::i;:::-;15408:24;:254::i;:::-;15842:13;;15753:2;15842:13;15835:28;15821:52::o;14301:688::-;14422:14;14467:5;14475:2;14467:10;14456:1;:8;:21;14452:306;;;14493:254;14518:228;14583:95;14696:1;:8;14722:5;14730:2;14722:10;14518:47;:228::i;14493:254::-;-1:-1:-1;14936:13:2;14838:2;14936:13;14930:20;;14301:688::o;1334:378:5:-;1522:12;1274:10;1593:37;;1644:9;1667:6;1687:8;1557:148;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1334:378:5;;;;;:::o;1531:170:7:-;1674:9;1668:16;1661:4;1650:9;1646:20;1639:46;-1:-1:-1;;;;;;;;;;;;;;;;;;;:::o;21:705::-;;140:4;147:3;140:4;132:6;128:17;124:27;114:2;;-1:-1;;155:12;114:2;202:6;189:20;224:89;239:73;305:6;239:73;:::i;:::-;224:89;:::i;:::-;341:21;;;215:98;-1:-1;385:4;398:14;;;;373:17;;;493:1;478:242;503:6;500:1;497:13;478:242;;;586:3;573:17;377:6;561:30;1569:3;1550:17;561:30;1550:17;1546:27;1536:2;;493:1;;1577:12;1536:2;385:4;561:30;;1611:20;11418:18;11410:6;11407:30;11404:2;;;493:1;;11440:12;11404:2;1646:64;385:4;11513:9;140:4;11498:6;11494:17;11490:33;11571:15;1646:64;:::i;:::-;1730:6;1723:5;1716:21;1754:17;1834:3;1754:17;1825:6;561:30;1816:16;;1813:25;1810:2;;;493:1;;1841:12;1810:2;14265:6;1754:17;561:30;1754:17;385:4;1792:5;1788:16;14242:30;-1:-1;493:1;14303:16;;;;;14296:27;;;;598:59;;-1:-1;671:14;;;;699;;;;525:1;518:9;478:242;;;482:14;;;;;;107:619;;;;:::o;2053:935::-;;;;2284:2;2272:9;2263:7;2259:23;2255:32;2252:2;;;-1:-1;;2290:12;2252:2;2348:17;2335:31;2386:18;;2378:6;2375:30;2372:2;;;-1:-1;;2408:12;2372:2;2438:87;2517:7;2508:6;2497:9;2493:22;2438:87;:::i;:::-;2428:97;;2590:2;;;;2579:9;2575:18;2562:32;2386:18;2606:6;2603:30;2600:2;;;-1:-1;;2636:12;2600:2;2666:87;2745:7;2736:6;2725:9;2721:22;2666:87;:::i;:::-;2656:97;;;2818:2;2807:9;2803:18;2790:32;2386:18;2834:6;2831:30;2828:2;;;-1:-1;;2864:12;2828:2;2940:22;;;-1:-1;862:4;850:17;;846:27;-1:-1;836:2;;-1:-1;;877:12;836:2;924:6;911:20;946:80;961:64;1018:6;961:64;:::i;946:80::-;1054:21;;;1111:14;;;;1086:17;;;1200;;;1191:27;;;;1188:36;-1:-1;1185:2;;;-1:-1;;1227:12;1185:2;-1:-1;1253:10;;1247:206;1272:6;1269:1;1266:13;1247:206;;;1983:20;;1340:50;;1294:1;1287:9;;;;;1404:14;;;;1432;;1247:206;;;1251:14;2884:88;;;;;;;;2246:742;;;;;:::o;4737:670::-;;4920:5;12090:12;12832:6;12827:3;12820:19;12869:4;;12864:3;12860:14;4932:83;;12869:4;5086:5;11752:14;-1:-1;5125:260;5150:6;5147:1;5144:13;5125:260;;;5211:13;;8222:37;;3447:14;;;;12526;;;;5172:1;5165:9;5125:260;;;-1:-1;5391:10;;4851:556;-1:-1;;;;;4851:556::o;8391:271::-;;6634:5;12090:12;6745:52;6790:6;6785:3;6778:4;6771:5;6767:16;6745:52;:::i;:::-;6809:16;;;;;8525:137;-1:-1;;8525:137::o;8669:765::-;8992:2;9006:47;;;12090:12;;8977:18;;;12820:19;;;8669:765;;8992:2;12860:14;;;;;;12869:4;4065:17;;;4056:27;;;;11752:14;;;8669:765;4227:432;4252:6;4249:1;4246:13;4227:432;;;4304:20;8981:9;4308:4;4304:20;;4299:3;4292:33;4359:6;4353:13;7689:16;7683:23;8992:2;7726:14;7719:38;6276:5;12090:12;12832:6;8992:2;7606:3;7602:14;12820:19;6359:52;6404:6;12860:14;7606:3;12860:14;12869:4;6385:5;6381:16;6359:52;:::i;:::-;7930:16;;;7924:23;14702:2;14682:14;;;;14698:7;14678:28;6423:39;;7983:14;;;;;7967;;;7960:38;6423:39;-1:-1;8013:103;6423:39;;;7924:23;8013:103;:::i;:::-;4638:14;;;;4373:140;-1:-1;;;12526:14;;;;4274:1;4267:9;4227:432;;;4231:14;;9291:9;9285:4;9281:20;12869:4;9265:9;9261:18;9254:48;9316:108;9419:4;9410:6;9316:108;:::i;:::-;9308:116;8963:471;-1:-1;;;;;;;;;;8963:471::o;9441:510::-;9657:2;9642:18;;14823:1;14813:12;;14803:2;;14829:9;14803:2;6941:83;;;9854:2;9839:18;;8222:37;;;;9937:2;9922:18;;;8222:37;9628:323;:::o;9958:416::-;10158:2;10172:47;;;7261:2;10143:18;;;12820:19;7297:12;12860:14;;;7277:33;7329:12;;;10129:245::o;10381:256::-;10443:2;10437:9;10469:17;;;10544:18;10529:34;;10565:22;;;10526:62;10523:2;;;10601:1;;10591:12;10523:2;10443;10610:22;10421:216;;-1:-1;10421:216::o;10644:313::-;;10812:18;10804:6;10801:30;10798:2;;;-1:-1;;10834:12;10798:2;-1:-1;10879:4;10867:17;;;10932:15;;10735:222::o;14338:268::-;14403:1;14410:101;14424:6;14421:1;14418:13;14410:101;;;14491:11;;;14485:18;14472:11;;;14465:39;14446:2;14439:10;14410:101;;;14526:6;14523:1;14520:13;14517:2;;;14403:1;14582:6;14577:3;14573:16;14566:27;14517:2;;14387:219;;;:::o"
            }
        }
    },
    "sourceTreeHashHex": "0xf7075200c8970e9eb6b491cdecf004c262381757b20c8d3cc93e002d84dfbe1c",
    "sources": {
        "./IntermediateSampler.sol": {
            "id": 18,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol\";\n\n\ncontract IntermediateSampler {\n    using LibBytesV06 for bytes;\n\n    struct IntermediaryInfo {\n        bytes returnData;\n        uint256[] makerTokenAmounts;\n    }\n\n    /// @dev Sample sells of an intermediate token, i.e X->Y->X. Discovers the highest output\n    ///      from the first hop calls (X->Y). Then uses the highest output (Y) as an indicator\n    ///      of price for the second hop calls (Y->Z).\n    /// @param firstHopCalls Encoded calls for price discovery of X->Y\n    /// @param secondHopCalls Encoded calls for sampling of Y->Z\n    /// @param takerTokenAmounts Taker amounts for the first hop X->Y\n    /// @return intermediaryInfo Z values for each Y and the final returnData for additional info\n    /// @return intermediaryAmounts Amounts of Y from takerTokenAmounts exchanged at the best rate\n    function sampleIntermediateSell(\n        bytes[] memory firstHopCalls,\n        bytes[] memory secondHopCalls,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (\n            IntermediaryInfo[] memory intermediaryInfo,\n            uint256[] memory intermediaryAmounts\n        )\n    {\n        uint256 intermediateAssetAmount = 0;\n        // Perform price discovery by finding the best exchange rate for a small\n        // amount of taker token (X)\n        uint256 smallTakerTokenAmount = takerTokenAmounts[0]; // x\n        for (uint256 i = 0; i != firstHopCalls.length; ++i) {\n            firstHopCalls[i].writeUint256(firstHopCalls[i].length - 32, smallTakerTokenAmount);\n            (bool didSucceed, bytes memory returnData) = address(this).staticcall(firstHopCalls[i]);\n            if (didSucceed) {\n                uint256 amount = returnData.readUint256(returnData.length - 32);\n                if (amount > intermediateAssetAmount) {\n                    intermediateAssetAmount = amount;\n                }\n            }\n        }\n        if (intermediateAssetAmount == 0) {\n            require(false, \"NO ROUTE 0\");\n            return (intermediaryInfo, intermediaryAmounts);\n        }\n        // We now have a ceiling exchange rate of a small amount of X for Y\n        intermediaryInfo = new IntermediaryInfo[](secondHopCalls.length);\n        // We have a 1:1 taker token amount to intermediary amount\n        intermediaryAmounts = new uint256[](takerTokenAmounts.length);\n        // Loop through each second hop call and find the exchange rate of\n        // Y->Z for every X taker amount exchange to Y using the best exchange\n        // rate found previously\n        for (uint256 j = 0; j != secondHopCalls.length; ++j) {\n            // For every taker token amount (X) we find a maker token Z (via Y best intermediate token amount)\n            intermediaryInfo[j].makerTokenAmounts = new uint256[](takerTokenAmounts.length);\n            for (uint256 k = 0; k != takerTokenAmounts.length; ++k) {\n                // scale Y by the ratio of takerTokenAmount[0]:takerTokenAmount[k]\n                // getPartial(received, sold, next)\n                uint256 scaledIntermediateAmount = _safeGetPartialAmountCeil2(\n                    intermediateAssetAmount,\n                    smallTakerTokenAmount,\n                    takerTokenAmounts[k]\n                );\n                // if the last k, add a bit of a buffer to ensure we over sample\n                if (k == takerTokenAmounts.length-1) {\n                    scaledIntermediateAmount = _safeGetPartialAmountCeil2(\n                        scaledIntermediateAmount,\n                        100,\n                        105\n                    );\n                }\n                // Store the intermediate amount, we will just keep overwriting this with the same values each loop\n                intermediaryAmounts[k] = scaledIntermediateAmount; // Y\n                secondHopCalls[j].writeUint256(secondHopCalls[j].length - 32, scaledIntermediateAmount);\n                // Y->Z\n                (bool didSucceed, bytes memory returnData) = address(this).staticcall(secondHopCalls[j]);\n                if (didSucceed) {\n                    uint256 amount = returnData.readUint256(returnData.length - 32); // Z\n                    // Store how much we bought by selling intermediaryAmounts[j]\n                    intermediaryInfo[j].makerTokenAmounts[k] = amount;\n                    // Store the full return data, which should remain consistent for a particular source\n                    // this may contain additional info like the pool address\n                    intermediaryInfo[j].returnData = returnData;\n                    if (amount == 0) {\n                        break;\n                    }\n                } else {\n                    break;\n                }\n            }\n        }\n    }\n\n    function _safeGetPartialAmountCeil2(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        view\n        returns (uint256 partialAmount)\n    {\n        if (numerator == 0 || target == 0 || denominator == 0) return 0;\n        uint256 c = numerator * target;\n        if (c / numerator != target) return 0;\n        return (c + (denominator - 1)) / denominator;\n    }\n}"
        },
        "@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol": {
            "id": 2,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./errors/LibBytesRichErrorsV06.sol\";\nimport \"./errors/LibRichErrorsV06.sol\";\n\n\nlibrary LibBytesV06 {\n\n    using LibBytesV06 for bytes;\n\n    /// @dev Gets the memory address for a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of byte array. This\n    ///         points to the header of the byte array which contains\n    ///         the length.\n    function rawAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := input\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Gets the memory address for the contents of a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of the contents of the byte array.\n    function contentAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := add(input, 32)\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Copies `length` bytes from memory location `source` to `dest`.\n    /// @param dest memory address to copy bytes to.\n    /// @param source memory address to copy bytes from.\n    /// @param length number of bytes to copy.\n    function memCopy(\n        uint256 dest,\n        uint256 source,\n        uint256 length\n    )\n        internal\n        pure\n    {\n        if (length < 32) {\n            // Handle a partial word by reading destination and masking\n            // off the bits we are interested in.\n            // This correctly handles overlap, zero lengths and source == dest\n            assembly {\n                let mask := sub(exp(256, sub(32, length)), 1)\n                let s := and(mload(source), not(mask))\n                let d := and(mload(dest), mask)\n                mstore(dest, or(s, d))\n            }\n        } else {\n            // Skip the O(length) loop when source == dest.\n            if (source == dest) {\n                return;\n            }\n\n            // For large copies we copy whole words at a time. The final\n            // word is aligned to the end of the range (instead of after the\n            // previous) to handle partial words. So a copy will look like this:\n            //\n            //  ####\n            //      ####\n            //          ####\n            //            ####\n            //\n            // We handle overlap in the source and destination range by\n            // changing the copying direction. This prevents us from\n            // overwriting parts of source that we still need to copy.\n            //\n            // This correctly handles source == dest\n            //\n            if (source > dest) {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because it\n                    // is easier to compare with in the loop, and these\n                    // are also the addresses we need for copying the\n                    // last bytes.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the last 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the last bytes in\n                    // source already due to overlap.\n                    let last := mload(sEnd)\n\n                    // Copy whole words front to back\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} lt(source, sEnd) {} {\n                        mstore(dest, mload(source))\n                        source := add(source, 32)\n                        dest := add(dest, 32)\n                    }\n\n                    // Write the last 32 bytes\n                    mstore(dEnd, last)\n                }\n            } else {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because those\n                    // are the starting points when copying a word at the end.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the first 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the first bytes in\n                    // source already due to overlap.\n                    let first := mload(source)\n\n                    // Copy whole words back to front\n                    // We use a signed comparisson here to allow dEnd to become\n                    // negative (happens when source and dest < 32). Valid\n                    // addresses in local memory will never be larger than\n                    // 2**255, so they can be safely re-interpreted as signed.\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} slt(dest, dEnd) {} {\n                        mstore(dEnd, mload(sEnd))\n                        sEnd := sub(sEnd, 32)\n                        dEnd := sub(dEnd, 32)\n                    }\n\n                    // Write the first 32 bytes\n                    mstore(dest, first)\n                }\n            }\n        }\n    }\n\n    /// @dev Returns a slices from a byte array.\n    /// @param b The byte array to take a slice from.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function slice(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure and copy contents\n        result = new bytes(to - from);\n        memCopy(\n            result.contentAddress(),\n            b.contentAddress() + from,\n            result.length\n        );\n        return result;\n    }\n\n    /// @dev Returns a slice from a byte array without preserving the input.\n    ///      When `from == 0`, the original array will match the slice.\n    ///      In other cases its state will be corrupted.\n    /// @param b The byte array to take a slice from. Will be destroyed in the process.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function sliceDestructive(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure around [from, to) in-place.\n        assembly {\n            result := add(b, from)\n            mstore(result, sub(to, from))\n        }\n        return result;\n    }\n\n    /// @dev Pops the last byte off of a byte array by modifying its length.\n    /// @param b Byte array that will be modified.\n    /// @return result The byte that was popped off.\n    function popLastByte(bytes memory b)\n        internal\n        pure\n        returns (bytes1 result)\n    {\n        if (b.length == 0) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanZeroRequired,\n                b.length,\n                0\n            ));\n        }\n\n        // Store last byte.\n        result = b[b.length - 1];\n\n        assembly {\n            // Decrement length of byte array.\n            let newLen := sub(mload(b), 1)\n            mstore(b, newLen)\n        }\n        return result;\n    }\n\n    /// @dev Tests equality of two byte arrays.\n    /// @param lhs First byte array to compare.\n    /// @param rhs Second byte array to compare.\n    /// @return equal True if arrays are the same. False otherwise.\n    function equals(\n        bytes memory lhs,\n        bytes memory rhs\n    )\n        internal\n        pure\n        returns (bool equal)\n    {\n        // Keccak gas cost is 30 + numWords * 6. This is a cheap way to compare.\n        // We early exit on unequal lengths, but keccak would also correctly\n        // handle this.\n        return lhs.length == rhs.length && keccak256(lhs) == keccak256(rhs);\n    }\n\n    /// @dev Reads an address from a position in a byte array.\n    /// @param b Byte array containing an address.\n    /// @param index Index in byte array of address.\n    /// @return result address from byte array.\n    function readAddress(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (address result)\n    {\n        if (b.length < index + 20) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Read address from array memory\n        assembly {\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 20-byte mask to obtain address\n            result := and(mload(add(b, index)), 0xffffffffffffffffffffffffffffffffffffffff)\n        }\n        return result;\n    }\n\n    /// @dev Writes an address into a specific position in a byte array.\n    /// @param b Byte array to insert address into.\n    /// @param index Index in byte array of address.\n    /// @param input Address to put into byte array.\n    function writeAddress(\n        bytes memory b,\n        uint256 index,\n        address input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 20) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Store address into array memory\n        assembly {\n            // The address occupies 20 bytes and mstore stores 32 bytes.\n            // First fetch the 32-byte word where we'll be storing the address, then\n            // apply a mask so we have only the bytes in the word that the address will not occupy.\n            // Then combine these bytes with the address and store the 32 bytes back to memory with mstore.\n\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 12-byte mask to obtain extra bytes occupying word of memory where we'll store the address\n            let neighbors := and(\n                mload(add(b, index)),\n                0xffffffffffffffffffffffff0000000000000000000000000000000000000000\n            )\n\n            // Make sure input address is clean.\n            // (Solidity does not guarantee this)\n            input := and(input, 0xffffffffffffffffffffffffffffffffffffffff)\n\n            // Store the neighbors and address into memory\n            mstore(add(b, index), xor(input, neighbors))\n        }\n    }\n\n    /// @dev Reads a bytes32 value from a position in a byte array.\n    /// @param b Byte array containing a bytes32 value.\n    /// @param index Index in byte array of bytes32 value.\n    /// @return result bytes32 value from byte array.\n    function readBytes32(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        if (b.length < index + 32) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            result := mload(add(b, index))\n        }\n        return result;\n    }\n\n    /// @dev Writes a bytes32 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input bytes32 to put into byte array.\n    function writeBytes32(\n        bytes memory b,\n        uint256 index,\n        bytes32 input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 32) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            mstore(add(b, index), input)\n        }\n    }\n\n    /// @dev Reads a uint256 value from a position in a byte array.\n    /// @param b Byte array containing a uint256 value.\n    /// @param index Index in byte array of uint256 value.\n    /// @return result uint256 value from byte array.\n    function readUint256(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (uint256 result)\n    {\n        result = uint256(readBytes32(b, index));\n        return result;\n    }\n\n    /// @dev Writes a uint256 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input uint256 to put into byte array.\n    function writeUint256(\n        bytes memory b,\n        uint256 index,\n        uint256 input\n    )\n        internal\n        pure\n    {\n        writeBytes32(b, index, bytes32(input));\n    }\n\n    /// @dev Reads an unpadded bytes4 value from a position in a byte array.\n    /// @param b Byte array containing a bytes4 value.\n    /// @param index Index in byte array of bytes4 value.\n    /// @return result bytes4 value from byte array.\n    function readBytes4(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes4 result)\n    {\n        if (b.length < index + 4) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsFourRequired,\n                b.length,\n                index + 4\n            ));\n        }\n\n        // Arrays are prefixed by a 32 byte length field\n        index += 32;\n\n        // Read the bytes4 from array memory\n        assembly {\n            result := mload(add(b, index))\n            // Solidity does not require us to clean the trailing bytes.\n            // We do it anyway\n            result := and(result, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)\n        }\n        return result;\n    }\n\n    /// @dev Writes a new length to a byte array.\n    ///      Decreasing length will lead to removing the corresponding lower order bytes from the byte array.\n    ///      Increasing length may lead to appending adjacent in-memory bytes to the end of the byte array.\n    /// @param b Bytes array to write new length to.\n    /// @param length New length of byte array.\n    function writeLength(bytes memory b, uint256 length)\n        internal\n        pure\n    {\n        assembly {\n            mstore(b, length)\n        }\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/errors/LibBytesRichErrorsV06.sol": {
            "id": 5,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibBytesRichErrorsV06 {\n\n    enum InvalidByteOperationErrorCodes {\n        FromLessThanOrEqualsToRequired,\n        ToLessThanOrEqualsLengthRequired,\n        LengthGreaterThanZeroRequired,\n        LengthGreaterThanOrEqualsFourRequired,\n        LengthGreaterThanOrEqualsTwentyRequired,\n        LengthGreaterThanOrEqualsThirtyTwoRequired,\n        LengthGreaterThanOrEqualsNestedBytesLengthRequired,\n        DestinationLengthGreaterThanOrEqualSourceLengthRequired\n    }\n\n    // bytes4(keccak256(\"InvalidByteOperationError(uint8,uint256,uint256)\"))\n    bytes4 internal constant INVALID_BYTE_OPERATION_ERROR_SELECTOR =\n        0x28006595;\n\n    // solhint-disable func-name-mixedcase\n    function InvalidByteOperationError(\n        InvalidByteOperationErrorCodes errorCode,\n        uint256 offset,\n        uint256 required\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            INVALID_BYTE_OPERATION_ERROR_SELECTOR,\n            errorCode,\n            offset,\n            required\n        );\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol": {
            "id": 7,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibRichErrorsV06 {\n\n    // bytes4(keccak256(\"Error(string)\"))\n    bytes4 internal constant STANDARD_ERROR_SELECTOR = 0x08c379a0;\n\n    // solhint-disable func-name-mixedcase\n    /// @dev ABI encode a standard, string revert error payload.\n    ///      This is the same payload that would be included by a `revert(string)`\n    ///      solidity statement. It has the function signature `Error(string)`.\n    /// @param message The error string.\n    /// @return The ABI encoded error.\n    function StandardError(string memory message)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            STANDARD_ERROR_SELECTOR,\n            bytes(message)\n        );\n    }\n    // solhint-enable func-name-mixedcase\n\n    /// @dev Reverts an encoded rich revert reason `errorData`.\n    /// @param errorData ABI encoded error data.\n    function rrevert(bytes memory errorData)\n        internal\n        pure\n    {\n        assembly {\n            revert(add(errorData, 0x20), mload(errorData))\n        }\n    }\n}\n"
        }
    },
    "sourceCodes": {
        "./IntermediateSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol\";\n\n\ncontract IntermediateSampler {\n    using LibBytesV06 for bytes;\n\n    struct IntermediaryInfo {\n        bytes returnData;\n        uint256[] makerTokenAmounts;\n    }\n\n    /// @dev Sample sells of an intermediate token, i.e X->Y->X. Discovers the highest output\n    ///      from the first hop calls (X->Y). Then uses the highest output (Y) as an indicator\n    ///      of price for the second hop calls (Y->Z).\n    /// @param firstHopCalls Encoded calls for price discovery of X->Y\n    /// @param secondHopCalls Encoded calls for sampling of Y->Z\n    /// @param takerTokenAmounts Taker amounts for the first hop X->Y\n    /// @return intermediaryInfo Z values for each Y and the final returnData for additional info\n    /// @return intermediaryAmounts Amounts of Y from takerTokenAmounts exchanged at the best rate\n    function sampleIntermediateSell(\n        bytes[] memory firstHopCalls,\n        bytes[] memory secondHopCalls,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (\n            IntermediaryInfo[] memory intermediaryInfo,\n            uint256[] memory intermediaryAmounts\n        )\n    {\n        uint256 intermediateAssetAmount = 0;\n        // Perform price discovery by finding the best exchange rate for a small\n        // amount of taker token (X)\n        uint256 smallTakerTokenAmount = takerTokenAmounts[0]; // x\n        for (uint256 i = 0; i != firstHopCalls.length; ++i) {\n            firstHopCalls[i].writeUint256(firstHopCalls[i].length - 32, smallTakerTokenAmount);\n            (bool didSucceed, bytes memory returnData) = address(this).staticcall(firstHopCalls[i]);\n            if (didSucceed) {\n                uint256 amount = returnData.readUint256(returnData.length - 32);\n                if (amount > intermediateAssetAmount) {\n                    intermediateAssetAmount = amount;\n                }\n            }\n        }\n        if (intermediateAssetAmount == 0) {\n            require(false, \"NO ROUTE 0\");\n            return (intermediaryInfo, intermediaryAmounts);\n        }\n        // We now have a ceiling exchange rate of a small amount of X for Y\n        intermediaryInfo = new IntermediaryInfo[](secondHopCalls.length);\n        // We have a 1:1 taker token amount to intermediary amount\n        intermediaryAmounts = new uint256[](takerTokenAmounts.length);\n        // Loop through each second hop call and find the exchange rate of\n        // Y->Z for every X taker amount exchange to Y using the best exchange\n        // rate found previously\n        for (uint256 j = 0; j != secondHopCalls.length; ++j) {\n            // For every taker token amount (X) we find a maker token Z (via Y best intermediate token amount)\n            intermediaryInfo[j].makerTokenAmounts = new uint256[](takerTokenAmounts.length);\n            for (uint256 k = 0; k != takerTokenAmounts.length; ++k) {\n                // scale Y by the ratio of takerTokenAmount[0]:takerTokenAmount[k]\n                // getPartial(received, sold, next)\n                uint256 scaledIntermediateAmount = _safeGetPartialAmountCeil2(\n                    intermediateAssetAmount,\n                    smallTakerTokenAmount,\n                    takerTokenAmounts[k]\n                );\n                // if the last k, add a bit of a buffer to ensure we over sample\n                if (k == takerTokenAmounts.length-1) {\n                    scaledIntermediateAmount = _safeGetPartialAmountCeil2(\n                        scaledIntermediateAmount,\n                        100,\n                        105\n                    );\n                }\n                // Store the intermediate amount, we will just keep overwriting this with the same values each loop\n                intermediaryAmounts[k] = scaledIntermediateAmount; // Y\n                secondHopCalls[j].writeUint256(secondHopCalls[j].length - 32, scaledIntermediateAmount);\n                // Y->Z\n                (bool didSucceed, bytes memory returnData) = address(this).staticcall(secondHopCalls[j]);\n                if (didSucceed) {\n                    uint256 amount = returnData.readUint256(returnData.length - 32); // Z\n                    // Store how much we bought by selling intermediaryAmounts[j]\n                    intermediaryInfo[j].makerTokenAmounts[k] = amount;\n                    // Store the full return data, which should remain consistent for a particular source\n                    // this may contain additional info like the pool address\n                    intermediaryInfo[j].returnData = returnData;\n                    if (amount == 0) {\n                        break;\n                    }\n                } else {\n                    break;\n                }\n            }\n        }\n    }\n\n    function _safeGetPartialAmountCeil2(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        view\n        returns (uint256 partialAmount)\n    {\n        if (numerator == 0 || target == 0 || denominator == 0) return 0;\n        uint256 c = numerator * target;\n        if (c / numerator != target) return 0;\n        return (c + (denominator - 1)) / denominator;\n    }\n}",
        "@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./errors/LibBytesRichErrorsV06.sol\";\nimport \"./errors/LibRichErrorsV06.sol\";\n\n\nlibrary LibBytesV06 {\n\n    using LibBytesV06 for bytes;\n\n    /// @dev Gets the memory address for a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of byte array. This\n    ///         points to the header of the byte array which contains\n    ///         the length.\n    function rawAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := input\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Gets the memory address for the contents of a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of the contents of the byte array.\n    function contentAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := add(input, 32)\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Copies `length` bytes from memory location `source` to `dest`.\n    /// @param dest memory address to copy bytes to.\n    /// @param source memory address to copy bytes from.\n    /// @param length number of bytes to copy.\n    function memCopy(\n        uint256 dest,\n        uint256 source,\n        uint256 length\n    )\n        internal\n        pure\n    {\n        if (length < 32) {\n            // Handle a partial word by reading destination and masking\n            // off the bits we are interested in.\n            // This correctly handles overlap, zero lengths and source == dest\n            assembly {\n                let mask := sub(exp(256, sub(32, length)), 1)\n                let s := and(mload(source), not(mask))\n                let d := and(mload(dest), mask)\n                mstore(dest, or(s, d))\n            }\n        } else {\n            // Skip the O(length) loop when source == dest.\n            if (source == dest) {\n                return;\n            }\n\n            // For large copies we copy whole words at a time. The final\n            // word is aligned to the end of the range (instead of after the\n            // previous) to handle partial words. So a copy will look like this:\n            //\n            //  ####\n            //      ####\n            //          ####\n            //            ####\n            //\n            // We handle overlap in the source and destination range by\n            // changing the copying direction. This prevents us from\n            // overwriting parts of source that we still need to copy.\n            //\n            // This correctly handles source == dest\n            //\n            if (source > dest) {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because it\n                    // is easier to compare with in the loop, and these\n                    // are also the addresses we need for copying the\n                    // last bytes.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the last 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the last bytes in\n                    // source already due to overlap.\n                    let last := mload(sEnd)\n\n                    // Copy whole words front to back\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} lt(source, sEnd) {} {\n                        mstore(dest, mload(source))\n                        source := add(source, 32)\n                        dest := add(dest, 32)\n                    }\n\n                    // Write the last 32 bytes\n                    mstore(dEnd, last)\n                }\n            } else {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because those\n                    // are the starting points when copying a word at the end.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the first 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the first bytes in\n                    // source already due to overlap.\n                    let first := mload(source)\n\n                    // Copy whole words back to front\n                    // We use a signed comparisson here to allow dEnd to become\n                    // negative (happens when source and dest < 32). Valid\n                    // addresses in local memory will never be larger than\n                    // 2**255, so they can be safely re-interpreted as signed.\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} slt(dest, dEnd) {} {\n                        mstore(dEnd, mload(sEnd))\n                        sEnd := sub(sEnd, 32)\n                        dEnd := sub(dEnd, 32)\n                    }\n\n                    // Write the first 32 bytes\n                    mstore(dest, first)\n                }\n            }\n        }\n    }\n\n    /// @dev Returns a slices from a byte array.\n    /// @param b The byte array to take a slice from.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function slice(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure and copy contents\n        result = new bytes(to - from);\n        memCopy(\n            result.contentAddress(),\n            b.contentAddress() + from,\n            result.length\n        );\n        return result;\n    }\n\n    /// @dev Returns a slice from a byte array without preserving the input.\n    ///      When `from == 0`, the original array will match the slice.\n    ///      In other cases its state will be corrupted.\n    /// @param b The byte array to take a slice from. Will be destroyed in the process.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function sliceDestructive(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure around [from, to) in-place.\n        assembly {\n            result := add(b, from)\n            mstore(result, sub(to, from))\n        }\n        return result;\n    }\n\n    /// @dev Pops the last byte off of a byte array by modifying its length.\n    /// @param b Byte array that will be modified.\n    /// @return result The byte that was popped off.\n    function popLastByte(bytes memory b)\n        internal\n        pure\n        returns (bytes1 result)\n    {\n        if (b.length == 0) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanZeroRequired,\n                b.length,\n                0\n            ));\n        }\n\n        // Store last byte.\n        result = b[b.length - 1];\n\n        assembly {\n            // Decrement length of byte array.\n            let newLen := sub(mload(b), 1)\n            mstore(b, newLen)\n        }\n        return result;\n    }\n\n    /// @dev Tests equality of two byte arrays.\n    /// @param lhs First byte array to compare.\n    /// @param rhs Second byte array to compare.\n    /// @return equal True if arrays are the same. False otherwise.\n    function equals(\n        bytes memory lhs,\n        bytes memory rhs\n    )\n        internal\n        pure\n        returns (bool equal)\n    {\n        // Keccak gas cost is 30 + numWords * 6. This is a cheap way to compare.\n        // We early exit on unequal lengths, but keccak would also correctly\n        // handle this.\n        return lhs.length == rhs.length && keccak256(lhs) == keccak256(rhs);\n    }\n\n    /// @dev Reads an address from a position in a byte array.\n    /// @param b Byte array containing an address.\n    /// @param index Index in byte array of address.\n    /// @return result address from byte array.\n    function readAddress(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (address result)\n    {\n        if (b.length < index + 20) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Read address from array memory\n        assembly {\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 20-byte mask to obtain address\n            result := and(mload(add(b, index)), 0xffffffffffffffffffffffffffffffffffffffff)\n        }\n        return result;\n    }\n\n    /// @dev Writes an address into a specific position in a byte array.\n    /// @param b Byte array to insert address into.\n    /// @param index Index in byte array of address.\n    /// @param input Address to put into byte array.\n    function writeAddress(\n        bytes memory b,\n        uint256 index,\n        address input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 20) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Store address into array memory\n        assembly {\n            // The address occupies 20 bytes and mstore stores 32 bytes.\n            // First fetch the 32-byte word where we'll be storing the address, then\n            // apply a mask so we have only the bytes in the word that the address will not occupy.\n            // Then combine these bytes with the address and store the 32 bytes back to memory with mstore.\n\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 12-byte mask to obtain extra bytes occupying word of memory where we'll store the address\n            let neighbors := and(\n                mload(add(b, index)),\n                0xffffffffffffffffffffffff0000000000000000000000000000000000000000\n            )\n\n            // Make sure input address is clean.\n            // (Solidity does not guarantee this)\n            input := and(input, 0xffffffffffffffffffffffffffffffffffffffff)\n\n            // Store the neighbors and address into memory\n            mstore(add(b, index), xor(input, neighbors))\n        }\n    }\n\n    /// @dev Reads a bytes32 value from a position in a byte array.\n    /// @param b Byte array containing a bytes32 value.\n    /// @param index Index in byte array of bytes32 value.\n    /// @return result bytes32 value from byte array.\n    function readBytes32(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        if (b.length < index + 32) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            result := mload(add(b, index))\n        }\n        return result;\n    }\n\n    /// @dev Writes a bytes32 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input bytes32 to put into byte array.\n    function writeBytes32(\n        bytes memory b,\n        uint256 index,\n        bytes32 input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 32) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            mstore(add(b, index), input)\n        }\n    }\n\n    /// @dev Reads a uint256 value from a position in a byte array.\n    /// @param b Byte array containing a uint256 value.\n    /// @param index Index in byte array of uint256 value.\n    /// @return result uint256 value from byte array.\n    function readUint256(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (uint256 result)\n    {\n        result = uint256(readBytes32(b, index));\n        return result;\n    }\n\n    /// @dev Writes a uint256 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input uint256 to put into byte array.\n    function writeUint256(\n        bytes memory b,\n        uint256 index,\n        uint256 input\n    )\n        internal\n        pure\n    {\n        writeBytes32(b, index, bytes32(input));\n    }\n\n    /// @dev Reads an unpadded bytes4 value from a position in a byte array.\n    /// @param b Byte array containing a bytes4 value.\n    /// @param index Index in byte array of bytes4 value.\n    /// @return result bytes4 value from byte array.\n    function readBytes4(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes4 result)\n    {\n        if (b.length < index + 4) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsFourRequired,\n                b.length,\n                index + 4\n            ));\n        }\n\n        // Arrays are prefixed by a 32 byte length field\n        index += 32;\n\n        // Read the bytes4 from array memory\n        assembly {\n            result := mload(add(b, index))\n            // Solidity does not require us to clean the trailing bytes.\n            // We do it anyway\n            result := and(result, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)\n        }\n        return result;\n    }\n\n    /// @dev Writes a new length to a byte array.\n    ///      Decreasing length will lead to removing the corresponding lower order bytes from the byte array.\n    ///      Increasing length may lead to appending adjacent in-memory bytes to the end of the byte array.\n    /// @param b Bytes array to write new length to.\n    /// @param length New length of byte array.\n    function writeLength(bytes memory b, uint256 length)\n        internal\n        pure\n    {\n        assembly {\n            mstore(b, length)\n        }\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/errors/LibBytesRichErrorsV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibBytesRichErrorsV06 {\n\n    enum InvalidByteOperationErrorCodes {\n        FromLessThanOrEqualsToRequired,\n        ToLessThanOrEqualsLengthRequired,\n        LengthGreaterThanZeroRequired,\n        LengthGreaterThanOrEqualsFourRequired,\n        LengthGreaterThanOrEqualsTwentyRequired,\n        LengthGreaterThanOrEqualsThirtyTwoRequired,\n        LengthGreaterThanOrEqualsNestedBytesLengthRequired,\n        DestinationLengthGreaterThanOrEqualSourceLengthRequired\n    }\n\n    // bytes4(keccak256(\"InvalidByteOperationError(uint8,uint256,uint256)\"))\n    bytes4 internal constant INVALID_BYTE_OPERATION_ERROR_SELECTOR =\n        0x28006595;\n\n    // solhint-disable func-name-mixedcase\n    function InvalidByteOperationError(\n        InvalidByteOperationErrorCodes errorCode,\n        uint256 offset,\n        uint256 required\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            INVALID_BYTE_OPERATION_ERROR_SELECTOR,\n            errorCode,\n            offset,\n            required\n        );\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibRichErrorsV06 {\n\n    // bytes4(keccak256(\"Error(string)\"))\n    bytes4 internal constant STANDARD_ERROR_SELECTOR = 0x08c379a0;\n\n    // solhint-disable func-name-mixedcase\n    /// @dev ABI encode a standard, string revert error payload.\n    ///      This is the same payload that would be included by a `revert(string)`\n    ///      solidity statement. It has the function signature `Error(string)`.\n    /// @param message The error string.\n    /// @return The ABI encoded error.\n    function StandardError(string memory message)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            STANDARD_ERROR_SELECTOR,\n            bytes(message)\n        );\n    }\n    // solhint-enable func-name-mixedcase\n\n    /// @dev Reverts an encoded rich revert reason `errorData`.\n    /// @param errorData ABI encoded error data.\n    function rrevert(bytes memory errorData)\n        internal\n        pure\n    {\n        assembly {\n            revert(add(errorData, 0x20), mload(errorData))\n        }\n    }\n}\n"
    },
    "compiler": {
        "name": "solc",
        "version": "0.6.12+commit.27d51765",
        "settings": {
            "remappings": [
                "@0x/contracts-utils=/Users/jacob/projects/ethdev/0x/workspace-remote/workspace/0x-monorepo/node_modules/@0x/contracts-utils",
                "@0x/contracts-erc20=/Users/jacob/projects/ethdev/0x/workspace-remote/workspace/0x-monorepo/node_modules/@0x/contracts-erc20",
                "@0x/contracts-zero-ex=/Users/jacob/projects/ethdev/0x/workspace-remote/workspace/0x-monorepo/node_modules/@0x/contracts-zero-ex"
            ],
            "optimizer": {
                "enabled": true,
                "runs": 62500,
                "details": {
                    "yul": true,
                    "deduplicate": true,
                    "cse": true,
                    "constantOptimizer": true
                }
            },
            "outputSelection": {
                "*": {
                    "*": [
                        "abi",
                        "devdoc",
                        "evm.bytecode.object",
                        "evm.bytecode.sourceMap",
                        "evm.deployedBytecode.object",
                        "evm.deployedBytecode.sourceMap"
                    ]
                }
            },
            "evmVersion": "istanbul"
        }
    },
    "chains": {}
}
