{
    "schemaVersion": "2.0.0",
    "contractName": "NativeOrderSampler",
    "compilerOutput": {
        "abi": [
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "makerAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "takerAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "feeRecipientAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "senderAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "uint256",
                                "name": "makerAssetAmount",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "takerAssetAmount",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "makerFee",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "takerFee",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "expirationTimeSeconds",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "salt",
                                "type": "uint256"
                            },
                            {
                                "internalType": "bytes",
                                "name": "makerAssetData",
                                "type": "bytes"
                            },
                            {
                                "internalType": "bytes",
                                "name": "takerAssetData",
                                "type": "bytes"
                            },
                            {
                                "internalType": "bytes",
                                "name": "makerFeeAssetData",
                                "type": "bytes"
                            },
                            {
                                "internalType": "bytes",
                                "name": "takerFeeAssetData",
                                "type": "bytes"
                            }
                        ],
                        "internalType": "struct IExchange.Order[]",
                        "name": "orders",
                        "type": "tuple[]"
                    },
                    {
                        "internalType": "bytes[]",
                        "name": "orderSignatures",
                        "type": "bytes[]"
                    },
                    {
                        "internalType": "contract IExchange",
                        "name": "exchange",
                        "type": "address"
                    }
                ],
                "name": "getOrderFillableMakerAssetAmounts",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "orderFillableMakerAssetAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "makerAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "takerAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "feeRecipientAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "senderAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "uint256",
                                "name": "makerAssetAmount",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "takerAssetAmount",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "makerFee",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "takerFee",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "expirationTimeSeconds",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "salt",
                                "type": "uint256"
                            },
                            {
                                "internalType": "bytes",
                                "name": "makerAssetData",
                                "type": "bytes"
                            },
                            {
                                "internalType": "bytes",
                                "name": "takerAssetData",
                                "type": "bytes"
                            },
                            {
                                "internalType": "bytes",
                                "name": "makerFeeAssetData",
                                "type": "bytes"
                            },
                            {
                                "internalType": "bytes",
                                "name": "takerFeeAssetData",
                                "type": "bytes"
                            }
                        ],
                        "internalType": "struct IExchange.Order",
                        "name": "order",
                        "type": "tuple"
                    },
                    {
                        "internalType": "bytes",
                        "name": "signature",
                        "type": "bytes"
                    },
                    {
                        "internalType": "contract IExchange",
                        "name": "exchange",
                        "type": "address"
                    }
                ],
                "name": "getOrderFillableTakerAmount",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "fillableTakerAmount",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "makerAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "takerAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "feeRecipientAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "senderAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "uint256",
                                "name": "makerAssetAmount",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "takerAssetAmount",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "makerFee",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "takerFee",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "expirationTimeSeconds",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "salt",
                                "type": "uint256"
                            },
                            {
                                "internalType": "bytes",
                                "name": "makerAssetData",
                                "type": "bytes"
                            },
                            {
                                "internalType": "bytes",
                                "name": "takerAssetData",
                                "type": "bytes"
                            },
                            {
                                "internalType": "bytes",
                                "name": "makerFeeAssetData",
                                "type": "bytes"
                            },
                            {
                                "internalType": "bytes",
                                "name": "takerFeeAssetData",
                                "type": "bytes"
                            }
                        ],
                        "internalType": "struct IExchange.Order[]",
                        "name": "orders",
                        "type": "tuple[]"
                    },
                    {
                        "internalType": "bytes[]",
                        "name": "orderSignatures",
                        "type": "bytes[]"
                    },
                    {
                        "internalType": "contract IExchange",
                        "name": "exchange",
                        "type": "address"
                    }
                ],
                "name": "getOrderFillableTakerAssetAmounts",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "orderFillableTakerAssetAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "makerTokenAddress",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerTokenAddress",
                        "type": "address"
                    }
                ],
                "name": "getTokenDecimals",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "",
                        "type": "uint256"
                    },
                    {
                        "internalType": "uint256",
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            }
        ],
        "devdoc": {
            "kind": "dev",
            "methods": {
                "getOrderFillableMakerAssetAmounts((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes,bytes,bytes)[],bytes[],address)": {
                    "details": "Queries the fillable taker asset amounts of native orders.      Effectively ignores orders that have empty signatures or",
                    "params": {
                        "exchange": "The V3 exchange.",
                        "orderSignatures": "Signatures for each respective order in `orders`.",
                        "orders": "Native orders to query."
                    },
                    "returns": {
                        "orderFillableMakerAssetAmounts": "How much maker asset can be filled         by each order in `orders`."
                    }
                },
                "getOrderFillableTakerAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes,bytes,bytes),bytes,address)": {
                    "details": "Get the fillable taker amount of an order, taking into account      order state, maker fees, and maker balances."
                },
                "getOrderFillableTakerAssetAmounts((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes,bytes,bytes)[],bytes[],address)": {
                    "details": "Queries the fillable taker asset amounts of native orders.      Effectively ignores orders that have empty signatures or      maker/taker asset amounts (returning 0).",
                    "params": {
                        "exchange": "The V3 exchange.",
                        "orderSignatures": "Signatures for each respective order in `orders`.",
                        "orders": "Native orders to query."
                    },
                    "returns": {
                        "orderFillableTakerAssetAmounts": "How much taker asset can be filled         by each order in `orders`."
                    }
                }
            },
            "stateVariables": {
                "DEFAULT_CALL_GAS": {
                    "details": "Gas limit for calls to `getOrderFillableTakerAmount()`."
                },
                "ERC20_ASSET_PROXY_ID": {
                    "details": "The Exchange ERC20Proxy ID."
                }
            },
            "version": 1
        },
        "evm": {
            "bytecode": {
                "linkReferences": {},
                "object": "",
                "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x16BC DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x4C JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x39B085AD EQ PUSH2 0x51 JUMPI DUP1 PUSH4 0x3B77EBAE EQ PUSH2 0x7A JUMPI DUP1 PUSH4 0xE9A8E442 EQ PUSH2 0x9A JUMPI DUP1 PUSH4 0xFCB5C43C EQ PUSH2 0xAD JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x64 PUSH2 0x5F CALLDATASIZE PUSH1 0x4 PUSH2 0x1101 JUMP JUMPDEST PUSH2 0xCE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x71 SWAP2 SWAP1 PUSH2 0x147F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x8D PUSH2 0x88 CALLDATASIZE PUSH1 0x4 PUSH2 0x122B JUMP JUMPDEST PUSH2 0x26D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x71 SWAP2 SWAP1 PUSH2 0x15BD JUMP JUMPDEST PUSH2 0x64 PUSH2 0xA8 CALLDATASIZE PUSH1 0x4 PUSH2 0x1101 JUMP JUMPDEST PUSH2 0x8BA JUMP JUMPDEST PUSH2 0xC0 PUSH2 0xBB CALLDATASIZE PUSH1 0x4 PUSH2 0x10C9 JUMP JUMPDEST PUSH2 0x95D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x71 SWAP3 SWAP2 SWAP1 PUSH2 0x15C6 JUMP JUMPDEST PUSH1 0x60 DUP4 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0xE8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x112 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 EQ PUSH2 0x265 JUMPI ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x3B77EBAE PUSH3 0x30D40 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x14C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x160 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x187 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1571 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x19F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x1EE JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x1EB SWAP2 DUP2 ADD SWAP1 PUSH2 0x12A0 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x242 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x21C JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x221 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x230 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP PUSH2 0x25D JUMP JUMPDEST DUP1 DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x24F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP JUMPDEST PUSH1 0x1 ADD PUSH2 0x118 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH1 0x0 EQ DUP1 PUSH2 0x281 JUMPI POP PUSH1 0x80 DUP5 ADD MLOAD ISZERO JUMPDEST DUP1 PUSH2 0x28E JUMPI POP PUSH1 0xA0 DUP5 ADD MLOAD ISZERO JUMPDEST ISZERO PUSH2 0x29B JUMPI POP PUSH1 0x0 PUSH2 0x8B3 JUMP JUMPDEST PUSH2 0x2A3 PUSH2 0xE42 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x9D3FA4B900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND SWAP1 PUSH4 0x9D3FA4B9 SWAP1 PUSH2 0x2F5 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x155E JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x30D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x321 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x345 SWAP2 SWAP1 PUSH2 0x11E3 JUMP JUMPDEST SWAP1 POP PUSH1 0x3 DUP2 MLOAD PUSH1 0x6 DUP2 GT ISZERO PUSH2 0x356 JUMPI INVALID JUMPDEST EQ PUSH2 0x365 JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x8B3 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD DUP6 MLOAD PUSH1 0x40 MLOAD PUSH32 0x8171C40700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND SWAP3 PUSH4 0x8171C407 SWAP3 PUSH2 0x3BE SWAP3 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x14C3 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3D6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3EA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x40E SWAP2 SWAP1 PUSH2 0x11C3 JUMP JUMPDEST PUSH2 0x41C JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x8B3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x6070410800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND SWAP1 PUSH4 0x60704108 SWAP1 PUSH2 0x491 SWAP1 PUSH32 0xF47261B000000000000000000000000000000000000000000000000000000000 SWAP1 PUSH1 0x4 ADD PUSH2 0x1501 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4A9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4BD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4E1 SWAP2 SWAP1 PUSH2 0x10AD JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x4F3 DUP8 PUSH2 0x140 ADD MLOAD PUSH2 0x98B JUMP JUMPDEST SWAP1 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x51C JUMPI PUSH1 0x0 SWAP4 POP POP POP POP PUSH2 0x8B3 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP9 PUSH1 0xC0 ADD MLOAD GT PUSH2 0x530 JUMPI PUSH1 0x0 PUSH2 0x53E JUMP JUMPDEST PUSH2 0x53E DUP9 PUSH2 0x180 ADD MLOAD PUSH2 0x98B JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x55D DUP6 PUSH1 0x40 ADD MLOAD DUP11 PUSH1 0xA0 ADD MLOAD PUSH2 0xA1C SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 SWAP6 POP PUSH1 0x0 PUSH2 0x5C2 DUP3 DUP12 PUSH1 0xA0 ADD MLOAD DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x5AA JUMPI DUP13 PUSH1 0x80 ADD MLOAD PUSH2 0x5BD JUMP JUMPDEST PUSH1 0xC0 DUP14 ADD MLOAD PUSH1 0x80 DUP15 ADD MLOAD PUSH2 0x5BD SWAP2 PUSH2 0xA45 JUMP JUMPDEST PUSH2 0xA61 JUMP JUMPDEST DUP11 MLOAD PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP2 SWAP3 POP PUSH1 0x0 SWAP2 PUSH2 0x718 SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP9 AND SWAP2 PUSH4 0x70A08231 SWAP2 PUSH2 0x61E SWAP2 PUSH1 0x4 ADD PUSH2 0x1437 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x636 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x64A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x66E SWAP2 SWAP1 PUSH2 0x12A0 JUMP JUMPDEST DUP13 MLOAD PUSH1 0x40 MLOAD PUSH32 0xDD62ED3E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 AND SWAP2 PUSH4 0xDD62ED3E SWAP2 PUSH2 0x6C3 SWAP2 SWAP1 DUP13 SWAP1 PUSH1 0x4 ADD PUSH2 0x1458 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x6EF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x713 SWAP2 SWAP1 PUSH2 0x12A0 JUMP JUMPDEST PUSH2 0xA9D JUMP JUMPDEST SWAP1 POP DUP2 DUP2 LT ISZERO PUSH2 0x730 JUMPI PUSH2 0x72D DUP2 DUP4 DUP6 PUSH2 0xAB3 JUMP JUMPDEST SWAP8 POP JUMPDEST DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO DUP1 ISZERO PUSH2 0x781 JUMPI POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND ISZERO ISZERO JUMPDEST ISZERO PUSH2 0x8AB JUMPI DUP11 MLOAD PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x0 SWAP2 PUSH2 0x885 SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP9 AND SWAP2 PUSH4 0x70A08231 SWAP2 PUSH2 0x7E0 SWAP2 SWAP1 PUSH1 0x4 ADD PUSH2 0x1437 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7F8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x80C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x830 SWAP2 SWAP1 PUSH2 0x12A0 JUMP JUMPDEST DUP14 MLOAD PUSH1 0x40 MLOAD PUSH32 0xDD62ED3E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 AND SWAP2 PUSH4 0xDD62ED3E SWAP2 PUSH2 0x6C3 SWAP2 SWAP1 DUP14 SWAP1 PUSH1 0x4 ADD PUSH2 0x1458 JUMP JUMPDEST SWAP1 POP DUP12 PUSH1 0xC0 ADD MLOAD DUP2 LT ISZERO PUSH2 0x8A9 JUMPI PUSH2 0x8A6 DUP10 PUSH2 0x713 DUP4 DUP16 PUSH1 0xC0 ADD MLOAD DUP9 PUSH2 0xAB3 JUMP JUMPDEST SWAP9 POP JUMPDEST POP JUMPDEST POP POP POP POP POP POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x8C7 DUP5 DUP5 DUP5 PUSH2 0xCE JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x265 JUMPI DUP2 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x8E1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ PUSH2 0x955 JUMPI PUSH2 0x93C DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x8FF JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x913 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0xA0 ADD MLOAD DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x92B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x80 ADD MLOAD PUSH2 0xAB3 JUMP JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x948 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP JUMPDEST PUSH1 0x1 ADD PUSH2 0x8CC JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x96B DUP6 PUSH2 0xAD7 JUMP JUMPDEST PUSH1 0xFF AND SWAP1 POP PUSH1 0x0 PUSH2 0x97B DUP6 PUSH2 0xAD7 JUMP JUMPDEST SWAP2 SWAP4 POP POP PUSH1 0xFF AND SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x99F JUMPI POP PUSH1 0x0 PUSH2 0xA17 JUMP JUMPDEST DUP2 MLOAD PUSH1 0x24 EQ ISZERO DUP1 PUSH2 0x9FC JUMPI POP PUSH32 0xF47261B000000000000000000000000000000000000000000000000000000000 PUSH2 0x9D7 DUP4 PUSH1 0x0 PUSH2 0xBA9 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND EQ ISZERO JUMPDEST ISZERO PUSH2 0xA09 JUMPI POP PUSH1 0x0 PUSH2 0xA17 JUMP JUMPDEST PUSH2 0xA14 DUP3 PUSH1 0x10 PUSH2 0xBF5 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0xA3A JUMPI PUSH2 0xA3A PUSH2 0xA35 PUSH1 0x2 DUP6 DUP6 PUSH2 0xC35 JUMP JUMPDEST PUSH2 0xCDA JUMP JUMPDEST POP DUP1 DUP3 SUB JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x8B3 JUMPI PUSH2 0x8B3 PUSH2 0xA35 PUSH1 0x0 DUP7 DUP7 PUSH2 0xC35 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA6E DUP5 DUP5 DUP5 PUSH2 0xCE2 JUMP JUMPDEST ISZERO PUSH2 0xA81 JUMPI PUSH2 0xA81 PUSH2 0xA35 DUP6 DUP6 DUP6 PUSH2 0xD3C JUMP JUMPDEST PUSH2 0xA95 DUP4 PUSH2 0xA8F DUP7 DUP6 PUSH2 0xD5B JUMP JUMPDEST SWAP1 PUSH2 0xD8C JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0xAAC JUMPI DUP2 PUSH2 0x8B3 JUMP JUMPDEST POP SWAP1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA95 DUP4 PUSH2 0xA8F PUSH2 0xAC7 DUP3 PUSH1 0x1 PUSH2 0xA1C JUMP JUMPDEST PUSH2 0xAD1 DUP9 DUP8 PUSH2 0xD5B JUMP JUMPDEST SWAP1 PUSH2 0xA45 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x12 SWAP1 POP PUSH1 0x0 PUSH1 0x60 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x4 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x313CE56700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x40 MLOAD PUSH2 0xB3B SWAP2 SWAP1 PUSH2 0x141B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0xB76 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xB7B JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0xB8F JUMPI POP PUSH1 0x20 DUP2 MLOAD LT ISZERO JUMPDEST ISZERO PUSH2 0xBA2 JUMPI PUSH2 0xB9F DUP2 PUSH1 0x0 PUSH2 0xDB6 JUMP JUMPDEST SWAP3 POP JUMPDEST POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x4 ADD DUP4 MLOAD LT ISZERO PUSH2 0xBCA JUMPI PUSH2 0xBCA PUSH2 0xA35 PUSH1 0x3 DUP6 MLOAD DUP6 PUSH1 0x4 ADD PUSH2 0xDC2 JUMP JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x14 ADD DUP4 MLOAD LT ISZERO PUSH2 0xC16 JUMPI PUSH2 0xC16 PUSH2 0xA35 PUSH1 0x4 DUP6 MLOAD DUP6 PUSH1 0x14 ADD PUSH2 0xDC2 JUMP JUMPDEST POP ADD PUSH1 0x14 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH4 0xE946C1BB PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xC54 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x152E JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xCF4 JUMPI PUSH2 0xCF4 PUSH2 0xA35 PUSH2 0xDE1 JUMP JUMPDEST DUP2 ISZERO DUP1 PUSH2 0xCFF JUMPI POP DUP4 ISZERO JUMPDEST ISZERO PUSH2 0xD0C JUMPI POP PUSH1 0x0 PUSH2 0x8B3 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP1 PUSH2 0xD16 JUMPI INVALID JUMPDEST DUP6 DUP5 MULMOD SWAP1 POP PUSH2 0xD25 DUP6 DUP5 PUSH2 0xD5B JUMP JUMPDEST PUSH2 0xD31 DUP3 PUSH2 0x3E8 PUSH2 0xD5B JUMP JUMPDEST LT ISZERO SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH4 0x339F3DE2 PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xC54 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x15D4 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xD6A JUMPI POP PUSH1 0x0 PUSH2 0xA3F JUMP JUMPDEST DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 PUSH2 0xD77 JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x8B3 JUMPI PUSH2 0x8B3 PUSH2 0xA35 PUSH1 0x1 DUP7 DUP7 PUSH2 0xC35 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0xDA2 JUMPI PUSH2 0xDA2 PUSH2 0xA35 PUSH1 0x3 DUP6 DUP6 PUSH2 0xC35 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP2 PUSH2 0xDAD JUMPI INVALID JUMPDEST DIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8B3 DUP4 DUP4 PUSH2 0xE18 JUMP JUMPDEST PUSH1 0x60 PUSH4 0x28006595 PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xC54 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1550 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x4 DUP2 MSTORE PUSH32 0xA791837C00000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO PUSH2 0xE39 JUMPI PUSH2 0xE39 PUSH2 0xA35 PUSH1 0x5 DUP6 MLOAD DUP6 PUSH1 0x20 ADD PUSH2 0xDC2 JUMP JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD SWAP1 SWAP2 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0xA3F DUP2 PUSH2 0x1661 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xE7F JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xE92 PUSH2 0xE8D DUP3 PUSH2 0x1611 JUMP JUMPDEST PUSH2 0x15EA JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0xECC JUMPI PUSH2 0xEBA DUP9 DUP5 DUP5 CALLDATALOAD DUP11 ADD ADD PUSH2 0xED7 JUMP JUMPDEST DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0xEA3 JUMP JUMPDEST POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xEE7 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xEFD JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0xF2E PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F DUP5 ADD AND ADD PUSH2 0x15EA JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0xF45 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP5 ADD CALLDATACOPY PUSH1 0x0 SWAP1 DUP3 ADD PUSH1 0x20 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C0 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xF71 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0xF7A DUP2 PUSH2 0x15EA JUMP JUMPDEST SWAP2 POP POP PUSH2 0xF87 DUP4 DUP4 PUSH2 0xE64 JUMP JUMPDEST DUP2 MSTORE PUSH2 0xF96 DUP4 PUSH1 0x20 DUP5 ADD PUSH2 0xE64 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0xFA8 DUP4 PUSH1 0x40 DUP5 ADD PUSH2 0xE64 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0xFBA DUP4 PUSH1 0x60 DUP5 ADD PUSH2 0xE64 JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP3 ADD CALLDATALOAD PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 DUP3 ADD CALLDATALOAD PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 DUP3 ADD CALLDATALOAD PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0xE0 DUP3 ADD CALLDATALOAD PUSH1 0xE0 DUP3 ADD MSTORE PUSH2 0x100 DUP1 DUP4 ADD CALLDATALOAD DUP2 DUP4 ADD MSTORE POP PUSH2 0x120 DUP1 DUP4 ADD CALLDATALOAD DUP2 DUP4 ADD MSTORE POP PUSH2 0x140 DUP1 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x101C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1028 DUP7 DUP4 DUP8 ADD PUSH2 0xED7 JUMP JUMPDEST DUP4 DUP6 ADD MSTORE PUSH2 0x160 SWAP3 POP DUP3 DUP6 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1044 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1050 DUP7 DUP4 DUP8 ADD PUSH2 0xED7 JUMP JUMPDEST DUP4 DUP6 ADD MSTORE PUSH2 0x180 SWAP3 POP DUP3 DUP6 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x106C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1078 DUP7 DUP4 DUP8 ADD PUSH2 0xED7 JUMP JUMPDEST DUP4 DUP6 ADD MSTORE PUSH2 0x1A0 SWAP3 POP DUP3 DUP6 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1094 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x10A1 DUP6 DUP3 DUP7 ADD PUSH2 0xED7 JUMP JUMPDEST DUP3 DUP5 ADD MSTORE POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x10BE JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x8B3 DUP2 PUSH2 0x1661 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x10DB JUMPI DUP1 DUP2 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x10E6 DUP2 PUSH2 0x1661 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x10F6 DUP2 PUSH2 0x1661 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1115 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x112C JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 DUP7 ADD SWAP2 POP DUP7 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x113F JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x114D PUSH2 0xE8D DUP3 PUSH2 0x1611 JUMP JUMPDEST DUP2 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD SWAP2 SWAP1 DUP6 DUP2 ADD DUP8 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x1185 JUMPI PUSH2 0x1173 DUP14 DUP5 DUP5 CALLDATALOAD DUP12 ADD ADD PUSH2 0xF5E JUMP JUMPDEST DUP6 MSTORE SWAP4 DUP3 ADD SWAP4 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x115C JUMP JUMPDEST POP SWAP2 SWAP9 POP DUP10 ADD CALLDATALOAD SWAP5 POP POP POP POP DUP1 DUP3 GT ISZERO PUSH2 0x119D JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x11AA DUP7 DUP3 DUP8 ADD PUSH2 0xE6F JUMP JUMPDEST SWAP3 POP POP PUSH2 0x11BA DUP6 PUSH1 0x40 DUP7 ADD PUSH2 0xE64 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x11D4 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x8B3 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x11F4 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x11FE PUSH1 0x60 PUSH2 0x15EA JUMP JUMPDEST DUP3 MLOAD PUSH1 0x7 DUP2 LT PUSH2 0x120C JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP4 DUP2 ADD MLOAD SWAP1 DUP3 ADD MSTORE PUSH1 0x40 SWAP3 DUP4 ADD MLOAD SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x123F JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1256 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x1262 DUP8 DUP4 DUP9 ADD PUSH2 0xF5E JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1277 JUMPI DUP4 DUP5 REVERT JUMPDEST POP PUSH2 0x1284 DUP7 DUP3 DUP8 ADD PUSH2 0xED7 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH2 0x1295 DUP2 PUSH2 0x1661 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x12B1 JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x12EA DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x1631 JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C0 PUSH2 0x132C DUP5 DUP5 MLOAD PUSH2 0x12B8 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MLOAD PUSH2 0x133E PUSH1 0x20 DUP7 ADD DUP3 PUSH2 0x12B8 JUMP JUMPDEST POP PUSH1 0x40 DUP4 ADD MLOAD PUSH2 0x1351 PUSH1 0x40 DUP7 ADD DUP3 PUSH2 0x12B8 JUMP JUMPDEST POP PUSH1 0x60 DUP4 ADD MLOAD PUSH2 0x1364 PUSH1 0x60 DUP7 ADD DUP3 PUSH2 0x12B8 JUMP JUMPDEST POP PUSH1 0x80 DUP4 ADD MLOAD PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0xA0 DUP4 ADD MLOAD PUSH1 0xA0 DUP6 ADD MSTORE PUSH1 0xC0 DUP4 ADD MLOAD PUSH1 0xC0 DUP6 ADD MSTORE PUSH1 0xE0 DUP4 ADD MLOAD PUSH1 0xE0 DUP6 ADD MSTORE PUSH2 0x100 DUP1 DUP5 ADD MLOAD DUP2 DUP7 ADD MSTORE POP PUSH2 0x120 DUP1 DUP5 ADD MLOAD DUP2 DUP7 ADD MSTORE POP PUSH2 0x140 DUP1 DUP5 ADD MLOAD DUP3 DUP3 DUP8 ADD MSTORE PUSH2 0x13BD DUP4 DUP8 ADD DUP3 PUSH2 0x12D2 JUMP JUMPDEST SWAP3 POP POP POP PUSH2 0x160 DUP1 DUP5 ADD MLOAD DUP6 DUP4 SUB DUP3 DUP8 ADD MSTORE PUSH2 0x13D9 DUP4 DUP3 PUSH2 0x12D2 JUMP JUMPDEST SWAP3 POP POP POP PUSH2 0x180 DUP1 DUP5 ADD MLOAD DUP6 DUP4 SUB DUP3 DUP8 ADD MSTORE PUSH2 0x13F5 DUP4 DUP3 PUSH2 0x12D2 JUMP JUMPDEST SWAP3 POP POP POP PUSH2 0x1A0 DUP1 DUP5 ADD MLOAD DUP6 DUP4 SUB DUP3 DUP8 ADD MSTORE PUSH2 0x1411 DUP4 DUP3 PUSH2 0x12D2 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x142D DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x1631 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 DUP5 DUP3 ADD SWAP1 PUSH1 0x40 DUP6 ADD SWAP1 DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x14B7 JUMPI DUP4 MLOAD DUP4 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x149B JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP5 DUP3 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x60 PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x14F8 PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x12D2 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH1 0x4 DUP6 LT PUSH2 0x153C JUMPI INVALID JUMPDEST SWAP4 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH1 0x8 DUP6 LT PUSH2 0x153C JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x8B3 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x131C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 MSTORE PUSH2 0x1584 PUSH1 0x60 DUP4 ADD DUP7 PUSH2 0x131C JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x1596 DUP2 DUP7 PUSH2 0x12D2 JUMP JUMPDEST SWAP2 POP POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x40 DUP4 ADD MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x1609 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1627 JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x164C JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1634 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x165B JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x1683 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xEC PUSH2 0xE0E5 0x5E 0xEB SWAP1 SELFBALANCE 0xC1 0xFB DIV 0xCE LOG4 0xA6 CALLDATACOPY LOG1 0x4A 0xC8 SGT 0xD PUSH27 0x47AE2A6A79ED4595929D2B64736F6C634300060C00330000000000 ",
                "sourceMap": "5150:7605:14:-:0;;;;;;;;;;;;;;;;;;;"
            },
            "deployedBytecode": {
                "immutableReferences": {},
                "linkReferences": {},
                "object": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c806339b085ad146100515780633b77ebae1461007a578063e9a8e4421461009a578063fcb5c43c146100ad575b600080fd5b61006461005f366004611101565b6100ce565b604051610071919061147f565b60405180910390f35b61008d61008836600461122b565b61026d565b60405161007191906115bd565b6100646100a8366004611101565b6108ba565b6100c06100bb3660046110c9565b61095d565b6040516100719291906115c6565b6060835167ffffffffffffffff811180156100e857600080fd5b50604051908082528060200260200182016040528015610112578160200160208202803683370190505b50905060005b84518114610265573073ffffffffffffffffffffffffffffffffffffffff16633b77ebae62030d4087848151811061014c57fe5b602002602001015187858151811061016057fe5b6020026020010151876040518563ffffffff1660e01b815260040161018793929190611571565b60206040518083038187803b15801561019f57600080fd5b5086fa935050505080156101ee575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682019092526101eb918101906112a0565b60015b610242573d80801561021c576040519150601f19603f3d011682016040523d82523d6000602084013e610221565b606091505b50600083838151811061023057fe5b6020026020010181815250505061025d565b8083838151811061024f57fe5b602002602001018181525050505b600101610118565b509392505050565b600082516000148061028157506080840151155b8061028e575060a0840151155b1561029b575060006108b3565b6102a3610e42565b6040517f9d3fa4b900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff841690639d3fa4b9906102f590889060040161155e565b60606040518083038186803b15801561030d57600080fd5b505afa158015610321573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061034591906111e3565b905060038151600681111561035657fe5b146103655760009150506108b3565b602081015185516040517f8171c40700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff861692638171c407926103be9289906004016114c3565b60206040518083038186803b1580156103d657600080fd5b505afa1580156103ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061040e91906111c3565b61041c5760009150506108b3565b6040517f6070410800000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff851690636070410890610491907ff47261b00000000000000000000000000000000000000000000000000000000090600401611501565b60206040518083038186803b1580156104a957600080fd5b505afa1580156104bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e191906110ad565b905060006104f387610140015161098b565b905073ffffffffffffffffffffffffffffffffffffffff811661051c57600093505050506108b3565b6000808860c001511161053057600061053e565b61053e88610180015161098b565b9050600061055d85604001518a60a00151610a1c90919063ffffffff16565b905080955060006105c2828b60a001518673ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16146105aa578c608001516105bd565b60c08d015160808e01516105bd91610a45565b610a61565b8a516040517f70a082310000000000000000000000000000000000000000000000000000000081529192506000916107189173ffffffffffffffffffffffffffffffffffffffff8816916370a082319161061e91600401611437565b60206040518083038186803b15801561063657600080fd5b505afa15801561064a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061066e91906112a0565b8c516040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff89169163dd62ed3e916106c391908c90600401611458565b60206040518083038186803b1580156106db57600080fd5b505afa1580156106ef573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071391906112a0565b610a9d565b9050818110156107305761072d818385610ab3565b97505b8473ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614158015610781575073ffffffffffffffffffffffffffffffffffffffff841615155b156108ab578a516040517f70a082310000000000000000000000000000000000000000000000000000000081526000916108859173ffffffffffffffffffffffffffffffffffffffff8816916370a08231916107e09190600401611437565b60206040518083038186803b1580156107f857600080fd5b505afa15801561080c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061083091906112a0565b8d516040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff89169163dd62ed3e916106c391908d90600401611458565b90508b60c001518110156108a9576108a689610713838f60c0015188610ab3565b98505b505b505050505050505b9392505050565b60606108c78484846100ce565b905060005b8451811015610265578181815181106108e157fe5b60200260200101516000146109555761093c8282815181106108ff57fe5b602002602001015186838151811061091357fe5b602002602001015160a0015187848151811061092b57fe5b602002602001015160800151610ab3565b82828151811061094857fe5b6020026020010181815250505b6001016108cc565b600080600061096b85610ad7565b60ff169050600061097b85610ad7565b9193505060ff1690509250929050565b600081516000141561099f57506000610a17565b815160241415806109fc57507ff47261b0000000000000000000000000000000000000000000000000000000006109d7836000610ba9565b7fffffffff000000000000000000000000000000000000000000000000000000001614155b15610a0957506000610a17565b610a14826010610bf5565b90505b919050565b600082821115610a3a57610a3a610a3560028585610c35565b610cda565b508082035b92915050565b6000828201838110156108b3576108b3610a3560008686610c35565b6000610a6e848484610ce2565b15610a8157610a81610a35858585610d3c565b610a9583610a8f8685610d5b565b90610d8c565b949350505050565b6000818310610aac57816108b3565b5090919050565b6000610a9583610a8f610ac7826001610a1c565b610ad18887610d5b565b90610a45565b600060129050600060608373ffffffffffffffffffffffffffffffffffffffff166040518060400160405280600481526020017f313ce56700000000000000000000000000000000000000000000000000000000815250604051610b3b919061141b565b600060405180830381855afa9150503d8060008114610b76576040519150601f19603f3d011682016040523d82523d6000602084013e610b7b565b606091505b5091509150818015610b8f57506020815110155b15610ba257610b9f816000610db6565b92505b5050919050565b60008160040183511015610bca57610bca610a356003855185600401610dc2565b5001602001517fffffffff000000000000000000000000000000000000000000000000000000001690565b60008160140183511015610c1657610c16610a356004855185601401610dc2565b50016014015173ffffffffffffffffffffffffffffffffffffffff1690565b606063e946c1bb60e01b848484604051602401610c549392919061152e565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915290509392505050565b805160208201fd5b600082610cf457610cf4610a35610de1565b811580610cff575083155b15610d0c575060006108b3565b60008380610d1657fe5b8584099050610d258584610d5b565b610d31826103e8610d5b565b101595945050505050565b606063339f3de260e01b848484604051602401610c54939291906115d4565b600082610d6a57506000610a3f565b82820282848281610d7757fe5b04146108b3576108b3610a3560018686610c35565b600081610da257610da2610a3560038585610c35565b6000828481610dad57fe5b04949350505050565b60006108b38383610e18565b6060632800659560e01b848484604051602401610c5493929190611550565b60408051808201909152600481527fa791837c00000000000000000000000000000000000000000000000000000000602082015290565b60008160200183511015610e3957610e39610a356005855185602001610dc2565b50016020015190565b6040805160608101909152806000815260006020820181905260409091015290565b8035610a3f81611661565b600082601f830112610e7f578081fd5b8135610e92610e8d82611611565b6115ea565b818152915060208083019084810160005b84811015610ecc57610eba888484358a0101610ed7565b84529282019290820190600101610ea3565b505050505092915050565b600082601f830112610ee7578081fd5b813567ffffffffffffffff811115610efd578182fd5b610f2e60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116016115ea565b9150808252836020828501011115610f4557600080fd5b8060208401602084013760009082016020015292915050565b60006101c0808385031215610f71578182fd5b610f7a816115ea565b915050610f878383610e64565b8152610f968360208401610e64565b6020820152610fa88360408401610e64565b6040820152610fba8360608401610e64565b60608201526080820135608082015260a082013560a082015260c082013560c082015260e082013560e08201526101008083013581830152506101208083013581830152506101408083013567ffffffffffffffff8082111561101c57600080fd5b61102886838701610ed7565b8385015261016092508285013591508082111561104457600080fd5b61105086838701610ed7565b8385015261018092508285013591508082111561106c57600080fd5b61107886838701610ed7565b838501526101a092508285013591508082111561109457600080fd5b506110a185828601610ed7565b82840152505092915050565b6000602082840312156110be578081fd5b81516108b381611661565b600080604083850312156110db578081fd5b82356110e681611661565b915060208301356110f681611661565b809150509250929050565b600080600060608486031215611115578081fd5b833567ffffffffffffffff8082111561112c578283fd5b818601915086601f83011261113f578283fd5b813561114d610e8d82611611565b81815260208082019190858101875b85811015611185576111738d8484358b0101610f5e565b8552938201939082019060010161115c565b5091985089013594505050508082111561119d578283fd5b506111aa86828701610e6f565b9250506111ba8560408601610e64565b90509250925092565b6000602082840312156111d4578081fd5b815180151581146108b3578182fd5b6000606082840312156111f4578081fd5b6111fe60606115ea565b82516007811061120c578283fd5b8152602083810151908201526040928301519281019290925250919050565b60008060006060848603121561123f578283fd5b833567ffffffffffffffff80821115611256578485fd5b61126287838801610f5e565b94506020860135915080821115611277578384fd5b5061128486828701610ed7565b925050604084013561129581611661565b809150509250925092565b6000602082840312156112b1578081fd5b5051919050565b73ffffffffffffffffffffffffffffffffffffffff169052565b600081518084526112ea816020860160208601611631565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60006101c061132c8484516112b8565b602083015161133e60208601826112b8565b50604083015161135160408601826112b8565b50606083015161136460608601826112b8565b506080830151608085015260a083015160a085015260c083015160c085015260e083015160e08501526101008084015181860152506101208084015181860152506101408084015182828701526113bd838701826112d2565b9250505061016080840151858303828701526113d983826112d2565b9250505061018080840151858303828701526113f583826112d2565b925050506101a0808401518583038287015261141183826112d2565b9695505050505050565b6000825161142d818460208701611631565b9190910192915050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff92831681529116602082015260400190565b6020808252825182820181905260009190848201906040850190845b818110156114b75783518352928401929184019160010161149b565b50909695505050505050565b600084825273ffffffffffffffffffffffffffffffffffffffff84166020830152606060408301526114f860608301846112d2565b95945050505050565b7fffffffff0000000000000000000000000000000000000000000000000000000091909116815260200190565b606081016004851061153c57fe5b938152602081019290925260409091015290565b606081016008851061153c57fe5b6000602082526108b3602083018461131c565b600060608252611584606083018661131c565b828103602084015261159681866112d2565b91505073ffffffffffffffffffffffffffffffffffffffff83166040830152949350505050565b90815260200190565b918252602082015260400190565b9283526020830191909152604082015260600190565b60405181810167ffffffffffffffff8111828210171561160957600080fd5b604052919050565b600067ffffffffffffffff821115611627578081fd5b5060209081020190565b60005b8381101561164c578181015183820152602001611634565b8381111561165b576000848401525b50505050565b73ffffffffffffffffffffffffffffffffffffffff8116811461168357600080fd5b5056fea2646970667358221220ec61e0e55eeb9047c1fb04cea4a637a14ac8130d7a47ae2a6a79ed4595929d2b64736f6c634300060c0033",
                "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x4C JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x39B085AD EQ PUSH2 0x51 JUMPI DUP1 PUSH4 0x3B77EBAE EQ PUSH2 0x7A JUMPI DUP1 PUSH4 0xE9A8E442 EQ PUSH2 0x9A JUMPI DUP1 PUSH4 0xFCB5C43C EQ PUSH2 0xAD JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x64 PUSH2 0x5F CALLDATASIZE PUSH1 0x4 PUSH2 0x1101 JUMP JUMPDEST PUSH2 0xCE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x71 SWAP2 SWAP1 PUSH2 0x147F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x8D PUSH2 0x88 CALLDATASIZE PUSH1 0x4 PUSH2 0x122B JUMP JUMPDEST PUSH2 0x26D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x71 SWAP2 SWAP1 PUSH2 0x15BD JUMP JUMPDEST PUSH2 0x64 PUSH2 0xA8 CALLDATASIZE PUSH1 0x4 PUSH2 0x1101 JUMP JUMPDEST PUSH2 0x8BA JUMP JUMPDEST PUSH2 0xC0 PUSH2 0xBB CALLDATASIZE PUSH1 0x4 PUSH2 0x10C9 JUMP JUMPDEST PUSH2 0x95D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x71 SWAP3 SWAP2 SWAP1 PUSH2 0x15C6 JUMP JUMPDEST PUSH1 0x60 DUP4 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0xE8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x112 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 EQ PUSH2 0x265 JUMPI ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x3B77EBAE PUSH3 0x30D40 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x14C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x160 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x187 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1571 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x19F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x1EE JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x1EB SWAP2 DUP2 ADD SWAP1 PUSH2 0x12A0 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x242 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x21C JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x221 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x230 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP PUSH2 0x25D JUMP JUMPDEST DUP1 DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x24F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP JUMPDEST PUSH1 0x1 ADD PUSH2 0x118 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH1 0x0 EQ DUP1 PUSH2 0x281 JUMPI POP PUSH1 0x80 DUP5 ADD MLOAD ISZERO JUMPDEST DUP1 PUSH2 0x28E JUMPI POP PUSH1 0xA0 DUP5 ADD MLOAD ISZERO JUMPDEST ISZERO PUSH2 0x29B JUMPI POP PUSH1 0x0 PUSH2 0x8B3 JUMP JUMPDEST PUSH2 0x2A3 PUSH2 0xE42 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x9D3FA4B900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND SWAP1 PUSH4 0x9D3FA4B9 SWAP1 PUSH2 0x2F5 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x155E JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x30D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x321 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x345 SWAP2 SWAP1 PUSH2 0x11E3 JUMP JUMPDEST SWAP1 POP PUSH1 0x3 DUP2 MLOAD PUSH1 0x6 DUP2 GT ISZERO PUSH2 0x356 JUMPI INVALID JUMPDEST EQ PUSH2 0x365 JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x8B3 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD DUP6 MLOAD PUSH1 0x40 MLOAD PUSH32 0x8171C40700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND SWAP3 PUSH4 0x8171C407 SWAP3 PUSH2 0x3BE SWAP3 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x14C3 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3D6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3EA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x40E SWAP2 SWAP1 PUSH2 0x11C3 JUMP JUMPDEST PUSH2 0x41C JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x8B3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x6070410800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND SWAP1 PUSH4 0x60704108 SWAP1 PUSH2 0x491 SWAP1 PUSH32 0xF47261B000000000000000000000000000000000000000000000000000000000 SWAP1 PUSH1 0x4 ADD PUSH2 0x1501 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4A9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4BD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4E1 SWAP2 SWAP1 PUSH2 0x10AD JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x4F3 DUP8 PUSH2 0x140 ADD MLOAD PUSH2 0x98B JUMP JUMPDEST SWAP1 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x51C JUMPI PUSH1 0x0 SWAP4 POP POP POP POP PUSH2 0x8B3 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP9 PUSH1 0xC0 ADD MLOAD GT PUSH2 0x530 JUMPI PUSH1 0x0 PUSH2 0x53E JUMP JUMPDEST PUSH2 0x53E DUP9 PUSH2 0x180 ADD MLOAD PUSH2 0x98B JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x55D DUP6 PUSH1 0x40 ADD MLOAD DUP11 PUSH1 0xA0 ADD MLOAD PUSH2 0xA1C SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 SWAP6 POP PUSH1 0x0 PUSH2 0x5C2 DUP3 DUP12 PUSH1 0xA0 ADD MLOAD DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x5AA JUMPI DUP13 PUSH1 0x80 ADD MLOAD PUSH2 0x5BD JUMP JUMPDEST PUSH1 0xC0 DUP14 ADD MLOAD PUSH1 0x80 DUP15 ADD MLOAD PUSH2 0x5BD SWAP2 PUSH2 0xA45 JUMP JUMPDEST PUSH2 0xA61 JUMP JUMPDEST DUP11 MLOAD PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP2 SWAP3 POP PUSH1 0x0 SWAP2 PUSH2 0x718 SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP9 AND SWAP2 PUSH4 0x70A08231 SWAP2 PUSH2 0x61E SWAP2 PUSH1 0x4 ADD PUSH2 0x1437 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x636 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x64A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x66E SWAP2 SWAP1 PUSH2 0x12A0 JUMP JUMPDEST DUP13 MLOAD PUSH1 0x40 MLOAD PUSH32 0xDD62ED3E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 AND SWAP2 PUSH4 0xDD62ED3E SWAP2 PUSH2 0x6C3 SWAP2 SWAP1 DUP13 SWAP1 PUSH1 0x4 ADD PUSH2 0x1458 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x6EF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x713 SWAP2 SWAP1 PUSH2 0x12A0 JUMP JUMPDEST PUSH2 0xA9D JUMP JUMPDEST SWAP1 POP DUP2 DUP2 LT ISZERO PUSH2 0x730 JUMPI PUSH2 0x72D DUP2 DUP4 DUP6 PUSH2 0xAB3 JUMP JUMPDEST SWAP8 POP JUMPDEST DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO DUP1 ISZERO PUSH2 0x781 JUMPI POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND ISZERO ISZERO JUMPDEST ISZERO PUSH2 0x8AB JUMPI DUP11 MLOAD PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x0 SWAP2 PUSH2 0x885 SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP9 AND SWAP2 PUSH4 0x70A08231 SWAP2 PUSH2 0x7E0 SWAP2 SWAP1 PUSH1 0x4 ADD PUSH2 0x1437 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7F8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x80C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x830 SWAP2 SWAP1 PUSH2 0x12A0 JUMP JUMPDEST DUP14 MLOAD PUSH1 0x40 MLOAD PUSH32 0xDD62ED3E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 AND SWAP2 PUSH4 0xDD62ED3E SWAP2 PUSH2 0x6C3 SWAP2 SWAP1 DUP14 SWAP1 PUSH1 0x4 ADD PUSH2 0x1458 JUMP JUMPDEST SWAP1 POP DUP12 PUSH1 0xC0 ADD MLOAD DUP2 LT ISZERO PUSH2 0x8A9 JUMPI PUSH2 0x8A6 DUP10 PUSH2 0x713 DUP4 DUP16 PUSH1 0xC0 ADD MLOAD DUP9 PUSH2 0xAB3 JUMP JUMPDEST SWAP9 POP JUMPDEST POP JUMPDEST POP POP POP POP POP POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x8C7 DUP5 DUP5 DUP5 PUSH2 0xCE JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x265 JUMPI DUP2 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x8E1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ PUSH2 0x955 JUMPI PUSH2 0x93C DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x8FF JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x913 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0xA0 ADD MLOAD DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x92B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x80 ADD MLOAD PUSH2 0xAB3 JUMP JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x948 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP JUMPDEST PUSH1 0x1 ADD PUSH2 0x8CC JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x96B DUP6 PUSH2 0xAD7 JUMP JUMPDEST PUSH1 0xFF AND SWAP1 POP PUSH1 0x0 PUSH2 0x97B DUP6 PUSH2 0xAD7 JUMP JUMPDEST SWAP2 SWAP4 POP POP PUSH1 0xFF AND SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x99F JUMPI POP PUSH1 0x0 PUSH2 0xA17 JUMP JUMPDEST DUP2 MLOAD PUSH1 0x24 EQ ISZERO DUP1 PUSH2 0x9FC JUMPI POP PUSH32 0xF47261B000000000000000000000000000000000000000000000000000000000 PUSH2 0x9D7 DUP4 PUSH1 0x0 PUSH2 0xBA9 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND EQ ISZERO JUMPDEST ISZERO PUSH2 0xA09 JUMPI POP PUSH1 0x0 PUSH2 0xA17 JUMP JUMPDEST PUSH2 0xA14 DUP3 PUSH1 0x10 PUSH2 0xBF5 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0xA3A JUMPI PUSH2 0xA3A PUSH2 0xA35 PUSH1 0x2 DUP6 DUP6 PUSH2 0xC35 JUMP JUMPDEST PUSH2 0xCDA JUMP JUMPDEST POP DUP1 DUP3 SUB JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x8B3 JUMPI PUSH2 0x8B3 PUSH2 0xA35 PUSH1 0x0 DUP7 DUP7 PUSH2 0xC35 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA6E DUP5 DUP5 DUP5 PUSH2 0xCE2 JUMP JUMPDEST ISZERO PUSH2 0xA81 JUMPI PUSH2 0xA81 PUSH2 0xA35 DUP6 DUP6 DUP6 PUSH2 0xD3C JUMP JUMPDEST PUSH2 0xA95 DUP4 PUSH2 0xA8F DUP7 DUP6 PUSH2 0xD5B JUMP JUMPDEST SWAP1 PUSH2 0xD8C JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0xAAC JUMPI DUP2 PUSH2 0x8B3 JUMP JUMPDEST POP SWAP1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA95 DUP4 PUSH2 0xA8F PUSH2 0xAC7 DUP3 PUSH1 0x1 PUSH2 0xA1C JUMP JUMPDEST PUSH2 0xAD1 DUP9 DUP8 PUSH2 0xD5B JUMP JUMPDEST SWAP1 PUSH2 0xA45 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x12 SWAP1 POP PUSH1 0x0 PUSH1 0x60 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x4 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x313CE56700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x40 MLOAD PUSH2 0xB3B SWAP2 SWAP1 PUSH2 0x141B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0xB76 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xB7B JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0xB8F JUMPI POP PUSH1 0x20 DUP2 MLOAD LT ISZERO JUMPDEST ISZERO PUSH2 0xBA2 JUMPI PUSH2 0xB9F DUP2 PUSH1 0x0 PUSH2 0xDB6 JUMP JUMPDEST SWAP3 POP JUMPDEST POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x4 ADD DUP4 MLOAD LT ISZERO PUSH2 0xBCA JUMPI PUSH2 0xBCA PUSH2 0xA35 PUSH1 0x3 DUP6 MLOAD DUP6 PUSH1 0x4 ADD PUSH2 0xDC2 JUMP JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x14 ADD DUP4 MLOAD LT ISZERO PUSH2 0xC16 JUMPI PUSH2 0xC16 PUSH2 0xA35 PUSH1 0x4 DUP6 MLOAD DUP6 PUSH1 0x14 ADD PUSH2 0xDC2 JUMP JUMPDEST POP ADD PUSH1 0x14 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH4 0xE946C1BB PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xC54 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x152E JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xCF4 JUMPI PUSH2 0xCF4 PUSH2 0xA35 PUSH2 0xDE1 JUMP JUMPDEST DUP2 ISZERO DUP1 PUSH2 0xCFF JUMPI POP DUP4 ISZERO JUMPDEST ISZERO PUSH2 0xD0C JUMPI POP PUSH1 0x0 PUSH2 0x8B3 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP1 PUSH2 0xD16 JUMPI INVALID JUMPDEST DUP6 DUP5 MULMOD SWAP1 POP PUSH2 0xD25 DUP6 DUP5 PUSH2 0xD5B JUMP JUMPDEST PUSH2 0xD31 DUP3 PUSH2 0x3E8 PUSH2 0xD5B JUMP JUMPDEST LT ISZERO SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH4 0x339F3DE2 PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xC54 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x15D4 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xD6A JUMPI POP PUSH1 0x0 PUSH2 0xA3F JUMP JUMPDEST DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 PUSH2 0xD77 JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x8B3 JUMPI PUSH2 0x8B3 PUSH2 0xA35 PUSH1 0x1 DUP7 DUP7 PUSH2 0xC35 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0xDA2 JUMPI PUSH2 0xDA2 PUSH2 0xA35 PUSH1 0x3 DUP6 DUP6 PUSH2 0xC35 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP2 PUSH2 0xDAD JUMPI INVALID JUMPDEST DIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8B3 DUP4 DUP4 PUSH2 0xE18 JUMP JUMPDEST PUSH1 0x60 PUSH4 0x28006595 PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xC54 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1550 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x4 DUP2 MSTORE PUSH32 0xA791837C00000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO PUSH2 0xE39 JUMPI PUSH2 0xE39 PUSH2 0xA35 PUSH1 0x5 DUP6 MLOAD DUP6 PUSH1 0x20 ADD PUSH2 0xDC2 JUMP JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD SWAP1 SWAP2 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0xA3F DUP2 PUSH2 0x1661 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xE7F JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xE92 PUSH2 0xE8D DUP3 PUSH2 0x1611 JUMP JUMPDEST PUSH2 0x15EA JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0xECC JUMPI PUSH2 0xEBA DUP9 DUP5 DUP5 CALLDATALOAD DUP11 ADD ADD PUSH2 0xED7 JUMP JUMPDEST DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0xEA3 JUMP JUMPDEST POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xEE7 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xEFD JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0xF2E PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F DUP5 ADD AND ADD PUSH2 0x15EA JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0xF45 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP5 ADD CALLDATACOPY PUSH1 0x0 SWAP1 DUP3 ADD PUSH1 0x20 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C0 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xF71 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0xF7A DUP2 PUSH2 0x15EA JUMP JUMPDEST SWAP2 POP POP PUSH2 0xF87 DUP4 DUP4 PUSH2 0xE64 JUMP JUMPDEST DUP2 MSTORE PUSH2 0xF96 DUP4 PUSH1 0x20 DUP5 ADD PUSH2 0xE64 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0xFA8 DUP4 PUSH1 0x40 DUP5 ADD PUSH2 0xE64 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0xFBA DUP4 PUSH1 0x60 DUP5 ADD PUSH2 0xE64 JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP3 ADD CALLDATALOAD PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 DUP3 ADD CALLDATALOAD PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 DUP3 ADD CALLDATALOAD PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0xE0 DUP3 ADD CALLDATALOAD PUSH1 0xE0 DUP3 ADD MSTORE PUSH2 0x100 DUP1 DUP4 ADD CALLDATALOAD DUP2 DUP4 ADD MSTORE POP PUSH2 0x120 DUP1 DUP4 ADD CALLDATALOAD DUP2 DUP4 ADD MSTORE POP PUSH2 0x140 DUP1 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x101C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1028 DUP7 DUP4 DUP8 ADD PUSH2 0xED7 JUMP JUMPDEST DUP4 DUP6 ADD MSTORE PUSH2 0x160 SWAP3 POP DUP3 DUP6 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1044 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1050 DUP7 DUP4 DUP8 ADD PUSH2 0xED7 JUMP JUMPDEST DUP4 DUP6 ADD MSTORE PUSH2 0x180 SWAP3 POP DUP3 DUP6 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x106C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1078 DUP7 DUP4 DUP8 ADD PUSH2 0xED7 JUMP JUMPDEST DUP4 DUP6 ADD MSTORE PUSH2 0x1A0 SWAP3 POP DUP3 DUP6 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1094 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x10A1 DUP6 DUP3 DUP7 ADD PUSH2 0xED7 JUMP JUMPDEST DUP3 DUP5 ADD MSTORE POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x10BE JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x8B3 DUP2 PUSH2 0x1661 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x10DB JUMPI DUP1 DUP2 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x10E6 DUP2 PUSH2 0x1661 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x10F6 DUP2 PUSH2 0x1661 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1115 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x112C JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 DUP7 ADD SWAP2 POP DUP7 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x113F JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x114D PUSH2 0xE8D DUP3 PUSH2 0x1611 JUMP JUMPDEST DUP2 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD SWAP2 SWAP1 DUP6 DUP2 ADD DUP8 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x1185 JUMPI PUSH2 0x1173 DUP14 DUP5 DUP5 CALLDATALOAD DUP12 ADD ADD PUSH2 0xF5E JUMP JUMPDEST DUP6 MSTORE SWAP4 DUP3 ADD SWAP4 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x115C JUMP JUMPDEST POP SWAP2 SWAP9 POP DUP10 ADD CALLDATALOAD SWAP5 POP POP POP POP DUP1 DUP3 GT ISZERO PUSH2 0x119D JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x11AA DUP7 DUP3 DUP8 ADD PUSH2 0xE6F JUMP JUMPDEST SWAP3 POP POP PUSH2 0x11BA DUP6 PUSH1 0x40 DUP7 ADD PUSH2 0xE64 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x11D4 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x8B3 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x11F4 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x11FE PUSH1 0x60 PUSH2 0x15EA JUMP JUMPDEST DUP3 MLOAD PUSH1 0x7 DUP2 LT PUSH2 0x120C JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP4 DUP2 ADD MLOAD SWAP1 DUP3 ADD MSTORE PUSH1 0x40 SWAP3 DUP4 ADD MLOAD SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x123F JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1256 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x1262 DUP8 DUP4 DUP9 ADD PUSH2 0xF5E JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1277 JUMPI DUP4 DUP5 REVERT JUMPDEST POP PUSH2 0x1284 DUP7 DUP3 DUP8 ADD PUSH2 0xED7 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH2 0x1295 DUP2 PUSH2 0x1661 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x12B1 JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x12EA DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x1631 JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C0 PUSH2 0x132C DUP5 DUP5 MLOAD PUSH2 0x12B8 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MLOAD PUSH2 0x133E PUSH1 0x20 DUP7 ADD DUP3 PUSH2 0x12B8 JUMP JUMPDEST POP PUSH1 0x40 DUP4 ADD MLOAD PUSH2 0x1351 PUSH1 0x40 DUP7 ADD DUP3 PUSH2 0x12B8 JUMP JUMPDEST POP PUSH1 0x60 DUP4 ADD MLOAD PUSH2 0x1364 PUSH1 0x60 DUP7 ADD DUP3 PUSH2 0x12B8 JUMP JUMPDEST POP PUSH1 0x80 DUP4 ADD MLOAD PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0xA0 DUP4 ADD MLOAD PUSH1 0xA0 DUP6 ADD MSTORE PUSH1 0xC0 DUP4 ADD MLOAD PUSH1 0xC0 DUP6 ADD MSTORE PUSH1 0xE0 DUP4 ADD MLOAD PUSH1 0xE0 DUP6 ADD MSTORE PUSH2 0x100 DUP1 DUP5 ADD MLOAD DUP2 DUP7 ADD MSTORE POP PUSH2 0x120 DUP1 DUP5 ADD MLOAD DUP2 DUP7 ADD MSTORE POP PUSH2 0x140 DUP1 DUP5 ADD MLOAD DUP3 DUP3 DUP8 ADD MSTORE PUSH2 0x13BD DUP4 DUP8 ADD DUP3 PUSH2 0x12D2 JUMP JUMPDEST SWAP3 POP POP POP PUSH2 0x160 DUP1 DUP5 ADD MLOAD DUP6 DUP4 SUB DUP3 DUP8 ADD MSTORE PUSH2 0x13D9 DUP4 DUP3 PUSH2 0x12D2 JUMP JUMPDEST SWAP3 POP POP POP PUSH2 0x180 DUP1 DUP5 ADD MLOAD DUP6 DUP4 SUB DUP3 DUP8 ADD MSTORE PUSH2 0x13F5 DUP4 DUP3 PUSH2 0x12D2 JUMP JUMPDEST SWAP3 POP POP POP PUSH2 0x1A0 DUP1 DUP5 ADD MLOAD DUP6 DUP4 SUB DUP3 DUP8 ADD MSTORE PUSH2 0x1411 DUP4 DUP3 PUSH2 0x12D2 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x142D DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x1631 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 DUP5 DUP3 ADD SWAP1 PUSH1 0x40 DUP6 ADD SWAP1 DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x14B7 JUMPI DUP4 MLOAD DUP4 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x149B JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP5 DUP3 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x60 PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x14F8 PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x12D2 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH1 0x4 DUP6 LT PUSH2 0x153C JUMPI INVALID JUMPDEST SWAP4 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH1 0x8 DUP6 LT PUSH2 0x153C JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x8B3 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x131C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 MSTORE PUSH2 0x1584 PUSH1 0x60 DUP4 ADD DUP7 PUSH2 0x131C JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x1596 DUP2 DUP7 PUSH2 0x12D2 JUMP JUMPDEST SWAP2 POP POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x40 DUP4 ADD MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x1609 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1627 JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x164C JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1634 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x165B JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x1683 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xEC PUSH2 0xE0E5 0x5E 0xEB SWAP1 SELFBALANCE 0xC1 0xFB DIV 0xCE LOG4 0xA6 CALLDATACOPY LOG1 0x4A 0xC8 SGT 0xD PUSH27 0x47AE2A6A79ED4595929D2B64736F6C634300060C00330000000000 ",
                "sourceMap": "5150:7605:14:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6424:948;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;8889:3400;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;7813:936::-;;;;;;:::i;:::-;;:::i;5494:435::-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;6424:948::-;6627:47;6737:6;:13;6723:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;6723:28:14;;6690:61;;6766:9;6761:605;6786:6;:13;6781:1;:18;6761:605;;6840:4;:32;;;5474:5;6962:6;6969:1;6962:9;;;;;;;;;;;;;;6996:15;7012:1;6996:18;;;;;;;;;;;;;;7039:8;6840:229;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;6840:229:14;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;6820:536;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7340:1;7304:30;7335:1;7304:33;;;;;;;;;;;;;:37;;;;;7199:157;6820:536;;;7177:6;7141:30;7172:1;7141:33;;;;;;;;;;;;;:42;;;;;7086:112;6820:536;6801:3;;6761:605;;;;6424:948;;;;;:::o;8889:3400::-;9091:27;9138:9;:16;9158:1;9138:21;:64;;;-1:-1:-1;9175:22:14;;;;:27;9138:64;:107;;;-1:-1:-1;9218:22:14;;;;:27;9138:107;9134:154;;;-1:-1:-1;9276:1:14;9269:8;;9134:154;9298:36;;:::i;:::-;9337:28;;;;;:21;;;;;;:28;;9359:5;;9337:28;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;9298:67;-1:-1:-1;9404:30:14;9379:21;;:55;;;;;;;;;9375:94;;9457:1;9450:8;;;;;9375:94;9513:19;;;;9534:18;;9483:81;;;;;:29;;;;;;:81;;9554:9;;9483:81;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;9478:121;;9587:1;9580:8;;;;;9478:121;9626:44;;;;;9608:15;;9626:22;;;;;;:44;;9649:20;;9626:44;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;9608:62;;9680:25;9708:49;9736:5;:20;;;9708:27;:49::i;:::-;9680:77;-1:-1:-1;9771:31:14;;;9767:70;;9825:1;9818:8;;;;;;;9767:70;9846:28;9894:1;9877:5;:14;;;:18;:117;;9992:1;9877:117;;;9910:52;9938:5;:23;;;9910:27;:52::i;:::-;9846:148;;10004:28;10035:82;10079:9;:37;;;10035:5;:22;;;:43;;:82;;;;:::i;:::-;10004:113;;10149:20;10127:42;;10339:32;10374:263;10424:20;10458:5;:22;;;10511:10;10494:27;;:13;:27;;;:133;;10605:5;:22;;;10494:133;;;10571:14;;;;10540:22;;;;:46;;:30;:46::i;:::-;10374:36;:263::i;:::-;10898:18;;10877:40;;;;;10339:298;;-1:-1:-1;10811:28:14;;10842:148;;10877:20;;;;;;:40;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;10952:18;;10931:49;;;;;:20;;;;;;:49;;10952:18;10972:7;;10931:49;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;10842:21;:148::i;:::-;10811:179;;11170:24;11147:20;:47;11143:263;;;11232:163;11281:20;11319:24;11361:20;11232:31;:163::i;:::-;11210:185;;11143:263;11589:10;11572:27;;:13;:27;;;;:65;;;;-1:-1:-1;11603:34:14;;;;;11572:65;11568:715;;;11755:18;;11731:43;;;;;11653:36;;11692:166;;11731:23;;;;;;:43;;11755:18;11731:43;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;11816:18;;11792:52;;;;;:23;;;;;;:52;;11816:18;11836:7;;11792:52;;;:::i;11692:166::-;11653:205;;11907:5;:14;;;11876:28;:45;11872:401;;;11963:295;12006:19;12047:193;12104:28;12158:5;:14;;;12198:20;12047:31;:193::i;11963:295::-;11941:317;;11872:401;11568:715;;8889:3400;;;;;;;;;;;;;:::o;7813:936::-;8016:47;8112:114;8159:6;8179:15;8208:8;8112:33;:114::i;:::-;8079:147;;8367:9;8362:381;8386:6;:13;8382:1;:17;8362:381;;;8424:30;8455:1;8424:33;;;;;;;;;;;;;;8461:1;8424:38;8420:313;;8518:200;8571:30;8602:1;8571:33;;;;;;;;;;;;;;8626:6;8633:1;8626:9;;;;;;;;;;;;;;:26;;;8674:6;8681:1;8674:9;;;;;;;;;;;;;;:26;;;8518:31;:200::i;:::-;8482:30;8513:1;8482:33;;;;;;;;;;;;;:236;;;;;8420:313;8401:3;;8362:381;;5494:435;5641:7;5650;5673:25;5701:66;5748:17;5701:31;:66::i;:::-;5673:94;;;;5777:23;5803:66;5850:17;5803:31;:66::i;:::-;5887:17;;-1:-1:-1;;5777:92:14;;;-1:-1:-1;5494:435:14;;;;;:::o;12295:458::-;12402:20;12442:9;:16;12462:1;12442:21;12438:85;;;-1:-1:-1;12509:1:14;12479:33;;12438:85;12536:9;:16;12556:2;12536:22;;:85;;;-1:-1:-1;12601:20:14;12574:23;:9;12595:1;12574:20;:23::i;:::-;:47;;;;12536:85;12532:157;;;-1:-1:-1;12675:1:14;12645:33;;12532:157;12720:25;:9;12742:2;12720:21;:25::i;:::-;12698:48;;12295:458;;;;:::o;1625:373:39:-;1711:7;1742:1;1738;:5;1734:236;;;1759:200;1784:174;1844:62;1924:1;1943;1784:42;:174::i;:::-;1759:24;:200::i;:::-;-1:-1:-1;1986:5:39;;;1625:373;;;;;:::o;2004:392::-;2090:7;2125:5;;;2144;;;2140:232;;;2165:196;2190:170;2250:58;2326:1;2345;2190:42;:170::i;1159:609:38:-;1327:21;1368:110;1406:9;1433:11;1462:6;1368:20;:110::i;:::-;1364:295;;;1494:154;1519:128;1571:9;1598:11;1627:6;1519:34;:128::i;1494:154::-;1685:46;1719:11;1685:25;:9;1703:6;1685:17;:25::i;:::-;:33;;:46::i;:::-;1669:62;1159:609;-1:-1:-1;;;;1159:609:38:o;2544:135:39:-;2629:7;2663:1;2659;:5;:13;;2671:1;2659:13;;;-1:-1:-1;2667:1:39;;2652:20;-1:-1:-1;2544:135:39:o;3834:545:38:-;3997:21;4237:104;4329:11;4237:70;4284:22;4329:11;4304:1;4284:19;:22::i;:::-;4237:25;:9;4255:6;4237:17;:25::i;:::-;:46;;:70::i;3886:391:36:-;3979:19;4030:2;4014:18;;4043:15;4060:23;4095:5;4087:25;;4113:18;;;;;;;;;;;;;;;;;4087:45;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4042:90;;;;4146:10;:37;;;;;4181:2;4160:10;:17;:23;;4146:37;4142:129;;;4221:38;4245:10;4257:1;4221:23;:38::i;:::-;4199:61;;4142:129;3886:391;;;;;:::o;17014:880:37:-;17134:13;17178:5;17186:1;17178:9;17167:1;:8;:20;17163:299;;;17203:248;17228:222;17293:90;17401:1;:8;17427:5;17435:1;17427:9;17228:47;:222::i;17203:248::-;-1:-1:-1;17635:13:37;17538:2;17635:13;17629:20;17788:66;17776:79;;17014:880::o;10896:1080::-;11017:14;11062:5;11070:2;11062:10;11051:1;:8;:21;11047:330;;;11088:278;11113:252;11178:92;11288:1;:8;11314:5;11322:2;11314:10;11113:47;:252::i;11088:278::-;-1:-1:-1;11878:13:37;11623:2;11878:13;11872:20;11894:42;11868:69;;10896:1080::o;1401:322:43:-;1554:12;818:10;1625:28;;1667:9;1690:1;1705;1589:127;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1401:322:43;;;;;:::o;1531:170:42:-;1674:9;1668:16;1661:4;1650:9;1646:20;1639:46;4646:1886:38;4809:12;4841:16;4837:115;;4873:68;4898:42;:40;:42::i;4873:68::-;5762:11;;;:29;;-1:-1:-1;5777:14:38;;5762:29;5758:72;;;-1:-1:-1;5814:5:38;5807:12;;5758:72;6325:17;6408:11;6345:84;;;;;6385:9;6365:6;6345:84;6325:104;-1:-1:-1;6476:25:38;:9;6494:6;6476:17;:25::i;:::-;6449:23;:9;6467:4;6449:17;:23::i;:::-;:52;;;4646:1886;-1:-1:-1;;;;;4646:1886:38:o;1142:335:41:-;1298:12;934:10;1369:23;;1406:9;1429:11;1454:6;1333:137;;;;;;;;;;:::i;764:457:39:-;850:7;877:6;873:45;;-1:-1:-1;906:1:39;899:8;;873:45;939:5;;;943:1;939;:5;:1;958:5;;;;;:10;954:243;;984:202;1009:176;1069:64;1151:1;1170;1009:42;:176::i;1227:392::-;1313:7;1340:6;1336:232;;1362:195;1387:169;1447:57;1522:1;1541;1387:42;:169::i;1362:195::-;1577:9;1593:1;1589;:5;;;;;;;1227:392;-1:-1:-1;;;;1227:392:39:o;16122:220:37:-;16243:14;16290:21;16302:1;16305:5;16290:11;:21::i;1334:378:40:-;1522:12;1274:10;1593:37;;1644:9;1667:6;1687:8;1557:148;;;;;;;;;;:::i;994:142:41:-;1107:22;;;;;;;;;;;;;;;;;994:142;:::o;14301:688:37:-;14422:14;14467:5;14475:2;14467:10;14456:1;:8;:21;14452:306;;;14493:254;14518:228;14583:95;14696:1;:8;14722:5;14730:2;14722:10;14518:47;:228::i;14493:254::-;-1:-1:-1;14936:13:37;14838:2;14936:13;14930:20;;14301:688::o;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;5:130::-;72:20;;97:33;72:20;97:33;:::i;299:705::-;;425:3;418:4;410:6;406:17;402:27;392:2;;-1:-1;;433:12;392:2;480:6;467:20;502:89;517:73;583:6;517:73;:::i;:::-;502:89;:::i;:::-;619:21;;;493:98;-1:-1;663:4;676:14;;;;651:17;;;771:1;756:242;781:6;778:1;775:13;756:242;;;888:46;930:3;663:4;864:3;851:17;655:6;839:30;;888:46;:::i;:::-;876:59;;949:14;;;;977;;;;803:1;796:9;756:242;;;760:14;;;;;385:619;;;;:::o;2077:440::-;;2178:3;2171:4;2163:6;2159:17;2155:27;2145:2;;-1:-1;;2186:12;2145:2;2233:6;2220:20;22002:18;21994:6;21991:30;21988:2;;;-1:-1;;22024:12;21988:2;2255:64;22165:4;22097:9;2171:4;22082:6;22078:17;22074:33;22155:15;2255:64;:::i;:::-;2246:73;;2339:6;2332:5;2325:21;2443:3;22165:4;2434:6;2367;2425:16;;2422:25;2419:2;;;2460:1;;2450:12;2419:2;25198:6;22165:4;2367:6;2363:17;22165:4;2401:5;2397:16;25175:30;25254:1;25236:16;;;22165:4;25236:16;25229:27;2401:5;2138:379;-1:-1;;2138:379::o;3648:2734::-;;3760:6;;3748:9;3743:3;3739:19;3735:32;3732:2;;;-1:-1;;3770:12;3732:2;3798:22;3760:6;3798:22;:::i;:::-;3789:31;;;3910:49;3955:3;3931:22;3910:49;:::i;:::-;3892:16;3885:75;4062:49;4107:3;4029:2;4087:9;4083:22;4062:49;:::i;:::-;4029:2;4048:5;4044:16;4037:75;4221:49;4266:3;4188:2;4246:9;4242:22;4221:49;:::i;:::-;4188:2;4207:5;4203:16;4196:75;4374:49;4419:3;4341:2;4399:9;4395:22;4374:49;:::i;:::-;4341:2;4360:5;4356:16;4349:75;4497:3;4556:9;4552:22;6456:20;4497:3;4517:5;4513:16;4506:75;4654:3;4713:9;4709:22;6456:20;4654:3;4674:5;4670:16;4663:75;4803:3;4862:9;4858:22;6456:20;4803:3;4823:5;4819:16;4812:75;4952:3;5011:9;5007:22;6456:20;4952:3;4972:5;4968:16;4961:75;5114:3;;5175:9;5171:22;6456:20;5114:3;5134:5;5130:18;5123:77;;5261:3;;5322:9;5318:22;6456:20;5261:3;5281:5;5277:18;5270:77;;5446:3;;5435:9;5431:19;5418:33;5471:18;;5463:6;5460:30;5457:2;;;3878:1;;5493:12;5457:2;5540:58;5594:3;5585:6;5574:9;5570:22;5540:58;:::i;:::-;5446:3;5524:5;5520:18;5513:86;5698:3;;;;5687:9;5683:19;5670:33;5656:47;;5471:18;5715:6;5712:30;5709:2;;;3878:1;;5745:12;5709:2;5792:58;5846:3;5837:6;5826:9;5822:22;5792:58;:::i;:::-;5698:3;5776:5;5772:18;5765:86;5953:3;;;;5942:9;5938:19;5925:33;5911:47;;5471:18;5970:6;5967:30;5964:2;;;3878:1;;6000:12;5964:2;6047:58;6101:3;6092:6;6081:9;6077:22;6047:58;:::i;:::-;5953:3;6031:5;6027:18;6020:86;6208:3;;;;6197:9;6193:19;6180:33;6166:47;;5471:18;6225:6;6222:30;6219:2;;;3878:1;;6255:12;6219:2;;6302:58;6356:3;6347:6;6336:9;6332:22;6302:58;:::i;:::-;6208:3;6286:5;6282:18;6275:86;;;3726:2656;;;;:::o;6667:263::-;;6782:2;6770:9;6761:7;6757:23;6753:32;6750:2;;;-1:-1;;6788:12;6750:2;226:6;220:13;238:33;265:5;238:33;:::i;6937:366::-;;;7058:2;7046:9;7037:7;7033:23;7029:32;7026:2;;;-1:-1;;7064:12;7026:2;85:6;72:20;97:33;124:5;97:33;:::i;:::-;7116:63;-1:-1;7216:2;7255:22;;72:20;97:33;72:20;97:33;:::i;:::-;7224:63;;;;7020:283;;;;;:::o;7310:863::-;;;;7548:2;7536:9;7527:7;7523:23;7519:32;7516:2;;;-1:-1;;7554:12;7516:2;7612:17;7599:31;7650:18;;7642:6;7639:30;7636:2;;;-1:-1;;7672:12;7636:2;7786:6;7775:9;7771:22;;;1185:3;1178:4;1170:6;1166:17;1162:27;1152:2;;-1:-1;;1193:12;1152:2;1240:6;1227:20;1262:103;1277:87;1357:6;1277:87;:::i;1262:103::-;1393:21;;;1437:4;1450:14;;;;1371:16;1425:17;;;-1:-1;1530:256;1555:6;1552:1;1549:13;1530:256;;;1662:60;1718:3;1437:4;1638:3;1625:17;1429:6;1613:30;;1662:60;:::i;:::-;1650:73;;1737:14;;;;1765;;;;1577:1;1570:9;1530:256;;;-1:-1;7692:111;;-1:-1;7853:18;;7840:32;;-1:-1;;;;7881:30;;;7878:2;;;-1:-1;;7914:12;7878:2;;7944:87;8023:7;8014:6;8003:9;7999:22;7944:87;:::i;:::-;7934:97;;;8086:71;8149:7;8068:2;8129:9;8125:22;8086:71;:::i;:::-;8076:81;;7510:663;;;;;:::o;8180:257::-;;8292:2;8280:9;8271:7;8267:23;8263:32;8260:2;;;-1:-1;;8298:12;8260:2;1881:6;1875:13;26108:5;23568:13;23561:21;26086:5;26083:32;26073:2;;-1:-1;;26119:12;8444:317;;8586:2;8574:9;8565:7;8561:23;8557:32;8554:2;;;-1:-1;;8592:12;8554:2;3067:20;8586:2;3067:20;:::i;:::-;2798:6;2792:13;26514:1;26507:5;26504:12;26494:2;;-1:-1;;26520:12;26494:2;3151:102;;3319:2;3384:22;;;2013:13;3334:16;;;3327:86;3497:2;3562:22;;;6604:13;3512:16;;;3505:86;;;;-1:-1;3158:16;8548:213;-1:-1;8548:213::o;8768:763::-;;;;8956:2;8944:9;8935:7;8931:23;8927:32;8924:2;;;-1:-1;;8962:12;8924:2;9020:17;9007:31;9058:18;;9050:6;9047:30;9044:2;;;-1:-1;;9080:12;9044:2;9110:76;9178:7;9169:6;9158:9;9154:22;9110:76;:::i;:::-;9100:86;;9251:2;9240:9;9236:18;9223:32;9209:46;;9058:18;9267:6;9264:30;9261:2;;;-1:-1;;9297:12;9261:2;;9327:62;9381:7;9372:6;9361:9;9357:22;9327:62;:::i;:::-;9317:72;;;9426:2;9487:9;9483:22;2610:20;2635:51;2680:5;2635:51;:::i;:::-;9434:81;;;;8918:613;;;;;:::o;9538:263::-;;9653:2;9641:9;9632:7;9628:23;9624:32;9621:2;;;-1:-1;;9659:12;9621:2;-1:-1;6604:13;;9615:186;-1:-1;9615:186::o;9990:103::-;24349:42;24338:54;10051:37;;10045:48::o;11186:323::-;;11318:5;22448:12;22863:6;22858:3;22851:19;11401:52;11446:6;22900:4;22895:3;22891:14;22900:4;11427:5;11423:16;11401:52;:::i;:::-;25635:2;25615:14;25631:7;25611:28;11465:39;;;;22900:4;11465:39;;11266:243;-1:-1;;11266:243::o;12821:2796::-;;12968:6;13073:63;13121:14;13050:16;13044:23;13073:63;:::i;:::-;13223:4;13216:5;13212:16;13206:23;13235:63;13223:4;13287:3;13283:14;13269:12;13235:63;:::i;:::-;;13392:4;13385:5;13381:16;13375:23;13404:63;13392:4;13456:3;13452:14;13438:12;13404:63;:::i;:::-;;13555:4;13548:5;13544:16;13538:23;13567:63;13555:4;13619:3;13615:14;13601:12;13567:63;:::i;:::-;;13721:4;13714:5;13710:16;13704:23;13721:4;13785:3;13781:14;11020:37;13887:4;13880:5;13876:16;13870:23;13887:4;13951:3;13947:14;11020:37;14045:4;14038:5;14034:16;14028:23;14045:4;14109:3;14105:14;11020:37;14203:4;14196:5;14192:16;14186:23;14203:4;14267:3;14263:14;11020:37;14374:6;;14367:5;14363:18;14357:25;14374:6;14440:3;14436:16;11020:37;;14532:6;;14525:5;14521:18;14515:25;14532:6;14598:3;14594:16;11020:37;;14700:6;;14693:5;14689:18;14683:25;12968:6;14700;14732:3;14728:16;14721:40;14776:71;12968:6;12963:3;12959:16;14828:12;14776:71;:::i;:::-;14768:79;;;;14942:6;;14935:5;14931:18;14925:25;14998:3;14992:4;14988:14;14942:6;14974:3;14970:16;14963:40;15018:71;15084:4;15070:12;15018:71;:::i;:::-;15010:79;;;;15187:6;;15180:5;15176:18;15170:25;15243:3;15237:4;15233:14;15187:6;15219:3;15215:16;15208:40;15263:71;15329:4;15315:12;15263:71;:::i;:::-;15255:79;;;;15432:6;;15425:5;15421:18;15415:25;15488:3;15482:4;15478:14;15432:6;15464:3;15460:16;15453:40;15508:71;15574:4;15560:12;15508:71;:::i;:::-;15601:11;12941:2676;-1:-1;;;;;;12941:2676::o;15854:271::-;;12026:5;22448:12;12137:52;12182:6;12177:3;12170:4;12163:5;12159:16;12137:52;:::i;:::-;12201:16;;;;;15988:137;-1:-1;;15988:137::o;16132:222::-;24349:42;24338:54;;;;10051:37;;16259:2;16244:18;;16230:124::o;16361:333::-;24349:42;24338:54;;;10051:37;;24338:54;;16680:2;16665:18;;10051:37;16516:2;16501:18;;16487:207::o;16701:370::-;16878:2;16892:47;;;22448:12;;16863:18;;;22851:19;;;16701:370;;16878:2;22302:14;;;;22891;;;;16701:370;10659:260;10684:6;10681:1;10678:13;10659:260;;;10745:13;;11020:37;;22706:14;;;;9962;;;;10706:1;10699:9;10659:260;;;-1:-1;16945:116;;16849:222;-1:-1;;;;;;16849:222::o;17078:528::-;;11050:5;11027:3;11020:37;24349:42;23484:5;24338:54;17443:2;17432:9;17428:18;10051:37;17279:2;17480;17469:9;17465:18;17458:48;17520:76;17279:2;17268:9;17264:18;17582:6;17520:76;:::i;:::-;17512:84;17250:356;-1:-1;;;;;17250:356::o;17613:218::-;23745:66;23734:78;;;;11138:36;;17738:2;17723:18;;17709:122::o;17838:480::-;18039:2;18024:18;;25741:1;25731:12;;25721:2;;25747:9;25721:2;12487:68;;;18221:2;18206:18;;11020:37;;;;18304:2;18289:18;;;11020:37;18010:308;:::o;18325:510::-;18541:2;18526:18;;25874:1;25864:12;;25854:2;;25880:9;18842:362;;19015:2;19036:17;19029:47;19090:104;19015:2;19004:9;19000:18;19180:6;19090:104;:::i;19211:704::-;;19476:2;19497:17;19490:47;19551:104;19476:2;19465:9;19461:18;19641:6;19551:104;:::i;:::-;19703:9;19697:4;19693:20;19688:2;19677:9;19673:18;19666:48;19728:76;19799:4;19790:6;19728:76;:::i;:::-;19720:84;;;24349:42;23484:5;24338:54;19901:2;19890:9;19886:18;12318:68;19447:468;;;;;;:::o;19922:222::-;11020:37;;;20049:2;20034:18;;20020:124::o;20151:333::-;11020:37;;;20470:2;20455:18;;11020:37;20306:2;20291:18;;20277:207::o;20491:444::-;11020:37;;;20838:2;20823:18;;11020:37;;;;20921:2;20906:18;;11020:37;20674:2;20659:18;;20645:290::o;20942:256::-;21004:2;20998:9;21030:17;;;21105:18;21090:34;;21126:22;;;21087:62;21084:2;;;21162:1;;21152:12;21084:2;21004;21171:22;20982:216;;-1:-1;20982:216::o;21205:313::-;;21373:18;21365:6;21362:30;21359:2;;;-1:-1;;21395:12;21359:2;-1:-1;21440:4;21428:17;;;21493:15;;21296:222::o;25271:268::-;25336:1;25343:101;25357:6;25354:1;25351:13;25343:101;;;25424:11;;;25418:18;25405:11;;;25398:39;25379:2;25372:10;25343:101;;;25459:6;25456:1;25453:13;25450:2;;;25336:1;25515:6;25510:3;25506:16;25499:27;25450:2;;25320:219;;;:::o;25903:117::-;24349:42;25990:5;24338:54;25965:5;25962:35;25952:2;;26011:1;;26001:12;25952:2;25946:74;:::o"
            }
        }
    },
    "sourceTreeHashHex": "0x3d4033d875a3a9f1b8bea53c04f28242a1c5f3059eb5c9dfe576c07faee37ae0",
    "sources": {
        "./NativeOrderSampler.sol": {
            "id": 14
        },
        "@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol": {
            "id": 36
        },
        "@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol": {
            "id": 42
        },
        "@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol": {
            "id": 37
        },
        "@0x/contracts-utils/contracts/src/v06/errors/LibBytesRichErrorsV06.sol": {
            "id": 40
        },
        "@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol": {
            "id": 35
        },
        "@0x/contracts-utils/contracts/src/v06/LibMathV06.sol": {
            "id": 38
        },
        "@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol": {
            "id": 39
        },
        "@0x/contracts-utils/contracts/src/v06/errors/LibSafeMathRichErrorsV06.sol": {
            "id": 43
        },
        "@0x/contracts-utils/contracts/src/v06/errors/LibMathRichErrorsV06.sol": {
            "id": 41
        }
    },
    "sourceCodes": {
        "./NativeOrderSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibMathV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol\";\n\n\ninterface IExchange {\n\n    /// @dev V3 Order structure.\n    struct Order {\n        // Address that created the order.\n        address makerAddress;\n        // Address that is allowed to fill the order.\n        // If set to 0, any address is allowed to fill the order.\n        address takerAddress;\n        // Address that will recieve fees when order is filled.\n        address feeRecipientAddress;\n        // Address that is allowed to call Exchange contract methods that affect this order.\n        // If set to 0, any address is allowed to call these methods.\n        address senderAddress;\n        // Amount of makerAsset being offered by maker. Must be greater than 0.\n        uint256 makerAssetAmount;\n        // Amount of takerAsset being bid on by maker. Must be greater than 0.\n        uint256 takerAssetAmount;\n        // Fee paid to feeRecipient by maker when order is filled.\n        uint256 makerFee;\n        // Fee paid to feeRecipient by taker when order is filled.\n        uint256 takerFee;\n        // Timestamp in seconds at which order expires.\n        uint256 expirationTimeSeconds;\n        // Arbitrary number to facilitate uniqueness of the order's hash.\n        uint256 salt;\n        // Encoded data that can be decoded by a specified proxy contract when transferring makerAsset.\n        // The leading bytes4 references the id of the asset proxy.\n        bytes makerAssetData;\n        // Encoded data that can be decoded by a specified proxy contract when transferring takerAsset.\n        // The leading bytes4 references the id of the asset proxy.\n        bytes takerAssetData;\n        // Encoded data that can be decoded by a specified proxy contract when transferring makerFeeAsset.\n        // The leading bytes4 references the id of the asset proxy.\n        bytes makerFeeAssetData;\n        // Encoded data that can be decoded by a specified proxy contract when transferring takerFeeAsset.\n        // The leading bytes4 references the id of the asset proxy.\n        bytes takerFeeAssetData;\n    }\n\n    // A valid order remains fillable until it is expired, fully filled, or cancelled.\n    // An order's status is unaffected by external factors, like account balances.\n    enum OrderStatus {\n        INVALID,                     // Default value\n        INVALID_MAKER_ASSET_AMOUNT,  // Order does not have a valid maker asset amount\n        INVALID_TAKER_ASSET_AMOUNT,  // Order does not have a valid taker asset amount\n        FILLABLE,                    // Order is fillable\n        EXPIRED,                     // Order has already expired\n        FULLY_FILLED,                // Order is fully filled\n        CANCELLED                    // Order has been cancelled\n    }\n\n    /// @dev Order information returned by `getOrderInfo()`.\n    struct OrderInfo {\n        OrderStatus orderStatus;              // Status that describes order's validity and fillability.\n        bytes32 orderHash;                    // EIP712 typed data hash of the order (see LibOrder.getTypedDataHash).\n        uint256 orderTakerAssetFilledAmount;  // Amount of order that has already been filled.\n    }\n\n    /// @dev Gets information about an order: status, hash, and amount filled.\n    /// @param order Order to gather information on.\n    /// @return orderInfo Information about the order and its state.\n    function getOrderInfo(IExchange.Order calldata order)\n        external\n        view\n        returns (IExchange.OrderInfo memory orderInfo);\n\n    /// @dev Verifies that a hash has been signed by the given signer.\n    /// @param hash Any 32-byte hash.\n    /// @param signature Proof that the hash has been signed by signer.\n    /// @return isValid `true` if the signature is valid for the given hash and signer.\n    function isValidHashSignature(\n        bytes32 hash,\n        address signerAddress,\n        bytes calldata signature\n    )\n        external\n        view\n        returns (bool isValid);\n\n    /// @dev Gets an asset proxy.\n    /// @param assetProxyId Id of the asset proxy.\n    /// @return The asset proxy registered to assetProxyId. Returns 0x0 if no proxy is registered.\n    function getAssetProxy(bytes4 assetProxyId)\n        external\n        view\n        returns (address);\n}\n\ncontract NativeOrderSampler {\n    using LibSafeMathV06 for uint256;\n    using LibBytesV06 for bytes;\n\n    /// @dev The Exchange ERC20Proxy ID.\n    bytes4 private constant ERC20_ASSET_PROXY_ID = 0xf47261b0;\n    /// @dev Gas limit for calls to `getOrderFillableTakerAmount()`.\n    uint256 constant internal DEFAULT_CALL_GAS = 200e3; // 200k\n\n    function getTokenDecimals(\n        address makerTokenAddress,\n        address takerTokenAddress\n    )\n        public\n        view\n        returns (uint256, uint256)\n    {\n        uint256 fromTokenDecimals = LibERC20TokenV06.compatDecimals(IERC20TokenV06(makerTokenAddress));\n        uint256 toTokenDecimals = LibERC20TokenV06.compatDecimals(IERC20TokenV06(takerTokenAddress));\n        return (fromTokenDecimals, toTokenDecimals);\n    }\n\n    /// @dev Queries the fillable taker asset amounts of native orders.\n    ///      Effectively ignores orders that have empty signatures or\n    ///      maker/taker asset amounts (returning 0).\n    /// @param orders Native orders to query.\n    /// @param orderSignatures Signatures for each respective order in `orders`.\n    /// @param exchange The V3 exchange.\n    /// @return orderFillableTakerAssetAmounts How much taker asset can be filled\n    ///         by each order in `orders`.\n    function getOrderFillableTakerAssetAmounts(\n        IExchange.Order[] memory orders,\n        bytes[] memory orderSignatures,\n        IExchange exchange\n    )\n        public\n        view\n        returns (uint256[] memory orderFillableTakerAssetAmounts)\n    {\n        orderFillableTakerAssetAmounts = new uint256[](orders.length);\n        for (uint256 i = 0; i != orders.length; i++) {\n            try\n                this.getOrderFillableTakerAmount\n                    {gas: DEFAULT_CALL_GAS}\n                    (\n                       orders[i],\n                       orderSignatures[i],\n                       exchange\n                    )\n                returns (uint256 amount)\n            {\n                orderFillableTakerAssetAmounts[i] = amount;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                orderFillableTakerAssetAmounts[i] = 0;\n            }\n        }\n    }\n\n    /// @dev Queries the fillable taker asset amounts of native orders.\n    ///      Effectively ignores orders that have empty signatures or\n    /// @param orders Native orders to query.\n    /// @param orderSignatures Signatures for each respective order in `orders`.\n    /// @param exchange The V3 exchange.\n    /// @return orderFillableMakerAssetAmounts How much maker asset can be filled\n    ///         by each order in `orders`.\n    function getOrderFillableMakerAssetAmounts(\n        IExchange.Order[] memory orders,\n        bytes[] memory orderSignatures,\n        IExchange exchange\n    )\n        public\n        view\n        returns (uint256[] memory orderFillableMakerAssetAmounts)\n    {\n        orderFillableMakerAssetAmounts = getOrderFillableTakerAssetAmounts(\n            orders,\n            orderSignatures,\n            exchange\n        );\n        // `orderFillableMakerAssetAmounts` now holds taker asset amounts, so\n        // convert them to maker asset amounts.\n        for (uint256 i = 0; i < orders.length; ++i) {\n            if (orderFillableMakerAssetAmounts[i] != 0) {\n                orderFillableMakerAssetAmounts[i] = LibMathV06.getPartialAmountCeil(\n                    orderFillableMakerAssetAmounts[i],\n                    orders[i].takerAssetAmount,\n                    orders[i].makerAssetAmount\n                );\n            }\n        }\n    }\n\n    /// @dev Get the fillable taker amount of an order, taking into account\n    ///      order state, maker fees, and maker balances.\n    function getOrderFillableTakerAmount(\n        IExchange.Order memory order,\n        bytes memory signature,\n        IExchange exchange\n    )\n        virtual\n        public\n        view\n        returns (uint256 fillableTakerAmount)\n    {\n        if (signature.length == 0 ||\n            order.makerAssetAmount == 0 ||\n            order.takerAssetAmount == 0)\n        {\n            return 0;\n        }\n\n        IExchange.OrderInfo memory orderInfo = exchange.getOrderInfo(order);\n        if (orderInfo.orderStatus != IExchange.OrderStatus.FILLABLE) {\n            return 0;\n        }\n        if (!exchange.isValidHashSignature(orderInfo.orderHash, order.makerAddress, signature)) {\n            return 0;\n        }\n        address spender = exchange.getAssetProxy(ERC20_ASSET_PROXY_ID);\n        IERC20TokenV06 makerToken = _getTokenFromERC20AssetData(order.makerAssetData);\n        if (makerToken == IERC20TokenV06(0)) {\n            return 0;\n        }\n        IERC20TokenV06 makerFeeToken = order.makerFee > 0\n            ? _getTokenFromERC20AssetData(order.makerFeeAssetData)\n            : IERC20TokenV06(0);\n        uint256 remainingTakerAmount = order.takerAssetAmount\n            .safeSub(orderInfo.orderTakerAssetFilledAmount);\n        fillableTakerAmount = remainingTakerAmount;\n        // The total fillable maker amount is the remaining fillable maker amount\n        // PLUS maker fees, if maker fees are denominated in the maker token.\n        uint256 totalFillableMakerAmount = LibMathV06.safeGetPartialAmountFloor(\n            remainingTakerAmount,\n            order.takerAssetAmount,\n            makerFeeToken == makerToken\n                ? order.makerAssetAmount.safeAdd(order.makerFee)\n                : order.makerAssetAmount\n        );\n        // The spendable amount of maker tokens (by the maker) is the lesser of\n        // the maker's balance and the allowance they've granted to the ERC20Proxy.\n        uint256 spendableMakerAmount = LibSafeMathV06.min256(\n            makerToken.balanceOf(order.makerAddress),\n            makerToken.allowance(order.makerAddress, spender)\n        );\n        // Scale the fillable taker amount by the ratio of the maker's\n        // spendable maker amount over the total fillable maker amount.\n        if (spendableMakerAmount < totalFillableMakerAmount) {\n            fillableTakerAmount = LibMathV06.getPartialAmountCeil(\n                spendableMakerAmount,\n                totalFillableMakerAmount,\n                remainingTakerAmount\n            );\n        }\n        // If the maker fee is denominated in another token, constrain\n        // the fillable taker amount by how much the maker can pay of that token.\n        if (makerFeeToken != makerToken && makerFeeToken != IERC20TokenV06(0)) {\n            uint256 spendableExtraMakerFeeAmount = LibSafeMathV06.min256(\n                makerFeeToken.balanceOf(order.makerAddress),\n                makerFeeToken.allowance(order.makerAddress, spender)\n            );\n            if (spendableExtraMakerFeeAmount < order.makerFee) {\n                fillableTakerAmount = LibSafeMathV06.min256(\n                    fillableTakerAmount,\n                    LibMathV06.getPartialAmountCeil(\n                        spendableExtraMakerFeeAmount,\n                        order.makerFee,\n                        remainingTakerAmount\n                    )\n                );\n            }\n        }\n    }\n\n    function _getTokenFromERC20AssetData(bytes memory assetData)\n        private\n        pure\n        returns (IERC20TokenV06 token)\n    {\n        if (assetData.length == 0) {\n            return IERC20TokenV06(address(0));\n        }\n        if (assetData.length != 36 ||\n            assetData.readBytes4(0) != ERC20_ASSET_PROXY_ID)\n        {\n            return IERC20TokenV06(address(0));\n        }\n        return IERC20TokenV06(assetData.readAddress(16));\n    }\n}\n",
        "@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol\";\nimport \"./IERC20TokenV06.sol\";\n\n\nlibrary LibERC20TokenV06 {\n    bytes constant private DECIMALS_CALL_DATA = hex\"313ce567\";\n\n    /// @dev Calls `IERC20TokenV06(token).approve()`.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param spender The address that receives an allowance.\n    /// @param allowance The allowance to set.\n    function compatApprove(\n        IERC20TokenV06 token,\n        address spender,\n        uint256 allowance\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.approve.selector,\n            spender,\n            allowance\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).approve()` and sets the allowance to the\n    ///      maximum if the current approval is not already >= an amount.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param spender The address that receives an allowance.\n    /// @param amount The minimum allowance needed.\n    function approveIfBelow(\n        IERC20TokenV06 token,\n        address spender,\n        uint256 amount\n    )\n        internal\n    {\n        if (token.allowance(address(this), spender) < amount) {\n            compatApprove(token, spender, uint256(-1));\n        }\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).transfer()`.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param to The address that receives the tokens\n    /// @param amount Number of tokens to transfer.\n    function compatTransfer(\n        IERC20TokenV06 token,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.transfer.selector,\n            to,\n            amount\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).transferFrom()`.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param from The owner of the tokens.\n    /// @param to The address that receives the tokens\n    /// @param amount Number of tokens to transfer.\n    function compatTransferFrom(\n        IERC20TokenV06 token,\n        address from,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.transferFrom.selector,\n            from,\n            to,\n            amount\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Retrieves the number of decimals for a token.\n    ///      Returns `18` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @return tokenDecimals The number of decimals places for the token.\n    function compatDecimals(IERC20TokenV06 token)\n        internal\n        view\n        returns (uint8 tokenDecimals)\n    {\n        tokenDecimals = 18;\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(DECIMALS_CALL_DATA);\n        if (didSucceed && resultData.length >= 32) {\n            tokenDecimals = uint8(LibBytesV06.readUint256(resultData, 0));\n        }\n    }\n\n    /// @dev Retrieves the allowance for a token, owner, and spender.\n    ///      Returns `0` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @param owner The owner of the tokens.\n    /// @param spender The address the spender.\n    /// @return allowance_ The allowance for a token, owner, and spender.\n    function compatAllowance(IERC20TokenV06 token, address owner, address spender)\n        internal\n        view\n        returns (uint256 allowance_)\n    {\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(\n            abi.encodeWithSelector(\n                token.allowance.selector,\n                owner,\n                spender\n            )\n        );\n        if (didSucceed && resultData.length >= 32) {\n            allowance_ = LibBytesV06.readUint256(resultData, 0);\n        }\n    }\n\n    /// @dev Retrieves the balance for a token owner.\n    ///      Returns `0` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @param owner The owner of the tokens.\n    /// @return balance The token balance of an owner.\n    function compatBalanceOf(IERC20TokenV06 token, address owner)\n        internal\n        view\n        returns (uint256 balance)\n    {\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(\n            abi.encodeWithSelector(\n                token.balanceOf.selector,\n                owner\n            )\n        );\n        if (didSucceed && resultData.length >= 32) {\n            balance = LibBytesV06.readUint256(resultData, 0);\n        }\n    }\n\n    /// @dev Check if the data returned by a non-static call to an ERC20 token\n    ///      is a successful result. Supported functions are `transfer()`,\n    ///      `transferFrom()`, and `approve()`.\n    /// @param resultData The raw data returned by a non-static call to the ERC20 token.\n    /// @return isSuccessful Whether the result data indicates success.\n    function isSuccessfulResult(bytes memory resultData)\n        internal\n        pure\n        returns (bool isSuccessful)\n    {\n        if (resultData.length == 0) {\n            return true;\n        }\n        if (resultData.length >= 32) {\n            uint256 result = LibBytesV06.readUint256(resultData, 0);\n            if (result == 1) {\n                return true;\n            }\n        }\n    }\n\n    /// @dev Executes a call on address `target` with calldata `callData`\n    ///      and asserts that either nothing was returned or a single boolean\n    ///      was returned equal to `true`.\n    /// @param target The call target.\n    /// @param callData The abi-encoded call data.\n    function _callWithOptionalBooleanResult(\n        address target,\n        bytes memory callData\n    )\n        private\n    {\n        (bool didSucceed, bytes memory resultData) = target.call(callData);\n        if (didSucceed && isSuccessfulResult(resultData)) {\n            return;\n        }\n        LibRichErrorsV06.rrevert(resultData);\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibRichErrorsV06 {\n\n    // bytes4(keccak256(\"Error(string)\"))\n    bytes4 internal constant STANDARD_ERROR_SELECTOR = 0x08c379a0;\n\n    // solhint-disable func-name-mixedcase\n    /// @dev ABI encode a standard, string revert error payload.\n    ///      This is the same payload that would be included by a `revert(string)`\n    ///      solidity statement. It has the function signature `Error(string)`.\n    /// @param message The error string.\n    /// @return The ABI encoded error.\n    function StandardError(string memory message)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            STANDARD_ERROR_SELECTOR,\n            bytes(message)\n        );\n    }\n    // solhint-enable func-name-mixedcase\n\n    /// @dev Reverts an encoded rich revert reason `errorData`.\n    /// @param errorData ABI encoded error data.\n    function rrevert(bytes memory errorData)\n        internal\n        pure\n    {\n        assembly {\n            revert(add(errorData, 0x20), mload(errorData))\n        }\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./errors/LibBytesRichErrorsV06.sol\";\nimport \"./errors/LibRichErrorsV06.sol\";\n\n\nlibrary LibBytesV06 {\n\n    using LibBytesV06 for bytes;\n\n    /// @dev Gets the memory address for a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of byte array. This\n    ///         points to the header of the byte array which contains\n    ///         the length.\n    function rawAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := input\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Gets the memory address for the contents of a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of the contents of the byte array.\n    function contentAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := add(input, 32)\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Copies `length` bytes from memory location `source` to `dest`.\n    /// @param dest memory address to copy bytes to.\n    /// @param source memory address to copy bytes from.\n    /// @param length number of bytes to copy.\n    function memCopy(\n        uint256 dest,\n        uint256 source,\n        uint256 length\n    )\n        internal\n        pure\n    {\n        if (length < 32) {\n            // Handle a partial word by reading destination and masking\n            // off the bits we are interested in.\n            // This correctly handles overlap, zero lengths and source == dest\n            assembly {\n                let mask := sub(exp(256, sub(32, length)), 1)\n                let s := and(mload(source), not(mask))\n                let d := and(mload(dest), mask)\n                mstore(dest, or(s, d))\n            }\n        } else {\n            // Skip the O(length) loop when source == dest.\n            if (source == dest) {\n                return;\n            }\n\n            // For large copies we copy whole words at a time. The final\n            // word is aligned to the end of the range (instead of after the\n            // previous) to handle partial words. So a copy will look like this:\n            //\n            //  ####\n            //      ####\n            //          ####\n            //            ####\n            //\n            // We handle overlap in the source and destination range by\n            // changing the copying direction. This prevents us from\n            // overwriting parts of source that we still need to copy.\n            //\n            // This correctly handles source == dest\n            //\n            if (source > dest) {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because it\n                    // is easier to compare with in the loop, and these\n                    // are also the addresses we need for copying the\n                    // last bytes.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the last 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the last bytes in\n                    // source already due to overlap.\n                    let last := mload(sEnd)\n\n                    // Copy whole words front to back\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} lt(source, sEnd) {} {\n                        mstore(dest, mload(source))\n                        source := add(source, 32)\n                        dest := add(dest, 32)\n                    }\n\n                    // Write the last 32 bytes\n                    mstore(dEnd, last)\n                }\n            } else {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because those\n                    // are the starting points when copying a word at the end.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the first 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the first bytes in\n                    // source already due to overlap.\n                    let first := mload(source)\n\n                    // Copy whole words back to front\n                    // We use a signed comparisson here to allow dEnd to become\n                    // negative (happens when source and dest < 32). Valid\n                    // addresses in local memory will never be larger than\n                    // 2**255, so they can be safely re-interpreted as signed.\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} slt(dest, dEnd) {} {\n                        mstore(dEnd, mload(sEnd))\n                        sEnd := sub(sEnd, 32)\n                        dEnd := sub(dEnd, 32)\n                    }\n\n                    // Write the first 32 bytes\n                    mstore(dest, first)\n                }\n            }\n        }\n    }\n\n    /// @dev Returns a slices from a byte array.\n    /// @param b The byte array to take a slice from.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function slice(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure and copy contents\n        result = new bytes(to - from);\n        memCopy(\n            result.contentAddress(),\n            b.contentAddress() + from,\n            result.length\n        );\n        return result;\n    }\n\n    /// @dev Returns a slice from a byte array without preserving the input.\n    ///      When `from == 0`, the original array will match the slice.\n    ///      In other cases its state will be corrupted.\n    /// @param b The byte array to take a slice from. Will be destroyed in the process.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function sliceDestructive(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure around [from, to) in-place.\n        assembly {\n            result := add(b, from)\n            mstore(result, sub(to, from))\n        }\n        return result;\n    }\n\n    /// @dev Pops the last byte off of a byte array by modifying its length.\n    /// @param b Byte array that will be modified.\n    /// @return result The byte that was popped off.\n    function popLastByte(bytes memory b)\n        internal\n        pure\n        returns (bytes1 result)\n    {\n        if (b.length == 0) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanZeroRequired,\n                b.length,\n                0\n            ));\n        }\n\n        // Store last byte.\n        result = b[b.length - 1];\n\n        assembly {\n            // Decrement length of byte array.\n            let newLen := sub(mload(b), 1)\n            mstore(b, newLen)\n        }\n        return result;\n    }\n\n    /// @dev Tests equality of two byte arrays.\n    /// @param lhs First byte array to compare.\n    /// @param rhs Second byte array to compare.\n    /// @return equal True if arrays are the same. False otherwise.\n    function equals(\n        bytes memory lhs,\n        bytes memory rhs\n    )\n        internal\n        pure\n        returns (bool equal)\n    {\n        // Keccak gas cost is 30 + numWords * 6. This is a cheap way to compare.\n        // We early exit on unequal lengths, but keccak would also correctly\n        // handle this.\n        return lhs.length == rhs.length && keccak256(lhs) == keccak256(rhs);\n    }\n\n    /// @dev Reads an address from a position in a byte array.\n    /// @param b Byte array containing an address.\n    /// @param index Index in byte array of address.\n    /// @return result address from byte array.\n    function readAddress(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (address result)\n    {\n        if (b.length < index + 20) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Read address from array memory\n        assembly {\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 20-byte mask to obtain address\n            result := and(mload(add(b, index)), 0xffffffffffffffffffffffffffffffffffffffff)\n        }\n        return result;\n    }\n\n    /// @dev Writes an address into a specific position in a byte array.\n    /// @param b Byte array to insert address into.\n    /// @param index Index in byte array of address.\n    /// @param input Address to put into byte array.\n    function writeAddress(\n        bytes memory b,\n        uint256 index,\n        address input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 20) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Store address into array memory\n        assembly {\n            // The address occupies 20 bytes and mstore stores 32 bytes.\n            // First fetch the 32-byte word where we'll be storing the address, then\n            // apply a mask so we have only the bytes in the word that the address will not occupy.\n            // Then combine these bytes with the address and store the 32 bytes back to memory with mstore.\n\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 12-byte mask to obtain extra bytes occupying word of memory where we'll store the address\n            let neighbors := and(\n                mload(add(b, index)),\n                0xffffffffffffffffffffffff0000000000000000000000000000000000000000\n            )\n\n            // Make sure input address is clean.\n            // (Solidity does not guarantee this)\n            input := and(input, 0xffffffffffffffffffffffffffffffffffffffff)\n\n            // Store the neighbors and address into memory\n            mstore(add(b, index), xor(input, neighbors))\n        }\n    }\n\n    /// @dev Reads a bytes32 value from a position in a byte array.\n    /// @param b Byte array containing a bytes32 value.\n    /// @param index Index in byte array of bytes32 value.\n    /// @return result bytes32 value from byte array.\n    function readBytes32(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        if (b.length < index + 32) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            result := mload(add(b, index))\n        }\n        return result;\n    }\n\n    /// @dev Writes a bytes32 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input bytes32 to put into byte array.\n    function writeBytes32(\n        bytes memory b,\n        uint256 index,\n        bytes32 input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 32) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            mstore(add(b, index), input)\n        }\n    }\n\n    /// @dev Reads a uint256 value from a position in a byte array.\n    /// @param b Byte array containing a uint256 value.\n    /// @param index Index in byte array of uint256 value.\n    /// @return result uint256 value from byte array.\n    function readUint256(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (uint256 result)\n    {\n        result = uint256(readBytes32(b, index));\n        return result;\n    }\n\n    /// @dev Writes a uint256 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input uint256 to put into byte array.\n    function writeUint256(\n        bytes memory b,\n        uint256 index,\n        uint256 input\n    )\n        internal\n        pure\n    {\n        writeBytes32(b, index, bytes32(input));\n    }\n\n    /// @dev Reads an unpadded bytes4 value from a position in a byte array.\n    /// @param b Byte array containing a bytes4 value.\n    /// @param index Index in byte array of bytes4 value.\n    /// @return result bytes4 value from byte array.\n    function readBytes4(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes4 result)\n    {\n        if (b.length < index + 4) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsFourRequired,\n                b.length,\n                index + 4\n            ));\n        }\n\n        // Arrays are prefixed by a 32 byte length field\n        index += 32;\n\n        // Read the bytes4 from array memory\n        assembly {\n            result := mload(add(b, index))\n            // Solidity does not require us to clean the trailing bytes.\n            // We do it anyway\n            result := and(result, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)\n        }\n        return result;\n    }\n\n    /// @dev Writes a new length to a byte array.\n    ///      Decreasing length will lead to removing the corresponding lower order bytes from the byte array.\n    ///      Increasing length may lead to appending adjacent in-memory bytes to the end of the byte array.\n    /// @param b Bytes array to write new length to.\n    /// @param length New length of byte array.\n    function writeLength(bytes memory b, uint256 length)\n        internal\n        pure\n    {\n        assembly {\n            mstore(b, length)\n        }\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/errors/LibBytesRichErrorsV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibBytesRichErrorsV06 {\n\n    enum InvalidByteOperationErrorCodes {\n        FromLessThanOrEqualsToRequired,\n        ToLessThanOrEqualsLengthRequired,\n        LengthGreaterThanZeroRequired,\n        LengthGreaterThanOrEqualsFourRequired,\n        LengthGreaterThanOrEqualsTwentyRequired,\n        LengthGreaterThanOrEqualsThirtyTwoRequired,\n        LengthGreaterThanOrEqualsNestedBytesLengthRequired,\n        DestinationLengthGreaterThanOrEqualSourceLengthRequired\n    }\n\n    // bytes4(keccak256(\"InvalidByteOperationError(uint8,uint256,uint256)\"))\n    bytes4 internal constant INVALID_BYTE_OPERATION_ERROR_SELECTOR =\n        0x28006595;\n\n    // solhint-disable func-name-mixedcase\n    function InvalidByteOperationError(\n        InvalidByteOperationErrorCodes errorCode,\n        uint256 offset,\n        uint256 required\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            INVALID_BYTE_OPERATION_ERROR_SELECTOR,\n            errorCode,\n            offset,\n            required\n        );\n    }\n}\n",
        "@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\ninterface IERC20TokenV06 {\n\n    // solhint-disable no-simple-event-func-name\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 value\n    );\n\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n\n    /// @dev send `value` token to `to` from `msg.sender`\n    /// @param to The address of the recipient\n    /// @param value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transfer(address to, uint256 value)\n        external\n        returns (bool);\n\n    /// @dev send `value` token to `to` from `from` on the condition it is approved by `from`\n    /// @param from The address of the sender\n    /// @param to The address of the recipient\n    /// @param value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    )\n        external\n        returns (bool);\n\n    /// @dev `msg.sender` approves `spender` to spend `value` tokens\n    /// @param spender The address of the account able to transfer the tokens\n    /// @param value The amount of wei to be approved for transfer\n    /// @return Always true if the call has enough gas to complete execution\n    function approve(address spender, uint256 value)\n        external\n        returns (bool);\n\n    /// @dev Query total supply of token\n    /// @return Total supply of token\n    function totalSupply()\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the balance of `owner`.\n    /// @param owner The address from which the balance will be retrieved\n    /// @return Balance of owner\n    function balanceOf(address owner)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the allowance for `spender` to spend from `owner`.\n    /// @param owner The address of the account owning tokens\n    /// @param spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the number of decimals this token has.\n    function decimals()\n        external\n        view\n        returns (uint8);\n}\n",
        "@0x/contracts-utils/contracts/src/v06/LibMathV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./LibSafeMathV06.sol\";\nimport \"./errors/LibRichErrorsV06.sol\";\nimport \"./errors/LibMathRichErrorsV06.sol\";\n\n\nlibrary LibMathV06 {\n\n    using LibSafeMathV06 for uint256;\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    ///      Reverts if rounding error is >= 0.1%\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded down.\n    function safeGetPartialAmountFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        if (isRoundingErrorFloor(\n                numerator,\n                denominator,\n                target\n        )) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.RoundingError(\n                numerator,\n                denominator,\n                target\n            ));\n        }\n\n        partialAmount = numerator.safeMul(target).safeDiv(denominator);\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    ///      Reverts if rounding error is >= 0.1%\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded up.\n    function safeGetPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        if (isRoundingErrorCeil(\n                numerator,\n                denominator,\n                target\n        )) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.RoundingError(\n                numerator,\n                denominator,\n                target\n            ));\n        }\n\n        // safeDiv computes `floor(a / b)`. We use the identity (a, b integer):\n        //       ceil(a / b) = floor((a + b - 1) / b)\n        // To implement `ceil(a / b)` using safeDiv.\n        partialAmount = numerator.safeMul(target)\n            .safeAdd(denominator.safeSub(1))\n            .safeDiv(denominator);\n\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded down.\n    function getPartialAmountFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        partialAmount = numerator.safeMul(target).safeDiv(denominator);\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded up.\n    function getPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        // safeDiv computes `floor(a / b)`. We use the identity (a, b integer):\n        //       ceil(a / b) = floor((a + b - 1) / b)\n        // To implement `ceil(a / b)` using safeDiv.\n        partialAmount = numerator.safeMul(target)\n            .safeAdd(denominator.safeSub(1))\n            .safeDiv(denominator);\n\n        return partialAmount;\n    }\n\n    /// @dev Checks if rounding error >= 0.1% when rounding down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to multiply with numerator/denominator.\n    /// @return isError Rounding error is present.\n    function isRoundingErrorFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bool isError)\n    {\n        if (denominator == 0) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.DivisionByZeroError());\n        }\n\n        // The absolute rounding error is the difference between the rounded\n        // value and the ideal value. The relative rounding error is the\n        // absolute rounding error divided by the absolute value of the\n        // ideal value. This is undefined when the ideal value is zero.\n        //\n        // The ideal value is `numerator * target / denominator`.\n        // Let's call `numerator * target % denominator` the remainder.\n        // The absolute error is `remainder / denominator`.\n        //\n        // When the ideal value is zero, we require the absolute error to\n        // be zero. Fortunately, this is always the case. The ideal value is\n        // zero iff `numerator == 0` and/or `target == 0`. In this case the\n        // remainder and absolute error are also zero.\n        if (target == 0 || numerator == 0) {\n            return false;\n        }\n\n        // Otherwise, we want the relative rounding error to be strictly\n        // less than 0.1%.\n        // The relative error is `remainder / (numerator * target)`.\n        // We want the relative error less than 1 / 1000:\n        //        remainder / (numerator * denominator)  <  1 / 1000\n        // or equivalently:\n        //        1000 * remainder  <  numerator * target\n        // so we have a rounding error iff:\n        //        1000 * remainder  >=  numerator * target\n        uint256 remainder = mulmod(\n            target,\n            numerator,\n            denominator\n        );\n        isError = remainder.safeMul(1000) >= numerator.safeMul(target);\n        return isError;\n    }\n\n    /// @dev Checks if rounding error >= 0.1% when rounding up.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to multiply with numerator/denominator.\n    /// @return isError Rounding error is present.\n    function isRoundingErrorCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bool isError)\n    {\n        if (denominator == 0) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.DivisionByZeroError());\n        }\n\n        // See the comments in `isRoundingError`.\n        if (target == 0 || numerator == 0) {\n            // When either is zero, the ideal value and rounded value are zero\n            // and there is no rounding error. (Although the relative error\n            // is undefined.)\n            return false;\n        }\n        // Compute remainder as before\n        uint256 remainder = mulmod(\n            target,\n            numerator,\n            denominator\n        );\n        remainder = denominator.safeSub(remainder) % denominator;\n        isError = remainder.safeMul(1000) >= numerator.safeMul(target);\n        return isError;\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./errors/LibRichErrorsV06.sol\";\nimport \"./errors/LibSafeMathRichErrorsV06.sol\";\n\n\nlibrary LibSafeMathV06 {\n\n    function safeMul(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        if (c / a != b) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.MULTIPLICATION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function safeDiv(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b == 0) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.DIVISION_BY_ZERO,\n                a,\n                b\n            ));\n        }\n        uint256 c = a / b;\n        return c;\n    }\n\n    function safeSub(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b > a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.SUBTRACTION_UNDERFLOW,\n                a,\n                b\n            ));\n        }\n        return a - b;\n    }\n\n    function safeAdd(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint256 c = a + b;\n        if (c < a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.ADDITION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function max256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a < b ? a : b;\n    }\n\n    function safeMul128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (a == 0) {\n            return 0;\n        }\n        uint128 c = a * b;\n        if (c / a != b) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.MULTIPLICATION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function safeDiv128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (b == 0) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.DIVISION_BY_ZERO,\n                a,\n                b\n            ));\n        }\n        uint128 c = a / b;\n        return c;\n    }\n\n    function safeSub128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (b > a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.SUBTRACTION_UNDERFLOW,\n                a,\n                b\n            ));\n        }\n        return a - b;\n    }\n\n    function safeAdd128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        uint128 c = a + b;\n        if (c < a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.ADDITION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function max128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        return a < b ? a : b;\n    }\n\n    function safeDowncastToUint128(uint256 a)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (a > type(uint128).max) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256DowncastError(\n                LibSafeMathRichErrorsV06.DowncastErrorCodes.VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT128,\n                a\n            ));\n        }\n        return uint128(a);\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/errors/LibSafeMathRichErrorsV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibSafeMathRichErrorsV06 {\n\n    // bytes4(keccak256(\"Uint256BinOpError(uint8,uint256,uint256)\"))\n    bytes4 internal constant UINT256_BINOP_ERROR_SELECTOR =\n        0xe946c1bb;\n\n    // bytes4(keccak256(\"Uint256DowncastError(uint8,uint256)\"))\n    bytes4 internal constant UINT256_DOWNCAST_ERROR_SELECTOR =\n        0xc996af7b;\n\n    enum BinOpErrorCodes {\n        ADDITION_OVERFLOW,\n        MULTIPLICATION_OVERFLOW,\n        SUBTRACTION_UNDERFLOW,\n        DIVISION_BY_ZERO\n    }\n\n    enum DowncastErrorCodes {\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT32,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT64,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT96,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT128\n    }\n\n    // solhint-disable func-name-mixedcase\n    function Uint256BinOpError(\n        BinOpErrorCodes errorCode,\n        uint256 a,\n        uint256 b\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            UINT256_BINOP_ERROR_SELECTOR,\n            errorCode,\n            a,\n            b\n        );\n    }\n\n    function Uint256DowncastError(\n        DowncastErrorCodes errorCode,\n        uint256 a\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            UINT256_DOWNCAST_ERROR_SELECTOR,\n            errorCode,\n            a\n        );\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/errors/LibMathRichErrorsV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibMathRichErrorsV06 {\n\n    // bytes4(keccak256(\"DivisionByZeroError()\"))\n    bytes internal constant DIVISION_BY_ZERO_ERROR =\n        hex\"a791837c\";\n\n    // bytes4(keccak256(\"RoundingError(uint256,uint256,uint256)\"))\n    bytes4 internal constant ROUNDING_ERROR_SELECTOR =\n        0x339f3de2;\n\n    // solhint-disable func-name-mixedcase\n    function DivisionByZeroError()\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return DIVISION_BY_ZERO_ERROR;\n    }\n\n    function RoundingError(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            ROUNDING_ERROR_SELECTOR,\n            numerator,\n            denominator,\n            target\n        );\n    }\n}\n"
    },
    "compiler": {
        "name": "solc",
        "version": "0.6.12+commit.27d51765",
        "settings": {
            "remappings": [
                "@0x/contracts-utils=/Users/jacob/projects/ethdev/0x/workspace-remote/workspace/0x-monorepo/packages/asset-swapper/node_modules/@0x/contracts-utils",
                "@0x/contracts-erc20=/Users/jacob/projects/ethdev/0x/workspace-remote/workspace/0x-monorepo/packages/asset-swapper/node_modules/@0x/contracts-erc20",
                "@0x/contracts-zero-ex=/Users/jacob/projects/ethdev/0x/workspace-remote/workspace/0x-monorepo/packages/asset-swapper/node_modules/@0x/contracts-zero-ex"
            ],
            "optimizer": {
                "enabled": true,
                "runs": 62500,
                "details": {
                    "yul": true,
                    "deduplicate": true,
                    "cse": true,
                    "constantOptimizer": true
                }
            },
            "outputSelection": {
                "*": {
                    "*": [
                        "abi",
                        "devdoc",
                        "evm.bytecode.object",
                        "evm.bytecode.sourceMap",
                        "evm.deployedBytecode.object",
                        "evm.deployedBytecode.sourceMap"
                    ]
                }
            },
            "evmVersion": "istanbul"
        }
    },
    "chains": {}
}
