{
    "schemaVersion": "2.0.0",
    "contractName": "KyberSampler",
    "compilerOutput": {
        "abi": [
            {
                "inputs": [
                    {
                        "internalType": "contract IEtherTokenV06",
                        "name": "weth",
                        "type": "address"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "constructor"
            },
            {
                "inputs": [
                    {
                        "internalType": "bytes4",
                        "name": "selector",
                        "type": "bytes4"
                    },
                    {
                        "internalType": "address",
                        "name": "sellToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "buyToken",
                        "type": "address"
                    },
                    {
                        "internalType": "bytes",
                        "name": "bridgeData",
                        "type": "bytes"
                    },
                    {
                        "internalType": "uint256",
                        "name": "amountIn",
                        "type": "uint256"
                    }
                ],
                "name": "_callRevert",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "bytes4",
                        "name": "selector",
                        "type": "bytes4"
                    },
                    {
                        "internalType": "address",
                        "name": "sellToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "buyToken",
                        "type": "address"
                    },
                    {
                        "internalType": "bytes",
                        "name": "bridgeData",
                        "type": "bytes"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "amountsIn",
                        "type": "uint256[]"
                    }
                ],
                "name": "_mintCallRevert",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "uint256",
                                "name": "reserveOffset",
                                "type": "uint256"
                            },
                            {
                                "internalType": "address",
                                "name": "hintHandler",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "networkProxy",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "weth",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes",
                                "name": "hint",
                                "type": "bytes"
                            }
                        ],
                        "internalType": "struct KyberSampler.KyberSamplerOpts",
                        "name": "opts",
                        "type": "tuple"
                    },
                    {
                        "internalType": "bytes32",
                        "name": "reserveId",
                        "type": "bytes32"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    }
                ],
                "name": "encodeKyberHint",
                "outputs": [
                    {
                        "internalType": "bytes",
                        "name": "hint",
                        "type": "bytes"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "uint256",
                                "name": "reserveOffset",
                                "type": "uint256"
                            },
                            {
                                "internalType": "address",
                                "name": "hintHandler",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "networkProxy",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "weth",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes",
                                "name": "hint",
                                "type": "bytes"
                            }
                        ],
                        "internalType": "struct KyberSampler.KyberSamplerOpts",
                        "name": "opts",
                        "type": "tuple"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromKyberNetwork",
                "outputs": [
                    {
                        "internalType": "bytes32",
                        "name": "reserveId",
                        "type": "bytes32"
                    },
                    {
                        "internalType": "bytes",
                        "name": "hint",
                        "type": "bytes"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "gasUsed",
                        "type": "uint256[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "uint256",
                                "name": "reserveOffset",
                                "type": "uint256"
                            },
                            {
                                "internalType": "address",
                                "name": "hintHandler",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "networkProxy",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "weth",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes",
                                "name": "hint",
                                "type": "bytes"
                            }
                        ],
                        "internalType": "struct KyberSampler.KyberSamplerOpts",
                        "name": "opts",
                        "type": "tuple"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromKyberNetwork",
                "outputs": [
                    {
                        "internalType": "bytes32",
                        "name": "reserveId",
                        "type": "bytes32"
                    },
                    {
                        "internalType": "bytes",
                        "name": "hint",
                        "type": "bytes"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "gasUsed",
                        "type": "uint256[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "sellToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "buyToken",
                        "type": "address"
                    },
                    {
                        "internalType": "bytes",
                        "name": "bridgeData",
                        "type": "bytes"
                    },
                    {
                        "internalType": "uint256",
                        "name": "takerTokenAmount",
                        "type": "uint256"
                    }
                ],
                "name": "sampleSwapFromKyber",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            }
        ],
        "devdoc": {
            "kind": "dev",
            "methods": {
                "_mintCallRevert(bytes4,address,address,bytes,uint256[])": {
                    "details": "Mints the sell token, then performs the swap, then reverts with the amount out. The SwapRevertSamplerQuoteOpts has been unrolled here as our ABI encoder cannot support encoding the function"
                },
                "sampleBuysFromKyberNetwork((uint256,address,address,address,bytes),address,address,uint256[])": {
                    "details": "Sample buy quotes from Kyber.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "makerTokenAmounts": "Maker token buy amount for each sample.",
                        "opts": "KyberSamplerOpts The nth reserve",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "gasUsed": "Gas consumed for each sample.",
                        "hint": "The hint for the selected reserve",
                        "reserveId": "The id of the reserve found at reserveOffset",
                        "takerTokenAmounts": "Taker amounts sold at each maker token amount."
                    }
                },
                "sampleSellsFromKyberNetwork((uint256,address,address,address,bytes),address,address,uint256[])": {
                    "details": "Sample sell quotes from Kyber.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "opts": "KyberSamplerOpts The nth reserve",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "gasUsed": "Gas consumed per sample.",
                        "hint": "The hint for the selected reserve",
                        "makerTokenAmounts": "Maker amounts bought at each taker token amount.",
                        "reserveId": "The id of the reserve found at reserveOffset"
                    }
                }
            },
            "stateVariables": {
                "KYBER_CALL_GAS": {
                    "details": "Gas limit for Kyber calls."
                },
                "KYBER_ETH_ADDRESS": {
                    "details": "Kyber ETH pseudo-address."
                }
            },
            "version": 1
        },
        "evm": {
            "bytecode": {
                "linkReferences": {},
                "object": "0x60c06040527feeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000006080523480156200003557600080fd5b50604051620025b0380380620025b083398101604081905262000058916200006e565b60601b6001600160601b03191660a0526200009e565b60006020828403121562000080578081fd5b81516001600160a01b038116811462000097578182fd5b9392505050565b60805160601c60a05160601c6124f2620000be60003950506124f26000f3fe6080604052600436106100595760003560e01c80631f4ff03e146100655780634edfb5b21461008757806378fee41c146100bd5780639e3f05c3146100dd578063a095a0361461010d578063cc1621c91461013a57610060565b3661006057005b600080fd5b34801561007157600080fd5b50610085610080366004611be6565b61015a565b005b34801561009357600080fd5b506100a76100a2366004611ea1565b61048c565b6040516100b491906122e9565b60405180910390f35b3480156100c957600080fd5b506100856100d8366004611c7e565b610712565b3480156100e957600080fd5b506100fd6100f8366004611e18565b6108d2565b6040516100b49493929190612202565b34801561011957600080fd5b5061012d610128366004611a55565b610a1a565b6040516100b491906123f1565b34801561014657600080fd5b506100fd610155366004611e18565b610a93565b600084905060008260018451038151811061017157fe5b60200260200101519050816001600160a01b031663e326c7d760016040518263ffffffff1660e01b81526004016101a891906121f7565b600060405180830381600087803b1580156101c257600080fd5b505af19250505080156101d3575060015b506040516355c3705360e11b81526001600160a01b0383169063ab86e0a6906102029030908590600401612022565b600060405180830381600087803b15801561021c57600080fd5b505af192505050801561022d575060015b50856001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b15801561026957600080fd5b505af19350505050801561027b575060015b506040516000904780156108fc029183818181858288f193505050501580156102a8573d6000803e3d6000fd5b50606083516001600160401b03811180156102c257600080fd5b506040519080825280602002602001820160405280156102ec578160200160208202803683370190505b509050606084516001600160401b038111801561030857600080fd5b50604051908082528060200260200182016040528015610332578160200160208202803683370190505b50905060005b855181101561047657306001600160a01b03166378fee41c621e84808c8c8c8c8c888151811061036457fe5b60200260200101516040518763ffffffff1660e01b815260040161038c95949392919061229b565b600060405180830381600088803b1580156103a657600080fd5b5087f1935050505080156103b8575060015b61044d573d8080156103e6576040519150601f19603f3d011682016040523d82523d6000602084013e6103eb565b606091505b506103f581610ba5565b85848151811061040157fe5b6020026020010185858151811061041457fe5b602002602001018281525082815250505083828151811061043157fe5b6020026020010151600014156104475750610476565b5061046e565b60405162461bcd60e51b815260040161046590612370565b60405180910390fd5b600101610338565b506104818282610bda565b505050505050505050565b602084810151604080516001808252818301909252606093849290828101908036833701905050905085816000815181106104c357fe5b6020908102919091010152606060006040519080825280602002602001820160405280156104fb578160200160208202803683370190505b50905087606001516001600160a01b0316866001600160a01b031614156105ec576040516381efcbdd60e01b81526001600160a01b038416906381efcbdd906207a12090610554908990600190889088906004016120ea565b60006040518083038187803b15801561056c57600080fd5b5086fa935050505080156105a257506040513d6000823e601f3d908101601f1916820160405261059f9190810190611cf8565b60015b6105dc573d8080156105d0576040519150601f19603f3d011682016040523d82523d6000602084013e6105d5565b606091505b50506105e7565b935061070a92505050565b610706565b87606001516001600160a01b0316856001600160a01b03161415610642576040516361e597f960e01b81526001600160a01b038416906361e597f9906207a12090610554908a90600190889088906004016120ea565b6040516302b9a6cd60e11b81526001600160a01b038416906305734d9a906207a12090610682908a90600190889088908d90849084908490600401612136565b60006040518083038187803b15801561069a57600080fd5b5086fa935050505080156106d057506040513d6000823e601f3d908101601f191682016040526106cd9190810190611cf8565b60015b6105dc573d8080156106fe576040519150601f19603f3d011682016040523d82523d6000602084013e610703565b606091505b50505b5050505b949350505050565b61133761def160901b016001600160a01b031663d0afdca96040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561075657600080fd5b505af1925050508015610767575060015b5060005a905060006060306001600160a01b031688888888886040516024016107939493929190612089565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516107d19190612006565b6000604051808303816000865af19150503d806000811461080e576040519150601f19603f3d011682016040523d82523d6000602084013e610813565b606091505b50915091505a8303925061133761def160901b016001600160a01b0316630c18c1626040518163ffffffff1660e01b815260040160206040518083038186803b15801561085f57600080fd5b505afa92505050801561088f575060408051601f3d908101601f1916820190925261088c91810190611f0a565b60015b6108985761089d565b909203915b816108ab576108ab81610c08565b6108c8818060200190518101906108c29190611f0a565b84610c10565b5050505050505050565b600060608060606108e4888888610c21565b9350836108f057610a0f565b60405163276fdad960e11b81523090634edfb5b290610919908b9088908c908c906004016123b8565b60006040518083038186803b15801561093157600080fd5b505afa158015610945573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261096d9190810190611cf8565b886080018190525087608001519250610a096040518060a00160405280896001600160a01b03168152602001886001600160a01b031681526020018a6040516020016109b991906123a5565b60405160208183030381529060405281526020018a6040516020016109de91906123a5565b60408051601f1981840301815291815290825230602090811b63a095a0361790911b91015286610d92565b90925090505b945094509450949050565b6000610a246117d7565b83806020019051810190610a389190611d6e565b9050610a8973eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee826060015188888786604001518760800151604051602001610a759291906120c6565b604051602081830303815290604052611249565b9695505050505050565b60006060806060610aa5888888610c21565b935083610ab157610a0f565b60405163276fdad960e11b81523090634edfb5b290610ada908b9088908c908c906004016123b8565b60006040518083038186803b158015610af257600080fd5b505afa158015610b06573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b2e9190810190611cf8565b886080018190525087608001519250610a096040518060800160405280896001600160a01b03168152602001886001600160a01b031681526020018a604051602001610b7a91906123a5565b60408051601f1981840301815291815290825230602090811b63a095a0361790911b9101528661144b565b6000808251604014610bbc57506000905080610bd5565b82806020019051810190610bd09190611f22565b915091505b915091565b60608282604051602001610bef9291906121c9565b6040516020818303038152906040529050805160208201fd5b805160208201fd5b604051828152816020820152604081fd5b600080846020015190506060816001600160a01b031663910ffc7187606001516001600160a01b0316876001600160a01b031614610c5f5786610c75565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee5b88606001516001600160a01b0316876001600160a01b031614610c985786610cae565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee5b604080516000815260208101918290526001600160e01b031960e086901b16909152610ce292919060019060248101612055565b60006040518083038186803b158015610cfa57600080fd5b505afa158015610d0e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d369190810190611abc565b505090508051866000015110610d52575060009150610d8b9050565b80866000015181518110610d6257fe5b6020026020010151925060f883901c60001c60bb1415610d88575060009150610d8b9050565b50505b9392505050565b606080825160001415610da457611242565b82516001600160401b0381118015610dbb57600080fd5b50604051908082528060200260200182016040528015610de5578160200160208202803683370190505b50905082516001600160401b0381118015610dff57600080fd5b50604051908082528060200260200182016040528015610e29578160200160208202803683370190505b50604080516001808252818301909252919350606091906020808301908036833701905050905083600081518110610e5d57fe5b602002602001015181600081518110610e7257fe5b602002602001018181525050610e86611821565b50604080516080808201835287516001600160a01b0390811683526020808a0151909116908301528783015182840152870151640100000000600160c01b0390831c90811663ffffffff9091161790911b6060820152610ee4611821565b604051806080016040528088602001516001600160a01b0316815260200188600001516001600160a01b031681526020018860600151815260200188608001518060601c9060401c63ffffffff1663ffffffff169060201b1760401b8152509050610f4f818461144b565b805190945015905080610f76575082600081518110610f6a57fe5b60200260200101516000145b15610f8357505050611242565b6060610f8f838561144b565b805190925015905080610fb6575080600081518110610faa57fe5b60200260200101516000145b15610fc45750505050611242565b60005b875181101561123c57606060005b600381101561119c576110248a8481518110610fed57fe5b60200260200101518560008151811061100257fe5b60200260200101518960008151811061101757fe5b6020026020010151611515565b8760008151811061103157fe5b60209081029190910101528651158061105e57508660008151811061105257fe5b60200260200101516000145b156110685761119c565b6110816005612710016127108960008151811061101757fe5b8760008151811061108e57fe5b6020908102919091010152865115806110bb5750866000815181106110af57fe5b60200260200101516000145b156110c55761119c565b60606110d1878961144b565b8051919450915015806110f85750806000815181106110ec57fe5b60200260200101516000145b15611103575061119c565b8094508a848151811061111257fe5b60200260200101518560008151811061112757fe5b6020026020010151106111935760008b858151811061114257fe5b60200260200101516127108d878151811061115957fe5b60200260200101518860008151811061116e57fe5b602002602001015103028161117f57fe5b0490506005811161119157505061119c565b505b50600101610fd5565b50600081511180156111af575060008351115b1561123357806000815181106111c157fe5b60200260200101518883815181106111d557fe5b60200260200101818152505061121a8983815181106111f057fe5b60200260200101518460008151811061120557fe5b60200260200101518860008151811061101757fe5b87838151811061122657fe5b6020026020010181815250505b50600101610fc7565b50505050505b9250929050565b6000806060838060200190518101906112629190611d2a565b915091506000886001600160a01b0316886001600160a01b03161461129a576112956001600160a01b038916848861156d565b6112fc565b50604051632e1a7d4d60e01b815285906001600160a01b038a1690632e1a7d4d906112c99084906004016123f1565b600060405180830381600087803b1580156112e357600080fd5b505af11580156112f7573d6000803e3d6000fd5b505050505b826001600160a01b03166329589f61828b6001600160a01b03168b6001600160a01b03161461132b578a61132d565b8c5b898d6001600160a01b03168c6001600160a01b03161461134d578b61134f565b8e5b30600019600160008b6040518a63ffffffff1660e01b815260040161137b9897969594939291906122fc565b6020604051808303818588803b15801561139457600080fd5b505af11580156113a8573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906113cd9190611f0a565b9350886001600160a01b0316876001600160a01b0316141561143e57886001600160a01b031663d0e30db0856040518263ffffffff1660e01b81526004016000604051808303818588803b15801561142457600080fd5b505af1158015611438573d6000803e3d6000fd5b50505050505b5050509695505050505050565b606082810151835160208501516040808701519051630fa7f81f60e11b815285943094631f4ff03e946114979460a09390931b6001600160e01b03191693919290918a90600401612241565b600060405180830381600087803b1580156114b157600080fd5b505af19250505080156114c2575060015b61044d573d8080156114f0576040519150601f19603f3d011682016040523d82523d6000602084013e6114f5565b606091505b508080602001905181019061150a9190611b86565b935091506112429050565b6000831580611522575081155b8061152b575082155b1561153857506000610d8b565b8382028285828161154557fe5b0414611555576000915050610d8b565b836001850382018161156357fe5b0495945050505050565b604051636eb1769f60e11b815281906001600160a01b0385169063dd62ed3e9061159d903090879060040161203b565b60206040518083038186803b1580156115b557600080fd5b505afa1580156115c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115ed9190611f0a565b1015611600576116008383600019611605565b505050565b606063095ea7b360e01b8383604051602401611622929190612022565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915290506116608482611666565b50505050565b60006060836001600160a01b0316836040516116829190612006565b6000604051808303816000865af19150503d80600081146116bf576040519150601f19603f3d011682016040523d82523d6000602084013e6116c4565b606091505b50915091508180156116da57506116da816116f3565b156116e65750506116ef565b61166081610c08565b5050565b600081516000141561170757506001611734565b602082511061173457600061171d836000611739565b90508060011415611732576001915050611734565b505b919050565b6000611745838361174e565b90505b92915050565b600081602001835110156117745761177461176f600585518560200161177d565b610c08565b50016020015190565b6060632800659560e01b84848460405160240161179c9392919061234e565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915290509392505050565b6040518060a001604052806000815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b03168152602001606081525090565b6040805160808101825260008082526020820181905260609282018390529181019190915290565b80516117488161248e565b600082601f830112611864578081fd5b813561187761187282612420565b6123fa565b81815291506020808301908481018184028601820187101561189857600080fd5b60005b848110156118b75781358452928201929082019060010161189b565b505050505092915050565b600082601f8301126118d2578081fd5b81516118e061187282612420565b81815291506020808301908481018184028601820187101561190157600080fd5b60005b848110156118b757815184529282019290820190600101611904565b600082601f830112611930578081fd5b813561193e6118728261243f565b915080825283602082850101111561195557600080fd5b8060208401602084013760009082016020015292915050565b600082601f83011261197e578081fd5b815161198c6118728261243f565b91508082528360208285010111156119a357600080fd5b6119b4816020840160208601612462565b5092915050565b80516002811061174857600080fd5b600060a082840312156119db578081fd5b6119e560a06123fa565b90508135815260208201356119f98161248e565b60208201526040820135611a0c8161248e565b60408201526060820135611a1f8161248e565b606082015260808201356001600160401b03811115611a3d57600080fd5b611a4984828501611920565b60808301525092915050565b60008060008060808587031215611a6a578384fd5b8435611a758161248e565b93506020850135611a858161248e565b925060408501356001600160401b03811115611a9f578283fd5b611aab87828801611920565b949793965093946060013593505050565b600080600060608486031215611ad0578283fd5b83516001600160401b0380821115611ae6578485fd5b818601915086601f830112611af9578485fd5b8151611b0761187282612420565b80828252602080830192508086018b828387028901011115611b2757898afd5b8996505b84871015611b49578051845260019690960195928101928101611b2b565b508901519097509350505080821115611b60578384fd5b50611b6d868287016118c2565b925050611b7d85604086016119bb565b90509250925092565b60008060408385031215611b98578182fd5b82516001600160401b0380821115611bae578384fd5b611bba868387016118c2565b93506020850151915080821115611bcf578283fd5b50611bdc858286016118c2565b9150509250929050565b600080600080600060a08688031215611bfd578081fd5b8535611c08816124a6565b94506020860135611c188161248e565b93506040860135611c288161248e565b925060608601356001600160401b0380821115611c43578283fd5b611c4f89838a01611920565b93506080880135915080821115611c64578283fd5b50611c7188828901611854565b9150509295509295909350565b600080600080600060a08688031215611c95578283fd5b8535611ca0816124a6565b94506020860135611cb08161248e565b93506040860135611cc08161248e565b925060608601356001600160401b03811115611cda578182fd5b611ce688828901611920565b95989497509295608001359392505050565b600060208284031215611d09578081fd5b81516001600160401b03811115611d1e578182fd5b61070a8482850161196e565b60008060408385031215611d3c578182fd5b8251611d478161248e565b60208401519092506001600160401b03811115611d62578182fd5b611bdc8582860161196e565b600060208284031215611d7f578081fd5b81516001600160401b0380821115611d95578283fd5b9083019060a08286031215611da8578283fd5b611db260a06123fa565b82518152611dc38660208501611849565b6020820152611dd58660408501611849565b6040820152611de78660608501611849565b6060820152608083015182811115611dfd578485fd5b611e098782860161196e565b60808301525095945050505050565b60008060008060808587031215611e2d578182fd5b84356001600160401b0380821115611e43578384fd5b611e4f888389016119ca565b955060208701359150611e618261248e565b909350604086013590611e738261248e565b90925060608601359080821115611e88578283fd5b50611e9587828801611854565b91505092959194509250565b60008060008060808587031215611eb6578182fd5b84356001600160401b03811115611ecb578283fd5b611ed7878288016119ca565b945050602085013592506040850135611eef8161248e565b91506060850135611eff8161248e565b939692955090935050565b600060208284031215611f1b578081fd5b5051919050565b60008060408385031215611f34578182fd5b505080516020909101519092909150565b6000815180845260208085019450808401835b83811015611f7457815187529582019590820190600101611f58565b509495945050505050565b60008151808452611f97816020860160208601612462565b601f01601f19169290920160200192915050565b60048110611fb557fe5b9052565b600081518352602082015160018060a01b0380821660208601528060408501511660408601528060608501511660608601525050608082015160a0608085015261070a60a0850182611f7f565b60008251612018818460208701612462565b9190910192915050565b6001600160a01b03929092168252602082015260400190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b038581168252841660208201528215156040820152608060608201819052600090610a8990830184611f7f565b6001600160a01b038581168252841660208201526080604082018190526000906120b590830185611f7f565b905082606083015295945050505050565b6001600160a01b038316815260406020820181905260009061070a90830184611f7f565b6001600160a01b038516815260006121056020830186611fab565b608060408301526121196080830185611f45565b828103606084015261212b8185611f45565b979650505050505050565b6001600160a01b03898116825260009061010090612157602085018c611fab565b8160408501526121698285018b611f45565b9150838203606085015261217d828a611f45565b9088166080850152905061219460a0840187611fab565b82810360c08401526121a68186611f45565b905082810360e08401526121ba8185611f45565b9b9a5050505050505050505050565b6000604082526121dc6040830185611f45565b82810360208401526121ee8185611f45565b95945050505050565b901515815260200190565b60008582526080602083015261221b6080830186611f7f565b828103604084015261222d8186611f45565b9050828103606084015261212b8185611f45565b6001600160e01b0319861681526001600160a01b0385811660208301528416604082015260a06060820181905260009061227d90830185611f7f565b828103608084015261228f8185611f45565b98975050505050505050565b6001600160e01b0319861681526001600160a01b0385811660208301528416604082015260a0606082018190526000906122d790830185611f7f565b90508260808301529695505050505050565b600060208252610d8b6020830184611f7f565b6001600160a01b03898116825260208201899052878116604083015286811660608301526080820186905260a08201859052831660c082015261010060e082018190526000906121ba83820185611f7f565b606081016008851061235c57fe5b938152602081019290925260409091015290565b6020808252818101527f537761702053616d706c652073686f756c642068617665207265766572746564604082015260600190565b600060208252610d8b6020830184611fb9565b6000608082526123cb6080830187611fb9565b6020830195909552506001600160a01b0392831660408201529116606090910152919050565b90815260200190565b6040518181016001600160401b038111828210171561241857600080fd5b604052919050565b60006001600160401b03821115612435578081fd5b5060209081020190565b60006001600160401b03821115612454578081fd5b50601f01601f191660200190565b60005b8381101561247d578181015183820152602001612465565b838111156116605750506000910152565b6001600160a01b03811681146124a357600080fd5b50565b6001600160e01b0319811681146124a357600080fdfea2646970667358221220a6128cda363f9c6d62401c44a32f59a07653db29e67ca79da8381864f3ee5d8f64736f6c634300060c0033",
                "opcodes": "PUSH1 0xC0 PUSH1 0x40 MSTORE PUSH32 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE000000000000000000000000 PUSH1 0x80 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x35 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x25B0 CODESIZE SUB DUP1 PUSH3 0x25B0 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x58 SWAP2 PUSH3 0x6E JUMP JUMPDEST PUSH1 0x60 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT AND PUSH1 0xA0 MSTORE PUSH3 0x9E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x80 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x97 JUMPI DUP2 DUP3 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0x60 SHR PUSH1 0xA0 MLOAD PUSH1 0x60 SHR PUSH2 0x24F2 PUSH3 0xBE PUSH1 0x0 CODECOPY POP POP PUSH2 0x24F2 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x59 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x1F4FF03E EQ PUSH2 0x65 JUMPI DUP1 PUSH4 0x4EDFB5B2 EQ PUSH2 0x87 JUMPI DUP1 PUSH4 0x78FEE41C EQ PUSH2 0xBD JUMPI DUP1 PUSH4 0x9E3F05C3 EQ PUSH2 0xDD JUMPI DUP1 PUSH4 0xA095A036 EQ PUSH2 0x10D JUMPI DUP1 PUSH4 0xCC1621C9 EQ PUSH2 0x13A JUMPI PUSH2 0x60 JUMP JUMPDEST CALLDATASIZE PUSH2 0x60 JUMPI STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x71 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x85 PUSH2 0x80 CALLDATASIZE PUSH1 0x4 PUSH2 0x1BE6 JUMP JUMPDEST PUSH2 0x15A JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x93 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xA7 PUSH2 0xA2 CALLDATASIZE PUSH1 0x4 PUSH2 0x1EA1 JUMP JUMPDEST PUSH2 0x48C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xB4 SWAP2 SWAP1 PUSH2 0x22E9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xC9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x85 PUSH2 0xD8 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C7E JUMP JUMPDEST PUSH2 0x712 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xE9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xFD PUSH2 0xF8 CALLDATASIZE PUSH1 0x4 PUSH2 0x1E18 JUMP JUMPDEST PUSH2 0x8D2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xB4 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2202 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x119 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x12D PUSH2 0x128 CALLDATASIZE PUSH1 0x4 PUSH2 0x1A55 JUMP JUMPDEST PUSH2 0xA1A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xB4 SWAP2 SWAP1 PUSH2 0x23F1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x146 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xFD PUSH2 0x155 CALLDATASIZE PUSH1 0x4 PUSH2 0x1E18 JUMP JUMPDEST PUSH2 0xA93 JUMP JUMPDEST PUSH1 0x0 DUP5 SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x1 DUP5 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x171 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xE326C7D7 PUSH1 0x1 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1A8 SWAP2 SWAP1 PUSH2 0x21F7 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1D3 JUMPI POP PUSH1 0x1 JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0x55C37053 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0xAB86E0A6 SWAP1 PUSH2 0x202 SWAP1 ADDRESS SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x2022 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x21C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x22D JUMPI POP PUSH1 0x1 JUMPDEST POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD0E30DB0 DUP3 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x269 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x27B JUMPI POP PUSH1 0x1 JUMPDEST POP PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 SELFBALANCE DUP1 ISZERO PUSH2 0x8FC MUL SWAP2 DUP4 DUP2 DUP2 DUP2 DUP6 DUP3 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x2A8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x60 DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x2C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2EC JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x60 DUP5 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x308 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x332 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP6 MLOAD DUP2 LT ISZERO PUSH2 0x476 JUMPI ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x78FEE41C PUSH3 0x1E8480 DUP13 DUP13 DUP13 DUP13 DUP13 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x364 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP8 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x38C SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x229B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP8 CALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x3B8 JUMPI POP PUSH1 0x1 JUMPDEST PUSH2 0x44D JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x3E6 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x3EB JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH2 0x3F5 DUP2 PUSH2 0xBA5 JUMP JUMPDEST DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x401 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP6 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x414 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP3 DUP2 MSTORE POP DUP3 DUP2 MSTORE POP POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x431 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x447 JUMPI POP PUSH2 0x476 JUMP JUMPDEST POP PUSH2 0x46E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x465 SWAP1 PUSH2 0x2370 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 ADD PUSH2 0x338 JUMP JUMPDEST POP PUSH2 0x481 DUP3 DUP3 PUSH2 0xBDA JUMP JUMPDEST POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP5 DUP2 ADD MLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP4 DUP5 SWAP3 SWAP1 DUP3 DUP2 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP6 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x4C3 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x60 PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x4FB JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP8 PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x5EC JUMPI PUSH1 0x40 MLOAD PUSH4 0x81EFCBDD PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x81EFCBDD SWAP1 PUSH3 0x7A120 SWAP1 PUSH2 0x554 SWAP1 DUP10 SWAP1 PUSH1 0x1 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x20EA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x56C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x5A2 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x59F SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1CF8 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x5DC JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x5D0 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x5D5 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP PUSH2 0x5E7 JUMP JUMPDEST SWAP4 POP PUSH2 0x70A SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x706 JUMP JUMPDEST DUP8 PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x642 JUMPI PUSH1 0x40 MLOAD PUSH4 0x61E597F9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x61E597F9 SWAP1 PUSH3 0x7A120 SWAP1 PUSH2 0x554 SWAP1 DUP11 SWAP1 PUSH1 0x1 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x20EA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x2B9A6CD PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x5734D9A SWAP1 PUSH3 0x7A120 SWAP1 PUSH2 0x682 SWAP1 DUP11 SWAP1 PUSH1 0x1 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP14 SWAP1 DUP5 SWAP1 DUP5 SWAP1 DUP5 SWAP1 PUSH1 0x4 ADD PUSH2 0x2136 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x69A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x6D0 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x6CD SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1CF8 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x5DC JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x6FE JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x703 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP JUMPDEST POP POP POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x1337 PUSH2 0xDEF1 PUSH1 0x90 SHL ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD0AFDCA9 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x756 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x767 JUMPI POP PUSH1 0x1 JUMPDEST POP PUSH1 0x0 GAS SWAP1 POP PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP9 DUP9 DUP9 DUP9 DUP9 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x793 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2089 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x7D1 SWAP2 SWAP1 PUSH2 0x2006 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x80E JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x813 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP GAS DUP4 SUB SWAP3 POP PUSH2 0x1337 PUSH2 0xDEF1 PUSH1 0x90 SHL ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xC18C162 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x85F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x88F JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x88C SWAP2 DUP2 ADD SWAP1 PUSH2 0x1F0A JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x898 JUMPI PUSH2 0x89D JUMP JUMPDEST SWAP1 SWAP3 SUB SWAP2 JUMPDEST DUP2 PUSH2 0x8AB JUMPI PUSH2 0x8AB DUP2 PUSH2 0xC08 JUMP JUMPDEST PUSH2 0x8C8 DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x8C2 SWAP2 SWAP1 PUSH2 0x1F0A JUMP JUMPDEST DUP5 PUSH2 0xC10 JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP1 PUSH1 0x60 PUSH2 0x8E4 DUP9 DUP9 DUP9 PUSH2 0xC21 JUMP JUMPDEST SWAP4 POP DUP4 PUSH2 0x8F0 JUMPI PUSH2 0xA0F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x276FDAD9 PUSH1 0xE1 SHL DUP2 MSTORE ADDRESS SWAP1 PUSH4 0x4EDFB5B2 SWAP1 PUSH2 0x919 SWAP1 DUP12 SWAP1 DUP9 SWAP1 DUP13 SWAP1 DUP13 SWAP1 PUSH1 0x4 ADD PUSH2 0x23B8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x931 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x945 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x96D SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1CF8 JUMP JUMPDEST DUP9 PUSH1 0x80 ADD DUP2 SWAP1 MSTORE POP DUP8 PUSH1 0x80 ADD MLOAD SWAP3 POP PUSH2 0xA09 PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP11 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x9B9 SWAP2 SWAP1 PUSH2 0x23A5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP11 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x9DE SWAP2 SWAP1 PUSH2 0x23A5 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0xA095A036 OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP7 PUSH2 0xD92 JUMP JUMPDEST SWAP1 SWAP3 POP SWAP1 POP JUMPDEST SWAP5 POP SWAP5 POP SWAP5 POP SWAP5 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA24 PUSH2 0x17D7 JUMP JUMPDEST DUP4 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0xA38 SWAP2 SWAP1 PUSH2 0x1D6E JUMP JUMPDEST SWAP1 POP PUSH2 0xA89 PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE DUP3 PUSH1 0x60 ADD MLOAD DUP9 DUP9 DUP8 DUP7 PUSH1 0x40 ADD MLOAD DUP8 PUSH1 0x80 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xA75 SWAP3 SWAP2 SWAP1 PUSH2 0x20C6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH2 0x1249 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP1 PUSH1 0x60 PUSH2 0xAA5 DUP9 DUP9 DUP9 PUSH2 0xC21 JUMP JUMPDEST SWAP4 POP DUP4 PUSH2 0xAB1 JUMPI PUSH2 0xA0F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x276FDAD9 PUSH1 0xE1 SHL DUP2 MSTORE ADDRESS SWAP1 PUSH4 0x4EDFB5B2 SWAP1 PUSH2 0xADA SWAP1 DUP12 SWAP1 DUP9 SWAP1 DUP13 SWAP1 DUP13 SWAP1 PUSH1 0x4 ADD PUSH2 0x23B8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xAF2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xB06 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0xB2E SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1CF8 JUMP JUMPDEST DUP9 PUSH1 0x80 ADD DUP2 SWAP1 MSTORE POP DUP8 PUSH1 0x80 ADD MLOAD SWAP3 POP PUSH2 0xA09 PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP11 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xB7A SWAP2 SWAP1 PUSH2 0x23A5 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0xA095A036 OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP7 PUSH2 0x144B JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 MLOAD PUSH1 0x40 EQ PUSH2 0xBBC JUMPI POP PUSH1 0x0 SWAP1 POP DUP1 PUSH2 0xBD5 JUMP JUMPDEST DUP3 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0xBD0 SWAP2 SWAP1 PUSH2 0x1F22 JUMP JUMPDEST SWAP2 POP SWAP2 POP JUMPDEST SWAP2 POP SWAP2 JUMP JUMPDEST PUSH1 0x60 DUP3 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xBEF SWAP3 SWAP2 SWAP1 PUSH2 0x21C9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH1 0x40 MLOAD DUP3 DUP2 MSTORE DUP2 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH1 0x20 ADD MLOAD SWAP1 POP PUSH1 0x60 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x910FFC71 DUP8 PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xC5F JUMPI DUP7 PUSH2 0xC75 JUMP JUMPDEST PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE JUMPDEST DUP9 PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xC98 JUMPI DUP7 PUSH2 0xCAE JUMP JUMPDEST PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP2 DUP3 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP7 SWAP1 SHL AND SWAP1 SWAP2 MSTORE PUSH2 0xCE2 SWAP3 SWAP2 SWAP1 PUSH1 0x1 SWAP1 PUSH1 0x24 DUP2 ADD PUSH2 0x2055 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xCFA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xD0E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0xD36 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1ABC JUMP JUMPDEST POP POP SWAP1 POP DUP1 MLOAD DUP7 PUSH1 0x0 ADD MLOAD LT PUSH2 0xD52 JUMPI POP PUSH1 0x0 SWAP2 POP PUSH2 0xD8B SWAP1 POP JUMP JUMPDEST DUP1 DUP7 PUSH1 0x0 ADD MLOAD DUP2 MLOAD DUP2 LT PUSH2 0xD62 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP3 POP PUSH1 0xF8 DUP4 SWAP1 SHR PUSH1 0x0 SHR PUSH1 0xBB EQ ISZERO PUSH2 0xD88 JUMPI POP PUSH1 0x0 SWAP2 POP PUSH2 0xD8B SWAP1 POP JUMP JUMPDEST POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP1 DUP3 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0xDA4 JUMPI PUSH2 0x1242 JUMP JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0xDBB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xDE5 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0xDFF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xE29 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE SWAP2 SWAP4 POP PUSH1 0x60 SWAP2 SWAP1 PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP4 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xE5D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xE72 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP PUSH2 0xE86 PUSH2 0x1821 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP1 DUP3 ADD DUP4 MSTORE DUP8 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP4 MSTORE PUSH1 0x20 DUP1 DUP11 ADD MLOAD SWAP1 SWAP2 AND SWAP1 DUP4 ADD MSTORE DUP8 DUP4 ADD MLOAD DUP3 DUP5 ADD MSTORE DUP8 ADD MLOAD PUSH5 0x100000000 PUSH1 0x1 PUSH1 0xC0 SHL SUB SWAP1 DUP4 SHR SWAP1 DUP2 AND PUSH4 0xFFFFFFFF SWAP1 SWAP2 AND OR SWAP1 SWAP2 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH2 0xEE4 PUSH2 0x1821 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 DUP9 PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x60 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x80 ADD MLOAD DUP1 PUSH1 0x60 SHR SWAP1 PUSH1 0x40 SHR PUSH4 0xFFFFFFFF AND PUSH4 0xFFFFFFFF AND SWAP1 PUSH1 0x20 SHL OR PUSH1 0x40 SHL DUP2 MSTORE POP SWAP1 POP PUSH2 0xF4F DUP2 DUP5 PUSH2 0x144B JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP5 POP ISZERO SWAP1 POP DUP1 PUSH2 0xF76 JUMPI POP DUP3 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xF6A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ JUMPDEST ISZERO PUSH2 0xF83 JUMPI POP POP POP PUSH2 0x1242 JUMP JUMPDEST PUSH1 0x60 PUSH2 0xF8F DUP4 DUP6 PUSH2 0x144B JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP3 POP ISZERO SWAP1 POP DUP1 PUSH2 0xFB6 JUMPI POP DUP1 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xFAA JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ JUMPDEST ISZERO PUSH2 0xFC4 JUMPI POP POP POP POP PUSH2 0x1242 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP8 MLOAD DUP2 LT ISZERO PUSH2 0x123C JUMPI PUSH1 0x60 PUSH1 0x0 JUMPDEST PUSH1 0x3 DUP2 LT ISZERO PUSH2 0x119C JUMPI PUSH2 0x1024 DUP11 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xFED JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1002 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP10 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1017 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x1515 JUMP JUMPDEST DUP8 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1031 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE DUP7 MLOAD ISZERO DUP1 PUSH2 0x105E JUMPI POP DUP7 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1052 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ JUMPDEST ISZERO PUSH2 0x1068 JUMPI PUSH2 0x119C JUMP JUMPDEST PUSH2 0x1081 PUSH1 0x5 PUSH2 0x2710 ADD PUSH2 0x2710 DUP10 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1017 JUMPI INVALID JUMPDEST DUP8 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x108E JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE DUP7 MLOAD ISZERO DUP1 PUSH2 0x10BB JUMPI POP DUP7 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x10AF JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ JUMPDEST ISZERO PUSH2 0x10C5 JUMPI PUSH2 0x119C JUMP JUMPDEST PUSH1 0x60 PUSH2 0x10D1 DUP8 DUP10 PUSH2 0x144B JUMP JUMPDEST DUP1 MLOAD SWAP2 SWAP5 POP SWAP2 POP ISZERO DUP1 PUSH2 0x10F8 JUMPI POP DUP1 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x10EC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ JUMPDEST ISZERO PUSH2 0x1103 JUMPI POP PUSH2 0x119C JUMP JUMPDEST DUP1 SWAP5 POP DUP11 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x1112 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1127 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD LT PUSH2 0x1193 JUMPI PUSH1 0x0 DUP12 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x1142 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x2710 DUP14 DUP8 DUP2 MLOAD DUP2 LT PUSH2 0x1159 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x116E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SUB MUL DUP2 PUSH2 0x117F JUMPI INVALID JUMPDEST DIV SWAP1 POP PUSH1 0x5 DUP2 GT PUSH2 0x1191 JUMPI POP POP PUSH2 0x119C JUMP JUMPDEST POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0xFD5 JUMP JUMPDEST POP PUSH1 0x0 DUP2 MLOAD GT DUP1 ISZERO PUSH2 0x11AF JUMPI POP PUSH1 0x0 DUP4 MLOAD GT JUMPDEST ISZERO PUSH2 0x1233 JUMPI DUP1 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x11C1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x11D5 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP PUSH2 0x121A DUP10 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x11F0 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1205 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1017 JUMPI INVALID JUMPDEST DUP8 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1226 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0xFC7 JUMP JUMPDEST POP POP POP POP POP JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 DUP4 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x1262 SWAP2 SWAP1 PUSH2 0x1D2A JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x129A JUMPI PUSH2 0x1295 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND DUP5 DUP9 PUSH2 0x156D JUMP JUMPDEST PUSH2 0x12FC JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0x2E1A7D4D PUSH1 0xE0 SHL DUP2 MSTORE DUP6 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND SWAP1 PUSH4 0x2E1A7D4D SWAP1 PUSH2 0x12C9 SWAP1 DUP5 SWAP1 PUSH1 0x4 ADD PUSH2 0x23F1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x12E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x12F7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x29589F61 DUP3 DUP12 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP12 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x132B JUMPI DUP11 PUSH2 0x132D JUMP JUMPDEST DUP13 JUMPDEST DUP10 DUP14 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP13 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x134D JUMPI DUP12 PUSH2 0x134F JUMP JUMPDEST DUP15 JUMPDEST ADDRESS PUSH1 0x0 NOT PUSH1 0x1 PUSH1 0x0 DUP12 PUSH1 0x40 MLOAD DUP11 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x137B SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x22FC JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1394 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x13A8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x13CD SWAP2 SWAP1 PUSH2 0x1F0A JUMP JUMPDEST SWAP4 POP DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x143E JUMPI DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD0E30DB0 DUP6 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1424 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1438 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP JUMPDEST POP POP POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 DUP2 ADD MLOAD DUP4 MLOAD PUSH1 0x20 DUP6 ADD MLOAD PUSH1 0x40 DUP1 DUP8 ADD MLOAD SWAP1 MLOAD PUSH4 0xFA7F81F PUSH1 0xE1 SHL DUP2 MSTORE DUP6 SWAP5 ADDRESS SWAP5 PUSH4 0x1F4FF03E SWAP5 PUSH2 0x1497 SWAP5 PUSH1 0xA0 SWAP4 SWAP1 SWAP4 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND SWAP4 SWAP2 SWAP3 SWAP1 SWAP2 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x2241 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x14B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x14C2 JUMPI POP PUSH1 0x1 JUMPDEST PUSH2 0x44D JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x14F0 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x14F5 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x150A SWAP2 SWAP1 PUSH2 0x1B86 JUMP JUMPDEST SWAP4 POP SWAP2 POP PUSH2 0x1242 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP4 ISZERO DUP1 PUSH2 0x1522 JUMPI POP DUP2 ISZERO JUMPDEST DUP1 PUSH2 0x152B JUMPI POP DUP3 ISZERO JUMPDEST ISZERO PUSH2 0x1538 JUMPI POP PUSH1 0x0 PUSH2 0xD8B JUMP JUMPDEST DUP4 DUP3 MUL DUP3 DUP6 DUP3 DUP2 PUSH2 0x1545 JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x1555 JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0xD8B JUMP JUMPDEST DUP4 PUSH1 0x1 DUP6 SUB DUP3 ADD DUP2 PUSH2 0x1563 JUMPI INVALID JUMPDEST DIV SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x6EB1769F PUSH1 0xE1 SHL DUP2 MSTORE DUP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0xDD62ED3E SWAP1 PUSH2 0x159D SWAP1 ADDRESS SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x203B JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x15B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x15C9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x15ED SWAP2 SWAP1 PUSH2 0x1F0A JUMP JUMPDEST LT ISZERO PUSH2 0x1600 JUMPI PUSH2 0x1600 DUP4 DUP4 PUSH1 0x0 NOT PUSH2 0x1605 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH4 0x95EA7B3 PUSH1 0xE0 SHL DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1622 SWAP3 SWAP2 SWAP1 PUSH2 0x2022 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP PUSH2 0x1660 DUP5 DUP3 PUSH2 0x1666 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x40 MLOAD PUSH2 0x1682 SWAP2 SWAP1 PUSH2 0x2006 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x16BF JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x16C4 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x16DA JUMPI POP PUSH2 0x16DA DUP2 PUSH2 0x16F3 JUMP JUMPDEST ISZERO PUSH2 0x16E6 JUMPI POP POP PUSH2 0x16EF JUMP JUMPDEST PUSH2 0x1660 DUP2 PUSH2 0xC08 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x1707 JUMPI POP PUSH1 0x1 PUSH2 0x1734 JUMP JUMPDEST PUSH1 0x20 DUP3 MLOAD LT PUSH2 0x1734 JUMPI PUSH1 0x0 PUSH2 0x171D DUP4 PUSH1 0x0 PUSH2 0x1739 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 EQ ISZERO PUSH2 0x1732 JUMPI PUSH1 0x1 SWAP2 POP POP PUSH2 0x1734 JUMP JUMPDEST POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1745 DUP4 DUP4 PUSH2 0x174E JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO PUSH2 0x1774 JUMPI PUSH2 0x1774 PUSH2 0x176F PUSH1 0x5 DUP6 MLOAD DUP6 PUSH1 0x20 ADD PUSH2 0x177D JUMP JUMPDEST PUSH2 0xC08 JUMP JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH4 0x28006595 PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x179C SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x234E JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x60 SWAP3 DUP3 ADD DUP4 SWAP1 MSTORE SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST DUP1 MLOAD PUSH2 0x1748 DUP2 PUSH2 0x248E JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1864 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1877 PUSH2 0x1872 DUP3 PUSH2 0x2420 JUMP JUMPDEST PUSH2 0x23FA JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x1898 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x18B7 JUMPI DUP2 CALLDATALOAD DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x189B JUMP JUMPDEST POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x18D2 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x18E0 PUSH2 0x1872 DUP3 PUSH2 0x2420 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x1901 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x18B7 JUMPI DUP2 MLOAD DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x1904 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1930 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x193E PUSH2 0x1872 DUP3 PUSH2 0x243F JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x1955 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP5 ADD CALLDATACOPY PUSH1 0x0 SWAP1 DUP3 ADD PUSH1 0x20 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x197E JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x198C PUSH2 0x1872 DUP3 PUSH2 0x243F JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x19A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x19B4 DUP2 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x2462 JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x2 DUP2 LT PUSH2 0x1748 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x19DB JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x19E5 PUSH1 0xA0 PUSH2 0x23FA JUMP JUMPDEST SWAP1 POP DUP2 CALLDATALOAD DUP2 MSTORE PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH2 0x19F9 DUP2 PUSH2 0x248E JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP3 ADD CALLDATALOAD PUSH2 0x1A0C DUP2 PUSH2 0x248E JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP3 ADD CALLDATALOAD PUSH2 0x1A1F DUP2 PUSH2 0x248E JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP3 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x1A3D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1A49 DUP5 DUP3 DUP6 ADD PUSH2 0x1920 JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1A6A JUMPI DUP4 DUP5 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x1A75 DUP2 PUSH2 0x248E JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x1A85 DUP2 PUSH2 0x248E JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x1A9F JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x1AAB DUP8 DUP3 DUP9 ADD PUSH2 0x1920 JUMP JUMPDEST SWAP5 SWAP8 SWAP4 SWAP7 POP SWAP4 SWAP5 PUSH1 0x60 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1AD0 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x1AE6 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP2 DUP7 ADD SWAP2 POP DUP7 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1AF9 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x1B07 PUSH2 0x1872 DUP3 PUSH2 0x2420 JUMP JUMPDEST DUP1 DUP3 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD SWAP3 POP DUP1 DUP7 ADD DUP12 DUP3 DUP4 DUP8 MUL DUP10 ADD ADD GT ISZERO PUSH2 0x1B27 JUMPI DUP10 DUP11 REVERT JUMPDEST DUP10 SWAP7 POP JUMPDEST DUP5 DUP8 LT ISZERO PUSH2 0x1B49 JUMPI DUP1 MLOAD DUP5 MSTORE PUSH1 0x1 SWAP7 SWAP1 SWAP7 ADD SWAP6 SWAP3 DUP2 ADD SWAP3 DUP2 ADD PUSH2 0x1B2B JUMP JUMPDEST POP DUP10 ADD MLOAD SWAP1 SWAP8 POP SWAP4 POP POP POP DUP1 DUP3 GT ISZERO PUSH2 0x1B60 JUMPI DUP4 DUP5 REVERT JUMPDEST POP PUSH2 0x1B6D DUP7 DUP3 DUP8 ADD PUSH2 0x18C2 JUMP JUMPDEST SWAP3 POP POP PUSH2 0x1B7D DUP6 PUSH1 0x40 DUP7 ADD PUSH2 0x19BB JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1B98 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x1BAE JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x1BBA DUP7 DUP4 DUP8 ADD PUSH2 0x18C2 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1BCF JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x1BDC DUP6 DUP3 DUP7 ADD PUSH2 0x18C2 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x1BFD JUMPI DUP1 DUP2 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x1C08 DUP2 PUSH2 0x24A6 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x1C18 DUP2 PUSH2 0x248E JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH2 0x1C28 DUP2 PUSH2 0x248E JUMP JUMPDEST SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x1C43 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x1C4F DUP10 DUP4 DUP11 ADD PUSH2 0x1920 JUMP JUMPDEST SWAP4 POP PUSH1 0x80 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1C64 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x1C71 DUP9 DUP3 DUP10 ADD PUSH2 0x1854 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x1C95 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x1CA0 DUP2 PUSH2 0x24A6 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x1CB0 DUP2 PUSH2 0x248E JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH2 0x1CC0 DUP2 PUSH2 0x248E JUMP JUMPDEST SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x1CDA JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x1CE6 DUP9 DUP3 DUP10 ADD PUSH2 0x1920 JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP3 SWAP6 PUSH1 0x80 ADD CALLDATALOAD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1D09 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x1D1E JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x70A DUP5 DUP3 DUP6 ADD PUSH2 0x196E JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1D3C JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH2 0x1D47 DUP2 PUSH2 0x248E JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x1D62 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x1BDC DUP6 DUP3 DUP7 ADD PUSH2 0x196E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1D7F JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x1D95 JUMPI DUP3 DUP4 REVERT JUMPDEST SWAP1 DUP4 ADD SWAP1 PUSH1 0xA0 DUP3 DUP7 SUB SLT ISZERO PUSH2 0x1DA8 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x1DB2 PUSH1 0xA0 PUSH2 0x23FA JUMP JUMPDEST DUP3 MLOAD DUP2 MSTORE PUSH2 0x1DC3 DUP7 PUSH1 0x20 DUP6 ADD PUSH2 0x1849 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x1DD5 DUP7 PUSH1 0x40 DUP6 ADD PUSH2 0x1849 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x1DE7 DUP7 PUSH1 0x60 DUP6 ADD PUSH2 0x1849 JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP4 ADD MLOAD DUP3 DUP2 GT ISZERO PUSH2 0x1DFD JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x1E09 DUP8 DUP3 DUP7 ADD PUSH2 0x196E JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1E2D JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x1E43 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x1E4F DUP9 DUP4 DUP10 ADD PUSH2 0x19CA JUMP JUMPDEST SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP2 POP PUSH2 0x1E61 DUP3 PUSH2 0x248E JUMP JUMPDEST SWAP1 SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP1 PUSH2 0x1E73 DUP3 PUSH2 0x248E JUMP JUMPDEST SWAP1 SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD SWAP1 DUP1 DUP3 GT ISZERO PUSH2 0x1E88 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x1E95 DUP8 DUP3 DUP9 ADD PUSH2 0x1854 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1EB6 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x1ECB JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x1ED7 DUP8 DUP3 DUP9 ADD PUSH2 0x19CA JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x1EEF DUP2 PUSH2 0x248E JUMP JUMPDEST SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH2 0x1EFF DUP2 PUSH2 0x248E JUMP JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP1 SWAP4 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1F1B JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1F34 JUMPI DUP2 DUP3 REVERT JUMPDEST POP POP DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD MLOAD SWAP1 SWAP3 SWAP1 SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD DUP4 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1F74 JUMPI DUP2 MLOAD DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x1F58 JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x1F97 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x2462 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x4 DUP2 LT PUSH2 0x1FB5 JUMPI INVALID JUMPDEST SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP4 MSTORE PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 DUP3 AND PUSH1 0x20 DUP7 ADD MSTORE DUP1 PUSH1 0x40 DUP6 ADD MLOAD AND PUSH1 0x40 DUP7 ADD MSTORE DUP1 PUSH1 0x60 DUP6 ADD MLOAD AND PUSH1 0x60 DUP7 ADD MSTORE POP POP PUSH1 0x80 DUP3 ADD MLOAD PUSH1 0xA0 PUSH1 0x80 DUP6 ADD MSTORE PUSH2 0x70A PUSH1 0xA0 DUP6 ADD DUP3 PUSH2 0x1F7F JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x2018 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x2462 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE DUP3 ISZERO ISZERO PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0xA89 SWAP1 DUP4 ADD DUP5 PUSH2 0x1F7F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x80 PUSH1 0x40 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x20B5 SWAP1 DUP4 ADD DUP6 PUSH2 0x1F7F JUMP JUMPDEST SWAP1 POP DUP3 PUSH1 0x60 DUP4 ADD MSTORE SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND DUP2 MSTORE PUSH1 0x40 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x70A SWAP1 DUP4 ADD DUP5 PUSH2 0x1F7F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP2 MSTORE PUSH1 0x0 PUSH2 0x2105 PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x1FAB JUMP JUMPDEST PUSH1 0x80 PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x2119 PUSH1 0x80 DUP4 ADD DUP6 PUSH2 0x1F45 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0x212B DUP2 DUP6 PUSH2 0x1F45 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 DUP2 AND DUP3 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x100 SWAP1 PUSH2 0x2157 PUSH1 0x20 DUP6 ADD DUP13 PUSH2 0x1FAB JUMP JUMPDEST DUP2 PUSH1 0x40 DUP6 ADD MSTORE PUSH2 0x2169 DUP3 DUP6 ADD DUP12 PUSH2 0x1F45 JUMP JUMPDEST SWAP2 POP DUP4 DUP3 SUB PUSH1 0x60 DUP6 ADD MSTORE PUSH2 0x217D DUP3 DUP11 PUSH2 0x1F45 JUMP JUMPDEST SWAP1 DUP9 AND PUSH1 0x80 DUP6 ADD MSTORE SWAP1 POP PUSH2 0x2194 PUSH1 0xA0 DUP5 ADD DUP8 PUSH2 0x1FAB JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0xC0 DUP5 ADD MSTORE PUSH2 0x21A6 DUP2 DUP7 PUSH2 0x1F45 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 SUB PUSH1 0xE0 DUP5 ADD MSTORE PUSH2 0x21BA DUP2 DUP6 PUSH2 0x1F45 JUMP JUMPDEST SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 MSTORE PUSH2 0x21DC PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x1F45 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x21EE DUP2 DUP6 PUSH2 0x1F45 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP3 MSTORE PUSH1 0x80 PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x221B PUSH1 0x80 DUP4 ADD DUP7 PUSH2 0x1F7F JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x222D DUP2 DUP7 PUSH2 0x1F45 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 SUB PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0x212B DUP2 DUP6 PUSH2 0x1F45 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP7 AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND PUSH1 0x20 DUP4 ADD MSTORE DUP5 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0xA0 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x227D SWAP1 DUP4 ADD DUP6 PUSH2 0x1F7F JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x80 DUP5 ADD MSTORE PUSH2 0x228F DUP2 DUP6 PUSH2 0x1F45 JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP7 AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND PUSH1 0x20 DUP4 ADD MSTORE DUP5 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0xA0 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x22D7 SWAP1 DUP4 ADD DUP6 PUSH2 0x1F7F JUMP JUMPDEST SWAP1 POP DUP3 PUSH1 0x80 DUP4 ADD MSTORE SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0xD8B PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1F7F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 DUP2 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP10 SWAP1 MSTORE DUP8 DUP2 AND PUSH1 0x40 DUP4 ADD MSTORE DUP7 DUP2 AND PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 DUP3 ADD DUP7 SWAP1 MSTORE PUSH1 0xA0 DUP3 ADD DUP6 SWAP1 MSTORE DUP4 AND PUSH1 0xC0 DUP3 ADD MSTORE PUSH2 0x100 PUSH1 0xE0 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x21BA DUP4 DUP3 ADD DUP6 PUSH2 0x1F7F JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH1 0x8 DUP6 LT PUSH2 0x235C JUMPI INVALID JUMPDEST SWAP4 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x537761702053616D706C652073686F756C642068617665207265766572746564 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0xD8B PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1FB9 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 MSTORE PUSH2 0x23CB PUSH1 0x80 DUP4 ADD DUP8 PUSH2 0x1FB9 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP6 SWAP1 SWAP6 MSTORE POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x40 DUP3 ADD MSTORE SWAP2 AND PUSH1 0x60 SWAP1 SWAP2 ADD MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x2418 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0x2435 JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0x2454 JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x247D JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x2465 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x1660 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x24A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x24A3 JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xA6 SLT DUP13 0xDA CALLDATASIZE EXTCODEHASH SWAP13 PUSH14 0x62401C44A32F59A07653DB29E67C 0xA7 SWAP14 0xA8 CODESIZE XOR PUSH5 0xF3EE5D8F64 PUSH20 0x6F6C634300060C00330000000000000000000000 ",
                "sourceMap": "841:8016:11:-:0;;;2400:119:46;;;1145:80:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2682:11:46;;-1:-1:-1;;;;;;2682:11:46;;;841:8016:11;;192:309:-1;;330:2;318:9;309:7;305:23;301:32;298:2;;;-1:-1;;336:12;298:2;106:13;;-1:-1;;;;;789:54;;937:58;;927:2;;-1:-1;;999:12;927:2;388:97;292:209;-1:-1;;;292:209::o;:::-;841:8016:11;;;;;;;;;;;;;;;;"
            },
            "deployedBytecode": {
                "immutableReferences": {},
                "linkReferences": {},
                "object": "",
                "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x59 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x1F4FF03E EQ PUSH2 0x65 JUMPI DUP1 PUSH4 0x4EDFB5B2 EQ PUSH2 0x87 JUMPI DUP1 PUSH4 0x78FEE41C EQ PUSH2 0xBD JUMPI DUP1 PUSH4 0x9E3F05C3 EQ PUSH2 0xDD JUMPI DUP1 PUSH4 0xA095A036 EQ PUSH2 0x10D JUMPI DUP1 PUSH4 0xCC1621C9 EQ PUSH2 0x13A JUMPI PUSH2 0x60 JUMP JUMPDEST CALLDATASIZE PUSH2 0x60 JUMPI STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x71 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x85 PUSH2 0x80 CALLDATASIZE PUSH1 0x4 PUSH2 0x1BE6 JUMP JUMPDEST PUSH2 0x15A JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x93 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xA7 PUSH2 0xA2 CALLDATASIZE PUSH1 0x4 PUSH2 0x1EA1 JUMP JUMPDEST PUSH2 0x48C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xB4 SWAP2 SWAP1 PUSH2 0x22E9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xC9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x85 PUSH2 0xD8 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C7E JUMP JUMPDEST PUSH2 0x712 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xE9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xFD PUSH2 0xF8 CALLDATASIZE PUSH1 0x4 PUSH2 0x1E18 JUMP JUMPDEST PUSH2 0x8D2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xB4 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2202 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x119 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x12D PUSH2 0x128 CALLDATASIZE PUSH1 0x4 PUSH2 0x1A55 JUMP JUMPDEST PUSH2 0xA1A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xB4 SWAP2 SWAP1 PUSH2 0x23F1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x146 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xFD PUSH2 0x155 CALLDATASIZE PUSH1 0x4 PUSH2 0x1E18 JUMP JUMPDEST PUSH2 0xA93 JUMP JUMPDEST PUSH1 0x0 DUP5 SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x1 DUP5 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x171 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xE326C7D7 PUSH1 0x1 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1A8 SWAP2 SWAP1 PUSH2 0x21F7 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1D3 JUMPI POP PUSH1 0x1 JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0x55C37053 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0xAB86E0A6 SWAP1 PUSH2 0x202 SWAP1 ADDRESS SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x2022 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x21C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x22D JUMPI POP PUSH1 0x1 JUMPDEST POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD0E30DB0 DUP3 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x269 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x27B JUMPI POP PUSH1 0x1 JUMPDEST POP PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 SELFBALANCE DUP1 ISZERO PUSH2 0x8FC MUL SWAP2 DUP4 DUP2 DUP2 DUP2 DUP6 DUP3 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x2A8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x60 DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x2C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2EC JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x60 DUP5 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x308 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x332 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP6 MLOAD DUP2 LT ISZERO PUSH2 0x476 JUMPI ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x78FEE41C PUSH3 0x1E8480 DUP13 DUP13 DUP13 DUP13 DUP13 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x364 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP8 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x38C SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x229B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP8 CALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x3B8 JUMPI POP PUSH1 0x1 JUMPDEST PUSH2 0x44D JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x3E6 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x3EB JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH2 0x3F5 DUP2 PUSH2 0xBA5 JUMP JUMPDEST DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x401 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP6 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x414 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP3 DUP2 MSTORE POP DUP3 DUP2 MSTORE POP POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x431 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x447 JUMPI POP PUSH2 0x476 JUMP JUMPDEST POP PUSH2 0x46E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x465 SWAP1 PUSH2 0x2370 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 ADD PUSH2 0x338 JUMP JUMPDEST POP PUSH2 0x481 DUP3 DUP3 PUSH2 0xBDA JUMP JUMPDEST POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP5 DUP2 ADD MLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP4 DUP5 SWAP3 SWAP1 DUP3 DUP2 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP6 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x4C3 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x60 PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x4FB JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP8 PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x5EC JUMPI PUSH1 0x40 MLOAD PUSH4 0x81EFCBDD PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x81EFCBDD SWAP1 PUSH3 0x7A120 SWAP1 PUSH2 0x554 SWAP1 DUP10 SWAP1 PUSH1 0x1 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x20EA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x56C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x5A2 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x59F SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1CF8 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x5DC JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x5D0 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x5D5 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP PUSH2 0x5E7 JUMP JUMPDEST SWAP4 POP PUSH2 0x70A SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x706 JUMP JUMPDEST DUP8 PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x642 JUMPI PUSH1 0x40 MLOAD PUSH4 0x61E597F9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x61E597F9 SWAP1 PUSH3 0x7A120 SWAP1 PUSH2 0x554 SWAP1 DUP11 SWAP1 PUSH1 0x1 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x20EA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x2B9A6CD PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x5734D9A SWAP1 PUSH3 0x7A120 SWAP1 PUSH2 0x682 SWAP1 DUP11 SWAP1 PUSH1 0x1 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP14 SWAP1 DUP5 SWAP1 DUP5 SWAP1 DUP5 SWAP1 PUSH1 0x4 ADD PUSH2 0x2136 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x69A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x6D0 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x6CD SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1CF8 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x5DC JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x6FE JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x703 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP JUMPDEST POP POP POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x1337 PUSH2 0xDEF1 PUSH1 0x90 SHL ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD0AFDCA9 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x756 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x767 JUMPI POP PUSH1 0x1 JUMPDEST POP PUSH1 0x0 GAS SWAP1 POP PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP9 DUP9 DUP9 DUP9 DUP9 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x793 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2089 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x7D1 SWAP2 SWAP1 PUSH2 0x2006 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x80E JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x813 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP GAS DUP4 SUB SWAP3 POP PUSH2 0x1337 PUSH2 0xDEF1 PUSH1 0x90 SHL ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xC18C162 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x85F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x88F JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x88C SWAP2 DUP2 ADD SWAP1 PUSH2 0x1F0A JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x898 JUMPI PUSH2 0x89D JUMP JUMPDEST SWAP1 SWAP3 SUB SWAP2 JUMPDEST DUP2 PUSH2 0x8AB JUMPI PUSH2 0x8AB DUP2 PUSH2 0xC08 JUMP JUMPDEST PUSH2 0x8C8 DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x8C2 SWAP2 SWAP1 PUSH2 0x1F0A JUMP JUMPDEST DUP5 PUSH2 0xC10 JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP1 PUSH1 0x60 PUSH2 0x8E4 DUP9 DUP9 DUP9 PUSH2 0xC21 JUMP JUMPDEST SWAP4 POP DUP4 PUSH2 0x8F0 JUMPI PUSH2 0xA0F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x276FDAD9 PUSH1 0xE1 SHL DUP2 MSTORE ADDRESS SWAP1 PUSH4 0x4EDFB5B2 SWAP1 PUSH2 0x919 SWAP1 DUP12 SWAP1 DUP9 SWAP1 DUP13 SWAP1 DUP13 SWAP1 PUSH1 0x4 ADD PUSH2 0x23B8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x931 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x945 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x96D SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1CF8 JUMP JUMPDEST DUP9 PUSH1 0x80 ADD DUP2 SWAP1 MSTORE POP DUP8 PUSH1 0x80 ADD MLOAD SWAP3 POP PUSH2 0xA09 PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP11 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x9B9 SWAP2 SWAP1 PUSH2 0x23A5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP11 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x9DE SWAP2 SWAP1 PUSH2 0x23A5 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0xA095A036 OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP7 PUSH2 0xD92 JUMP JUMPDEST SWAP1 SWAP3 POP SWAP1 POP JUMPDEST SWAP5 POP SWAP5 POP SWAP5 POP SWAP5 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA24 PUSH2 0x17D7 JUMP JUMPDEST DUP4 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0xA38 SWAP2 SWAP1 PUSH2 0x1D6E JUMP JUMPDEST SWAP1 POP PUSH2 0xA89 PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE DUP3 PUSH1 0x60 ADD MLOAD DUP9 DUP9 DUP8 DUP7 PUSH1 0x40 ADD MLOAD DUP8 PUSH1 0x80 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xA75 SWAP3 SWAP2 SWAP1 PUSH2 0x20C6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH2 0x1249 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP1 PUSH1 0x60 PUSH2 0xAA5 DUP9 DUP9 DUP9 PUSH2 0xC21 JUMP JUMPDEST SWAP4 POP DUP4 PUSH2 0xAB1 JUMPI PUSH2 0xA0F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x276FDAD9 PUSH1 0xE1 SHL DUP2 MSTORE ADDRESS SWAP1 PUSH4 0x4EDFB5B2 SWAP1 PUSH2 0xADA SWAP1 DUP12 SWAP1 DUP9 SWAP1 DUP13 SWAP1 DUP13 SWAP1 PUSH1 0x4 ADD PUSH2 0x23B8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xAF2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xB06 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0xB2E SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1CF8 JUMP JUMPDEST DUP9 PUSH1 0x80 ADD DUP2 SWAP1 MSTORE POP DUP8 PUSH1 0x80 ADD MLOAD SWAP3 POP PUSH2 0xA09 PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP11 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xB7A SWAP2 SWAP1 PUSH2 0x23A5 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0xA095A036 OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP7 PUSH2 0x144B JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 MLOAD PUSH1 0x40 EQ PUSH2 0xBBC JUMPI POP PUSH1 0x0 SWAP1 POP DUP1 PUSH2 0xBD5 JUMP JUMPDEST DUP3 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0xBD0 SWAP2 SWAP1 PUSH2 0x1F22 JUMP JUMPDEST SWAP2 POP SWAP2 POP JUMPDEST SWAP2 POP SWAP2 JUMP JUMPDEST PUSH1 0x60 DUP3 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xBEF SWAP3 SWAP2 SWAP1 PUSH2 0x21C9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH1 0x40 MLOAD DUP3 DUP2 MSTORE DUP2 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH1 0x20 ADD MLOAD SWAP1 POP PUSH1 0x60 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x910FFC71 DUP8 PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xC5F JUMPI DUP7 PUSH2 0xC75 JUMP JUMPDEST PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE JUMPDEST DUP9 PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xC98 JUMPI DUP7 PUSH2 0xCAE JUMP JUMPDEST PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP2 DUP3 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP7 SWAP1 SHL AND SWAP1 SWAP2 MSTORE PUSH2 0xCE2 SWAP3 SWAP2 SWAP1 PUSH1 0x1 SWAP1 PUSH1 0x24 DUP2 ADD PUSH2 0x2055 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xCFA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xD0E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0xD36 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1ABC JUMP JUMPDEST POP POP SWAP1 POP DUP1 MLOAD DUP7 PUSH1 0x0 ADD MLOAD LT PUSH2 0xD52 JUMPI POP PUSH1 0x0 SWAP2 POP PUSH2 0xD8B SWAP1 POP JUMP JUMPDEST DUP1 DUP7 PUSH1 0x0 ADD MLOAD DUP2 MLOAD DUP2 LT PUSH2 0xD62 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP3 POP PUSH1 0xF8 DUP4 SWAP1 SHR PUSH1 0x0 SHR PUSH1 0xBB EQ ISZERO PUSH2 0xD88 JUMPI POP PUSH1 0x0 SWAP2 POP PUSH2 0xD8B SWAP1 POP JUMP JUMPDEST POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP1 DUP3 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0xDA4 JUMPI PUSH2 0x1242 JUMP JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0xDBB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xDE5 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0xDFF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xE29 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE SWAP2 SWAP4 POP PUSH1 0x60 SWAP2 SWAP1 PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP4 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xE5D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xE72 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP PUSH2 0xE86 PUSH2 0x1821 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP1 DUP3 ADD DUP4 MSTORE DUP8 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP4 MSTORE PUSH1 0x20 DUP1 DUP11 ADD MLOAD SWAP1 SWAP2 AND SWAP1 DUP4 ADD MSTORE DUP8 DUP4 ADD MLOAD DUP3 DUP5 ADD MSTORE DUP8 ADD MLOAD PUSH5 0x100000000 PUSH1 0x1 PUSH1 0xC0 SHL SUB SWAP1 DUP4 SHR SWAP1 DUP2 AND PUSH4 0xFFFFFFFF SWAP1 SWAP2 AND OR SWAP1 SWAP2 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH2 0xEE4 PUSH2 0x1821 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 DUP9 PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x60 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x80 ADD MLOAD DUP1 PUSH1 0x60 SHR SWAP1 PUSH1 0x40 SHR PUSH4 0xFFFFFFFF AND PUSH4 0xFFFFFFFF AND SWAP1 PUSH1 0x20 SHL OR PUSH1 0x40 SHL DUP2 MSTORE POP SWAP1 POP PUSH2 0xF4F DUP2 DUP5 PUSH2 0x144B JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP5 POP ISZERO SWAP1 POP DUP1 PUSH2 0xF76 JUMPI POP DUP3 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xF6A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ JUMPDEST ISZERO PUSH2 0xF83 JUMPI POP POP POP PUSH2 0x1242 JUMP JUMPDEST PUSH1 0x60 PUSH2 0xF8F DUP4 DUP6 PUSH2 0x144B JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP3 POP ISZERO SWAP1 POP DUP1 PUSH2 0xFB6 JUMPI POP DUP1 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xFAA JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ JUMPDEST ISZERO PUSH2 0xFC4 JUMPI POP POP POP POP PUSH2 0x1242 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP8 MLOAD DUP2 LT ISZERO PUSH2 0x123C JUMPI PUSH1 0x60 PUSH1 0x0 JUMPDEST PUSH1 0x3 DUP2 LT ISZERO PUSH2 0x119C JUMPI PUSH2 0x1024 DUP11 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xFED JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1002 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP10 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1017 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x1515 JUMP JUMPDEST DUP8 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1031 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE DUP7 MLOAD ISZERO DUP1 PUSH2 0x105E JUMPI POP DUP7 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1052 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ JUMPDEST ISZERO PUSH2 0x1068 JUMPI PUSH2 0x119C JUMP JUMPDEST PUSH2 0x1081 PUSH1 0x5 PUSH2 0x2710 ADD PUSH2 0x2710 DUP10 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1017 JUMPI INVALID JUMPDEST DUP8 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x108E JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE DUP7 MLOAD ISZERO DUP1 PUSH2 0x10BB JUMPI POP DUP7 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x10AF JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ JUMPDEST ISZERO PUSH2 0x10C5 JUMPI PUSH2 0x119C JUMP JUMPDEST PUSH1 0x60 PUSH2 0x10D1 DUP8 DUP10 PUSH2 0x144B JUMP JUMPDEST DUP1 MLOAD SWAP2 SWAP5 POP SWAP2 POP ISZERO DUP1 PUSH2 0x10F8 JUMPI POP DUP1 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x10EC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ JUMPDEST ISZERO PUSH2 0x1103 JUMPI POP PUSH2 0x119C JUMP JUMPDEST DUP1 SWAP5 POP DUP11 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x1112 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1127 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD LT PUSH2 0x1193 JUMPI PUSH1 0x0 DUP12 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x1142 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x2710 DUP14 DUP8 DUP2 MLOAD DUP2 LT PUSH2 0x1159 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x116E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SUB MUL DUP2 PUSH2 0x117F JUMPI INVALID JUMPDEST DIV SWAP1 POP PUSH1 0x5 DUP2 GT PUSH2 0x1191 JUMPI POP POP PUSH2 0x119C JUMP JUMPDEST POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0xFD5 JUMP JUMPDEST POP PUSH1 0x0 DUP2 MLOAD GT DUP1 ISZERO PUSH2 0x11AF JUMPI POP PUSH1 0x0 DUP4 MLOAD GT JUMPDEST ISZERO PUSH2 0x1233 JUMPI DUP1 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x11C1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x11D5 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP PUSH2 0x121A DUP10 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x11F0 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1205 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1017 JUMPI INVALID JUMPDEST DUP8 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1226 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0xFC7 JUMP JUMPDEST POP POP POP POP POP JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 DUP4 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x1262 SWAP2 SWAP1 PUSH2 0x1D2A JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x129A JUMPI PUSH2 0x1295 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND DUP5 DUP9 PUSH2 0x156D JUMP JUMPDEST PUSH2 0x12FC JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0x2E1A7D4D PUSH1 0xE0 SHL DUP2 MSTORE DUP6 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND SWAP1 PUSH4 0x2E1A7D4D SWAP1 PUSH2 0x12C9 SWAP1 DUP5 SWAP1 PUSH1 0x4 ADD PUSH2 0x23F1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x12E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x12F7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x29589F61 DUP3 DUP12 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP12 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x132B JUMPI DUP11 PUSH2 0x132D JUMP JUMPDEST DUP13 JUMPDEST DUP10 DUP14 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP13 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x134D JUMPI DUP12 PUSH2 0x134F JUMP JUMPDEST DUP15 JUMPDEST ADDRESS PUSH1 0x0 NOT PUSH1 0x1 PUSH1 0x0 DUP12 PUSH1 0x40 MLOAD DUP11 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x137B SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x22FC JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1394 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x13A8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x13CD SWAP2 SWAP1 PUSH2 0x1F0A JUMP JUMPDEST SWAP4 POP DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x143E JUMPI DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD0E30DB0 DUP6 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1424 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1438 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP JUMPDEST POP POP POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 DUP2 ADD MLOAD DUP4 MLOAD PUSH1 0x20 DUP6 ADD MLOAD PUSH1 0x40 DUP1 DUP8 ADD MLOAD SWAP1 MLOAD PUSH4 0xFA7F81F PUSH1 0xE1 SHL DUP2 MSTORE DUP6 SWAP5 ADDRESS SWAP5 PUSH4 0x1F4FF03E SWAP5 PUSH2 0x1497 SWAP5 PUSH1 0xA0 SWAP4 SWAP1 SWAP4 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND SWAP4 SWAP2 SWAP3 SWAP1 SWAP2 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x2241 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x14B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x14C2 JUMPI POP PUSH1 0x1 JUMPDEST PUSH2 0x44D JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x14F0 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x14F5 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x150A SWAP2 SWAP1 PUSH2 0x1B86 JUMP JUMPDEST SWAP4 POP SWAP2 POP PUSH2 0x1242 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP4 ISZERO DUP1 PUSH2 0x1522 JUMPI POP DUP2 ISZERO JUMPDEST DUP1 PUSH2 0x152B JUMPI POP DUP3 ISZERO JUMPDEST ISZERO PUSH2 0x1538 JUMPI POP PUSH1 0x0 PUSH2 0xD8B JUMP JUMPDEST DUP4 DUP3 MUL DUP3 DUP6 DUP3 DUP2 PUSH2 0x1545 JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x1555 JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0xD8B JUMP JUMPDEST DUP4 PUSH1 0x1 DUP6 SUB DUP3 ADD DUP2 PUSH2 0x1563 JUMPI INVALID JUMPDEST DIV SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x6EB1769F PUSH1 0xE1 SHL DUP2 MSTORE DUP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0xDD62ED3E SWAP1 PUSH2 0x159D SWAP1 ADDRESS SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x203B JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x15B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x15C9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x15ED SWAP2 SWAP1 PUSH2 0x1F0A JUMP JUMPDEST LT ISZERO PUSH2 0x1600 JUMPI PUSH2 0x1600 DUP4 DUP4 PUSH1 0x0 NOT PUSH2 0x1605 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH4 0x95EA7B3 PUSH1 0xE0 SHL DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1622 SWAP3 SWAP2 SWAP1 PUSH2 0x2022 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP PUSH2 0x1660 DUP5 DUP3 PUSH2 0x1666 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x40 MLOAD PUSH2 0x1682 SWAP2 SWAP1 PUSH2 0x2006 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x16BF JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x16C4 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x16DA JUMPI POP PUSH2 0x16DA DUP2 PUSH2 0x16F3 JUMP JUMPDEST ISZERO PUSH2 0x16E6 JUMPI POP POP PUSH2 0x16EF JUMP JUMPDEST PUSH2 0x1660 DUP2 PUSH2 0xC08 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x1707 JUMPI POP PUSH1 0x1 PUSH2 0x1734 JUMP JUMPDEST PUSH1 0x20 DUP3 MLOAD LT PUSH2 0x1734 JUMPI PUSH1 0x0 PUSH2 0x171D DUP4 PUSH1 0x0 PUSH2 0x1739 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 EQ ISZERO PUSH2 0x1732 JUMPI PUSH1 0x1 SWAP2 POP POP PUSH2 0x1734 JUMP JUMPDEST POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1745 DUP4 DUP4 PUSH2 0x174E JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO PUSH2 0x1774 JUMPI PUSH2 0x1774 PUSH2 0x176F PUSH1 0x5 DUP6 MLOAD DUP6 PUSH1 0x20 ADD PUSH2 0x177D JUMP JUMPDEST PUSH2 0xC08 JUMP JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH4 0x28006595 PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x179C SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x234E JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x60 SWAP3 DUP3 ADD DUP4 SWAP1 MSTORE SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST DUP1 MLOAD PUSH2 0x1748 DUP2 PUSH2 0x248E JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1864 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1877 PUSH2 0x1872 DUP3 PUSH2 0x2420 JUMP JUMPDEST PUSH2 0x23FA JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x1898 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x18B7 JUMPI DUP2 CALLDATALOAD DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x189B JUMP JUMPDEST POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x18D2 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x18E0 PUSH2 0x1872 DUP3 PUSH2 0x2420 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x1901 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x18B7 JUMPI DUP2 MLOAD DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x1904 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1930 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x193E PUSH2 0x1872 DUP3 PUSH2 0x243F JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x1955 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP5 ADD CALLDATACOPY PUSH1 0x0 SWAP1 DUP3 ADD PUSH1 0x20 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x197E JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x198C PUSH2 0x1872 DUP3 PUSH2 0x243F JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x19A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x19B4 DUP2 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x2462 JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x2 DUP2 LT PUSH2 0x1748 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x19DB JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x19E5 PUSH1 0xA0 PUSH2 0x23FA JUMP JUMPDEST SWAP1 POP DUP2 CALLDATALOAD DUP2 MSTORE PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH2 0x19F9 DUP2 PUSH2 0x248E JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP3 ADD CALLDATALOAD PUSH2 0x1A0C DUP2 PUSH2 0x248E JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP3 ADD CALLDATALOAD PUSH2 0x1A1F DUP2 PUSH2 0x248E JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP3 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x1A3D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1A49 DUP5 DUP3 DUP6 ADD PUSH2 0x1920 JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1A6A JUMPI DUP4 DUP5 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x1A75 DUP2 PUSH2 0x248E JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x1A85 DUP2 PUSH2 0x248E JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x1A9F JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x1AAB DUP8 DUP3 DUP9 ADD PUSH2 0x1920 JUMP JUMPDEST SWAP5 SWAP8 SWAP4 SWAP7 POP SWAP4 SWAP5 PUSH1 0x60 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1AD0 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x1AE6 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP2 DUP7 ADD SWAP2 POP DUP7 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1AF9 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x1B07 PUSH2 0x1872 DUP3 PUSH2 0x2420 JUMP JUMPDEST DUP1 DUP3 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD SWAP3 POP DUP1 DUP7 ADD DUP12 DUP3 DUP4 DUP8 MUL DUP10 ADD ADD GT ISZERO PUSH2 0x1B27 JUMPI DUP10 DUP11 REVERT JUMPDEST DUP10 SWAP7 POP JUMPDEST DUP5 DUP8 LT ISZERO PUSH2 0x1B49 JUMPI DUP1 MLOAD DUP5 MSTORE PUSH1 0x1 SWAP7 SWAP1 SWAP7 ADD SWAP6 SWAP3 DUP2 ADD SWAP3 DUP2 ADD PUSH2 0x1B2B JUMP JUMPDEST POP DUP10 ADD MLOAD SWAP1 SWAP8 POP SWAP4 POP POP POP DUP1 DUP3 GT ISZERO PUSH2 0x1B60 JUMPI DUP4 DUP5 REVERT JUMPDEST POP PUSH2 0x1B6D DUP7 DUP3 DUP8 ADD PUSH2 0x18C2 JUMP JUMPDEST SWAP3 POP POP PUSH2 0x1B7D DUP6 PUSH1 0x40 DUP7 ADD PUSH2 0x19BB JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1B98 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x1BAE JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x1BBA DUP7 DUP4 DUP8 ADD PUSH2 0x18C2 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1BCF JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x1BDC DUP6 DUP3 DUP7 ADD PUSH2 0x18C2 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x1BFD JUMPI DUP1 DUP2 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x1C08 DUP2 PUSH2 0x24A6 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x1C18 DUP2 PUSH2 0x248E JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH2 0x1C28 DUP2 PUSH2 0x248E JUMP JUMPDEST SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x1C43 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x1C4F DUP10 DUP4 DUP11 ADD PUSH2 0x1920 JUMP JUMPDEST SWAP4 POP PUSH1 0x80 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1C64 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x1C71 DUP9 DUP3 DUP10 ADD PUSH2 0x1854 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x1C95 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x1CA0 DUP2 PUSH2 0x24A6 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x1CB0 DUP2 PUSH2 0x248E JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH2 0x1CC0 DUP2 PUSH2 0x248E JUMP JUMPDEST SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x1CDA JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x1CE6 DUP9 DUP3 DUP10 ADD PUSH2 0x1920 JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP3 SWAP6 PUSH1 0x80 ADD CALLDATALOAD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1D09 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x1D1E JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x70A DUP5 DUP3 DUP6 ADD PUSH2 0x196E JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1D3C JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH2 0x1D47 DUP2 PUSH2 0x248E JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x1D62 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x1BDC DUP6 DUP3 DUP7 ADD PUSH2 0x196E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1D7F JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x1D95 JUMPI DUP3 DUP4 REVERT JUMPDEST SWAP1 DUP4 ADD SWAP1 PUSH1 0xA0 DUP3 DUP7 SUB SLT ISZERO PUSH2 0x1DA8 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x1DB2 PUSH1 0xA0 PUSH2 0x23FA JUMP JUMPDEST DUP3 MLOAD DUP2 MSTORE PUSH2 0x1DC3 DUP7 PUSH1 0x20 DUP6 ADD PUSH2 0x1849 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x1DD5 DUP7 PUSH1 0x40 DUP6 ADD PUSH2 0x1849 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x1DE7 DUP7 PUSH1 0x60 DUP6 ADD PUSH2 0x1849 JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP4 ADD MLOAD DUP3 DUP2 GT ISZERO PUSH2 0x1DFD JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x1E09 DUP8 DUP3 DUP7 ADD PUSH2 0x196E JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1E2D JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x1E43 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x1E4F DUP9 DUP4 DUP10 ADD PUSH2 0x19CA JUMP JUMPDEST SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP2 POP PUSH2 0x1E61 DUP3 PUSH2 0x248E JUMP JUMPDEST SWAP1 SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP1 PUSH2 0x1E73 DUP3 PUSH2 0x248E JUMP JUMPDEST SWAP1 SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD SWAP1 DUP1 DUP3 GT ISZERO PUSH2 0x1E88 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x1E95 DUP8 DUP3 DUP9 ADD PUSH2 0x1854 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1EB6 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x1ECB JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x1ED7 DUP8 DUP3 DUP9 ADD PUSH2 0x19CA JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x1EEF DUP2 PUSH2 0x248E JUMP JUMPDEST SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH2 0x1EFF DUP2 PUSH2 0x248E JUMP JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP1 SWAP4 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1F1B JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1F34 JUMPI DUP2 DUP3 REVERT JUMPDEST POP POP DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD MLOAD SWAP1 SWAP3 SWAP1 SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD DUP4 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1F74 JUMPI DUP2 MLOAD DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x1F58 JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x1F97 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x2462 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x4 DUP2 LT PUSH2 0x1FB5 JUMPI INVALID JUMPDEST SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP4 MSTORE PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 DUP3 AND PUSH1 0x20 DUP7 ADD MSTORE DUP1 PUSH1 0x40 DUP6 ADD MLOAD AND PUSH1 0x40 DUP7 ADD MSTORE DUP1 PUSH1 0x60 DUP6 ADD MLOAD AND PUSH1 0x60 DUP7 ADD MSTORE POP POP PUSH1 0x80 DUP3 ADD MLOAD PUSH1 0xA0 PUSH1 0x80 DUP6 ADD MSTORE PUSH2 0x70A PUSH1 0xA0 DUP6 ADD DUP3 PUSH2 0x1F7F JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x2018 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x2462 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE DUP3 ISZERO ISZERO PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0xA89 SWAP1 DUP4 ADD DUP5 PUSH2 0x1F7F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x80 PUSH1 0x40 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x20B5 SWAP1 DUP4 ADD DUP6 PUSH2 0x1F7F JUMP JUMPDEST SWAP1 POP DUP3 PUSH1 0x60 DUP4 ADD MSTORE SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND DUP2 MSTORE PUSH1 0x40 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x70A SWAP1 DUP4 ADD DUP5 PUSH2 0x1F7F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP2 MSTORE PUSH1 0x0 PUSH2 0x2105 PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x1FAB JUMP JUMPDEST PUSH1 0x80 PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x2119 PUSH1 0x80 DUP4 ADD DUP6 PUSH2 0x1F45 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0x212B DUP2 DUP6 PUSH2 0x1F45 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 DUP2 AND DUP3 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x100 SWAP1 PUSH2 0x2157 PUSH1 0x20 DUP6 ADD DUP13 PUSH2 0x1FAB JUMP JUMPDEST DUP2 PUSH1 0x40 DUP6 ADD MSTORE PUSH2 0x2169 DUP3 DUP6 ADD DUP12 PUSH2 0x1F45 JUMP JUMPDEST SWAP2 POP DUP4 DUP3 SUB PUSH1 0x60 DUP6 ADD MSTORE PUSH2 0x217D DUP3 DUP11 PUSH2 0x1F45 JUMP JUMPDEST SWAP1 DUP9 AND PUSH1 0x80 DUP6 ADD MSTORE SWAP1 POP PUSH2 0x2194 PUSH1 0xA0 DUP5 ADD DUP8 PUSH2 0x1FAB JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0xC0 DUP5 ADD MSTORE PUSH2 0x21A6 DUP2 DUP7 PUSH2 0x1F45 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 SUB PUSH1 0xE0 DUP5 ADD MSTORE PUSH2 0x21BA DUP2 DUP6 PUSH2 0x1F45 JUMP JUMPDEST SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 MSTORE PUSH2 0x21DC PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x1F45 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x21EE DUP2 DUP6 PUSH2 0x1F45 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP3 MSTORE PUSH1 0x80 PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x221B PUSH1 0x80 DUP4 ADD DUP7 PUSH2 0x1F7F JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x222D DUP2 DUP7 PUSH2 0x1F45 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 SUB PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0x212B DUP2 DUP6 PUSH2 0x1F45 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP7 AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND PUSH1 0x20 DUP4 ADD MSTORE DUP5 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0xA0 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x227D SWAP1 DUP4 ADD DUP6 PUSH2 0x1F7F JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x80 DUP5 ADD MSTORE PUSH2 0x228F DUP2 DUP6 PUSH2 0x1F45 JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP7 AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND PUSH1 0x20 DUP4 ADD MSTORE DUP5 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0xA0 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x22D7 SWAP1 DUP4 ADD DUP6 PUSH2 0x1F7F JUMP JUMPDEST SWAP1 POP DUP3 PUSH1 0x80 DUP4 ADD MSTORE SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0xD8B PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1F7F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 DUP2 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP10 SWAP1 MSTORE DUP8 DUP2 AND PUSH1 0x40 DUP4 ADD MSTORE DUP7 DUP2 AND PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 DUP3 ADD DUP7 SWAP1 MSTORE PUSH1 0xA0 DUP3 ADD DUP6 SWAP1 MSTORE DUP4 AND PUSH1 0xC0 DUP3 ADD MSTORE PUSH2 0x100 PUSH1 0xE0 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x21BA DUP4 DUP3 ADD DUP6 PUSH2 0x1F7F JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH1 0x8 DUP6 LT PUSH2 0x235C JUMPI INVALID JUMPDEST SWAP4 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x537761702053616D706C652073686F756C642068617665207265766572746564 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0xD8B PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1FB9 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 MSTORE PUSH2 0x23CB PUSH1 0x80 DUP4 ADD DUP8 PUSH2 0x1FB9 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP6 SWAP1 SWAP6 MSTORE POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x40 DUP3 ADD MSTORE SWAP2 AND PUSH1 0x60 SWAP1 SWAP2 ADD MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x2418 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0x2435 JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0x2454 JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x247D JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x2465 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x1660 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x24A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x24A3 JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xA6 SLT DUP13 0xDA CALLDATASIZE EXTCODEHASH SWAP13 PUSH14 0x62401C44A32F59A07653DB29E67C 0xA7 SWAP14 0xA8 CODESIZE XOR PUSH5 0xF3EE5D8F64 PUSH20 0x6F6C634300060C00330000000000000000000000 ",
                "sourceMap": "841:8016:11:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4294:2209:18;;;;;;;;;;-1:-1:-1;4294:2209:18;;;;;:::i;:::-;;:::i;:::-;;5338:2595:11;;;;;;;;;;-1:-1:-1;5338:2595:11;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3054:1014:18;;;;;;;;;;-1:-1:-1;3054:1014:18;;;;;:::i;:::-;;:::i;4259:1073:11:-;;;;;;;;;;-1:-1:-1;4259:1073:11;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;:::i;1400:697::-;;;;;;;;;;-1:-1:-1;1400:697:11;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;2669:1017::-;;;;;;;;;;-1:-1:-1;2669:1017:11;;;;;:::i;:::-;;:::i;4294:2209:18:-;4503:28;4555:9;4503:63;;4700:16;4719:9;4748:1;4729:9;:16;:20;4719:31;;;;;;;;;;;;;;4700:50;;4833:15;-1:-1:-1;;;;;4833:27:18;;4861:4;4833:33;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4817:71;4945:52;;-1:-1:-1;;;4945:52:18;;-1:-1:-1;;;;;4945:27:18;;;;;:52;;4981:4;;4988:8;;4945:52;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4929:90;5068:9;-1:-1:-1;;;;;5045:42:18;;5096:8;5045:63;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5029:101;5230:42;;5238:1;;5250:21;5230:42;;;;;5238:1;5230:42;5238:1;5230:42;5250:21;5238:1;5230:42;;;;;;;;;;;;;;;;;;;;;5283:27;5327:9;:16;-1:-1:-1;;;;;5313:31:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5313:31:18;;5283:61;;5354:24;5395:9;:16;-1:-1:-1;;;;;5381:31:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5381:31:18;;5354:58;;5428:9;5423:988;5447:9;:16;5443:1;:20;5423:988;;;5504:4;-1:-1:-1;;;;;5504:16:18;;1713:3;5561:8;5591:9;5622:8;5652:10;5684:9;5694:1;5684:12;;;;;;;;;;;;;;5504:210;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5484:917;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5937:38;5968:6;5937:30;:38::i;:::-;5908:10;5919:1;5908:13;;;;;;;;;;;;;5923:7;5931:1;5923:10;;;;;;;;;;;;;5907:68;;;;;;;;;;6321:10;6332:1;6321:13;;;;;;;;;;;;;;6338:1;6321:18;6317:70;;;6363:5;;;6317:70;5811:590;5484:917;;;5745:50;;-1:-1:-1;;;5745:50:18;;;;;;;:::i;:::-;;;;;;;;;5465:3;;5423:988;;;;6458:38;6476:10;6488:7;6458:17;:38::i;:::-;4294:2209;;;;;;;;;:::o;5338:2595:11:-;5669:16;;;;;5796;;;5810:1;5796:16;;;;;;;;;5535:17;;;;5810:1;5796:16;;;;5669;5796;;;;;-1:-1:-1;5796:16:11;5760:52;;5844:9;5822:16;5839:1;5822:19;;;;;;;;;;;;;;;;;:31;5863:28;5908:1;5894:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5894:16:11;;5863:47;;5939:4;:9;;;-1:-1:-1;;;;;5925:23:11;:10;-1:-1:-1;;;;;5925:23:11;;5921:2006;;;6012:289;;-1:-1:-1;;;6012:289:11;;-1:-1:-1;;;;;6012:29:11;;;;;993:5;;6012:289;;6130:10;;6166:34;;6226:16;;6268:11;;6012:289;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;6012:289:11;;;;;;;;;;;;:::i;:::-;;;5992:517;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6407:102;5992:517;;;6385:6;-1:-1:-1;6378:13:11;;-1:-1:-1;;;6378:13:11;5992:517;5921:2006;;;6543:4;:9;;;-1:-1:-1;;;;;6529:23:11;:10;-1:-1:-1;;;;;6529:23:11;;6525:1402;;;6616:289;;-1:-1:-1;;;6616:289:11;;-1:-1:-1;;;;;6616:29:11;;;;;993:5;;6616:289;;6734:10;;6770:34;;6830:16;;6872:11;;6616:289;;;:::i;6525:1402::-;7243:466;;-1:-1:-1;;;7243:466:11;;-1:-1:-1;;;;;7243:31:11;;;;;993:5;;7243:466;;7363:10;;7399:34;;7459:16;;7501:11;;7538:10;;7399:34;;7459:16;;7501:11;;7243:466;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;7243:466:11;;;;;;;;;;;;:::i;:::-;;;7223:694;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7815:102;7223:694;5338:2595;;;;;;;;;;:::o;3054:1014:18:-;-1:-1:-1;;;;;;;;;;3306:39:18;;:41;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3290:79;3405:15;3423:9;3405:27;;3471:12;3485:17;3514:4;-1:-1:-1;;;;;3506:18:18;3561:8;3571:9;3582:8;3592:10;3604:8;3538:75;;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;3538:75:18;;;;;;;;;;;;;;-1:-1:-1;;;;;3538:75:18;-1:-1:-1;;;;;;3538:75:18;;;;;;;;;;3506:117;;;;3538:75;3506:117;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3470:153;;;;3653:9;3643:7;:19;3633:29;;-1:-1:-1;;;;;;;;;;3734:34:18;;:36;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3734:36:18;;;;;;;;-1:-1:-1;;3734:36:18;;;;;;;;;;;;:::i;:::-;;;3718:169;;;;;3845:21;;;;3718:169;3902:7;3897:53;;3925:14;:4;:12;:14::i;:::-;4000:61;4035:4;4024:27;;;;;;;;;;;;:::i;:::-;4053:7;4000:23;:61::i;:::-;3054:1014;;;;;;;;:::o;4259:1073:11:-;4484:17;4515;4546:24;4584:34;4655:47;4673:4;4679:10;4691;4655:17;:47::i;:::-;4643:59;-1:-1:-1;4716:16:11;4712:99;;4748:52;;4712:99;4832:61;;-1:-1:-1;;;4832:61:11;;:4;;:20;;:61;;4853:4;;4859:9;;4870:10;;4882;;4832:61;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;4832:61:11;;;;;;;;;;;;:::i;:::-;4820:4;:9;;:73;;;;4910:4;:9;;;4903:16;;4961:364;5001:283;;;;;;;;5060:10;-1:-1:-1;;;;;5001:283:11;;;;;5098:10;-1:-1:-1;;;;;5001:283:11;;;;;5152:4;5141:16;;;;;;;;:::i;:::-;;;;;;;;;;;;;5001:283;;;;5200:4;5189:16;;;;;;;;:::i;:::-;;;;-1:-1:-1;;5189:16:11;;;;;;;;;5001:283;;;5245:4;5189:16;5001:283;;;5245:24;5001:283;;;;;;;5298:17;4961:26;:364::i;:::-;4930:395;;-1:-1:-1;4930:395:11;-1:-1:-1;4259:1073:11;;;;;;;;;;:::o;1400:697::-;1589:7;1612:28;;:::i;:::-;1654:10;1643:42;;;;;;;;;;;;:::i;:::-;1612:73;;1702:388;1097:42;1909:4;:9;;;1948;1987:8;2010:16;2051:4;:17;;;2070:4;:9;;;2040:40;;;;;;;;;:::i;:::-;;;;;;;;;;;;;1702:19;:388::i;:::-;1695:395;1400:697;-1:-1:-1;;;;;;1400:697:11:o;2669:1017::-;2895:17;2926;2957:24;2995:34;3066:47;3084:4;3090:10;3102;3066:17;:47::i;:::-;3054:59;-1:-1:-1;3127:16:11;3123:99;;3159:52;;3123:99;3243:61;;-1:-1:-1;;;3243:61:11;;:4;;:20;;:61;;3264:4;;3270:9;;3281:10;;3293;;3243:61;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;3243:61:11;;;;;;;;;;;;:::i;:::-;3231:4;:9;;:73;;;;3321:4;:9;;;3314:16;;3372:307;3409:229;;;;;;;;3465:10;-1:-1:-1;;;;;3409:229:11;;;;;3503:10;-1:-1:-1;;;;;3409:229:11;;;;;3554:4;3543:16;;;;;;;;:::i;:::-;;;;-1:-1:-1;;3543:16:11;;;;;;;;;3409:229;;;3599:4;3543:16;3409:229;;;3599:24;3409:229;;;;;;;3652:17;3372:23;:307::i;9394:277:18:-;9516:7;9525;9552:6;:13;9569:2;9552:19;9548:62;;-1:-1:-1;9595:1:18;;-1:-1:-1;9595:1:18;9587:12;;9548:62;9637:6;9626:38;;;;;;;;;;;;:::i;:::-;9619:45;;;;9394:277;;;;:::o;8785:312::-;8917:17;8948:7;8957;8937:28;;;;;;;;;:::i;:::-;;;;;;;;;;;;;8917:48;;9075:4;9069:11;9064:2;9058:4;9054:13;9047:34;1531:170:36;1674:9;1668:16;1661:4;1650:9;1646:20;1639:46;8448:331:18;8656:4;8650:11;8686:6;8681:3;8674:19;8727:7;8722:2;8717:3;8713:12;8706:29;8760:2;8755:3;8748:15;7939:916:11;8113:17;8201:27;8249:4;:16;;;8201:65;;8277:27;8311:9;-1:-1:-1;;;;;8311:28:11;;8367:4;:9;;;-1:-1:-1;;;;;8353:23:11;:10;-1:-1:-1;;;;;8353:23:11;;:56;;8399:10;8353:56;;;1097:42;8353:56;8437:4;:9;;;-1:-1:-1;;;;;8423:23:11;:10;-1:-1:-1;;;;;8423:23:11;;:56;;8469:10;8423:56;;;1097:42;8423:56;8511:12;;;8521:1;8511:12;;;;;;;;;-1:-1:-1;;;;;;8311:236:11;;;;;;;;;;;;8493:4;;8311:236;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;8311:236:11;;;;;;;;;;;;:::i;:::-;8276:271;;;;8584:10;:17;8562:4;:18;;;:39;8558:80;;-1:-1:-1;8624:3:11;;-1:-1:-1;8617:10:11;;-1:-1:-1;8617:10:11;8558:80;8660:10;8671:4;:18;;;8660:30;;;;;;;;;;;;;;8648:42;;8773:3;8760:9;:16;;8752:25;;8781:4;8752:33;8748:74;;;-1:-1:-1;8808:3:11;;-1:-1:-1;8801:10:11;;-1:-1:-1;8801:10:11;8748:74;8832:16;;7939:916;;;;;;:::o;9677:4060:18:-;9848:24;9874:34;9928:17;:24;9956:1;9928:29;9924:95;;;9973:35;;9924:95;10063:17;:24;-1:-1:-1;;;;;10049:39:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;10049:39:18;;10029:59;;10122:17;:24;-1:-1:-1;;;;;10108:39:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;10108:39:18;-1:-1:-1;10189:16:18;;;10203:1;10189:16;;;;;;;;;10098:49;;-1:-1:-1;10158:28:18;;10189:16;;;;;;;;;;;;-1:-1:-1;10189:16:18;10158:47;;10232:17;10250:1;10232:20;;;;;;;;;;;;;;10215:11;10227:1;10215:14;;;;;;;;;;;;;:37;;;;;10263:42;;:::i;:::-;-1:-1:-1;10308:219:18;;;;;;;;;10360:14;;-1:-1:-1;;;;;10308:219:18;;;;;;10398:13;;;;10308:219;;;;;;;10437:18;;;;10308:219;;;;10491:25;;;-1:-1:-1;;;;;10491:25:18;;;10308:219;;;10491:25;;;;10308:219;;;;;;;;10538:41;;:::i;:::-;10582:218;;;;;;;;10634:4;:13;;;-1:-1:-1;;;;;10582:218:18;;;;;10671:4;:14;;;-1:-1:-1;;;;;10582:218:18;;;;;10711:4;:17;;;10582:218;;;;10764:4;:25;;;;;;;;;;;10582:218;;;;;;;;;;;10538:262;;10899:45;10923:7;10932:11;10899:23;:45::i;:::-;10958:18;;10881:63;;-1:-1:-1;10958:23:18;;-1:-1:-1;10958:23:18;:46;;;10985:11;10997:1;10985:14;;;;;;;;;;;;;;11003:1;10985:19;10958:46;10954:112;;;11020:35;;;;;10954:112;11076:27;11207:46;11231:8;11241:11;11207:23;:46::i;:::-;11268:17;;11190:63;;-1:-1:-1;11268:22:18;;-1:-1:-1;11268:22:18;:44;;;11294:10;11305:1;11294:13;;;;;;;;;;;;;;11311:1;11294:18;11268:44;11264:110;;;11328:35;;;;;;11264:110;11389:9;11384:2347;11408:17;:24;11404:1;:28;11384:2347;;;11453:25;11497:12;11492:1667;1545:1;11515:4;:37;11492:1667;;;11692:156;11739:17;11757:1;11739:20;;;;;;;;;;;;;;11781:10;11792:1;11781:13;;;;;;;;;;;;;;11816:11;11828:1;11816:14;;;;;;;;;;;;;;11692:25;:156::i;:::-;11675:11;11687:1;11675:14;;;;;;;;;;;;;;;;;:173;11870:18;;:23;;:46;;;11897:11;11909:1;11897:14;;;;;;;;;;;;;;11915:1;11897:19;11870:46;11866:98;;;11940:5;;11866:98;11998:206;1398:8;1602:3;12046:59;1602:3;12172:11;12184:1;12172:14;;;;;;;11998:206;11981:11;11993:1;11981:14;;;;;;;;;;;;;;;;;:223;12226:18;;:23;;:46;;;12253:11;12265:1;12253:14;;;;;;;;;;;;;;12271:1;12253:19;12226:46;12222:98;;;12296:5;;12222:98;12337:28;12409:46;12433:8;12443:11;12409:23;:46::i;:::-;12477:18;;12383:72;;-1:-1:-1;12383:72:18;-1:-1:-1;12477:23:18;;:46;;;12504:11;12516:1;12504:14;;;;;;;;;;;;;;12522:1;12504:19;12477:46;12473:98;;;12547:5;;;12473:98;12705:11;12692:24;;12812:17;12830:1;12812:20;;;;;;;;;;;;;;12795:10;12806:1;12795:13;;;;;;;;;;;;;;:37;12791:354;;12856:11;12984:17;13002:1;12984:20;;;;;;;;;;;;;;1602:3;12911:17;12929:1;12911:20;;;;;;;;;;;;;;12895:10;12906:1;12895:13;;;;;;;;;;;;;;:36;12894:63;:110;;;;;;12856:148;;1398:8;13030:3;:41;13026:101;;13099:5;;;;13026:101;12791:354;;-1:-1:-1;11554:6:18;;11492:1667;;;;13194:1;13176:8;:15;:19;:44;;;;;13219:1;13199:10;:17;:21;13176:44;13172:549;;;13253:8;13262:1;13253:11;;;;;;;;;;;;;;13240:7;13248:1;13240:10;;;;;;;;;;;;;:24;;;;;13550:156;13597:17;13615:1;13597:20;;;;;;;;;;;;;;13639:10;13650:1;13639:13;;;;;;;;;;;;;;13674:11;13686:1;13674:14;;;;;;;13550:156;13527:17;13545:1;13527:20;;;;;;;;;;;;;:179;;;;;13172:549;-1:-1:-1;11434:3:18;;11384:2347;;;;9677:4060;;;;;;;;;;:::o;3040:1782:46:-;3306:20;3343:24;3369:17;3413:10;3402:51;;;;;;;;;;;;:::i;:::-;3342:111;;;;3464:21;3516:4;-1:-1:-1;;;;;3503:17:46;:9;-1:-1:-1;;;;;3503:17:46;;3499:437;;3648:98;-1:-1:-1;;;;;3648:24:46;;3698:5;3722:10;3648:24;:98::i;:::-;3499:437;;;-1:-1:-1;3897:28:46;;-1:-1:-1;;;3897:28:46;;3873:10;;-1:-1:-1;;;;;3897:13:46;;;;;:28;;3873:10;;3897:28;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3499:437;4075:5;-1:-1:-1;;;;;4075:19:46;;4103:13;4173:4;-1:-1:-1;;;;;4160:17:46;:9;-1:-1:-1;;;;;4160:17:46;;:47;;4198:9;4160:47;;;4180:15;4160:47;4249:10;4314:4;-1:-1:-1;;;;;4302:16:46;:8;-1:-1:-1;;;;;4302:16:46;;:45;;4339:8;4302:45;;;4321:15;4302:45;4426:4;-1:-1:-1;;4558:1:46;4618;4634:4;4075:573;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4060:588;;4719:4;-1:-1:-1;;;;;4707:16:46;:8;-1:-1:-1;;;;;4707:16:46;;4703:84;;;4739:4;-1:-1:-1;;;;;4739:12:46;;4760;4739:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4703:84;4796:19;;;3040:1782;;;;;;;;:::o;6509:708:18:-;6666:24;6789:25;;;;6841:14;;6873:13;;;;6789:25;6904:15;;;;6751:209;;-1:-1:-1;;;6751:209:18;;6666:24;;6751:4;;:20;;:209;;6789:34;;;;;-1:-1:-1;;;;;;6789:34:18;;6841:14;;6873:13;;6937:9;;6751:209;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6735:476;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7169:6;7158:42;;;;;;;;;;;;:::i;:::-;7134:66;-1:-1:-1;7134:66:18;-1:-1:-1;6735:476:18;;-1:-1:-1;6735:476:18;13743:416;13911:21;13952:14;;;:29;;-1:-1:-1;13970:11:18;;13952:29;:49;;;-1:-1:-1;13985:16:18;;13952:49;13948:63;;;-1:-1:-1;14010:1:18;14003:8;;13948:63;14033:18;;;14045:6;14033:9;:18;:9;14065:13;;;;;:23;14061:37;;14097:1;14090:8;;;;;14061:37;14141:11;14135:1;14121:11;:15;14116:1;:21;14115:37;;;;;;;13743:416;-1:-1:-1;;;;;13743:416:18:o;1987:267:30:-;2131:39;;-1:-1:-1;;;2131:39:30;;2173:6;;-1:-1:-1;;;;;2131:15:30;;;;;:39;;2155:4;;2162:7;;2131:39;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:48;2127:121;;;2195:42;2209:5;2216:7;-1:-1:-1;;2195:13:30;:42::i;:::-;1987:267;;;:::o;1217:351::-;1359:21;1419:22;;;1455:7;1476:9;1383:112;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;1383:112:30;;;;;;;;;;;;;;-1:-1:-1;;;;;1383:112:30;-1:-1:-1;;;;;;1383:112:30;;;;;;;;;;;-1:-1:-1;1505:56:30;1544:5;1383:112;1505:30;:56::i;:::-;1217:351;;;;:::o;6923:340::-;7055:15;7072:23;7099:6;-1:-1:-1;;;;;7099:11:30;7111:8;7099:21;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7054:66;;;;7134:10;:44;;;;;7148:30;7167:10;7148:18;:30::i;:::-;7130:81;;;7194:7;;;;7130:81;7220:36;7245:10;7220:24;:36::i;6923:340::-;;;:::o;6237:395::-;6337:17;6374:10;:17;6395:1;6374:22;6370:64;;;-1:-1:-1;6419:4:30;6412:11;;6370:64;6468:2;6447:10;:17;:23;6443:183;;6486:14;6503:38;6527:10;6539:1;6503:23;:38::i;:::-;6486:55;;6559:6;6569:1;6559:11;6555:61;;;6597:4;6590:11;;;;;6555:61;6443:183;;6237:395;;;:::o;16122:220:31:-;16243:14;16290:21;16302:1;16305:5;16290:11;:21::i;:::-;16282:30;-1:-1:-1;16122:220:31;;;;;:::o;14301:688::-;14422:14;14467:5;14475:2;14467:10;14456:1;:8;:21;14452:306;;;14493:254;14518:228;14583:95;14696:1;:8;14722:5;14730:2;14722:10;14518:47;:228::i;:::-;14493:24;:254::i;:::-;-1:-1:-1;14936:13:31;14838:2;14936:13;14930:20;;14301:688::o;1334:378:34:-;1522:12;1274:10;1593:37;;1644:9;1667:6;1687:8;1557:148;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;1557:148:34;;;;;;;;;;;;;;-1:-1:-1;;;;;1557:148:34;-1:-1:-1;;;;;;1557:148:34;;;;;;;;;;;-1:-1:-1;1334:378:34;;;;;:::o;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;142:134::-;220:13;;238:33;220:13;238:33;:::i;1049:707::-;;1166:3;1159:4;1151:6;1147:17;1143:27;1133:2;;-1:-1;;1174:12;1133:2;1221:6;1208:20;1243:80;1258:64;1315:6;1258:64;:::i;:::-;1243:80;:::i;:::-;1351:21;;;1234:89;-1:-1;1395:4;1408:14;;;;1383:17;;;1497;;;1488:27;;;;1485:36;-1:-1;1482:2;;;1534:1;;1524:12;1482:2;1559:1;1544:206;1569:6;1566:1;1563:13;1544:206;;;6485:20;;1637:50;;1701:14;;;;1729;;;;1591:1;1584:9;1544:206;;;1548:14;;;;;1126:630;;;;:::o;1782:722::-;;1910:3;1903:4;1895:6;1891:17;1887:27;1877:2;;-1:-1;;1918:12;1877:2;1958:6;1952:13;1980:80;1995:64;2052:6;1995:64;:::i;1980:80::-;2088:21;;;1971:89;-1:-1;2132:4;2145:14;;;;2120:17;;;2234;;;2225:27;;;;2222:36;-1:-1;2219:2;;;2271:1;;2261:12;2219:2;2296:1;2281:217;2306:6;2303:1;2300:13;2281:217;;;6633:13;;2374:61;;2449:14;;;;2477;;;;2328:1;2321:9;2281:217;;2926:440;;3027:3;3020:4;3012:6;3008:17;3004:27;2994:2;;-1:-1;;3035:12;2994:2;3082:6;3069:20;3104:64;3119:48;3160:6;3119:48;:::i;3104:64::-;3095:73;;3188:6;3181:5;3174:21;3292:3;3224:4;3283:6;3216;3274:16;;3271:25;3268:2;;;3309:1;;3299:12;3268:2;39269:6;3224:4;3216:6;3212:17;3224:4;3250:5;3246:16;39246:30;39325:1;39307:16;;;3224:4;39307:16;39300:27;3250:5;2987:379;-1:-1;;2987:379::o;3375:442::-;;3487:3;3480:4;3472:6;3468:17;3464:27;3454:2;;-1:-1;;3495:12;3454:2;3535:6;3529:13;3557:64;3572:48;3613:6;3572:48;:::i;3557:64::-;3548:73;;3641:6;3634:5;3627:21;3745:3;3677:4;3736:6;3669;3727:16;;3724:25;3721:2;;;3762:1;;3752:12;3721:2;3772:39;3804:6;3677:4;3703:5;3699:16;3677:4;3669:6;3665:17;3772:39;:::i;:::-;;3447:370;;;;:::o;4022:174::-;4120:13;;40607:1;40597:12;;40587:2;;40623:1;;40613:12;4246:1028;;4369:4;4357:9;4352:3;4348:19;4344:30;4341:2;;;-1:-1;;4377:12;4341:2;4405:20;4369:4;4405:20;:::i;:::-;4396:29;;6498:6;6485:20;4498:16;4491:75;4634:2;4692:9;4688:22;72:20;97:33;124:5;97:33;:::i;:::-;4634:2;4649:16;;4642:75;4786:2;4840:22;;72:20;97:33;72:20;97:33;:::i;:::-;4786:2;4801:16;;4794:75;4930:2;4984:22;;72:20;97:33;72:20;97:33;:::i;:::-;4930:2;4945:16;;4938:75;5102:3;5087:19;;5074:33;-1:-1;;;;;5116:30;;5113:2;;;-1:-1;;5149:12;5113:2;5194:58;5248:3;5239:6;5228:9;5224:22;5194:58;:::i;:::-;5102:3;5180:5;5176:16;5169:84;;4335:939;;;;:::o;6696:721::-;;;;;6860:3;6848:9;6839:7;6835:23;6831:33;6828:2;;;-1:-1;;6867:12;6828:2;85:6;72:20;97:33;124:5;97:33;:::i;:::-;6919:63;-1:-1;7019:2;7058:22;;72:20;97:33;72:20;97:33;:::i;:::-;7027:63;-1:-1;7155:2;7140:18;;7127:32;-1:-1;;;;;7168:30;;7165:2;;;-1:-1;;7201:12;7165:2;7231:62;7285:7;7276:6;7265:9;7261:22;7231:62;:::i;:::-;6822:595;;;;-1:-1;7221:72;;7330:2;7369:22;6485:20;;-1:-1;;;6822:595::o;7424:833::-;;;;7643:2;7631:9;7622:7;7618:23;7614:32;7611:2;;;-1:-1;;7649:12;7611:2;7700:17;7694:24;-1:-1;;;;;7738:18;7730:6;7727:30;7724:2;;;-1:-1;;7760:12;7724:2;7862:6;7851:9;7847:22;;;429:3;422:4;414:6;410:17;406:27;396:2;;-1:-1;;437:12;396:2;477:6;471:13;499:80;514:64;571:6;514:64;:::i;499:80::-;585:16;621:6;614:5;607:21;651:4;;668:3;664:14;657:21;;651:4;643:6;639:17;773:3;651:4;;757:6;753:17;643:6;744:27;;741:36;738:2;;;-1:-1;;780:12;738:2;-1:-1;806:10;;800:217;825:6;822:1;819:13;800:217;;;2727:13;;893:61;;847:1;840:9;;;;;968:14;;;;996;;800:217;;;-1:-1;7922:18;;7916:25;7780:99;;-1:-1;7916:25;-1:-1;;;7950:30;;;7947:2;;;-1:-1;;7983:12;7947:2;;8013:89;8094:7;8085:6;8074:9;8070:22;8013:89;:::i;:::-;8003:99;;;8157:84;8233:7;8139:2;8213:9;8209:22;8157:84;:::i;:::-;8147:94;;7605:652;;;;;:::o;8264:657::-;;;8446:2;8434:9;8425:7;8421:23;8417:32;8414:2;;;-1:-1;;8452:12;8414:2;8503:17;8497:24;-1:-1;;;;;8541:18;8533:6;8530:30;8527:2;;;-1:-1;;8563:12;8527:2;8593:89;8674:7;8665:6;8654:9;8650:22;8593:89;:::i;:::-;8583:99;;8740:2;8729:9;8725:18;8719:25;8705:39;;8541:18;8756:6;8753:30;8750:2;;;-1:-1;;8786:12;8750:2;;8816:89;8897:7;8888:6;8877:9;8873:22;8816:89;:::i;:::-;8806:99;;;8408:513;;;;;:::o;8928:981::-;;;;;;9133:3;9121:9;9112:7;9108:23;9104:33;9101:2;;;-1:-1;;9140:12;9101:2;2869:6;2856:20;2881:32;2907:5;2881:32;:::i;:::-;9192:62;-1:-1;9291:2;9330:22;;72:20;97:33;72:20;97:33;:::i;:::-;9299:63;-1:-1;9399:2;9438:22;;72:20;97:33;72:20;97:33;:::i;:::-;9407:63;-1:-1;9535:2;9520:18;;9507:32;-1:-1;;;;;9548:30;;;9545:2;;;-1:-1;;9581:12;9545:2;9611:62;9665:7;9656:6;9645:9;9641:22;9611:62;:::i;:::-;9601:72;;9738:3;9727:9;9723:19;9710:33;9696:47;;9559:18;9755:6;9752:30;9749:2;;;-1:-1;;9785:12;9749:2;;9815:78;9885:7;9876:6;9865:9;9861:22;9815:78;:::i;:::-;9805:88;;;9095:814;;;;;;;;:::o;9916:845::-;;;;;;10096:3;10084:9;10075:7;10071:23;10067:33;10064:2;;;-1:-1;;10103:12;10064:2;2869:6;2856:20;2881:32;2907:5;2881:32;:::i;:::-;10155:62;-1:-1;10254:2;10293:22;;72:20;97:33;72:20;97:33;:::i;:::-;10262:63;-1:-1;10362:2;10401:22;;72:20;97:33;72:20;97:33;:::i;:::-;10370:63;-1:-1;10498:2;10483:18;;10470:32;-1:-1;;;;;10511:30;;10508:2;;;-1:-1;;10544:12;10508:2;10574:62;10628:7;10619:6;10608:9;10604:22;10574:62;:::i;:::-;10058:703;;;;-1:-1;10058:703;;10673:3;10713:22;6485:20;;10058:703;-1:-1;;;10058:703::o;10768:360::-;;10892:2;10880:9;10871:7;10867:23;10863:32;10860:2;;;-1:-1;;10898:12;10860:2;10949:17;10943:24;-1:-1;;;;;10979:6;10976:30;10973:2;;;-1:-1;;11009:12;10973:2;11039:73;11104:7;11095:6;11084:9;11080:22;11039:73;:::i;11135:552::-;;;11304:2;11292:9;11283:7;11279:23;11275:32;11272:2;;;-1:-1;;11310:12;11272:2;3937:6;3931:13;3949:61;4004:5;3949:61;:::i;:::-;11522:2;11507:18;;11501:25;11362:102;;-1:-1;;;;;;11535:30;;11532:2;;;-1:-1;;11568:12;11532:2;11598:73;11663:7;11654:6;11643:9;11639:22;11598:73;:::i;11694:410::-;;11843:2;11831:9;11822:7;11818:23;11814:32;11811:2;;;-1:-1;;11849:12;11811:2;11900:17;11894:24;-1:-1;;;;;11938:18;11930:6;11927:30;11924:2;;;-1:-1;;11960:12;11924:2;12056:22;;;;5458:4;5437:19;;;5433:30;5430:2;;;-1:-1;;5466:12;5430:2;5494:20;5458:4;5494:20;:::i;:::-;5637:22;6633:13;5587:16;5580:86;5767:60;5823:3;11843:2;5803:9;5799:22;5767:60;:::i;:::-;11843:2;5753:5;5749:16;5742:86;5930:60;5986:3;5897:2;5966:9;5962:22;5930:60;:::i;:::-;5897:2;5916:5;5912:16;5905:86;6085:60;6141:3;6052:2;6121:9;6117:22;6085:60;:::i;:::-;6052:2;6071:5;6067:16;6060:86;6228:3;6217:9;6213:19;6207:26;11938:18;6245:6;6242:30;6239:2;;;-1:-1;;6275:12;6239:2;6320:69;6385:3;6376:6;6365:9;6361:22;6320:69;:::i;:::-;6228:3;6302:16;;6295:95;-1:-1;6306:5;11805:299;-1:-1;;;;;11805:299::o;12111:907::-;;;;;12325:3;12313:9;12304:7;12300:23;12296:33;12293:2;;;-1:-1;;12332:12;12293:2;12390:17;12377:31;-1:-1;;;;;12428:18;12420:6;12417:30;12414:2;;;-1:-1;;12450:12;12414:2;12480:87;12559:7;12550:6;12539:9;12535:22;12480:87;:::i;:::-;12470:97;;12604:2;12647:9;12643:22;72:20;63:29;;97:33;124:5;97:33;:::i;:::-;12612:63;;-1:-1;12712:2;12751:22;;72:20;;97:33;72:20;97:33;:::i;:::-;12720:63;;-1:-1;12848:2;12833:18;;12820:32;;12861:30;;;12858:2;;;-1:-1;;12894:12;12858:2;;12924:78;12994:7;12985:6;12974:9;12970:22;12924:78;:::i;:::-;12914:88;;;12287:731;;;;;;;:::o;13025:771::-;;;;;13214:3;13202:9;13193:7;13189:23;13185:33;13182:2;;;-1:-1;;13221:12;13182:2;13279:17;13266:31;-1:-1;;;;;13309:6;13306:30;13303:2;;;-1:-1;;13339:12;13303:2;13369:87;13448:7;13439:6;13428:9;13424:22;13369:87;:::i;:::-;13359:97;;;13493:2;13536:9;13532:22;2579:20;13501:63;;13601:2;13644:9;13640:22;72:20;97:33;124:5;97:33;:::i;:::-;13609:63;-1:-1;13709:2;13748:22;;72:20;97:33;72:20;97:33;:::i;:::-;13176:620;;;;-1:-1;13176:620;;-1:-1;;13176:620::o;13803:263::-;;13918:2;13906:9;13897:7;13893:23;13889:32;13886:2;;;-1:-1;;13924:12;13886:2;-1:-1;6633:13;;13880:186;-1:-1;13880:186::o;14073:399::-;;;14205:2;14193:9;14184:7;14180:23;14176:32;14173:2;;;-1:-1;;14211:12;14173:2;-1:-1;;6633:13;;14374:2;14424:22;;;6633:13;;;;;-1:-1;14167:305::o;15397:690::-;;15590:5;35292:12;35966:6;35961:3;35954:19;36003:4;;35998:3;35994:14;15602:93;;36003:4;15766:5;34988:14;-1:-1;15805:260;15830:6;15827:1;15824:13;15805:260;;;15891:13;;16996:37;;14633:14;;;;35694;;;;15852:1;15845:9;15805:260;;;-1:-1;16071:10;;15521:566;-1:-1;;;;;15521:566::o;17282:323::-;;17414:5;35292:12;35966:6;35961:3;35954:19;17497:52;17542:6;36003:4;35998:3;35994:14;36003:4;17523:5;17519:16;17497:52;:::i;:::-;39702:7;39686:14;-1:-1;;39682:28;17561:39;;;;36003:4;17561:39;;17362:243;-1:-1;;17362:243::o;18703:150::-;39939:1;39932:5;39929:12;39919:2;;39945:9;39919:2;18786:62;;18780:73::o;19433:1073::-;;19683:16;19677:23;17003:3;16996:37;19855:4;19848:5;19844:16;19838:23;5127:18;;37915:42;;;;15117:5;37904:54;19855:4;19919:3;19915:14;15079:45;37915:42;20017:4;20010:5;20006:16;20000:23;37904:54;20017:4;20081:3;20077:14;15079:45;37915:42;20171:4;20164:5;20160:16;20154:23;37904:54;20171:4;20235:3;20231:14;15079:45;;;20325:4;20318:5;20314:16;20308:23;19602:4;20325;20355:3;20351:14;20344:38;20397:71;19602:4;19597:3;19593:14;20449:12;20397:71;:::i;20743:271::-;;18122:5;35292:12;18233:52;18278:6;18273:3;18266:4;18259:5;18255:16;18233:52;:::i;:::-;18297:16;;;;;20877:137;-1:-1;;20877:137::o;21021:349::-;-1:-1;;;;;37904:54;;;;14922:58;;21356:2;21341:18;;16996:37;21184:2;21169:18;;21155:215::o;21377:333::-;-1:-1;;;;;37904:54;;;15079:45;;37904:54;;21696:2;21681:18;;15079:45;21532:2;21517:18;;21503:207::o;21717:628::-;-1:-1;;;;;37904:54;;;15079:45;;37904:54;;22105:2;22090:18;;15079:45;37136:13;;37129:21;22182:2;22167:18;;16889:34;21940:3;22219:2;22204:18;;22197:48;;;21717:628;;22259:76;;21925:19;;22321:6;22259:76;:::i;22352:640::-;-1:-1;;;;;37904:54;;;15079:45;;37904:54;;22746:2;22731:18;;15079:45;22581:3;22783:2;22768:18;;22761:48;;;22352:640;;22823:76;;22566:19;;22885:6;22823:76;:::i;:::-;22815:84;;17026:5;22978:2;22967:9;22963:18;16996:37;22552:440;;;;;;;:::o;22999:417::-;-1:-1;;;;;37904:54;;15079:45;;23172:2;23290;23275:18;;23268:48;;;22999:417;;23330:76;;23157:18;;23392:6;23330:76;:::i;23423:876::-;-1:-1;;;;;37904:54;;15079:45;;23423:876;23843:84;23923:2;23908:18;;23899:6;23843:84;:::i;:::-;23746:3;23960:2;23949:9;23945:18;23938:48;24000:108;23746:3;23735:9;23731:19;24094:6;24000:108;:::i;:::-;24156:9;24150:4;24146:20;24141:2;24130:9;24126:18;24119:48;24181:108;24284:4;24275:6;24181:108;:::i;:::-;24173:116;23717:582;-1:-1;;;;;;;23717:582::o;24306:1644::-;-1:-1;;;;;37904:54;;;15079:45;;24306:1644;;24853:3;;24950:84;25030:2;25015:18;;25006:6;24950:84;:::i;:::-;24853:3;25067:2;25056:9;25052:18;25045:48;25107:108;24853:3;24842:9;24838:19;25201:6;25107:108;:::i;:::-;25099:116;;25263:9;25257:4;25253:20;25248:2;25237:9;25233:18;25226:48;25288:108;25391:4;25382:6;25288:108;:::i;:::-;37904:54;;;25475:3;25460:19;;15079:45;25280:116;-1:-1;25491:85;25571:3;25556:19;;25547:6;25491:85;:::i;:::-;25625:9;25619:4;25615:20;25609:3;25598:9;25594:19;25587:49;25650:108;25753:4;25744:6;25650:108;:::i;:::-;25642:116;;25807:9;25801:4;25797:20;25791:3;25780:9;25776:19;25769:49;25832:108;25935:4;25926:6;25832:108;:::i;:::-;25824:116;24824:1126;-1:-1;;;;;;;;;;;24824:1126::o;26297:629::-;;26552:2;26573:17;26566:47;26627:108;26552:2;26541:9;26537:18;26721:6;26627:108;:::i;:::-;26783:9;26777:4;26773:20;26768:2;26757:9;26753:18;26746:48;26808:108;26911:4;26902:6;26808:108;:::i;:::-;26800:116;26523:403;-1:-1;;;;;26523:403::o;26933:210::-;37136:13;;37129:21;16889:34;;27054:2;27039:18;;27025:118::o;27150:936::-;;17026:5;17003:3;16996:37;27479:3;27598:2;27587:9;27583:18;27576:48;27638:76;27479:3;27468:9;27464:19;27700:6;27638:76;:::i;:::-;27762:9;27756:4;27752:20;27747:2;27736:9;27732:18;27725:48;27787:108;27890:4;27881:6;27787:108;:::i;:::-;27779:116;;27943:9;27937:4;27933:20;27928:2;27917:9;27913:18;27906:48;27968:108;28071:4;28062:6;27968:108;:::i;28093:896::-;-1:-1;;;;;;37302:78;;17234:36;;-1:-1;;;;;37904:54;;;28561:2;28546:18;;15079:45;37904:54;;28644:2;28629:18;;15079:45;37915:42;28681:2;28666:18;;28659:48;;;28093:896;;28721:76;;28383:19;;28783:6;28721:76;:::i;:::-;28846:9;28840:4;28836:20;28830:3;28819:9;28815:19;28808:49;28871:108;28974:4;28965:6;28871:108;:::i;:::-;28863:116;28369:620;-1:-1;;;;;;;;28369:620::o;28996:748::-;-1:-1;;;;;;37302:78;;17234:36;;-1:-1;;;;;37904:54;;;29414:2;29399:18;;15079:45;37904:54;;29497:2;29482:18;;15079:45;37915:42;29534:2;29519:18;;29512:48;;;28996:748;;29574:76;;29236:19;;29636:6;29574:76;:::i;:::-;29566:84;;17026:5;29729:3;29718:9;29714:19;16996:37;29222:522;;;;;;;;:::o;29751:306::-;;29896:2;29917:17;29910:47;29971:76;29896:2;29885:9;29881:18;30033:6;29971:76;:::i;30064:1260::-;-1:-1;;;;;37904:54;;;18419:73;;30679:2;30664:18;;16996:37;;;37904:54;;;30785:2;30770:18;;18419:73;37904:54;;;30884:2;30869:18;;15079:45;30967:3;30952:19;;16996:37;;;37915:42;31044:19;;18939:58;;;37904:54;;31159:3;31144:19;;15079:45;30491:3;31197;31182:19;;31175:49;;;30064:1260;;31238:76;30476:19;;;31300:6;31238:76;:::i;31331:510::-;31547:2;31532:18;;39827:1;39817:12;;39807:2;;39833:9;39807:2;18608:83;;;31744:2;31729:18;;16996:37;;;;31827:2;31812:18;;;16996:37;31518:323;:::o;31848:416::-;32048:2;32062:47;;;32033:18;;;35954:19;19270:34;35994:14;;;19250:55;19324:12;;;32019:245::o;32271:406::-;;32466:2;32487:17;32480:47;32541:126;32466:2;32455:9;32451:18;32653:6;32541:126;:::i;32684:740::-;;32963:3;32985:17;32978:47;33039:126;32963:3;32952:9;32948:19;33151:6;33039:126;:::i;:::-;33244:2;33229:18;;16996:37;;;;-1:-1;;;;;;37904:54;;;33327:2;33312:18;;15079:45;37904:54;;33410:2;33395:18;;;15079:45;33031:134;32934:490;-1:-1;32934:490::o;33431:222::-;16996:37;;;33558:2;33543:18;;33529:124::o;33660:256::-;33722:2;33716:9;33748:17;;;-1:-1;;;;;33808:34;;33844:22;;;33805:62;33802:2;;;33880:1;;33870:12;33802:2;33722;33889:22;33700:216;;-1:-1;33700:216::o;33923:304::-;;-1:-1;;;;;34074:6;34071:30;34068:2;;;-1:-1;;34104:12;34068:2;-1:-1;34149:4;34137:17;;;34202:15;;34005:222::o;34545:321::-;;-1:-1;;;;;34680:6;34677:30;34674:2;;;-1:-1;;34710:12;34674:2;-1:-1;39702:7;34764:17;-1:-1;;34760:33;34851:4;34841:15;;34611:255::o;39342:268::-;39407:1;39414:101;39428:6;39425:1;39422:13;39414:101;;;39495:11;;;39489:18;39476:11;;;39469:39;39450:2;39443:10;39414:101;;;39530:6;39527:1;39524:13;39521:2;;;-1:-1;;39407:1;39577:16;;39570:27;39391:219::o;39968:117::-;-1:-1;;;;;37904:54;;40027:35;;40017:2;;40076:1;;40066:12;40017:2;40011:74;:::o;40216:115::-;-1:-1;;;;;;37302:78;;40274:34;;40264:2;;40322:1;;40312:12"
            }
        }
    },
    "sourceTreeHashHex": "0x253eea1784b8e6c873f0b773f6cda30712629a29f1a8560c550c83aee0125497",
    "sources": {
        "./KyberSampler.sol": {
            "id": 11,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IKyberNetwork.sol\";\nimport \"@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinKyber.sol\";\nimport \"./SwapRevertSampler.sol\";\n\ncontract KyberSampler is\n    MixinKyber,\n    SwapRevertSampler\n{\n\n    /// @dev Gas limit for Kyber calls.\n    uint256 constant private KYBER_CALL_GAS = 500e3; // 500k\n    /// @dev Kyber ETH pseudo-address.\n    address constant internal KYBER_ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n    constructor(IEtherTokenV06 weth)\n        public\n        MixinKyber(weth)\n    { }\n\n    struct KyberSamplerOpts {\n        uint256 reserveOffset;\n        address hintHandler;\n        address networkProxy;\n        address weth;\n        bytes hint;\n    }\n\n    function sampleSwapFromKyber(\n        address sellToken,\n        address buyToken,\n        bytes memory bridgeData,\n        uint256 takerTokenAmount\n    )\n        external\n        returns (uint256)\n    {\n        KyberSamplerOpts memory opts = abi.decode(bridgeData, (KyberSamplerOpts));\n        return _tradeKyberInternal(\n            // these are Immutable in MixinKyber, since they are only set in constructor they must be passed in\n            IERC20TokenV06(KYBER_ETH_ADDRESS),\n            IEtherTokenV06(opts.weth),\n            IERC20TokenV06(sellToken),\n            IERC20TokenV06(buyToken),\n            takerTokenAmount,\n            abi.encode(opts.networkProxy, opts.hint)\n        );\n    }\n\n    /// @dev Sample sell quotes from Kyber.\n    /// @param opts KyberSamplerOpts The nth reserve\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return reserveId The id of the reserve found at reserveOffset\n    /// @return hint The hint for the selected reserve\n    /// @return gasUsed Gas consumed per sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token amount.\n    function sampleSellsFromKyberNetwork(\n        KyberSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        returns (\n            bytes32 reserveId,\n            bytes memory hint,\n            uint256[] memory gasUsed,\n            uint256[] memory makerTokenAmounts\n        )\n    {\n        reserveId = _getNextReserveId(opts, takerToken, makerToken);\n        if (reserveId == 0x0) {\n            return (reserveId, hint, gasUsed, makerTokenAmounts);\n        }\n        opts.hint = this.encodeKyberHint(opts, reserveId, takerToken, makerToken);\n        hint = opts.hint;\n\n        (gasUsed, makerTokenAmounts) = _sampleSwapQuotesRevert(\n            SwapRevertSamplerQuoteOpts({\n                sellToken: takerToken,\n                buyToken: makerToken,\n                bridgeData: abi.encode(opts),\n                getSwapQuoteCallback: this.sampleSwapFromKyber\n            }),\n            takerTokenAmounts\n        );\n    }\n\n    /// @dev Sample buy quotes from Kyber.\n    /// @param opts KyberSamplerOpts The nth reserve\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return reserveId The id of the reserve found at reserveOffset\n    /// @return hint The hint for the selected reserve\n    /// @return gasUsed Gas consumed for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token amount.\n    function sampleBuysFromKyberNetwork(\n        KyberSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        returns (\n            bytes32 reserveId,\n            bytes memory hint,\n            uint256[] memory gasUsed,\n            uint256[] memory takerTokenAmounts\n        )\n    {\n        reserveId = _getNextReserveId(opts, takerToken, makerToken);\n        if (reserveId == 0x0) {\n            return (reserveId, hint, gasUsed, takerTokenAmounts);\n        }\n        opts.hint = this.encodeKyberHint(opts, reserveId, takerToken, makerToken);\n        hint = opts.hint;\n\n        (gasUsed, takerTokenAmounts) = _sampleSwapApproximateBuys(\n            SwapRevertSamplerBuyQuoteOpts({\n                sellToken: takerToken,\n                buyToken: makerToken,\n                sellTokenData: abi.encode(opts),\n                buyTokenData: abi.encode(opts),\n                getSwapQuoteCallback: this.sampleSwapFromKyber\n            }),\n            makerTokenAmounts\n        );\n    }\n\n    function encodeKyberHint(\n        KyberSamplerOpts memory opts,\n        bytes32 reserveId,\n        address takerToken,\n        address makerToken\n    )\n        public\n        view\n        returns (bytes memory hint)\n    {\n        // Build a hint selecting the single reserve\n        IKyberHintHandler kyberHint = IKyberHintHandler(opts.hintHandler);\n\n        // All other reserves should be ignored with this hint\n        bytes32[] memory selectedReserves = new bytes32[](1);\n        selectedReserves[0] = reserveId;\n        uint256[] memory emptySplits = new uint256[](0);\n\n        if (takerToken == opts.weth) {\n            // ETH to Token\n            try\n                kyberHint.buildEthToTokenHint\n                    {gas: KYBER_CALL_GAS}\n                    (\n                        makerToken,\n                        IKyberHintHandler.TradeType.MaskIn,\n                        selectedReserves,\n                        emptySplits\n                    )\n                returns (bytes memory result)\n            {\n                return result;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n            }\n        } else if (makerToken == opts.weth) {\n            // Token to ETH\n            try\n                kyberHint.buildTokenToEthHint\n                    {gas: KYBER_CALL_GAS}\n                    (\n                        takerToken,\n                        IKyberHintHandler.TradeType.MaskIn,\n                        selectedReserves,\n                        emptySplits\n                    )\n                returns (bytes memory result)\n            {\n                return result;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n            }\n\n        } else {\n            // Token to Token\n            // We use the same reserve both ways\n            try\n                kyberHint.buildTokenToTokenHint\n                    {gas: KYBER_CALL_GAS}\n                    (\n                        takerToken,\n                        IKyberHintHandler.TradeType.MaskIn,\n                        selectedReserves,\n                        emptySplits,\n                        makerToken,\n                        IKyberHintHandler.TradeType.MaskIn,\n                        selectedReserves,\n                        emptySplits\n                    )\n                returns (bytes memory result)\n            {\n                return result;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n            }\n        }\n    }\n\n    function _getNextReserveId(\n        KyberSamplerOpts memory opts,\n        address takerToken,\n        address makerToken\n    )\n        internal\n        view\n        returns (bytes32 reserveId)\n    {\n        // Fetch the registered reserves for this pair\n        IKyberHintHandler kyberHint = IKyberHintHandler(opts.hintHandler);\n        (bytes32[] memory reserveIds, ,) = kyberHint.getTradingReserves(\n            takerToken == opts.weth ? KYBER_ETH_ADDRESS : takerToken,\n            makerToken == opts.weth ? KYBER_ETH_ADDRESS : makerToken,\n            true,\n            new bytes(0) // empty hint\n        );\n\n        if (opts.reserveOffset >= reserveIds.length) {\n            return 0x0;\n        }\n\n        reserveId = reserveIds[opts.reserveOffset];\n        // Ignore Kyber Bridged Reserves (0xbb)\n        if (uint256(reserveId >> 248) == 0xbb) {\n            return 0x0;\n        }\n\n        return reserveId;\n    }\n}\n"
        },
        "./interfaces/IKyberNetwork.sol": {
            "id": 25,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n// Keepin everything together\ninterface IKyberNetwork {\n\n}\n\ninterface IKyberHintHandler {\n\n    enum TradeType {BestOfAll, MaskIn, MaskOut, Split}\n\n    enum ProcessWithRate {NotRequired, Required}\n\n    function getTradingReserves(\n        address tokenSrc,\n        address tokenDest,\n        bool isTokenToToken,\n        bytes calldata hint\n    )\n        external\n        view\n        returns (\n            bytes32[] memory reserveIds,\n            uint256[] memory splitValuesBps,\n            ProcessWithRate processWithRate\n        );\n\n    function buildTokenToEthHint(\n        address tokenSrc,\n        TradeType tokenToEthType,\n        bytes32[] calldata tokenToEthReserveIds,\n        uint256[] calldata tokenToEthSplits\n    )\n        external\n        view\n        returns (bytes memory hint);\n\n    function buildEthToTokenHint(\n        address tokenDest,\n        TradeType ethToTokenType,\n        bytes32[] calldata ethToTokenReserveIds,\n        uint256[] calldata ethToTokenSplits\n    )\n        external\n        view\n        returns (bytes memory hint);\n\n    function buildTokenToTokenHint(\n        address tokenSrc,\n        TradeType tokenToEthType,\n        bytes32[] calldata tokenToEthReserveIds,\n        uint256[] calldata tokenToEthSplits,\n        address tokenDest,\n        TradeType ethToTokenType,\n        bytes32[] calldata ethToTokenReserveIds,\n        uint256[] calldata ethToTokenSplits\n    )\n        external\n        view\n        returns (bytes memory hint);\n}\n"
        },
        "@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinKyber.sol": {
            "id": 46,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol\";\nimport \"../IBridgeAdapter.sol\";\n\ninterface IKyberNetworkProxy {\n\n    /// @dev Sells `sellTokenAddress` tokens for `buyTokenAddress` tokens\n    /// using a hint for the reserve.\n    /// @param sellToken Token to sell.\n    /// @param sellAmount Amount of tokens to sell.\n    /// @param buyToken Token to buy.\n    /// @param recipientAddress Address to send bought tokens to.\n    /// @param maxBuyTokenAmount A limit on the amount of tokens to buy.\n    /// @param minConversionRate The minimal conversion rate. If actual rate\n    ///        is lower, trade is canceled.\n    /// @param walletId The wallet ID to send part of the fees\n    /// @param hint The hint for the selective inclusion (or exclusion) of reserves\n    /// @return boughtAmount Amount of tokens bought.\n    function tradeWithHint(\n        IERC20TokenV06 sellToken,\n        uint256 sellAmount,\n        IERC20TokenV06 buyToken,\n        address payable recipientAddress,\n        uint256 maxBuyTokenAmount,\n        uint256 minConversionRate,\n        address payable walletId,\n        bytes calldata hint\n    )\n        external\n        payable\n        returns (uint256 boughtAmount);\n\n    function getExpectedRateAfterFee(\n        address src,\n        address dest,\n        uint256 srcQty,\n        uint256 platformFeeBps,\n        bytes calldata hint\n    )\n        external\n        view\n        returns (uint256 expectedRate);\n}\n\ncontract MixinKyber {\n\n    using LibERC20TokenV06 for IERC20TokenV06;\n\n    /// @dev Address indicating the trade is using ETH\n    IERC20TokenV06 private immutable KYBER_ETH_ADDRESS =\n        IERC20TokenV06(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\n    /// @dev Mainnet address of the WETH contract.\n    IEtherTokenV06 private immutable WETH;\n\n    constructor(IEtherTokenV06 weth)\n        public\n    {\n        WETH = weth;\n    }\n\n    function _tradeKyber(\n        IERC20TokenV06 sellToken,\n        IERC20TokenV06 buyToken,\n        uint256 sellAmount,\n        bytes memory bridgeData\n    )\n        internal\n        returns (uint256 boughtAmount)\n    {\n        return _tradeKyberInternal(KYBER_ETH_ADDRESS, WETH, sellToken, buyToken, sellAmount, bridgeData);\n    }\n\n    function _tradeKyberInternal(\n        IERC20TokenV06 kyberEthAddress,\n        IEtherTokenV06 weth,\n        IERC20TokenV06 sellToken,\n        IERC20TokenV06 buyToken,\n        uint256 sellAmount,\n        bytes memory bridgeData\n    )\n        internal\n        returns (uint256 boughtAmount)\n    {\n        (IKyberNetworkProxy kyber, bytes memory hint) =\n            abi.decode(bridgeData, (IKyberNetworkProxy, bytes));\n\n        uint256 payableAmount = 0;\n        if (sellToken != weth) {\n            // If the input token is not WETH, grant an allowance to the exchange\n            // to spend them.\n            sellToken.approveIfBelow(\n                address(kyber),\n                sellAmount\n            );\n        } else {\n            // If the input token is WETH, unwrap it and attach it to the call.\n            payableAmount = sellAmount;\n            weth.withdraw(payableAmount);\n        }\n\n        // Try to sell all of this contract's input token balance through\n        // `KyberNetworkProxy.trade()`.\n        boughtAmount = kyber.tradeWithHint{ value: payableAmount }(\n            // Input token.\n            sellToken == weth ? kyberEthAddress : sellToken,\n            // Sell amount.\n            sellAmount,\n            // Output token.\n            buyToken == weth ? kyberEthAddress : buyToken,\n            // Transfer to this contract\n            address(uint160(address(this))),\n            // Buy as much as possible.\n            uint256(-1),\n            // Lowest minimum conversion rate\n            1,\n            // No affiliate address.\n            address(0),\n            hint\n        );\n        // If receving ETH, wrap it to WETH.\n        if (buyToken == weth) {\n            weth.deposit{ value: boughtAmount }();\n        }\n        return boughtAmount;\n    }\n}\n"
        },
        "@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol": {
            "id": 30,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol\";\nimport \"./IERC20TokenV06.sol\";\n\n\nlibrary LibERC20TokenV06 {\n    bytes constant private DECIMALS_CALL_DATA = hex\"313ce567\";\n\n    /// @dev Calls `IERC20TokenV06(token).approve()`.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param spender The address that receives an allowance.\n    /// @param allowance The allowance to set.\n    function compatApprove(\n        IERC20TokenV06 token,\n        address spender,\n        uint256 allowance\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.approve.selector,\n            spender,\n            allowance\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).approve()` and sets the allowance to the\n    ///      maximum if the current approval is not already >= an amount.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param spender The address that receives an allowance.\n    /// @param amount The minimum allowance needed.\n    function approveIfBelow(\n        IERC20TokenV06 token,\n        address spender,\n        uint256 amount\n    )\n        internal\n    {\n        if (token.allowance(address(this), spender) < amount) {\n            compatApprove(token, spender, uint256(-1));\n        }\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).transfer()`.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param to The address that receives the tokens\n    /// @param amount Number of tokens to transfer.\n    function compatTransfer(\n        IERC20TokenV06 token,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.transfer.selector,\n            to,\n            amount\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).transferFrom()`.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param from The owner of the tokens.\n    /// @param to The address that receives the tokens\n    /// @param amount Number of tokens to transfer.\n    function compatTransferFrom(\n        IERC20TokenV06 token,\n        address from,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.transferFrom.selector,\n            from,\n            to,\n            amount\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Retrieves the number of decimals for a token.\n    ///      Returns `18` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @return tokenDecimals The number of decimals places for the token.\n    function compatDecimals(IERC20TokenV06 token)\n        internal\n        view\n        returns (uint8 tokenDecimals)\n    {\n        tokenDecimals = 18;\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(DECIMALS_CALL_DATA);\n        if (didSucceed && resultData.length >= 32) {\n            tokenDecimals = uint8(LibBytesV06.readUint256(resultData, 0));\n        }\n    }\n\n    /// @dev Retrieves the allowance for a token, owner, and spender.\n    ///      Returns `0` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @param owner The owner of the tokens.\n    /// @param spender The address the spender.\n    /// @return allowance_ The allowance for a token, owner, and spender.\n    function compatAllowance(IERC20TokenV06 token, address owner, address spender)\n        internal\n        view\n        returns (uint256 allowance_)\n    {\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(\n            abi.encodeWithSelector(\n                token.allowance.selector,\n                owner,\n                spender\n            )\n        );\n        if (didSucceed && resultData.length >= 32) {\n            allowance_ = LibBytesV06.readUint256(resultData, 0);\n        }\n    }\n\n    /// @dev Retrieves the balance for a token owner.\n    ///      Returns `0` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @param owner The owner of the tokens.\n    /// @return balance The token balance of an owner.\n    function compatBalanceOf(IERC20TokenV06 token, address owner)\n        internal\n        view\n        returns (uint256 balance)\n    {\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(\n            abi.encodeWithSelector(\n                token.balanceOf.selector,\n                owner\n            )\n        );\n        if (didSucceed && resultData.length >= 32) {\n            balance = LibBytesV06.readUint256(resultData, 0);\n        }\n    }\n\n    /// @dev Check if the data returned by a non-static call to an ERC20 token\n    ///      is a successful result. Supported functions are `transfer()`,\n    ///      `transferFrom()`, and `approve()`.\n    /// @param resultData The raw data returned by a non-static call to the ERC20 token.\n    /// @return isSuccessful Whether the result data indicates success.\n    function isSuccessfulResult(bytes memory resultData)\n        internal\n        pure\n        returns (bool isSuccessful)\n    {\n        if (resultData.length == 0) {\n            return true;\n        }\n        if (resultData.length >= 32) {\n            uint256 result = LibBytesV06.readUint256(resultData, 0);\n            if (result == 1) {\n                return true;\n            }\n        }\n    }\n\n    /// @dev Executes a call on address `target` with calldata `callData`\n    ///      and asserts that either nothing was returned or a single boolean\n    ///      was returned equal to `true`.\n    /// @param target The call target.\n    /// @param callData The abi-encoded call data.\n    function _callWithOptionalBooleanResult(\n        address target,\n        bytes memory callData\n    )\n        private\n    {\n        (bool didSucceed, bytes memory resultData) = target.call(callData);\n        if (didSucceed && isSuccessfulResult(resultData)) {\n            return;\n        }\n        LibRichErrorsV06.rrevert(resultData);\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol": {
            "id": 36,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibRichErrorsV06 {\n\n    // bytes4(keccak256(\"Error(string)\"))\n    bytes4 internal constant STANDARD_ERROR_SELECTOR = 0x08c379a0;\n\n    // solhint-disable func-name-mixedcase\n    /// @dev ABI encode a standard, string revert error payload.\n    ///      This is the same payload that would be included by a `revert(string)`\n    ///      solidity statement. It has the function signature `Error(string)`.\n    /// @param message The error string.\n    /// @return The ABI encoded error.\n    function StandardError(string memory message)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            STANDARD_ERROR_SELECTOR,\n            bytes(message)\n        );\n    }\n    // solhint-enable func-name-mixedcase\n\n    /// @dev Reverts an encoded rich revert reason `errorData`.\n    /// @param errorData ABI encoded error data.\n    function rrevert(bytes memory errorData)\n        internal\n        pure\n    {\n        assembly {\n            revert(add(errorData, 0x20), mload(errorData))\n        }\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol": {
            "id": 31,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./errors/LibBytesRichErrorsV06.sol\";\nimport \"./errors/LibRichErrorsV06.sol\";\n\n\nlibrary LibBytesV06 {\n\n    using LibBytesV06 for bytes;\n\n    /// @dev Gets the memory address for a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of byte array. This\n    ///         points to the header of the byte array which contains\n    ///         the length.\n    function rawAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := input\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Gets the memory address for the contents of a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of the contents of the byte array.\n    function contentAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := add(input, 32)\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Copies `length` bytes from memory location `source` to `dest`.\n    /// @param dest memory address to copy bytes to.\n    /// @param source memory address to copy bytes from.\n    /// @param length number of bytes to copy.\n    function memCopy(\n        uint256 dest,\n        uint256 source,\n        uint256 length\n    )\n        internal\n        pure\n    {\n        if (length < 32) {\n            // Handle a partial word by reading destination and masking\n            // off the bits we are interested in.\n            // This correctly handles overlap, zero lengths and source == dest\n            assembly {\n                let mask := sub(exp(256, sub(32, length)), 1)\n                let s := and(mload(source), not(mask))\n                let d := and(mload(dest), mask)\n                mstore(dest, or(s, d))\n            }\n        } else {\n            // Skip the O(length) loop when source == dest.\n            if (source == dest) {\n                return;\n            }\n\n            // For large copies we copy whole words at a time. The final\n            // word is aligned to the end of the range (instead of after the\n            // previous) to handle partial words. So a copy will look like this:\n            //\n            //  ####\n            //      ####\n            //          ####\n            //            ####\n            //\n            // We handle overlap in the source and destination range by\n            // changing the copying direction. This prevents us from\n            // overwriting parts of source that we still need to copy.\n            //\n            // This correctly handles source == dest\n            //\n            if (source > dest) {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because it\n                    // is easier to compare with in the loop, and these\n                    // are also the addresses we need for copying the\n                    // last bytes.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the last 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the last bytes in\n                    // source already due to overlap.\n                    let last := mload(sEnd)\n\n                    // Copy whole words front to back\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} lt(source, sEnd) {} {\n                        mstore(dest, mload(source))\n                        source := add(source, 32)\n                        dest := add(dest, 32)\n                    }\n\n                    // Write the last 32 bytes\n                    mstore(dEnd, last)\n                }\n            } else {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because those\n                    // are the starting points when copying a word at the end.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the first 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the first bytes in\n                    // source already due to overlap.\n                    let first := mload(source)\n\n                    // Copy whole words back to front\n                    // We use a signed comparisson here to allow dEnd to become\n                    // negative (happens when source and dest < 32). Valid\n                    // addresses in local memory will never be larger than\n                    // 2**255, so they can be safely re-interpreted as signed.\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} slt(dest, dEnd) {} {\n                        mstore(dEnd, mload(sEnd))\n                        sEnd := sub(sEnd, 32)\n                        dEnd := sub(dEnd, 32)\n                    }\n\n                    // Write the first 32 bytes\n                    mstore(dest, first)\n                }\n            }\n        }\n    }\n\n    /// @dev Returns a slices from a byte array.\n    /// @param b The byte array to take a slice from.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function slice(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure and copy contents\n        result = new bytes(to - from);\n        memCopy(\n            result.contentAddress(),\n            b.contentAddress() + from,\n            result.length\n        );\n        return result;\n    }\n\n    /// @dev Returns a slice from a byte array without preserving the input.\n    ///      When `from == 0`, the original array will match the slice.\n    ///      In other cases its state will be corrupted.\n    /// @param b The byte array to take a slice from. Will be destroyed in the process.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function sliceDestructive(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure around [from, to) in-place.\n        assembly {\n            result := add(b, from)\n            mstore(result, sub(to, from))\n        }\n        return result;\n    }\n\n    /// @dev Pops the last byte off of a byte array by modifying its length.\n    /// @param b Byte array that will be modified.\n    /// @return result The byte that was popped off.\n    function popLastByte(bytes memory b)\n        internal\n        pure\n        returns (bytes1 result)\n    {\n        if (b.length == 0) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanZeroRequired,\n                b.length,\n                0\n            ));\n        }\n\n        // Store last byte.\n        result = b[b.length - 1];\n\n        assembly {\n            // Decrement length of byte array.\n            let newLen := sub(mload(b), 1)\n            mstore(b, newLen)\n        }\n        return result;\n    }\n\n    /// @dev Tests equality of two byte arrays.\n    /// @param lhs First byte array to compare.\n    /// @param rhs Second byte array to compare.\n    /// @return equal True if arrays are the same. False otherwise.\n    function equals(\n        bytes memory lhs,\n        bytes memory rhs\n    )\n        internal\n        pure\n        returns (bool equal)\n    {\n        // Keccak gas cost is 30 + numWords * 6. This is a cheap way to compare.\n        // We early exit on unequal lengths, but keccak would also correctly\n        // handle this.\n        return lhs.length == rhs.length && keccak256(lhs) == keccak256(rhs);\n    }\n\n    /// @dev Reads an address from a position in a byte array.\n    /// @param b Byte array containing an address.\n    /// @param index Index in byte array of address.\n    /// @return result address from byte array.\n    function readAddress(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (address result)\n    {\n        if (b.length < index + 20) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Read address from array memory\n        assembly {\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 20-byte mask to obtain address\n            result := and(mload(add(b, index)), 0xffffffffffffffffffffffffffffffffffffffff)\n        }\n        return result;\n    }\n\n    /// @dev Writes an address into a specific position in a byte array.\n    /// @param b Byte array to insert address into.\n    /// @param index Index in byte array of address.\n    /// @param input Address to put into byte array.\n    function writeAddress(\n        bytes memory b,\n        uint256 index,\n        address input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 20) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Store address into array memory\n        assembly {\n            // The address occupies 20 bytes and mstore stores 32 bytes.\n            // First fetch the 32-byte word where we'll be storing the address, then\n            // apply a mask so we have only the bytes in the word that the address will not occupy.\n            // Then combine these bytes with the address and store the 32 bytes back to memory with mstore.\n\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 12-byte mask to obtain extra bytes occupying word of memory where we'll store the address\n            let neighbors := and(\n                mload(add(b, index)),\n                0xffffffffffffffffffffffff0000000000000000000000000000000000000000\n            )\n\n            // Make sure input address is clean.\n            // (Solidity does not guarantee this)\n            input := and(input, 0xffffffffffffffffffffffffffffffffffffffff)\n\n            // Store the neighbors and address into memory\n            mstore(add(b, index), xor(input, neighbors))\n        }\n    }\n\n    /// @dev Reads a bytes32 value from a position in a byte array.\n    /// @param b Byte array containing a bytes32 value.\n    /// @param index Index in byte array of bytes32 value.\n    /// @return result bytes32 value from byte array.\n    function readBytes32(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        if (b.length < index + 32) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            result := mload(add(b, index))\n        }\n        return result;\n    }\n\n    /// @dev Writes a bytes32 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input bytes32 to put into byte array.\n    function writeBytes32(\n        bytes memory b,\n        uint256 index,\n        bytes32 input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 32) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            mstore(add(b, index), input)\n        }\n    }\n\n    /// @dev Reads a uint256 value from a position in a byte array.\n    /// @param b Byte array containing a uint256 value.\n    /// @param index Index in byte array of uint256 value.\n    /// @return result uint256 value from byte array.\n    function readUint256(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (uint256 result)\n    {\n        result = uint256(readBytes32(b, index));\n        return result;\n    }\n\n    /// @dev Writes a uint256 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input uint256 to put into byte array.\n    function writeUint256(\n        bytes memory b,\n        uint256 index,\n        uint256 input\n    )\n        internal\n        pure\n    {\n        writeBytes32(b, index, bytes32(input));\n    }\n\n    /// @dev Reads an unpadded bytes4 value from a position in a byte array.\n    /// @param b Byte array containing a bytes4 value.\n    /// @param index Index in byte array of bytes4 value.\n    /// @return result bytes4 value from byte array.\n    function readBytes4(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes4 result)\n    {\n        if (b.length < index + 4) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsFourRequired,\n                b.length,\n                index + 4\n            ));\n        }\n\n        // Arrays are prefixed by a 32 byte length field\n        index += 32;\n\n        // Read the bytes4 from array memory\n        assembly {\n            result := mload(add(b, index))\n            // Solidity does not require us to clean the trailing bytes.\n            // We do it anyway\n            result := and(result, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)\n        }\n        return result;\n    }\n\n    /// @dev Writes a new length to a byte array.\n    ///      Decreasing length will lead to removing the corresponding lower order bytes from the byte array.\n    ///      Increasing length may lead to appending adjacent in-memory bytes to the end of the byte array.\n    /// @param b Bytes array to write new length to.\n    /// @param length New length of byte array.\n    function writeLength(bytes memory b, uint256 length)\n        internal\n        pure\n    {\n        assembly {\n            mstore(b, length)\n        }\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/errors/LibBytesRichErrorsV06.sol": {
            "id": 34,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibBytesRichErrorsV06 {\n\n    enum InvalidByteOperationErrorCodes {\n        FromLessThanOrEqualsToRequired,\n        ToLessThanOrEqualsLengthRequired,\n        LengthGreaterThanZeroRequired,\n        LengthGreaterThanOrEqualsFourRequired,\n        LengthGreaterThanOrEqualsTwentyRequired,\n        LengthGreaterThanOrEqualsThirtyTwoRequired,\n        LengthGreaterThanOrEqualsNestedBytesLengthRequired,\n        DestinationLengthGreaterThanOrEqualSourceLengthRequired\n    }\n\n    // bytes4(keccak256(\"InvalidByteOperationError(uint8,uint256,uint256)\"))\n    bytes4 internal constant INVALID_BYTE_OPERATION_ERROR_SELECTOR =\n        0x28006595;\n\n    // solhint-disable func-name-mixedcase\n    function InvalidByteOperationError(\n        InvalidByteOperationErrorCodes errorCode,\n        uint256 offset,\n        uint256 required\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            INVALID_BYTE_OPERATION_ERROR_SELECTOR,\n            errorCode,\n            offset,\n            required\n        );\n    }\n}\n"
        },
        "@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol": {
            "id": 28,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\ninterface IERC20TokenV06 {\n\n    // solhint-disable no-simple-event-func-name\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 value\n    );\n\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n\n    /// @dev send `value` token to `to` from `msg.sender`\n    /// @param to The address of the recipient\n    /// @param value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transfer(address to, uint256 value)\n        external\n        returns (bool);\n\n    /// @dev send `value` token to `to` from `from` on the condition it is approved by `from`\n    /// @param from The address of the sender\n    /// @param to The address of the recipient\n    /// @param value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    )\n        external\n        returns (bool);\n\n    /// @dev `msg.sender` approves `spender` to spend `value` tokens\n    /// @param spender The address of the account able to transfer the tokens\n    /// @param value The amount of wei to be approved for transfer\n    /// @return Always true if the call has enough gas to complete execution\n    function approve(address spender, uint256 value)\n        external\n        returns (bool);\n\n    /// @dev Query total supply of token\n    /// @return Total supply of token\n    function totalSupply()\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the balance of `owner`.\n    /// @param owner The address from which the balance will be retrieved\n    /// @return Balance of owner\n    function balanceOf(address owner)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the allowance for `spender` to spend from `owner`.\n    /// @param owner The address of the account owning tokens\n    /// @param spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the number of decimals this token has.\n    function decimals()\n        external\n        view\n        returns (uint8);\n}\n"
        },
        "@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol": {
            "id": 29,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./IERC20TokenV06.sol\";\n\n\ninterface IEtherTokenV06 is\n    IERC20TokenV06\n{\n    /// @dev Wrap ether.\n    function deposit() external payable;\n\n    /// @dev Unwrap ether.\n    function withdraw(uint256 amount) external;\n}\n"
        },
        "@0x/contracts-zero-ex/contracts/src/transformers/bridges/IBridgeAdapter.sol": {
            "id": 38,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\n\n\ninterface IBridgeAdapter {\n\n    struct BridgeOrder {\n        // Upper 16 bytes: uint128 protocol ID (right-aligned)\n        // Lower 16 bytes: ASCII source name (left-aligned)\n        bytes32 source;\n        uint256 takerTokenAmount;\n        uint256 makerTokenAmount;\n        bytes bridgeData;\n    }\n\n    /// @dev Emitted when tokens are swapped with an external source.\n    /// @param source A unique ID for the source, where the upper 16 bytes\n    ///        encodes the (right-aligned) uint128 protocol ID and the\n    ///        lower 16 bytes encodes an ASCII source name.\n    /// @param inputToken The token the bridge is converting from.\n    /// @param outputToken The token the bridge is converting to.\n    /// @param inputTokenAmount Amount of input token sold.\n    /// @param outputTokenAmount Amount of output token bought.\n    event BridgeFill(\n        bytes32 source,\n        IERC20TokenV06 inputToken,\n        IERC20TokenV06 outputToken,\n        uint256 inputTokenAmount,\n        uint256 outputTokenAmount\n    );\n\n    function trade(\n        BridgeOrder calldata order,\n        IERC20TokenV06 sellToken,\n        IERC20TokenV06 buyToken,\n        uint256 sellAmount\n    )\n        external\n        returns (uint256 boughtAmount);\n}\n"
        },
        "./SwapRevertSampler.sol": {
            "id": 18,
            "content": "\n\n// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./GasOverhead.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\n\ninterface IHackedERC20 {\n    function _setBalance(address owner, uint256 amount) external;\n    function _setEnabled(bool enabled) external;\n}\n\ncontract SwapRevertSampler {\n    using LibRichErrorsV06 for bytes;\n\n    /// @dev Fixed address to register and read Gas overhead introduced by Swap revert sampling\n    address private constant GAS_OVERHEAD = 0xDeF1000000000000000000000000000000001337;\n    /// @dev Maximum approximate (positive) error rate when approximating a buy quote.\n    uint256 private constant APPROXIMATE_BUY_TARGET_EPSILON_BPS = 0.0005e4;\n    /// @dev Maximum iterations to perform when approximating a buy quote.\n    uint256 private constant APPROXIMATE_BUY_MAX_ITERATIONS = 3;\n    uint256 private constant ONE_HUNDED_PERCENT_BPS = 1e4;\n    /// @dev Upper limit of gas to give to a single Swap call\n    uint256 private constant CALL_STIPEND = 2e6;\n\n\n    // solhint-disable no-empty-blocks\n    /// @dev Payable fallback to receive ETH from Kyber/WETH.\n    receive ()\n        external\n        payable\n    { }\n\n    struct SwapRevertSamplerQuoteOpts {\n        // Address of the token which is being sold\n        address sellToken;\n        // Address of the token which is wanted\n        address buyToken;\n        // Data required for the bridge to execute the swap\n        bytes bridgeData;\n        // Callback to retrieve a swap quote.\n        function (address sellToken, address buyToken, bytes memory bridgeData, uint256 sellAmount)\n            external\n            returns (uint256)\n            getSwapQuoteCallback;\n    }\n\n    struct SwapRevertSamplerBuyQuoteOpts {\n        // Address of the token which is being sold\n        address sellToken;\n        // Address of the token which is wanted\n        address buyToken;\n        // Data required for the bridge to execute the SELL_TOKEN->BUY_TOKEN swap\n        bytes sellTokenData;\n        // Data required for the bridge to execute the BUY_TOKEN->SELL_TOKEN swap\n        bytes buyTokenData;\n        // Callback to retrieve a swap quote.\n        function (address sellToken, address buyToken, bytes memory bridgeData, uint256 sellAmount)\n            external\n            returns (uint256)\n            getSwapQuoteCallback;\n    }\n\n    function _callRevert(\n        bytes4 selector,\n        address sellToken,\n        address buyToken,\n        bytes memory bridgeData,\n        uint256 amountIn\n    )\n        external\n    {\n        // Clear any registered overhead\n        try\n            GasOverhead(GAS_OVERHEAD).clearOverhead()\n        { } catch { }\n        // Measure the gas\n        uint256 gasUsed = gasleft();\n        // Perform the sell\n        (bool success, bytes memory data) = address(this).call(\n            abi.encodeWithSelector(selector, sellToken, buyToken, bridgeData, amountIn)\n        );\n        gasUsed = gasUsed - gasleft();\n        // Remove any registered gas overhead\n        try\n            GasOverhead(GAS_OVERHEAD).overhead()\n            returns (uint256 gasOverhead)\n        {\n            gasUsed = gasUsed - gasOverhead;\n        } catch { }\n\n        if (!success) {\n            data.rrevert();\n        }\n        // Revert with the amount bought\n        _revertSingleSwapSample(abi.decode(data, (uint256)), gasUsed);\n    }\n\n    /// @dev  Mints the sell token, then performs the swap, then reverts with the amount out.\n    /// The SwapRevertSamplerQuoteOpts has been unrolled here as our ABI encoder cannot support\n    /// encoding the function\n    function _mintCallRevert(\n        bytes4 selector,\n        address sellToken,\n        address buyToken,\n        bytes memory bridgeData,\n        uint256[] memory amountsIn\n    )\n        external\n    {\n        IHackedERC20 hackedSellToken = IHackedERC20(payable(sellToken));\n        // We assume the amounts are ascending and that\n        // the underlying call can handle selling a specific amount\n        uint256 amountIn = amountsIn[amountsIn.length - 1];\n\n        // Enable sell token to be tracked and shadowed\n        try\n            hackedSellToken._setEnabled(true)\n        { } catch { }\n\n        // Mint enough to sell\n        try\n            hackedSellToken._setBalance(address(this), amountIn)\n        { } catch { }\n\n        try\n            IEtherTokenV06(payable(sellToken)).deposit{ value: amountIn }()\n        { } catch { }\n\n        // Burn any excess ETH to avoid balance issues for sources which use ETH directly\n        address(0).transfer(address(this).balance);\n\n        uint256[] memory amountsOut = new uint256[](amountsIn.length);\n        uint256[] memory gasUsed = new uint256[](amountsIn.length);\n\n        for (uint256 i = 0; i < amountsIn.length; i++) {\n            try\n                this._callRevert{gas: CALL_STIPEND}(\n                    selector,\n                    sellToken,\n                    buyToken,\n                    bridgeData,\n                    amountsIn[i]\n                )\n            {\n                require(false, \"Swap Sample should have reverted\");\n            } catch (bytes memory reason) {\n                // Parse the reverted sample data\n                (amountsOut[i], gasUsed[i]) = _parseRevertedSingleSwapSample(reason);\n                // If we detect the amount out is 0 then we return early\n                // rather than continue performing excess work\n\n                // Some sources (Balancer) display issues, especially with small amounts\n                // Where the amountsOut can range, e.g 448,0,0,0,2476,3048,0,4279,4941,0,0,7133,\n\n                if (amountsOut[i] == 0) {\n                    break;\n                }\n            }\n        }\n        // Revert the entire sampling\n        _revertSwapSample(amountsOut, gasUsed);\n    }\n\n    function _sampleSwapQuotesRevert(\n        SwapRevertSamplerQuoteOpts memory opts,\n        uint256[] memory amountsIn\n    )\n        internal\n        returns (uint256[] memory gasUsed, uint256[] memory amountsOut)\n    {\n        try\n            this._mintCallRevert(\n                opts.getSwapQuoteCallback.selector,\n                opts.sellToken,\n                opts.buyToken,\n                opts.bridgeData,\n                amountsIn\n            )\n        {\n            require(false, \"Swap Sample should have reverted\");\n        } catch (bytes memory reason) {\n            // Parse the reverted sample datas\n            (amountsOut, gasUsed) = abi.decode(reason, (uint256[], uint256[]));\n        }\n    }\n\n    function _getNativeWrappedToken()\n        internal\n        view\n        returns (IEtherTokenV06)\n    {\n        uint256 chainId;\n        assembly {\n            chainId := chainid()\n        }\n        address token;\n        if (chainId == 1) {\n            // Ethereum Mainnet\n            token = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n        } else if (chainId == 3) {\n            // Ropsten\n            token = 0xc778417E063141139Fce010982780140Aa0cD5Ab;\n        } else if (chainId == 4) {\n            // Rinkeby\n            token = 0xc778417E063141139Fce010982780140Aa0cD5Ab;\n        } else if (chainId == 42) {\n            // Kovan\n            token = 0xd0A1E359811322d97991E03f863a0C30C2cF029C;\n        } else if (chainId == 56) {\n            // BSC \n            token = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\n        } else if (chainId == 137) {\n            // Polygon\n            token = 0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270;\n        } else if (chainId == 1337) {\n            // 0x Ganache\n            token = 0x0B1ba0af832d7C05fD64161E0Db78E85978E8082;\n        }\n        if (token == address(0)) {\n            revert(\"No native wrapped token\");\n        }\n        return IEtherTokenV06(token);\n    }\n\n    function _revertSingleSwapSample(\n        uint256 amount,\n        uint256 gasUsed\n    )\n        internal\n    {\n        // Revert it so there is no state change\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, amount)\n            mstore(add(ptr, 32), gasUsed)\n            revert(ptr, 64)\n        }\n    }\n\n    function _revertSwapSample(\n        uint256[] memory amounts,\n        uint256[] memory gasUsed\n    )\n        internal\n    {\n        bytes memory data = abi.encode(amounts, gasUsed);\n        // Revert it so there is no state change\n        assembly {\n            revert(add(data, 32), mload(data))\n        }\n    }\n\n    /// @dev Parses the reverted swap sample data. If no amount\n    ///      is decoded, 0 is returned.\n    /// @param reason the string which contains the possible\n    ///               sample amount\n    /// @return the decoded sample amount or 0\n    /// @return the gas used in the sample\n    function _parseRevertedSingleSwapSample(\n        bytes memory reason\n    )\n        internal\n        pure\n        returns (uint256, uint256)\n    {\n        if (reason.length != 64) {\n            return (0,0);\n        }\n        return abi.decode(reason, (uint256, uint256));\n    }\n\n    function _sampleSwapApproximateBuys(\n        SwapRevertSamplerBuyQuoteOpts memory opts,\n        uint256[] memory makerTokenAmounts\n    )\n        internal\n        returns (uint256[] memory gasUsed, uint256[] memory takerTokenAmounts)\n    {\n        if (makerTokenAmounts.length == 0) {\n            return (gasUsed, takerTokenAmounts);\n        }\n\n        takerTokenAmounts = new uint256[](makerTokenAmounts.length);\n        gasUsed = new uint256[](makerTokenAmounts.length);\n\n        uint256[] memory sellAmounts = new uint256[](1);\n        sellAmounts[0] = makerTokenAmounts[0];\n\n        SwapRevertSamplerQuoteOpts memory sellOpts = SwapRevertSamplerQuoteOpts({\n            sellToken: opts.sellToken,\n            buyToken: opts.buyToken,\n            bridgeData: opts.sellTokenData,\n            getSwapQuoteCallback: opts.getSwapQuoteCallback\n        });\n\n        SwapRevertSamplerQuoteOpts memory buyOpts = SwapRevertSamplerQuoteOpts({\n            sellToken: opts.buyToken,\n            buyToken: opts.sellToken,\n            bridgeData: opts.buyTokenData,\n            getSwapQuoteCallback: opts.getSwapQuoteCallback\n        });\n        // Inverted, perform a sell of the token the user wants to buy\n        (, sellAmounts) = _sampleSwapQuotesRevert(buyOpts, sellAmounts);\n        if (sellAmounts.length == 0 || sellAmounts[0] == 0) {\n            return (gasUsed, takerTokenAmounts);\n        }\n\n        uint256[] memory buyAmounts;\n        // Sell of the token the user wishes to dispose, see how much we buy\n        (, buyAmounts) = _sampleSwapQuotesRevert(sellOpts, sellAmounts);\n\n        if (buyAmounts.length == 0 || buyAmounts[0] == 0) {\n            return (gasUsed, takerTokenAmounts);\n        }\n\n        for (uint256 i = 0; i < makerTokenAmounts.length; i++) {\n            uint256[] memory _gasUsed;\n            for (uint256 iter = 0; iter < APPROXIMATE_BUY_MAX_ITERATIONS; iter++) {\n                // adjustedSellAmount = previousSellAmount * (target/actual) * JUMP_MULTIPLIER\n                sellAmounts[0] = _safeGetPartialAmountCeil(\n                    makerTokenAmounts[i],\n                    buyAmounts[0],\n                    sellAmounts[0]\n                );\n                if (sellAmounts.length == 0 || sellAmounts[0] == 0) {\n                    break;\n                }\n                sellAmounts[0] = _safeGetPartialAmountCeil(\n                    (ONE_HUNDED_PERCENT_BPS + APPROXIMATE_BUY_TARGET_EPSILON_BPS),\n                    ONE_HUNDED_PERCENT_BPS,\n                    sellAmounts[0]\n                );\n                if (sellAmounts.length == 0 || sellAmounts[0] == 0) {\n                    break;\n                }\n                uint256[] memory _buyAmounts;\n                (_gasUsed, _buyAmounts) = _sampleSwapQuotesRevert(sellOpts, sellAmounts);\n                if (_buyAmounts.length == 0 || _buyAmounts[0] == 0) {\n                    break;\n                }\n                // We re-use buyAmount next iteration, only assign if it is\n                // non zero\n                buyAmounts = _buyAmounts;\n                // If we've reached our goal, exit early\n                if (buyAmounts[0] >= makerTokenAmounts[i]) {\n                    uint256 eps =\n                        (buyAmounts[0] - makerTokenAmounts[i]) * ONE_HUNDED_PERCENT_BPS /\n                        makerTokenAmounts[i];\n                    if (eps <= APPROXIMATE_BUY_TARGET_EPSILON_BPS) {\n                        break;\n                    }\n                }\n            }\n            if (_gasUsed.length > 0 && buyAmounts.length > 0) {\n                gasUsed[i] = _gasUsed[0];\n                // We do our best to close in on the requested amount, but we can either over buy or under buy and exit\n                // if we hit a max iteration limit\n                // We scale the sell amount to get the approximate target\n                takerTokenAmounts[i] = _safeGetPartialAmountCeil(\n                    makerTokenAmounts[i],\n                    buyAmounts[0],\n                    sellAmounts[0]\n                );\n            }\n        }\n    }\n\n    function _safeGetPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        view\n        returns (uint256 partialAmount)\n    {\n        if (numerator == 0 || target == 0 || denominator == 0) return 0;\n        uint256 c = numerator * target;\n        if (c / numerator != target) return 0;\n        return (c + (denominator - 1)) / denominator;\n    }\n\n\n}"
        },
        "./GasOverhead.sol": {
            "id": 9,
            "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.6;\n\ncontract GasOverhead {\n    uint256 public _overhead = 2;\n    // Overhead incurred from updating the overhead storage slot\n    uint256 constant SSTORE_OVERHEAD = 20000;\n\n    function addOverhead(uint256 gas, uint256 gasBefore)\n        external\n    {\n        uint256 callOverhead = gasBefore - gasleft();\n        // Add additional est overhead of performing this update\n        _overhead += gas + callOverhead + SSTORE_OVERHEAD;\n    }\n\n    function clearOverhead()\n        external\n    {\n        _overhead = 2;\n    }\n\n    function overhead()\n        external\n        view\n        returns (uint256)\n    {\n        return _overhead;\n    }\n}\n"
        }
    },
    "sourceCodes": {
        "./KyberSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IKyberNetwork.sol\";\nimport \"@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinKyber.sol\";\nimport \"./SwapRevertSampler.sol\";\n\ncontract KyberSampler is\n    MixinKyber,\n    SwapRevertSampler\n{\n\n    /// @dev Gas limit for Kyber calls.\n    uint256 constant private KYBER_CALL_GAS = 500e3; // 500k\n    /// @dev Kyber ETH pseudo-address.\n    address constant internal KYBER_ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n    constructor(IEtherTokenV06 weth)\n        public\n        MixinKyber(weth)\n    { }\n\n    struct KyberSamplerOpts {\n        uint256 reserveOffset;\n        address hintHandler;\n        address networkProxy;\n        address weth;\n        bytes hint;\n    }\n\n    function sampleSwapFromKyber(\n        address sellToken,\n        address buyToken,\n        bytes memory bridgeData,\n        uint256 takerTokenAmount\n    )\n        external\n        returns (uint256)\n    {\n        KyberSamplerOpts memory opts = abi.decode(bridgeData, (KyberSamplerOpts));\n        return _tradeKyberInternal(\n            // these are Immutable in MixinKyber, since they are only set in constructor they must be passed in\n            IERC20TokenV06(KYBER_ETH_ADDRESS),\n            IEtherTokenV06(opts.weth),\n            IERC20TokenV06(sellToken),\n            IERC20TokenV06(buyToken),\n            takerTokenAmount,\n            abi.encode(opts.networkProxy, opts.hint)\n        );\n    }\n\n    /// @dev Sample sell quotes from Kyber.\n    /// @param opts KyberSamplerOpts The nth reserve\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return reserveId The id of the reserve found at reserveOffset\n    /// @return hint The hint for the selected reserve\n    /// @return gasUsed Gas consumed per sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token amount.\n    function sampleSellsFromKyberNetwork(\n        KyberSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        returns (\n            bytes32 reserveId,\n            bytes memory hint,\n            uint256[] memory gasUsed,\n            uint256[] memory makerTokenAmounts\n        )\n    {\n        reserveId = _getNextReserveId(opts, takerToken, makerToken);\n        if (reserveId == 0x0) {\n            return (reserveId, hint, gasUsed, makerTokenAmounts);\n        }\n        opts.hint = this.encodeKyberHint(opts, reserveId, takerToken, makerToken);\n        hint = opts.hint;\n\n        (gasUsed, makerTokenAmounts) = _sampleSwapQuotesRevert(\n            SwapRevertSamplerQuoteOpts({\n                sellToken: takerToken,\n                buyToken: makerToken,\n                bridgeData: abi.encode(opts),\n                getSwapQuoteCallback: this.sampleSwapFromKyber\n            }),\n            takerTokenAmounts\n        );\n    }\n\n    /// @dev Sample buy quotes from Kyber.\n    /// @param opts KyberSamplerOpts The nth reserve\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return reserveId The id of the reserve found at reserveOffset\n    /// @return hint The hint for the selected reserve\n    /// @return gasUsed Gas consumed for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token amount.\n    function sampleBuysFromKyberNetwork(\n        KyberSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        returns (\n            bytes32 reserveId,\n            bytes memory hint,\n            uint256[] memory gasUsed,\n            uint256[] memory takerTokenAmounts\n        )\n    {\n        reserveId = _getNextReserveId(opts, takerToken, makerToken);\n        if (reserveId == 0x0) {\n            return (reserveId, hint, gasUsed, takerTokenAmounts);\n        }\n        opts.hint = this.encodeKyberHint(opts, reserveId, takerToken, makerToken);\n        hint = opts.hint;\n\n        (gasUsed, takerTokenAmounts) = _sampleSwapApproximateBuys(\n            SwapRevertSamplerBuyQuoteOpts({\n                sellToken: takerToken,\n                buyToken: makerToken,\n                sellTokenData: abi.encode(opts),\n                buyTokenData: abi.encode(opts),\n                getSwapQuoteCallback: this.sampleSwapFromKyber\n            }),\n            makerTokenAmounts\n        );\n    }\n\n    function encodeKyberHint(\n        KyberSamplerOpts memory opts,\n        bytes32 reserveId,\n        address takerToken,\n        address makerToken\n    )\n        public\n        view\n        returns (bytes memory hint)\n    {\n        // Build a hint selecting the single reserve\n        IKyberHintHandler kyberHint = IKyberHintHandler(opts.hintHandler);\n\n        // All other reserves should be ignored with this hint\n        bytes32[] memory selectedReserves = new bytes32[](1);\n        selectedReserves[0] = reserveId;\n        uint256[] memory emptySplits = new uint256[](0);\n\n        if (takerToken == opts.weth) {\n            // ETH to Token\n            try\n                kyberHint.buildEthToTokenHint\n                    {gas: KYBER_CALL_GAS}\n                    (\n                        makerToken,\n                        IKyberHintHandler.TradeType.MaskIn,\n                        selectedReserves,\n                        emptySplits\n                    )\n                returns (bytes memory result)\n            {\n                return result;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n            }\n        } else if (makerToken == opts.weth) {\n            // Token to ETH\n            try\n                kyberHint.buildTokenToEthHint\n                    {gas: KYBER_CALL_GAS}\n                    (\n                        takerToken,\n                        IKyberHintHandler.TradeType.MaskIn,\n                        selectedReserves,\n                        emptySplits\n                    )\n                returns (bytes memory result)\n            {\n                return result;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n            }\n\n        } else {\n            // Token to Token\n            // We use the same reserve both ways\n            try\n                kyberHint.buildTokenToTokenHint\n                    {gas: KYBER_CALL_GAS}\n                    (\n                        takerToken,\n                        IKyberHintHandler.TradeType.MaskIn,\n                        selectedReserves,\n                        emptySplits,\n                        makerToken,\n                        IKyberHintHandler.TradeType.MaskIn,\n                        selectedReserves,\n                        emptySplits\n                    )\n                returns (bytes memory result)\n            {\n                return result;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n            }\n        }\n    }\n\n    function _getNextReserveId(\n        KyberSamplerOpts memory opts,\n        address takerToken,\n        address makerToken\n    )\n        internal\n        view\n        returns (bytes32 reserveId)\n    {\n        // Fetch the registered reserves for this pair\n        IKyberHintHandler kyberHint = IKyberHintHandler(opts.hintHandler);\n        (bytes32[] memory reserveIds, ,) = kyberHint.getTradingReserves(\n            takerToken == opts.weth ? KYBER_ETH_ADDRESS : takerToken,\n            makerToken == opts.weth ? KYBER_ETH_ADDRESS : makerToken,\n            true,\n            new bytes(0) // empty hint\n        );\n\n        if (opts.reserveOffset >= reserveIds.length) {\n            return 0x0;\n        }\n\n        reserveId = reserveIds[opts.reserveOffset];\n        // Ignore Kyber Bridged Reserves (0xbb)\n        if (uint256(reserveId >> 248) == 0xbb) {\n            return 0x0;\n        }\n\n        return reserveId;\n    }\n}\n",
        "./interfaces/IKyberNetwork.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n// Keepin everything together\ninterface IKyberNetwork {\n\n}\n\ninterface IKyberHintHandler {\n\n    enum TradeType {BestOfAll, MaskIn, MaskOut, Split}\n\n    enum ProcessWithRate {NotRequired, Required}\n\n    function getTradingReserves(\n        address tokenSrc,\n        address tokenDest,\n        bool isTokenToToken,\n        bytes calldata hint\n    )\n        external\n        view\n        returns (\n            bytes32[] memory reserveIds,\n            uint256[] memory splitValuesBps,\n            ProcessWithRate processWithRate\n        );\n\n    function buildTokenToEthHint(\n        address tokenSrc,\n        TradeType tokenToEthType,\n        bytes32[] calldata tokenToEthReserveIds,\n        uint256[] calldata tokenToEthSplits\n    )\n        external\n        view\n        returns (bytes memory hint);\n\n    function buildEthToTokenHint(\n        address tokenDest,\n        TradeType ethToTokenType,\n        bytes32[] calldata ethToTokenReserveIds,\n        uint256[] calldata ethToTokenSplits\n    )\n        external\n        view\n        returns (bytes memory hint);\n\n    function buildTokenToTokenHint(\n        address tokenSrc,\n        TradeType tokenToEthType,\n        bytes32[] calldata tokenToEthReserveIds,\n        uint256[] calldata tokenToEthSplits,\n        address tokenDest,\n        TradeType ethToTokenType,\n        bytes32[] calldata ethToTokenReserveIds,\n        uint256[] calldata ethToTokenSplits\n    )\n        external\n        view\n        returns (bytes memory hint);\n}\n",
        "@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinKyber.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol\";\nimport \"../IBridgeAdapter.sol\";\n\ninterface IKyberNetworkProxy {\n\n    /// @dev Sells `sellTokenAddress` tokens for `buyTokenAddress` tokens\n    /// using a hint for the reserve.\n    /// @param sellToken Token to sell.\n    /// @param sellAmount Amount of tokens to sell.\n    /// @param buyToken Token to buy.\n    /// @param recipientAddress Address to send bought tokens to.\n    /// @param maxBuyTokenAmount A limit on the amount of tokens to buy.\n    /// @param minConversionRate The minimal conversion rate. If actual rate\n    ///        is lower, trade is canceled.\n    /// @param walletId The wallet ID to send part of the fees\n    /// @param hint The hint for the selective inclusion (or exclusion) of reserves\n    /// @return boughtAmount Amount of tokens bought.\n    function tradeWithHint(\n        IERC20TokenV06 sellToken,\n        uint256 sellAmount,\n        IERC20TokenV06 buyToken,\n        address payable recipientAddress,\n        uint256 maxBuyTokenAmount,\n        uint256 minConversionRate,\n        address payable walletId,\n        bytes calldata hint\n    )\n        external\n        payable\n        returns (uint256 boughtAmount);\n\n    function getExpectedRateAfterFee(\n        address src,\n        address dest,\n        uint256 srcQty,\n        uint256 platformFeeBps,\n        bytes calldata hint\n    )\n        external\n        view\n        returns (uint256 expectedRate);\n}\n\ncontract MixinKyber {\n\n    using LibERC20TokenV06 for IERC20TokenV06;\n\n    /// @dev Address indicating the trade is using ETH\n    IERC20TokenV06 private immutable KYBER_ETH_ADDRESS =\n        IERC20TokenV06(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\n    /// @dev Mainnet address of the WETH contract.\n    IEtherTokenV06 private immutable WETH;\n\n    constructor(IEtherTokenV06 weth)\n        public\n    {\n        WETH = weth;\n    }\n\n    function _tradeKyber(\n        IERC20TokenV06 sellToken,\n        IERC20TokenV06 buyToken,\n        uint256 sellAmount,\n        bytes memory bridgeData\n    )\n        internal\n        returns (uint256 boughtAmount)\n    {\n        return _tradeKyberInternal(KYBER_ETH_ADDRESS, WETH, sellToken, buyToken, sellAmount, bridgeData);\n    }\n\n    function _tradeKyberInternal(\n        IERC20TokenV06 kyberEthAddress,\n        IEtherTokenV06 weth,\n        IERC20TokenV06 sellToken,\n        IERC20TokenV06 buyToken,\n        uint256 sellAmount,\n        bytes memory bridgeData\n    )\n        internal\n        returns (uint256 boughtAmount)\n    {\n        (IKyberNetworkProxy kyber, bytes memory hint) =\n            abi.decode(bridgeData, (IKyberNetworkProxy, bytes));\n\n        uint256 payableAmount = 0;\n        if (sellToken != weth) {\n            // If the input token is not WETH, grant an allowance to the exchange\n            // to spend them.\n            sellToken.approveIfBelow(\n                address(kyber),\n                sellAmount\n            );\n        } else {\n            // If the input token is WETH, unwrap it and attach it to the call.\n            payableAmount = sellAmount;\n            weth.withdraw(payableAmount);\n        }\n\n        // Try to sell all of this contract's input token balance through\n        // `KyberNetworkProxy.trade()`.\n        boughtAmount = kyber.tradeWithHint{ value: payableAmount }(\n            // Input token.\n            sellToken == weth ? kyberEthAddress : sellToken,\n            // Sell amount.\n            sellAmount,\n            // Output token.\n            buyToken == weth ? kyberEthAddress : buyToken,\n            // Transfer to this contract\n            address(uint160(address(this))),\n            // Buy as much as possible.\n            uint256(-1),\n            // Lowest minimum conversion rate\n            1,\n            // No affiliate address.\n            address(0),\n            hint\n        );\n        // If receving ETH, wrap it to WETH.\n        if (buyToken == weth) {\n            weth.deposit{ value: boughtAmount }();\n        }\n        return boughtAmount;\n    }\n}\n",
        "@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol\";\nimport \"./IERC20TokenV06.sol\";\n\n\nlibrary LibERC20TokenV06 {\n    bytes constant private DECIMALS_CALL_DATA = hex\"313ce567\";\n\n    /// @dev Calls `IERC20TokenV06(token).approve()`.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param spender The address that receives an allowance.\n    /// @param allowance The allowance to set.\n    function compatApprove(\n        IERC20TokenV06 token,\n        address spender,\n        uint256 allowance\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.approve.selector,\n            spender,\n            allowance\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).approve()` and sets the allowance to the\n    ///      maximum if the current approval is not already >= an amount.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param spender The address that receives an allowance.\n    /// @param amount The minimum allowance needed.\n    function approveIfBelow(\n        IERC20TokenV06 token,\n        address spender,\n        uint256 amount\n    )\n        internal\n    {\n        if (token.allowance(address(this), spender) < amount) {\n            compatApprove(token, spender, uint256(-1));\n        }\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).transfer()`.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param to The address that receives the tokens\n    /// @param amount Number of tokens to transfer.\n    function compatTransfer(\n        IERC20TokenV06 token,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.transfer.selector,\n            to,\n            amount\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).transferFrom()`.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param from The owner of the tokens.\n    /// @param to The address that receives the tokens\n    /// @param amount Number of tokens to transfer.\n    function compatTransferFrom(\n        IERC20TokenV06 token,\n        address from,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.transferFrom.selector,\n            from,\n            to,\n            amount\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Retrieves the number of decimals for a token.\n    ///      Returns `18` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @return tokenDecimals The number of decimals places for the token.\n    function compatDecimals(IERC20TokenV06 token)\n        internal\n        view\n        returns (uint8 tokenDecimals)\n    {\n        tokenDecimals = 18;\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(DECIMALS_CALL_DATA);\n        if (didSucceed && resultData.length >= 32) {\n            tokenDecimals = uint8(LibBytesV06.readUint256(resultData, 0));\n        }\n    }\n\n    /// @dev Retrieves the allowance for a token, owner, and spender.\n    ///      Returns `0` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @param owner The owner of the tokens.\n    /// @param spender The address the spender.\n    /// @return allowance_ The allowance for a token, owner, and spender.\n    function compatAllowance(IERC20TokenV06 token, address owner, address spender)\n        internal\n        view\n        returns (uint256 allowance_)\n    {\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(\n            abi.encodeWithSelector(\n                token.allowance.selector,\n                owner,\n                spender\n            )\n        );\n        if (didSucceed && resultData.length >= 32) {\n            allowance_ = LibBytesV06.readUint256(resultData, 0);\n        }\n    }\n\n    /// @dev Retrieves the balance for a token owner.\n    ///      Returns `0` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @param owner The owner of the tokens.\n    /// @return balance The token balance of an owner.\n    function compatBalanceOf(IERC20TokenV06 token, address owner)\n        internal\n        view\n        returns (uint256 balance)\n    {\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(\n            abi.encodeWithSelector(\n                token.balanceOf.selector,\n                owner\n            )\n        );\n        if (didSucceed && resultData.length >= 32) {\n            balance = LibBytesV06.readUint256(resultData, 0);\n        }\n    }\n\n    /// @dev Check if the data returned by a non-static call to an ERC20 token\n    ///      is a successful result. Supported functions are `transfer()`,\n    ///      `transferFrom()`, and `approve()`.\n    /// @param resultData The raw data returned by a non-static call to the ERC20 token.\n    /// @return isSuccessful Whether the result data indicates success.\n    function isSuccessfulResult(bytes memory resultData)\n        internal\n        pure\n        returns (bool isSuccessful)\n    {\n        if (resultData.length == 0) {\n            return true;\n        }\n        if (resultData.length >= 32) {\n            uint256 result = LibBytesV06.readUint256(resultData, 0);\n            if (result == 1) {\n                return true;\n            }\n        }\n    }\n\n    /// @dev Executes a call on address `target` with calldata `callData`\n    ///      and asserts that either nothing was returned or a single boolean\n    ///      was returned equal to `true`.\n    /// @param target The call target.\n    /// @param callData The abi-encoded call data.\n    function _callWithOptionalBooleanResult(\n        address target,\n        bytes memory callData\n    )\n        private\n    {\n        (bool didSucceed, bytes memory resultData) = target.call(callData);\n        if (didSucceed && isSuccessfulResult(resultData)) {\n            return;\n        }\n        LibRichErrorsV06.rrevert(resultData);\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibRichErrorsV06 {\n\n    // bytes4(keccak256(\"Error(string)\"))\n    bytes4 internal constant STANDARD_ERROR_SELECTOR = 0x08c379a0;\n\n    // solhint-disable func-name-mixedcase\n    /// @dev ABI encode a standard, string revert error payload.\n    ///      This is the same payload that would be included by a `revert(string)`\n    ///      solidity statement. It has the function signature `Error(string)`.\n    /// @param message The error string.\n    /// @return The ABI encoded error.\n    function StandardError(string memory message)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            STANDARD_ERROR_SELECTOR,\n            bytes(message)\n        );\n    }\n    // solhint-enable func-name-mixedcase\n\n    /// @dev Reverts an encoded rich revert reason `errorData`.\n    /// @param errorData ABI encoded error data.\n    function rrevert(bytes memory errorData)\n        internal\n        pure\n    {\n        assembly {\n            revert(add(errorData, 0x20), mload(errorData))\n        }\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./errors/LibBytesRichErrorsV06.sol\";\nimport \"./errors/LibRichErrorsV06.sol\";\n\n\nlibrary LibBytesV06 {\n\n    using LibBytesV06 for bytes;\n\n    /// @dev Gets the memory address for a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of byte array. This\n    ///         points to the header of the byte array which contains\n    ///         the length.\n    function rawAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := input\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Gets the memory address for the contents of a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of the contents of the byte array.\n    function contentAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := add(input, 32)\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Copies `length` bytes from memory location `source` to `dest`.\n    /// @param dest memory address to copy bytes to.\n    /// @param source memory address to copy bytes from.\n    /// @param length number of bytes to copy.\n    function memCopy(\n        uint256 dest,\n        uint256 source,\n        uint256 length\n    )\n        internal\n        pure\n    {\n        if (length < 32) {\n            // Handle a partial word by reading destination and masking\n            // off the bits we are interested in.\n            // This correctly handles overlap, zero lengths and source == dest\n            assembly {\n                let mask := sub(exp(256, sub(32, length)), 1)\n                let s := and(mload(source), not(mask))\n                let d := and(mload(dest), mask)\n                mstore(dest, or(s, d))\n            }\n        } else {\n            // Skip the O(length) loop when source == dest.\n            if (source == dest) {\n                return;\n            }\n\n            // For large copies we copy whole words at a time. The final\n            // word is aligned to the end of the range (instead of after the\n            // previous) to handle partial words. So a copy will look like this:\n            //\n            //  ####\n            //      ####\n            //          ####\n            //            ####\n            //\n            // We handle overlap in the source and destination range by\n            // changing the copying direction. This prevents us from\n            // overwriting parts of source that we still need to copy.\n            //\n            // This correctly handles source == dest\n            //\n            if (source > dest) {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because it\n                    // is easier to compare with in the loop, and these\n                    // are also the addresses we need for copying the\n                    // last bytes.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the last 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the last bytes in\n                    // source already due to overlap.\n                    let last := mload(sEnd)\n\n                    // Copy whole words front to back\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} lt(source, sEnd) {} {\n                        mstore(dest, mload(source))\n                        source := add(source, 32)\n                        dest := add(dest, 32)\n                    }\n\n                    // Write the last 32 bytes\n                    mstore(dEnd, last)\n                }\n            } else {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because those\n                    // are the starting points when copying a word at the end.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the first 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the first bytes in\n                    // source already due to overlap.\n                    let first := mload(source)\n\n                    // Copy whole words back to front\n                    // We use a signed comparisson here to allow dEnd to become\n                    // negative (happens when source and dest < 32). Valid\n                    // addresses in local memory will never be larger than\n                    // 2**255, so they can be safely re-interpreted as signed.\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} slt(dest, dEnd) {} {\n                        mstore(dEnd, mload(sEnd))\n                        sEnd := sub(sEnd, 32)\n                        dEnd := sub(dEnd, 32)\n                    }\n\n                    // Write the first 32 bytes\n                    mstore(dest, first)\n                }\n            }\n        }\n    }\n\n    /// @dev Returns a slices from a byte array.\n    /// @param b The byte array to take a slice from.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function slice(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure and copy contents\n        result = new bytes(to - from);\n        memCopy(\n            result.contentAddress(),\n            b.contentAddress() + from,\n            result.length\n        );\n        return result;\n    }\n\n    /// @dev Returns a slice from a byte array without preserving the input.\n    ///      When `from == 0`, the original array will match the slice.\n    ///      In other cases its state will be corrupted.\n    /// @param b The byte array to take a slice from. Will be destroyed in the process.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function sliceDestructive(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure around [from, to) in-place.\n        assembly {\n            result := add(b, from)\n            mstore(result, sub(to, from))\n        }\n        return result;\n    }\n\n    /// @dev Pops the last byte off of a byte array by modifying its length.\n    /// @param b Byte array that will be modified.\n    /// @return result The byte that was popped off.\n    function popLastByte(bytes memory b)\n        internal\n        pure\n        returns (bytes1 result)\n    {\n        if (b.length == 0) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanZeroRequired,\n                b.length,\n                0\n            ));\n        }\n\n        // Store last byte.\n        result = b[b.length - 1];\n\n        assembly {\n            // Decrement length of byte array.\n            let newLen := sub(mload(b), 1)\n            mstore(b, newLen)\n        }\n        return result;\n    }\n\n    /// @dev Tests equality of two byte arrays.\n    /// @param lhs First byte array to compare.\n    /// @param rhs Second byte array to compare.\n    /// @return equal True if arrays are the same. False otherwise.\n    function equals(\n        bytes memory lhs,\n        bytes memory rhs\n    )\n        internal\n        pure\n        returns (bool equal)\n    {\n        // Keccak gas cost is 30 + numWords * 6. This is a cheap way to compare.\n        // We early exit on unequal lengths, but keccak would also correctly\n        // handle this.\n        return lhs.length == rhs.length && keccak256(lhs) == keccak256(rhs);\n    }\n\n    /// @dev Reads an address from a position in a byte array.\n    /// @param b Byte array containing an address.\n    /// @param index Index in byte array of address.\n    /// @return result address from byte array.\n    function readAddress(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (address result)\n    {\n        if (b.length < index + 20) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Read address from array memory\n        assembly {\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 20-byte mask to obtain address\n            result := and(mload(add(b, index)), 0xffffffffffffffffffffffffffffffffffffffff)\n        }\n        return result;\n    }\n\n    /// @dev Writes an address into a specific position in a byte array.\n    /// @param b Byte array to insert address into.\n    /// @param index Index in byte array of address.\n    /// @param input Address to put into byte array.\n    function writeAddress(\n        bytes memory b,\n        uint256 index,\n        address input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 20) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Store address into array memory\n        assembly {\n            // The address occupies 20 bytes and mstore stores 32 bytes.\n            // First fetch the 32-byte word where we'll be storing the address, then\n            // apply a mask so we have only the bytes in the word that the address will not occupy.\n            // Then combine these bytes with the address and store the 32 bytes back to memory with mstore.\n\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 12-byte mask to obtain extra bytes occupying word of memory where we'll store the address\n            let neighbors := and(\n                mload(add(b, index)),\n                0xffffffffffffffffffffffff0000000000000000000000000000000000000000\n            )\n\n            // Make sure input address is clean.\n            // (Solidity does not guarantee this)\n            input := and(input, 0xffffffffffffffffffffffffffffffffffffffff)\n\n            // Store the neighbors and address into memory\n            mstore(add(b, index), xor(input, neighbors))\n        }\n    }\n\n    /// @dev Reads a bytes32 value from a position in a byte array.\n    /// @param b Byte array containing a bytes32 value.\n    /// @param index Index in byte array of bytes32 value.\n    /// @return result bytes32 value from byte array.\n    function readBytes32(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        if (b.length < index + 32) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            result := mload(add(b, index))\n        }\n        return result;\n    }\n\n    /// @dev Writes a bytes32 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input bytes32 to put into byte array.\n    function writeBytes32(\n        bytes memory b,\n        uint256 index,\n        bytes32 input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 32) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            mstore(add(b, index), input)\n        }\n    }\n\n    /// @dev Reads a uint256 value from a position in a byte array.\n    /// @param b Byte array containing a uint256 value.\n    /// @param index Index in byte array of uint256 value.\n    /// @return result uint256 value from byte array.\n    function readUint256(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (uint256 result)\n    {\n        result = uint256(readBytes32(b, index));\n        return result;\n    }\n\n    /// @dev Writes a uint256 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input uint256 to put into byte array.\n    function writeUint256(\n        bytes memory b,\n        uint256 index,\n        uint256 input\n    )\n        internal\n        pure\n    {\n        writeBytes32(b, index, bytes32(input));\n    }\n\n    /// @dev Reads an unpadded bytes4 value from a position in a byte array.\n    /// @param b Byte array containing a bytes4 value.\n    /// @param index Index in byte array of bytes4 value.\n    /// @return result bytes4 value from byte array.\n    function readBytes4(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes4 result)\n    {\n        if (b.length < index + 4) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsFourRequired,\n                b.length,\n                index + 4\n            ));\n        }\n\n        // Arrays are prefixed by a 32 byte length field\n        index += 32;\n\n        // Read the bytes4 from array memory\n        assembly {\n            result := mload(add(b, index))\n            // Solidity does not require us to clean the trailing bytes.\n            // We do it anyway\n            result := and(result, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)\n        }\n        return result;\n    }\n\n    /// @dev Writes a new length to a byte array.\n    ///      Decreasing length will lead to removing the corresponding lower order bytes from the byte array.\n    ///      Increasing length may lead to appending adjacent in-memory bytes to the end of the byte array.\n    /// @param b Bytes array to write new length to.\n    /// @param length New length of byte array.\n    function writeLength(bytes memory b, uint256 length)\n        internal\n        pure\n    {\n        assembly {\n            mstore(b, length)\n        }\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/errors/LibBytesRichErrorsV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibBytesRichErrorsV06 {\n\n    enum InvalidByteOperationErrorCodes {\n        FromLessThanOrEqualsToRequired,\n        ToLessThanOrEqualsLengthRequired,\n        LengthGreaterThanZeroRequired,\n        LengthGreaterThanOrEqualsFourRequired,\n        LengthGreaterThanOrEqualsTwentyRequired,\n        LengthGreaterThanOrEqualsThirtyTwoRequired,\n        LengthGreaterThanOrEqualsNestedBytesLengthRequired,\n        DestinationLengthGreaterThanOrEqualSourceLengthRequired\n    }\n\n    // bytes4(keccak256(\"InvalidByteOperationError(uint8,uint256,uint256)\"))\n    bytes4 internal constant INVALID_BYTE_OPERATION_ERROR_SELECTOR =\n        0x28006595;\n\n    // solhint-disable func-name-mixedcase\n    function InvalidByteOperationError(\n        InvalidByteOperationErrorCodes errorCode,\n        uint256 offset,\n        uint256 required\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            INVALID_BYTE_OPERATION_ERROR_SELECTOR,\n            errorCode,\n            offset,\n            required\n        );\n    }\n}\n",
        "@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\ninterface IERC20TokenV06 {\n\n    // solhint-disable no-simple-event-func-name\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 value\n    );\n\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n\n    /// @dev send `value` token to `to` from `msg.sender`\n    /// @param to The address of the recipient\n    /// @param value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transfer(address to, uint256 value)\n        external\n        returns (bool);\n\n    /// @dev send `value` token to `to` from `from` on the condition it is approved by `from`\n    /// @param from The address of the sender\n    /// @param to The address of the recipient\n    /// @param value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    )\n        external\n        returns (bool);\n\n    /// @dev `msg.sender` approves `spender` to spend `value` tokens\n    /// @param spender The address of the account able to transfer the tokens\n    /// @param value The amount of wei to be approved for transfer\n    /// @return Always true if the call has enough gas to complete execution\n    function approve(address spender, uint256 value)\n        external\n        returns (bool);\n\n    /// @dev Query total supply of token\n    /// @return Total supply of token\n    function totalSupply()\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the balance of `owner`.\n    /// @param owner The address from which the balance will be retrieved\n    /// @return Balance of owner\n    function balanceOf(address owner)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the allowance for `spender` to spend from `owner`.\n    /// @param owner The address of the account owning tokens\n    /// @param spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the number of decimals this token has.\n    function decimals()\n        external\n        view\n        returns (uint8);\n}\n",
        "@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./IERC20TokenV06.sol\";\n\n\ninterface IEtherTokenV06 is\n    IERC20TokenV06\n{\n    /// @dev Wrap ether.\n    function deposit() external payable;\n\n    /// @dev Unwrap ether.\n    function withdraw(uint256 amount) external;\n}\n",
        "@0x/contracts-zero-ex/contracts/src/transformers/bridges/IBridgeAdapter.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\n\n\ninterface IBridgeAdapter {\n\n    struct BridgeOrder {\n        // Upper 16 bytes: uint128 protocol ID (right-aligned)\n        // Lower 16 bytes: ASCII source name (left-aligned)\n        bytes32 source;\n        uint256 takerTokenAmount;\n        uint256 makerTokenAmount;\n        bytes bridgeData;\n    }\n\n    /// @dev Emitted when tokens are swapped with an external source.\n    /// @param source A unique ID for the source, where the upper 16 bytes\n    ///        encodes the (right-aligned) uint128 protocol ID and the\n    ///        lower 16 bytes encodes an ASCII source name.\n    /// @param inputToken The token the bridge is converting from.\n    /// @param outputToken The token the bridge is converting to.\n    /// @param inputTokenAmount Amount of input token sold.\n    /// @param outputTokenAmount Amount of output token bought.\n    event BridgeFill(\n        bytes32 source,\n        IERC20TokenV06 inputToken,\n        IERC20TokenV06 outputToken,\n        uint256 inputTokenAmount,\n        uint256 outputTokenAmount\n    );\n\n    function trade(\n        BridgeOrder calldata order,\n        IERC20TokenV06 sellToken,\n        IERC20TokenV06 buyToken,\n        uint256 sellAmount\n    )\n        external\n        returns (uint256 boughtAmount);\n}\n",
        "./SwapRevertSampler.sol": "\n\n// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./GasOverhead.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\n\ninterface IHackedERC20 {\n    function _setBalance(address owner, uint256 amount) external;\n    function _setEnabled(bool enabled) external;\n}\n\ncontract SwapRevertSampler {\n    using LibRichErrorsV06 for bytes;\n\n    /// @dev Fixed address to register and read Gas overhead introduced by Swap revert sampling\n    address private constant GAS_OVERHEAD = 0xDeF1000000000000000000000000000000001337;\n    /// @dev Maximum approximate (positive) error rate when approximating a buy quote.\n    uint256 private constant APPROXIMATE_BUY_TARGET_EPSILON_BPS = 0.0005e4;\n    /// @dev Maximum iterations to perform when approximating a buy quote.\n    uint256 private constant APPROXIMATE_BUY_MAX_ITERATIONS = 3;\n    uint256 private constant ONE_HUNDED_PERCENT_BPS = 1e4;\n    /// @dev Upper limit of gas to give to a single Swap call\n    uint256 private constant CALL_STIPEND = 2e6;\n\n\n    // solhint-disable no-empty-blocks\n    /// @dev Payable fallback to receive ETH from Kyber/WETH.\n    receive ()\n        external\n        payable\n    { }\n\n    struct SwapRevertSamplerQuoteOpts {\n        // Address of the token which is being sold\n        address sellToken;\n        // Address of the token which is wanted\n        address buyToken;\n        // Data required for the bridge to execute the swap\n        bytes bridgeData;\n        // Callback to retrieve a swap quote.\n        function (address sellToken, address buyToken, bytes memory bridgeData, uint256 sellAmount)\n            external\n            returns (uint256)\n            getSwapQuoteCallback;\n    }\n\n    struct SwapRevertSamplerBuyQuoteOpts {\n        // Address of the token which is being sold\n        address sellToken;\n        // Address of the token which is wanted\n        address buyToken;\n        // Data required for the bridge to execute the SELL_TOKEN->BUY_TOKEN swap\n        bytes sellTokenData;\n        // Data required for the bridge to execute the BUY_TOKEN->SELL_TOKEN swap\n        bytes buyTokenData;\n        // Callback to retrieve a swap quote.\n        function (address sellToken, address buyToken, bytes memory bridgeData, uint256 sellAmount)\n            external\n            returns (uint256)\n            getSwapQuoteCallback;\n    }\n\n    function _callRevert(\n        bytes4 selector,\n        address sellToken,\n        address buyToken,\n        bytes memory bridgeData,\n        uint256 amountIn\n    )\n        external\n    {\n        // Clear any registered overhead\n        try\n            GasOverhead(GAS_OVERHEAD).clearOverhead()\n        { } catch { }\n        // Measure the gas\n        uint256 gasUsed = gasleft();\n        // Perform the sell\n        (bool success, bytes memory data) = address(this).call(\n            abi.encodeWithSelector(selector, sellToken, buyToken, bridgeData, amountIn)\n        );\n        gasUsed = gasUsed - gasleft();\n        // Remove any registered gas overhead\n        try\n            GasOverhead(GAS_OVERHEAD).overhead()\n            returns (uint256 gasOverhead)\n        {\n            gasUsed = gasUsed - gasOverhead;\n        } catch { }\n\n        if (!success) {\n            data.rrevert();\n        }\n        // Revert with the amount bought\n        _revertSingleSwapSample(abi.decode(data, (uint256)), gasUsed);\n    }\n\n    /// @dev  Mints the sell token, then performs the swap, then reverts with the amount out.\n    /// The SwapRevertSamplerQuoteOpts has been unrolled here as our ABI encoder cannot support\n    /// encoding the function\n    function _mintCallRevert(\n        bytes4 selector,\n        address sellToken,\n        address buyToken,\n        bytes memory bridgeData,\n        uint256[] memory amountsIn\n    )\n        external\n    {\n        IHackedERC20 hackedSellToken = IHackedERC20(payable(sellToken));\n        // We assume the amounts are ascending and that\n        // the underlying call can handle selling a specific amount\n        uint256 amountIn = amountsIn[amountsIn.length - 1];\n\n        // Enable sell token to be tracked and shadowed\n        try\n            hackedSellToken._setEnabled(true)\n        { } catch { }\n\n        // Mint enough to sell\n        try\n            hackedSellToken._setBalance(address(this), amountIn)\n        { } catch { }\n\n        try\n            IEtherTokenV06(payable(sellToken)).deposit{ value: amountIn }()\n        { } catch { }\n\n        // Burn any excess ETH to avoid balance issues for sources which use ETH directly\n        address(0).transfer(address(this).balance);\n\n        uint256[] memory amountsOut = new uint256[](amountsIn.length);\n        uint256[] memory gasUsed = new uint256[](amountsIn.length);\n\n        for (uint256 i = 0; i < amountsIn.length; i++) {\n            try\n                this._callRevert{gas: CALL_STIPEND}(\n                    selector,\n                    sellToken,\n                    buyToken,\n                    bridgeData,\n                    amountsIn[i]\n                )\n            {\n                require(false, \"Swap Sample should have reverted\");\n            } catch (bytes memory reason) {\n                // Parse the reverted sample data\n                (amountsOut[i], gasUsed[i]) = _parseRevertedSingleSwapSample(reason);\n                // If we detect the amount out is 0 then we return early\n                // rather than continue performing excess work\n\n                // Some sources (Balancer) display issues, especially with small amounts\n                // Where the amountsOut can range, e.g 448,0,0,0,2476,3048,0,4279,4941,0,0,7133,\n\n                if (amountsOut[i] == 0) {\n                    break;\n                }\n            }\n        }\n        // Revert the entire sampling\n        _revertSwapSample(amountsOut, gasUsed);\n    }\n\n    function _sampleSwapQuotesRevert(\n        SwapRevertSamplerQuoteOpts memory opts,\n        uint256[] memory amountsIn\n    )\n        internal\n        returns (uint256[] memory gasUsed, uint256[] memory amountsOut)\n    {\n        try\n            this._mintCallRevert(\n                opts.getSwapQuoteCallback.selector,\n                opts.sellToken,\n                opts.buyToken,\n                opts.bridgeData,\n                amountsIn\n            )\n        {\n            require(false, \"Swap Sample should have reverted\");\n        } catch (bytes memory reason) {\n            // Parse the reverted sample datas\n            (amountsOut, gasUsed) = abi.decode(reason, (uint256[], uint256[]));\n        }\n    }\n\n    function _getNativeWrappedToken()\n        internal\n        view\n        returns (IEtherTokenV06)\n    {\n        uint256 chainId;\n        assembly {\n            chainId := chainid()\n        }\n        address token;\n        if (chainId == 1) {\n            // Ethereum Mainnet\n            token = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n        } else if (chainId == 3) {\n            // Ropsten\n            token = 0xc778417E063141139Fce010982780140Aa0cD5Ab;\n        } else if (chainId == 4) {\n            // Rinkeby\n            token = 0xc778417E063141139Fce010982780140Aa0cD5Ab;\n        } else if (chainId == 42) {\n            // Kovan\n            token = 0xd0A1E359811322d97991E03f863a0C30C2cF029C;\n        } else if (chainId == 56) {\n            // BSC \n            token = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\n        } else if (chainId == 137) {\n            // Polygon\n            token = 0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270;\n        } else if (chainId == 1337) {\n            // 0x Ganache\n            token = 0x0B1ba0af832d7C05fD64161E0Db78E85978E8082;\n        }\n        if (token == address(0)) {\n            revert(\"No native wrapped token\");\n        }\n        return IEtherTokenV06(token);\n    }\n\n    function _revertSingleSwapSample(\n        uint256 amount,\n        uint256 gasUsed\n    )\n        internal\n    {\n        // Revert it so there is no state change\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, amount)\n            mstore(add(ptr, 32), gasUsed)\n            revert(ptr, 64)\n        }\n    }\n\n    function _revertSwapSample(\n        uint256[] memory amounts,\n        uint256[] memory gasUsed\n    )\n        internal\n    {\n        bytes memory data = abi.encode(amounts, gasUsed);\n        // Revert it so there is no state change\n        assembly {\n            revert(add(data, 32), mload(data))\n        }\n    }\n\n    /// @dev Parses the reverted swap sample data. If no amount\n    ///      is decoded, 0 is returned.\n    /// @param reason the string which contains the possible\n    ///               sample amount\n    /// @return the decoded sample amount or 0\n    /// @return the gas used in the sample\n    function _parseRevertedSingleSwapSample(\n        bytes memory reason\n    )\n        internal\n        pure\n        returns (uint256, uint256)\n    {\n        if (reason.length != 64) {\n            return (0,0);\n        }\n        return abi.decode(reason, (uint256, uint256));\n    }\n\n    function _sampleSwapApproximateBuys(\n        SwapRevertSamplerBuyQuoteOpts memory opts,\n        uint256[] memory makerTokenAmounts\n    )\n        internal\n        returns (uint256[] memory gasUsed, uint256[] memory takerTokenAmounts)\n    {\n        if (makerTokenAmounts.length == 0) {\n            return (gasUsed, takerTokenAmounts);\n        }\n\n        takerTokenAmounts = new uint256[](makerTokenAmounts.length);\n        gasUsed = new uint256[](makerTokenAmounts.length);\n\n        uint256[] memory sellAmounts = new uint256[](1);\n        sellAmounts[0] = makerTokenAmounts[0];\n\n        SwapRevertSamplerQuoteOpts memory sellOpts = SwapRevertSamplerQuoteOpts({\n            sellToken: opts.sellToken,\n            buyToken: opts.buyToken,\n            bridgeData: opts.sellTokenData,\n            getSwapQuoteCallback: opts.getSwapQuoteCallback\n        });\n\n        SwapRevertSamplerQuoteOpts memory buyOpts = SwapRevertSamplerQuoteOpts({\n            sellToken: opts.buyToken,\n            buyToken: opts.sellToken,\n            bridgeData: opts.buyTokenData,\n            getSwapQuoteCallback: opts.getSwapQuoteCallback\n        });\n        // Inverted, perform a sell of the token the user wants to buy\n        (, sellAmounts) = _sampleSwapQuotesRevert(buyOpts, sellAmounts);\n        if (sellAmounts.length == 0 || sellAmounts[0] == 0) {\n            return (gasUsed, takerTokenAmounts);\n        }\n\n        uint256[] memory buyAmounts;\n        // Sell of the token the user wishes to dispose, see how much we buy\n        (, buyAmounts) = _sampleSwapQuotesRevert(sellOpts, sellAmounts);\n\n        if (buyAmounts.length == 0 || buyAmounts[0] == 0) {\n            return (gasUsed, takerTokenAmounts);\n        }\n\n        for (uint256 i = 0; i < makerTokenAmounts.length; i++) {\n            uint256[] memory _gasUsed;\n            for (uint256 iter = 0; iter < APPROXIMATE_BUY_MAX_ITERATIONS; iter++) {\n                // adjustedSellAmount = previousSellAmount * (target/actual) * JUMP_MULTIPLIER\n                sellAmounts[0] = _safeGetPartialAmountCeil(\n                    makerTokenAmounts[i],\n                    buyAmounts[0],\n                    sellAmounts[0]\n                );\n                if (sellAmounts.length == 0 || sellAmounts[0] == 0) {\n                    break;\n                }\n                sellAmounts[0] = _safeGetPartialAmountCeil(\n                    (ONE_HUNDED_PERCENT_BPS + APPROXIMATE_BUY_TARGET_EPSILON_BPS),\n                    ONE_HUNDED_PERCENT_BPS,\n                    sellAmounts[0]\n                );\n                if (sellAmounts.length == 0 || sellAmounts[0] == 0) {\n                    break;\n                }\n                uint256[] memory _buyAmounts;\n                (_gasUsed, _buyAmounts) = _sampleSwapQuotesRevert(sellOpts, sellAmounts);\n                if (_buyAmounts.length == 0 || _buyAmounts[0] == 0) {\n                    break;\n                }\n                // We re-use buyAmount next iteration, only assign if it is\n                // non zero\n                buyAmounts = _buyAmounts;\n                // If we've reached our goal, exit early\n                if (buyAmounts[0] >= makerTokenAmounts[i]) {\n                    uint256 eps =\n                        (buyAmounts[0] - makerTokenAmounts[i]) * ONE_HUNDED_PERCENT_BPS /\n                        makerTokenAmounts[i];\n                    if (eps <= APPROXIMATE_BUY_TARGET_EPSILON_BPS) {\n                        break;\n                    }\n                }\n            }\n            if (_gasUsed.length > 0 && buyAmounts.length > 0) {\n                gasUsed[i] = _gasUsed[0];\n                // We do our best to close in on the requested amount, but we can either over buy or under buy and exit\n                // if we hit a max iteration limit\n                // We scale the sell amount to get the approximate target\n                takerTokenAmounts[i] = _safeGetPartialAmountCeil(\n                    makerTokenAmounts[i],\n                    buyAmounts[0],\n                    sellAmounts[0]\n                );\n            }\n        }\n    }\n\n    function _safeGetPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        view\n        returns (uint256 partialAmount)\n    {\n        if (numerator == 0 || target == 0 || denominator == 0) return 0;\n        uint256 c = numerator * target;\n        if (c / numerator != target) return 0;\n        return (c + (denominator - 1)) / denominator;\n    }\n\n\n}",
        "./GasOverhead.sol": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.6;\n\ncontract GasOverhead {\n    uint256 public _overhead = 2;\n    // Overhead incurred from updating the overhead storage slot\n    uint256 constant SSTORE_OVERHEAD = 20000;\n\n    function addOverhead(uint256 gas, uint256 gasBefore)\n        external\n    {\n        uint256 callOverhead = gasBefore - gasleft();\n        // Add additional est overhead of performing this update\n        _overhead += gas + callOverhead + SSTORE_OVERHEAD;\n    }\n\n    function clearOverhead()\n        external\n    {\n        _overhead = 2;\n    }\n\n    function overhead()\n        external\n        view\n        returns (uint256)\n    {\n        return _overhead;\n    }\n}\n"
    },
    "compiler": {
        "name": "solc",
        "version": "0.6.12+commit.27d51765",
        "settings": {
            "remappings": [
                "@0x/contracts-zero-ex=/Users/jacob/projects/ethdev/0x/workspace-remote/workspace/0x-monorepo/packages/asset-swapper/node_modules/@0x/contracts-zero-ex",
                "@0x/contracts-erc20=/Users/jacob/projects/ethdev/0x/workspace-remote/workspace/0x-monorepo/packages/asset-swapper/node_modules/@0x/contracts-erc20",
                "@0x/contracts-utils=/Users/jacob/projects/ethdev/0x/workspace-remote/workspace/0x-monorepo/packages/asset-swapper/node_modules/@0x/contracts-utils"
            ],
            "optimizer": {
                "enabled": true,
                "runs": 200,
                "details": {
                    "yul": true,
                    "deduplicate": true
                }
            },
            "outputSelection": {
                "*": {
                    "*": [
                        "abi",
                        "devdoc",
                        "evm.bytecode.object",
                        "evm.bytecode.sourceMap",
                        "evm.deployedBytecode.object",
                        "evm.deployedBytecode.sourceMap"
                    ]
                }
            },
            "evmVersion": "istanbul"
        }
    },
    "chains": {}
}
