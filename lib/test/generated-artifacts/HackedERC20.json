{
    "schemaVersion": "2.0.0",
    "contractName": "HackedERC20",
    "compilerOutput": {
        "abi": [
            {
                "stateMutability": "payable",
                "type": "fallback"
            },
            {
                "inputs": [],
                "name": "_enabled",
                "outputs": [
                    {
                        "internalType": "bool",
                        "name": "",
                        "type": "bool"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "owner",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256",
                        "name": "amount",
                        "type": "uint256"
                    }
                ],
                "name": "_setBalance",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "bool",
                        "name": "enabled",
                        "type": "bool"
                    }
                ],
                "name": "_setEnabled",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "owner",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "spender",
                        "type": "address"
                    }
                ],
                "name": "allowance",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "allowance_",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "spender",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256",
                        "name": "amount",
                        "type": "uint256"
                    }
                ],
                "name": "approve",
                "outputs": [
                    {
                        "internalType": "bool",
                        "name": "",
                        "type": "bool"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "owner",
                        "type": "address"
                    }
                ],
                "name": "balanceOf",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "balance",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "to",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256",
                        "name": "amount",
                        "type": "uint256"
                    }
                ],
                "name": "transfer",
                "outputs": [
                    {
                        "internalType": "bool",
                        "name": "success",
                        "type": "bool"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "from",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "to",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256",
                        "name": "amount",
                        "type": "uint256"
                    }
                ],
                "name": "transferFrom",
                "outputs": [
                    {
                        "internalType": "bool",
                        "name": "success",
                        "type": "bool"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            }
        ],
        "devdoc": {
            "kind": "dev",
            "methods": {},
            "version": 1
        },
        "evm": {
            "bytecode": {
                "linkReferences": {},
                "object": "0x60806040526000805460ff1916905534801561001a57600080fd5b50610c858061002a6000396000f3fe60806040526004361061007f5760003560e01c8063ab86e0a61161004e578063ab86e0a6146101a8578063c36be496146101e3578063dd62ed3e146101f8578063e326c7d71461023357610086565b8063095ea7b31461009a57806323b872dd146100e757806370a082311461012a578063a9059cbb1461016f57610086565b3661008657005b606061009061025f565b9050805160208201f35b3480156100a657600080fd5b506100d3600480360360408110156100bd57600080fd5b506001600160a01b0381351690602001356102e1565b604080519115158252519081900360200190f35b3480156100f357600080fd5b506100d36004803603606081101561010a57600080fd5b506001600160a01b03813581169160208101359091169060400135610390565b34801561013657600080fd5b5061015d6004803603602081101561014d57600080fd5b50356001600160a01b03166103c2565b60408051918252519081900360200190f35b34801561017b57600080fd5b506100d36004803603604081101561019257600080fd5b506001600160a01b0381351690602001356103f4565b3480156101b457600080fd5b506101e1600480360360408110156101cb57600080fd5b506001600160a01b03813516906020013561041b565b005b3480156101ef57600080fd5b506100d3610445565b34801561020457600080fd5b5061015d6004803603604081101561021b57600080fd5b506001600160a01b038135811691602001351661044e565b34801561023f57600080fd5b506101e16004803603602081101561025657600080fd5b50351515610482565b6060600061026b610495565b6001600160a01b03166000366040518083838082843760405192019450600093509091505080830381855af49150503d80600081146102c6576040519150601f19603f3d011682016040523d82523d6000602084013e6102cb565b606091505b5092509050806102dd57815160208301fd5b5090565b6000805460ff166102f657606061009061025f565b6102fe610bdf565b600061030a338661049c565b60408201869052909250905061032133868461058b565b61133761def160901b016302a9192f61138883015a6040518363ffffffff1660e01b81526004018083815260200182815260200192505050600060405180830381600087803b15801561037357600080fd5b505af1925050508015610384575060015b50506001949350505050565b6000805460ff166103a557606061009061025f565b6103af84836105e2565b6103ba8484846106f6565b949350505050565b6000805460ff166103d757606061009061025f565b6103df610bdf565b6103e88361084f565b50604001519392505050565b6000805460ff1661040957606061009061025f565b6104143384846106f6565b9392505050565b610423610bdf565b61042c8361084f565b506040810183905290506104408382610924565b505050565b60005460ff1681565b6000805460ff1661046357606061009061025f565b61046b610bdf565b610475848461049c565b5060400151949350505050565b6000805460ff1916911515919091179055565b6001300190565b6104a4610bdf565b604080516001600160a01b03808616602483015284166044808301919091528251808303909101815260649091019091526020810180516001600160e01b0316636eb1769f60e11b17905260009081906104fd9061096e565b806020019051602081101561051157600080fd5b5051905060005a9050610522610a30565b6001600160a01b038088166000908152600192830160209081526040808320938a168352928152908290208251606081018452815460ff161515815293810154918401919091526002015490820152935061057d8483610a54565b5a8103925050509250929050565b80610594610a30565b6001600160a01b0394851660009081526001918201602090815260408083209690971682529485528590208251815460ff191690151517815593820151908401559092015160029091015550565b6105ea610bdf565b60006105f6843361049c565b90925090506001600160a01b038416331480159061061a5750600019826040015114155b15610673576106638260400151846040518060400160405280601f81526020017f4861636b656445524332302f414c4c4f57414e43455f554e444552464c4f5700815250610af4565b604083015261067384338461058b565b60005a905061068385338561058b565b5a8103919091019061133761def160901b016302a9192f61138884015a6040518363ffffffff1660e01b81526004018083815260200182815260200192505050600060405180830381600087803b1580156106dd57600080fd5b505af19250505080156106ee575060015b505050505050565b6000610700610bdf565b610708610bdf565b6000806107148861084f565b809250819550505080820191506107658460400151876040518060400160405280601d81526020017f4861636b656445524332302f42414c414e43455f554e444552464c4f57000000815250610af4565b60408501526107748885610924565b61077d8761084f565b809250819450505080820191506107ce8360400151876040518060400160405280601c81526020017f4861636b656445524332302f42414c414e43455f4f564552464c4f5700000000815250610b8c565b60408401526107dd8784610924565b61133761def160901b016302a9192f61138884015a6040518363ffffffff1660e01b81526004018083815260200182815260200192505050600060405180830381600087803b15801561082f57600080fd5b505af1925050508015610840575060015b50506001979650505050505050565b610857610bdf565b604080516001600160a01b0384166024808301919091528251808303909101815260449091019091526020810180516001600160e01b03166370a0823160e01b17905260009081906108a89061096e565b80602001905160208110156108bc57600080fd5b5051905060005a90506108cd610a30565b6001600160a01b038616600090815260209182526040908190208151606081018352815460ff1615158152600182015493810193909352600201549082015293506109188483610a54565b5a810392505050915091565b8061092d610a30565b6001600160a01b0393909316600090815260209384526040908190208251815460ff1916901515178155938201516001850155015160029092019190915550565b6060600061097a610495565b6001600160a01b0316836040518082805190602001908083835b602083106109b35780518252601f199092019160209182019101610994565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855af49150503d8060008114610a13576040519150601f19603f3d011682016040523d82523d6000602084013e610a18565b606091505b509250905080610a2a57815160208301fd5b50919050565b7f64fd48372774b9637ace5c8c7a951f04ea13c793935207f2eada5382a0ec82cb90565b8151610a6a576001825260408201819052610aec565b8082602001511115610aad57610aa3826020015182846020015103604051806060016040528060278152602001610c2960279139610af4565b6040830152610aec565b8082602001511015610aec57610ae6826020015183602001518303604051806060016040528060268152602001610c0360269139610b8c565b60408301525b602090910152565b8183038184821115610b845760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610b49578181015183820152602001610b31565b50505050905090810190601f168015610b765780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b509392505050565b8282018184821015610b845760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610b49578181015183820152602001610b31565b60405180606001604052806000151581526020016000815260200160008152509056fe4861636b656445524332302f534841444f575f41444a5553544d454e545f4f564552464c4f574861636b656445524332302f534841444f575f41444a5553544d454e545f554e444552464c4f57a2646970667358221220b74d7b608789c6753bf7ca2fa908a3f0a488930a50bc0458fb68964541f88beb64736f6c634300060c0033",
                "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE CALLVALUE DUP1 ISZERO PUSH2 0x1A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xC85 DUP1 PUSH2 0x2A PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x7F JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xAB86E0A6 GT PUSH2 0x4E JUMPI DUP1 PUSH4 0xAB86E0A6 EQ PUSH2 0x1A8 JUMPI DUP1 PUSH4 0xC36BE496 EQ PUSH2 0x1E3 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x1F8 JUMPI DUP1 PUSH4 0xE326C7D7 EQ PUSH2 0x233 JUMPI PUSH2 0x86 JUMP JUMPDEST DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x9A JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0xE7 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x12A JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x16F JUMPI PUSH2 0x86 JUMP JUMPDEST CALLDATASIZE PUSH2 0x86 JUMPI STOP JUMPDEST PUSH1 0x60 PUSH2 0x90 PUSH2 0x25F JUMP JUMPDEST SWAP1 POP DUP1 MLOAD PUSH1 0x20 DUP3 ADD RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD3 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0xBD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x2E1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xF3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD3 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x10A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x20 DUP2 ADD CALLDATALOAD SWAP1 SWAP2 AND SWAP1 PUSH1 0x40 ADD CALLDATALOAD PUSH2 0x390 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x136 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x15D PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x14D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x3C2 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x17B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD3 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x192 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x3F4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1E1 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x1CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x41B JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD3 PUSH2 0x445 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x204 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x15D PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x21B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x20 ADD CALLDATALOAD AND PUSH2 0x44E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x23F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1E1 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x256 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD ISZERO ISZERO PUSH2 0x482 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x26B PUSH2 0x495 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 CALLDATASIZE PUSH1 0x40 MLOAD DUP1 DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x40 MLOAD SWAP3 ADD SWAP5 POP PUSH1 0x0 SWAP4 POP SWAP1 SWAP2 POP POP DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2C6 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2CB JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP3 POP SWAP1 POP DUP1 PUSH2 0x2DD JUMPI DUP2 MLOAD PUSH1 0x20 DUP4 ADD REVERT JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF AND PUSH2 0x2F6 JUMPI PUSH1 0x60 PUSH2 0x90 PUSH2 0x25F JUMP JUMPDEST PUSH2 0x2FE PUSH2 0xBDF JUMP JUMPDEST PUSH1 0x0 PUSH2 0x30A CALLER DUP7 PUSH2 0x49C JUMP JUMPDEST PUSH1 0x40 DUP3 ADD DUP7 SWAP1 MSTORE SWAP1 SWAP3 POP SWAP1 POP PUSH2 0x321 CALLER DUP7 DUP5 PUSH2 0x58B JUMP JUMPDEST PUSH2 0x1337 PUSH2 0xDEF1 PUSH1 0x90 SHL ADD PUSH4 0x2A9192F PUSH2 0x1388 DUP4 ADD GAS PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x373 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x384 JUMPI POP PUSH1 0x1 JUMPDEST POP POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF AND PUSH2 0x3A5 JUMPI PUSH1 0x60 PUSH2 0x90 PUSH2 0x25F JUMP JUMPDEST PUSH2 0x3AF DUP5 DUP4 PUSH2 0x5E2 JUMP JUMPDEST PUSH2 0x3BA DUP5 DUP5 DUP5 PUSH2 0x6F6 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF AND PUSH2 0x3D7 JUMPI PUSH1 0x60 PUSH2 0x90 PUSH2 0x25F JUMP JUMPDEST PUSH2 0x3DF PUSH2 0xBDF JUMP JUMPDEST PUSH2 0x3E8 DUP4 PUSH2 0x84F JUMP JUMPDEST POP PUSH1 0x40 ADD MLOAD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF AND PUSH2 0x409 JUMPI PUSH1 0x60 PUSH2 0x90 PUSH2 0x25F JUMP JUMPDEST PUSH2 0x414 CALLER DUP5 DUP5 PUSH2 0x6F6 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x423 PUSH2 0xBDF JUMP JUMPDEST PUSH2 0x42C DUP4 PUSH2 0x84F JUMP JUMPDEST POP PUSH1 0x40 DUP2 ADD DUP4 SWAP1 MSTORE SWAP1 POP PUSH2 0x440 DUP4 DUP3 PUSH2 0x924 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF AND PUSH2 0x463 JUMPI PUSH1 0x60 PUSH2 0x90 PUSH2 0x25F JUMP JUMPDEST PUSH2 0x46B PUSH2 0xBDF JUMP JUMPDEST PUSH2 0x475 DUP5 DUP5 PUSH2 0x49C JUMP JUMPDEST POP PUSH1 0x40 ADD MLOAD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x1 ADDRESS ADD SWAP1 JUMP JUMPDEST PUSH2 0x4A4 PUSH2 0xBDF JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP7 AND PUSH1 0x24 DUP4 ADD MSTORE DUP5 AND PUSH1 0x44 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0x6EB1769F PUSH1 0xE1 SHL OR SWAP1 MSTORE PUSH1 0x0 SWAP1 DUP2 SWAP1 PUSH2 0x4FD SWAP1 PUSH2 0x96E JUMP JUMPDEST DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x511 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP1 POP PUSH1 0x0 GAS SWAP1 POP PUSH2 0x522 PUSH2 0xA30 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP9 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 SWAP3 DUP4 ADD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP11 AND DUP4 MSTORE SWAP3 DUP2 MSTORE SWAP1 DUP3 SWAP1 KECCAK256 DUP3 MLOAD PUSH1 0x60 DUP2 ADD DUP5 MSTORE DUP2 SLOAD PUSH1 0xFF AND ISZERO ISZERO DUP2 MSTORE SWAP4 DUP2 ADD SLOAD SWAP2 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x2 ADD SLOAD SWAP1 DUP3 ADD MSTORE SWAP4 POP PUSH2 0x57D DUP5 DUP4 PUSH2 0xA54 JUMP JUMPDEST GAS DUP2 SUB SWAP3 POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST DUP1 PUSH2 0x594 PUSH2 0xA30 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 SWAP2 DUP3 ADD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP7 SWAP1 SWAP8 AND DUP3 MSTORE SWAP5 DUP6 MSTORE DUP6 SWAP1 KECCAK256 DUP3 MLOAD DUP2 SLOAD PUSH1 0xFF NOT AND SWAP1 ISZERO ISZERO OR DUP2 SSTORE SWAP4 DUP3 ADD MLOAD SWAP1 DUP5 ADD SSTORE SWAP1 SWAP3 ADD MLOAD PUSH1 0x2 SWAP1 SWAP2 ADD SSTORE POP JUMP JUMPDEST PUSH2 0x5EA PUSH2 0xBDF JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5F6 DUP5 CALLER PUSH2 0x49C JUMP JUMPDEST SWAP1 SWAP3 POP SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND CALLER EQ DUP1 ISZERO SWAP1 PUSH2 0x61A JUMPI POP PUSH1 0x0 NOT DUP3 PUSH1 0x40 ADD MLOAD EQ ISZERO JUMPDEST ISZERO PUSH2 0x673 JUMPI PUSH2 0x663 DUP3 PUSH1 0x40 ADD MLOAD DUP5 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1F DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x4861636B656445524332302F414C4C4F57414E43455F554E444552464C4F5700 DUP2 MSTORE POP PUSH2 0xAF4 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x673 DUP5 CALLER DUP5 PUSH2 0x58B JUMP JUMPDEST PUSH1 0x0 GAS SWAP1 POP PUSH2 0x683 DUP6 CALLER DUP6 PUSH2 0x58B JUMP JUMPDEST GAS DUP2 SUB SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH2 0x1337 PUSH2 0xDEF1 PUSH1 0x90 SHL ADD PUSH4 0x2A9192F PUSH2 0x1388 DUP5 ADD GAS PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x6EE JUMPI POP PUSH1 0x1 JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x700 PUSH2 0xBDF JUMP JUMPDEST PUSH2 0x708 PUSH2 0xBDF JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x714 DUP9 PUSH2 0x84F JUMP JUMPDEST DUP1 SWAP3 POP DUP2 SWAP6 POP POP POP DUP1 DUP3 ADD SWAP2 POP PUSH2 0x765 DUP5 PUSH1 0x40 ADD MLOAD DUP8 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1D DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x4861636B656445524332302F42414C414E43455F554E444552464C4F57000000 DUP2 MSTORE POP PUSH2 0xAF4 JUMP JUMPDEST PUSH1 0x40 DUP6 ADD MSTORE PUSH2 0x774 DUP9 DUP6 PUSH2 0x924 JUMP JUMPDEST PUSH2 0x77D DUP8 PUSH2 0x84F JUMP JUMPDEST DUP1 SWAP3 POP DUP2 SWAP5 POP POP POP DUP1 DUP3 ADD SWAP2 POP PUSH2 0x7CE DUP4 PUSH1 0x40 ADD MLOAD DUP8 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1C DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x4861636B656445524332302F42414C414E43455F4F564552464C4F5700000000 DUP2 MSTORE POP PUSH2 0xB8C JUMP JUMPDEST PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x7DD DUP8 DUP5 PUSH2 0x924 JUMP JUMPDEST PUSH2 0x1337 PUSH2 0xDEF1 PUSH1 0x90 SHL ADD PUSH4 0x2A9192F PUSH2 0x1388 DUP5 ADD GAS PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x82F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x840 JUMPI POP PUSH1 0x1 JUMPDEST POP POP PUSH1 0x1 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x857 PUSH2 0xBDF JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x24 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x44 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0x70A08231 PUSH1 0xE0 SHL OR SWAP1 MSTORE PUSH1 0x0 SWAP1 DUP2 SWAP1 PUSH2 0x8A8 SWAP1 PUSH2 0x96E JUMP JUMPDEST DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x8BC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP1 POP PUSH1 0x0 GAS SWAP1 POP PUSH2 0x8CD PUSH2 0xA30 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 DUP3 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP2 MLOAD PUSH1 0x60 DUP2 ADD DUP4 MSTORE DUP2 SLOAD PUSH1 0xFF AND ISZERO ISZERO DUP2 MSTORE PUSH1 0x1 DUP3 ADD SLOAD SWAP4 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x2 ADD SLOAD SWAP1 DUP3 ADD MSTORE SWAP4 POP PUSH2 0x918 DUP5 DUP4 PUSH2 0xA54 JUMP JUMPDEST GAS DUP2 SUB SWAP3 POP POP POP SWAP2 POP SWAP2 JUMP JUMPDEST DUP1 PUSH2 0x92D PUSH2 0xA30 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 SWAP1 SWAP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP4 DUP5 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP3 MLOAD DUP2 SLOAD PUSH1 0xFF NOT AND SWAP1 ISZERO ISZERO OR DUP2 SSTORE SWAP4 DUP3 ADD MLOAD PUSH1 0x1 DUP6 ADD SSTORE ADD MLOAD PUSH1 0x2 SWAP1 SWAP3 ADD SWAP2 SWAP1 SWAP2 SSTORE POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x97A PUSH2 0x495 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x40 MLOAD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x9B3 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x994 JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0xA13 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xA18 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP3 POP SWAP1 POP DUP1 PUSH2 0xA2A JUMPI DUP2 MLOAD PUSH1 0x20 DUP4 ADD REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x64FD48372774B9637ACE5C8C7A951F04EA13C793935207F2EADA5382A0EC82CB SWAP1 JUMP JUMPDEST DUP2 MLOAD PUSH2 0xA6A JUMPI PUSH1 0x1 DUP3 MSTORE PUSH1 0x40 DUP3 ADD DUP2 SWAP1 MSTORE PUSH2 0xAEC JUMP JUMPDEST DUP1 DUP3 PUSH1 0x20 ADD MLOAD GT ISZERO PUSH2 0xAAD JUMPI PUSH2 0xAA3 DUP3 PUSH1 0x20 ADD MLOAD DUP3 DUP5 PUSH1 0x20 ADD MLOAD SUB PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x27 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC29 PUSH1 0x27 SWAP2 CODECOPY PUSH2 0xAF4 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0xAEC JUMP JUMPDEST DUP1 DUP3 PUSH1 0x20 ADD MLOAD LT ISZERO PUSH2 0xAEC JUMPI PUSH2 0xAE6 DUP3 PUSH1 0x20 ADD MLOAD DUP4 PUSH1 0x20 ADD MLOAD DUP4 SUB PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC03 PUSH1 0x26 SWAP2 CODECOPY PUSH2 0xB8C JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE JUMPDEST PUSH1 0x20 SWAP1 SWAP2 ADD MSTORE JUMP JUMPDEST DUP2 DUP4 SUB DUP2 DUP5 DUP3 GT ISZERO PUSH2 0xB84 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xB49 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xB31 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0xB76 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP3 DUP3 ADD DUP2 DUP5 DUP3 LT ISZERO PUSH2 0xB84 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 DUP2 MSTORE DUP4 MLOAD PUSH1 0x24 DUP5 ADD MSTORE DUP4 MLOAD SWAP1 SWAP3 DUP4 SWAP3 PUSH1 0x44 SWAP1 SWAP2 ADD SWAP2 SWAP1 DUP6 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 DUP4 ISZERO PUSH2 0xB49 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xB31 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP INVALID 0x48 PUSH2 0x636B PUSH6 0x644552433230 0x2F MSTORE8 0x48 COINBASE DIFFICULTY 0x4F JUMPI 0x5F COINBASE DIFFICULTY 0x4A SSTORE MSTORE8 SLOAD 0x4D GASLIMIT 0x4E SLOAD 0x5F 0x4F JUMP GASLIMIT MSTORE CHAINID 0x4C 0x4F JUMPI 0x48 PUSH2 0x636B PUSH6 0x644552433230 0x2F MSTORE8 0x48 COINBASE DIFFICULTY 0x4F JUMPI 0x5F COINBASE DIFFICULTY 0x4A SSTORE MSTORE8 SLOAD 0x4D GASLIMIT 0x4E SLOAD 0x5F SSTORE 0x4E DIFFICULTY GASLIMIT MSTORE CHAINID 0x4C 0x4F JUMPI LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB7 0x4D PUSH28 0x608789C6753BF7CA2FA908A3F0A488930A50BC0458FB68964541F88B 0xEB PUSH5 0x736F6C6343 STOP MOD 0xC STOP CALLER ",
                "sourceMap": "160:9851:1:-:0;;;1081:5;1058:28;;-1:-1:-1;;1058:28:1;;;160:9851;;;;;;;;;;;;;;;;"
            },
            "deployedBytecode": {
                "immutableReferences": {},
                "linkReferences": {},
                "object": "0x60806040526004361061007f5760003560e01c8063ab86e0a61161004e578063ab86e0a6146101a8578063c36be496146101e3578063dd62ed3e146101f8578063e326c7d71461023357610086565b8063095ea7b31461009a57806323b872dd146100e757806370a082311461012a578063a9059cbb1461016f57610086565b3661008657005b606061009061025f565b9050805160208201f35b3480156100a657600080fd5b506100d3600480360360408110156100bd57600080fd5b506001600160a01b0381351690602001356102e1565b604080519115158252519081900360200190f35b3480156100f357600080fd5b506100d36004803603606081101561010a57600080fd5b506001600160a01b03813581169160208101359091169060400135610390565b34801561013657600080fd5b5061015d6004803603602081101561014d57600080fd5b50356001600160a01b03166103c2565b60408051918252519081900360200190f35b34801561017b57600080fd5b506100d36004803603604081101561019257600080fd5b506001600160a01b0381351690602001356103f4565b3480156101b457600080fd5b506101e1600480360360408110156101cb57600080fd5b506001600160a01b03813516906020013561041b565b005b3480156101ef57600080fd5b506100d3610445565b34801561020457600080fd5b5061015d6004803603604081101561021b57600080fd5b506001600160a01b038135811691602001351661044e565b34801561023f57600080fd5b506101e16004803603602081101561025657600080fd5b50351515610482565b6060600061026b610495565b6001600160a01b03166000366040518083838082843760405192019450600093509091505080830381855af49150503d80600081146102c6576040519150601f19603f3d011682016040523d82523d6000602084013e6102cb565b606091505b5092509050806102dd57815160208301fd5b5090565b6000805460ff166102f657606061009061025f565b6102fe610bdf565b600061030a338661049c565b60408201869052909250905061032133868461058b565b61133761def160901b016302a9192f61138883015a6040518363ffffffff1660e01b81526004018083815260200182815260200192505050600060405180830381600087803b15801561037357600080fd5b505af1925050508015610384575060015b50506001949350505050565b6000805460ff166103a557606061009061025f565b6103af84836105e2565b6103ba8484846106f6565b949350505050565b6000805460ff166103d757606061009061025f565b6103df610bdf565b6103e88361084f565b50604001519392505050565b6000805460ff1661040957606061009061025f565b6104143384846106f6565b9392505050565b610423610bdf565b61042c8361084f565b506040810183905290506104408382610924565b505050565b60005460ff1681565b6000805460ff1661046357606061009061025f565b61046b610bdf565b610475848461049c565b5060400151949350505050565b6000805460ff1916911515919091179055565b6001300190565b6104a4610bdf565b604080516001600160a01b03808616602483015284166044808301919091528251808303909101815260649091019091526020810180516001600160e01b0316636eb1769f60e11b17905260009081906104fd9061096e565b806020019051602081101561051157600080fd5b5051905060005a9050610522610a30565b6001600160a01b038088166000908152600192830160209081526040808320938a168352928152908290208251606081018452815460ff161515815293810154918401919091526002015490820152935061057d8483610a54565b5a8103925050509250929050565b80610594610a30565b6001600160a01b0394851660009081526001918201602090815260408083209690971682529485528590208251815460ff191690151517815593820151908401559092015160029091015550565b6105ea610bdf565b60006105f6843361049c565b90925090506001600160a01b038416331480159061061a5750600019826040015114155b15610673576106638260400151846040518060400160405280601f81526020017f4861636b656445524332302f414c4c4f57414e43455f554e444552464c4f5700815250610af4565b604083015261067384338461058b565b60005a905061068385338561058b565b5a8103919091019061133761def160901b016302a9192f61138884015a6040518363ffffffff1660e01b81526004018083815260200182815260200192505050600060405180830381600087803b1580156106dd57600080fd5b505af19250505080156106ee575060015b505050505050565b6000610700610bdf565b610708610bdf565b6000806107148861084f565b809250819550505080820191506107658460400151876040518060400160405280601d81526020017f4861636b656445524332302f42414c414e43455f554e444552464c4f57000000815250610af4565b60408501526107748885610924565b61077d8761084f565b809250819450505080820191506107ce8360400151876040518060400160405280601c81526020017f4861636b656445524332302f42414c414e43455f4f564552464c4f5700000000815250610b8c565b60408401526107dd8784610924565b61133761def160901b016302a9192f61138884015a6040518363ffffffff1660e01b81526004018083815260200182815260200192505050600060405180830381600087803b15801561082f57600080fd5b505af1925050508015610840575060015b50506001979650505050505050565b610857610bdf565b604080516001600160a01b0384166024808301919091528251808303909101815260449091019091526020810180516001600160e01b03166370a0823160e01b17905260009081906108a89061096e565b80602001905160208110156108bc57600080fd5b5051905060005a90506108cd610a30565b6001600160a01b038616600090815260209182526040908190208151606081018352815460ff1615158152600182015493810193909352600201549082015293506109188483610a54565b5a810392505050915091565b8061092d610a30565b6001600160a01b0393909316600090815260209384526040908190208251815460ff1916901515178155938201516001850155015160029092019190915550565b6060600061097a610495565b6001600160a01b0316836040518082805190602001908083835b602083106109b35780518252601f199092019160209182019101610994565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855af49150503d8060008114610a13576040519150601f19603f3d011682016040523d82523d6000602084013e610a18565b606091505b509250905080610a2a57815160208301fd5b50919050565b7f64fd48372774b9637ace5c8c7a951f04ea13c793935207f2eada5382a0ec82cb90565b8151610a6a576001825260408201819052610aec565b8082602001511115610aad57610aa3826020015182846020015103604051806060016040528060278152602001610c2960279139610af4565b6040830152610aec565b8082602001511015610aec57610ae6826020015183602001518303604051806060016040528060268152602001610c0360269139610b8c565b60408301525b602090910152565b8183038184821115610b845760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610b49578181015183820152602001610b31565b50505050905090810190601f168015610b765780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b509392505050565b8282018184821015610b845760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610b49578181015183820152602001610b31565b60405180606001604052806000151581526020016000815260200160008152509056fe4861636b656445524332302f534841444f575f41444a5553544d454e545f4f564552464c4f574861636b656445524332302f534841444f575f41444a5553544d454e545f554e444552464c4f57a2646970667358221220b74d7b608789c6753bf7ca2fa908a3f0a488930a50bc0458fb68964541f88beb64736f6c634300060c0033",
                "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x7F JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xAB86E0A6 GT PUSH2 0x4E JUMPI DUP1 PUSH4 0xAB86E0A6 EQ PUSH2 0x1A8 JUMPI DUP1 PUSH4 0xC36BE496 EQ PUSH2 0x1E3 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x1F8 JUMPI DUP1 PUSH4 0xE326C7D7 EQ PUSH2 0x233 JUMPI PUSH2 0x86 JUMP JUMPDEST DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x9A JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0xE7 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x12A JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x16F JUMPI PUSH2 0x86 JUMP JUMPDEST CALLDATASIZE PUSH2 0x86 JUMPI STOP JUMPDEST PUSH1 0x60 PUSH2 0x90 PUSH2 0x25F JUMP JUMPDEST SWAP1 POP DUP1 MLOAD PUSH1 0x20 DUP3 ADD RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD3 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0xBD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x2E1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xF3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD3 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x10A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x20 DUP2 ADD CALLDATALOAD SWAP1 SWAP2 AND SWAP1 PUSH1 0x40 ADD CALLDATALOAD PUSH2 0x390 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x136 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x15D PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x14D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x3C2 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x17B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD3 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x192 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x3F4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1E1 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x1CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x41B JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD3 PUSH2 0x445 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x204 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x15D PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x21B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x20 ADD CALLDATALOAD AND PUSH2 0x44E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x23F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1E1 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x256 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD ISZERO ISZERO PUSH2 0x482 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x26B PUSH2 0x495 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 CALLDATASIZE PUSH1 0x40 MLOAD DUP1 DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x40 MLOAD SWAP3 ADD SWAP5 POP PUSH1 0x0 SWAP4 POP SWAP1 SWAP2 POP POP DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2C6 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2CB JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP3 POP SWAP1 POP DUP1 PUSH2 0x2DD JUMPI DUP2 MLOAD PUSH1 0x20 DUP4 ADD REVERT JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF AND PUSH2 0x2F6 JUMPI PUSH1 0x60 PUSH2 0x90 PUSH2 0x25F JUMP JUMPDEST PUSH2 0x2FE PUSH2 0xBDF JUMP JUMPDEST PUSH1 0x0 PUSH2 0x30A CALLER DUP7 PUSH2 0x49C JUMP JUMPDEST PUSH1 0x40 DUP3 ADD DUP7 SWAP1 MSTORE SWAP1 SWAP3 POP SWAP1 POP PUSH2 0x321 CALLER DUP7 DUP5 PUSH2 0x58B JUMP JUMPDEST PUSH2 0x1337 PUSH2 0xDEF1 PUSH1 0x90 SHL ADD PUSH4 0x2A9192F PUSH2 0x1388 DUP4 ADD GAS PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x373 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x384 JUMPI POP PUSH1 0x1 JUMPDEST POP POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF AND PUSH2 0x3A5 JUMPI PUSH1 0x60 PUSH2 0x90 PUSH2 0x25F JUMP JUMPDEST PUSH2 0x3AF DUP5 DUP4 PUSH2 0x5E2 JUMP JUMPDEST PUSH2 0x3BA DUP5 DUP5 DUP5 PUSH2 0x6F6 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF AND PUSH2 0x3D7 JUMPI PUSH1 0x60 PUSH2 0x90 PUSH2 0x25F JUMP JUMPDEST PUSH2 0x3DF PUSH2 0xBDF JUMP JUMPDEST PUSH2 0x3E8 DUP4 PUSH2 0x84F JUMP JUMPDEST POP PUSH1 0x40 ADD MLOAD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF AND PUSH2 0x409 JUMPI PUSH1 0x60 PUSH2 0x90 PUSH2 0x25F JUMP JUMPDEST PUSH2 0x414 CALLER DUP5 DUP5 PUSH2 0x6F6 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x423 PUSH2 0xBDF JUMP JUMPDEST PUSH2 0x42C DUP4 PUSH2 0x84F JUMP JUMPDEST POP PUSH1 0x40 DUP2 ADD DUP4 SWAP1 MSTORE SWAP1 POP PUSH2 0x440 DUP4 DUP3 PUSH2 0x924 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF AND PUSH2 0x463 JUMPI PUSH1 0x60 PUSH2 0x90 PUSH2 0x25F JUMP JUMPDEST PUSH2 0x46B PUSH2 0xBDF JUMP JUMPDEST PUSH2 0x475 DUP5 DUP5 PUSH2 0x49C JUMP JUMPDEST POP PUSH1 0x40 ADD MLOAD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x1 ADDRESS ADD SWAP1 JUMP JUMPDEST PUSH2 0x4A4 PUSH2 0xBDF JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP7 AND PUSH1 0x24 DUP4 ADD MSTORE DUP5 AND PUSH1 0x44 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0x6EB1769F PUSH1 0xE1 SHL OR SWAP1 MSTORE PUSH1 0x0 SWAP1 DUP2 SWAP1 PUSH2 0x4FD SWAP1 PUSH2 0x96E JUMP JUMPDEST DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x511 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP1 POP PUSH1 0x0 GAS SWAP1 POP PUSH2 0x522 PUSH2 0xA30 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP9 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 SWAP3 DUP4 ADD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP11 AND DUP4 MSTORE SWAP3 DUP2 MSTORE SWAP1 DUP3 SWAP1 KECCAK256 DUP3 MLOAD PUSH1 0x60 DUP2 ADD DUP5 MSTORE DUP2 SLOAD PUSH1 0xFF AND ISZERO ISZERO DUP2 MSTORE SWAP4 DUP2 ADD SLOAD SWAP2 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x2 ADD SLOAD SWAP1 DUP3 ADD MSTORE SWAP4 POP PUSH2 0x57D DUP5 DUP4 PUSH2 0xA54 JUMP JUMPDEST GAS DUP2 SUB SWAP3 POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST DUP1 PUSH2 0x594 PUSH2 0xA30 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 SWAP2 DUP3 ADD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP7 SWAP1 SWAP8 AND DUP3 MSTORE SWAP5 DUP6 MSTORE DUP6 SWAP1 KECCAK256 DUP3 MLOAD DUP2 SLOAD PUSH1 0xFF NOT AND SWAP1 ISZERO ISZERO OR DUP2 SSTORE SWAP4 DUP3 ADD MLOAD SWAP1 DUP5 ADD SSTORE SWAP1 SWAP3 ADD MLOAD PUSH1 0x2 SWAP1 SWAP2 ADD SSTORE POP JUMP JUMPDEST PUSH2 0x5EA PUSH2 0xBDF JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5F6 DUP5 CALLER PUSH2 0x49C JUMP JUMPDEST SWAP1 SWAP3 POP SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND CALLER EQ DUP1 ISZERO SWAP1 PUSH2 0x61A JUMPI POP PUSH1 0x0 NOT DUP3 PUSH1 0x40 ADD MLOAD EQ ISZERO JUMPDEST ISZERO PUSH2 0x673 JUMPI PUSH2 0x663 DUP3 PUSH1 0x40 ADD MLOAD DUP5 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1F DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x4861636B656445524332302F414C4C4F57414E43455F554E444552464C4F5700 DUP2 MSTORE POP PUSH2 0xAF4 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x673 DUP5 CALLER DUP5 PUSH2 0x58B JUMP JUMPDEST PUSH1 0x0 GAS SWAP1 POP PUSH2 0x683 DUP6 CALLER DUP6 PUSH2 0x58B JUMP JUMPDEST GAS DUP2 SUB SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH2 0x1337 PUSH2 0xDEF1 PUSH1 0x90 SHL ADD PUSH4 0x2A9192F PUSH2 0x1388 DUP5 ADD GAS PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x6EE JUMPI POP PUSH1 0x1 JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x700 PUSH2 0xBDF JUMP JUMPDEST PUSH2 0x708 PUSH2 0xBDF JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x714 DUP9 PUSH2 0x84F JUMP JUMPDEST DUP1 SWAP3 POP DUP2 SWAP6 POP POP POP DUP1 DUP3 ADD SWAP2 POP PUSH2 0x765 DUP5 PUSH1 0x40 ADD MLOAD DUP8 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1D DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x4861636B656445524332302F42414C414E43455F554E444552464C4F57000000 DUP2 MSTORE POP PUSH2 0xAF4 JUMP JUMPDEST PUSH1 0x40 DUP6 ADD MSTORE PUSH2 0x774 DUP9 DUP6 PUSH2 0x924 JUMP JUMPDEST PUSH2 0x77D DUP8 PUSH2 0x84F JUMP JUMPDEST DUP1 SWAP3 POP DUP2 SWAP5 POP POP POP DUP1 DUP3 ADD SWAP2 POP PUSH2 0x7CE DUP4 PUSH1 0x40 ADD MLOAD DUP8 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1C DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x4861636B656445524332302F42414C414E43455F4F564552464C4F5700000000 DUP2 MSTORE POP PUSH2 0xB8C JUMP JUMPDEST PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x7DD DUP8 DUP5 PUSH2 0x924 JUMP JUMPDEST PUSH2 0x1337 PUSH2 0xDEF1 PUSH1 0x90 SHL ADD PUSH4 0x2A9192F PUSH2 0x1388 DUP5 ADD GAS PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x82F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x840 JUMPI POP PUSH1 0x1 JUMPDEST POP POP PUSH1 0x1 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x857 PUSH2 0xBDF JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x24 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x44 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0x70A08231 PUSH1 0xE0 SHL OR SWAP1 MSTORE PUSH1 0x0 SWAP1 DUP2 SWAP1 PUSH2 0x8A8 SWAP1 PUSH2 0x96E JUMP JUMPDEST DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x8BC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP1 POP PUSH1 0x0 GAS SWAP1 POP PUSH2 0x8CD PUSH2 0xA30 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 DUP3 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP2 MLOAD PUSH1 0x60 DUP2 ADD DUP4 MSTORE DUP2 SLOAD PUSH1 0xFF AND ISZERO ISZERO DUP2 MSTORE PUSH1 0x1 DUP3 ADD SLOAD SWAP4 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x2 ADD SLOAD SWAP1 DUP3 ADD MSTORE SWAP4 POP PUSH2 0x918 DUP5 DUP4 PUSH2 0xA54 JUMP JUMPDEST GAS DUP2 SUB SWAP3 POP POP POP SWAP2 POP SWAP2 JUMP JUMPDEST DUP1 PUSH2 0x92D PUSH2 0xA30 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 SWAP1 SWAP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP4 DUP5 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP3 MLOAD DUP2 SLOAD PUSH1 0xFF NOT AND SWAP1 ISZERO ISZERO OR DUP2 SSTORE SWAP4 DUP3 ADD MLOAD PUSH1 0x1 DUP6 ADD SSTORE ADD MLOAD PUSH1 0x2 SWAP1 SWAP3 ADD SWAP2 SWAP1 SWAP2 SSTORE POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x97A PUSH2 0x495 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x40 MLOAD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x9B3 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x994 JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0xA13 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xA18 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP3 POP SWAP1 POP DUP1 PUSH2 0xA2A JUMPI DUP2 MLOAD PUSH1 0x20 DUP4 ADD REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x64FD48372774B9637ACE5C8C7A951F04EA13C793935207F2EADA5382A0EC82CB SWAP1 JUMP JUMPDEST DUP2 MLOAD PUSH2 0xA6A JUMPI PUSH1 0x1 DUP3 MSTORE PUSH1 0x40 DUP3 ADD DUP2 SWAP1 MSTORE PUSH2 0xAEC JUMP JUMPDEST DUP1 DUP3 PUSH1 0x20 ADD MLOAD GT ISZERO PUSH2 0xAAD JUMPI PUSH2 0xAA3 DUP3 PUSH1 0x20 ADD MLOAD DUP3 DUP5 PUSH1 0x20 ADD MLOAD SUB PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x27 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC29 PUSH1 0x27 SWAP2 CODECOPY PUSH2 0xAF4 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0xAEC JUMP JUMPDEST DUP1 DUP3 PUSH1 0x20 ADD MLOAD LT ISZERO PUSH2 0xAEC JUMPI PUSH2 0xAE6 DUP3 PUSH1 0x20 ADD MLOAD DUP4 PUSH1 0x20 ADD MLOAD DUP4 SUB PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC03 PUSH1 0x26 SWAP2 CODECOPY PUSH2 0xB8C JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE JUMPDEST PUSH1 0x20 SWAP1 SWAP2 ADD MSTORE JUMP JUMPDEST DUP2 DUP4 SUB DUP2 DUP5 DUP3 GT ISZERO PUSH2 0xB84 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xB49 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xB31 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0xB76 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP3 DUP3 ADD DUP2 DUP5 DUP3 LT ISZERO PUSH2 0xB84 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 DUP2 MSTORE DUP4 MLOAD PUSH1 0x24 DUP5 ADD MSTORE DUP4 MLOAD SWAP1 SWAP3 DUP4 SWAP3 PUSH1 0x44 SWAP1 SWAP2 ADD SWAP2 SWAP1 DUP6 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 DUP4 ISZERO PUSH2 0xB49 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xB31 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP INVALID 0x48 PUSH2 0x636B PUSH6 0x644552433230 0x2F MSTORE8 0x48 COINBASE DIFFICULTY 0x4F JUMPI 0x5F COINBASE DIFFICULTY 0x4A SSTORE MSTORE8 SLOAD 0x4D GASLIMIT 0x4E SLOAD 0x5F 0x4F JUMP GASLIMIT MSTORE CHAINID 0x4C 0x4F JUMPI 0x48 PUSH2 0x636B PUSH6 0x644552433230 0x2F MSTORE8 0x48 COINBASE DIFFICULTY 0x4F JUMPI 0x5F COINBASE DIFFICULTY 0x4A SSTORE MSTORE8 SLOAD 0x4D GASLIMIT 0x4E SLOAD 0x5F SSTORE 0x4E DIFFICULTY GASLIMIT MSTORE CHAINID 0x4C 0x4F JUMPI LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB7 0x4D PUSH28 0x608789C6753BF7CA2FA908A3F0A488930A50BC0458FB68964541F88B 0xEB PUSH5 0x736F6C6343 STOP MOD 0xC STOP CALLER ",
                "sourceMap": "160:9851:1:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1166:14;1183:20;:18;:20::i;:::-;1166:37;;1249:1;1243:8;1238:2;1235:1;1231:10;1224:28;2706:710;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;2706:710:1;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;2023:360;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;2023:360:1;;;;;;;;;;;;;;;;;:::i;1266:357::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1266:357:1;-1:-1:-1;;;;;1266:357:1;;:::i;:::-;;;;;;;;;;;;;;;;2390:310;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;2390:310:1;;;;;;;;:::i;3422:224::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;3422:224:1;;;;;;;;:::i;:::-;;1058:28;;;;;;;;;;;;;:::i;1629:388::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;1629:388:1;;;;;;;;;;:::i;3652:89::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3652:89:1;;;;:::i;6951:331::-;7014:23;7053:12;7111:35;:33;:35::i;:::-;-1:-1:-1;;;;;7111:48:1;7160:8;;7111:58;;;;;;;;;;;;;;-1:-1:-1;7111:58:1;;-1:-1:-1;7111:58:1;;-1:-1:-1;;7111:58:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;7075:94:1;-1:-1:-1;7075:94:1;-1:-1:-1;7075:94:1;7179:97;;7252:10;7246:17;7241:2;7229:10;7225:19;7218:46;7216:50;6951:331;;:::o;2706:710::-;2790:4;2815:8;;;;2810:131;;2839:14;2856:20;:18;:20::i;2899:32::-;2964;;:::i;:::-;3010:19;3042:40;3062:10;3074:7;3042:19;:40::i;:::-;3093:25;;;:34;;;2950:132;;-1:-1:-1;2950:132:1;-1:-1:-1;3137:54:1;3159:10;3171:7;2950:132;3137:21;:54::i;:::-;-1:-1:-1;;;;;3281:37:1;902:4;3319:36;;3357:9;3281:86;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3265:124;-1:-1:-1;3405:4:1;;2706:710;-1:-1:-1;;;;2706:710:1:o;2023:360::-;2119:12;2152:8;;;;2147:131;;2176:14;2193:20;:18;:20::i;2236:32::-;2287:30;2304:4;2310:6;2287:16;:30::i;:::-;2337:39;2359:4;2365:2;2369:6;2337:21;:39::i;:::-;2327:49;2023:360;-1:-1:-1;;;;2023:360:1:o;1266:357::-;1353:15;1389:8;;;;1384:131;;1413:14;1430:20;:18;:20::i;1473:32::-;1525:26;;:::i;:::-;1556:24;1574:5;1556:17;:24::i;:::-;-1:-1:-1;1597:19:1;;;;1266:357;-1:-1:-1;;;1266:357:1:o;2390:310::-;2470:12;2503:8;;;;2498:131;;2527:14;2544:20;:18;:20::i;2587:32::-;2648:45;2670:10;2682:2;2686:6;2648:21;:45::i;:::-;2638:55;2390:310;-1:-1:-1;;;2390:310:1:o;3422:224::-;3504:26;;:::i;:::-;3535:24;3553:5;3535:17;:24::i;:::-;-1:-1:-1;3569:19:1;;;:28;;;3503:56;-1:-1:-1;3607:32:1;3627:5;3503:56;3607:19;:32::i;:::-;3422:224;;;:::o;1058:28::-;;;;;;:::o;1629:388::-;1733:18;1772:8;;;;1767:131;;1796:14;1813:20;:18;:20::i;1856:32::-;1908:26;;:::i;:::-;1939:35;1959:5;1966:7;1939:19;:35::i;:::-;-1:-1:-1;1991:19:1;;;;1629:388;-1:-1:-1;;;;1629:388:1:o;3652:89::-;3716:8;:18;;-1:-1:-1;;3716:18:1;;;;;;;;;;3652:89::o;6777:168::-;6936:1;6927:4;6911:26;6777:168;:::o;3747:779::-;3860:32;;:::i;:::-;3993:135;;;-1:-1:-1;;;;;3993:135:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;3993:135:1;-1:-1:-1;;;3993:135:1;;;3894:19;;;;3974:155;;:18;:155::i;:::-;3950:212;;;;;;;;;;;;;;;-1:-1:-1;3950:212:1;;-1:-1:-1;4321:17:1;4341:9;4321:29;;4373:13;:11;:13::i;:::-;-1:-1:-1;;;;;4373:39:1;;;;;;;:32;;;;:39;;;;;;;;:48;;;;;;;;;;;;4360:61;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4431:43:1;4360:61;4463:10;4431:19;:43::i;:::-;4510:9;4498;:21;4484:35;;3747:779;;;;;;;:::o;6394:225::-;6602:10;6551:13;:11;:13::i;:::-;-1:-1:-1;;;;;6551:39:1;;;;;;;:32;;;;:39;;;;;;;;:48;;;;;;;;;;;;:61;;;;-1:-1:-1;;6551:61:1;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;6394:225:1:o;8709:932::-;8797:32;;:::i;:::-;8831:19;8854:37;8874:4;8880:10;8854:19;:37::i;:::-;8796:95;;-1:-1:-1;8796:95:1;-1:-1:-1;;;;;;8905:18:1;;8913:10;8905:18;;;;:62;;;-1:-1:-1;;8927:10:1;:25;;;:40;;8905:62;8901:322;;;9011:136;9033:10;:25;;;9076:6;9011:136;;;;;;;;;;;;;;;;;:4;:136::i;:::-;8983:25;;;:164;9161:51;9183:4;9189:10;8983;9161:21;:51::i;:::-;9232:17;9252:9;9232:29;;9339:51;9361:4;9367:10;9379;9339:21;:51::i;:::-;9427:9;9415:21;;9400:36;;;;;-1:-1:-1;;;;;9527:37:1;902:4;9565:36;;9603:9;9527:86;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9511:124;8709:932;;;;;:::o;7646:1057::-;7753:4;7773:30;;:::i;:::-;7813:28;;:::i;:::-;7851:19;7880:20;7938:23;7956:4;7938:17;:23::i;:::-;7911:50;;;;;;;;7986:12;7971:27;;;;8034:116;8052:8;:23;;;8089:6;8034:116;;;;;;;;;;;;;;;;;:4;:116::i;:::-;8008:23;;;:142;8160:35;8180:4;8008:8;8160:19;:35::i;:::-;8231:21;8249:2;8231:17;:21::i;:::-;8206:46;;;;;;;;8277:12;8262:27;;;;8323:113;8341:6;:21;;;8376:6;8323:113;;;;;;;;;;;;;;;;;:4;:113::i;:::-;8299:21;;;:137;8446:31;8466:2;8299:6;8446:19;:31::i;:::-;-1:-1:-1;;;;;8567:37:1;902:4;8605:36;;8643:9;8567:86;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8551:124;-1:-1:-1;8692:4:1;;7646:1057;-1:-1:-1;;;;;;;7646:1057:1:o;4532:687::-;4607:26;;:::i;:::-;4734:110;;;-1:-1:-1;;;;;4734:110:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;4734:110:1;-1:-1:-1;;;4734:110:1;;;4635:19;;;;4715:130;;:18;:130::i;:::-;4691:187;;;;;;;;;;;;;;;-1:-1:-1;4691:187:1;;-1:-1:-1;5037:17:1;5057:9;5037:29;;5083:13;:11;:13::i;:::-;-1:-1:-1;;;;;5083:37:1;;:30;:37;;;;;;;;;;;;5076:44;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5130:37:1;5076:44;5156:10;5130:19;:37::i;:::-;5203:9;5191;:21;5177:35;;4532:687;;;;;:::o;6235:153::-;6377:4;6337:13;:11;:13::i;:::-;-1:-1:-1;;;;;6337:37:1;;;;:30;:37;;;;;;;;;;;;:44;;;;-1:-1:-1;;6337:44:1;;;;;;;;;;;-1:-1:-1;6337:44:1;;;;;;;;;;;;;-1:-1:-1;6235:153:1:o;7288:352::-;7372:23;7411:12;7469:35;:33;:35::i;:::-;-1:-1:-1;;;;;7469:48:1;7518:8;7469:58;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;7469:58:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;7433:94:1;-1:-1:-1;7433:94:1;-1:-1:-1;7433:94:1;7537:97;;7610:10;7604:17;7599:2;7587:10;7583:19;7576:46;7574:50;7288:352;;;;:::o;6625:146::-;566:66;;6746:19::o;5225:1004::-;5353:18;;5348:830;;5408:4;5387:25;;5426:22;;;:35;;;5348:830;;;5622:10;5597:7;:22;;;:35;5593:575;;;5677:186;5703:7;:22;;;5772:10;5747:7;:22;;;:35;5677:186;;;;;;;;;;;;;;;;;:4;:186::i;:::-;5652:22;;;:211;5593:575;;;5913:10;5888:7;:22;;;:35;5884:284;;;5968:185;5994:7;:22;;;6051:7;:22;;;6038:10;:35;5968:185;;;;;;;;;;;;;;;;;:4;:185::i;:::-;5943:22;;;:210;5884:284;6187:22;;;;:35;5225:1004::o;9831:178::-;9964:5;;;9995:6;9987;;;;9979:23;;;;-1:-1:-1;;;9979:23:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9831:178;;;;;:::o;9647:::-;9780:5;;;9811:6;9803;;;;9795:23;;;;-1:-1:-1;;;9795:23:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;:::o"
            }
        }
    },
    "sourceTreeHashHex": "0x3a485ecaaa3317caca756dd2e712e3f4072ca992f42a5a0efb0f147707ff4aab",
    "sources": {
        "./HackedERC20.sol": {
            "id": 1,
            "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.6;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\nimport \"./GasOverhead.sol\";\n\ncontract HackedERC20 {\n\n    using LibERC20TokenV06 for IERC20TokenV06;\n\n    struct ShadowedAmount {\n        bool isShadowed;\n        uint256 lastTrueAmount;\n        uint256 shadowedAmount;\n    }\n\n    struct Storage {\n        mapping(address=>ShadowedAmount) shadowedBalances;\n        mapping(address=>mapping(address=>ShadowedAmount)) shadowedAllowances;\n    }\n\n    bytes32 private constant STORAGE_SLOT = 0x64fd48372774b9637ace5c8c7a951f04ea13c793935207f2eada5382a0ec82cb;\n    address private constant GAS_OVERHEAD = 0xDeF1000000000000000000000000000000001337;\n\n    // HackedERC20 also has the overhead of being Delegated to from the replaced token\n    // USDT->DelegateHackedERC20->HackedERC20\n    uint256 constant DELEGATE_CALL_OVERHEAD = 5000;\n\n    // When enabled the HackedERC20 token will shadow and track balances\n    // when disabled (default) it will call the original implementation\n    bool public _enabled = false;\n\n    receive() external payable {}\n\n    fallback() payable external {\n        bytes memory r = _forwardCallToImpl();\n        assembly { return(add(r, 32), mload(r)) }\n    }\n\n    function balanceOf(address owner)\n        external\n        /* view */\n        returns (uint256 balance)\n    {\n        if (!_enabled) {\n            bytes memory r = _forwardCallToImpl();\n            assembly { return(add(r, 32), mload(r)) }\n        }\n        (ShadowedAmount memory sBal,) = _getSyncedBalance(owner);\n        return sBal.shadowedAmount;\n    }\n\n    function allowance(address owner, address spender)\n        external\n        /* view */\n        returns (uint256 allowance_)\n    {\n        if (!_enabled) {\n            bytes memory r = _forwardCallToImpl();\n            assembly { return(add(r, 32), mload(r)) }\n        }\n        (ShadowedAmount memory sBal,) = _getSyncedAllowance(owner, spender);\n        return sBal.shadowedAmount;\n    }\n\n    function transferFrom(address from, address to, uint256 amount)\n        public\n        returns (bool success)\n    {\n        if (!_enabled) {\n            bytes memory r = _forwardCallToImpl();\n            assembly { return(add(r, 32), mload(r)) }\n        }\n        _updateAllowance(from, amount);\n        success = _transferFromInternal(from, to, amount);\n    }\n\n\n    function transfer(address to, uint256 amount)\n        external\n        returns (bool success)\n    {\n        if (!_enabled) {\n            bytes memory r = _forwardCallToImpl();\n            assembly { return(add(r, 32), mload(r)) }\n        }\n        success = _transferFromInternal(msg.sender, to, amount);\n    }\n\n    function approve(address spender, uint256 amount)\n        external\n        returns (bool)\n    {\n        if (!_enabled) {\n            bytes memory r = _forwardCallToImpl();\n            assembly { return(add(r, 32), mload(r)) }\n        }\n        (\n            ShadowedAmount memory sAllowance,\n            uint256 gasOverhead\n        ) = _getSyncedAllowance(msg.sender, spender);\n\n        sAllowance.shadowedAmount = amount;\n        _writeSyncedAllowance(msg.sender, spender, sAllowance);\n\n        // Update the global gas overhead from a approval sync\n        try\n            GasOverhead(GAS_OVERHEAD).addOverhead(gasOverhead + DELEGATE_CALL_OVERHEAD, gasleft())\n        { } catch { }\n        return true;\n    }\n\n    function _setBalance(address owner, uint256 amount)\n        public\n    {\n        (ShadowedAmount memory sBal,) = _getSyncedBalance(owner);\n        sBal.shadowedAmount = amount;\n        _writeSyncedBalance(owner, sBal);\n    }\n\n    function _setEnabled(bool enabled)\n        public\n    {\n        _enabled = enabled;\n    }\n\n    function _getSyncedAllowance(address owner, address spender)\n        private\n        /* view */\n        returns (ShadowedAmount memory sAllowance, uint256 gasOverhead)\n    {\n        uint256 trueAmount = abi.decode(\n            _forwardCallToImpl(abi.encodeWithSelector(\n                IERC20TokenV06.allowance.selector,\n                owner,\n                spender\n            )),\n            (uint256)\n        );\n        // We only want to measure the cost of the underlying token storage lookup\n        // Not including the excess overhead of our shadow lookup\n        uint256 gasBefore = gasleft();\n        sAllowance = _getStorage().shadowedAllowances[owner][spender];\n        _syncShadowedAmount(sAllowance, trueAmount);\n        gasOverhead = gasBefore - gasleft();\n    }\n\n    function _getSyncedBalance(address owner)\n        private\n        returns (ShadowedAmount memory sBal, uint256 gasOverhead)\n    {\n        uint256 trueAmount = abi.decode(\n            _forwardCallToImpl(abi.encodeWithSelector(\n                IERC20TokenV06.balanceOf.selector,\n                owner\n            )),\n            (uint256)\n        );\n        // We only want to measure the cost of the underlying token storage lookup\n        // Not including the excess overhead of our shadow lookup\n        uint256 gasBefore = gasleft();\n        sBal = _getStorage().shadowedBalances[owner];\n        _syncShadowedAmount(sBal, trueAmount);\n        gasOverhead = gasBefore - gasleft();\n    }\n\n    function _syncShadowedAmount(ShadowedAmount memory sAmount, uint256 trueAmount)\n        private\n        pure\n    {\n        if (!sAmount.isShadowed) {\n            sAmount.isShadowed = true;\n            sAmount.shadowedAmount = trueAmount;\n        } else {\n            // Detect balance changes that can occur from outside of ERC20\n            // functions.\n            if (sAmount.lastTrueAmount > trueAmount) {\n                sAmount.shadowedAmount = _sub(\n                    sAmount.lastTrueAmount,\n                    sAmount.lastTrueAmount - trueAmount,\n                    'HackedERC20/SHADOW_ADJUSTMENT_UNDERFLOW'\n                );\n            } else if (sAmount.lastTrueAmount < trueAmount) {\n                sAmount.shadowedAmount = _add(\n                    sAmount.lastTrueAmount,\n                    trueAmount - sAmount.lastTrueAmount,\n                    'HackedERC20/SHADOW_ADJUSTMENT_OVERFLOW'\n                );\n            }\n        }\n        sAmount.lastTrueAmount = trueAmount;\n    }\n\n    function _writeSyncedBalance(address owner, ShadowedAmount memory sBal)\n        private\n    {\n        _getStorage().shadowedBalances[owner] = sBal;\n    }\n\n    function _writeSyncedAllowance(\n        address owner,\n        address spender,\n        ShadowedAmount memory sAllowance\n    )\n        private\n    {\n        _getStorage().shadowedAllowances[owner][spender] = sAllowance;\n    }\n\n    function _getStorage() private pure returns (Storage storage st) {\n        bytes32 slot = STORAGE_SLOT;\n        assembly { st_slot := slot }\n    }\n\n    function _getOriginalImplementationAddress()\n        private\n        view\n        returns (address impl)\n    {\n        return address(uint160(address(this)) + 1);\n    }\n\n    function _forwardCallToImpl()\n        private\n        returns (bytes memory resultData)\n    {\n        bool success;\n        (success, resultData) =\n            _getOriginalImplementationAddress().delegatecall(msg.data);\n        if (!success) {\n            assembly { revert(add(resultData, 32), mload(resultData)) }\n        }\n    }\n\n    function _forwardCallToImpl(bytes memory callData)\n        private\n        returns (bytes memory resultData)\n    {\n        bool success;\n        (success, resultData) =\n            _getOriginalImplementationAddress().delegatecall(callData);\n        if (!success) {\n            assembly { revert(add(resultData, 32), mload(resultData)) }\n        }\n    }\n\n    function _transferFromInternal(address from, address to, uint256 amount)\n        internal\n        returns (bool)\n    {\n        ShadowedAmount memory sFromBal;\n        ShadowedAmount memory sToBal;\n        uint256 gasOverhead;\n        uint256 _gasOverhead;\n\n        (sFromBal, _gasOverhead) = _getSyncedBalance(from);\n        gasOverhead += _gasOverhead;\n        sFromBal.shadowedAmount = _sub(\n            sFromBal.shadowedAmount,\n            amount,\n            'HackedERC20/BALANCE_UNDERFLOW'\n        );\n        _writeSyncedBalance(from, sFromBal);\n\n        (sToBal, _gasOverhead) = _getSyncedBalance(to);\n        gasOverhead += _gasOverhead;\n        sToBal.shadowedAmount = _add(\n            sToBal.shadowedAmount,\n            amount,\n            'HackedERC20/BALANCE_OVERFLOW'\n        );\n        _writeSyncedBalance(to, sToBal);\n\n        // Update the global gas overhead from a transfer call\n        try\n            GasOverhead(GAS_OVERHEAD).addOverhead(gasOverhead + DELEGATE_CALL_OVERHEAD, gasleft())\n        { } catch { }\n\n        return true;\n    }\n\n    function _updateAllowance(address from, uint256 amount)\n        internal\n    {\n        (ShadowedAmount memory sAllowance, uint256 gasOverhead) = _getSyncedAllowance(from, msg.sender);\n        if (from != msg.sender && sAllowance.shadowedAmount != uint256(-1)) {\n            sAllowance.shadowedAmount = _sub(\n                sAllowance.shadowedAmount,\n                amount,\n                'HackedERC20/ALLOWANCE_UNDERFLOW'\n            );\n            _writeSyncedAllowance(from, msg.sender, sAllowance);\n        }\n        uint256 gasBefore = gasleft();\n        // Assume a NON MAX_UINT results in allowance update SSTORE\n        _writeSyncedAllowance(from, msg.sender, sAllowance);\n        gasOverhead += gasBefore - gasleft();\n        // Update the global gas overhead from a allowance check\n        try\n            GasOverhead(GAS_OVERHEAD).addOverhead(gasOverhead + DELEGATE_CALL_OVERHEAD, gasleft())\n        { } catch { }\n    }\n\n    function _add(uint256 a, uint256 b, string memory errMsg)\n        private\n        pure\n        returns (uint256 c)\n    {\n        c = a + b;\n        require(c >= a, errMsg);\n    }\n\n    function _sub(uint256 a, uint256 b, string memory errMsg)\n        private\n        pure\n        returns (uint256 c)\n    {\n        c = a - b;\n        require(c <= a, errMsg);\n    }\n}\n"
        },
        "@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol": {
            "id": 3,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol\";\nimport \"./IERC20TokenV06.sol\";\n\n\nlibrary LibERC20TokenV06 {\n    bytes constant private DECIMALS_CALL_DATA = hex\"313ce567\";\n\n    /// @dev Calls `IERC20TokenV06(token).approve()`.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param spender The address that receives an allowance.\n    /// @param allowance The allowance to set.\n    function compatApprove(\n        IERC20TokenV06 token,\n        address spender,\n        uint256 allowance\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.approve.selector,\n            spender,\n            allowance\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).approve()` and sets the allowance to the\n    ///      maximum if the current approval is not already >= an amount.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param spender The address that receives an allowance.\n    /// @param amount The minimum allowance needed.\n    function approveIfBelow(\n        IERC20TokenV06 token,\n        address spender,\n        uint256 amount\n    )\n        internal\n    {\n        if (token.allowance(address(this), spender) < amount) {\n            compatApprove(token, spender, uint256(-1));\n        }\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).transfer()`.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param to The address that receives the tokens\n    /// @param amount Number of tokens to transfer.\n    function compatTransfer(\n        IERC20TokenV06 token,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.transfer.selector,\n            to,\n            amount\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).transferFrom()`.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param from The owner of the tokens.\n    /// @param to The address that receives the tokens\n    /// @param amount Number of tokens to transfer.\n    function compatTransferFrom(\n        IERC20TokenV06 token,\n        address from,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.transferFrom.selector,\n            from,\n            to,\n            amount\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Retrieves the number of decimals for a token.\n    ///      Returns `18` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @return tokenDecimals The number of decimals places for the token.\n    function compatDecimals(IERC20TokenV06 token)\n        internal\n        view\n        returns (uint8 tokenDecimals)\n    {\n        tokenDecimals = 18;\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(DECIMALS_CALL_DATA);\n        if (didSucceed && resultData.length >= 32) {\n            tokenDecimals = uint8(LibBytesV06.readUint256(resultData, 0));\n        }\n    }\n\n    /// @dev Retrieves the allowance for a token, owner, and spender.\n    ///      Returns `0` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @param owner The owner of the tokens.\n    /// @param spender The address the spender.\n    /// @return allowance_ The allowance for a token, owner, and spender.\n    function compatAllowance(IERC20TokenV06 token, address owner, address spender)\n        internal\n        view\n        returns (uint256 allowance_)\n    {\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(\n            abi.encodeWithSelector(\n                token.allowance.selector,\n                owner,\n                spender\n            )\n        );\n        if (didSucceed && resultData.length >= 32) {\n            allowance_ = LibBytesV06.readUint256(resultData, 0);\n        }\n    }\n\n    /// @dev Retrieves the balance for a token owner.\n    ///      Returns `0` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @param owner The owner of the tokens.\n    /// @return balance The token balance of an owner.\n    function compatBalanceOf(IERC20TokenV06 token, address owner)\n        internal\n        view\n        returns (uint256 balance)\n    {\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(\n            abi.encodeWithSelector(\n                token.balanceOf.selector,\n                owner\n            )\n        );\n        if (didSucceed && resultData.length >= 32) {\n            balance = LibBytesV06.readUint256(resultData, 0);\n        }\n    }\n\n    /// @dev Check if the data returned by a non-static call to an ERC20 token\n    ///      is a successful result. Supported functions are `transfer()`,\n    ///      `transferFrom()`, and `approve()`.\n    /// @param resultData The raw data returned by a non-static call to the ERC20 token.\n    /// @return isSuccessful Whether the result data indicates success.\n    function isSuccessfulResult(bytes memory resultData)\n        internal\n        pure\n        returns (bool isSuccessful)\n    {\n        if (resultData.length == 0) {\n            return true;\n        }\n        if (resultData.length >= 32) {\n            uint256 result = LibBytesV06.readUint256(resultData, 0);\n            if (result == 1) {\n                return true;\n            }\n        }\n    }\n\n    /// @dev Executes a call on address `target` with calldata `callData`\n    ///      and asserts that either nothing was returned or a single boolean\n    ///      was returned equal to `true`.\n    /// @param target The call target.\n    /// @param callData The abi-encoded call data.\n    function _callWithOptionalBooleanResult(\n        address target,\n        bytes memory callData\n    )\n        private\n    {\n        (bool didSucceed, bytes memory resultData) = target.call(callData);\n        if (didSucceed && isSuccessfulResult(resultData)) {\n            return;\n        }\n        LibRichErrorsV06.rrevert(resultData);\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol": {
            "id": 6,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibRichErrorsV06 {\n\n    // bytes4(keccak256(\"Error(string)\"))\n    bytes4 internal constant STANDARD_ERROR_SELECTOR = 0x08c379a0;\n\n    // solhint-disable func-name-mixedcase\n    /// @dev ABI encode a standard, string revert error payload.\n    ///      This is the same payload that would be included by a `revert(string)`\n    ///      solidity statement. It has the function signature `Error(string)`.\n    /// @param message The error string.\n    /// @return The ABI encoded error.\n    function StandardError(string memory message)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            STANDARD_ERROR_SELECTOR,\n            bytes(message)\n        );\n    }\n    // solhint-enable func-name-mixedcase\n\n    /// @dev Reverts an encoded rich revert reason `errorData`.\n    /// @param errorData ABI encoded error data.\n    function rrevert(bytes memory errorData)\n        internal\n        pure\n    {\n        assembly {\n            revert(add(errorData, 0x20), mload(errorData))\n        }\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol": {
            "id": 4,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./errors/LibBytesRichErrorsV06.sol\";\nimport \"./errors/LibRichErrorsV06.sol\";\n\n\nlibrary LibBytesV06 {\n\n    using LibBytesV06 for bytes;\n\n    /// @dev Gets the memory address for a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of byte array. This\n    ///         points to the header of the byte array which contains\n    ///         the length.\n    function rawAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := input\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Gets the memory address for the contents of a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of the contents of the byte array.\n    function contentAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := add(input, 32)\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Copies `length` bytes from memory location `source` to `dest`.\n    /// @param dest memory address to copy bytes to.\n    /// @param source memory address to copy bytes from.\n    /// @param length number of bytes to copy.\n    function memCopy(\n        uint256 dest,\n        uint256 source,\n        uint256 length\n    )\n        internal\n        pure\n    {\n        if (length < 32) {\n            // Handle a partial word by reading destination and masking\n            // off the bits we are interested in.\n            // This correctly handles overlap, zero lengths and source == dest\n            assembly {\n                let mask := sub(exp(256, sub(32, length)), 1)\n                let s := and(mload(source), not(mask))\n                let d := and(mload(dest), mask)\n                mstore(dest, or(s, d))\n            }\n        } else {\n            // Skip the O(length) loop when source == dest.\n            if (source == dest) {\n                return;\n            }\n\n            // For large copies we copy whole words at a time. The final\n            // word is aligned to the end of the range (instead of after the\n            // previous) to handle partial words. So a copy will look like this:\n            //\n            //  ####\n            //      ####\n            //          ####\n            //            ####\n            //\n            // We handle overlap in the source and destination range by\n            // changing the copying direction. This prevents us from\n            // overwriting parts of source that we still need to copy.\n            //\n            // This correctly handles source == dest\n            //\n            if (source > dest) {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because it\n                    // is easier to compare with in the loop, and these\n                    // are also the addresses we need for copying the\n                    // last bytes.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the last 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the last bytes in\n                    // source already due to overlap.\n                    let last := mload(sEnd)\n\n                    // Copy whole words front to back\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} lt(source, sEnd) {} {\n                        mstore(dest, mload(source))\n                        source := add(source, 32)\n                        dest := add(dest, 32)\n                    }\n\n                    // Write the last 32 bytes\n                    mstore(dEnd, last)\n                }\n            } else {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because those\n                    // are the starting points when copying a word at the end.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the first 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the first bytes in\n                    // source already due to overlap.\n                    let first := mload(source)\n\n                    // Copy whole words back to front\n                    // We use a signed comparisson here to allow dEnd to become\n                    // negative (happens when source and dest < 32). Valid\n                    // addresses in local memory will never be larger than\n                    // 2**255, so they can be safely re-interpreted as signed.\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} slt(dest, dEnd) {} {\n                        mstore(dEnd, mload(sEnd))\n                        sEnd := sub(sEnd, 32)\n                        dEnd := sub(dEnd, 32)\n                    }\n\n                    // Write the first 32 bytes\n                    mstore(dest, first)\n                }\n            }\n        }\n    }\n\n    /// @dev Returns a slices from a byte array.\n    /// @param b The byte array to take a slice from.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function slice(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure and copy contents\n        result = new bytes(to - from);\n        memCopy(\n            result.contentAddress(),\n            b.contentAddress() + from,\n            result.length\n        );\n        return result;\n    }\n\n    /// @dev Returns a slice from a byte array without preserving the input.\n    ///      When `from == 0`, the original array will match the slice.\n    ///      In other cases its state will be corrupted.\n    /// @param b The byte array to take a slice from. Will be destroyed in the process.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function sliceDestructive(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure around [from, to) in-place.\n        assembly {\n            result := add(b, from)\n            mstore(result, sub(to, from))\n        }\n        return result;\n    }\n\n    /// @dev Pops the last byte off of a byte array by modifying its length.\n    /// @param b Byte array that will be modified.\n    /// @return result The byte that was popped off.\n    function popLastByte(bytes memory b)\n        internal\n        pure\n        returns (bytes1 result)\n    {\n        if (b.length == 0) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanZeroRequired,\n                b.length,\n                0\n            ));\n        }\n\n        // Store last byte.\n        result = b[b.length - 1];\n\n        assembly {\n            // Decrement length of byte array.\n            let newLen := sub(mload(b), 1)\n            mstore(b, newLen)\n        }\n        return result;\n    }\n\n    /// @dev Tests equality of two byte arrays.\n    /// @param lhs First byte array to compare.\n    /// @param rhs Second byte array to compare.\n    /// @return equal True if arrays are the same. False otherwise.\n    function equals(\n        bytes memory lhs,\n        bytes memory rhs\n    )\n        internal\n        pure\n        returns (bool equal)\n    {\n        // Keccak gas cost is 30 + numWords * 6. This is a cheap way to compare.\n        // We early exit on unequal lengths, but keccak would also correctly\n        // handle this.\n        return lhs.length == rhs.length && keccak256(lhs) == keccak256(rhs);\n    }\n\n    /// @dev Reads an address from a position in a byte array.\n    /// @param b Byte array containing an address.\n    /// @param index Index in byte array of address.\n    /// @return result address from byte array.\n    function readAddress(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (address result)\n    {\n        if (b.length < index + 20) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Read address from array memory\n        assembly {\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 20-byte mask to obtain address\n            result := and(mload(add(b, index)), 0xffffffffffffffffffffffffffffffffffffffff)\n        }\n        return result;\n    }\n\n    /// @dev Writes an address into a specific position in a byte array.\n    /// @param b Byte array to insert address into.\n    /// @param index Index in byte array of address.\n    /// @param input Address to put into byte array.\n    function writeAddress(\n        bytes memory b,\n        uint256 index,\n        address input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 20) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Store address into array memory\n        assembly {\n            // The address occupies 20 bytes and mstore stores 32 bytes.\n            // First fetch the 32-byte word where we'll be storing the address, then\n            // apply a mask so we have only the bytes in the word that the address will not occupy.\n            // Then combine these bytes with the address and store the 32 bytes back to memory with mstore.\n\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 12-byte mask to obtain extra bytes occupying word of memory where we'll store the address\n            let neighbors := and(\n                mload(add(b, index)),\n                0xffffffffffffffffffffffff0000000000000000000000000000000000000000\n            )\n\n            // Make sure input address is clean.\n            // (Solidity does not guarantee this)\n            input := and(input, 0xffffffffffffffffffffffffffffffffffffffff)\n\n            // Store the neighbors and address into memory\n            mstore(add(b, index), xor(input, neighbors))\n        }\n    }\n\n    /// @dev Reads a bytes32 value from a position in a byte array.\n    /// @param b Byte array containing a bytes32 value.\n    /// @param index Index in byte array of bytes32 value.\n    /// @return result bytes32 value from byte array.\n    function readBytes32(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        if (b.length < index + 32) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            result := mload(add(b, index))\n        }\n        return result;\n    }\n\n    /// @dev Writes a bytes32 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input bytes32 to put into byte array.\n    function writeBytes32(\n        bytes memory b,\n        uint256 index,\n        bytes32 input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 32) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            mstore(add(b, index), input)\n        }\n    }\n\n    /// @dev Reads a uint256 value from a position in a byte array.\n    /// @param b Byte array containing a uint256 value.\n    /// @param index Index in byte array of uint256 value.\n    /// @return result uint256 value from byte array.\n    function readUint256(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (uint256 result)\n    {\n        result = uint256(readBytes32(b, index));\n        return result;\n    }\n\n    /// @dev Writes a uint256 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input uint256 to put into byte array.\n    function writeUint256(\n        bytes memory b,\n        uint256 index,\n        uint256 input\n    )\n        internal\n        pure\n    {\n        writeBytes32(b, index, bytes32(input));\n    }\n\n    /// @dev Reads an unpadded bytes4 value from a position in a byte array.\n    /// @param b Byte array containing a bytes4 value.\n    /// @param index Index in byte array of bytes4 value.\n    /// @return result bytes4 value from byte array.\n    function readBytes4(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes4 result)\n    {\n        if (b.length < index + 4) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsFourRequired,\n                b.length,\n                index + 4\n            ));\n        }\n\n        // Arrays are prefixed by a 32 byte length field\n        index += 32;\n\n        // Read the bytes4 from array memory\n        assembly {\n            result := mload(add(b, index))\n            // Solidity does not require us to clean the trailing bytes.\n            // We do it anyway\n            result := and(result, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)\n        }\n        return result;\n    }\n\n    /// @dev Writes a new length to a byte array.\n    ///      Decreasing length will lead to removing the corresponding lower order bytes from the byte array.\n    ///      Increasing length may lead to appending adjacent in-memory bytes to the end of the byte array.\n    /// @param b Bytes array to write new length to.\n    /// @param length New length of byte array.\n    function writeLength(bytes memory b, uint256 length)\n        internal\n        pure\n    {\n        assembly {\n            mstore(b, length)\n        }\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/errors/LibBytesRichErrorsV06.sol": {
            "id": 5,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibBytesRichErrorsV06 {\n\n    enum InvalidByteOperationErrorCodes {\n        FromLessThanOrEqualsToRequired,\n        ToLessThanOrEqualsLengthRequired,\n        LengthGreaterThanZeroRequired,\n        LengthGreaterThanOrEqualsFourRequired,\n        LengthGreaterThanOrEqualsTwentyRequired,\n        LengthGreaterThanOrEqualsThirtyTwoRequired,\n        LengthGreaterThanOrEqualsNestedBytesLengthRequired,\n        DestinationLengthGreaterThanOrEqualSourceLengthRequired\n    }\n\n    // bytes4(keccak256(\"InvalidByteOperationError(uint8,uint256,uint256)\"))\n    bytes4 internal constant INVALID_BYTE_OPERATION_ERROR_SELECTOR =\n        0x28006595;\n\n    // solhint-disable func-name-mixedcase\n    function InvalidByteOperationError(\n        InvalidByteOperationErrorCodes errorCode,\n        uint256 offset,\n        uint256 required\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            INVALID_BYTE_OPERATION_ERROR_SELECTOR,\n            errorCode,\n            offset,\n            required\n        );\n    }\n}\n"
        },
        "@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol": {
            "id": 2,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\ninterface IERC20TokenV06 {\n\n    // solhint-disable no-simple-event-func-name\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 value\n    );\n\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n\n    /// @dev send `value` token to `to` from `msg.sender`\n    /// @param to The address of the recipient\n    /// @param value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transfer(address to, uint256 value)\n        external\n        returns (bool);\n\n    /// @dev send `value` token to `to` from `from` on the condition it is approved by `from`\n    /// @param from The address of the sender\n    /// @param to The address of the recipient\n    /// @param value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    )\n        external\n        returns (bool);\n\n    /// @dev `msg.sender` approves `spender` to spend `value` tokens\n    /// @param spender The address of the account able to transfer the tokens\n    /// @param value The amount of wei to be approved for transfer\n    /// @return Always true if the call has enough gas to complete execution\n    function approve(address spender, uint256 value)\n        external\n        returns (bool);\n\n    /// @dev Query total supply of token\n    /// @return Total supply of token\n    function totalSupply()\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the balance of `owner`.\n    /// @param owner The address from which the balance will be retrieved\n    /// @return Balance of owner\n    function balanceOf(address owner)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the allowance for `spender` to spend from `owner`.\n    /// @param owner The address of the account owning tokens\n    /// @param spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the number of decimals this token has.\n    function decimals()\n        external\n        view\n        returns (uint8);\n}\n"
        },
        "./GasOverhead.sol": {
            "id": 0,
            "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.6;\n\ncontract GasOverhead {\n    uint256 public _overhead = 2;\n    // Overhead incurred from updating the overhead storage slot\n    uint256 constant SSTORE_OVERHEAD = 20000;\n\n    function addOverhead(uint256 gas, uint256 gasBefore)\n        external\n    {\n        uint256 callOverhead = gasBefore - gasleft();\n        // Add additional est overhead of performing this update\n        _overhead += gas + callOverhead + SSTORE_OVERHEAD;\n    }\n\n    function clearOverhead()\n        external\n    {\n        _overhead = 2;\n    }\n\n    function overhead()\n        external\n        view\n        returns (uint256)\n    {\n        return _overhead;\n    }\n}\n"
        }
    },
    "sourceCodes": {
        "./HackedERC20.sol": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.6;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\nimport \"./GasOverhead.sol\";\n\ncontract HackedERC20 {\n\n    using LibERC20TokenV06 for IERC20TokenV06;\n\n    struct ShadowedAmount {\n        bool isShadowed;\n        uint256 lastTrueAmount;\n        uint256 shadowedAmount;\n    }\n\n    struct Storage {\n        mapping(address=>ShadowedAmount) shadowedBalances;\n        mapping(address=>mapping(address=>ShadowedAmount)) shadowedAllowances;\n    }\n\n    bytes32 private constant STORAGE_SLOT = 0x64fd48372774b9637ace5c8c7a951f04ea13c793935207f2eada5382a0ec82cb;\n    address private constant GAS_OVERHEAD = 0xDeF1000000000000000000000000000000001337;\n\n    // HackedERC20 also has the overhead of being Delegated to from the replaced token\n    // USDT->DelegateHackedERC20->HackedERC20\n    uint256 constant DELEGATE_CALL_OVERHEAD = 5000;\n\n    // When enabled the HackedERC20 token will shadow and track balances\n    // when disabled (default) it will call the original implementation\n    bool public _enabled = false;\n\n    receive() external payable {}\n\n    fallback() payable external {\n        bytes memory r = _forwardCallToImpl();\n        assembly { return(add(r, 32), mload(r)) }\n    }\n\n    function balanceOf(address owner)\n        external\n        /* view */\n        returns (uint256 balance)\n    {\n        if (!_enabled) {\n            bytes memory r = _forwardCallToImpl();\n            assembly { return(add(r, 32), mload(r)) }\n        }\n        (ShadowedAmount memory sBal,) = _getSyncedBalance(owner);\n        return sBal.shadowedAmount;\n    }\n\n    function allowance(address owner, address spender)\n        external\n        /* view */\n        returns (uint256 allowance_)\n    {\n        if (!_enabled) {\n            bytes memory r = _forwardCallToImpl();\n            assembly { return(add(r, 32), mload(r)) }\n        }\n        (ShadowedAmount memory sBal,) = _getSyncedAllowance(owner, spender);\n        return sBal.shadowedAmount;\n    }\n\n    function transferFrom(address from, address to, uint256 amount)\n        public\n        returns (bool success)\n    {\n        if (!_enabled) {\n            bytes memory r = _forwardCallToImpl();\n            assembly { return(add(r, 32), mload(r)) }\n        }\n        _updateAllowance(from, amount);\n        success = _transferFromInternal(from, to, amount);\n    }\n\n\n    function transfer(address to, uint256 amount)\n        external\n        returns (bool success)\n    {\n        if (!_enabled) {\n            bytes memory r = _forwardCallToImpl();\n            assembly { return(add(r, 32), mload(r)) }\n        }\n        success = _transferFromInternal(msg.sender, to, amount);\n    }\n\n    function approve(address spender, uint256 amount)\n        external\n        returns (bool)\n    {\n        if (!_enabled) {\n            bytes memory r = _forwardCallToImpl();\n            assembly { return(add(r, 32), mload(r)) }\n        }\n        (\n            ShadowedAmount memory sAllowance,\n            uint256 gasOverhead\n        ) = _getSyncedAllowance(msg.sender, spender);\n\n        sAllowance.shadowedAmount = amount;\n        _writeSyncedAllowance(msg.sender, spender, sAllowance);\n\n        // Update the global gas overhead from a approval sync\n        try\n            GasOverhead(GAS_OVERHEAD).addOverhead(gasOverhead + DELEGATE_CALL_OVERHEAD, gasleft())\n        { } catch { }\n        return true;\n    }\n\n    function _setBalance(address owner, uint256 amount)\n        public\n    {\n        (ShadowedAmount memory sBal,) = _getSyncedBalance(owner);\n        sBal.shadowedAmount = amount;\n        _writeSyncedBalance(owner, sBal);\n    }\n\n    function _setEnabled(bool enabled)\n        public\n    {\n        _enabled = enabled;\n    }\n\n    function _getSyncedAllowance(address owner, address spender)\n        private\n        /* view */\n        returns (ShadowedAmount memory sAllowance, uint256 gasOverhead)\n    {\n        uint256 trueAmount = abi.decode(\n            _forwardCallToImpl(abi.encodeWithSelector(\n                IERC20TokenV06.allowance.selector,\n                owner,\n                spender\n            )),\n            (uint256)\n        );\n        // We only want to measure the cost of the underlying token storage lookup\n        // Not including the excess overhead of our shadow lookup\n        uint256 gasBefore = gasleft();\n        sAllowance = _getStorage().shadowedAllowances[owner][spender];\n        _syncShadowedAmount(sAllowance, trueAmount);\n        gasOverhead = gasBefore - gasleft();\n    }\n\n    function _getSyncedBalance(address owner)\n        private\n        returns (ShadowedAmount memory sBal, uint256 gasOverhead)\n    {\n        uint256 trueAmount = abi.decode(\n            _forwardCallToImpl(abi.encodeWithSelector(\n                IERC20TokenV06.balanceOf.selector,\n                owner\n            )),\n            (uint256)\n        );\n        // We only want to measure the cost of the underlying token storage lookup\n        // Not including the excess overhead of our shadow lookup\n        uint256 gasBefore = gasleft();\n        sBal = _getStorage().shadowedBalances[owner];\n        _syncShadowedAmount(sBal, trueAmount);\n        gasOverhead = gasBefore - gasleft();\n    }\n\n    function _syncShadowedAmount(ShadowedAmount memory sAmount, uint256 trueAmount)\n        private\n        pure\n    {\n        if (!sAmount.isShadowed) {\n            sAmount.isShadowed = true;\n            sAmount.shadowedAmount = trueAmount;\n        } else {\n            // Detect balance changes that can occur from outside of ERC20\n            // functions.\n            if (sAmount.lastTrueAmount > trueAmount) {\n                sAmount.shadowedAmount = _sub(\n                    sAmount.lastTrueAmount,\n                    sAmount.lastTrueAmount - trueAmount,\n                    'HackedERC20/SHADOW_ADJUSTMENT_UNDERFLOW'\n                );\n            } else if (sAmount.lastTrueAmount < trueAmount) {\n                sAmount.shadowedAmount = _add(\n                    sAmount.lastTrueAmount,\n                    trueAmount - sAmount.lastTrueAmount,\n                    'HackedERC20/SHADOW_ADJUSTMENT_OVERFLOW'\n                );\n            }\n        }\n        sAmount.lastTrueAmount = trueAmount;\n    }\n\n    function _writeSyncedBalance(address owner, ShadowedAmount memory sBal)\n        private\n    {\n        _getStorage().shadowedBalances[owner] = sBal;\n    }\n\n    function _writeSyncedAllowance(\n        address owner,\n        address spender,\n        ShadowedAmount memory sAllowance\n    )\n        private\n    {\n        _getStorage().shadowedAllowances[owner][spender] = sAllowance;\n    }\n\n    function _getStorage() private pure returns (Storage storage st) {\n        bytes32 slot = STORAGE_SLOT;\n        assembly { st_slot := slot }\n    }\n\n    function _getOriginalImplementationAddress()\n        private\n        view\n        returns (address impl)\n    {\n        return address(uint160(address(this)) + 1);\n    }\n\n    function _forwardCallToImpl()\n        private\n        returns (bytes memory resultData)\n    {\n        bool success;\n        (success, resultData) =\n            _getOriginalImplementationAddress().delegatecall(msg.data);\n        if (!success) {\n            assembly { revert(add(resultData, 32), mload(resultData)) }\n        }\n    }\n\n    function _forwardCallToImpl(bytes memory callData)\n        private\n        returns (bytes memory resultData)\n    {\n        bool success;\n        (success, resultData) =\n            _getOriginalImplementationAddress().delegatecall(callData);\n        if (!success) {\n            assembly { revert(add(resultData, 32), mload(resultData)) }\n        }\n    }\n\n    function _transferFromInternal(address from, address to, uint256 amount)\n        internal\n        returns (bool)\n    {\n        ShadowedAmount memory sFromBal;\n        ShadowedAmount memory sToBal;\n        uint256 gasOverhead;\n        uint256 _gasOverhead;\n\n        (sFromBal, _gasOverhead) = _getSyncedBalance(from);\n        gasOverhead += _gasOverhead;\n        sFromBal.shadowedAmount = _sub(\n            sFromBal.shadowedAmount,\n            amount,\n            'HackedERC20/BALANCE_UNDERFLOW'\n        );\n        _writeSyncedBalance(from, sFromBal);\n\n        (sToBal, _gasOverhead) = _getSyncedBalance(to);\n        gasOverhead += _gasOverhead;\n        sToBal.shadowedAmount = _add(\n            sToBal.shadowedAmount,\n            amount,\n            'HackedERC20/BALANCE_OVERFLOW'\n        );\n        _writeSyncedBalance(to, sToBal);\n\n        // Update the global gas overhead from a transfer call\n        try\n            GasOverhead(GAS_OVERHEAD).addOverhead(gasOverhead + DELEGATE_CALL_OVERHEAD, gasleft())\n        { } catch { }\n\n        return true;\n    }\n\n    function _updateAllowance(address from, uint256 amount)\n        internal\n    {\n        (ShadowedAmount memory sAllowance, uint256 gasOverhead) = _getSyncedAllowance(from, msg.sender);\n        if (from != msg.sender && sAllowance.shadowedAmount != uint256(-1)) {\n            sAllowance.shadowedAmount = _sub(\n                sAllowance.shadowedAmount,\n                amount,\n                'HackedERC20/ALLOWANCE_UNDERFLOW'\n            );\n            _writeSyncedAllowance(from, msg.sender, sAllowance);\n        }\n        uint256 gasBefore = gasleft();\n        // Assume a NON MAX_UINT results in allowance update SSTORE\n        _writeSyncedAllowance(from, msg.sender, sAllowance);\n        gasOverhead += gasBefore - gasleft();\n        // Update the global gas overhead from a allowance check\n        try\n            GasOverhead(GAS_OVERHEAD).addOverhead(gasOverhead + DELEGATE_CALL_OVERHEAD, gasleft())\n        { } catch { }\n    }\n\n    function _add(uint256 a, uint256 b, string memory errMsg)\n        private\n        pure\n        returns (uint256 c)\n    {\n        c = a + b;\n        require(c >= a, errMsg);\n    }\n\n    function _sub(uint256 a, uint256 b, string memory errMsg)\n        private\n        pure\n        returns (uint256 c)\n    {\n        c = a - b;\n        require(c <= a, errMsg);\n    }\n}\n",
        "@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol\";\nimport \"./IERC20TokenV06.sol\";\n\n\nlibrary LibERC20TokenV06 {\n    bytes constant private DECIMALS_CALL_DATA = hex\"313ce567\";\n\n    /// @dev Calls `IERC20TokenV06(token).approve()`.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param spender The address that receives an allowance.\n    /// @param allowance The allowance to set.\n    function compatApprove(\n        IERC20TokenV06 token,\n        address spender,\n        uint256 allowance\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.approve.selector,\n            spender,\n            allowance\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).approve()` and sets the allowance to the\n    ///      maximum if the current approval is not already >= an amount.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param spender The address that receives an allowance.\n    /// @param amount The minimum allowance needed.\n    function approveIfBelow(\n        IERC20TokenV06 token,\n        address spender,\n        uint256 amount\n    )\n        internal\n    {\n        if (token.allowance(address(this), spender) < amount) {\n            compatApprove(token, spender, uint256(-1));\n        }\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).transfer()`.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param to The address that receives the tokens\n    /// @param amount Number of tokens to transfer.\n    function compatTransfer(\n        IERC20TokenV06 token,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.transfer.selector,\n            to,\n            amount\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).transferFrom()`.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param from The owner of the tokens.\n    /// @param to The address that receives the tokens\n    /// @param amount Number of tokens to transfer.\n    function compatTransferFrom(\n        IERC20TokenV06 token,\n        address from,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.transferFrom.selector,\n            from,\n            to,\n            amount\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Retrieves the number of decimals for a token.\n    ///      Returns `18` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @return tokenDecimals The number of decimals places for the token.\n    function compatDecimals(IERC20TokenV06 token)\n        internal\n        view\n        returns (uint8 tokenDecimals)\n    {\n        tokenDecimals = 18;\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(DECIMALS_CALL_DATA);\n        if (didSucceed && resultData.length >= 32) {\n            tokenDecimals = uint8(LibBytesV06.readUint256(resultData, 0));\n        }\n    }\n\n    /// @dev Retrieves the allowance for a token, owner, and spender.\n    ///      Returns `0` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @param owner The owner of the tokens.\n    /// @param spender The address the spender.\n    /// @return allowance_ The allowance for a token, owner, and spender.\n    function compatAllowance(IERC20TokenV06 token, address owner, address spender)\n        internal\n        view\n        returns (uint256 allowance_)\n    {\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(\n            abi.encodeWithSelector(\n                token.allowance.selector,\n                owner,\n                spender\n            )\n        );\n        if (didSucceed && resultData.length >= 32) {\n            allowance_ = LibBytesV06.readUint256(resultData, 0);\n        }\n    }\n\n    /// @dev Retrieves the balance for a token owner.\n    ///      Returns `0` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @param owner The owner of the tokens.\n    /// @return balance The token balance of an owner.\n    function compatBalanceOf(IERC20TokenV06 token, address owner)\n        internal\n        view\n        returns (uint256 balance)\n    {\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(\n            abi.encodeWithSelector(\n                token.balanceOf.selector,\n                owner\n            )\n        );\n        if (didSucceed && resultData.length >= 32) {\n            balance = LibBytesV06.readUint256(resultData, 0);\n        }\n    }\n\n    /// @dev Check if the data returned by a non-static call to an ERC20 token\n    ///      is a successful result. Supported functions are `transfer()`,\n    ///      `transferFrom()`, and `approve()`.\n    /// @param resultData The raw data returned by a non-static call to the ERC20 token.\n    /// @return isSuccessful Whether the result data indicates success.\n    function isSuccessfulResult(bytes memory resultData)\n        internal\n        pure\n        returns (bool isSuccessful)\n    {\n        if (resultData.length == 0) {\n            return true;\n        }\n        if (resultData.length >= 32) {\n            uint256 result = LibBytesV06.readUint256(resultData, 0);\n            if (result == 1) {\n                return true;\n            }\n        }\n    }\n\n    /// @dev Executes a call on address `target` with calldata `callData`\n    ///      and asserts that either nothing was returned or a single boolean\n    ///      was returned equal to `true`.\n    /// @param target The call target.\n    /// @param callData The abi-encoded call data.\n    function _callWithOptionalBooleanResult(\n        address target,\n        bytes memory callData\n    )\n        private\n    {\n        (bool didSucceed, bytes memory resultData) = target.call(callData);\n        if (didSucceed && isSuccessfulResult(resultData)) {\n            return;\n        }\n        LibRichErrorsV06.rrevert(resultData);\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibRichErrorsV06 {\n\n    // bytes4(keccak256(\"Error(string)\"))\n    bytes4 internal constant STANDARD_ERROR_SELECTOR = 0x08c379a0;\n\n    // solhint-disable func-name-mixedcase\n    /// @dev ABI encode a standard, string revert error payload.\n    ///      This is the same payload that would be included by a `revert(string)`\n    ///      solidity statement. It has the function signature `Error(string)`.\n    /// @param message The error string.\n    /// @return The ABI encoded error.\n    function StandardError(string memory message)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            STANDARD_ERROR_SELECTOR,\n            bytes(message)\n        );\n    }\n    // solhint-enable func-name-mixedcase\n\n    /// @dev Reverts an encoded rich revert reason `errorData`.\n    /// @param errorData ABI encoded error data.\n    function rrevert(bytes memory errorData)\n        internal\n        pure\n    {\n        assembly {\n            revert(add(errorData, 0x20), mload(errorData))\n        }\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./errors/LibBytesRichErrorsV06.sol\";\nimport \"./errors/LibRichErrorsV06.sol\";\n\n\nlibrary LibBytesV06 {\n\n    using LibBytesV06 for bytes;\n\n    /// @dev Gets the memory address for a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of byte array. This\n    ///         points to the header of the byte array which contains\n    ///         the length.\n    function rawAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := input\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Gets the memory address for the contents of a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of the contents of the byte array.\n    function contentAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := add(input, 32)\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Copies `length` bytes from memory location `source` to `dest`.\n    /// @param dest memory address to copy bytes to.\n    /// @param source memory address to copy bytes from.\n    /// @param length number of bytes to copy.\n    function memCopy(\n        uint256 dest,\n        uint256 source,\n        uint256 length\n    )\n        internal\n        pure\n    {\n        if (length < 32) {\n            // Handle a partial word by reading destination and masking\n            // off the bits we are interested in.\n            // This correctly handles overlap, zero lengths and source == dest\n            assembly {\n                let mask := sub(exp(256, sub(32, length)), 1)\n                let s := and(mload(source), not(mask))\n                let d := and(mload(dest), mask)\n                mstore(dest, or(s, d))\n            }\n        } else {\n            // Skip the O(length) loop when source == dest.\n            if (source == dest) {\n                return;\n            }\n\n            // For large copies we copy whole words at a time. The final\n            // word is aligned to the end of the range (instead of after the\n            // previous) to handle partial words. So a copy will look like this:\n            //\n            //  ####\n            //      ####\n            //          ####\n            //            ####\n            //\n            // We handle overlap in the source and destination range by\n            // changing the copying direction. This prevents us from\n            // overwriting parts of source that we still need to copy.\n            //\n            // This correctly handles source == dest\n            //\n            if (source > dest) {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because it\n                    // is easier to compare with in the loop, and these\n                    // are also the addresses we need for copying the\n                    // last bytes.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the last 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the last bytes in\n                    // source already due to overlap.\n                    let last := mload(sEnd)\n\n                    // Copy whole words front to back\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} lt(source, sEnd) {} {\n                        mstore(dest, mload(source))\n                        source := add(source, 32)\n                        dest := add(dest, 32)\n                    }\n\n                    // Write the last 32 bytes\n                    mstore(dEnd, last)\n                }\n            } else {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because those\n                    // are the starting points when copying a word at the end.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the first 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the first bytes in\n                    // source already due to overlap.\n                    let first := mload(source)\n\n                    // Copy whole words back to front\n                    // We use a signed comparisson here to allow dEnd to become\n                    // negative (happens when source and dest < 32). Valid\n                    // addresses in local memory will never be larger than\n                    // 2**255, so they can be safely re-interpreted as signed.\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} slt(dest, dEnd) {} {\n                        mstore(dEnd, mload(sEnd))\n                        sEnd := sub(sEnd, 32)\n                        dEnd := sub(dEnd, 32)\n                    }\n\n                    // Write the first 32 bytes\n                    mstore(dest, first)\n                }\n            }\n        }\n    }\n\n    /// @dev Returns a slices from a byte array.\n    /// @param b The byte array to take a slice from.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function slice(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure and copy contents\n        result = new bytes(to - from);\n        memCopy(\n            result.contentAddress(),\n            b.contentAddress() + from,\n            result.length\n        );\n        return result;\n    }\n\n    /// @dev Returns a slice from a byte array without preserving the input.\n    ///      When `from == 0`, the original array will match the slice.\n    ///      In other cases its state will be corrupted.\n    /// @param b The byte array to take a slice from. Will be destroyed in the process.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function sliceDestructive(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure around [from, to) in-place.\n        assembly {\n            result := add(b, from)\n            mstore(result, sub(to, from))\n        }\n        return result;\n    }\n\n    /// @dev Pops the last byte off of a byte array by modifying its length.\n    /// @param b Byte array that will be modified.\n    /// @return result The byte that was popped off.\n    function popLastByte(bytes memory b)\n        internal\n        pure\n        returns (bytes1 result)\n    {\n        if (b.length == 0) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanZeroRequired,\n                b.length,\n                0\n            ));\n        }\n\n        // Store last byte.\n        result = b[b.length - 1];\n\n        assembly {\n            // Decrement length of byte array.\n            let newLen := sub(mload(b), 1)\n            mstore(b, newLen)\n        }\n        return result;\n    }\n\n    /// @dev Tests equality of two byte arrays.\n    /// @param lhs First byte array to compare.\n    /// @param rhs Second byte array to compare.\n    /// @return equal True if arrays are the same. False otherwise.\n    function equals(\n        bytes memory lhs,\n        bytes memory rhs\n    )\n        internal\n        pure\n        returns (bool equal)\n    {\n        // Keccak gas cost is 30 + numWords * 6. This is a cheap way to compare.\n        // We early exit on unequal lengths, but keccak would also correctly\n        // handle this.\n        return lhs.length == rhs.length && keccak256(lhs) == keccak256(rhs);\n    }\n\n    /// @dev Reads an address from a position in a byte array.\n    /// @param b Byte array containing an address.\n    /// @param index Index in byte array of address.\n    /// @return result address from byte array.\n    function readAddress(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (address result)\n    {\n        if (b.length < index + 20) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Read address from array memory\n        assembly {\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 20-byte mask to obtain address\n            result := and(mload(add(b, index)), 0xffffffffffffffffffffffffffffffffffffffff)\n        }\n        return result;\n    }\n\n    /// @dev Writes an address into a specific position in a byte array.\n    /// @param b Byte array to insert address into.\n    /// @param index Index in byte array of address.\n    /// @param input Address to put into byte array.\n    function writeAddress(\n        bytes memory b,\n        uint256 index,\n        address input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 20) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Store address into array memory\n        assembly {\n            // The address occupies 20 bytes and mstore stores 32 bytes.\n            // First fetch the 32-byte word where we'll be storing the address, then\n            // apply a mask so we have only the bytes in the word that the address will not occupy.\n            // Then combine these bytes with the address and store the 32 bytes back to memory with mstore.\n\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 12-byte mask to obtain extra bytes occupying word of memory where we'll store the address\n            let neighbors := and(\n                mload(add(b, index)),\n                0xffffffffffffffffffffffff0000000000000000000000000000000000000000\n            )\n\n            // Make sure input address is clean.\n            // (Solidity does not guarantee this)\n            input := and(input, 0xffffffffffffffffffffffffffffffffffffffff)\n\n            // Store the neighbors and address into memory\n            mstore(add(b, index), xor(input, neighbors))\n        }\n    }\n\n    /// @dev Reads a bytes32 value from a position in a byte array.\n    /// @param b Byte array containing a bytes32 value.\n    /// @param index Index in byte array of bytes32 value.\n    /// @return result bytes32 value from byte array.\n    function readBytes32(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        if (b.length < index + 32) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            result := mload(add(b, index))\n        }\n        return result;\n    }\n\n    /// @dev Writes a bytes32 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input bytes32 to put into byte array.\n    function writeBytes32(\n        bytes memory b,\n        uint256 index,\n        bytes32 input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 32) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            mstore(add(b, index), input)\n        }\n    }\n\n    /// @dev Reads a uint256 value from a position in a byte array.\n    /// @param b Byte array containing a uint256 value.\n    /// @param index Index in byte array of uint256 value.\n    /// @return result uint256 value from byte array.\n    function readUint256(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (uint256 result)\n    {\n        result = uint256(readBytes32(b, index));\n        return result;\n    }\n\n    /// @dev Writes a uint256 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input uint256 to put into byte array.\n    function writeUint256(\n        bytes memory b,\n        uint256 index,\n        uint256 input\n    )\n        internal\n        pure\n    {\n        writeBytes32(b, index, bytes32(input));\n    }\n\n    /// @dev Reads an unpadded bytes4 value from a position in a byte array.\n    /// @param b Byte array containing a bytes4 value.\n    /// @param index Index in byte array of bytes4 value.\n    /// @return result bytes4 value from byte array.\n    function readBytes4(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes4 result)\n    {\n        if (b.length < index + 4) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsFourRequired,\n                b.length,\n                index + 4\n            ));\n        }\n\n        // Arrays are prefixed by a 32 byte length field\n        index += 32;\n\n        // Read the bytes4 from array memory\n        assembly {\n            result := mload(add(b, index))\n            // Solidity does not require us to clean the trailing bytes.\n            // We do it anyway\n            result := and(result, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)\n        }\n        return result;\n    }\n\n    /// @dev Writes a new length to a byte array.\n    ///      Decreasing length will lead to removing the corresponding lower order bytes from the byte array.\n    ///      Increasing length may lead to appending adjacent in-memory bytes to the end of the byte array.\n    /// @param b Bytes array to write new length to.\n    /// @param length New length of byte array.\n    function writeLength(bytes memory b, uint256 length)\n        internal\n        pure\n    {\n        assembly {\n            mstore(b, length)\n        }\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/errors/LibBytesRichErrorsV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibBytesRichErrorsV06 {\n\n    enum InvalidByteOperationErrorCodes {\n        FromLessThanOrEqualsToRequired,\n        ToLessThanOrEqualsLengthRequired,\n        LengthGreaterThanZeroRequired,\n        LengthGreaterThanOrEqualsFourRequired,\n        LengthGreaterThanOrEqualsTwentyRequired,\n        LengthGreaterThanOrEqualsThirtyTwoRequired,\n        LengthGreaterThanOrEqualsNestedBytesLengthRequired,\n        DestinationLengthGreaterThanOrEqualSourceLengthRequired\n    }\n\n    // bytes4(keccak256(\"InvalidByteOperationError(uint8,uint256,uint256)\"))\n    bytes4 internal constant INVALID_BYTE_OPERATION_ERROR_SELECTOR =\n        0x28006595;\n\n    // solhint-disable func-name-mixedcase\n    function InvalidByteOperationError(\n        InvalidByteOperationErrorCodes errorCode,\n        uint256 offset,\n        uint256 required\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            INVALID_BYTE_OPERATION_ERROR_SELECTOR,\n            errorCode,\n            offset,\n            required\n        );\n    }\n}\n",
        "@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\ninterface IERC20TokenV06 {\n\n    // solhint-disable no-simple-event-func-name\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 value\n    );\n\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n\n    /// @dev send `value` token to `to` from `msg.sender`\n    /// @param to The address of the recipient\n    /// @param value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transfer(address to, uint256 value)\n        external\n        returns (bool);\n\n    /// @dev send `value` token to `to` from `from` on the condition it is approved by `from`\n    /// @param from The address of the sender\n    /// @param to The address of the recipient\n    /// @param value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    )\n        external\n        returns (bool);\n\n    /// @dev `msg.sender` approves `spender` to spend `value` tokens\n    /// @param spender The address of the account able to transfer the tokens\n    /// @param value The amount of wei to be approved for transfer\n    /// @return Always true if the call has enough gas to complete execution\n    function approve(address spender, uint256 value)\n        external\n        returns (bool);\n\n    /// @dev Query total supply of token\n    /// @return Total supply of token\n    function totalSupply()\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the balance of `owner`.\n    /// @param owner The address from which the balance will be retrieved\n    /// @return Balance of owner\n    function balanceOf(address owner)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the allowance for `spender` to spend from `owner`.\n    /// @param owner The address of the account owning tokens\n    /// @param spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the number of decimals this token has.\n    function decimals()\n        external\n        view\n        returns (uint8);\n}\n",
        "./GasOverhead.sol": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.6;\n\ncontract GasOverhead {\n    uint256 public _overhead = 2;\n    // Overhead incurred from updating the overhead storage slot\n    uint256 constant SSTORE_OVERHEAD = 20000;\n\n    function addOverhead(uint256 gas, uint256 gasBefore)\n        external\n    {\n        uint256 callOverhead = gasBefore - gasleft();\n        // Add additional est overhead of performing this update\n        _overhead += gas + callOverhead + SSTORE_OVERHEAD;\n    }\n\n    function clearOverhead()\n        external\n    {\n        _overhead = 2;\n    }\n\n    function overhead()\n        external\n        view\n        returns (uint256)\n    {\n        return _overhead;\n    }\n}\n"
    },
    "compiler": {
        "name": "solc",
        "version": "0.6.12+commit.27d51765",
        "settings": {
            "remappings": [
                "@0x/contracts-erc20=/Users/jacob/projects/ethdev/0x/workspace-remote/workspace/0x-monorepo/packages/asset-swapper/node_modules/@0x/contracts-erc20",
                "@0x/contracts-utils=/Users/jacob/projects/ethdev/0x/workspace-remote/workspace/0x-monorepo/packages/asset-swapper/node_modules/@0x/contracts-utils"
            ],
            "optimizer": {
                "enabled": true,
                "runs": 200,
                "details": {
                    "yul": true,
                    "deduplicate": true
                }
            },
            "outputSelection": {
                "*": {
                    "*": [
                        "abi",
                        "devdoc",
                        "evm.bytecode.object",
                        "evm.bytecode.sourceMap",
                        "evm.deployedBytecode.object",
                        "evm.deployedBytecode.sourceMap"
                    ]
                }
            },
            "evmVersion": "istanbul"
        }
    },
    "chains": {}
}
