{
    "schemaVersion": "2.0.0",
    "contractName": "BancorSampler",
    "compilerOutput": {
        "abi": [
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "contract IBancorRegistry",
                                "name": "registry",
                                "type": "address"
                            },
                            {
                                "internalType": "address[][]",
                                "name": "paths",
                                "type": "address[][]"
                            }
                        ],
                        "internalType": "struct BancorSampler.BancorSamplerOpts",
                        "name": "opts",
                        "type": "tuple"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromBancor",
                "outputs": [
                    {
                        "internalType": "address",
                        "name": "bancorNetwork",
                        "type": "address"
                    },
                    {
                        "internalType": "address[]",
                        "name": "path",
                        "type": "address[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "contract IBancorRegistry",
                                "name": "registry",
                                "type": "address"
                            },
                            {
                                "internalType": "address[][]",
                                "name": "paths",
                                "type": "address[][]"
                            }
                        ],
                        "internalType": "struct BancorSampler.BancorSamplerOpts",
                        "name": "opts",
                        "type": "tuple"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromBancor",
                "outputs": [
                    {
                        "internalType": "address",
                        "name": "bancorNetwork",
                        "type": "address"
                    },
                    {
                        "internalType": "address[]",
                        "name": "path",
                        "type": "address[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            }
        ],
        "devdoc": {
            "kind": "dev",
            "methods": {
                "sampleBuysFromBancor((address,address[][]),address,address,uint256[])": {
                    "details": "Sample buy quotes from Bancor. Unimplemented",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "makerTokenAmounts": "Maker token buy amount for each sample.",
                        "opts": "BancorSamplerOpts The Bancor registry contract address and paths",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "bancorNetwork": "the Bancor Network address",
                        "path": "the selected conversion path from bancor",
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleSellsFromBancor((address,address[][]),address,address,uint256[])": {
                    "details": "Sample sell quotes from Bancor.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "opts": "BancorSamplerOpts The Bancor registry contract address and paths",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "bancorNetwork": "the Bancor Network address",
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount.",
                        "path": "the selected conversion path from bancor"
                    }
                }
            },
            "stateVariables": {
                "BANCOR_CALL_GAS": {
                    "details": "Base gas limit for Bancor calls."
                }
            },
            "version": 1
        },
        "evm": {
            "bytecode": {
                "linkReferences": {},
                "object": "0x608060405234801561001057600080fd5b5061089a806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063149dab0e1461003b57806374c9d2551461006d575b600080fd5b61005560048036038101906100509190610632565b61009f565b6040516100649392919061075d565b60405180910390f35b61008760048036038101906100829190610632565b61021b565b6040516100969392919061075d565b60405180910390f35b6000606080600087602001515114156100b757610211565b6100c38787878761022a565b8093508194505050835167ffffffffffffffff811180156100e357600080fd5b506040519080825280602002602001820160405280156101125781602001602082028036833780820191505090505b50905060005b815181101561020f578373ffffffffffffffffffffffffffffffffffffffff16637f9c0ecd620493e08588858151811061014e57fe5b60200260200101516040518463ffffffff1660e01b81526004016101739291906107ca565b60206040518083038187803b15801561018b57600080fd5b5086fa935050505080156101bd57506040513d601f19601f820116820180604052508101906101ba91906106f9565b60015b6101c65761020f565b808383815181106101d357fe5b60200260200101818152505060008383815181106101ed57fe5b60200260200101511415610201575061020f565b508080600101915050610118565b505b9450945094915050565b60006060809450945094915050565b60006060856000015173ffffffffffffffffffffffffffffffffffffffff166321f8a721876000015173ffffffffffffffffffffffffffffffffffffffff16639232494e6040518163ffffffff1660e01b815260040160206040518083038186803b15801561029857600080fd5b505afa1580156102ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102d09190610617565b6040518263ffffffff1660e01b81526004016102ec91906107ec565b60206040518083038186803b15801561030457600080fd5b505afa158015610318573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061033c91906105f1565b91506000866020015151141561035157610480565b6000805b87602001515181101561047d5760028860200151828151811061037457fe5b602002602001015151101561038857610470565b8373ffffffffffffffffffffffffffffffffffffffff16637f9c0ecd620493e08a6020015184815181106103b857fe5b60200260200101518860018a5103815181106103d057fe5b60200260200101516040518463ffffffff1660e01b81526004016103f59291906107ca565b60206040518083038187803b15801561040d57600080fd5b5086fa9350505050801561043f57506040513d601f19601f8201168201806040525081019061043c91906106f9565b60015b61044857610470565b8281111561046e578092508860200151828151811061046357fe5b602002602001015193505b505b8080600101915050610355565b50505b94509492505050565b6000813590506104988161084d565b92915050565b600082601f8301126104ae578081fd5b81356104c16104bc8261082a565b6107fd565b9150818183526020808401915080850160005b84811015610571578135870188603f8201126104ef57600080fd5b838101356105046104ff8261082a565b6107fd565b80828252604087830192508085018d828a8702880101111561052557600080fd5b600095505b848610156105535761053c8e82610489565b84528884019350888101905060018601955061052a565b505080885250505050828401935082820191506001810190506104d4565b505050505092915050565b600082601f83011261058c578081fd5b813561059f61059a8261082a565b6107fd565b91508181835260208084019150808501868283860288010111156105c257600080fd5b60005b848110156105e65781358452828401935082820191506001810190506105c5565b505050505092915050565b600060208284031215610602578081fd5b815161060d8161084d565b8091505092915050565b600060208284031215610628578081fd5b8151905092915050565b60008060008060808587031215610647578283fd5b843567ffffffffffffffff8082111561065e578485fd5b818701915060408289031215610672578485fd5b61067c60406107fd565b6106868984610489565b8152602083013582811115610699578687fd5b6106a58a82860161049e565b602083015250809650506106bc8860208901610489565b94506106cb8860408901610489565b935060608701359150808211156106e0578283fd5b506106ed8782880161057c565b91505092959194509250565b60006020828403121561070a578081fd5b8151905092915050565b6000815180845260208085019450808401835b838110156107505760018060a01b03825116875282870196508282019150600181019050610727565b5050505082905092915050565b600060018060a01b0385168252602060608184015261077f6060840186610714565b838103604085015280855180835283830191508387019250845b818110156107ba578351835284830192508484019350600181019050610799565b5050809350505050949350505050565b6000604082526107dd6040830185610714565b90508260208301529392505050565b600060208201905082825292915050565b6000604051905081810181811067ffffffffffffffff8211171561082057600080fd5b8060405250919050565b600067ffffffffffffffff821115610840578081fd5b6020808302019050919050565b60018060a01b038116811461086157600080fd5b5056fea26469706673582212204269843c128cf35a2a09e5918f108c54e71c28a0101be8dab6237b6c8ffb623164736f6c634300060c0033",
                "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x89A DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x36 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x149DAB0E EQ PUSH2 0x3B JUMPI DUP1 PUSH4 0x74C9D255 EQ PUSH2 0x6D JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x55 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x50 SWAP2 SWAP1 PUSH2 0x632 JUMP JUMPDEST PUSH2 0x9F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x64 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x75D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x87 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x82 SWAP2 SWAP1 PUSH2 0x632 JUMP JUMPDEST PUSH2 0x21B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x96 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x75D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP1 PUSH1 0x0 DUP8 PUSH1 0x20 ADD MLOAD MLOAD EQ ISZERO PUSH2 0xB7 JUMPI PUSH2 0x211 JUMP JUMPDEST PUSH2 0xC3 DUP8 DUP8 DUP8 DUP8 PUSH2 0x22A JUMP JUMPDEST DUP1 SWAP4 POP DUP2 SWAP5 POP POP POP DUP4 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0xE3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x112 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0x20F JUMPI DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x7F9C0ECD PUSH3 0x493E0 DUP6 DUP9 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x14E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x173 SWAP3 SWAP2 SWAP1 PUSH2 0x7CA JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x18B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x1BD JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1BA SWAP2 SWAP1 PUSH2 0x6F9 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1C6 JUMPI PUSH2 0x20F JUMP JUMPDEST DUP1 DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1D3 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP PUSH1 0x0 DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1ED JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD EQ ISZERO PUSH2 0x201 JUMPI POP PUSH2 0x20F JUMP JUMPDEST POP DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0x118 JUMP JUMPDEST POP JUMPDEST SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP1 SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP6 PUSH1 0x0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x21F8A721 DUP8 PUSH1 0x0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x9232494E PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x298 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2AC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2D0 SWAP2 SWAP1 PUSH2 0x617 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2EC SWAP2 SWAP1 PUSH2 0x7EC JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x304 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x318 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x33C SWAP2 SWAP1 PUSH2 0x5F1 JUMP JUMPDEST SWAP2 POP PUSH1 0x0 DUP7 PUSH1 0x20 ADD MLOAD MLOAD EQ ISZERO PUSH2 0x351 JUMPI PUSH2 0x480 JUMP JUMPDEST PUSH1 0x0 DUP1 JUMPDEST DUP8 PUSH1 0x20 ADD MLOAD MLOAD DUP2 LT ISZERO PUSH2 0x47D JUMPI PUSH1 0x2 DUP9 PUSH1 0x20 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x374 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD LT ISZERO PUSH2 0x388 JUMPI PUSH2 0x470 JUMP JUMPDEST DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x7F9C0ECD PUSH3 0x493E0 DUP11 PUSH1 0x20 ADD MLOAD DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x3B8 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 PUSH1 0x1 DUP11 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x3D0 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3F5 SWAP3 SWAP2 SWAP1 PUSH2 0x7CA JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x40D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x43F JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x43C SWAP2 SWAP1 PUSH2 0x6F9 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x448 JUMPI PUSH2 0x470 JUMP JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x46E JUMPI DUP1 SWAP3 POP DUP9 PUSH1 0x20 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x463 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP4 POP JUMPDEST POP JUMPDEST DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0x355 JUMP JUMPDEST POP POP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x498 DUP2 PUSH2 0x84D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x4AE JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x4C1 PUSH2 0x4BC DUP3 PUSH2 0x82A JUMP JUMPDEST PUSH2 0x7FD JUMP JUMPDEST SWAP2 POP DUP2 DUP2 DUP4 MSTORE PUSH1 0x20 DUP1 DUP5 ADD SWAP2 POP DUP1 DUP6 ADD PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x571 JUMPI DUP2 CALLDATALOAD DUP8 ADD DUP9 PUSH1 0x3F DUP3 ADD SLT PUSH2 0x4EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 DUP2 ADD CALLDATALOAD PUSH2 0x504 PUSH2 0x4FF DUP3 PUSH2 0x82A JUMP JUMPDEST PUSH2 0x7FD JUMP JUMPDEST DUP1 DUP3 DUP3 MSTORE PUSH1 0x40 DUP8 DUP4 ADD SWAP3 POP DUP1 DUP6 ADD DUP14 DUP3 DUP11 DUP8 MUL DUP9 ADD ADD GT ISZERO PUSH2 0x525 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP6 POP JUMPDEST DUP5 DUP7 LT ISZERO PUSH2 0x553 JUMPI PUSH2 0x53C DUP15 DUP3 PUSH2 0x489 JUMP JUMPDEST DUP5 MSTORE DUP9 DUP5 ADD SWAP4 POP DUP9 DUP2 ADD SWAP1 POP PUSH1 0x1 DUP7 ADD SWAP6 POP PUSH2 0x52A JUMP JUMPDEST POP POP DUP1 DUP9 MSTORE POP POP POP POP DUP3 DUP5 ADD SWAP4 POP DUP3 DUP3 ADD SWAP2 POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x4D4 JUMP JUMPDEST POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x58C JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x59F PUSH2 0x59A DUP3 PUSH2 0x82A JUMP JUMPDEST PUSH2 0x7FD JUMP JUMPDEST SWAP2 POP DUP2 DUP2 DUP4 MSTORE PUSH1 0x20 DUP1 DUP5 ADD SWAP2 POP DUP1 DUP6 ADD DUP7 DUP3 DUP4 DUP7 MUL DUP9 ADD ADD GT ISZERO PUSH2 0x5C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x5E6 JUMPI DUP2 CALLDATALOAD DUP5 MSTORE DUP3 DUP5 ADD SWAP4 POP DUP3 DUP3 ADD SWAP2 POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x5C5 JUMP JUMPDEST POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x602 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x60D DUP2 PUSH2 0x84D JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x628 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x647 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x65E JUMPI DUP5 DUP6 REVERT JUMPDEST DUP2 DUP8 ADD SWAP2 POP PUSH1 0x40 DUP3 DUP10 SUB SLT ISZERO PUSH2 0x672 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x67C PUSH1 0x40 PUSH2 0x7FD JUMP JUMPDEST PUSH2 0x686 DUP10 DUP5 PUSH2 0x489 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP3 DUP2 GT ISZERO PUSH2 0x699 JUMPI DUP7 DUP8 REVERT JUMPDEST PUSH2 0x6A5 DUP11 DUP3 DUP7 ADD PUSH2 0x49E JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP DUP1 SWAP7 POP POP PUSH2 0x6BC DUP9 PUSH1 0x20 DUP10 ADD PUSH2 0x489 JUMP JUMPDEST SWAP5 POP PUSH2 0x6CB DUP9 PUSH1 0x40 DUP10 ADD PUSH2 0x489 JUMP JUMPDEST SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x6E0 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x6ED DUP8 DUP3 DUP9 ADD PUSH2 0x57C JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x70A JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD DUP4 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x750 JUMPI PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP3 MLOAD AND DUP8 MSTORE DUP3 DUP8 ADD SWAP7 POP DUP3 DUP3 ADD SWAP2 POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x727 JUMP JUMPDEST POP POP POP POP DUP3 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP6 AND DUP3 MSTORE PUSH1 0x20 PUSH1 0x60 DUP2 DUP5 ADD MSTORE PUSH2 0x77F PUSH1 0x60 DUP5 ADD DUP7 PUSH2 0x714 JUMP JUMPDEST DUP4 DUP2 SUB PUSH1 0x40 DUP6 ADD MSTORE DUP1 DUP6 MLOAD DUP1 DUP4 MSTORE DUP4 DUP4 ADD SWAP2 POP DUP4 DUP8 ADD SWAP3 POP DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x7BA JUMPI DUP4 MLOAD DUP4 MSTORE DUP5 DUP4 ADD SWAP3 POP DUP5 DUP5 ADD SWAP4 POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x799 JUMP JUMPDEST POP POP DUP1 SWAP4 POP POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 MSTORE PUSH2 0x7DD PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x714 JUMP JUMPDEST SWAP1 POP DUP3 PUSH1 0x20 DUP4 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP3 DUP3 MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP DUP2 DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x820 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x40 MSTORE POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x840 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH1 0x20 DUP1 DUP4 MUL ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x861 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 TIMESTAMP PUSH10 0x843C128CF35A2A09E591 DUP16 LT DUP13 SLOAD 0xE7 SHR 0x28 LOG0 LT SHL 0xE8 0xDA 0xB6 0x23 PUSH28 0x6C8FFB623164736F6C634300060C0033000000000000000000000000 ",
                "sourceMap": "738:4264:4:-:0;;;;;;;;;;;;;;;;;;;"
            },
            "deployedBytecode": {
                "immutableReferences": {},
                "linkReferences": {},
                "object": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c8063149dab0e1461003b57806374c9d2551461006d575b600080fd5b61005560048036038101906100509190610632565b61009f565b6040516100649392919061075d565b60405180910390f35b61008760048036038101906100829190610632565b61021b565b6040516100969392919061075d565b60405180910390f35b6000606080600087602001515114156100b757610211565b6100c38787878761022a565b8093508194505050835167ffffffffffffffff811180156100e357600080fd5b506040519080825280602002602001820160405280156101125781602001602082028036833780820191505090505b50905060005b815181101561020f578373ffffffffffffffffffffffffffffffffffffffff16637f9c0ecd620493e08588858151811061014e57fe5b60200260200101516040518463ffffffff1660e01b81526004016101739291906107ca565b60206040518083038187803b15801561018b57600080fd5b5086fa935050505080156101bd57506040513d601f19601f820116820180604052508101906101ba91906106f9565b60015b6101c65761020f565b808383815181106101d357fe5b60200260200101818152505060008383815181106101ed57fe5b60200260200101511415610201575061020f565b508080600101915050610118565b505b9450945094915050565b60006060809450945094915050565b60006060856000015173ffffffffffffffffffffffffffffffffffffffff166321f8a721876000015173ffffffffffffffffffffffffffffffffffffffff16639232494e6040518163ffffffff1660e01b815260040160206040518083038186803b15801561029857600080fd5b505afa1580156102ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102d09190610617565b6040518263ffffffff1660e01b81526004016102ec91906107ec565b60206040518083038186803b15801561030457600080fd5b505afa158015610318573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061033c91906105f1565b91506000866020015151141561035157610480565b6000805b87602001515181101561047d5760028860200151828151811061037457fe5b602002602001015151101561038857610470565b8373ffffffffffffffffffffffffffffffffffffffff16637f9c0ecd620493e08a6020015184815181106103b857fe5b60200260200101518860018a5103815181106103d057fe5b60200260200101516040518463ffffffff1660e01b81526004016103f59291906107ca565b60206040518083038187803b15801561040d57600080fd5b5086fa9350505050801561043f57506040513d601f19601f8201168201806040525081019061043c91906106f9565b60015b61044857610470565b8281111561046e578092508860200151828151811061046357fe5b602002602001015193505b505b8080600101915050610355565b50505b94509492505050565b6000813590506104988161084d565b92915050565b600082601f8301126104ae578081fd5b81356104c16104bc8261082a565b6107fd565b9150818183526020808401915080850160005b84811015610571578135870188603f8201126104ef57600080fd5b838101356105046104ff8261082a565b6107fd565b80828252604087830192508085018d828a8702880101111561052557600080fd5b600095505b848610156105535761053c8e82610489565b84528884019350888101905060018601955061052a565b505080885250505050828401935082820191506001810190506104d4565b505050505092915050565b600082601f83011261058c578081fd5b813561059f61059a8261082a565b6107fd565b91508181835260208084019150808501868283860288010111156105c257600080fd5b60005b848110156105e65781358452828401935082820191506001810190506105c5565b505050505092915050565b600060208284031215610602578081fd5b815161060d8161084d565b8091505092915050565b600060208284031215610628578081fd5b8151905092915050565b60008060008060808587031215610647578283fd5b843567ffffffffffffffff8082111561065e578485fd5b818701915060408289031215610672578485fd5b61067c60406107fd565b6106868984610489565b8152602083013582811115610699578687fd5b6106a58a82860161049e565b602083015250809650506106bc8860208901610489565b94506106cb8860408901610489565b935060608701359150808211156106e0578283fd5b506106ed8782880161057c565b91505092959194509250565b60006020828403121561070a578081fd5b8151905092915050565b6000815180845260208085019450808401835b838110156107505760018060a01b03825116875282870196508282019150600181019050610727565b5050505082905092915050565b600060018060a01b0385168252602060608184015261077f6060840186610714565b838103604085015280855180835283830191508387019250845b818110156107ba578351835284830192508484019350600181019050610799565b5050809350505050949350505050565b6000604082526107dd6040830185610714565b90508260208301529392505050565b600060208201905082825292915050565b6000604051905081810181811067ffffffffffffffff8211171561082057600080fd5b8060405250919050565b600067ffffffffffffffff821115610840578081fd5b6020808302019050919050565b60018060a01b038116811461086157600080fd5b5056fea26469706673582212204269843c128cf35a2a09e5918f108c54e71c28a0101be8dab6237b6c8ffb623164736f6c634300060c0033",
                "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x36 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x149DAB0E EQ PUSH2 0x3B JUMPI DUP1 PUSH4 0x74C9D255 EQ PUSH2 0x6D JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x55 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x50 SWAP2 SWAP1 PUSH2 0x632 JUMP JUMPDEST PUSH2 0x9F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x64 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x75D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x87 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x82 SWAP2 SWAP1 PUSH2 0x632 JUMP JUMPDEST PUSH2 0x21B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x96 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x75D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP1 PUSH1 0x0 DUP8 PUSH1 0x20 ADD MLOAD MLOAD EQ ISZERO PUSH2 0xB7 JUMPI PUSH2 0x211 JUMP JUMPDEST PUSH2 0xC3 DUP8 DUP8 DUP8 DUP8 PUSH2 0x22A JUMP JUMPDEST DUP1 SWAP4 POP DUP2 SWAP5 POP POP POP DUP4 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0xE3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x112 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0x20F JUMPI DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x7F9C0ECD PUSH3 0x493E0 DUP6 DUP9 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x14E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x173 SWAP3 SWAP2 SWAP1 PUSH2 0x7CA JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x18B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x1BD JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1BA SWAP2 SWAP1 PUSH2 0x6F9 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1C6 JUMPI PUSH2 0x20F JUMP JUMPDEST DUP1 DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1D3 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP PUSH1 0x0 DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1ED JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD EQ ISZERO PUSH2 0x201 JUMPI POP PUSH2 0x20F JUMP JUMPDEST POP DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0x118 JUMP JUMPDEST POP JUMPDEST SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP1 SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP6 PUSH1 0x0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x21F8A721 DUP8 PUSH1 0x0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x9232494E PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x298 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2AC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2D0 SWAP2 SWAP1 PUSH2 0x617 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2EC SWAP2 SWAP1 PUSH2 0x7EC JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x304 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x318 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x33C SWAP2 SWAP1 PUSH2 0x5F1 JUMP JUMPDEST SWAP2 POP PUSH1 0x0 DUP7 PUSH1 0x20 ADD MLOAD MLOAD EQ ISZERO PUSH2 0x351 JUMPI PUSH2 0x480 JUMP JUMPDEST PUSH1 0x0 DUP1 JUMPDEST DUP8 PUSH1 0x20 ADD MLOAD MLOAD DUP2 LT ISZERO PUSH2 0x47D JUMPI PUSH1 0x2 DUP9 PUSH1 0x20 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x374 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD LT ISZERO PUSH2 0x388 JUMPI PUSH2 0x470 JUMP JUMPDEST DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x7F9C0ECD PUSH3 0x493E0 DUP11 PUSH1 0x20 ADD MLOAD DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x3B8 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 PUSH1 0x1 DUP11 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x3D0 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3F5 SWAP3 SWAP2 SWAP1 PUSH2 0x7CA JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x40D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x43F JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x43C SWAP2 SWAP1 PUSH2 0x6F9 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x448 JUMPI PUSH2 0x470 JUMP JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x46E JUMPI DUP1 SWAP3 POP DUP9 PUSH1 0x20 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x463 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP4 POP JUMPDEST POP JUMPDEST DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0x355 JUMP JUMPDEST POP POP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x498 DUP2 PUSH2 0x84D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x4AE JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x4C1 PUSH2 0x4BC DUP3 PUSH2 0x82A JUMP JUMPDEST PUSH2 0x7FD JUMP JUMPDEST SWAP2 POP DUP2 DUP2 DUP4 MSTORE PUSH1 0x20 DUP1 DUP5 ADD SWAP2 POP DUP1 DUP6 ADD PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x571 JUMPI DUP2 CALLDATALOAD DUP8 ADD DUP9 PUSH1 0x3F DUP3 ADD SLT PUSH2 0x4EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 DUP2 ADD CALLDATALOAD PUSH2 0x504 PUSH2 0x4FF DUP3 PUSH2 0x82A JUMP JUMPDEST PUSH2 0x7FD JUMP JUMPDEST DUP1 DUP3 DUP3 MSTORE PUSH1 0x40 DUP8 DUP4 ADD SWAP3 POP DUP1 DUP6 ADD DUP14 DUP3 DUP11 DUP8 MUL DUP9 ADD ADD GT ISZERO PUSH2 0x525 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP6 POP JUMPDEST DUP5 DUP7 LT ISZERO PUSH2 0x553 JUMPI PUSH2 0x53C DUP15 DUP3 PUSH2 0x489 JUMP JUMPDEST DUP5 MSTORE DUP9 DUP5 ADD SWAP4 POP DUP9 DUP2 ADD SWAP1 POP PUSH1 0x1 DUP7 ADD SWAP6 POP PUSH2 0x52A JUMP JUMPDEST POP POP DUP1 DUP9 MSTORE POP POP POP POP DUP3 DUP5 ADD SWAP4 POP DUP3 DUP3 ADD SWAP2 POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x4D4 JUMP JUMPDEST POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x58C JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x59F PUSH2 0x59A DUP3 PUSH2 0x82A JUMP JUMPDEST PUSH2 0x7FD JUMP JUMPDEST SWAP2 POP DUP2 DUP2 DUP4 MSTORE PUSH1 0x20 DUP1 DUP5 ADD SWAP2 POP DUP1 DUP6 ADD DUP7 DUP3 DUP4 DUP7 MUL DUP9 ADD ADD GT ISZERO PUSH2 0x5C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x5E6 JUMPI DUP2 CALLDATALOAD DUP5 MSTORE DUP3 DUP5 ADD SWAP4 POP DUP3 DUP3 ADD SWAP2 POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x5C5 JUMP JUMPDEST POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x602 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x60D DUP2 PUSH2 0x84D JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x628 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x647 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x65E JUMPI DUP5 DUP6 REVERT JUMPDEST DUP2 DUP8 ADD SWAP2 POP PUSH1 0x40 DUP3 DUP10 SUB SLT ISZERO PUSH2 0x672 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x67C PUSH1 0x40 PUSH2 0x7FD JUMP JUMPDEST PUSH2 0x686 DUP10 DUP5 PUSH2 0x489 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP3 DUP2 GT ISZERO PUSH2 0x699 JUMPI DUP7 DUP8 REVERT JUMPDEST PUSH2 0x6A5 DUP11 DUP3 DUP7 ADD PUSH2 0x49E JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP DUP1 SWAP7 POP POP PUSH2 0x6BC DUP9 PUSH1 0x20 DUP10 ADD PUSH2 0x489 JUMP JUMPDEST SWAP5 POP PUSH2 0x6CB DUP9 PUSH1 0x40 DUP10 ADD PUSH2 0x489 JUMP JUMPDEST SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x6E0 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x6ED DUP8 DUP3 DUP9 ADD PUSH2 0x57C JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x70A JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD DUP4 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x750 JUMPI PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP3 MLOAD AND DUP8 MSTORE DUP3 DUP8 ADD SWAP7 POP DUP3 DUP3 ADD SWAP2 POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x727 JUMP JUMPDEST POP POP POP POP DUP3 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP6 AND DUP3 MSTORE PUSH1 0x20 PUSH1 0x60 DUP2 DUP5 ADD MSTORE PUSH2 0x77F PUSH1 0x60 DUP5 ADD DUP7 PUSH2 0x714 JUMP JUMPDEST DUP4 DUP2 SUB PUSH1 0x40 DUP6 ADD MSTORE DUP1 DUP6 MLOAD DUP1 DUP4 MSTORE DUP4 DUP4 ADD SWAP2 POP DUP4 DUP8 ADD SWAP3 POP DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x7BA JUMPI DUP4 MLOAD DUP4 MSTORE DUP5 DUP4 ADD SWAP3 POP DUP5 DUP5 ADD SWAP4 POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x799 JUMP JUMPDEST POP POP DUP1 SWAP4 POP POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 MSTORE PUSH2 0x7DD PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x714 JUMP JUMPDEST SWAP1 POP DUP3 PUSH1 0x20 DUP4 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP3 DUP3 MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP DUP2 DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x820 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x40 MSTORE POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x840 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH1 0x20 DUP1 DUP4 MUL ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x861 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 TIMESTAMP PUSH10 0x843C128CF35A2A09E591 DUP16 LT DUP13 SLOAD 0xE7 SHR 0x28 LOG0 LT SHL 0xE8 0xDA 0xB6 0x23 PUSH28 0x6C8FFB623164736F6C634300060C0033000000000000000000000000 ",
                "sourceMap": "738:4264:4:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1551:1290;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;3416:313;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;1551:1290;1772:21;1795;1818:34;1893:1;1872:4;:10;;;:17;:22;1868:100;;;1910:47;;1868:100;2001:62;2015:4;2021:10;2033;2045:17;2001:13;:62::i;:::-;1977:86;;;;;;;;2107:17;:24;2093:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2073:59;;2148:9;2143:635;2167:17;:24;2163:1;:28;2143:635;;;2247:13;2232:61;;;873:5;2366:4;2372:17;2390:1;2372:20;;;;;;;;;;;;;;2232:161;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;2212:556;;2748:5;;2212:556;2488:6;2465:17;2483:1;2465:20;;;;;;;;;;;;;:29;;;;;2594:1;2570:17;2588:1;2570:20;;;;;;;;;;;;;;:25;2566:77;;;2619:5;;;2566:77;2410:247;2193:3;;;;;;;2143:635;;;;1551:1290;;;;;;;;;:::o;3416:313::-;3636:21;3659;3682:34;3416:313;;;;;;;;:::o;3735:1265::-;3950:21;3973;4026:4;:13;;;:24;;;4051:4;:13;;;:28;;;:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4026:56;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4010:72;;4117:1;4096:4;:10;;;:17;:22;4092:81;;;4134:28;;4092:81;4182:23;4290:9;4285:709;4309:4;:10;;;:17;4305:1;:21;4285:709;;;4374:1;4351:4;:10;;;4362:1;4351:13;;;;;;;;;;;;;;:20;:24;4347:71;;;4395:8;;4347:71;4467:13;4452:61;;;873:5;4586:4;:10;;;4597:1;4586:13;;;;;;;;;;;;;;4601:17;4644:1;4619:17;:24;:26;4601:45;;;;;;;;;;;;;;4452:195;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;4432:552;;4961:8;;4432:552;4732:15;4723:6;:24;4719:137;;;4789:6;4771:24;;4824:4;:10;;;4835:1;4824:13;;;;;;;;;;;;;;4817:20;;4719:137;4664:206;4285:709;4328:3;;;;;;;4285:709;;;;3735:1265;;;;;;;;;:::o;5:130:-1:-;;85:6;72:20;63:29;;97:33;124:5;97:33;:::i;:::-;57:78;;;;:::o;1036:753::-;;1178:3;1171:4;1163:6;1159:17;1155:27;1145:2;;-1:-1;;1186:12;1145:2;1233:6;1220:20;1255:105;1270:89;1352:6;1270:89;:::i;:::-;1255:105;:::i;:::-;1246:114;;1366:16;1402:6;1395:5;1388:21;1432:4;;1449:3;1445:14;1438:21;;1432:4;1424:6;1420:17;1540:1;1525:258;1550:6;1547:1;1544:13;1525:258;;;1633:3;1620:17;1424:6;1608:30;418:3;399:17;1608:30;399:17;395:27;385:2;;1540:1;;426:12;385:2;1432:4;1608:30;;460:20;495:80;510:64;567:6;510:64;:::i;:::-;495:80;:::i;:::-;581:16;617:6;610:5;603:21;635:17;1432:4;664:3;660:14;653:21;;635:17;1608:30;635:17;769:3;635:17;1432:4;753:6;749:17;1608:30;740:27;;737:36;734:2;;;1540:1;;776:12;734:2;1540:1;802:10;;796:206;821:6;818:1;815:13;796:206;;;901:37;934:3;922:10;901:37;:::i;:::-;896:3;889:50;1432:4;957:3;953:14;946:21;;1432:4;985:3;981:14;974:21;;1572:1;840;836:9;831:14;;796:206;;;800:14;;1657:62;1652:3;1645:75;;;;;1432:4;1738:3;1734:14;1727:21;;1432:4;1766:3;1762:14;1755:21;;1572:1;1569;1565:9;1560:14;;1525:258;;;1529:14;;;;;1138:651;;;;:::o;1815:707::-;;1932:3;1925:4;1917:6;1913:17;1909:27;1899:2;;-1:-1;;1940:12;1899:2;1987:6;1974:20;2009:80;2024:64;2081:6;2024:64;:::i;:::-;2009:80;:::i;:::-;2000:89;;2095:16;2131:6;2124:5;2117:21;2161:4;;2178:3;2174:14;2167:21;;2161:4;2153:6;2149:17;2283:3;2161:4;;2267:6;2263:17;2153:6;2254:27;;2251:36;2248:2;;;2300:1;;2290:12;2248:2;2325:1;2310:206;2335:6;2332:1;2329:13;2310:206;;;3630:6;3617:20;2410:3;2403:50;2161:4;2471:3;2467:14;2460:21;;2161:4;2499:3;2495:14;2488:21;;2357:1;2354;2350:9;2345:14;;2310:206;;;2314:14;;;;;1892:630;;;;:::o;3828:263::-;;3943:2;3931:9;3922:7;3918:23;3914:32;3911:2;;;-1:-1;;3949:12;3911:2;226:6;220:13;238:33;265:5;238:33;:::i;:::-;4001:74;;;;3905:186;;;;:::o;4098:263::-;;4213:2;4201:9;4192:7;4188:23;4184:32;4181:2;;;-1:-1;;4219:12;4181:2;2614:6;2608:13;4271:74;;4175:186;;;;:::o;4368:909::-;;;;;4583:3;4571:9;4562:7;4558:23;4554:33;4551:2;;;-1:-1;;4590:12;4551:2;4648:17;4635:31;4686:18;;4678:6;4675:30;4672:2;;;-1:-1;;4708:12;4672:2;4809:6;4798:9;4794:22;;;3025:4;3013:9;3008:3;3004:19;3000:30;2997:2;;;-1:-1;;3033:12;2997:2;3061:20;3025:4;3061:20;:::i;:::-;3167:73;3236:3;3212:22;3167:73;:::i;:::-;3149:16;3142:99;3331:2;3320:9;3316:18;3303:32;4686:18;3347:6;3344:30;3341:2;;;-1:-1;;3377:12;3341:2;3422:99;3517:3;3508:6;3497:9;3493:22;3422:99;:::i;:::-;3331:2;3408:5;3404:16;3397:125;;4728:98;;;;4881:53;4926:7;3331:2;4906:9;4902:22;4881:53;:::i;:::-;4871:63;;4989:53;5034:7;3025:4;5014:9;5010:22;4989:53;:::i;:::-;4979:63;;5107:2;5096:9;5092:18;5079:32;5065:46;;4686:18;5123:6;5120:30;5117:2;;;-1:-1;;5153:12;5117:2;;5183:78;5253:7;5244:6;5233:9;5229:22;5183:78;:::i;:::-;5173:88;;;4545:732;;;;;;;:::o;5284:263::-;;5399:2;5387:9;5378:7;5374:23;5370:32;5367:2;;;-1:-1;;5405:12;5367:2;3771:6;3765:13;5457:74;;5361:186;;;;:::o;6179:690::-;;6372:5;11060:12;11606:6;11601:3;11594:19;11643:4;;11638:3;11634:14;6384:93;;11643:4;6548:5;10756:14;-1:-1;6587:260;6612:6;6609:1;6606:13;6587:260;;;4686:18;;12221:42;;;6679:6;6673:13;12210:54;5986:3;5979:37;11643:4;5712:3;5708:14;6693:70;;11643:4;6833:6;11334:14;6770:70;;6634:1;6631;6627:9;6622:14;;6587:260;;;6591:14;;;;6853:10;;;6303:566;;;;:::o;7956:740::-;;4686:18;;12221:42;;;6009:5;12210:54;5986:3;5979:37;8357:2;8239;8357;8346:9;8342:18;8335:48;8397:108;8239:2;8228:9;8224:18;8491:6;8397:108;:::i;:::-;8553:9;8547:4;8543:20;8538:2;8527:9;8523:18;8516:48;8578:108;7101:5;11060:12;11606:6;11601:3;11594:19;8357:2;11638:3;11634:14;7113:93;;8357:2;7277:5;10756:14;7289:21;;-1:-1;7316:260;7341:6;7338:1;7335:13;7316:260;;;7408:6;7402:13;7684:3;7677:37;8357:2;5894:3;5890:14;7422:70;;8357:2;7562:6;11334:14;7499:70;;7363:1;7360;7356:9;7351:14;;7316:260;;;7320:14;;8570:116;;;;;;8210:486;;;;;;:::o;8703:481::-;;8908:2;8929:17;8922:47;8983:108;8908:2;8897:9;8893:18;9077:6;8983:108;:::i;:::-;8975:116;;7707:5;9170:2;9159:9;9155:18;7677:37;8879:305;;;;;:::o;9191:222::-;;9318:2;9307:9;9303:18;9295:26;;7707:5;7684:3;7677:37;9289:124;;;;:::o;9420:256::-;;9482:2;9476:9;9466:19;;9520:4;9512:6;9508:17;9619:6;9607:10;9604:22;9583:18;9571:10;9568:34;9565:62;9562:2;;;9640:1;;9630:12;9562:2;9660:10;9482:2;9649:22;;9460:216;;;:::o;9683:304::-;;9842:18;9834:6;9831:30;9828:2;;;-1:-1;;9864:12;9828:2;9909:4;;9901:6;9897:17;9962:15;9954:23;;9765:222;;;:::o;12355:117::-;4686:18;;12221:42;;;12442:5;12210:54;12417:5;12414:35;12404:2;;12463:1;;12453:12;12404:2;12398:74;:::o"
            }
        }
    },
    "sourceTreeHashHex": "0x0ea54d008ea50cfd5f08bc304045292d3d3959d23acd787a64e03214c867a505",
    "sources": {
        "./BancorSampler.sol": {
            "id": 4,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IBancor.sol\";\n\ncontract CompilerHack {}\n\ncontract BancorSampler is CompilerHack {\n\n    /// @dev Base gas limit for Bancor calls.\n    uint256 constant private BANCOR_CALL_GAS = 300e3; // 300k\n\n    struct BancorSamplerOpts {\n        IBancorRegistry registry;\n        address[][] paths;\n    }\n\n    /// @dev Sample sell quotes from Bancor.\n    /// @param opts BancorSamplerOpts The Bancor registry contract address and paths\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return bancorNetwork the Bancor Network address\n    /// @return path the selected conversion path from bancor\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromBancor(\n        BancorSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (address bancorNetwork, address[] memory path, uint256[] memory makerTokenAmounts)\n    {\n        if (opts.paths.length == 0) {\n            return (bancorNetwork, path, makerTokenAmounts);\n        }\n        (bancorNetwork, path) = _findBestPath(opts, takerToken, makerToken, takerTokenAmounts);\n        makerTokenAmounts = new uint256[](takerTokenAmounts.length);\n\n        for (uint256 i = 0; i < makerTokenAmounts.length; i++) {\n            try\n                IBancorNetwork(bancorNetwork)\n                    .rateByPath\n                        {gas: BANCOR_CALL_GAS}\n                        (path, takerTokenAmounts[i])\n                returns (uint256 amount)\n            {\n                makerTokenAmounts[i] = amount;\n                // Break early if there are 0 amounts\n                if (makerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n        return (bancorNetwork, path, makerTokenAmounts);\n    }\n\n    /// @dev Sample buy quotes from Bancor. Unimplemented\n    /// @param opts BancorSamplerOpts The Bancor registry contract address and paths\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return bancorNetwork the Bancor Network address\n    /// @return path the selected conversion path from bancor\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromBancor(\n        BancorSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (address bancorNetwork, address[] memory path, uint256[] memory takerTokenAmounts)\n    {\n    }\n\n    function _findBestPath(\n        BancorSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        internal\n        view\n        returns (address bancorNetwork, address[] memory path)\n    {\n        bancorNetwork = opts.registry.getAddress(opts.registry.BANCOR_NETWORK());\n        if (opts.paths.length == 0) {\n            return (bancorNetwork, path);\n        }\n        uint256 maxBoughtAmount = 0;\n        // Find the best path by selling the largest taker amount\n        for (uint256 i = 0; i < opts.paths.length; i++) {\n            if (opts.paths[i].length < 2) {\n                continue;\n            }\n\n            try\n                IBancorNetwork(bancorNetwork)\n                    .rateByPath\n                        {gas: BANCOR_CALL_GAS}\n                        (opts.paths[i], takerTokenAmounts[takerTokenAmounts.length-1])\n                returns (uint256 amount)\n            {\n                if (amount > maxBoughtAmount) {\n                    maxBoughtAmount = amount;\n                    path = opts.paths[i];\n                }\n            } catch {\n                // Swallow failures, leaving all results as zero.\n                continue;\n            }\n        }\n    }\n}\n"
        },
        "./interfaces/IBancor.sol": {
            "id": 27,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface IBancor {}\n\ninterface IBancorNetwork {\n  function conversionPath(address _sourceToken, address _targetToken) external view returns (address[] memory);\n  function rateByPath(address[] memory _path, uint256 _amount) external view returns (uint256);\n}\n\ninterface IBancorRegistry {\n    function getAddress(bytes32 _contractName) external view returns (address);\n    function BANCOR_NETWORK() external view returns (bytes32);\n}\n"
        }
    },
    "sourceCodes": {
        "./BancorSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IBancor.sol\";\n\ncontract CompilerHack {}\n\ncontract BancorSampler is CompilerHack {\n\n    /// @dev Base gas limit for Bancor calls.\n    uint256 constant private BANCOR_CALL_GAS = 300e3; // 300k\n\n    struct BancorSamplerOpts {\n        IBancorRegistry registry;\n        address[][] paths;\n    }\n\n    /// @dev Sample sell quotes from Bancor.\n    /// @param opts BancorSamplerOpts The Bancor registry contract address and paths\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return bancorNetwork the Bancor Network address\n    /// @return path the selected conversion path from bancor\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromBancor(\n        BancorSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (address bancorNetwork, address[] memory path, uint256[] memory makerTokenAmounts)\n    {\n        if (opts.paths.length == 0) {\n            return (bancorNetwork, path, makerTokenAmounts);\n        }\n        (bancorNetwork, path) = _findBestPath(opts, takerToken, makerToken, takerTokenAmounts);\n        makerTokenAmounts = new uint256[](takerTokenAmounts.length);\n\n        for (uint256 i = 0; i < makerTokenAmounts.length; i++) {\n            try\n                IBancorNetwork(bancorNetwork)\n                    .rateByPath\n                        {gas: BANCOR_CALL_GAS}\n                        (path, takerTokenAmounts[i])\n                returns (uint256 amount)\n            {\n                makerTokenAmounts[i] = amount;\n                // Break early if there are 0 amounts\n                if (makerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n        return (bancorNetwork, path, makerTokenAmounts);\n    }\n\n    /// @dev Sample buy quotes from Bancor. Unimplemented\n    /// @param opts BancorSamplerOpts The Bancor registry contract address and paths\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return bancorNetwork the Bancor Network address\n    /// @return path the selected conversion path from bancor\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromBancor(\n        BancorSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (address bancorNetwork, address[] memory path, uint256[] memory takerTokenAmounts)\n    {\n    }\n\n    function _findBestPath(\n        BancorSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        internal\n        view\n        returns (address bancorNetwork, address[] memory path)\n    {\n        bancorNetwork = opts.registry.getAddress(opts.registry.BANCOR_NETWORK());\n        if (opts.paths.length == 0) {\n            return (bancorNetwork, path);\n        }\n        uint256 maxBoughtAmount = 0;\n        // Find the best path by selling the largest taker amount\n        for (uint256 i = 0; i < opts.paths.length; i++) {\n            if (opts.paths[i].length < 2) {\n                continue;\n            }\n\n            try\n                IBancorNetwork(bancorNetwork)\n                    .rateByPath\n                        {gas: BANCOR_CALL_GAS}\n                        (opts.paths[i], takerTokenAmounts[takerTokenAmounts.length-1])\n                returns (uint256 amount)\n            {\n                if (amount > maxBoughtAmount) {\n                    maxBoughtAmount = amount;\n                    path = opts.paths[i];\n                }\n            } catch {\n                // Swallow failures, leaving all results as zero.\n                continue;\n            }\n        }\n    }\n}\n",
        "./interfaces/IBancor.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface IBancor {}\n\ninterface IBancorNetwork {\n  function conversionPath(address _sourceToken, address _targetToken) external view returns (address[] memory);\n  function rateByPath(address[] memory _path, uint256 _amount) external view returns (uint256);\n}\n\ninterface IBancorRegistry {\n    function getAddress(bytes32 _contractName) external view returns (address);\n    function BANCOR_NETWORK() external view returns (bytes32);\n}\n"
    },
    "compiler": {
        "name": "solc",
        "version": "0.6.12+commit.27d51765",
        "settings": {
            "remappings": [
                "@0x/contracts-utils=/Users/kim/Development/protocol/packages/asset-swapper/node_modules/@0x/contracts-utils",
                "@0x/contracts-erc20=/Users/kim/Development/protocol/packages/asset-swapper/node_modules/@0x/contracts-erc20",
                "@0x/contracts-zero-ex=/Users/kim/Development/protocol/packages/asset-swapper/node_modules/@0x/contracts-zero-ex"
            ],
            "optimizer": {
                "enabled": false,
                "runs": 200,
                "details": {
                    "yul": true
                }
            },
            "outputSelection": {
                "*": {
                    "*": [
                        "abi",
                        "devdoc",
                        "evm.bytecode.object",
                        "evm.bytecode.sourceMap",
                        "evm.deployedBytecode.object",
                        "evm.deployedBytecode.sourceMap"
                    ]
                }
            },
            "evmVersion": "istanbul"
        }
    },
    "chains": {}
}
