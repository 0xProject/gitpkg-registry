{
    "schemaVersion": "2.0.0",
    "contractName": "BancorSampler",
    "compilerOutput": {
        "abi": [
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "registry",
                                "type": "address"
                            },
                            {
                                "internalType": "address[][]",
                                "name": "paths",
                                "type": "address[][]"
                            }
                        ],
                        "internalType": "struct BancorSampler.BancorSamplerOpts",
                        "name": "opts",
                        "type": "tuple"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromBancor",
                "outputs": [
                    {
                        "internalType": "address",
                        "name": "bancorNetwork",
                        "type": "address"
                    },
                    {
                        "internalType": "address[]",
                        "name": "path",
                        "type": "address[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "registry",
                                "type": "address"
                            },
                            {
                                "internalType": "address[][]",
                                "name": "paths",
                                "type": "address[][]"
                            }
                        ],
                        "internalType": "struct BancorSampler.BancorSamplerOpts",
                        "name": "opts",
                        "type": "tuple"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromBancor",
                "outputs": [
                    {
                        "internalType": "address",
                        "name": "bancorNetwork",
                        "type": "address"
                    },
                    {
                        "internalType": "address[]",
                        "name": "path",
                        "type": "address[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            }
        ],
        "devdoc": {
            "kind": "dev",
            "methods": {
                "sampleBuysFromBancor((address,address[][]),address,address,uint256[])": {
                    "details": "Sample buy quotes from Bancor. Unimplemented",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "makerTokenAmounts": "Maker token buy amount for each sample.",
                        "opts": "BancorSamplerOpts The Bancor registry contract address and paths",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "bancorNetwork": "the Bancor Network address",
                        "path": "the selected conversion path from bancor",
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleSellsFromBancor((address,address[][]),address,address,uint256[])": {
                    "details": "Sample sell quotes from Bancor.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "opts": "BancorSamplerOpts The Bancor registry contract address and paths",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "bancorNetwork": "the Bancor Network address",
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount.",
                        "path": "the selected conversion path from bancor"
                    }
                }
            },
            "stateVariables": {
                "BANCOR_CALL_GAS": {
                    "details": "Base gas limit for Bancor calls."
                }
            },
            "version": 1
        },
        "evm": {
            "bytecode": {
                "linkReferences": {},
                "object": "0x608060405234801561001057600080fd5b5061085e806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063149dab0e1461003b57806374c9d25514610066575b600080fd5b61004e61004936600461060b565b610079565b60405161005d93929190610721565b60405180910390f35b61004e61007436600461060b565b610205565b600060608086602001515160001415610091576101fb565b61009d87878787610214565b8551919450925067ffffffffffffffff811180156100ba57600080fd5b506040519080825280602002602001820160405280156100e4578160200160208202803683370190505b50905060005b81518110156101f9578373ffffffffffffffffffffffffffffffffffffffff16637f9c0ecd620493e08588858151811061012057fe5b60200260200101516040518463ffffffff1660e01b8152600401610145929190610791565b60206040518083038187803b15801561015d57600080fd5b5086fa935050505080156101ac575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682019092526101a9918101906105f3565b60015b6101b5576101f9565b808383815181106101c257fe5b6020026020010181815250508282815181106101da57fe5b6020026020010151600014156101f057506101f9565b506001016100ea565b505b9450945094915050565b60006060809450945094915050565b60006060610225866000015161038a565b91508560200151516000141561023a57610381565b6000805b87602001515181101561037e5760028860200151828151811061025d57fe5b602002602001015151101561027157610376565b8373ffffffffffffffffffffffffffffffffffffffff16637f9c0ecd620493e08a6020015184815181106102a157fe5b60200260200101518860018a5103815181106102b957fe5b60200260200101516040518463ffffffff1660e01b81526004016102de929190610791565b60206040518083038187803b1580156102f657600080fd5b5086fa93505050508015610345575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201909252610342918101906105f3565b60015b61034e57610376565b82811115610374578092508860200151828151811061036957fe5b602002602001015193505b505b60010161023e565b50505b94509492505050565b6000808290508073ffffffffffffffffffffffffffffffffffffffff166321f8a7218273ffffffffffffffffffffffffffffffffffffffff16639232494e6040518163ffffffff1660e01b815260040160206040518083038186803b1580156103f257600080fd5b505afa158015610406573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061042a91906105f3565b6040518263ffffffff1660e01b815260040161044691906107b3565b60206040518083038186803b15801561045e57600080fd5b505afa158015610472573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061049691906105d7565b9392505050565b80356104a881610803565b92915050565b600082601f8301126104be578081fd5b81356104d16104cc826107e3565b6107bc565b818152915060208083019084810160005b8481101561056e578135870188603f8201126104fd57600080fd5b8381013561050d6104cc826107e3565b818152858101906040848101888502860182018e101561052c57600080fd5b600095505b84861015610557576105438e8261049d565b845260019590950194928801928801610531565b5050875250505092820192908201906001016104e2565b505050505092915050565b600082601f830112610589578081fd5b81356105976104cc826107e3565b8181529150602080830190848101818402860182018710156105b857600080fd5b60005b8481101561056e578135845292820192908201906001016105bb565b6000602082840312156105e8578081fd5b815161049681610803565b600060208284031215610604578081fd5b5051919050565b60008060008060808587031215610620578283fd5b843567ffffffffffffffff80821115610637578485fd5b908601906040828903121561064a578485fd5b61065460406107bc565b61065e898461049d565b8152602083013582811115610671578687fd5b61067d8a8286016104ae565b60208301525080965050610694886020890161049d565b94506106a3886040890161049d565b935060608701359150808211156106b8578283fd5b506106c587828801610579565b91505092959194509250565b6000815180845260208085019450808401835b8381101561071657815173ffffffffffffffffffffffffffffffffffffffff16875295820195908201906001016106e4565b509495945050505050565b600073ffffffffffffffffffffffffffffffffffffffff85168252602060608184015261075160608401866106d1565b8381036040850152845180825282860191830190845b8181101561078357835183529284019291840191600101610767565b509098975050505050505050565b6000604082526107a460408301856106d1565b90508260208301529392505050565b90815260200190565b60405181810167ffffffffffffffff811182821017156107db57600080fd5b604052919050565b600067ffffffffffffffff8211156107f9578081fd5b5060209081020190565b73ffffffffffffffffffffffffffffffffffffffff8116811461082557600080fd5b5056fea264697066735822122011a024fcdd9b9b72713586b49d4066b3c6340b098981c7fbac666fdcc82e313c64736f6c634300060c0033",
                "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x85E DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x36 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x149DAB0E EQ PUSH2 0x3B JUMPI DUP1 PUSH4 0x74C9D255 EQ PUSH2 0x66 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4E PUSH2 0x49 CALLDATASIZE PUSH1 0x4 PUSH2 0x60B JUMP JUMPDEST PUSH2 0x79 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x5D SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x721 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x4E PUSH2 0x74 CALLDATASIZE PUSH1 0x4 PUSH2 0x60B JUMP JUMPDEST PUSH2 0x205 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP1 DUP7 PUSH1 0x20 ADD MLOAD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x91 JUMPI PUSH2 0x1FB JUMP JUMPDEST PUSH2 0x9D DUP8 DUP8 DUP8 DUP8 PUSH2 0x214 JUMP JUMPDEST DUP6 MLOAD SWAP2 SWAP5 POP SWAP3 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0xBA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xE4 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0x1F9 JUMPI DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x7F9C0ECD PUSH3 0x493E0 DUP6 DUP9 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x120 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x145 SWAP3 SWAP2 SWAP1 PUSH2 0x791 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x15D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x1AC JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x1A9 SWAP2 DUP2 ADD SWAP1 PUSH2 0x5F3 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1B5 JUMPI PUSH2 0x1F9 JUMP JUMPDEST DUP1 DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1C2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1DA JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x1F0 JUMPI POP PUSH2 0x1F9 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0xEA JUMP JUMPDEST POP JUMPDEST SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP1 SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH2 0x225 DUP7 PUSH1 0x0 ADD MLOAD PUSH2 0x38A JUMP JUMPDEST SWAP2 POP DUP6 PUSH1 0x20 ADD MLOAD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x23A JUMPI PUSH2 0x381 JUMP JUMPDEST PUSH1 0x0 DUP1 JUMPDEST DUP8 PUSH1 0x20 ADD MLOAD MLOAD DUP2 LT ISZERO PUSH2 0x37E JUMPI PUSH1 0x2 DUP9 PUSH1 0x20 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x25D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD LT ISZERO PUSH2 0x271 JUMPI PUSH2 0x376 JUMP JUMPDEST DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x7F9C0ECD PUSH3 0x493E0 DUP11 PUSH1 0x20 ADD MLOAD DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2A1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 PUSH1 0x1 DUP11 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x2B9 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2DE SWAP3 SWAP2 SWAP1 PUSH2 0x791 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2F6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x345 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x342 SWAP2 DUP2 ADD SWAP1 PUSH2 0x5F3 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x34E JUMPI PUSH2 0x376 JUMP JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x374 JUMPI DUP1 SWAP3 POP DUP9 PUSH1 0x20 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x369 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP4 POP JUMPDEST POP JUMPDEST PUSH1 0x1 ADD PUSH2 0x23E JUMP JUMPDEST POP POP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x21F8A721 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x9232494E PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x406 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x42A SWAP2 SWAP1 PUSH2 0x5F3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x446 SWAP2 SWAP1 PUSH2 0x7B3 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x45E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x472 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x496 SWAP2 SWAP1 PUSH2 0x5D7 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x4A8 DUP2 PUSH2 0x803 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x4BE JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x4D1 PUSH2 0x4CC DUP3 PUSH2 0x7E3 JUMP JUMPDEST PUSH2 0x7BC JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x56E JUMPI DUP2 CALLDATALOAD DUP8 ADD DUP9 PUSH1 0x3F DUP3 ADD SLT PUSH2 0x4FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 DUP2 ADD CALLDATALOAD PUSH2 0x50D PUSH2 0x4CC DUP3 PUSH2 0x7E3 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP6 DUP2 ADD SWAP1 PUSH1 0x40 DUP5 DUP2 ADD DUP9 DUP6 MUL DUP7 ADD DUP3 ADD DUP15 LT ISZERO PUSH2 0x52C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP6 POP JUMPDEST DUP5 DUP7 LT ISZERO PUSH2 0x557 JUMPI PUSH2 0x543 DUP15 DUP3 PUSH2 0x49D JUMP JUMPDEST DUP5 MSTORE PUSH1 0x1 SWAP6 SWAP1 SWAP6 ADD SWAP5 SWAP3 DUP9 ADD SWAP3 DUP9 ADD PUSH2 0x531 JUMP JUMPDEST POP POP DUP8 MSTORE POP POP POP SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x4E2 JUMP JUMPDEST POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x589 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x597 PUSH2 0x4CC DUP3 PUSH2 0x7E3 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x5B8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x56E JUMPI DUP2 CALLDATALOAD DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x5BB JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x5E8 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x496 DUP2 PUSH2 0x803 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x604 JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x620 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x637 JUMPI DUP5 DUP6 REVERT JUMPDEST SWAP1 DUP7 ADD SWAP1 PUSH1 0x40 DUP3 DUP10 SUB SLT ISZERO PUSH2 0x64A JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x654 PUSH1 0x40 PUSH2 0x7BC JUMP JUMPDEST PUSH2 0x65E DUP10 DUP5 PUSH2 0x49D JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP3 DUP2 GT ISZERO PUSH2 0x671 JUMPI DUP7 DUP8 REVERT JUMPDEST PUSH2 0x67D DUP11 DUP3 DUP7 ADD PUSH2 0x4AE JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP DUP1 SWAP7 POP POP PUSH2 0x694 DUP9 PUSH1 0x20 DUP10 ADD PUSH2 0x49D JUMP JUMPDEST SWAP5 POP PUSH2 0x6A3 DUP9 PUSH1 0x40 DUP10 ADD PUSH2 0x49D JUMP JUMPDEST SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x6B8 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x6C5 DUP8 DUP3 DUP9 ADD PUSH2 0x579 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD DUP4 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x716 JUMPI DUP2 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x6E4 JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND DUP3 MSTORE PUSH1 0x20 PUSH1 0x60 DUP2 DUP5 ADD MSTORE PUSH2 0x751 PUSH1 0x60 DUP5 ADD DUP7 PUSH2 0x6D1 JUMP JUMPDEST DUP4 DUP2 SUB PUSH1 0x40 DUP6 ADD MSTORE DUP5 MLOAD DUP1 DUP3 MSTORE DUP3 DUP7 ADD SWAP2 DUP4 ADD SWAP1 DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x783 JUMPI DUP4 MLOAD DUP4 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x767 JUMP JUMPDEST POP SWAP1 SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 MSTORE PUSH2 0x7A4 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x6D1 JUMP JUMPDEST SWAP1 POP DUP3 PUSH1 0x20 DUP4 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x7DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x7F9 JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x825 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 GT LOG0 0x24 0xFC 0xDD SWAP12 SWAP12 PUSH19 0x713586B49D4066B3C6340B098981C7FBAC666F 0xDC 0xC8 0x2E BALANCE EXTCODECOPY PUSH5 0x736F6C6343 STOP MOD 0xC STOP CALLER ",
                "sourceMap": "745:4481:12:-:0;;;;;;;;;;;;;;;;;;;"
            },
            "deployedBytecode": {
                "immutableReferences": {},
                "linkReferences": {},
                "object": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c8063149dab0e1461003b57806374c9d25514610066575b600080fd5b61004e61004936600461060b565b610079565b60405161005d93929190610721565b60405180910390f35b61004e61007436600461060b565b610205565b600060608086602001515160001415610091576101fb565b61009d87878787610214565b8551919450925067ffffffffffffffff811180156100ba57600080fd5b506040519080825280602002602001820160405280156100e4578160200160208202803683370190505b50905060005b81518110156101f9578373ffffffffffffffffffffffffffffffffffffffff16637f9c0ecd620493e08588858151811061012057fe5b60200260200101516040518463ffffffff1660e01b8152600401610145929190610791565b60206040518083038187803b15801561015d57600080fd5b5086fa935050505080156101ac575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682019092526101a9918101906105f3565b60015b6101b5576101f9565b808383815181106101c257fe5b6020026020010181815250508282815181106101da57fe5b6020026020010151600014156101f057506101f9565b506001016100ea565b505b9450945094915050565b60006060809450945094915050565b60006060610225866000015161038a565b91508560200151516000141561023a57610381565b6000805b87602001515181101561037e5760028860200151828151811061025d57fe5b602002602001015151101561027157610376565b8373ffffffffffffffffffffffffffffffffffffffff16637f9c0ecd620493e08a6020015184815181106102a157fe5b60200260200101518860018a5103815181106102b957fe5b60200260200101516040518463ffffffff1660e01b81526004016102de929190610791565b60206040518083038187803b1580156102f657600080fd5b5086fa93505050508015610345575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201909252610342918101906105f3565b60015b61034e57610376565b82811115610374578092508860200151828151811061036957fe5b602002602001015193505b505b60010161023e565b50505b94509492505050565b6000808290508073ffffffffffffffffffffffffffffffffffffffff166321f8a7218273ffffffffffffffffffffffffffffffffffffffff16639232494e6040518163ffffffff1660e01b815260040160206040518083038186803b1580156103f257600080fd5b505afa158015610406573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061042a91906105f3565b6040518263ffffffff1660e01b815260040161044691906107b3565b60206040518083038186803b15801561045e57600080fd5b505afa158015610472573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061049691906105d7565b9392505050565b80356104a881610803565b92915050565b600082601f8301126104be578081fd5b81356104d16104cc826107e3565b6107bc565b818152915060208083019084810160005b8481101561056e578135870188603f8201126104fd57600080fd5b8381013561050d6104cc826107e3565b818152858101906040848101888502860182018e101561052c57600080fd5b600095505b84861015610557576105438e8261049d565b845260019590950194928801928801610531565b5050875250505092820192908201906001016104e2565b505050505092915050565b600082601f830112610589578081fd5b81356105976104cc826107e3565b8181529150602080830190848101818402860182018710156105b857600080fd5b60005b8481101561056e578135845292820192908201906001016105bb565b6000602082840312156105e8578081fd5b815161049681610803565b600060208284031215610604578081fd5b5051919050565b60008060008060808587031215610620578283fd5b843567ffffffffffffffff80821115610637578485fd5b908601906040828903121561064a578485fd5b61065460406107bc565b61065e898461049d565b8152602083013582811115610671578687fd5b61067d8a8286016104ae565b60208301525080965050610694886020890161049d565b94506106a3886040890161049d565b935060608701359150808211156106b8578283fd5b506106c587828801610579565b91505092959194509250565b6000815180845260208085019450808401835b8381101561071657815173ffffffffffffffffffffffffffffffffffffffff16875295820195908201906001016106e4565b509495945050505050565b600073ffffffffffffffffffffffffffffffffffffffff85168252602060608184015261075160608401866106d1565b8381036040850152845180825282860191830190845b8181101561078357835183529284019291840191600101610767565b509098975050505050505050565b6000604082526107a460408301856106d1565b90508260208301529392505050565b90815260200190565b60405181810167ffffffffffffffff811182821017156107db57600080fd5b604052919050565b600067ffffffffffffffff8211156107f9578081fd5b5060209081020190565b73ffffffffffffffffffffffffffffffffffffffff8116811461082557600080fd5b5056fea264697066735822122011a024fcdd9b9b72713586b49d4066b3c6340b098981c7fbac666fdcc82e313c64736f6c634300060c0033",
                "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x36 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x149DAB0E EQ PUSH2 0x3B JUMPI DUP1 PUSH4 0x74C9D255 EQ PUSH2 0x66 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4E PUSH2 0x49 CALLDATASIZE PUSH1 0x4 PUSH2 0x60B JUMP JUMPDEST PUSH2 0x79 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x5D SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x721 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x4E PUSH2 0x74 CALLDATASIZE PUSH1 0x4 PUSH2 0x60B JUMP JUMPDEST PUSH2 0x205 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP1 DUP7 PUSH1 0x20 ADD MLOAD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x91 JUMPI PUSH2 0x1FB JUMP JUMPDEST PUSH2 0x9D DUP8 DUP8 DUP8 DUP8 PUSH2 0x214 JUMP JUMPDEST DUP6 MLOAD SWAP2 SWAP5 POP SWAP3 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0xBA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xE4 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0x1F9 JUMPI DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x7F9C0ECD PUSH3 0x493E0 DUP6 DUP9 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x120 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x145 SWAP3 SWAP2 SWAP1 PUSH2 0x791 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x15D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x1AC JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x1A9 SWAP2 DUP2 ADD SWAP1 PUSH2 0x5F3 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1B5 JUMPI PUSH2 0x1F9 JUMP JUMPDEST DUP1 DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1C2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1DA JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x1F0 JUMPI POP PUSH2 0x1F9 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0xEA JUMP JUMPDEST POP JUMPDEST SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP1 SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH2 0x225 DUP7 PUSH1 0x0 ADD MLOAD PUSH2 0x38A JUMP JUMPDEST SWAP2 POP DUP6 PUSH1 0x20 ADD MLOAD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x23A JUMPI PUSH2 0x381 JUMP JUMPDEST PUSH1 0x0 DUP1 JUMPDEST DUP8 PUSH1 0x20 ADD MLOAD MLOAD DUP2 LT ISZERO PUSH2 0x37E JUMPI PUSH1 0x2 DUP9 PUSH1 0x20 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x25D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD LT ISZERO PUSH2 0x271 JUMPI PUSH2 0x376 JUMP JUMPDEST DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x7F9C0ECD PUSH3 0x493E0 DUP11 PUSH1 0x20 ADD MLOAD DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2A1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 PUSH1 0x1 DUP11 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x2B9 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2DE SWAP3 SWAP2 SWAP1 PUSH2 0x791 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2F6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x345 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x342 SWAP2 DUP2 ADD SWAP1 PUSH2 0x5F3 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x34E JUMPI PUSH2 0x376 JUMP JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x374 JUMPI DUP1 SWAP3 POP DUP9 PUSH1 0x20 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x369 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP4 POP JUMPDEST POP JUMPDEST PUSH1 0x1 ADD PUSH2 0x23E JUMP JUMPDEST POP POP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x21F8A721 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x9232494E PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x406 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x42A SWAP2 SWAP1 PUSH2 0x5F3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x446 SWAP2 SWAP1 PUSH2 0x7B3 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x45E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x472 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x496 SWAP2 SWAP1 PUSH2 0x5D7 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x4A8 DUP2 PUSH2 0x803 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x4BE JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x4D1 PUSH2 0x4CC DUP3 PUSH2 0x7E3 JUMP JUMPDEST PUSH2 0x7BC JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x56E JUMPI DUP2 CALLDATALOAD DUP8 ADD DUP9 PUSH1 0x3F DUP3 ADD SLT PUSH2 0x4FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 DUP2 ADD CALLDATALOAD PUSH2 0x50D PUSH2 0x4CC DUP3 PUSH2 0x7E3 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP6 DUP2 ADD SWAP1 PUSH1 0x40 DUP5 DUP2 ADD DUP9 DUP6 MUL DUP7 ADD DUP3 ADD DUP15 LT ISZERO PUSH2 0x52C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP6 POP JUMPDEST DUP5 DUP7 LT ISZERO PUSH2 0x557 JUMPI PUSH2 0x543 DUP15 DUP3 PUSH2 0x49D JUMP JUMPDEST DUP5 MSTORE PUSH1 0x1 SWAP6 SWAP1 SWAP6 ADD SWAP5 SWAP3 DUP9 ADD SWAP3 DUP9 ADD PUSH2 0x531 JUMP JUMPDEST POP POP DUP8 MSTORE POP POP POP SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x4E2 JUMP JUMPDEST POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x589 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x597 PUSH2 0x4CC DUP3 PUSH2 0x7E3 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x5B8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x56E JUMPI DUP2 CALLDATALOAD DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x5BB JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x5E8 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x496 DUP2 PUSH2 0x803 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x604 JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x620 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x637 JUMPI DUP5 DUP6 REVERT JUMPDEST SWAP1 DUP7 ADD SWAP1 PUSH1 0x40 DUP3 DUP10 SUB SLT ISZERO PUSH2 0x64A JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x654 PUSH1 0x40 PUSH2 0x7BC JUMP JUMPDEST PUSH2 0x65E DUP10 DUP5 PUSH2 0x49D JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP3 DUP2 GT ISZERO PUSH2 0x671 JUMPI DUP7 DUP8 REVERT JUMPDEST PUSH2 0x67D DUP11 DUP3 DUP7 ADD PUSH2 0x4AE JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP DUP1 SWAP7 POP POP PUSH2 0x694 DUP9 PUSH1 0x20 DUP10 ADD PUSH2 0x49D JUMP JUMPDEST SWAP5 POP PUSH2 0x6A3 DUP9 PUSH1 0x40 DUP10 ADD PUSH2 0x49D JUMP JUMPDEST SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x6B8 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x6C5 DUP8 DUP3 DUP9 ADD PUSH2 0x579 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD DUP4 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x716 JUMPI DUP2 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x6E4 JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND DUP3 MSTORE PUSH1 0x20 PUSH1 0x60 DUP2 DUP5 ADD MSTORE PUSH2 0x751 PUSH1 0x60 DUP5 ADD DUP7 PUSH2 0x6D1 JUMP JUMPDEST DUP4 DUP2 SUB PUSH1 0x40 DUP6 ADD MSTORE DUP5 MLOAD DUP1 DUP3 MSTORE DUP3 DUP7 ADD SWAP2 DUP4 ADD SWAP1 DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x783 JUMPI DUP4 MLOAD DUP4 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x767 JUMP JUMPDEST POP SWAP1 SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 MSTORE PUSH2 0x7A4 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x6D1 JUMP JUMPDEST SWAP1 POP DUP3 PUSH1 0x20 DUP4 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x7DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x7F9 JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x825 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 GT LOG0 0x24 0xFC 0xDD SWAP12 SWAP12 PUSH19 0x713586B49D4066B3C6340B098981C7FBAC666F 0xDC 0xC8 0x2E BALANCE EXTCODECOPY PUSH5 0x736F6C6343 STOP MOD 0xC STOP CALLER ",
                "sourceMap": "745:4481:12:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1557:1290;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;3422:313;;;;;;:::i;:::-;;:::i;1557:1290::-;1778:21;1801;1824:34;1878:4;:10;;;:17;1899:1;1878:22;1874:100;;;1916:47;;1874:100;2007:62;2021:4;2027:10;2039;2051:17;2007:13;:62::i;:::-;2113:24;;1983:86;;-1:-1:-1;1983:86:12;-1:-1:-1;2099:39:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2099:39:12;;2079:59;;2154:9;2149:635;2173:17;:24;2169:1;:28;2149:635;;;2253:13;2238:61;;;887:5;2372:4;2378:17;2396:1;2378:20;;;;;;;;;;;;;;2238:161;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2238:161:12;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;2218:556;;2754:5;;2218:556;2494:6;2471:17;2489:1;2471:20;;;;;;;;;;;;;:29;;;;;2576:17;2594:1;2576:20;;;;;;;;;;;;;;2600:1;2576:25;2572:77;;;2625:5;;;2572:77;2416:247;2199:3;;2149:635;;;;1557:1290;;;;;;;;;:::o;3422:313::-;3642:21;3665;3688:34;3422:313;;;;;;;;:::o;3741:1241::-;3956:21;3979;4032:32;4050:4;:13;;;4032:17;:32::i;:::-;4016:48;;4078:4;:10;;;:17;4099:1;4078:22;4074:81;;;4116:28;;4074:81;4164:23;4272:9;4267:709;4291:4;:10;;;:17;4287:1;:21;4267:709;;;4356:1;4333:4;:10;;;4344:1;4333:13;;;;;;;;;;;;;;:20;:24;4329:71;;;4377:8;;4329:71;4449:13;4434:61;;;887:5;4568:4;:10;;;4579:1;4568:13;;;;;;;;;;;;;;4583:17;4626:1;4601:17;:24;:26;4583:45;;;;;;;;;;;;;;4434:195;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4434:195:12;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;4414:552;;4943:8;;4414:552;4714:15;4705:6;:24;4701:137;;;4771:6;4753:24;;4806:4;:10;;;4817:1;4806:13;;;;;;;;;;;;;;4799:20;;4701:137;4646:206;4414:552;4310:3;;4267:709;;;;3741:1241;;;;;;;;;:::o;4988:236::-;5079:7;5102:24;5145:8;5102:52;;5171:8;:19;;;5191:8;:23;;;:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;5171:46;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;5164:53;4988:236;-1:-1:-1;;;4988:236:12:o;5:130:-1:-;72:20;;97:33;72:20;97:33;:::i;:::-;57:78;;;;:::o;1036:753::-;;1178:3;1171:4;1163:6;1159:17;1155:27;1145:2;;-1:-1;;1186:12;1145:2;1233:6;1220:20;1255:105;1270:89;1352:6;1270:89;:::i;:::-;1255:105;:::i;:::-;1388:21;;;1246:114;-1:-1;1432:4;1445:14;;;;1420:17;;;1540:1;1525:258;1550:6;1547:1;1544:13;1525:258;;;1633:3;1620:17;1424:6;1608:30;418:3;399:17;1608:30;399:17;395:27;385:2;;1540:1;;426:12;385:2;1432:4;1608:30;;460:20;495:80;510:64;567:6;510:64;:::i;495:80::-;603:21;;;660:14;;;;635:17;;;;749;;;740:27;;;;737:36;-1:-1;734:2;;;1540:1;;776:12;734:2;1540:1;802:10;;796:206;821:6;818:1;815:13;796:206;;;901:37;934:3;922:10;901:37;:::i;:::-;889:50;;1572:1;836:9;;;;;953:14;;;;981;;796:206;;;-1:-1;;1645:75;;-1:-1;;;1734:14;;;;1762;;;;1572:1;1565:9;1525:258;;;1529:14;;;;;1138:651;;;;:::o;1815:707::-;;1932:3;1925:4;1917:6;1913:17;1909:27;1899:2;;-1:-1;;1940:12;1899:2;1987:6;1974:20;2009:80;2024:64;2081:6;2024:64;:::i;2009:80::-;2117:21;;;2000:89;-1:-1;2161:4;2174:14;;;;2149:17;;;2263;;;2254:27;;;;2251:36;-1:-1;2248:2;;;2300:1;;2290:12;2248:2;2325:1;2310:206;2335:6;2332:1;2329:13;2310:206;;;3408:20;;2403:50;;2467:14;;;;2495;;;;2357:1;2350:9;2310:206;;3619:263;;3734:2;3722:9;3713:7;3709:23;3705:32;3702:2;;;-1:-1;;3740:12;3702:2;226:6;220:13;238:33;265:5;238:33;:::i;3889:263::-;;4004:2;3992:9;3983:7;3979:23;3975:32;3972:2;;;-1:-1;;4010:12;3972:2;-1:-1;2608:13;;3966:186;-1:-1;3966:186::o;4159:909::-;;;;;4374:3;4362:9;4353:7;4349:23;4345:33;4342:2;;;-1:-1;;4381:12;4342:2;4439:17;4426:31;4477:18;;4469:6;4466:30;4463:2;;;-1:-1;;4499:12;4463:2;4585:22;;;;2840:4;2819:19;;;2815:30;2812:2;;;-1:-1;;2848:12;2812:2;2876:20;2840:4;2876:20;:::i;:::-;2982:49;3027:3;3003:22;2982:49;:::i;:::-;2964:16;2957:75;3122:2;3111:9;3107:18;3094:32;4477:18;3138:6;3135:30;3132:2;;;-1:-1;;3168:12;3132:2;3213:99;3308:3;3299:6;3288:9;3284:22;3213:99;:::i;:::-;3122:2;3199:5;3195:16;3188:125;;4519:98;;;;4672:53;4717:7;3122:2;4697:9;4693:22;4672:53;:::i;:::-;4662:63;;4780:53;4825:7;2840:4;4805:9;4801:22;4780:53;:::i;:::-;4770:63;;4898:2;4887:9;4883:18;4870:32;4856:46;;4477:18;4914:6;4911:30;4908:2;;;-1:-1;;4944:12;4908:2;;4974:78;5044:7;5035:6;5024:9;5020:22;4974:78;:::i;:::-;4964:88;;;4336:732;;;;;;;:::o;5970:690::-;;6163:5;10851:12;11397:6;11392:3;11385:19;11434:4;;11429:3;11425:14;6175:93;;11434:4;6339:5;10547:14;-1:-1;6378:260;6403:6;6400:1;6397:13;6378:260;;;6464:13;;11890:42;11879:54;5770:37;;5499:14;;;;11125;;;;6425:1;6418:9;6378:260;;;-1:-1;6644:10;;6094:566;-1:-1;;;;;6094:566::o;7747:740::-;;11890:42;5800:5;11879:54;5777:3;5770:37;8148:2;8030;8148;8137:9;8133:18;8126:48;8188:108;8030:2;8019:9;8015:18;8282:6;8188:108;:::i;:::-;8334:20;;;8329:2;8314:18;;8307:48;10851:12;;11385:19;;;10547:14;;;;11425;;;-1:-1;7107:260;7132:6;7129:1;7126:13;7107:260;;;7193:13;;7468:37;;11125:14;;;;5681;;;;7154:1;7147:9;7107:260;;;-1:-1;8361:116;;8001:486;-1:-1;;;;;;;;8001:486::o;8494:481::-;;8699:2;8720:17;8713:47;8774:108;8699:2;8688:9;8684:18;8868:6;8774:108;:::i;:::-;8766:116;;7498:5;8961:2;8950:9;8946:18;7468:37;8670:305;;;;;:::o;8982:222::-;7468:37;;;9109:2;9094:18;;9080:124::o;9211:256::-;9273:2;9267:9;9299:17;;;9374:18;9359:34;;9395:22;;;9356:62;9353:2;;;9431:1;;9421:12;9353:2;9273;9440:22;9251:216;;-1:-1;9251:216::o;9474:304::-;;9633:18;9625:6;9622:30;9619:2;;;-1:-1;;9655:12;9619:2;-1:-1;9700:4;9688:17;;;9753:15;;9556:222::o;12024:117::-;11890:42;12111:5;11879:54;12086:5;12083:35;12073:2;;12132:1;;12122:12;12073:2;12067:74;:::o"
            }
        }
    },
    "sourceTreeHashHex": "0xaca509f1afcbacf807e0fda86606e65b63eda97a7e775b9cbbe3c8de79e1ccad",
    "sources": {
        "./BancorSampler.sol": {
            "id": 12,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IBancor.sol\";\n\ncontract DeploymentConstants {}\n\ncontract BancorSampler is DeploymentConstants\n{\n\n    /// @dev Base gas limit for Bancor calls.\n    uint256 constant private BANCOR_CALL_GAS = 300e3; // 300k\n\n    struct BancorSamplerOpts {\n        address registry;\n        address[][] paths;\n    }\n\n    /// @dev Sample sell quotes from Bancor.\n    /// @param opts BancorSamplerOpts The Bancor registry contract address and paths\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return bancorNetwork the Bancor Network address\n    /// @return path the selected conversion path from bancor\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromBancor(\n        BancorSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (address bancorNetwork, address[] memory path, uint256[] memory makerTokenAmounts)\n    {\n        if (opts.paths.length == 0) {\n            return (bancorNetwork, path, makerTokenAmounts);\n        }\n        (bancorNetwork, path) = _findBestPath(opts, takerToken, makerToken, takerTokenAmounts);\n        makerTokenAmounts = new uint256[](takerTokenAmounts.length);\n\n        for (uint256 i = 0; i < makerTokenAmounts.length; i++) {\n            try\n                IBancorNetwork(bancorNetwork)\n                    .rateByPath\n                        {gas: BANCOR_CALL_GAS}\n                        (path, takerTokenAmounts[i])\n                returns (uint256 amount)\n            {\n                makerTokenAmounts[i] = amount;\n                // Break early if there are 0 amounts\n                if (makerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n        return (bancorNetwork, path, makerTokenAmounts);\n    }\n\n    /// @dev Sample buy quotes from Bancor. Unimplemented\n    /// @param opts BancorSamplerOpts The Bancor registry contract address and paths\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return bancorNetwork the Bancor Network address\n    /// @return path the selected conversion path from bancor\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromBancor(\n        BancorSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (address bancorNetwork, address[] memory path, uint256[] memory takerTokenAmounts)\n    {\n    }\n\n    function _findBestPath(\n        BancorSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        internal\n        view\n        returns (address bancorNetwork, address[] memory path)\n    {\n        bancorNetwork = _getBancorNetwork(opts.registry);\n        if (opts.paths.length == 0) {\n            return (bancorNetwork, path);\n        }\n        uint256 maxBoughtAmount = 0;\n        // Find the best path by selling the largest taker amount\n        for (uint256 i = 0; i < opts.paths.length; i++) {\n            if (opts.paths[i].length < 2) {\n                continue;\n            }\n\n            try\n                IBancorNetwork(bancorNetwork)\n                    .rateByPath\n                        {gas: BANCOR_CALL_GAS}\n                        (opts.paths[i], takerTokenAmounts[takerTokenAmounts.length-1])\n                returns (uint256 amount)\n            {\n                if (amount > maxBoughtAmount) {\n                    maxBoughtAmount = amount;\n                    path = opts.paths[i];\n                }\n            } catch {\n                // Swallow failures, leaving all results as zero.\n                continue;\n            }\n        }\n    }\n\n    function _getBancorNetwork(address registry)\n        private\n        view\n        returns (address)\n    {\n        IBancorRegistry registry = IBancorRegistry(registry);\n        return registry.getAddress(registry.BANCOR_NETWORK());\n    }\n}\n"
        },
        "./interfaces/IBancor.sol": {
            "id": 34,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface IBancor {}\n\ninterface IBancorNetwork {\n  function conversionPath(address _sourceToken, address _targetToken) external view returns (address[] memory);\n  function rateByPath(address[] memory _path, uint256 _amount) external view returns (uint256);\n}\n\ninterface IBancorRegistry {\n    function getAddress(bytes32 _contractName) external view returns (address);\n    function BANCOR_NETWORK() external view returns (bytes32);\n}\n"
        }
    },
    "sourceCodes": {
        "./BancorSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IBancor.sol\";\n\ncontract DeploymentConstants {}\n\ncontract BancorSampler is DeploymentConstants\n{\n\n    /// @dev Base gas limit for Bancor calls.\n    uint256 constant private BANCOR_CALL_GAS = 300e3; // 300k\n\n    struct BancorSamplerOpts {\n        address registry;\n        address[][] paths;\n    }\n\n    /// @dev Sample sell quotes from Bancor.\n    /// @param opts BancorSamplerOpts The Bancor registry contract address and paths\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return bancorNetwork the Bancor Network address\n    /// @return path the selected conversion path from bancor\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromBancor(\n        BancorSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (address bancorNetwork, address[] memory path, uint256[] memory makerTokenAmounts)\n    {\n        if (opts.paths.length == 0) {\n            return (bancorNetwork, path, makerTokenAmounts);\n        }\n        (bancorNetwork, path) = _findBestPath(opts, takerToken, makerToken, takerTokenAmounts);\n        makerTokenAmounts = new uint256[](takerTokenAmounts.length);\n\n        for (uint256 i = 0; i < makerTokenAmounts.length; i++) {\n            try\n                IBancorNetwork(bancorNetwork)\n                    .rateByPath\n                        {gas: BANCOR_CALL_GAS}\n                        (path, takerTokenAmounts[i])\n                returns (uint256 amount)\n            {\n                makerTokenAmounts[i] = amount;\n                // Break early if there are 0 amounts\n                if (makerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n        return (bancorNetwork, path, makerTokenAmounts);\n    }\n\n    /// @dev Sample buy quotes from Bancor. Unimplemented\n    /// @param opts BancorSamplerOpts The Bancor registry contract address and paths\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return bancorNetwork the Bancor Network address\n    /// @return path the selected conversion path from bancor\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromBancor(\n        BancorSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (address bancorNetwork, address[] memory path, uint256[] memory takerTokenAmounts)\n    {\n    }\n\n    function _findBestPath(\n        BancorSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        internal\n        view\n        returns (address bancorNetwork, address[] memory path)\n    {\n        bancorNetwork = _getBancorNetwork(opts.registry);\n        if (opts.paths.length == 0) {\n            return (bancorNetwork, path);\n        }\n        uint256 maxBoughtAmount = 0;\n        // Find the best path by selling the largest taker amount\n        for (uint256 i = 0; i < opts.paths.length; i++) {\n            if (opts.paths[i].length < 2) {\n                continue;\n            }\n\n            try\n                IBancorNetwork(bancorNetwork)\n                    .rateByPath\n                        {gas: BANCOR_CALL_GAS}\n                        (opts.paths[i], takerTokenAmounts[takerTokenAmounts.length-1])\n                returns (uint256 amount)\n            {\n                if (amount > maxBoughtAmount) {\n                    maxBoughtAmount = amount;\n                    path = opts.paths[i];\n                }\n            } catch {\n                // Swallow failures, leaving all results as zero.\n                continue;\n            }\n        }\n    }\n\n    function _getBancorNetwork(address registry)\n        private\n        view\n        returns (address)\n    {\n        IBancorRegistry registry = IBancorRegistry(registry);\n        return registry.getAddress(registry.BANCOR_NETWORK());\n    }\n}\n",
        "./interfaces/IBancor.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface IBancor {}\n\ninterface IBancorNetwork {\n  function conversionPath(address _sourceToken, address _targetToken) external view returns (address[] memory);\n  function rateByPath(address[] memory _path, uint256 _amount) external view returns (uint256);\n}\n\ninterface IBancorRegistry {\n    function getAddress(bytes32 _contractName) external view returns (address);\n    function BANCOR_NETWORK() external view returns (bytes32);\n}\n"
    },
    "compiler": {
        "name": "solc",
        "version": "0.6.12+commit.27d51765",
        "settings": {
            "remappings": [
                "@0x/contracts-utils=/Users/jacob/projects/ethdev/0x/workspace-remote/workspace/0x-monorepo/node_modules/@0x/contracts-utils",
                "@0x/contracts-erc20=/Users/jacob/projects/ethdev/0x/workspace-remote/workspace/0x-monorepo/node_modules/@0x/contracts-erc20",
                "@0x/contracts-zero-ex=/Users/jacob/projects/ethdev/0x/workspace-remote/workspace/0x-monorepo/packages/asset-swapper/node_modules/@0x/contracts-zero-ex"
            ],
            "optimizer": {
                "enabled": true,
                "runs": 62500,
                "details": {
                    "yul": true,
                    "deduplicate": true,
                    "cse": true,
                    "constantOptimizer": true
                }
            },
            "outputSelection": {
                "*": {
                    "*": [
                        "abi",
                        "devdoc",
                        "evm.bytecode.object",
                        "evm.bytecode.sourceMap",
                        "evm.deployedBytecode.object",
                        "evm.deployedBytecode.sourceMap"
                    ]
                }
            },
            "evmVersion": "istanbul"
        }
    },
    "chains": {}
}
