{
    "schemaVersion": "2.0.0",
    "contractName": "TwoHopSampler",
    "compilerOutput": {
        "abi": [
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "to",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes",
                                "name": "data",
                                "type": "bytes"
                            },
                            {
                                "internalType": "uint256",
                                "name": "gas",
                                "type": "uint256"
                            }
                        ],
                        "internalType": "struct TwoHopSampler.HopInfo[]",
                        "name": "firstHopCalls",
                        "type": "tuple[]"
                    },
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "to",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes",
                                "name": "data",
                                "type": "bytes"
                            },
                            {
                                "internalType": "uint256",
                                "name": "gas",
                                "type": "uint256"
                            }
                        ],
                        "internalType": "struct TwoHopSampler.HopInfo[]",
                        "name": "secondHopCalls",
                        "type": "tuple[]"
                    },
                    {
                        "internalType": "uint256",
                        "name": "buyAmount",
                        "type": "uint256"
                    }
                ],
                "name": "sampleTwoHopBuy",
                "outputs": [
                    {
                        "components": [
                            {
                                "internalType": "uint256",
                                "name": "outputAmount",
                                "type": "uint256"
                            },
                            {
                                "internalType": "bytes",
                                "name": "resultData",
                                "type": "bytes"
                            }
                        ],
                        "internalType": "struct TwoHopSampler.HopResult[]",
                        "name": "firstHopResults",
                        "type": "tuple[]"
                    },
                    {
                        "components": [
                            {
                                "internalType": "uint256",
                                "name": "outputAmount",
                                "type": "uint256"
                            },
                            {
                                "internalType": "bytes",
                                "name": "resultData",
                                "type": "bytes"
                            }
                        ],
                        "internalType": "struct TwoHopSampler.HopResult[]",
                        "name": "secondHopResults",
                        "type": "tuple[]"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "to",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes",
                                "name": "data",
                                "type": "bytes"
                            },
                            {
                                "internalType": "uint256",
                                "name": "gas",
                                "type": "uint256"
                            }
                        ],
                        "internalType": "struct TwoHopSampler.HopInfo[]",
                        "name": "firstHopCalls",
                        "type": "tuple[]"
                    },
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "to",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes",
                                "name": "data",
                                "type": "bytes"
                            },
                            {
                                "internalType": "uint256",
                                "name": "gas",
                                "type": "uint256"
                            }
                        ],
                        "internalType": "struct TwoHopSampler.HopInfo[]",
                        "name": "secondHopCalls",
                        "type": "tuple[]"
                    },
                    {
                        "internalType": "uint256",
                        "name": "sellAmount",
                        "type": "uint256"
                    }
                ],
                "name": "sampleTwoHopSell",
                "outputs": [
                    {
                        "components": [
                            {
                                "internalType": "uint256",
                                "name": "outputAmount",
                                "type": "uint256"
                            },
                            {
                                "internalType": "bytes",
                                "name": "resultData",
                                "type": "bytes"
                            }
                        ],
                        "internalType": "struct TwoHopSampler.HopResult[]",
                        "name": "firstHopResults",
                        "type": "tuple[]"
                    },
                    {
                        "components": [
                            {
                                "internalType": "uint256",
                                "name": "outputAmount",
                                "type": "uint256"
                            },
                            {
                                "internalType": "bytes",
                                "name": "resultData",
                                "type": "bytes"
                            }
                        ],
                        "internalType": "struct TwoHopSampler.HopResult[]",
                        "name": "secondHopResults",
                        "type": "tuple[]"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            }
        ],
        "devdoc": {
            "kind": "dev",
            "methods": {},
            "version": 1
        },
        "evm": {
            "bytecode": {
                "linkReferences": {},
                "object": "0x608060405234801561001057600080fd5b50610b28806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806344a3acba1461003b5780639e4a2a6914610065575b600080fd5b61004e610049366004610943565b610078565b60405161005c929190610a4b565b60405180910390f35b61004e610073366004610943565b6103b8565b6060806000855167ffffffffffffffff8111801561009557600080fd5b506040519080825280602002602001820160405280156100cf57816020015b6100bc6107e0565b8152602001906001900390816100b45790505b50925060005b865181146102195760608782815181106100eb57fe5b6020026020010151602001519050610112602082510387836107039092919063ffffffff16565b6000606089848151811061012257fe5b6020026020010151600001516001600160a01b03168a858151811061014357fe5b6020026020010151604001518460405161015d9190610a2f565b60006040518083038160008787f1925050503d806000811461019b576040519150601f19603f3d011682016040523d82523d6000602084013e6101a0565b606091505b5091509150811561020b57808785815181106101b857fe5b60200260200101516020018190525060006101e060208351038361071390919063ffffffff16565b8886815181106101ec57fe5b602002602001015160000181815250905085811115610209578095505b505b5050508060010190506100d5565b508061022557506103b0565b845167ffffffffffffffff8111801561023d57600080fd5b5060405190808252806020026020018201604052801561027757816020015b6102646107e0565b81526020019060019003908161025c5790505b50915060005b855181146103ad57606086828151811061029357fe5b60200260200101516020015190506102ba602082510384836107039092919063ffffffff16565b600060608884815181106102ca57fe5b6020026020010151600001516001600160a01b03168985815181106102eb57fe5b602002602001015160400151846040516103059190610a2f565b60006040518083038160008787f1925050503d8060008114610343576040519150601f19603f3d011682016040523d82523d6000602084013e610348565b606091505b5091509150811561039f578086858151811061036057fe5b60200260200101516020018190525061038660208251038261071390919063ffffffff16565b86858151811061039257fe5b6020908102919091010151525b50505080600101905061027d565b50505b935093915050565b60608060006000199050845167ffffffffffffffff811180156103da57600080fd5b5060405190808252806020026020018201604052801561041457816020015b6104016107e0565b8152602001906001900390816103f95790505b50915060005b8551811461056a57606086828151811061043057fe5b6020026020010151602001519050610457602082510387836107039092919063ffffffff16565b6000606088848151811061046757fe5b6020026020010151600001516001600160a01b031689858151811061048857fe5b602002602001015160400151846040516104a29190610a2f565b60006040518083038160008787f1925050503d80600081146104e0576040519150601f19603f3d011682016040523d82523d6000602084013e6104e5565b606091505b5091509150811561055c57808685815181106104fd57fe5b602002602001015160200181905250600061052560208351038361071390919063ffffffff16565b87868151811061053157fe5b602002602001015160000181815250905060008111801561055157508581105b1561055a578095505b505b50505080600101905061041a565b5060001981141561057b57506103b0565b855167ffffffffffffffff8111801561059357600080fd5b506040519080825280602002602001820160405280156105cd57816020015b6105ba6107e0565b8152602001906001900390816105b25790505b50925060005b865181146103ad5760608782815181106105e957fe5b6020026020010151602001519050610610602082510384836107039092919063ffffffff16565b6000606089848151811061062057fe5b6020026020010151600001516001600160a01b03168a858151811061064157fe5b6020026020010151604001518460405161065b9190610a2f565b60006040518083038160008787f1925050503d8060008114610699576040519150601f19603f3d011682016040523d82523d6000602084013e61069e565b606091505b509150915081156106f557808785815181106106b657fe5b6020026020010151602001819052506106dc60208251038261071390919063ffffffff16565b8785815181106106e857fe5b6020908102919091010151525b5050508060010190506105d3565b61070e838383610728565b505050565b600061071f8383610754565b90505b92915050565b816020018351101561074c5761074c610747600585518560200161077e565b6107d8565b910160200152565b6000816020018351101561077557610775610747600585518560200161077e565b50016020015190565b6060632800659560e01b84848460405160240161079d93929190610a79565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915290509392505050565b805160208201fd5b604051806040016040528060008152602001606081525090565b80356001600160a01b038116811461072257600080fd5b600082601f830112610821578081fd5b813567ffffffffffffffff80821115610838578283fd5b60206108478182850201610a9b565b838152935080840185820160005b858110156108ce5781358801606080601f19838d0301121561087657600080fd5b61087f81610a9b565b61088b8c8885016107fa565b8152604080840135898111156108a057600080fd5b6108ae8e8a838801016108da565b898401525091909201359082015283529183019190830190600101610855565b50505050505092915050565b600082601f8301126108ea578081fd5b813567ffffffffffffffff811115610900578182fd5b610913601f8201601f1916602001610a9b565b915080825283602082850101111561092a57600080fd5b8060208401602084013760009082016020015292915050565b600080600060608486031215610957578283fd5b833567ffffffffffffffff8082111561096e578485fd5b61097a87838801610811565b9450602086013591508082111561098f578384fd5b5061099c86828701610811565b925050604084013590509250925092565b60008282518085526020808601955080818302840101818601855b84811015610a2257601f1986840381018a5282518051855285015160408686018190528151908601819052606090610a0581838901858b01610ac2565b9b87019b601f0190921694909401019250908301906001016109c8565b5090979650505050505050565b60008251610a41818460208701610ac2565b9190910192915050565b600060408252610a5e60408301856109ad565b8281036020840152610a7081856109ad565b95945050505050565b6060810160088510610a8757fe5b938152602081019290925260409091015290565b60405181810167ffffffffffffffff81118282101715610aba57600080fd5b604052919050565b60005b83811015610add578181015183820152602001610ac5565b83811115610aec576000848401525b5050505056fea26469706673582212203bab789acc1619a64b4f2fd7aefe51f84b4eb34f989f93edc8c78812fab7103464736f6c634300060c0033",
                "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xB28 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x36 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x44A3ACBA EQ PUSH2 0x3B JUMPI DUP1 PUSH4 0x9E4A2A69 EQ PUSH2 0x65 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4E PUSH2 0x49 CALLDATASIZE PUSH1 0x4 PUSH2 0x943 JUMP JUMPDEST PUSH2 0x78 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x5C SWAP3 SWAP2 SWAP1 PUSH2 0xA4B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x4E PUSH2 0x73 CALLDATASIZE PUSH1 0x4 PUSH2 0x943 JUMP JUMPDEST PUSH2 0x3B8 JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH1 0x0 DUP6 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x95 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xCF JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0xBC PUSH2 0x7E0 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0xB4 JUMPI SWAP1 POP JUMPDEST POP SWAP3 POP PUSH1 0x0 JUMPDEST DUP7 MLOAD DUP2 EQ PUSH2 0x219 JUMPI PUSH1 0x60 DUP8 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xEB JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD SWAP1 POP PUSH2 0x112 PUSH1 0x20 DUP3 MLOAD SUB DUP8 DUP4 PUSH2 0x703 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP10 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x122 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP11 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x143 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 ADD MLOAD DUP5 PUSH1 0x40 MLOAD PUSH2 0x15D SWAP2 SWAP1 PUSH2 0xA2F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP8 CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x19B JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1A0 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0x20B JUMPI DUP1 DUP8 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x1B8 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD DUP2 SWAP1 MSTORE POP PUSH1 0x0 PUSH2 0x1E0 PUSH1 0x20 DUP4 MLOAD SUB DUP4 PUSH2 0x713 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP9 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x1EC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 ADD DUP2 DUP2 MSTORE POP SWAP1 POP DUP6 DUP2 GT ISZERO PUSH2 0x209 JUMPI DUP1 SWAP6 POP JUMPDEST POP JUMPDEST POP POP POP DUP1 PUSH1 0x1 ADD SWAP1 POP PUSH2 0xD5 JUMP JUMPDEST POP DUP1 PUSH2 0x225 JUMPI POP PUSH2 0x3B0 JUMP JUMPDEST DUP5 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x23D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x277 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x264 PUSH2 0x7E0 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x25C JUMPI SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP6 MLOAD DUP2 EQ PUSH2 0x3AD JUMPI PUSH1 0x60 DUP7 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x293 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD SWAP1 POP PUSH2 0x2BA PUSH1 0x20 DUP3 MLOAD SUB DUP5 DUP4 PUSH2 0x703 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP9 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2CA JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x2EB JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 ADD MLOAD DUP5 PUSH1 0x40 MLOAD PUSH2 0x305 SWAP2 SWAP1 PUSH2 0xA2F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP8 CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x343 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x348 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0x39F JUMPI DUP1 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x360 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD DUP2 SWAP1 MSTORE POP PUSH2 0x386 PUSH1 0x20 DUP3 MLOAD SUB DUP3 PUSH2 0x713 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x392 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD MSTORE JUMPDEST POP POP POP DUP1 PUSH1 0x1 ADD SWAP1 POP PUSH2 0x27D JUMP JUMPDEST POP POP JUMPDEST SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH1 0x0 PUSH1 0x0 NOT SWAP1 POP DUP5 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x3DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x414 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x401 PUSH2 0x7E0 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x3F9 JUMPI SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP6 MLOAD DUP2 EQ PUSH2 0x56A JUMPI PUSH1 0x60 DUP7 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x430 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD SWAP1 POP PUSH2 0x457 PUSH1 0x20 DUP3 MLOAD SUB DUP8 DUP4 PUSH2 0x703 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP9 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x467 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x488 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 ADD MLOAD DUP5 PUSH1 0x40 MLOAD PUSH2 0x4A2 SWAP2 SWAP1 PUSH2 0xA2F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP8 CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x4E0 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x4E5 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0x55C JUMPI DUP1 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x4FD JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD DUP2 SWAP1 MSTORE POP PUSH1 0x0 PUSH2 0x525 PUSH1 0x20 DUP4 MLOAD SUB DUP4 PUSH2 0x713 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP8 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x531 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 ADD DUP2 DUP2 MSTORE POP SWAP1 POP PUSH1 0x0 DUP2 GT DUP1 ISZERO PUSH2 0x551 JUMPI POP DUP6 DUP2 LT JUMPDEST ISZERO PUSH2 0x55A JUMPI DUP1 SWAP6 POP JUMPDEST POP JUMPDEST POP POP POP DUP1 PUSH1 0x1 ADD SWAP1 POP PUSH2 0x41A JUMP JUMPDEST POP PUSH1 0x0 NOT DUP2 EQ ISZERO PUSH2 0x57B JUMPI POP PUSH2 0x3B0 JUMP JUMPDEST DUP6 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x593 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x5CD JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x5BA PUSH2 0x7E0 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x5B2 JUMPI SWAP1 POP JUMPDEST POP SWAP3 POP PUSH1 0x0 JUMPDEST DUP7 MLOAD DUP2 EQ PUSH2 0x3AD JUMPI PUSH1 0x60 DUP8 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x5E9 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD SWAP1 POP PUSH2 0x610 PUSH1 0x20 DUP3 MLOAD SUB DUP5 DUP4 PUSH2 0x703 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP10 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x620 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP11 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x641 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 ADD MLOAD DUP5 PUSH1 0x40 MLOAD PUSH2 0x65B SWAP2 SWAP1 PUSH2 0xA2F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP8 CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x699 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x69E JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0x6F5 JUMPI DUP1 DUP8 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x6B6 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD DUP2 SWAP1 MSTORE POP PUSH2 0x6DC PUSH1 0x20 DUP3 MLOAD SUB DUP3 PUSH2 0x713 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP8 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x6E8 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD MSTORE JUMPDEST POP POP POP DUP1 PUSH1 0x1 ADD SWAP1 POP PUSH2 0x5D3 JUMP JUMPDEST PUSH2 0x70E DUP4 DUP4 DUP4 PUSH2 0x728 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x71F DUP4 DUP4 PUSH2 0x754 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO PUSH2 0x74C JUMPI PUSH2 0x74C PUSH2 0x747 PUSH1 0x5 DUP6 MLOAD DUP6 PUSH1 0x20 ADD PUSH2 0x77E JUMP JUMPDEST PUSH2 0x7D8 JUMP JUMPDEST SWAP2 ADD PUSH1 0x20 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO PUSH2 0x775 JUMPI PUSH2 0x775 PUSH2 0x747 PUSH1 0x5 DUP6 MLOAD DUP6 PUSH1 0x20 ADD PUSH2 0x77E JUMP JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH4 0x28006595 PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x79D SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA79 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x722 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x821 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x838 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x20 PUSH2 0x847 DUP2 DUP3 DUP6 MUL ADD PUSH2 0xA9B JUMP JUMPDEST DUP4 DUP2 MSTORE SWAP4 POP DUP1 DUP5 ADD DUP6 DUP3 ADD PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x8CE JUMPI DUP2 CALLDATALOAD DUP9 ADD PUSH1 0x60 DUP1 PUSH1 0x1F NOT DUP4 DUP14 SUB ADD SLT ISZERO PUSH2 0x876 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x87F DUP2 PUSH2 0xA9B JUMP JUMPDEST PUSH2 0x88B DUP13 DUP9 DUP6 ADD PUSH2 0x7FA JUMP JUMPDEST DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 ADD CALLDATALOAD DUP10 DUP2 GT ISZERO PUSH2 0x8A0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x8AE DUP15 DUP11 DUP4 DUP9 ADD ADD PUSH2 0x8DA JUMP JUMPDEST DUP10 DUP5 ADD MSTORE POP SWAP2 SWAP1 SWAP3 ADD CALLDATALOAD SWAP1 DUP3 ADD MSTORE DUP4 MSTORE SWAP2 DUP4 ADD SWAP2 SWAP1 DUP4 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x855 JUMP JUMPDEST POP POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x8EA JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x900 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x913 PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD PUSH2 0xA9B JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x92A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP5 ADD CALLDATACOPY PUSH1 0x0 SWAP1 DUP3 ADD PUSH1 0x20 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x957 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x96E JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x97A DUP8 DUP4 DUP9 ADD PUSH2 0x811 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x98F JUMPI DUP4 DUP5 REVERT JUMPDEST POP PUSH2 0x99C DUP7 DUP3 DUP8 ADD PUSH2 0x811 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MLOAD DUP1 DUP6 MSTORE PUSH1 0x20 DUP1 DUP7 ADD SWAP6 POP DUP1 DUP2 DUP4 MUL DUP5 ADD ADD DUP2 DUP7 ADD DUP6 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0xA22 JUMPI PUSH1 0x1F NOT DUP7 DUP5 SUB DUP2 ADD DUP11 MSTORE DUP3 MLOAD DUP1 MLOAD DUP6 MSTORE DUP6 ADD MLOAD PUSH1 0x40 DUP7 DUP7 ADD DUP2 SWAP1 MSTORE DUP2 MLOAD SWAP1 DUP7 ADD DUP2 SWAP1 MSTORE PUSH1 0x60 SWAP1 PUSH2 0xA05 DUP2 DUP4 DUP10 ADD DUP6 DUP12 ADD PUSH2 0xAC2 JUMP JUMPDEST SWAP12 DUP8 ADD SWAP12 PUSH1 0x1F ADD SWAP1 SWAP3 AND SWAP5 SWAP1 SWAP5 ADD ADD SWAP3 POP SWAP1 DUP4 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x9C8 JUMP JUMPDEST POP SWAP1 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0xA41 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0xAC2 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 MSTORE PUSH2 0xA5E PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x9AD JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0xA70 DUP2 DUP6 PUSH2 0x9AD JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH1 0x8 DUP6 LT PUSH2 0xA87 JUMPI INVALID JUMPDEST SWAP4 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0xABA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xADD JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xAC5 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0xAEC JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 EXTCODESIZE 0xAB PUSH25 0x9ACC1619A64B4F2FD7AEFE51F84B4EB34F989F93EDC8C78812 STATICCALL 0xB7 LT CALLVALUE PUSH5 0x736F6C6343 STOP MOD 0xC STOP CALLER ",
                "sourceMap": "742:3859:29:-:0;;;;;;;;;;;;;;;;;;;"
            },
            "deployedBytecode": {
                "immutableReferences": {},
                "linkReferences": {},
                "object": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c806344a3acba1461003b5780639e4a2a6914610065575b600080fd5b61004e610049366004610943565b610078565b60405161005c929190610a4b565b60405180910390f35b61004e610073366004610943565b6103b8565b6060806000855167ffffffffffffffff8111801561009557600080fd5b506040519080825280602002602001820160405280156100cf57816020015b6100bc6107e0565b8152602001906001900390816100b45790505b50925060005b865181146102195760608782815181106100eb57fe5b6020026020010151602001519050610112602082510387836107039092919063ffffffff16565b6000606089848151811061012257fe5b6020026020010151600001516001600160a01b03168a858151811061014357fe5b6020026020010151604001518460405161015d9190610a2f565b60006040518083038160008787f1925050503d806000811461019b576040519150601f19603f3d011682016040523d82523d6000602084013e6101a0565b606091505b5091509150811561020b57808785815181106101b857fe5b60200260200101516020018190525060006101e060208351038361071390919063ffffffff16565b8886815181106101ec57fe5b602002602001015160000181815250905085811115610209578095505b505b5050508060010190506100d5565b508061022557506103b0565b845167ffffffffffffffff8111801561023d57600080fd5b5060405190808252806020026020018201604052801561027757816020015b6102646107e0565b81526020019060019003908161025c5790505b50915060005b855181146103ad57606086828151811061029357fe5b60200260200101516020015190506102ba602082510384836107039092919063ffffffff16565b600060608884815181106102ca57fe5b6020026020010151600001516001600160a01b03168985815181106102eb57fe5b602002602001015160400151846040516103059190610a2f565b60006040518083038160008787f1925050503d8060008114610343576040519150601f19603f3d011682016040523d82523d6000602084013e610348565b606091505b5091509150811561039f578086858151811061036057fe5b60200260200101516020018190525061038660208251038261071390919063ffffffff16565b86858151811061039257fe5b6020908102919091010151525b50505080600101905061027d565b50505b935093915050565b60608060006000199050845167ffffffffffffffff811180156103da57600080fd5b5060405190808252806020026020018201604052801561041457816020015b6104016107e0565b8152602001906001900390816103f95790505b50915060005b8551811461056a57606086828151811061043057fe5b6020026020010151602001519050610457602082510387836107039092919063ffffffff16565b6000606088848151811061046757fe5b6020026020010151600001516001600160a01b031689858151811061048857fe5b602002602001015160400151846040516104a29190610a2f565b60006040518083038160008787f1925050503d80600081146104e0576040519150601f19603f3d011682016040523d82523d6000602084013e6104e5565b606091505b5091509150811561055c57808685815181106104fd57fe5b602002602001015160200181905250600061052560208351038361071390919063ffffffff16565b87868151811061053157fe5b602002602001015160000181815250905060008111801561055157508581105b1561055a578095505b505b50505080600101905061041a565b5060001981141561057b57506103b0565b855167ffffffffffffffff8111801561059357600080fd5b506040519080825280602002602001820160405280156105cd57816020015b6105ba6107e0565b8152602001906001900390816105b25790505b50925060005b865181146103ad5760608782815181106105e957fe5b6020026020010151602001519050610610602082510384836107039092919063ffffffff16565b6000606089848151811061062057fe5b6020026020010151600001516001600160a01b03168a858151811061064157fe5b6020026020010151604001518460405161065b9190610a2f565b60006040518083038160008787f1925050503d8060008114610699576040519150601f19603f3d011682016040523d82523d6000602084013e61069e565b606091505b509150915081156106f557808785815181106106b657fe5b6020026020010151602001819052506106dc60208251038261071390919063ffffffff16565b8785815181106106e857fe5b6020908102919091010151525b5050508060010190506105d3565b61070e838383610728565b505050565b600061071f8383610754565b90505b92915050565b816020018351101561074c5761074c610747600585518560200161077e565b6107d8565b910160200152565b6000816020018351101561077557610775610747600585518560200161077e565b50016020015190565b6060632800659560e01b84848460405160240161079d93929190610a79565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915290509392505050565b805160208201fd5b604051806040016040528060008152602001606081525090565b80356001600160a01b038116811461072257600080fd5b600082601f830112610821578081fd5b813567ffffffffffffffff80821115610838578283fd5b60206108478182850201610a9b565b838152935080840185820160005b858110156108ce5781358801606080601f19838d0301121561087657600080fd5b61087f81610a9b565b61088b8c8885016107fa565b8152604080840135898111156108a057600080fd5b6108ae8e8a838801016108da565b898401525091909201359082015283529183019190830190600101610855565b50505050505092915050565b600082601f8301126108ea578081fd5b813567ffffffffffffffff811115610900578182fd5b610913601f8201601f1916602001610a9b565b915080825283602082850101111561092a57600080fd5b8060208401602084013760009082016020015292915050565b600080600060608486031215610957578283fd5b833567ffffffffffffffff8082111561096e578485fd5b61097a87838801610811565b9450602086013591508082111561098f578384fd5b5061099c86828701610811565b925050604084013590509250925092565b60008282518085526020808601955080818302840101818601855b84811015610a2257601f1986840381018a5282518051855285015160408686018190528151908601819052606090610a0581838901858b01610ac2565b9b87019b601f0190921694909401019250908301906001016109c8565b5090979650505050505050565b60008251610a41818460208701610ac2565b9190910192915050565b600060408252610a5e60408301856109ad565b8281036020840152610a7081856109ad565b95945050505050565b6060810160088510610a8757fe5b938152602081019290925260409091015290565b60405181810167ffffffffffffffff81118282101715610aba57600080fd5b604052919050565b60005b83811015610add578181015183820152602001610ac5565b83811115610aec576000848401525b5050505056fea26469706673582212203bab789acc1619a64b4f2fd7aefe51f84b4eb34f989f93edc8c78812fab7103464736f6c634300060c0033",
                "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x36 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x44A3ACBA EQ PUSH2 0x3B JUMPI DUP1 PUSH4 0x9E4A2A69 EQ PUSH2 0x65 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4E PUSH2 0x49 CALLDATASIZE PUSH1 0x4 PUSH2 0x943 JUMP JUMPDEST PUSH2 0x78 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x5C SWAP3 SWAP2 SWAP1 PUSH2 0xA4B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x4E PUSH2 0x73 CALLDATASIZE PUSH1 0x4 PUSH2 0x943 JUMP JUMPDEST PUSH2 0x3B8 JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH1 0x0 DUP6 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x95 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xCF JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0xBC PUSH2 0x7E0 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0xB4 JUMPI SWAP1 POP JUMPDEST POP SWAP3 POP PUSH1 0x0 JUMPDEST DUP7 MLOAD DUP2 EQ PUSH2 0x219 JUMPI PUSH1 0x60 DUP8 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xEB JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD SWAP1 POP PUSH2 0x112 PUSH1 0x20 DUP3 MLOAD SUB DUP8 DUP4 PUSH2 0x703 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP10 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x122 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP11 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x143 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 ADD MLOAD DUP5 PUSH1 0x40 MLOAD PUSH2 0x15D SWAP2 SWAP1 PUSH2 0xA2F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP8 CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x19B JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1A0 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0x20B JUMPI DUP1 DUP8 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x1B8 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD DUP2 SWAP1 MSTORE POP PUSH1 0x0 PUSH2 0x1E0 PUSH1 0x20 DUP4 MLOAD SUB DUP4 PUSH2 0x713 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP9 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x1EC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 ADD DUP2 DUP2 MSTORE POP SWAP1 POP DUP6 DUP2 GT ISZERO PUSH2 0x209 JUMPI DUP1 SWAP6 POP JUMPDEST POP JUMPDEST POP POP POP DUP1 PUSH1 0x1 ADD SWAP1 POP PUSH2 0xD5 JUMP JUMPDEST POP DUP1 PUSH2 0x225 JUMPI POP PUSH2 0x3B0 JUMP JUMPDEST DUP5 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x23D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x277 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x264 PUSH2 0x7E0 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x25C JUMPI SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP6 MLOAD DUP2 EQ PUSH2 0x3AD JUMPI PUSH1 0x60 DUP7 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x293 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD SWAP1 POP PUSH2 0x2BA PUSH1 0x20 DUP3 MLOAD SUB DUP5 DUP4 PUSH2 0x703 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP9 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2CA JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x2EB JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 ADD MLOAD DUP5 PUSH1 0x40 MLOAD PUSH2 0x305 SWAP2 SWAP1 PUSH2 0xA2F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP8 CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x343 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x348 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0x39F JUMPI DUP1 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x360 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD DUP2 SWAP1 MSTORE POP PUSH2 0x386 PUSH1 0x20 DUP3 MLOAD SUB DUP3 PUSH2 0x713 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x392 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD MSTORE JUMPDEST POP POP POP DUP1 PUSH1 0x1 ADD SWAP1 POP PUSH2 0x27D JUMP JUMPDEST POP POP JUMPDEST SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH1 0x0 PUSH1 0x0 NOT SWAP1 POP DUP5 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x3DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x414 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x401 PUSH2 0x7E0 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x3F9 JUMPI SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP6 MLOAD DUP2 EQ PUSH2 0x56A JUMPI PUSH1 0x60 DUP7 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x430 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD SWAP1 POP PUSH2 0x457 PUSH1 0x20 DUP3 MLOAD SUB DUP8 DUP4 PUSH2 0x703 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP9 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x467 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x488 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 ADD MLOAD DUP5 PUSH1 0x40 MLOAD PUSH2 0x4A2 SWAP2 SWAP1 PUSH2 0xA2F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP8 CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x4E0 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x4E5 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0x55C JUMPI DUP1 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x4FD JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD DUP2 SWAP1 MSTORE POP PUSH1 0x0 PUSH2 0x525 PUSH1 0x20 DUP4 MLOAD SUB DUP4 PUSH2 0x713 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP8 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x531 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 ADD DUP2 DUP2 MSTORE POP SWAP1 POP PUSH1 0x0 DUP2 GT DUP1 ISZERO PUSH2 0x551 JUMPI POP DUP6 DUP2 LT JUMPDEST ISZERO PUSH2 0x55A JUMPI DUP1 SWAP6 POP JUMPDEST POP JUMPDEST POP POP POP DUP1 PUSH1 0x1 ADD SWAP1 POP PUSH2 0x41A JUMP JUMPDEST POP PUSH1 0x0 NOT DUP2 EQ ISZERO PUSH2 0x57B JUMPI POP PUSH2 0x3B0 JUMP JUMPDEST DUP6 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x593 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x5CD JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x5BA PUSH2 0x7E0 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x5B2 JUMPI SWAP1 POP JUMPDEST POP SWAP3 POP PUSH1 0x0 JUMPDEST DUP7 MLOAD DUP2 EQ PUSH2 0x3AD JUMPI PUSH1 0x60 DUP8 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x5E9 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD SWAP1 POP PUSH2 0x610 PUSH1 0x20 DUP3 MLOAD SUB DUP5 DUP4 PUSH2 0x703 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP10 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x620 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP11 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x641 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 ADD MLOAD DUP5 PUSH1 0x40 MLOAD PUSH2 0x65B SWAP2 SWAP1 PUSH2 0xA2F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP8 CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x699 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x69E JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0x6F5 JUMPI DUP1 DUP8 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x6B6 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD DUP2 SWAP1 MSTORE POP PUSH2 0x6DC PUSH1 0x20 DUP3 MLOAD SUB DUP3 PUSH2 0x713 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP8 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x6E8 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD MSTORE JUMPDEST POP POP POP DUP1 PUSH1 0x1 ADD SWAP1 POP PUSH2 0x5D3 JUMP JUMPDEST PUSH2 0x70E DUP4 DUP4 DUP4 PUSH2 0x728 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x71F DUP4 DUP4 PUSH2 0x754 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO PUSH2 0x74C JUMPI PUSH2 0x74C PUSH2 0x747 PUSH1 0x5 DUP6 MLOAD DUP6 PUSH1 0x20 ADD PUSH2 0x77E JUMP JUMPDEST PUSH2 0x7D8 JUMP JUMPDEST SWAP2 ADD PUSH1 0x20 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO PUSH2 0x775 JUMPI PUSH2 0x775 PUSH2 0x747 PUSH1 0x5 DUP6 MLOAD DUP6 PUSH1 0x20 ADD PUSH2 0x77E JUMP JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH4 0x28006595 PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x79D SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA79 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x722 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x821 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x838 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x20 PUSH2 0x847 DUP2 DUP3 DUP6 MUL ADD PUSH2 0xA9B JUMP JUMPDEST DUP4 DUP2 MSTORE SWAP4 POP DUP1 DUP5 ADD DUP6 DUP3 ADD PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x8CE JUMPI DUP2 CALLDATALOAD DUP9 ADD PUSH1 0x60 DUP1 PUSH1 0x1F NOT DUP4 DUP14 SUB ADD SLT ISZERO PUSH2 0x876 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x87F DUP2 PUSH2 0xA9B JUMP JUMPDEST PUSH2 0x88B DUP13 DUP9 DUP6 ADD PUSH2 0x7FA JUMP JUMPDEST DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 ADD CALLDATALOAD DUP10 DUP2 GT ISZERO PUSH2 0x8A0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x8AE DUP15 DUP11 DUP4 DUP9 ADD ADD PUSH2 0x8DA JUMP JUMPDEST DUP10 DUP5 ADD MSTORE POP SWAP2 SWAP1 SWAP3 ADD CALLDATALOAD SWAP1 DUP3 ADD MSTORE DUP4 MSTORE SWAP2 DUP4 ADD SWAP2 SWAP1 DUP4 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x855 JUMP JUMPDEST POP POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x8EA JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x900 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x913 PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD PUSH2 0xA9B JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x92A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP5 ADD CALLDATACOPY PUSH1 0x0 SWAP1 DUP3 ADD PUSH1 0x20 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x957 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x96E JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x97A DUP8 DUP4 DUP9 ADD PUSH2 0x811 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x98F JUMPI DUP4 DUP5 REVERT JUMPDEST POP PUSH2 0x99C DUP7 DUP3 DUP8 ADD PUSH2 0x811 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MLOAD DUP1 DUP6 MSTORE PUSH1 0x20 DUP1 DUP7 ADD SWAP6 POP DUP1 DUP2 DUP4 MUL DUP5 ADD ADD DUP2 DUP7 ADD DUP6 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0xA22 JUMPI PUSH1 0x1F NOT DUP7 DUP5 SUB DUP2 ADD DUP11 MSTORE DUP3 MLOAD DUP1 MLOAD DUP6 MSTORE DUP6 ADD MLOAD PUSH1 0x40 DUP7 DUP7 ADD DUP2 SWAP1 MSTORE DUP2 MLOAD SWAP1 DUP7 ADD DUP2 SWAP1 MSTORE PUSH1 0x60 SWAP1 PUSH2 0xA05 DUP2 DUP4 DUP10 ADD DUP6 DUP12 ADD PUSH2 0xAC2 JUMP JUMPDEST SWAP12 DUP8 ADD SWAP12 PUSH1 0x1F ADD SWAP1 SWAP3 AND SWAP5 SWAP1 SWAP5 ADD ADD SWAP3 POP SWAP1 DUP4 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x9C8 JUMP JUMPDEST POP SWAP1 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0xA41 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0xAC2 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 MSTORE PUSH2 0xA5E PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x9AD JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0xA70 DUP2 DUP6 PUSH2 0x9AD JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH1 0x8 DUP6 LT PUSH2 0xA87 JUMPI INVALID JUMPDEST SWAP4 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0xABA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xADD JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xAC5 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0xAEC JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 EXTCODESIZE 0xAB PUSH25 0x9ACC1619A64B4F2FD7AEFE51F84B4EB34F989F93EDC8C78812 STATICCALL 0xB7 LT CALLVALUE PUSH5 0x736F6C6343 STOP MOD 0xC STOP CALLER ",
                "sourceMap": "742:3859:29:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;980:1791;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;2777:1822;;;;;;:::i;:::-;;:::i;980:1791::-;1153:34;1189:35;1240:26;1314:13;:20;1298:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;1280:55;;1350:9;1345:679;1370:13;:20;1365:1;:25;1345:679;;1411:17;1431:13;1445:1;1431:16;;;;;;;;;;;;;;:21;;;1411:41;;1466:47;1498:2;1484:4;:11;:16;1502:10;1466:4;:17;;:47;;;;;:::i;:::-;1529:15;1546:23;1597:13;1611:1;1597:16;;;;;;;;;;;;;;:19;;;-1:-1:-1;;;;;1589:33:29;1628:13;1642:1;1628:16;;;;;;;;;;;;;;:20;;;1650:4;1589:66;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1528:127;;;;1674:10;1670:344;;;1736:10;1704:15;1720:1;1704:18;;;;;;;;;;;;;;:29;;:42;;;;1764:14;1835:46;1878:2;1858:10;:17;:22;1835:10;:22;;:46;;;;:::i;:::-;1781:15;1797:1;1781:18;;;;;;;;;;;;;;:31;;:100;;;;1764:117;;1912:18;1903:6;:27;1899:101;;;1975:6;1954:27;;1899:101;1670:344;;1345:679;;;1392:3;;;;;1345:679;;;-1:-1:-1;2038:23:29;2034:96;;2077:42;;;2034:96;2175:14;:21;2159:38;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;2140:57;;2212:9;2207:558;2232:14;:21;2227:1;:26;2207:558;;2274:17;2294:14;2309:1;2294:17;;;;;;;;;;;;;;:22;;;2274:42;;2330:55;2362:2;2348:4;:11;:16;2366:18;2330:4;:17;;:55;;;;;:::i;:::-;2401:15;2418:23;2469:14;2484:1;2469:17;;;;;;;;;;;;;;:20;;;-1:-1:-1;;;;;2461:34:29;2501:14;2516:1;2501:17;;;;;;;;;;;;;;:21;;;2524:4;2461:68;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2400:129;;;;2548:10;2544:211;;;2611:10;2578:16;2595:1;2578:19;;;;;;;;;;;;;;:30;;:43;;;;2694:46;2737:2;2717:10;:17;:22;2694:10;:22;;:46;;;;:::i;:::-;2639:16;2656:1;2639:19;;;;;;;;;;;;;;;;;;:101;2544:211;2207:558;;;2255:3;;;;;2207:558;;;;980:1791;;;;;;;;:::o;2777:1822::-;2948:34;2984:35;3035:26;-1:-1:-1;;3035:40:29;;3120:14;:21;3104:38;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;3085:57;;3157:9;3152:698;3177:14;:21;3172:1;:26;3152:698;;3219:17;3239:14;3254:1;3239:17;;;;;;;;;;;;;;:22;;;3219:42;;3275:46;3307:2;3293:4;:11;:16;3311:9;3275:4;:17;;:46;;;;;:::i;:::-;3337:15;3354:23;3405:14;3420:1;3405:17;;;;;;;;;;;;;;:20;;;-1:-1:-1;;;;;3397:34:29;3437:14;3452:1;3437:17;;;;;;;;;;;;;;:21;;;3460:4;3397:68;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3336:129;;;;3484:10;3480:360;;;3547:10;3514:16;3531:1;3514:19;;;;;;;;;;;;;;:30;;:43;;;;3575:14;3647:46;3690:2;3670:10;:17;:22;3647:10;:22;;:46;;;;:::i;:::-;3592:16;3609:1;3592:19;;;;;;;;;;;;;;:32;;:101;;;;3575:118;;3724:1;3715:6;:10;:41;;;;;3738:18;3729:6;:27;3715:41;3711:115;;;3801:6;3780:27;;3711:115;3480:360;;3152:698;;;3200:3;;;;;3152:698;;;;-1:-1:-1;;3864:18:29;:33;3860:106;;;3913:42;;;3860:106;4010:13;:20;3994:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;3976:55;;4046:9;4041:552;4066:13;:20;4061:1;:25;4041:552;;4107:17;4127:13;4141:1;4127:16;;;;;;;;;;;;;;:21;;;4107:41;;4162:55;4194:2;4180:4;:11;:16;4198:18;4162:4;:17;;:55;;;;;:::i;:::-;4233:15;4250:23;4301:13;4315:1;4301:16;;;;;;;;;;;;;;:19;;;-1:-1:-1;;;;;4293:33:29;4332:13;4346:1;4332:16;;;;;;;;;;;;;;:20;;;4354:4;4293:66;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4232:127;;;;4378:10;4374:209;;;4440:10;4408:15;4424:1;4408:18;;;;;;;;;;;;;;:29;;:42;;;;4522:46;4565:2;4545:10;:17;:22;4522:10;:22;;:46;;;;:::i;:::-;4468:15;4484:1;4468:18;;;;;;;;;;;;;;;;;;:100;4374:209;4041:552;;;4088:3;;;;;4041:552;;16578:187:2;16720:38;16733:1;16736:5;16751;16720:12;:38::i;:::-;16578:187;;;:::o;16122:220::-;16243:14;16290:21;16302:1;16305:5;16290:11;:21::i;:::-;16282:30;-1:-1:-1;16122:220:2;;;;;:::o;15225:654::-;15382:5;15390:2;15382:10;15371:1;:8;:21;15367:306;;;15408:254;15433:228;15498:95;15611:1;:8;15637:5;15645:2;15637:10;15433:47;:228::i;:::-;15408:24;:254::i;:::-;15842:13;;15753:2;15842:13;15835:28;15821:52::o;14301:688::-;14422:14;14467:5;14475:2;14467:10;14456:1;:8;:21;14452:306;;;14493:254;14518:228;14583:95;14696:1;:8;14722:5;14730:2;14722:10;14518:47;:228::i;14493:254::-;-1:-1:-1;14936:13:2;14838:2;14936:13;14930:20;;14301:688::o;1334:378:5:-;1522:12;1274:10;1593:37;;1644:9;1667:6;1687:8;1557:148;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;1557:148:5;;;;;;;;;;;;;;-1:-1:-1;;;;;1557:148:5;-1:-1:-1;;;;;;1557:148:5;;;;;;;;;;;-1:-1:-1;1334:378:5;;;;;:::o;1531:170:7:-;1674:9;1668:16;1661:4;1650:9;1646:20;1639:46;-1:-1:-1;;;;;;;;;;;;;;;;;;;:::o;5:130::-;72:20;;-1:-1;;;;;10410:54;;11466:35;;11456:2;;11515:1;;11505:12;181:753;;323:3;316:4;308:6;304:17;300:27;290:2;;-1:-1;;331:12;290:2;378:6;365:20;8433:18;;8425:6;8422:30;8419:2;;;-1:-1;;8455:12;8419:2;8500:4;400:105;8500:4;;8492:6;8488:17;8553:15;400:105;:::i;:::-;533:21;;;391:114;-1:-1;590:14;;;565:17;;;685:1;670:258;695:6;692:1;689:13;670:258;;;778:3;765:17;569:6;753:30;1540:4;;1519:19;;753:30;1523:3;1519:19;;1515:30;1512:2;;;685:1;;1548:12;1512:2;1576:20;1540:4;1576:20;:::i;:::-;1676:49;1721:3;8500:4;753:30;;1676:49;:::i;:::-;1658:16;1651:75;1800:18;;753:30;1800:18;1787:32;8433:18;1831:6;1828:30;1825:2;;;685:1;;1861:12;1825:2;1906:58;1960:3;8500:4;1951:6;753:30;1936:22;;1906:58;:::i;:::-;1888:16;;;1881:84;-1:-1;2079:22;;;;2203:20;2040:16;;;2033:75;790;;879:14;;;;907;;;;717:1;710:9;670:258;;;674:14;;;;;;283:651;;;;:::o;943:440::-;;1044:3;1037:4;1029:6;1025:17;1021:27;1011:2;;-1:-1;;1052:12;1011:2;1099:6;1086:20;8728:18;8720:6;8717:30;8714:2;;;-1:-1;;8750:12;8714:2;1121:64;1519:19;8804:17;;-1:-1;;8800:33;8891:4;8881:15;1121:64;:::i;:::-;1112:73;;1205:6;1198:5;1191:21;1309:3;8891:4;1300:6;1233;1291:16;;1288:25;1285:2;;;1326:1;;1316:12;1285:2;10820:6;8891:4;1233:6;1229:17;8891:4;1267:5;1263:16;10797:30;10876:1;10858:16;;;8891:4;10858:16;10851:27;1267:5;1004:379;-1:-1;;1004:379::o;2273:863::-;;;;2511:2;2499:9;2490:7;2486:23;2482:32;2479:2;;;-1:-1;;2517:12;2479:2;2575:17;2562:31;2613:18;;2605:6;2602:30;2599:2;;;-1:-1;;2635:12;2599:2;2665:103;2760:7;2751:6;2740:9;2736:22;2665:103;:::i;:::-;2655:113;;2833:2;2822:9;2818:18;2805:32;2791:46;;2613:18;2849:6;2846:30;2843:2;;;-1:-1;;2879:12;2843:2;;2909:103;3004:7;2995:6;2984:9;2980:22;2909:103;:::i;:::-;2899:113;;;3049:2;3092:9;3088:22;2203:20;3057:63;;2473:663;;;;;:::o;3490:1064::-;;3675:95;3764:5;9228:12;9697:6;9692:3;9685:19;9734:4;;9729:3;9725:14;3776:120;;9734:4;;3953:6;3949:17;9729:3;3940:27;;9734:4;4065:5;9055:14;-1:-1;4104:411;4129:6;4126:1;4123:13;4104:411;;;-1:-1;;4181:20;;;;;4169:33;;4230:13;;5744:23;;6170:37;;5910:16;;5904:23;5670:4;5947:14;;;5940:38;;;9228:12;;5661:14;;;9685:19;;;9725:14;;4777:52;9228:12;9725:14;;;4799:16;;;4777:52;:::i;:::-;4494:14;;;;11257:2;11237:14;11233:28;;;4841:39;;;;;;-1:-1;9513:14;;;;4151:1;4144:9;4104:411;;;-1:-1;4538:10;;3668:886;-1:-1;;;;;;;3668:886::o;6339:271::-;;5052:5;9228:12;5163:52;5208:6;5203:3;5196:4;5189:5;5185:16;5163:52;:::i;:::-;5227:16;;;;;6473:137;-1:-1;;6473:137::o;6617:845::-;;6980:2;7001:17;6994:47;7055:162;6980:2;6969:9;6965:18;7203:6;7055:162;:::i;:::-;7265:9;7259:4;7255:20;7250:2;7239:9;7235:18;7228:48;7290:162;7447:4;7438:6;7290:162;:::i;:::-;7282:170;6951:511;-1:-1;;;;;6951:511::o;7469:510::-;7685:2;7670:18;;11378:1;11368:12;;11358:2;;11384:9;11358:2;5359:83;;;7882:2;7867:18;;6170:37;;;;7965:2;7950:18;;;6170:37;7656:323;:::o;7986:256::-;8048:2;8042:9;8074:17;;;8149:18;8134:34;;8170:22;;;8131:62;8128:2;;;8206:1;;8196:12;8128:2;8048;8215:22;8026:216;;-1:-1;8026:216::o;10893:268::-;10958:1;10965:101;10979:6;10976:1;10973:13;10965:101;;;11046:11;;;11040:18;11027:11;;;11020:39;11001:2;10994:10;10965:101;;;11081:6;11078:1;11075:13;11072:2;;;10958:1;11137:6;11132:3;11128:16;11121:27;11072:2;;10942:219;;;:::o"
            },
            "methodIdentifiers": {
                "sampleTwoHopBuy((address,bytes,uint256)[],(address,bytes,uint256)[],uint256)": "9e4a2a69",
                "sampleTwoHopSell((address,bytes,uint256)[],(address,bytes,uint256)[],uint256)": "44a3acba"
            }
        }
    },
    "sourceTreeHashHex": "0xe8035f0f89d48ceab66d4c751b2debcbb2f5aa42b4afbe6dfa9ae40c251c3a08",
    "sources": {
        "./TwoHopSampler.sol": {
            "id": 29,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol\";\n\n\ncontract TwoHopSampler {\n    using LibBytesV06 for bytes;\n\n    struct HopInfo {\n        address to;\n        bytes data;\n        uint256 gas;\n    }\n\n    struct HopResult {\n        uint256 outputAmount;\n        bytes resultData;\n    }\n\n    function sampleTwoHopSell(\n        HopInfo[] memory firstHopCalls,\n        HopInfo[] memory secondHopCalls,\n        uint256 sellAmount\n    )\n        public\n        returns (HopResult[] memory firstHopResults, HopResult[] memory secondHopResults)\n    {\n        uint256 intermediateAmount = 0;\n        firstHopResults = new HopResult[](firstHopCalls.length);\n        for (uint256 i = 0; i != firstHopCalls.length; ++i) {\n            bytes memory data = firstHopCalls[i].data;\n            data.writeUint256(data.length - 32, sellAmount);\n\n            (bool didSucceed, bytes memory resultData) =\n                address(firstHopCalls[i].to).call{gas: firstHopCalls[i].gas}(data);\n\n            if (didSucceed) {\n                firstHopResults[i].resultData = resultData;\n                uint256 amount = firstHopResults[i].outputAmount =\n                    resultData.readUint256(resultData.length - 32);\n                if (amount > intermediateAmount) {\n                    intermediateAmount = amount;\n                }\n            }\n        }\n\n        if (intermediateAmount == 0) {\n            return (firstHopResults, secondHopResults);\n        }\n\n        secondHopResults = new HopResult[](secondHopCalls.length);\n        for (uint256 i = 0; i != secondHopCalls.length; ++i) {\n            bytes memory data = secondHopCalls[i].data;\n            data.writeUint256(data.length - 32, intermediateAmount);\n\n            (bool didSucceed, bytes memory resultData) =\n                address(secondHopCalls[i].to).call{gas: secondHopCalls[i].gas}(data);\n\n            if (didSucceed) {\n                secondHopResults[i].resultData = resultData;\n                secondHopResults[i].outputAmount =\n                    resultData.readUint256(resultData.length - 32);\n            }\n        }\n    }\n\n    function sampleTwoHopBuy(\n        HopInfo[] memory firstHopCalls,\n        HopInfo[] memory secondHopCalls,\n        uint256 buyAmount\n    )\n        public\n        returns (HopResult[] memory firstHopResults, HopResult[] memory secondHopResults)\n    {\n        uint256 intermediateAmount = uint256(-1);\n        secondHopResults = new HopResult[](secondHopCalls.length);\n        for (uint256 i = 0; i != secondHopCalls.length; ++i) {\n            bytes memory data = secondHopCalls[i].data;\n            data.writeUint256(data.length - 32, buyAmount);\n\n            (bool didSucceed, bytes memory resultData) =\n                address(secondHopCalls[i].to).call{gas: secondHopCalls[i].gas}(data);\n\n            if (didSucceed) {\n                secondHopResults[i].resultData = resultData;\n                uint256 amount = secondHopResults[i].outputAmount =\n                    resultData.readUint256(resultData.length - 32);\n                if (amount > 0 && amount < intermediateAmount) {\n                    intermediateAmount = amount;\n                }\n            }\n        }\n\n        if (intermediateAmount == uint256(-1)) {\n            return (firstHopResults, secondHopResults);\n        }\n\n        firstHopResults = new HopResult[](firstHopCalls.length);\n        for (uint256 i = 0; i != firstHopCalls.length; ++i) {\n            bytes memory data = firstHopCalls[i].data;\n            data.writeUint256(data.length - 32, intermediateAmount);\n\n            (bool didSucceed, bytes memory resultData) =\n                address(firstHopCalls[i].to).call{gas: firstHopCalls[i].gas}(data);\n\n            if (didSucceed) {\n                firstHopResults[i].resultData = resultData;\n                firstHopResults[i].outputAmount =\n                    resultData.readUint256(resultData.length - 32);\n            }\n        }\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol": {
            "id": 2,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./errors/LibBytesRichErrorsV06.sol\";\nimport \"./errors/LibRichErrorsV06.sol\";\n\n\nlibrary LibBytesV06 {\n\n    using LibBytesV06 for bytes;\n\n    /// @dev Gets the memory address for a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of byte array. This\n    ///         points to the header of the byte array which contains\n    ///         the length.\n    function rawAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := input\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Gets the memory address for the contents of a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of the contents of the byte array.\n    function contentAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := add(input, 32)\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Copies `length` bytes from memory location `source` to `dest`.\n    /// @param dest memory address to copy bytes to.\n    /// @param source memory address to copy bytes from.\n    /// @param length number of bytes to copy.\n    function memCopy(\n        uint256 dest,\n        uint256 source,\n        uint256 length\n    )\n        internal\n        pure\n    {\n        if (length < 32) {\n            // Handle a partial word by reading destination and masking\n            // off the bits we are interested in.\n            // This correctly handles overlap, zero lengths and source == dest\n            assembly {\n                let mask := sub(exp(256, sub(32, length)), 1)\n                let s := and(mload(source), not(mask))\n                let d := and(mload(dest), mask)\n                mstore(dest, or(s, d))\n            }\n        } else {\n            // Skip the O(length) loop when source == dest.\n            if (source == dest) {\n                return;\n            }\n\n            // For large copies we copy whole words at a time. The final\n            // word is aligned to the end of the range (instead of after the\n            // previous) to handle partial words. So a copy will look like this:\n            //\n            //  ####\n            //      ####\n            //          ####\n            //            ####\n            //\n            // We handle overlap in the source and destination range by\n            // changing the copying direction. This prevents us from\n            // overwriting parts of source that we still need to copy.\n            //\n            // This correctly handles source == dest\n            //\n            if (source > dest) {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because it\n                    // is easier to compare with in the loop, and these\n                    // are also the addresses we need for copying the\n                    // last bytes.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the last 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the last bytes in\n                    // source already due to overlap.\n                    let last := mload(sEnd)\n\n                    // Copy whole words front to back\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} lt(source, sEnd) {} {\n                        mstore(dest, mload(source))\n                        source := add(source, 32)\n                        dest := add(dest, 32)\n                    }\n\n                    // Write the last 32 bytes\n                    mstore(dEnd, last)\n                }\n            } else {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because those\n                    // are the starting points when copying a word at the end.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the first 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the first bytes in\n                    // source already due to overlap.\n                    let first := mload(source)\n\n                    // Copy whole words back to front\n                    // We use a signed comparisson here to allow dEnd to become\n                    // negative (happens when source and dest < 32). Valid\n                    // addresses in local memory will never be larger than\n                    // 2**255, so they can be safely re-interpreted as signed.\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} slt(dest, dEnd) {} {\n                        mstore(dEnd, mload(sEnd))\n                        sEnd := sub(sEnd, 32)\n                        dEnd := sub(dEnd, 32)\n                    }\n\n                    // Write the first 32 bytes\n                    mstore(dest, first)\n                }\n            }\n        }\n    }\n\n    /// @dev Returns a slices from a byte array.\n    /// @param b The byte array to take a slice from.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function slice(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure and copy contents\n        result = new bytes(to - from);\n        memCopy(\n            result.contentAddress(),\n            b.contentAddress() + from,\n            result.length\n        );\n        return result;\n    }\n\n    /// @dev Returns a slice from a byte array without preserving the input.\n    ///      When `from == 0`, the original array will match the slice.\n    ///      In other cases its state will be corrupted.\n    /// @param b The byte array to take a slice from. Will be destroyed in the process.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function sliceDestructive(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure around [from, to) in-place.\n        assembly {\n            result := add(b, from)\n            mstore(result, sub(to, from))\n        }\n        return result;\n    }\n\n    /// @dev Pops the last byte off of a byte array by modifying its length.\n    /// @param b Byte array that will be modified.\n    /// @return result The byte that was popped off.\n    function popLastByte(bytes memory b)\n        internal\n        pure\n        returns (bytes1 result)\n    {\n        if (b.length == 0) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanZeroRequired,\n                b.length,\n                0\n            ));\n        }\n\n        // Store last byte.\n        result = b[b.length - 1];\n\n        assembly {\n            // Decrement length of byte array.\n            let newLen := sub(mload(b), 1)\n            mstore(b, newLen)\n        }\n        return result;\n    }\n\n    /// @dev Tests equality of two byte arrays.\n    /// @param lhs First byte array to compare.\n    /// @param rhs Second byte array to compare.\n    /// @return equal True if arrays are the same. False otherwise.\n    function equals(\n        bytes memory lhs,\n        bytes memory rhs\n    )\n        internal\n        pure\n        returns (bool equal)\n    {\n        // Keccak gas cost is 30 + numWords * 6. This is a cheap way to compare.\n        // We early exit on unequal lengths, but keccak would also correctly\n        // handle this.\n        return lhs.length == rhs.length && keccak256(lhs) == keccak256(rhs);\n    }\n\n    /// @dev Reads an address from a position in a byte array.\n    /// @param b Byte array containing an address.\n    /// @param index Index in byte array of address.\n    /// @return result address from byte array.\n    function readAddress(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (address result)\n    {\n        if (b.length < index + 20) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Read address from array memory\n        assembly {\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 20-byte mask to obtain address\n            result := and(mload(add(b, index)), 0xffffffffffffffffffffffffffffffffffffffff)\n        }\n        return result;\n    }\n\n    /// @dev Writes an address into a specific position in a byte array.\n    /// @param b Byte array to insert address into.\n    /// @param index Index in byte array of address.\n    /// @param input Address to put into byte array.\n    function writeAddress(\n        bytes memory b,\n        uint256 index,\n        address input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 20) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Store address into array memory\n        assembly {\n            // The address occupies 20 bytes and mstore stores 32 bytes.\n            // First fetch the 32-byte word where we'll be storing the address, then\n            // apply a mask so we have only the bytes in the word that the address will not occupy.\n            // Then combine these bytes with the address and store the 32 bytes back to memory with mstore.\n\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 12-byte mask to obtain extra bytes occupying word of memory where we'll store the address\n            let neighbors := and(\n                mload(add(b, index)),\n                0xffffffffffffffffffffffff0000000000000000000000000000000000000000\n            )\n\n            // Make sure input address is clean.\n            // (Solidity does not guarantee this)\n            input := and(input, 0xffffffffffffffffffffffffffffffffffffffff)\n\n            // Store the neighbors and address into memory\n            mstore(add(b, index), xor(input, neighbors))\n        }\n    }\n\n    /// @dev Reads a bytes32 value from a position in a byte array.\n    /// @param b Byte array containing a bytes32 value.\n    /// @param index Index in byte array of bytes32 value.\n    /// @return result bytes32 value from byte array.\n    function readBytes32(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        if (b.length < index + 32) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            result := mload(add(b, index))\n        }\n        return result;\n    }\n\n    /// @dev Writes a bytes32 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input bytes32 to put into byte array.\n    function writeBytes32(\n        bytes memory b,\n        uint256 index,\n        bytes32 input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 32) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            mstore(add(b, index), input)\n        }\n    }\n\n    /// @dev Reads a uint256 value from a position in a byte array.\n    /// @param b Byte array containing a uint256 value.\n    /// @param index Index in byte array of uint256 value.\n    /// @return result uint256 value from byte array.\n    function readUint256(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (uint256 result)\n    {\n        result = uint256(readBytes32(b, index));\n        return result;\n    }\n\n    /// @dev Writes a uint256 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input uint256 to put into byte array.\n    function writeUint256(\n        bytes memory b,\n        uint256 index,\n        uint256 input\n    )\n        internal\n        pure\n    {\n        writeBytes32(b, index, bytes32(input));\n    }\n\n    /// @dev Reads an unpadded bytes4 value from a position in a byte array.\n    /// @param b Byte array containing a bytes4 value.\n    /// @param index Index in byte array of bytes4 value.\n    /// @return result bytes4 value from byte array.\n    function readBytes4(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes4 result)\n    {\n        if (b.length < index + 4) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsFourRequired,\n                b.length,\n                index + 4\n            ));\n        }\n\n        // Arrays are prefixed by a 32 byte length field\n        index += 32;\n\n        // Read the bytes4 from array memory\n        assembly {\n            result := mload(add(b, index))\n            // Solidity does not require us to clean the trailing bytes.\n            // We do it anyway\n            result := and(result, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)\n        }\n        return result;\n    }\n\n    /// @dev Writes a new length to a byte array.\n    ///      Decreasing length will lead to removing the corresponding lower order bytes from the byte array.\n    ///      Increasing length may lead to appending adjacent in-memory bytes to the end of the byte array.\n    /// @param b Bytes array to write new length to.\n    /// @param length New length of byte array.\n    function writeLength(bytes memory b, uint256 length)\n        internal\n        pure\n    {\n        assembly {\n            mstore(b, length)\n        }\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/errors/LibBytesRichErrorsV06.sol": {
            "id": 5,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibBytesRichErrorsV06 {\n\n    enum InvalidByteOperationErrorCodes {\n        FromLessThanOrEqualsToRequired,\n        ToLessThanOrEqualsLengthRequired,\n        LengthGreaterThanZeroRequired,\n        LengthGreaterThanOrEqualsFourRequired,\n        LengthGreaterThanOrEqualsTwentyRequired,\n        LengthGreaterThanOrEqualsThirtyTwoRequired,\n        LengthGreaterThanOrEqualsNestedBytesLengthRequired,\n        DestinationLengthGreaterThanOrEqualSourceLengthRequired\n    }\n\n    // bytes4(keccak256(\"InvalidByteOperationError(uint8,uint256,uint256)\"))\n    bytes4 internal constant INVALID_BYTE_OPERATION_ERROR_SELECTOR =\n        0x28006595;\n\n    // solhint-disable func-name-mixedcase\n    function InvalidByteOperationError(\n        InvalidByteOperationErrorCodes errorCode,\n        uint256 offset,\n        uint256 required\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            INVALID_BYTE_OPERATION_ERROR_SELECTOR,\n            errorCode,\n            offset,\n            required\n        );\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol": {
            "id": 7,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibRichErrorsV06 {\n\n    // bytes4(keccak256(\"Error(string)\"))\n    bytes4 internal constant STANDARD_ERROR_SELECTOR = 0x08c379a0;\n\n    // solhint-disable func-name-mixedcase\n    /// @dev ABI encode a standard, string revert error payload.\n    ///      This is the same payload that would be included by a `revert(string)`\n    ///      solidity statement. It has the function signature `Error(string)`.\n    /// @param message The error string.\n    /// @return The ABI encoded error.\n    function StandardError(string memory message)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            STANDARD_ERROR_SELECTOR,\n            bytes(message)\n        );\n    }\n    // solhint-enable func-name-mixedcase\n\n    /// @dev Reverts an encoded rich revert reason `errorData`.\n    /// @param errorData ABI encoded error data.\n    function rrevert(bytes memory errorData)\n        internal\n        pure\n    {\n        assembly {\n            revert(add(errorData, 0x20), mload(errorData))\n        }\n    }\n}\n"
        }
    },
    "sourceCodes": {
        "./TwoHopSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol\";\n\n\ncontract TwoHopSampler {\n    using LibBytesV06 for bytes;\n\n    struct HopInfo {\n        address to;\n        bytes data;\n        uint256 gas;\n    }\n\n    struct HopResult {\n        uint256 outputAmount;\n        bytes resultData;\n    }\n\n    function sampleTwoHopSell(\n        HopInfo[] memory firstHopCalls,\n        HopInfo[] memory secondHopCalls,\n        uint256 sellAmount\n    )\n        public\n        returns (HopResult[] memory firstHopResults, HopResult[] memory secondHopResults)\n    {\n        uint256 intermediateAmount = 0;\n        firstHopResults = new HopResult[](firstHopCalls.length);\n        for (uint256 i = 0; i != firstHopCalls.length; ++i) {\n            bytes memory data = firstHopCalls[i].data;\n            data.writeUint256(data.length - 32, sellAmount);\n\n            (bool didSucceed, bytes memory resultData) =\n                address(firstHopCalls[i].to).call{gas: firstHopCalls[i].gas}(data);\n\n            if (didSucceed) {\n                firstHopResults[i].resultData = resultData;\n                uint256 amount = firstHopResults[i].outputAmount =\n                    resultData.readUint256(resultData.length - 32);\n                if (amount > intermediateAmount) {\n                    intermediateAmount = amount;\n                }\n            }\n        }\n\n        if (intermediateAmount == 0) {\n            return (firstHopResults, secondHopResults);\n        }\n\n        secondHopResults = new HopResult[](secondHopCalls.length);\n        for (uint256 i = 0; i != secondHopCalls.length; ++i) {\n            bytes memory data = secondHopCalls[i].data;\n            data.writeUint256(data.length - 32, intermediateAmount);\n\n            (bool didSucceed, bytes memory resultData) =\n                address(secondHopCalls[i].to).call{gas: secondHopCalls[i].gas}(data);\n\n            if (didSucceed) {\n                secondHopResults[i].resultData = resultData;\n                secondHopResults[i].outputAmount =\n                    resultData.readUint256(resultData.length - 32);\n            }\n        }\n    }\n\n    function sampleTwoHopBuy(\n        HopInfo[] memory firstHopCalls,\n        HopInfo[] memory secondHopCalls,\n        uint256 buyAmount\n    )\n        public\n        returns (HopResult[] memory firstHopResults, HopResult[] memory secondHopResults)\n    {\n        uint256 intermediateAmount = uint256(-1);\n        secondHopResults = new HopResult[](secondHopCalls.length);\n        for (uint256 i = 0; i != secondHopCalls.length; ++i) {\n            bytes memory data = secondHopCalls[i].data;\n            data.writeUint256(data.length - 32, buyAmount);\n\n            (bool didSucceed, bytes memory resultData) =\n                address(secondHopCalls[i].to).call{gas: secondHopCalls[i].gas}(data);\n\n            if (didSucceed) {\n                secondHopResults[i].resultData = resultData;\n                uint256 amount = secondHopResults[i].outputAmount =\n                    resultData.readUint256(resultData.length - 32);\n                if (amount > 0 && amount < intermediateAmount) {\n                    intermediateAmount = amount;\n                }\n            }\n        }\n\n        if (intermediateAmount == uint256(-1)) {\n            return (firstHopResults, secondHopResults);\n        }\n\n        firstHopResults = new HopResult[](firstHopCalls.length);\n        for (uint256 i = 0; i != firstHopCalls.length; ++i) {\n            bytes memory data = firstHopCalls[i].data;\n            data.writeUint256(data.length - 32, intermediateAmount);\n\n            (bool didSucceed, bytes memory resultData) =\n                address(firstHopCalls[i].to).call{gas: firstHopCalls[i].gas}(data);\n\n            if (didSucceed) {\n                firstHopResults[i].resultData = resultData;\n                firstHopResults[i].outputAmount =\n                    resultData.readUint256(resultData.length - 32);\n            }\n        }\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./errors/LibBytesRichErrorsV06.sol\";\nimport \"./errors/LibRichErrorsV06.sol\";\n\n\nlibrary LibBytesV06 {\n\n    using LibBytesV06 for bytes;\n\n    /// @dev Gets the memory address for a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of byte array. This\n    ///         points to the header of the byte array which contains\n    ///         the length.\n    function rawAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := input\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Gets the memory address for the contents of a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of the contents of the byte array.\n    function contentAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := add(input, 32)\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Copies `length` bytes from memory location `source` to `dest`.\n    /// @param dest memory address to copy bytes to.\n    /// @param source memory address to copy bytes from.\n    /// @param length number of bytes to copy.\n    function memCopy(\n        uint256 dest,\n        uint256 source,\n        uint256 length\n    )\n        internal\n        pure\n    {\n        if (length < 32) {\n            // Handle a partial word by reading destination and masking\n            // off the bits we are interested in.\n            // This correctly handles overlap, zero lengths and source == dest\n            assembly {\n                let mask := sub(exp(256, sub(32, length)), 1)\n                let s := and(mload(source), not(mask))\n                let d := and(mload(dest), mask)\n                mstore(dest, or(s, d))\n            }\n        } else {\n            // Skip the O(length) loop when source == dest.\n            if (source == dest) {\n                return;\n            }\n\n            // For large copies we copy whole words at a time. The final\n            // word is aligned to the end of the range (instead of after the\n            // previous) to handle partial words. So a copy will look like this:\n            //\n            //  ####\n            //      ####\n            //          ####\n            //            ####\n            //\n            // We handle overlap in the source and destination range by\n            // changing the copying direction. This prevents us from\n            // overwriting parts of source that we still need to copy.\n            //\n            // This correctly handles source == dest\n            //\n            if (source > dest) {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because it\n                    // is easier to compare with in the loop, and these\n                    // are also the addresses we need for copying the\n                    // last bytes.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the last 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the last bytes in\n                    // source already due to overlap.\n                    let last := mload(sEnd)\n\n                    // Copy whole words front to back\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} lt(source, sEnd) {} {\n                        mstore(dest, mload(source))\n                        source := add(source, 32)\n                        dest := add(dest, 32)\n                    }\n\n                    // Write the last 32 bytes\n                    mstore(dEnd, last)\n                }\n            } else {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because those\n                    // are the starting points when copying a word at the end.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the first 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the first bytes in\n                    // source already due to overlap.\n                    let first := mload(source)\n\n                    // Copy whole words back to front\n                    // We use a signed comparisson here to allow dEnd to become\n                    // negative (happens when source and dest < 32). Valid\n                    // addresses in local memory will never be larger than\n                    // 2**255, so they can be safely re-interpreted as signed.\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} slt(dest, dEnd) {} {\n                        mstore(dEnd, mload(sEnd))\n                        sEnd := sub(sEnd, 32)\n                        dEnd := sub(dEnd, 32)\n                    }\n\n                    // Write the first 32 bytes\n                    mstore(dest, first)\n                }\n            }\n        }\n    }\n\n    /// @dev Returns a slices from a byte array.\n    /// @param b The byte array to take a slice from.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function slice(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure and copy contents\n        result = new bytes(to - from);\n        memCopy(\n            result.contentAddress(),\n            b.contentAddress() + from,\n            result.length\n        );\n        return result;\n    }\n\n    /// @dev Returns a slice from a byte array without preserving the input.\n    ///      When `from == 0`, the original array will match the slice.\n    ///      In other cases its state will be corrupted.\n    /// @param b The byte array to take a slice from. Will be destroyed in the process.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function sliceDestructive(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure around [from, to) in-place.\n        assembly {\n            result := add(b, from)\n            mstore(result, sub(to, from))\n        }\n        return result;\n    }\n\n    /// @dev Pops the last byte off of a byte array by modifying its length.\n    /// @param b Byte array that will be modified.\n    /// @return result The byte that was popped off.\n    function popLastByte(bytes memory b)\n        internal\n        pure\n        returns (bytes1 result)\n    {\n        if (b.length == 0) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanZeroRequired,\n                b.length,\n                0\n            ));\n        }\n\n        // Store last byte.\n        result = b[b.length - 1];\n\n        assembly {\n            // Decrement length of byte array.\n            let newLen := sub(mload(b), 1)\n            mstore(b, newLen)\n        }\n        return result;\n    }\n\n    /// @dev Tests equality of two byte arrays.\n    /// @param lhs First byte array to compare.\n    /// @param rhs Second byte array to compare.\n    /// @return equal True if arrays are the same. False otherwise.\n    function equals(\n        bytes memory lhs,\n        bytes memory rhs\n    )\n        internal\n        pure\n        returns (bool equal)\n    {\n        // Keccak gas cost is 30 + numWords * 6. This is a cheap way to compare.\n        // We early exit on unequal lengths, but keccak would also correctly\n        // handle this.\n        return lhs.length == rhs.length && keccak256(lhs) == keccak256(rhs);\n    }\n\n    /// @dev Reads an address from a position in a byte array.\n    /// @param b Byte array containing an address.\n    /// @param index Index in byte array of address.\n    /// @return result address from byte array.\n    function readAddress(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (address result)\n    {\n        if (b.length < index + 20) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Read address from array memory\n        assembly {\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 20-byte mask to obtain address\n            result := and(mload(add(b, index)), 0xffffffffffffffffffffffffffffffffffffffff)\n        }\n        return result;\n    }\n\n    /// @dev Writes an address into a specific position in a byte array.\n    /// @param b Byte array to insert address into.\n    /// @param index Index in byte array of address.\n    /// @param input Address to put into byte array.\n    function writeAddress(\n        bytes memory b,\n        uint256 index,\n        address input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 20) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Store address into array memory\n        assembly {\n            // The address occupies 20 bytes and mstore stores 32 bytes.\n            // First fetch the 32-byte word where we'll be storing the address, then\n            // apply a mask so we have only the bytes in the word that the address will not occupy.\n            // Then combine these bytes with the address and store the 32 bytes back to memory with mstore.\n\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 12-byte mask to obtain extra bytes occupying word of memory where we'll store the address\n            let neighbors := and(\n                mload(add(b, index)),\n                0xffffffffffffffffffffffff0000000000000000000000000000000000000000\n            )\n\n            // Make sure input address is clean.\n            // (Solidity does not guarantee this)\n            input := and(input, 0xffffffffffffffffffffffffffffffffffffffff)\n\n            // Store the neighbors and address into memory\n            mstore(add(b, index), xor(input, neighbors))\n        }\n    }\n\n    /// @dev Reads a bytes32 value from a position in a byte array.\n    /// @param b Byte array containing a bytes32 value.\n    /// @param index Index in byte array of bytes32 value.\n    /// @return result bytes32 value from byte array.\n    function readBytes32(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        if (b.length < index + 32) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            result := mload(add(b, index))\n        }\n        return result;\n    }\n\n    /// @dev Writes a bytes32 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input bytes32 to put into byte array.\n    function writeBytes32(\n        bytes memory b,\n        uint256 index,\n        bytes32 input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 32) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            mstore(add(b, index), input)\n        }\n    }\n\n    /// @dev Reads a uint256 value from a position in a byte array.\n    /// @param b Byte array containing a uint256 value.\n    /// @param index Index in byte array of uint256 value.\n    /// @return result uint256 value from byte array.\n    function readUint256(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (uint256 result)\n    {\n        result = uint256(readBytes32(b, index));\n        return result;\n    }\n\n    /// @dev Writes a uint256 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input uint256 to put into byte array.\n    function writeUint256(\n        bytes memory b,\n        uint256 index,\n        uint256 input\n    )\n        internal\n        pure\n    {\n        writeBytes32(b, index, bytes32(input));\n    }\n\n    /// @dev Reads an unpadded bytes4 value from a position in a byte array.\n    /// @param b Byte array containing a bytes4 value.\n    /// @param index Index in byte array of bytes4 value.\n    /// @return result bytes4 value from byte array.\n    function readBytes4(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes4 result)\n    {\n        if (b.length < index + 4) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsFourRequired,\n                b.length,\n                index + 4\n            ));\n        }\n\n        // Arrays are prefixed by a 32 byte length field\n        index += 32;\n\n        // Read the bytes4 from array memory\n        assembly {\n            result := mload(add(b, index))\n            // Solidity does not require us to clean the trailing bytes.\n            // We do it anyway\n            result := and(result, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)\n        }\n        return result;\n    }\n\n    /// @dev Writes a new length to a byte array.\n    ///      Decreasing length will lead to removing the corresponding lower order bytes from the byte array.\n    ///      Increasing length may lead to appending adjacent in-memory bytes to the end of the byte array.\n    /// @param b Bytes array to write new length to.\n    /// @param length New length of byte array.\n    function writeLength(bytes memory b, uint256 length)\n        internal\n        pure\n    {\n        assembly {\n            mstore(b, length)\n        }\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/errors/LibBytesRichErrorsV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibBytesRichErrorsV06 {\n\n    enum InvalidByteOperationErrorCodes {\n        FromLessThanOrEqualsToRequired,\n        ToLessThanOrEqualsLengthRequired,\n        LengthGreaterThanZeroRequired,\n        LengthGreaterThanOrEqualsFourRequired,\n        LengthGreaterThanOrEqualsTwentyRequired,\n        LengthGreaterThanOrEqualsThirtyTwoRequired,\n        LengthGreaterThanOrEqualsNestedBytesLengthRequired,\n        DestinationLengthGreaterThanOrEqualSourceLengthRequired\n    }\n\n    // bytes4(keccak256(\"InvalidByteOperationError(uint8,uint256,uint256)\"))\n    bytes4 internal constant INVALID_BYTE_OPERATION_ERROR_SELECTOR =\n        0x28006595;\n\n    // solhint-disable func-name-mixedcase\n    function InvalidByteOperationError(\n        InvalidByteOperationErrorCodes errorCode,\n        uint256 offset,\n        uint256 required\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            INVALID_BYTE_OPERATION_ERROR_SELECTOR,\n            errorCode,\n            offset,\n            required\n        );\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibRichErrorsV06 {\n\n    // bytes4(keccak256(\"Error(string)\"))\n    bytes4 internal constant STANDARD_ERROR_SELECTOR = 0x08c379a0;\n\n    // solhint-disable func-name-mixedcase\n    /// @dev ABI encode a standard, string revert error payload.\n    ///      This is the same payload that would be included by a `revert(string)`\n    ///      solidity statement. It has the function signature `Error(string)`.\n    /// @param message The error string.\n    /// @return The ABI encoded error.\n    function StandardError(string memory message)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            STANDARD_ERROR_SELECTOR,\n            bytes(message)\n        );\n    }\n    // solhint-enable func-name-mixedcase\n\n    /// @dev Reverts an encoded rich revert reason `errorData`.\n    /// @param errorData ABI encoded error data.\n    function rrevert(bytes memory errorData)\n        internal\n        pure\n    {\n        assembly {\n            revert(add(errorData, 0x20), mload(errorData))\n        }\n    }\n}\n"
    },
    "compiler": {
        "name": "solc",
        "version": "0.6.12+commit.27d51765",
        "settings": {
            "remappings": [
                "@0x/contracts-erc20=/home/merklejerk/code/0x-protocol/node_modules/@0x/contracts-erc20",
                "@0x/contracts-utils=/home/merklejerk/code/0x-protocol/node_modules/@0x/contracts-utils",
                "@0x/contracts-zero-ex=/home/merklejerk/code/0x-protocol/packages/asset-swapper/node_modules/@0x/contracts-zero-ex"
            ],
            "optimizer": {
                "enabled": true,
                "runs": 200,
                "details": {
                    "yul": true,
                    "deduplicate": true
                }
            },
            "outputSelection": {
                "*": {
                    "*": [
                        "abi",
                        "devdoc",
                        "evm.bytecode.object",
                        "evm.bytecode.sourceMap",
                        "evm.deployedBytecode.object",
                        "evm.deployedBytecode.sourceMap",
                        "evm.methodIdentifiers"
                    ]
                }
            },
            "evmVersion": "istanbul"
        }
    },
    "chains": {}
}
