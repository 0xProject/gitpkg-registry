{
    "schemaVersion": "2.0.0",
    "contractName": "TwoHopSampler",
    "compilerOutput": {
        "abi": [
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "to",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes",
                                "name": "data",
                                "type": "bytes"
                            },
                            {
                                "internalType": "uint256",
                                "name": "gas",
                                "type": "uint256"
                            }
                        ],
                        "internalType": "struct TwoHopSampler.HopInfo[]",
                        "name": "firstHopCalls",
                        "type": "tuple[]"
                    },
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "to",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes",
                                "name": "data",
                                "type": "bytes"
                            },
                            {
                                "internalType": "uint256",
                                "name": "gas",
                                "type": "uint256"
                            }
                        ],
                        "internalType": "struct TwoHopSampler.HopInfo[]",
                        "name": "secondHopCalls",
                        "type": "tuple[]"
                    },
                    {
                        "internalType": "uint256",
                        "name": "buyAmount",
                        "type": "uint256"
                    }
                ],
                "name": "sampleTwoHopBuy",
                "outputs": [
                    {
                        "components": [
                            {
                                "internalType": "uint256",
                                "name": "outputAmount",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "firstHopIndex",
                                "type": "uint256"
                            },
                            {
                                "internalType": "bytes",
                                "name": "firstHopResult",
                                "type": "bytes"
                            },
                            {
                                "internalType": "uint256",
                                "name": "secondHopIndex",
                                "type": "uint256"
                            },
                            {
                                "internalType": "bytes",
                                "name": "secondHopResult",
                                "type": "bytes"
                            }
                        ],
                        "internalType": "struct TwoHopSampler.TwoHopResult",
                        "name": "result",
                        "type": "tuple"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "to",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes",
                                "name": "data",
                                "type": "bytes"
                            },
                            {
                                "internalType": "uint256",
                                "name": "gas",
                                "type": "uint256"
                            }
                        ],
                        "internalType": "struct TwoHopSampler.HopInfo[]",
                        "name": "firstHopCalls",
                        "type": "tuple[]"
                    },
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "to",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes",
                                "name": "data",
                                "type": "bytes"
                            },
                            {
                                "internalType": "uint256",
                                "name": "gas",
                                "type": "uint256"
                            }
                        ],
                        "internalType": "struct TwoHopSampler.HopInfo[]",
                        "name": "secondHopCalls",
                        "type": "tuple[]"
                    },
                    {
                        "internalType": "uint256",
                        "name": "sellAmount",
                        "type": "uint256"
                    }
                ],
                "name": "sampleTwoHopSell",
                "outputs": [
                    {
                        "components": [
                            {
                                "internalType": "uint256",
                                "name": "outputAmount",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "firstHopIndex",
                                "type": "uint256"
                            },
                            {
                                "internalType": "bytes",
                                "name": "firstHopResult",
                                "type": "bytes"
                            },
                            {
                                "internalType": "uint256",
                                "name": "secondHopIndex",
                                "type": "uint256"
                            },
                            {
                                "internalType": "bytes",
                                "name": "secondHopResult",
                                "type": "bytes"
                            }
                        ],
                        "internalType": "struct TwoHopSampler.TwoHopResult",
                        "name": "result",
                        "type": "tuple"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            }
        ],
        "devdoc": {
            "kind": "dev",
            "methods": {},
            "version": 1
        },
        "evm": {
            "bytecode": {
                "linkReferences": {},
                "object": "0x608060405234801561001057600080fd5b5061095a806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806344a3acba1461003b5780639e4a2a6914610064575b600080fd5b61004e610049366004610751565b610077565b60405161005b9190610825565b60405180910390f35b61004e610072366004610751565b6102d4565b61007f61061c565b6000805b8551811461019e57606086828151811061009957fe5b60200260200101516020015190506100c0602082510386836105489092919063ffffffff16565b600060608884815181106100d057fe5b6020026020010151600001516001600160a01b03168985815181106100f157fe5b6020026020010151604001518460405161010b91906107e7565b60006040518083038160008787f1925050503d8060008114610149576040519150601f19603f3d011682016040523d82523d6000602084013e61014e565b606091505b5091509150811561019057600061017260208351038361055890919063ffffffff16565b90508581111561018e5760208701859052604087018290529450845b505b505050806001019050610083565b50806101aa57506102cd565b60005b845181146102ca5760608582815181106101c357fe5b60200260200101516020015190506101ea602082510384836105489092919063ffffffff16565b600060608784815181106101fa57fe5b6020026020010151600001516001600160a01b031688858151811061021b57fe5b6020026020010151604001518460405161023591906107e7565b60006040518083038160008787f1925050503d8060008114610273576040519150601f19603f3d011682016040523d82523d6000602084013e610278565b606091505b509150915081156102bc57600061029c60208351038361055890919063ffffffff16565b87519091508111156102ba5780875260608701859052608087018290525b505b5050508060010190506101ad565b50505b9392505050565b6102dc61061c565b60001980825260005b8451811461040c5760608582815181106102fb57fe5b6020026020010151602001519050610322602082510386836105489092919063ffffffff16565b6000606087848151811061033257fe5b6020026020010151600001516001600160a01b031688858151811061035357fe5b6020026020010151604001518460405161036d91906107e7565b60006040518083038160008787f1925050503d80600081146103ab576040519150601f19603f3d011682016040523d82523d6000602084013e6103b0565b606091505b509150915081156103fe5760006103d460208351038361055890919063ffffffff16565b90506000811180156103e557508581105b156103fc5760608701859052608087018290529450845b505b5050508060010190506102e5565b5060001981141561041d57506102cd565b60005b855181146102ca57606086828151811061043657fe5b602002602001015160200151905061045d602082510384836105489092919063ffffffff16565b6000606088848151811061046d57fe5b6020026020010151600001516001600160a01b031689858151811061048e57fe5b602002602001015160400151846040516104a891906107e7565b60006040518083038160008787f1925050503d80600081146104e6576040519150601f19603f3d011682016040523d82523d6000602084013e6104eb565b606091505b5091509150811561053a57600061050f60208351038361055890919063ffffffff16565b90506000811180156105215750865181105b156105385780875260208701859052604087018290525b505b505050806001019050610420565b610553838383610564565b505050565b60006102cd8383610590565b81602001835110156105885761058861058360058551856020016105ba565b610614565b910160200152565b600081602001835110156105b1576105b161058360058551856020016105ba565b50016020015190565b6060632800659560e01b8484846040516024016105d993929190610803565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915290509392505050565b805160208201fd5b6040518060a0016040528060008152602001600081526020016060815260200160008152602001606081525090565b600082601f83011261065b578081fd5b813567ffffffffffffffff80821115610672578283fd5b60206106818182850201610885565b838152935080840185820160005b858110156107455781358801606080601f19838d030112156106b057600080fd5b6106b981610885565b868301356106c68161090c565b8152604083810135898111156106db57600080fd5b8401603f81018e136106ec57600080fd5b888101356107016106fc826108ac565b610885565b8181528f8483850101111561071557600080fd5b610724828c83018686016108d0565b8a85015250509190920135908201528352918301919083019060010161068f565b50505050505092915050565b600080600060608486031215610765578283fd5b833567ffffffffffffffff8082111561077c578485fd5b6107888783880161064b565b9450602086013591508082111561079d578384fd5b506107aa8682870161064b565b925050604084013590509250925092565b600081518084526107d38160208601602086016108dc565b601f01601f19169290920160200192915050565b600082516107f98184602087016108dc565b9190910192915050565b606081016008851061081157fe5b938152602081019290925260409091015290565b6000602082528251602083015260208301516040830152604083015160a0606084015261085560c08401826107bb565b9050606084015160808401526080840151601f198483030160a085015261087c82826107bb565b95945050505050565b60405181810167ffffffffffffffff811182821017156108a457600080fd5b604052919050565b600067ffffffffffffffff8211156108c2578081fd5b50601f01601f191660200190565b82818337506000910152565b60005b838110156108f75781810151838201526020016108df565b83811115610906576000848401525b50505050565b6001600160a01b038116811461092157600080fd5b5056fea2646970667358221220fc9c68f47b04d772db98e89120cf1c14b6bbdfd6ad0bc8494132f33b92d2891164736f6c634300060c0033",
                "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x95A DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x36 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x44A3ACBA EQ PUSH2 0x3B JUMPI DUP1 PUSH4 0x9E4A2A69 EQ PUSH2 0x64 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4E PUSH2 0x49 CALLDATASIZE PUSH1 0x4 PUSH2 0x751 JUMP JUMPDEST PUSH2 0x77 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x5B SWAP2 SWAP1 PUSH2 0x825 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x4E PUSH2 0x72 CALLDATASIZE PUSH1 0x4 PUSH2 0x751 JUMP JUMPDEST PUSH2 0x2D4 JUMP JUMPDEST PUSH2 0x7F PUSH2 0x61C JUMP JUMPDEST PUSH1 0x0 DUP1 JUMPDEST DUP6 MLOAD DUP2 EQ PUSH2 0x19E JUMPI PUSH1 0x60 DUP7 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x99 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD SWAP1 POP PUSH2 0xC0 PUSH1 0x20 DUP3 MLOAD SUB DUP7 DUP4 PUSH2 0x548 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP9 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xD0 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0xF1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 ADD MLOAD DUP5 PUSH1 0x40 MLOAD PUSH2 0x10B SWAP2 SWAP1 PUSH2 0x7E7 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP8 CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x149 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x14E JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0x190 JUMPI PUSH1 0x0 PUSH2 0x172 PUSH1 0x20 DUP4 MLOAD SUB DUP4 PUSH2 0x558 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP6 DUP2 GT ISZERO PUSH2 0x18E JUMPI PUSH1 0x20 DUP8 ADD DUP6 SWAP1 MSTORE PUSH1 0x40 DUP8 ADD DUP3 SWAP1 MSTORE SWAP5 POP DUP5 JUMPDEST POP JUMPDEST POP POP POP DUP1 PUSH1 0x1 ADD SWAP1 POP PUSH2 0x83 JUMP JUMPDEST POP DUP1 PUSH2 0x1AA JUMPI POP PUSH2 0x2CD JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 EQ PUSH2 0x2CA JUMPI PUSH1 0x60 DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1C3 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD SWAP1 POP PUSH2 0x1EA PUSH1 0x20 DUP3 MLOAD SUB DUP5 DUP4 PUSH2 0x548 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x1FA JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP9 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x21B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 ADD MLOAD DUP5 PUSH1 0x40 MLOAD PUSH2 0x235 SWAP2 SWAP1 PUSH2 0x7E7 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP8 CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x273 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x278 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0x2BC JUMPI PUSH1 0x0 PUSH2 0x29C PUSH1 0x20 DUP4 MLOAD SUB DUP4 PUSH2 0x558 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP8 MLOAD SWAP1 SWAP2 POP DUP2 GT ISZERO PUSH2 0x2BA JUMPI DUP1 DUP8 MSTORE PUSH1 0x60 DUP8 ADD DUP6 SWAP1 MSTORE PUSH1 0x80 DUP8 ADD DUP3 SWAP1 MSTORE JUMPDEST POP JUMPDEST POP POP POP DUP1 PUSH1 0x1 ADD SWAP1 POP PUSH2 0x1AD JUMP JUMPDEST POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x2DC PUSH2 0x61C JUMP JUMPDEST PUSH1 0x0 NOT DUP1 DUP3 MSTORE PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 EQ PUSH2 0x40C JUMPI PUSH1 0x60 DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2FB JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD SWAP1 POP PUSH2 0x322 PUSH1 0x20 DUP3 MLOAD SUB DUP7 DUP4 PUSH2 0x548 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x332 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP9 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x353 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 ADD MLOAD DUP5 PUSH1 0x40 MLOAD PUSH2 0x36D SWAP2 SWAP1 PUSH2 0x7E7 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP8 CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x3AB JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x3B0 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0x3FE JUMPI PUSH1 0x0 PUSH2 0x3D4 PUSH1 0x20 DUP4 MLOAD SUB DUP4 PUSH2 0x558 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 GT DUP1 ISZERO PUSH2 0x3E5 JUMPI POP DUP6 DUP2 LT JUMPDEST ISZERO PUSH2 0x3FC JUMPI PUSH1 0x60 DUP8 ADD DUP6 SWAP1 MSTORE PUSH1 0x80 DUP8 ADD DUP3 SWAP1 MSTORE SWAP5 POP DUP5 JUMPDEST POP JUMPDEST POP POP POP DUP1 PUSH1 0x1 ADD SWAP1 POP PUSH2 0x2E5 JUMP JUMPDEST POP PUSH1 0x0 NOT DUP2 EQ ISZERO PUSH2 0x41D JUMPI POP PUSH2 0x2CD JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP6 MLOAD DUP2 EQ PUSH2 0x2CA JUMPI PUSH1 0x60 DUP7 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x436 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD SWAP1 POP PUSH2 0x45D PUSH1 0x20 DUP3 MLOAD SUB DUP5 DUP4 PUSH2 0x548 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP9 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x46D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x48E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 ADD MLOAD DUP5 PUSH1 0x40 MLOAD PUSH2 0x4A8 SWAP2 SWAP1 PUSH2 0x7E7 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP8 CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x4E6 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x4EB JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0x53A JUMPI PUSH1 0x0 PUSH2 0x50F PUSH1 0x20 DUP4 MLOAD SUB DUP4 PUSH2 0x558 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 GT DUP1 ISZERO PUSH2 0x521 JUMPI POP DUP7 MLOAD DUP2 LT JUMPDEST ISZERO PUSH2 0x538 JUMPI DUP1 DUP8 MSTORE PUSH1 0x20 DUP8 ADD DUP6 SWAP1 MSTORE PUSH1 0x40 DUP8 ADD DUP3 SWAP1 MSTORE JUMPDEST POP JUMPDEST POP POP POP DUP1 PUSH1 0x1 ADD SWAP1 POP PUSH2 0x420 JUMP JUMPDEST PUSH2 0x553 DUP4 DUP4 DUP4 PUSH2 0x564 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2CD DUP4 DUP4 PUSH2 0x590 JUMP JUMPDEST DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO PUSH2 0x588 JUMPI PUSH2 0x588 PUSH2 0x583 PUSH1 0x5 DUP6 MLOAD DUP6 PUSH1 0x20 ADD PUSH2 0x5BA JUMP JUMPDEST PUSH2 0x614 JUMP JUMPDEST SWAP2 ADD PUSH1 0x20 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO PUSH2 0x5B1 JUMPI PUSH2 0x5B1 PUSH2 0x583 PUSH1 0x5 DUP6 MLOAD DUP6 PUSH1 0x20 ADD PUSH2 0x5BA JUMP JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH4 0x28006595 PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x5D9 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x803 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x65B JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x672 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x20 PUSH2 0x681 DUP2 DUP3 DUP6 MUL ADD PUSH2 0x885 JUMP JUMPDEST DUP4 DUP2 MSTORE SWAP4 POP DUP1 DUP5 ADD DUP6 DUP3 ADD PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x745 JUMPI DUP2 CALLDATALOAD DUP9 ADD PUSH1 0x60 DUP1 PUSH1 0x1F NOT DUP4 DUP14 SUB ADD SLT ISZERO PUSH2 0x6B0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x6B9 DUP2 PUSH2 0x885 JUMP JUMPDEST DUP7 DUP4 ADD CALLDATALOAD PUSH2 0x6C6 DUP2 PUSH2 0x90C JUMP JUMPDEST DUP2 MSTORE PUSH1 0x40 DUP4 DUP2 ADD CALLDATALOAD DUP10 DUP2 GT ISZERO PUSH2 0x6DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 ADD PUSH1 0x3F DUP2 ADD DUP15 SGT PUSH2 0x6EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP9 DUP2 ADD CALLDATALOAD PUSH2 0x701 PUSH2 0x6FC DUP3 PUSH2 0x8AC JUMP JUMPDEST PUSH2 0x885 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP16 DUP5 DUP4 DUP6 ADD ADD GT ISZERO PUSH2 0x715 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x724 DUP3 DUP13 DUP4 ADD DUP7 DUP7 ADD PUSH2 0x8D0 JUMP JUMPDEST DUP11 DUP6 ADD MSTORE POP POP SWAP2 SWAP1 SWAP3 ADD CALLDATALOAD SWAP1 DUP3 ADD MSTORE DUP4 MSTORE SWAP2 DUP4 ADD SWAP2 SWAP1 DUP4 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x68F JUMP JUMPDEST POP POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x765 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x77C JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x788 DUP8 DUP4 DUP9 ADD PUSH2 0x64B JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x79D JUMPI DUP4 DUP5 REVERT JUMPDEST POP PUSH2 0x7AA DUP7 DUP3 DUP8 ADD PUSH2 0x64B JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x7D3 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x8DC JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x7F9 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x8DC JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH1 0x8 DUP6 LT PUSH2 0x811 JUMPI INVALID JUMPDEST SWAP4 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE DUP3 MLOAD PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x40 DUP4 ADD MLOAD PUSH1 0xA0 PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0x855 PUSH1 0xC0 DUP5 ADD DUP3 PUSH2 0x7BB JUMP JUMPDEST SWAP1 POP PUSH1 0x60 DUP5 ADD MLOAD PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0x80 DUP5 ADD MLOAD PUSH1 0x1F NOT DUP5 DUP4 SUB ADD PUSH1 0xA0 DUP6 ADD MSTORE PUSH2 0x87C DUP3 DUP3 PUSH2 0x7BB JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x8A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x8C2 JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x8F7 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x8DF JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x906 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x921 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xFC SWAP13 PUSH9 0xF47B04D772DB98E891 KECCAK256 0xCF SHR EQ 0xB6 0xBB 0xDF 0xD6 0xAD SIGNEXTEND 0xC8 0x49 COINBASE ORIGIN RETURN EXTCODESIZE SWAP3 0xD2 DUP10 GT PUSH5 0x736F6C6343 STOP MOD 0xC STOP CALLER ",
                "sourceMap": "742:3984:29:-:0;;;;;;;;;;;;;;;;;;;"
            },
            "deployedBytecode": {
                "immutableReferences": {},
                "linkReferences": {},
                "object": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c806344a3acba1461003b5780639e4a2a6914610064575b600080fd5b61004e610049366004610751565b610077565b60405161005b9190610825565b60405180910390f35b61004e610072366004610751565b6102d4565b61007f61061c565b6000805b8551811461019e57606086828151811061009957fe5b60200260200101516020015190506100c0602082510386836105489092919063ffffffff16565b600060608884815181106100d057fe5b6020026020010151600001516001600160a01b03168985815181106100f157fe5b6020026020010151604001518460405161010b91906107e7565b60006040518083038160008787f1925050503d8060008114610149576040519150601f19603f3d011682016040523d82523d6000602084013e61014e565b606091505b5091509150811561019057600061017260208351038361055890919063ffffffff16565b90508581111561018e5760208701859052604087018290529450845b505b505050806001019050610083565b50806101aa57506102cd565b60005b845181146102ca5760608582815181106101c357fe5b60200260200101516020015190506101ea602082510384836105489092919063ffffffff16565b600060608784815181106101fa57fe5b6020026020010151600001516001600160a01b031688858151811061021b57fe5b6020026020010151604001518460405161023591906107e7565b60006040518083038160008787f1925050503d8060008114610273576040519150601f19603f3d011682016040523d82523d6000602084013e610278565b606091505b509150915081156102bc57600061029c60208351038361055890919063ffffffff16565b87519091508111156102ba5780875260608701859052608087018290525b505b5050508060010190506101ad565b50505b9392505050565b6102dc61061c565b60001980825260005b8451811461040c5760608582815181106102fb57fe5b6020026020010151602001519050610322602082510386836105489092919063ffffffff16565b6000606087848151811061033257fe5b6020026020010151600001516001600160a01b031688858151811061035357fe5b6020026020010151604001518460405161036d91906107e7565b60006040518083038160008787f1925050503d80600081146103ab576040519150601f19603f3d011682016040523d82523d6000602084013e6103b0565b606091505b509150915081156103fe5760006103d460208351038361055890919063ffffffff16565b90506000811180156103e557508581105b156103fc5760608701859052608087018290529450845b505b5050508060010190506102e5565b5060001981141561041d57506102cd565b60005b855181146102ca57606086828151811061043657fe5b602002602001015160200151905061045d602082510384836105489092919063ffffffff16565b6000606088848151811061046d57fe5b6020026020010151600001516001600160a01b031689858151811061048e57fe5b602002602001015160400151846040516104a891906107e7565b60006040518083038160008787f1925050503d80600081146104e6576040519150601f19603f3d011682016040523d82523d6000602084013e6104eb565b606091505b5091509150811561053a57600061050f60208351038361055890919063ffffffff16565b90506000811180156105215750865181105b156105385780875260208701859052604087018290525b505b505050806001019050610420565b610553838383610564565b505050565b60006102cd8383610590565b81602001835110156105885761058861058360058551856020016105ba565b610614565b910160200152565b600081602001835110156105b1576105b161058360058551856020016105ba565b50016020015190565b6060632800659560e01b8484846040516024016105d993929190610803565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915290509392505050565b805160208201fd5b6040518060a0016040528060008152602001600081526020016060815260200160008152602001606081525090565b600082601f83011261065b578081fd5b813567ffffffffffffffff80821115610672578283fd5b60206106818182850201610885565b838152935080840185820160005b858110156107455781358801606080601f19838d030112156106b057600080fd5b6106b981610885565b868301356106c68161090c565b8152604083810135898111156106db57600080fd5b8401603f81018e136106ec57600080fd5b888101356107016106fc826108ac565b610885565b8181528f8483850101111561071557600080fd5b610724828c83018686016108d0565b8a85015250509190920135908201528352918301919083019060010161068f565b50505050505092915050565b600080600060608486031215610765578283fd5b833567ffffffffffffffff8082111561077c578485fd5b6107888783880161064b565b9450602086013591508082111561079d578384fd5b506107aa8682870161064b565b925050604084013590509250925092565b600081518084526107d38160208601602086016108dc565b601f01601f19169290920160200192915050565b600082516107f98184602087016108dc565b9190910192915050565b606081016008851061081157fe5b938152602081019290925260409091015290565b6000602082528251602083015260208301516040830152604083015160a0606084015261085560c08401826107bb565b9050606084015160808401526080840151601f198483030160a085015261087c82826107bb565b95945050505050565b60405181810167ffffffffffffffff811182821017156108a457600080fd5b604052919050565b600067ffffffffffffffff8211156108c2578081fd5b50601f01601f191660200190565b82818337506000910152565b60005b838110156108f75781810151838201526020016108df565b83811115610906576000848401525b50505050565b6001600160a01b038116811461092157600080fd5b5056fea2646970667358221220fc9c68f47b04d772db98e89120cf1c14b6bbdfd6ad0bc8494132f33b92d2891164736f6c634300060c0033",
                "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x36 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x44A3ACBA EQ PUSH2 0x3B JUMPI DUP1 PUSH4 0x9E4A2A69 EQ PUSH2 0x64 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4E PUSH2 0x49 CALLDATASIZE PUSH1 0x4 PUSH2 0x751 JUMP JUMPDEST PUSH2 0x77 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x5B SWAP2 SWAP1 PUSH2 0x825 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x4E PUSH2 0x72 CALLDATASIZE PUSH1 0x4 PUSH2 0x751 JUMP JUMPDEST PUSH2 0x2D4 JUMP JUMPDEST PUSH2 0x7F PUSH2 0x61C JUMP JUMPDEST PUSH1 0x0 DUP1 JUMPDEST DUP6 MLOAD DUP2 EQ PUSH2 0x19E JUMPI PUSH1 0x60 DUP7 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x99 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD SWAP1 POP PUSH2 0xC0 PUSH1 0x20 DUP3 MLOAD SUB DUP7 DUP4 PUSH2 0x548 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP9 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xD0 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0xF1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 ADD MLOAD DUP5 PUSH1 0x40 MLOAD PUSH2 0x10B SWAP2 SWAP1 PUSH2 0x7E7 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP8 CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x149 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x14E JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0x190 JUMPI PUSH1 0x0 PUSH2 0x172 PUSH1 0x20 DUP4 MLOAD SUB DUP4 PUSH2 0x558 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP6 DUP2 GT ISZERO PUSH2 0x18E JUMPI PUSH1 0x20 DUP8 ADD DUP6 SWAP1 MSTORE PUSH1 0x40 DUP8 ADD DUP3 SWAP1 MSTORE SWAP5 POP DUP5 JUMPDEST POP JUMPDEST POP POP POP DUP1 PUSH1 0x1 ADD SWAP1 POP PUSH2 0x83 JUMP JUMPDEST POP DUP1 PUSH2 0x1AA JUMPI POP PUSH2 0x2CD JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 EQ PUSH2 0x2CA JUMPI PUSH1 0x60 DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1C3 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD SWAP1 POP PUSH2 0x1EA PUSH1 0x20 DUP3 MLOAD SUB DUP5 DUP4 PUSH2 0x548 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x1FA JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP9 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x21B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 ADD MLOAD DUP5 PUSH1 0x40 MLOAD PUSH2 0x235 SWAP2 SWAP1 PUSH2 0x7E7 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP8 CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x273 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x278 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0x2BC JUMPI PUSH1 0x0 PUSH2 0x29C PUSH1 0x20 DUP4 MLOAD SUB DUP4 PUSH2 0x558 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP8 MLOAD SWAP1 SWAP2 POP DUP2 GT ISZERO PUSH2 0x2BA JUMPI DUP1 DUP8 MSTORE PUSH1 0x60 DUP8 ADD DUP6 SWAP1 MSTORE PUSH1 0x80 DUP8 ADD DUP3 SWAP1 MSTORE JUMPDEST POP JUMPDEST POP POP POP DUP1 PUSH1 0x1 ADD SWAP1 POP PUSH2 0x1AD JUMP JUMPDEST POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x2DC PUSH2 0x61C JUMP JUMPDEST PUSH1 0x0 NOT DUP1 DUP3 MSTORE PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 EQ PUSH2 0x40C JUMPI PUSH1 0x60 DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2FB JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD SWAP1 POP PUSH2 0x322 PUSH1 0x20 DUP3 MLOAD SUB DUP7 DUP4 PUSH2 0x548 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x332 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP9 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x353 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 ADD MLOAD DUP5 PUSH1 0x40 MLOAD PUSH2 0x36D SWAP2 SWAP1 PUSH2 0x7E7 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP8 CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x3AB JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x3B0 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0x3FE JUMPI PUSH1 0x0 PUSH2 0x3D4 PUSH1 0x20 DUP4 MLOAD SUB DUP4 PUSH2 0x558 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 GT DUP1 ISZERO PUSH2 0x3E5 JUMPI POP DUP6 DUP2 LT JUMPDEST ISZERO PUSH2 0x3FC JUMPI PUSH1 0x60 DUP8 ADD DUP6 SWAP1 MSTORE PUSH1 0x80 DUP8 ADD DUP3 SWAP1 MSTORE SWAP5 POP DUP5 JUMPDEST POP JUMPDEST POP POP POP DUP1 PUSH1 0x1 ADD SWAP1 POP PUSH2 0x2E5 JUMP JUMPDEST POP PUSH1 0x0 NOT DUP2 EQ ISZERO PUSH2 0x41D JUMPI POP PUSH2 0x2CD JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP6 MLOAD DUP2 EQ PUSH2 0x2CA JUMPI PUSH1 0x60 DUP7 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x436 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD SWAP1 POP PUSH2 0x45D PUSH1 0x20 DUP3 MLOAD SUB DUP5 DUP4 PUSH2 0x548 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP9 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x46D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x48E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 ADD MLOAD DUP5 PUSH1 0x40 MLOAD PUSH2 0x4A8 SWAP2 SWAP1 PUSH2 0x7E7 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP8 CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x4E6 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x4EB JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0x53A JUMPI PUSH1 0x0 PUSH2 0x50F PUSH1 0x20 DUP4 MLOAD SUB DUP4 PUSH2 0x558 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 GT DUP1 ISZERO PUSH2 0x521 JUMPI POP DUP7 MLOAD DUP2 LT JUMPDEST ISZERO PUSH2 0x538 JUMPI DUP1 DUP8 MSTORE PUSH1 0x20 DUP8 ADD DUP6 SWAP1 MSTORE PUSH1 0x40 DUP8 ADD DUP3 SWAP1 MSTORE JUMPDEST POP JUMPDEST POP POP POP DUP1 PUSH1 0x1 ADD SWAP1 POP PUSH2 0x420 JUMP JUMPDEST PUSH2 0x553 DUP4 DUP4 DUP4 PUSH2 0x564 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2CD DUP4 DUP4 PUSH2 0x590 JUMP JUMPDEST DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO PUSH2 0x588 JUMPI PUSH2 0x588 PUSH2 0x583 PUSH1 0x5 DUP6 MLOAD DUP6 PUSH1 0x20 ADD PUSH2 0x5BA JUMP JUMPDEST PUSH2 0x614 JUMP JUMPDEST SWAP2 ADD PUSH1 0x20 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO PUSH2 0x5B1 JUMPI PUSH2 0x5B1 PUSH2 0x583 PUSH1 0x5 DUP6 MLOAD DUP6 PUSH1 0x20 ADD PUSH2 0x5BA JUMP JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH4 0x28006595 PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x5D9 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x803 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x65B JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x672 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x20 PUSH2 0x681 DUP2 DUP3 DUP6 MUL ADD PUSH2 0x885 JUMP JUMPDEST DUP4 DUP2 MSTORE SWAP4 POP DUP1 DUP5 ADD DUP6 DUP3 ADD PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x745 JUMPI DUP2 CALLDATALOAD DUP9 ADD PUSH1 0x60 DUP1 PUSH1 0x1F NOT DUP4 DUP14 SUB ADD SLT ISZERO PUSH2 0x6B0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x6B9 DUP2 PUSH2 0x885 JUMP JUMPDEST DUP7 DUP4 ADD CALLDATALOAD PUSH2 0x6C6 DUP2 PUSH2 0x90C JUMP JUMPDEST DUP2 MSTORE PUSH1 0x40 DUP4 DUP2 ADD CALLDATALOAD DUP10 DUP2 GT ISZERO PUSH2 0x6DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 ADD PUSH1 0x3F DUP2 ADD DUP15 SGT PUSH2 0x6EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP9 DUP2 ADD CALLDATALOAD PUSH2 0x701 PUSH2 0x6FC DUP3 PUSH2 0x8AC JUMP JUMPDEST PUSH2 0x885 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP16 DUP5 DUP4 DUP6 ADD ADD GT ISZERO PUSH2 0x715 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x724 DUP3 DUP13 DUP4 ADD DUP7 DUP7 ADD PUSH2 0x8D0 JUMP JUMPDEST DUP11 DUP6 ADD MSTORE POP POP SWAP2 SWAP1 SWAP3 ADD CALLDATALOAD SWAP1 DUP3 ADD MSTORE DUP4 MSTORE SWAP2 DUP4 ADD SWAP2 SWAP1 DUP4 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x68F JUMP JUMPDEST POP POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x765 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x77C JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x788 DUP8 DUP4 DUP9 ADD PUSH2 0x64B JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x79D JUMPI DUP4 DUP5 REVERT JUMPDEST POP PUSH2 0x7AA DUP7 DUP3 DUP8 ADD PUSH2 0x64B JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x7D3 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x8DC JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x7F9 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x8DC JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH1 0x8 DUP6 LT PUSH2 0x811 JUMPI INVALID JUMPDEST SWAP4 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE DUP3 MLOAD PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x40 DUP4 ADD MLOAD PUSH1 0xA0 PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0x855 PUSH1 0xC0 DUP5 ADD DUP3 PUSH2 0x7BB JUMP JUMPDEST SWAP1 POP PUSH1 0x60 DUP5 ADD MLOAD PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0x80 DUP5 ADD MLOAD PUSH1 0x1F NOT DUP5 DUP4 SUB ADD PUSH1 0xA0 DUP6 ADD MSTORE PUSH2 0x87C DUP3 DUP3 PUSH2 0x7BB JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x8A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x8C2 JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x8F7 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x8DF JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x906 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x921 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xFC SWAP13 PUSH9 0xF47B04D772DB98E891 KECCAK256 0xCF SHR EQ 0xB6 0xBB 0xDF 0xD6 0xAD SIGNEXTEND 0xC8 0x49 COINBASE ORIGIN RETURN EXTCODESIZE SWAP3 0xD2 DUP10 GT PUSH5 0x736F6C6343 STOP MOD 0xC STOP CALLER ",
                "sourceMap": "742:3984:29:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1081:1717;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2804:1920;;;;;;:::i;:::-;;:::i;1081:1717::-;1254:26;;:::i;:::-;1296:31;1346:9;1341:675;1366:13;:20;1361:1;:25;1341:675;;1407:17;1427:13;1441:1;1427:16;;;;;;;;;;;;;;:21;;;1407:41;;1462:47;1494:2;1480:4;:11;:16;1498:10;1462:4;:17;;:47;;;;;:::i;:::-;1524:15;1541:23;1592:13;1606:1;1592:16;;;;;;;;;;;;;;:19;;;-1:-1:-1;;;;;1584:33:29;1623:13;1637:1;1623:16;;;;;;;;;;;;;;:20;;;1645:4;1584:66;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1523:127;;;;1668:10;1664:342;;;1698:14;1715:46;1758:2;1738:10;:17;:22;1715:10;:22;;:46;;;;:::i;:::-;1698:63;;1792:23;1783:6;:32;1779:213;;;1893:20;;;:24;;;1939:21;;;:34;;;1865:6;-1:-1:-1;1865:6:29;1779:213;1664:342;;1341:675;;;1388:3;;;;;1341:675;;;-1:-1:-1;2029:28:29;2025:72;;2073:13;;;2025:72;2111:9;2106:686;2131:14;:21;2126:1;:26;2106:686;;2173:17;2193:14;2208:1;2193:17;;;;;;;;;;;;;;:22;;;2173:42;;2229:60;2261:2;2247:4;:11;:16;2265:23;2229:4;:17;;:60;;;;;:::i;:::-;2304:15;2321:23;2372:14;2387:1;2372:17;;;;;;;;;;;;;;:20;;;-1:-1:-1;;;;;2364:34:29;2404:14;2419:1;2404:17;;;;;;;;;;;;;;:21;;;2427:4;2364:68;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2303:129;;;;2450:10;2446:336;;;2480:14;2497:46;2540:2;2520:10;:17;:22;2497:10;:22;;:46;;;;:::i;:::-;2574:19;;2480:63;;-1:-1:-1;2565:28:29;;2561:207;;;2617:28;;;2667:21;;;:25;;;2714:22;;;:35;;;2561:207;2446:336;;2106:686;;;2154:3;;;;;2106:686;;;;1081:1717;;;;;;;:::o;2804:1920::-;2975:26;;:::i;:::-;-1:-1:-1;;3017:33:29;;;:19;3115:751;3140:14;:21;3135:1;:26;3115:751;;3182:17;3202:14;3217:1;3202:17;;;;;;;;;;;;;;:22;;;3182:42;;3238:46;3270:2;3256:4;:11;:16;3274:9;3238:4;:17;;:46;;;;;:::i;:::-;3299:15;3316:23;3367:14;3382:1;3367:17;;;;;;;;;;;;;;:20;;;-1:-1:-1;;;;;3359:34:29;3399:14;3414:1;3399:17;;;;;;;;;;;;;;:21;;;3422:4;3359:68;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3298:129;;;;3445:10;3441:415;;;3475:14;3492:46;3535:2;3515:10;:17;:22;3492:10;:22;;:46;;;;:::i;:::-;3475:63;;3590:1;3581:6;:10;:66;;;;;3624:23;3615:6;:32;3581:66;3556:286;;;3742:21;;;:24;;;3788:22;;;:35;;;3714:6;-1:-1:-1;3714:6:29;3556:286;3441:415;;3115:751;;;3163:3;;;;;3115:751;;;;-1:-1:-1;;3879:23:29;:38;3875:82;;;3933:13;;;3875:82;3971:9;3966:752;3991:13;:20;3986:1;:25;3966:752;;4032:17;4052:13;4066:1;4052:16;;;;;;;;;;;;;;:21;;;4032:41;;4087:60;4119:2;4105:4;:11;:16;4123:23;4087:4;:17;;:60;;;;;:::i;:::-;4162:15;4179:23;4230:13;4244:1;4230:16;;;;;;;;;;;;;;:19;;;-1:-1:-1;;;;;4222:33:29;4261:13;4275:1;4261:16;;;;;;;;;;;;;;:20;;;4283:4;4222:66;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4161:127;;;;4306:10;4302:406;;;4336:14;4353:46;4396:2;4376:10;:17;:22;4353:10;:22;;:46;;;;:::i;:::-;4336:63;;4451:1;4442:6;:10;:62;;;;-1:-1:-1;4485:19:29;;4476:28;;4442:62;4417:277;;;4545:28;;;4595:20;;;:24;;;4641:21;;;:34;;;4417:277;4302:406;;3966:752;;;4013:3;;;;;3966:752;;16578:187:2;16720:38;16733:1;16736:5;16751;16720:12;:38::i;:::-;16578:187;;;:::o;16122:220::-;16243:14;16290:21;16302:1;16305:5;16290:11;:21::i;15225:654::-;15382:5;15390:2;15382:10;15371:1;:8;:21;15367:306;;;15408:254;15433:228;15498:95;15611:1;:8;15637:5;15645:2;15637:10;15433:47;:228::i;:::-;15408:24;:254::i;:::-;15842:13;;15753:2;15842:13;15835:28;15821:52::o;14301:688::-;14422:14;14467:5;14475:2;14467:10;14456:1;:8;:21;14452:306;;;14493:254;14518:228;14583:95;14696:1;:8;14722:5;14730:2;14722:10;14518:47;:228::i;14493:254::-;-1:-1:-1;14936:13:2;14838:2;14936:13;14930:20;;14301:688::o;1334:378:5:-;1522:12;1274:10;1593:37;;1644:9;1667:6;1687:8;1557:148;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;1557:148:5;;;;;;;;;;;;;;-1:-1:-1;;;;;1557:148:5;-1:-1:-1;;;;;;1557:148:5;;;;;;;;;;;-1:-1:-1;1334:378:5;;;;;:::o;1531:170:7:-;1674:9;1668:16;1661:4;1650:9;1646:20;1639:46;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;181:753::-;;323:3;316:4;308:6;304:17;300:27;290:2;;-1:-1;;331:12;290:2;378:6;365:20;7151:18;;7143:6;7140:30;7137:2;;;-1:-1;;7173:12;7137:2;7218:4;400:105;7218:4;;7210:6;7206:17;7271:15;400:105;:::i;:::-;533:21;;;391:114;-1:-1;590:14;;;565:17;;;685:1;670:258;695:6;692:1;689:13;670:258;;;778:3;765:17;569:6;753:30;1540:4;;1519:19;;753:30;1523:3;1519:19;;1515:30;1512:2;;;685:1;;1548:12;1512:2;1576:20;1540:4;1576:20;:::i;:::-;7218:4;753:30;;72:20;97:33;124:5;97:33;:::i;:::-;1651:75;;1800:18;;;;1787:32;1828:30;;;1825:2;;;685:1;;1861:12;1825:2;1936:22;;1025:17;;;1021:27;-1:-1;1011:2;;685:1;;1052:12;1011:2;7218:4;1936:22;;1086:20;1121:64;1136:48;1177:6;1136:48;:::i;:::-;1121:64;:::i;:::-;1205:6;1198:5;1191:21;1309:3;1800:18;1300:6;1936:22;1291:16;;1288:25;1285:2;;;685:1;;1316:12;1285:2;1336:41;1370:6;7218:4;1267:5;1263:16;1800:18;1936:22;1229:17;1336:41;:::i;:::-;1888:16;;;1881:84;-1:-1;;2079:22;;;;2203:20;2040:16;;;2033:75;790;;879:14;;;;907;;;;717:1;710:9;670:258;;;674:14;;;;;;283:651;;;;:::o;2273:863::-;;;;2511:2;2499:9;2490:7;2486:23;2482:32;2479:2;;;-1:-1;;2517:12;2479:2;2575:17;2562:31;2613:18;;2605:6;2602:30;2599:2;;;-1:-1;;2635:12;2599:2;2665:103;2760:7;2751:6;2740:9;2736:22;2665:103;:::i;:::-;2655:113;;2833:2;2822:9;2818:18;2805:32;2791:46;;2613:18;2849:6;2846:30;2843:2;;;-1:-1;;2879:12;2843:2;;2909:103;3004:7;2995:6;2984:9;2980:22;2909:103;:::i;:::-;2899:113;;;3049:2;3092:9;3088:22;2203:20;3057:63;;2473:663;;;;;:::o;3143:323::-;;3275:5;7718:12;7864:6;7859:3;7852:19;3358:52;3403:6;7901:4;7896:3;7892:14;7901:4;3384:5;3380:16;3358:52;:::i;:::-;1519:19;9243:14;-1:-1;;9239:28;3422:39;;;;7901:4;3422:39;;3223:243;-1:-1;;3223:243::o;5512:271::-;;3633:5;7718:12;3744:52;3789:6;3784:3;3777:4;3770:5;3766:16;3744:52;:::i;:::-;3808:16;;;;;5646:137;-1:-1;;5646:137::o;5790:510::-;6006:2;5991:18;;9384:1;9374:12;;9364:2;;9390:9;9364:2;3940:83;;;6203:2;6188:18;;5343:37;;;;6286:2;6271:18;;;5343:37;5977:323;:::o;6307:390::-;;6494:2;6515:17;6508:47;4353:16;4347:23;6494:2;6483:9;6479:18;5343:37;6494:2;4520:5;4516:16;4510:23;4587:14;6483:9;4587:14;5343:37;4587:14;4684:5;4680:16;4674:23;4273:4;4717:14;6483:9;4717:14;4710:38;4763:71;4264:14;6483:9;4264:14;4815:12;4763:71;:::i;:::-;4755:79;;4717:14;4922:5;4918:16;4912:23;4989:14;6483:9;4989:14;5343:37;4989:14;5087:5;5083:16;5077:23;1519:19;;6483:9;5140:4;5136:14;;4273:4;6483:9;5120:14;5113:38;5166:71;5232:4;5218:12;5166:71;:::i;:::-;6561:126;6465:232;-1:-1;;;;;6465:232::o;6704:256::-;6766:2;6760:9;6792:17;;;6867:18;6852:34;;6888:22;;;6849:62;6846:2;;;6924:1;;6914:12;6846:2;6766;6933:22;6744:216;;-1:-1;6744:216::o;7303:321::-;;7446:18;7438:6;7435:30;7432:2;;;-1:-1;;7468:12;7432:2;-1:-1;1519:19;7522:17;-1:-1;;7518:33;7609:4;7599:15;;7369:255::o;8745:145::-;8826:6;8821:3;8816;8803:30;-1:-1;8882:1;8864:16;;8857:27;8796:94::o;8899:268::-;8964:1;8971:101;8985:6;8982:1;8979:13;8971:101;;;9052:11;;;9046:18;9033:11;;;9026:39;9007:2;9000:10;8971:101;;;9087:6;9084:1;9081:13;9078:2;;;8964:1;9143:6;9138:3;9134:16;9127:27;9078:2;;8948:219;;;:::o;9413:117::-;-1:-1;;;;;8416:54;;9472:35;;9462:2;;9521:1;;9511:12;9462:2;9456:74;:::o"
            },
            "methodIdentifiers": {
                "sampleTwoHopBuy((address,bytes,uint256)[],(address,bytes,uint256)[],uint256)": "9e4a2a69",
                "sampleTwoHopSell((address,bytes,uint256)[],(address,bytes,uint256)[],uint256)": "44a3acba"
            }
        }
    },
    "sourceTreeHashHex": "0xfd1a04b71d61a08afb0de3a7e5aec21ccca59afc14dfe2eea1250e38a0897d72",
    "sources": {
        "./TwoHopSampler.sol": {
            "id": 29,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol\";\n\n\ncontract TwoHopSampler {\n    using LibBytesV06 for bytes;\n\n    struct HopInfo {\n        address to;\n        bytes data;\n        uint256 gas;\n    }\n\n    struct TwoHopResult {\n        uint256 outputAmount;\n        uint256 firstHopIndex;\n        bytes firstHopResult;\n        uint256 secondHopIndex;\n        bytes secondHopResult;\n    }\n\n    function sampleTwoHopSell(\n        HopInfo[] memory firstHopCalls,\n        HopInfo[] memory secondHopCalls,\n        uint256 sellAmount\n    )\n        public\n        returns (TwoHopResult memory result)\n    {\n        uint256 intermediateAssetAmount = 0;\n        for (uint256 i = 0; i != firstHopCalls.length; ++i) {\n            bytes memory data = firstHopCalls[i].data;\n            data.writeUint256(data.length - 32, sellAmount);\n            (bool didSucceed, bytes memory returnData) =\n                address(firstHopCalls[i].to).call{gas: firstHopCalls[i].gas}(data);\n            if (didSucceed) {\n                uint256 amount = returnData.readUint256(returnData.length - 32);\n                if (amount > intermediateAssetAmount) {\n                    intermediateAssetAmount = amount;\n                    result.firstHopIndex = i;\n                    result.firstHopResult = returnData;\n                }\n            }\n        }\n        if (intermediateAssetAmount == 0) {\n            return result;\n        }\n        for (uint256 i = 0; i != secondHopCalls.length; ++i) {\n            bytes memory data = secondHopCalls[i].data;\n            data.writeUint256(data.length - 32, intermediateAssetAmount);\n            (bool didSucceed, bytes memory returnData) =\n                address(secondHopCalls[i].to).call{gas: secondHopCalls[i].gas}(data);\n            if (didSucceed) {\n                uint256 amount = returnData.readUint256(returnData.length - 32);\n                if (amount > result.outputAmount) {\n                    result.outputAmount = amount;\n                    result.secondHopIndex = i;\n                    result.secondHopResult = returnData;\n                }\n            }\n        }\n    }\n\n    function sampleTwoHopBuy(\n        HopInfo[] memory firstHopCalls,\n        HopInfo[] memory secondHopCalls,\n        uint256 buyAmount\n    )\n        public\n        returns (TwoHopResult memory result)\n    {\n        result.outputAmount = uint256(-1);\n        uint256 intermediateAssetAmount = uint256(-1);\n        for (uint256 i = 0; i != secondHopCalls.length; ++i) {\n            bytes memory data = secondHopCalls[i].data;\n            data.writeUint256(data.length - 32, buyAmount);\n            (bool didSucceed, bytes memory returnData) =\n                address(secondHopCalls[i].to).call{gas: secondHopCalls[i].gas}(data);\n            if (didSucceed) {\n                uint256 amount = returnData.readUint256(returnData.length - 32);\n                if (\n                    amount > 0 &&\n                    amount < intermediateAssetAmount\n                ) {\n                    intermediateAssetAmount = amount;\n                    result.secondHopIndex= i;\n                    result.secondHopResult = returnData;\n                }\n            }\n        }\n        if (intermediateAssetAmount == uint256(-1)) {\n            return result;\n        }\n        for (uint256 i = 0; i != firstHopCalls.length; ++i) {\n            bytes memory data = firstHopCalls[i].data;\n            data.writeUint256(data.length - 32, intermediateAssetAmount);\n            (bool didSucceed, bytes memory returnData) =\n                address(firstHopCalls[i].to).call{gas: firstHopCalls[i].gas}(data);\n            if (didSucceed) {\n                uint256 amount = returnData.readUint256(returnData.length - 32);\n                if (\n                    amount > 0 &&\n                    amount < result.outputAmount\n                ) {\n                    result.outputAmount = amount;\n                    result.firstHopIndex = i;\n                    result.firstHopResult = returnData;\n                }\n            }\n        }\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol": {
            "id": 2,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./errors/LibBytesRichErrorsV06.sol\";\nimport \"./errors/LibRichErrorsV06.sol\";\n\n\nlibrary LibBytesV06 {\n\n    using LibBytesV06 for bytes;\n\n    /// @dev Gets the memory address for a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of byte array. This\n    ///         points to the header of the byte array which contains\n    ///         the length.\n    function rawAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := input\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Gets the memory address for the contents of a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of the contents of the byte array.\n    function contentAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := add(input, 32)\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Copies `length` bytes from memory location `source` to `dest`.\n    /// @param dest memory address to copy bytes to.\n    /// @param source memory address to copy bytes from.\n    /// @param length number of bytes to copy.\n    function memCopy(\n        uint256 dest,\n        uint256 source,\n        uint256 length\n    )\n        internal\n        pure\n    {\n        if (length < 32) {\n            // Handle a partial word by reading destination and masking\n            // off the bits we are interested in.\n            // This correctly handles overlap, zero lengths and source == dest\n            assembly {\n                let mask := sub(exp(256, sub(32, length)), 1)\n                let s := and(mload(source), not(mask))\n                let d := and(mload(dest), mask)\n                mstore(dest, or(s, d))\n            }\n        } else {\n            // Skip the O(length) loop when source == dest.\n            if (source == dest) {\n                return;\n            }\n\n            // For large copies we copy whole words at a time. The final\n            // word is aligned to the end of the range (instead of after the\n            // previous) to handle partial words. So a copy will look like this:\n            //\n            //  ####\n            //      ####\n            //          ####\n            //            ####\n            //\n            // We handle overlap in the source and destination range by\n            // changing the copying direction. This prevents us from\n            // overwriting parts of source that we still need to copy.\n            //\n            // This correctly handles source == dest\n            //\n            if (source > dest) {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because it\n                    // is easier to compare with in the loop, and these\n                    // are also the addresses we need for copying the\n                    // last bytes.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the last 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the last bytes in\n                    // source already due to overlap.\n                    let last := mload(sEnd)\n\n                    // Copy whole words front to back\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} lt(source, sEnd) {} {\n                        mstore(dest, mload(source))\n                        source := add(source, 32)\n                        dest := add(dest, 32)\n                    }\n\n                    // Write the last 32 bytes\n                    mstore(dEnd, last)\n                }\n            } else {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because those\n                    // are the starting points when copying a word at the end.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the first 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the first bytes in\n                    // source already due to overlap.\n                    let first := mload(source)\n\n                    // Copy whole words back to front\n                    // We use a signed comparisson here to allow dEnd to become\n                    // negative (happens when source and dest < 32). Valid\n                    // addresses in local memory will never be larger than\n                    // 2**255, so they can be safely re-interpreted as signed.\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} slt(dest, dEnd) {} {\n                        mstore(dEnd, mload(sEnd))\n                        sEnd := sub(sEnd, 32)\n                        dEnd := sub(dEnd, 32)\n                    }\n\n                    // Write the first 32 bytes\n                    mstore(dest, first)\n                }\n            }\n        }\n    }\n\n    /// @dev Returns a slices from a byte array.\n    /// @param b The byte array to take a slice from.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function slice(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure and copy contents\n        result = new bytes(to - from);\n        memCopy(\n            result.contentAddress(),\n            b.contentAddress() + from,\n            result.length\n        );\n        return result;\n    }\n\n    /// @dev Returns a slice from a byte array without preserving the input.\n    ///      When `from == 0`, the original array will match the slice.\n    ///      In other cases its state will be corrupted.\n    /// @param b The byte array to take a slice from. Will be destroyed in the process.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function sliceDestructive(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure around [from, to) in-place.\n        assembly {\n            result := add(b, from)\n            mstore(result, sub(to, from))\n        }\n        return result;\n    }\n\n    /// @dev Pops the last byte off of a byte array by modifying its length.\n    /// @param b Byte array that will be modified.\n    /// @return result The byte that was popped off.\n    function popLastByte(bytes memory b)\n        internal\n        pure\n        returns (bytes1 result)\n    {\n        if (b.length == 0) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanZeroRequired,\n                b.length,\n                0\n            ));\n        }\n\n        // Store last byte.\n        result = b[b.length - 1];\n\n        assembly {\n            // Decrement length of byte array.\n            let newLen := sub(mload(b), 1)\n            mstore(b, newLen)\n        }\n        return result;\n    }\n\n    /// @dev Tests equality of two byte arrays.\n    /// @param lhs First byte array to compare.\n    /// @param rhs Second byte array to compare.\n    /// @return equal True if arrays are the same. False otherwise.\n    function equals(\n        bytes memory lhs,\n        bytes memory rhs\n    )\n        internal\n        pure\n        returns (bool equal)\n    {\n        // Keccak gas cost is 30 + numWords * 6. This is a cheap way to compare.\n        // We early exit on unequal lengths, but keccak would also correctly\n        // handle this.\n        return lhs.length == rhs.length && keccak256(lhs) == keccak256(rhs);\n    }\n\n    /// @dev Reads an address from a position in a byte array.\n    /// @param b Byte array containing an address.\n    /// @param index Index in byte array of address.\n    /// @return result address from byte array.\n    function readAddress(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (address result)\n    {\n        if (b.length < index + 20) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Read address from array memory\n        assembly {\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 20-byte mask to obtain address\n            result := and(mload(add(b, index)), 0xffffffffffffffffffffffffffffffffffffffff)\n        }\n        return result;\n    }\n\n    /// @dev Writes an address into a specific position in a byte array.\n    /// @param b Byte array to insert address into.\n    /// @param index Index in byte array of address.\n    /// @param input Address to put into byte array.\n    function writeAddress(\n        bytes memory b,\n        uint256 index,\n        address input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 20) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Store address into array memory\n        assembly {\n            // The address occupies 20 bytes and mstore stores 32 bytes.\n            // First fetch the 32-byte word where we'll be storing the address, then\n            // apply a mask so we have only the bytes in the word that the address will not occupy.\n            // Then combine these bytes with the address and store the 32 bytes back to memory with mstore.\n\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 12-byte mask to obtain extra bytes occupying word of memory where we'll store the address\n            let neighbors := and(\n                mload(add(b, index)),\n                0xffffffffffffffffffffffff0000000000000000000000000000000000000000\n            )\n\n            // Make sure input address is clean.\n            // (Solidity does not guarantee this)\n            input := and(input, 0xffffffffffffffffffffffffffffffffffffffff)\n\n            // Store the neighbors and address into memory\n            mstore(add(b, index), xor(input, neighbors))\n        }\n    }\n\n    /// @dev Reads a bytes32 value from a position in a byte array.\n    /// @param b Byte array containing a bytes32 value.\n    /// @param index Index in byte array of bytes32 value.\n    /// @return result bytes32 value from byte array.\n    function readBytes32(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        if (b.length < index + 32) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            result := mload(add(b, index))\n        }\n        return result;\n    }\n\n    /// @dev Writes a bytes32 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input bytes32 to put into byte array.\n    function writeBytes32(\n        bytes memory b,\n        uint256 index,\n        bytes32 input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 32) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            mstore(add(b, index), input)\n        }\n    }\n\n    /// @dev Reads a uint256 value from a position in a byte array.\n    /// @param b Byte array containing a uint256 value.\n    /// @param index Index in byte array of uint256 value.\n    /// @return result uint256 value from byte array.\n    function readUint256(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (uint256 result)\n    {\n        result = uint256(readBytes32(b, index));\n        return result;\n    }\n\n    /// @dev Writes a uint256 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input uint256 to put into byte array.\n    function writeUint256(\n        bytes memory b,\n        uint256 index,\n        uint256 input\n    )\n        internal\n        pure\n    {\n        writeBytes32(b, index, bytes32(input));\n    }\n\n    /// @dev Reads an unpadded bytes4 value from a position in a byte array.\n    /// @param b Byte array containing a bytes4 value.\n    /// @param index Index in byte array of bytes4 value.\n    /// @return result bytes4 value from byte array.\n    function readBytes4(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes4 result)\n    {\n        if (b.length < index + 4) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsFourRequired,\n                b.length,\n                index + 4\n            ));\n        }\n\n        // Arrays are prefixed by a 32 byte length field\n        index += 32;\n\n        // Read the bytes4 from array memory\n        assembly {\n            result := mload(add(b, index))\n            // Solidity does not require us to clean the trailing bytes.\n            // We do it anyway\n            result := and(result, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)\n        }\n        return result;\n    }\n\n    /// @dev Writes a new length to a byte array.\n    ///      Decreasing length will lead to removing the corresponding lower order bytes from the byte array.\n    ///      Increasing length may lead to appending adjacent in-memory bytes to the end of the byte array.\n    /// @param b Bytes array to write new length to.\n    /// @param length New length of byte array.\n    function writeLength(bytes memory b, uint256 length)\n        internal\n        pure\n    {\n        assembly {\n            mstore(b, length)\n        }\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/errors/LibBytesRichErrorsV06.sol": {
            "id": 5,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibBytesRichErrorsV06 {\n\n    enum InvalidByteOperationErrorCodes {\n        FromLessThanOrEqualsToRequired,\n        ToLessThanOrEqualsLengthRequired,\n        LengthGreaterThanZeroRequired,\n        LengthGreaterThanOrEqualsFourRequired,\n        LengthGreaterThanOrEqualsTwentyRequired,\n        LengthGreaterThanOrEqualsThirtyTwoRequired,\n        LengthGreaterThanOrEqualsNestedBytesLengthRequired,\n        DestinationLengthGreaterThanOrEqualSourceLengthRequired\n    }\n\n    // bytes4(keccak256(\"InvalidByteOperationError(uint8,uint256,uint256)\"))\n    bytes4 internal constant INVALID_BYTE_OPERATION_ERROR_SELECTOR =\n        0x28006595;\n\n    // solhint-disable func-name-mixedcase\n    function InvalidByteOperationError(\n        InvalidByteOperationErrorCodes errorCode,\n        uint256 offset,\n        uint256 required\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            INVALID_BYTE_OPERATION_ERROR_SELECTOR,\n            errorCode,\n            offset,\n            required\n        );\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol": {
            "id": 7,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibRichErrorsV06 {\n\n    // bytes4(keccak256(\"Error(string)\"))\n    bytes4 internal constant STANDARD_ERROR_SELECTOR = 0x08c379a0;\n\n    // solhint-disable func-name-mixedcase\n    /// @dev ABI encode a standard, string revert error payload.\n    ///      This is the same payload that would be included by a `revert(string)`\n    ///      solidity statement. It has the function signature `Error(string)`.\n    /// @param message The error string.\n    /// @return The ABI encoded error.\n    function StandardError(string memory message)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            STANDARD_ERROR_SELECTOR,\n            bytes(message)\n        );\n    }\n    // solhint-enable func-name-mixedcase\n\n    /// @dev Reverts an encoded rich revert reason `errorData`.\n    /// @param errorData ABI encoded error data.\n    function rrevert(bytes memory errorData)\n        internal\n        pure\n    {\n        assembly {\n            revert(add(errorData, 0x20), mload(errorData))\n        }\n    }\n}\n"
        }
    },
    "sourceCodes": {
        "./TwoHopSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol\";\n\n\ncontract TwoHopSampler {\n    using LibBytesV06 for bytes;\n\n    struct HopInfo {\n        address to;\n        bytes data;\n        uint256 gas;\n    }\n\n    struct TwoHopResult {\n        uint256 outputAmount;\n        uint256 firstHopIndex;\n        bytes firstHopResult;\n        uint256 secondHopIndex;\n        bytes secondHopResult;\n    }\n\n    function sampleTwoHopSell(\n        HopInfo[] memory firstHopCalls,\n        HopInfo[] memory secondHopCalls,\n        uint256 sellAmount\n    )\n        public\n        returns (TwoHopResult memory result)\n    {\n        uint256 intermediateAssetAmount = 0;\n        for (uint256 i = 0; i != firstHopCalls.length; ++i) {\n            bytes memory data = firstHopCalls[i].data;\n            data.writeUint256(data.length - 32, sellAmount);\n            (bool didSucceed, bytes memory returnData) =\n                address(firstHopCalls[i].to).call{gas: firstHopCalls[i].gas}(data);\n            if (didSucceed) {\n                uint256 amount = returnData.readUint256(returnData.length - 32);\n                if (amount > intermediateAssetAmount) {\n                    intermediateAssetAmount = amount;\n                    result.firstHopIndex = i;\n                    result.firstHopResult = returnData;\n                }\n            }\n        }\n        if (intermediateAssetAmount == 0) {\n            return result;\n        }\n        for (uint256 i = 0; i != secondHopCalls.length; ++i) {\n            bytes memory data = secondHopCalls[i].data;\n            data.writeUint256(data.length - 32, intermediateAssetAmount);\n            (bool didSucceed, bytes memory returnData) =\n                address(secondHopCalls[i].to).call{gas: secondHopCalls[i].gas}(data);\n            if (didSucceed) {\n                uint256 amount = returnData.readUint256(returnData.length - 32);\n                if (amount > result.outputAmount) {\n                    result.outputAmount = amount;\n                    result.secondHopIndex = i;\n                    result.secondHopResult = returnData;\n                }\n            }\n        }\n    }\n\n    function sampleTwoHopBuy(\n        HopInfo[] memory firstHopCalls,\n        HopInfo[] memory secondHopCalls,\n        uint256 buyAmount\n    )\n        public\n        returns (TwoHopResult memory result)\n    {\n        result.outputAmount = uint256(-1);\n        uint256 intermediateAssetAmount = uint256(-1);\n        for (uint256 i = 0; i != secondHopCalls.length; ++i) {\n            bytes memory data = secondHopCalls[i].data;\n            data.writeUint256(data.length - 32, buyAmount);\n            (bool didSucceed, bytes memory returnData) =\n                address(secondHopCalls[i].to).call{gas: secondHopCalls[i].gas}(data);\n            if (didSucceed) {\n                uint256 amount = returnData.readUint256(returnData.length - 32);\n                if (\n                    amount > 0 &&\n                    amount < intermediateAssetAmount\n                ) {\n                    intermediateAssetAmount = amount;\n                    result.secondHopIndex= i;\n                    result.secondHopResult = returnData;\n                }\n            }\n        }\n        if (intermediateAssetAmount == uint256(-1)) {\n            return result;\n        }\n        for (uint256 i = 0; i != firstHopCalls.length; ++i) {\n            bytes memory data = firstHopCalls[i].data;\n            data.writeUint256(data.length - 32, intermediateAssetAmount);\n            (bool didSucceed, bytes memory returnData) =\n                address(firstHopCalls[i].to).call{gas: firstHopCalls[i].gas}(data);\n            if (didSucceed) {\n                uint256 amount = returnData.readUint256(returnData.length - 32);\n                if (\n                    amount > 0 &&\n                    amount < result.outputAmount\n                ) {\n                    result.outputAmount = amount;\n                    result.firstHopIndex = i;\n                    result.firstHopResult = returnData;\n                }\n            }\n        }\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./errors/LibBytesRichErrorsV06.sol\";\nimport \"./errors/LibRichErrorsV06.sol\";\n\n\nlibrary LibBytesV06 {\n\n    using LibBytesV06 for bytes;\n\n    /// @dev Gets the memory address for a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of byte array. This\n    ///         points to the header of the byte array which contains\n    ///         the length.\n    function rawAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := input\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Gets the memory address for the contents of a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of the contents of the byte array.\n    function contentAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := add(input, 32)\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Copies `length` bytes from memory location `source` to `dest`.\n    /// @param dest memory address to copy bytes to.\n    /// @param source memory address to copy bytes from.\n    /// @param length number of bytes to copy.\n    function memCopy(\n        uint256 dest,\n        uint256 source,\n        uint256 length\n    )\n        internal\n        pure\n    {\n        if (length < 32) {\n            // Handle a partial word by reading destination and masking\n            // off the bits we are interested in.\n            // This correctly handles overlap, zero lengths and source == dest\n            assembly {\n                let mask := sub(exp(256, sub(32, length)), 1)\n                let s := and(mload(source), not(mask))\n                let d := and(mload(dest), mask)\n                mstore(dest, or(s, d))\n            }\n        } else {\n            // Skip the O(length) loop when source == dest.\n            if (source == dest) {\n                return;\n            }\n\n            // For large copies we copy whole words at a time. The final\n            // word is aligned to the end of the range (instead of after the\n            // previous) to handle partial words. So a copy will look like this:\n            //\n            //  ####\n            //      ####\n            //          ####\n            //            ####\n            //\n            // We handle overlap in the source and destination range by\n            // changing the copying direction. This prevents us from\n            // overwriting parts of source that we still need to copy.\n            //\n            // This correctly handles source == dest\n            //\n            if (source > dest) {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because it\n                    // is easier to compare with in the loop, and these\n                    // are also the addresses we need for copying the\n                    // last bytes.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the last 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the last bytes in\n                    // source already due to overlap.\n                    let last := mload(sEnd)\n\n                    // Copy whole words front to back\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} lt(source, sEnd) {} {\n                        mstore(dest, mload(source))\n                        source := add(source, 32)\n                        dest := add(dest, 32)\n                    }\n\n                    // Write the last 32 bytes\n                    mstore(dEnd, last)\n                }\n            } else {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because those\n                    // are the starting points when copying a word at the end.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the first 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the first bytes in\n                    // source already due to overlap.\n                    let first := mload(source)\n\n                    // Copy whole words back to front\n                    // We use a signed comparisson here to allow dEnd to become\n                    // negative (happens when source and dest < 32). Valid\n                    // addresses in local memory will never be larger than\n                    // 2**255, so they can be safely re-interpreted as signed.\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} slt(dest, dEnd) {} {\n                        mstore(dEnd, mload(sEnd))\n                        sEnd := sub(sEnd, 32)\n                        dEnd := sub(dEnd, 32)\n                    }\n\n                    // Write the first 32 bytes\n                    mstore(dest, first)\n                }\n            }\n        }\n    }\n\n    /// @dev Returns a slices from a byte array.\n    /// @param b The byte array to take a slice from.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function slice(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure and copy contents\n        result = new bytes(to - from);\n        memCopy(\n            result.contentAddress(),\n            b.contentAddress() + from,\n            result.length\n        );\n        return result;\n    }\n\n    /// @dev Returns a slice from a byte array without preserving the input.\n    ///      When `from == 0`, the original array will match the slice.\n    ///      In other cases its state will be corrupted.\n    /// @param b The byte array to take a slice from. Will be destroyed in the process.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function sliceDestructive(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure around [from, to) in-place.\n        assembly {\n            result := add(b, from)\n            mstore(result, sub(to, from))\n        }\n        return result;\n    }\n\n    /// @dev Pops the last byte off of a byte array by modifying its length.\n    /// @param b Byte array that will be modified.\n    /// @return result The byte that was popped off.\n    function popLastByte(bytes memory b)\n        internal\n        pure\n        returns (bytes1 result)\n    {\n        if (b.length == 0) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanZeroRequired,\n                b.length,\n                0\n            ));\n        }\n\n        // Store last byte.\n        result = b[b.length - 1];\n\n        assembly {\n            // Decrement length of byte array.\n            let newLen := sub(mload(b), 1)\n            mstore(b, newLen)\n        }\n        return result;\n    }\n\n    /// @dev Tests equality of two byte arrays.\n    /// @param lhs First byte array to compare.\n    /// @param rhs Second byte array to compare.\n    /// @return equal True if arrays are the same. False otherwise.\n    function equals(\n        bytes memory lhs,\n        bytes memory rhs\n    )\n        internal\n        pure\n        returns (bool equal)\n    {\n        // Keccak gas cost is 30 + numWords * 6. This is a cheap way to compare.\n        // We early exit on unequal lengths, but keccak would also correctly\n        // handle this.\n        return lhs.length == rhs.length && keccak256(lhs) == keccak256(rhs);\n    }\n\n    /// @dev Reads an address from a position in a byte array.\n    /// @param b Byte array containing an address.\n    /// @param index Index in byte array of address.\n    /// @return result address from byte array.\n    function readAddress(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (address result)\n    {\n        if (b.length < index + 20) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Read address from array memory\n        assembly {\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 20-byte mask to obtain address\n            result := and(mload(add(b, index)), 0xffffffffffffffffffffffffffffffffffffffff)\n        }\n        return result;\n    }\n\n    /// @dev Writes an address into a specific position in a byte array.\n    /// @param b Byte array to insert address into.\n    /// @param index Index in byte array of address.\n    /// @param input Address to put into byte array.\n    function writeAddress(\n        bytes memory b,\n        uint256 index,\n        address input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 20) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Store address into array memory\n        assembly {\n            // The address occupies 20 bytes and mstore stores 32 bytes.\n            // First fetch the 32-byte word where we'll be storing the address, then\n            // apply a mask so we have only the bytes in the word that the address will not occupy.\n            // Then combine these bytes with the address and store the 32 bytes back to memory with mstore.\n\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 12-byte mask to obtain extra bytes occupying word of memory where we'll store the address\n            let neighbors := and(\n                mload(add(b, index)),\n                0xffffffffffffffffffffffff0000000000000000000000000000000000000000\n            )\n\n            // Make sure input address is clean.\n            // (Solidity does not guarantee this)\n            input := and(input, 0xffffffffffffffffffffffffffffffffffffffff)\n\n            // Store the neighbors and address into memory\n            mstore(add(b, index), xor(input, neighbors))\n        }\n    }\n\n    /// @dev Reads a bytes32 value from a position in a byte array.\n    /// @param b Byte array containing a bytes32 value.\n    /// @param index Index in byte array of bytes32 value.\n    /// @return result bytes32 value from byte array.\n    function readBytes32(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        if (b.length < index + 32) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            result := mload(add(b, index))\n        }\n        return result;\n    }\n\n    /// @dev Writes a bytes32 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input bytes32 to put into byte array.\n    function writeBytes32(\n        bytes memory b,\n        uint256 index,\n        bytes32 input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 32) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            mstore(add(b, index), input)\n        }\n    }\n\n    /// @dev Reads a uint256 value from a position in a byte array.\n    /// @param b Byte array containing a uint256 value.\n    /// @param index Index in byte array of uint256 value.\n    /// @return result uint256 value from byte array.\n    function readUint256(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (uint256 result)\n    {\n        result = uint256(readBytes32(b, index));\n        return result;\n    }\n\n    /// @dev Writes a uint256 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input uint256 to put into byte array.\n    function writeUint256(\n        bytes memory b,\n        uint256 index,\n        uint256 input\n    )\n        internal\n        pure\n    {\n        writeBytes32(b, index, bytes32(input));\n    }\n\n    /// @dev Reads an unpadded bytes4 value from a position in a byte array.\n    /// @param b Byte array containing a bytes4 value.\n    /// @param index Index in byte array of bytes4 value.\n    /// @return result bytes4 value from byte array.\n    function readBytes4(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes4 result)\n    {\n        if (b.length < index + 4) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsFourRequired,\n                b.length,\n                index + 4\n            ));\n        }\n\n        // Arrays are prefixed by a 32 byte length field\n        index += 32;\n\n        // Read the bytes4 from array memory\n        assembly {\n            result := mload(add(b, index))\n            // Solidity does not require us to clean the trailing bytes.\n            // We do it anyway\n            result := and(result, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)\n        }\n        return result;\n    }\n\n    /// @dev Writes a new length to a byte array.\n    ///      Decreasing length will lead to removing the corresponding lower order bytes from the byte array.\n    ///      Increasing length may lead to appending adjacent in-memory bytes to the end of the byte array.\n    /// @param b Bytes array to write new length to.\n    /// @param length New length of byte array.\n    function writeLength(bytes memory b, uint256 length)\n        internal\n        pure\n    {\n        assembly {\n            mstore(b, length)\n        }\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/errors/LibBytesRichErrorsV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibBytesRichErrorsV06 {\n\n    enum InvalidByteOperationErrorCodes {\n        FromLessThanOrEqualsToRequired,\n        ToLessThanOrEqualsLengthRequired,\n        LengthGreaterThanZeroRequired,\n        LengthGreaterThanOrEqualsFourRequired,\n        LengthGreaterThanOrEqualsTwentyRequired,\n        LengthGreaterThanOrEqualsThirtyTwoRequired,\n        LengthGreaterThanOrEqualsNestedBytesLengthRequired,\n        DestinationLengthGreaterThanOrEqualSourceLengthRequired\n    }\n\n    // bytes4(keccak256(\"InvalidByteOperationError(uint8,uint256,uint256)\"))\n    bytes4 internal constant INVALID_BYTE_OPERATION_ERROR_SELECTOR =\n        0x28006595;\n\n    // solhint-disable func-name-mixedcase\n    function InvalidByteOperationError(\n        InvalidByteOperationErrorCodes errorCode,\n        uint256 offset,\n        uint256 required\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            INVALID_BYTE_OPERATION_ERROR_SELECTOR,\n            errorCode,\n            offset,\n            required\n        );\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibRichErrorsV06 {\n\n    // bytes4(keccak256(\"Error(string)\"))\n    bytes4 internal constant STANDARD_ERROR_SELECTOR = 0x08c379a0;\n\n    // solhint-disable func-name-mixedcase\n    /// @dev ABI encode a standard, string revert error payload.\n    ///      This is the same payload that would be included by a `revert(string)`\n    ///      solidity statement. It has the function signature `Error(string)`.\n    /// @param message The error string.\n    /// @return The ABI encoded error.\n    function StandardError(string memory message)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            STANDARD_ERROR_SELECTOR,\n            bytes(message)\n        );\n    }\n    // solhint-enable func-name-mixedcase\n\n    /// @dev Reverts an encoded rich revert reason `errorData`.\n    /// @param errorData ABI encoded error data.\n    function rrevert(bytes memory errorData)\n        internal\n        pure\n    {\n        assembly {\n            revert(add(errorData, 0x20), mload(errorData))\n        }\n    }\n}\n"
    },
    "compiler": {
        "name": "solc",
        "version": "0.6.12+commit.27d51765",
        "settings": {
            "remappings": [
                "@0x/contracts-erc20=/home/merklejerk/code/0x-protocol/node_modules/@0x/contracts-erc20",
                "@0x/contracts-utils=/home/merklejerk/code/0x-protocol/node_modules/@0x/contracts-utils",
                "@0x/contracts-zero-ex=/home/merklejerk/code/0x-protocol/packages/asset-swapper/node_modules/@0x/contracts-zero-ex"
            ],
            "optimizer": {
                "enabled": true,
                "runs": 200,
                "details": {
                    "yul": true,
                    "deduplicate": true
                }
            },
            "outputSelection": {
                "*": {
                    "*": [
                        "abi",
                        "devdoc",
                        "evm.bytecode.object",
                        "evm.bytecode.sourceMap",
                        "evm.deployedBytecode.object",
                        "evm.deployedBytecode.sourceMap",
                        "evm.methodIdentifiers"
                    ]
                }
            },
            "evmVersion": "istanbul"
        }
    },
    "chains": {}
}
