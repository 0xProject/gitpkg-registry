{
    "schemaVersion": "2.0.0",
    "contractName": "UniswapSampler",
    "compilerOutput": {
        "abi": [
            {
                "inputs": [
                    {
                        "internalType": "contract IEtherTokenV06",
                        "name": "weth",
                        "type": "address"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "constructor"
            },
            {
                "inputs": [
                    {
                        "internalType": "bytes4",
                        "name": "selector",
                        "type": "bytes4"
                    },
                    {
                        "internalType": "address",
                        "name": "sellToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "buyToken",
                        "type": "address"
                    },
                    {
                        "internalType": "bytes",
                        "name": "bridgeData",
                        "type": "bytes"
                    },
                    {
                        "internalType": "uint256",
                        "name": "amountIn",
                        "type": "uint256"
                    }
                ],
                "name": "_callRevert",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "bytes4",
                        "name": "selector",
                        "type": "bytes4"
                    },
                    {
                        "internalType": "address",
                        "name": "sellToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "buyToken",
                        "type": "address"
                    },
                    {
                        "internalType": "bytes",
                        "name": "bridgeData",
                        "type": "bytes"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "amountsIn",
                        "type": "uint256[]"
                    }
                ],
                "name": "_mintCallRevert",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "router",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromUniswap",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "gasUsed",
                        "type": "uint256[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "router",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromUniswap",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "gasUsed",
                        "type": "uint256[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "sellToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "buyToken",
                        "type": "address"
                    },
                    {
                        "internalType": "bytes",
                        "name": "bridgeData",
                        "type": "bytes"
                    },
                    {
                        "internalType": "uint256",
                        "name": "takerTokenAmount",
                        "type": "uint256"
                    }
                ],
                "name": "sampleSwapFromUniswap",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            }
        ],
        "devdoc": {
            "kind": "dev",
            "methods": {
                "_mintCallRevert(bytes4,address,address,bytes,uint256[])": {
                    "details": "Mints the sell token, then performs the swap, then reverts with the amount out. The SwapRevertSamplerQuoteOpts has been unrolled here as our ABI encoder cannot support encoding the function"
                },
                "sampleBuysFromUniswap(address,address,address,uint256[])": {
                    "details": "Sample buy quotes from Uniswap.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "makerTokenAmounts": "Maker token sell amount for each sample.",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "gasUsed": "gas consumed in each sample sell",
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleSellsFromUniswap(address,address,address,uint256[])": {
                    "details": "Sample sell quotes from Uniswap.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "router": "Address of the Uniswap Router",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "gasUsed": "gas consumed in each sample sell",
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount."
                    }
                }
            },
            "version": 1
        },
        "evm": {
            "bytecode": {
                "linkReferences": {},
                "object": "0x60a060405234801561001057600080fd5b50604051611dcf380380611dcf83398101604081905261002f91610044565b60601b6001600160601b031916608052610072565b600060208284031215610055578081fd5b81516001600160a01b038116811461006b578182fd5b9392505050565b60805160601c611d4561008a60003950611d456000f3fe60806040526004361061004e5760003560e01c80631f4ff03e1461005a578063252322b31461007c57806378fee41c146100b3578063b770f849146100d3578063c83190841461010057610055565b3661005557005b600080fd5b34801561006657600080fd5b5061007a6100753660046117ed565b610120565b005b34801561008857600080fd5b5061009c6100973660046116b1565b610478565b6040516100aa929190611a5e565b60405180910390f35b3480156100bf57600080fd5b5061007a6100ce366004611886565b610515565b3480156100df57600080fd5b506100f36100ee366004611724565b6106cb565b6040516100aa9190611c23565b34801561010c57600080fd5b5061009c61011b3660046116b1565b6106ec565b60008160018351038151811061013257fe5b60200260200101519050610144610757565b6001600160a01b0316856001600160a01b031614156101b057846001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b15801561019857600080fd5b505af1935050505080156101aa575060015b50610267565b60405163e326c7d760e01b815285906001600160a01b0382169063e326c7d7906101df90600190600401611a8c565b600060405180830381600087803b1580156101f957600080fd5b505af192505050801561020a575060015b506040516355c3705360e11b81526001600160a01b0382169063ab86e0a69061023990309086906004016119ee565b600060405180830381600087803b15801561025357600080fd5b505af1925050508015610264575060015b50505b6040516000904780156108fc029183818181858288f19350505050158015610293573d6000803e3d6000fd5b506060825167ffffffffffffffff811180156102ae57600080fd5b506040519080825280602002602001820160405280156102d8578160200160208202803683370190505b5090506060835167ffffffffffffffff811180156102f557600080fd5b5060405190808252806020026020018201604052801561031f578160200160208202803683370190505b50905060005b845181101561046357306001600160a01b03166378fee41c621e84808b8b8b8b8b888151811061035157fe5b60200260200101516040518763ffffffff1660e01b8152600401610379959493929190611af1565b600060405180830381600088803b15801561039357600080fd5b5087f1935050505080156103a5575060015b61043a573d8080156103d3576040519150601f19603f3d011682016040523d82523d6000602084013e6103d8565b606091505b506103e281610880565b8584815181106103ee57fe5b6020026020010185858151811061040157fe5b602002602001018281525082815250505083828151811061041e57fe5b6020026020010151600014156104345750610463565b5061045b565b60405162461bcd60e51b815260040161045290611bee565b60405180910390fd5b600101610325565b5061046e82826108b5565b5050505050505050565b6060806105086040518060a00160405280876001600160a01b03168152602001866001600160a01b03168152602001886040516020016104b891906119da565b6040516020818303038152906040528152602001886040516020016104dd91906119da565b60408051601f1981840301815291815290825230602090811b63b770f8491790911b910152846108e3565b9097909650945050505050565b61133761def160901b016001600160a01b031663d0afdca96040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561055957600080fd5b505af192505050801561056a575060015b5060005a905060006060306001600160a01b031688888888886040516024016105969493929190611a21565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516105d491906119be565b6000604051808303816000865af19150503d8060008114610611576040519150601f19603f3d011682016040523d82523d6000602084013e610616565b606091505b50915091505a8303925061133761def160901b016001600160a01b0316630c18c1626040518163ffffffff1660e01b815260040160206040518083038186803b15801561066257600080fd5b505afa925050508015610692575060408051601f3d908101601f1916820190925261068f9181019061191d565b60015b61069b576106a0565b909203915b816106ae576106ae81610d9c565b61046e818060200190518101906106c5919061191d565b84610da4565b60006106e16106d8610757565b86868587610db2565b90505b949350505050565b6060806105086040518060800160405280876001600160a01b03168152602001866001600160a01b031681526020018860405160200161072c91906119da565b60408051601f1981840301815291815290825230602090811b63b770f8491790911b91015284611094565b60004681600182141561077f575073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2610854565b81600314156107a3575073c778417e063141139fce010982780140aa0cd5ab610854565b81600414156107c7575073c778417e063141139fce010982780140aa0cd5ab610854565b81602a14156107eb575073d0a1e359811322d97991e03f863a0c30c2cf029c610854565b816038141561080f575073bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c610854565b81608914156108335750730d500b1d8e8ef31e21c99d1db9a6444d3adf1270610854565b8161053914156108545750730b1ba0af832d7c05fd64161e0db78e85978e80825b6001600160a01b03811661087a5760405162461bcd60e51b815260040161045290611bb7565b91505090565b6000808251604014610897575060009050806108b0565b828060200190518101906108ab9190611935565b915091505b915091565b606082826040516020016108ca929190611a5e565b6040516020818303038152906040529050805160208201fd5b6060808251600014156108f557610d95565b825167ffffffffffffffff8111801561090d57600080fd5b50604051908082528060200260200182016040528015610937578160200160208202803683370190505b509050825167ffffffffffffffff8111801561095257600080fd5b5060405190808252806020026020018201604052801561097c578160200160208202803683370190505b506040805160018082528183019092529193506060919060208083019080368337019050509050836000815181106109b057fe5b6020026020010151816000815181106109c557fe5b6020026020010181815250506109d9611554565b50604080516080808201835287516001600160a01b0390811683526020808a0151909116908301528783015182840152870151640100000000600160c01b0390831c90811663ffffffff9091161790911b6060820152610a37611554565b604051806080016040528088602001516001600160a01b0316815260200188600001516001600160a01b031681526020018860600151815260200188608001518060601c9060401c63ffffffff1663ffffffff169060201b1760401b8152509050610aa28184611094565b805190945015905080610ac9575082600081518110610abd57fe5b60200260200101516000145b15610ad657505050610d95565b6060610ae28385611094565b805190925015905080610b09575080600081518110610afd57fe5b60200260200101516000145b15610b175750505050610d95565b60005b8751811015610d8f57606060005b6003811015610cef57610b778a8481518110610b4057fe5b602002602001015185600081518110610b5557fe5b602002602001015189600081518110610b6a57fe5b602002602001015161115e565b87600081518110610b8457fe5b602090810291909101015286511580610bb1575086600081518110610ba557fe5b60200260200101516000145b15610bbb57610cef565b610bd460056127100161271089600081518110610b6a57fe5b87600081518110610be157fe5b602090810291909101015286511580610c0e575086600081518110610c0257fe5b60200260200101516000145b15610c1857610cef565b6060610c248789611094565b805191945091501580610c4b575080600081518110610c3f57fe5b60200260200101516000145b15610c565750610cef565b8094508a8481518110610c6557fe5b602002602001015185600081518110610c7a57fe5b602002602001015110610ce65760008b8581518110610c9557fe5b60200260200101516127108d8781518110610cac57fe5b602002602001015188600081518110610cc157fe5b6020026020010151030281610cd257fe5b04905060058111610ce4575050610cef565b505b50600101610b28565b5060008151118015610d02575060008351115b15610d865780600081518110610d1457fe5b6020026020010151888381518110610d2857fe5b602002602001018181525050610d6d898381518110610d4357fe5b602002602001015184600081518110610d5857fe5b602002602001015188600081518110610b6a57fe5b878381518110610d7957fe5b6020026020010181815250505b50600101610b1a565b50505050505b9250929050565b805160208201fd5b816000528060205260406000fd5b60008082806020019051810190610dc99190611901565b90506000610dd9888389896111b8565b9050876001600160a01b0316876001600160a01b03161415610edf57604051632e1a7d4d60e01b81526001600160a01b03891690632e1a7d4d90610e21908890600401611c23565b600060405180830381600087803b158015610e3b57600080fd5b505af1158015610e4f573d6000803e3d6000fd5b505060405163ad65d76d60e01b81526001600160a01b038416925063ad65d76d91508790610e869060019042903090600401611b61565b6020604051808303818588803b158015610e9f57600080fd5b505af1158015610eb3573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190610ed8919061191d565b9250611089565b876001600160a01b0316866001600160a01b03161415610feb57610f0d6001600160a01b03881682876112f8565b6040516395e3c50b60e01b81526001600160a01b038216906395e3c50b90610f3e9088906001904290600401611c58565b602060405180830381600087803b158015610f5857600080fd5b505af1158015610f6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f90919061191d565b9250876001600160a01b031663d0e30db0846040518263ffffffff1660e01b81526004016000604051808303818588803b158015610fcd57600080fd5b505af1158015610fe1573d6000803e3d6000fd5b5050505050611089565b610fff6001600160a01b03881682876112f8565b60405163ddf7e1a760e01b81526001600160a01b0382169063ddf7e1a790611034908890600190819042908d90600401611c2c565b602060405180830381600087803b15801561104e57600080fd5b505af1158015611062573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611086919061191d565b92505b505095945050505050565b606082810151835160208501516040808701519051630fa7f81f60e11b815285943094631f4ff03e946110e09460a09390931b6001600160e01b03191693919290918a90600401611a97565b600060405180830381600087803b1580156110fa57600080fd5b505af192505050801561110b575060015b61043a573d808015611139576040519150601f19603f3d011682016040523d82523d6000602084013e61113e565b606091505b5080806020019051810190611153919061178c565b93509150610d959050565b600083158061116b575081155b80611174575082155b15611181575060006111b1565b8382028285828161118e57fe5b041461119e5760009150506111b1565b83600185038201816111ac57fe5b049150505b9392505050565b6000846001600160a01b0316836001600160a01b031614611254576040516303795fb160e11b81526001600160a01b038516906306f2bf62906111ff9086906004016119da565b60206040518083038186803b15801561121757600080fd5b505afa15801561122b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061124f9190611901565b6112d0565b6040516303795fb160e11b81526001600160a01b038516906306f2bf62906112809085906004016119da565b60206040518083038186803b15801561129857600080fd5b505afa1580156112ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112d09190611901565b90506001600160a01b0381166106e45760405162461bcd60e51b815260040161045290611b80565b604051636eb1769f60e11b815281906001600160a01b0385169063dd62ed3e906113289030908790600401611a07565b60206040518083038186803b15801561134057600080fd5b505afa158015611354573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611378919061191d565b101561138b5761138b8383600019611390565b505050565b606063095ea7b360e01b83836040516024016113ad9291906119ee565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915290506113eb84826113f1565b50505050565b60006060836001600160a01b03168360405161140d91906119be565b6000604051808303816000865af19150503d806000811461144a576040519150601f19603f3d011682016040523d82523d6000602084013e61144f565b606091505b509150915081801561146557506114658161147e565b1561147157505061147a565b6113eb81610d9c565b5050565b6000815160001415611492575060016114bf565b60208251106114bf5760006114a88360006114c4565b905080600114156114bd5760019150506114bf565b505b919050565b60006111b18383600081602001835110156114f1576114f16114ec60058551856020016114fa565b610d9c565b50016020015190565b6060632800659560e01b84848460405160240161151993929190611b3f565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915290509392505050565b6040805160808101825260008082526020820181905260609282018390529181019190915290565b600082601f83011261158c578081fd5b813561159f61159a82611c95565b611c6e565b8181529150602080830190848101818402860182018710156115c057600080fd5b60005b848110156115df578135845292820192908201906001016115c3565b505050505092915050565b600082601f8301126115fa578081fd5b815161160861159a82611c95565b81815291506020808301908481018184028601820187101561162957600080fd5b60005b848110156115df5781518452928201929082019060010161162c565b600082601f830112611658578081fd5b813567ffffffffffffffff81111561166e578182fd5b611681601f8201601f1916602001611c6e565b915080825283602082850101111561169857600080fd5b8060208401602084013760009082016020015292915050565b600080600080608085870312156116c6578384fd5b84356116d181611ce1565b935060208501356116e181611ce1565b925060408501356116f181611ce1565b9150606085013567ffffffffffffffff81111561170c578182fd5b6117188782880161157c565b91505092959194509250565b60008060008060808587031215611739578384fd5b843561174481611ce1565b9350602085013561175481611ce1565b9250604085013567ffffffffffffffff81111561176f578283fd5b61177b87828801611648565b949793965093946060013593505050565b6000806040838503121561179e578182fd5b825167ffffffffffffffff808211156117b5578384fd5b6117c1868387016115ea565b935060208501519150808211156117d6578283fd5b506117e3858286016115ea565b9150509250929050565b600080600080600060a08688031215611804578081fd5b853561180f81611cf9565b9450602086013561181f81611ce1565b9350604086013561182f81611ce1565b9250606086013567ffffffffffffffff8082111561184b578283fd5b61185789838a01611648565b9350608088013591508082111561186c578283fd5b506118798882890161157c565b9150509295509295909350565b600080600080600060a0868803121561189d578081fd5b85356118a881611cf9565b945060208601356118b881611ce1565b935060408601356118c881611ce1565b9250606086013567ffffffffffffffff8111156118e3578182fd5b6118ef88828901611648565b95989497509295608001359392505050565b600060208284031215611912578081fd5b81516111b181611ce1565b60006020828403121561192e578081fd5b5051919050565b60008060408385031215611947578182fd5b505080516020909101519092909150565b6000815180845260208085019450808401835b838110156119875781518752958201959082019060010161196b565b509495945050505050565b600081518084526119aa816020860160208601611cb5565b601f01601f19169290920160200192915050565b600082516119d0818460208701611cb5565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b03858116825284166020820152608060408201819052600090611a4d90830185611992565b905082606083015295945050505050565b600060408252611a716040830185611958565b8281036020840152611a838185611958565b95945050505050565b901515815260200190565b6001600160e01b0319861681526001600160a01b0385811660208301528416604082015260a060608201819052600090611ad390830185611992565b8281036080840152611ae58185611958565b98975050505050505050565b6001600160e01b0319861681526001600160a01b0385811660208301528416604082015260a060608201819052600090611b2d90830185611992565b90508260808301529695505050505050565b6060810160088510611b4d57fe5b938152602081019290925260409091015290565b92835260208301919091526001600160a01b0316604082015260600190565b60208082526018908201527f4d6978696e556e69737761702f4e4f5f45584348414e47450000000000000000604082015260600190565b60208082526017908201527f4e6f206e6174697665207772617070656420746f6b656e000000000000000000604082015260600190565b6020808252818101527f537761702053616d706c652073686f756c642068617665207265766572746564604082015260600190565b90815260200190565b9485526020850193909352604084019190915260608301526001600160a01b0316608082015260a00190565b9283526020830191909152604082015260600190565b60405181810167ffffffffffffffff81118282101715611c8d57600080fd5b604052919050565b600067ffffffffffffffff821115611cab578081fd5b5060209081020190565b60005b83811015611cd0578181015183820152602001611cb8565b838111156113eb5750506000910152565b6001600160a01b0381168114611cf657600080fd5b50565b6001600160e01b031981168114611cf657600080fdfea264697066735822122011281209cfa96e3cd96ce3bd9d77f76feacfef8f4fefaf7f07c0e6d36ff6510564736f6c634300060c0033",
                "opcodes": "PUSH1 0xA0 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x1DCF CODESIZE SUB DUP1 PUSH2 0x1DCF DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH2 0x2F SWAP2 PUSH2 0x44 JUMP JUMPDEST PUSH1 0x60 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT AND PUSH1 0x80 MSTORE PUSH2 0x72 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x55 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x6B JUMPI DUP2 DUP3 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0x60 SHR PUSH2 0x1D45 PUSH2 0x8A PUSH1 0x0 CODECOPY POP PUSH2 0x1D45 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x4E JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x1F4FF03E EQ PUSH2 0x5A JUMPI DUP1 PUSH4 0x252322B3 EQ PUSH2 0x7C JUMPI DUP1 PUSH4 0x78FEE41C EQ PUSH2 0xB3 JUMPI DUP1 PUSH4 0xB770F849 EQ PUSH2 0xD3 JUMPI DUP1 PUSH4 0xC8319084 EQ PUSH2 0x100 JUMPI PUSH2 0x55 JUMP JUMPDEST CALLDATASIZE PUSH2 0x55 JUMPI STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x66 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x7A PUSH2 0x75 CALLDATASIZE PUSH1 0x4 PUSH2 0x17ED JUMP JUMPDEST PUSH2 0x120 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x88 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x9C PUSH2 0x97 CALLDATASIZE PUSH1 0x4 PUSH2 0x16B1 JUMP JUMPDEST PUSH2 0x478 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xAA SWAP3 SWAP2 SWAP1 PUSH2 0x1A5E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xBF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x7A PUSH2 0xCE CALLDATASIZE PUSH1 0x4 PUSH2 0x1886 JUMP JUMPDEST PUSH2 0x515 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xDF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF3 PUSH2 0xEE CALLDATASIZE PUSH1 0x4 PUSH2 0x1724 JUMP JUMPDEST PUSH2 0x6CB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xAA SWAP2 SWAP1 PUSH2 0x1C23 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x10C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x9C PUSH2 0x11B CALLDATASIZE PUSH1 0x4 PUSH2 0x16B1 JUMP JUMPDEST PUSH2 0x6EC JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x1 DUP4 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x132 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH2 0x144 PUSH2 0x757 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x1B0 JUMPI DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD0E30DB0 DUP3 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x198 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x1AA JUMPI POP PUSH1 0x1 JUMPDEST POP PUSH2 0x267 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xE326C7D7 PUSH1 0xE0 SHL DUP2 MSTORE DUP6 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH4 0xE326C7D7 SWAP1 PUSH2 0x1DF SWAP1 PUSH1 0x1 SWAP1 PUSH1 0x4 ADD PUSH2 0x1A8C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1F9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x20A JUMPI POP PUSH1 0x1 JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0x55C37053 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH4 0xAB86E0A6 SWAP1 PUSH2 0x239 SWAP1 ADDRESS SWAP1 DUP7 SWAP1 PUSH1 0x4 ADD PUSH2 0x19EE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x253 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x264 JUMPI POP PUSH1 0x1 JUMPDEST POP POP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 SELFBALANCE DUP1 ISZERO PUSH2 0x8FC MUL SWAP2 DUP4 DUP2 DUP2 DUP2 DUP6 DUP3 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x293 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x60 DUP3 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x2AE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2D8 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x60 DUP4 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x2F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x31F JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x463 JUMPI ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x78FEE41C PUSH3 0x1E8480 DUP12 DUP12 DUP12 DUP12 DUP12 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x351 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP8 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x379 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1AF1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x393 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP8 CALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x3A5 JUMPI POP PUSH1 0x1 JUMPDEST PUSH2 0x43A JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x3D3 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x3D8 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH2 0x3E2 DUP2 PUSH2 0x880 JUMP JUMPDEST DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x3EE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP6 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x401 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP3 DUP2 MSTORE POP DUP3 DUP2 MSTORE POP POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x41E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x434 JUMPI POP PUSH2 0x463 JUMP JUMPDEST POP PUSH2 0x45B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x452 SWAP1 PUSH2 0x1BEE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 ADD PUSH2 0x325 JUMP JUMPDEST POP PUSH2 0x46E DUP3 DUP3 PUSH2 0x8B5 JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH2 0x508 PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x4B8 SWAP2 SWAP1 PUSH2 0x19DA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x4DD SWAP2 SWAP1 PUSH2 0x19DA JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0xB770F849 OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP5 PUSH2 0x8E3 JUMP JUMPDEST SWAP1 SWAP8 SWAP1 SWAP7 POP SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 0x1337 PUSH2 0xDEF1 PUSH1 0x90 SHL ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD0AFDCA9 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x559 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x56A JUMPI POP PUSH1 0x1 JUMPDEST POP PUSH1 0x0 GAS SWAP1 POP PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP9 DUP9 DUP9 DUP9 DUP9 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x596 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1A21 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x5D4 SWAP2 SWAP1 PUSH2 0x19BE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x611 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x616 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP GAS DUP4 SUB SWAP3 POP PUSH2 0x1337 PUSH2 0xDEF1 PUSH1 0x90 SHL ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xC18C162 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x662 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x692 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x68F SWAP2 DUP2 ADD SWAP1 PUSH2 0x191D JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x69B JUMPI PUSH2 0x6A0 JUMP JUMPDEST SWAP1 SWAP3 SUB SWAP2 JUMPDEST DUP2 PUSH2 0x6AE JUMPI PUSH2 0x6AE DUP2 PUSH2 0xD9C JUMP JUMPDEST PUSH2 0x46E DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x6C5 SWAP2 SWAP1 PUSH2 0x191D JUMP JUMPDEST DUP5 PUSH2 0xDA4 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6E1 PUSH2 0x6D8 PUSH2 0x757 JUMP JUMPDEST DUP7 DUP7 DUP6 DUP8 PUSH2 0xDB2 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH2 0x508 PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x72C SWAP2 SWAP1 PUSH2 0x19DA JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0xB770F849 OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP5 PUSH2 0x1094 JUMP JUMPDEST PUSH1 0x0 CHAINID DUP2 PUSH1 0x1 DUP3 EQ ISZERO PUSH2 0x77F JUMPI POP PUSH20 0xC02AAA39B223FE8D0A0E5C4F27EAD9083C756CC2 PUSH2 0x854 JUMP JUMPDEST DUP2 PUSH1 0x3 EQ ISZERO PUSH2 0x7A3 JUMPI POP PUSH20 0xC778417E063141139FCE010982780140AA0CD5AB PUSH2 0x854 JUMP JUMPDEST DUP2 PUSH1 0x4 EQ ISZERO PUSH2 0x7C7 JUMPI POP PUSH20 0xC778417E063141139FCE010982780140AA0CD5AB PUSH2 0x854 JUMP JUMPDEST DUP2 PUSH1 0x2A EQ ISZERO PUSH2 0x7EB JUMPI POP PUSH20 0xD0A1E359811322D97991E03F863A0C30C2CF029C PUSH2 0x854 JUMP JUMPDEST DUP2 PUSH1 0x38 EQ ISZERO PUSH2 0x80F JUMPI POP PUSH20 0xBB4CDB9CBD36B01BD1CBAEBF2DE08D9173BC095C PUSH2 0x854 JUMP JUMPDEST DUP2 PUSH1 0x89 EQ ISZERO PUSH2 0x833 JUMPI POP PUSH20 0xD500B1D8E8EF31E21C99D1DB9A6444D3ADF1270 PUSH2 0x854 JUMP JUMPDEST DUP2 PUSH2 0x539 EQ ISZERO PUSH2 0x854 JUMPI POP PUSH20 0xB1BA0AF832D7C05FD64161E0DB78E85978E8082 JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x87A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x452 SWAP1 PUSH2 0x1BB7 JUMP JUMPDEST SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 MLOAD PUSH1 0x40 EQ PUSH2 0x897 JUMPI POP PUSH1 0x0 SWAP1 POP DUP1 PUSH2 0x8B0 JUMP JUMPDEST DUP3 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x8AB SWAP2 SWAP1 PUSH2 0x1935 JUMP JUMPDEST SWAP2 POP SWAP2 POP JUMPDEST SWAP2 POP SWAP2 JUMP JUMPDEST PUSH1 0x60 DUP3 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x8CA SWAP3 SWAP2 SWAP1 PUSH2 0x1A5E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH1 0x60 DUP1 DUP3 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x8F5 JUMPI PUSH2 0xD95 JUMP JUMPDEST DUP3 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x90D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x937 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP3 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x952 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x97C JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE SWAP2 SWAP4 POP PUSH1 0x60 SWAP2 SWAP1 PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP4 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x9B0 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x9C5 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP PUSH2 0x9D9 PUSH2 0x1554 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP1 DUP3 ADD DUP4 MSTORE DUP8 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP4 MSTORE PUSH1 0x20 DUP1 DUP11 ADD MLOAD SWAP1 SWAP2 AND SWAP1 DUP4 ADD MSTORE DUP8 DUP4 ADD MLOAD DUP3 DUP5 ADD MSTORE DUP8 ADD MLOAD PUSH5 0x100000000 PUSH1 0x1 PUSH1 0xC0 SHL SUB SWAP1 DUP4 SHR SWAP1 DUP2 AND PUSH4 0xFFFFFFFF SWAP1 SWAP2 AND OR SWAP1 SWAP2 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH2 0xA37 PUSH2 0x1554 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 DUP9 PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x60 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x80 ADD MLOAD DUP1 PUSH1 0x60 SHR SWAP1 PUSH1 0x40 SHR PUSH4 0xFFFFFFFF AND PUSH4 0xFFFFFFFF AND SWAP1 PUSH1 0x20 SHL OR PUSH1 0x40 SHL DUP2 MSTORE POP SWAP1 POP PUSH2 0xAA2 DUP2 DUP5 PUSH2 0x1094 JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP5 POP ISZERO SWAP1 POP DUP1 PUSH2 0xAC9 JUMPI POP DUP3 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xABD JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ JUMPDEST ISZERO PUSH2 0xAD6 JUMPI POP POP POP PUSH2 0xD95 JUMP JUMPDEST PUSH1 0x60 PUSH2 0xAE2 DUP4 DUP6 PUSH2 0x1094 JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP3 POP ISZERO SWAP1 POP DUP1 PUSH2 0xB09 JUMPI POP DUP1 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xAFD JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ JUMPDEST ISZERO PUSH2 0xB17 JUMPI POP POP POP POP PUSH2 0xD95 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP8 MLOAD DUP2 LT ISZERO PUSH2 0xD8F JUMPI PUSH1 0x60 PUSH1 0x0 JUMPDEST PUSH1 0x3 DUP2 LT ISZERO PUSH2 0xCEF JUMPI PUSH2 0xB77 DUP11 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xB40 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xB55 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP10 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xB6A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x115E JUMP JUMPDEST DUP8 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xB84 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE DUP7 MLOAD ISZERO DUP1 PUSH2 0xBB1 JUMPI POP DUP7 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xBA5 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ JUMPDEST ISZERO PUSH2 0xBBB JUMPI PUSH2 0xCEF JUMP JUMPDEST PUSH2 0xBD4 PUSH1 0x5 PUSH2 0x2710 ADD PUSH2 0x2710 DUP10 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xB6A JUMPI INVALID JUMPDEST DUP8 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xBE1 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE DUP7 MLOAD ISZERO DUP1 PUSH2 0xC0E JUMPI POP DUP7 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xC02 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ JUMPDEST ISZERO PUSH2 0xC18 JUMPI PUSH2 0xCEF JUMP JUMPDEST PUSH1 0x60 PUSH2 0xC24 DUP8 DUP10 PUSH2 0x1094 JUMP JUMPDEST DUP1 MLOAD SWAP2 SWAP5 POP SWAP2 POP ISZERO DUP1 PUSH2 0xC4B JUMPI POP DUP1 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xC3F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ JUMPDEST ISZERO PUSH2 0xC56 JUMPI POP PUSH2 0xCEF JUMP JUMPDEST DUP1 SWAP5 POP DUP11 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xC65 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xC7A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD LT PUSH2 0xCE6 JUMPI PUSH1 0x0 DUP12 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0xC95 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x2710 DUP14 DUP8 DUP2 MLOAD DUP2 LT PUSH2 0xCAC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xCC1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SUB MUL DUP2 PUSH2 0xCD2 JUMPI INVALID JUMPDEST DIV SWAP1 POP PUSH1 0x5 DUP2 GT PUSH2 0xCE4 JUMPI POP POP PUSH2 0xCEF JUMP JUMPDEST POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0xB28 JUMP JUMPDEST POP PUSH1 0x0 DUP2 MLOAD GT DUP1 ISZERO PUSH2 0xD02 JUMPI POP PUSH1 0x0 DUP4 MLOAD GT JUMPDEST ISZERO PUSH2 0xD86 JUMPI DUP1 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xD14 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xD28 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP PUSH2 0xD6D DUP10 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xD43 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xD58 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xB6A JUMPI INVALID JUMPDEST DUP8 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xD79 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0xB1A JUMP JUMPDEST POP POP POP POP POP JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST DUP2 PUSH1 0x0 MSTORE DUP1 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0xDC9 SWAP2 SWAP1 PUSH2 0x1901 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xDD9 DUP9 DUP4 DUP10 DUP10 PUSH2 0x11B8 JUMP JUMPDEST SWAP1 POP DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0xEDF JUMPI PUSH1 0x40 MLOAD PUSH4 0x2E1A7D4D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND SWAP1 PUSH4 0x2E1A7D4D SWAP1 PUSH2 0xE21 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x1C23 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xE3B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xE4F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH4 0xAD65D76D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP3 POP PUSH4 0xAD65D76D SWAP2 POP DUP8 SWAP1 PUSH2 0xE86 SWAP1 PUSH1 0x1 SWAP1 TIMESTAMP SWAP1 ADDRESS SWAP1 PUSH1 0x4 ADD PUSH2 0x1B61 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xE9F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xEB3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xED8 SWAP2 SWAP1 PUSH2 0x191D JUMP JUMPDEST SWAP3 POP PUSH2 0x1089 JUMP JUMPDEST DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0xFEB JUMPI PUSH2 0xF0D PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND DUP3 DUP8 PUSH2 0x12F8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x95E3C50B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH4 0x95E3C50B SWAP1 PUSH2 0xF3E SWAP1 DUP9 SWAP1 PUSH1 0x1 SWAP1 TIMESTAMP SWAP1 PUSH1 0x4 ADD PUSH2 0x1C58 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xF58 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xF6C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xF90 SWAP2 SWAP1 PUSH2 0x191D JUMP JUMPDEST SWAP3 POP DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD0E30DB0 DUP5 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xFCD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xFE1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP PUSH2 0x1089 JUMP JUMPDEST PUSH2 0xFFF PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND DUP3 DUP8 PUSH2 0x12F8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xDDF7E1A7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH4 0xDDF7E1A7 SWAP1 PUSH2 0x1034 SWAP1 DUP9 SWAP1 PUSH1 0x1 SWAP1 DUP2 SWAP1 TIMESTAMP SWAP1 DUP14 SWAP1 PUSH1 0x4 ADD PUSH2 0x1C2C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x104E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1062 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1086 SWAP2 SWAP1 PUSH2 0x191D JUMP JUMPDEST SWAP3 POP JUMPDEST POP POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 DUP2 ADD MLOAD DUP4 MLOAD PUSH1 0x20 DUP6 ADD MLOAD PUSH1 0x40 DUP1 DUP8 ADD MLOAD SWAP1 MLOAD PUSH4 0xFA7F81F PUSH1 0xE1 SHL DUP2 MSTORE DUP6 SWAP5 ADDRESS SWAP5 PUSH4 0x1F4FF03E SWAP5 PUSH2 0x10E0 SWAP5 PUSH1 0xA0 SWAP4 SWAP1 SWAP4 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND SWAP4 SWAP2 SWAP3 SWAP1 SWAP2 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x1A97 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x10FA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x110B JUMPI POP PUSH1 0x1 JUMPDEST PUSH2 0x43A JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x1139 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x113E JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x1153 SWAP2 SWAP1 PUSH2 0x178C JUMP JUMPDEST SWAP4 POP SWAP2 POP PUSH2 0xD95 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP4 ISZERO DUP1 PUSH2 0x116B JUMPI POP DUP2 ISZERO JUMPDEST DUP1 PUSH2 0x1174 JUMPI POP DUP3 ISZERO JUMPDEST ISZERO PUSH2 0x1181 JUMPI POP PUSH1 0x0 PUSH2 0x11B1 JUMP JUMPDEST DUP4 DUP3 MUL DUP3 DUP6 DUP3 DUP2 PUSH2 0x118E JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x119E JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x11B1 JUMP JUMPDEST DUP4 PUSH1 0x1 DUP6 SUB DUP3 ADD DUP2 PUSH2 0x11AC JUMPI INVALID JUMPDEST DIV SWAP2 POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1254 JUMPI PUSH1 0x40 MLOAD PUSH4 0x3795FB1 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0x6F2BF62 SWAP1 PUSH2 0x11FF SWAP1 DUP7 SWAP1 PUSH1 0x4 ADD PUSH2 0x19DA JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1217 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x122B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x124F SWAP2 SWAP1 PUSH2 0x1901 JUMP JUMPDEST PUSH2 0x12D0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x3795FB1 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0x6F2BF62 SWAP1 PUSH2 0x1280 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x19DA JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1298 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x12AC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x12D0 SWAP2 SWAP1 PUSH2 0x1901 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x6E4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x452 SWAP1 PUSH2 0x1B80 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x6EB1769F PUSH1 0xE1 SHL DUP2 MSTORE DUP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0xDD62ED3E SWAP1 PUSH2 0x1328 SWAP1 ADDRESS SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x1A07 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1340 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1354 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1378 SWAP2 SWAP1 PUSH2 0x191D JUMP JUMPDEST LT ISZERO PUSH2 0x138B JUMPI PUSH2 0x138B DUP4 DUP4 PUSH1 0x0 NOT PUSH2 0x1390 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH4 0x95EA7B3 PUSH1 0xE0 SHL DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x13AD SWAP3 SWAP2 SWAP1 PUSH2 0x19EE JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP PUSH2 0x13EB DUP5 DUP3 PUSH2 0x13F1 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x40 MLOAD PUSH2 0x140D SWAP2 SWAP1 PUSH2 0x19BE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x144A JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x144F JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x1465 JUMPI POP PUSH2 0x1465 DUP2 PUSH2 0x147E JUMP JUMPDEST ISZERO PUSH2 0x1471 JUMPI POP POP PUSH2 0x147A JUMP JUMPDEST PUSH2 0x13EB DUP2 PUSH2 0xD9C JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x1492 JUMPI POP PUSH1 0x1 PUSH2 0x14BF JUMP JUMPDEST PUSH1 0x20 DUP3 MLOAD LT PUSH2 0x14BF JUMPI PUSH1 0x0 PUSH2 0x14A8 DUP4 PUSH1 0x0 PUSH2 0x14C4 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 EQ ISZERO PUSH2 0x14BD JUMPI PUSH1 0x1 SWAP2 POP POP PUSH2 0x14BF JUMP JUMPDEST POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x11B1 DUP4 DUP4 PUSH1 0x0 DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO PUSH2 0x14F1 JUMPI PUSH2 0x14F1 PUSH2 0x14EC PUSH1 0x5 DUP6 MLOAD DUP6 PUSH1 0x20 ADD PUSH2 0x14FA JUMP JUMPDEST PUSH2 0xD9C JUMP JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH4 0x28006595 PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1519 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1B3F JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x60 SWAP3 DUP3 ADD DUP4 SWAP1 MSTORE SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x158C JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x159F PUSH2 0x159A DUP3 PUSH2 0x1C95 JUMP JUMPDEST PUSH2 0x1C6E JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x15C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x15DF JUMPI DUP2 CALLDATALOAD DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x15C3 JUMP JUMPDEST POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x15FA JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x1608 PUSH2 0x159A DUP3 PUSH2 0x1C95 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x1629 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x15DF JUMPI DUP2 MLOAD DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x162C JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1658 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x166E JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x1681 PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD PUSH2 0x1C6E JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x1698 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP5 ADD CALLDATACOPY PUSH1 0x0 SWAP1 DUP3 ADD PUSH1 0x20 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x16C6 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x16D1 DUP2 PUSH2 0x1CE1 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x16E1 DUP2 PUSH2 0x1CE1 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x16F1 DUP2 PUSH2 0x1CE1 JUMP JUMPDEST SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x170C JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x1718 DUP8 DUP3 DUP9 ADD PUSH2 0x157C JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1739 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x1744 DUP2 PUSH2 0x1CE1 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x1754 DUP2 PUSH2 0x1CE1 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x176F JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x177B DUP8 DUP3 DUP9 ADD PUSH2 0x1648 JUMP JUMPDEST SWAP5 SWAP8 SWAP4 SWAP7 POP SWAP4 SWAP5 PUSH1 0x60 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x179E JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x17B5 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x17C1 DUP7 DUP4 DUP8 ADD PUSH2 0x15EA JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x17D6 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x17E3 DUP6 DUP3 DUP7 ADD PUSH2 0x15EA JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x1804 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x180F DUP2 PUSH2 0x1CF9 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x181F DUP2 PUSH2 0x1CE1 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH2 0x182F DUP2 PUSH2 0x1CE1 JUMP JUMPDEST SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x184B JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x1857 DUP10 DUP4 DUP11 ADD PUSH2 0x1648 JUMP JUMPDEST SWAP4 POP PUSH1 0x80 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x186C JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x1879 DUP9 DUP3 DUP10 ADD PUSH2 0x157C JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x189D JUMPI DUP1 DUP2 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x18A8 DUP2 PUSH2 0x1CF9 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x18B8 DUP2 PUSH2 0x1CE1 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH2 0x18C8 DUP2 PUSH2 0x1CE1 JUMP JUMPDEST SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x18E3 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x18EF DUP9 DUP3 DUP10 ADD PUSH2 0x1648 JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP3 SWAP6 PUSH1 0x80 ADD CALLDATALOAD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1912 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x11B1 DUP2 PUSH2 0x1CE1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x192E JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1947 JUMPI DUP2 DUP3 REVERT JUMPDEST POP POP DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD MLOAD SWAP1 SWAP3 SWAP1 SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD DUP4 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1987 JUMPI DUP2 MLOAD DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x196B JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x19AA DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x1CB5 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x19D0 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x1CB5 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x80 PUSH1 0x40 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x1A4D SWAP1 DUP4 ADD DUP6 PUSH2 0x1992 JUMP JUMPDEST SWAP1 POP DUP3 PUSH1 0x60 DUP4 ADD MSTORE SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 MSTORE PUSH2 0x1A71 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x1958 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x1A83 DUP2 DUP6 PUSH2 0x1958 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP7 AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND PUSH1 0x20 DUP4 ADD MSTORE DUP5 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0xA0 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x1AD3 SWAP1 DUP4 ADD DUP6 PUSH2 0x1992 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x80 DUP5 ADD MSTORE PUSH2 0x1AE5 DUP2 DUP6 PUSH2 0x1958 JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP7 AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND PUSH1 0x20 DUP4 ADD MSTORE DUP5 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0xA0 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x1B2D SWAP1 DUP4 ADD DUP6 PUSH2 0x1992 JUMP JUMPDEST SWAP1 POP DUP3 PUSH1 0x80 DUP4 ADD MSTORE SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH1 0x8 DUP6 LT PUSH2 0x1B4D JUMPI INVALID JUMPDEST SWAP4 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x18 SWAP1 DUP3 ADD MSTORE PUSH32 0x4D6978696E556E69737761702F4E4F5F45584348414E47450000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x17 SWAP1 DUP3 ADD MSTORE PUSH32 0x4E6F206E6174697665207772617070656420746F6B656E000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x537761702053616D706C652073686F756C642068617665207265766572746564 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP5 DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x40 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 ADD SWAP1 JUMP JUMPDEST SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x1C8D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1CAB JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1CD0 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1CB8 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x13EB JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x1CF6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x1CF6 JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 GT 0x28 SLT MULMOD 0xCF 0xA9 PUSH15 0x3CD96CE3BD9D77F76FEACFEF8F4FEF 0xAF PUSH32 0x7C0E6D36FF6510564736F6C634300060C003300000000000000000000000000 ",
                "sourceMap": "802:2776:21:-:0;;;876:82;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3912:11:55;;-1:-1:-1;;;;;;3912:11:55;;;802:2776:21;;192:309:-1;;330:2;318:9;309:7;305:23;301:32;298:2;;;-1:-1;;336:12;298:2;106:13;;-1:-1;;;;;789:54;;937:58;;927:2;;-1:-1;;999:12;927:2;388:97;292:209;-1:-1;;;292:209::o;:::-;802:2776:21;;;;;;;;;;;"
            },
            "deployedBytecode": {
                "immutableReferences": {},
                "linkReferences": {},
                "object": "0x60806040526004361061004e5760003560e01c80631f4ff03e1461005a578063252322b31461007c57806378fee41c146100b3578063b770f849146100d3578063c83190841461010057610055565b3661005557005b600080fd5b34801561006657600080fd5b5061007a6100753660046117ed565b610120565b005b34801561008857600080fd5b5061009c6100973660046116b1565b610478565b6040516100aa929190611a5e565b60405180910390f35b3480156100bf57600080fd5b5061007a6100ce366004611886565b610515565b3480156100df57600080fd5b506100f36100ee366004611724565b6106cb565b6040516100aa9190611c23565b34801561010c57600080fd5b5061009c61011b3660046116b1565b6106ec565b60008160018351038151811061013257fe5b60200260200101519050610144610757565b6001600160a01b0316856001600160a01b031614156101b057846001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b15801561019857600080fd5b505af1935050505080156101aa575060015b50610267565b60405163e326c7d760e01b815285906001600160a01b0382169063e326c7d7906101df90600190600401611a8c565b600060405180830381600087803b1580156101f957600080fd5b505af192505050801561020a575060015b506040516355c3705360e11b81526001600160a01b0382169063ab86e0a69061023990309086906004016119ee565b600060405180830381600087803b15801561025357600080fd5b505af1925050508015610264575060015b50505b6040516000904780156108fc029183818181858288f19350505050158015610293573d6000803e3d6000fd5b506060825167ffffffffffffffff811180156102ae57600080fd5b506040519080825280602002602001820160405280156102d8578160200160208202803683370190505b5090506060835167ffffffffffffffff811180156102f557600080fd5b5060405190808252806020026020018201604052801561031f578160200160208202803683370190505b50905060005b845181101561046357306001600160a01b03166378fee41c621e84808b8b8b8b8b888151811061035157fe5b60200260200101516040518763ffffffff1660e01b8152600401610379959493929190611af1565b600060405180830381600088803b15801561039357600080fd5b5087f1935050505080156103a5575060015b61043a573d8080156103d3576040519150601f19603f3d011682016040523d82523d6000602084013e6103d8565b606091505b506103e281610880565b8584815181106103ee57fe5b6020026020010185858151811061040157fe5b602002602001018281525082815250505083828151811061041e57fe5b6020026020010151600014156104345750610463565b5061045b565b60405162461bcd60e51b815260040161045290611bee565b60405180910390fd5b600101610325565b5061046e82826108b5565b5050505050505050565b6060806105086040518060a00160405280876001600160a01b03168152602001866001600160a01b03168152602001886040516020016104b891906119da565b6040516020818303038152906040528152602001886040516020016104dd91906119da565b60408051601f1981840301815291815290825230602090811b63b770f8491790911b910152846108e3565b9097909650945050505050565b61133761def160901b016001600160a01b031663d0afdca96040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561055957600080fd5b505af192505050801561056a575060015b5060005a905060006060306001600160a01b031688888888886040516024016105969493929190611a21565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516105d491906119be565b6000604051808303816000865af19150503d8060008114610611576040519150601f19603f3d011682016040523d82523d6000602084013e610616565b606091505b50915091505a8303925061133761def160901b016001600160a01b0316630c18c1626040518163ffffffff1660e01b815260040160206040518083038186803b15801561066257600080fd5b505afa925050508015610692575060408051601f3d908101601f1916820190925261068f9181019061191d565b60015b61069b576106a0565b909203915b816106ae576106ae81610d9c565b61046e818060200190518101906106c5919061191d565b84610da4565b60006106e16106d8610757565b86868587610db2565b90505b949350505050565b6060806105086040518060800160405280876001600160a01b03168152602001866001600160a01b031681526020018860405160200161072c91906119da565b60408051601f1981840301815291815290825230602090811b63b770f8491790911b91015284611094565b60004681600182141561077f575073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2610854565b81600314156107a3575073c778417e063141139fce010982780140aa0cd5ab610854565b81600414156107c7575073c778417e063141139fce010982780140aa0cd5ab610854565b81602a14156107eb575073d0a1e359811322d97991e03f863a0c30c2cf029c610854565b816038141561080f575073bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c610854565b81608914156108335750730d500b1d8e8ef31e21c99d1db9a6444d3adf1270610854565b8161053914156108545750730b1ba0af832d7c05fd64161e0db78e85978e80825b6001600160a01b03811661087a5760405162461bcd60e51b815260040161045290611bb7565b91505090565b6000808251604014610897575060009050806108b0565b828060200190518101906108ab9190611935565b915091505b915091565b606082826040516020016108ca929190611a5e565b6040516020818303038152906040529050805160208201fd5b6060808251600014156108f557610d95565b825167ffffffffffffffff8111801561090d57600080fd5b50604051908082528060200260200182016040528015610937578160200160208202803683370190505b509050825167ffffffffffffffff8111801561095257600080fd5b5060405190808252806020026020018201604052801561097c578160200160208202803683370190505b506040805160018082528183019092529193506060919060208083019080368337019050509050836000815181106109b057fe5b6020026020010151816000815181106109c557fe5b6020026020010181815250506109d9611554565b50604080516080808201835287516001600160a01b0390811683526020808a0151909116908301528783015182840152870151640100000000600160c01b0390831c90811663ffffffff9091161790911b6060820152610a37611554565b604051806080016040528088602001516001600160a01b0316815260200188600001516001600160a01b031681526020018860600151815260200188608001518060601c9060401c63ffffffff1663ffffffff169060201b1760401b8152509050610aa28184611094565b805190945015905080610ac9575082600081518110610abd57fe5b60200260200101516000145b15610ad657505050610d95565b6060610ae28385611094565b805190925015905080610b09575080600081518110610afd57fe5b60200260200101516000145b15610b175750505050610d95565b60005b8751811015610d8f57606060005b6003811015610cef57610b778a8481518110610b4057fe5b602002602001015185600081518110610b5557fe5b602002602001015189600081518110610b6a57fe5b602002602001015161115e565b87600081518110610b8457fe5b602090810291909101015286511580610bb1575086600081518110610ba557fe5b60200260200101516000145b15610bbb57610cef565b610bd460056127100161271089600081518110610b6a57fe5b87600081518110610be157fe5b602090810291909101015286511580610c0e575086600081518110610c0257fe5b60200260200101516000145b15610c1857610cef565b6060610c248789611094565b805191945091501580610c4b575080600081518110610c3f57fe5b60200260200101516000145b15610c565750610cef565b8094508a8481518110610c6557fe5b602002602001015185600081518110610c7a57fe5b602002602001015110610ce65760008b8581518110610c9557fe5b60200260200101516127108d8781518110610cac57fe5b602002602001015188600081518110610cc157fe5b6020026020010151030281610cd257fe5b04905060058111610ce4575050610cef565b505b50600101610b28565b5060008151118015610d02575060008351115b15610d865780600081518110610d1457fe5b6020026020010151888381518110610d2857fe5b602002602001018181525050610d6d898381518110610d4357fe5b602002602001015184600081518110610d5857fe5b602002602001015188600081518110610b6a57fe5b878381518110610d7957fe5b6020026020010181815250505b50600101610b1a565b50505050505b9250929050565b805160208201fd5b816000528060205260406000fd5b60008082806020019051810190610dc99190611901565b90506000610dd9888389896111b8565b9050876001600160a01b0316876001600160a01b03161415610edf57604051632e1a7d4d60e01b81526001600160a01b03891690632e1a7d4d90610e21908890600401611c23565b600060405180830381600087803b158015610e3b57600080fd5b505af1158015610e4f573d6000803e3d6000fd5b505060405163ad65d76d60e01b81526001600160a01b038416925063ad65d76d91508790610e869060019042903090600401611b61565b6020604051808303818588803b158015610e9f57600080fd5b505af1158015610eb3573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190610ed8919061191d565b9250611089565b876001600160a01b0316866001600160a01b03161415610feb57610f0d6001600160a01b03881682876112f8565b6040516395e3c50b60e01b81526001600160a01b038216906395e3c50b90610f3e9088906001904290600401611c58565b602060405180830381600087803b158015610f5857600080fd5b505af1158015610f6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f90919061191d565b9250876001600160a01b031663d0e30db0846040518263ffffffff1660e01b81526004016000604051808303818588803b158015610fcd57600080fd5b505af1158015610fe1573d6000803e3d6000fd5b5050505050611089565b610fff6001600160a01b03881682876112f8565b60405163ddf7e1a760e01b81526001600160a01b0382169063ddf7e1a790611034908890600190819042908d90600401611c2c565b602060405180830381600087803b15801561104e57600080fd5b505af1158015611062573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611086919061191d565b92505b505095945050505050565b606082810151835160208501516040808701519051630fa7f81f60e11b815285943094631f4ff03e946110e09460a09390931b6001600160e01b03191693919290918a90600401611a97565b600060405180830381600087803b1580156110fa57600080fd5b505af192505050801561110b575060015b61043a573d808015611139576040519150601f19603f3d011682016040523d82523d6000602084013e61113e565b606091505b5080806020019051810190611153919061178c565b93509150610d959050565b600083158061116b575081155b80611174575082155b15611181575060006111b1565b8382028285828161118e57fe5b041461119e5760009150506111b1565b83600185038201816111ac57fe5b049150505b9392505050565b6000846001600160a01b0316836001600160a01b031614611254576040516303795fb160e11b81526001600160a01b038516906306f2bf62906111ff9086906004016119da565b60206040518083038186803b15801561121757600080fd5b505afa15801561122b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061124f9190611901565b6112d0565b6040516303795fb160e11b81526001600160a01b038516906306f2bf62906112809085906004016119da565b60206040518083038186803b15801561129857600080fd5b505afa1580156112ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112d09190611901565b90506001600160a01b0381166106e45760405162461bcd60e51b815260040161045290611b80565b604051636eb1769f60e11b815281906001600160a01b0385169063dd62ed3e906113289030908790600401611a07565b60206040518083038186803b15801561134057600080fd5b505afa158015611354573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611378919061191d565b101561138b5761138b8383600019611390565b505050565b606063095ea7b360e01b83836040516024016113ad9291906119ee565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915290506113eb84826113f1565b50505050565b60006060836001600160a01b03168360405161140d91906119be565b6000604051808303816000865af19150503d806000811461144a576040519150601f19603f3d011682016040523d82523d6000602084013e61144f565b606091505b509150915081801561146557506114658161147e565b1561147157505061147a565b6113eb81610d9c565b5050565b6000815160001415611492575060016114bf565b60208251106114bf5760006114a88360006114c4565b905080600114156114bd5760019150506114bf565b505b919050565b60006111b18383600081602001835110156114f1576114f16114ec60058551856020016114fa565b610d9c565b50016020015190565b6060632800659560e01b84848460405160240161151993929190611b3f565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915290509392505050565b6040805160808101825260008082526020820181905260609282018390529181019190915290565b600082601f83011261158c578081fd5b813561159f61159a82611c95565b611c6e565b8181529150602080830190848101818402860182018710156115c057600080fd5b60005b848110156115df578135845292820192908201906001016115c3565b505050505092915050565b600082601f8301126115fa578081fd5b815161160861159a82611c95565b81815291506020808301908481018184028601820187101561162957600080fd5b60005b848110156115df5781518452928201929082019060010161162c565b600082601f830112611658578081fd5b813567ffffffffffffffff81111561166e578182fd5b611681601f8201601f1916602001611c6e565b915080825283602082850101111561169857600080fd5b8060208401602084013760009082016020015292915050565b600080600080608085870312156116c6578384fd5b84356116d181611ce1565b935060208501356116e181611ce1565b925060408501356116f181611ce1565b9150606085013567ffffffffffffffff81111561170c578182fd5b6117188782880161157c565b91505092959194509250565b60008060008060808587031215611739578384fd5b843561174481611ce1565b9350602085013561175481611ce1565b9250604085013567ffffffffffffffff81111561176f578283fd5b61177b87828801611648565b949793965093946060013593505050565b6000806040838503121561179e578182fd5b825167ffffffffffffffff808211156117b5578384fd5b6117c1868387016115ea565b935060208501519150808211156117d6578283fd5b506117e3858286016115ea565b9150509250929050565b600080600080600060a08688031215611804578081fd5b853561180f81611cf9565b9450602086013561181f81611ce1565b9350604086013561182f81611ce1565b9250606086013567ffffffffffffffff8082111561184b578283fd5b61185789838a01611648565b9350608088013591508082111561186c578283fd5b506118798882890161157c565b9150509295509295909350565b600080600080600060a0868803121561189d578081fd5b85356118a881611cf9565b945060208601356118b881611ce1565b935060408601356118c881611ce1565b9250606086013567ffffffffffffffff8111156118e3578182fd5b6118ef88828901611648565b95989497509295608001359392505050565b600060208284031215611912578081fd5b81516111b181611ce1565b60006020828403121561192e578081fd5b5051919050565b60008060408385031215611947578182fd5b505080516020909101519092909150565b6000815180845260208085019450808401835b838110156119875781518752958201959082019060010161196b565b509495945050505050565b600081518084526119aa816020860160208601611cb5565b601f01601f19169290920160200192915050565b600082516119d0818460208701611cb5565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b03858116825284166020820152608060408201819052600090611a4d90830185611992565b905082606083015295945050505050565b600060408252611a716040830185611958565b8281036020840152611a838185611958565b95945050505050565b901515815260200190565b6001600160e01b0319861681526001600160a01b0385811660208301528416604082015260a060608201819052600090611ad390830185611992565b8281036080840152611ae58185611958565b98975050505050505050565b6001600160e01b0319861681526001600160a01b0385811660208301528416604082015260a060608201819052600090611b2d90830185611992565b90508260808301529695505050505050565b6060810160088510611b4d57fe5b938152602081019290925260409091015290565b92835260208301919091526001600160a01b0316604082015260600190565b60208082526018908201527f4d6978696e556e69737761702f4e4f5f45584348414e47450000000000000000604082015260600190565b60208082526017908201527f4e6f206e6174697665207772617070656420746f6b656e000000000000000000604082015260600190565b6020808252818101527f537761702053616d706c652073686f756c642068617665207265766572746564604082015260600190565b90815260200190565b9485526020850193909352604084019190915260608301526001600160a01b0316608082015260a00190565b9283526020830191909152604082015260600190565b60405181810167ffffffffffffffff81118282101715611c8d57600080fd5b604052919050565b600067ffffffffffffffff821115611cab578081fd5b5060209081020190565b60005b83811015611cd0578181015183820152602001611cb8565b838111156113eb5750506000910152565b6001600160a01b0381168114611cf657600080fd5b50565b6001600160e01b031981168114611cf657600080fdfea264697066735822122011281209cfa96e3cd96ce3bd9d77f76feacfef8f4fefaf7f07c0e6d36ff6510564736f6c634300060c0033",
                "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x4E JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x1F4FF03E EQ PUSH2 0x5A JUMPI DUP1 PUSH4 0x252322B3 EQ PUSH2 0x7C JUMPI DUP1 PUSH4 0x78FEE41C EQ PUSH2 0xB3 JUMPI DUP1 PUSH4 0xB770F849 EQ PUSH2 0xD3 JUMPI DUP1 PUSH4 0xC8319084 EQ PUSH2 0x100 JUMPI PUSH2 0x55 JUMP JUMPDEST CALLDATASIZE PUSH2 0x55 JUMPI STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x66 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x7A PUSH2 0x75 CALLDATASIZE PUSH1 0x4 PUSH2 0x17ED JUMP JUMPDEST PUSH2 0x120 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x88 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x9C PUSH2 0x97 CALLDATASIZE PUSH1 0x4 PUSH2 0x16B1 JUMP JUMPDEST PUSH2 0x478 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xAA SWAP3 SWAP2 SWAP1 PUSH2 0x1A5E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xBF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x7A PUSH2 0xCE CALLDATASIZE PUSH1 0x4 PUSH2 0x1886 JUMP JUMPDEST PUSH2 0x515 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xDF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF3 PUSH2 0xEE CALLDATASIZE PUSH1 0x4 PUSH2 0x1724 JUMP JUMPDEST PUSH2 0x6CB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xAA SWAP2 SWAP1 PUSH2 0x1C23 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x10C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x9C PUSH2 0x11B CALLDATASIZE PUSH1 0x4 PUSH2 0x16B1 JUMP JUMPDEST PUSH2 0x6EC JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x1 DUP4 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x132 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH2 0x144 PUSH2 0x757 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x1B0 JUMPI DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD0E30DB0 DUP3 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x198 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x1AA JUMPI POP PUSH1 0x1 JUMPDEST POP PUSH2 0x267 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xE326C7D7 PUSH1 0xE0 SHL DUP2 MSTORE DUP6 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH4 0xE326C7D7 SWAP1 PUSH2 0x1DF SWAP1 PUSH1 0x1 SWAP1 PUSH1 0x4 ADD PUSH2 0x1A8C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1F9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x20A JUMPI POP PUSH1 0x1 JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0x55C37053 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH4 0xAB86E0A6 SWAP1 PUSH2 0x239 SWAP1 ADDRESS SWAP1 DUP7 SWAP1 PUSH1 0x4 ADD PUSH2 0x19EE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x253 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x264 JUMPI POP PUSH1 0x1 JUMPDEST POP POP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 SELFBALANCE DUP1 ISZERO PUSH2 0x8FC MUL SWAP2 DUP4 DUP2 DUP2 DUP2 DUP6 DUP3 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x293 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x60 DUP3 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x2AE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2D8 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x60 DUP4 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x2F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x31F JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x463 JUMPI ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x78FEE41C PUSH3 0x1E8480 DUP12 DUP12 DUP12 DUP12 DUP12 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x351 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP8 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x379 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1AF1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x393 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP8 CALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x3A5 JUMPI POP PUSH1 0x1 JUMPDEST PUSH2 0x43A JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x3D3 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x3D8 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH2 0x3E2 DUP2 PUSH2 0x880 JUMP JUMPDEST DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x3EE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP6 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x401 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP3 DUP2 MSTORE POP DUP3 DUP2 MSTORE POP POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x41E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x434 JUMPI POP PUSH2 0x463 JUMP JUMPDEST POP PUSH2 0x45B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x452 SWAP1 PUSH2 0x1BEE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 ADD PUSH2 0x325 JUMP JUMPDEST POP PUSH2 0x46E DUP3 DUP3 PUSH2 0x8B5 JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH2 0x508 PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x4B8 SWAP2 SWAP1 PUSH2 0x19DA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x4DD SWAP2 SWAP1 PUSH2 0x19DA JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0xB770F849 OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP5 PUSH2 0x8E3 JUMP JUMPDEST SWAP1 SWAP8 SWAP1 SWAP7 POP SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 0x1337 PUSH2 0xDEF1 PUSH1 0x90 SHL ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD0AFDCA9 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x559 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x56A JUMPI POP PUSH1 0x1 JUMPDEST POP PUSH1 0x0 GAS SWAP1 POP PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP9 DUP9 DUP9 DUP9 DUP9 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x596 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1A21 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x5D4 SWAP2 SWAP1 PUSH2 0x19BE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x611 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x616 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP GAS DUP4 SUB SWAP3 POP PUSH2 0x1337 PUSH2 0xDEF1 PUSH1 0x90 SHL ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xC18C162 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x662 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x692 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x68F SWAP2 DUP2 ADD SWAP1 PUSH2 0x191D JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x69B JUMPI PUSH2 0x6A0 JUMP JUMPDEST SWAP1 SWAP3 SUB SWAP2 JUMPDEST DUP2 PUSH2 0x6AE JUMPI PUSH2 0x6AE DUP2 PUSH2 0xD9C JUMP JUMPDEST PUSH2 0x46E DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x6C5 SWAP2 SWAP1 PUSH2 0x191D JUMP JUMPDEST DUP5 PUSH2 0xDA4 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6E1 PUSH2 0x6D8 PUSH2 0x757 JUMP JUMPDEST DUP7 DUP7 DUP6 DUP8 PUSH2 0xDB2 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH2 0x508 PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x72C SWAP2 SWAP1 PUSH2 0x19DA JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0xB770F849 OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP5 PUSH2 0x1094 JUMP JUMPDEST PUSH1 0x0 CHAINID DUP2 PUSH1 0x1 DUP3 EQ ISZERO PUSH2 0x77F JUMPI POP PUSH20 0xC02AAA39B223FE8D0A0E5C4F27EAD9083C756CC2 PUSH2 0x854 JUMP JUMPDEST DUP2 PUSH1 0x3 EQ ISZERO PUSH2 0x7A3 JUMPI POP PUSH20 0xC778417E063141139FCE010982780140AA0CD5AB PUSH2 0x854 JUMP JUMPDEST DUP2 PUSH1 0x4 EQ ISZERO PUSH2 0x7C7 JUMPI POP PUSH20 0xC778417E063141139FCE010982780140AA0CD5AB PUSH2 0x854 JUMP JUMPDEST DUP2 PUSH1 0x2A EQ ISZERO PUSH2 0x7EB JUMPI POP PUSH20 0xD0A1E359811322D97991E03F863A0C30C2CF029C PUSH2 0x854 JUMP JUMPDEST DUP2 PUSH1 0x38 EQ ISZERO PUSH2 0x80F JUMPI POP PUSH20 0xBB4CDB9CBD36B01BD1CBAEBF2DE08D9173BC095C PUSH2 0x854 JUMP JUMPDEST DUP2 PUSH1 0x89 EQ ISZERO PUSH2 0x833 JUMPI POP PUSH20 0xD500B1D8E8EF31E21C99D1DB9A6444D3ADF1270 PUSH2 0x854 JUMP JUMPDEST DUP2 PUSH2 0x539 EQ ISZERO PUSH2 0x854 JUMPI POP PUSH20 0xB1BA0AF832D7C05FD64161E0DB78E85978E8082 JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x87A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x452 SWAP1 PUSH2 0x1BB7 JUMP JUMPDEST SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 MLOAD PUSH1 0x40 EQ PUSH2 0x897 JUMPI POP PUSH1 0x0 SWAP1 POP DUP1 PUSH2 0x8B0 JUMP JUMPDEST DUP3 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x8AB SWAP2 SWAP1 PUSH2 0x1935 JUMP JUMPDEST SWAP2 POP SWAP2 POP JUMPDEST SWAP2 POP SWAP2 JUMP JUMPDEST PUSH1 0x60 DUP3 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x8CA SWAP3 SWAP2 SWAP1 PUSH2 0x1A5E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH1 0x60 DUP1 DUP3 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x8F5 JUMPI PUSH2 0xD95 JUMP JUMPDEST DUP3 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x90D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x937 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP3 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x952 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x97C JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE SWAP2 SWAP4 POP PUSH1 0x60 SWAP2 SWAP1 PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP4 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x9B0 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x9C5 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP PUSH2 0x9D9 PUSH2 0x1554 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP1 DUP3 ADD DUP4 MSTORE DUP8 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP4 MSTORE PUSH1 0x20 DUP1 DUP11 ADD MLOAD SWAP1 SWAP2 AND SWAP1 DUP4 ADD MSTORE DUP8 DUP4 ADD MLOAD DUP3 DUP5 ADD MSTORE DUP8 ADD MLOAD PUSH5 0x100000000 PUSH1 0x1 PUSH1 0xC0 SHL SUB SWAP1 DUP4 SHR SWAP1 DUP2 AND PUSH4 0xFFFFFFFF SWAP1 SWAP2 AND OR SWAP1 SWAP2 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH2 0xA37 PUSH2 0x1554 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 DUP9 PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x60 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x80 ADD MLOAD DUP1 PUSH1 0x60 SHR SWAP1 PUSH1 0x40 SHR PUSH4 0xFFFFFFFF AND PUSH4 0xFFFFFFFF AND SWAP1 PUSH1 0x20 SHL OR PUSH1 0x40 SHL DUP2 MSTORE POP SWAP1 POP PUSH2 0xAA2 DUP2 DUP5 PUSH2 0x1094 JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP5 POP ISZERO SWAP1 POP DUP1 PUSH2 0xAC9 JUMPI POP DUP3 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xABD JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ JUMPDEST ISZERO PUSH2 0xAD6 JUMPI POP POP POP PUSH2 0xD95 JUMP JUMPDEST PUSH1 0x60 PUSH2 0xAE2 DUP4 DUP6 PUSH2 0x1094 JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP3 POP ISZERO SWAP1 POP DUP1 PUSH2 0xB09 JUMPI POP DUP1 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xAFD JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ JUMPDEST ISZERO PUSH2 0xB17 JUMPI POP POP POP POP PUSH2 0xD95 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP8 MLOAD DUP2 LT ISZERO PUSH2 0xD8F JUMPI PUSH1 0x60 PUSH1 0x0 JUMPDEST PUSH1 0x3 DUP2 LT ISZERO PUSH2 0xCEF JUMPI PUSH2 0xB77 DUP11 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xB40 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xB55 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP10 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xB6A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x115E JUMP JUMPDEST DUP8 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xB84 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE DUP7 MLOAD ISZERO DUP1 PUSH2 0xBB1 JUMPI POP DUP7 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xBA5 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ JUMPDEST ISZERO PUSH2 0xBBB JUMPI PUSH2 0xCEF JUMP JUMPDEST PUSH2 0xBD4 PUSH1 0x5 PUSH2 0x2710 ADD PUSH2 0x2710 DUP10 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xB6A JUMPI INVALID JUMPDEST DUP8 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xBE1 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE DUP7 MLOAD ISZERO DUP1 PUSH2 0xC0E JUMPI POP DUP7 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xC02 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ JUMPDEST ISZERO PUSH2 0xC18 JUMPI PUSH2 0xCEF JUMP JUMPDEST PUSH1 0x60 PUSH2 0xC24 DUP8 DUP10 PUSH2 0x1094 JUMP JUMPDEST DUP1 MLOAD SWAP2 SWAP5 POP SWAP2 POP ISZERO DUP1 PUSH2 0xC4B JUMPI POP DUP1 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xC3F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ JUMPDEST ISZERO PUSH2 0xC56 JUMPI POP PUSH2 0xCEF JUMP JUMPDEST DUP1 SWAP5 POP DUP11 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xC65 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xC7A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD LT PUSH2 0xCE6 JUMPI PUSH1 0x0 DUP12 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0xC95 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x2710 DUP14 DUP8 DUP2 MLOAD DUP2 LT PUSH2 0xCAC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xCC1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SUB MUL DUP2 PUSH2 0xCD2 JUMPI INVALID JUMPDEST DIV SWAP1 POP PUSH1 0x5 DUP2 GT PUSH2 0xCE4 JUMPI POP POP PUSH2 0xCEF JUMP JUMPDEST POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0xB28 JUMP JUMPDEST POP PUSH1 0x0 DUP2 MLOAD GT DUP1 ISZERO PUSH2 0xD02 JUMPI POP PUSH1 0x0 DUP4 MLOAD GT JUMPDEST ISZERO PUSH2 0xD86 JUMPI DUP1 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xD14 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xD28 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP PUSH2 0xD6D DUP10 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xD43 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xD58 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xB6A JUMPI INVALID JUMPDEST DUP8 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xD79 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0xB1A JUMP JUMPDEST POP POP POP POP POP JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST DUP2 PUSH1 0x0 MSTORE DUP1 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0xDC9 SWAP2 SWAP1 PUSH2 0x1901 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xDD9 DUP9 DUP4 DUP10 DUP10 PUSH2 0x11B8 JUMP JUMPDEST SWAP1 POP DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0xEDF JUMPI PUSH1 0x40 MLOAD PUSH4 0x2E1A7D4D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND SWAP1 PUSH4 0x2E1A7D4D SWAP1 PUSH2 0xE21 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x1C23 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xE3B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xE4F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH4 0xAD65D76D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP3 POP PUSH4 0xAD65D76D SWAP2 POP DUP8 SWAP1 PUSH2 0xE86 SWAP1 PUSH1 0x1 SWAP1 TIMESTAMP SWAP1 ADDRESS SWAP1 PUSH1 0x4 ADD PUSH2 0x1B61 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xE9F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xEB3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xED8 SWAP2 SWAP1 PUSH2 0x191D JUMP JUMPDEST SWAP3 POP PUSH2 0x1089 JUMP JUMPDEST DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0xFEB JUMPI PUSH2 0xF0D PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND DUP3 DUP8 PUSH2 0x12F8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x95E3C50B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH4 0x95E3C50B SWAP1 PUSH2 0xF3E SWAP1 DUP9 SWAP1 PUSH1 0x1 SWAP1 TIMESTAMP SWAP1 PUSH1 0x4 ADD PUSH2 0x1C58 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xF58 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xF6C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xF90 SWAP2 SWAP1 PUSH2 0x191D JUMP JUMPDEST SWAP3 POP DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD0E30DB0 DUP5 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xFCD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xFE1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP PUSH2 0x1089 JUMP JUMPDEST PUSH2 0xFFF PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND DUP3 DUP8 PUSH2 0x12F8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xDDF7E1A7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH4 0xDDF7E1A7 SWAP1 PUSH2 0x1034 SWAP1 DUP9 SWAP1 PUSH1 0x1 SWAP1 DUP2 SWAP1 TIMESTAMP SWAP1 DUP14 SWAP1 PUSH1 0x4 ADD PUSH2 0x1C2C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x104E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1062 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1086 SWAP2 SWAP1 PUSH2 0x191D JUMP JUMPDEST SWAP3 POP JUMPDEST POP POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 DUP2 ADD MLOAD DUP4 MLOAD PUSH1 0x20 DUP6 ADD MLOAD PUSH1 0x40 DUP1 DUP8 ADD MLOAD SWAP1 MLOAD PUSH4 0xFA7F81F PUSH1 0xE1 SHL DUP2 MSTORE DUP6 SWAP5 ADDRESS SWAP5 PUSH4 0x1F4FF03E SWAP5 PUSH2 0x10E0 SWAP5 PUSH1 0xA0 SWAP4 SWAP1 SWAP4 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND SWAP4 SWAP2 SWAP3 SWAP1 SWAP2 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x1A97 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x10FA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x110B JUMPI POP PUSH1 0x1 JUMPDEST PUSH2 0x43A JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x1139 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x113E JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x1153 SWAP2 SWAP1 PUSH2 0x178C JUMP JUMPDEST SWAP4 POP SWAP2 POP PUSH2 0xD95 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP4 ISZERO DUP1 PUSH2 0x116B JUMPI POP DUP2 ISZERO JUMPDEST DUP1 PUSH2 0x1174 JUMPI POP DUP3 ISZERO JUMPDEST ISZERO PUSH2 0x1181 JUMPI POP PUSH1 0x0 PUSH2 0x11B1 JUMP JUMPDEST DUP4 DUP3 MUL DUP3 DUP6 DUP3 DUP2 PUSH2 0x118E JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x119E JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x11B1 JUMP JUMPDEST DUP4 PUSH1 0x1 DUP6 SUB DUP3 ADD DUP2 PUSH2 0x11AC JUMPI INVALID JUMPDEST DIV SWAP2 POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1254 JUMPI PUSH1 0x40 MLOAD PUSH4 0x3795FB1 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0x6F2BF62 SWAP1 PUSH2 0x11FF SWAP1 DUP7 SWAP1 PUSH1 0x4 ADD PUSH2 0x19DA JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1217 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x122B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x124F SWAP2 SWAP1 PUSH2 0x1901 JUMP JUMPDEST PUSH2 0x12D0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x3795FB1 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0x6F2BF62 SWAP1 PUSH2 0x1280 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x19DA JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1298 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x12AC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x12D0 SWAP2 SWAP1 PUSH2 0x1901 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x6E4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x452 SWAP1 PUSH2 0x1B80 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x6EB1769F PUSH1 0xE1 SHL DUP2 MSTORE DUP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0xDD62ED3E SWAP1 PUSH2 0x1328 SWAP1 ADDRESS SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x1A07 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1340 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1354 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1378 SWAP2 SWAP1 PUSH2 0x191D JUMP JUMPDEST LT ISZERO PUSH2 0x138B JUMPI PUSH2 0x138B DUP4 DUP4 PUSH1 0x0 NOT PUSH2 0x1390 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH4 0x95EA7B3 PUSH1 0xE0 SHL DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x13AD SWAP3 SWAP2 SWAP1 PUSH2 0x19EE JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP PUSH2 0x13EB DUP5 DUP3 PUSH2 0x13F1 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x40 MLOAD PUSH2 0x140D SWAP2 SWAP1 PUSH2 0x19BE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x144A JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x144F JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x1465 JUMPI POP PUSH2 0x1465 DUP2 PUSH2 0x147E JUMP JUMPDEST ISZERO PUSH2 0x1471 JUMPI POP POP PUSH2 0x147A JUMP JUMPDEST PUSH2 0x13EB DUP2 PUSH2 0xD9C JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x1492 JUMPI POP PUSH1 0x1 PUSH2 0x14BF JUMP JUMPDEST PUSH1 0x20 DUP3 MLOAD LT PUSH2 0x14BF JUMPI PUSH1 0x0 PUSH2 0x14A8 DUP4 PUSH1 0x0 PUSH2 0x14C4 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 EQ ISZERO PUSH2 0x14BD JUMPI PUSH1 0x1 SWAP2 POP POP PUSH2 0x14BF JUMP JUMPDEST POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x11B1 DUP4 DUP4 PUSH1 0x0 DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO PUSH2 0x14F1 JUMPI PUSH2 0x14F1 PUSH2 0x14EC PUSH1 0x5 DUP6 MLOAD DUP6 PUSH1 0x20 ADD PUSH2 0x14FA JUMP JUMPDEST PUSH2 0xD9C JUMP JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH4 0x28006595 PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1519 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1B3F JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x60 SWAP3 DUP3 ADD DUP4 SWAP1 MSTORE SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x158C JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x159F PUSH2 0x159A DUP3 PUSH2 0x1C95 JUMP JUMPDEST PUSH2 0x1C6E JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x15C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x15DF JUMPI DUP2 CALLDATALOAD DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x15C3 JUMP JUMPDEST POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x15FA JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x1608 PUSH2 0x159A DUP3 PUSH2 0x1C95 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x1629 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x15DF JUMPI DUP2 MLOAD DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x162C JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1658 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x166E JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x1681 PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD PUSH2 0x1C6E JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x1698 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP5 ADD CALLDATACOPY PUSH1 0x0 SWAP1 DUP3 ADD PUSH1 0x20 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x16C6 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x16D1 DUP2 PUSH2 0x1CE1 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x16E1 DUP2 PUSH2 0x1CE1 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x16F1 DUP2 PUSH2 0x1CE1 JUMP JUMPDEST SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x170C JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x1718 DUP8 DUP3 DUP9 ADD PUSH2 0x157C JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1739 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x1744 DUP2 PUSH2 0x1CE1 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x1754 DUP2 PUSH2 0x1CE1 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x176F JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x177B DUP8 DUP3 DUP9 ADD PUSH2 0x1648 JUMP JUMPDEST SWAP5 SWAP8 SWAP4 SWAP7 POP SWAP4 SWAP5 PUSH1 0x60 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x179E JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x17B5 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x17C1 DUP7 DUP4 DUP8 ADD PUSH2 0x15EA JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x17D6 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x17E3 DUP6 DUP3 DUP7 ADD PUSH2 0x15EA JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x1804 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x180F DUP2 PUSH2 0x1CF9 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x181F DUP2 PUSH2 0x1CE1 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH2 0x182F DUP2 PUSH2 0x1CE1 JUMP JUMPDEST SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x184B JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x1857 DUP10 DUP4 DUP11 ADD PUSH2 0x1648 JUMP JUMPDEST SWAP4 POP PUSH1 0x80 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x186C JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x1879 DUP9 DUP3 DUP10 ADD PUSH2 0x157C JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x189D JUMPI DUP1 DUP2 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x18A8 DUP2 PUSH2 0x1CF9 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x18B8 DUP2 PUSH2 0x1CE1 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH2 0x18C8 DUP2 PUSH2 0x1CE1 JUMP JUMPDEST SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x18E3 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x18EF DUP9 DUP3 DUP10 ADD PUSH2 0x1648 JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP3 SWAP6 PUSH1 0x80 ADD CALLDATALOAD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1912 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x11B1 DUP2 PUSH2 0x1CE1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x192E JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1947 JUMPI DUP2 DUP3 REVERT JUMPDEST POP POP DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD MLOAD SWAP1 SWAP3 SWAP1 SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD DUP4 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1987 JUMPI DUP2 MLOAD DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x196B JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x19AA DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x1CB5 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x19D0 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x1CB5 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x80 PUSH1 0x40 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x1A4D SWAP1 DUP4 ADD DUP6 PUSH2 0x1992 JUMP JUMPDEST SWAP1 POP DUP3 PUSH1 0x60 DUP4 ADD MSTORE SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 MSTORE PUSH2 0x1A71 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x1958 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x1A83 DUP2 DUP6 PUSH2 0x1958 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP7 AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND PUSH1 0x20 DUP4 ADD MSTORE DUP5 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0xA0 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x1AD3 SWAP1 DUP4 ADD DUP6 PUSH2 0x1992 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x80 DUP5 ADD MSTORE PUSH2 0x1AE5 DUP2 DUP6 PUSH2 0x1958 JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP7 AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND PUSH1 0x20 DUP4 ADD MSTORE DUP5 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0xA0 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x1B2D SWAP1 DUP4 ADD DUP6 PUSH2 0x1992 JUMP JUMPDEST SWAP1 POP DUP3 PUSH1 0x80 DUP4 ADD MSTORE SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH1 0x8 DUP6 LT PUSH2 0x1B4D JUMPI INVALID JUMPDEST SWAP4 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x18 SWAP1 DUP3 ADD MSTORE PUSH32 0x4D6978696E556E69737761702F4E4F5F45584348414E47450000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x17 SWAP1 DUP3 ADD MSTORE PUSH32 0x4E6F206E6174697665207772617070656420746F6B656E000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x537761702053616D706C652073686F756C642068617665207265766572746564 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP5 DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x40 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 ADD SWAP1 JUMP JUMPDEST SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x1C8D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1CAB JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1CD0 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1CB8 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x13EB JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x1CF6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x1CF6 JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 GT 0x28 SLT MULMOD 0xCF 0xA9 PUSH15 0x3CD96CE3BD9D77F76FEACFEF8F4FEF 0xAF PUSH32 0x7C0E6D36FF6510564736F6C634300060C003300000000000000000000000000 ",
                "sourceMap": "802:2776:21:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4285:2345:19;;;;;;;;;;-1:-1:-1;4285:2345:19;;;;;:::i;:::-;;:::i;:::-;;2898:677:21;;;;;;;;;;-1:-1:-1;2898:677:21;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;3071:988:19;;;;;;;;;;-1:-1:-1;3071:988:19;;;;;:::i;:::-;;:::i;964:428:21:-;;;;;;;;;;-1:-1:-1;964:428:21;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;1863:619::-;;;;;;;;;;-1:-1:-1;1863:619:21;;;;;:::i;:::-;;:::i;4285:2345:19:-;4618:16;4637:9;4666:1;4647:9;:16;:20;4637:31;;;;;;;;;;;;;;4618:50;;4704:24;:22;:24::i;:::-;-1:-1:-1;;;;;4683:46:19;:9;-1:-1:-1;;;;;4683:46:19;;4679:578;;;4788:9;-1:-1:-1;;;;;4765:42:19;;4816:8;4765:63;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4745:109;4679:578;;;5041:33;;-1:-1:-1;;;5041:33:19;;4936:9;;-1:-1:-1;;;;;5041:27:19;;;;;:33;;5069:4;;5041:33;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5021:79;5169:52;;-1:-1:-1;;;5169:52:19;;-1:-1:-1;;;;;5169:27:19;;;;;:52;;5205:4;;5212:8;;5169:52;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5149:98;4679:578;;5357:42;;5365:1;;5377:21;5357:42;;;;;5365:1;5357:42;5365:1;5357:42;5377:21;5365:1;5357:42;;;;;;;;;;;;;;;;;;;;;5410:27;5454:9;:16;5440:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5440:31:19;;5410:61;;5481:24;5522:9;:16;5508:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5508:31:19;;5481:58;;5555:9;5550:988;5574:9;:16;5570:1;:20;5550:988;;;5631:4;-1:-1:-1;;;;;5631:16:19;;1730:3;5688:8;5718:9;5749:8;5779:10;5811:9;5821:1;5811:12;;;;;;;;;;;;;;5631:210;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5611:917;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6064:38;6095:6;6064:30;:38::i;:::-;6035:10;6046:1;6035:13;;;;;;;;;;;;;6050:7;6058:1;6050:10;;;;;;;;;;;;;6034:68;;;;;;;;;;6448:10;6459:1;6448:13;;;;;;;;;;;;;;6465:1;6448:18;6444:70;;;6490:5;;;6444:70;5938:590;5611:917;;;5872:50;;-1:-1:-1;;;5872:50:19;;;;;;;:::i;:::-;;;;;;;;;5592:3;;5550:988;;;;6585:38;6603:10;6615:7;6585:17;:38::i;:::-;4285:2345;;;;;;;;:::o;2898:677:21:-;3091:24;3117:34;3198:370;3238:289;;;;;;;;3297:10;-1:-1:-1;;;;;3238:289:21;;;;;3335:10;-1:-1:-1;;;;;3238:289:21;;;;;3389:6;3378:18;;;;;;;;:::i;:::-;;;;;;;;;;;;;3238:289;;;;3439:6;3428:18;;;;;;;;:::i;:::-;;;;-1:-1:-1;;3428:18:21;;;;;;;;;3238:289;;;3486:4;3428:18;3238:289;;;3486:26;3238:289;;;;;;;3541:17;3198:26;:370::i;:::-;3167:401;;;;-1:-1:-1;2898:677:21;-1:-1:-1;;;;;2898:677:21:o;3071:988:19:-;-1:-1:-1;;;;;;;;;;3323:26:19;;:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3307:66;3409:15;3427:9;3409:27;;3475:12;3489:17;3518:4;-1:-1:-1;;;;;3510:18:19;3565:8;3575:9;3586:8;3596:10;3608:8;3542:75;;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;3542:75:19;;;;;;;;;;;;;;-1:-1:-1;;;;;3542:75:19;-1:-1:-1;;;;;;3542:75:19;;;;;;;;;;3510:117;;;;3542:75;3510:117;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3474:153;;;;3657:9;3647:7;:19;3637:29;;-1:-1:-1;;;;;;;;;;3738:21:19;;:23;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3738:23:19;;;;;;;;-1:-1:-1;;3738:23:19;;;;;;;;;;;;:::i;:::-;;;3722:156;;;;;3836:21;;;;3722:156;3893:7;3888:53;;3916:14;:4;:12;:14::i;:::-;3991:61;4026:4;4015:27;;;;;;;;;;;;:::i;:::-;4044:7;3991:23;:61::i;964:428:21:-;1155:7;1185:200;1220:24;:22;:24::i;:::-;1273:9;1312:8;1335:16;1365:10;1185:21;:200::i;:::-;1178:207;;964:428;;;;;;;:::o;1863:619::-;2057:24;2083:34;2164:311;2201:233;;;;;;;;2257:10;-1:-1:-1;;;;;2201:233:21;;;;;2295:10;-1:-1:-1;;;;;2201:233:21;;;;;2346:6;2335:18;;;;;;;;:::i;:::-;;;;-1:-1:-1;;2335:18:21;;;;;;;;;2201:233;;;2393:4;2335:18;2201:233;;;2393:26;2201:233;;;;;;;2448:17;2164:23;:311::i;7350:1219:19:-;7431:14;7520:9;7431:14;7586:1;7575:12;;7571:862;;;-1:-1:-1;7643:42:19;7571:862;;;7706:7;7717:1;7706:12;7702:731;;;-1:-1:-1;7765:42:19;7702:731;;;7828:7;7839:1;7828:12;7824:609;;;-1:-1:-1;7887:42:19;7824:609;;;7950:7;7961:2;7950:13;7946:487;;;-1:-1:-1;8008:42:19;7946:487;;;8071:7;8082:2;8071:13;8067:366;;;-1:-1:-1;8128:42:19;8067:366;;;8191:7;8202:3;8191:14;8187:246;;;-1:-1:-1;8252:42:19;8187:246;;;8315:7;8326:4;8315:15;8311:122;;;-1:-1:-1;8380:42:19;8311:122;-1:-1:-1;;;;;8446:19:19;;8442:83;;8481:33;;-1:-1:-1;;;8481:33:19;;;;;;;:::i;8442:83::-;8556:5;-1:-1:-1;;7350:1219:19;:::o;9472:277::-;9594:7;9603;9630:6;:13;9647:2;9630:19;9626:62;;-1:-1:-1;9673:1:19;;-1:-1:-1;9673:1:19;9665:12;;9626:62;9715:6;9704:38;;;;;;;;;;;;:::i;:::-;9697:45;;;;9472:277;;;;:::o;8863:312::-;8995:17;9026:7;9035;9015:28;;;;;;;;;:::i;:::-;;;;;;;;;;;;;8995:48;;9153:4;9147:11;9142:2;9136:4;9132:13;9125:34;9755:4060;9926:24;9952:34;10006:17;:24;10034:1;10006:29;10002:95;;;10051:35;;10002:95;10141:17;:24;10127:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;10127:39:19;;10107:59;;10200:17;:24;10186:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;10186:39:19;-1:-1:-1;10267:16:19;;;10281:1;10267:16;;;;;;;;;10176:49;;-1:-1:-1;10236:28:19;;10267:16;;;;;;;;;;;;-1:-1:-1;10267:16:19;10236:47;;10310:17;10328:1;10310:20;;;;;;;;;;;;;;10293:11;10305:1;10293:14;;;;;;;;;;;;;:37;;;;;10341:42;;:::i;:::-;-1:-1:-1;10386:219:19;;;;;;;;;10438:14;;-1:-1:-1;;;;;10386:219:19;;;;;;10476:13;;;;10386:219;;;;;;;10515:18;;;;10386:219;;;;10569:25;;;-1:-1:-1;;;;;10569:25:19;;;10386:219;;;10569:25;;;;10386:219;;;;;;;;10616:41;;:::i;:::-;10660:218;;;;;;;;10712:4;:13;;;-1:-1:-1;;;;;10660:218:19;;;;;10749:4;:14;;;-1:-1:-1;;;;;10660:218:19;;;;;10789:4;:17;;;10660:218;;;;10842:4;:25;;;;;;;;;;;10660:218;;;;;;;;;;;10616:262;;10977:45;11001:7;11010:11;10977:23;:45::i;:::-;11036:18;;10959:63;;-1:-1:-1;11036:23:19;;-1:-1:-1;11036:23:19;:46;;;11063:11;11075:1;11063:14;;;;;;;;;;;;;;11081:1;11063:19;11036:46;11032:112;;;11098:35;;;;;11032:112;11154:27;11285:46;11309:8;11319:11;11285:23;:46::i;:::-;11346:17;;11268:63;;-1:-1:-1;11346:22:19;;-1:-1:-1;11346:22:19;:44;;;11372:10;11383:1;11372:13;;;;;;;;;;;;;;11389:1;11372:18;11346:44;11342:110;;;11406:35;;;;;;11342:110;11467:9;11462:2347;11486:17;:24;11482:1;:28;11462:2347;;;11531:25;11575:12;11570:1667;1562:1;11593:4;:37;11570:1667;;;11770:156;11817:17;11835:1;11817:20;;;;;;;;;;;;;;11859:10;11870:1;11859:13;;;;;;;;;;;;;;11894:11;11906:1;11894:14;;;;;;;;;;;;;;11770:25;:156::i;:::-;11753:11;11765:1;11753:14;;;;;;;;;;;;;;;;;:173;11948:18;;:23;;:46;;;11975:11;11987:1;11975:14;;;;;;;;;;;;;;11993:1;11975:19;11948:46;11944:98;;;12018:5;;11944:98;12076:206;1415:8;1619:3;12124:59;1619:3;12250:11;12262:1;12250:14;;;;;;;12076:206;12059:11;12071:1;12059:14;;;;;;;;;;;;;;;;;:223;12304:18;;:23;;:46;;;12331:11;12343:1;12331:14;;;;;;;;;;;;;;12349:1;12331:19;12304:46;12300:98;;;12374:5;;12300:98;12415:28;12487:46;12511:8;12521:11;12487:23;:46::i;:::-;12555:18;;12461:72;;-1:-1:-1;12461:72:19;-1:-1:-1;12555:23:19;;:46;;;12582:11;12594:1;12582:14;;;;;;;;;;;;;;12600:1;12582:19;12555:46;12551:98;;;12625:5;;;12551:98;12783:11;12770:24;;12890:17;12908:1;12890:20;;;;;;;;;;;;;;12873:10;12884:1;12873:13;;;;;;;;;;;;;;:37;12869:354;;12934:11;13062:17;13080:1;13062:20;;;;;;;;;;;;;;1619:3;12989:17;13007:1;12989:20;;;;;;;;;;;;;;12973:10;12984:1;12973:13;;;;;;;;;;;;;;:36;12972:63;:110;;;;;;12934:148;;1415:8;13108:3;:41;13104:101;;13177:5;;;;13104:101;12869:354;;-1:-1:-1;11632:6:19;;11570:1667;;;;13272:1;13254:8;:15;:19;:44;;;;;13297:1;13277:10;:17;:21;13254:44;13250:549;;;13331:8;13340:1;13331:11;;;;;;;;;;;;;;13318:7;13326:1;13318:10;;;;;;;;;;;;;:24;;;;;13628:156;13675:17;13693:1;13675:20;;;;;;;;;;;;;;13717:10;13728:1;13717:13;;;;;;;;;;;;;;13752:11;13764:1;13752:14;;;;;;;13628:156;13605:17;13623:1;13605:20;;;;;;;;;;;;;:179;;;;;13250:549;-1:-1:-1;11512:3:19;;11462:2347;;;;9755:4060;;;;;;;;;;:::o;1531:170:37:-;1674:9;1668:16;1661:4;1650:9;1646:20;1639:46;8575:282:19;8776:6;8773:1;8766:17;8807:7;8803:2;8796:19;8838:2;8835:1;8828:13;4255:2546:55;4483:20;4519:39;4584:10;4573:49;;;;;;;;;;;;:::i;:::-;4519:103;;4681:25;4709:133;4754:4;4772:15;4801:9;4824:8;4709:31;:133::i;:::-;4681:161;;4911:4;-1:-1:-1;;;;;4898:17:55;:9;-1:-1:-1;;;;;4898:17:55;;4894:1871;;;4963:25;;-1:-1:-1;;;4963:25:55;;-1:-1:-1;;;;;4963:13:55;;;;;:25;;4977:10;;4963:25;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;5085:274:55;;-1:-1:-1;;;5085:274:55;;-1:-1:-1;;;;;5085:32:55;;;-1:-1:-1;5085:32:55;;-1:-1:-1;5126:10:55;;5085:274;;5195:1;;5259:15;;5340:4;;5085:274;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;5070:289;;4894:1871;;;5434:4;-1:-1:-1;;;;;5422:16:55;:8;-1:-1:-1;;;;;5422:16:55;;5418:1347;;;5502:101;-1:-1:-1;;;;;5502:24:55;;5552:8;5579:10;5502:24;:101::i;:::-;5699:250;;-1:-1:-1;;;5699:250:55;;-1:-1:-1;;;;;5699:28:55;;;;;:250;;5789:10;;5856:1;;5920:15;;5699:250;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;5684:265;;5992:4;-1:-1:-1;;;;;5992:12:55;;6013;5992:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5418:1347;;;6154:101;-1:-1:-1;;;;;6154:24:55;;6204:8;6231:10;6154:24;:101::i;:::-;6351:403;;-1:-1:-1;;;6351:403:55;;-1:-1:-1;;;;;6351:30:55;;;;;:403;;6443:10;;6510:1;;;;6657:15;;6732:8;;6351:403;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;6336:418;;5418:1347;6775:19;;4255:2546;;;;;;;:::o;6636:708:19:-;6793:24;6916:25;;;;6968:14;;7000:13;;;;6916:25;7031:15;;;;6878:209;;-1:-1:-1;;;6878:209:19;;6793:24;;6878:4;;:20;;:209;;6916:34;;;;;-1:-1:-1;;;;;;6916:34:19;;6968:14;;7000:13;;7064:9;;6878:209;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6862:476;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7296:6;7285:42;;;;;;;;;;;;:::i;:::-;7261:66;-1:-1:-1;7261:66:19;-1:-1:-1;6862:476:19;;-1:-1:-1;6862:476:19;13821:416;13989:21;14030:14;;;:29;;-1:-1:-1;14048:11:19;;14030:29;:49;;;-1:-1:-1;14063:16:19;;14030:49;14026:63;;;-1:-1:-1;14088:1:19;14081:8;;14026:63;14111:18;;;14123:6;14111:9;:18;:9;14143:13;;;;;:23;14139:37;;14175:1;14168:8;;;;;14139:37;14219:11;14213:1;14199:11;:15;14194:1;:21;14193:37;;;;;;14186:44;;;13821:416;;;;;;:::o;7286:552:55:-;7524:25;7644:4;-1:-1:-1;;;;;7631:17:55;:9;-1:-1:-1;;;;;7631:17:55;;:122;;7715:38;;-1:-1:-1;;;7715:38:55;;-1:-1:-1;;;;;7715:27:55;;;;;:38;;7743:9;;7715:38;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;7631:122;;;7663:37;;-1:-1:-1;;;7663:37:55;;-1:-1:-1;;;;;7663:27:55;;;;;:37;;7691:8;;7663:37;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;7620:133;-1:-1:-1;;;;;;7771:31:55;;7763:68;;;;-1:-1:-1;;;7763:68:55;;;;;;;:::i;1987:267:31:-;2131:39;;-1:-1:-1;;;2131:39:31;;2173:6;;-1:-1:-1;;;;;2131:15:31;;;;;:39;;2155:4;;2162:7;;2131:39;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:48;2127:121;;;2195:42;2209:5;2216:7;-1:-1:-1;;2195:13:31;:42::i;:::-;1987:267;;;:::o;1217:351::-;1359:21;1419:22;;;1455:7;1476:9;1383:112;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;1383:112:31;;;;;;;;;;;;;;-1:-1:-1;;;;;1383:112:31;-1:-1:-1;;;;;;1383:112:31;;;;;;;;;;;-1:-1:-1;1505:56:31;1544:5;1383:112;1505:30;:56::i;:::-;1217:351;;;;:::o;6923:340::-;7055:15;7072:23;7099:6;-1:-1:-1;;;;;7099:11:31;7111:8;7099:21;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7054:66;;;;7134:10;:44;;;;;7148:30;7167:10;7148:18;:30::i;:::-;7130:81;;;7194:7;;;;7130:81;7220:36;7245:10;7220:24;:36::i;6923:340::-;;;:::o;6237:395::-;6337:17;6374:10;:17;6395:1;6374:22;6370:64;;;-1:-1:-1;6419:4:31;6412:11;;6370:64;6468:2;6447:10;:17;:23;6443:183;;6486:14;6503:38;6527:10;6539:1;6503:23;:38::i;:::-;6486:55;;6559:6;6569:1;6559:11;6555:61;;;6597:4;6590:11;;;;;6555:61;6443:183;;6237:395;;;:::o;16122:220:32:-;16243:14;16290:21;16302:1;16305:5;14422:14;14467:5;14475:2;14467:10;14456:1;:8;:21;14452:306;;;14493:254;14518:228;14583:95;14696:1;:8;14722:5;14730:2;14722:10;14518:47;:228::i;:::-;14493:24;:254::i;:::-;-1:-1:-1;14936:13:32;14838:2;14936:13;14930:20;;14301:688::o;1334:378:35:-;1522:12;1274:10;1593:37;;1644:9;1667:6;1687:8;1557:148;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;1557:148:35;;;;;;;;;;;;;;-1:-1:-1;;;;;1557:148:35;-1:-1:-1;;;;;;1557:148:35;;;;;;;;;;;-1:-1:-1;1334:378:35;;;;;:::o;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;160:707::-;;277:3;270:4;262:6;258:17;254:27;244:2;;-1:-1;;285:12;244:2;332:6;319:20;354:80;369:64;426:6;369:64;:::i;:::-;354:80;:::i;:::-;462:21;;;345:89;-1:-1;506:4;519:14;;;;494:17;;;608;;;599:27;;;;596:36;-1:-1;593:2;;;645:1;;635:12;593:2;670:1;655:206;680:6;677:1;674:13;655:206;;;2674:20;;748:50;;812:14;;;;840;;;;702:1;695:9;655:206;;;659:14;;;;;237:630;;;;:::o;893:722::-;;1021:3;1014:4;1006:6;1002:17;998:27;988:2;;-1:-1;;1029:12;988:2;1069:6;1063:13;1091:80;1106:64;1163:6;1106:64;:::i;1091:80::-;1199:21;;;1082:89;-1:-1;1243:4;1256:14;;;;1231:17;;;1345;;;1336:27;;;;1333:36;-1:-1;1330:2;;;1382:1;;1372:12;1330:2;1407:1;1392:217;1417:6;1414:1;1411:13;1392:217;;;2822:13;;1485:61;;1560:14;;;;1588;;;;1439:1;1432:9;1392:217;;1759:440;;1860:3;1853:4;1845:6;1841:17;1837:27;1827:2;;-1:-1;;1868:12;1827:2;1915:6;1902:20;21490:18;21482:6;21479:30;21476:2;;;-1:-1;;21512:12;21476:2;1937:64;21585:9;21566:17;;-1:-1;;21562:33;21653:4;21643:15;1937:64;:::i;:::-;1928:73;;2021:6;2014:5;2007:21;2125:3;21653:4;2116:6;2049;2107:16;;2104:25;2101:2;;;2142:1;;2132:12;2101:2;24968:6;21653:4;2049:6;2045:17;21653:4;2083:5;2079:16;24945:30;25024:1;25006:16;;;21653:4;25006:16;24999:27;2083:5;1820:379;-1:-1;;1820:379::o;2885:753::-;;;;;3065:3;3053:9;3044:7;3040:23;3036:33;3033:2;;;-1:-1;;3072:12;3033:2;85:6;72:20;97:33;124:5;97:33;:::i;:::-;3124:63;-1:-1;3224:2;3263:22;;72:20;97:33;72:20;97:33;:::i;:::-;3232:63;-1:-1;3332:2;3371:22;;72:20;97:33;72:20;97:33;:::i;:::-;3340:63;-1:-1;3468:2;3453:18;;3440:32;3492:18;3481:30;;3478:2;;;-1:-1;;3514:12;3478:2;3544:78;3614:7;3605:6;3594:9;3590:22;3544:78;:::i;:::-;3534:88;;;3027:611;;;;;;;:::o;3645:721::-;;;;;3809:3;3797:9;3788:7;3784:23;3780:33;3777:2;;;-1:-1;;3816:12;3777:2;85:6;72:20;97:33;124:5;97:33;:::i;:::-;3868:63;-1:-1;3968:2;4007:22;;72:20;97:33;72:20;97:33;:::i;:::-;3976:63;-1:-1;4104:2;4089:18;;4076:32;4128:18;4117:30;;4114:2;;;-1:-1;;4150:12;4114:2;4180:62;4234:7;4225:6;4214:9;4210:22;4180:62;:::i;:::-;3771:595;;;;-1:-1;4170:72;;4279:2;4318:22;2674:20;;-1:-1;;;3771:595::o;4373:657::-;;;4555:2;4543:9;4534:7;4530:23;4526:32;4523:2;;;-1:-1;;4561:12;4523:2;4612:17;4606:24;4650:18;;4642:6;4639:30;4636:2;;;-1:-1;;4672:12;4636:2;4702:89;4783:7;4774:6;4763:9;4759:22;4702:89;:::i;:::-;4692:99;;4849:2;4838:9;4834:18;4828:25;4814:39;;4650:18;4865:6;4862:30;4859:2;;;-1:-1;;4895:12;4859:2;;4925:89;5006:7;4997:6;4986:9;4982:22;4925:89;:::i;:::-;4915:99;;;4517:513;;;;;:::o;5037:981::-;;;;;;5242:3;5230:9;5221:7;5217:23;5213:33;5210:2;;;-1:-1;;5249:12;5210:2;1702:6;1689:20;1714:32;1740:5;1714:32;:::i;:::-;5301:62;-1:-1;5400:2;5439:22;;72:20;97:33;72:20;97:33;:::i;:::-;5408:63;-1:-1;5508:2;5547:22;;72:20;97:33;72:20;97:33;:::i;:::-;5516:63;-1:-1;5644:2;5629:18;;5616:32;5668:18;5657:30;;;5654:2;;;-1:-1;;5690:12;5654:2;5720:62;5774:7;5765:6;5754:9;5750:22;5720:62;:::i;:::-;5710:72;;5847:3;5836:9;5832:19;5819:33;5805:47;;5668:18;5864:6;5861:30;5858:2;;;-1:-1;;5894:12;5858:2;;5924:78;5994:7;5985:6;5974:9;5970:22;5924:78;:::i;:::-;5914:88;;;5204:814;;;;;;;;:::o;6025:845::-;;;;;;6205:3;6193:9;6184:7;6180:23;6176:33;6173:2;;;-1:-1;;6212:12;6173:2;1702:6;1689:20;1714:32;1740:5;1714:32;:::i;:::-;6264:62;-1:-1;6363:2;6402:22;;72:20;97:33;72:20;97:33;:::i;:::-;6371:63;-1:-1;6471:2;6510:22;;72:20;97:33;72:20;97:33;:::i;:::-;6479:63;-1:-1;6607:2;6592:18;;6579:32;6631:18;6620:30;;6617:2;;;-1:-1;;6653:12;6617:2;6683:62;6737:7;6728:6;6717:9;6713:22;6683:62;:::i;:::-;6167:703;;;;-1:-1;6167:703;;6782:3;6822:22;2674:20;;6167:703;-1:-1;;;6167:703::o;6877:329::-;;7025:2;7013:9;7004:7;7000:23;6996:32;6993:2;;;-1:-1;;7031:12;6993:2;2324:6;2318:13;2336:66;2396:5;2336:66;:::i;7535:263::-;;7650:2;7638:9;7629:7;7625:23;7621:32;7618:2;;;-1:-1;;7656:12;7618:2;-1:-1;2822:13;;7612:186;-1:-1;7612:186::o;7805:399::-;;;7937:2;7925:9;7916:7;7912:23;7908:32;7905:2;;;-1:-1;;7943:12;7905:2;-1:-1;;2822:13;;8106:2;8156:22;;;2822:13;;;;;-1:-1;7899:305::o;8693:690::-;;8886:5;21936:12;22351:6;22346:3;22339:19;22388:4;;22383:3;22379:14;8898:93;;22388:4;9062:5;21790:14;-1:-1;9101:260;9126:6;9123:1;9120:13;9101:260;;;9187:13;;11926:37;;8365:14;;;;22194;;;;9148:1;9141:9;9101:260;;;-1:-1;9367:10;;8817:566;-1:-1;;;;;8817:566::o;9619:343::-;;9761:5;21936:12;22351:6;22346:3;22339:19;9854:52;9899:6;22388:4;22383:3;22379:14;22388:4;9880:5;9876:16;9854:52;:::i;:::-;21585:9;25385:14;-1:-1;;25381:28;9918:39;;;;22388:4;9918:39;;9709:253;-1:-1;;9709:253::o;12095:271::-;;10129:5;21936:12;10240:52;10285:6;10280:3;10273:4;10266:5;10262:16;10240:52;:::i;:::-;10304:16;;;;;12229:137;-1:-1;;12229:137::o;12373:222::-;-1:-1;;;;;23744:54;;;;8613:37;;12500:2;12485:18;;12471:124::o;12602:349::-;-1:-1;;;;;23744:54;;;;8472:58;;12937:2;12922:18;;11926:37;12765:2;12750:18;;12736:215::o;12958:333::-;-1:-1;;;;;23744:54;;;8613:37;;23744:54;;13277:2;13262:18;;8613:37;13113:2;13098:18;;13084:207::o;13298:640::-;-1:-1;;;;;23744:54;;;8613:37;;23744:54;;13692:2;13677:18;;8613:37;13527:3;13729:2;13714:18;;13707:48;;;13298:640;;13769:76;;13512:19;;13831:6;13769:76;:::i;:::-;13761:84;;11956:5;13924:2;13913:9;13909:18;11926:37;13498:440;;;;;;;:::o;14285:629::-;;14540:2;14561:17;14554:47;14615:108;14540:2;14529:9;14525:18;14709:6;14615:108;:::i;:::-;14771:9;14765:4;14761:20;14756:2;14745:9;14741:18;14734:48;14796:108;14899:4;14890:6;14796:108;:::i;:::-;14788:116;14511:403;-1:-1;;;;;14511:403::o;14921:210::-;23067:13;;23060:21;9456:34;;15042:2;15027:18;;15013:118::o;15138:896::-;-1:-1;;;;;;23154:78;;9571:36;;-1:-1;;;;;23744:54;;;15606:2;15591:18;;8613:37;23744:54;;15689:2;15674:18;;8613:37;23755:42;15726:2;15711:18;;15704:48;;;15138:896;;15766:76;;15428:19;;15828:6;15766:76;:::i;:::-;15891:9;15885:4;15881:20;15875:3;15864:9;15860:19;15853:49;15916:108;16019:4;16010:6;15916:108;:::i;:::-;15908:116;15414:620;-1:-1;;;;;;;;15414:620::o;16041:748::-;-1:-1;;;;;;23154:78;;9571:36;;-1:-1;;;;;23744:54;;;16459:2;16444:18;;8613:37;23744:54;;16542:2;16527:18;;8613:37;23755:42;16579:2;16564:18;;16557:48;;;16041:748;;16619:76;;16281:19;;16681:6;16619:76;:::i;:::-;16611:84;;11956:5;16774:3;16763:9;16759:19;11926:37;16267:522;;;;;;;;:::o;17071:510::-;17287:2;17272:18;;25526:1;25516:12;;25506:2;;25532:9;25506:2;10615:83;;;17484:2;17469:18;;11926:37;;;;17567:2;17552:18;;;11926:37;17258:323;:::o;17588:460::-;10789:58;;;17951:2;17936:18;;11926:37;;;;-1:-1;;;;;23744:54;18034:2;18019:18;;8613:37;17779:2;17764:18;;17750:298::o;18055:416::-;18255:2;18269:47;;;11084:2;18240:18;;;22339:19;11120:26;22379:14;;;11100:47;11166:12;;;18226:245::o;18478:416::-;18678:2;18692:47;;;11417:2;18663:18;;;22339:19;11453:25;22379:14;;;11433:46;11498:12;;;18649:245::o;18901:416::-;19101:2;19115:47;;;19086:18;;;22339:19;11785:34;22379:14;;;11765:55;11839:12;;;19072:245::o;19324:222::-;11926:37;;;19451:2;19436:18;;19422:124::o;19553:746::-;11926:37;;;20004:2;19989:18;;10789:58;;;;20095:2;20080:18;;10789:58;;;;20178:2;20163:18;;11926:37;-1:-1;;;;;23744:54;20284:3;20269:19;;10426:73;19831:3;19816:19;;19802:497::o;20306:460::-;11926:37;;;20669:2;20654:18;;10789:58;;;;20752:2;20737:18;;11926:37;20497:2;20482:18;;20468:298::o;20773:256::-;20835:2;20829:9;20861:17;;;20936:18;20921:34;;20957:22;;;20918:62;20915:2;;;20993:1;;20983:12;20915:2;20835;21002:22;20813:216;;-1:-1;20813:216::o;21036:304::-;;21195:18;21187:6;21184:30;21181:2;;;-1:-1;;21217:12;21181:2;-1:-1;21262:4;21250:17;;;21315:15;;21118:222::o;25041:268::-;25106:1;25113:101;25127:6;25124:1;25121:13;25113:101;;;25194:11;;;25188:18;25175:11;;;25168:39;25149:2;25142:10;25113:101;;;25229:6;25226:1;25223:13;25220:2;;;-1:-1;;25106:1;25276:16;;25269:27;25090:219::o;25555:117::-;-1:-1;;;;;23744:54;;25614:35;;25604:2;;25663:1;;25653:12;25604:2;25598:74;:::o;25679:115::-;-1:-1;;;;;;23154:78;;25737:34;;25727:2;;25785:1;;25775:12"
            }
        }
    },
    "sourceTreeHashHex": "0xe348af40756ea4f990fffdbaa6c56cd0360b24a521b7b6bf1a427bebf4460038",
    "sources": {
        "./UniswapSampler.sol": {
            "id": 21,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinUniswap.sol\";\nimport \"./SwapRevertSampler.sol\";\n\ncontract UniswapSampler is\n    MixinUniswap,\n    SwapRevertSampler\n{\n\n    constructor(IEtherTokenV06 weth)\n        public\n        MixinUniswap(weth)\n    { }\n\n    function sampleSwapFromUniswap(\n        address sellToken,\n        address buyToken,\n        bytes memory bridgeData,\n        uint256 takerTokenAmount\n    )\n        external\n        returns (uint256)\n    {\n        return _tradeUniswapInternal(\n            _getNativeWrappedToken(),\n            IERC20TokenV06(sellToken),\n            IERC20TokenV06(buyToken),\n            takerTokenAmount,\n            bridgeData\n        );\n    }\n\n    /// @dev Sample sell quotes from Uniswap.\n    /// @param router Address of the Uniswap Router\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return gasUsed gas consumed in each sample sell\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromUniswap(\n        address router,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        returns (uint256[] memory gasUsed, uint256[] memory makerTokenAmounts)\n    {\n        (gasUsed, makerTokenAmounts) = _sampleSwapQuotesRevert(\n            SwapRevertSamplerQuoteOpts({\n                sellToken: takerToken,\n                buyToken: makerToken,\n                bridgeData: abi.encode(router),\n                getSwapQuoteCallback: this.sampleSwapFromUniswap\n            }),\n            takerTokenAmounts\n        );\n    }\n\n    /// @dev Sample buy quotes from Uniswap.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token sell amount for each sample.\n    /// @return gasUsed gas consumed in each sample sell\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromUniswap(\n        address router,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        returns (uint256[] memory gasUsed, uint256[] memory takerTokenAmounts)\n    {\n        (gasUsed, takerTokenAmounts) = _sampleSwapApproximateBuys(\n            SwapRevertSamplerBuyQuoteOpts({\n                sellToken: takerToken,\n                buyToken: makerToken,\n                sellTokenData: abi.encode(router),\n                buyTokenData: abi.encode(router),\n                getSwapQuoteCallback: this.sampleSwapFromUniswap\n            }),\n            makerTokenAmounts\n        );\n    }\n\n}\n"
        },
        "@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinUniswap.sol": {
            "id": 55,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol\";\nimport \"../IBridgeAdapter.sol\";\n\ninterface IUniswapExchangeFactory {\n\n    /// @dev Get the exchange for a token.\n    /// @param token The token contract.\n    function getExchange(IERC20TokenV06 token)\n        external\n        view\n        returns (IUniswapExchange exchange);\n}\n\ninterface IUniswapExchange {\n\n    /// @dev Buys at least `minTokensBought` tokens with ETH and transfer them\n    ///      to `recipient`.\n    /// @param minTokensBought The minimum number of tokens to buy.\n    /// @param deadline Time when this order expires.\n    /// @param recipient Who to transfer the tokens to.\n    /// @return tokensBought Amount of tokens bought.\n    function ethToTokenTransferInput(\n        uint256 minTokensBought,\n        uint256 deadline,\n        address recipient\n    )\n        external\n        payable\n        returns (uint256 tokensBought);\n\n    /// @dev Buys at least `minEthBought` ETH with tokens.\n    /// @param tokensSold Amount of tokens to sell.\n    /// @param minEthBought The minimum amount of ETH to buy.\n    /// @param deadline Time when this order expires.\n    /// @return ethBought Amount of tokens bought.\n    function tokenToEthSwapInput(\n        uint256 tokensSold,\n        uint256 minEthBought,\n        uint256 deadline\n    )\n        external\n        returns (uint256 ethBought);\n\n    /// @dev Buys at least `minTokensBought` tokens with the exchange token\n    ///      and transfer them to `recipient`.\n    /// @param tokensSold Amount of tokens to sell.\n    /// @param minTokensBought The minimum number of tokens to buy.\n    /// @param minEthBought The minimum amount of intermediate ETH to buy.\n    /// @param deadline Time when this order expires.\n    /// @param recipient Who to transfer the tokens to.\n    /// @param buyToken The token being bought.\n    /// @return tokensBought Amount of tokens bought.\n    function tokenToTokenTransferInput(\n        uint256 tokensSold,\n        uint256 minTokensBought,\n        uint256 minEthBought,\n        uint256 deadline,\n        address recipient,\n        IERC20TokenV06 buyToken\n    )\n        external\n        returns (uint256 tokensBought);\n\n    /// @dev Buys at least `minTokensBought` tokens with the exchange token.\n    /// @param tokensSold Amount of tokens to sell.\n    /// @param minTokensBought The minimum number of tokens to buy.\n    /// @param minEthBought The minimum amount of intermediate ETH to buy.\n    /// @param deadline Time when this order expires.\n    /// @param buyToken The token being bought.\n    /// @return tokensBought Amount of tokens bought.\n    function tokenToTokenSwapInput(\n        uint256 tokensSold,\n        uint256 minTokensBought,\n        uint256 minEthBought,\n        uint256 deadline,\n        IERC20TokenV06 buyToken\n    )\n        external\n        returns (uint256 tokensBought);\n}\n\ncontract MixinUniswap {\n\n    using LibERC20TokenV06 for IERC20TokenV06;\n\n    /// @dev Mainnet address of the WETH contract.\n    IEtherTokenV06 private immutable WETH;\n\n    constructor(IEtherTokenV06 weth)\n        public\n    {\n        WETH = weth;\n    }\n\n    function _tradeUniswap(\n        IERC20TokenV06 sellToken,\n        IERC20TokenV06 buyToken,\n        uint256 sellAmount,\n        bytes memory bridgeData\n    )\n        internal\n        returns (uint256 boughtAmount)\n    {\n        return _tradeUniswapInternal(WETH, sellToken, buyToken, sellAmount, bridgeData);\n    }\n\n    function _tradeUniswapInternal(\n        IEtherTokenV06 weth,\n        IERC20TokenV06 sellToken,\n        IERC20TokenV06 buyToken,\n        uint256 sellAmount,\n        bytes memory bridgeData\n    )\n        internal\n        returns (uint256 boughtAmount)\n    {\n        IUniswapExchangeFactory exchangeFactory =\n            abi.decode(bridgeData, (IUniswapExchangeFactory));\n\n        // Get the exchange for the token pair.\n        IUniswapExchange exchange = _getUniswapExchangeForTokenPair(\n            weth,\n            exchangeFactory,\n            sellToken,\n            buyToken\n        );\n\n        // Convert from WETH to a token.\n        if (sellToken == weth) {\n            // Unwrap the WETH.\n            weth.withdraw(sellAmount);\n            // Buy as much of `buyToken` token with ETH as possible\n            boughtAmount = exchange.ethToTokenTransferInput{ value: sellAmount }(\n                // Minimum buy amount.\n                1,\n                // Expires after this block.\n                block.timestamp,\n                // Recipient is `this`.\n                address(this)\n            );\n\n        // Convert from a token to WETH.\n        } else if (buyToken == weth) {\n            // Grant the exchange an allowance.\n            sellToken.approveIfBelow(\n                address(exchange),\n                sellAmount\n            );\n            // Buy as much ETH with `sellToken` token as possible.\n            boughtAmount = exchange.tokenToEthSwapInput(\n                // Sell all tokens we hold.\n                sellAmount,\n                // Minimum buy amount.\n                1,\n                // Expires after this block.\n                block.timestamp\n            );\n            // Wrap the ETH.\n            weth.deposit{ value: boughtAmount }();\n        // Convert from one token to another.\n        } else {\n            // Grant the exchange an allowance.\n            sellToken.approveIfBelow(\n                address(exchange),\n                sellAmount\n            );\n            // Buy as much `buyToken` token with `sellToken` token\n            boughtAmount = exchange.tokenToTokenSwapInput(\n                // Sell all tokens we hold.\n                sellAmount,\n                // Minimum buy amount.\n                1,\n                // Must buy at least 1 intermediate wei of ETH.\n                1,\n                // Expires after this block.\n                block.timestamp,\n                // Convert to `buyToken`.\n                buyToken\n            );\n        }\n\n        return boughtAmount;\n    }\n\n    /// @dev Retrieves the uniswap exchange for a given token pair.\n    ///      In the case of a WETH-token exchange, this will be the non-WETH token.\n    ///      In th ecase of a token-token exchange, this will be the first token.\n    /// @param exchangeFactory The exchange factory.\n    /// @param sellToken The address of the token we are converting from.\n    /// @param buyToken The address of the token we are converting to.\n    /// @return exchange The uniswap exchange.\n    function _getUniswapExchangeForTokenPair(\n        IEtherTokenV06 weth,\n        IUniswapExchangeFactory exchangeFactory,\n        IERC20TokenV06 sellToken,\n        IERC20TokenV06 buyToken\n    )\n        private\n        view\n        returns (IUniswapExchange exchange)\n    {\n        // Whichever isn't WETH is the exchange token.\n        exchange = sellToken == weth\n            ? exchangeFactory.getExchange(buyToken)\n            : exchangeFactory.getExchange(sellToken);\n        require(address(exchange) != address(0), \"MixinUniswap/NO_EXCHANGE\");\n    }\n}\n"
        },
        "@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol": {
            "id": 31,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol\";\nimport \"./IERC20TokenV06.sol\";\n\n\nlibrary LibERC20TokenV06 {\n    bytes constant private DECIMALS_CALL_DATA = hex\"313ce567\";\n\n    /// @dev Calls `IERC20TokenV06(token).approve()`.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param spender The address that receives an allowance.\n    /// @param allowance The allowance to set.\n    function compatApprove(\n        IERC20TokenV06 token,\n        address spender,\n        uint256 allowance\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.approve.selector,\n            spender,\n            allowance\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).approve()` and sets the allowance to the\n    ///      maximum if the current approval is not already >= an amount.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param spender The address that receives an allowance.\n    /// @param amount The minimum allowance needed.\n    function approveIfBelow(\n        IERC20TokenV06 token,\n        address spender,\n        uint256 amount\n    )\n        internal\n    {\n        if (token.allowance(address(this), spender) < amount) {\n            compatApprove(token, spender, uint256(-1));\n        }\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).transfer()`.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param to The address that receives the tokens\n    /// @param amount Number of tokens to transfer.\n    function compatTransfer(\n        IERC20TokenV06 token,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.transfer.selector,\n            to,\n            amount\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).transferFrom()`.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param from The owner of the tokens.\n    /// @param to The address that receives the tokens\n    /// @param amount Number of tokens to transfer.\n    function compatTransferFrom(\n        IERC20TokenV06 token,\n        address from,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.transferFrom.selector,\n            from,\n            to,\n            amount\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Retrieves the number of decimals for a token.\n    ///      Returns `18` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @return tokenDecimals The number of decimals places for the token.\n    function compatDecimals(IERC20TokenV06 token)\n        internal\n        view\n        returns (uint8 tokenDecimals)\n    {\n        tokenDecimals = 18;\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(DECIMALS_CALL_DATA);\n        if (didSucceed && resultData.length >= 32) {\n            tokenDecimals = uint8(LibBytesV06.readUint256(resultData, 0));\n        }\n    }\n\n    /// @dev Retrieves the allowance for a token, owner, and spender.\n    ///      Returns `0` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @param owner The owner of the tokens.\n    /// @param spender The address the spender.\n    /// @return allowance_ The allowance for a token, owner, and spender.\n    function compatAllowance(IERC20TokenV06 token, address owner, address spender)\n        internal\n        view\n        returns (uint256 allowance_)\n    {\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(\n            abi.encodeWithSelector(\n                token.allowance.selector,\n                owner,\n                spender\n            )\n        );\n        if (didSucceed && resultData.length >= 32) {\n            allowance_ = LibBytesV06.readUint256(resultData, 0);\n        }\n    }\n\n    /// @dev Retrieves the balance for a token owner.\n    ///      Returns `0` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @param owner The owner of the tokens.\n    /// @return balance The token balance of an owner.\n    function compatBalanceOf(IERC20TokenV06 token, address owner)\n        internal\n        view\n        returns (uint256 balance)\n    {\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(\n            abi.encodeWithSelector(\n                token.balanceOf.selector,\n                owner\n            )\n        );\n        if (didSucceed && resultData.length >= 32) {\n            balance = LibBytesV06.readUint256(resultData, 0);\n        }\n    }\n\n    /// @dev Check if the data returned by a non-static call to an ERC20 token\n    ///      is a successful result. Supported functions are `transfer()`,\n    ///      `transferFrom()`, and `approve()`.\n    /// @param resultData The raw data returned by a non-static call to the ERC20 token.\n    /// @return isSuccessful Whether the result data indicates success.\n    function isSuccessfulResult(bytes memory resultData)\n        internal\n        pure\n        returns (bool isSuccessful)\n    {\n        if (resultData.length == 0) {\n            return true;\n        }\n        if (resultData.length >= 32) {\n            uint256 result = LibBytesV06.readUint256(resultData, 0);\n            if (result == 1) {\n                return true;\n            }\n        }\n    }\n\n    /// @dev Executes a call on address `target` with calldata `callData`\n    ///      and asserts that either nothing was returned or a single boolean\n    ///      was returned equal to `true`.\n    /// @param target The call target.\n    /// @param callData The abi-encoded call data.\n    function _callWithOptionalBooleanResult(\n        address target,\n        bytes memory callData\n    )\n        private\n    {\n        (bool didSucceed, bytes memory resultData) = target.call(callData);\n        if (didSucceed && isSuccessfulResult(resultData)) {\n            return;\n        }\n        LibRichErrorsV06.rrevert(resultData);\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol": {
            "id": 37,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibRichErrorsV06 {\n\n    // bytes4(keccak256(\"Error(string)\"))\n    bytes4 internal constant STANDARD_ERROR_SELECTOR = 0x08c379a0;\n\n    // solhint-disable func-name-mixedcase\n    /// @dev ABI encode a standard, string revert error payload.\n    ///      This is the same payload that would be included by a `revert(string)`\n    ///      solidity statement. It has the function signature `Error(string)`.\n    /// @param message The error string.\n    /// @return The ABI encoded error.\n    function StandardError(string memory message)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            STANDARD_ERROR_SELECTOR,\n            bytes(message)\n        );\n    }\n    // solhint-enable func-name-mixedcase\n\n    /// @dev Reverts an encoded rich revert reason `errorData`.\n    /// @param errorData ABI encoded error data.\n    function rrevert(bytes memory errorData)\n        internal\n        pure\n    {\n        assembly {\n            revert(add(errorData, 0x20), mload(errorData))\n        }\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol": {
            "id": 32,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./errors/LibBytesRichErrorsV06.sol\";\nimport \"./errors/LibRichErrorsV06.sol\";\n\n\nlibrary LibBytesV06 {\n\n    using LibBytesV06 for bytes;\n\n    /// @dev Gets the memory address for a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of byte array. This\n    ///         points to the header of the byte array which contains\n    ///         the length.\n    function rawAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := input\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Gets the memory address for the contents of a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of the contents of the byte array.\n    function contentAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := add(input, 32)\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Copies `length` bytes from memory location `source` to `dest`.\n    /// @param dest memory address to copy bytes to.\n    /// @param source memory address to copy bytes from.\n    /// @param length number of bytes to copy.\n    function memCopy(\n        uint256 dest,\n        uint256 source,\n        uint256 length\n    )\n        internal\n        pure\n    {\n        if (length < 32) {\n            // Handle a partial word by reading destination and masking\n            // off the bits we are interested in.\n            // This correctly handles overlap, zero lengths and source == dest\n            assembly {\n                let mask := sub(exp(256, sub(32, length)), 1)\n                let s := and(mload(source), not(mask))\n                let d := and(mload(dest), mask)\n                mstore(dest, or(s, d))\n            }\n        } else {\n            // Skip the O(length) loop when source == dest.\n            if (source == dest) {\n                return;\n            }\n\n            // For large copies we copy whole words at a time. The final\n            // word is aligned to the end of the range (instead of after the\n            // previous) to handle partial words. So a copy will look like this:\n            //\n            //  ####\n            //      ####\n            //          ####\n            //            ####\n            //\n            // We handle overlap in the source and destination range by\n            // changing the copying direction. This prevents us from\n            // overwriting parts of source that we still need to copy.\n            //\n            // This correctly handles source == dest\n            //\n            if (source > dest) {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because it\n                    // is easier to compare with in the loop, and these\n                    // are also the addresses we need for copying the\n                    // last bytes.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the last 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the last bytes in\n                    // source already due to overlap.\n                    let last := mload(sEnd)\n\n                    // Copy whole words front to back\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} lt(source, sEnd) {} {\n                        mstore(dest, mload(source))\n                        source := add(source, 32)\n                        dest := add(dest, 32)\n                    }\n\n                    // Write the last 32 bytes\n                    mstore(dEnd, last)\n                }\n            } else {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because those\n                    // are the starting points when copying a word at the end.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the first 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the first bytes in\n                    // source already due to overlap.\n                    let first := mload(source)\n\n                    // Copy whole words back to front\n                    // We use a signed comparisson here to allow dEnd to become\n                    // negative (happens when source and dest < 32). Valid\n                    // addresses in local memory will never be larger than\n                    // 2**255, so they can be safely re-interpreted as signed.\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} slt(dest, dEnd) {} {\n                        mstore(dEnd, mload(sEnd))\n                        sEnd := sub(sEnd, 32)\n                        dEnd := sub(dEnd, 32)\n                    }\n\n                    // Write the first 32 bytes\n                    mstore(dest, first)\n                }\n            }\n        }\n    }\n\n    /// @dev Returns a slices from a byte array.\n    /// @param b The byte array to take a slice from.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function slice(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure and copy contents\n        result = new bytes(to - from);\n        memCopy(\n            result.contentAddress(),\n            b.contentAddress() + from,\n            result.length\n        );\n        return result;\n    }\n\n    /// @dev Returns a slice from a byte array without preserving the input.\n    ///      When `from == 0`, the original array will match the slice.\n    ///      In other cases its state will be corrupted.\n    /// @param b The byte array to take a slice from. Will be destroyed in the process.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function sliceDestructive(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure around [from, to) in-place.\n        assembly {\n            result := add(b, from)\n            mstore(result, sub(to, from))\n        }\n        return result;\n    }\n\n    /// @dev Pops the last byte off of a byte array by modifying its length.\n    /// @param b Byte array that will be modified.\n    /// @return result The byte that was popped off.\n    function popLastByte(bytes memory b)\n        internal\n        pure\n        returns (bytes1 result)\n    {\n        if (b.length == 0) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanZeroRequired,\n                b.length,\n                0\n            ));\n        }\n\n        // Store last byte.\n        result = b[b.length - 1];\n\n        assembly {\n            // Decrement length of byte array.\n            let newLen := sub(mload(b), 1)\n            mstore(b, newLen)\n        }\n        return result;\n    }\n\n    /// @dev Tests equality of two byte arrays.\n    /// @param lhs First byte array to compare.\n    /// @param rhs Second byte array to compare.\n    /// @return equal True if arrays are the same. False otherwise.\n    function equals(\n        bytes memory lhs,\n        bytes memory rhs\n    )\n        internal\n        pure\n        returns (bool equal)\n    {\n        // Keccak gas cost is 30 + numWords * 6. This is a cheap way to compare.\n        // We early exit on unequal lengths, but keccak would also correctly\n        // handle this.\n        return lhs.length == rhs.length && keccak256(lhs) == keccak256(rhs);\n    }\n\n    /// @dev Reads an address from a position in a byte array.\n    /// @param b Byte array containing an address.\n    /// @param index Index in byte array of address.\n    /// @return result address from byte array.\n    function readAddress(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (address result)\n    {\n        if (b.length < index + 20) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Read address from array memory\n        assembly {\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 20-byte mask to obtain address\n            result := and(mload(add(b, index)), 0xffffffffffffffffffffffffffffffffffffffff)\n        }\n        return result;\n    }\n\n    /// @dev Writes an address into a specific position in a byte array.\n    /// @param b Byte array to insert address into.\n    /// @param index Index in byte array of address.\n    /// @param input Address to put into byte array.\n    function writeAddress(\n        bytes memory b,\n        uint256 index,\n        address input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 20) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Store address into array memory\n        assembly {\n            // The address occupies 20 bytes and mstore stores 32 bytes.\n            // First fetch the 32-byte word where we'll be storing the address, then\n            // apply a mask so we have only the bytes in the word that the address will not occupy.\n            // Then combine these bytes with the address and store the 32 bytes back to memory with mstore.\n\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 12-byte mask to obtain extra bytes occupying word of memory where we'll store the address\n            let neighbors := and(\n                mload(add(b, index)),\n                0xffffffffffffffffffffffff0000000000000000000000000000000000000000\n            )\n\n            // Make sure input address is clean.\n            // (Solidity does not guarantee this)\n            input := and(input, 0xffffffffffffffffffffffffffffffffffffffff)\n\n            // Store the neighbors and address into memory\n            mstore(add(b, index), xor(input, neighbors))\n        }\n    }\n\n    /// @dev Reads a bytes32 value from a position in a byte array.\n    /// @param b Byte array containing a bytes32 value.\n    /// @param index Index in byte array of bytes32 value.\n    /// @return result bytes32 value from byte array.\n    function readBytes32(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        if (b.length < index + 32) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            result := mload(add(b, index))\n        }\n        return result;\n    }\n\n    /// @dev Writes a bytes32 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input bytes32 to put into byte array.\n    function writeBytes32(\n        bytes memory b,\n        uint256 index,\n        bytes32 input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 32) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            mstore(add(b, index), input)\n        }\n    }\n\n    /// @dev Reads a uint256 value from a position in a byte array.\n    /// @param b Byte array containing a uint256 value.\n    /// @param index Index in byte array of uint256 value.\n    /// @return result uint256 value from byte array.\n    function readUint256(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (uint256 result)\n    {\n        result = uint256(readBytes32(b, index));\n        return result;\n    }\n\n    /// @dev Writes a uint256 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input uint256 to put into byte array.\n    function writeUint256(\n        bytes memory b,\n        uint256 index,\n        uint256 input\n    )\n        internal\n        pure\n    {\n        writeBytes32(b, index, bytes32(input));\n    }\n\n    /// @dev Reads an unpadded bytes4 value from a position in a byte array.\n    /// @param b Byte array containing a bytes4 value.\n    /// @param index Index in byte array of bytes4 value.\n    /// @return result bytes4 value from byte array.\n    function readBytes4(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes4 result)\n    {\n        if (b.length < index + 4) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsFourRequired,\n                b.length,\n                index + 4\n            ));\n        }\n\n        // Arrays are prefixed by a 32 byte length field\n        index += 32;\n\n        // Read the bytes4 from array memory\n        assembly {\n            result := mload(add(b, index))\n            // Solidity does not require us to clean the trailing bytes.\n            // We do it anyway\n            result := and(result, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)\n        }\n        return result;\n    }\n\n    /// @dev Writes a new length to a byte array.\n    ///      Decreasing length will lead to removing the corresponding lower order bytes from the byte array.\n    ///      Increasing length may lead to appending adjacent in-memory bytes to the end of the byte array.\n    /// @param b Bytes array to write new length to.\n    /// @param length New length of byte array.\n    function writeLength(bytes memory b, uint256 length)\n        internal\n        pure\n    {\n        assembly {\n            mstore(b, length)\n        }\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/errors/LibBytesRichErrorsV06.sol": {
            "id": 35,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibBytesRichErrorsV06 {\n\n    enum InvalidByteOperationErrorCodes {\n        FromLessThanOrEqualsToRequired,\n        ToLessThanOrEqualsLengthRequired,\n        LengthGreaterThanZeroRequired,\n        LengthGreaterThanOrEqualsFourRequired,\n        LengthGreaterThanOrEqualsTwentyRequired,\n        LengthGreaterThanOrEqualsThirtyTwoRequired,\n        LengthGreaterThanOrEqualsNestedBytesLengthRequired,\n        DestinationLengthGreaterThanOrEqualSourceLengthRequired\n    }\n\n    // bytes4(keccak256(\"InvalidByteOperationError(uint8,uint256,uint256)\"))\n    bytes4 internal constant INVALID_BYTE_OPERATION_ERROR_SELECTOR =\n        0x28006595;\n\n    // solhint-disable func-name-mixedcase\n    function InvalidByteOperationError(\n        InvalidByteOperationErrorCodes errorCode,\n        uint256 offset,\n        uint256 required\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            INVALID_BYTE_OPERATION_ERROR_SELECTOR,\n            errorCode,\n            offset,\n            required\n        );\n    }\n}\n"
        },
        "@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol": {
            "id": 29,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\ninterface IERC20TokenV06 {\n\n    // solhint-disable no-simple-event-func-name\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 value\n    );\n\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n\n    /// @dev send `value` token to `to` from `msg.sender`\n    /// @param to The address of the recipient\n    /// @param value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transfer(address to, uint256 value)\n        external\n        returns (bool);\n\n    /// @dev send `value` token to `to` from `from` on the condition it is approved by `from`\n    /// @param from The address of the sender\n    /// @param to The address of the recipient\n    /// @param value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    )\n        external\n        returns (bool);\n\n    /// @dev `msg.sender` approves `spender` to spend `value` tokens\n    /// @param spender The address of the account able to transfer the tokens\n    /// @param value The amount of wei to be approved for transfer\n    /// @return Always true if the call has enough gas to complete execution\n    function approve(address spender, uint256 value)\n        external\n        returns (bool);\n\n    /// @dev Query total supply of token\n    /// @return Total supply of token\n    function totalSupply()\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the balance of `owner`.\n    /// @param owner The address from which the balance will be retrieved\n    /// @return Balance of owner\n    function balanceOf(address owner)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the allowance for `spender` to spend from `owner`.\n    /// @param owner The address of the account owning tokens\n    /// @param spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the number of decimals this token has.\n    function decimals()\n        external\n        view\n        returns (uint8);\n}\n"
        },
        "@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol": {
            "id": 30,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./IERC20TokenV06.sol\";\n\n\ninterface IEtherTokenV06 is\n    IERC20TokenV06\n{\n    /// @dev Wrap ether.\n    function deposit() external payable;\n\n    /// @dev Unwrap ether.\n    function withdraw(uint256 amount) external;\n}\n"
        },
        "@0x/contracts-zero-ex/contracts/src/transformers/bridges/IBridgeAdapter.sol": {
            "id": 39,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\n\n\ninterface IBridgeAdapter {\n\n    struct BridgeOrder {\n        // Upper 16 bytes: uint128 protocol ID (right-aligned)\n        // Lower 16 bytes: ASCII source name (left-aligned)\n        bytes32 source;\n        uint256 takerTokenAmount;\n        uint256 makerTokenAmount;\n        bytes bridgeData;\n    }\n\n    /// @dev Emitted when tokens are swapped with an external source.\n    /// @param source A unique ID for the source, where the upper 16 bytes\n    ///        encodes the (right-aligned) uint128 protocol ID and the\n    ///        lower 16 bytes encodes an ASCII source name.\n    /// @param inputToken The token the bridge is converting from.\n    /// @param outputToken The token the bridge is converting to.\n    /// @param inputTokenAmount Amount of input token sold.\n    /// @param outputTokenAmount Amount of output token bought.\n    event BridgeFill(\n        bytes32 source,\n        IERC20TokenV06 inputToken,\n        IERC20TokenV06 outputToken,\n        uint256 inputTokenAmount,\n        uint256 outputTokenAmount\n    );\n\n    function trade(\n        BridgeOrder calldata order,\n        IERC20TokenV06 sellToken,\n        IERC20TokenV06 buyToken,\n        uint256 sellAmount\n    )\n        external\n        returns (uint256 boughtAmount);\n}\n"
        },
        "./SwapRevertSampler.sol": {
            "id": 19,
            "content": "\n\n// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./GasOverhead.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\n\ninterface IHackedERC20 {\n    function _setBalance(address owner, uint256 amount) external;\n    function _setEnabled(bool enabled) external;\n}\n\ncontract SwapRevertSampler {\n    using LibRichErrorsV06 for bytes;\n\n    /// @dev Fixed address to register and read Gas overhead introduced by Swap revert sampling\n    GasOverhead private constant GAS_OVERHEAD = GasOverhead(0xDeF1000000000000000000000000000000001337);\n    /// @dev Maximum approximate (positive) error rate when approximating a buy quote.\n    uint256 private constant APPROXIMATE_BUY_TARGET_EPSILON_BPS = 0.0005e4;\n    /// @dev Maximum iterations to perform when approximating a buy quote.\n    uint256 private constant APPROXIMATE_BUY_MAX_ITERATIONS = 3;\n    uint256 private constant ONE_HUNDED_PERCENT_BPS = 1e4;\n    /// @dev Upper limit of gas to give to a single Swap call\n    uint256 private constant CALL_STIPEND = 2e6;\n\n\n    // solhint-disable no-empty-blocks\n    /// @dev Payable fallback to receive ETH from Kyber/WETH.\n    receive ()\n        external\n        payable\n    { }\n\n    struct SwapRevertSamplerQuoteOpts {\n        // Address of the token which is being sold\n        address sellToken;\n        // Address of the token which is wanted\n        address buyToken;\n        // Data required for the bridge to execute the swap\n        bytes bridgeData;\n        // Callback to retrieve a swap quote.\n        function (address sellToken, address buyToken, bytes memory bridgeData, uint256 sellAmount)\n            external\n            returns (uint256)\n            getSwapQuoteCallback;\n    }\n\n    struct SwapRevertSamplerBuyQuoteOpts {\n        // Address of the token which is being sold\n        address sellToken;\n        // Address of the token which is wanted\n        address buyToken;\n        // Data required for the bridge to execute the SELL_TOKEN->BUY_TOKEN swap\n        bytes sellTokenData;\n        // Data required for the bridge to execute the BUY_TOKEN->SELL_TOKEN swap\n        bytes buyTokenData;\n        // Callback to retrieve a swap quote.\n        function (address sellToken, address buyToken, bytes memory bridgeData, uint256 sellAmount)\n            external\n            returns (uint256)\n            getSwapQuoteCallback;\n    }\n\n    function _callRevert(\n        bytes4 selector,\n        address sellToken,\n        address buyToken,\n        bytes memory bridgeData,\n        uint256 amountIn\n    )\n        external\n    {\n        // Clear any registered overhead\n        try\n            GAS_OVERHEAD.clearOverhead()\n        { } catch { }\n        // Measure the gas\n        uint256 gasUsed = gasleft();\n        // Perform the sell\n        (bool success, bytes memory data) = address(this).call(\n            abi.encodeWithSelector(selector, sellToken, buyToken, bridgeData, amountIn)\n        );\n        gasUsed = gasUsed - gasleft();\n        // Remove any registered gas overhead\n        try\n            GAS_OVERHEAD.overhead()\n            returns (uint256 gasOverhead)\n        {\n            gasUsed = gasUsed - gasOverhead;\n        } catch { }\n\n        if (!success) {\n            data.rrevert();\n        }\n        // Revert with the amount bought\n        _revertSingleSwapSample(abi.decode(data, (uint256)), gasUsed);\n    }\n\n    /// @dev  Mints the sell token, then performs the swap, then reverts with the amount out.\n    /// The SwapRevertSamplerQuoteOpts has been unrolled here as our ABI encoder cannot support\n    /// encoding the function\n    function _mintCallRevert(\n        bytes4 selector,\n        address sellToken,\n        address buyToken,\n        bytes memory bridgeData,\n        uint256[] memory amountsIn\n    )\n        external\n    {\n        // We assume the amounts are ascending and that\n        // the underlying call can handle selling a specific amount\n        uint256 amountIn = amountsIn[amountsIn.length - 1];\n\n        if (sellToken == address(_getNativeWrappedToken())) {\n            try\n                IEtherTokenV06(payable(sellToken)).deposit{ value: amountIn }()\n            { } catch { }\n        } else {\n            IHackedERC20 hackedSellToken = IHackedERC20(payable(sellToken));\n            // Enable sell token to be tracked and shadowed\n            try\n                hackedSellToken._setEnabled(true)\n            { } catch { }\n\n            // Mint enough to sell\n            try\n                hackedSellToken._setBalance(address(this), amountIn)\n            { } catch { }\n        }\n\n        // Burn any excess ETH to avoid balance issues for sources which use ETH directly\n        address(0).transfer(address(this).balance);\n\n        uint256[] memory amountsOut = new uint256[](amountsIn.length);\n        uint256[] memory gasUsed = new uint256[](amountsIn.length);\n\n        for (uint256 i = 0; i < amountsIn.length; i++) {\n            try\n                this._callRevert{gas: CALL_STIPEND}(\n                    selector,\n                    sellToken,\n                    buyToken,\n                    bridgeData,\n                    amountsIn[i]\n                )\n            {\n                require(false, \"Swap Sample should have reverted\");\n            } catch (bytes memory reason) {\n                // Parse the reverted sample data\n                (amountsOut[i], gasUsed[i]) = _parseRevertedSingleSwapSample(reason);\n                // If we detect the amount out is 0 then we return early\n                // rather than continue performing excess work\n\n                // Some sources (Balancer) display issues, especially with small amounts\n                // Where the amountsOut can range, e.g 448,0,0,0,2476,3048,0,4279,4941,0,0,7133,\n\n                if (amountsOut[i] == 0) {\n                    break;\n                }\n            }\n        }\n        // Revert the entire sampling\n        _revertSwapSample(amountsOut, gasUsed);\n    }\n\n    function _sampleSwapQuotesRevert(\n        SwapRevertSamplerQuoteOpts memory opts,\n        uint256[] memory amountsIn\n    )\n        internal\n        returns (uint256[] memory gasUsed, uint256[] memory amountsOut)\n    {\n        try\n            this._mintCallRevert(\n                opts.getSwapQuoteCallback.selector,\n                opts.sellToken,\n                opts.buyToken,\n                opts.bridgeData,\n                amountsIn\n            )\n        {\n            require(false, \"Swap Sample should have reverted\");\n        } catch (bytes memory reason) {\n            // Parse the reverted sample datas\n            (amountsOut, gasUsed) = abi.decode(reason, (uint256[], uint256[]));\n        }\n    }\n\n    function _getNativeWrappedToken()\n        internal\n        view\n        returns (IEtherTokenV06)\n    {\n        uint256 chainId;\n        assembly {\n            chainId := chainid()\n        }\n        address token;\n        if (chainId == 1) {\n            // Ethereum Mainnet\n            token = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n        } else if (chainId == 3) {\n            // Ropsten\n            token = 0xc778417E063141139Fce010982780140Aa0cD5Ab;\n        } else if (chainId == 4) {\n            // Rinkeby\n            token = 0xc778417E063141139Fce010982780140Aa0cD5Ab;\n        } else if (chainId == 42) {\n            // Kovan\n            token = 0xd0A1E359811322d97991E03f863a0C30C2cF029C;\n        } else if (chainId == 56) {\n            // BSC \n            token = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\n        } else if (chainId == 137) {\n            // Polygon\n            token = 0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270;\n        } else if (chainId == 1337) {\n            // 0x Ganache\n            token = 0x0B1ba0af832d7C05fD64161E0Db78E85978E8082;\n        }\n        if (token == address(0)) {\n            revert(\"No native wrapped token\");\n        }\n        return IEtherTokenV06(token);\n    }\n\n    function _revertSingleSwapSample(\n        uint256 amount,\n        uint256 gasUsed\n    )\n        internal\n    {\n        // Revert it so there is no state change\n        assembly {\n            mstore(0, amount)\n            mstore(32, gasUsed)\n            revert(0, 64)\n        }\n    }\n\n    function _revertSwapSample(\n        uint256[] memory amounts,\n        uint256[] memory gasUsed\n    )\n        internal\n    {\n        bytes memory data = abi.encode(amounts, gasUsed);\n        // Revert it so there is no state change\n        assembly {\n            revert(add(data, 32), mload(data))\n        }\n    }\n\n    /// @dev Parses the reverted swap sample data. If no amount\n    ///      is decoded, 0 is returned.\n    /// @param reason the string which contains the possible\n    ///               sample amount\n    /// @return the decoded sample amount or 0\n    /// @return the gas used in the sample\n    function _parseRevertedSingleSwapSample(\n        bytes memory reason\n    )\n        internal\n        pure\n        returns (uint256, uint256)\n    {\n        if (reason.length != 64) {\n            return (0,0);\n        }\n        return abi.decode(reason, (uint256, uint256));\n    }\n\n    function _sampleSwapApproximateBuys(\n        SwapRevertSamplerBuyQuoteOpts memory opts,\n        uint256[] memory makerTokenAmounts\n    )\n        internal\n        returns (uint256[] memory gasUsed, uint256[] memory takerTokenAmounts)\n    {\n        if (makerTokenAmounts.length == 0) {\n            return (gasUsed, takerTokenAmounts);\n        }\n\n        takerTokenAmounts = new uint256[](makerTokenAmounts.length);\n        gasUsed = new uint256[](makerTokenAmounts.length);\n\n        uint256[] memory sellAmounts = new uint256[](1);\n        sellAmounts[0] = makerTokenAmounts[0];\n\n        SwapRevertSamplerQuoteOpts memory sellOpts = SwapRevertSamplerQuoteOpts({\n            sellToken: opts.sellToken,\n            buyToken: opts.buyToken,\n            bridgeData: opts.sellTokenData,\n            getSwapQuoteCallback: opts.getSwapQuoteCallback\n        });\n\n        SwapRevertSamplerQuoteOpts memory buyOpts = SwapRevertSamplerQuoteOpts({\n            sellToken: opts.buyToken,\n            buyToken: opts.sellToken,\n            bridgeData: opts.buyTokenData,\n            getSwapQuoteCallback: opts.getSwapQuoteCallback\n        });\n        // Inverted, perform a sell of the token the user wants to buy\n        (, sellAmounts) = _sampleSwapQuotesRevert(buyOpts, sellAmounts);\n        if (sellAmounts.length == 0 || sellAmounts[0] == 0) {\n            return (gasUsed, takerTokenAmounts);\n        }\n\n        uint256[] memory buyAmounts;\n        // Sell of the token the user wishes to dispose, see how much we buy\n        (, buyAmounts) = _sampleSwapQuotesRevert(sellOpts, sellAmounts);\n\n        if (buyAmounts.length == 0 || buyAmounts[0] == 0) {\n            return (gasUsed, takerTokenAmounts);\n        }\n\n        for (uint256 i = 0; i < makerTokenAmounts.length; i++) {\n            uint256[] memory _gasUsed;\n            for (uint256 iter = 0; iter < APPROXIMATE_BUY_MAX_ITERATIONS; iter++) {\n                // adjustedSellAmount = previousSellAmount * (target/actual) * JUMP_MULTIPLIER\n                sellAmounts[0] = _safeGetPartialAmountCeil(\n                    makerTokenAmounts[i],\n                    buyAmounts[0],\n                    sellAmounts[0]\n                );\n                if (sellAmounts.length == 0 || sellAmounts[0] == 0) {\n                    break;\n                }\n                sellAmounts[0] = _safeGetPartialAmountCeil(\n                    (ONE_HUNDED_PERCENT_BPS + APPROXIMATE_BUY_TARGET_EPSILON_BPS),\n                    ONE_HUNDED_PERCENT_BPS,\n                    sellAmounts[0]\n                );\n                if (sellAmounts.length == 0 || sellAmounts[0] == 0) {\n                    break;\n                }\n                uint256[] memory _buyAmounts;\n                (_gasUsed, _buyAmounts) = _sampleSwapQuotesRevert(sellOpts, sellAmounts);\n                if (_buyAmounts.length == 0 || _buyAmounts[0] == 0) {\n                    break;\n                }\n                // We re-use buyAmount next iteration, only assign if it is\n                // non zero\n                buyAmounts = _buyAmounts;\n                // If we've reached our goal, exit early\n                if (buyAmounts[0] >= makerTokenAmounts[i]) {\n                    uint256 eps =\n                        (buyAmounts[0] - makerTokenAmounts[i]) * ONE_HUNDED_PERCENT_BPS /\n                        makerTokenAmounts[i];\n                    if (eps <= APPROXIMATE_BUY_TARGET_EPSILON_BPS) {\n                        break;\n                    }\n                }\n            }\n            if (_gasUsed.length > 0 && buyAmounts.length > 0) {\n                gasUsed[i] = _gasUsed[0];\n                // We do our best to close in on the requested amount, but we can either over buy or under buy and exit\n                // if we hit a max iteration limit\n                // We scale the sell amount to get the approximate target\n                takerTokenAmounts[i] = _safeGetPartialAmountCeil(\n                    makerTokenAmounts[i],\n                    buyAmounts[0],\n                    sellAmounts[0]\n                );\n            }\n        }\n    }\n\n    function _safeGetPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        view\n        returns (uint256 partialAmount)\n    {\n        if (numerator == 0 || target == 0 || denominator == 0) return 0;\n        uint256 c = numerator * target;\n        if (c / numerator != target) return 0;\n        return (c + (denominator - 1)) / denominator;\n    }\n\n\n}"
        },
        "./GasOverhead.sol": {
            "id": 9,
            "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.6;\n\ncontract GasOverhead {\n    uint256 private _overhead = 2;\n    // Overhead incurred from updating the overhead storage slot\n    uint256 constant SSTORE_OVERHEAD = 20000;\n\n    function addOverhead(uint256 gas, uint256 gasBefore)\n        external\n    {\n        uint256 callOverhead = gasBefore - gasleft();\n        // Add additional est overhead of performing this update\n        _overhead += gas + callOverhead + SSTORE_OVERHEAD;\n    }\n\n    function clearOverhead()\n        external\n    {\n        _overhead = 2;\n    }\n\n    function overhead()\n        external\n        view\n        returns (uint256)\n    {\n        return _overhead;\n    }\n}\n"
        }
    },
    "sourceCodes": {
        "./UniswapSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinUniswap.sol\";\nimport \"./SwapRevertSampler.sol\";\n\ncontract UniswapSampler is\n    MixinUniswap,\n    SwapRevertSampler\n{\n\n    constructor(IEtherTokenV06 weth)\n        public\n        MixinUniswap(weth)\n    { }\n\n    function sampleSwapFromUniswap(\n        address sellToken,\n        address buyToken,\n        bytes memory bridgeData,\n        uint256 takerTokenAmount\n    )\n        external\n        returns (uint256)\n    {\n        return _tradeUniswapInternal(\n            _getNativeWrappedToken(),\n            IERC20TokenV06(sellToken),\n            IERC20TokenV06(buyToken),\n            takerTokenAmount,\n            bridgeData\n        );\n    }\n\n    /// @dev Sample sell quotes from Uniswap.\n    /// @param router Address of the Uniswap Router\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return gasUsed gas consumed in each sample sell\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromUniswap(\n        address router,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        returns (uint256[] memory gasUsed, uint256[] memory makerTokenAmounts)\n    {\n        (gasUsed, makerTokenAmounts) = _sampleSwapQuotesRevert(\n            SwapRevertSamplerQuoteOpts({\n                sellToken: takerToken,\n                buyToken: makerToken,\n                bridgeData: abi.encode(router),\n                getSwapQuoteCallback: this.sampleSwapFromUniswap\n            }),\n            takerTokenAmounts\n        );\n    }\n\n    /// @dev Sample buy quotes from Uniswap.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token sell amount for each sample.\n    /// @return gasUsed gas consumed in each sample sell\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromUniswap(\n        address router,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        returns (uint256[] memory gasUsed, uint256[] memory takerTokenAmounts)\n    {\n        (gasUsed, takerTokenAmounts) = _sampleSwapApproximateBuys(\n            SwapRevertSamplerBuyQuoteOpts({\n                sellToken: takerToken,\n                buyToken: makerToken,\n                sellTokenData: abi.encode(router),\n                buyTokenData: abi.encode(router),\n                getSwapQuoteCallback: this.sampleSwapFromUniswap\n            }),\n            makerTokenAmounts\n        );\n    }\n\n}\n",
        "@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinUniswap.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol\";\nimport \"../IBridgeAdapter.sol\";\n\ninterface IUniswapExchangeFactory {\n\n    /// @dev Get the exchange for a token.\n    /// @param token The token contract.\n    function getExchange(IERC20TokenV06 token)\n        external\n        view\n        returns (IUniswapExchange exchange);\n}\n\ninterface IUniswapExchange {\n\n    /// @dev Buys at least `minTokensBought` tokens with ETH and transfer them\n    ///      to `recipient`.\n    /// @param minTokensBought The minimum number of tokens to buy.\n    /// @param deadline Time when this order expires.\n    /// @param recipient Who to transfer the tokens to.\n    /// @return tokensBought Amount of tokens bought.\n    function ethToTokenTransferInput(\n        uint256 minTokensBought,\n        uint256 deadline,\n        address recipient\n    )\n        external\n        payable\n        returns (uint256 tokensBought);\n\n    /// @dev Buys at least `minEthBought` ETH with tokens.\n    /// @param tokensSold Amount of tokens to sell.\n    /// @param minEthBought The minimum amount of ETH to buy.\n    /// @param deadline Time when this order expires.\n    /// @return ethBought Amount of tokens bought.\n    function tokenToEthSwapInput(\n        uint256 tokensSold,\n        uint256 minEthBought,\n        uint256 deadline\n    )\n        external\n        returns (uint256 ethBought);\n\n    /// @dev Buys at least `minTokensBought` tokens with the exchange token\n    ///      and transfer them to `recipient`.\n    /// @param tokensSold Amount of tokens to sell.\n    /// @param minTokensBought The minimum number of tokens to buy.\n    /// @param minEthBought The minimum amount of intermediate ETH to buy.\n    /// @param deadline Time when this order expires.\n    /// @param recipient Who to transfer the tokens to.\n    /// @param buyToken The token being bought.\n    /// @return tokensBought Amount of tokens bought.\n    function tokenToTokenTransferInput(\n        uint256 tokensSold,\n        uint256 minTokensBought,\n        uint256 minEthBought,\n        uint256 deadline,\n        address recipient,\n        IERC20TokenV06 buyToken\n    )\n        external\n        returns (uint256 tokensBought);\n\n    /// @dev Buys at least `minTokensBought` tokens with the exchange token.\n    /// @param tokensSold Amount of tokens to sell.\n    /// @param minTokensBought The minimum number of tokens to buy.\n    /// @param minEthBought The minimum amount of intermediate ETH to buy.\n    /// @param deadline Time when this order expires.\n    /// @param buyToken The token being bought.\n    /// @return tokensBought Amount of tokens bought.\n    function tokenToTokenSwapInput(\n        uint256 tokensSold,\n        uint256 minTokensBought,\n        uint256 minEthBought,\n        uint256 deadline,\n        IERC20TokenV06 buyToken\n    )\n        external\n        returns (uint256 tokensBought);\n}\n\ncontract MixinUniswap {\n\n    using LibERC20TokenV06 for IERC20TokenV06;\n\n    /// @dev Mainnet address of the WETH contract.\n    IEtherTokenV06 private immutable WETH;\n\n    constructor(IEtherTokenV06 weth)\n        public\n    {\n        WETH = weth;\n    }\n\n    function _tradeUniswap(\n        IERC20TokenV06 sellToken,\n        IERC20TokenV06 buyToken,\n        uint256 sellAmount,\n        bytes memory bridgeData\n    )\n        internal\n        returns (uint256 boughtAmount)\n    {\n        return _tradeUniswapInternal(WETH, sellToken, buyToken, sellAmount, bridgeData);\n    }\n\n    function _tradeUniswapInternal(\n        IEtherTokenV06 weth,\n        IERC20TokenV06 sellToken,\n        IERC20TokenV06 buyToken,\n        uint256 sellAmount,\n        bytes memory bridgeData\n    )\n        internal\n        returns (uint256 boughtAmount)\n    {\n        IUniswapExchangeFactory exchangeFactory =\n            abi.decode(bridgeData, (IUniswapExchangeFactory));\n\n        // Get the exchange for the token pair.\n        IUniswapExchange exchange = _getUniswapExchangeForTokenPair(\n            weth,\n            exchangeFactory,\n            sellToken,\n            buyToken\n        );\n\n        // Convert from WETH to a token.\n        if (sellToken == weth) {\n            // Unwrap the WETH.\n            weth.withdraw(sellAmount);\n            // Buy as much of `buyToken` token with ETH as possible\n            boughtAmount = exchange.ethToTokenTransferInput{ value: sellAmount }(\n                // Minimum buy amount.\n                1,\n                // Expires after this block.\n                block.timestamp,\n                // Recipient is `this`.\n                address(this)\n            );\n\n        // Convert from a token to WETH.\n        } else if (buyToken == weth) {\n            // Grant the exchange an allowance.\n            sellToken.approveIfBelow(\n                address(exchange),\n                sellAmount\n            );\n            // Buy as much ETH with `sellToken` token as possible.\n            boughtAmount = exchange.tokenToEthSwapInput(\n                // Sell all tokens we hold.\n                sellAmount,\n                // Minimum buy amount.\n                1,\n                // Expires after this block.\n                block.timestamp\n            );\n            // Wrap the ETH.\n            weth.deposit{ value: boughtAmount }();\n        // Convert from one token to another.\n        } else {\n            // Grant the exchange an allowance.\n            sellToken.approveIfBelow(\n                address(exchange),\n                sellAmount\n            );\n            // Buy as much `buyToken` token with `sellToken` token\n            boughtAmount = exchange.tokenToTokenSwapInput(\n                // Sell all tokens we hold.\n                sellAmount,\n                // Minimum buy amount.\n                1,\n                // Must buy at least 1 intermediate wei of ETH.\n                1,\n                // Expires after this block.\n                block.timestamp,\n                // Convert to `buyToken`.\n                buyToken\n            );\n        }\n\n        return boughtAmount;\n    }\n\n    /// @dev Retrieves the uniswap exchange for a given token pair.\n    ///      In the case of a WETH-token exchange, this will be the non-WETH token.\n    ///      In th ecase of a token-token exchange, this will be the first token.\n    /// @param exchangeFactory The exchange factory.\n    /// @param sellToken The address of the token we are converting from.\n    /// @param buyToken The address of the token we are converting to.\n    /// @return exchange The uniswap exchange.\n    function _getUniswapExchangeForTokenPair(\n        IEtherTokenV06 weth,\n        IUniswapExchangeFactory exchangeFactory,\n        IERC20TokenV06 sellToken,\n        IERC20TokenV06 buyToken\n    )\n        private\n        view\n        returns (IUniswapExchange exchange)\n    {\n        // Whichever isn't WETH is the exchange token.\n        exchange = sellToken == weth\n            ? exchangeFactory.getExchange(buyToken)\n            : exchangeFactory.getExchange(sellToken);\n        require(address(exchange) != address(0), \"MixinUniswap/NO_EXCHANGE\");\n    }\n}\n",
        "@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol\";\nimport \"./IERC20TokenV06.sol\";\n\n\nlibrary LibERC20TokenV06 {\n    bytes constant private DECIMALS_CALL_DATA = hex\"313ce567\";\n\n    /// @dev Calls `IERC20TokenV06(token).approve()`.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param spender The address that receives an allowance.\n    /// @param allowance The allowance to set.\n    function compatApprove(\n        IERC20TokenV06 token,\n        address spender,\n        uint256 allowance\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.approve.selector,\n            spender,\n            allowance\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).approve()` and sets the allowance to the\n    ///      maximum if the current approval is not already >= an amount.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param spender The address that receives an allowance.\n    /// @param amount The minimum allowance needed.\n    function approveIfBelow(\n        IERC20TokenV06 token,\n        address spender,\n        uint256 amount\n    )\n        internal\n    {\n        if (token.allowance(address(this), spender) < amount) {\n            compatApprove(token, spender, uint256(-1));\n        }\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).transfer()`.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param to The address that receives the tokens\n    /// @param amount Number of tokens to transfer.\n    function compatTransfer(\n        IERC20TokenV06 token,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.transfer.selector,\n            to,\n            amount\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).transferFrom()`.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param from The owner of the tokens.\n    /// @param to The address that receives the tokens\n    /// @param amount Number of tokens to transfer.\n    function compatTransferFrom(\n        IERC20TokenV06 token,\n        address from,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.transferFrom.selector,\n            from,\n            to,\n            amount\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Retrieves the number of decimals for a token.\n    ///      Returns `18` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @return tokenDecimals The number of decimals places for the token.\n    function compatDecimals(IERC20TokenV06 token)\n        internal\n        view\n        returns (uint8 tokenDecimals)\n    {\n        tokenDecimals = 18;\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(DECIMALS_CALL_DATA);\n        if (didSucceed && resultData.length >= 32) {\n            tokenDecimals = uint8(LibBytesV06.readUint256(resultData, 0));\n        }\n    }\n\n    /// @dev Retrieves the allowance for a token, owner, and spender.\n    ///      Returns `0` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @param owner The owner of the tokens.\n    /// @param spender The address the spender.\n    /// @return allowance_ The allowance for a token, owner, and spender.\n    function compatAllowance(IERC20TokenV06 token, address owner, address spender)\n        internal\n        view\n        returns (uint256 allowance_)\n    {\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(\n            abi.encodeWithSelector(\n                token.allowance.selector,\n                owner,\n                spender\n            )\n        );\n        if (didSucceed && resultData.length >= 32) {\n            allowance_ = LibBytesV06.readUint256(resultData, 0);\n        }\n    }\n\n    /// @dev Retrieves the balance for a token owner.\n    ///      Returns `0` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @param owner The owner of the tokens.\n    /// @return balance The token balance of an owner.\n    function compatBalanceOf(IERC20TokenV06 token, address owner)\n        internal\n        view\n        returns (uint256 balance)\n    {\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(\n            abi.encodeWithSelector(\n                token.balanceOf.selector,\n                owner\n            )\n        );\n        if (didSucceed && resultData.length >= 32) {\n            balance = LibBytesV06.readUint256(resultData, 0);\n        }\n    }\n\n    /// @dev Check if the data returned by a non-static call to an ERC20 token\n    ///      is a successful result. Supported functions are `transfer()`,\n    ///      `transferFrom()`, and `approve()`.\n    /// @param resultData The raw data returned by a non-static call to the ERC20 token.\n    /// @return isSuccessful Whether the result data indicates success.\n    function isSuccessfulResult(bytes memory resultData)\n        internal\n        pure\n        returns (bool isSuccessful)\n    {\n        if (resultData.length == 0) {\n            return true;\n        }\n        if (resultData.length >= 32) {\n            uint256 result = LibBytesV06.readUint256(resultData, 0);\n            if (result == 1) {\n                return true;\n            }\n        }\n    }\n\n    /// @dev Executes a call on address `target` with calldata `callData`\n    ///      and asserts that either nothing was returned or a single boolean\n    ///      was returned equal to `true`.\n    /// @param target The call target.\n    /// @param callData The abi-encoded call data.\n    function _callWithOptionalBooleanResult(\n        address target,\n        bytes memory callData\n    )\n        private\n    {\n        (bool didSucceed, bytes memory resultData) = target.call(callData);\n        if (didSucceed && isSuccessfulResult(resultData)) {\n            return;\n        }\n        LibRichErrorsV06.rrevert(resultData);\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibRichErrorsV06 {\n\n    // bytes4(keccak256(\"Error(string)\"))\n    bytes4 internal constant STANDARD_ERROR_SELECTOR = 0x08c379a0;\n\n    // solhint-disable func-name-mixedcase\n    /// @dev ABI encode a standard, string revert error payload.\n    ///      This is the same payload that would be included by a `revert(string)`\n    ///      solidity statement. It has the function signature `Error(string)`.\n    /// @param message The error string.\n    /// @return The ABI encoded error.\n    function StandardError(string memory message)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            STANDARD_ERROR_SELECTOR,\n            bytes(message)\n        );\n    }\n    // solhint-enable func-name-mixedcase\n\n    /// @dev Reverts an encoded rich revert reason `errorData`.\n    /// @param errorData ABI encoded error data.\n    function rrevert(bytes memory errorData)\n        internal\n        pure\n    {\n        assembly {\n            revert(add(errorData, 0x20), mload(errorData))\n        }\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./errors/LibBytesRichErrorsV06.sol\";\nimport \"./errors/LibRichErrorsV06.sol\";\n\n\nlibrary LibBytesV06 {\n\n    using LibBytesV06 for bytes;\n\n    /// @dev Gets the memory address for a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of byte array. This\n    ///         points to the header of the byte array which contains\n    ///         the length.\n    function rawAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := input\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Gets the memory address for the contents of a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of the contents of the byte array.\n    function contentAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := add(input, 32)\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Copies `length` bytes from memory location `source` to `dest`.\n    /// @param dest memory address to copy bytes to.\n    /// @param source memory address to copy bytes from.\n    /// @param length number of bytes to copy.\n    function memCopy(\n        uint256 dest,\n        uint256 source,\n        uint256 length\n    )\n        internal\n        pure\n    {\n        if (length < 32) {\n            // Handle a partial word by reading destination and masking\n            // off the bits we are interested in.\n            // This correctly handles overlap, zero lengths and source == dest\n            assembly {\n                let mask := sub(exp(256, sub(32, length)), 1)\n                let s := and(mload(source), not(mask))\n                let d := and(mload(dest), mask)\n                mstore(dest, or(s, d))\n            }\n        } else {\n            // Skip the O(length) loop when source == dest.\n            if (source == dest) {\n                return;\n            }\n\n            // For large copies we copy whole words at a time. The final\n            // word is aligned to the end of the range (instead of after the\n            // previous) to handle partial words. So a copy will look like this:\n            //\n            //  ####\n            //      ####\n            //          ####\n            //            ####\n            //\n            // We handle overlap in the source and destination range by\n            // changing the copying direction. This prevents us from\n            // overwriting parts of source that we still need to copy.\n            //\n            // This correctly handles source == dest\n            //\n            if (source > dest) {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because it\n                    // is easier to compare with in the loop, and these\n                    // are also the addresses we need for copying the\n                    // last bytes.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the last 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the last bytes in\n                    // source already due to overlap.\n                    let last := mload(sEnd)\n\n                    // Copy whole words front to back\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} lt(source, sEnd) {} {\n                        mstore(dest, mload(source))\n                        source := add(source, 32)\n                        dest := add(dest, 32)\n                    }\n\n                    // Write the last 32 bytes\n                    mstore(dEnd, last)\n                }\n            } else {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because those\n                    // are the starting points when copying a word at the end.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the first 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the first bytes in\n                    // source already due to overlap.\n                    let first := mload(source)\n\n                    // Copy whole words back to front\n                    // We use a signed comparisson here to allow dEnd to become\n                    // negative (happens when source and dest < 32). Valid\n                    // addresses in local memory will never be larger than\n                    // 2**255, so they can be safely re-interpreted as signed.\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} slt(dest, dEnd) {} {\n                        mstore(dEnd, mload(sEnd))\n                        sEnd := sub(sEnd, 32)\n                        dEnd := sub(dEnd, 32)\n                    }\n\n                    // Write the first 32 bytes\n                    mstore(dest, first)\n                }\n            }\n        }\n    }\n\n    /// @dev Returns a slices from a byte array.\n    /// @param b The byte array to take a slice from.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function slice(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure and copy contents\n        result = new bytes(to - from);\n        memCopy(\n            result.contentAddress(),\n            b.contentAddress() + from,\n            result.length\n        );\n        return result;\n    }\n\n    /// @dev Returns a slice from a byte array without preserving the input.\n    ///      When `from == 0`, the original array will match the slice.\n    ///      In other cases its state will be corrupted.\n    /// @param b The byte array to take a slice from. Will be destroyed in the process.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function sliceDestructive(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure around [from, to) in-place.\n        assembly {\n            result := add(b, from)\n            mstore(result, sub(to, from))\n        }\n        return result;\n    }\n\n    /// @dev Pops the last byte off of a byte array by modifying its length.\n    /// @param b Byte array that will be modified.\n    /// @return result The byte that was popped off.\n    function popLastByte(bytes memory b)\n        internal\n        pure\n        returns (bytes1 result)\n    {\n        if (b.length == 0) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanZeroRequired,\n                b.length,\n                0\n            ));\n        }\n\n        // Store last byte.\n        result = b[b.length - 1];\n\n        assembly {\n            // Decrement length of byte array.\n            let newLen := sub(mload(b), 1)\n            mstore(b, newLen)\n        }\n        return result;\n    }\n\n    /// @dev Tests equality of two byte arrays.\n    /// @param lhs First byte array to compare.\n    /// @param rhs Second byte array to compare.\n    /// @return equal True if arrays are the same. False otherwise.\n    function equals(\n        bytes memory lhs,\n        bytes memory rhs\n    )\n        internal\n        pure\n        returns (bool equal)\n    {\n        // Keccak gas cost is 30 + numWords * 6. This is a cheap way to compare.\n        // We early exit on unequal lengths, but keccak would also correctly\n        // handle this.\n        return lhs.length == rhs.length && keccak256(lhs) == keccak256(rhs);\n    }\n\n    /// @dev Reads an address from a position in a byte array.\n    /// @param b Byte array containing an address.\n    /// @param index Index in byte array of address.\n    /// @return result address from byte array.\n    function readAddress(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (address result)\n    {\n        if (b.length < index + 20) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Read address from array memory\n        assembly {\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 20-byte mask to obtain address\n            result := and(mload(add(b, index)), 0xffffffffffffffffffffffffffffffffffffffff)\n        }\n        return result;\n    }\n\n    /// @dev Writes an address into a specific position in a byte array.\n    /// @param b Byte array to insert address into.\n    /// @param index Index in byte array of address.\n    /// @param input Address to put into byte array.\n    function writeAddress(\n        bytes memory b,\n        uint256 index,\n        address input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 20) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Store address into array memory\n        assembly {\n            // The address occupies 20 bytes and mstore stores 32 bytes.\n            // First fetch the 32-byte word where we'll be storing the address, then\n            // apply a mask so we have only the bytes in the word that the address will not occupy.\n            // Then combine these bytes with the address and store the 32 bytes back to memory with mstore.\n\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 12-byte mask to obtain extra bytes occupying word of memory where we'll store the address\n            let neighbors := and(\n                mload(add(b, index)),\n                0xffffffffffffffffffffffff0000000000000000000000000000000000000000\n            )\n\n            // Make sure input address is clean.\n            // (Solidity does not guarantee this)\n            input := and(input, 0xffffffffffffffffffffffffffffffffffffffff)\n\n            // Store the neighbors and address into memory\n            mstore(add(b, index), xor(input, neighbors))\n        }\n    }\n\n    /// @dev Reads a bytes32 value from a position in a byte array.\n    /// @param b Byte array containing a bytes32 value.\n    /// @param index Index in byte array of bytes32 value.\n    /// @return result bytes32 value from byte array.\n    function readBytes32(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        if (b.length < index + 32) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            result := mload(add(b, index))\n        }\n        return result;\n    }\n\n    /// @dev Writes a bytes32 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input bytes32 to put into byte array.\n    function writeBytes32(\n        bytes memory b,\n        uint256 index,\n        bytes32 input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 32) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            mstore(add(b, index), input)\n        }\n    }\n\n    /// @dev Reads a uint256 value from a position in a byte array.\n    /// @param b Byte array containing a uint256 value.\n    /// @param index Index in byte array of uint256 value.\n    /// @return result uint256 value from byte array.\n    function readUint256(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (uint256 result)\n    {\n        result = uint256(readBytes32(b, index));\n        return result;\n    }\n\n    /// @dev Writes a uint256 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input uint256 to put into byte array.\n    function writeUint256(\n        bytes memory b,\n        uint256 index,\n        uint256 input\n    )\n        internal\n        pure\n    {\n        writeBytes32(b, index, bytes32(input));\n    }\n\n    /// @dev Reads an unpadded bytes4 value from a position in a byte array.\n    /// @param b Byte array containing a bytes4 value.\n    /// @param index Index in byte array of bytes4 value.\n    /// @return result bytes4 value from byte array.\n    function readBytes4(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes4 result)\n    {\n        if (b.length < index + 4) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsFourRequired,\n                b.length,\n                index + 4\n            ));\n        }\n\n        // Arrays are prefixed by a 32 byte length field\n        index += 32;\n\n        // Read the bytes4 from array memory\n        assembly {\n            result := mload(add(b, index))\n            // Solidity does not require us to clean the trailing bytes.\n            // We do it anyway\n            result := and(result, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)\n        }\n        return result;\n    }\n\n    /// @dev Writes a new length to a byte array.\n    ///      Decreasing length will lead to removing the corresponding lower order bytes from the byte array.\n    ///      Increasing length may lead to appending adjacent in-memory bytes to the end of the byte array.\n    /// @param b Bytes array to write new length to.\n    /// @param length New length of byte array.\n    function writeLength(bytes memory b, uint256 length)\n        internal\n        pure\n    {\n        assembly {\n            mstore(b, length)\n        }\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/errors/LibBytesRichErrorsV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibBytesRichErrorsV06 {\n\n    enum InvalidByteOperationErrorCodes {\n        FromLessThanOrEqualsToRequired,\n        ToLessThanOrEqualsLengthRequired,\n        LengthGreaterThanZeroRequired,\n        LengthGreaterThanOrEqualsFourRequired,\n        LengthGreaterThanOrEqualsTwentyRequired,\n        LengthGreaterThanOrEqualsThirtyTwoRequired,\n        LengthGreaterThanOrEqualsNestedBytesLengthRequired,\n        DestinationLengthGreaterThanOrEqualSourceLengthRequired\n    }\n\n    // bytes4(keccak256(\"InvalidByteOperationError(uint8,uint256,uint256)\"))\n    bytes4 internal constant INVALID_BYTE_OPERATION_ERROR_SELECTOR =\n        0x28006595;\n\n    // solhint-disable func-name-mixedcase\n    function InvalidByteOperationError(\n        InvalidByteOperationErrorCodes errorCode,\n        uint256 offset,\n        uint256 required\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            INVALID_BYTE_OPERATION_ERROR_SELECTOR,\n            errorCode,\n            offset,\n            required\n        );\n    }\n}\n",
        "@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\ninterface IERC20TokenV06 {\n\n    // solhint-disable no-simple-event-func-name\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 value\n    );\n\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n\n    /// @dev send `value` token to `to` from `msg.sender`\n    /// @param to The address of the recipient\n    /// @param value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transfer(address to, uint256 value)\n        external\n        returns (bool);\n\n    /// @dev send `value` token to `to` from `from` on the condition it is approved by `from`\n    /// @param from The address of the sender\n    /// @param to The address of the recipient\n    /// @param value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    )\n        external\n        returns (bool);\n\n    /// @dev `msg.sender` approves `spender` to spend `value` tokens\n    /// @param spender The address of the account able to transfer the tokens\n    /// @param value The amount of wei to be approved for transfer\n    /// @return Always true if the call has enough gas to complete execution\n    function approve(address spender, uint256 value)\n        external\n        returns (bool);\n\n    /// @dev Query total supply of token\n    /// @return Total supply of token\n    function totalSupply()\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the balance of `owner`.\n    /// @param owner The address from which the balance will be retrieved\n    /// @return Balance of owner\n    function balanceOf(address owner)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the allowance for `spender` to spend from `owner`.\n    /// @param owner The address of the account owning tokens\n    /// @param spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the number of decimals this token has.\n    function decimals()\n        external\n        view\n        returns (uint8);\n}\n",
        "@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./IERC20TokenV06.sol\";\n\n\ninterface IEtherTokenV06 is\n    IERC20TokenV06\n{\n    /// @dev Wrap ether.\n    function deposit() external payable;\n\n    /// @dev Unwrap ether.\n    function withdraw(uint256 amount) external;\n}\n",
        "@0x/contracts-zero-ex/contracts/src/transformers/bridges/IBridgeAdapter.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\n\n\ninterface IBridgeAdapter {\n\n    struct BridgeOrder {\n        // Upper 16 bytes: uint128 protocol ID (right-aligned)\n        // Lower 16 bytes: ASCII source name (left-aligned)\n        bytes32 source;\n        uint256 takerTokenAmount;\n        uint256 makerTokenAmount;\n        bytes bridgeData;\n    }\n\n    /// @dev Emitted when tokens are swapped with an external source.\n    /// @param source A unique ID for the source, where the upper 16 bytes\n    ///        encodes the (right-aligned) uint128 protocol ID and the\n    ///        lower 16 bytes encodes an ASCII source name.\n    /// @param inputToken The token the bridge is converting from.\n    /// @param outputToken The token the bridge is converting to.\n    /// @param inputTokenAmount Amount of input token sold.\n    /// @param outputTokenAmount Amount of output token bought.\n    event BridgeFill(\n        bytes32 source,\n        IERC20TokenV06 inputToken,\n        IERC20TokenV06 outputToken,\n        uint256 inputTokenAmount,\n        uint256 outputTokenAmount\n    );\n\n    function trade(\n        BridgeOrder calldata order,\n        IERC20TokenV06 sellToken,\n        IERC20TokenV06 buyToken,\n        uint256 sellAmount\n    )\n        external\n        returns (uint256 boughtAmount);\n}\n",
        "./SwapRevertSampler.sol": "\n\n// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./GasOverhead.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\n\ninterface IHackedERC20 {\n    function _setBalance(address owner, uint256 amount) external;\n    function _setEnabled(bool enabled) external;\n}\n\ncontract SwapRevertSampler {\n    using LibRichErrorsV06 for bytes;\n\n    /// @dev Fixed address to register and read Gas overhead introduced by Swap revert sampling\n    GasOverhead private constant GAS_OVERHEAD = GasOverhead(0xDeF1000000000000000000000000000000001337);\n    /// @dev Maximum approximate (positive) error rate when approximating a buy quote.\n    uint256 private constant APPROXIMATE_BUY_TARGET_EPSILON_BPS = 0.0005e4;\n    /// @dev Maximum iterations to perform when approximating a buy quote.\n    uint256 private constant APPROXIMATE_BUY_MAX_ITERATIONS = 3;\n    uint256 private constant ONE_HUNDED_PERCENT_BPS = 1e4;\n    /// @dev Upper limit of gas to give to a single Swap call\n    uint256 private constant CALL_STIPEND = 2e6;\n\n\n    // solhint-disable no-empty-blocks\n    /// @dev Payable fallback to receive ETH from Kyber/WETH.\n    receive ()\n        external\n        payable\n    { }\n\n    struct SwapRevertSamplerQuoteOpts {\n        // Address of the token which is being sold\n        address sellToken;\n        // Address of the token which is wanted\n        address buyToken;\n        // Data required for the bridge to execute the swap\n        bytes bridgeData;\n        // Callback to retrieve a swap quote.\n        function (address sellToken, address buyToken, bytes memory bridgeData, uint256 sellAmount)\n            external\n            returns (uint256)\n            getSwapQuoteCallback;\n    }\n\n    struct SwapRevertSamplerBuyQuoteOpts {\n        // Address of the token which is being sold\n        address sellToken;\n        // Address of the token which is wanted\n        address buyToken;\n        // Data required for the bridge to execute the SELL_TOKEN->BUY_TOKEN swap\n        bytes sellTokenData;\n        // Data required for the bridge to execute the BUY_TOKEN->SELL_TOKEN swap\n        bytes buyTokenData;\n        // Callback to retrieve a swap quote.\n        function (address sellToken, address buyToken, bytes memory bridgeData, uint256 sellAmount)\n            external\n            returns (uint256)\n            getSwapQuoteCallback;\n    }\n\n    function _callRevert(\n        bytes4 selector,\n        address sellToken,\n        address buyToken,\n        bytes memory bridgeData,\n        uint256 amountIn\n    )\n        external\n    {\n        // Clear any registered overhead\n        try\n            GAS_OVERHEAD.clearOverhead()\n        { } catch { }\n        // Measure the gas\n        uint256 gasUsed = gasleft();\n        // Perform the sell\n        (bool success, bytes memory data) = address(this).call(\n            abi.encodeWithSelector(selector, sellToken, buyToken, bridgeData, amountIn)\n        );\n        gasUsed = gasUsed - gasleft();\n        // Remove any registered gas overhead\n        try\n            GAS_OVERHEAD.overhead()\n            returns (uint256 gasOverhead)\n        {\n            gasUsed = gasUsed - gasOverhead;\n        } catch { }\n\n        if (!success) {\n            data.rrevert();\n        }\n        // Revert with the amount bought\n        _revertSingleSwapSample(abi.decode(data, (uint256)), gasUsed);\n    }\n\n    /// @dev  Mints the sell token, then performs the swap, then reverts with the amount out.\n    /// The SwapRevertSamplerQuoteOpts has been unrolled here as our ABI encoder cannot support\n    /// encoding the function\n    function _mintCallRevert(\n        bytes4 selector,\n        address sellToken,\n        address buyToken,\n        bytes memory bridgeData,\n        uint256[] memory amountsIn\n    )\n        external\n    {\n        // We assume the amounts are ascending and that\n        // the underlying call can handle selling a specific amount\n        uint256 amountIn = amountsIn[amountsIn.length - 1];\n\n        if (sellToken == address(_getNativeWrappedToken())) {\n            try\n                IEtherTokenV06(payable(sellToken)).deposit{ value: amountIn }()\n            { } catch { }\n        } else {\n            IHackedERC20 hackedSellToken = IHackedERC20(payable(sellToken));\n            // Enable sell token to be tracked and shadowed\n            try\n                hackedSellToken._setEnabled(true)\n            { } catch { }\n\n            // Mint enough to sell\n            try\n                hackedSellToken._setBalance(address(this), amountIn)\n            { } catch { }\n        }\n\n        // Burn any excess ETH to avoid balance issues for sources which use ETH directly\n        address(0).transfer(address(this).balance);\n\n        uint256[] memory amountsOut = new uint256[](amountsIn.length);\n        uint256[] memory gasUsed = new uint256[](amountsIn.length);\n\n        for (uint256 i = 0; i < amountsIn.length; i++) {\n            try\n                this._callRevert{gas: CALL_STIPEND}(\n                    selector,\n                    sellToken,\n                    buyToken,\n                    bridgeData,\n                    amountsIn[i]\n                )\n            {\n                require(false, \"Swap Sample should have reverted\");\n            } catch (bytes memory reason) {\n                // Parse the reverted sample data\n                (amountsOut[i], gasUsed[i]) = _parseRevertedSingleSwapSample(reason);\n                // If we detect the amount out is 0 then we return early\n                // rather than continue performing excess work\n\n                // Some sources (Balancer) display issues, especially with small amounts\n                // Where the amountsOut can range, e.g 448,0,0,0,2476,3048,0,4279,4941,0,0,7133,\n\n                if (amountsOut[i] == 0) {\n                    break;\n                }\n            }\n        }\n        // Revert the entire sampling\n        _revertSwapSample(amountsOut, gasUsed);\n    }\n\n    function _sampleSwapQuotesRevert(\n        SwapRevertSamplerQuoteOpts memory opts,\n        uint256[] memory amountsIn\n    )\n        internal\n        returns (uint256[] memory gasUsed, uint256[] memory amountsOut)\n    {\n        try\n            this._mintCallRevert(\n                opts.getSwapQuoteCallback.selector,\n                opts.sellToken,\n                opts.buyToken,\n                opts.bridgeData,\n                amountsIn\n            )\n        {\n            require(false, \"Swap Sample should have reverted\");\n        } catch (bytes memory reason) {\n            // Parse the reverted sample datas\n            (amountsOut, gasUsed) = abi.decode(reason, (uint256[], uint256[]));\n        }\n    }\n\n    function _getNativeWrappedToken()\n        internal\n        view\n        returns (IEtherTokenV06)\n    {\n        uint256 chainId;\n        assembly {\n            chainId := chainid()\n        }\n        address token;\n        if (chainId == 1) {\n            // Ethereum Mainnet\n            token = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n        } else if (chainId == 3) {\n            // Ropsten\n            token = 0xc778417E063141139Fce010982780140Aa0cD5Ab;\n        } else if (chainId == 4) {\n            // Rinkeby\n            token = 0xc778417E063141139Fce010982780140Aa0cD5Ab;\n        } else if (chainId == 42) {\n            // Kovan\n            token = 0xd0A1E359811322d97991E03f863a0C30C2cF029C;\n        } else if (chainId == 56) {\n            // BSC \n            token = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\n        } else if (chainId == 137) {\n            // Polygon\n            token = 0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270;\n        } else if (chainId == 1337) {\n            // 0x Ganache\n            token = 0x0B1ba0af832d7C05fD64161E0Db78E85978E8082;\n        }\n        if (token == address(0)) {\n            revert(\"No native wrapped token\");\n        }\n        return IEtherTokenV06(token);\n    }\n\n    function _revertSingleSwapSample(\n        uint256 amount,\n        uint256 gasUsed\n    )\n        internal\n    {\n        // Revert it so there is no state change\n        assembly {\n            mstore(0, amount)\n            mstore(32, gasUsed)\n            revert(0, 64)\n        }\n    }\n\n    function _revertSwapSample(\n        uint256[] memory amounts,\n        uint256[] memory gasUsed\n    )\n        internal\n    {\n        bytes memory data = abi.encode(amounts, gasUsed);\n        // Revert it so there is no state change\n        assembly {\n            revert(add(data, 32), mload(data))\n        }\n    }\n\n    /// @dev Parses the reverted swap sample data. If no amount\n    ///      is decoded, 0 is returned.\n    /// @param reason the string which contains the possible\n    ///               sample amount\n    /// @return the decoded sample amount or 0\n    /// @return the gas used in the sample\n    function _parseRevertedSingleSwapSample(\n        bytes memory reason\n    )\n        internal\n        pure\n        returns (uint256, uint256)\n    {\n        if (reason.length != 64) {\n            return (0,0);\n        }\n        return abi.decode(reason, (uint256, uint256));\n    }\n\n    function _sampleSwapApproximateBuys(\n        SwapRevertSamplerBuyQuoteOpts memory opts,\n        uint256[] memory makerTokenAmounts\n    )\n        internal\n        returns (uint256[] memory gasUsed, uint256[] memory takerTokenAmounts)\n    {\n        if (makerTokenAmounts.length == 0) {\n            return (gasUsed, takerTokenAmounts);\n        }\n\n        takerTokenAmounts = new uint256[](makerTokenAmounts.length);\n        gasUsed = new uint256[](makerTokenAmounts.length);\n\n        uint256[] memory sellAmounts = new uint256[](1);\n        sellAmounts[0] = makerTokenAmounts[0];\n\n        SwapRevertSamplerQuoteOpts memory sellOpts = SwapRevertSamplerQuoteOpts({\n            sellToken: opts.sellToken,\n            buyToken: opts.buyToken,\n            bridgeData: opts.sellTokenData,\n            getSwapQuoteCallback: opts.getSwapQuoteCallback\n        });\n\n        SwapRevertSamplerQuoteOpts memory buyOpts = SwapRevertSamplerQuoteOpts({\n            sellToken: opts.buyToken,\n            buyToken: opts.sellToken,\n            bridgeData: opts.buyTokenData,\n            getSwapQuoteCallback: opts.getSwapQuoteCallback\n        });\n        // Inverted, perform a sell of the token the user wants to buy\n        (, sellAmounts) = _sampleSwapQuotesRevert(buyOpts, sellAmounts);\n        if (sellAmounts.length == 0 || sellAmounts[0] == 0) {\n            return (gasUsed, takerTokenAmounts);\n        }\n\n        uint256[] memory buyAmounts;\n        // Sell of the token the user wishes to dispose, see how much we buy\n        (, buyAmounts) = _sampleSwapQuotesRevert(sellOpts, sellAmounts);\n\n        if (buyAmounts.length == 0 || buyAmounts[0] == 0) {\n            return (gasUsed, takerTokenAmounts);\n        }\n\n        for (uint256 i = 0; i < makerTokenAmounts.length; i++) {\n            uint256[] memory _gasUsed;\n            for (uint256 iter = 0; iter < APPROXIMATE_BUY_MAX_ITERATIONS; iter++) {\n                // adjustedSellAmount = previousSellAmount * (target/actual) * JUMP_MULTIPLIER\n                sellAmounts[0] = _safeGetPartialAmountCeil(\n                    makerTokenAmounts[i],\n                    buyAmounts[0],\n                    sellAmounts[0]\n                );\n                if (sellAmounts.length == 0 || sellAmounts[0] == 0) {\n                    break;\n                }\n                sellAmounts[0] = _safeGetPartialAmountCeil(\n                    (ONE_HUNDED_PERCENT_BPS + APPROXIMATE_BUY_TARGET_EPSILON_BPS),\n                    ONE_HUNDED_PERCENT_BPS,\n                    sellAmounts[0]\n                );\n                if (sellAmounts.length == 0 || sellAmounts[0] == 0) {\n                    break;\n                }\n                uint256[] memory _buyAmounts;\n                (_gasUsed, _buyAmounts) = _sampleSwapQuotesRevert(sellOpts, sellAmounts);\n                if (_buyAmounts.length == 0 || _buyAmounts[0] == 0) {\n                    break;\n                }\n                // We re-use buyAmount next iteration, only assign if it is\n                // non zero\n                buyAmounts = _buyAmounts;\n                // If we've reached our goal, exit early\n                if (buyAmounts[0] >= makerTokenAmounts[i]) {\n                    uint256 eps =\n                        (buyAmounts[0] - makerTokenAmounts[i]) * ONE_HUNDED_PERCENT_BPS /\n                        makerTokenAmounts[i];\n                    if (eps <= APPROXIMATE_BUY_TARGET_EPSILON_BPS) {\n                        break;\n                    }\n                }\n            }\n            if (_gasUsed.length > 0 && buyAmounts.length > 0) {\n                gasUsed[i] = _gasUsed[0];\n                // We do our best to close in on the requested amount, but we can either over buy or under buy and exit\n                // if we hit a max iteration limit\n                // We scale the sell amount to get the approximate target\n                takerTokenAmounts[i] = _safeGetPartialAmountCeil(\n                    makerTokenAmounts[i],\n                    buyAmounts[0],\n                    sellAmounts[0]\n                );\n            }\n        }\n    }\n\n    function _safeGetPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        view\n        returns (uint256 partialAmount)\n    {\n        if (numerator == 0 || target == 0 || denominator == 0) return 0;\n        uint256 c = numerator * target;\n        if (c / numerator != target) return 0;\n        return (c + (denominator - 1)) / denominator;\n    }\n\n\n}",
        "./GasOverhead.sol": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.6;\n\ncontract GasOverhead {\n    uint256 private _overhead = 2;\n    // Overhead incurred from updating the overhead storage slot\n    uint256 constant SSTORE_OVERHEAD = 20000;\n\n    function addOverhead(uint256 gas, uint256 gasBefore)\n        external\n    {\n        uint256 callOverhead = gasBefore - gasleft();\n        // Add additional est overhead of performing this update\n        _overhead += gas + callOverhead + SSTORE_OVERHEAD;\n    }\n\n    function clearOverhead()\n        external\n    {\n        _overhead = 2;\n    }\n\n    function overhead()\n        external\n        view\n        returns (uint256)\n    {\n        return _overhead;\n    }\n}\n"
    },
    "compiler": {
        "name": "solc",
        "version": "0.6.12+commit.27d51765",
        "settings": {
            "remappings": [
                "@0x/contracts-zero-ex=/Users/jacob/projects/ethdev/0x/workspace-remote/workspace/0x-monorepo/packages/asset-swapper/node_modules/@0x/contracts-zero-ex",
                "@0x/contracts-erc20=/Users/jacob/projects/ethdev/0x/workspace-remote/workspace/0x-monorepo/packages/asset-swapper/node_modules/@0x/contracts-erc20",
                "@0x/contracts-utils=/Users/jacob/projects/ethdev/0x/workspace-remote/workspace/0x-monorepo/packages/asset-swapper/node_modules/@0x/contracts-utils"
            ],
            "optimizer": {
                "enabled": true,
                "runs": 200,
                "details": {
                    "yul": true,
                    "deduplicate": true
                }
            },
            "outputSelection": {
                "*": {
                    "*": [
                        "abi",
                        "devdoc",
                        "evm.bytecode.object",
                        "evm.bytecode.sourceMap",
                        "evm.deployedBytecode.object",
                        "evm.deployedBytecode.sourceMap"
                    ]
                }
            },
            "evmVersion": "istanbul"
        }
    },
    "chains": {}
}
