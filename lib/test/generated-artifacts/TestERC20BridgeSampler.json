{
    "schemaVersion": "2.0.0",
    "contractName": "TestERC20BridgeSampler",
    "compilerOutput": {
        "abi": [
            {
                "inputs": [],
                "stateMutability": "nonpayable",
                "type": "constructor"
            },
            {
                "inputs": [],
                "name": "FAILURE_ADDRESS",
                "outputs": [
                    {
                        "internalType": "address payable",
                        "name": "",
                        "type": "address"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "bytes[]",
                        "name": "callDatas",
                        "type": "bytes[]"
                    }
                ],
                "name": "batchCall",
                "outputs": [
                    {
                        "components": [
                            {
                                "internalType": "bytes",
                                "name": "data",
                                "type": "bytes"
                            },
                            {
                                "internalType": "bool",
                                "name": "success",
                                "type": "bool"
                            }
                        ],
                        "internalType": "struct ERC20BridgeSampler.CallResults[]",
                        "name": "callResults",
                        "type": "tuple[]"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address[]",
                        "name": "tokenAddresses",
                        "type": "address[]"
                    }
                ],
                "name": "createTokenExchanges",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "enableFailTrigger",
                "outputs": [],
                "stateMutability": "payable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "uint256",
                                "name": "reserveOffset",
                                "type": "uint256"
                            },
                            {
                                "internalType": "address",
                                "name": "hintHandler",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "networkProxy",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "weth",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes",
                                "name": "hint",
                                "type": "bytes"
                            }
                        ],
                        "internalType": "struct KyberSampler.KyberSamplerOpts",
                        "name": "opts",
                        "type": "tuple"
                    },
                    {
                        "internalType": "bytes32",
                        "name": "reserveId",
                        "type": "bytes32"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    }
                ],
                "name": "encodeKyberHint",
                "outputs": [
                    {
                        "internalType": "bytes",
                        "name": "hint",
                        "type": "bytes"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "contract IERC20TokenV06[]",
                        "name": "tokens",
                        "type": "address[]"
                    },
                    {
                        "internalType": "address",
                        "name": "account",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "spender",
                        "type": "address"
                    }
                ],
                "name": "getAllowanceOf",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "allowances",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "contract IERC20TokenV06[]",
                        "name": "tokens",
                        "type": "address[]"
                    },
                    {
                        "internalType": "address",
                        "name": "account",
                        "type": "address"
                    }
                ],
                "name": "getBalanceOf",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "balances",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "getBlockNumber",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "getGasLeft",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "contract IERC20TokenV06",
                                "name": "makerToken",
                                "type": "address"
                            },
                            {
                                "internalType": "contract IERC20TokenV06",
                                "name": "takerToken",
                                "type": "address"
                            },
                            {
                                "internalType": "uint128",
                                "name": "makerAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "uint128",
                                "name": "takerAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "uint128",
                                "name": "takerTokenFeeAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "address",
                                "name": "maker",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "taker",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "sender",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "feeRecipient",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "pool",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "uint64",
                                "name": "expiry",
                                "type": "uint64"
                            },
                            {
                                "internalType": "uint256",
                                "name": "salt",
                                "type": "uint256"
                            }
                        ],
                        "internalType": "struct IExchange.LimitOrder[]",
                        "name": "orders",
                        "type": "tuple[]"
                    },
                    {
                        "components": [
                            {
                                "internalType": "enum IExchange.SignatureType",
                                "name": "signatureType",
                                "type": "uint8"
                            },
                            {
                                "internalType": "uint8",
                                "name": "v",
                                "type": "uint8"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "r",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "s",
                                "type": "bytes32"
                            }
                        ],
                        "internalType": "struct IExchange.Signature[]",
                        "name": "orderSignatures",
                        "type": "tuple[]"
                    },
                    {
                        "internalType": "contract IExchange",
                        "name": "exchange",
                        "type": "address"
                    }
                ],
                "name": "getLimitOrderFillableMakerAssetAmounts",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "orderFillableMakerAssetAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "contract IERC20TokenV06",
                                "name": "makerToken",
                                "type": "address"
                            },
                            {
                                "internalType": "contract IERC20TokenV06",
                                "name": "takerToken",
                                "type": "address"
                            },
                            {
                                "internalType": "uint128",
                                "name": "makerAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "uint128",
                                "name": "takerAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "uint128",
                                "name": "takerTokenFeeAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "address",
                                "name": "maker",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "taker",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "sender",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "feeRecipient",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "pool",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "uint64",
                                "name": "expiry",
                                "type": "uint64"
                            },
                            {
                                "internalType": "uint256",
                                "name": "salt",
                                "type": "uint256"
                            }
                        ],
                        "internalType": "struct IExchange.LimitOrder",
                        "name": "order",
                        "type": "tuple"
                    },
                    {
                        "components": [
                            {
                                "internalType": "enum IExchange.SignatureType",
                                "name": "signatureType",
                                "type": "uint8"
                            },
                            {
                                "internalType": "uint8",
                                "name": "v",
                                "type": "uint8"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "r",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "s",
                                "type": "bytes32"
                            }
                        ],
                        "internalType": "struct IExchange.Signature",
                        "name": "",
                        "type": "tuple"
                    },
                    {
                        "internalType": "contract IExchange",
                        "name": "",
                        "type": "address"
                    }
                ],
                "name": "getLimitOrderFillableTakerAmount",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "fillableTakerAmount",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "contract IERC20TokenV06",
                                "name": "makerToken",
                                "type": "address"
                            },
                            {
                                "internalType": "contract IERC20TokenV06",
                                "name": "takerToken",
                                "type": "address"
                            },
                            {
                                "internalType": "uint128",
                                "name": "makerAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "uint128",
                                "name": "takerAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "uint128",
                                "name": "takerTokenFeeAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "address",
                                "name": "maker",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "taker",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "sender",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "feeRecipient",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "pool",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "uint64",
                                "name": "expiry",
                                "type": "uint64"
                            },
                            {
                                "internalType": "uint256",
                                "name": "salt",
                                "type": "uint256"
                            }
                        ],
                        "internalType": "struct IExchange.LimitOrder[]",
                        "name": "orders",
                        "type": "tuple[]"
                    },
                    {
                        "components": [
                            {
                                "internalType": "enum IExchange.SignatureType",
                                "name": "signatureType",
                                "type": "uint8"
                            },
                            {
                                "internalType": "uint8",
                                "name": "v",
                                "type": "uint8"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "r",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "s",
                                "type": "bytes32"
                            }
                        ],
                        "internalType": "struct IExchange.Signature[]",
                        "name": "orderSignatures",
                        "type": "tuple[]"
                    },
                    {
                        "internalType": "contract IExchange",
                        "name": "exchange",
                        "type": "address"
                    }
                ],
                "name": "getLimitOrderFillableTakerAssetAmounts",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "orderFillableTakerAssetAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "contract IERC20TokenV06[]",
                        "name": "tokens",
                        "type": "address[]"
                    }
                ],
                "name": "getTokenDecimals",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "decimals",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "account",
                        "type": "address"
                    }
                ],
                "name": "isContract",
                "outputs": [
                    {
                        "internalType": "bool",
                        "name": "",
                        "type": "bool"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "kyber",
                "outputs": [
                    {
                        "internalType": "contract TestERC20BridgeSamplerKyberNetwork",
                        "name": "",
                        "type": "address"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "poolAddress",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromBalancer",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "bytes32",
                                "name": "poolId",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "address",
                                "name": "vault",
                                "type": "address"
                            }
                        ],
                        "internalType": "struct BalancerV2Sampler.BalancerV2PoolInfo",
                        "name": "poolInfo",
                        "type": "tuple"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromBalancerV2",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "contract IBancorRegistry",
                                "name": "registry",
                                "type": "address"
                            },
                            {
                                "internalType": "address[][]",
                                "name": "paths",
                                "type": "address[][]"
                            }
                        ],
                        "internalType": "struct BancorSampler.BancorSamplerOpts",
                        "name": "opts",
                        "type": "tuple"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromBancor",
                "outputs": [
                    {
                        "internalType": "address",
                        "name": "bancorNetwork",
                        "type": "address"
                    },
                    {
                        "internalType": "address[]",
                        "name": "path",
                        "type": "address[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "contract ICToken",
                        "name": "cToken",
                        "type": "address"
                    },
                    {
                        "internalType": "contract IERC20TokenV06",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "contract IERC20TokenV06",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromCompound",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "poolAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes4",
                                "name": "sellQuoteFunctionSelector",
                                "type": "bytes4"
                            },
                            {
                                "internalType": "bytes4",
                                "name": "buyQuoteFunctionSelector",
                                "type": "bytes4"
                            }
                        ],
                        "internalType": "struct CurveSampler.CurveInfo",
                        "name": "curveInfo",
                        "type": "tuple"
                    },
                    {
                        "internalType": "int128",
                        "name": "fromTokenIdx",
                        "type": "int128"
                    },
                    {
                        "internalType": "int128",
                        "name": "toTokenIdx",
                        "type": "int128"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromCurve",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "registry",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "helper",
                                "type": "address"
                            }
                        ],
                        "internalType": "struct DODOSampler.DODOSamplerOpts",
                        "name": "opts",
                        "type": "tuple"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromDODO",
                "outputs": [
                    {
                        "internalType": "bool",
                        "name": "sellBase",
                        "type": "bool"
                    },
                    {
                        "internalType": "address",
                        "name": "pool",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "registry",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256",
                        "name": "offset",
                        "type": "uint256"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromDODOV2",
                "outputs": [
                    {
                        "internalType": "bool",
                        "name": "sellBase",
                        "type": "bool"
                    },
                    {
                        "internalType": "address",
                        "name": "pool",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "router",
                        "type": "address"
                    },
                    {
                        "internalType": "address[]",
                        "name": "path",
                        "type": "address[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromKyberDmm",
                "outputs": [
                    {
                        "internalType": "address[]",
                        "name": "pools",
                        "type": "address[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "uint256",
                                "name": "reserveOffset",
                                "type": "uint256"
                            },
                            {
                                "internalType": "address",
                                "name": "hintHandler",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "networkProxy",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "weth",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes",
                                "name": "hint",
                                "type": "bytes"
                            }
                        ],
                        "internalType": "struct KyberSampler.KyberSamplerOpts",
                        "name": "opts",
                        "type": "tuple"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromKyberNetwork",
                "outputs": [
                    {
                        "internalType": "bytes32",
                        "name": "reserveId",
                        "type": "bytes32"
                    },
                    {
                        "internalType": "bytes",
                        "name": "hint",
                        "type": "bytes"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "stEthToken",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "wethToken",
                                "type": "address"
                            }
                        ],
                        "internalType": "struct LidoSampler.LidoInfo",
                        "name": "lidoInfo",
                        "type": "tuple"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromLido",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "pure",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "providerAddress",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromLiquidityProvider",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "router",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromMStable",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "psmAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "ilkIdentifier",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "address",
                                "name": "gemTokenAddress",
                                "type": "address"
                            }
                        ],
                        "internalType": "struct MakerPSMSampler.MakerPsmInfo",
                        "name": "psmInfo",
                        "type": "tuple"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromMakerPsm",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "registry",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromMooniswap",
                "outputs": [
                    {
                        "internalType": "contract IMooniswap",
                        "name": "pool",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "pool",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromShell",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "poolAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes4",
                                "name": "sellQuoteFunctionSelector",
                                "type": "bytes4"
                            },
                            {
                                "internalType": "bytes4",
                                "name": "buyQuoteFunctionSelector",
                                "type": "bytes4"
                            }
                        ],
                        "internalType": "struct SmoothySampler.SmoothyInfo",
                        "name": "smoothyInfo",
                        "type": "tuple"
                    },
                    {
                        "internalType": "int128",
                        "name": "fromTokenIdx",
                        "type": "int128"
                    },
                    {
                        "internalType": "int128",
                        "name": "toTokenIdx",
                        "type": "int128"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromSmoothy",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "router",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromUniswap",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "router",
                        "type": "address"
                    },
                    {
                        "internalType": "address[]",
                        "name": "path",
                        "type": "address[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromUniswapV2",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "contract IUniswapV3QuoterV2",
                        "name": "quoter",
                        "type": "address"
                    },
                    {
                        "internalType": "contract IERC20TokenV06[]",
                        "name": "path",
                        "type": "address[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromUniswapV3",
                "outputs": [
                    {
                        "internalType": "bytes[]",
                        "name": "uniswapPaths",
                        "type": "bytes[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "uniswapGasUsed",
                        "type": "uint256[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "uint256",
                                "name": "reserveOffset",
                                "type": "uint256"
                            },
                            {
                                "internalType": "address",
                                "name": "hintHandler",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "networkProxy",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "weth",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes",
                                "name": "hint",
                                "type": "bytes"
                            }
                        ],
                        "internalType": "struct KyberSampler.KyberSamplerOpts",
                        "name": "opts",
                        "type": "tuple"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256",
                        "name": "takerTokenAmount",
                        "type": "uint256"
                    }
                ],
                "name": "sampleSellFromKyberNetwork",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "makerTokenAmount",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "poolAddress",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromBalancer",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "bytes32",
                                "name": "poolId",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "address",
                                "name": "vault",
                                "type": "address"
                            }
                        ],
                        "internalType": "struct BalancerV2Sampler.BalancerV2PoolInfo",
                        "name": "poolInfo",
                        "type": "tuple"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromBalancerV2",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "contract IBancorRegistry",
                                "name": "registry",
                                "type": "address"
                            },
                            {
                                "internalType": "address[][]",
                                "name": "paths",
                                "type": "address[][]"
                            }
                        ],
                        "internalType": "struct BancorSampler.BancorSamplerOpts",
                        "name": "opts",
                        "type": "tuple"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromBancor",
                "outputs": [
                    {
                        "internalType": "address",
                        "name": "bancorNetwork",
                        "type": "address"
                    },
                    {
                        "internalType": "address[]",
                        "name": "path",
                        "type": "address[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "contract ICToken",
                        "name": "cToken",
                        "type": "address"
                    },
                    {
                        "internalType": "contract IERC20TokenV06",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "contract IERC20TokenV06",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromCompound",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "poolAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes4",
                                "name": "sellQuoteFunctionSelector",
                                "type": "bytes4"
                            },
                            {
                                "internalType": "bytes4",
                                "name": "buyQuoteFunctionSelector",
                                "type": "bytes4"
                            }
                        ],
                        "internalType": "struct CurveSampler.CurveInfo",
                        "name": "curveInfo",
                        "type": "tuple"
                    },
                    {
                        "internalType": "int128",
                        "name": "fromTokenIdx",
                        "type": "int128"
                    },
                    {
                        "internalType": "int128",
                        "name": "toTokenIdx",
                        "type": "int128"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromCurve",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "registry",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "helper",
                                "type": "address"
                            }
                        ],
                        "internalType": "struct DODOSampler.DODOSamplerOpts",
                        "name": "opts",
                        "type": "tuple"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromDODO",
                "outputs": [
                    {
                        "internalType": "bool",
                        "name": "sellBase",
                        "type": "bool"
                    },
                    {
                        "internalType": "address",
                        "name": "pool",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "registry",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256",
                        "name": "offset",
                        "type": "uint256"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromDODOV2",
                "outputs": [
                    {
                        "internalType": "bool",
                        "name": "sellBase",
                        "type": "bool"
                    },
                    {
                        "internalType": "address",
                        "name": "pool",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "router",
                        "type": "address"
                    },
                    {
                        "internalType": "address[]",
                        "name": "path",
                        "type": "address[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromKyberDmm",
                "outputs": [
                    {
                        "internalType": "address[]",
                        "name": "pools",
                        "type": "address[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "uint256",
                                "name": "reserveOffset",
                                "type": "uint256"
                            },
                            {
                                "internalType": "address",
                                "name": "hintHandler",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "networkProxy",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "weth",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes",
                                "name": "hint",
                                "type": "bytes"
                            }
                        ],
                        "internalType": "struct KyberSampler.KyberSamplerOpts",
                        "name": "opts",
                        "type": "tuple"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromKyberNetwork",
                "outputs": [
                    {
                        "internalType": "bytes32",
                        "name": "reserveId",
                        "type": "bytes32"
                    },
                    {
                        "internalType": "bytes",
                        "name": "hint",
                        "type": "bytes"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "stEthToken",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "wethToken",
                                "type": "address"
                            }
                        ],
                        "internalType": "struct LidoSampler.LidoInfo",
                        "name": "lidoInfo",
                        "type": "tuple"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromLido",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "pure",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "providerAddress",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromLiquidityProvider",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "router",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromMStable",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "psmAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "ilkIdentifier",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "address",
                                "name": "gemTokenAddress",
                                "type": "address"
                            }
                        ],
                        "internalType": "struct MakerPSMSampler.MakerPsmInfo",
                        "name": "psmInfo",
                        "type": "tuple"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromMakerPsm",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "registry",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromMooniswap",
                "outputs": [
                    {
                        "internalType": "contract IMooniswap",
                        "name": "pool",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "multibridge",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "intermediateToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromMultiBridge",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "pool",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromShell",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "poolAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes4",
                                "name": "sellQuoteFunctionSelector",
                                "type": "bytes4"
                            },
                            {
                                "internalType": "bytes4",
                                "name": "buyQuoteFunctionSelector",
                                "type": "bytes4"
                            }
                        ],
                        "internalType": "struct SmoothySampler.SmoothyInfo",
                        "name": "smoothyInfo",
                        "type": "tuple"
                    },
                    {
                        "internalType": "int128",
                        "name": "fromTokenIdx",
                        "type": "int128"
                    },
                    {
                        "internalType": "int128",
                        "name": "toTokenIdx",
                        "type": "int128"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromSmoothy",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "router",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromUniswap",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "router",
                        "type": "address"
                    },
                    {
                        "internalType": "address[]",
                        "name": "path",
                        "type": "address[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromUniswapV2",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "contract IUniswapV3QuoterV2",
                        "name": "quoter",
                        "type": "address"
                    },
                    {
                        "internalType": "contract IERC20TokenV06[]",
                        "name": "path",
                        "type": "address[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromUniswapV3",
                "outputs": [
                    {
                        "internalType": "bytes[]",
                        "name": "uniswapPaths",
                        "type": "bytes[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "uniswapGasUsed",
                        "type": "uint256[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "registry",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "mooniswapTakerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "mooniswapMakerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256",
                        "name": "takerTokenAmount",
                        "type": "uint256"
                    }
                ],
                "name": "sampleSingleSellFromMooniswapPool",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "bytes[]",
                        "name": "firstHopCalls",
                        "type": "bytes[]"
                    },
                    {
                        "internalType": "bytes[]",
                        "name": "secondHopCalls",
                        "type": "bytes[]"
                    },
                    {
                        "internalType": "uint256",
                        "name": "buyAmount",
                        "type": "uint256"
                    }
                ],
                "name": "sampleTwoHopBuy",
                "outputs": [
                    {
                        "components": [
                            {
                                "internalType": "uint256",
                                "name": "sourceIndex",
                                "type": "uint256"
                            },
                            {
                                "internalType": "bytes",
                                "name": "returnData",
                                "type": "bytes"
                            }
                        ],
                        "internalType": "struct TwoHopSampler.HopInfo",
                        "name": "firstHop",
                        "type": "tuple"
                    },
                    {
                        "components": [
                            {
                                "internalType": "uint256",
                                "name": "sourceIndex",
                                "type": "uint256"
                            },
                            {
                                "internalType": "bytes",
                                "name": "returnData",
                                "type": "bytes"
                            }
                        ],
                        "internalType": "struct TwoHopSampler.HopInfo",
                        "name": "secondHop",
                        "type": "tuple"
                    },
                    {
                        "internalType": "uint256",
                        "name": "sellAmount",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "bytes[]",
                        "name": "firstHopCalls",
                        "type": "bytes[]"
                    },
                    {
                        "internalType": "bytes[]",
                        "name": "secondHopCalls",
                        "type": "bytes[]"
                    },
                    {
                        "internalType": "uint256",
                        "name": "sellAmount",
                        "type": "uint256"
                    }
                ],
                "name": "sampleTwoHopSell",
                "outputs": [
                    {
                        "components": [
                            {
                                "internalType": "uint256",
                                "name": "sourceIndex",
                                "type": "uint256"
                            },
                            {
                                "internalType": "bytes",
                                "name": "returnData",
                                "type": "bytes"
                            }
                        ],
                        "internalType": "struct TwoHopSampler.HopInfo",
                        "name": "firstHop",
                        "type": "tuple"
                    },
                    {
                        "components": [
                            {
                                "internalType": "uint256",
                                "name": "sourceIndex",
                                "type": "uint256"
                            },
                            {
                                "internalType": "bytes",
                                "name": "returnData",
                                "type": "bytes"
                            }
                        ],
                        "internalType": "struct TwoHopSampler.HopInfo",
                        "name": "secondHop",
                        "type": "tuple"
                    },
                    {
                        "internalType": "uint256",
                        "name": "buyAmount",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "uniswap",
                "outputs": [
                    {
                        "internalType": "contract TestERC20BridgeSamplerUniswapExchangeFactory",
                        "name": "",
                        "type": "address"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "uniswapV2Router",
                "outputs": [
                    {
                        "internalType": "contract TestERC20BridgeSamplerUniswapV2Router01",
                        "name": "",
                        "type": "address"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            }
        ],
        "devdoc": {
            "kind": "dev",
            "methods": {
                "batchCall(bytes[])": {
                    "details": "Call multiple public functions on this contract in a single transaction.",
                    "params": {
                        "callDatas": "ABI-encoded call data for each function call."
                    },
                    "returns": {
                        "callResults": "ABI-encoded results data for each call."
                    }
                },
                "getLimitOrderFillableMakerAssetAmounts((address,address,uint128,uint128,uint128,address,address,address,address,bytes32,uint64,uint256)[],(uint8,uint8,bytes32,bytes32)[],address)": {
                    "details": "Queries the fillable taker asset amounts of native orders.      Effectively ignores orders that have empty signatures or",
                    "params": {
                        "exchange": "The V4 exchange.",
                        "orderSignatures": "Signatures for each respective order in `orders`.",
                        "orders": "Native orders to query."
                    },
                    "returns": {
                        "orderFillableMakerAssetAmounts": "How much maker asset can be filled         by each order in `orders`."
                    }
                },
                "getLimitOrderFillableTakerAssetAmounts((address,address,uint128,uint128,uint128,address,address,address,address,bytes32,uint64,uint256)[],(uint8,uint8,bytes32,bytes32)[],address)": {
                    "details": "Queries the fillable taker asset amounts of native orders.      Effectively ignores orders that have empty signatures or      maker/taker asset amounts (returning 0).",
                    "params": {
                        "exchange": "The V4 exchange.",
                        "orderSignatures": "Signatures for each respective order in `orders`.",
                        "orders": "Native limit orders to query."
                    },
                    "returns": {
                        "orderFillableTakerAssetAmounts": "How much taker asset can be filled         by each order in `orders`."
                    }
                },
                "sampleBuysFromBalancer(address,address,address,uint256[])": {
                    "details": "Sample buy quotes from Balancer.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "makerTokenAmounts": "Maker token buy amount for each sample.",
                        "poolAddress": "Address of the Balancer pool to query.",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromBalancerV2((bytes32,address),address,address,uint256[])": {
                    "details": "Sample buy quotes from Balancer V2.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "makerTokenAmounts": "Maker token buy amount for each sample.",
                        "poolInfo": "Struct with pool related data",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromBancor((address,address[][]),address,address,uint256[])": {
                    "details": "Sample buy quotes from Bancor. Unimplemented",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "makerTokenAmounts": "Maker token buy amount for each sample.",
                        "opts": "BancorSamplerOpts The Bancor registry contract address and paths",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "bancorNetwork": "the Bancor Network address",
                        "path": "the selected conversion path from bancor",
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromCurve((address,bytes4,bytes4),int128,int128,uint256[])": {
                    "details": "Sample buy quotes from Curve.",
                    "params": {
                        "curveInfo": "Curve information specific to this token pair.",
                        "fromTokenIdx": "Index of the taker token (what to sell).",
                        "makerTokenAmounts": "Maker token buy amount for each sample.",
                        "toTokenIdx": "Index of the maker token (what to buy)."
                    },
                    "returns": {
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromDODO((address,address),address,address,uint256[])": {
                    "details": "Sample buy quotes from DODO.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "makerTokenAmounts": "Maker token sell amount for each sample.",
                        "opts": "DODOSamplerOpts DODO Registry and helper addresses",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "pool": "the DODO pool address",
                        "sellBase": "whether the bridge needs to sell the base token",
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromDODOV2(address,uint256,address,address,uint256[])": {
                    "details": "Sample buy quotes from DODO.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "makerTokenAmounts": "Maker token sell amount for each sample.",
                        "offset": "offset index for the pool in the registry.",
                        "registry": "Address of the registry to look up.",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "pool": "the DODO pool address",
                        "sellBase": "whether the bridge needs to sell the base token",
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromKyberDmm(address,address[],uint256[])": {
                    "details": "Sample buy quotes from KyberDmm.",
                    "params": {
                        "makerTokenAmounts": "Maker token buy amount for each sample.",
                        "path": "Token route. Should be takerToken -> makerToken.",
                        "router": "Router to look up tokens and amounts"
                    },
                    "returns": {
                        "pools": "The pool addresses involved in the multi path trade",
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromKyberNetwork((uint256,address,address,address,bytes),address,address,uint256[])": {
                    "details": "Sample buy quotes from Kyber.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "makerTokenAmounts": "Maker token buy amount for each sample.",
                        "opts": "KyberSamplerOpts The nth reserve",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "hint": "The hint for the selected reserve",
                        "reserveId": "The id of the reserve found at reserveOffset",
                        "takerTokenAmounts": "Taker amounts sold at each maker token amount."
                    }
                },
                "sampleBuysFromLido((address,address),address,address,uint256[])": {
                    "details": "Sample buy quotes from Lido.",
                    "params": {
                        "lidoInfo": "Info regarding a specific Lido deployment",
                        "makerToken": "Address of the maker token (what to buy).",
                        "makerTokenAmounts": "Maker token buy amount for each sample.",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "_0": "takerTokenAmounts Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromLiquidityProvider(address,address,address,uint256[])": {
                    "details": "Sample buy quotes from an arbitrary on-chain liquidity provider.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "makerTokenAmounts": "Maker token buy amount for each sample.",
                        "providerAddress": "Address of the liquidity provider.",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromMStable(address,address,address,uint256[])": {
                    "details": "Sample buy quotes from MStable contract",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "makerTokenAmounts": "Maker token buy amount for each sample.",
                        "router": "Address of the mStable contract",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromMooniswap(address,address,address,uint256[])": {
                    "details": "Sample buy quotes from Mooniswap.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "makerTokenAmounts": "Maker token sell amount for each sample.",
                        "registry": "Address of the Mooniswap Registry.",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "pool": "The contract address for the pool",
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromShell(address,address,address,uint256[])": {
                    "details": "Sample buy quotes from Shell pool contract",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "makerTokenAmounts": "Maker token buy amount for each sample.",
                        "pool": "Address of the Shell pool contract",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromSmoothy((address,bytes4,bytes4),int128,int128,uint256[])": {
                    "details": "Sample buy quotes from Smoothy.",
                    "params": {
                        "fromTokenIdx": "Index of the taker token (what to sell).",
                        "makerTokenAmounts": "Maker token buy amount for each sample.",
                        "smoothyInfo": "Smoothy information specific to this token pair.",
                        "toTokenIdx": "Index of the maker token (what to buy)."
                    },
                    "returns": {
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromUniswap(address,address,address,uint256[])": {
                    "details": "Sample buy quotes from Uniswap.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "makerTokenAmounts": "Maker token sell amount for each sample.",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromUniswapV2(address,address[],uint256[])": {
                    "details": "Sample buy quotes from UniswapV2.",
                    "params": {
                        "makerTokenAmounts": "Maker token buy amount for each sample.",
                        "path": "Token route. Should be takerToken -> makerToken.",
                        "router": "Router to look up tokens and amounts"
                    },
                    "returns": {
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromUniswapV3(address,address[],uint256[])": {
                    "details": "Sample buy quotes from UniswapV3.",
                    "params": {
                        "makerTokenAmounts": "Maker token buy amount for each sample.",
                        "path": "Token route. Should be takerToken -> makerToken.",
                        "quoter": "UniswapV3 Quoter contract."
                    },
                    "returns": {
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount.",
                        "uniswapGasUsed": "Estimated amount of gas used",
                        "uniswapPaths": "The encoded uniswap path for each sample."
                    }
                },
                "sampleSellsFromBalancer(address,address,address,uint256[])": {
                    "details": "Sample sell quotes from Balancer.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "poolAddress": "Address of the Balancer pool to query.",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount."
                    }
                },
                "sampleSellsFromBalancerV2((bytes32,address),address,address,uint256[])": {
                    "details": "Sample sell quotes from Balancer V2.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "poolInfo": "Struct with pool related data",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount."
                    }
                },
                "sampleSellsFromBancor((address,address[][]),address,address,uint256[])": {
                    "details": "Sample sell quotes from Bancor.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "opts": "BancorSamplerOpts The Bancor registry contract address and paths",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "bancorNetwork": "the Bancor Network address",
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount.",
                        "path": "the selected conversion path from bancor"
                    }
                },
                "sampleSellsFromCurve((address,bytes4,bytes4),int128,int128,uint256[])": {
                    "details": "Sample sell quotes from Curve.",
                    "params": {
                        "curveInfo": "Curve information specific to this token pair.",
                        "fromTokenIdx": "Index of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample.",
                        "toTokenIdx": "Index of the maker token (what to buy)."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount."
                    }
                },
                "sampleSellsFromDODO((address,address),address,address,uint256[])": {
                    "details": "Sample sell quotes from DODO.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "opts": "DODOSamplerOpts DODO Registry and helper addresses",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount.",
                        "pool": "the DODO pool address",
                        "sellBase": "whether the bridge needs to sell the base token"
                    }
                },
                "sampleSellsFromDODOV2(address,uint256,address,address,uint256[])": {
                    "details": "Sample sell quotes from DODO V2.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "offset": "offset index for the pool in the registry.",
                        "registry": "Address of the registry to look up.",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount.",
                        "pool": "the DODO pool address",
                        "sellBase": "whether the bridge needs to sell the base token"
                    }
                },
                "sampleSellsFromKyberDmm(address,address[],uint256[])": {
                    "details": "Sample sell quotes from KyberDmm.",
                    "params": {
                        "path": "Token route. Should be takerToken -> makerToken",
                        "router": "Router to look up tokens and amounts",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount.",
                        "pools": "The pool addresses involved in the multi path trade"
                    }
                },
                "sampleSellsFromKyberNetwork((uint256,address,address,address,bytes),address,address,uint256[])": {
                    "details": "Sample sell quotes from Kyber.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "opts": "KyberSamplerOpts The nth reserve",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "hint": "The hint for the selected reserve",
                        "makerTokenAmounts": "Maker amounts bought at each taker token amount.",
                        "reserveId": "The id of the reserve found at reserveOffset"
                    }
                },
                "sampleSellsFromLido((address,address),address,address,uint256[])": {
                    "details": "Sample sell quotes from Lido",
                    "params": {
                        "lidoInfo": "Info regarding a specific Lido deployment",
                        "makerToken": "Address of the maker token (what to buy).",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "_0": "makerTokenAmounts Maker amounts bought at each taker token         amount."
                    }
                },
                "sampleSellsFromLiquidityProvider(address,address,address,uint256[])": {
                    "details": "Sample sell quotes from an arbitrary on-chain liquidity provider.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "providerAddress": "Address of the liquidity provider.",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount."
                    }
                },
                "sampleSellsFromMStable(address,address,address,uint256[])": {
                    "details": "Sample sell quotes from the mStable contract",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "router": "Address of the mStable contract",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount."
                    }
                },
                "sampleSellsFromMakerPsm((address,bytes32,address),address,address,uint256[])": {
                    "details": "Sample sell quotes from Maker PSM"
                },
                "sampleSellsFromMooniswap(address,address,address,uint256[])": {
                    "details": "Sample sell quotes from Mooniswap.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "registry": "Address of the Mooniswap Registry.",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount.",
                        "pool": "The contract address for the pool"
                    }
                },
                "sampleSellsFromMultiBridge(address,address,address,address,uint256[])": {
                    "details": "Sample sell quotes from MultiBridge.",
                    "params": {
                        "intermediateToken": "The address of the intermediate token to        use in an indirect route.",
                        "makerToken": "Address of the maker token (what to buy).",
                        "multibridge": "Address of the MultiBridge contract.",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount."
                    }
                },
                "sampleSellsFromShell(address,address,address,uint256[])": {
                    "details": "Sample sell quotes from the Shell pool contract",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "pool": "Address of the Shell pool contract",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount."
                    }
                },
                "sampleSellsFromSmoothy((address,bytes4,bytes4),int128,int128,uint256[])": {
                    "details": "Sample sell quotes from Smoothy.",
                    "params": {
                        "fromTokenIdx": "Index of the taker token (what to sell).",
                        "smoothyInfo": "Smoothy information specific to this token pair.",
                        "takerTokenAmounts": "Taker token sell amount for each sample.",
                        "toTokenIdx": "Index of the maker token (what to buy)."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount."
                    }
                },
                "sampleSellsFromUniswap(address,address,address,uint256[])": {
                    "details": "Sample sell quotes from Uniswap.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "router": "Address of the Uniswap Router",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount."
                    }
                },
                "sampleSellsFromUniswapV2(address,address[],uint256[])": {
                    "details": "Sample sell quotes from UniswapV2.",
                    "params": {
                        "path": "Token route. Should be takerToken -> makerToken",
                        "router": "Router to look up tokens and amounts",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount."
                    }
                },
                "sampleSellsFromUniswapV3(address,address[],uint256[])": {
                    "details": "Sample sell quotes from UniswapV3.",
                    "params": {
                        "path": "Token route. Should be takerToken -> makerToken",
                        "quoter": "UniswapV3 Quoter contract.",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount.",
                        "uniswapGasUsed": "Estimated amount of gas used",
                        "uniswapPaths": "The encoded uniswap path for each sample."
                    }
                }
            },
            "version": 1
        },
        "evm": {
            "bytecode": {
                "linkReferences": {},
                "object": "",
                "opcodes": "PUSH1 0xA0 PUSH1 0x40 MSTORE PUSH32 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE000000000000000000000000 PUSH1 0x80 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x35 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x44 SWAP1 PUSH3 0x120 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 PUSH1 0x0 CREATE DUP1 ISZERO DUP1 ISZERO PUSH3 0x61 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH3 0x90 SWAP1 PUSH3 0x12E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 PUSH1 0x0 CREATE DUP1 ISZERO DUP1 ISZERO PUSH3 0xAD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH3 0xDC SWAP1 PUSH3 0x13C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 PUSH1 0x0 CREATE DUP1 ISZERO DUP1 ISZERO PUSH3 0xF9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x2 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH3 0x14A JUMP JUMPDEST PUSH2 0x7D6 DUP1 PUSH3 0xAE13 DUP4 CODECOPY ADD SWAP1 JUMP JUMPDEST PUSH2 0x73E DUP1 PUSH3 0xB5E9 DUP4 CODECOPY ADD SWAP1 JUMP JUMPDEST PUSH2 0xA62 DUP1 PUSH3 0xBD27 DUP4 CODECOPY ADD SWAP1 JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0x60 SHR PUSH2 0xACA1 PUSH3 0x172 PUSH1 0x0 CODECOPY DUP1 PUSH2 0x352C MSTORE DUP1 PUSH2 0x511B MSTORE DUP1 PUSH2 0x5B26 MSTORE POP PUSH2 0xACA1 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x397 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x74C9D255 GT PUSH2 0x1DC JUMPI DUP1 PUSH4 0xB90CD2FB GT PUSH2 0x102 JUMPI DUP1 PUSH4 0xD9BCA372 GT PUSH2 0xA0 JUMPI DUP1 PUSH4 0xF1ED7FA4 GT PUSH2 0x6F JUMPI DUP1 PUSH4 0xF1ED7FA4 EQ PUSH2 0xB02 JUMPI DUP1 PUSH4 0xF3868E9C EQ PUSH2 0x5EC JUMPI DUP1 PUSH4 0xF5A4994D EQ PUSH2 0xB22 JUMPI DUP1 PUSH4 0xFC9FE41B EQ PUSH2 0xB42 JUMPI PUSH2 0x397 JUMP JUMPDEST DUP1 PUSH4 0xD9BCA372 EQ PUSH2 0xA82 JUMPI DUP1 PUSH4 0xDDD5AA28 EQ PUSH2 0xAA2 JUMPI DUP1 PUSH4 0xE78AC045 EQ PUSH2 0xAC2 JUMPI DUP1 PUSH4 0xE8E4AF09 EQ PUSH2 0xAE2 JUMPI PUSH2 0x397 JUMP JUMPDEST DUP1 PUSH4 0xC8319084 GT PUSH2 0xDC JUMPI DUP1 PUSH4 0xC8319084 EQ PUSH2 0xA0D JUMPI DUP1 PUSH4 0xC8C74A37 EQ PUSH2 0xA2D JUMPI DUP1 PUSH4 0xCC1621C9 EQ PUSH2 0xA4D JUMPI DUP1 PUSH4 0xCD72D789 EQ PUSH2 0xA6D JUMPI PUSH2 0x397 JUMP JUMPDEST DUP1 PUSH4 0xB90CD2FB EQ PUSH2 0x9AD JUMPI DUP1 PUSH4 0xBD71ECF6 EQ PUSH2 0x9CD JUMPI DUP1 PUSH4 0xC25C4138 EQ PUSH2 0x9ED JUMPI PUSH2 0x397 JUMP JUMPDEST DUP1 PUSH4 0x9E3F05C3 GT PUSH2 0x17A JUMPI DUP1 PUSH4 0xA4698417 GT PUSH2 0x149 JUMPI DUP1 PUSH4 0xA4698417 EQ PUSH2 0x91F JUMPI DUP1 PUSH4 0xA75E744B EQ PUSH2 0x93F JUMPI DUP1 PUSH4 0xA76BBEC4 EQ PUSH2 0x95F JUMPI DUP1 PUSH4 0xADC636BF EQ PUSH2 0x97F JUMPI PUSH2 0x397 JUMP JUMPDEST DUP1 PUSH4 0x9E3F05C3 EQ PUSH2 0x89B JUMPI DUP1 PUSH4 0x9EA0FF13 EQ PUSH2 0x8CA JUMPI DUP1 PUSH4 0xA0295B8B EQ PUSH2 0x8EA JUMPI DUP1 PUSH4 0xA2D10BA5 EQ PUSH2 0x90A JUMPI PUSH2 0x397 JUMP JUMPDEST DUP1 PUSH4 0x8E5A0E07 GT PUSH2 0x1B6 JUMPI DUP1 PUSH4 0x8E5A0E07 EQ PUSH2 0x80C JUMPI DUP1 PUSH4 0x9209483B EQ PUSH2 0x83B JUMPI DUP1 PUSH4 0x98777748 EQ PUSH2 0x85B JUMPI DUP1 PUSH4 0x9BF3EE35 EQ PUSH2 0x87B JUMPI PUSH2 0x397 JUMP JUMPDEST DUP1 PUSH4 0x74C9D255 EQ PUSH2 0x7AC JUMPI DUP1 PUSH4 0x7F7F4F13 EQ PUSH2 0x7CC JUMPI DUP1 PUSH4 0x8B6D7B44 EQ PUSH2 0x7EC JUMPI PUSH2 0x397 JUMP JUMPDEST DUP1 PUSH4 0x3105FEC1 GT PUSH2 0x2C1 JUMPI DUP1 PUSH4 0x51BE4EAA GT PUSH2 0x25F JUMPI DUP1 PUSH4 0x5D5B674F GT PUSH2 0x22E JUMPI DUP1 PUSH4 0x5D5B674F EQ PUSH2 0x71F JUMPI DUP1 PUSH4 0x66A1AC6B EQ PUSH2 0x73F JUMPI DUP1 PUSH4 0x68BE3CF2 EQ PUSH2 0x75F JUMPI DUP1 PUSH4 0x706E2F9B EQ PUSH2 0x78C JUMPI PUSH2 0x397 JUMP JUMPDEST DUP1 PUSH4 0x51BE4EAA EQ PUSH2 0x69B JUMPI DUP1 PUSH4 0x5505000A EQ PUSH2 0x6B0 JUMPI DUP1 PUSH4 0x57494B1D EQ PUSH2 0x6DF JUMPI DUP1 PUSH4 0x5AAE4E53 EQ PUSH2 0x6FF JUMPI PUSH2 0x397 JUMP JUMPDEST DUP1 PUSH4 0x40BC03AE GT PUSH2 0x29B JUMPI DUP1 PUSH4 0x40BC03AE EQ PUSH2 0x60C JUMPI DUP1 PUSH4 0x42CBB15C EQ PUSH2 0x62C JUMPI DUP1 PUSH4 0x494569DB EQ PUSH2 0x64E JUMPI DUP1 PUSH4 0x4EDFB5B2 EQ PUSH2 0x66E JUMPI PUSH2 0x397 JUMP JUMPDEST DUP1 PUSH4 0x3105FEC1 EQ PUSH2 0x5AC JUMPI DUP1 PUSH4 0x31268657 EQ PUSH2 0x5CC JUMPI DUP1 PUSH4 0x36052391 EQ PUSH2 0x5EC JUMPI PUSH2 0x397 JUMP JUMPDEST DUP1 PUSH4 0x2339078F GT PUSH2 0x339 JUMPI DUP1 PUSH4 0x29FA4AA0 GT PUSH2 0x308 JUMPI DUP1 PUSH4 0x29FA4AA0 EQ PUSH2 0x51D JUMPI DUP1 PUSH4 0x2AA64319 EQ PUSH2 0x53D JUMPI DUP1 PUSH4 0x2D753AA4 EQ PUSH2 0x56C JUMPI DUP1 PUSH4 0x30D6570D EQ PUSH2 0x58C JUMPI PUSH2 0x397 JUMP JUMPDEST DUP1 PUSH4 0x2339078F EQ PUSH2 0x4A8 JUMPI DUP1 PUSH4 0x252322B3 EQ PUSH2 0x4C8 JUMPI DUP1 PUSH4 0x2681F7E4 EQ PUSH2 0x4E8 JUMPI DUP1 PUSH4 0x281E3432 EQ PUSH2 0x4FD JUMPI PUSH2 0x397 JUMP JUMPDEST DUP1 PUSH4 0x11F2928B GT PUSH2 0x375 JUMPI DUP1 PUSH4 0x11F2928B EQ PUSH2 0x420 JUMPI DUP1 PUSH4 0x149DAB0E EQ PUSH2 0x42A JUMPI DUP1 PUSH4 0x16279055 EQ PUSH2 0x459 JUMPI DUP1 PUSH4 0x1694505E EQ PUSH2 0x486 JUMPI PUSH2 0x397 JUMP JUMPDEST DUP1 PUSH4 0x34EAFF9 EQ PUSH2 0x39C JUMPI DUP1 PUSH4 0x496D5DC EQ PUSH2 0x3D2 JUMPI DUP1 PUSH4 0x1022742B EQ PUSH2 0x400 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3BC PUSH2 0x3B7 CALLDATASIZE PUSH1 0x4 PUSH2 0x9386 JUMP JUMPDEST PUSH2 0xB62 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3C9 SWAP2 SWAP1 PUSH2 0xA62F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3F2 PUSH2 0x3ED CALLDATASIZE PUSH1 0x4 PUSH2 0x9448 JUMP JUMPDEST PUSH2 0xD84 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3C9 SWAP3 SWAP2 SWAP1 PUSH2 0xA4F4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x40C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3BC PUSH2 0x41B CALLDATASIZE PUSH1 0x4 PUSH2 0x984C JUMP JUMPDEST PUSH2 0xF2A JUMP JUMPDEST PUSH2 0x428 PUSH2 0x109D JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x436 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x44A PUSH2 0x445 CALLDATASIZE PUSH1 0x4 PUSH2 0x9ACD JUMP JUMPDEST PUSH2 0x10E0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3C9 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA372 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x465 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x479 PUSH2 0x474 CALLDATASIZE PUSH1 0x4 PUSH2 0x911F JUMP JUMPDEST PUSH2 0x1240 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3C9 SWAP2 SWAP1 PUSH2 0xA642 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x492 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x49B PUSH2 0x124A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3C9 SWAP2 SWAP1 PUSH2 0xA1E1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3BC PUSH2 0x4C3 CALLDATASIZE PUSH1 0x4 PUSH2 0x9A4E JUMP JUMPDEST PUSH2 0x1259 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3BC PUSH2 0x4E3 CALLDATASIZE PUSH1 0x4 PUSH2 0x9386 JUMP JUMPDEST PUSH2 0x1480 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x49B PUSH2 0x164A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x509 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3BC PUSH2 0x518 CALLDATASIZE PUSH1 0x4 PUSH2 0x9D63 JUMP JUMPDEST PUSH2 0x1659 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x529 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3BC PUSH2 0x538 CALLDATASIZE PUSH1 0x4 PUSH2 0x9B86 JUMP JUMPDEST PUSH2 0x18AE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x549 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x55D PUSH2 0x558 CALLDATASIZE PUSH1 0x4 PUSH2 0x9BDF JUMP JUMPDEST PUSH2 0x191D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3C9 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA64D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x578 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3BC PUSH2 0x587 CALLDATASIZE PUSH1 0x4 PUSH2 0x9301 JUMP JUMPDEST PUSH2 0x1BFA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x598 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3BC PUSH2 0x5A7 CALLDATASIZE PUSH1 0x4 PUSH2 0x9386 JUMP JUMPDEST PUSH2 0x1D83 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5B8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3BC PUSH2 0x5C7 CALLDATASIZE PUSH1 0x4 PUSH2 0x9448 JUMP JUMPDEST PUSH2 0x1EF7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5D8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x428 PUSH2 0x5E7 CALLDATASIZE PUSH1 0x4 PUSH2 0x94F3 JUMP JUMPDEST PUSH2 0x207B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5F8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3BC PUSH2 0x607 CALLDATASIZE PUSH1 0x4 PUSH2 0x9BDF JUMP JUMPDEST PUSH2 0x20E3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x618 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3BC PUSH2 0x627 CALLDATASIZE PUSH1 0x4 PUSH2 0x9B86 JUMP JUMPDEST PUSH2 0x2175 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x638 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x641 PUSH2 0x22F6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3C9 SWAP2 SWAP1 PUSH2 0xA679 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x65A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3F2 PUSH2 0x669 CALLDATASIZE PUSH1 0x4 PUSH2 0x9448 JUMP JUMPDEST PUSH2 0x22FA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x67A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x68E PUSH2 0x689 CALLDATASIZE PUSH1 0x4 PUSH2 0x9CC5 JUMP JUMPDEST PUSH2 0x2486 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3C9 SWAP2 SWAP1 PUSH2 0xA69B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x641 PUSH2 0x2704 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6BC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x6D0 PUSH2 0x6CB CALLDATASIZE PUSH1 0x4 PUSH2 0x99B7 JUMP JUMPDEST PUSH2 0x270C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3C9 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA53B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6EB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3BC PUSH2 0x6FA CALLDATASIZE PUSH1 0x4 PUSH2 0x9386 JUMP JUMPDEST PUSH2 0x2A01 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x70B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x6D0 PUSH2 0x71A CALLDATASIZE PUSH1 0x4 PUSH2 0x99B7 JUMP JUMPDEST PUSH2 0x2F78 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x72B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3BC PUSH2 0x73A CALLDATASIZE PUSH1 0x4 PUSH2 0x9386 JUMP JUMPDEST PUSH2 0x325D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x74B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3BC PUSH2 0x75A CALLDATASIZE PUSH1 0x4 PUSH2 0x984C JUMP JUMPDEST PUSH2 0x32C3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x76B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x77F PUSH2 0x77A CALLDATASIZE PUSH1 0x4 PUSH2 0x94F3 JUMP JUMPDEST PUSH2 0x3378 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3C9 SWAP2 SWAP1 PUSH2 0xA5BA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x798 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3BC PUSH2 0x7A7 CALLDATASIZE PUSH1 0x4 PUSH2 0x96FD JUMP JUMPDEST PUSH2 0x34D9 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7B8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x44A PUSH2 0x7C7 CALLDATASIZE PUSH1 0x4 PUSH2 0x9ACD JUMP JUMPDEST PUSH2 0x35CB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7D8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3BC PUSH2 0x7E7 CALLDATASIZE PUSH1 0x4 PUSH2 0x9D63 JUMP JUMPDEST PUSH2 0x35DA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7F8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3BC PUSH2 0x807 CALLDATASIZE PUSH1 0x4 PUSH2 0x9B86 JUMP JUMPDEST PUSH2 0x3827 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x818 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x82C PUSH2 0x827 CALLDATASIZE PUSH1 0x4 PUSH2 0x9694 JUMP JUMPDEST PUSH2 0x3B8A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3C9 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA92B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x847 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3BC PUSH2 0x856 CALLDATASIZE PUSH1 0x4 PUSH2 0x9B86 JUMP JUMPDEST PUSH2 0x3DA0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x867 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3BC PUSH2 0x876 CALLDATASIZE PUSH1 0x4 PUSH2 0x9386 JUMP JUMPDEST PUSH2 0x3FA0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x887 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x641 PUSH2 0x896 CALLDATASIZE PUSH1 0x4 PUSH2 0x9D23 JUMP JUMPDEST PUSH2 0x44D9 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x8BB PUSH2 0x8B6 CALLDATASIZE PUSH1 0x4 PUSH2 0x9C0E JUMP JUMPDEST PUSH2 0x452A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3C9 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA682 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8D6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x641 PUSH2 0x8E5 CALLDATASIZE PUSH1 0x4 PUSH2 0x93F8 JUMP JUMPDEST PUSH2 0x4650 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8F6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3BC PUSH2 0x905 CALLDATASIZE PUSH1 0x4 PUSH2 0x9A4E JUMP JUMPDEST PUSH2 0x4866 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x916 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x49B PUSH2 0x4A62 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x92B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3BC PUSH2 0x93A CALLDATASIZE PUSH1 0x4 PUSH2 0x9386 JUMP JUMPDEST PUSH2 0x4A71 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x94B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x55D PUSH2 0x95A CALLDATASIZE PUSH1 0x4 PUSH2 0x94BA JUMP JUMPDEST PUSH2 0x4BC6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x96B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3BC PUSH2 0x97A CALLDATASIZE PUSH1 0x4 PUSH2 0x9386 JUMP JUMPDEST PUSH2 0x4D03 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x98B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x99F PUSH2 0x99A CALLDATASIZE PUSH1 0x4 PUSH2 0x9386 JUMP JUMPDEST PUSH2 0x4F12 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3C9 SWAP3 SWAP2 SWAP1 PUSH2 0xA6E9 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x9B9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3BC PUSH2 0x9C8 CALLDATASIZE PUSH1 0x4 PUSH2 0x9386 JUMP JUMPDEST PUSH2 0x5062 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x9D9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3BC PUSH2 0x9E8 CALLDATASIZE PUSH1 0x4 PUSH2 0x972F JUMP JUMPDEST PUSH2 0x50C8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x9F9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3BC PUSH2 0xA08 CALLDATASIZE PUSH1 0x4 PUSH2 0x9386 JUMP JUMPDEST PUSH2 0x51C4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA19 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3BC PUSH2 0xA28 CALLDATASIZE PUSH1 0x4 PUSH2 0x9386 JUMP JUMPDEST PUSH2 0x522A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA39 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3BC PUSH2 0xA48 CALLDATASIZE PUSH1 0x4 PUSH2 0x9448 JUMP JUMPDEST PUSH2 0x53E7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA59 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x8BB PUSH2 0xA68 CALLDATASIZE PUSH1 0x4 PUSH2 0x9C0E JUMP JUMPDEST PUSH2 0x5553 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA79 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x49B PUSH2 0x5739 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA8E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x55D PUSH2 0xA9D CALLDATASIZE PUSH1 0x4 PUSH2 0x94BA JUMP JUMPDEST PUSH2 0x5751 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xAAE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x55D PUSH2 0xABD CALLDATASIZE PUSH1 0x4 PUSH2 0x9BDF JUMP JUMPDEST PUSH2 0x5840 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xACE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3BC PUSH2 0xADD CALLDATASIZE PUSH1 0x4 PUSH2 0x9773 JUMP JUMPDEST PUSH2 0x5AD3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xAEE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3BC PUSH2 0xAFD CALLDATASIZE PUSH1 0x4 PUSH2 0x9386 JUMP JUMPDEST PUSH2 0x5BC8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB0E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x641 PUSH2 0xB1D CALLDATASIZE PUSH1 0x4 PUSH2 0x9C7E JUMP JUMPDEST PUSH2 0x5CFB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB2E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x99F PUSH2 0xB3D CALLDATASIZE PUSH1 0x4 PUSH2 0x9386 JUMP JUMPDEST PUSH2 0x5E9A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB4E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x82C PUSH2 0xB5D CALLDATASIZE PUSH1 0x4 PUSH2 0x9694 JUMP JUMPDEST PUSH2 0x5F86 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0xB7D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xBA7 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x182DF0F5 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xBE5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xBF9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xC1D SWAP2 SWAP1 PUSH2 0x996D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x313CE567 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xC5A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xC6E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xC92 SWAP2 SWAP1 PUSH2 0x9F67 JUMP JUMPDEST PUSH1 0xFF AND SWAP1 POP DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0xD0A JUMPI PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xD04 JUMPI DUP2 PUSH1 0xA EXP PUSH5 0x2540BE400 MUL DUP4 DUP8 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xCD4 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MUL DUP2 PUSH2 0xCE4 JUMPI INVALID JUMPDEST DIV DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xCF1 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0xCB4 JUMP JUMPDEST POP PUSH2 0xD79 JUMP JUMPDEST DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0xD79 JUMPI PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xD77 JUMPI DUP3 DUP3 PUSH1 0xA EXP PUSH5 0x2540BE400 DUP9 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xD46 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MUL MUL DUP2 PUSH2 0xD57 JUMPI INVALID JUMPDEST DIV DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xD64 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0xD27 JUMP JUMPDEST POP JUMPDEST POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP2 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0xDA1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xDCB JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH2 0xDD8 DUP7 DUP7 PUSH2 0x619B JUMP JUMPDEST SWAP3 POP DUP3 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0xDEA JUMPI POP PUSH2 0xF22 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xF1F JUMPI DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xA8312B1D PUSH3 0x249F0 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xE14 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP11 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE3C SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xAADE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xE54 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0xE8A JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0xE87 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x991B JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0xEC4 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0xEB8 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xEBD JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP PUSH2 0xF1F JUMP JUMPDEST DUP1 PUSH1 0x1 DUP9 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0xED4 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xEE8 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xF00 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0xF16 JUMPI POP PUSH2 0xF1F JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0xDED JUMP JUMPDEST POP POP JUMPDEST SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0xF43 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xF6D JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 EQ PUSH2 0x1095 JUMPI ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x9BF3EE35 PUSH3 0x30D40 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xF9A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0xFAE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xFD5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA9D0 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xFED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x101E JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x101B SWAP2 DUP2 ADD SWAP1 PUSH2 0x996D JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1072 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x104C JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1051 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1060 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP PUSH2 0x108D JUMP JUMPDEST DUP1 DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x107F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP JUMPDEST PUSH1 0x1 ADD PUSH2 0xF73 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xE9DB8717BC5DFB20AAF538B4A5A02B7791FF430C SWAP1 CALLVALUE DUP1 ISZERO PUSH2 0x8FC MUL SWAP2 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x10DD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP1 DUP7 PUSH1 0x20 ADD MLOAD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x10F8 JUMPI PUSH2 0x1236 JUMP JUMPDEST PUSH2 0x1104 DUP8 DUP8 DUP8 DUP8 PUSH2 0x648B JUMP JUMPDEST DUP6 MLOAD SWAP2 SWAP5 POP SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x1120 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x114A JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0x1234 JUMPI DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x7F9C0ECD PUSH3 0x493E0 DUP6 DUP9 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x1179 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x119E SWAP3 SWAP2 SWAP1 PUSH2 0xA519 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x11B6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x11E7 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x11E4 SWAP2 DUP2 ADD SWAP1 PUSH2 0x996D JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x11F0 JUMPI PUSH2 0x1234 JUMP JUMPDEST DUP1 DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x11FD JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1215 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x122B JUMPI POP PUSH2 0x1234 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x1150 JUMP JUMPDEST POP JUMPDEST SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST DUP1 EXTCODESIZE ISZERO ISZERO JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1265 DUP4 DUP6 PUSH2 0x66BD JUMP JUMPDEST PUSH1 0x20 DUP6 ADD MLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x2 DUP1 DUP3 MSTORE PUSH1 0x60 DUP3 DUP2 ADD SWAP1 SWAP4 MSTORE DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP6 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x129B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP DUP5 DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x12C9 JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE DUP4 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x12F9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1323 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP4 POP PUSH2 0x132E PUSH2 0x88C7 JUMP JUMPDEST PUSH2 0x1336 PUSH2 0x66FC JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x1473 JUMPI PUSH1 0x60 PUSH2 0x1362 DUP12 DUP10 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x1355 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x672B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x7C268337 PUSH1 0xE1 SHL DUP2 MSTORE SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND SWAP1 PUSH4 0xF84D066E SWAP1 PUSH2 0x1398 SWAP1 PUSH1 0x0 SWAP1 DUP6 SWAP1 DUP11 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0xA73C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x13B2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x13E7 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x13E4 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x97C9 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1422 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x1415 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x141A JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP POP PUSH2 0x1473 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x1431 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 NOT MUL SWAP1 POP PUSH1 0x0 DUP2 SGT PUSH2 0x144F JUMPI POP POP POP PUSH2 0x1473 JUMP JUMPDEST DUP1 DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x145C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP POP POP PUSH1 0x1 ADD PUSH2 0x133B JUMP JUMPDEST POP POP POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x148C DUP4 DUP6 PUSH2 0x66BD JUMP JUMPDEST DUP2 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x14A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x14CE JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND ISZERO PUSH2 0x14F1 JUMPI PUSH2 0x14EC DUP8 DUP8 PUSH2 0x67BD JUMP JUMPDEST PUSH2 0x14F4 JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND ISZERO PUSH2 0x1516 JUMPI PUSH2 0x1511 DUP9 DUP8 PUSH2 0x67BD JUMP JUMPDEST PUSH2 0x1519 JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xD77 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH2 0x157C JUMPI PUSH2 0x155B DUP5 PUSH4 0x2640F62C PUSH1 0xE0 SHL DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x154E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x683C JUMP JUMPDEST DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x1567 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP4 POP DUP3 DUP2 MSTORE POP POP POP PUSH2 0x1616 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND PUSH2 0x15A2 JUMPI PUSH2 0x155B DUP4 PUSH4 0x59E94862 PUSH1 0xE0 SHL DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x154E JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH2 0x15BC DUP5 PUSH4 0x59E94862 PUSH1 0xE0 SHL DUP11 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x154E JUMPI INVALID JUMPDEST SWAP3 POP SWAP1 POP DUP1 ISZERO PUSH2 0x15F9 JUMPI PUSH2 0x15D8 DUP6 PUSH4 0x9903D8B PUSH1 0xE2 SHL DUP4 PUSH2 0x683C JUMP JUMPDEST DUP9 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x15E4 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP5 POP DUP3 DUP2 MSTORE POP POP POP PUSH2 0x1614 JUMP JUMPDEST PUSH1 0x0 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x1607 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP JUMPDEST POP JUMPDEST DUP1 ISZERO DUP1 PUSH2 0x1636 JUMPI POP DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x162A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ JUMPDEST ISZERO PUSH2 0x1641 JUMPI POP PUSH2 0xD77 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x151E JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1665 DUP4 DUP6 PUSH2 0x66BD JUMP JUMPDEST PUSH1 0x0 DUP6 PUSH1 0x0 ADD MLOAD SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x36569E77 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x16A9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x16BD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x16E1 SWAP2 SWAP1 PUSH2 0x913B JUMP JUMPDEST DUP5 MLOAD SWAP1 SWAP2 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x16FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1726 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP4 POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xF4B9FA75 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1762 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1776 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x179A SWAP2 SWAP1 PUSH2 0x913B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO DUP1 ISZERO PUSH2 0x183D JUMPI POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xF4B9FA75 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x17EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1803 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1827 SWAP2 SWAP1 PUSH2 0x913B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x184A JUMPI POP POP POP PUSH2 0x18A6 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xD77 JUMPI PUSH1 0x0 PUSH2 0x1878 DUP11 DUP10 DUP12 DUP11 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x1869 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP10 DUP10 PUSH2 0x691F JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x1885 JUMPI POP PUSH2 0xD77 JUMP JUMPDEST DUP1 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1892 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP PUSH1 0x1 ADD PUSH2 0x184D JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 DUP2 ADD SWAP1 SWAP3 MSTORE PUSH2 0x1914 SWAP1 DUP1 PUSH2 0x18CD DUP7 DUP10 PUSH1 0x80 DUP5 ADD PUSH2 0xA813 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x18F4 SWAP3 SWAP2 SWAP1 PUSH2 0xA813 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x6BE0 DUP2 MSTORE POP DUP4 PUSH2 0x6D13 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 PUSH2 0x192C DUP6 DUP8 PUSH2 0x66BD JUMP JUMPDEST DUP4 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x1944 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x196E JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP DUP9 MLOAD PUSH1 0x40 MLOAD PUSH4 0x939D863 PUSH1 0xE1 SHL DUP2 MSTORE SWAP2 SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x1273B0C6 SWAP1 PUSH2 0x19A1 SWAP1 DUP11 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0xA20E JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x19B9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x19CD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x19F1 SWAP2 SWAP1 PUSH2 0x913B JUMP JUMPDEST SWAP3 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND ISZERO PUSH2 0x1A0F JUMPI POP PUSH1 0x1 SWAP4 POP DUP7 PUSH2 0x1AAE JUMP JUMPDEST DUP9 MLOAD PUSH1 0x40 MLOAD PUSH4 0x939D863 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x1273B0C6 SWAP1 PUSH2 0x1A40 SWAP1 DUP11 SWAP1 DUP13 SWAP1 PUSH1 0x4 ADD PUSH2 0xA20E JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1A58 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1A6C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1A90 SWAP2 SWAP1 PUSH2 0x913B JUMP JUMPDEST SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x1AA7 JUMPI POP POP PUSH2 0x1236 JUMP JUMPDEST POP PUSH1 0x0 SWAP4 POP DUP6 JUMPDEST DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDD58B41C PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1AE7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1AFB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1B1F SWAP2 SWAP1 PUSH2 0x994D JUMP JUMPDEST PUSH2 0x1B2A JUMPI POP POP PUSH2 0x1236 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x1BED JUMPI PUSH1 0x0 PUSH2 0x1BA7 DUP11 DUP8 DUP6 DUP15 PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1B55 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA228 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP11 DUP9 DUP7 DUP16 PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1B7F SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA228 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP11 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x1B9A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x6F25 JUMP JUMPDEST SWAP1 POP DUP1 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1BB6 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1BCE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x1BE4 JUMPI POP PUSH2 0x1BED JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x1B2D JUMP JUMPDEST POP POP POP SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x1C15 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1C3F JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH2 0x1C56 JUMPI POP PUSH2 0x1914 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1D78 JUMPI PUSH1 0x0 PUSH1 0x60 DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH3 0x61A80 PUSH4 0x6E79E133 PUSH1 0xE0 SHL DUP12 DUP12 DUP12 DUP12 DUP10 DUP2 MLOAD DUP2 LT PUSH2 0x1C8A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1CA5 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA287 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x1CE3 SWAP2 SWAP1 PUSH2 0xA1C5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1D1F JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1D24 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x1D48 JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x1D45 SWAP2 SWAP1 PUSH2 0x996D JUMP JUMPDEST SWAP1 POP JUMPDEST DUP1 PUSH2 0x1D55 JUMPI POP POP POP PUSH2 0x1D78 JUMP JUMPDEST DUP1 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x1D62 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x1C59 JUMP JUMPDEST POP POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1D8F DUP4 DUP6 PUSH2 0x66BD JUMP JUMPDEST DUP2 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x1DA7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1DD1 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1EED JUMPI DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x72EA9076 PUSH3 0xC3500 DUP9 DUP9 DUP9 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x1E00 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1E26 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA309 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1E3E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x1E6F JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x1E6C SWAP2 DUP2 ADD SWAP1 PUSH2 0x996D JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1EA9 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x1E9D JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1EA2 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP PUSH2 0x1EED JUMP JUMPDEST DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1EB6 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1ECE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x1EE4 JUMPI POP PUSH2 0x1EED JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x1DD7 JUMP JUMPDEST POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x1F12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1F3C JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x2072 JUMPI DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD06CA61F PUSH3 0x249F0 DUP7 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x1F69 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F8F SWAP3 SWAP2 SWAP1 PUSH2 0xAAC5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1FA7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x1FDD JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x1FDA SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x991B JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x2017 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x200B JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2010 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP PUSH2 0x2072 JUMP JUMPDEST DUP1 PUSH1 0x1 DUP8 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x2027 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x203B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2053 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x2069 JUMPI POP PUSH2 0x2072 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x1F42 JUMP JUMPDEST POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH4 0x31268657 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x31268657 SWAP1 PUSH2 0x20AD SWAP1 DUP6 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0xA4A6 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x20C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x20DB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x20EF DUP4 DUP6 PUSH2 0x66BD JUMP JUMPDEST DUP5 PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO DUP1 PUSH2 0x2121 JUMPI POP DUP5 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND SWAP2 AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x1095 JUMPI DUP2 MLOAD PUSH1 0x60 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x2140 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x216A JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP3 POP PUSH2 0x18A6 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x2190 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x21BA JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1EED JUMPI PUSH1 0x0 PUSH1 0x60 DUP9 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH3 0x1E8480 DUP11 PUSH1 0x20 ADD MLOAD DUP11 DUP11 DUP11 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x21F1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x220B SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA7F5 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x2249 SWAP2 SWAP1 PUSH2 0xA1C5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2285 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x228A JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x22AE JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x22AB SWAP2 SWAP1 PUSH2 0x996D JUMP JUMPDEST SWAP1 POP JUMPDEST DUP1 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x22BB JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x22D3 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x22EB JUMPI POP POP POP PUSH2 0x1EED JUMP JUMPDEST POP POP POP PUSH1 0x1 ADD PUSH2 0x21C0 JUMP JUMPDEST NUMBER SWAP1 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP2 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x2317 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2341 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH2 0x234E DUP7 DUP7 PUSH2 0x619B JUMP JUMPDEST SWAP3 POP DUP3 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x2360 JUMPI POP PUSH2 0xF22 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xF1F JUMPI DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x9E269B68 PUSH3 0x249F0 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x238A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP11 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x23B2 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xAADE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x23CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x2400 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x23FD SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x991B JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x242E JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0xEB8 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xEBD JUMP JUMPDEST DUP1 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x243B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x244F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2467 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x247D JUMPI POP PUSH2 0xF1F JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x2363 JUMP JUMPDEST PUSH1 0x20 DUP5 DUP2 ADD MLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP4 DUP5 SWAP3 SWAP1 DUP3 DUP2 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP6 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x24BD JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x60 PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x24F5 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP8 PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x25E6 JUMPI PUSH1 0x40 MLOAD PUSH4 0x81EFCBDD PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x81EFCBDD SWAP1 PUSH3 0x7A120 SWAP1 PUSH2 0x254E SWAP1 DUP10 SWAP1 PUSH1 0x1 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0xA3A8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2566 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x259C JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x2599 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x9985 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x25D6 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x25CA JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x25CF JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP PUSH2 0x25E1 JUMP JUMPDEST SWAP4 POP PUSH2 0x18A6 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0xD79 JUMP JUMPDEST DUP8 PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x263C JUMPI PUSH1 0x40 MLOAD PUSH4 0x61E597F9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x61E597F9 SWAP1 PUSH3 0x7A120 SWAP1 PUSH2 0x254E SWAP1 DUP11 SWAP1 PUSH1 0x1 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0xA3A8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x2B9A6CD PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x5734D9A SWAP1 PUSH3 0x7A120 SWAP1 PUSH2 0x267C SWAP1 DUP11 SWAP1 PUSH1 0x1 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP14 SWAP1 DUP5 SWAP1 DUP5 SWAP1 DUP5 SWAP1 PUSH1 0x4 ADD PUSH2 0xA3EB JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2694 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x26CA JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x26C7 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x9985 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x25D6 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x26F8 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x26FD JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP PUSH2 0xD79 JUMP JUMPDEST PUSH1 0x0 GAS SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH1 0x60 DUP1 PUSH2 0x278E DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xC45A0155 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x274E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2762 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2786 SWAP2 SWAP1 PUSH2 0x913B JUMP JUMPDEST DUP8 PUSH1 0x0 PUSH2 0x705E JUMP JUMPDEST SWAP1 POP DUP5 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x27A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x27D1 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP DUP5 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x27EB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x281F JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x280A JUMPI SWAP1 POP JUMPDEST POP SWAP4 POP DUP5 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x2839 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2863 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP3 POP PUSH1 0x0 JUMPDEST DUP6 MLOAD DUP2 LT ISZERO PUSH2 0x29F6 JUMPI PUSH1 0x0 DUP1 JUMPDEST DUP4 MLOAD DUP2 LT ISZERO PUSH2 0x2988 JUMPI PUSH1 0x60 PUSH2 0x289E DUP11 DUP7 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2891 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x74FE JUMP JUMPDEST SWAP1 POP DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xCDCA1753 PUSH3 0xAAE60 DUP4 DUP13 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x28C0 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x28E5 SWAP3 SWAP2 SWAP1 PUSH2 0xA6AE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x28FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP8 CALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x2935 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x2932 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x9DFE JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x293E JUMPI PUSH2 0x297F JUMP JUMPDEST DUP4 DUP8 GT PUSH2 0x297A JUMPI DUP4 SWAP7 POP DUP5 DUP13 DUP10 DUP2 MLOAD DUP2 LT PUSH2 0x2955 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP1 DUP12 DUP10 DUP2 MLOAD DUP2 LT PUSH2 0x296D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP JUMPDEST POP POP POP POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x2876 JUMP JUMPDEST POP DUP1 PUSH2 0x29D5 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x29AA JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH1 0x0 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x29C3 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP PUSH2 0x29F6 JUMP JUMPDEST DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x29E2 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP PUSH1 0x1 ADD PUSH2 0x2869 JUMP JUMPDEST POP POP SWAP4 POP SWAP4 POP SWAP4 SWAP1 POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP6 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x2A1E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2A48 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0xBCDED89 PUSH1 0xE2 SHL DUP2 MSTORE SWAP1 SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x2F37B624 SWAP1 PUSH2 0x2A78 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0xA1E1 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2A90 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2AA4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2AC8 SWAP2 SWAP1 PUSH2 0x994D JUMP JUMPDEST ISZERO DUP1 PUSH2 0x2B4D JUMPI POP PUSH1 0x40 MLOAD PUSH4 0xBCDED89 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x2F37B624 SWAP1 PUSH2 0x2AFB SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0xA1E1 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2B13 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2B27 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2B4B SWAP2 SWAP1 PUSH2 0x994D JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x2B59 JUMPI POP POP PUSH2 0x18A6 JUMP JUMPDEST PUSH2 0x2B61 PUSH2 0x88EE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xF8B2CB4F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0xF8B2CB4F SWAP1 PUSH2 0x2B8D SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0xA1E1 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2BA5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2BB9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2BDD SWAP2 SWAP1 PUSH2 0x996D JUMP JUMPDEST DUP2 MSTORE PUSH1 0x40 MLOAD PUSH4 0xF8B2CB4F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0xF8B2CB4F SWAP1 PUSH2 0x2C0B SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0xA1E1 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2C23 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2C37 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2C5B SWAP2 SWAP1 PUSH2 0x996D JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 MLOAD PUSH4 0x4A46C673 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x948D8CE6 SWAP1 PUSH2 0x2C8C SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0xA1E1 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2CA4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2CB8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2CDC SWAP2 SWAP1 PUSH2 0x996D JUMP JUMPDEST PUSH1 0x40 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE MLOAD PUSH4 0x4A46C673 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x948D8CE6 SWAP1 PUSH2 0x2D0F SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0xA1E1 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2D27 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2D3B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2D5F SWAP2 SWAP1 PUSH2 0x996D JUMP JUMPDEST DUP2 PUSH1 0x60 ADD DUP2 DUP2 MSTORE POP POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD4CADF68 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2DA1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2DB5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2DD9 SWAP2 SWAP1 PUSH2 0x996D JUMP JUMPDEST PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0xD77 JUMPI PUSH2 0x2E0C DUP3 PUSH1 0x20 ADD MLOAD PUSH1 0x3 PUSH8 0xDE0B6B3A7640000 DUP2 PUSH2 0x2E03 JUMPI INVALID JUMPDEST DIV PUSH1 0x1 ADD PUSH2 0x7659 JUMP JUMPDEST DUP7 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2E18 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD GT ISZERO PUSH2 0x2E2B JUMPI PUSH2 0xD77 JUMP JUMPDEST DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xF8D6AED4 PUSH3 0x493E0 DUP5 PUSH1 0x0 ADD MLOAD DUP6 PUSH1 0x40 ADD MLOAD DUP7 PUSH1 0x20 ADD MLOAD DUP8 PUSH1 0x60 ADD MLOAD DUP13 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x2E5E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP10 PUSH1 0x80 ADD MLOAD PUSH1 0x40 MLOAD DUP9 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2E8C SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xAB09 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2EA4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x2ED5 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x2ED2 SWAP2 DUP2 ADD SWAP1 PUSH2 0x996D JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x2F0F JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x2F03 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2F08 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP PUSH2 0xD77 JUMP JUMPDEST DUP3 MLOAD PUSH2 0x2F27 SWAP1 PUSH1 0x2 PUSH8 0xDE0B6B3A7640000 JUMPDEST DIV PUSH2 0x7659 JUMP JUMPDEST DUP2 GT ISZERO PUSH2 0x2F34 JUMPI POP PUSH2 0xD77 JUMP JUMPDEST DUP1 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x2F41 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2F59 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x2F6F JUMPI POP PUSH2 0xD77 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x2DE1 JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH1 0x60 DUP1 PUSH2 0x2FBA DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xC45A0155 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x274E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP PUSH1 0x60 PUSH2 0x2FC7 DUP8 PUSH2 0x76B6 JUMP JUMPDEST SWAP1 POP DUP6 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x2FE0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x300A JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP3 POP DUP6 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x3024 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x3058 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x3043 JUMPI SWAP1 POP JUMPDEST POP SWAP5 POP DUP6 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x3072 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x309C JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP4 POP PUSH1 0x0 JUMPDEST DUP7 MLOAD DUP2 LT ISZERO PUSH2 0x3251 JUMPI PUSH1 0x0 DUP1 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x31E3 JUMPI PUSH1 0x60 PUSH2 0x30DF DUP6 PUSH2 0x30DA DUP9 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x30CD JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x774E JUMP JUMPDEST PUSH2 0x74FE JUMP JUMPDEST SWAP1 POP DUP12 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x2F80BB1D PUSH3 0xAAE60 DUP4 DUP14 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x3101 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3126 SWAP3 SWAP2 SWAP1 PUSH2 0xA6AE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3140 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP8 CALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x3176 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x3173 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x9DFE JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x317F JUMPI PUSH2 0x31DA JUMP JUMPDEST DUP7 ISZERO DUP1 PUSH2 0x318C JUMPI POP DUP4 DUP8 LT ISZERO JUMPDEST ISZERO PUSH2 0x31D5 JUMPI DUP4 SWAP7 POP PUSH2 0x31A4 DUP16 DUP12 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x2891 JUMPI INVALID JUMPDEST DUP14 DUP10 DUP2 MLOAD DUP2 LT PUSH2 0x31B0 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP1 DUP13 DUP10 DUP2 MLOAD DUP2 LT PUSH2 0x31C8 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP JUMPDEST POP POP POP POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x30AF JUMP JUMPDEST POP DUP1 PUSH2 0x3230 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP DUP8 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x3205 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH1 0x0 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x321E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP PUSH2 0x3251 JUMP JUMPDEST DUP1 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x323D JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP PUSH1 0x1 ADD PUSH2 0x30A2 JUMP JUMPDEST POP POP POP SWAP4 POP SWAP4 POP SWAP4 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 DUP2 ADD SWAP1 SWAP3 MSTORE PUSH2 0x1914 SWAP1 DUP1 PUSH2 0x327C DUP7 DUP10 PUSH1 0x80 DUP5 ADD PUSH2 0xA20E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x32A3 SWAP3 SWAP2 SWAP1 PUSH2 0xA20E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x77E6 DUP2 MSTORE POP DUP4 PUSH2 0x6D13 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x32D0 DUP5 DUP5 DUP5 PUSH2 0xF2A JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x1095 JUMPI DUP2 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x32EA JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ PUSH2 0x3370 JUMPI PUSH2 0x3357 DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3308 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x331C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x333D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND PUSH2 0x78FA JUMP JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3363 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP JUMPDEST PUSH1 0x1 ADD PUSH2 0x32D5 JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x3390 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x33CA JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x33B7 PUSH2 0x891D JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x33AF JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP1 DUP4 EQ PUSH2 0x34D2 JUMPI PUSH1 0x1 DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x33E5 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD SWAP2 ISZERO ISZERO SWAP2 ADD MSTORE DUP4 DUP4 DUP3 DUP2 DUP2 LT PUSH2 0x3403 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x3415 SWAP2 SWAP1 PUSH2 0xAB31 JUMP JUMPDEST ISZERO ISZERO SWAP1 POP PUSH2 0x3422 JUMPI PUSH2 0x34CA JUMP JUMPDEST ADDRESS DUP5 DUP5 DUP4 DUP2 DUP2 LT PUSH2 0x342F JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x3441 SWAP2 SWAP1 PUSH2 0xAB31 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x344F SWAP3 SWAP2 SWAP1 PUSH2 0xA1B5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x348C JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x3491 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x349E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x34B5 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 ISZERO ISZERO SWAP1 MSTORE JUMPDEST PUSH1 0x1 ADD PUSH2 0x33D0 JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x34F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x351C JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 EQ PUSH2 0x35C5 JUMPI PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3560 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x35A0 JUMPI PUSH2 0x359B DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3585 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x791E JUMP JUMPDEST PUSH2 0x35A3 JUMP JUMPDEST PUSH1 0x12 JUMPDEST PUSH1 0xFF AND DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x35B2 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x3522 JUMP JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP1 SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x35E6 DUP4 DUP6 PUSH2 0x66BD JUMP JUMPDEST PUSH1 0x0 DUP6 PUSH1 0x0 ADD MLOAD SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x36569E77 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x362A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x363E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3662 SWAP2 SWAP1 PUSH2 0x913B JUMP JUMPDEST DUP5 MLOAD SWAP1 SWAP2 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x367D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x36A7 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP4 POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xF4B9FA75 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x36E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x36F7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x371B SWAP2 SWAP1 PUSH2 0x913B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO DUP1 ISZERO PUSH2 0x37BE JUMPI POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xF4B9FA75 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3770 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3784 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x37A8 SWAP2 SWAP1 PUSH2 0x913B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x37CB JUMPI POP POP POP PUSH2 0x18A6 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xD77 JUMPI PUSH1 0x0 PUSH2 0x37F9 DUP11 DUP10 DUP12 DUP11 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x37EA JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP10 DUP10 PUSH2 0x79CA JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x3806 JUMPI POP PUSH2 0xD77 JUMP JUMPDEST DUP1 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x3813 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP PUSH1 0x1 ADD PUSH2 0x37CE JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP6 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xBBD7F255 DUP6 PUSH1 0xF SIGNEXTEND PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x385E SWAP2 SWAP1 PUSH2 0xA679 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3876 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x388A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x38AE SWAP2 SWAP1 PUSH2 0x996D JUMP JUMPDEST DUP7 MLOAD PUSH1 0x40 MLOAD PUSH4 0x1E010439 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x1E010439 SWAP1 PUSH2 0x38E1 SWAP1 PUSH1 0xF DUP10 SWAP1 SIGNEXTEND SWAP1 PUSH1 0x4 ADD PUSH2 0xA679 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x38F9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x390D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3931 SWAP2 SWAP1 PUSH2 0x996D JUMP JUMPDEST SUB SWAP1 POP PUSH1 0x0 DUP7 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xC5829514 DUP7 PUSH1 0xF SIGNEXTEND PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3969 SWAP2 SWAP1 PUSH2 0xA679 JUMP JUMPDEST PUSH1 0x80 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3981 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3995 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x39B9 SWAP2 SWAP1 PUSH2 0x9EF3 JUMP JUMPDEST SWAP4 POP POP POP POP DUP1 PUSH1 0x12 SUB PUSH1 0xA EXP DUP3 DUP2 PUSH2 0x39CD JUMPI INVALID JUMPDEST DUP6 MLOAD SWAP2 SWAP1 DIV SWAP3 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x39EA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x3A14 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP4 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xD77 JUMPI PUSH1 0x0 PUSH1 0x60 DUP11 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH3 0x927C0 DUP13 PUSH1 0x20 ADD MLOAD DUP13 DUP13 DUP13 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x3A4B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x3A65 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA7F5 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x3AA3 SWAP2 SWAP1 PUSH2 0xA1C5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x3ADF JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x3AE4 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x3B08 JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x3B05 SWAP2 SWAP1 PUSH2 0x996D JUMP JUMPDEST SWAP1 POP JUMPDEST DUP7 DUP2 LT PUSH2 0x3B42 JUMPI DUP4 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x3B39 JUMPI DUP8 DUP10 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3B26 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x3B11 JUMP JUMPDEST POP POP POP POP PUSH2 0xD77 JUMP JUMPDEST DUP1 DUP9 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x3B4F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x3B67 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x3B7F JUMPI POP POP POP PUSH2 0xD77 JUMP JUMPDEST POP POP POP PUSH1 0x1 ADD PUSH2 0x3A1A JUMP JUMPDEST PUSH2 0x3B92 PUSH2 0x8935 JUMP JUMPDEST PUSH2 0x3B9A PUSH2 0x8935 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 JUMPDEST DUP8 MLOAD DUP2 EQ PUSH2 0x3C9F JUMPI PUSH2 0x3BE6 PUSH1 0x20 DUP10 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x3BB8 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD SUB DUP8 DUP11 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x3BCF JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x7C5C SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP11 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x3C00 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x3C15 SWAP2 SWAP1 PUSH2 0xA1C5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x3C52 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x3C57 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0x3C95 JUMPI PUSH1 0x0 PUSH2 0x3C7B PUSH1 0x20 DUP4 MLOAD SUB DUP4 PUSH2 0x7C6C SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP5 DUP2 GT ISZERO PUSH2 0x3C93 JUMPI DUP4 DUP9 MSTORE PUSH1 0x20 DUP9 ADD DUP3 SWAP1 MSTORE SWAP4 POP DUP4 JUMPDEST POP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x3B9F JUMP JUMPDEST POP DUP1 PUSH2 0x3CAB JUMPI POP PUSH2 0x3D97 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP7 MLOAD DUP2 EQ PUSH2 0x29F6 JUMPI PUSH2 0x3CDE PUSH1 0x20 DUP9 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x3CC7 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD SUB DUP4 DUP10 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x3BCF JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP10 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x3CF8 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x3D0D SWAP2 SWAP1 PUSH2 0xA1C5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x3D4A JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x3D4F JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0x3D8D JUMPI PUSH1 0x0 PUSH2 0x3D73 PUSH1 0x20 DUP4 MLOAD SUB DUP4 PUSH2 0x7C6C SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP6 DUP2 GT ISZERO PUSH2 0x3D8B JUMPI DUP4 DUP8 MSTORE PUSH1 0x20 DUP8 ADD DUP3 SWAP1 MSTORE SWAP5 POP DUP5 JUMPDEST POP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x3CAE JUMP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 DUP5 ADD MLOAD PUSH1 0x60 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH2 0x3E22 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH2 0x3E1B SWAP1 DUP1 PUSH2 0x3DD4 DUP7 DUP10 PUSH1 0x80 DUP5 ADD PUSH2 0xA813 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x3DFB SWAP3 SWAP2 SWAP1 PUSH2 0xA813 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x7C78 DUP2 MSTORE POP DUP4 PUSH2 0x6D13 JUMP JUMPDEST SWAP1 POP PUSH2 0x18A6 JUMP JUMPDEST DUP2 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x3E3A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x3E64 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1EED JUMPI PUSH1 0x0 PUSH1 0x60 DUP9 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH3 0x1E8480 DUP11 PUSH1 0x40 ADD MLOAD DUP11 DUP11 DUP11 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x3E9B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x3EB5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA7F5 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x3EF3 SWAP2 SWAP1 PUSH2 0xA1C5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x3F2F JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x3F34 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x3F58 JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x3F55 SWAP2 SWAP1 PUSH2 0x996D JUMP JUMPDEST SWAP1 POP JUMPDEST DUP1 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x3F65 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x3F7D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x3F95 JUMPI POP POP POP PUSH2 0x1EED JUMP JUMPDEST POP POP POP PUSH1 0x1 ADD PUSH2 0x3E6A JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP6 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x3FBD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x3FE7 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0xBCDED89 PUSH1 0xE2 SHL DUP2 MSTORE SWAP1 SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x2F37B624 SWAP1 PUSH2 0x4017 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0xA1E1 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x402F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4043 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4067 SWAP2 SWAP1 PUSH2 0x994D JUMP JUMPDEST ISZERO DUP1 PUSH2 0x40EC JUMPI POP PUSH1 0x40 MLOAD PUSH4 0xBCDED89 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x2F37B624 SWAP1 PUSH2 0x409A SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0xA1E1 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x40B2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x40C6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x40EA SWAP2 SWAP1 PUSH2 0x994D JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x40F8 JUMPI POP POP PUSH2 0x18A6 JUMP JUMPDEST PUSH2 0x4100 PUSH2 0x88EE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xF8B2CB4F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0xF8B2CB4F SWAP1 PUSH2 0x412C SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0xA1E1 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4144 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4158 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x417C SWAP2 SWAP1 PUSH2 0x996D JUMP JUMPDEST DUP2 MSTORE PUSH1 0x40 MLOAD PUSH4 0xF8B2CB4F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0xF8B2CB4F SWAP1 PUSH2 0x41AA SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0xA1E1 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x41C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x41D6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x41FA SWAP2 SWAP1 PUSH2 0x996D JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 MLOAD PUSH4 0x4A46C673 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x948D8CE6 SWAP1 PUSH2 0x422B SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0xA1E1 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4243 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4257 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x427B SWAP2 SWAP1 PUSH2 0x996D JUMP JUMPDEST PUSH1 0x40 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE MLOAD PUSH4 0x4A46C673 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x948D8CE6 SWAP1 PUSH2 0x42AE SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0xA1E1 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x42C6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x42DA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x42FE SWAP2 SWAP1 PUSH2 0x996D JUMP JUMPDEST DUP2 PUSH1 0x60 ADD DUP2 DUP2 MSTORE POP POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD4CADF68 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4340 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4354 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4378 SWAP2 SWAP1 PUSH2 0x996D JUMP JUMPDEST PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0xD77 JUMPI DUP2 MLOAD PUSH2 0x439E SWAP1 PUSH1 0x2 PUSH8 0xDE0B6B3A7640000 PUSH2 0x2F21 JUMP JUMPDEST DUP7 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x43AA JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD GT ISZERO PUSH2 0x43BD JUMPI PUSH2 0xD77 JUMP JUMPDEST DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xBA9530A6 PUSH3 0x493E0 DUP5 PUSH1 0x0 ADD MLOAD DUP6 PUSH1 0x40 ADD MLOAD DUP7 PUSH1 0x20 ADD MLOAD DUP8 PUSH1 0x60 ADD MLOAD DUP13 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x43F0 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP10 PUSH1 0x80 ADD MLOAD PUSH1 0x40 MLOAD DUP9 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x441E SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xAB09 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4436 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x4467 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x4464 SWAP2 DUP2 ADD SWAP1 PUSH2 0x996D JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x4495 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x2F03 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2F08 JUMP JUMPDEST DUP1 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x44A2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x44BA JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x44D0 JUMPI POP PUSH2 0xD77 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x4380 JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND DUP5 PUSH2 0x160 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x44FF SWAP2 SWAP1 PUSH2 0xA679 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0x0 SHR DUP2 PUSH2 0x451F JUMPI INVALID JUMPDEST MOD SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP1 PUSH2 0x4539 DUP6 DUP8 PUSH2 0x66BD JUMP JUMPDEST PUSH2 0x4544 DUP8 DUP8 DUP8 PUSH2 0x7CCC JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x4550 JUMPI PUSH2 0x1236 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x276FDAD9 PUSH1 0xE1 SHL DUP2 MSTORE ADDRESS SWAP1 PUSH4 0x4EDFB5B2 SWAP1 PUSH2 0x4579 SWAP1 DUP11 SWAP1 DUP8 SWAP1 DUP12 SWAP1 DUP12 SWAP1 PUSH1 0x4 ADD PUSH2 0xA997 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4591 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x45A5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x45CD SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x9985 JUMP JUMPDEST DUP8 PUSH1 0x80 ADD DUP2 SWAP1 MSTORE POP DUP7 PUSH1 0x80 ADD MLOAD SWAP2 POP PUSH2 0x4644 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 DUP8 DUP11 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x45FD SWAP3 SWAP2 SWAP1 PUSH2 0xA482 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP9 DUP11 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x4624 SWAP3 SWAP2 SWAP1 PUSH2 0xA482 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x7E33 DUP2 MSTORE POP DUP6 PUSH2 0x6D13 JUMP JUMPDEST SWAP1 POP SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x901754D7 DUP7 DUP7 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4681 SWAP3 SWAP2 SWAP1 PUSH2 0xA20E JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4699 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x46AD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x46D1 SWAP2 SWAP1 PUSH2 0x913B JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x46EB JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x18A6 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND ISZERO PUSH2 0x477D JUMPI PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH2 0x4728 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0xA1E1 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4740 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4754 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4778 SWAP2 SWAP1 PUSH2 0x996D JUMP JUMPDEST PUSH2 0x4789 JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND BALANCE JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x479E JUMPI PUSH1 0x0 SWAP3 POP POP POP PUSH2 0x18A6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x3C2803F PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x1E1401F8 SWAP1 PUSH3 0x249F0 SWAP1 PUSH2 0x47D3 SWAP1 DUP11 SWAP1 DUP11 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0xA309 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x47EB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x481C JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x4819 SWAP2 DUP2 ADD SWAP1 PUSH2 0x996D JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x485C JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x484A JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x484F JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 SWAP4 POP POP POP POP PUSH2 0x18A6 JUMP JUMPDEST SWAP3 POP PUSH2 0x18A6 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x4872 DUP4 DUP6 PUSH2 0x66BD JUMP JUMPDEST PUSH1 0x20 DUP6 ADD MLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x2 DUP1 DUP3 MSTORE PUSH1 0x60 DUP3 DUP2 ADD SWAP1 SWAP4 MSTORE DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP6 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x48A8 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP DUP5 DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x48D6 JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE DUP4 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x4906 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x4930 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP4 POP PUSH2 0x493B PUSH2 0x88C7 JUMP JUMPDEST PUSH2 0x4943 PUSH2 0x66FC JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x1473 JUMPI PUSH1 0x60 PUSH2 0x4962 DUP12 DUP10 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x1355 JUMPI INVALID JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x7C268337 PUSH1 0xE1 SHL DUP2 MSTORE SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND SWAP1 PUSH4 0xF84D066E SWAP1 PUSH2 0x4998 SWAP1 PUSH1 0x1 SWAP1 DUP6 SWAP1 DUP11 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0xA73C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x49B2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x49E7 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x49E4 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x97C9 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x4A15 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x1415 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x141A JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x4A24 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 DUP2 SGT PUSH2 0x4A3E JUMPI POP POP POP PUSH2 0x1473 JUMP JUMPDEST DUP1 DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x4A4B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP POP POP PUSH1 0x1 ADD PUSH2 0x4948 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x4A8C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x4AB6 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1EED JUMPI DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x343FBCDD PUSH3 0x61A80 DUP9 DUP9 DUP9 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x4AE5 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4B0B SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA309 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4B23 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x4B54 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x4B51 SWAP2 DUP2 ADD SWAP1 PUSH2 0x996D JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x4B82 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x1E9D JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1EA2 JUMP JUMPDEST DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x4B8F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x4BA7 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x4BBD JUMPI POP PUSH2 0x1EED JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x4ABC JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 PUSH2 0x4BD5 DUP6 DUP8 PUSH2 0x66BD JUMP JUMPDEST DUP4 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x4BED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x4C17 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH2 0x4C26 DUP10 DUP10 DUP10 DUP10 PUSH2 0x7F1A JUMP JUMPDEST SWAP5 POP SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x4C3E JUMPI POP PUSH2 0x4CF8 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x4CF5 JUMPI PUSH1 0x0 PUSH2 0x4CAF DUP10 DUP7 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x4C63 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA2B1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP10 DUP8 DUP10 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x4C87 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA2B1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x4CA2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x806F JUMP JUMPDEST SWAP1 POP DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x4CBE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x4CD6 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x4CEC JUMPI POP PUSH2 0x4CF5 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x4C41 JUMP JUMPDEST POP POP JUMPDEST SWAP6 POP SWAP6 POP SWAP6 SWAP3 POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x4D1E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x4D48 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x182DF0F5 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4D86 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4D9A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4DBE SWAP2 SWAP1 PUSH2 0x996D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x313CE567 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4DFB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4E0F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4E33 SWAP2 SWAP1 PUSH2 0x9F67 JUMP JUMPDEST PUSH1 0xFF AND SWAP1 POP DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x4EA5 JUMPI PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xD04 JUMPI DUP3 DUP3 PUSH1 0xA EXP PUSH5 0x2540BE400 DUP9 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x4E74 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MUL MUL DUP2 PUSH2 0x4E85 JUMPI INVALID JUMPDEST DIV DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x4E92 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x4E55 JUMP JUMPDEST DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0xD79 JUMPI PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xD77 JUMPI DUP2 PUSH1 0xA EXP PUSH5 0x2540BE400 MUL DUP4 DUP8 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x4EE2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MUL DUP2 PUSH2 0x4EF2 JUMPI INVALID JUMPDEST DIV DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x4EFF JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x4EC2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH2 0x4F20 DUP5 DUP7 PUSH2 0x66BD JUMP JUMPDEST DUP3 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x4F38 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x4F62 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x4FD7 JUMPI PUSH1 0x0 PUSH2 0x4F91 DUP10 DUP10 DUP10 DUP10 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x4F84 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x4650 JUMP JUMPDEST SWAP1 POP DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x4FA0 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x4FB8 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x4FCE JUMPI POP PUSH2 0x4FD7 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x4F68 JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0x901754D7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND SWAP1 PUSH4 0x901754D7 SWAP1 PUSH2 0x5006 SWAP1 DUP10 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0xA20E JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x501E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5032 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5056 SWAP2 SWAP1 PUSH2 0x913B JUMP JUMPDEST SWAP3 POP POP SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 DUP2 ADD SWAP1 SWAP3 MSTORE PUSH2 0x1914 SWAP1 DUP1 PUSH2 0x5081 DUP7 DUP10 PUSH1 0x80 DUP5 ADD PUSH2 0xA20E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x50A8 SWAP3 SWAP2 SWAP1 PUSH2 0xA20E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x8161 DUP2 MSTORE POP DUP4 PUSH2 0x6D13 JUMP JUMPDEST PUSH1 0x60 DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x50E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x510B JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP4 MLOAD DUP2 EQ PUSH2 0x34D2 JUMPI PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x514F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x5199 JUMPI PUSH2 0x5194 DUP4 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x5175 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x81A8 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x51A5 JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND BALANCE JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x51B1 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x5111 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 DUP2 ADD SWAP1 SWAP3 MSTORE PUSH2 0x1914 SWAP1 DUP1 PUSH2 0x51E3 DUP7 DUP10 PUSH1 0x80 DUP5 ADD PUSH2 0xA20E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x520A SWAP3 SWAP2 SWAP1 PUSH2 0xA20E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x8272 DUP2 MSTORE POP DUP4 PUSH2 0x6D13 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x5236 DUP4 DUP6 PUSH2 0x66BD JUMP JUMPDEST DUP2 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x524E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x5278 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND ISZERO PUSH2 0x529B JUMPI PUSH2 0x5296 DUP8 DUP8 PUSH2 0x67BD JUMP JUMPDEST PUSH2 0x529E JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND ISZERO PUSH2 0x52C0 JUMPI PUSH2 0x52BB DUP9 DUP8 PUSH2 0x67BD JUMP JUMPDEST PUSH2 0x52C3 JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xD77 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH2 0x5319 JUMPI PUSH2 0x52F8 DUP5 PUSH4 0x95B68FE7 PUSH1 0xE0 SHL DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x154E JUMPI INVALID JUMPDEST DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x5304 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP4 POP DUP3 DUP2 MSTORE POP POP POP PUSH2 0x53B3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND PUSH2 0x533F JUMPI PUSH2 0x52F8 DUP4 PUSH4 0xCD7724C3 PUSH1 0xE0 SHL DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x154E JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH2 0x5359 DUP6 PUSH4 0x95B68FE7 PUSH1 0xE0 SHL DUP11 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x154E JUMPI INVALID JUMPDEST SWAP3 POP SWAP1 POP DUP1 ISZERO PUSH2 0x5396 JUMPI PUSH2 0x5375 DUP5 PUSH4 0xCD7724C3 PUSH1 0xE0 SHL DUP4 PUSH2 0x683C JUMP JUMPDEST DUP9 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x5381 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP5 POP DUP3 DUP2 MSTORE POP POP POP PUSH2 0x53B1 JUMP JUMPDEST PUSH1 0x0 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x53A4 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP JUMPDEST POP JUMPDEST DUP1 ISZERO DUP1 PUSH2 0x53D3 JUMPI POP DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x53C7 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ JUMPDEST ISZERO PUSH2 0x53DE JUMPI POP PUSH2 0xD77 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x52C8 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x5402 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x542C JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x2072 JUMPI DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x1F00CA74 PUSH3 0x249F0 DUP7 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x5459 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x547F SWAP3 SWAP2 SWAP1 PUSH2 0xAAC5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5497 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x54CD JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x54CA SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x991B JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x54FB JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x200B JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2010 JUMP JUMPDEST DUP1 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x5508 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x551C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x5534 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x554A JUMPI POP PUSH2 0x2072 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x5432 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP1 PUSH2 0x5562 DUP6 DUP8 PUSH2 0x66BD JUMP JUMPDEST PUSH2 0x556D DUP8 DUP8 DUP8 PUSH2 0x7CCC JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x5579 JUMPI PUSH2 0x1236 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x276FDAD9 PUSH1 0xE1 SHL DUP2 MSTORE ADDRESS SWAP1 PUSH4 0x4EDFB5B2 SWAP1 PUSH2 0x55A2 SWAP1 DUP11 SWAP1 DUP8 SWAP1 DUP12 SWAP1 DUP12 SWAP1 PUSH1 0x4 ADD PUSH2 0xA997 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x55BA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x55CE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x55F6 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x9985 JUMP JUMPDEST PUSH1 0x80 DUP9 ADD DUP2 SWAP1 MSTORE DUP5 MLOAD SWAP1 SWAP3 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x5618 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x5642 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x572D JUMPI PUSH1 0x0 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xF1ED7FA4 DUP12 DUP12 DUP12 DUP12 DUP8 DUP2 MLOAD DUP2 LT PUSH2 0x5670 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5697 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA961 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x56AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x56C3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x56E7 SWAP2 SWAP1 PUSH2 0x996D JUMP JUMPDEST SWAP1 POP DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x56F6 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x570E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x5724 JUMPI POP PUSH2 0x572D JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x5648 JUMP JUMPDEST POP POP SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH20 0xE9DB8717BC5DFB20AAF538B4A5A02B7791FF430C DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 PUSH2 0x5760 DUP6 DUP8 PUSH2 0x66BD JUMP JUMPDEST PUSH2 0x576C DUP9 DUP9 DUP9 DUP9 PUSH2 0x7F1A JUMP JUMPDEST SWAP4 POP SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x5783 JUMPI PUSH2 0x4CF8 JUMP JUMPDEST DUP4 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x579B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x57C5 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD SWAP1 SWAP2 MSTORE SWAP1 SWAP3 POP PUSH2 0x5832 SWAP1 DUP1 PUSH2 0x57E9 DUP10 DUP8 DUP10 ISZERO PUSH1 0x80 DUP6 ADD PUSH2 0xA2B1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP10 DUP7 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x5812 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA2B1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x806F DUP2 MSTORE POP DUP7 PUSH2 0x6D13 JUMP JUMPDEST SWAP2 POP POP SWAP6 POP SWAP6 POP SWAP6 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 PUSH2 0x584F DUP6 DUP8 PUSH2 0x66BD JUMP JUMPDEST DUP4 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x5867 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x5891 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP DUP9 MLOAD PUSH1 0x40 MLOAD PUSH4 0x939D863 PUSH1 0xE1 SHL DUP2 MSTORE SWAP2 SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x1273B0C6 SWAP1 PUSH2 0x58C4 SWAP1 DUP11 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0xA20E JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x58DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x58F0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5914 SWAP2 SWAP1 PUSH2 0x913B JUMP JUMPDEST SWAP3 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND ISZERO PUSH2 0x5932 JUMPI POP PUSH1 0x1 SWAP4 POP DUP7 PUSH2 0x59D1 JUMP JUMPDEST DUP9 MLOAD PUSH1 0x40 MLOAD PUSH4 0x939D863 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x1273B0C6 SWAP1 PUSH2 0x5963 SWAP1 DUP11 SWAP1 DUP13 SWAP1 PUSH1 0x4 ADD PUSH2 0xA20E JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x597B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x598F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x59B3 SWAP2 SWAP1 PUSH2 0x913B JUMP JUMPDEST SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x59CA JUMPI POP POP PUSH2 0x1236 JUMP JUMPDEST POP PUSH1 0x0 SWAP4 POP DUP6 JUMPDEST DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDD58B41C PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5A0A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5A1E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5A42 SWAP2 SWAP1 PUSH2 0x994D JUMP JUMPDEST PUSH2 0x5A4D JUMPI POP POP PUSH2 0x1236 JUMP JUMPDEST PUSH2 0x5AC5 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 DUP10 DUP8 DUP6 DUP15 PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x5A76 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA228 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP11 DUP8 DUP6 DUP15 PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x5AA5 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA228 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x6F25 DUP2 MSTORE POP DUP8 PUSH2 0x6D13 JUMP JUMPDEST SWAP3 POP POP POP SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x5AEC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x5B16 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 EQ PUSH2 0x1095 JUMPI PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x5B5A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x5BA6 JUMPI PUSH2 0x5BA1 DUP5 DUP5 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x5B81 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x8327 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x5BA9 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x5BB5 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x5B1C JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x5BE3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x5C0D JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1EED JUMPI DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x838E6A22 PUSH3 0x493E0 DUP9 DUP9 DUP9 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x5C3C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5C62 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA309 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5C7A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x5CAB JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x5CA8 SWAP2 DUP2 ADD SWAP1 PUSH2 0x996D JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x5CD9 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x1E9D JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1EA2 JUMP JUMPDEST DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x5CE6 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x5C13 JUMP JUMPDEST PUSH1 0x0 DUP5 PUSH1 0x80 ADD MLOAD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x5D13 JUMPI POP PUSH1 0x0 PUSH2 0x18A6 JUMP JUMPDEST DUP5 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x418436BC PUSH3 0x7A120 DUP8 PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x5D4D JUMPI DUP7 PUSH2 0x5D63 JUMP JUMPDEST PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE JUMPDEST DUP9 PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x5D86 JUMPI DUP7 PUSH2 0x5D9C JUMP JUMPDEST PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE JUMPDEST DUP7 PUSH1 0x0 DUP12 PUSH1 0x80 ADD MLOAD PUSH1 0x40 MLOAD DUP8 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5DC4 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA32D JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5DDC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x5E0D JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x5E0A SWAP2 DUP2 ADD SWAP1 PUSH2 0x996D JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x5E4B JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x5E3B JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x5E40 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 SWAP2 POP POP PUSH2 0x18A6 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5E56 DUP6 PUSH2 0x83F3 JUMP JUMPDEST PUSH1 0xFF AND SWAP1 POP PUSH1 0x0 PUSH2 0x5E66 DUP8 PUSH2 0x83F3 JUMP JUMPDEST PUSH1 0xFF AND SWAP1 POP PUSH8 0xDE0B6B3A7640000 DUP2 PUSH1 0xA EXP DUP4 PUSH1 0xA EXP DUP8 DUP7 MUL MUL DUP2 PUSH2 0x5E87 JUMPI INVALID JUMPDEST DIV DUP2 PUSH2 0x5E8F JUMPI INVALID JUMPDEST DIV SWAP4 POP POP POP POP PUSH2 0x18A6 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH2 0x5EA8 DUP5 DUP7 PUSH2 0x66BD JUMP JUMPDEST DUP3 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x5EC0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x5EEA JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH2 0x5F55 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 DUP10 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x5F0E SWAP3 SWAP2 SWAP1 PUSH2 0xA20E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP10 DUP10 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x5F35 SWAP3 SWAP2 SWAP1 PUSH2 0xA20E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x83FE DUP2 MSTORE POP DUP6 PUSH2 0x6D13 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x901754D7 PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND SWAP1 PUSH4 0x901754D7 SWAP1 PUSH2 0x5006 SWAP1 DUP10 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0xA20E JUMP JUMPDEST PUSH2 0x5F8E PUSH2 0x8935 JUMP JUMPDEST PUSH2 0x5F96 PUSH2 0x8935 JUMP JUMPDEST PUSH1 0x0 NOT DUP1 PUSH1 0x0 JUMPDEST DUP7 MLOAD DUP2 EQ PUSH2 0x6092 JUMPI PUSH2 0x5FCD PUSH1 0x20 DUP9 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x5FB6 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD SUB DUP8 DUP10 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x3BCF JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP10 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x5FE7 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x5FFC SWAP2 SWAP1 PUSH2 0xA1C5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x6039 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x603E JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0x6088 JUMPI PUSH1 0x0 PUSH2 0x6062 PUSH1 0x20 DUP4 MLOAD SUB DUP4 PUSH2 0x7C6C SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 GT DUP1 ISZERO PUSH2 0x6073 JUMPI POP DUP5 DUP2 LT JUMPDEST ISZERO PUSH2 0x6086 JUMPI DUP4 DUP8 MSTORE PUSH1 0x20 DUP8 ADD DUP3 SWAP1 MSTORE SWAP4 POP DUP4 JUMPDEST POP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x5F9D JUMP JUMPDEST POP PUSH1 0x0 NOT DUP2 EQ ISZERO PUSH2 0x60A3 JUMPI POP PUSH2 0x3D97 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP8 MLOAD DUP2 EQ PUSH2 0x29F6 JUMPI PUSH2 0x60D6 PUSH1 0x20 DUP10 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x60BF JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD SUB DUP4 DUP11 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x3BCF JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP11 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x60F0 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x6105 SWAP2 SWAP1 PUSH2 0xA1C5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x6142 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x6147 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0x6191 JUMPI PUSH1 0x0 PUSH2 0x616B PUSH1 0x20 DUP4 MLOAD SUB DUP4 PUSH2 0x7C6C SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 GT DUP1 ISZERO PUSH2 0x617C JUMPI POP DUP6 DUP2 LT JUMPDEST ISZERO PUSH2 0x618F JUMPI DUP4 DUP9 MSTORE PUSH1 0x20 DUP9 ADD DUP3 SWAP1 MSTORE SWAP5 POP DUP5 JUMPDEST POP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x60A6 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xC45A0155 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x61D8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x61EC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x6210 SWAP2 SWAP1 PUSH2 0x913B JUMP JUMPDEST SWAP1 POP PUSH1 0x1 DUP4 MLOAD SUB PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x622C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x6256 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x6482 JUMPI PUSH1 0x60 DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x5B1DC86F PUSH3 0x249F0 DUP8 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x6286 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 DUP7 PUSH1 0x1 ADD DUP2 MLOAD DUP2 LT PUSH2 0x629D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x62C2 SWAP3 SWAP2 SWAP1 PUSH2 0xA20E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x62DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x6310 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x630D SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x9532 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x637E JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x633E JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x6343 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 DUP1 JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x6372 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP5 POP POP POP POP POP PUSH2 0x6485 JUMP JUMPDEST DUP1 MLOAD PUSH2 0x638C JUMPI PUSH1 0x0 DUP1 PUSH2 0x6348 JUMP JUMPDEST PUSH1 0x0 DUP1 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x6476 JUMPI PUSH1 0x0 DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x63A7 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x18160DDD PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x63E7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x63FB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x641F SWAP2 SWAP1 PUSH2 0x996D JUMP JUMPDEST SWAP1 POP DUP3 DUP2 GT ISZERO PUSH2 0x646D JUMPI DUP1 SWAP3 POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x6438 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 DUP8 DUP2 MLOAD DUP2 LT PUSH2 0x644C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x6390 JUMP JUMPDEST POP POP POP POP PUSH1 0x1 ADD PUSH2 0x625C JUMP JUMPDEST POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP6 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x21F8A721 DUP8 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x9232494E PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x64DF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x64F3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x6517 SWAP2 SWAP1 PUSH2 0x996D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6533 SWAP2 SWAP1 PUSH2 0xA679 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x654B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x655F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x6583 SWAP2 SWAP1 PUSH2 0x913B JUMP JUMPDEST SWAP2 POP DUP6 PUSH1 0x20 ADD MLOAD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x6598 JUMPI PUSH2 0x66B4 JUMP JUMPDEST PUSH1 0x0 DUP1 JUMPDEST DUP8 PUSH1 0x20 ADD MLOAD MLOAD DUP2 LT ISZERO PUSH2 0x66B1 JUMPI PUSH1 0x2 DUP9 PUSH1 0x20 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x65BB JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD LT ISZERO PUSH2 0x65CF JUMPI PUSH2 0x66A9 JUMP JUMPDEST DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x7F9C0ECD PUSH3 0x493E0 DUP11 PUSH1 0x20 ADD MLOAD DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x65F2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 PUSH1 0x1 DUP11 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x660A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x662F SWAP3 SWAP2 SWAP1 PUSH2 0xA519 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6647 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x6678 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x6675 SWAP2 DUP2 ADD SWAP1 PUSH2 0x996D JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x6681 JUMPI PUSH2 0x66A9 JUMP JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x66A7 JUMPI DUP1 SWAP3 POP DUP9 PUSH1 0x20 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x669C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP4 POP JUMPDEST POP JUMPDEST PUSH1 0x1 ADD PUSH2 0x659C JUMP JUMPDEST POP POP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x66F8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x66EF SWAP1 PUSH2 0xA86F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x6704 PUSH2 0x88C7 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP2 ADD DUP3 MSTORE ADDRESS DUP1 DUP3 MSTORE PUSH1 0x0 PUSH1 0x20 DUP4 ADD DUP2 SWAP1 MSTORE SWAP3 DUP3 ADD MSTORE PUSH1 0x60 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP2 DUP3 SWAP2 SWAP1 DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x674D PUSH2 0x894F JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x6745 JUMPI SWAP1 POP POP SWAP1 POP PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP6 PUSH1 0x0 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP DUP2 MSTORE POP DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x67AB JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x3795FB1 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x6F2BF62 SWAP1 PUSH2 0x67EC SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0xA1E1 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6804 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x6818 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4523 SWAP2 SWAP1 PUSH2 0x913B JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH2 0x6852 JUMPI PUSH2 0xF22 JUMP JUMPDEST PUSH1 0x60 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH3 0x249F0 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x6874 SWAP2 SWAP1 PUSH2 0xA679 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x68B2 SWAP2 SWAP1 PUSH2 0xA1C5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x68EE JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x68F3 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP DUP2 ISZERO PUSH2 0x6916 JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x6913 SWAP2 SWAP1 PUSH2 0x996D JUMP JUMPDEST SWAP3 POP JUMPDEST POP SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD9638D36 DUP12 PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6955 SWAP2 SWAP1 PUSH2 0xA679 JUMP JUMPDEST PUSH1 0xA0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x696D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x6981 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x69A5 SWAP2 SWAP1 PUSH2 0x9F28 JUMP JUMPDEST SWAP5 POP SWAP5 POP POP POP SWAP3 POP PUSH1 0x0 PUSH3 0xF4240 SWAP1 POP DUP11 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x6ACD JUMPI PUSH1 0x0 PUSH2 0x69E4 DUP10 PUSH5 0xE8D4A51000 PUSH2 0x844E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x6A08 PUSH12 0x33B2E3C9FD0803CE8000000 PUSH2 0x6A02 DUP9 DUP6 PUSH2 0x8484 JUMP JUMPDEST SWAP1 PUSH2 0x844E JUMP JUMPDEST SWAP1 POP DUP5 DUP2 LT PUSH2 0x6A20 JUMPI PUSH1 0x0 SWAP7 POP POP POP POP POP POP POP PUSH2 0x6BD6 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6AAF PUSH8 0xDE0B6B3A7640000 PUSH2 0x6AA9 DUP13 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x568D4B6F PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6A6A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x6A7E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x6AA2 SWAP2 SWAP1 PUSH2 0x996D JUMP JUMPDEST DUP7 SWAP1 PUSH2 0x844E JUMP JUMPDEST SWAP1 PUSH2 0x84A0 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x6ABD DUP5 DUP4 PUSH2 0x84CA JUMP JUMPDEST SWAP9 POP PUSH2 0x6BD6 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP11 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x6BCD JUMPI DUP8 DUP5 DUP2 GT ISZERO PUSH2 0x6B02 JUMPI PUSH1 0x0 SWAP6 POP POP POP POP POP POP PUSH2 0x6BD6 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6B1E PUSH12 0x33B2E3C9FD0803CE8000000 PUSH2 0x6A02 DUP9 DUP6 PUSH2 0x84CA JUMP JUMPDEST SWAP1 POP DUP4 DUP2 GT PUSH2 0x6B36 JUMPI PUSH1 0x0 SWAP7 POP POP POP POP POP POP POP PUSH2 0x6BD6 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6BBB DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xFAE036D5 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6B74 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x6B88 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x6BAC SWAP2 SWAP1 PUSH2 0x996D JUMP JUMPDEST PUSH8 0xDE0B6B3A7640000 SWAP1 PUSH2 0x8484 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x6ABD DUP3 PUSH2 0x6AA9 DUP7 DUP9 PUSH2 0x844E JUMP JUMPDEST PUSH1 0x0 SWAP5 POP POP POP POP POP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x6BEB PUSH2 0x8981 JUMP JUMPDEST DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x6BFF SWAP2 SWAP1 PUSH2 0x9A19 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x6C19 SWAP2 SWAP1 PUSH2 0x99FD JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH4 0x22DB5ED1 PUSH1 0xE2 SHL DUP6 DUP8 DUP7 PUSH2 0x6C34 DUP13 PUSH2 0x84E9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x6C47 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA8F9 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x6C85 SWAP2 SWAP1 PUSH2 0xA1C5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x6CC0 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x6CC5 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH2 0x6CDD JUMPI PUSH1 0x0 SWAP6 POP POP POP POP POP POP PUSH2 0x4523 JUMP JUMPDEST DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x6CF1 SWAP2 SWAP1 PUSH2 0x991B JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x6CFD JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP6 POP POP POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x6D2C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x6D56 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP2 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x6D68 JUMPI PUSH2 0x6485 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6D99 DUP5 PUSH1 0x0 ADD MLOAD DUP6 PUSH1 0x20 ADD MLOAD DUP6 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x6D84 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 PUSH1 0x40 ADD MLOAD PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x6DA6 JUMPI POP PUSH2 0x6485 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6DC3 DUP6 PUSH1 0x20 ADD MLOAD DUP7 PUSH1 0x0 ADD MLOAD DUP5 DUP9 PUSH1 0x40 ADD MLOAD PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x6DD1 JUMPI POP POP PUSH2 0x6485 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x6F1C JUMPI PUSH1 0x0 DUP1 JUMPDEST PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x6EC5 JUMPI PUSH2 0x6E08 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x6DF9 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 DUP8 PUSH2 0x852A JUMP JUMPDEST SWAP5 POP DUP5 PUSH2 0x6E14 JUMPI PUSH2 0x6EC5 JUMP JUMPDEST PUSH2 0x6E23 PUSH2 0x2715 PUSH2 0x2710 DUP8 PUSH2 0x852A JUMP JUMPDEST SWAP5 POP DUP5 PUSH2 0x6E2F JUMPI PUSH2 0x6EC5 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6E4C DUP10 PUSH1 0x20 ADD MLOAD DUP11 PUSH1 0x0 ADD MLOAD DUP9 DUP13 PUSH1 0x40 ADD MLOAD PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x6E59 JUMPI POP PUSH2 0x6EC5 JUMP JUMPDEST DUP1 SWAP5 POP DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x6E68 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 LT PUSH2 0x6EBC JUMPI DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x6E82 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x2710 DUP10 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x6E99 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 SUB MUL DUP2 PUSH2 0x6EAB JUMPI INVALID JUMPDEST DIV SWAP3 POP PUSH1 0x5 DUP4 GT PUSH2 0x6EBC JUMPI POP PUSH2 0x6EC5 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x6DE1 JUMP JUMPDEST POP DUP1 ISZERO DUP1 PUSH2 0x6ED3 JUMPI POP PUSH1 0x5 DUP2 GT JUMPDEST ISZERO PUSH2 0x6EDE JUMPI POP PUSH2 0x6F1C JUMP JUMPDEST PUSH2 0x6EFC DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x6EED JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 DUP7 PUSH2 0x852A JUMP JUMPDEST DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x6F08 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP PUSH1 0x1 ADD PUSH2 0x6DD4 JUMP JUMPDEST POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP8 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x6F41 SWAP2 SWAP1 PUSH2 0x9190 JUMP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 POP SWAP4 POP DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x702B JUMPI PUSH1 0x40 MLOAD PUSH4 0x51400F0B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0xA2801E16 SWAP1 PUSH3 0x493E0 SWAP1 PUSH2 0x6F94 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0xA679 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6FAC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x6FDD JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x6FDA SWAP2 DUP2 ADD SWAP1 PUSH2 0x996D JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x701F JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x700B JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x7010 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 SWAP6 POP POP POP POP POP POP PUSH2 0x4523 JUMP JUMPDEST SWAP5 POP PUSH2 0x4523 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xCA19EBD9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH4 0xCA19EBD9 SWAP1 PUSH3 0x493E0 SWAP1 PUSH2 0x6F94 SWAP1 DUP8 SWAP1 DUP12 SWAP1 PUSH1 0x4 ADD PUSH2 0xA1F5 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x2 DUP3 DUP5 MLOAD SUB LT ISZERO PUSH2 0x7084 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x66EF SWAP1 PUSH2 0xA82B JUMP JUMPDEST PUSH2 0x708C PUSH2 0x89A1 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP2 ADD DUP3 MSTORE PUSH1 0x64 DUP2 MSTORE PUSH2 0x1F4 PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0xBB8 DUP2 DUP4 ADD MSTORE PUSH2 0x2710 PUSH1 0x60 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP3 MLOAD PUSH1 0x4 DUP1 DUP3 MSTORE PUSH1 0xA0 DUP3 ADD SWAP1 SWAP5 MSTORE SWAP2 SWAP3 SWAP1 SWAP2 SWAP1 DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP PUSH1 0x0 DUP1 DUP7 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x70EA JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 DUP8 DUP8 PUSH1 0x1 ADD DUP2 MLOAD DUP2 LT PUSH2 0x7105 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 JUMPDEST PUSH1 0x4 DUP2 LT ISZERO PUSH2 0x71FA JUMPI PUSH1 0x0 DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x1698EE82 DUP6 DUP6 DUP11 DUP7 PUSH1 0x4 DUP2 LT PUSH2 0x713A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x715D SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA6C1 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7175 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x7189 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x71AD SWAP2 SWAP1 PUSH2 0x913B JUMP JUMPDEST SWAP1 POP PUSH2 0x71B8 DUP2 PUSH2 0x8582 JUMP JUMPDEST ISZERO PUSH2 0x71F1 JUMPI DUP1 DUP7 DUP7 DUP1 PUSH1 0x1 ADD SWAP8 POP DUP2 MLOAD DUP2 LT PUSH2 0x71D0 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x7112 JUMP JUMPDEST POP POP POP DUP1 PUSH2 0x720A JUMPI POP POP POP PUSH2 0x4523 JUMP JUMPDEST DUP6 MLOAD DUP6 PUSH1 0x2 ADD EQ ISZERO PUSH2 0x7300 JUMPI DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x722C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x7260 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x724B JUMPI SWAP1 POP JUMPDEST POP SWAP4 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x72F7 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE SWAP1 PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x7298 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP3 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x72AF JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x72C3 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x72D7 JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE PUSH1 0x1 ADD PUSH2 0x7266 JUMP JUMPDEST POP POP POP POP PUSH2 0x4523 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x7310 DUP9 DUP9 DUP9 PUSH1 0x1 ADD PUSH2 0x705E JUMP JUMPDEST SWAP1 POP DUP1 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x7325 JUMPI POP POP POP POP PUSH2 0x4523 JUMP JUMPDEST DUP1 MLOAD DUP3 MUL PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x733E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x7372 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x735D JUMPI SWAP1 POP JUMPDEST POP SWAP5 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x74F2 JUMPI PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x74E9 JUMPI DUP3 MLOAD DUP3 DUP2 MUL DUP3 ADD SWAP1 DUP5 SWAP1 DUP4 SWAP1 DUP2 LT PUSH2 0x73A0 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD PUSH1 0x1 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x73C1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x73EB JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP DUP9 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x73F8 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x740F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x7423 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x7437 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP PUSH1 0x0 JUMPDEST DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x7466 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD DUP2 LT ISZERO PUSH2 0x74DF JUMPI DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x7482 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x7495 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP10 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x74A9 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 PUSH1 0x1 ADD DUP2 MLOAD DUP2 LT PUSH2 0x74BF JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE PUSH1 0x1 ADD PUSH2 0x745A JUMP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x7383 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x7378 JUMP JUMPDEST POP POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x2 DUP4 MLOAD LT ISZERO DUP1 ISZERO PUSH2 0x7516 JUMPI POP DUP2 MLOAD PUSH1 0x1 ADD DUP4 MLOAD EQ JUMPDEST PUSH2 0x7532 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x66EF SWAP1 PUSH2 0xA8B4 JUMP JUMPDEST DUP2 MLOAD PUSH1 0x3 MUL DUP4 MLOAD PUSH1 0x14 MUL ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x7552 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x757D JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x20 DUP2 ADD PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x6482 JUMPI DUP1 ISZERO PUSH2 0x762C JUMPI PUSH1 0x0 DUP5 PUSH1 0x1 DUP4 SUB DUP2 MLOAD DUP2 LT PUSH2 0x75A7 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDDCA3F43 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x75E7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x75FB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x761F SWAP2 SWAP1 PUSH2 0x9DDB JUMP JUMPDEST PUSH1 0xE8 SHL DUP4 MSTORE POP PUSH1 0x3 SWAP1 SWAP2 ADD SWAP1 JUMPDEST PUSH1 0x0 DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x763A JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD PUSH1 0x60 SHL DUP4 MSTORE POP PUSH1 0x14 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x7587 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MUL DUP4 ISZERO DUP1 ISZERO SWAP1 PUSH2 0x7676 JUMPI POP DUP3 DUP5 DUP3 DUP2 PUSH2 0x7672 JUMPI INVALID JUMPDEST DIV EQ ISZERO JUMPDEST ISZERO PUSH2 0x7685 JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x6485 JUMP JUMPDEST PUSH8 0x6F05B59D3B20000 DUP2 ADD DUP2 DUP2 LT ISZERO PUSH2 0x76A3 JUMPI PUSH1 0x0 SWAP3 POP POP POP PUSH2 0x6485 JUMP JUMPDEST PUSH8 0xDE0B6B3A7640000 SWAP1 DIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x76CF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x76F9 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x35C5 JUMPI DUP3 PUSH1 0x1 DUP3 DUP6 MLOAD SUB SUB DUP2 MLOAD DUP2 LT PUSH2 0x771A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x772E JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE PUSH1 0x1 ADD PUSH2 0x76FF JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x7767 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x7791 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x35C5 JUMPI DUP3 PUSH1 0x1 DUP3 DUP6 MLOAD SUB SUB DUP2 MLOAD DUP2 LT PUSH2 0x77B2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x77C6 JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE PUSH1 0x1 ADD PUSH2 0x7797 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x77FF SWAP2 SWAP1 PUSH2 0x9157 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x7819 SWAP2 SWAP1 PUSH2 0x913B JUMP JUMPDEST SWAP1 POP ADDRESS PUSH4 0xE8E4AF09 DUP4 DUP6 DUP5 PUSH2 0x782D DUP11 PUSH2 0x84E9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x784C SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA253 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7864 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x7899 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x7896 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x991B JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x78DA JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x78C7 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x78CC JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 SWAP5 POP POP POP POP POP PUSH2 0x4523 JUMP JUMPDEST DUP1 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x78E7 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP5 POP POP POP POP POP PUSH2 0x4523 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x18A6 DUP4 PUSH2 0x6AA9 PUSH2 0x790E DUP3 PUSH1 0x1 PUSH2 0x84CA JUMP JUMPDEST PUSH2 0x7918 DUP9 DUP8 PUSH2 0x844E JUMP JUMPDEST SWAP1 PUSH2 0x8484 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x12 SWAP1 POP PUSH1 0x0 PUSH1 0x60 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x4 DUP2 MSTORE PUSH1 0x20 ADD PUSH4 0x313CE567 PUSH1 0xE0 SHL DUP2 MSTORE POP PUSH1 0x40 MLOAD PUSH2 0x795C SWAP2 SWAP1 PUSH2 0xA1C5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x7997 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x799C JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x79B0 JUMPI POP PUSH1 0x20 DUP2 MLOAD LT ISZERO JUMPDEST ISZERO PUSH2 0x79C3 JUMPI PUSH2 0x79C0 DUP2 PUSH1 0x0 PUSH2 0x7C6C JUMP JUMPDEST SWAP3 POP JUMPDEST POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD9638D36 DUP12 PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7A00 SWAP2 SWAP1 PUSH2 0xA679 JUMP JUMPDEST PUSH1 0xA0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7A18 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x7A2C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x7A50 SWAP2 SWAP1 PUSH2 0x9F28 JUMP JUMPDEST SWAP5 POP SWAP5 POP POP POP SWAP3 POP DUP10 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x7B67 JUMPI PUSH1 0x0 DUP8 SWAP1 POP PUSH1 0x0 PUSH2 0x7B00 DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x568D4B6F PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7AB9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x7ACD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x7AF1 SWAP2 SWAP1 PUSH2 0x996D JUMP JUMPDEST PUSH8 0xDE0B6B3A7640000 SWAP1 PUSH2 0x84CA JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x7B1A DUP3 PUSH2 0x6AA9 DUP6 PUSH8 0xDE0B6B3A7640000 PUSH2 0x844E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x7B38 PUSH12 0x33B2E3C9FD0803CE8000000 PUSH2 0x6A02 DUP10 DUP6 PUSH2 0x8484 JUMP JUMPDEST SWAP1 POP DUP6 DUP2 LT PUSH2 0x7B51 JUMPI PUSH1 0x0 SWAP8 POP POP POP POP POP POP POP POP PUSH2 0x6BD6 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6ABD PUSH1 0x1 PUSH2 0x7918 DUP6 PUSH5 0xE8D4A51000 PUSH2 0x84A0 JUMP JUMPDEST DUP10 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x7C4C JUMPI PUSH1 0x0 PUSH2 0x7B96 DUP9 PUSH5 0xE8D4A51000 PUSH2 0x844E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x7BD6 DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xFAE036D5 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6B74 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x7BF0 PUSH8 0xDE0B6B3A7640000 PUSH2 0x6AA9 DUP6 DUP6 PUSH2 0x844E JUMP JUMPDEST SWAP1 POP DUP6 DUP2 GT ISZERO PUSH2 0x7C09 JUMPI PUSH1 0x0 SWAP7 POP POP POP POP POP POP POP PUSH2 0x6BD6 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7C25 PUSH12 0x33B2E3C9FD0803CE8000000 PUSH2 0x6A02 DUP10 DUP6 PUSH2 0x84CA JUMP JUMPDEST SWAP1 POP DUP5 DUP2 GT PUSH2 0x7C3E JUMPI PUSH1 0x0 SWAP8 POP POP POP POP POP POP POP POP PUSH2 0x6BD6 JUMP JUMPDEST POP SWAP6 POP PUSH2 0x6BD6 SWAP5 POP POP POP POP POP JUMP JUMPDEST POP PUSH1 0x0 SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x7C67 DUP4 DUP4 DUP4 PUSH2 0x878E JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4523 DUP4 DUP4 PUSH2 0x87B5 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x7C83 PUSH2 0x8981 JUMP JUMPDEST DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x7C97 SWAP2 SWAP1 PUSH2 0x9A19 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x7CB1 SWAP2 SWAP1 PUSH2 0x99FD JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH4 0x205E01D7 PUSH1 0xE1 SHL DUP6 DUP8 DUP7 PUSH2 0x6C34 DUP13 PUSH2 0x84E9 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH1 0x20 ADD MLOAD SWAP1 POP PUSH1 0x60 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x910FFC71 DUP8 PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x7D0A JUMPI DUP7 PUSH2 0x7D20 JUMP JUMPDEST PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE JUMPDEST DUP9 PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x7D43 JUMPI DUP7 PUSH2 0x7D59 JUMP JUMPDEST PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP2 DUP3 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP7 SWAP1 SHL AND SWAP1 SWAP2 MSTORE PUSH2 0x7D8D SWAP3 SWAP2 SWAP1 PUSH1 0x1 SWAP1 PUSH1 0x24 DUP2 ADD PUSH2 0xA2D5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7DA5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x7DB9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x7DE1 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x95CA JUMP JUMPDEST POP POP SWAP1 POP DUP1 MLOAD DUP7 PUSH1 0x0 ADD MLOAD LT PUSH2 0x7DFD JUMPI POP PUSH1 0x0 SWAP2 POP PUSH2 0x4523 SWAP1 POP JUMP JUMPDEST DUP1 DUP7 PUSH1 0x0 ADD MLOAD DUP2 MLOAD DUP2 LT PUSH2 0x7E0D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP3 POP PUSH1 0xF8 DUP4 SWAP1 SHR PUSH1 0x0 SHR PUSH1 0xBB EQ ISZERO PUSH2 0x2072 JUMPI POP PUSH1 0x0 SWAP2 POP PUSH2 0x4523 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x7E3E PUSH2 0x89BF JUMP JUMPDEST DUP5 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x7E52 SWAP2 SWAP1 PUSH2 0x923E JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP7 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x7E6C SWAP2 SWAP1 PUSH2 0x923E JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0x3C7B5FE9 PUSH1 0xE2 SHL DUP2 MSTORE SWAP1 SWAP2 POP ADDRESS SWAP1 PUSH4 0xF1ED7FA4 SWAP1 PUSH2 0x7E99 SWAP1 DUP6 SWAP1 DUP6 SWAP1 DUP9 SWAP1 DUP12 SWAP1 PUSH1 0x4 ADD PUSH2 0xA961 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7EB1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x7EE1 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x7EDE SWAP2 DUP2 ADD SWAP1 PUSH2 0x996D JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x7F0F JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x78C7 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x78CC JUMP JUMPDEST SWAP4 POP PUSH2 0x4523 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x57A281DC DUP7 DUP7 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7F4D SWAP3 SWAP2 SWAP1 PUSH2 0xA20E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7F65 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x7F79 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x7FA1 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x9532 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 SWAP2 POP DUP1 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x803A JUMPI PUSH1 0x40 MLOAD PUSH4 0x15E8A077 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND SWAP1 PUSH4 0x57A281DC SWAP1 PUSH2 0x7FDF SWAP1 DUP8 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0xA20E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7FF7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x800B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x8033 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x9532 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 SWAP2 POP JUMPDEST DUP1 MLOAD DUP7 LT PUSH2 0x804F JUMPI PUSH1 0x0 DUP1 SWAP3 POP SWAP3 POP POP PUSH2 0x66B4 JUMP JUMPDEST DUP1 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x805B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP3 POP POP SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP7 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x8089 SWAP2 SWAP1 PUSH2 0x91EE JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP DUP1 ISZERO PUSH2 0x812D JUMPI PUSH1 0x40 MLOAD PUSH4 0x3CD0243B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x79A04876 SWAP1 PUSH3 0x493E0 SWAP1 PUSH2 0x80C9 SWAP1 PUSH1 0x0 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0xA1F5 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x80E0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x8111 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x810E SWAP2 DUP2 ADD SWAP1 PUSH2 0x9ED0 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x8121 JUMPI PUSH1 0x0 SWAP4 POP POP POP POP PUSH2 0x4523 JUMP JUMPDEST POP SWAP4 POP PUSH2 0x4523 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x66410A21 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x66410A21 SWAP1 PUSH3 0x493E0 SWAP1 PUSH2 0x80C9 SWAP1 PUSH1 0x0 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0xA1F5 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x817A SWAP2 SWAP1 PUSH2 0x9157 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x8194 SWAP2 SWAP1 PUSH2 0x913B JUMP JUMPDEST SWAP1 POP ADDRESS PUSH4 0x30D6570D DUP4 DUP6 DUP5 PUSH2 0x782D DUP11 PUSH2 0x84E9 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP6 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x81D0 SWAP2 SWAP1 PUSH2 0xA1E1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x820E SWAP2 SWAP1 PUSH2 0xA1C5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x8249 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x824E JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x8262 JUMPI POP PUSH1 0x20 DUP2 MLOAD LT ISZERO JUMPDEST ISZERO PUSH2 0x6482 JUMPI PUSH2 0x1914 DUP2 PUSH1 0x0 PUSH2 0x7C6C JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x828B SWAP2 SWAP1 PUSH2 0x9157 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x82A5 SWAP2 SWAP1 PUSH2 0x913B JUMP JUMPDEST SWAP1 POP ADDRESS PUSH4 0xA4698417 PUSH3 0x61A80 DUP5 DUP7 DUP6 PUSH2 0x82BD DUP12 PUSH2 0x84E9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP7 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x82DC SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA253 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x82F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x7899 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x7896 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x991B JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDD62ED3E PUSH1 0xE0 SHL DUP7 DUP7 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x8351 SWAP3 SWAP2 SWAP1 PUSH2 0xA20E JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x838F SWAP2 SWAP1 PUSH2 0xA1C5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x83CA JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x83CF JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x83E3 JUMPI POP PUSH1 0x20 DUP2 MLOAD LT ISZERO JUMPDEST ISZERO PUSH2 0x2072 JUMPI PUSH2 0x6BD6 DUP2 PUSH1 0x0 PUSH2 0x7C6C JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6485 DUP3 PUSH2 0x87DF JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x8417 SWAP2 SWAP1 PUSH2 0x9157 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP1 DUP7 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x8432 SWAP2 SWAP1 PUSH2 0x9157 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x8442 DUP5 DUP5 DUP4 DUP10 PUSH2 0x4650 JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x845D JUMPI POP PUSH1 0x0 PUSH2 0x6485 JUMP JUMPDEST DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 PUSH2 0x846A JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x4523 JUMPI PUSH2 0x4523 PUSH2 0x847F PUSH1 0x1 DUP7 DUP7 PUSH2 0x8846 JUMP JUMPDEST PUSH2 0x88A0 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x4523 JUMPI PUSH2 0x4523 PUSH2 0x847F PUSH1 0x0 DUP7 DUP7 PUSH2 0x8846 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x84B6 JUMPI PUSH2 0x84B6 PUSH2 0x847F PUSH1 0x3 DUP6 DUP6 PUSH2 0x8846 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP2 PUSH2 0x84C1 JUMPI INVALID JUMPDEST DIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x84E3 JUMPI PUSH2 0x84E3 PUSH2 0x847F PUSH1 0x2 DUP6 DUP6 PUSH2 0x8846 JUMP JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP2 PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP2 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x8519 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP4 ISZERO DUP1 PUSH2 0x8537 JUMPI POP DUP2 ISZERO JUMPDEST DUP1 PUSH2 0x8540 JUMPI POP DUP3 ISZERO JUMPDEST ISZERO PUSH2 0x854D JUMPI POP PUSH1 0x0 PUSH2 0x4523 JUMP JUMPDEST DUP4 DUP3 MUL DUP3 DUP6 DUP3 DUP2 PUSH2 0x855A JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x856A JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x4523 JUMP JUMPDEST DUP4 PUSH1 0x1 DUP6 SUB DUP3 ADD DUP2 PUSH2 0x8578 JUMPI INVALID JUMPDEST DIV SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 EXTCODESIZE DUP1 PUSH2 0x8595 JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x1245 JUMP JUMPDEST POP DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDFE1681 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x85CF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x85E3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x8607 SWAP2 SWAP1 PUSH2 0x913B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x70A08231 DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8632 SWAP2 SWAP1 PUSH2 0xA1E1 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x864A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x865E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x8682 SWAP2 SWAP1 PUSH2 0x996D JUMP JUMPDEST PUSH2 0x868E JUMPI POP PUSH1 0x0 PUSH2 0x1245 JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD21220A7 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x86C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x86DB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x86FF SWAP2 SWAP1 PUSH2 0x913B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x70A08231 DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x872A SWAP2 SWAP1 PUSH2 0xA1E1 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x8742 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x8756 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x877A SWAP2 SWAP1 PUSH2 0x996D JUMP JUMPDEST PUSH2 0x8786 JUMPI POP PUSH1 0x0 PUSH2 0x1245 JUMP JUMPDEST POP PUSH1 0x1 SWAP2 SWAP1 POP JUMP JUMPDEST DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO PUSH2 0x87AD JUMPI PUSH2 0x87AD PUSH2 0x847F PUSH1 0x5 DUP6 MLOAD DUP6 PUSH1 0x20 ADD PUSH2 0x88A8 JUMP JUMPDEST SWAP2 ADD PUSH1 0x20 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO PUSH2 0x87D6 JUMPI PUSH2 0x87D6 PUSH2 0x847F PUSH1 0x5 DUP6 MLOAD DUP6 PUSH1 0x20 ADD PUSH2 0x88A8 JUMP JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH20 0xC02AAA39B223FE8D0A0E5C4F27EAD9083C756CC2 EQ ISZERO PUSH2 0x880E JUMPI POP PUSH1 0x12 PUSH2 0x1245 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x8821 SWAP2 SWAP1 PUSH2 0xA198 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB PUSH1 0x1F NOT ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 PUSH1 0xF AND PUSH1 0x4 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH4 0xE946C1BB PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x8865 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA70D JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH1 0x60 PUSH4 0x28006595 PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x8865 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA72E JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP1 NOT AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x4 SWAP1 PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY POP SWAP2 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x6485 DUP2 PUSH2 0xAC22 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x8A25 JUMPI DUP2 DUP3 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x8A3B JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP1 DUP4 MUL DUP6 ADD ADD GT ISZERO PUSH2 0x8A55 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x8A6C JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x8A7F PUSH2 0x8A7A DUP3 PUSH2 0xAB9B JUMP JUMPDEST PUSH2 0xAB75 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x8AA0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x8AC8 JUMPI DUP2 CALLDATALOAD PUSH2 0x8AB6 DUP2 PUSH2 0xAC22 JUMP JUMPDEST DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x8AA3 JUMP JUMPDEST POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x8AE3 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x8AF1 PUSH2 0x8A7A DUP3 PUSH2 0xAB9B JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x8AC8 JUMPI PUSH2 0x8B19 DUP9 DUP5 DUP5 CALLDATALOAD DUP11 ADD ADD PUSH2 0x8A5C JUMP JUMPDEST DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x8B02 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x8B3B JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x8B49 PUSH2 0x8A7A DUP3 PUSH2 0xAB9B JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x8AC8 JUMPI PUSH2 0x8B71 DUP9 DUP5 DUP5 CALLDATALOAD DUP11 ADD ADD PUSH2 0x8D8A JUMP JUMPDEST DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x8B5A JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x8B93 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x8BA1 PUSH2 0x8A7A DUP3 PUSH2 0xAB9B JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x8BC2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x8AC8 JUMPI DUP2 CALLDATALOAD PUSH2 0x8BD8 DUP2 PUSH2 0xAC22 JUMP JUMPDEST DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x8BC5 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x8BFA JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x8C08 PUSH2 0x8A7A DUP3 PUSH2 0xAB9B JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD PUSH1 0x80 DUP1 DUP6 MUL DUP8 ADD DUP4 ADD DUP9 LT ISZERO PUSH2 0x8C2B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x8C52 JUMPI PUSH2 0x8C40 DUP10 DUP5 PUSH2 0x9089 JUMP JUMPDEST DUP6 MSTORE SWAP4 DUP4 ADD SWAP4 SWAP2 DUP2 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x8C2E JUMP JUMPDEST POP POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x8C6E JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x8C7C PUSH2 0x8A7A DUP3 PUSH2 0xAB9B JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x8C9D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x8AC8 JUMPI DUP2 CALLDATALOAD DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x8CA0 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x8CCC JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x8CDA PUSH2 0x8A7A DUP3 PUSH2 0xAB9B JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x8CFB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x8AC8 JUMPI DUP2 MLOAD DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x8CFE JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x8D2A JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x8D38 PUSH2 0x8A7A DUP3 PUSH2 0xAB9B JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x8D59 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x8C52 JUMPI DUP3 MLOAD PUSH4 0xFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x8D78 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP6 MSTORE SWAP4 DUP4 ADD SWAP4 SWAP2 DUP4 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x8D5D JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x8D9A JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x8DA8 PUSH2 0x8A7A DUP3 PUSH2 0xABBA JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x8DBF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP5 ADD CALLDATACOPY PUSH1 0x0 SWAP1 DUP3 ADD PUSH1 0x20 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x8DE8 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x8DF6 PUSH2 0x8A7A DUP3 PUSH2 0xABBA JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x8E0D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x34D2 DUP2 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP7 ADD PUSH2 0xABE8 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x2 DUP2 LT PUSH2 0x6485 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x8E3E JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x8E48 PUSH1 0x60 PUSH2 0xAB75 JUMP JUMPDEST SWAP1 POP DUP2 CALLDATALOAD PUSH2 0x8E55 DUP2 PUSH2 0xAC22 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH2 0x8E65 DUP2 PUSH2 0xAC37 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP3 ADD CALLDATALOAD PUSH2 0x8E78 DUP2 PUSH2 0xAC37 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x8E94 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x8E9E PUSH1 0x60 PUSH2 0xAB75 JUMP JUMPDEST SWAP1 POP DUP2 MLOAD PUSH2 0x8EAB DUP2 PUSH2 0xAC22 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x8EBB DUP2 PUSH2 0xAC37 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0x8E78 DUP2 PUSH2 0xAC37 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x8EDF JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x8EE9 PUSH1 0x40 PUSH2 0xAB75 JUMP JUMPDEST SWAP1 POP DUP2 CALLDATALOAD PUSH2 0x8EF6 DUP2 PUSH2 0xAC22 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH2 0x8F06 DUP2 PUSH2 0xAC22 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x8F22 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x8F2C PUSH1 0xA0 PUSH2 0xAB75 JUMP JUMPDEST SWAP1 POP DUP2 CALLDATALOAD DUP2 MSTORE PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH2 0x8F40 DUP2 PUSH2 0xAC22 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP3 ADD CALLDATALOAD PUSH2 0x8F53 DUP2 PUSH2 0xAC22 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP3 ADD CALLDATALOAD PUSH2 0x8F66 DUP2 PUSH2 0xAC22 JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP3 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x8F84 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x8F90 DUP5 DUP3 DUP6 ADD PUSH2 0x8D8A JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x180 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x8FAF JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x8FB8 DUP2 PUSH2 0xAB75 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x8FC5 DUP4 DUP4 PUSH2 0x8A09 JUMP JUMPDEST DUP2 MSTORE PUSH2 0x8FD4 DUP4 PUSH1 0x20 DUP5 ADD PUSH2 0x8A09 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x8FE6 DUP4 PUSH1 0x40 DUP5 ADD PUSH2 0x90E6 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x8FF8 DUP4 PUSH1 0x60 DUP5 ADD PUSH2 0x90E6 JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH2 0x900A DUP4 PUSH1 0x80 DUP5 ADD PUSH2 0x90E6 JUMP JUMPDEST PUSH1 0x80 DUP3 ADD MSTORE PUSH2 0x901C DUP4 PUSH1 0xA0 DUP5 ADD PUSH2 0x8A09 JUMP JUMPDEST PUSH1 0xA0 DUP3 ADD MSTORE PUSH2 0x902E DUP4 PUSH1 0xC0 DUP5 ADD PUSH2 0x8A09 JUMP JUMPDEST PUSH1 0xC0 DUP3 ADD MSTORE PUSH2 0x9040 DUP4 PUSH1 0xE0 DUP5 ADD PUSH2 0x8A09 JUMP JUMPDEST PUSH1 0xE0 DUP3 ADD MSTORE PUSH2 0x100 PUSH2 0x9054 DUP5 DUP3 DUP6 ADD PUSH2 0x8A09 JUMP JUMPDEST SWAP1 DUP3 ADD MSTORE PUSH2 0x120 DUP3 DUP2 ADD CALLDATALOAD SWAP1 DUP3 ADD MSTORE PUSH2 0x140 PUSH2 0x9072 DUP5 DUP3 DUP6 ADD PUSH2 0x9108 JUMP JUMPDEST DUP2 DUP4 ADD MSTORE POP PUSH2 0x160 DUP1 DUP4 ADD CALLDATALOAD DUP2 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x909A JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x90A4 PUSH1 0x80 PUSH2 0xAB75 JUMP JUMPDEST SWAP1 POP DUP2 CALLDATALOAD PUSH1 0x4 DUP2 LT PUSH2 0x90B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH2 0x90C5 DUP2 PUSH2 0xAC5C JUMP JUMPDEST DUP1 PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 DUP3 ADD CALLDATALOAD PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP3 ADD CALLDATALOAD PUSH1 0x60 DUP3 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x6485 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 MLOAD PUSH2 0x6485 DUP2 PUSH2 0xAC22 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x6485 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x9130 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x4523 DUP2 PUSH2 0xAC22 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x914C JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x4523 DUP2 PUSH2 0xAC22 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x9169 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP3 MLOAD PUSH2 0x9174 DUP2 PUSH2 0xAC22 JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 SWAP3 POP PUSH2 0x9185 DUP2 PUSH2 0xAC22 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x91A5 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 MLOAD PUSH2 0x91B0 DUP2 PUSH2 0xAC22 JUMP JUMPDEST PUSH1 0x20 DUP7 ADD MLOAD SWAP1 SWAP5 POP PUSH2 0x91C1 DUP2 PUSH2 0xAC22 JUMP JUMPDEST PUSH1 0x40 DUP7 ADD MLOAD SWAP1 SWAP4 POP PUSH2 0x91D2 DUP2 PUSH2 0xAC22 JUMP JUMPDEST PUSH1 0x60 DUP7 ADD MLOAD SWAP1 SWAP3 POP PUSH2 0x91E3 DUP2 PUSH2 0xAC22 JUMP JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP1 SWAP4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x9202 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 MLOAD PUSH2 0x920D DUP2 PUSH2 0xAC22 JUMP JUMPDEST PUSH1 0x20 DUP6 ADD MLOAD SWAP1 SWAP4 POP PUSH2 0x921E DUP2 PUSH2 0xAC22 JUMP JUMPDEST PUSH1 0x40 DUP6 ADD MLOAD SWAP1 SWAP3 POP DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x9233 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x9250 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH2 0x925B DUP2 PUSH2 0xAC22 JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x9277 JUMPI DUP3 DUP4 REVERT JUMPDEST SWAP1 DUP5 ADD SWAP1 PUSH1 0xA0 DUP3 DUP8 SUB SLT ISZERO PUSH2 0x928A JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x9294 PUSH1 0xA0 PUSH2 0xAB75 JUMP JUMPDEST DUP3 MLOAD DUP2 MSTORE PUSH1 0x20 DUP4 ADD MLOAD PUSH2 0x92A6 DUP2 PUSH2 0xAC22 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP4 ADD MLOAD PUSH2 0x92B9 DUP2 PUSH2 0xAC22 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP4 ADD MLOAD PUSH2 0x92CC DUP2 PUSH2 0xAC22 JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP4 ADD MLOAD DUP3 DUP2 GT ISZERO PUSH2 0x92E2 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x92EE DUP9 DUP3 DUP7 ADD PUSH2 0x8DD8 JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE POP DUP1 SWAP4 POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x9318 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x9323 DUP2 PUSH2 0xAC22 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x9333 DUP2 PUSH2 0xAC22 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH2 0x9343 DUP2 PUSH2 0xAC22 JUMP JUMPDEST SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH2 0x9353 DUP2 PUSH2 0xAC22 JUMP JUMPDEST SWAP2 POP PUSH1 0x80 DUP7 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x936D JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x9379 DUP9 DUP3 DUP10 ADD PUSH2 0x8C5E JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x939B JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x93A6 DUP2 PUSH2 0xAC22 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x93B6 DUP2 PUSH2 0xAC22 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x93C6 DUP2 PUSH2 0xAC22 JUMP JUMPDEST SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x93E0 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x93EC DUP8 DUP3 DUP9 ADD PUSH2 0x8C5E JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x940D JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x9418 DUP2 PUSH2 0xAC22 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x9428 DUP2 PUSH2 0xAC22 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x9438 DUP2 PUSH2 0xAC22 JUMP JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP3 SWAP4 PUSH1 0x60 ADD CALLDATALOAD SWAP3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x945C JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x9467 DUP2 PUSH2 0xAC22 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x9482 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x948E DUP8 DUP4 DUP9 ADD PUSH2 0x8A5C JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x94A3 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x94B0 DUP7 DUP3 DUP8 ADD PUSH2 0x8C5E JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x94D1 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x94DC DUP2 PUSH2 0xAC22 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH2 0x9343 DUP2 PUSH2 0xAC22 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x9505 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x951A JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x9526 DUP6 DUP3 DUP7 ADD PUSH2 0x8A14 JUMP JUMPDEST SWAP1 SWAP7 SWAP1 SWAP6 POP SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x9544 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x9559 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 ADD PUSH1 0x1F DUP2 ADD DUP6 SGT PUSH2 0x9569 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP1 MLOAD PUSH2 0x9577 PUSH2 0x8A7A DUP3 PUSH2 0xAB9B JUMP JUMPDEST DUP2 DUP2 MSTORE DUP4 DUP2 ADD SWAP1 DUP4 DUP6 ADD DUP6 DUP5 MUL DUP6 ADD DUP7 ADD DUP10 LT ISZERO PUSH2 0x9593 JUMPI DUP7 DUP8 REVERT JUMPDEST DUP7 SWAP5 POP JUMPDEST DUP4 DUP6 LT ISZERO PUSH2 0x95BE JUMPI DUP1 MLOAD PUSH2 0x95AA DUP2 PUSH2 0xAC22 JUMP JUMPDEST DUP4 MSTORE PUSH1 0x1 SWAP5 SWAP1 SWAP5 ADD SWAP4 SWAP2 DUP6 ADD SWAP2 DUP6 ADD PUSH2 0x9597 JUMP JUMPDEST POP SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x95DE JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x95F4 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 DUP7 ADD SWAP2 POP DUP7 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x9607 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x9615 PUSH2 0x8A7A DUP3 PUSH2 0xAB9B JUMP JUMPDEST DUP1 DUP3 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD SWAP3 POP DUP1 DUP7 ADD DUP12 DUP3 DUP4 DUP8 MUL DUP10 ADD ADD GT ISZERO PUSH2 0x9635 JUMPI DUP8 DUP9 REVERT JUMPDEST DUP8 SWAP7 POP JUMPDEST DUP5 DUP8 LT ISZERO PUSH2 0x9657 JUMPI DUP1 MLOAD DUP5 MSTORE PUSH1 0x1 SWAP7 SWAP1 SWAP7 ADD SWAP6 SWAP3 DUP2 ADD SWAP3 DUP2 ADD PUSH2 0x9639 JUMP JUMPDEST POP DUP10 ADD MLOAD SWAP1 SWAP8 POP SWAP4 POP POP POP DUP1 DUP3 GT ISZERO PUSH2 0x966E JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x967B DUP7 DUP3 DUP8 ADD PUSH2 0x8CBC JUMP JUMPDEST SWAP3 POP POP PUSH2 0x968B DUP6 PUSH1 0x40 DUP7 ADD PUSH2 0x8E1E JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x96A8 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x96BE JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x96CA DUP8 DUP4 DUP9 ADD PUSH2 0x8B2B JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x96DF JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x96EC DUP7 DUP3 DUP8 ADD PUSH2 0x8B2B JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x970E JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x9723 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x18A6 DUP5 DUP3 DUP6 ADD PUSH2 0x8B83 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x9741 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x9756 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x9762 DUP6 DUP3 DUP7 ADD PUSH2 0x8B83 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x9185 DUP2 PUSH2 0xAC22 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x9787 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x979C JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x97A8 DUP7 DUP3 DUP8 ADD PUSH2 0x8B83 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x97B9 DUP2 PUSH2 0xAC22 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH2 0x9233 DUP2 PUSH2 0xAC22 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x97DB JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x97F0 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 ADD PUSH1 0x1F DUP2 ADD DUP6 SGT PUSH2 0x9800 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP1 MLOAD PUSH2 0x980E PUSH2 0x8A7A DUP3 PUSH2 0xAB9B JUMP JUMPDEST DUP2 DUP2 MSTORE DUP4 DUP2 ADD SWAP1 DUP4 DUP6 ADD DUP6 DUP5 MUL DUP6 ADD DUP7 ADD DUP10 LT ISZERO PUSH2 0x982A JUMPI DUP7 DUP8 REVERT JUMPDEST DUP7 SWAP5 POP JUMPDEST DUP4 DUP6 LT ISZERO PUSH2 0x95BE JUMPI DUP1 MLOAD DUP4 MSTORE PUSH1 0x1 SWAP5 SWAP1 SWAP5 ADD SWAP4 SWAP2 DUP6 ADD SWAP2 DUP6 ADD PUSH2 0x982E JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x9860 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x9876 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 DUP7 ADD SWAP2 POP DUP7 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x9889 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x9897 PUSH2 0x8A7A DUP3 PUSH2 0xAB9B JUMP JUMPDEST DUP1 DUP3 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD SWAP3 POP DUP1 DUP7 ADD PUSH2 0x180 DUP13 DUP4 DUP3 DUP9 MUL DUP11 ADD ADD GT ISZERO PUSH2 0x98BA JUMPI DUP9 DUP10 REVERT JUMPDEST DUP9 SWAP8 POP JUMPDEST DUP6 DUP9 LT ISZERO PUSH2 0x98E6 JUMPI PUSH2 0x98D0 DUP14 DUP4 PUSH2 0x8F9C JUMP JUMPDEST DUP6 MSTORE PUSH1 0x1 SWAP8 SWAP1 SWAP8 ADD SWAP7 SWAP4 DUP3 ADD SWAP4 SWAP1 DUP2 ADD SWAP1 PUSH2 0x98BE JUMP JUMPDEST POP SWAP2 SWAP9 POP DUP10 ADD CALLDATALOAD SWAP5 POP POP POP POP DUP1 DUP3 GT ISZERO PUSH2 0x98FE JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x990B DUP7 DUP3 DUP8 ADD PUSH2 0x8BEA JUMP JUMPDEST SWAP3 POP POP PUSH2 0x968B DUP6 PUSH1 0x40 DUP7 ADD PUSH2 0x8A09 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x992C JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x9941 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x18A6 DUP5 DUP3 DUP6 ADD PUSH2 0x8CBC JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x995E JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x4523 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x997E JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x9996 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x99AB JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x18A6 DUP5 DUP3 DUP6 ADD PUSH2 0x8DD8 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x99CB JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x99D6 DUP2 PUSH2 0xAC22 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x99F1 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x948E DUP8 DUP4 DUP9 ADD PUSH2 0x8B83 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x9A0E JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x4523 DUP2 PUSH2 0xAC4D JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x80 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x9A2B JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH2 0x9A36 DUP2 PUSH2 0xAC4D JUMP JUMPDEST SWAP2 POP PUSH2 0x9A45 DUP5 PUSH1 0x20 DUP6 ADD PUSH2 0x8E83 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP5 DUP7 SUB PUSH1 0xA0 DUP2 SLT ISZERO PUSH2 0x9A64 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x40 DUP2 SLT ISZERO PUSH2 0x9A71 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x9A7C PUSH1 0x40 PUSH2 0xAB75 JUMP JUMPDEST DUP6 CALLDATALOAD DUP2 MSTORE PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x9A8E DUP2 PUSH2 0xAC22 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE SWAP4 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x9AA3 DUP2 PUSH2 0xAC22 JUMP JUMPDEST SWAP3 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH2 0x9AB3 DUP2 PUSH2 0xAC22 JUMP JUMPDEST SWAP2 POP PUSH1 0x80 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x93E0 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x9AE2 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x9AF8 JUMPI DUP4 DUP5 REVERT JUMPDEST SWAP1 DUP7 ADD SWAP1 PUSH1 0x40 DUP3 DUP10 SUB SLT ISZERO PUSH2 0x9B0B JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x9B15 PUSH1 0x40 PUSH2 0xAB75 JUMP JUMPDEST PUSH2 0x9B1F DUP10 DUP5 PUSH2 0x8A09 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP3 DUP2 GT ISZERO PUSH2 0x9B32 JUMPI DUP6 DUP7 REVERT JUMPDEST PUSH2 0x9B3E DUP11 DUP3 DUP7 ADD PUSH2 0x8AD3 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP DUP1 SWAP7 POP POP PUSH2 0x9B55 DUP9 PUSH1 0x20 DUP10 ADD PUSH2 0x8A09 JUMP JUMPDEST SWAP5 POP PUSH2 0x9B64 DUP9 PUSH1 0x40 DUP10 ADD PUSH2 0x8A09 JUMP JUMPDEST SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x9B79 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x93EC DUP8 DUP3 DUP9 ADD PUSH2 0x8C5E JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x9B9B JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x9BA5 DUP7 DUP7 PUSH2 0x8E2D JUMP JUMPDEST SWAP4 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH2 0x9BB5 DUP2 PUSH2 0xAC4D JUMP JUMPDEST SWAP3 POP PUSH1 0x80 DUP6 ADD CALLDATALOAD PUSH2 0x9BC5 DUP2 PUSH2 0xAC4D JUMP JUMPDEST SWAP2 POP PUSH1 0xA0 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x93E0 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x9BF4 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x9BFE DUP7 DUP7 PUSH2 0x8ECE JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x9AA3 DUP2 PUSH2 0xAC22 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x9C23 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x9C39 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x9C45 DUP9 DUP4 DUP10 ADD PUSH2 0x8F11 JUMP JUMPDEST SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP2 POP PUSH2 0x9C57 DUP3 PUSH2 0xAC22 JUMP JUMPDEST SWAP1 SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP1 PUSH2 0x9C69 DUP3 PUSH2 0xAC22 JUMP JUMPDEST SWAP1 SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD SWAP1 DUP1 DUP3 GT ISZERO PUSH2 0x9B79 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x9C93 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x9CA8 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x9CB4 DUP8 DUP3 DUP9 ADD PUSH2 0x8F11 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x9428 DUP2 PUSH2 0xAC22 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x9CDA JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x9CEF JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x9CFB DUP8 DUP3 DUP9 ADD PUSH2 0x8F11 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x9D13 DUP2 PUSH2 0xAC22 JUMP JUMPDEST SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH2 0x91E3 DUP2 PUSH2 0xAC22 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x220 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x9D38 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x9D42 DUP6 DUP6 PUSH2 0x8F9C JUMP JUMPDEST SWAP3 POP PUSH2 0x9D52 DUP6 PUSH2 0x180 DUP7 ADD PUSH2 0x9089 JUMP JUMPDEST SWAP2 POP PUSH2 0x200 DUP5 ADD CALLDATALOAD PUSH2 0x9233 DUP2 PUSH2 0xAC22 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP5 DUP7 SUB PUSH1 0xC0 DUP2 SLT ISZERO PUSH2 0x9D79 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x60 DUP2 SLT ISZERO PUSH2 0x9D86 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x9D91 PUSH1 0x60 PUSH2 0xAB75 JUMP JUMPDEST DUP6 CALLDATALOAD PUSH2 0x9D9C DUP2 PUSH2 0xAC22 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP7 DUP2 ADD CALLDATALOAD SWAP1 DUP3 ADD MSTORE PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH2 0x9DB6 DUP2 PUSH2 0xAC22 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE SWAP4 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH2 0x9DCB DUP2 PUSH2 0xAC22 JUMP JUMPDEST SWAP3 POP PUSH1 0x80 DUP6 ADD CALLDATALOAD PUSH2 0x9BC5 DUP2 PUSH2 0xAC22 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x9DEC JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH3 0xFFFFFF DUP2 AND DUP2 EQ PUSH2 0x4523 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x9E13 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 MLOAD SWAP4 POP PUSH1 0x20 DUP1 DUP7 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x9E31 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP2 DUP9 ADD SWAP2 POP DUP9 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x9E44 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x9E52 PUSH2 0x8A7A DUP3 PUSH2 0xAB9B JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 DUP2 ADD SWAP1 DUP5 DUP7 ADD DUP7 DUP5 MUL DUP7 ADD DUP8 ADD DUP14 LT ISZERO PUSH2 0x9E6E JUMPI DUP9 DUP10 REVERT JUMPDEST DUP9 SWAP6 POP JUMPDEST DUP4 DUP7 LT ISZERO PUSH2 0x9E98 JUMPI PUSH2 0x9E84 DUP14 DUP3 PUSH2 0x90FD JUMP JUMPDEST DUP4 MSTORE PUSH1 0x1 SWAP6 SWAP1 SWAP6 ADD SWAP5 SWAP2 DUP7 ADD SWAP2 DUP7 ADD PUSH2 0x9E72 JUMP JUMPDEST POP PUSH1 0x40 DUP12 ADD MLOAD SWAP1 SWAP9 POP SWAP5 POP POP POP DUP1 DUP4 GT ISZERO PUSH2 0x9EB1 JUMPI DUP5 DUP6 REVERT JUMPDEST POP POP PUSH2 0x9EBF DUP8 DUP3 DUP9 ADD PUSH2 0x8D1A JUMP JUMPDEST PUSH1 0x60 SWAP7 SWAP1 SWAP7 ADD MLOAD SWAP5 SWAP8 SWAP4 SWAP7 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x9EE2 JUMPI DUP2 DUP3 REVERT JUMPDEST POP POP DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD MLOAD SWAP1 SWAP3 SWAP1 SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x9F08 JUMPI DUP2 DUP3 REVERT JUMPDEST POP POP DUP3 MLOAD PUSH1 0x20 DUP5 ADD MLOAD PUSH1 0x40 DUP6 ADD MLOAD PUSH1 0x60 SWAP1 SWAP6 ADD MLOAD SWAP2 SWAP7 SWAP1 SWAP6 POP SWAP1 SWAP3 POP SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x9F3F JUMPI DUP3 DUP4 REVERT JUMPDEST POP POP DUP4 MLOAD PUSH1 0x20 DUP6 ADD MLOAD PUSH1 0x40 DUP7 ADD MLOAD PUSH1 0x60 DUP8 ADD MLOAD PUSH1 0x80 SWAP1 SWAP8 ADD MLOAD SWAP3 SWAP9 SWAP2 SWAP8 POP SWAP6 SWAP5 POP SWAP1 SWAP3 POP SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x9F78 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x4523 DUP2 PUSH2 0xAC5C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP4 MSTORE PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x60 DUP3 ADD MLOAD PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP3 ADD MLOAD PUSH1 0xA0 PUSH1 0x80 DUP6 ADD MSTORE PUSH2 0x18A6 PUSH1 0xA0 DUP6 ADD DUP3 PUSH2 0xA050 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD DUP4 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xA016 JUMPI DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x9FF1 JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD DUP4 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xA016 JUMPI DUP2 MLOAD DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0xA034 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0xA068 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0xABE8 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 MSTORE PUSH1 0x20 DUP1 DUP3 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 DUP2 AND SWAP2 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP2 DUP3 ADD MLOAD AND SWAP2 ADD MSTORE JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP4 MSTORE PUSH1 0x20 DUP1 DUP4 ADD MLOAD ISZERO ISZERO SWAP1 DUP5 ADD MSTORE PUSH1 0x40 DUP1 DUP4 ADD MLOAD SWAP1 SWAP2 AND SWAP1 DUP4 ADD MSTORE PUSH1 0x60 SWAP1 DUP2 ADD MLOAD ISZERO ISZERO SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP4 MSTORE PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x40 PUSH1 0x20 DUP6 ADD MSTORE PUSH2 0x18A6 PUSH1 0x40 DUP6 ADD DUP3 PUSH2 0xA050 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP4 MSTORE PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 DUP3 AND PUSH1 0x20 DUP7 ADD MSTORE DUP1 PUSH1 0x40 DUP6 ADD MLOAD AND PUSH1 0x40 DUP7 ADD MSTORE DUP1 PUSH1 0x60 DUP6 ADD MLOAD AND PUSH1 0x60 DUP7 ADD MSTORE POP POP PUSH1 0x80 DUP3 ADD MLOAD PUSH1 0xA0 PUSH1 0x80 DUP6 ADD MSTORE PUSH2 0x18A6 PUSH1 0xA0 DUP6 ADD DUP3 PUSH2 0xA050 JUMP JUMPDEST DUP1 MLOAD PUSH2 0xA15A DUP2 PUSH2 0xAC18 JUMP JUMPDEST DUP3 MSTORE PUSH1 0x20 DUP2 DUP2 ADD MLOAD PUSH1 0xFF AND SWAP1 DUP4 ADD MSTORE PUSH1 0x40 DUP1 DUP3 ADD MLOAD SWAP1 DUP4 ADD MSTORE PUSH1 0x60 SWAP1 DUP2 ADD MLOAD SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x60 SWAP2 SWAP1 SWAP2 SHL PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 MSTORE PUSH1 0x14 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP4 CALLDATACOPY SWAP2 ADD SWAP1 DUP2 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0xA1D7 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0xABE8 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND DUP2 MSTORE SWAP3 DUP5 AND PUSH1 0x20 DUP5 ADD MSTORE SWAP1 DUP4 AND PUSH1 0x40 DUP4 ADD MSTORE SWAP1 SWAP2 AND PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 DUP2 AND PUSH1 0x20 DUP4 ADD MSTORE DUP4 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x6BD6 SWAP1 DUP4 ADD DUP5 PUSH2 0xA021 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND DUP2 MSTORE SWAP3 DUP5 AND PUSH1 0x20 DUP5 ADD MSTORE SWAP3 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE SWAP1 ISZERO ISZERO PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE DUP3 ISZERO ISZERO PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x6BD6 SWAP1 DUP4 ADD DUP5 PUSH2 0xA050 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND DUP3 MSTORE DUP6 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0xA0 PUSH1 0x80 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0xA367 SWAP1 DUP4 ADD DUP5 PUSH2 0xA050 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND DUP2 MSTORE PUSH1 0x60 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0xA396 SWAP1 DUP4 ADD DUP6 PUSH2 0x9FDE JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x6BD6 DUP2 DUP6 PUSH2 0xA021 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP2 MSTORE PUSH1 0x0 PUSH2 0xA3BF DUP6 PUSH2 0xAC18 JUMP JUMPDEST DUP5 PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x80 PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0xA3D9 PUSH1 0x80 DUP4 ADD DUP6 PUSH2 0xA021 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0xA367 DUP2 DUP6 PUSH2 0xA021 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 DUP2 AND DUP3 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x100 SWAP1 PUSH2 0xA408 DUP12 PUSH2 0xAC18 JUMP JUMPDEST DUP11 PUSH1 0x20 DUP6 ADD MSTORE DUP2 PUSH1 0x40 DUP6 ADD MSTORE PUSH2 0xA420 DUP3 DUP6 ADD DUP12 PUSH2 0xA021 JUMP JUMPDEST SWAP2 POP DUP4 DUP3 SUB PUSH1 0x60 DUP6 ADD MSTORE PUSH2 0xA434 DUP3 DUP11 PUSH2 0xA021 JUMP JUMPDEST SWAP1 DUP9 AND PUSH1 0x80 DUP6 ADD MSTORE SWAP1 POP PUSH2 0xA447 DUP7 PUSH2 0xAC18 JUMP JUMPDEST DUP6 PUSH1 0xA0 DUP5 ADD MSTORE DUP3 DUP2 SUB PUSH1 0xC0 DUP5 ADD MSTORE PUSH2 0xA45F DUP2 DUP7 PUSH2 0xA021 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 SUB PUSH1 0xE0 DUP5 ADD MSTORE PUSH2 0xA473 DUP2 DUP6 PUSH2 0xA021 JUMP JUMPDEST SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND DUP2 MSTORE PUSH1 0x40 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x18A6 SWAP1 DUP4 ADD DUP5 PUSH2 0xA102 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x0 SWAP1 DUP5 PUSH1 0x40 DUP5 ADD DUP4 JUMPDEST DUP7 DUP2 LT ISZERO PUSH2 0xA4E9 JUMPI DUP3 CALLDATALOAD PUSH2 0xA4CE DUP2 PUSH2 0xAC22 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 MSTORE SWAP2 DUP4 ADD SWAP2 SWAP1 DUP4 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0xA4BB JUMP JUMPDEST POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 MSTORE PUSH2 0xA507 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x9FDE JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x1914 DUP2 DUP6 PUSH2 0xA021 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 MSTORE PUSH2 0xA52C PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x9FDE JUMP JUMPDEST SWAP1 POP DUP3 PUSH1 0x20 DUP4 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD PUSH1 0x60 DUP4 MSTORE DUP1 DUP7 MLOAD DUP1 DUP4 MSTORE PUSH1 0x80 DUP6 ADD SWAP2 POP PUSH1 0x20 SWAP3 POP PUSH1 0x80 DUP4 DUP3 MUL DUP7 ADD ADD DUP4 DUP10 ADD DUP6 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xA590 JUMPI PUSH1 0x7F NOT DUP9 DUP5 SUB ADD DUP6 MSTORE PUSH2 0xA57E DUP4 DUP4 MLOAD PUSH2 0xA050 JUMP JUMPDEST SWAP5 DUP7 ADD SWAP5 SWAP3 POP SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0xA562 JUMP JUMPDEST POP POP DUP6 DUP2 SUB DUP5 DUP8 ADD MSTORE PUSH2 0xA5A3 DUP2 DUP10 PUSH2 0xA021 JUMP JUMPDEST SWAP4 POP POP POP POP DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x6BD6 DUP2 DUP6 PUSH2 0xA021 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 PUSH1 0x40 SWAP1 DUP2 DUP6 ADD SWAP1 DUP1 DUP5 MUL DUP7 ADD DUP4 ADD DUP8 DUP6 ADD DUP7 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xA621 JUMPI DUP9 DUP4 SUB PUSH1 0x3F NOT ADD DUP6 MSTORE DUP2 MLOAD DUP1 MLOAD DUP8 DUP6 MSTORE PUSH2 0xA602 DUP9 DUP7 ADD DUP3 PUSH2 0xA050 JUMP JUMPDEST SWAP2 DUP10 ADD MLOAD ISZERO ISZERO SWAP5 DUP10 ADD SWAP5 SWAP1 SWAP5 MSTORE SWAP5 DUP8 ADD SWAP5 SWAP3 POP SWAP1 DUP7 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0xA5DE JUMP JUMPDEST POP SWAP1 SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x4523 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xA021 JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST DUP4 ISZERO ISZERO DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x60 PUSH1 0x40 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x1914 SWAP1 DUP4 ADD DUP5 PUSH2 0xA021 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP3 MSTORE PUSH1 0x60 PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0xA396 PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0xA050 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x4523 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xA050 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 MSTORE PUSH2 0xA52C PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0xA050 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH3 0xFFFFFF SWAP1 SWAP2 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND DUP2 MSTORE PUSH1 0x40 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x18A6 SWAP1 DUP4 ADD DUP5 PUSH2 0xA021 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH2 0xA71A DUP6 PUSH2 0xAC18 JUMP JUMPDEST SWAP4 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH1 0x8 DUP6 LT PUSH2 0xA71A JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH1 0xE0 DUP3 ADD PUSH2 0xA74B DUP8 PUSH2 0xABDD JUMP JUMPDEST DUP4 MSTORE PUSH1 0x20 PUSH1 0xE0 DUP2 DUP6 ADD MSTORE DUP2 DUP8 MLOAD PUSH2 0xA762 DUP2 DUP6 PUSH2 0xA679 JUMP JUMPDEST SWAP2 POP DUP2 SWAP4 POP DUP3 DUP2 MUL DUP3 ADD DUP4 DUP11 ADD DUP7 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xA79B JUMPI DUP7 DUP4 SUB DUP6 MSTORE PUSH2 0xA789 DUP4 DUP4 MLOAD PUSH2 0x9F94 JUMP JUMPDEST SWAP5 DUP7 ADD SWAP5 SWAP3 POP SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0xA771 JUMP JUMPDEST POP POP DUP7 DUP2 SUB PUSH1 0x40 DUP9 ADD MSTORE DUP1 SWAP5 POP DUP9 MLOAD SWAP3 POP PUSH2 0xA7B6 DUP4 DUP3 PUSH2 0xA679 JUMP JUMPDEST SWAP5 POP POP POP DUP2 DUP8 ADD DUP5 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0xA7E0 JUMPI PUSH2 0xA7D2 DUP6 DUP4 MLOAD PUSH2 0x9F83 JUMP JUMPDEST SWAP5 POP SWAP1 DUP4 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0xA7BF JUMP JUMPDEST POP POP POP POP DUP1 SWAP2 POP POP PUSH2 0x1914 PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0xA0AE JUMP JUMPDEST PUSH1 0xF SWAP4 DUP5 SIGNEXTEND DUP2 MSTORE SWAP2 SWAP1 SWAP3 SIGNEXTEND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0xF DUP4 SWAP1 SIGNEXTEND DUP2 MSTORE PUSH1 0x80 DUP2 ADD PUSH2 0x4523 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xA07C JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x24 SWAP1 DUP3 ADD MSTORE PUSH32 0x556E6973776170563353616D706C65722F746F6B656E5061746820746F6F2073 PUSH1 0x40 DUP3 ADD MSTORE PUSH4 0x1A1BDC9D PUSH1 0xE2 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x455243323042726964676553616D706C65722F494E56414C49445F544F4B454E PUSH1 0x40 DUP3 ADD MSTORE PUSH5 0x2FA820A4A9 PUSH1 0xD9 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x556E6973776170563353616D706C65722F696E76616C69642070617468206C65 PUSH1 0x40 DUP3 ADD MSTORE PUSH5 0x6E67746873 PUSH1 0xD8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA905 DUP3 DUP8 PUSH2 0xA07C JUMP JUMPDEST DUP5 PUSH1 0xF SIGNEXTEND PUSH1 0x60 DUP4 ADD MSTORE DUP4 PUSH1 0xF SIGNEXTEND PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xC0 PUSH1 0xA0 DUP4 ADD MSTORE PUSH2 0x6BD6 PUSH1 0xC0 DUP4 ADD DUP5 PUSH2 0xA021 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 MSTORE PUSH2 0xA93E PUSH1 0x60 DUP4 ADD DUP7 PUSH2 0xA0E3 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0xA950 DUP2 DUP7 PUSH2 0xA0E3 JUMP JUMPDEST SWAP2 POP POP DUP3 PUSH1 0x40 DUP4 ADD MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 MSTORE PUSH2 0xA974 PUSH1 0x80 DUP4 ADD DUP8 PUSH2 0xA102 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP6 DUP7 AND PUSH1 0x20 DUP5 ADD MSTORE SWAP4 SWAP1 SWAP5 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 MSTORE PUSH2 0xA9AA PUSH1 0x80 DUP4 ADD DUP8 PUSH2 0xA102 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP6 SWAP1 SWAP6 MSTORE POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x40 DUP3 ADD MSTORE SWAP2 AND PUSH1 0x60 SWAP1 SWAP2 ADD MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x220 DUP3 ADD SWAP1 POP PUSH2 0xA9E4 DUP3 DUP7 MLOAD PUSH2 0x9FD1 JUMP JUMPDEST PUSH1 0x20 DUP6 ADD MLOAD PUSH2 0xA9F6 PUSH1 0x20 DUP5 ADD DUP3 PUSH2 0x9FD1 JUMP JUMPDEST POP PUSH1 0x40 DUP6 ADD MLOAD PUSH2 0xAA09 PUSH1 0x40 DUP5 ADD DUP3 PUSH2 0xA17E JUMP JUMPDEST POP PUSH1 0x60 DUP6 ADD MLOAD PUSH2 0xAA1C PUSH1 0x60 DUP5 ADD DUP3 PUSH2 0xA17E JUMP JUMPDEST POP PUSH1 0x80 DUP6 ADD MLOAD PUSH2 0xAA2F PUSH1 0x80 DUP5 ADD DUP3 PUSH2 0xA17E JUMP JUMPDEST POP PUSH1 0xA0 DUP6 ADD MLOAD PUSH2 0xAA42 PUSH1 0xA0 DUP5 ADD DUP3 PUSH2 0x9FD1 JUMP JUMPDEST POP PUSH1 0xC0 DUP6 ADD MLOAD PUSH2 0xAA55 PUSH1 0xC0 DUP5 ADD DUP3 PUSH2 0x9FD1 JUMP JUMPDEST POP PUSH1 0xE0 DUP6 ADD MLOAD PUSH2 0xAA68 PUSH1 0xE0 DUP5 ADD DUP3 PUSH2 0x9FD1 JUMP JUMPDEST POP PUSH2 0x100 DUP1 DUP7 ADD MLOAD PUSH2 0xAA7C DUP3 DUP6 ADD DUP3 PUSH2 0x9FD1 JUMP JUMPDEST POP POP PUSH2 0x120 DUP6 DUP2 ADD MLOAD SWAP1 DUP4 ADD MSTORE PUSH2 0x140 DUP1 DUP7 ADD MLOAD PUSH2 0xAA9C DUP3 DUP6 ADD DUP3 PUSH2 0xA18B JUMP JUMPDEST POP POP PUSH2 0x160 DUP6 DUP2 ADD MLOAD SWAP1 DUP4 ADD MSTORE PUSH2 0xAAB7 PUSH2 0x180 DUP4 ADD DUP6 PUSH2 0xA14F JUMP JUMPDEST PUSH2 0x18A6 PUSH2 0x200 DUP4 ADD DUP5 PUSH2 0x9FD1 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP3 MSTORE PUSH1 0x40 PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x18A6 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x9FDE JUMP JUMPDEST PUSH1 0x0 DUP5 DUP3 MSTORE PUSH1 0x60 PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0xAAF7 PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0x9FDE JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x6BD6 DUP2 DUP6 PUSH2 0x9FDE JUMP JUMPDEST SWAP6 DUP7 MSTORE PUSH1 0x20 DUP7 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0x40 DUP6 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH1 0x1E NOT DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0xAB47 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 ADD DUP1 CALLDATALOAD SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0xAB60 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x20 ADD SWAP2 POP CALLDATASIZE DUP2 SWAP1 SUB DUP3 SGT ISZERO PUSH2 0x8A55 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0xAB93 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0xABB0 JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0xABCF JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST DUP1 PUSH1 0x2 DUP2 LT PUSH2 0x1245 JUMPI INVALID JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xAC03 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xABEB JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0xAC12 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x4 DUP2 LT PUSH2 0x10DD JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x10DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x10DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0xF SIGNEXTEND DUP2 EQ PUSH2 0x10DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x10DD JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x4A 0xA5 0xB7 KECCAK256 0xDE 0xD5 ISZERO 0xAB 0xC PUSH15 0x4021003DC25F17ADB6F2219D6F2DF2 SWAP7 GAS AND CALLDATALOAD 0x2E 0xBB DUP12 PUSH5 0x736F6C6343 STOP MOD 0xC STOP CALLER PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x7B6 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x36 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6F2BF62 EQ PUSH2 0x3B JUMPI DUP1 PUSH4 0x31268657 EQ PUSH2 0x64 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4E PUSH2 0x49 CALLDATASIZE PUSH1 0x4 PUSH2 0x141 JUMP JUMPDEST PUSH2 0x79 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x5B SWAP2 SWAP1 PUSH2 0x1DE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x77 PUSH2 0x72 CALLDATASIZE PUSH1 0x4 PUSH2 0x16F JUMP JUMPDEST PUSH2 0x97 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD AND SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x12F JUMPI PUSH1 0x0 DUP4 DUP4 DUP4 DUP2 DUP2 LT PUSH2 0xB0 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xC5 SWAP2 SWAP1 PUSH2 0x141 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x40 MLOAD PUSH2 0xD4 SWAP1 PUSH2 0x134 JUMP JUMPDEST PUSH2 0xDE SWAP2 SWAP1 PUSH2 0x1DE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 PUSH1 0x0 CREATE DUP1 ISZERO DUP1 ISZERO PUSH2 0xFA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP2 SWAP1 SWAP3 AND OR SWAP1 SSTORE PUSH1 0x1 ADD PUSH2 0x9A JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x58E DUP1 PUSH2 0x1F3 DUP4 CODECOPY ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x152 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x168 JUMPI DUP2 DUP3 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x181 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x198 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1AB JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x1B9 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP7 PUSH1 0x20 DUP1 DUP4 MUL DUP6 ADD ADD GT ISZERO PUSH2 0x1CC JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH1 0x20 SWAP3 SWAP1 SWAP3 ADD SWAP7 SWAP2 SWAP6 POP SWAP1 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x58E CODESIZE SUB DUP1 PUSH2 0x58E DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH2 0x2F SWAP2 PUSH2 0x9E JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND OR SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH2 0x7D SWAP1 PUSH32 0x1D6A6A0506B0B4A554B907A4C29D9F4674E461989D9C1921FEB17B26716385AB SWAP1 DUP4 SWAP1 PUSH1 0x20 ADD PUSH2 0xCC JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 PUSH1 0x1 SSTORE POP PUSH2 0xE7 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xAF JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xC5 JUMPI DUP2 DUP3 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST SWAP2 DUP3 MSTORE PUSH1 0x60 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x34 ADD SWAP1 JUMP JUMPDEST PUSH2 0x498 DUP1 PUSH2 0xF6 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x7B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x9D76EA58 GT PUSH2 0x4E JUMPI DUP1 PUSH4 0x9D76EA58 EQ PUSH2 0xE0 JUMPI DUP1 PUSH4 0xBFA0B133 EQ PUSH2 0x102 JUMPI DUP1 PUSH4 0xCD72D789 EQ PUSH2 0x117 JUMPI DUP1 PUSH4 0xCD7724C3 EQ PUSH2 0xC0 JUMPI PUSH2 0x7B JUMP JUMPDEST DUP1 PUSH4 0x11F2928B EQ PUSH2 0x80 JUMPI DUP1 PUSH4 0x2640F62C EQ PUSH2 0x8A JUMPI DUP1 PUSH4 0x59E94862 EQ PUSH2 0x8A JUMPI DUP1 PUSH4 0x95B68FE7 EQ PUSH2 0xC0 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x88 PUSH2 0x12C JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x96 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xAA PUSH2 0xA5 CALLDATASIZE PUSH1 0x4 PUSH2 0x3BD JUMP JUMPDEST PUSH2 0x16F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xB7 SWAP2 SWAP1 PUSH2 0x431 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xCC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xAA PUSH2 0xDB CALLDATASIZE PUSH1 0x4 PUSH2 0x3BD JUMP JUMPDEST PUSH2 0x1A1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xEC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF5 PUSH2 0x1CD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xB7 SWAP2 SWAP1 PUSH2 0x41D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x10E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xAA PUSH2 0x1DC JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x123 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF5 PUSH2 0x1E2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xE9DB8717BC5DFB20AAF538B4A5A02B7791FF430C SWAP1 CALLVALUE DUP1 ISZERO PUSH2 0x8FC MUL SWAP2 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x16C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x179 PUSH2 0x1FA JUMP JUMPDEST PUSH2 0x199 PUSH1 0x1 SLOAD PUSH2 0x187 PUSH2 0x238 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH2 0x250 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1AB PUSH2 0x1FA JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x0 SLOAD PUSH2 0x199 SWAP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1C7 PUSH2 0x238 JUMP JUMPDEST DUP6 PUSH2 0x2B1 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x1 SLOAD DUP2 JUMP JUMPDEST PUSH20 0xE9DB8717BC5DFB20AAF538B4A5A02B7791FF430C DUP2 JUMP JUMPDEST PUSH20 0xE9DB8717BC5DFB20AAF538B4A5A02B7791FF430C BALANCE ISZERO PUSH2 0x236 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x22D SWAP1 PUSH2 0x43A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH20 0xC02AAA39B223FE8D0A0E5C4F27EAD9083C756CC2 SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x25C DUP6 PUSH2 0x2FD JUMP JUMPDEST PUSH1 0xFF AND PUSH1 0xA EXP SWAP1 POP PUSH1 0x0 PUSH2 0x26F DUP6 PUSH2 0x2FD JUMP JUMPDEST PUSH1 0xFF AND PUSH1 0xA EXP SWAP1 POP PUSH1 0x0 PUSH2 0x284 DUP9 DUP9 DUP9 PUSH2 0x364 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 DUP5 PUSH8 0xDE0B6B3A7640000 DUP9 MUL MUL DUP2 PUSH2 0x29C JUMPI INVALID JUMPDEST DIV DUP2 PUSH2 0x2A4 JUMPI INVALID JUMPDEST DIV SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2BD DUP6 PUSH2 0x2FD JUMP JUMPDEST PUSH1 0xFF AND PUSH1 0xA EXP SWAP1 POP PUSH1 0x0 PUSH2 0x2D0 DUP6 PUSH2 0x2FD JUMP JUMPDEST PUSH1 0xFF AND PUSH1 0xA EXP SWAP1 POP PUSH1 0x0 PUSH2 0x2E5 DUP9 DUP9 DUP9 PUSH2 0x364 JUMP JUMPDEST SWAP1 POP PUSH8 0xDE0B6B3A7640000 DUP4 DUP4 DUP4 DUP9 MUL MUL DUP2 PUSH2 0x29C JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH20 0xC02AAA39B223FE8D0A0E5C4F27EAD9083C756CC2 EQ ISZERO PUSH2 0x32C JUMPI POP PUSH1 0x12 PUSH2 0x19C JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x33F SWAP2 SWAP1 PUSH2 0x3D5 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB PUSH1 0x1F NOT ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 PUSH1 0xF AND PUSH1 0x4 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x37C SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3F2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x64 PUSH8 0xDE0B6B3A7640000 DUP2 PUSH2 0x3A6 JUMPI INVALID JUMPDEST DIV PUSH9 0x56BA3D73AF34F0000 DUP3 MOD ADD SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3CE JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 SWAP2 SWAP1 SWAP2 SHL PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 MSTORE PUSH1 0x14 ADD SWAP1 JUMP JUMPDEST SWAP3 DUP4 MSTORE PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT PUSH1 0x60 SWAP3 DUP4 SHL DUP2 AND PUSH1 0x20 DUP6 ADD MSTORE SWAP2 SHL AND PUSH1 0x34 DUP3 ADD MSTORE PUSH1 0x48 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH14 0x1190525317D5149251D1D1549151 PUSH1 0x92 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH29 0x17B9E1386F0A1D14BCE648F31A9DF07B31B8018B4D351B4F27DD2A0D69 JUMPDEST DIFFICULTY PUSH5 0x736F6C6343 STOP MOD 0xC STOP CALLER LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CODECOPY DELEGATECALL SWAP11 LT 0xD1 PUSH18 0x64DFB5F3D14156461F57837789CB017104D DUP16 0x5E SIGNEXTEND 0xD3 0xEB SUB 0x4F 0xE0 PUSH5 0x736F6C6343 STOP MOD 0xC STOP CALLER PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x71E DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x3F JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x11F2928B EQ PUSH2 0x44 JUMPI DUP1 PUSH4 0x1F00CA74 EQ PUSH2 0x4E JUMPI DUP1 PUSH4 0xCD72D789 EQ PUSH2 0x84 JUMPI DUP1 PUSH4 0xD06CA61F EQ PUSH2 0xA6 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4C PUSH2 0xC6 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x6E PUSH2 0x69 CALLDATASIZE PUSH1 0x4 PUSH2 0x57F JUMP JUMPDEST PUSH2 0x109 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x7B SWAP2 SWAP1 PUSH2 0x654 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x90 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x99 PUSH2 0x259 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x7B SWAP2 SWAP1 PUSH2 0x640 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x6E PUSH2 0xC1 CALLDATASIZE PUSH1 0x4 PUSH2 0x57F JUMP JUMPDEST PUSH2 0x271 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xE9DB8717BC5DFB20AAF538B4A5A02B7791FF430C SWAP1 CALLVALUE DUP1 ISZERO PUSH2 0x8FC MUL SWAP2 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x106 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x2 DUP3 LT ISZERO PUSH2 0x135 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12C SWAP1 PUSH2 0x6C0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x13D PUSH2 0x3AD JUMP JUMPDEST DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x154 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x17E JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP4 DUP2 PUSH1 0x1 DUP6 DUP6 SWAP1 POP SUB DUP2 MLOAD DUP2 LT PUSH2 0x194 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x0 NOT DUP3 ADD JUMPDEST DUP1 ISZERO PUSH2 0x251 JUMPI PUSH2 0x22E PUSH32 0xADC7FCB33C735913B8635927E66896B356A53A912AB2CEFF929E60A04B53B3C1 DUP6 DUP6 PUSH1 0x0 NOT DUP6 ADD DUP2 DUP2 LT PUSH2 0x1DF JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x1F4 SWAP2 SWAP1 PUSH2 0x551 JUMP JUMPDEST DUP7 DUP7 DUP6 DUP2 DUP2 LT PUSH2 0x200 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x215 SWAP2 SWAP1 PUSH2 0x551 JUMP JUMPDEST DUP6 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x221 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x3E2 JUMP JUMPDEST DUP3 PUSH1 0x1 DUP4 SUB DUP2 MLOAD DUP2 LT PUSH2 0x23D JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x0 NOT ADD PUSH2 0x1A5 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH20 0xE9DB8717BC5DFB20AAF538B4A5A02B7791FF430C DUP2 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x2 DUP3 LT ISZERO PUSH2 0x294 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12C SWAP1 PUSH2 0x6C0 JUMP JUMPDEST PUSH2 0x29C PUSH2 0x3AD JUMP JUMPDEST DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x2B3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2DD JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP4 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x2EE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP PUSH1 0x0 JUMPDEST PUSH1 0x0 NOT DUP4 ADD DUP2 LT ISZERO PUSH2 0x251 JUMPI PUSH2 0x38B PUSH32 0xADC7FCB33C735913B8635927E66896B356A53A912AB2CEFF929E60A04B53B3C1 DUP6 DUP6 DUP5 DUP2 DUP2 LT PUSH2 0x339 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x34E SWAP2 SWAP1 PUSH2 0x551 JUMP JUMPDEST DUP7 DUP7 DUP6 PUSH1 0x1 ADD DUP2 DUP2 LT PUSH2 0x35D JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x372 SWAP2 SWAP1 PUSH2 0x551 JUMP JUMPDEST DUP6 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x37E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x443 JUMP JUMPDEST DUP3 DUP3 PUSH1 0x1 ADD DUP2 MLOAD DUP2 LT PUSH2 0x39A JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x2FD JUMP JUMPDEST PUSH20 0xE9DB8717BC5DFB20AAF538B4A5A02B7791FF430C BALANCE ISZERO PUSH2 0x3E0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12C SWAP1 PUSH2 0x698 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x3EE DUP6 PUSH2 0x48F JUMP JUMPDEST PUSH1 0xFF AND PUSH1 0xA EXP SWAP1 POP PUSH1 0x0 PUSH2 0x401 DUP6 PUSH2 0x48F JUMP JUMPDEST PUSH1 0xFF AND PUSH1 0xA EXP SWAP1 POP PUSH1 0x0 PUSH2 0x416 DUP9 DUP9 DUP9 PUSH2 0x4F8 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 DUP5 PUSH8 0xDE0B6B3A7640000 DUP9 MUL MUL DUP2 PUSH2 0x42E JUMPI INVALID JUMPDEST DIV DUP2 PUSH2 0x436 JUMPI INVALID JUMPDEST DIV SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x44F DUP6 PUSH2 0x48F JUMP JUMPDEST PUSH1 0xFF AND PUSH1 0xA EXP SWAP1 POP PUSH1 0x0 PUSH2 0x462 DUP6 PUSH2 0x48F JUMP JUMPDEST PUSH1 0xFF AND PUSH1 0xA EXP SWAP1 POP PUSH1 0x0 PUSH2 0x477 DUP9 DUP9 DUP9 PUSH2 0x4F8 JUMP JUMPDEST SWAP1 POP PUSH8 0xDE0B6B3A7640000 DUP4 DUP4 DUP4 DUP9 MUL MUL DUP2 PUSH2 0x42E JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH20 0xC02AAA39B223FE8D0A0E5C4F27EAD9083C756CC2 EQ ISZERO PUSH2 0x4BE JUMPI POP PUSH1 0x12 PUSH2 0x4F3 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x4D1 SWAP2 SWAP1 PUSH2 0x5F8 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB PUSH1 0x1F NOT ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 PUSH1 0xF AND PUSH1 0x4 ADD SWAP2 POP POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x510 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x615 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x64 PUSH8 0xDE0B6B3A7640000 DUP2 PUSH2 0x53A JUMPI INVALID JUMPDEST DIV PUSH9 0x56BA3D73AF34F0000 DUP3 MOD ADD SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x562 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x578 JUMPI DUP2 DUP3 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x40 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x593 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x5B1 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP7 ADD SWAP2 POP DUP7 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x5C4 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x5D2 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP8 PUSH1 0x20 DUP1 DUP4 MUL DUP6 ADD ADD GT ISZERO PUSH2 0x5E5 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP5 POP DUP1 SWAP4 POP POP POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x60 SWAP2 SWAP1 SWAP2 SHL PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 MSTORE PUSH1 0x14 ADD SWAP1 JUMP JUMPDEST SWAP3 DUP4 MSTORE PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT PUSH1 0x60 SWAP3 DUP4 SHL DUP2 AND PUSH1 0x20 DUP6 ADD MSTORE SWAP2 SHL AND PUSH1 0x34 DUP3 ADD MSTORE PUSH1 0x48 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 DUP5 DUP3 ADD SWAP1 PUSH1 0x40 DUP6 ADD SWAP1 DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x68C JUMPI DUP4 MLOAD DUP4 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x670 JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH14 0x1190525317D5149251D1D1549151 PUSH1 0x92 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH14 0x1410551217D513D3D7D4D213D495 PUSH1 0x92 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SUB SWAP3 SWAP12 0xAD 0xC8 0xB2 0x5E RETURN 0xE0 0xC5 CALLDATASIZE MULMOD 0xC6 PUSH6 0xA6C1E53FC85E DUP16 DUP6 DUP1 0xBE 0xC9 LOG2 GASLIMIT SLT SWAP1 0xC7 STATICCALL PUSH22 0x64736F6C634300060C00336080604052348015610010 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xA42 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x86 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x809A9E55 GT PUSH2 0x59 JUMPI DUP1 PUSH4 0x809A9E55 EQ PUSH2 0x118 JUMPI DUP1 PUSH4 0x81EFCBDD EQ PUSH2 0xF8 JUMPI DUP1 PUSH4 0x910FFC71 EQ PUSH2 0x146 JUMPI DUP1 PUSH4 0xA734F06E EQ PUSH2 0x175 JUMPI DUP1 PUSH4 0xCD72D789 EQ PUSH2 0x197 JUMPI PUSH2 0x86 JUMP JUMPDEST DUP1 PUSH4 0x5734D9A EQ PUSH2 0x8B JUMPI DUP1 PUSH4 0x11F2928B EQ PUSH2 0xC1 JUMPI DUP1 PUSH4 0x418436BC EQ PUSH2 0xCB JUMPI DUP1 PUSH4 0x61E597F9 EQ PUSH2 0xF8 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x97 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xAB PUSH2 0xA6 CALLDATASIZE PUSH1 0x4 PUSH2 0x76C JUMP JUMPDEST PUSH2 0x1AC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xB8 SWAP2 SWAP1 PUSH2 0x965 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xC9 PUSH2 0x1E0 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xD7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xEB PUSH2 0xE6 CALLDATASIZE PUSH1 0x4 PUSH2 0x674 JUMP JUMPDEST PUSH2 0x223 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xB8 SWAP2 SWAP1 PUSH2 0x9E0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x104 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xAB PUSH2 0x113 CALLDATASIZE PUSH1 0x4 PUSH2 0x6EE JUMP JUMPDEST PUSH2 0x2CB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x124 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x138 PUSH2 0x133 CALLDATASIZE PUSH1 0x4 PUSH2 0x634 JUMP JUMPDEST PUSH2 0x2F9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xB8 SWAP3 SWAP2 SWAP1 PUSH2 0x9E9 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x152 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x166 PUSH2 0x161 CALLDATASIZE PUSH1 0x4 PUSH2 0x5B6 JUMP JUMPDEST PUSH2 0x3A1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xB8 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x8DB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x181 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x18A PUSH2 0x422 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xB8 SWAP2 SWAP1 PUSH2 0x8C7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x18A PUSH2 0x43A JUMP JUMPDEST PUSH1 0x60 DUP13 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1BF SWAP2 SWAP1 PUSH2 0x8C7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP SWAP13 SWAP12 POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xE9DB8717BC5DFB20AAF538B4A5A02B7791FF430C SWAP1 CALLVALUE DUP1 ISZERO PUSH2 0x8FC MUL SWAP2 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x220 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x22D PUSH2 0x452 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE EQ PUSH2 0x257 JUMPI DUP7 PUSH2 0x25F JUMP JUMPDEST PUSH2 0x25F PUSH2 0x490 JUMP JUMPDEST SWAP7 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE EQ PUSH2 0x28B JUMPI DUP6 PUSH2 0x293 JUMP JUMPDEST PUSH2 0x293 PUSH2 0x490 JUMP JUMPDEST SWAP6 POP PUSH2 0x2C0 PUSH32 0xFF3CA9D46195C39F9A12AFB74207B4970349FB3CFB1E459BBF170298D326BC7 DUP9 DUP9 PUSH2 0x4A8 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP7 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2DE SWAP2 SWAP1 PUSH2 0x8C7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x304 PUSH2 0x452 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE EQ PUSH2 0x32E JUMPI DUP5 PUSH2 0x336 JUMP JUMPDEST PUSH2 0x336 PUSH2 0x490 JUMP JUMPDEST SWAP5 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE EQ PUSH2 0x362 JUMPI DUP4 PUSH2 0x36A JUMP JUMPDEST PUSH2 0x36A PUSH2 0x490 JUMP JUMPDEST SWAP4 POP PUSH2 0x397 PUSH32 0xFF3CA9D46195C39F9A12AFB74207B4970349FB3CFB1E459BBF170298D326BC7 DUP7 DUP7 PUSH2 0x4A8 JUMP JUMPDEST SWAP2 POP SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP2 DUP3 SWAP2 PUSH1 0x0 SWAP2 PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP3 POP PUSH1 0x1 PUSH1 0x0 SHL DUP4 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x3DA JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x410 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 SWAP1 POP SWAP6 POP SWAP6 POP SWAP6 SWAP3 POP POP POP JUMP JUMPDEST PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE DUP2 JUMP JUMPDEST PUSH20 0xE9DB8717BC5DFB20AAF538B4A5A02B7791FF430C DUP2 JUMP JUMPDEST PUSH20 0xE9DB8717BC5DFB20AAF538B4A5A02B7791FF430C BALANCE ISZERO PUSH2 0x48E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x485 SWAP1 PUSH2 0x9B8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH20 0xC02AAA39B223FE8D0A0E5C4F27EAD9083C756CC2 SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x4C0 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x89C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x64 PUSH8 0xDE0B6B3A7640000 DUP2 PUSH2 0x4EA JUMPI INVALID JUMPDEST DIV PUSH9 0x56BA3D73AF34F0000 DUP3 MOD ADD SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x518 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x52F JUMPI DUP2 DUP3 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x546 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP1 DUP4 MUL DUP6 ADD ADD GT ISZERO PUSH2 0x560 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x578 JUMPI DUP2 DUP3 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x58F JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x560 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH1 0x4 DUP2 LT PUSH2 0x518 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x80 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x5CD JUMPI DUP1 DUP2 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x5D8 DUP2 PUSH2 0x9F7 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x5E8 DUP2 PUSH2 0x9F7 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x5FC JUMPI DUP2 DUP3 REVERT JUMPDEST SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x617 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x623 DUP9 DUP3 DUP10 ADD PUSH2 0x567 JUMP JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 POP SWAP3 SWAP5 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x648 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x653 DUP2 PUSH2 0x9F7 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x663 DUP2 PUSH2 0x9F7 JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x68C JUMPI DUP1 DUP2 REVERT JUMPDEST DUP7 CALLDATALOAD PUSH2 0x697 DUP2 PUSH2 0x9F7 JUMP JUMPDEST SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD PUSH2 0x6A7 DUP2 PUSH2 0x9F7 JUMP JUMPDEST SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP3 POP PUSH1 0x80 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x6D0 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x6DC DUP10 DUP3 DUP11 ADD PUSH2 0x567 JUMP JUMPDEST SWAP8 SWAP11 SWAP7 SWAP10 POP SWAP5 SWAP8 POP SWAP3 SWAP6 SWAP4 SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x706 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x710 DUP9 DUP9 PUSH2 0x501 JUMP JUMPDEST SWAP6 POP PUSH2 0x71F DUP9 PUSH1 0x20 DUP10 ADD PUSH2 0x5A7 JUMP JUMPDEST SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x73B JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x747 DUP11 DUP4 DUP12 ADD PUSH2 0x51E JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x60 DUP10 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x75F JUMPI DUP4 DUP5 REVERT JUMPDEST POP PUSH2 0x6DC DUP10 DUP3 DUP11 ADD PUSH2 0x51E JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x100 DUP14 DUP16 SUB SLT ISZERO PUSH2 0x78E JUMPI DUP6 DUP7 REVERT JUMPDEST PUSH2 0x798 DUP15 DUP15 PUSH2 0x501 JUMP JUMPDEST SWAP12 POP PUSH2 0x7A7 DUP15 PUSH1 0x20 DUP16 ADD PUSH2 0x5A7 JUMP JUMPDEST SWAP11 POP PUSH8 0xFFFFFFFFFFFFFFFF PUSH1 0x40 DUP15 ADD CALLDATALOAD GT ISZERO PUSH2 0x7C1 JUMPI DUP6 DUP7 REVERT JUMPDEST PUSH2 0x7D1 DUP15 PUSH1 0x40 DUP16 ADD CALLDATALOAD DUP16 ADD PUSH2 0x51E JUMP JUMPDEST SWAP1 SWAP11 POP SWAP9 POP PUSH8 0xFFFFFFFFFFFFFFFF PUSH1 0x60 DUP15 ADD CALLDATALOAD GT ISZERO PUSH2 0x7EE JUMPI DUP6 DUP7 REVERT JUMPDEST PUSH2 0x7FE DUP15 PUSH1 0x60 DUP16 ADD CALLDATALOAD DUP16 ADD PUSH2 0x51E JUMP JUMPDEST SWAP1 SWAP9 POP SWAP7 POP PUSH2 0x810 DUP15 PUSH1 0x80 DUP16 ADD PUSH2 0x501 JUMP JUMPDEST SWAP6 POP PUSH2 0x81F DUP15 PUSH1 0xA0 DUP16 ADD PUSH2 0x5A7 JUMP JUMPDEST SWAP5 POP PUSH8 0xFFFFFFFFFFFFFFFF PUSH1 0xC0 DUP15 ADD CALLDATALOAD GT ISZERO PUSH2 0x839 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x849 DUP15 PUSH1 0xC0 DUP16 ADD CALLDATALOAD DUP16 ADD PUSH2 0x51E JUMP JUMPDEST SWAP1 SWAP5 POP SWAP3 POP PUSH8 0xFFFFFFFFFFFFFFFF PUSH1 0xE0 DUP15 ADD CALLDATALOAD GT ISZERO PUSH2 0x866 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x876 DUP15 PUSH1 0xE0 DUP16 ADD CALLDATALOAD DUP16 ADD PUSH2 0x51E JUMP JUMPDEST DUP2 SWAP4 POP DUP1 SWAP3 POP POP POP SWAP3 SWAP6 SWAP9 SWAP12 POP SWAP3 SWAP6 SWAP9 SWAP12 POP SWAP3 SWAP6 SWAP9 SWAP12 JUMP JUMPDEST PUSH1 0x2 DUP2 LT PUSH2 0x898 JUMPI INVALID JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP3 DUP4 MSTORE PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT PUSH1 0x60 SWAP3 DUP4 SHL DUP2 AND PUSH1 0x20 DUP6 ADD MSTORE SWAP2 SHL AND PUSH1 0x34 DUP3 ADD MSTORE PUSH1 0x48 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP1 DUP3 MSTORE DUP5 MLOAD SWAP1 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x20 SWAP1 PUSH1 0x80 DUP5 ADD SWAP1 DUP3 DUP9 ADD DUP5 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x914 JUMPI DUP2 MLOAD DUP5 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP1 DUP5 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x8F8 JUMP JUMPDEST POP POP POP DUP4 DUP2 SUB DUP3 DUP6 ADD MSTORE DUP6 MLOAD DUP1 DUP3 MSTORE DUP7 DUP4 ADD SWAP2 DUP4 ADD SWAP1 DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x948 JUMPI DUP4 MLOAD DUP4 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x92C JUMP JUMPDEST POP POP DUP1 SWAP4 POP POP POP POP PUSH2 0x95D PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x88E JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE DUP3 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x991 JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x975 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x9A2 JUMPI DUP4 PUSH1 0x40 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x40 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH14 0x1190525317D5149251D1D1549151 PUSH1 0x92 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x220 JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE2 PUSH4 0x407849D 0x5C 0xD7 0xED SELFDESTRUCT 0xB5 PUSH28 0xD12EC32549DF2275C7BF35A4463E97D0CF750B5E64736F6C63430006 0xC STOP CALLER ",
                "sourceMap": "11948:1481:38:-:0;;;826:113:25;;;12307:250:38;;;;;;;;;;12369:50:::1;;;;;:::i;:::-;;;;;;;;;;;;;;;;;::::0;::::1;;;;;-1:-1:-1::0;12359:7:38::1;:60:::0;;-1:-1:-1;;;;;;12359:60:38::1;-1:-1:-1::0;;;;;12359:60:38;;;::::1;::::0;;;::::1;::::0;;12447:45:::1;::::0;::::1;::::0;::::1;:::i;:::-;;;;;;;;;;;;;;;;;::::0;::::1;;;;;-1:-1:-1::0;12429:15:38::1;:63:::0;;-1:-1:-1;;;;;;12429:63:38::1;-1:-1:-1::0;;;;;12429:63:38;;;::::1;::::0;;;::::1;::::0;;12510:40:::1;::::0;::::1;::::0;::::1;:::i;:::-;;;;;;;;;;;;;;;;;::::0;::::1;;;;;-1:-1:-1::0;12502:5:38::1;:48:::0;;-1:-1:-1;;;;;;12502:48:38::1;-1:-1:-1::0;;;;;12502:48:38;;;::::1;::::0;;;::::1;::::0;;11948:1481;;;;;;;;;;:::o;:::-;;;;;;;;:::o;:::-;;;;;;;;:::o;:::-;;;;;;;;;;;;"
            },
            "deployedBytecode": {
                "immutableReferences": {
                    "8445": [
                        {
                            "length": 32,
                            "start": 13612
                        },
                        {
                            "length": 32,
                            "start": 20763
                        },
                        {
                            "length": 32,
                            "start": 23334
                        }
                    ]
                },
                "linkReferences": {},
                "object": "0x6080604052600436106103975760003560e01c806374c9d255116101dc578063b90cd2fb11610102578063d9bca372116100a0578063f1ed7fa41161006f578063f1ed7fa414610b02578063f3868e9c146105ec578063f5a4994d14610b22578063fc9fe41b14610b4257610397565b8063d9bca37214610a82578063ddd5aa2814610aa2578063e78ac04514610ac2578063e8e4af0914610ae257610397565b8063c8319084116100dc578063c831908414610a0d578063c8c74a3714610a2d578063cc1621c914610a4d578063cd72d78914610a6d57610397565b8063b90cd2fb146109ad578063bd71ecf6146109cd578063c25c4138146109ed57610397565b80639e3f05c31161017a578063a469841711610149578063a46984171461091f578063a75e744b1461093f578063a76bbec41461095f578063adc636bf1461097f57610397565b80639e3f05c31461089b5780639ea0ff13146108ca578063a0295b8b146108ea578063a2d10ba51461090a57610397565b80638e5a0e07116101b65780638e5a0e071461080c5780639209483b1461083b578063987777481461085b5780639bf3ee351461087b57610397565b806374c9d255146107ac5780637f7f4f13146107cc5780638b6d7b44146107ec57610397565b80633105fec1116102c157806351be4eaa1161025f5780635d5b674f1161022e5780635d5b674f1461071f57806366a1ac6b1461073f57806368be3cf21461075f578063706e2f9b1461078c57610397565b806351be4eaa1461069b5780635505000a146106b057806357494b1d146106df5780635aae4e53146106ff57610397565b806340bc03ae1161029b57806340bc03ae1461060c57806342cbb15c1461062c578063494569db1461064e5780634edfb5b21461066e57610397565b80633105fec1146105ac57806331268657146105cc57806336052391146105ec57610397565b80632339078f1161033957806329fa4aa01161030857806329fa4aa01461051d5780632aa643191461053d5780632d753aa41461056c57806330d6570d1461058c57610397565b80632339078f146104a8578063252322b3146104c85780632681f7e4146104e8578063281e3432146104fd57610397565b806311f2928b1161037557806311f2928b14610420578063149dab0e1461042a57806316279055146104595780631694505e1461048657610397565b8063034eaff91461039c5780630496d5dc146103d25780631022742b14610400575b600080fd5b3480156103a857600080fd5b506103bc6103b7366004619386565b610b62565b6040516103c9919061a62f565b60405180910390f35b3480156103de57600080fd5b506103f26103ed366004619448565b610d84565b6040516103c992919061a4f4565b34801561040c57600080fd5b506103bc61041b36600461984c565b610f2a565b61042861109d565b005b34801561043657600080fd5b5061044a610445366004619acd565b6110e0565b6040516103c99392919061a372565b34801561046557600080fd5b5061047961047436600461911f565b611240565b6040516103c9919061a642565b34801561049257600080fd5b5061049b61124a565b6040516103c9919061a1e1565b3480156104b457600080fd5b506103bc6104c3366004619a4e565b611259565b3480156104d457600080fd5b506103bc6104e3366004619386565b611480565b3480156104f457600080fd5b5061049b61164a565b34801561050957600080fd5b506103bc610518366004619d63565b611659565b34801561052957600080fd5b506103bc610538366004619b86565b6118ae565b34801561054957600080fd5b5061055d610558366004619bdf565b61191d565b6040516103c99392919061a64d565b34801561057857600080fd5b506103bc610587366004619301565b611bfa565b34801561059857600080fd5b506103bc6105a7366004619386565b611d83565b3480156105b857600080fd5b506103bc6105c7366004619448565b611ef7565b3480156105d857600080fd5b506104286105e73660046194f3565b61207b565b3480156105f857600080fd5b506103bc610607366004619bdf565b6120e3565b34801561061857600080fd5b506103bc610627366004619b86565b612175565b34801561063857600080fd5b506106416122f6565b6040516103c9919061a679565b34801561065a57600080fd5b506103f2610669366004619448565b6122fa565b34801561067a57600080fd5b5061068e610689366004619cc5565b612486565b6040516103c9919061a69b565b3480156106a757600080fd5b50610641612704565b3480156106bc57600080fd5b506106d06106cb3660046199b7565b61270c565b6040516103c99392919061a53b565b3480156106eb57600080fd5b506103bc6106fa366004619386565b612a01565b34801561070b57600080fd5b506106d061071a3660046199b7565b612f78565b34801561072b57600080fd5b506103bc61073a366004619386565b61325d565b34801561074b57600080fd5b506103bc61075a36600461984c565b6132c3565b34801561076b57600080fd5b5061077f61077a3660046194f3565b613378565b6040516103c9919061a5ba565b34801561079857600080fd5b506103bc6107a73660046196fd565b6134d9565b3480156107b857600080fd5b5061044a6107c7366004619acd565b6135cb565b3480156107d857600080fd5b506103bc6107e7366004619d63565b6135da565b3480156107f857600080fd5b506103bc610807366004619b86565b613827565b34801561081857600080fd5b5061082c610827366004619694565b613b8a565b6040516103c99392919061a92b565b34801561084757600080fd5b506103bc610856366004619b86565b613da0565b34801561086757600080fd5b506103bc610876366004619386565b613fa0565b34801561088757600080fd5b50610641610896366004619d23565b6144d9565b3480156108a757600080fd5b506108bb6108b6366004619c0e565b61452a565b6040516103c99392919061a682565b3480156108d657600080fd5b506106416108e53660046193f8565b614650565b3480156108f657600080fd5b506103bc610905366004619a4e565b614866565b34801561091657600080fd5b5061049b614a62565b34801561092b57600080fd5b506103bc61093a366004619386565b614a71565b34801561094b57600080fd5b5061055d61095a3660046194ba565b614bc6565b34801561096b57600080fd5b506103bc61097a366004619386565b614d03565b34801561098b57600080fd5b5061099f61099a366004619386565b614f12565b6040516103c992919061a6e9565b3480156109b957600080fd5b506103bc6109c8366004619386565b615062565b3480156109d957600080fd5b506103bc6109e836600461972f565b6150c8565b3480156109f957600080fd5b506103bc610a08366004619386565b6151c4565b348015610a1957600080fd5b506103bc610a28366004619386565b61522a565b348015610a3957600080fd5b506103bc610a48366004619448565b6153e7565b348015610a5957600080fd5b506108bb610a68366004619c0e565b615553565b348015610a7957600080fd5b5061049b615739565b348015610a8e57600080fd5b5061055d610a9d3660046194ba565b615751565b348015610aae57600080fd5b5061055d610abd366004619bdf565b615840565b348015610ace57600080fd5b506103bc610add366004619773565b615ad3565b348015610aee57600080fd5b506103bc610afd366004619386565b615bc8565b348015610b0e57600080fd5b50610641610b1d366004619c7e565b615cfb565b348015610b2e57600080fd5b5061099f610b3d366004619386565b615e9a565b348015610b4e57600080fd5b5061082c610b5d366004619694565b615f86565b8051606090806001600160401b0381118015610b7d57600080fd5b50604051908082528060200260200182016040528015610ba7578160200160208202803683370190505b5091506000866001600160a01b031663182df0f56040518163ffffffff1660e01b815260040160206040518083038186803b158015610be557600080fd5b505afa158015610bf9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c1d919061996d565b90506000876001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610c5a57600080fd5b505afa158015610c6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c929190619f67565b60ff169050876001600160a01b0316866001600160a01b03161415610d0a5760005b83811015610d045781600a0a6402540be4000283878381518110610cd457fe5b60200260200101510281610ce457fe5b04858281518110610cf157fe5b6020908102919091010152600101610cb4565b50610d79565b876001600160a01b0316876001600160a01b03161415610d795760005b83811015610d77578282600a0a6402540be400888481518110610d4657fe5b6020026020010151020281610d5757fe5b04858281518110610d6457fe5b6020908102919091010152600101610d27565b505b505050949350505050565b80516060908190806001600160401b0381118015610da157600080fd5b50604051908082528060200260200182016040528015610dcb578160200160208202803683370190505b509150610dd8868661619b565b9250825160001415610dea5750610f22565b60005b81811015610f1f57866001600160a01b031663a8312b1d620249f0878481518110610e1457fe5b6020026020010151878a6040518563ffffffff1660e01b8152600401610e3c9392919061aade565b60006040518083038187803b158015610e5457600080fd5b5086fa93505050508015610e8a57506040513d6000823e601f3d908101601f19168201604052610e87919081019061991b565b60015b610ec4573d808015610eb8576040519150601f19603f3d011682016040523d82523d6000602084013e610ebd565b606091505b5050610f1f565b80600188510381518110610ed457fe5b6020026020010151848381518110610ee857fe5b602002602001018181525050838281518110610f0057fe5b602002602001015160001415610f165750610f1f565b50600101610ded565b50505b935093915050565b606083516001600160401b0381118015610f4357600080fd5b50604051908082528060200260200182016040528015610f6d578160200160208202803683370190505b50905060005b8451811461109557306001600160a01b0316639bf3ee3562030d40878481518110610f9a57fe5b6020026020010151878581518110610fae57fe5b6020026020010151876040518563ffffffff1660e01b8152600401610fd59392919061a9d0565b60206040518083038187803b158015610fed57600080fd5b5086fa9350505050801561101e575060408051601f3d908101601f1916820190925261101b9181019061996d565b60015b611072573d80801561104c576040519150601f19603f3d011682016040523d82523d6000602084013e611051565b606091505b50600083838151811061106057fe5b6020026020010181815250505061108d565b8083838151811061107f57fe5b602002602001018181525050505b600101610f73565b509392505050565b60405173e9db8717bc5dfb20aaf538b4a5a02b7791ff430c903480156108fc02916000818181858888f193505050501580156110dd573d6000803e3d6000fd5b50565b6000606080866020015151600014156110f857611236565b6111048787878761648b565b855191945092506001600160401b038111801561112057600080fd5b5060405190808252806020026020018201604052801561114a578160200160208202803683370190505b50905060005b815181101561123457836001600160a01b0316637f9c0ecd620493e08588858151811061117957fe5b60200260200101516040518463ffffffff1660e01b815260040161119e92919061a519565b60206040518083038187803b1580156111b657600080fd5b5086fa935050505080156111e7575060408051601f3d908101601f191682019092526111e49181019061996d565b60015b6111f057611234565b808383815181106111fd57fe5b60200260200101818152505082828151811061121557fe5b60200260200101516000141561122b5750611234565b50600101611150565b505b9450945094915050565b803b15155b919050565b6001546001600160a01b031681565b606061126583856166bd565b60208501516040805160028082526060828101909352816020016020820280368337019050509050858160008151811061129b57fe5b60200260200101906001600160a01b031690816001600160a01b03168152505084816001815181106112c957fe5b6001600160a01b03909216602092830291909101909101528351806001600160401b03811180156112f957600080fd5b50604051908082528060200260200182016040528015611323578160200160208202803683370190505b50935061132e6188c7565b6113366166fc565b905060005b828110156114735760606113628b89848151811061135557fe5b602002602001015161672b565b604051637c26833760e11b81529091506001600160a01b0387169063f84d066e906113989060009085908a90899060040161a73c565b600060405180830381600087803b1580156113b257600080fd5b505af19250505080156113e757506040513d6000823e601f3d908101601f191682016040526113e491908101906197c9565b60015b611422573d808015611415576040519150601f19603f3d011682016040523d82523d6000602084013e61141a565b606091505b505050611473565b60008160018151811061143157fe5b60200260200101516000190290506000811361144f57505050611473565b8089858151811061145c57fe5b60200260200101818152505050505060010161133b565b5050505050949350505050565b606061148c83856166bd565b8151806001600160401b03811180156114a457600080fd5b506040519080825280602002602001820160405280156114ce578160200160208202803683370190505b50915060006001600160a01b038616156114f1576114ec87876167bd565b6114f4565b60005b905060006001600160a01b038616156115165761151188876167bd565b611519565b60005b905060005b83811015610d775760016001600160a01b03881661157c5761155b84632640f62c60e01b89858151811061154e57fe5b602002602001015161683c565b87848151811061156757fe5b60200260200101819350828152505050611616565b6001600160a01b0389166115a25761155b836359e9486260e01b89858151811061154e57fe5b60006115bc846359e9486260e01b8a868151811061154e57fe5b9250905080156115f9576115d8856309903d8b60e21b8361683c565b8885815181106115e457fe5b60200260200101819450828152505050611614565b600087848151811061160757fe5b6020026020010181815250505b505b801580611636575085828151811061162a57fe5b60200260200101516000145b156116415750610d77565b5060010161151e565b6000546001600160a01b031681565b606061166583856166bd565b6000856000015190506000816001600160a01b03166336569e776040518163ffffffff1660e01b815260040160206040518083038186803b1580156116a957600080fd5b505afa1580156116bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116e1919061913b565b8451909150806001600160401b03811180156116fc57600080fd5b50604051908082528060200260200182016040528015611726578160200160208202803683370190505b509350826001600160a01b031663f4b9fa756040518163ffffffff1660e01b815260040160206040518083038186803b15801561176257600080fd5b505afa158015611776573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061179a919061913b565b6001600160a01b0316866001600160a01b03161415801561183d5750826001600160a01b031663f4b9fa756040518163ffffffff1660e01b815260040160206040518083038186803b1580156117ef57600080fd5b505afa158015611803573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611827919061913b565b6001600160a01b0316876001600160a01b031614155b1561184a575050506118a6565b60005b81811015610d775760006118788a898b8a868151811061186957fe5b6020026020010151898961691f565b9050806118855750610d77565b8086838151811061189257fe5b60209081029190910101525060010161184d565b949350505050565b60408051606081810190925261191490806118cd86896080840161a813565b604051602081830303815290604052815260200186886040516020016118f492919061a813565b6040516020818303038152906040528152602001616be081525083616d13565b95945050505050565b600080606061192c85876166bd565b8351806001600160401b038111801561194457600080fd5b5060405190808252806020026020018201604052801561196e578160200160208202803683370190505b508851604051630939d86360e11b81529193506001600160a01b031690631273b0c6906119a1908a908a9060040161a20e565b60206040518083038186803b1580156119b957600080fd5b505afa1580156119cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119f1919061913b565b925060006001600160a01b03841615611a0f57506001935086611aae565b8851604051630939d86360e11b81526001600160a01b0390911690631273b0c690611a40908a908c9060040161a20e565b60206040518083038186803b158015611a5857600080fd5b505afa158015611a6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a90919061913b565b93506001600160a01b038416611aa7575050611236565b5060009350855b836001600160a01b031663dd58b41c6040518163ffffffff1660e01b815260040160206040518083038186803b158015611ae757600080fd5b505afa158015611afb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b1f919061994d565b611b2a575050611236565b60005b82811015611bed576000611ba78a87858e60200151604051602001611b55949392919061a228565b6040516020818303038152906040528a88868f60200151604051602001611b7f949392919061a228565b6040516020818303038152906040528a8581518110611b9a57fe5b6020026020010151616f25565b905080858381518110611bb657fe5b602002602001018181525050848281518110611bce57fe5b602002602001015160001415611be45750611bed565b50600101611b2d565b5050509450945094915050565b8051606090806001600160401b0381118015611c1557600080fd5b50604051908082528060200260200182016040528015611c3f578160200160208202803683370190505b5091506001600160a01b038716611c565750611914565b60005b81811015611d785760006060896001600160a01b031662061a80636e79e13360e01b8b8b8b8b8981518110611c8a57fe5b6020026020010151604051602401611ca5949392919061a287565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051611ce3919061a1c5565b6000604051808303818686fa925050503d8060008114611d1f576040519150601f19603f3d011682016040523d82523d6000602084013e611d24565b606091505b509150915060008215611d485781806020019051810190611d45919061996d565b90505b80611d5557505050611d78565b80868581518110611d6257fe5b6020908102919091010152505050600101611c59565b505095945050505050565b6060611d8f83856166bd565b8151806001600160401b0381118015611da757600080fd5b50604051908082528060200260200182016040528015611dd1578160200160208202803683370190505b50915060005b81811015611eed57866001600160a01b03166372ea9076620c35008888888681518110611e0057fe5b60200260200101516040518563ffffffff1660e01b8152600401611e269392919061a309565b60206040518083038187803b158015611e3e57600080fd5b5086fa93505050508015611e6f575060408051601f3d908101601f19168201909252611e6c9181019061996d565b60015b611ea9573d808015611e9d576040519150601f19603f3d011682016040523d82523d6000602084013e611ea2565b606091505b5050611eed565b80848381518110611eb657fe5b602002602001018181525050838281518110611ece57fe5b602002602001015160001415611ee45750611eed565b50600101611dd7565b5050949350505050565b8051606090806001600160401b0381118015611f1257600080fd5b50604051908082528060200260200182016040528015611f3c578160200160208202803683370190505b50915060005b8181101561207257856001600160a01b031663d06ca61f620249f0868481518110611f6957fe5b6020026020010151886040518463ffffffff1660e01b8152600401611f8f92919061aac5565b60006040518083038187803b158015611fa757600080fd5b5086fa93505050508015611fdd57506040513d6000823e601f3d908101601f19168201604052611fda919081019061991b565b60015b612017573d80801561200b576040519150601f19603f3d011682016040523d82523d6000602084013e612010565b606091505b5050612072565b8060018751038151811061202757fe5b602002602001015184838151811061203b57fe5b60200260200101818152505083828151811061205357fe5b6020026020010151600014156120695750612072565b50600101611f42565b50509392505050565b600054604051633126865760e01b81526001600160a01b03909116906331268657906120ad908590859060040161a4a6565b600060405180830381600087803b1580156120c757600080fd5b505af11580156120db573d6000803e3d6000fd5b505050505050565b60606120ef83856166bd565b84602001516001600160a01b0316846001600160a01b0316141580612121575084516001600160a01b03848116911614155b156110955781516060816001600160401b038111801561214057600080fd5b5060405190808252806020026020018201604052801561216a578160200160208202803683370190505b5092506118a6915050565b8051606090806001600160401b038111801561219057600080fd5b506040519080825280602002602001820160405280156121ba578160200160208202803683370190505b50915060005b81811015611eed576000606088600001516001600160a01b0316621e84808a602001518a8a8a88815181106121f157fe5b602002602001015160405160240161220b9392919061a7f5565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051612249919061a1c5565b6000604051808303818686fa925050503d8060008114612285576040519150601f19603f3d011682016040523d82523d6000602084013e61228a565b606091505b5091509150600082156122ae57818060200190518101906122ab919061996d565b90505b808685815181106122bb57fe5b6020026020010181815250508584815181106122d357fe5b6020026020010151600014156122eb57505050611eed565b5050506001016121c0565b4390565b80516060908190806001600160401b038111801561231757600080fd5b50604051908082528060200260200182016040528015612341578160200160208202803683370190505b50915061234e868661619b565b92508251600014156123605750610f22565b60005b81811015610f1f57866001600160a01b0316639e269b68620249f087848151811061238a57fe5b6020026020010151878a6040518563ffffffff1660e01b81526004016123b29392919061aade565b60006040518083038187803b1580156123ca57600080fd5b5086fa9350505050801561240057506040513d6000823e601f3d908101601f191682016040526123fd919081019061991b565b60015b61242e573d808015610eb8576040519150601f19603f3d011682016040523d82523d6000602084013e610ebd565b8060008151811061243b57fe5b602002602001015184838151811061244f57fe5b60200260200101818152505083828151811061246757fe5b60200260200101516000141561247d5750610f1f565b50600101612363565b602084810151604080516001808252818301909252606093849290828101908036833701905050905085816000815181106124bd57fe5b6020908102919091010152606060006040519080825280602002602001820160405280156124f5578160200160208202803683370190505b50905087606001516001600160a01b0316866001600160a01b031614156125e6576040516381efcbdd60e01b81526001600160a01b038416906381efcbdd906207a1209061254e9089906001908890889060040161a3a8565b60006040518083038187803b15801561256657600080fd5b5086fa9350505050801561259c57506040513d6000823e601f3d908101601f191682016040526125999190810190619985565b60015b6125d6573d8080156125ca576040519150601f19603f3d011682016040523d82523d6000602084013e6125cf565b606091505b50506125e1565b93506118a692505050565b610d79565b87606001516001600160a01b0316856001600160a01b0316141561263c576040516361e597f960e01b81526001600160a01b038416906361e597f9906207a1209061254e908a906001908890889060040161a3a8565b6040516302b9a6cd60e11b81526001600160a01b038416906305734d9a906207a1209061267c908a90600190889088908d9084908490849060040161a3eb565b60006040518083038187803b15801561269457600080fd5b5086fa935050505080156126ca57506040513d6000823e601f3d908101601f191682016040526126c79190810190619985565b60015b6125d6573d8080156126f8576040519150601f19603f3d011682016040523d82523d6000602084013e6126fd565b606091505b5050610d79565b60005a905090565b60608060608061278e876001600160a01b031663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b15801561274e57600080fd5b505afa158015612762573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612786919061913b565b87600061705e565b905084516001600160401b03811180156127a757600080fd5b506040519080825280602002602001820160405280156127d1578160200160208202803683370190505b50915084516001600160401b03811180156127eb57600080fd5b5060405190808252806020026020018201604052801561281f57816020015b606081526020019060019003908161280a5790505b50935084516001600160401b038111801561283957600080fd5b50604051908082528060200260200182016040528015612863578160200160208202803683370190505b50925060005b85518110156129f6576000805b835181101561298857606061289e8a86848151811061289157fe5b60200260200101516174fe565b90508a6001600160a01b031663cdca1753620aae60838c88815181106128c057fe5b60200260200101516040518463ffffffff1660e01b81526004016128e592919061a6ae565b600060405180830381600088803b1580156128ff57600080fd5b5087f19350505050801561293557506040513d6000823e601f3d908101601f191682016040526129329190810190619dfe565b60015b61293e5761297f565b83871161297a57839650848c898151811061295557fe5b6020026020010181905250808b898151811061296d57fe5b6020026020010181815250505b505050505b50600101612876565b50806129d557604051806020016040528060008152508683815181106129aa57fe5b602002602001018190525060008583815181106129c357fe5b602002602001018181525050506129f6565b808483815181106129e257fe5b602090810291909101015250600101612869565b505093509350939050565b80516060908590806001600160401b0381118015612a1e57600080fd5b50604051908082528060200260200182016040528015612a48578160200160208202803683370190505b50604051630bcded8960e21b81529093506001600160a01b03831690632f37b62490612a7890899060040161a1e1565b60206040518083038186803b158015612a9057600080fd5b505afa158015612aa4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ac8919061994d565b1580612b4d5750604051630bcded8960e21b81526001600160a01b03831690632f37b62490612afb90889060040161a1e1565b60206040518083038186803b158015612b1357600080fd5b505afa158015612b27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b4b919061994d565b155b15612b595750506118a6565b612b616188ee565b60405163f8b2cb4f60e01b81526001600160a01b0384169063f8b2cb4f90612b8d908a9060040161a1e1565b60206040518083038186803b158015612ba557600080fd5b505afa158015612bb9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bdd919061996d565b815260405163f8b2cb4f60e01b81526001600160a01b0384169063f8b2cb4f90612c0b90899060040161a1e1565b60206040518083038186803b158015612c2357600080fd5b505afa158015612c37573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c5b919061996d565b6020820152604051634a46c67360e11b81526001600160a01b0384169063948d8ce690612c8c908a9060040161a1e1565b60206040518083038186803b158015612ca457600080fd5b505afa158015612cb8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cdc919061996d565b60408083019190915251634a46c67360e11b81526001600160a01b0384169063948d8ce690612d0f90899060040161a1e1565b60206040518083038186803b158015612d2757600080fd5b505afa158015612d3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d5f919061996d565b816060018181525050826001600160a01b031663d4cadf686040518163ffffffff1660e01b815260040160206040518083038186803b158015612da157600080fd5b505afa158015612db5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612dd9919061996d565b608082015260005b82811015610d7757612e0c82602001516003670de0b6b3a764000081612e0357fe5b04600101617659565b868281518110612e1857fe5b60200260200101511115612e2b57610d77565b836001600160a01b031663f8d6aed4620493e084600001518560400151866020015187606001518c8881518110612e5e57fe5b602002602001015189608001516040518863ffffffff1660e01b8152600401612e8c9695949392919061ab09565b60206040518083038187803b158015612ea457600080fd5b5086fa93505050508015612ed5575060408051601f3d908101601f19168201909252612ed29181019061996d565b60015b612f0f573d808015612f03576040519150601f19603f3d011682016040523d82523d6000602084013e612f08565b606091505b5050610d77565b8251612f27906002670de0b6b3a76400005b04617659565b811115612f345750610d77565b80868381518110612f4157fe5b602002602001018181525050858281518110612f5957fe5b602002602001015160001415612f6f5750610d77565b50600101612de1565b606080606080612fba876001600160a01b031663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b15801561274e57600080fd5b90506060612fc7876176b6565b905085516001600160401b0381118015612fe057600080fd5b5060405190808252806020026020018201604052801561300a578160200160208202803683370190505b50925085516001600160401b038111801561302457600080fd5b5060405190808252806020026020018201604052801561305857816020015b60608152602001906001900390816130435790505b50945085516001600160401b038111801561307257600080fd5b5060405190808252806020026020018201604052801561309c578160200160208202803683370190505b50935060005b8651811015613251576000805b84518110156131e35760606130df856130da8885815181106130cd57fe5b602002602001015161774e565b6174fe565b90508b6001600160a01b0316632f80bb1d620aae60838d888151811061310157fe5b60200260200101516040518463ffffffff1660e01b815260040161312692919061a6ae565b600060405180830381600088803b15801561314057600080fd5b5087f19350505050801561317657506040513d6000823e601f3d908101601f191682016040526131739190810190619dfe565b60015b61317f576131da565b86158061318c5750838710155b156131d5578396506131a48f8b888151811061289157fe5b8d89815181106131b057fe5b6020026020010181905250808c89815181106131c857fe5b6020026020010181815250505b505050505b506001016130af565b5080613230576040518060200160405280600081525087838151811061320557fe5b6020026020010181905250600086838151811061321e57fe5b60200260200101818152505050613251565b8085838151811061323d57fe5b6020908102919091010152506001016130a2565b50505093509350939050565b604080516060818101909252611914908061327c86896080840161a20e565b604051602081830303815290604052815260200186886040516020016132a392919061a20e565b60405160208183030381529060405281526020016177e681525083616d13565b60606132d0848484610f2a565b905060005b8451811015611095578181815181106132ea57fe5b60200260200101516000146133705761335782828151811061330857fe5b602002602001015186838151811061331c57fe5b6020026020010151606001516001600160801b031687848151811061333d57fe5b6020026020010151604001516001600160801b03166178fa565b82828151811061336357fe5b6020026020010181815250505b6001016132d5565b6060816001600160401b038111801561339057600080fd5b506040519080825280602002602001820160405280156133ca57816020015b6133b761891d565b8152602001906001900390816133af5790505b50905060005b8083146134d25760018282815181106133e557fe5b60209081029190910181015191151591015283838281811061340357fe5b9050602002810190613415919061ab31565b15159050613422576134ca565b3084848381811061342f57fe5b9050602002810190613441919061ab31565b60405161344f92919061a1b5565b6000604051808303816000865af19150503d806000811461348c576040519150601f19603f3d011682016040523d82523d6000602084013e613491565b606091505b5083838151811061349e57fe5b60200260200101516020018484815181106134b557fe5b60209081029190910101519190915290151590525b6001016133d0565b5092915050565b606081516001600160401b03811180156134f257600080fd5b5060405190808252806020026020018201604052801561351c578160200160208202803683370190505b50905060005b825181146135c5577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031683828151811061356057fe5b60200260200101516001600160a01b0316146135a05761359b83828151811061358557fe5b60200260200101516001600160a01b031661791e565b6135a3565b60125b60ff168282815181106135b257fe5b6020908102919091010152600101613522565b50919050565b60006060809450945094915050565b60606135e683856166bd565b6000856000015190506000816001600160a01b03166336569e776040518163ffffffff1660e01b815260040160206040518083038186803b15801561362a57600080fd5b505afa15801561363e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613662919061913b565b8451909150806001600160401b038111801561367d57600080fd5b506040519080825280602002602001820160405280156136a7578160200160208202803683370190505b509350826001600160a01b031663f4b9fa756040518163ffffffff1660e01b815260040160206040518083038186803b1580156136e357600080fd5b505afa1580156136f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061371b919061913b565b6001600160a01b0316866001600160a01b0316141580156137be5750826001600160a01b031663f4b9fa756040518163ffffffff1660e01b815260040160206040518083038186803b15801561377057600080fd5b505afa158015613784573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137a8919061913b565b6001600160a01b0316876001600160a01b031614155b156137cb575050506118a6565b60005b81811015610d775760006137f98a898b8a86815181106137ea57fe5b602002602001015189896179ca565b9050806138065750610d77565b8086838151811061381357fe5b6020908102919091010152506001016137ce565b6060600085600001516001600160a01b031663bbd7f25585600f0b6040518263ffffffff1660e01b815260040161385e919061a679565b60206040518083038186803b15801561387657600080fd5b505afa15801561388a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138ae919061996d565b8651604051631e01043960e01b81526001600160a01b0390911690631e010439906138e190600f89900b9060040161a679565b60206040518083038186803b1580156138f957600080fd5b505afa15801561390d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613931919061996d565b039050600086600001516001600160a01b031663c582951486600f0b6040518263ffffffff1660e01b8152600401613969919061a679565b60806040518083038186803b15801561398157600080fd5b505afa158015613995573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139b99190619ef3565b935050505080601203600a0a82816139cd57fe5b85519190049250806001600160401b03811180156139ea57600080fd5b50604051908082528060200260200182016040528015613a14578160200160208202803683370190505b50935060005b81811015610d7757600060608a600001516001600160a01b0316620927c08c602001518c8c8c8881518110613a4b57fe5b6020026020010151604051602401613a659392919061a7f5565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051613aa3919061a1c5565b6000604051808303818686fa925050503d8060008114613adf576040519150601f19603f3d011682016040523d82523d6000602084013e613ae4565b606091505b509150915060008215613b085781806020019051810190613b05919061996d565b90505b868110613b4257835b85811015613b395787898281518110613b2657fe5b6020908102919091010152600101613b11565b50505050610d77565b80888581518110613b4f57fe5b602002602001018181525050878481518110613b6757fe5b602002602001015160001415613b7f57505050610d77565b505050600101613a1a565b613b92618935565b613b9a618935565b600080805b87518114613c9f57613be66020898381518110613bb857fe5b60200260200101515103878a8481518110613bcf57fe5b6020026020010151617c5c9092919063ffffffff16565b60006060306001600160a01b03168a8481518110613c0057fe5b6020026020010151604051613c15919061a1c5565b6000604051808303816000865af19150503d8060008114613c52576040519150601f19603f3d011682016040523d82523d6000602084013e613c57565b606091505b50915091508115613c95576000613c7b602083510383617c6c90919063ffffffff16565b905084811115613c9357838852602088018290529350835b505b5050600101613b9f565b5080613cab5750613d97565b60005b865181146129f657613cde6020888381518110613cc757fe5b6020026020010151510383898481518110613bcf57fe5b60006060306001600160a01b0316898481518110613cf857fe5b6020026020010151604051613d0d919061a1c5565b6000604051808303816000865af19150503d8060008114613d4a576040519150601f19603f3d011682016040523d82523d6000602084013e613d4f565b606091505b50915091508115613d8d576000613d73602083510383617c6c90919063ffffffff16565b905085811115613d8b57838752602087018290529450845b505b5050600101613cae565b93509350939050565b60408401516060906001600160e01b031916613e22576040805160608101909152613e1b9080613dd486896080840161a813565b60405160208183030381529060405281526020018688604051602001613dfb92919061a813565b6040516020818303038152906040528152602001617c7881525083616d13565b90506118a6565b8151806001600160401b0381118015613e3a57600080fd5b50604051908082528060200260200182016040528015613e64578160200160208202803683370190505b50915060005b81811015611eed576000606088600001516001600160a01b0316621e84808a604001518a8a8a8881518110613e9b57fe5b6020026020010151604051602401613eb59392919061a7f5565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051613ef3919061a1c5565b6000604051808303818686fa925050503d8060008114613f2f576040519150601f19603f3d011682016040523d82523d6000602084013e613f34565b606091505b509150915060008215613f585781806020019051810190613f55919061996d565b90505b80868581518110613f6557fe5b602002602001018181525050858481518110613f7d57fe5b602002602001015160001415613f9557505050611eed565b505050600101613e6a565b80516060908590806001600160401b0381118015613fbd57600080fd5b50604051908082528060200260200182016040528015613fe7578160200160208202803683370190505b50604051630bcded8960e21b81529093506001600160a01b03831690632f37b6249061401790899060040161a1e1565b60206040518083038186803b15801561402f57600080fd5b505afa158015614043573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614067919061994d565b15806140ec5750604051630bcded8960e21b81526001600160a01b03831690632f37b6249061409a90889060040161a1e1565b60206040518083038186803b1580156140b257600080fd5b505afa1580156140c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140ea919061994d565b155b156140f85750506118a6565b6141006188ee565b60405163f8b2cb4f60e01b81526001600160a01b0384169063f8b2cb4f9061412c908a9060040161a1e1565b60206040518083038186803b15801561414457600080fd5b505afa158015614158573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061417c919061996d565b815260405163f8b2cb4f60e01b81526001600160a01b0384169063f8b2cb4f906141aa90899060040161a1e1565b60206040518083038186803b1580156141c257600080fd5b505afa1580156141d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141fa919061996d565b6020820152604051634a46c67360e11b81526001600160a01b0384169063948d8ce69061422b908a9060040161a1e1565b60206040518083038186803b15801561424357600080fd5b505afa158015614257573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061427b919061996d565b60408083019190915251634a46c67360e11b81526001600160a01b0384169063948d8ce6906142ae90899060040161a1e1565b60206040518083038186803b1580156142c657600080fd5b505afa1580156142da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906142fe919061996d565b816060018181525050826001600160a01b031663d4cadf686040518163ffffffff1660e01b815260040160206040518083038186803b15801561434057600080fd5b505afa158015614354573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614378919061996d565b608082015260005b82811015610d7757815161439e906002670de0b6b3a7640000612f21565b8682815181106143aa57fe5b602002602001015111156143bd57610d77565b836001600160a01b031663ba9530a6620493e084600001518560400151866020015187606001518c88815181106143f057fe5b602002602001015189608001516040518863ffffffff1660e01b815260040161441e9695949392919061ab09565b60206040518083038187803b15801561443657600080fd5b5086fa93505050508015614467575060408051601f3d908101601f191682019092526144649181019061996d565b60015b614495573d808015612f03576040519150601f19603f3d011682016040523d82523d6000602084013e612f08565b808683815181106144a257fe5b6020026020010181815250508582815181106144ba57fe5b6020026020010151600014156144d05750610d77565b50600101614380565b600083606001516001600160801b03168461016001516040516020016144ff919061a679565b6040516020818303038152906040528051906020012060001c8161451f57fe5b0690505b9392505050565b600060608061453985876166bd565b614544878787617ccc565b92508261455057611236565b60405163276fdad960e11b81523090634edfb5b290614579908a9087908b908b9060040161a997565b60006040518083038186803b15801561459157600080fd5b505afa1580156145a5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526145cd9190810190619985565b8760800181905250866080015191506146446040518060600160405280878a6040516020016145fd92919061a482565b6040516020818303038152906040528152602001888a60405160200161462492919061a482565b6040516020818303038152906040528152602001617e3381525085616d13565b90509450945094915050565b600080856001600160a01b031663901754d786866040518363ffffffff1660e01b815260040161468192919061a20e565b60206040518083038186803b15801561469957600080fd5b505afa1580156146ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906146d1919061913b565b90506001600160a01b0381166146eb5760009150506118a6565b60006001600160a01b0386161561477d576040516370a0823160e01b81526001600160a01b038716906370a082319061472890859060040161a1e1565b60206040518083038186803b15801561474057600080fd5b505afa158015614754573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614778919061996d565b614789565b816001600160a01b0316315b90508381101561479e576000925050506118a6565b6040516303c2803f60e31b81526001600160a01b03831690631e1401f890620249f0906147d3908a908a908a9060040161a309565b60206040518083038187803b1580156147eb57600080fd5b5086fa9350505050801561481c575060408051601f3d908101601f191682019092526148199181019061996d565b60015b61485c573d80801561484a576040519150601f19603f3d011682016040523d82523d6000602084013e61484f565b606091505b50600093505050506118a6565b92506118a6915050565b606061487283856166bd565b6020850151604080516002808252606082810190935281602001602082028036833701905050905085816000815181106148a857fe5b60200260200101906001600160a01b031690816001600160a01b03168152505084816001815181106148d657fe5b6001600160a01b03909216602092830291909101909101528351806001600160401b038111801561490657600080fd5b50604051908082528060200260200182016040528015614930578160200160208202803683370190505b50935061493b6188c7565b6149436166fc565b905060005b828110156114735760606149628b89848151811061135557fe5b604051637c26833760e11b81529091506001600160a01b0387169063f84d066e906149989060019085908a90899060040161a73c565b600060405180830381600087803b1580156149b257600080fd5b505af19250505080156149e757506040513d6000823e601f3d908101601f191682016040526149e491908101906197c9565b60015b614a15573d808015611415576040519150601f19603f3d011682016040523d82523d6000602084013e61141a565b600081600081518110614a2457fe5b6020026020010151905060008113614a3e57505050611473565b80898581518110614a4b57fe5b602002602001018181525050505050600101614948565b6002546001600160a01b031681565b8051606090806001600160401b0381118015614a8c57600080fd5b50604051908082528060200260200182016040528015614ab6578160200160208202803683370190505b50915060005b81811015611eed57866001600160a01b031663343fbcdd62061a808888888681518110614ae557fe5b60200260200101516040518563ffffffff1660e01b8152600401614b0b9392919061a309565b60206040518083038187803b158015614b2357600080fd5b5086fa93505050508015614b54575060408051601f3d908101601f19168201909252614b519181019061996d565b60015b614b82573d808015611e9d576040519150601f19603f3d011682016040523d82523d6000602084013e611ea2565b80848381518110614b8f57fe5b602002602001018181525050838281518110614ba757fe5b602002602001015160001415614bbd5750611eed565b50600101614abc565b6000806060614bd585876166bd565b8351806001600160401b0381118015614bed57600080fd5b50604051908082528060200260200182016040528015614c17578160200160208202803683370190505b509150614c2689898989617f1a565b945092506001600160a01b038316614c3e5750614cf8565b60005b81811015614cf5576000614caf898688604051602001614c639392919061a2b1565b604051602081830303815290604052898789604051602001614c879392919061a2b1565b604051602081830303815290604052898581518110614ca257fe5b602002602001015161806f565b905080848381518110614cbe57fe5b602002602001018181525050838281518110614cd657fe5b602002602001015160001415614cec5750614cf5565b50600101614c41565b50505b955095509592505050565b8051606090806001600160401b0381118015614d1e57600080fd5b50604051908082528060200260200182016040528015614d48578160200160208202803683370190505b5091506000866001600160a01b031663182df0f56040518163ffffffff1660e01b815260040160206040518083038186803b158015614d8657600080fd5b505afa158015614d9a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614dbe919061996d565b90506000876001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015614dfb57600080fd5b505afa158015614e0f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614e339190619f67565b60ff169050876001600160a01b0316866001600160a01b03161415614ea55760005b83811015610d04578282600a0a6402540be400888481518110614e7457fe5b6020026020010151020281614e8557fe5b04858281518110614e9257fe5b6020908102919091010152600101614e55565b876001600160a01b0316876001600160a01b03161415610d795760005b83811015610d775781600a0a6402540be4000283878381518110614ee257fe5b60200260200101510281614ef257fe5b04858281518110614eff57fe5b6020908102919091010152600101614ec2565b60006060614f2084866166bd565b8251806001600160401b0381118015614f3857600080fd5b50604051908082528060200260200182016040528015614f62578160200160208202803683370190505b50915060005b81811015614fd7576000614f91898989898681518110614f8457fe5b6020026020010151614650565b905080848381518110614fa057fe5b602002602001018181525050838281518110614fb857fe5b602002602001015160001415614fce5750614fd7565b50600101614f68565b5060405163901754d760e01b81526001600160a01b0388169063901754d790615006908990899060040161a20e565b60206040518083038186803b15801561501e57600080fd5b505afa158015615032573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190615056919061913b565b92505094509492505050565b604080516060818101909252611914908061508186896080840161a20e565b604051602081830303815290604052815260200186886040516020016150a892919061a20e565b604051602081830303815290604052815260200161816181525083616d13565b606082516001600160401b03811180156150e157600080fd5b5060405190808252806020026020018201604052801561510b578160200160208202803683370190505b50905060005b835181146134d2577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031684828151811061514f57fe5b60200260200101516001600160a01b031614615199576151948385838151811061517557fe5b60200260200101516001600160a01b03166181a890919063ffffffff16565b6151a5565b826001600160a01b0316315b8282815181106151b157fe5b6020908102919091010152600101615111565b60408051606081810190925261191490806151e386896080840161a20e565b6040516020818303038152906040528152602001868860405160200161520a92919061a20e565b604051602081830303815290604052815260200161827281525083616d13565b606061523683856166bd565b8151806001600160401b038111801561524e57600080fd5b50604051908082528060200260200182016040528015615278578160200160208202803683370190505b50915060006001600160a01b0386161561529b5761529687876167bd565b61529e565b60005b905060006001600160a01b038616156152c0576152bb88876167bd565b6152c3565b60005b905060005b83811015610d775760016001600160a01b038816615319576152f8846395b68fe760e01b89858151811061154e57fe5b87848151811061530457fe5b602002602001018193508281525050506153b3565b6001600160a01b03891661533f576152f88363cd7724c360e01b89858151811061154e57fe5b6000615359856395b68fe760e01b8a868151811061154e57fe5b925090508015615396576153758463cd7724c360e01b8361683c565b88858151811061538157fe5b602002602001018194508281525050506153b1565b60008784815181106153a457fe5b6020026020010181815250505b505b8015806153d357508582815181106153c757fe5b60200260200101516000145b156153de5750610d77565b506001016152c8565b8051606090806001600160401b038111801561540257600080fd5b5060405190808252806020026020018201604052801561542c578160200160208202803683370190505b50915060005b8181101561207257856001600160a01b0316631f00ca74620249f086848151811061545957fe5b6020026020010151886040518463ffffffff1660e01b815260040161547f92919061aac5565b60006040518083038187803b15801561549757600080fd5b5086fa935050505080156154cd57506040513d6000823e601f3d908101601f191682016040526154ca919081019061991b565b60015b6154fb573d80801561200b576040519150601f19603f3d011682016040523d82523d6000602084013e612010565b8060008151811061550857fe5b602002602001015184838151811061551c57fe5b60200260200101818152505083828151811061553457fe5b60200260200101516000141561554a5750612072565b50600101615432565b600060608061556285876166bd565b61556d878787617ccc565b92508261557957611236565b60405163276fdad960e11b81523090634edfb5b2906155a2908a9087908b908b9060040161a997565b60006040518083038186803b1580156155ba57600080fd5b505afa1580156155ce573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526155f69190810190619985565b608088018190528451909250806001600160401b038111801561561857600080fd5b50604051908082528060200260200182016040528015615642578160200160208202803683370190505b50915060005b8181101561572d576000306001600160a01b031663f1ed7fa48b8b8b8b878151811061567057fe5b60200260200101516040518563ffffffff1660e01b8152600401615697949392919061a961565b60206040518083038186803b1580156156af57600080fd5b505afa1580156156c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906156e7919061996d565b9050808483815181106156f657fe5b60200260200101818152505083828151811061570e57fe5b602002602001015160001415615724575061572d565b50600101615648565b50509450945094915050565b73e9db8717bc5dfb20aaf538b4a5a02b7791ff430c81565b600080606061576085876166bd565b61576c88888888617f1a565b935091506001600160a01b03821661578357614cf8565b8351806001600160401b038111801561579b57600080fd5b506040519080825280602002602001820160405280156157c5578160200160208202803683370190505b50604080516060810190915290925061583290806157e9898789156080850161a2b1565b60405160208183030381529060405281526020018986886040516020016158129392919061a2b1565b604051602081830303815290604052815260200161806f81525086616d13565b915050955095509592505050565b600080606061584f85876166bd565b8351806001600160401b038111801561586757600080fd5b50604051908082528060200260200182016040528015615891578160200160208202803683370190505b508851604051630939d86360e11b81529193506001600160a01b031690631273b0c6906158c4908a908a9060040161a20e565b60206040518083038186803b1580156158dc57600080fd5b505afa1580156158f0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190615914919061913b565b925060006001600160a01b03841615615932575060019350866159d1565b8851604051630939d86360e11b81526001600160a01b0390911690631273b0c690615963908a908c9060040161a20e565b60206040518083038186803b15801561597b57600080fd5b505afa15801561598f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906159b3919061913b565b93506001600160a01b0384166159ca575050611236565b5060009350855b836001600160a01b031663dd58b41c6040518163ffffffff1660e01b815260040160206040518083038186803b158015615a0a57600080fd5b505afa158015615a1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190615a42919061994d565b615a4d575050611236565b615ac560405180606001604052808987858e60200151604051602001615a76949392919061a228565b60405160208183030381529060405281526020018a87858e60200151604051602001615aa5949392919061a228565b6040516020818303038152906040528152602001616f2581525087616d13565b925050509450945094915050565b606083516001600160401b0381118015615aec57600080fd5b50604051908082528060200260200182016040528015615b16578160200160208202803683370190505b50905060005b84518114611095577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316858281518110615b5a57fe5b60200260200101516001600160a01b031614615ba657615ba18484878481518110615b8157fe5b60200260200101516001600160a01b03166183279092919063ffffffff16565b615ba9565b60005b828281518110615bb557fe5b6020908102919091010152600101615b1c565b8051606090806001600160401b0381118015615be357600080fd5b50604051908082528060200260200182016040528015615c0d578160200160208202803683370190505b50915060005b81811015611eed57866001600160a01b031663838e6a22620493e08888888681518110615c3c57fe5b60200260200101516040518563ffffffff1660e01b8152600401615c629392919061a309565b60206040518083038187803b158015615c7a57600080fd5b5086fa93505050508015615cab575060408051601f3d908101601f19168201909252615ca89181019061996d565b60015b615cd9573d808015611e9d576040519150601f19603f3d011682016040523d82523d6000602084013e611ea2565b80848381518110615ce657fe5b60200260200101818152505050600101615c13565b600084608001515160001415615d13575060006118a6565b84604001516001600160a01b031663418436bc6207a12087606001516001600160a01b0316876001600160a01b031614615d4d5786615d63565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee5b88606001516001600160a01b0316876001600160a01b031614615d865786615d9c565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee5b8660008b608001516040518763ffffffff1660e01b8152600401615dc495949392919061a32d565b60206040518083038187803b158015615ddc57600080fd5b5086fa93505050508015615e0d575060408051601f3d908101601f19168201909252615e0a9181019061996d565b60015b615e4b573d808015615e3b576040519150601f19603f3d011682016040523d82523d6000602084013e615e40565b606091505b5060009150506118a6565b6000615e56856183f3565b60ff1690506000615e66876183f3565b60ff169050670de0b6b3a764000081600a0a83600a0a8786020281615e8757fe5b0481615e8f57fe5b0493505050506118a6565b60006060615ea884866166bd565b8251806001600160401b0381118015615ec057600080fd5b50604051908082528060200260200182016040528015615eea578160200160208202803683370190505b509150615f5560405180606001604052808988604051602001615f0e92919061a20e565b60405160208183030381529060405281526020018989604051602001615f3592919061a20e565b60405160208183030381529060405281526020016183fe81525085616d13565b60405163901754d760e01b81529092506001600160a01b0388169063901754d790615006908990899060040161a20e565b615f8e618935565b615f96618935565b6000198060005b8651811461609257615fcd6020888381518110615fb657fe5b6020026020010151510387898481518110613bcf57fe5b60006060306001600160a01b0316898481518110615fe757fe5b6020026020010151604051615ffc919061a1c5565b6000604051808303816000865af19150503d8060008114616039576040519150601f19603f3d011682016040523d82523d6000602084013e61603e565b606091505b50915091508115616088576000616062602083510383617c6c90919063ffffffff16565b905060008111801561607357508481105b1561608657838752602087018290529350835b505b5050600101615f9d565b506000198114156160a35750613d97565b60005b875181146129f6576160d660208983815181106160bf57fe5b60200260200101515103838a8481518110613bcf57fe5b60006060306001600160a01b03168a84815181106160f057fe5b6020026020010151604051616105919061a1c5565b6000604051808303816000865af19150503d8060008114616142576040519150601f19603f3d011682016040523d82523d6000602084013e616147565b606091505b5091509150811561619157600061616b602083510383617c6c90919063ffffffff16565b905060008111801561617c57508581105b1561618f57838852602088018290529450845b505b50506001016160a6565b60606000836001600160a01b031663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b1580156161d857600080fd5b505afa1580156161ec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190616210919061913b565b905060018351036001600160401b038111801561622c57600080fd5b50604051908082528060200260200182016040528015616256578160200160208202803683370190505b50915060005b8251811015616482576060826001600160a01b0316635b1dc86f620249f087858151811061628657fe5b602002602001015188866001018151811061629d57fe5b60200260200101516040518463ffffffff1660e01b81526004016162c292919061a20e565b60006040518083038187803b1580156162da57600080fd5b5086fa9350505050801561631057506040513d6000823e601f3d908101601f1916820160405261630d9190810190619532565b60015b61637e573d80801561633e576040519150601f19603f3d011682016040523d82523d6000602084013e616343565b606091505b506000805b50604051908082528060200260200182016040528015616372578160200160208202803683370190505b50945050505050616485565b805161638c57600080616348565b6000805b82518110156164765760008382815181106163a757fe5b60200260200101516001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156163e757600080fd5b505afa1580156163fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061641f919061996d565b90508281111561646d5780925083828151811061643857fe5b602002602001015188878151811061644c57fe5b60200260200101906001600160a01b031690816001600160a01b0316815250505b50600101616390565b5050505060010161625c565b50505b92915050565b6000606085600001516001600160a01b03166321f8a72187600001516001600160a01b0316639232494e6040518163ffffffff1660e01b815260040160206040518083038186803b1580156164df57600080fd5b505afa1580156164f3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190616517919061996d565b6040518263ffffffff1660e01b8152600401616533919061a679565b60206040518083038186803b15801561654b57600080fd5b505afa15801561655f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190616583919061913b565b915085602001515160001415616598576166b4565b6000805b8760200151518110156166b1576002886020015182815181106165bb57fe5b60200260200101515110156165cf576166a9565b836001600160a01b0316637f9c0ecd620493e08a6020015184815181106165f257fe5b60200260200101518860018a51038151811061660a57fe5b60200260200101516040518463ffffffff1660e01b815260040161662f92919061a519565b60206040518083038187803b15801561664757600080fd5b5086fa93505050508015616678575060408051601f3d908101601f191682019092526166759181019061996d565b60015b616681576166a9565b828111156166a7578092508860200151828151811061669c57fe5b602002602001015193505b505b60010161659c565b50505b94509492505050565b806001600160a01b0316826001600160a01b031614156166f85760405162461bcd60e51b81526004016166ef9061a86f565b60405180910390fd5b5050565b6167046188c7565b50604080516080810182523080825260006020830181905292820152606081019190915290565b604080516001808252818301909252606091829190816020015b61674d61894f565b8152602001906001900390816167455790505090506040518060a0016040528085600001518152602001600081526020016001815260200184815260200160405180602001604052806000815250815250816000815181106167ab57fe5b60209081029190910101529392505050565b6040516303795fb160e11b81526000906001600160a01b038416906306f2bf62906167ec90859060040161a1e1565b60206040518083038186803b15801561680457600080fd5b505afa158015616818573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614523919061913b565b6000806001600160a01b03851661685257610f22565b6060856001600160a01b0316620249f08686604051602401616874919061a679565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516168b2919061a1c5565b6000604051808303818686fa925050503d80600081146168ee576040519150601f19603f3d011682016040523d82523d6000602084013e6168f3565b606091505b50909250905081156169165780806020019051810190616913919061996d565b92505b50935093915050565b600080600080846001600160a01b031663d9638d368b602001516040518263ffffffff1660e01b8152600401616955919061a679565b60a06040518083038186803b15801561696d57600080fd5b505afa158015616981573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906169a59190619f28565b94509450505092506000620f424090508a604001516001600160a01b0316896001600160a01b03161415616acd5760006169e48964e8d4a5100061844e565b90506000616a086b033b2e3c9fd0803ce8000000616a028885618484565b9061844e565b9050848110616a205760009650505050505050616bd6565b6000616aaf670de0b6b3a7640000616aa98c6001600160a01b031663568d4b6f6040518163ffffffff1660e01b815260040160206040518083038186803b158015616a6a57600080fd5b505afa158015616a7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190616aa2919061996d565b869061844e565b906184a0565b90506000616abd84836184ca565b9850616bd6975050505050505050565b8a604001516001600160a01b03168a6001600160a01b03161415616bcd578784811115616b0257600095505050505050616bd6565b6000616b1e6b033b2e3c9fd0803ce8000000616a0288856184ca565b9050838111616b365760009650505050505050616bd6565b6000616bbb8a6001600160a01b031663fae036d56040518163ffffffff1660e01b815260040160206040518083038186803b158015616b7457600080fd5b505afa158015616b88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190616bac919061996d565b670de0b6b3a764000090618484565b90506000616abd82616aa9868861844e565b60009450505050505b9695505050505050565b600080616beb618981565b85806020019051810190616bff9190619a19565b91509150600085806020019051810190616c1991906199fd565b905060006060306322db5ed160e21b858786616c348c6184e9565b604051602401616c47949392919061a8f9565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051616c85919061a1c5565b600060405180830381855afa9150503d8060008114616cc0576040519150601f19603f3d011682016040523d82523d6000602084013e616cc5565b606091505b509150915081616cdd57600095505050505050614523565b80806020019051810190616cf1919061991b565b600081518110616cfd57fe5b6020026020010151955050505050509392505050565b606081516001600160401b0381118015616d2c57600080fd5b50604051908082528060200260200182016040528015616d56578160200160208202803683370190505b509050815160001415616d6857616485565b6000616d998460000151856020015185600081518110616d8457fe5b6020026020010151876040015163ffffffff16565b905080616da65750616485565b6000616dc38560200151866000015184886040015163ffffffff16565b905080616dd1575050616485565b60005b8451811015616f1c576000805b6005811015616ec557616e08878481518110616df957fe5b6020026020010151858761852a565b945084616e1457616ec5565b616e236127156127108761852a565b945084616e2f57616ec5565b6000616e4c89602001518a60000151888c6040015163ffffffff16565b905080616e595750616ec5565b809450878481518110616e6857fe5b60200260200101518510616ebc57878481518110616e8257fe5b6020026020010151612710898681518110616e9957fe5b602002602001015187030281616eab57fe5b04925060058311616ebc5750616ec5565b50600101616de1565b50801580616ed35750600581115b15616ede5750616f1c565b616efc868381518110616eed57fe5b6020026020010151848661852a565b858381518110616f0857fe5b602090810291909101015250600101616dd4565b50505092915050565b600080600080600087806020019051810190616f419190619190565b9350935093509350816001600160a01b0316846001600160a01b0316141561702b576040516351400f0b60e11b81526001600160a01b0384169063a2801e1690620493e090616f94908a9060040161a679565b60206040518083038187803b158015616fac57600080fd5b5086fa93505050508015616fdd575060408051601f3d908101601f19168201909252616fda9181019061996d565b60015b61701f573d80801561700b576040519150601f19603f3d011682016040523d82523d6000602084013e617010565b606091505b50600095505050505050614523565b94506145239350505050565b60405163ca19ebd960e01b81526001600160a01b0382169063ca19ebd990620493e090616f949087908b9060040161a1f5565b606060028284510310156170845760405162461bcd60e51b81526004016166ef9061a82b565b61708c6189a1565b5060408051608081018252606481526101f46020820152610bb8818301526127106060808301919091528251600480825260a0820190945291929091908160200160208202803683370190505090506000808686815181106170ea57fe5b60200260200101519050600087876001018151811061710557fe5b6020026020010151905060005b60048110156171fa5760008a6001600160a01b0316631698ee8285858a866004811061713a57fe5b60200201516040518463ffffffff1660e01b815260040161715d9392919061a6c1565b60206040518083038186803b15801561717557600080fd5b505afa158015617189573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906171ad919061913b565b90506171b881618582565b156171f157808686806001019750815181106171d057fe5b60200260200101906001600160a01b031690816001600160a01b0316815250505b50600101617112565b5050508061720a57505050614523565b855185600201141561730057806001600160401b038111801561722c57600080fd5b5060405190808252806020026020018201604052801561726057816020015b606081526020019060019003908161724b5790505b50935060005b818110156172f75760408051600180825281830190925290602080830190803683370190505085828151811061729857fe5b60200260200101819052508281815181106172af57fe5b60200260200101518582815181106172c357fe5b60200260200101516000815181106172d757fe5b6001600160a01b0390921660209283029190910190910152600101617266565b50505050614523565b606061731088888860010161705e565b90508051600014156173255750505050614523565b805182026001600160401b038111801561733e57600080fd5b5060405190808252806020026020018201604052801561737257816020015b606081526020019060019003908161735d5790505b50945060005b828110156174f25760005b82518110156174e95782518281028201908490839081106173a057fe5b6020026020010151516001016001600160401b03811180156173c157600080fd5b506040519080825280602002602001820160405280156173eb578160200160208202803683370190505b508882815181106173f857fe5b602002602001018190525085838151811061740f57fe5b602002602001015188828151811061742357fe5b602002602001015160008151811061743757fe5b60200260200101906001600160a01b031690816001600160a01b03168152505060005b84838151811061746657fe5b6020026020010151518110156174df5784838151811061748257fe5b6020026020010151818151811061749557fe5b60200260200101518983815181106174a957fe5b602002602001015182600101815181106174bf57fe5b6001600160a01b039092166020928302919091019091015260010161745a565b5050600101617383565b50600101617378565b50505050509392505050565b60606002835110158015617516575081516001018351145b6175325760405162461bcd60e51b81526004016166ef9061a8b4565b81516003028351601402016001600160401b038111801561755257600080fd5b506040519080825280601f01601f19166020018201604052801561757d576020820181803683370190505b5090506020810160005b845181101561648257801561762c5760008460018303815181106175a757fe5b60200260200101516001600160a01b031663ddca3f436040518163ffffffff1660e01b815260040160206040518083038186803b1580156175e757600080fd5b505afa1580156175fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061761f9190619ddb565b60e81b8352506003909101905b600085828151811061763a57fe5b602090810291909101015160601b835250601490910190600101617587565b6000828202831580159061767657508284828161767257fe5b0414155b15617685576000915050616485565b6706f05b59d3b200008101818110156176a357600092505050616485565b670de0b6b3a76400009004949350505050565b606081516001600160401b03811180156176cf57600080fd5b506040519080825280602002602001820160405280156176f9578160200160208202803683370190505b50905060005b82518110156135c55782600182855103038151811061771a57fe5b602002602001015182828151811061772e57fe5b6001600160a01b03909216602092830291909101909101526001016176ff565b606081516001600160401b038111801561776757600080fd5b50604051908082528060200260200182016040528015617791578160200160208202803683370190505b50905060005b82518110156135c5578260018285510303815181106177b257fe5b60200260200101518282815181106177c657fe5b6001600160a01b0390921660209283029190910190910152600101617797565b6000806000858060200190518101906177ff9190619157565b91509150600085806020019051810190617819919061913b565b90503063e8e4af0983858461782d8a6184e9565b6040518563ffffffff1660e01b815260040161784c949392919061a253565b60006040518083038186803b15801561786457600080fd5b505afa92505050801561789957506040513d6000823e601f3d908101601f19168201604052617896919081019061991b565b60015b6178da573d8080156178c7576040519150601f19603f3d011682016040523d82523d6000602084013e6178cc565b606091505b506000945050505050614523565b806000815181106178e757fe5b6020026020010151945050505050614523565b60006118a683616aa961790e8260016184ca565b617918888761844e565b90618484565b60006012905060006060836001600160a01b031660405180604001604052806004815260200163313ce56760e01b81525060405161795c919061a1c5565b600060405180830381855afa9150503d8060008114617997576040519150601f19603f3d011682016040523d82523d6000602084013e61799c565b606091505b50915091508180156179b057506020815110155b156179c3576179c0816000617c6c565b92505b5050919050565b600080600080846001600160a01b031663d9638d368b602001516040518263ffffffff1660e01b8152600401617a00919061a679565b60a06040518083038186803b158015617a1857600080fd5b505afa158015617a2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190617a509190619f28565b945094505050925089604001516001600160a01b0316886001600160a01b03161415617b675760008790506000617b00886001600160a01b031663568d4b6f6040518163ffffffff1660e01b815260040160206040518083038186803b158015617ab957600080fd5b505afa158015617acd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190617af1919061996d565b670de0b6b3a7640000906184ca565b90506000617b1a82616aa985670de0b6b3a764000061844e565b90506000617b386b033b2e3c9fd0803ce8000000616a028985618484565b9050858110617b51576000975050505050505050616bd6565b6000616abd60016179188564e8d4a510006184a0565b89604001516001600160a01b0316896001600160a01b03161415617c4c576000617b968864e8d4a5100061844e565b90506000617bd6886001600160a01b031663fae036d56040518163ffffffff1660e01b815260040160206040518083038186803b158015616b7457600080fd5b90506000617bf0670de0b6b3a7640000616aa9858561844e565b905085811115617c095760009650505050505050616bd6565b6000617c256b033b2e3c9fd0803ce8000000616a0289856184ca565b9050848111617c3e576000975050505050505050616bd6565b509550616bd6945050505050565b5060009998505050505050505050565b617c6783838361878e565b505050565b600061452383836187b5565b600080617c83618981565b85806020019051810190617c979190619a19565b91509150600085806020019051810190617cb191906199fd565b9050600060603063205e01d760e11b858786616c348c6184e9565b600080846020015190506060816001600160a01b031663910ffc7187606001516001600160a01b0316876001600160a01b031614617d0a5786617d20565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee5b88606001516001600160a01b0316876001600160a01b031614617d435786617d59565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee5b604080516000815260208101918290526001600160e01b031960e086901b16909152617d8d9291906001906024810161a2d5565b60006040518083038186803b158015617da557600080fd5b505afa158015617db9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052617de191908101906195ca565b505090508051866000015110617dfd5750600091506145239050565b80866000015181518110617e0d57fe5b6020026020010151925060f883901c60001c60bb14156120725750600091506145239050565b600080617e3e6189bf565b84806020019051810190617e52919061923e565b91509150600086806020019051810190617e6c919061923e565b50604051633c7b5fe960e21b8152909150309063f1ed7fa490617e99908590859088908b9060040161a961565b60206040518083038186803b158015617eb157600080fd5b505afa925050508015617ee1575060408051601f3d908101601f19168201909252617ede9181019061996d565b60015b617f0f573d8080156178c7576040519150601f19603f3d011682016040523d82523d6000602084013e6178cc565b935061452392505050565b6000806060866001600160a01b03166357a281dc86866040518363ffffffff1660e01b8152600401617f4d92919061a20e565b60006040518083038186803b158015617f6557600080fd5b505afa158015617f79573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052617fa19190810190619532565b90506001915080516000141561803a576040516315e8a07760e21b81526001600160a01b038816906357a281dc90617fdf908790899060040161a20e565b60006040518083038186803b158015617ff757600080fd5b505afa15801561800b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526180339190810190619532565b9050600091505b8051861061804f5760008092509250506166b4565b80868151811061805b57fe5b602002602001015192505094509492505050565b6000806000808680602001905181019061808991906191ee565b925092509250801561812d57604051633cd0243b60e11b81526001600160a01b038316906379a0487690620493e0906180c9906000908a9060040161a1f5565b604080518083038187803b1580156180e057600080fd5b5086fa93505050508015618111575060408051601f3d908101601f1916820190925261810e91810190619ed0565b60015b6181215760009350505050614523565b50935061452392505050565b6040516366410a2160e01b81526001600160a01b038316906366410a2190620493e0906180c9906000908a9060040161a1f5565b60008060008580602001905181019061817a9190619157565b91509150600085806020019051810190618194919061913b565b9050306330d6570d83858461782d8a6184e9565b6000806060846001600160a01b03166370a0823160e01b856040516024016181d0919061a1e1565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b031990941693909317909252905161820e919061a1c5565b600060405180830381855afa9150503d8060008114618249576040519150601f19603f3d011682016040523d82523d6000602084013e61824e565b606091505b509150915081801561826257506020815110155b1561648257611914816000617c6c565b60008060008580602001905181019061828b9190619157565b915091506000858060200190518101906182a5919061913b565b90503063a469841762061a808486856182bd8b6184e9565b6040518663ffffffff1660e01b81526004016182dc949392919061a253565b60006040518083038187803b1580156182f457600080fd5b5086fa9350505050801561789957506040513d6000823e601f3d908101601f19168201604052617896919081019061991b565b6000806060856001600160a01b031663dd62ed3e60e01b868660405160240161835192919061a20e565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b031990941693909317909252905161838f919061a1c5565b600060405180830381855afa9150503d80600081146183ca576040519150601f19603f3d011682016040523d82523d6000602084013e6183cf565b606091505b50915091508180156183e357506020815110155b1561207257616bd6816000617c6c565b6000616485826187df565b6000806000858060200190518101906184179190619157565b91509150600080868060200190518101906184329190619157565b9150915061844284848389614650565b98975050505050505050565b60008261845d57506000616485565b8282028284828161846a57fe5b04146145235761452361847f60018686618846565b6188a0565b6000828201838110156145235761452361847f60008686618846565b6000816184b6576184b661847f60038585618846565b60008284816184c157fe5b04949350505050565b6000828211156184e3576184e361847f60028585618846565b50900390565b60408051600180825281830190925260609160208083019080368337019050509050818160008151811061851957fe5b602002602001018181525050919050565b6000831580618537575081155b80618540575082155b1561854d57506000614523565b8382028285828161855a57fe5b041461856a576000915050614523565b836001850382018161857857fe5b0495945050505050565b6000813b80618595576000915050611245565b50816001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b1580156185cf57600080fd5b505afa1580156185e3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190618607919061913b565b6001600160a01b03166370a08231836040518263ffffffff1660e01b8152600401618632919061a1e1565b60206040518083038186803b15801561864a57600080fd5b505afa15801561865e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190618682919061996d565b61868e57506000611245565b816001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b1580156186c757600080fd5b505afa1580156186db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906186ff919061913b565b6001600160a01b03166370a08231836040518263ffffffff1660e01b815260040161872a919061a1e1565b60206040518083038186803b15801561874257600080fd5b505afa158015618756573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061877a919061996d565b61878657506000611245565b506001919050565b81602001835110156187ad576187ad61847f60058551856020016188a8565b910160200152565b600081602001835110156187d6576187d661847f60058551856020016188a8565b50016020015190565b60006001600160a01b03821673c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2141561880e57506012611245565b600082604051602001618821919061a198565b60408051808303601f190181529190528051602090910120600f166004019392505050565b606063e946c1bb60e01b8484846040516024016188659392919061a70d565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915290509392505050565b805160208201fd5b6060632800659560e01b8484846040516024016188659392919061a72e565b60408051608081018252600080825260208201819052918101829052606081019190915290565b6040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b60408051808201909152606081526000602082015290565b604051806040016040528060008152602001606081525090565b6040518060a0016040528060008019168152602001600081526020016000815260200160008152602001606081525090565b604080516060810182526000808252602082018190529181019190915290565b60405180608001604052806004906020820280368337509192915050565b6040518060a001604052806000815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b03168152602001606081525090565b80356164858161ac22565b60008083601f840112618a25578182fd5b5081356001600160401b03811115618a3b578182fd5b6020830191508360208083028501011115618a5557600080fd5b9250929050565b600082601f830112618a6c578081fd5b8135618a7f618a7a8261ab9b565b61ab75565b818152915060208083019084810181840286018201871015618aa057600080fd5b60005b84811015618ac8578135618ab68161ac22565b84529282019290820190600101618aa3565b505050505092915050565b600082601f830112618ae3578081fd5b8135618af1618a7a8261ab9b565b818152915060208083019084810160005b84811015618ac857618b19888484358a0101618a5c565b84529282019290820190600101618b02565b600082601f830112618b3b578081fd5b8135618b49618a7a8261ab9b565b818152915060208083019084810160005b84811015618ac857618b71888484358a0101618d8a565b84529282019290820190600101618b5a565b600082601f830112618b93578081fd5b8135618ba1618a7a8261ab9b565b818152915060208083019084810181840286018201871015618bc257600080fd5b60005b84811015618ac8578135618bd88161ac22565b84529282019290820190600101618bc5565b600082601f830112618bfa578081fd5b8135618c08618a7a8261ab9b565b8181529150602080830190848101608080850287018301881015618c2b57600080fd5b60005b85811015618c5257618c408984619089565b85529383019391810191600101618c2e565b50505050505092915050565b600082601f830112618c6e578081fd5b8135618c7c618a7a8261ab9b565b818152915060208083019084810181840286018201871015618c9d57600080fd5b60005b84811015618ac857813584529282019290820190600101618ca0565b600082601f830112618ccc578081fd5b8151618cda618a7a8261ab9b565b818152915060208083019084810181840286018201871015618cfb57600080fd5b60005b84811015618ac857815184529282019290820190600101618cfe565b600082601f830112618d2a578081fd5b8151618d38618a7a8261ab9b565b818152915060208083019084810181840286018201871015618d5957600080fd5b6000805b85811015618c5257825163ffffffff81168114618d78578283fd5b85529383019391830191600101618d5d565b600082601f830112618d9a578081fd5b8135618da8618a7a8261abba565b9150808252836020828501011115618dbf57600080fd5b8060208401602084013760009082016020015292915050565b600082601f830112618de8578081fd5b8151618df6618a7a8261abba565b9150808252836020828501011115618e0d57600080fd5b6134d281602084016020860161abe8565b80516002811061648557600080fd5b600060608284031215618e3e578081fd5b618e48606061ab75565b90508135618e558161ac22565b81526020820135618e658161ac37565b60208201526040820135618e788161ac37565b604082015292915050565b600060608284031215618e94578081fd5b618e9e606061ab75565b90508151618eab8161ac22565b81526020820151618ebb8161ac37565b60208201526040820151618e788161ac37565b600060408284031215618edf578081fd5b618ee9604061ab75565b90508135618ef68161ac22565b81526020820135618f068161ac22565b602082015292915050565b600060a08284031215618f22578081fd5b618f2c60a061ab75565b9050813581526020820135618f408161ac22565b60208201526040820135618f538161ac22565b60408201526060820135618f668161ac22565b606082015260808201356001600160401b03811115618f8457600080fd5b618f9084828501618d8a565b60808301525092915050565b6000610180808385031215618faf578182fd5b618fb88161ab75565b915050618fc58383618a09565b8152618fd48360208401618a09565b6020820152618fe683604084016190e6565b6040820152618ff883606084016190e6565b606082015261900a83608084016190e6565b608082015261901c8360a08401618a09565b60a082015261902e8360c08401618a09565b60c08201526190408360e08401618a09565b60e082015261010061905484828501618a09565b90820152610120828101359082015261014061907284828501619108565b818301525061016080830135818301525092915050565b60006080828403121561909a578081fd5b6190a4608061ab75565b90508135600481106190b557600080fd5b815260208201356190c58161ac5c565b80602083015250604082013560408201526060820135606082015292915050565b80356001600160801b038116811461648557600080fd5b80516164858161ac22565b80356001600160401b038116811461648557600080fd5b600060208284031215619130578081fd5b81356145238161ac22565b60006020828403121561914c578081fd5b81516145238161ac22565b60008060408385031215619169578081fd5b82516191748161ac22565b60208401519092506191858161ac22565b809150509250929050565b600080600080608085870312156191a5578182fd5b84516191b08161ac22565b60208601519094506191c18161ac22565b60408601519093506191d28161ac22565b60608601519092506191e38161ac22565b939692955090935050565b600080600060608486031215619202578081fd5b835161920d8161ac22565b602085015190935061921e8161ac22565b60408501519092508015158114619233578182fd5b809150509250925092565b60008060408385031215619250578182fd5b825161925b8161ac22565b60208401519092506001600160401b0380821115619277578283fd5b9084019060a0828703121561928a578283fd5b61929460a061ab75565b8251815260208301516192a68161ac22565b602082015260408301516192b98161ac22565b604082015260608301516192cc8161ac22565b60608201526080830151828111156192e2578485fd5b6192ee88828601618dd8565b6080830152508093505050509250929050565b600080600080600060a08688031215619318578283fd5b85356193238161ac22565b945060208601356193338161ac22565b935060408601356193438161ac22565b925060608601356193538161ac22565b915060808601356001600160401b0381111561936d578182fd5b61937988828901618c5e565b9150509295509295909350565b6000806000806080858703121561939b578182fd5b84356193a68161ac22565b935060208501356193b68161ac22565b925060408501356193c68161ac22565b915060608501356001600160401b038111156193e0578182fd5b6193ec87828801618c5e565b91505092959194509250565b6000806000806080858703121561940d578182fd5b84356194188161ac22565b935060208501356194288161ac22565b925060408501356194388161ac22565b9396929550929360600135925050565b60008060006060848603121561945c578081fd5b83356194678161ac22565b925060208401356001600160401b0380821115619482578283fd5b61948e87838801618a5c565b935060408601359150808211156194a3578283fd5b506194b086828701618c5e565b9150509250925092565b600080600080600060a086880312156194d1578283fd5b85356194dc8161ac22565b94506020860135935060408601356193438161ac22565b60008060208385031215619505578182fd5b82356001600160401b0381111561951a578283fd5b61952685828601618a14565b90969095509350505050565b60006020808385031215619544578182fd5b82516001600160401b03811115619559578283fd5b8301601f81018513619569578283fd5b8051619577618a7a8261ab9b565b8181528381019083850185840285018601891015619593578687fd5b8694505b838510156195be5780516195aa8161ac22565b835260019490940193918501918501619597565b50979650505050505050565b6000806000606084860312156195de578081fd5b83516001600160401b03808211156195f4578283fd5b818601915086601f830112619607578283fd5b8151619615618a7a8261ab9b565b80828252602080830192508086018b828387028901011115619635578788fd5b8796505b84871015619657578051845260019690960195928101928101619639565b50890151909750935050508082111561966e578283fd5b5061967b86828701618cbc565b92505061968b8560408601618e1e565b90509250925092565b6000806000606084860312156196a8578081fd5b83356001600160401b03808211156196be578283fd5b6196ca87838801618b2b565b945060208601359150808211156196df578283fd5b506196ec86828701618b2b565b925050604084013590509250925092565b60006020828403121561970e578081fd5b81356001600160401b03811115619723578182fd5b6118a684828501618b83565b60008060408385031215619741578182fd5b82356001600160401b03811115619756578283fd5b61976285828601618b83565b92505060208301356191858161ac22565b600080600060608486031215619787578081fd5b83356001600160401b0381111561979c578182fd5b6197a886828701618b83565b93505060208401356197b98161ac22565b915060408401356192338161ac22565b600060208083850312156197db578182fd5b82516001600160401b038111156197f0578283fd5b8301601f81018513619800578283fd5b805161980e618a7a8261ab9b565b818152838101908385018584028501860189101561982a578687fd5b8694505b838510156195be57805183526001949094019391850191850161982e565b600080600060608486031215619860578081fd5b83356001600160401b0380821115619876578283fd5b818601915086601f830112619889578283fd5b8135619897618a7a8261ab9b565b80828252602080830192508086016101808c838288028a010111156198ba578889fd5b8897505b858810156198e6576198d08d83618f9c565b85526001979097019693820193908101906198be565b509198508901359450505050808211156198fe578283fd5b5061990b86828701618bea565b92505061968b8560408601618a09565b60006020828403121561992c578081fd5b81516001600160401b03811115619941578182fd5b6118a684828501618cbc565b60006020828403121561995e578081fd5b81518015158114614523578182fd5b60006020828403121561997e578081fd5b5051919050565b600060208284031215619996578081fd5b81516001600160401b038111156199ab578182fd5b6118a684828501618dd8565b6000806000606084860312156199cb578081fd5b83356199d68161ac22565b925060208401356001600160401b03808211156199f1578283fd5b61948e87838801618b83565b600060208284031215619a0e578081fd5b81516145238161ac4d565b60008060808385031215619a2b578182fd5b8251619a368161ac4d565b9150619a458460208501618e83565b90509250929050565b60008060008084860360a0811215619a64578283fd5b6040811215619a71578283fd5b50619a7c604061ab75565b853581526020860135619a8e8161ac22565b602082015293506040850135619aa38161ac22565b92506060850135619ab38161ac22565b915060808501356001600160401b038111156193e0578182fd5b60008060008060808587031215619ae2578182fd5b84356001600160401b0380821115619af8578384fd5b9086019060408289031215619b0b578384fd5b619b15604061ab75565b619b1f8984618a09565b8152602083013582811115619b32578586fd5b619b3e8a828601618ad3565b60208301525080965050619b558860208901618a09565b9450619b648860408901618a09565b93506060870135915080821115619b79578283fd5b506193ec87828801618c5e565b60008060008060c08587031215619b9b578182fd5b619ba58686618e2d565b93506060850135619bb58161ac4d565b92506080850135619bc58161ac4d565b915060a08501356001600160401b038111156193e0578182fd5b60008060008060a08587031215619bf4578182fd5b619bfe8686618ece565b93506040850135619aa38161ac22565b60008060008060808587031215619c23578182fd5b84356001600160401b0380821115619c39578384fd5b619c4588838901618f11565b955060208701359150619c578261ac22565b909350604086013590619c698261ac22565b90925060608601359080821115619b79578283fd5b60008060008060808587031215619c93578182fd5b84356001600160401b03811115619ca8578283fd5b619cb487828801618f11565b94505060208501356194288161ac22565b60008060008060808587031215619cda578182fd5b84356001600160401b03811115619cef578283fd5b619cfb87828801618f11565b945050602085013592506040850135619d138161ac22565b915060608501356191e38161ac22565b60008060006102208486031215619d38578081fd5b619d428585618f9c565b9250619d52856101808601619089565b91506102008401356192338161ac22565b60008060008084860360c0811215619d79578283fd5b6060811215619d86578283fd5b50619d91606061ab75565b8535619d9c8161ac22565b8152602086810135908201526040860135619db68161ac22565b604082015293506060850135619dcb8161ac22565b92506080850135619bc58161ac22565b600060208284031215619dec578081fd5b815162ffffff81168114614523578182fd5b60008060008060808587031215619e13578182fd5b845193506020808601516001600160401b0380821115619e31578485fd5b818801915088601f830112619e44578485fd5b8151619e52618a7a8261ab9b565b81815284810190848601868402860187018d1015619e6e578889fd5b8895505b83861015619e9857619e848d826190fd565b835260019590950194918601918601619e72565b5060408b01519098509450505080831115619eb1578485fd5b5050619ebf87828801618d1a565b606096909601519497939650505050565b60008060408385031215619ee2578182fd5b505080516020909101519092909150565b60008060008060808587031215619f08578182fd5b505082516020840151604085015160609095015191969095509092509050565b600080600080600060a08688031215619f3f578283fd5b5050835160208501516040860151606087015160809097015192989197509594509092509050565b600060208284031215619f78578081fd5b81516145238161ac5c565b6001600160a01b0316815260200190565b600081518352602082015160208401526040820151604084015260608201516060840152608082015160a060808501526118a660a085018261a050565b6001600160a01b03169052565b6000815180845260208085019450808401835b8381101561a0165781516001600160a01b031687529582019590820190600101619ff1565b509495945050505050565b6000815180845260208085019450808401835b8381101561a0165781518752958201959082019060010161a034565b6000815180845261a06881602086016020860161abe8565b601f01601f19169290920160200192915050565b80516001600160a01b031682526020808201516001600160e01b03199081169184019190915260409182015116910152565b80516001600160a01b039081168352602080830151151590840152604080830151909116908301526060908101511515910152565b6000815183526020820151604060208501526118a6604085018261a050565b600081518352602082015160018060a01b0380821660208601528060408501511660408601528060608501511660608601525050608082015160a060808501526118a660a085018261a050565b805161a15a8161ac18565b825260208181015160ff169083015260408082015190830152606090810151910152565b6001600160801b03169052565b6001600160401b03169052565b60609190911b6bffffffffffffffffffffffff1916815260140190565b6000828483379101908152919050565b6000825161a1d781846020870161abe8565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b03948516815292841660208401529083166040830152909116606082015260800190565b6001600160a01b038581168252848116602083015283166040820152608060608201819052600090616bd69083018461a021565b6001600160a01b039485168152928416602084015292166040820152606081019190915260800190565b6001600160a01b039384168152919092166020820152901515604082015260600190565b6001600160a01b038581168252841660208201528215156040820152608060608201819052600090616bd69083018461a050565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03868116825285166020820152604081018490526060810183905260a06080820181905260009061a3679083018461a050565b979650505050505050565b6001600160a01b038416815260606020820181905260009061a39690830185619fde565b8281036040840152616bd6818561a021565b6001600160a01b0385168152600061a3bf8561ac18565b8460208301526080604083015261a3d9608083018561a021565b828103606084015261a367818561a021565b6001600160a01b0389811682526000906101009061a4088b61ac18565b8a602085015281604085015261a4208285018b61a021565b9150838203606085015261a434828a61a021565b9088166080850152905061a4478661ac18565b8560a084015282810360c084015261a45f818661a021565b905082810360e084015261a473818561a021565b9b9a5050505050505050505050565b6001600160a01b03831681526040602082018190526000906118a69083018461a102565b60208082528181018390526000908460408401835b8681101561a4e957823561a4ce8161ac22565b6001600160a01b03168252918301919083019060010161a4bb565b509695505050505050565b60006040825261a5076040830185619fde565b8281036020840152611914818561a021565b60006040825261a52c6040830185619fde565b90508260208301529392505050565b60006060820160608352808651808352608085019150602092506080838202860101838901855b8381101561a59057607f1988840301855261a57e83835161a050565b9486019492509085019060010161a562565b50508581038487015261a5a3818961a021565b93505050508281036040840152616bd6818561a021565b60208082528251828201819052600091906040908185019080840286018301878501865b8381101561a62157888303603f190185528151805187855261a6028886018261a050565b918901511515948901949094529487019492509086019060010161a5de565b509098975050505050505050565b600060208252614523602083018461a021565b901515815260200190565b83151581526001600160a01b03831660208201526060604082018190526000906119149083018461a021565b90815260200190565b60008482526060602083015261a396606083018561a050565b600060208252614523602083018461a050565b60006040825261a52c604083018561a050565b6001600160a01b03938416815291909216602082015262ffffff909116604082015260600190565b6001600160a01b03831681526040602082018190526000906118a69083018461a021565b6060810161a71a8561ac18565b938152602081019290925260409091015290565b606081016008851061a71a57fe5b600060e0820161a74b8761abdd565b8352602060e08185015281875161a762818561a679565b91508193508281028201838a01865b8381101561a79b57868303855261a789838351619f94565b9486019492509085019060010161a771565b505086810360408801528094508851925061a7b6838261a679565b94505050818701845b8281101561a7e05761a7d2858351619f83565b94509083019060010161a7bf565b5050505080915050611914606083018461a0ae565b600f93840b81529190920b6020820152604081019190915260600190565b600f83900b815260808101614523602083018461a07c565b60208082526024908201527f556e6973776170563353616d706c65722f746f6b656e5061746820746f6f20736040820152631a1bdc9d60e21b606082015260800190565b60208082526025908201527f455243323042726964676553616d706c65722f494e56414c49445f544f4b454e6040820152642fa820a4a960d91b606082015260800190565b60208082526025908201527f556e6973776170563353616d706c65722f696e76616c69642070617468206c656040820152646e6774687360d81b606082015260800190565b600061a905828761a07c565b84600f0b606083015283600f0b608083015260c060a0830152616bd660c083018461a021565b60006060825261a93e606083018661a0e3565b828103602084015261a950818661a0e3565b915050826040830152949350505050565b60006080825261a974608083018761a102565b6001600160a01b0395861660208401529390941660408201526060015292915050565b60006080825261a9aa608083018761a102565b6020830195909552506001600160a01b0392831660408201529116606090910152919050565b60006102208201905061a9e4828651619fd1565b602085015161a9f66020840182619fd1565b50604085015161aa09604084018261a17e565b50606085015161aa1c606084018261a17e565b50608085015161aa2f608084018261a17e565b5060a085015161aa4260a0840182619fd1565b5060c085015161aa5560c0840182619fd1565b5060e085015161aa6860e0840182619fd1565b506101008086015161aa7c82850182619fd1565b505061012085810151908301526101408086015161aa9c8285018261a18b565b5050610160858101519083015261aab761018083018561a14f565b6118a6610200830184619fd1565b6000838252604060208301526118a66040830184619fde565b60008482526060602083015261aaf76060830185619fde565b8281036040840152616bd68185619fde565b958652602086019490945260408501929092526060840152608083015260a082015260c00190565b6000808335601e1984360301811261ab47578283fd5b8301803591506001600160401b0382111561ab60578283fd5b602001915036819003821315618a5557600080fd5b6040518181016001600160401b038111828210171561ab9357600080fd5b604052919050565b60006001600160401b0382111561abb0578081fd5b5060209081020190565b60006001600160401b0382111561abcf578081fd5b50601f01601f191660200190565b806002811061124557fe5b60005b8381101561ac0357818101518382015260200161abeb565b8381111561ac12576000848401525b50505050565b600481106110dd57fe5b6001600160a01b03811681146110dd57600080fd5b6001600160e01b0319811681146110dd57600080fd5b80600f0b81146110dd57600080fd5b60ff811681146110dd57600080fdfea26469706673582212204aa5b720ded515ab0c6e4021003dc25f17adb6f2219d6f2df2965a16352ebb8b64736f6c634300060c0033",
                "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x397 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x74C9D255 GT PUSH2 0x1DC JUMPI DUP1 PUSH4 0xB90CD2FB GT PUSH2 0x102 JUMPI DUP1 PUSH4 0xD9BCA372 GT PUSH2 0xA0 JUMPI DUP1 PUSH4 0xF1ED7FA4 GT PUSH2 0x6F JUMPI DUP1 PUSH4 0xF1ED7FA4 EQ PUSH2 0xB02 JUMPI DUP1 PUSH4 0xF3868E9C EQ PUSH2 0x5EC JUMPI DUP1 PUSH4 0xF5A4994D EQ PUSH2 0xB22 JUMPI DUP1 PUSH4 0xFC9FE41B EQ PUSH2 0xB42 JUMPI PUSH2 0x397 JUMP JUMPDEST DUP1 PUSH4 0xD9BCA372 EQ PUSH2 0xA82 JUMPI DUP1 PUSH4 0xDDD5AA28 EQ PUSH2 0xAA2 JUMPI DUP1 PUSH4 0xE78AC045 EQ PUSH2 0xAC2 JUMPI DUP1 PUSH4 0xE8E4AF09 EQ PUSH2 0xAE2 JUMPI PUSH2 0x397 JUMP JUMPDEST DUP1 PUSH4 0xC8319084 GT PUSH2 0xDC JUMPI DUP1 PUSH4 0xC8319084 EQ PUSH2 0xA0D JUMPI DUP1 PUSH4 0xC8C74A37 EQ PUSH2 0xA2D JUMPI DUP1 PUSH4 0xCC1621C9 EQ PUSH2 0xA4D JUMPI DUP1 PUSH4 0xCD72D789 EQ PUSH2 0xA6D JUMPI PUSH2 0x397 JUMP JUMPDEST DUP1 PUSH4 0xB90CD2FB EQ PUSH2 0x9AD JUMPI DUP1 PUSH4 0xBD71ECF6 EQ PUSH2 0x9CD JUMPI DUP1 PUSH4 0xC25C4138 EQ PUSH2 0x9ED JUMPI PUSH2 0x397 JUMP JUMPDEST DUP1 PUSH4 0x9E3F05C3 GT PUSH2 0x17A JUMPI DUP1 PUSH4 0xA4698417 GT PUSH2 0x149 JUMPI DUP1 PUSH4 0xA4698417 EQ PUSH2 0x91F JUMPI DUP1 PUSH4 0xA75E744B EQ PUSH2 0x93F JUMPI DUP1 PUSH4 0xA76BBEC4 EQ PUSH2 0x95F JUMPI DUP1 PUSH4 0xADC636BF EQ PUSH2 0x97F JUMPI PUSH2 0x397 JUMP JUMPDEST DUP1 PUSH4 0x9E3F05C3 EQ PUSH2 0x89B JUMPI DUP1 PUSH4 0x9EA0FF13 EQ PUSH2 0x8CA JUMPI DUP1 PUSH4 0xA0295B8B EQ PUSH2 0x8EA JUMPI DUP1 PUSH4 0xA2D10BA5 EQ PUSH2 0x90A JUMPI PUSH2 0x397 JUMP JUMPDEST DUP1 PUSH4 0x8E5A0E07 GT PUSH2 0x1B6 JUMPI DUP1 PUSH4 0x8E5A0E07 EQ PUSH2 0x80C JUMPI DUP1 PUSH4 0x9209483B EQ PUSH2 0x83B JUMPI DUP1 PUSH4 0x98777748 EQ PUSH2 0x85B JUMPI DUP1 PUSH4 0x9BF3EE35 EQ PUSH2 0x87B JUMPI PUSH2 0x397 JUMP JUMPDEST DUP1 PUSH4 0x74C9D255 EQ PUSH2 0x7AC JUMPI DUP1 PUSH4 0x7F7F4F13 EQ PUSH2 0x7CC JUMPI DUP1 PUSH4 0x8B6D7B44 EQ PUSH2 0x7EC JUMPI PUSH2 0x397 JUMP JUMPDEST DUP1 PUSH4 0x3105FEC1 GT PUSH2 0x2C1 JUMPI DUP1 PUSH4 0x51BE4EAA GT PUSH2 0x25F JUMPI DUP1 PUSH4 0x5D5B674F GT PUSH2 0x22E JUMPI DUP1 PUSH4 0x5D5B674F EQ PUSH2 0x71F JUMPI DUP1 PUSH4 0x66A1AC6B EQ PUSH2 0x73F JUMPI DUP1 PUSH4 0x68BE3CF2 EQ PUSH2 0x75F JUMPI DUP1 PUSH4 0x706E2F9B EQ PUSH2 0x78C JUMPI PUSH2 0x397 JUMP JUMPDEST DUP1 PUSH4 0x51BE4EAA EQ PUSH2 0x69B JUMPI DUP1 PUSH4 0x5505000A EQ PUSH2 0x6B0 JUMPI DUP1 PUSH4 0x57494B1D EQ PUSH2 0x6DF JUMPI DUP1 PUSH4 0x5AAE4E53 EQ PUSH2 0x6FF JUMPI PUSH2 0x397 JUMP JUMPDEST DUP1 PUSH4 0x40BC03AE GT PUSH2 0x29B JUMPI DUP1 PUSH4 0x40BC03AE EQ PUSH2 0x60C JUMPI DUP1 PUSH4 0x42CBB15C EQ PUSH2 0x62C JUMPI DUP1 PUSH4 0x494569DB EQ PUSH2 0x64E JUMPI DUP1 PUSH4 0x4EDFB5B2 EQ PUSH2 0x66E JUMPI PUSH2 0x397 JUMP JUMPDEST DUP1 PUSH4 0x3105FEC1 EQ PUSH2 0x5AC JUMPI DUP1 PUSH4 0x31268657 EQ PUSH2 0x5CC JUMPI DUP1 PUSH4 0x36052391 EQ PUSH2 0x5EC JUMPI PUSH2 0x397 JUMP JUMPDEST DUP1 PUSH4 0x2339078F GT PUSH2 0x339 JUMPI DUP1 PUSH4 0x29FA4AA0 GT PUSH2 0x308 JUMPI DUP1 PUSH4 0x29FA4AA0 EQ PUSH2 0x51D JUMPI DUP1 PUSH4 0x2AA64319 EQ PUSH2 0x53D JUMPI DUP1 PUSH4 0x2D753AA4 EQ PUSH2 0x56C JUMPI DUP1 PUSH4 0x30D6570D EQ PUSH2 0x58C JUMPI PUSH2 0x397 JUMP JUMPDEST DUP1 PUSH4 0x2339078F EQ PUSH2 0x4A8 JUMPI DUP1 PUSH4 0x252322B3 EQ PUSH2 0x4C8 JUMPI DUP1 PUSH4 0x2681F7E4 EQ PUSH2 0x4E8 JUMPI DUP1 PUSH4 0x281E3432 EQ PUSH2 0x4FD JUMPI PUSH2 0x397 JUMP JUMPDEST DUP1 PUSH4 0x11F2928B GT PUSH2 0x375 JUMPI DUP1 PUSH4 0x11F2928B EQ PUSH2 0x420 JUMPI DUP1 PUSH4 0x149DAB0E EQ PUSH2 0x42A JUMPI DUP1 PUSH4 0x16279055 EQ PUSH2 0x459 JUMPI DUP1 PUSH4 0x1694505E EQ PUSH2 0x486 JUMPI PUSH2 0x397 JUMP JUMPDEST DUP1 PUSH4 0x34EAFF9 EQ PUSH2 0x39C JUMPI DUP1 PUSH4 0x496D5DC EQ PUSH2 0x3D2 JUMPI DUP1 PUSH4 0x1022742B EQ PUSH2 0x400 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3BC PUSH2 0x3B7 CALLDATASIZE PUSH1 0x4 PUSH2 0x9386 JUMP JUMPDEST PUSH2 0xB62 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3C9 SWAP2 SWAP1 PUSH2 0xA62F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3F2 PUSH2 0x3ED CALLDATASIZE PUSH1 0x4 PUSH2 0x9448 JUMP JUMPDEST PUSH2 0xD84 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3C9 SWAP3 SWAP2 SWAP1 PUSH2 0xA4F4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x40C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3BC PUSH2 0x41B CALLDATASIZE PUSH1 0x4 PUSH2 0x984C JUMP JUMPDEST PUSH2 0xF2A JUMP JUMPDEST PUSH2 0x428 PUSH2 0x109D JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x436 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x44A PUSH2 0x445 CALLDATASIZE PUSH1 0x4 PUSH2 0x9ACD JUMP JUMPDEST PUSH2 0x10E0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3C9 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA372 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x465 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x479 PUSH2 0x474 CALLDATASIZE PUSH1 0x4 PUSH2 0x911F JUMP JUMPDEST PUSH2 0x1240 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3C9 SWAP2 SWAP1 PUSH2 0xA642 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x492 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x49B PUSH2 0x124A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3C9 SWAP2 SWAP1 PUSH2 0xA1E1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3BC PUSH2 0x4C3 CALLDATASIZE PUSH1 0x4 PUSH2 0x9A4E JUMP JUMPDEST PUSH2 0x1259 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3BC PUSH2 0x4E3 CALLDATASIZE PUSH1 0x4 PUSH2 0x9386 JUMP JUMPDEST PUSH2 0x1480 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x49B PUSH2 0x164A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x509 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3BC PUSH2 0x518 CALLDATASIZE PUSH1 0x4 PUSH2 0x9D63 JUMP JUMPDEST PUSH2 0x1659 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x529 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3BC PUSH2 0x538 CALLDATASIZE PUSH1 0x4 PUSH2 0x9B86 JUMP JUMPDEST PUSH2 0x18AE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x549 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x55D PUSH2 0x558 CALLDATASIZE PUSH1 0x4 PUSH2 0x9BDF JUMP JUMPDEST PUSH2 0x191D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3C9 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA64D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x578 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3BC PUSH2 0x587 CALLDATASIZE PUSH1 0x4 PUSH2 0x9301 JUMP JUMPDEST PUSH2 0x1BFA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x598 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3BC PUSH2 0x5A7 CALLDATASIZE PUSH1 0x4 PUSH2 0x9386 JUMP JUMPDEST PUSH2 0x1D83 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5B8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3BC PUSH2 0x5C7 CALLDATASIZE PUSH1 0x4 PUSH2 0x9448 JUMP JUMPDEST PUSH2 0x1EF7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5D8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x428 PUSH2 0x5E7 CALLDATASIZE PUSH1 0x4 PUSH2 0x94F3 JUMP JUMPDEST PUSH2 0x207B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5F8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3BC PUSH2 0x607 CALLDATASIZE PUSH1 0x4 PUSH2 0x9BDF JUMP JUMPDEST PUSH2 0x20E3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x618 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3BC PUSH2 0x627 CALLDATASIZE PUSH1 0x4 PUSH2 0x9B86 JUMP JUMPDEST PUSH2 0x2175 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x638 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x641 PUSH2 0x22F6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3C9 SWAP2 SWAP1 PUSH2 0xA679 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x65A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3F2 PUSH2 0x669 CALLDATASIZE PUSH1 0x4 PUSH2 0x9448 JUMP JUMPDEST PUSH2 0x22FA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x67A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x68E PUSH2 0x689 CALLDATASIZE PUSH1 0x4 PUSH2 0x9CC5 JUMP JUMPDEST PUSH2 0x2486 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3C9 SWAP2 SWAP1 PUSH2 0xA69B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x641 PUSH2 0x2704 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6BC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x6D0 PUSH2 0x6CB CALLDATASIZE PUSH1 0x4 PUSH2 0x99B7 JUMP JUMPDEST PUSH2 0x270C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3C9 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA53B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6EB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3BC PUSH2 0x6FA CALLDATASIZE PUSH1 0x4 PUSH2 0x9386 JUMP JUMPDEST PUSH2 0x2A01 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x70B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x6D0 PUSH2 0x71A CALLDATASIZE PUSH1 0x4 PUSH2 0x99B7 JUMP JUMPDEST PUSH2 0x2F78 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x72B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3BC PUSH2 0x73A CALLDATASIZE PUSH1 0x4 PUSH2 0x9386 JUMP JUMPDEST PUSH2 0x325D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x74B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3BC PUSH2 0x75A CALLDATASIZE PUSH1 0x4 PUSH2 0x984C JUMP JUMPDEST PUSH2 0x32C3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x76B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x77F PUSH2 0x77A CALLDATASIZE PUSH1 0x4 PUSH2 0x94F3 JUMP JUMPDEST PUSH2 0x3378 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3C9 SWAP2 SWAP1 PUSH2 0xA5BA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x798 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3BC PUSH2 0x7A7 CALLDATASIZE PUSH1 0x4 PUSH2 0x96FD JUMP JUMPDEST PUSH2 0x34D9 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7B8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x44A PUSH2 0x7C7 CALLDATASIZE PUSH1 0x4 PUSH2 0x9ACD JUMP JUMPDEST PUSH2 0x35CB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7D8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3BC PUSH2 0x7E7 CALLDATASIZE PUSH1 0x4 PUSH2 0x9D63 JUMP JUMPDEST PUSH2 0x35DA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7F8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3BC PUSH2 0x807 CALLDATASIZE PUSH1 0x4 PUSH2 0x9B86 JUMP JUMPDEST PUSH2 0x3827 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x818 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x82C PUSH2 0x827 CALLDATASIZE PUSH1 0x4 PUSH2 0x9694 JUMP JUMPDEST PUSH2 0x3B8A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3C9 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA92B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x847 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3BC PUSH2 0x856 CALLDATASIZE PUSH1 0x4 PUSH2 0x9B86 JUMP JUMPDEST PUSH2 0x3DA0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x867 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3BC PUSH2 0x876 CALLDATASIZE PUSH1 0x4 PUSH2 0x9386 JUMP JUMPDEST PUSH2 0x3FA0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x887 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x641 PUSH2 0x896 CALLDATASIZE PUSH1 0x4 PUSH2 0x9D23 JUMP JUMPDEST PUSH2 0x44D9 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x8BB PUSH2 0x8B6 CALLDATASIZE PUSH1 0x4 PUSH2 0x9C0E JUMP JUMPDEST PUSH2 0x452A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3C9 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA682 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8D6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x641 PUSH2 0x8E5 CALLDATASIZE PUSH1 0x4 PUSH2 0x93F8 JUMP JUMPDEST PUSH2 0x4650 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8F6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3BC PUSH2 0x905 CALLDATASIZE PUSH1 0x4 PUSH2 0x9A4E JUMP JUMPDEST PUSH2 0x4866 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x916 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x49B PUSH2 0x4A62 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x92B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3BC PUSH2 0x93A CALLDATASIZE PUSH1 0x4 PUSH2 0x9386 JUMP JUMPDEST PUSH2 0x4A71 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x94B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x55D PUSH2 0x95A CALLDATASIZE PUSH1 0x4 PUSH2 0x94BA JUMP JUMPDEST PUSH2 0x4BC6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x96B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3BC PUSH2 0x97A CALLDATASIZE PUSH1 0x4 PUSH2 0x9386 JUMP JUMPDEST PUSH2 0x4D03 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x98B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x99F PUSH2 0x99A CALLDATASIZE PUSH1 0x4 PUSH2 0x9386 JUMP JUMPDEST PUSH2 0x4F12 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3C9 SWAP3 SWAP2 SWAP1 PUSH2 0xA6E9 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x9B9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3BC PUSH2 0x9C8 CALLDATASIZE PUSH1 0x4 PUSH2 0x9386 JUMP JUMPDEST PUSH2 0x5062 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x9D9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3BC PUSH2 0x9E8 CALLDATASIZE PUSH1 0x4 PUSH2 0x972F JUMP JUMPDEST PUSH2 0x50C8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x9F9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3BC PUSH2 0xA08 CALLDATASIZE PUSH1 0x4 PUSH2 0x9386 JUMP JUMPDEST PUSH2 0x51C4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA19 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3BC PUSH2 0xA28 CALLDATASIZE PUSH1 0x4 PUSH2 0x9386 JUMP JUMPDEST PUSH2 0x522A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA39 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3BC PUSH2 0xA48 CALLDATASIZE PUSH1 0x4 PUSH2 0x9448 JUMP JUMPDEST PUSH2 0x53E7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA59 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x8BB PUSH2 0xA68 CALLDATASIZE PUSH1 0x4 PUSH2 0x9C0E JUMP JUMPDEST PUSH2 0x5553 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA79 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x49B PUSH2 0x5739 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA8E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x55D PUSH2 0xA9D CALLDATASIZE PUSH1 0x4 PUSH2 0x94BA JUMP JUMPDEST PUSH2 0x5751 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xAAE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x55D PUSH2 0xABD CALLDATASIZE PUSH1 0x4 PUSH2 0x9BDF JUMP JUMPDEST PUSH2 0x5840 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xACE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3BC PUSH2 0xADD CALLDATASIZE PUSH1 0x4 PUSH2 0x9773 JUMP JUMPDEST PUSH2 0x5AD3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xAEE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3BC PUSH2 0xAFD CALLDATASIZE PUSH1 0x4 PUSH2 0x9386 JUMP JUMPDEST PUSH2 0x5BC8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB0E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x641 PUSH2 0xB1D CALLDATASIZE PUSH1 0x4 PUSH2 0x9C7E JUMP JUMPDEST PUSH2 0x5CFB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB2E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x99F PUSH2 0xB3D CALLDATASIZE PUSH1 0x4 PUSH2 0x9386 JUMP JUMPDEST PUSH2 0x5E9A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB4E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x82C PUSH2 0xB5D CALLDATASIZE PUSH1 0x4 PUSH2 0x9694 JUMP JUMPDEST PUSH2 0x5F86 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0xB7D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xBA7 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x182DF0F5 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xBE5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xBF9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xC1D SWAP2 SWAP1 PUSH2 0x996D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x313CE567 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xC5A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xC6E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xC92 SWAP2 SWAP1 PUSH2 0x9F67 JUMP JUMPDEST PUSH1 0xFF AND SWAP1 POP DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0xD0A JUMPI PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xD04 JUMPI DUP2 PUSH1 0xA EXP PUSH5 0x2540BE400 MUL DUP4 DUP8 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xCD4 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MUL DUP2 PUSH2 0xCE4 JUMPI INVALID JUMPDEST DIV DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xCF1 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0xCB4 JUMP JUMPDEST POP PUSH2 0xD79 JUMP JUMPDEST DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0xD79 JUMPI PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xD77 JUMPI DUP3 DUP3 PUSH1 0xA EXP PUSH5 0x2540BE400 DUP9 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xD46 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MUL MUL DUP2 PUSH2 0xD57 JUMPI INVALID JUMPDEST DIV DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xD64 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0xD27 JUMP JUMPDEST POP JUMPDEST POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP2 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0xDA1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xDCB JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH2 0xDD8 DUP7 DUP7 PUSH2 0x619B JUMP JUMPDEST SWAP3 POP DUP3 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0xDEA JUMPI POP PUSH2 0xF22 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xF1F JUMPI DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xA8312B1D PUSH3 0x249F0 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xE14 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP11 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE3C SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xAADE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xE54 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0xE8A JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0xE87 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x991B JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0xEC4 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0xEB8 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xEBD JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP PUSH2 0xF1F JUMP JUMPDEST DUP1 PUSH1 0x1 DUP9 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0xED4 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xEE8 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xF00 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0xF16 JUMPI POP PUSH2 0xF1F JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0xDED JUMP JUMPDEST POP POP JUMPDEST SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0xF43 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xF6D JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 EQ PUSH2 0x1095 JUMPI ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x9BF3EE35 PUSH3 0x30D40 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xF9A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0xFAE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xFD5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA9D0 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xFED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x101E JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x101B SWAP2 DUP2 ADD SWAP1 PUSH2 0x996D JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1072 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x104C JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1051 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1060 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP PUSH2 0x108D JUMP JUMPDEST DUP1 DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x107F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP JUMPDEST PUSH1 0x1 ADD PUSH2 0xF73 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xE9DB8717BC5DFB20AAF538B4A5A02B7791FF430C SWAP1 CALLVALUE DUP1 ISZERO PUSH2 0x8FC MUL SWAP2 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x10DD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP1 DUP7 PUSH1 0x20 ADD MLOAD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x10F8 JUMPI PUSH2 0x1236 JUMP JUMPDEST PUSH2 0x1104 DUP8 DUP8 DUP8 DUP8 PUSH2 0x648B JUMP JUMPDEST DUP6 MLOAD SWAP2 SWAP5 POP SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x1120 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x114A JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0x1234 JUMPI DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x7F9C0ECD PUSH3 0x493E0 DUP6 DUP9 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x1179 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x119E SWAP3 SWAP2 SWAP1 PUSH2 0xA519 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x11B6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x11E7 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x11E4 SWAP2 DUP2 ADD SWAP1 PUSH2 0x996D JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x11F0 JUMPI PUSH2 0x1234 JUMP JUMPDEST DUP1 DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x11FD JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1215 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x122B JUMPI POP PUSH2 0x1234 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x1150 JUMP JUMPDEST POP JUMPDEST SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST DUP1 EXTCODESIZE ISZERO ISZERO JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1265 DUP4 DUP6 PUSH2 0x66BD JUMP JUMPDEST PUSH1 0x20 DUP6 ADD MLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x2 DUP1 DUP3 MSTORE PUSH1 0x60 DUP3 DUP2 ADD SWAP1 SWAP4 MSTORE DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP6 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x129B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP DUP5 DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x12C9 JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE DUP4 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x12F9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1323 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP4 POP PUSH2 0x132E PUSH2 0x88C7 JUMP JUMPDEST PUSH2 0x1336 PUSH2 0x66FC JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x1473 JUMPI PUSH1 0x60 PUSH2 0x1362 DUP12 DUP10 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x1355 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x672B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x7C268337 PUSH1 0xE1 SHL DUP2 MSTORE SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND SWAP1 PUSH4 0xF84D066E SWAP1 PUSH2 0x1398 SWAP1 PUSH1 0x0 SWAP1 DUP6 SWAP1 DUP11 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0xA73C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x13B2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x13E7 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x13E4 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x97C9 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1422 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x1415 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x141A JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP POP PUSH2 0x1473 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x1431 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 NOT MUL SWAP1 POP PUSH1 0x0 DUP2 SGT PUSH2 0x144F JUMPI POP POP POP PUSH2 0x1473 JUMP JUMPDEST DUP1 DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x145C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP POP POP PUSH1 0x1 ADD PUSH2 0x133B JUMP JUMPDEST POP POP POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x148C DUP4 DUP6 PUSH2 0x66BD JUMP JUMPDEST DUP2 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x14A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x14CE JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND ISZERO PUSH2 0x14F1 JUMPI PUSH2 0x14EC DUP8 DUP8 PUSH2 0x67BD JUMP JUMPDEST PUSH2 0x14F4 JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND ISZERO PUSH2 0x1516 JUMPI PUSH2 0x1511 DUP9 DUP8 PUSH2 0x67BD JUMP JUMPDEST PUSH2 0x1519 JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xD77 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH2 0x157C JUMPI PUSH2 0x155B DUP5 PUSH4 0x2640F62C PUSH1 0xE0 SHL DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x154E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x683C JUMP JUMPDEST DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x1567 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP4 POP DUP3 DUP2 MSTORE POP POP POP PUSH2 0x1616 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND PUSH2 0x15A2 JUMPI PUSH2 0x155B DUP4 PUSH4 0x59E94862 PUSH1 0xE0 SHL DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x154E JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH2 0x15BC DUP5 PUSH4 0x59E94862 PUSH1 0xE0 SHL DUP11 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x154E JUMPI INVALID JUMPDEST SWAP3 POP SWAP1 POP DUP1 ISZERO PUSH2 0x15F9 JUMPI PUSH2 0x15D8 DUP6 PUSH4 0x9903D8B PUSH1 0xE2 SHL DUP4 PUSH2 0x683C JUMP JUMPDEST DUP9 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x15E4 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP5 POP DUP3 DUP2 MSTORE POP POP POP PUSH2 0x1614 JUMP JUMPDEST PUSH1 0x0 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x1607 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP JUMPDEST POP JUMPDEST DUP1 ISZERO DUP1 PUSH2 0x1636 JUMPI POP DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x162A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ JUMPDEST ISZERO PUSH2 0x1641 JUMPI POP PUSH2 0xD77 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x151E JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1665 DUP4 DUP6 PUSH2 0x66BD JUMP JUMPDEST PUSH1 0x0 DUP6 PUSH1 0x0 ADD MLOAD SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x36569E77 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x16A9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x16BD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x16E1 SWAP2 SWAP1 PUSH2 0x913B JUMP JUMPDEST DUP5 MLOAD SWAP1 SWAP2 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x16FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1726 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP4 POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xF4B9FA75 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1762 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1776 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x179A SWAP2 SWAP1 PUSH2 0x913B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO DUP1 ISZERO PUSH2 0x183D JUMPI POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xF4B9FA75 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x17EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1803 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1827 SWAP2 SWAP1 PUSH2 0x913B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x184A JUMPI POP POP POP PUSH2 0x18A6 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xD77 JUMPI PUSH1 0x0 PUSH2 0x1878 DUP11 DUP10 DUP12 DUP11 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x1869 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP10 DUP10 PUSH2 0x691F JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x1885 JUMPI POP PUSH2 0xD77 JUMP JUMPDEST DUP1 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1892 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP PUSH1 0x1 ADD PUSH2 0x184D JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 DUP2 ADD SWAP1 SWAP3 MSTORE PUSH2 0x1914 SWAP1 DUP1 PUSH2 0x18CD DUP7 DUP10 PUSH1 0x80 DUP5 ADD PUSH2 0xA813 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x18F4 SWAP3 SWAP2 SWAP1 PUSH2 0xA813 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x6BE0 DUP2 MSTORE POP DUP4 PUSH2 0x6D13 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 PUSH2 0x192C DUP6 DUP8 PUSH2 0x66BD JUMP JUMPDEST DUP4 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x1944 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x196E JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP DUP9 MLOAD PUSH1 0x40 MLOAD PUSH4 0x939D863 PUSH1 0xE1 SHL DUP2 MSTORE SWAP2 SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x1273B0C6 SWAP1 PUSH2 0x19A1 SWAP1 DUP11 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0xA20E JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x19B9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x19CD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x19F1 SWAP2 SWAP1 PUSH2 0x913B JUMP JUMPDEST SWAP3 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND ISZERO PUSH2 0x1A0F JUMPI POP PUSH1 0x1 SWAP4 POP DUP7 PUSH2 0x1AAE JUMP JUMPDEST DUP9 MLOAD PUSH1 0x40 MLOAD PUSH4 0x939D863 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x1273B0C6 SWAP1 PUSH2 0x1A40 SWAP1 DUP11 SWAP1 DUP13 SWAP1 PUSH1 0x4 ADD PUSH2 0xA20E JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1A58 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1A6C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1A90 SWAP2 SWAP1 PUSH2 0x913B JUMP JUMPDEST SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x1AA7 JUMPI POP POP PUSH2 0x1236 JUMP JUMPDEST POP PUSH1 0x0 SWAP4 POP DUP6 JUMPDEST DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDD58B41C PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1AE7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1AFB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1B1F SWAP2 SWAP1 PUSH2 0x994D JUMP JUMPDEST PUSH2 0x1B2A JUMPI POP POP PUSH2 0x1236 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x1BED JUMPI PUSH1 0x0 PUSH2 0x1BA7 DUP11 DUP8 DUP6 DUP15 PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1B55 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA228 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP11 DUP9 DUP7 DUP16 PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1B7F SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA228 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP11 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x1B9A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x6F25 JUMP JUMPDEST SWAP1 POP DUP1 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1BB6 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1BCE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x1BE4 JUMPI POP PUSH2 0x1BED JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x1B2D JUMP JUMPDEST POP POP POP SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x1C15 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1C3F JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH2 0x1C56 JUMPI POP PUSH2 0x1914 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1D78 JUMPI PUSH1 0x0 PUSH1 0x60 DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH3 0x61A80 PUSH4 0x6E79E133 PUSH1 0xE0 SHL DUP12 DUP12 DUP12 DUP12 DUP10 DUP2 MLOAD DUP2 LT PUSH2 0x1C8A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1CA5 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA287 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x1CE3 SWAP2 SWAP1 PUSH2 0xA1C5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1D1F JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1D24 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x1D48 JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x1D45 SWAP2 SWAP1 PUSH2 0x996D JUMP JUMPDEST SWAP1 POP JUMPDEST DUP1 PUSH2 0x1D55 JUMPI POP POP POP PUSH2 0x1D78 JUMP JUMPDEST DUP1 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x1D62 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x1C59 JUMP JUMPDEST POP POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1D8F DUP4 DUP6 PUSH2 0x66BD JUMP JUMPDEST DUP2 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x1DA7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1DD1 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1EED JUMPI DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x72EA9076 PUSH3 0xC3500 DUP9 DUP9 DUP9 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x1E00 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1E26 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA309 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1E3E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x1E6F JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x1E6C SWAP2 DUP2 ADD SWAP1 PUSH2 0x996D JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1EA9 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x1E9D JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1EA2 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP PUSH2 0x1EED JUMP JUMPDEST DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1EB6 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1ECE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x1EE4 JUMPI POP PUSH2 0x1EED JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x1DD7 JUMP JUMPDEST POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x1F12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1F3C JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x2072 JUMPI DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD06CA61F PUSH3 0x249F0 DUP7 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x1F69 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F8F SWAP3 SWAP2 SWAP1 PUSH2 0xAAC5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1FA7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x1FDD JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x1FDA SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x991B JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x2017 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x200B JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2010 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP PUSH2 0x2072 JUMP JUMPDEST DUP1 PUSH1 0x1 DUP8 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x2027 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x203B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2053 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x2069 JUMPI POP PUSH2 0x2072 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x1F42 JUMP JUMPDEST POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH4 0x31268657 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x31268657 SWAP1 PUSH2 0x20AD SWAP1 DUP6 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0xA4A6 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x20C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x20DB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x20EF DUP4 DUP6 PUSH2 0x66BD JUMP JUMPDEST DUP5 PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO DUP1 PUSH2 0x2121 JUMPI POP DUP5 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND SWAP2 AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x1095 JUMPI DUP2 MLOAD PUSH1 0x60 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x2140 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x216A JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP3 POP PUSH2 0x18A6 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x2190 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x21BA JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1EED JUMPI PUSH1 0x0 PUSH1 0x60 DUP9 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH3 0x1E8480 DUP11 PUSH1 0x20 ADD MLOAD DUP11 DUP11 DUP11 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x21F1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x220B SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA7F5 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x2249 SWAP2 SWAP1 PUSH2 0xA1C5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2285 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x228A JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x22AE JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x22AB SWAP2 SWAP1 PUSH2 0x996D JUMP JUMPDEST SWAP1 POP JUMPDEST DUP1 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x22BB JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x22D3 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x22EB JUMPI POP POP POP PUSH2 0x1EED JUMP JUMPDEST POP POP POP PUSH1 0x1 ADD PUSH2 0x21C0 JUMP JUMPDEST NUMBER SWAP1 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP2 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x2317 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2341 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH2 0x234E DUP7 DUP7 PUSH2 0x619B JUMP JUMPDEST SWAP3 POP DUP3 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x2360 JUMPI POP PUSH2 0xF22 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xF1F JUMPI DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x9E269B68 PUSH3 0x249F0 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x238A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP11 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x23B2 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xAADE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x23CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x2400 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x23FD SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x991B JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x242E JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0xEB8 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xEBD JUMP JUMPDEST DUP1 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x243B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x244F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2467 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x247D JUMPI POP PUSH2 0xF1F JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x2363 JUMP JUMPDEST PUSH1 0x20 DUP5 DUP2 ADD MLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP4 DUP5 SWAP3 SWAP1 DUP3 DUP2 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP6 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x24BD JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x60 PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x24F5 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP8 PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x25E6 JUMPI PUSH1 0x40 MLOAD PUSH4 0x81EFCBDD PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x81EFCBDD SWAP1 PUSH3 0x7A120 SWAP1 PUSH2 0x254E SWAP1 DUP10 SWAP1 PUSH1 0x1 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0xA3A8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2566 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x259C JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x2599 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x9985 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x25D6 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x25CA JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x25CF JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP PUSH2 0x25E1 JUMP JUMPDEST SWAP4 POP PUSH2 0x18A6 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0xD79 JUMP JUMPDEST DUP8 PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x263C JUMPI PUSH1 0x40 MLOAD PUSH4 0x61E597F9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x61E597F9 SWAP1 PUSH3 0x7A120 SWAP1 PUSH2 0x254E SWAP1 DUP11 SWAP1 PUSH1 0x1 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0xA3A8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x2B9A6CD PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x5734D9A SWAP1 PUSH3 0x7A120 SWAP1 PUSH2 0x267C SWAP1 DUP11 SWAP1 PUSH1 0x1 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP14 SWAP1 DUP5 SWAP1 DUP5 SWAP1 DUP5 SWAP1 PUSH1 0x4 ADD PUSH2 0xA3EB JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2694 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x26CA JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x26C7 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x9985 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x25D6 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x26F8 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x26FD JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP PUSH2 0xD79 JUMP JUMPDEST PUSH1 0x0 GAS SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH1 0x60 DUP1 PUSH2 0x278E DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xC45A0155 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x274E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2762 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2786 SWAP2 SWAP1 PUSH2 0x913B JUMP JUMPDEST DUP8 PUSH1 0x0 PUSH2 0x705E JUMP JUMPDEST SWAP1 POP DUP5 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x27A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x27D1 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP DUP5 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x27EB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x281F JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x280A JUMPI SWAP1 POP JUMPDEST POP SWAP4 POP DUP5 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x2839 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2863 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP3 POP PUSH1 0x0 JUMPDEST DUP6 MLOAD DUP2 LT ISZERO PUSH2 0x29F6 JUMPI PUSH1 0x0 DUP1 JUMPDEST DUP4 MLOAD DUP2 LT ISZERO PUSH2 0x2988 JUMPI PUSH1 0x60 PUSH2 0x289E DUP11 DUP7 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2891 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x74FE JUMP JUMPDEST SWAP1 POP DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xCDCA1753 PUSH3 0xAAE60 DUP4 DUP13 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x28C0 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x28E5 SWAP3 SWAP2 SWAP1 PUSH2 0xA6AE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x28FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP8 CALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x2935 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x2932 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x9DFE JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x293E JUMPI PUSH2 0x297F JUMP JUMPDEST DUP4 DUP8 GT PUSH2 0x297A JUMPI DUP4 SWAP7 POP DUP5 DUP13 DUP10 DUP2 MLOAD DUP2 LT PUSH2 0x2955 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP1 DUP12 DUP10 DUP2 MLOAD DUP2 LT PUSH2 0x296D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP JUMPDEST POP POP POP POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x2876 JUMP JUMPDEST POP DUP1 PUSH2 0x29D5 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x29AA JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH1 0x0 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x29C3 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP PUSH2 0x29F6 JUMP JUMPDEST DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x29E2 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP PUSH1 0x1 ADD PUSH2 0x2869 JUMP JUMPDEST POP POP SWAP4 POP SWAP4 POP SWAP4 SWAP1 POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP6 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x2A1E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2A48 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0xBCDED89 PUSH1 0xE2 SHL DUP2 MSTORE SWAP1 SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x2F37B624 SWAP1 PUSH2 0x2A78 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0xA1E1 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2A90 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2AA4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2AC8 SWAP2 SWAP1 PUSH2 0x994D JUMP JUMPDEST ISZERO DUP1 PUSH2 0x2B4D JUMPI POP PUSH1 0x40 MLOAD PUSH4 0xBCDED89 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x2F37B624 SWAP1 PUSH2 0x2AFB SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0xA1E1 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2B13 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2B27 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2B4B SWAP2 SWAP1 PUSH2 0x994D JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x2B59 JUMPI POP POP PUSH2 0x18A6 JUMP JUMPDEST PUSH2 0x2B61 PUSH2 0x88EE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xF8B2CB4F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0xF8B2CB4F SWAP1 PUSH2 0x2B8D SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0xA1E1 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2BA5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2BB9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2BDD SWAP2 SWAP1 PUSH2 0x996D JUMP JUMPDEST DUP2 MSTORE PUSH1 0x40 MLOAD PUSH4 0xF8B2CB4F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0xF8B2CB4F SWAP1 PUSH2 0x2C0B SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0xA1E1 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2C23 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2C37 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2C5B SWAP2 SWAP1 PUSH2 0x996D JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 MLOAD PUSH4 0x4A46C673 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x948D8CE6 SWAP1 PUSH2 0x2C8C SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0xA1E1 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2CA4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2CB8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2CDC SWAP2 SWAP1 PUSH2 0x996D JUMP JUMPDEST PUSH1 0x40 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE MLOAD PUSH4 0x4A46C673 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x948D8CE6 SWAP1 PUSH2 0x2D0F SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0xA1E1 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2D27 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2D3B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2D5F SWAP2 SWAP1 PUSH2 0x996D JUMP JUMPDEST DUP2 PUSH1 0x60 ADD DUP2 DUP2 MSTORE POP POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD4CADF68 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2DA1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2DB5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2DD9 SWAP2 SWAP1 PUSH2 0x996D JUMP JUMPDEST PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0xD77 JUMPI PUSH2 0x2E0C DUP3 PUSH1 0x20 ADD MLOAD PUSH1 0x3 PUSH8 0xDE0B6B3A7640000 DUP2 PUSH2 0x2E03 JUMPI INVALID JUMPDEST DIV PUSH1 0x1 ADD PUSH2 0x7659 JUMP JUMPDEST DUP7 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2E18 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD GT ISZERO PUSH2 0x2E2B JUMPI PUSH2 0xD77 JUMP JUMPDEST DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xF8D6AED4 PUSH3 0x493E0 DUP5 PUSH1 0x0 ADD MLOAD DUP6 PUSH1 0x40 ADD MLOAD DUP7 PUSH1 0x20 ADD MLOAD DUP8 PUSH1 0x60 ADD MLOAD DUP13 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x2E5E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP10 PUSH1 0x80 ADD MLOAD PUSH1 0x40 MLOAD DUP9 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2E8C SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xAB09 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2EA4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x2ED5 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x2ED2 SWAP2 DUP2 ADD SWAP1 PUSH2 0x996D JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x2F0F JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x2F03 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2F08 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP PUSH2 0xD77 JUMP JUMPDEST DUP3 MLOAD PUSH2 0x2F27 SWAP1 PUSH1 0x2 PUSH8 0xDE0B6B3A7640000 JUMPDEST DIV PUSH2 0x7659 JUMP JUMPDEST DUP2 GT ISZERO PUSH2 0x2F34 JUMPI POP PUSH2 0xD77 JUMP JUMPDEST DUP1 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x2F41 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2F59 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x2F6F JUMPI POP PUSH2 0xD77 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x2DE1 JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH1 0x60 DUP1 PUSH2 0x2FBA DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xC45A0155 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x274E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP PUSH1 0x60 PUSH2 0x2FC7 DUP8 PUSH2 0x76B6 JUMP JUMPDEST SWAP1 POP DUP6 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x2FE0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x300A JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP3 POP DUP6 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x3024 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x3058 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x3043 JUMPI SWAP1 POP JUMPDEST POP SWAP5 POP DUP6 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x3072 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x309C JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP4 POP PUSH1 0x0 JUMPDEST DUP7 MLOAD DUP2 LT ISZERO PUSH2 0x3251 JUMPI PUSH1 0x0 DUP1 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x31E3 JUMPI PUSH1 0x60 PUSH2 0x30DF DUP6 PUSH2 0x30DA DUP9 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x30CD JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x774E JUMP JUMPDEST PUSH2 0x74FE JUMP JUMPDEST SWAP1 POP DUP12 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x2F80BB1D PUSH3 0xAAE60 DUP4 DUP14 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x3101 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3126 SWAP3 SWAP2 SWAP1 PUSH2 0xA6AE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3140 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP8 CALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x3176 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x3173 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x9DFE JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x317F JUMPI PUSH2 0x31DA JUMP JUMPDEST DUP7 ISZERO DUP1 PUSH2 0x318C JUMPI POP DUP4 DUP8 LT ISZERO JUMPDEST ISZERO PUSH2 0x31D5 JUMPI DUP4 SWAP7 POP PUSH2 0x31A4 DUP16 DUP12 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x2891 JUMPI INVALID JUMPDEST DUP14 DUP10 DUP2 MLOAD DUP2 LT PUSH2 0x31B0 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP1 DUP13 DUP10 DUP2 MLOAD DUP2 LT PUSH2 0x31C8 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP JUMPDEST POP POP POP POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x30AF JUMP JUMPDEST POP DUP1 PUSH2 0x3230 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP DUP8 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x3205 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH1 0x0 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x321E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP PUSH2 0x3251 JUMP JUMPDEST DUP1 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x323D JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP PUSH1 0x1 ADD PUSH2 0x30A2 JUMP JUMPDEST POP POP POP SWAP4 POP SWAP4 POP SWAP4 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 DUP2 ADD SWAP1 SWAP3 MSTORE PUSH2 0x1914 SWAP1 DUP1 PUSH2 0x327C DUP7 DUP10 PUSH1 0x80 DUP5 ADD PUSH2 0xA20E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x32A3 SWAP3 SWAP2 SWAP1 PUSH2 0xA20E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x77E6 DUP2 MSTORE POP DUP4 PUSH2 0x6D13 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x32D0 DUP5 DUP5 DUP5 PUSH2 0xF2A JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x1095 JUMPI DUP2 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x32EA JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ PUSH2 0x3370 JUMPI PUSH2 0x3357 DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3308 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x331C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x333D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND PUSH2 0x78FA JUMP JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3363 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP JUMPDEST PUSH1 0x1 ADD PUSH2 0x32D5 JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x3390 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x33CA JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x33B7 PUSH2 0x891D JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x33AF JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP1 DUP4 EQ PUSH2 0x34D2 JUMPI PUSH1 0x1 DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x33E5 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD SWAP2 ISZERO ISZERO SWAP2 ADD MSTORE DUP4 DUP4 DUP3 DUP2 DUP2 LT PUSH2 0x3403 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x3415 SWAP2 SWAP1 PUSH2 0xAB31 JUMP JUMPDEST ISZERO ISZERO SWAP1 POP PUSH2 0x3422 JUMPI PUSH2 0x34CA JUMP JUMPDEST ADDRESS DUP5 DUP5 DUP4 DUP2 DUP2 LT PUSH2 0x342F JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x3441 SWAP2 SWAP1 PUSH2 0xAB31 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x344F SWAP3 SWAP2 SWAP1 PUSH2 0xA1B5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x348C JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x3491 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x349E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x34B5 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 ISZERO ISZERO SWAP1 MSTORE JUMPDEST PUSH1 0x1 ADD PUSH2 0x33D0 JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x34F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x351C JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 EQ PUSH2 0x35C5 JUMPI PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3560 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x35A0 JUMPI PUSH2 0x359B DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3585 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x791E JUMP JUMPDEST PUSH2 0x35A3 JUMP JUMPDEST PUSH1 0x12 JUMPDEST PUSH1 0xFF AND DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x35B2 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x3522 JUMP JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP1 SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x35E6 DUP4 DUP6 PUSH2 0x66BD JUMP JUMPDEST PUSH1 0x0 DUP6 PUSH1 0x0 ADD MLOAD SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x36569E77 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x362A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x363E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3662 SWAP2 SWAP1 PUSH2 0x913B JUMP JUMPDEST DUP5 MLOAD SWAP1 SWAP2 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x367D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x36A7 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP4 POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xF4B9FA75 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x36E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x36F7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x371B SWAP2 SWAP1 PUSH2 0x913B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO DUP1 ISZERO PUSH2 0x37BE JUMPI POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xF4B9FA75 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3770 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3784 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x37A8 SWAP2 SWAP1 PUSH2 0x913B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x37CB JUMPI POP POP POP PUSH2 0x18A6 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xD77 JUMPI PUSH1 0x0 PUSH2 0x37F9 DUP11 DUP10 DUP12 DUP11 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x37EA JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP10 DUP10 PUSH2 0x79CA JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x3806 JUMPI POP PUSH2 0xD77 JUMP JUMPDEST DUP1 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x3813 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP PUSH1 0x1 ADD PUSH2 0x37CE JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP6 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xBBD7F255 DUP6 PUSH1 0xF SIGNEXTEND PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x385E SWAP2 SWAP1 PUSH2 0xA679 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3876 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x388A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x38AE SWAP2 SWAP1 PUSH2 0x996D JUMP JUMPDEST DUP7 MLOAD PUSH1 0x40 MLOAD PUSH4 0x1E010439 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x1E010439 SWAP1 PUSH2 0x38E1 SWAP1 PUSH1 0xF DUP10 SWAP1 SIGNEXTEND SWAP1 PUSH1 0x4 ADD PUSH2 0xA679 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x38F9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x390D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3931 SWAP2 SWAP1 PUSH2 0x996D JUMP JUMPDEST SUB SWAP1 POP PUSH1 0x0 DUP7 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xC5829514 DUP7 PUSH1 0xF SIGNEXTEND PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3969 SWAP2 SWAP1 PUSH2 0xA679 JUMP JUMPDEST PUSH1 0x80 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3981 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3995 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x39B9 SWAP2 SWAP1 PUSH2 0x9EF3 JUMP JUMPDEST SWAP4 POP POP POP POP DUP1 PUSH1 0x12 SUB PUSH1 0xA EXP DUP3 DUP2 PUSH2 0x39CD JUMPI INVALID JUMPDEST DUP6 MLOAD SWAP2 SWAP1 DIV SWAP3 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x39EA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x3A14 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP4 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xD77 JUMPI PUSH1 0x0 PUSH1 0x60 DUP11 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH3 0x927C0 DUP13 PUSH1 0x20 ADD MLOAD DUP13 DUP13 DUP13 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x3A4B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x3A65 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA7F5 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x3AA3 SWAP2 SWAP1 PUSH2 0xA1C5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x3ADF JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x3AE4 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x3B08 JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x3B05 SWAP2 SWAP1 PUSH2 0x996D JUMP JUMPDEST SWAP1 POP JUMPDEST DUP7 DUP2 LT PUSH2 0x3B42 JUMPI DUP4 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x3B39 JUMPI DUP8 DUP10 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3B26 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x3B11 JUMP JUMPDEST POP POP POP POP PUSH2 0xD77 JUMP JUMPDEST DUP1 DUP9 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x3B4F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x3B67 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x3B7F JUMPI POP POP POP PUSH2 0xD77 JUMP JUMPDEST POP POP POP PUSH1 0x1 ADD PUSH2 0x3A1A JUMP JUMPDEST PUSH2 0x3B92 PUSH2 0x8935 JUMP JUMPDEST PUSH2 0x3B9A PUSH2 0x8935 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 JUMPDEST DUP8 MLOAD DUP2 EQ PUSH2 0x3C9F JUMPI PUSH2 0x3BE6 PUSH1 0x20 DUP10 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x3BB8 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD SUB DUP8 DUP11 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x3BCF JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x7C5C SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP11 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x3C00 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x3C15 SWAP2 SWAP1 PUSH2 0xA1C5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x3C52 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x3C57 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0x3C95 JUMPI PUSH1 0x0 PUSH2 0x3C7B PUSH1 0x20 DUP4 MLOAD SUB DUP4 PUSH2 0x7C6C SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP5 DUP2 GT ISZERO PUSH2 0x3C93 JUMPI DUP4 DUP9 MSTORE PUSH1 0x20 DUP9 ADD DUP3 SWAP1 MSTORE SWAP4 POP DUP4 JUMPDEST POP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x3B9F JUMP JUMPDEST POP DUP1 PUSH2 0x3CAB JUMPI POP PUSH2 0x3D97 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP7 MLOAD DUP2 EQ PUSH2 0x29F6 JUMPI PUSH2 0x3CDE PUSH1 0x20 DUP9 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x3CC7 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD SUB DUP4 DUP10 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x3BCF JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP10 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x3CF8 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x3D0D SWAP2 SWAP1 PUSH2 0xA1C5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x3D4A JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x3D4F JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0x3D8D JUMPI PUSH1 0x0 PUSH2 0x3D73 PUSH1 0x20 DUP4 MLOAD SUB DUP4 PUSH2 0x7C6C SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP6 DUP2 GT ISZERO PUSH2 0x3D8B JUMPI DUP4 DUP8 MSTORE PUSH1 0x20 DUP8 ADD DUP3 SWAP1 MSTORE SWAP5 POP DUP5 JUMPDEST POP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x3CAE JUMP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 DUP5 ADD MLOAD PUSH1 0x60 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH2 0x3E22 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH2 0x3E1B SWAP1 DUP1 PUSH2 0x3DD4 DUP7 DUP10 PUSH1 0x80 DUP5 ADD PUSH2 0xA813 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x3DFB SWAP3 SWAP2 SWAP1 PUSH2 0xA813 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x7C78 DUP2 MSTORE POP DUP4 PUSH2 0x6D13 JUMP JUMPDEST SWAP1 POP PUSH2 0x18A6 JUMP JUMPDEST DUP2 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x3E3A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x3E64 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1EED JUMPI PUSH1 0x0 PUSH1 0x60 DUP9 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH3 0x1E8480 DUP11 PUSH1 0x40 ADD MLOAD DUP11 DUP11 DUP11 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x3E9B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x3EB5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA7F5 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x3EF3 SWAP2 SWAP1 PUSH2 0xA1C5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x3F2F JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x3F34 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x3F58 JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x3F55 SWAP2 SWAP1 PUSH2 0x996D JUMP JUMPDEST SWAP1 POP JUMPDEST DUP1 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x3F65 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x3F7D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x3F95 JUMPI POP POP POP PUSH2 0x1EED JUMP JUMPDEST POP POP POP PUSH1 0x1 ADD PUSH2 0x3E6A JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP6 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x3FBD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x3FE7 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0xBCDED89 PUSH1 0xE2 SHL DUP2 MSTORE SWAP1 SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x2F37B624 SWAP1 PUSH2 0x4017 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0xA1E1 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x402F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4043 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4067 SWAP2 SWAP1 PUSH2 0x994D JUMP JUMPDEST ISZERO DUP1 PUSH2 0x40EC JUMPI POP PUSH1 0x40 MLOAD PUSH4 0xBCDED89 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x2F37B624 SWAP1 PUSH2 0x409A SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0xA1E1 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x40B2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x40C6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x40EA SWAP2 SWAP1 PUSH2 0x994D JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x40F8 JUMPI POP POP PUSH2 0x18A6 JUMP JUMPDEST PUSH2 0x4100 PUSH2 0x88EE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xF8B2CB4F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0xF8B2CB4F SWAP1 PUSH2 0x412C SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0xA1E1 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4144 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4158 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x417C SWAP2 SWAP1 PUSH2 0x996D JUMP JUMPDEST DUP2 MSTORE PUSH1 0x40 MLOAD PUSH4 0xF8B2CB4F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0xF8B2CB4F SWAP1 PUSH2 0x41AA SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0xA1E1 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x41C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x41D6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x41FA SWAP2 SWAP1 PUSH2 0x996D JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 MLOAD PUSH4 0x4A46C673 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x948D8CE6 SWAP1 PUSH2 0x422B SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0xA1E1 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4243 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4257 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x427B SWAP2 SWAP1 PUSH2 0x996D JUMP JUMPDEST PUSH1 0x40 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE MLOAD PUSH4 0x4A46C673 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x948D8CE6 SWAP1 PUSH2 0x42AE SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0xA1E1 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x42C6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x42DA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x42FE SWAP2 SWAP1 PUSH2 0x996D JUMP JUMPDEST DUP2 PUSH1 0x60 ADD DUP2 DUP2 MSTORE POP POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD4CADF68 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4340 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4354 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4378 SWAP2 SWAP1 PUSH2 0x996D JUMP JUMPDEST PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0xD77 JUMPI DUP2 MLOAD PUSH2 0x439E SWAP1 PUSH1 0x2 PUSH8 0xDE0B6B3A7640000 PUSH2 0x2F21 JUMP JUMPDEST DUP7 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x43AA JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD GT ISZERO PUSH2 0x43BD JUMPI PUSH2 0xD77 JUMP JUMPDEST DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xBA9530A6 PUSH3 0x493E0 DUP5 PUSH1 0x0 ADD MLOAD DUP6 PUSH1 0x40 ADD MLOAD DUP7 PUSH1 0x20 ADD MLOAD DUP8 PUSH1 0x60 ADD MLOAD DUP13 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x43F0 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP10 PUSH1 0x80 ADD MLOAD PUSH1 0x40 MLOAD DUP9 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x441E SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xAB09 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4436 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x4467 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x4464 SWAP2 DUP2 ADD SWAP1 PUSH2 0x996D JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x4495 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x2F03 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2F08 JUMP JUMPDEST DUP1 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x44A2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x44BA JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x44D0 JUMPI POP PUSH2 0xD77 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x4380 JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND DUP5 PUSH2 0x160 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x44FF SWAP2 SWAP1 PUSH2 0xA679 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0x0 SHR DUP2 PUSH2 0x451F JUMPI INVALID JUMPDEST MOD SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP1 PUSH2 0x4539 DUP6 DUP8 PUSH2 0x66BD JUMP JUMPDEST PUSH2 0x4544 DUP8 DUP8 DUP8 PUSH2 0x7CCC JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x4550 JUMPI PUSH2 0x1236 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x276FDAD9 PUSH1 0xE1 SHL DUP2 MSTORE ADDRESS SWAP1 PUSH4 0x4EDFB5B2 SWAP1 PUSH2 0x4579 SWAP1 DUP11 SWAP1 DUP8 SWAP1 DUP12 SWAP1 DUP12 SWAP1 PUSH1 0x4 ADD PUSH2 0xA997 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4591 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x45A5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x45CD SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x9985 JUMP JUMPDEST DUP8 PUSH1 0x80 ADD DUP2 SWAP1 MSTORE POP DUP7 PUSH1 0x80 ADD MLOAD SWAP2 POP PUSH2 0x4644 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 DUP8 DUP11 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x45FD SWAP3 SWAP2 SWAP1 PUSH2 0xA482 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP9 DUP11 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x4624 SWAP3 SWAP2 SWAP1 PUSH2 0xA482 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x7E33 DUP2 MSTORE POP DUP6 PUSH2 0x6D13 JUMP JUMPDEST SWAP1 POP SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x901754D7 DUP7 DUP7 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4681 SWAP3 SWAP2 SWAP1 PUSH2 0xA20E JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4699 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x46AD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x46D1 SWAP2 SWAP1 PUSH2 0x913B JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x46EB JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x18A6 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND ISZERO PUSH2 0x477D JUMPI PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH2 0x4728 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0xA1E1 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4740 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4754 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4778 SWAP2 SWAP1 PUSH2 0x996D JUMP JUMPDEST PUSH2 0x4789 JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND BALANCE JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x479E JUMPI PUSH1 0x0 SWAP3 POP POP POP PUSH2 0x18A6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x3C2803F PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x1E1401F8 SWAP1 PUSH3 0x249F0 SWAP1 PUSH2 0x47D3 SWAP1 DUP11 SWAP1 DUP11 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0xA309 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x47EB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x481C JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x4819 SWAP2 DUP2 ADD SWAP1 PUSH2 0x996D JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x485C JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x484A JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x484F JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 SWAP4 POP POP POP POP PUSH2 0x18A6 JUMP JUMPDEST SWAP3 POP PUSH2 0x18A6 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x4872 DUP4 DUP6 PUSH2 0x66BD JUMP JUMPDEST PUSH1 0x20 DUP6 ADD MLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x2 DUP1 DUP3 MSTORE PUSH1 0x60 DUP3 DUP2 ADD SWAP1 SWAP4 MSTORE DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP6 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x48A8 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP DUP5 DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x48D6 JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE DUP4 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x4906 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x4930 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP4 POP PUSH2 0x493B PUSH2 0x88C7 JUMP JUMPDEST PUSH2 0x4943 PUSH2 0x66FC JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x1473 JUMPI PUSH1 0x60 PUSH2 0x4962 DUP12 DUP10 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x1355 JUMPI INVALID JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x7C268337 PUSH1 0xE1 SHL DUP2 MSTORE SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND SWAP1 PUSH4 0xF84D066E SWAP1 PUSH2 0x4998 SWAP1 PUSH1 0x1 SWAP1 DUP6 SWAP1 DUP11 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0xA73C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x49B2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x49E7 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x49E4 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x97C9 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x4A15 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x1415 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x141A JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x4A24 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 DUP2 SGT PUSH2 0x4A3E JUMPI POP POP POP PUSH2 0x1473 JUMP JUMPDEST DUP1 DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x4A4B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP POP POP PUSH1 0x1 ADD PUSH2 0x4948 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x4A8C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x4AB6 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1EED JUMPI DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x343FBCDD PUSH3 0x61A80 DUP9 DUP9 DUP9 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x4AE5 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4B0B SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA309 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4B23 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x4B54 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x4B51 SWAP2 DUP2 ADD SWAP1 PUSH2 0x996D JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x4B82 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x1E9D JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1EA2 JUMP JUMPDEST DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x4B8F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x4BA7 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x4BBD JUMPI POP PUSH2 0x1EED JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x4ABC JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 PUSH2 0x4BD5 DUP6 DUP8 PUSH2 0x66BD JUMP JUMPDEST DUP4 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x4BED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x4C17 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH2 0x4C26 DUP10 DUP10 DUP10 DUP10 PUSH2 0x7F1A JUMP JUMPDEST SWAP5 POP SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x4C3E JUMPI POP PUSH2 0x4CF8 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x4CF5 JUMPI PUSH1 0x0 PUSH2 0x4CAF DUP10 DUP7 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x4C63 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA2B1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP10 DUP8 DUP10 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x4C87 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA2B1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x4CA2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x806F JUMP JUMPDEST SWAP1 POP DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x4CBE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x4CD6 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x4CEC JUMPI POP PUSH2 0x4CF5 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x4C41 JUMP JUMPDEST POP POP JUMPDEST SWAP6 POP SWAP6 POP SWAP6 SWAP3 POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x4D1E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x4D48 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x182DF0F5 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4D86 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4D9A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4DBE SWAP2 SWAP1 PUSH2 0x996D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x313CE567 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4DFB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4E0F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4E33 SWAP2 SWAP1 PUSH2 0x9F67 JUMP JUMPDEST PUSH1 0xFF AND SWAP1 POP DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x4EA5 JUMPI PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xD04 JUMPI DUP3 DUP3 PUSH1 0xA EXP PUSH5 0x2540BE400 DUP9 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x4E74 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MUL MUL DUP2 PUSH2 0x4E85 JUMPI INVALID JUMPDEST DIV DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x4E92 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x4E55 JUMP JUMPDEST DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0xD79 JUMPI PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xD77 JUMPI DUP2 PUSH1 0xA EXP PUSH5 0x2540BE400 MUL DUP4 DUP8 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x4EE2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MUL DUP2 PUSH2 0x4EF2 JUMPI INVALID JUMPDEST DIV DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x4EFF JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x4EC2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH2 0x4F20 DUP5 DUP7 PUSH2 0x66BD JUMP JUMPDEST DUP3 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x4F38 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x4F62 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x4FD7 JUMPI PUSH1 0x0 PUSH2 0x4F91 DUP10 DUP10 DUP10 DUP10 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x4F84 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x4650 JUMP JUMPDEST SWAP1 POP DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x4FA0 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x4FB8 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x4FCE JUMPI POP PUSH2 0x4FD7 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x4F68 JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0x901754D7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND SWAP1 PUSH4 0x901754D7 SWAP1 PUSH2 0x5006 SWAP1 DUP10 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0xA20E JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x501E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5032 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5056 SWAP2 SWAP1 PUSH2 0x913B JUMP JUMPDEST SWAP3 POP POP SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 DUP2 ADD SWAP1 SWAP3 MSTORE PUSH2 0x1914 SWAP1 DUP1 PUSH2 0x5081 DUP7 DUP10 PUSH1 0x80 DUP5 ADD PUSH2 0xA20E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x50A8 SWAP3 SWAP2 SWAP1 PUSH2 0xA20E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x8161 DUP2 MSTORE POP DUP4 PUSH2 0x6D13 JUMP JUMPDEST PUSH1 0x60 DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x50E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x510B JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP4 MLOAD DUP2 EQ PUSH2 0x34D2 JUMPI PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x514F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x5199 JUMPI PUSH2 0x5194 DUP4 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x5175 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x81A8 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x51A5 JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND BALANCE JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x51B1 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x5111 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 DUP2 ADD SWAP1 SWAP3 MSTORE PUSH2 0x1914 SWAP1 DUP1 PUSH2 0x51E3 DUP7 DUP10 PUSH1 0x80 DUP5 ADD PUSH2 0xA20E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x520A SWAP3 SWAP2 SWAP1 PUSH2 0xA20E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x8272 DUP2 MSTORE POP DUP4 PUSH2 0x6D13 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x5236 DUP4 DUP6 PUSH2 0x66BD JUMP JUMPDEST DUP2 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x524E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x5278 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND ISZERO PUSH2 0x529B JUMPI PUSH2 0x5296 DUP8 DUP8 PUSH2 0x67BD JUMP JUMPDEST PUSH2 0x529E JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND ISZERO PUSH2 0x52C0 JUMPI PUSH2 0x52BB DUP9 DUP8 PUSH2 0x67BD JUMP JUMPDEST PUSH2 0x52C3 JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xD77 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH2 0x5319 JUMPI PUSH2 0x52F8 DUP5 PUSH4 0x95B68FE7 PUSH1 0xE0 SHL DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x154E JUMPI INVALID JUMPDEST DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x5304 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP4 POP DUP3 DUP2 MSTORE POP POP POP PUSH2 0x53B3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND PUSH2 0x533F JUMPI PUSH2 0x52F8 DUP4 PUSH4 0xCD7724C3 PUSH1 0xE0 SHL DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x154E JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH2 0x5359 DUP6 PUSH4 0x95B68FE7 PUSH1 0xE0 SHL DUP11 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x154E JUMPI INVALID JUMPDEST SWAP3 POP SWAP1 POP DUP1 ISZERO PUSH2 0x5396 JUMPI PUSH2 0x5375 DUP5 PUSH4 0xCD7724C3 PUSH1 0xE0 SHL DUP4 PUSH2 0x683C JUMP JUMPDEST DUP9 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x5381 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP5 POP DUP3 DUP2 MSTORE POP POP POP PUSH2 0x53B1 JUMP JUMPDEST PUSH1 0x0 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x53A4 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP JUMPDEST POP JUMPDEST DUP1 ISZERO DUP1 PUSH2 0x53D3 JUMPI POP DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x53C7 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ JUMPDEST ISZERO PUSH2 0x53DE JUMPI POP PUSH2 0xD77 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x52C8 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x5402 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x542C JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x2072 JUMPI DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x1F00CA74 PUSH3 0x249F0 DUP7 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x5459 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x547F SWAP3 SWAP2 SWAP1 PUSH2 0xAAC5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5497 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x54CD JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x54CA SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x991B JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x54FB JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x200B JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2010 JUMP JUMPDEST DUP1 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x5508 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x551C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x5534 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x554A JUMPI POP PUSH2 0x2072 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x5432 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP1 PUSH2 0x5562 DUP6 DUP8 PUSH2 0x66BD JUMP JUMPDEST PUSH2 0x556D DUP8 DUP8 DUP8 PUSH2 0x7CCC JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x5579 JUMPI PUSH2 0x1236 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x276FDAD9 PUSH1 0xE1 SHL DUP2 MSTORE ADDRESS SWAP1 PUSH4 0x4EDFB5B2 SWAP1 PUSH2 0x55A2 SWAP1 DUP11 SWAP1 DUP8 SWAP1 DUP12 SWAP1 DUP12 SWAP1 PUSH1 0x4 ADD PUSH2 0xA997 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x55BA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x55CE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x55F6 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x9985 JUMP JUMPDEST PUSH1 0x80 DUP9 ADD DUP2 SWAP1 MSTORE DUP5 MLOAD SWAP1 SWAP3 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x5618 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x5642 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x572D JUMPI PUSH1 0x0 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xF1ED7FA4 DUP12 DUP12 DUP12 DUP12 DUP8 DUP2 MLOAD DUP2 LT PUSH2 0x5670 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5697 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA961 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x56AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x56C3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x56E7 SWAP2 SWAP1 PUSH2 0x996D JUMP JUMPDEST SWAP1 POP DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x56F6 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x570E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x5724 JUMPI POP PUSH2 0x572D JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x5648 JUMP JUMPDEST POP POP SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH20 0xE9DB8717BC5DFB20AAF538B4A5A02B7791FF430C DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 PUSH2 0x5760 DUP6 DUP8 PUSH2 0x66BD JUMP JUMPDEST PUSH2 0x576C DUP9 DUP9 DUP9 DUP9 PUSH2 0x7F1A JUMP JUMPDEST SWAP4 POP SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x5783 JUMPI PUSH2 0x4CF8 JUMP JUMPDEST DUP4 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x579B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x57C5 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD SWAP1 SWAP2 MSTORE SWAP1 SWAP3 POP PUSH2 0x5832 SWAP1 DUP1 PUSH2 0x57E9 DUP10 DUP8 DUP10 ISZERO PUSH1 0x80 DUP6 ADD PUSH2 0xA2B1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP10 DUP7 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x5812 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA2B1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x806F DUP2 MSTORE POP DUP7 PUSH2 0x6D13 JUMP JUMPDEST SWAP2 POP POP SWAP6 POP SWAP6 POP SWAP6 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 PUSH2 0x584F DUP6 DUP8 PUSH2 0x66BD JUMP JUMPDEST DUP4 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x5867 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x5891 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP DUP9 MLOAD PUSH1 0x40 MLOAD PUSH4 0x939D863 PUSH1 0xE1 SHL DUP2 MSTORE SWAP2 SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x1273B0C6 SWAP1 PUSH2 0x58C4 SWAP1 DUP11 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0xA20E JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x58DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x58F0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5914 SWAP2 SWAP1 PUSH2 0x913B JUMP JUMPDEST SWAP3 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND ISZERO PUSH2 0x5932 JUMPI POP PUSH1 0x1 SWAP4 POP DUP7 PUSH2 0x59D1 JUMP JUMPDEST DUP9 MLOAD PUSH1 0x40 MLOAD PUSH4 0x939D863 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x1273B0C6 SWAP1 PUSH2 0x5963 SWAP1 DUP11 SWAP1 DUP13 SWAP1 PUSH1 0x4 ADD PUSH2 0xA20E JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x597B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x598F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x59B3 SWAP2 SWAP1 PUSH2 0x913B JUMP JUMPDEST SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x59CA JUMPI POP POP PUSH2 0x1236 JUMP JUMPDEST POP PUSH1 0x0 SWAP4 POP DUP6 JUMPDEST DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDD58B41C PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5A0A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5A1E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5A42 SWAP2 SWAP1 PUSH2 0x994D JUMP JUMPDEST PUSH2 0x5A4D JUMPI POP POP PUSH2 0x1236 JUMP JUMPDEST PUSH2 0x5AC5 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 DUP10 DUP8 DUP6 DUP15 PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x5A76 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA228 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP11 DUP8 DUP6 DUP15 PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x5AA5 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA228 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x6F25 DUP2 MSTORE POP DUP8 PUSH2 0x6D13 JUMP JUMPDEST SWAP3 POP POP POP SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x5AEC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x5B16 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 EQ PUSH2 0x1095 JUMPI PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x5B5A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x5BA6 JUMPI PUSH2 0x5BA1 DUP5 DUP5 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x5B81 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x8327 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x5BA9 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x5BB5 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x5B1C JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x5BE3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x5C0D JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1EED JUMPI DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x838E6A22 PUSH3 0x493E0 DUP9 DUP9 DUP9 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x5C3C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5C62 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA309 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5C7A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x5CAB JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x5CA8 SWAP2 DUP2 ADD SWAP1 PUSH2 0x996D JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x5CD9 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x1E9D JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1EA2 JUMP JUMPDEST DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x5CE6 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x5C13 JUMP JUMPDEST PUSH1 0x0 DUP5 PUSH1 0x80 ADD MLOAD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x5D13 JUMPI POP PUSH1 0x0 PUSH2 0x18A6 JUMP JUMPDEST DUP5 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x418436BC PUSH3 0x7A120 DUP8 PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x5D4D JUMPI DUP7 PUSH2 0x5D63 JUMP JUMPDEST PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE JUMPDEST DUP9 PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x5D86 JUMPI DUP7 PUSH2 0x5D9C JUMP JUMPDEST PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE JUMPDEST DUP7 PUSH1 0x0 DUP12 PUSH1 0x80 ADD MLOAD PUSH1 0x40 MLOAD DUP8 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5DC4 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA32D JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5DDC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x5E0D JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x5E0A SWAP2 DUP2 ADD SWAP1 PUSH2 0x996D JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x5E4B JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x5E3B JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x5E40 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 SWAP2 POP POP PUSH2 0x18A6 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5E56 DUP6 PUSH2 0x83F3 JUMP JUMPDEST PUSH1 0xFF AND SWAP1 POP PUSH1 0x0 PUSH2 0x5E66 DUP8 PUSH2 0x83F3 JUMP JUMPDEST PUSH1 0xFF AND SWAP1 POP PUSH8 0xDE0B6B3A7640000 DUP2 PUSH1 0xA EXP DUP4 PUSH1 0xA EXP DUP8 DUP7 MUL MUL DUP2 PUSH2 0x5E87 JUMPI INVALID JUMPDEST DIV DUP2 PUSH2 0x5E8F JUMPI INVALID JUMPDEST DIV SWAP4 POP POP POP POP PUSH2 0x18A6 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH2 0x5EA8 DUP5 DUP7 PUSH2 0x66BD JUMP JUMPDEST DUP3 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x5EC0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x5EEA JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH2 0x5F55 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 DUP10 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x5F0E SWAP3 SWAP2 SWAP1 PUSH2 0xA20E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP10 DUP10 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x5F35 SWAP3 SWAP2 SWAP1 PUSH2 0xA20E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x83FE DUP2 MSTORE POP DUP6 PUSH2 0x6D13 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x901754D7 PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND SWAP1 PUSH4 0x901754D7 SWAP1 PUSH2 0x5006 SWAP1 DUP10 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0xA20E JUMP JUMPDEST PUSH2 0x5F8E PUSH2 0x8935 JUMP JUMPDEST PUSH2 0x5F96 PUSH2 0x8935 JUMP JUMPDEST PUSH1 0x0 NOT DUP1 PUSH1 0x0 JUMPDEST DUP7 MLOAD DUP2 EQ PUSH2 0x6092 JUMPI PUSH2 0x5FCD PUSH1 0x20 DUP9 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x5FB6 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD SUB DUP8 DUP10 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x3BCF JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP10 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x5FE7 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x5FFC SWAP2 SWAP1 PUSH2 0xA1C5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x6039 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x603E JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0x6088 JUMPI PUSH1 0x0 PUSH2 0x6062 PUSH1 0x20 DUP4 MLOAD SUB DUP4 PUSH2 0x7C6C SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 GT DUP1 ISZERO PUSH2 0x6073 JUMPI POP DUP5 DUP2 LT JUMPDEST ISZERO PUSH2 0x6086 JUMPI DUP4 DUP8 MSTORE PUSH1 0x20 DUP8 ADD DUP3 SWAP1 MSTORE SWAP4 POP DUP4 JUMPDEST POP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x5F9D JUMP JUMPDEST POP PUSH1 0x0 NOT DUP2 EQ ISZERO PUSH2 0x60A3 JUMPI POP PUSH2 0x3D97 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP8 MLOAD DUP2 EQ PUSH2 0x29F6 JUMPI PUSH2 0x60D6 PUSH1 0x20 DUP10 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x60BF JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD SUB DUP4 DUP11 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x3BCF JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP11 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x60F0 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x6105 SWAP2 SWAP1 PUSH2 0xA1C5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x6142 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x6147 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0x6191 JUMPI PUSH1 0x0 PUSH2 0x616B PUSH1 0x20 DUP4 MLOAD SUB DUP4 PUSH2 0x7C6C SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 GT DUP1 ISZERO PUSH2 0x617C JUMPI POP DUP6 DUP2 LT JUMPDEST ISZERO PUSH2 0x618F JUMPI DUP4 DUP9 MSTORE PUSH1 0x20 DUP9 ADD DUP3 SWAP1 MSTORE SWAP5 POP DUP5 JUMPDEST POP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x60A6 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xC45A0155 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x61D8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x61EC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x6210 SWAP2 SWAP1 PUSH2 0x913B JUMP JUMPDEST SWAP1 POP PUSH1 0x1 DUP4 MLOAD SUB PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x622C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x6256 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x6482 JUMPI PUSH1 0x60 DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x5B1DC86F PUSH3 0x249F0 DUP8 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x6286 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 DUP7 PUSH1 0x1 ADD DUP2 MLOAD DUP2 LT PUSH2 0x629D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x62C2 SWAP3 SWAP2 SWAP1 PUSH2 0xA20E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x62DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x6310 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x630D SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x9532 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x637E JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x633E JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x6343 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 DUP1 JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x6372 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP5 POP POP POP POP POP PUSH2 0x6485 JUMP JUMPDEST DUP1 MLOAD PUSH2 0x638C JUMPI PUSH1 0x0 DUP1 PUSH2 0x6348 JUMP JUMPDEST PUSH1 0x0 DUP1 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x6476 JUMPI PUSH1 0x0 DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x63A7 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x18160DDD PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x63E7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x63FB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x641F SWAP2 SWAP1 PUSH2 0x996D JUMP JUMPDEST SWAP1 POP DUP3 DUP2 GT ISZERO PUSH2 0x646D JUMPI DUP1 SWAP3 POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x6438 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 DUP8 DUP2 MLOAD DUP2 LT PUSH2 0x644C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x6390 JUMP JUMPDEST POP POP POP POP PUSH1 0x1 ADD PUSH2 0x625C JUMP JUMPDEST POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP6 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x21F8A721 DUP8 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x9232494E PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x64DF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x64F3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x6517 SWAP2 SWAP1 PUSH2 0x996D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6533 SWAP2 SWAP1 PUSH2 0xA679 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x654B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x655F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x6583 SWAP2 SWAP1 PUSH2 0x913B JUMP JUMPDEST SWAP2 POP DUP6 PUSH1 0x20 ADD MLOAD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x6598 JUMPI PUSH2 0x66B4 JUMP JUMPDEST PUSH1 0x0 DUP1 JUMPDEST DUP8 PUSH1 0x20 ADD MLOAD MLOAD DUP2 LT ISZERO PUSH2 0x66B1 JUMPI PUSH1 0x2 DUP9 PUSH1 0x20 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x65BB JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD LT ISZERO PUSH2 0x65CF JUMPI PUSH2 0x66A9 JUMP JUMPDEST DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x7F9C0ECD PUSH3 0x493E0 DUP11 PUSH1 0x20 ADD MLOAD DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x65F2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 PUSH1 0x1 DUP11 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x660A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x662F SWAP3 SWAP2 SWAP1 PUSH2 0xA519 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6647 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x6678 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x6675 SWAP2 DUP2 ADD SWAP1 PUSH2 0x996D JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x6681 JUMPI PUSH2 0x66A9 JUMP JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x66A7 JUMPI DUP1 SWAP3 POP DUP9 PUSH1 0x20 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x669C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP4 POP JUMPDEST POP JUMPDEST PUSH1 0x1 ADD PUSH2 0x659C JUMP JUMPDEST POP POP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x66F8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x66EF SWAP1 PUSH2 0xA86F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x6704 PUSH2 0x88C7 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP2 ADD DUP3 MSTORE ADDRESS DUP1 DUP3 MSTORE PUSH1 0x0 PUSH1 0x20 DUP4 ADD DUP2 SWAP1 MSTORE SWAP3 DUP3 ADD MSTORE PUSH1 0x60 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP2 DUP3 SWAP2 SWAP1 DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x674D PUSH2 0x894F JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x6745 JUMPI SWAP1 POP POP SWAP1 POP PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP6 PUSH1 0x0 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP DUP2 MSTORE POP DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x67AB JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x3795FB1 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x6F2BF62 SWAP1 PUSH2 0x67EC SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0xA1E1 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6804 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x6818 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4523 SWAP2 SWAP1 PUSH2 0x913B JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH2 0x6852 JUMPI PUSH2 0xF22 JUMP JUMPDEST PUSH1 0x60 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH3 0x249F0 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x6874 SWAP2 SWAP1 PUSH2 0xA679 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x68B2 SWAP2 SWAP1 PUSH2 0xA1C5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x68EE JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x68F3 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP DUP2 ISZERO PUSH2 0x6916 JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x6913 SWAP2 SWAP1 PUSH2 0x996D JUMP JUMPDEST SWAP3 POP JUMPDEST POP SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD9638D36 DUP12 PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6955 SWAP2 SWAP1 PUSH2 0xA679 JUMP JUMPDEST PUSH1 0xA0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x696D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x6981 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x69A5 SWAP2 SWAP1 PUSH2 0x9F28 JUMP JUMPDEST SWAP5 POP SWAP5 POP POP POP SWAP3 POP PUSH1 0x0 PUSH3 0xF4240 SWAP1 POP DUP11 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x6ACD JUMPI PUSH1 0x0 PUSH2 0x69E4 DUP10 PUSH5 0xE8D4A51000 PUSH2 0x844E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x6A08 PUSH12 0x33B2E3C9FD0803CE8000000 PUSH2 0x6A02 DUP9 DUP6 PUSH2 0x8484 JUMP JUMPDEST SWAP1 PUSH2 0x844E JUMP JUMPDEST SWAP1 POP DUP5 DUP2 LT PUSH2 0x6A20 JUMPI PUSH1 0x0 SWAP7 POP POP POP POP POP POP POP PUSH2 0x6BD6 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6AAF PUSH8 0xDE0B6B3A7640000 PUSH2 0x6AA9 DUP13 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x568D4B6F PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6A6A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x6A7E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x6AA2 SWAP2 SWAP1 PUSH2 0x996D JUMP JUMPDEST DUP7 SWAP1 PUSH2 0x844E JUMP JUMPDEST SWAP1 PUSH2 0x84A0 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x6ABD DUP5 DUP4 PUSH2 0x84CA JUMP JUMPDEST SWAP9 POP PUSH2 0x6BD6 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP11 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x6BCD JUMPI DUP8 DUP5 DUP2 GT ISZERO PUSH2 0x6B02 JUMPI PUSH1 0x0 SWAP6 POP POP POP POP POP POP PUSH2 0x6BD6 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6B1E PUSH12 0x33B2E3C9FD0803CE8000000 PUSH2 0x6A02 DUP9 DUP6 PUSH2 0x84CA JUMP JUMPDEST SWAP1 POP DUP4 DUP2 GT PUSH2 0x6B36 JUMPI PUSH1 0x0 SWAP7 POP POP POP POP POP POP POP PUSH2 0x6BD6 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6BBB DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xFAE036D5 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6B74 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x6B88 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x6BAC SWAP2 SWAP1 PUSH2 0x996D JUMP JUMPDEST PUSH8 0xDE0B6B3A7640000 SWAP1 PUSH2 0x8484 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x6ABD DUP3 PUSH2 0x6AA9 DUP7 DUP9 PUSH2 0x844E JUMP JUMPDEST PUSH1 0x0 SWAP5 POP POP POP POP POP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x6BEB PUSH2 0x8981 JUMP JUMPDEST DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x6BFF SWAP2 SWAP1 PUSH2 0x9A19 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x6C19 SWAP2 SWAP1 PUSH2 0x99FD JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH4 0x22DB5ED1 PUSH1 0xE2 SHL DUP6 DUP8 DUP7 PUSH2 0x6C34 DUP13 PUSH2 0x84E9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x6C47 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA8F9 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x6C85 SWAP2 SWAP1 PUSH2 0xA1C5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x6CC0 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x6CC5 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH2 0x6CDD JUMPI PUSH1 0x0 SWAP6 POP POP POP POP POP POP PUSH2 0x4523 JUMP JUMPDEST DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x6CF1 SWAP2 SWAP1 PUSH2 0x991B JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x6CFD JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP6 POP POP POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x6D2C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x6D56 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP2 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x6D68 JUMPI PUSH2 0x6485 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6D99 DUP5 PUSH1 0x0 ADD MLOAD DUP6 PUSH1 0x20 ADD MLOAD DUP6 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x6D84 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 PUSH1 0x40 ADD MLOAD PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x6DA6 JUMPI POP PUSH2 0x6485 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6DC3 DUP6 PUSH1 0x20 ADD MLOAD DUP7 PUSH1 0x0 ADD MLOAD DUP5 DUP9 PUSH1 0x40 ADD MLOAD PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x6DD1 JUMPI POP POP PUSH2 0x6485 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x6F1C JUMPI PUSH1 0x0 DUP1 JUMPDEST PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x6EC5 JUMPI PUSH2 0x6E08 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x6DF9 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 DUP8 PUSH2 0x852A JUMP JUMPDEST SWAP5 POP DUP5 PUSH2 0x6E14 JUMPI PUSH2 0x6EC5 JUMP JUMPDEST PUSH2 0x6E23 PUSH2 0x2715 PUSH2 0x2710 DUP8 PUSH2 0x852A JUMP JUMPDEST SWAP5 POP DUP5 PUSH2 0x6E2F JUMPI PUSH2 0x6EC5 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6E4C DUP10 PUSH1 0x20 ADD MLOAD DUP11 PUSH1 0x0 ADD MLOAD DUP9 DUP13 PUSH1 0x40 ADD MLOAD PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x6E59 JUMPI POP PUSH2 0x6EC5 JUMP JUMPDEST DUP1 SWAP5 POP DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x6E68 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 LT PUSH2 0x6EBC JUMPI DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x6E82 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x2710 DUP10 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x6E99 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 SUB MUL DUP2 PUSH2 0x6EAB JUMPI INVALID JUMPDEST DIV SWAP3 POP PUSH1 0x5 DUP4 GT PUSH2 0x6EBC JUMPI POP PUSH2 0x6EC5 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x6DE1 JUMP JUMPDEST POP DUP1 ISZERO DUP1 PUSH2 0x6ED3 JUMPI POP PUSH1 0x5 DUP2 GT JUMPDEST ISZERO PUSH2 0x6EDE JUMPI POP PUSH2 0x6F1C JUMP JUMPDEST PUSH2 0x6EFC DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x6EED JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 DUP7 PUSH2 0x852A JUMP JUMPDEST DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x6F08 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP PUSH1 0x1 ADD PUSH2 0x6DD4 JUMP JUMPDEST POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP8 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x6F41 SWAP2 SWAP1 PUSH2 0x9190 JUMP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 POP SWAP4 POP DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x702B JUMPI PUSH1 0x40 MLOAD PUSH4 0x51400F0B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0xA2801E16 SWAP1 PUSH3 0x493E0 SWAP1 PUSH2 0x6F94 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0xA679 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6FAC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x6FDD JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x6FDA SWAP2 DUP2 ADD SWAP1 PUSH2 0x996D JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x701F JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x700B JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x7010 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 SWAP6 POP POP POP POP POP POP PUSH2 0x4523 JUMP JUMPDEST SWAP5 POP PUSH2 0x4523 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xCA19EBD9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH4 0xCA19EBD9 SWAP1 PUSH3 0x493E0 SWAP1 PUSH2 0x6F94 SWAP1 DUP8 SWAP1 DUP12 SWAP1 PUSH1 0x4 ADD PUSH2 0xA1F5 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x2 DUP3 DUP5 MLOAD SUB LT ISZERO PUSH2 0x7084 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x66EF SWAP1 PUSH2 0xA82B JUMP JUMPDEST PUSH2 0x708C PUSH2 0x89A1 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP2 ADD DUP3 MSTORE PUSH1 0x64 DUP2 MSTORE PUSH2 0x1F4 PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0xBB8 DUP2 DUP4 ADD MSTORE PUSH2 0x2710 PUSH1 0x60 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP3 MLOAD PUSH1 0x4 DUP1 DUP3 MSTORE PUSH1 0xA0 DUP3 ADD SWAP1 SWAP5 MSTORE SWAP2 SWAP3 SWAP1 SWAP2 SWAP1 DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP PUSH1 0x0 DUP1 DUP7 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x70EA JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 DUP8 DUP8 PUSH1 0x1 ADD DUP2 MLOAD DUP2 LT PUSH2 0x7105 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 JUMPDEST PUSH1 0x4 DUP2 LT ISZERO PUSH2 0x71FA JUMPI PUSH1 0x0 DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x1698EE82 DUP6 DUP6 DUP11 DUP7 PUSH1 0x4 DUP2 LT PUSH2 0x713A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x715D SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA6C1 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7175 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x7189 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x71AD SWAP2 SWAP1 PUSH2 0x913B JUMP JUMPDEST SWAP1 POP PUSH2 0x71B8 DUP2 PUSH2 0x8582 JUMP JUMPDEST ISZERO PUSH2 0x71F1 JUMPI DUP1 DUP7 DUP7 DUP1 PUSH1 0x1 ADD SWAP8 POP DUP2 MLOAD DUP2 LT PUSH2 0x71D0 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x7112 JUMP JUMPDEST POP POP POP DUP1 PUSH2 0x720A JUMPI POP POP POP PUSH2 0x4523 JUMP JUMPDEST DUP6 MLOAD DUP6 PUSH1 0x2 ADD EQ ISZERO PUSH2 0x7300 JUMPI DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x722C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x7260 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x724B JUMPI SWAP1 POP JUMPDEST POP SWAP4 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x72F7 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE SWAP1 PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x7298 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP3 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x72AF JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x72C3 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x72D7 JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE PUSH1 0x1 ADD PUSH2 0x7266 JUMP JUMPDEST POP POP POP POP PUSH2 0x4523 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x7310 DUP9 DUP9 DUP9 PUSH1 0x1 ADD PUSH2 0x705E JUMP JUMPDEST SWAP1 POP DUP1 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x7325 JUMPI POP POP POP POP PUSH2 0x4523 JUMP JUMPDEST DUP1 MLOAD DUP3 MUL PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x733E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x7372 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x735D JUMPI SWAP1 POP JUMPDEST POP SWAP5 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x74F2 JUMPI PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x74E9 JUMPI DUP3 MLOAD DUP3 DUP2 MUL DUP3 ADD SWAP1 DUP5 SWAP1 DUP4 SWAP1 DUP2 LT PUSH2 0x73A0 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD PUSH1 0x1 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x73C1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x73EB JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP DUP9 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x73F8 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x740F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x7423 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x7437 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP PUSH1 0x0 JUMPDEST DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x7466 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD DUP2 LT ISZERO PUSH2 0x74DF JUMPI DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x7482 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x7495 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP10 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x74A9 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 PUSH1 0x1 ADD DUP2 MLOAD DUP2 LT PUSH2 0x74BF JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE PUSH1 0x1 ADD PUSH2 0x745A JUMP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x7383 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x7378 JUMP JUMPDEST POP POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x2 DUP4 MLOAD LT ISZERO DUP1 ISZERO PUSH2 0x7516 JUMPI POP DUP2 MLOAD PUSH1 0x1 ADD DUP4 MLOAD EQ JUMPDEST PUSH2 0x7532 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x66EF SWAP1 PUSH2 0xA8B4 JUMP JUMPDEST DUP2 MLOAD PUSH1 0x3 MUL DUP4 MLOAD PUSH1 0x14 MUL ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x7552 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x757D JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x20 DUP2 ADD PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x6482 JUMPI DUP1 ISZERO PUSH2 0x762C JUMPI PUSH1 0x0 DUP5 PUSH1 0x1 DUP4 SUB DUP2 MLOAD DUP2 LT PUSH2 0x75A7 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDDCA3F43 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x75E7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x75FB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x761F SWAP2 SWAP1 PUSH2 0x9DDB JUMP JUMPDEST PUSH1 0xE8 SHL DUP4 MSTORE POP PUSH1 0x3 SWAP1 SWAP2 ADD SWAP1 JUMPDEST PUSH1 0x0 DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x763A JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD PUSH1 0x60 SHL DUP4 MSTORE POP PUSH1 0x14 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x7587 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MUL DUP4 ISZERO DUP1 ISZERO SWAP1 PUSH2 0x7676 JUMPI POP DUP3 DUP5 DUP3 DUP2 PUSH2 0x7672 JUMPI INVALID JUMPDEST DIV EQ ISZERO JUMPDEST ISZERO PUSH2 0x7685 JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x6485 JUMP JUMPDEST PUSH8 0x6F05B59D3B20000 DUP2 ADD DUP2 DUP2 LT ISZERO PUSH2 0x76A3 JUMPI PUSH1 0x0 SWAP3 POP POP POP PUSH2 0x6485 JUMP JUMPDEST PUSH8 0xDE0B6B3A7640000 SWAP1 DIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x76CF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x76F9 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x35C5 JUMPI DUP3 PUSH1 0x1 DUP3 DUP6 MLOAD SUB SUB DUP2 MLOAD DUP2 LT PUSH2 0x771A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x772E JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE PUSH1 0x1 ADD PUSH2 0x76FF JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x7767 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x7791 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x35C5 JUMPI DUP3 PUSH1 0x1 DUP3 DUP6 MLOAD SUB SUB DUP2 MLOAD DUP2 LT PUSH2 0x77B2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x77C6 JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE PUSH1 0x1 ADD PUSH2 0x7797 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x77FF SWAP2 SWAP1 PUSH2 0x9157 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x7819 SWAP2 SWAP1 PUSH2 0x913B JUMP JUMPDEST SWAP1 POP ADDRESS PUSH4 0xE8E4AF09 DUP4 DUP6 DUP5 PUSH2 0x782D DUP11 PUSH2 0x84E9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x784C SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA253 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7864 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x7899 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x7896 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x991B JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x78DA JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x78C7 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x78CC JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 SWAP5 POP POP POP POP POP PUSH2 0x4523 JUMP JUMPDEST DUP1 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x78E7 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP5 POP POP POP POP POP PUSH2 0x4523 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x18A6 DUP4 PUSH2 0x6AA9 PUSH2 0x790E DUP3 PUSH1 0x1 PUSH2 0x84CA JUMP JUMPDEST PUSH2 0x7918 DUP9 DUP8 PUSH2 0x844E JUMP JUMPDEST SWAP1 PUSH2 0x8484 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x12 SWAP1 POP PUSH1 0x0 PUSH1 0x60 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x4 DUP2 MSTORE PUSH1 0x20 ADD PUSH4 0x313CE567 PUSH1 0xE0 SHL DUP2 MSTORE POP PUSH1 0x40 MLOAD PUSH2 0x795C SWAP2 SWAP1 PUSH2 0xA1C5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x7997 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x799C JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x79B0 JUMPI POP PUSH1 0x20 DUP2 MLOAD LT ISZERO JUMPDEST ISZERO PUSH2 0x79C3 JUMPI PUSH2 0x79C0 DUP2 PUSH1 0x0 PUSH2 0x7C6C JUMP JUMPDEST SWAP3 POP JUMPDEST POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD9638D36 DUP12 PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7A00 SWAP2 SWAP1 PUSH2 0xA679 JUMP JUMPDEST PUSH1 0xA0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7A18 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x7A2C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x7A50 SWAP2 SWAP1 PUSH2 0x9F28 JUMP JUMPDEST SWAP5 POP SWAP5 POP POP POP SWAP3 POP DUP10 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x7B67 JUMPI PUSH1 0x0 DUP8 SWAP1 POP PUSH1 0x0 PUSH2 0x7B00 DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x568D4B6F PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7AB9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x7ACD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x7AF1 SWAP2 SWAP1 PUSH2 0x996D JUMP JUMPDEST PUSH8 0xDE0B6B3A7640000 SWAP1 PUSH2 0x84CA JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x7B1A DUP3 PUSH2 0x6AA9 DUP6 PUSH8 0xDE0B6B3A7640000 PUSH2 0x844E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x7B38 PUSH12 0x33B2E3C9FD0803CE8000000 PUSH2 0x6A02 DUP10 DUP6 PUSH2 0x8484 JUMP JUMPDEST SWAP1 POP DUP6 DUP2 LT PUSH2 0x7B51 JUMPI PUSH1 0x0 SWAP8 POP POP POP POP POP POP POP POP PUSH2 0x6BD6 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6ABD PUSH1 0x1 PUSH2 0x7918 DUP6 PUSH5 0xE8D4A51000 PUSH2 0x84A0 JUMP JUMPDEST DUP10 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x7C4C JUMPI PUSH1 0x0 PUSH2 0x7B96 DUP9 PUSH5 0xE8D4A51000 PUSH2 0x844E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x7BD6 DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xFAE036D5 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6B74 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x7BF0 PUSH8 0xDE0B6B3A7640000 PUSH2 0x6AA9 DUP6 DUP6 PUSH2 0x844E JUMP JUMPDEST SWAP1 POP DUP6 DUP2 GT ISZERO PUSH2 0x7C09 JUMPI PUSH1 0x0 SWAP7 POP POP POP POP POP POP POP PUSH2 0x6BD6 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7C25 PUSH12 0x33B2E3C9FD0803CE8000000 PUSH2 0x6A02 DUP10 DUP6 PUSH2 0x84CA JUMP JUMPDEST SWAP1 POP DUP5 DUP2 GT PUSH2 0x7C3E JUMPI PUSH1 0x0 SWAP8 POP POP POP POP POP POP POP POP PUSH2 0x6BD6 JUMP JUMPDEST POP SWAP6 POP PUSH2 0x6BD6 SWAP5 POP POP POP POP POP JUMP JUMPDEST POP PUSH1 0x0 SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x7C67 DUP4 DUP4 DUP4 PUSH2 0x878E JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4523 DUP4 DUP4 PUSH2 0x87B5 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x7C83 PUSH2 0x8981 JUMP JUMPDEST DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x7C97 SWAP2 SWAP1 PUSH2 0x9A19 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x7CB1 SWAP2 SWAP1 PUSH2 0x99FD JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH4 0x205E01D7 PUSH1 0xE1 SHL DUP6 DUP8 DUP7 PUSH2 0x6C34 DUP13 PUSH2 0x84E9 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH1 0x20 ADD MLOAD SWAP1 POP PUSH1 0x60 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x910FFC71 DUP8 PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x7D0A JUMPI DUP7 PUSH2 0x7D20 JUMP JUMPDEST PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE JUMPDEST DUP9 PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x7D43 JUMPI DUP7 PUSH2 0x7D59 JUMP JUMPDEST PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP2 DUP3 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP7 SWAP1 SHL AND SWAP1 SWAP2 MSTORE PUSH2 0x7D8D SWAP3 SWAP2 SWAP1 PUSH1 0x1 SWAP1 PUSH1 0x24 DUP2 ADD PUSH2 0xA2D5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7DA5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x7DB9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x7DE1 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x95CA JUMP JUMPDEST POP POP SWAP1 POP DUP1 MLOAD DUP7 PUSH1 0x0 ADD MLOAD LT PUSH2 0x7DFD JUMPI POP PUSH1 0x0 SWAP2 POP PUSH2 0x4523 SWAP1 POP JUMP JUMPDEST DUP1 DUP7 PUSH1 0x0 ADD MLOAD DUP2 MLOAD DUP2 LT PUSH2 0x7E0D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP3 POP PUSH1 0xF8 DUP4 SWAP1 SHR PUSH1 0x0 SHR PUSH1 0xBB EQ ISZERO PUSH2 0x2072 JUMPI POP PUSH1 0x0 SWAP2 POP PUSH2 0x4523 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x7E3E PUSH2 0x89BF JUMP JUMPDEST DUP5 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x7E52 SWAP2 SWAP1 PUSH2 0x923E JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP7 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x7E6C SWAP2 SWAP1 PUSH2 0x923E JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0x3C7B5FE9 PUSH1 0xE2 SHL DUP2 MSTORE SWAP1 SWAP2 POP ADDRESS SWAP1 PUSH4 0xF1ED7FA4 SWAP1 PUSH2 0x7E99 SWAP1 DUP6 SWAP1 DUP6 SWAP1 DUP9 SWAP1 DUP12 SWAP1 PUSH1 0x4 ADD PUSH2 0xA961 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7EB1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x7EE1 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x7EDE SWAP2 DUP2 ADD SWAP1 PUSH2 0x996D JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x7F0F JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x78C7 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x78CC JUMP JUMPDEST SWAP4 POP PUSH2 0x4523 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x57A281DC DUP7 DUP7 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7F4D SWAP3 SWAP2 SWAP1 PUSH2 0xA20E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7F65 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x7F79 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x7FA1 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x9532 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 SWAP2 POP DUP1 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x803A JUMPI PUSH1 0x40 MLOAD PUSH4 0x15E8A077 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND SWAP1 PUSH4 0x57A281DC SWAP1 PUSH2 0x7FDF SWAP1 DUP8 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0xA20E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7FF7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x800B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x8033 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x9532 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 SWAP2 POP JUMPDEST DUP1 MLOAD DUP7 LT PUSH2 0x804F JUMPI PUSH1 0x0 DUP1 SWAP3 POP SWAP3 POP POP PUSH2 0x66B4 JUMP JUMPDEST DUP1 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x805B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP3 POP POP SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP7 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x8089 SWAP2 SWAP1 PUSH2 0x91EE JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP DUP1 ISZERO PUSH2 0x812D JUMPI PUSH1 0x40 MLOAD PUSH4 0x3CD0243B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x79A04876 SWAP1 PUSH3 0x493E0 SWAP1 PUSH2 0x80C9 SWAP1 PUSH1 0x0 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0xA1F5 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x80E0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x8111 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x810E SWAP2 DUP2 ADD SWAP1 PUSH2 0x9ED0 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x8121 JUMPI PUSH1 0x0 SWAP4 POP POP POP POP PUSH2 0x4523 JUMP JUMPDEST POP SWAP4 POP PUSH2 0x4523 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x66410A21 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x66410A21 SWAP1 PUSH3 0x493E0 SWAP1 PUSH2 0x80C9 SWAP1 PUSH1 0x0 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0xA1F5 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x817A SWAP2 SWAP1 PUSH2 0x9157 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x8194 SWAP2 SWAP1 PUSH2 0x913B JUMP JUMPDEST SWAP1 POP ADDRESS PUSH4 0x30D6570D DUP4 DUP6 DUP5 PUSH2 0x782D DUP11 PUSH2 0x84E9 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP6 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x81D0 SWAP2 SWAP1 PUSH2 0xA1E1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x820E SWAP2 SWAP1 PUSH2 0xA1C5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x8249 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x824E JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x8262 JUMPI POP PUSH1 0x20 DUP2 MLOAD LT ISZERO JUMPDEST ISZERO PUSH2 0x6482 JUMPI PUSH2 0x1914 DUP2 PUSH1 0x0 PUSH2 0x7C6C JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x828B SWAP2 SWAP1 PUSH2 0x9157 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x82A5 SWAP2 SWAP1 PUSH2 0x913B JUMP JUMPDEST SWAP1 POP ADDRESS PUSH4 0xA4698417 PUSH3 0x61A80 DUP5 DUP7 DUP6 PUSH2 0x82BD DUP12 PUSH2 0x84E9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP7 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x82DC SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA253 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x82F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x7899 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x7896 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x991B JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDD62ED3E PUSH1 0xE0 SHL DUP7 DUP7 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x8351 SWAP3 SWAP2 SWAP1 PUSH2 0xA20E JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x838F SWAP2 SWAP1 PUSH2 0xA1C5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x83CA JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x83CF JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x83E3 JUMPI POP PUSH1 0x20 DUP2 MLOAD LT ISZERO JUMPDEST ISZERO PUSH2 0x2072 JUMPI PUSH2 0x6BD6 DUP2 PUSH1 0x0 PUSH2 0x7C6C JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6485 DUP3 PUSH2 0x87DF JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x8417 SWAP2 SWAP1 PUSH2 0x9157 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP1 DUP7 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x8432 SWAP2 SWAP1 PUSH2 0x9157 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x8442 DUP5 DUP5 DUP4 DUP10 PUSH2 0x4650 JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x845D JUMPI POP PUSH1 0x0 PUSH2 0x6485 JUMP JUMPDEST DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 PUSH2 0x846A JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x4523 JUMPI PUSH2 0x4523 PUSH2 0x847F PUSH1 0x1 DUP7 DUP7 PUSH2 0x8846 JUMP JUMPDEST PUSH2 0x88A0 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x4523 JUMPI PUSH2 0x4523 PUSH2 0x847F PUSH1 0x0 DUP7 DUP7 PUSH2 0x8846 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x84B6 JUMPI PUSH2 0x84B6 PUSH2 0x847F PUSH1 0x3 DUP6 DUP6 PUSH2 0x8846 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP2 PUSH2 0x84C1 JUMPI INVALID JUMPDEST DIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x84E3 JUMPI PUSH2 0x84E3 PUSH2 0x847F PUSH1 0x2 DUP6 DUP6 PUSH2 0x8846 JUMP JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP2 PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP2 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x8519 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP4 ISZERO DUP1 PUSH2 0x8537 JUMPI POP DUP2 ISZERO JUMPDEST DUP1 PUSH2 0x8540 JUMPI POP DUP3 ISZERO JUMPDEST ISZERO PUSH2 0x854D JUMPI POP PUSH1 0x0 PUSH2 0x4523 JUMP JUMPDEST DUP4 DUP3 MUL DUP3 DUP6 DUP3 DUP2 PUSH2 0x855A JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x856A JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x4523 JUMP JUMPDEST DUP4 PUSH1 0x1 DUP6 SUB DUP3 ADD DUP2 PUSH2 0x8578 JUMPI INVALID JUMPDEST DIV SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 EXTCODESIZE DUP1 PUSH2 0x8595 JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x1245 JUMP JUMPDEST POP DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDFE1681 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x85CF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x85E3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x8607 SWAP2 SWAP1 PUSH2 0x913B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x70A08231 DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8632 SWAP2 SWAP1 PUSH2 0xA1E1 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x864A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x865E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x8682 SWAP2 SWAP1 PUSH2 0x996D JUMP JUMPDEST PUSH2 0x868E JUMPI POP PUSH1 0x0 PUSH2 0x1245 JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD21220A7 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x86C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x86DB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x86FF SWAP2 SWAP1 PUSH2 0x913B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x70A08231 DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x872A SWAP2 SWAP1 PUSH2 0xA1E1 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x8742 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x8756 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x877A SWAP2 SWAP1 PUSH2 0x996D JUMP JUMPDEST PUSH2 0x8786 JUMPI POP PUSH1 0x0 PUSH2 0x1245 JUMP JUMPDEST POP PUSH1 0x1 SWAP2 SWAP1 POP JUMP JUMPDEST DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO PUSH2 0x87AD JUMPI PUSH2 0x87AD PUSH2 0x847F PUSH1 0x5 DUP6 MLOAD DUP6 PUSH1 0x20 ADD PUSH2 0x88A8 JUMP JUMPDEST SWAP2 ADD PUSH1 0x20 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO PUSH2 0x87D6 JUMPI PUSH2 0x87D6 PUSH2 0x847F PUSH1 0x5 DUP6 MLOAD DUP6 PUSH1 0x20 ADD PUSH2 0x88A8 JUMP JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH20 0xC02AAA39B223FE8D0A0E5C4F27EAD9083C756CC2 EQ ISZERO PUSH2 0x880E JUMPI POP PUSH1 0x12 PUSH2 0x1245 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x8821 SWAP2 SWAP1 PUSH2 0xA198 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB PUSH1 0x1F NOT ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 PUSH1 0xF AND PUSH1 0x4 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH4 0xE946C1BB PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x8865 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA70D JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH1 0x60 PUSH4 0x28006595 PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x8865 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA72E JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP1 NOT AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x4 SWAP1 PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY POP SWAP2 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x6485 DUP2 PUSH2 0xAC22 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x8A25 JUMPI DUP2 DUP3 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x8A3B JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP1 DUP4 MUL DUP6 ADD ADD GT ISZERO PUSH2 0x8A55 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x8A6C JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x8A7F PUSH2 0x8A7A DUP3 PUSH2 0xAB9B JUMP JUMPDEST PUSH2 0xAB75 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x8AA0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x8AC8 JUMPI DUP2 CALLDATALOAD PUSH2 0x8AB6 DUP2 PUSH2 0xAC22 JUMP JUMPDEST DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x8AA3 JUMP JUMPDEST POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x8AE3 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x8AF1 PUSH2 0x8A7A DUP3 PUSH2 0xAB9B JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x8AC8 JUMPI PUSH2 0x8B19 DUP9 DUP5 DUP5 CALLDATALOAD DUP11 ADD ADD PUSH2 0x8A5C JUMP JUMPDEST DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x8B02 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x8B3B JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x8B49 PUSH2 0x8A7A DUP3 PUSH2 0xAB9B JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x8AC8 JUMPI PUSH2 0x8B71 DUP9 DUP5 DUP5 CALLDATALOAD DUP11 ADD ADD PUSH2 0x8D8A JUMP JUMPDEST DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x8B5A JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x8B93 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x8BA1 PUSH2 0x8A7A DUP3 PUSH2 0xAB9B JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x8BC2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x8AC8 JUMPI DUP2 CALLDATALOAD PUSH2 0x8BD8 DUP2 PUSH2 0xAC22 JUMP JUMPDEST DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x8BC5 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x8BFA JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x8C08 PUSH2 0x8A7A DUP3 PUSH2 0xAB9B JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD PUSH1 0x80 DUP1 DUP6 MUL DUP8 ADD DUP4 ADD DUP9 LT ISZERO PUSH2 0x8C2B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x8C52 JUMPI PUSH2 0x8C40 DUP10 DUP5 PUSH2 0x9089 JUMP JUMPDEST DUP6 MSTORE SWAP4 DUP4 ADD SWAP4 SWAP2 DUP2 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x8C2E JUMP JUMPDEST POP POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x8C6E JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x8C7C PUSH2 0x8A7A DUP3 PUSH2 0xAB9B JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x8C9D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x8AC8 JUMPI DUP2 CALLDATALOAD DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x8CA0 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x8CCC JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x8CDA PUSH2 0x8A7A DUP3 PUSH2 0xAB9B JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x8CFB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x8AC8 JUMPI DUP2 MLOAD DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x8CFE JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x8D2A JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x8D38 PUSH2 0x8A7A DUP3 PUSH2 0xAB9B JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x8D59 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x8C52 JUMPI DUP3 MLOAD PUSH4 0xFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x8D78 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP6 MSTORE SWAP4 DUP4 ADD SWAP4 SWAP2 DUP4 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x8D5D JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x8D9A JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x8DA8 PUSH2 0x8A7A DUP3 PUSH2 0xABBA JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x8DBF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP5 ADD CALLDATACOPY PUSH1 0x0 SWAP1 DUP3 ADD PUSH1 0x20 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x8DE8 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x8DF6 PUSH2 0x8A7A DUP3 PUSH2 0xABBA JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x8E0D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x34D2 DUP2 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP7 ADD PUSH2 0xABE8 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x2 DUP2 LT PUSH2 0x6485 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x8E3E JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x8E48 PUSH1 0x60 PUSH2 0xAB75 JUMP JUMPDEST SWAP1 POP DUP2 CALLDATALOAD PUSH2 0x8E55 DUP2 PUSH2 0xAC22 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH2 0x8E65 DUP2 PUSH2 0xAC37 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP3 ADD CALLDATALOAD PUSH2 0x8E78 DUP2 PUSH2 0xAC37 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x8E94 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x8E9E PUSH1 0x60 PUSH2 0xAB75 JUMP JUMPDEST SWAP1 POP DUP2 MLOAD PUSH2 0x8EAB DUP2 PUSH2 0xAC22 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x8EBB DUP2 PUSH2 0xAC37 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0x8E78 DUP2 PUSH2 0xAC37 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x8EDF JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x8EE9 PUSH1 0x40 PUSH2 0xAB75 JUMP JUMPDEST SWAP1 POP DUP2 CALLDATALOAD PUSH2 0x8EF6 DUP2 PUSH2 0xAC22 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH2 0x8F06 DUP2 PUSH2 0xAC22 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x8F22 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x8F2C PUSH1 0xA0 PUSH2 0xAB75 JUMP JUMPDEST SWAP1 POP DUP2 CALLDATALOAD DUP2 MSTORE PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH2 0x8F40 DUP2 PUSH2 0xAC22 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP3 ADD CALLDATALOAD PUSH2 0x8F53 DUP2 PUSH2 0xAC22 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP3 ADD CALLDATALOAD PUSH2 0x8F66 DUP2 PUSH2 0xAC22 JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP3 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x8F84 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x8F90 DUP5 DUP3 DUP6 ADD PUSH2 0x8D8A JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x180 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x8FAF JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x8FB8 DUP2 PUSH2 0xAB75 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x8FC5 DUP4 DUP4 PUSH2 0x8A09 JUMP JUMPDEST DUP2 MSTORE PUSH2 0x8FD4 DUP4 PUSH1 0x20 DUP5 ADD PUSH2 0x8A09 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x8FE6 DUP4 PUSH1 0x40 DUP5 ADD PUSH2 0x90E6 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x8FF8 DUP4 PUSH1 0x60 DUP5 ADD PUSH2 0x90E6 JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH2 0x900A DUP4 PUSH1 0x80 DUP5 ADD PUSH2 0x90E6 JUMP JUMPDEST PUSH1 0x80 DUP3 ADD MSTORE PUSH2 0x901C DUP4 PUSH1 0xA0 DUP5 ADD PUSH2 0x8A09 JUMP JUMPDEST PUSH1 0xA0 DUP3 ADD MSTORE PUSH2 0x902E DUP4 PUSH1 0xC0 DUP5 ADD PUSH2 0x8A09 JUMP JUMPDEST PUSH1 0xC0 DUP3 ADD MSTORE PUSH2 0x9040 DUP4 PUSH1 0xE0 DUP5 ADD PUSH2 0x8A09 JUMP JUMPDEST PUSH1 0xE0 DUP3 ADD MSTORE PUSH2 0x100 PUSH2 0x9054 DUP5 DUP3 DUP6 ADD PUSH2 0x8A09 JUMP JUMPDEST SWAP1 DUP3 ADD MSTORE PUSH2 0x120 DUP3 DUP2 ADD CALLDATALOAD SWAP1 DUP3 ADD MSTORE PUSH2 0x140 PUSH2 0x9072 DUP5 DUP3 DUP6 ADD PUSH2 0x9108 JUMP JUMPDEST DUP2 DUP4 ADD MSTORE POP PUSH2 0x160 DUP1 DUP4 ADD CALLDATALOAD DUP2 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x909A JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x90A4 PUSH1 0x80 PUSH2 0xAB75 JUMP JUMPDEST SWAP1 POP DUP2 CALLDATALOAD PUSH1 0x4 DUP2 LT PUSH2 0x90B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH2 0x90C5 DUP2 PUSH2 0xAC5C JUMP JUMPDEST DUP1 PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 DUP3 ADD CALLDATALOAD PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP3 ADD CALLDATALOAD PUSH1 0x60 DUP3 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x6485 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 MLOAD PUSH2 0x6485 DUP2 PUSH2 0xAC22 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x6485 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x9130 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x4523 DUP2 PUSH2 0xAC22 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x914C JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x4523 DUP2 PUSH2 0xAC22 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x9169 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP3 MLOAD PUSH2 0x9174 DUP2 PUSH2 0xAC22 JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 SWAP3 POP PUSH2 0x9185 DUP2 PUSH2 0xAC22 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x91A5 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 MLOAD PUSH2 0x91B0 DUP2 PUSH2 0xAC22 JUMP JUMPDEST PUSH1 0x20 DUP7 ADD MLOAD SWAP1 SWAP5 POP PUSH2 0x91C1 DUP2 PUSH2 0xAC22 JUMP JUMPDEST PUSH1 0x40 DUP7 ADD MLOAD SWAP1 SWAP4 POP PUSH2 0x91D2 DUP2 PUSH2 0xAC22 JUMP JUMPDEST PUSH1 0x60 DUP7 ADD MLOAD SWAP1 SWAP3 POP PUSH2 0x91E3 DUP2 PUSH2 0xAC22 JUMP JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP1 SWAP4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x9202 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 MLOAD PUSH2 0x920D DUP2 PUSH2 0xAC22 JUMP JUMPDEST PUSH1 0x20 DUP6 ADD MLOAD SWAP1 SWAP4 POP PUSH2 0x921E DUP2 PUSH2 0xAC22 JUMP JUMPDEST PUSH1 0x40 DUP6 ADD MLOAD SWAP1 SWAP3 POP DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x9233 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x9250 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH2 0x925B DUP2 PUSH2 0xAC22 JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x9277 JUMPI DUP3 DUP4 REVERT JUMPDEST SWAP1 DUP5 ADD SWAP1 PUSH1 0xA0 DUP3 DUP8 SUB SLT ISZERO PUSH2 0x928A JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x9294 PUSH1 0xA0 PUSH2 0xAB75 JUMP JUMPDEST DUP3 MLOAD DUP2 MSTORE PUSH1 0x20 DUP4 ADD MLOAD PUSH2 0x92A6 DUP2 PUSH2 0xAC22 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP4 ADD MLOAD PUSH2 0x92B9 DUP2 PUSH2 0xAC22 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP4 ADD MLOAD PUSH2 0x92CC DUP2 PUSH2 0xAC22 JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP4 ADD MLOAD DUP3 DUP2 GT ISZERO PUSH2 0x92E2 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x92EE DUP9 DUP3 DUP7 ADD PUSH2 0x8DD8 JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE POP DUP1 SWAP4 POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x9318 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x9323 DUP2 PUSH2 0xAC22 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x9333 DUP2 PUSH2 0xAC22 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH2 0x9343 DUP2 PUSH2 0xAC22 JUMP JUMPDEST SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH2 0x9353 DUP2 PUSH2 0xAC22 JUMP JUMPDEST SWAP2 POP PUSH1 0x80 DUP7 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x936D JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x9379 DUP9 DUP3 DUP10 ADD PUSH2 0x8C5E JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x939B JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x93A6 DUP2 PUSH2 0xAC22 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x93B6 DUP2 PUSH2 0xAC22 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x93C6 DUP2 PUSH2 0xAC22 JUMP JUMPDEST SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x93E0 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x93EC DUP8 DUP3 DUP9 ADD PUSH2 0x8C5E JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x940D JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x9418 DUP2 PUSH2 0xAC22 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x9428 DUP2 PUSH2 0xAC22 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x9438 DUP2 PUSH2 0xAC22 JUMP JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP3 SWAP4 PUSH1 0x60 ADD CALLDATALOAD SWAP3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x945C JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x9467 DUP2 PUSH2 0xAC22 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x9482 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x948E DUP8 DUP4 DUP9 ADD PUSH2 0x8A5C JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x94A3 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x94B0 DUP7 DUP3 DUP8 ADD PUSH2 0x8C5E JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x94D1 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x94DC DUP2 PUSH2 0xAC22 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH2 0x9343 DUP2 PUSH2 0xAC22 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x9505 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x951A JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x9526 DUP6 DUP3 DUP7 ADD PUSH2 0x8A14 JUMP JUMPDEST SWAP1 SWAP7 SWAP1 SWAP6 POP SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x9544 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x9559 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 ADD PUSH1 0x1F DUP2 ADD DUP6 SGT PUSH2 0x9569 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP1 MLOAD PUSH2 0x9577 PUSH2 0x8A7A DUP3 PUSH2 0xAB9B JUMP JUMPDEST DUP2 DUP2 MSTORE DUP4 DUP2 ADD SWAP1 DUP4 DUP6 ADD DUP6 DUP5 MUL DUP6 ADD DUP7 ADD DUP10 LT ISZERO PUSH2 0x9593 JUMPI DUP7 DUP8 REVERT JUMPDEST DUP7 SWAP5 POP JUMPDEST DUP4 DUP6 LT ISZERO PUSH2 0x95BE JUMPI DUP1 MLOAD PUSH2 0x95AA DUP2 PUSH2 0xAC22 JUMP JUMPDEST DUP4 MSTORE PUSH1 0x1 SWAP5 SWAP1 SWAP5 ADD SWAP4 SWAP2 DUP6 ADD SWAP2 DUP6 ADD PUSH2 0x9597 JUMP JUMPDEST POP SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x95DE JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x95F4 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 DUP7 ADD SWAP2 POP DUP7 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x9607 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x9615 PUSH2 0x8A7A DUP3 PUSH2 0xAB9B JUMP JUMPDEST DUP1 DUP3 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD SWAP3 POP DUP1 DUP7 ADD DUP12 DUP3 DUP4 DUP8 MUL DUP10 ADD ADD GT ISZERO PUSH2 0x9635 JUMPI DUP8 DUP9 REVERT JUMPDEST DUP8 SWAP7 POP JUMPDEST DUP5 DUP8 LT ISZERO PUSH2 0x9657 JUMPI DUP1 MLOAD DUP5 MSTORE PUSH1 0x1 SWAP7 SWAP1 SWAP7 ADD SWAP6 SWAP3 DUP2 ADD SWAP3 DUP2 ADD PUSH2 0x9639 JUMP JUMPDEST POP DUP10 ADD MLOAD SWAP1 SWAP8 POP SWAP4 POP POP POP DUP1 DUP3 GT ISZERO PUSH2 0x966E JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x967B DUP7 DUP3 DUP8 ADD PUSH2 0x8CBC JUMP JUMPDEST SWAP3 POP POP PUSH2 0x968B DUP6 PUSH1 0x40 DUP7 ADD PUSH2 0x8E1E JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x96A8 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x96BE JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x96CA DUP8 DUP4 DUP9 ADD PUSH2 0x8B2B JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x96DF JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x96EC DUP7 DUP3 DUP8 ADD PUSH2 0x8B2B JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x970E JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x9723 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x18A6 DUP5 DUP3 DUP6 ADD PUSH2 0x8B83 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x9741 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x9756 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x9762 DUP6 DUP3 DUP7 ADD PUSH2 0x8B83 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x9185 DUP2 PUSH2 0xAC22 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x9787 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x979C JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x97A8 DUP7 DUP3 DUP8 ADD PUSH2 0x8B83 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x97B9 DUP2 PUSH2 0xAC22 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH2 0x9233 DUP2 PUSH2 0xAC22 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x97DB JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x97F0 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 ADD PUSH1 0x1F DUP2 ADD DUP6 SGT PUSH2 0x9800 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP1 MLOAD PUSH2 0x980E PUSH2 0x8A7A DUP3 PUSH2 0xAB9B JUMP JUMPDEST DUP2 DUP2 MSTORE DUP4 DUP2 ADD SWAP1 DUP4 DUP6 ADD DUP6 DUP5 MUL DUP6 ADD DUP7 ADD DUP10 LT ISZERO PUSH2 0x982A JUMPI DUP7 DUP8 REVERT JUMPDEST DUP7 SWAP5 POP JUMPDEST DUP4 DUP6 LT ISZERO PUSH2 0x95BE JUMPI DUP1 MLOAD DUP4 MSTORE PUSH1 0x1 SWAP5 SWAP1 SWAP5 ADD SWAP4 SWAP2 DUP6 ADD SWAP2 DUP6 ADD PUSH2 0x982E JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x9860 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x9876 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 DUP7 ADD SWAP2 POP DUP7 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x9889 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x9897 PUSH2 0x8A7A DUP3 PUSH2 0xAB9B JUMP JUMPDEST DUP1 DUP3 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD SWAP3 POP DUP1 DUP7 ADD PUSH2 0x180 DUP13 DUP4 DUP3 DUP9 MUL DUP11 ADD ADD GT ISZERO PUSH2 0x98BA JUMPI DUP9 DUP10 REVERT JUMPDEST DUP9 SWAP8 POP JUMPDEST DUP6 DUP9 LT ISZERO PUSH2 0x98E6 JUMPI PUSH2 0x98D0 DUP14 DUP4 PUSH2 0x8F9C JUMP JUMPDEST DUP6 MSTORE PUSH1 0x1 SWAP8 SWAP1 SWAP8 ADD SWAP7 SWAP4 DUP3 ADD SWAP4 SWAP1 DUP2 ADD SWAP1 PUSH2 0x98BE JUMP JUMPDEST POP SWAP2 SWAP9 POP DUP10 ADD CALLDATALOAD SWAP5 POP POP POP POP DUP1 DUP3 GT ISZERO PUSH2 0x98FE JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x990B DUP7 DUP3 DUP8 ADD PUSH2 0x8BEA JUMP JUMPDEST SWAP3 POP POP PUSH2 0x968B DUP6 PUSH1 0x40 DUP7 ADD PUSH2 0x8A09 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x992C JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x9941 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x18A6 DUP5 DUP3 DUP6 ADD PUSH2 0x8CBC JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x995E JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x4523 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x997E JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x9996 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x99AB JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x18A6 DUP5 DUP3 DUP6 ADD PUSH2 0x8DD8 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x99CB JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x99D6 DUP2 PUSH2 0xAC22 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x99F1 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x948E DUP8 DUP4 DUP9 ADD PUSH2 0x8B83 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x9A0E JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x4523 DUP2 PUSH2 0xAC4D JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x80 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x9A2B JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH2 0x9A36 DUP2 PUSH2 0xAC4D JUMP JUMPDEST SWAP2 POP PUSH2 0x9A45 DUP5 PUSH1 0x20 DUP6 ADD PUSH2 0x8E83 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP5 DUP7 SUB PUSH1 0xA0 DUP2 SLT ISZERO PUSH2 0x9A64 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x40 DUP2 SLT ISZERO PUSH2 0x9A71 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x9A7C PUSH1 0x40 PUSH2 0xAB75 JUMP JUMPDEST DUP6 CALLDATALOAD DUP2 MSTORE PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x9A8E DUP2 PUSH2 0xAC22 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE SWAP4 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x9AA3 DUP2 PUSH2 0xAC22 JUMP JUMPDEST SWAP3 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH2 0x9AB3 DUP2 PUSH2 0xAC22 JUMP JUMPDEST SWAP2 POP PUSH1 0x80 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x93E0 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x9AE2 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x9AF8 JUMPI DUP4 DUP5 REVERT JUMPDEST SWAP1 DUP7 ADD SWAP1 PUSH1 0x40 DUP3 DUP10 SUB SLT ISZERO PUSH2 0x9B0B JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x9B15 PUSH1 0x40 PUSH2 0xAB75 JUMP JUMPDEST PUSH2 0x9B1F DUP10 DUP5 PUSH2 0x8A09 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP3 DUP2 GT ISZERO PUSH2 0x9B32 JUMPI DUP6 DUP7 REVERT JUMPDEST PUSH2 0x9B3E DUP11 DUP3 DUP7 ADD PUSH2 0x8AD3 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP DUP1 SWAP7 POP POP PUSH2 0x9B55 DUP9 PUSH1 0x20 DUP10 ADD PUSH2 0x8A09 JUMP JUMPDEST SWAP5 POP PUSH2 0x9B64 DUP9 PUSH1 0x40 DUP10 ADD PUSH2 0x8A09 JUMP JUMPDEST SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x9B79 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x93EC DUP8 DUP3 DUP9 ADD PUSH2 0x8C5E JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x9B9B JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x9BA5 DUP7 DUP7 PUSH2 0x8E2D JUMP JUMPDEST SWAP4 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH2 0x9BB5 DUP2 PUSH2 0xAC4D JUMP JUMPDEST SWAP3 POP PUSH1 0x80 DUP6 ADD CALLDATALOAD PUSH2 0x9BC5 DUP2 PUSH2 0xAC4D JUMP JUMPDEST SWAP2 POP PUSH1 0xA0 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x93E0 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x9BF4 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x9BFE DUP7 DUP7 PUSH2 0x8ECE JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x9AA3 DUP2 PUSH2 0xAC22 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x9C23 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x9C39 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x9C45 DUP9 DUP4 DUP10 ADD PUSH2 0x8F11 JUMP JUMPDEST SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP2 POP PUSH2 0x9C57 DUP3 PUSH2 0xAC22 JUMP JUMPDEST SWAP1 SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP1 PUSH2 0x9C69 DUP3 PUSH2 0xAC22 JUMP JUMPDEST SWAP1 SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD SWAP1 DUP1 DUP3 GT ISZERO PUSH2 0x9B79 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x9C93 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x9CA8 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x9CB4 DUP8 DUP3 DUP9 ADD PUSH2 0x8F11 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x9428 DUP2 PUSH2 0xAC22 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x9CDA JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x9CEF JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x9CFB DUP8 DUP3 DUP9 ADD PUSH2 0x8F11 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x9D13 DUP2 PUSH2 0xAC22 JUMP JUMPDEST SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH2 0x91E3 DUP2 PUSH2 0xAC22 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x220 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x9D38 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x9D42 DUP6 DUP6 PUSH2 0x8F9C JUMP JUMPDEST SWAP3 POP PUSH2 0x9D52 DUP6 PUSH2 0x180 DUP7 ADD PUSH2 0x9089 JUMP JUMPDEST SWAP2 POP PUSH2 0x200 DUP5 ADD CALLDATALOAD PUSH2 0x9233 DUP2 PUSH2 0xAC22 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP5 DUP7 SUB PUSH1 0xC0 DUP2 SLT ISZERO PUSH2 0x9D79 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x60 DUP2 SLT ISZERO PUSH2 0x9D86 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x9D91 PUSH1 0x60 PUSH2 0xAB75 JUMP JUMPDEST DUP6 CALLDATALOAD PUSH2 0x9D9C DUP2 PUSH2 0xAC22 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP7 DUP2 ADD CALLDATALOAD SWAP1 DUP3 ADD MSTORE PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH2 0x9DB6 DUP2 PUSH2 0xAC22 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE SWAP4 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH2 0x9DCB DUP2 PUSH2 0xAC22 JUMP JUMPDEST SWAP3 POP PUSH1 0x80 DUP6 ADD CALLDATALOAD PUSH2 0x9BC5 DUP2 PUSH2 0xAC22 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x9DEC JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH3 0xFFFFFF DUP2 AND DUP2 EQ PUSH2 0x4523 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x9E13 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 MLOAD SWAP4 POP PUSH1 0x20 DUP1 DUP7 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x9E31 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP2 DUP9 ADD SWAP2 POP DUP9 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x9E44 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x9E52 PUSH2 0x8A7A DUP3 PUSH2 0xAB9B JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 DUP2 ADD SWAP1 DUP5 DUP7 ADD DUP7 DUP5 MUL DUP7 ADD DUP8 ADD DUP14 LT ISZERO PUSH2 0x9E6E JUMPI DUP9 DUP10 REVERT JUMPDEST DUP9 SWAP6 POP JUMPDEST DUP4 DUP7 LT ISZERO PUSH2 0x9E98 JUMPI PUSH2 0x9E84 DUP14 DUP3 PUSH2 0x90FD JUMP JUMPDEST DUP4 MSTORE PUSH1 0x1 SWAP6 SWAP1 SWAP6 ADD SWAP5 SWAP2 DUP7 ADD SWAP2 DUP7 ADD PUSH2 0x9E72 JUMP JUMPDEST POP PUSH1 0x40 DUP12 ADD MLOAD SWAP1 SWAP9 POP SWAP5 POP POP POP DUP1 DUP4 GT ISZERO PUSH2 0x9EB1 JUMPI DUP5 DUP6 REVERT JUMPDEST POP POP PUSH2 0x9EBF DUP8 DUP3 DUP9 ADD PUSH2 0x8D1A JUMP JUMPDEST PUSH1 0x60 SWAP7 SWAP1 SWAP7 ADD MLOAD SWAP5 SWAP8 SWAP4 SWAP7 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x9EE2 JUMPI DUP2 DUP3 REVERT JUMPDEST POP POP DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD MLOAD SWAP1 SWAP3 SWAP1 SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x9F08 JUMPI DUP2 DUP3 REVERT JUMPDEST POP POP DUP3 MLOAD PUSH1 0x20 DUP5 ADD MLOAD PUSH1 0x40 DUP6 ADD MLOAD PUSH1 0x60 SWAP1 SWAP6 ADD MLOAD SWAP2 SWAP7 SWAP1 SWAP6 POP SWAP1 SWAP3 POP SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x9F3F JUMPI DUP3 DUP4 REVERT JUMPDEST POP POP DUP4 MLOAD PUSH1 0x20 DUP6 ADD MLOAD PUSH1 0x40 DUP7 ADD MLOAD PUSH1 0x60 DUP8 ADD MLOAD PUSH1 0x80 SWAP1 SWAP8 ADD MLOAD SWAP3 SWAP9 SWAP2 SWAP8 POP SWAP6 SWAP5 POP SWAP1 SWAP3 POP SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x9F78 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x4523 DUP2 PUSH2 0xAC5C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP4 MSTORE PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x60 DUP3 ADD MLOAD PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP3 ADD MLOAD PUSH1 0xA0 PUSH1 0x80 DUP6 ADD MSTORE PUSH2 0x18A6 PUSH1 0xA0 DUP6 ADD DUP3 PUSH2 0xA050 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD DUP4 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xA016 JUMPI DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x9FF1 JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD DUP4 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xA016 JUMPI DUP2 MLOAD DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0xA034 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0xA068 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0xABE8 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 MSTORE PUSH1 0x20 DUP1 DUP3 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 DUP2 AND SWAP2 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP2 DUP3 ADD MLOAD AND SWAP2 ADD MSTORE JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP4 MSTORE PUSH1 0x20 DUP1 DUP4 ADD MLOAD ISZERO ISZERO SWAP1 DUP5 ADD MSTORE PUSH1 0x40 DUP1 DUP4 ADD MLOAD SWAP1 SWAP2 AND SWAP1 DUP4 ADD MSTORE PUSH1 0x60 SWAP1 DUP2 ADD MLOAD ISZERO ISZERO SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP4 MSTORE PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x40 PUSH1 0x20 DUP6 ADD MSTORE PUSH2 0x18A6 PUSH1 0x40 DUP6 ADD DUP3 PUSH2 0xA050 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP4 MSTORE PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 DUP3 AND PUSH1 0x20 DUP7 ADD MSTORE DUP1 PUSH1 0x40 DUP6 ADD MLOAD AND PUSH1 0x40 DUP7 ADD MSTORE DUP1 PUSH1 0x60 DUP6 ADD MLOAD AND PUSH1 0x60 DUP7 ADD MSTORE POP POP PUSH1 0x80 DUP3 ADD MLOAD PUSH1 0xA0 PUSH1 0x80 DUP6 ADD MSTORE PUSH2 0x18A6 PUSH1 0xA0 DUP6 ADD DUP3 PUSH2 0xA050 JUMP JUMPDEST DUP1 MLOAD PUSH2 0xA15A DUP2 PUSH2 0xAC18 JUMP JUMPDEST DUP3 MSTORE PUSH1 0x20 DUP2 DUP2 ADD MLOAD PUSH1 0xFF AND SWAP1 DUP4 ADD MSTORE PUSH1 0x40 DUP1 DUP3 ADD MLOAD SWAP1 DUP4 ADD MSTORE PUSH1 0x60 SWAP1 DUP2 ADD MLOAD SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x60 SWAP2 SWAP1 SWAP2 SHL PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 MSTORE PUSH1 0x14 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP4 CALLDATACOPY SWAP2 ADD SWAP1 DUP2 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0xA1D7 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0xABE8 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND DUP2 MSTORE SWAP3 DUP5 AND PUSH1 0x20 DUP5 ADD MSTORE SWAP1 DUP4 AND PUSH1 0x40 DUP4 ADD MSTORE SWAP1 SWAP2 AND PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 DUP2 AND PUSH1 0x20 DUP4 ADD MSTORE DUP4 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x6BD6 SWAP1 DUP4 ADD DUP5 PUSH2 0xA021 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND DUP2 MSTORE SWAP3 DUP5 AND PUSH1 0x20 DUP5 ADD MSTORE SWAP3 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE SWAP1 ISZERO ISZERO PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE DUP3 ISZERO ISZERO PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x6BD6 SWAP1 DUP4 ADD DUP5 PUSH2 0xA050 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND DUP3 MSTORE DUP6 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0xA0 PUSH1 0x80 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0xA367 SWAP1 DUP4 ADD DUP5 PUSH2 0xA050 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND DUP2 MSTORE PUSH1 0x60 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0xA396 SWAP1 DUP4 ADD DUP6 PUSH2 0x9FDE JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x6BD6 DUP2 DUP6 PUSH2 0xA021 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP2 MSTORE PUSH1 0x0 PUSH2 0xA3BF DUP6 PUSH2 0xAC18 JUMP JUMPDEST DUP5 PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x80 PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0xA3D9 PUSH1 0x80 DUP4 ADD DUP6 PUSH2 0xA021 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0xA367 DUP2 DUP6 PUSH2 0xA021 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 DUP2 AND DUP3 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x100 SWAP1 PUSH2 0xA408 DUP12 PUSH2 0xAC18 JUMP JUMPDEST DUP11 PUSH1 0x20 DUP6 ADD MSTORE DUP2 PUSH1 0x40 DUP6 ADD MSTORE PUSH2 0xA420 DUP3 DUP6 ADD DUP12 PUSH2 0xA021 JUMP JUMPDEST SWAP2 POP DUP4 DUP3 SUB PUSH1 0x60 DUP6 ADD MSTORE PUSH2 0xA434 DUP3 DUP11 PUSH2 0xA021 JUMP JUMPDEST SWAP1 DUP9 AND PUSH1 0x80 DUP6 ADD MSTORE SWAP1 POP PUSH2 0xA447 DUP7 PUSH2 0xAC18 JUMP JUMPDEST DUP6 PUSH1 0xA0 DUP5 ADD MSTORE DUP3 DUP2 SUB PUSH1 0xC0 DUP5 ADD MSTORE PUSH2 0xA45F DUP2 DUP7 PUSH2 0xA021 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 SUB PUSH1 0xE0 DUP5 ADD MSTORE PUSH2 0xA473 DUP2 DUP6 PUSH2 0xA021 JUMP JUMPDEST SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND DUP2 MSTORE PUSH1 0x40 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x18A6 SWAP1 DUP4 ADD DUP5 PUSH2 0xA102 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x0 SWAP1 DUP5 PUSH1 0x40 DUP5 ADD DUP4 JUMPDEST DUP7 DUP2 LT ISZERO PUSH2 0xA4E9 JUMPI DUP3 CALLDATALOAD PUSH2 0xA4CE DUP2 PUSH2 0xAC22 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 MSTORE SWAP2 DUP4 ADD SWAP2 SWAP1 DUP4 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0xA4BB JUMP JUMPDEST POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 MSTORE PUSH2 0xA507 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x9FDE JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x1914 DUP2 DUP6 PUSH2 0xA021 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 MSTORE PUSH2 0xA52C PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x9FDE JUMP JUMPDEST SWAP1 POP DUP3 PUSH1 0x20 DUP4 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD PUSH1 0x60 DUP4 MSTORE DUP1 DUP7 MLOAD DUP1 DUP4 MSTORE PUSH1 0x80 DUP6 ADD SWAP2 POP PUSH1 0x20 SWAP3 POP PUSH1 0x80 DUP4 DUP3 MUL DUP7 ADD ADD DUP4 DUP10 ADD DUP6 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xA590 JUMPI PUSH1 0x7F NOT DUP9 DUP5 SUB ADD DUP6 MSTORE PUSH2 0xA57E DUP4 DUP4 MLOAD PUSH2 0xA050 JUMP JUMPDEST SWAP5 DUP7 ADD SWAP5 SWAP3 POP SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0xA562 JUMP JUMPDEST POP POP DUP6 DUP2 SUB DUP5 DUP8 ADD MSTORE PUSH2 0xA5A3 DUP2 DUP10 PUSH2 0xA021 JUMP JUMPDEST SWAP4 POP POP POP POP DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x6BD6 DUP2 DUP6 PUSH2 0xA021 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 PUSH1 0x40 SWAP1 DUP2 DUP6 ADD SWAP1 DUP1 DUP5 MUL DUP7 ADD DUP4 ADD DUP8 DUP6 ADD DUP7 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xA621 JUMPI DUP9 DUP4 SUB PUSH1 0x3F NOT ADD DUP6 MSTORE DUP2 MLOAD DUP1 MLOAD DUP8 DUP6 MSTORE PUSH2 0xA602 DUP9 DUP7 ADD DUP3 PUSH2 0xA050 JUMP JUMPDEST SWAP2 DUP10 ADD MLOAD ISZERO ISZERO SWAP5 DUP10 ADD SWAP5 SWAP1 SWAP5 MSTORE SWAP5 DUP8 ADD SWAP5 SWAP3 POP SWAP1 DUP7 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0xA5DE JUMP JUMPDEST POP SWAP1 SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x4523 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xA021 JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST DUP4 ISZERO ISZERO DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x60 PUSH1 0x40 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x1914 SWAP1 DUP4 ADD DUP5 PUSH2 0xA021 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP3 MSTORE PUSH1 0x60 PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0xA396 PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0xA050 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x4523 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xA050 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 MSTORE PUSH2 0xA52C PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0xA050 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH3 0xFFFFFF SWAP1 SWAP2 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND DUP2 MSTORE PUSH1 0x40 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x18A6 SWAP1 DUP4 ADD DUP5 PUSH2 0xA021 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH2 0xA71A DUP6 PUSH2 0xAC18 JUMP JUMPDEST SWAP4 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH1 0x8 DUP6 LT PUSH2 0xA71A JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH1 0xE0 DUP3 ADD PUSH2 0xA74B DUP8 PUSH2 0xABDD JUMP JUMPDEST DUP4 MSTORE PUSH1 0x20 PUSH1 0xE0 DUP2 DUP6 ADD MSTORE DUP2 DUP8 MLOAD PUSH2 0xA762 DUP2 DUP6 PUSH2 0xA679 JUMP JUMPDEST SWAP2 POP DUP2 SWAP4 POP DUP3 DUP2 MUL DUP3 ADD DUP4 DUP11 ADD DUP7 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xA79B JUMPI DUP7 DUP4 SUB DUP6 MSTORE PUSH2 0xA789 DUP4 DUP4 MLOAD PUSH2 0x9F94 JUMP JUMPDEST SWAP5 DUP7 ADD SWAP5 SWAP3 POP SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0xA771 JUMP JUMPDEST POP POP DUP7 DUP2 SUB PUSH1 0x40 DUP9 ADD MSTORE DUP1 SWAP5 POP DUP9 MLOAD SWAP3 POP PUSH2 0xA7B6 DUP4 DUP3 PUSH2 0xA679 JUMP JUMPDEST SWAP5 POP POP POP DUP2 DUP8 ADD DUP5 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0xA7E0 JUMPI PUSH2 0xA7D2 DUP6 DUP4 MLOAD PUSH2 0x9F83 JUMP JUMPDEST SWAP5 POP SWAP1 DUP4 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0xA7BF JUMP JUMPDEST POP POP POP POP DUP1 SWAP2 POP POP PUSH2 0x1914 PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0xA0AE JUMP JUMPDEST PUSH1 0xF SWAP4 DUP5 SIGNEXTEND DUP2 MSTORE SWAP2 SWAP1 SWAP3 SIGNEXTEND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0xF DUP4 SWAP1 SIGNEXTEND DUP2 MSTORE PUSH1 0x80 DUP2 ADD PUSH2 0x4523 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xA07C JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x24 SWAP1 DUP3 ADD MSTORE PUSH32 0x556E6973776170563353616D706C65722F746F6B656E5061746820746F6F2073 PUSH1 0x40 DUP3 ADD MSTORE PUSH4 0x1A1BDC9D PUSH1 0xE2 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x455243323042726964676553616D706C65722F494E56414C49445F544F4B454E PUSH1 0x40 DUP3 ADD MSTORE PUSH5 0x2FA820A4A9 PUSH1 0xD9 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x556E6973776170563353616D706C65722F696E76616C69642070617468206C65 PUSH1 0x40 DUP3 ADD MSTORE PUSH5 0x6E67746873 PUSH1 0xD8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA905 DUP3 DUP8 PUSH2 0xA07C JUMP JUMPDEST DUP5 PUSH1 0xF SIGNEXTEND PUSH1 0x60 DUP4 ADD MSTORE DUP4 PUSH1 0xF SIGNEXTEND PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xC0 PUSH1 0xA0 DUP4 ADD MSTORE PUSH2 0x6BD6 PUSH1 0xC0 DUP4 ADD DUP5 PUSH2 0xA021 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 MSTORE PUSH2 0xA93E PUSH1 0x60 DUP4 ADD DUP7 PUSH2 0xA0E3 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0xA950 DUP2 DUP7 PUSH2 0xA0E3 JUMP JUMPDEST SWAP2 POP POP DUP3 PUSH1 0x40 DUP4 ADD MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 MSTORE PUSH2 0xA974 PUSH1 0x80 DUP4 ADD DUP8 PUSH2 0xA102 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP6 DUP7 AND PUSH1 0x20 DUP5 ADD MSTORE SWAP4 SWAP1 SWAP5 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 MSTORE PUSH2 0xA9AA PUSH1 0x80 DUP4 ADD DUP8 PUSH2 0xA102 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP6 SWAP1 SWAP6 MSTORE POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x40 DUP3 ADD MSTORE SWAP2 AND PUSH1 0x60 SWAP1 SWAP2 ADD MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x220 DUP3 ADD SWAP1 POP PUSH2 0xA9E4 DUP3 DUP7 MLOAD PUSH2 0x9FD1 JUMP JUMPDEST PUSH1 0x20 DUP6 ADD MLOAD PUSH2 0xA9F6 PUSH1 0x20 DUP5 ADD DUP3 PUSH2 0x9FD1 JUMP JUMPDEST POP PUSH1 0x40 DUP6 ADD MLOAD PUSH2 0xAA09 PUSH1 0x40 DUP5 ADD DUP3 PUSH2 0xA17E JUMP JUMPDEST POP PUSH1 0x60 DUP6 ADD MLOAD PUSH2 0xAA1C PUSH1 0x60 DUP5 ADD DUP3 PUSH2 0xA17E JUMP JUMPDEST POP PUSH1 0x80 DUP6 ADD MLOAD PUSH2 0xAA2F PUSH1 0x80 DUP5 ADD DUP3 PUSH2 0xA17E JUMP JUMPDEST POP PUSH1 0xA0 DUP6 ADD MLOAD PUSH2 0xAA42 PUSH1 0xA0 DUP5 ADD DUP3 PUSH2 0x9FD1 JUMP JUMPDEST POP PUSH1 0xC0 DUP6 ADD MLOAD PUSH2 0xAA55 PUSH1 0xC0 DUP5 ADD DUP3 PUSH2 0x9FD1 JUMP JUMPDEST POP PUSH1 0xE0 DUP6 ADD MLOAD PUSH2 0xAA68 PUSH1 0xE0 DUP5 ADD DUP3 PUSH2 0x9FD1 JUMP JUMPDEST POP PUSH2 0x100 DUP1 DUP7 ADD MLOAD PUSH2 0xAA7C DUP3 DUP6 ADD DUP3 PUSH2 0x9FD1 JUMP JUMPDEST POP POP PUSH2 0x120 DUP6 DUP2 ADD MLOAD SWAP1 DUP4 ADD MSTORE PUSH2 0x140 DUP1 DUP7 ADD MLOAD PUSH2 0xAA9C DUP3 DUP6 ADD DUP3 PUSH2 0xA18B JUMP JUMPDEST POP POP PUSH2 0x160 DUP6 DUP2 ADD MLOAD SWAP1 DUP4 ADD MSTORE PUSH2 0xAAB7 PUSH2 0x180 DUP4 ADD DUP6 PUSH2 0xA14F JUMP JUMPDEST PUSH2 0x18A6 PUSH2 0x200 DUP4 ADD DUP5 PUSH2 0x9FD1 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP3 MSTORE PUSH1 0x40 PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x18A6 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x9FDE JUMP JUMPDEST PUSH1 0x0 DUP5 DUP3 MSTORE PUSH1 0x60 PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0xAAF7 PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0x9FDE JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x6BD6 DUP2 DUP6 PUSH2 0x9FDE JUMP JUMPDEST SWAP6 DUP7 MSTORE PUSH1 0x20 DUP7 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0x40 DUP6 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH1 0x1E NOT DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0xAB47 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 ADD DUP1 CALLDATALOAD SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0xAB60 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x20 ADD SWAP2 POP CALLDATASIZE DUP2 SWAP1 SUB DUP3 SGT ISZERO PUSH2 0x8A55 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0xAB93 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0xABB0 JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0xABCF JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST DUP1 PUSH1 0x2 DUP2 LT PUSH2 0x1245 JUMPI INVALID JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xAC03 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xABEB JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0xAC12 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x4 DUP2 LT PUSH2 0x10DD JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x10DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x10DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0xF SIGNEXTEND DUP2 EQ PUSH2 0x10DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x10DD JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x4A 0xA5 0xB7 KECCAK256 0xDE 0xD5 ISZERO 0xAB 0xC PUSH15 0x4021003DC25F17ADB6F2219D6F2DF2 SWAP7 GAS AND CALLDATALOAD 0x2E 0xBB DUP12 PUSH5 0x736F6C6343 STOP MOD 0xC STOP CALLER ",
                "sourceMapi;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1948:1154:9;;;;;;;;;;-1:-1:-1;1948:1154:9;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;4230:977:17:-;;;;;;;;;;-1:-1:-1;4230:977:17;;;;;:::i;:::-;;:::i;3722:98:38:-;;;:::i;:::-;;1551:1290:3;;;;;;;;;;-1:-1:-1;1551:1290:3;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;:::i;2195:196:25:-;;;;;;;;;;-1:-1:-1;2195:196:25;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;12094:62:38:-;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;2131:1734:2:-;;;;;;;;;;-1:-1:-1;2131:1734:2;;;;;:::i;:::-;;:::i;4274:2338:22:-;;;;;;;;;;-1:-1:-1;4274:2338:22;;;;;:::i;:::-;;:::i;12029:59:38:-;;;;;;;;;;;;;:::i;3549:919:14:-;;;;;;;;;;-1:-1:-1;3549:919:14;;;;;:::i;:::-;;:::i;4133:670:20:-;;;;;;;;;;-1:-1:-1;4133:670:20;;;;;:::i;:::-;;:::i;1936:1742:6:-;;;;;;;;;;-1:-1:-1;1936:1742:6;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;:::i;1410:1411:16:-;;;;;;;;;;-1:-1:-1;1410:1411:16;;;;;:::i;:::-;;:::i;1382:1092:13:-;;;;;;;;;;-1:-1:-1;1382:1092:13;;;;;:::i;:::-;;:::i;1214:988:23:-;;;;;;;;;;-1:-1:-1;1214:988:23;;;;;:::i;:::-;;:::i;12617:147:38:-;;;;;;;;;;-1:-1:-1;12617:147:38;;;;;:::i;:::-;;:::i;2429:755:11:-;;;;;;;;;;-1:-1:-1;2429:755:11;;;;;:::i;:::-;;:::i;1731:1130:5:-;;;;;;;;;;-1:-1:-1;1731:1130:5;;;;;:::i;:::-;;:::i;2503:120:25:-;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;3526:1138:9:-;;;;;;;;;;-1:-1:-1;3526:1138:9;;;;;:::i;:::-;;:::i;4509:2595:10:-;;;;;;;;;;-1:-1:-1;4509:2595:10;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;2397:100:25:-;;;;;;;;;;;;;:::i;3707:2106:24:-;;;;;;;;;;-1:-1:-1;3707:2106:24;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;:::i;4265:2355:1:-;;;;;;;;;;-1:-1:-1;4265:2355:1;;;;;:::i;:::-;;:::i;6285:2513:24:-;;;;;;;;;;-1:-1:-1;6285:2513:24;;;;;:::i;:::-;;:::i;2751:583:19:-;;;;;;;;;;-1:-1:-1;2751:583:19;;;;;:::i;:::-;;:::i;5648:955:17:-;;;;;;;;;;-1:-1:-1;5648:955:17;;;;;:::i;:::-;;:::i;2219:474:8:-;;;;;;;;;;-1:-1:-1;2219:474:8;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;946:381:25:-;;;;;;;;;;-1:-1:-1;946:381:25;;;;;:::i;:::-;;:::i;3416:313:3:-;;;;;;;;;;-1:-1:-1;3416:313:3;;;;;:::i;:::-;;:::i;4474:920:14:-;;;;;;;;;;-1:-1:-1;4474:920:14;;;;;:::i;:::-;;:::i;1621:2080:20:-;;;;;;;;;;-1:-1:-1;1621:2080:20;;;;;:::i;:::-;;:::i;888:1649:21:-;;;;;;;;;;-1:-1:-1;888:1649:21;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;:::i;3287:1650:5:-;;;;;;;;;;-1:-1:-1;3287:1650:5;;;;;:::i;:::-;;:::i;1764:2076:1:-;;;;;;;;;;-1:-1:-1;1764:2076:1;;;;;:::i;:::-;;:::i;12820:327:38:-;;;;;;;;;;-1:-1:-1;12820:327:38;;;;;:::i;:::-;;:::i;3464:1039:10:-;;;;;;;;;;-1:-1:-1;3464:1039:10;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;:::i;2424:1290:15:-;;;;;;;;;;-1:-1:-1;2424:1290:15;;;;;:::i;:::-;;:::i;4281:1535:2:-;;;;;;;;;;-1:-1:-1;4281:1535:2;;;;;:::i;:::-;;:::i;12162:47:38:-;;;;;;;;;;;;;:::i;1540:1205:12:-;;;;;;;;;;-1:-1:-1;1540:1205:12;;;;;:::i;:::-;;:::i;2025:1175:7:-;;;;;;;;;;-1:-1:-1;2025:1175:7;;;;;:::i;:::-;;:::i;1246:1136:4:-;;;;;;;;;;-1:-1:-1;1246:1136:4;;;;;:::i;:::-;;:::i;1432:986:15:-;;;;;;;;;;-1:-1:-1;1432:986:15;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;2894:593:13:-;;;;;;;;;;-1:-1:-1;2894:593:13;;;;;:::i;:::-;;:::i;1333:415:25:-;;;;;;;;;;-1:-1:-1;1333:415:25;;;;;:::i;:::-;;:::i;3202:653:12:-;;;;;;;;;;-1:-1:-1;3202:653:12;;;;;:::i;:::-;;:::i;1572:2343:22:-;;;;;;;;;;-1:-1:-1;1572:2343:22;;;;;:::i;:::-;;:::i;2553:972:23:-;;;;;;;;;;-1:-1:-1;2553:972:23;;;;;:::i;:::-;;:::i;1770:1175:10:-;;;;;;;;;;-1:-1:-1;1770:1175:10;;;;;:::i;:::-;;:::i;3591:92:38:-;;;;;;;;;;;;;:::i;3797:1026:7:-;;;;;;;;;;-1:-1:-1;3797:1026:7;;;;;:::i;:::-;;:::i;4221:1750:6:-;;;;;;;;;;-1:-1:-1;4221:1750:6;;;;;:::i;:::-;;:::i;1754:435:25:-;;;;;;;;;;-1:-1:-1;1754:435:25;;;;;:::i;:::-;;:::i;1440:887:19:-;;;;;;;;;;-1:-1:-1;1440:887:19;;;;;:::i;:::-;;:::i;7885:1337:10:-;;;;;;;;;;-1:-1:-1;7885:1337:10;;;;;:::i;:::-;;:::i;4189:904:15:-;;;;;;;;;;-1:-1:-1;4189:904:15;;;;;:::i;:::-;;:::i;2543:1848:21:-;;;;;;;;;;-1:-1:-1;2543:1848:21;;;;;:::i;:::-;;:::i;2388:1130:4:-;2680:24;;2609:34;;2680:24;-1:-1:-1;;;;;2734:25:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2734:25:4;;2714:45;;2850:20;2873:6;-1:-1:-1;;;;;2873:25:4;;:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2850:50;;2910:22;2943:6;-1:-1:-1;;;;;2943:15:4;;:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2935:26;;2910:51;;3007:6;-1:-1:-1;;;;;2976:38:4;2984:10;-1:-1:-1;;;;;2976:38:4;;2972:540;;;3055:9;3050:179;3074:10;3070:1;:14;3050:179;;;3199:14;3193:2;:20;1235:4;3171:42;3155:12;3132:17;3150:1;3132:20;;;;;;;;;;;;;;:35;:82;;;;;;3109:17;3127:1;3109:20;;;;;;;;;;;;;;;;;:105;3086:3;;3050:179;;;;2972:540;;;3280:6;-1:-1:-1;;;;;3249:38:4;3257:10;-1:-1:-1;;;;;3249:38:4;;3245:267;;;3330:9;3325:177;3349:10;3345:1;:14;3325:177;;;3475:12;3459:14;3453:2;:20;1235:4;3408:17;3426:1;3408:20;;;;;;;;;;;;;;:42;:65;3407:80;;;;;;3384:17;3402:1;3384:20;;;;;;;;;;;;;;;;;:103;3361:3;;3325:177;;;;3245:267;2388:1130;;;;;;;;;:::o;1948:1154:9:-;2226:24;;2131:22;;;;2226:24;-1:-1:-1;;;;;2280:25:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2280:25:9;;2260:45;;2323:31;2341:6;2349:4;2323:17;:31::i;:::-;2315:39;;2368:5;:12;2384:1;2368:17;2364:81;;;2401:33;;;2364:81;2459:9;2454:642;2478:10;2474:1;:14;2454:642;;;2545:6;-1:-1:-1;;;;;2529:37:9;;1507:5;2634:17;2652:1;2634:20;;;;;;;;;;;;;;2656:5;2663:4;2529:139;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;2529:139:9;;;;;;;;;;;;:::i;:::-;;;2509:577;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3066:5;;;2509:577;2773:7;2795:1;2781:4;:11;:15;2773:24;;;;;;;;;;;;;;2750:17;2768:1;2750:20;;;;;;;;;;;;;:47;;;;;2873:17;2891:1;2873:20;;;;;;;;;;;;;;2897:1;2873:25;2869:77;;;2922:5;;;2869:77;2685:275;2490:3;;2454:642;;;;1948:1154;;;;;;;;:::o;4230:977:17:-;4457:47;4567:6;:13;-1:-1:-1;;;;;4553:28:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4553:28:17;;4520:61;;4596:9;4591:610;4616:6;:13;4611:1;:18;4591:610;;4670:4;-1:-1:-1;;;;;4670:37:17;;3715:5;4797:6;4804:1;4797:9;;;;;;;;;;;;;;4831:15;4847:1;4831:18;;;;;;;;;;;;;;4874:8;4670:234;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4670:234:17;;;;;;;;-1:-1:-1;;4670:234:17;;;;;;;;;;;;:::i;:::-;;;4650:541;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5175:1;5139:30;5170:1;5139:33;;;;;;;;;;;;;:37;;;;;5034:157;4650:541;;;5012:6;4976:30;5007:1;4976:33;;;;;;;;;;;;;:42;;;;;4921:112;4650:541;4631:3;;4591:610;;;;4230:977;;;;;:::o;3722:98:38:-;3778:35;;3641:42;;3803:9;3778:35;;;;;;;;;3803:9;3641:42;3778:35;;;;;;;;;;;;;;;;;;;;;3722:98::o;1551:1290:3:-;1772:21;1795;1818:34;1872:4;:10;;;:17;1893:1;1872:22;1868:100;;;1910:47;;1868:100;2001:62;2015:4;2021:10;2033;2045:17;2001:13;:62::i;:::-;2107:24;;1977:86;;-1:-1:-1;1977:86:3;-1:-1:-1;;;;;;2093:39:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2093:39:3;;2073:59;;2148:9;2143:635;2167:17;:24;2163:1;:28;2143:635;;;2247:13;-1:-1:-1;;;;;2232:61:3;;873:5;2366:4;2372:17;2390:1;2372:20;;;;;;;;;;;;;;2232:161;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2232:161:3;;;;;;;;-1:-1:-1;;2232:161:3;;;;;;;;;;;;:::i;:::-;;;2212:556;;2748:5;;2212:556;2488:6;2465:17;2483:1;2465:20;;;;;;;;;;;;;:29;;;;;2570:17;2588:1;2570:20;;;;;;;;;;;;;;2594:1;2570:25;2566:77;;;2619:5;;;2566:77;2410:247;2193:3;;2143:635;;;;1551:1290;;;;;;;;;:::o;2195:196:25:-;2338:20;;2376:8;;2195:196;;;;:::o;12094:62:38:-;;;-1:-1:-1;;;;;12094:62:38;;:::o;2131:1734:2:-;2348:34;2398:40;2415:10;2427;2398:16;:40::i;:::-;2490:14;;;;2544:15;;;2557:1;2544:15;;;2515:26;2544:15;;;;;;;;;;;;;;;;;;-1:-1:-1;2544:15:2;2515:44;;2592:10;2569;2580:1;2569:13;;;;;;;;;;;;;:34;-1:-1:-1;;;;;2569:34:2;;;-1:-1:-1;;;;;2569:34:2;;;;;2636:10;2613;2624:1;2613:13;;;;;;;;-1:-1:-1;;;;;2613:34:2;;;:13;;;;;;;;;;;:34;2679:24;;;-1:-1:-1;;;;;2733:25:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2733:25:2;;2713:45;;2768:48;;:::i;:::-;2831:18;:16;:18::i;:::-;2768:81;;2865:9;2860:999;2884:10;2880:1;:14;2860:999;;;2915:49;2983:48;3000:8;3010:17;3028:1;3010:20;;;;;;;;;;;;;;2983:16;:48::i;:::-;3173:90;;-1:-1:-1;;;3173:90:2;;2915:116;;-1:-1:-1;;;;;;3173:20:2;;;;;:90;;3194:34;;2915:116;;3241:10;;3253:9;;3173:90;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;3173:90:2;;;;;;;;;;;;:::i;:::-;;;3046:803;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3829:5;;;;3046:803;3508:24;3535:7;3543:1;3535:10;;;;;;;;;;;;;;-1:-1:-1;;3535:15:2;3508:42;;3593:1;3572:17;:22;3568:74;;3618:5;;;;;3568:74;3690:17;3659;3677:1;3659:20;;;;;;;;;;;;;:49;;;;;3380:343;;-1:-1:-1;2896:3:2;;2860:999;;;;2131:1734;;;;;;;;;;:::o;4274:2338:22:-;4480:34;4530:40;4547:10;4559;4530:16;:40::i;:::-;4601:24;;;-1:-1:-1;;;;;4655:25:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4655:25:22;-1:-1:-1;4635:45:22;-1:-1:-1;4691:41:22;-1:-1:-1;;;;;4735:24:22;;;:106;;4802:39;4822:6;4830:10;4802:19;:39::i;:::-;4735:106;;;4797:1;4735:106;4691:150;-1:-1:-1;4851:41:22;-1:-1:-1;;;;;4895:24:22;;;:106;;4962:39;4982:6;4990:10;4962:19;:39::i;:::-;4895:106;;;4957:1;4895:106;4851:150;;5016:9;5011:1595;5035:10;5031:1;:14;5011:1595;;;5084:4;-1:-1:-1;;;;;5106:24:22;;5102:1353;;5187:216;5250:18;5291:52;;;5365:17;5383:1;5365:20;;;;;;;;;;;;;;5187:33;:216::i;:::-;5151:17;5169:1;5151:20;;;;;;;;;;;;;5150:253;;;;;;;;;5102:1353;;;-1:-1:-1;;;;;5428:24:22;;5424:1031;;5509:216;5572:18;5613:52;;;5687:17;5705:1;5687:20;;;;;;;5424:1031;5764:15;5821:216;5884:18;5925:52;;;5999:17;6017:1;5999:20;;;;;;;5821:216;5797:240;-1:-1:-1;5797:240:22;-1:-1:-1;6059:12:22;;6055:386;;6132:219;6199:18;-1:-1:-1;;;6322:7:22;6132:33;:219::i;:::-;6096:17;6114:1;6096:20;;;;;;;;;;;;;6095:256;;;;;;;;;6055:386;;;6421:1;6398:17;6416:1;6398:20;;;;;;;;;;;;;:24;;;;;6055:386;5424:1031;;6517:10;6516:11;:40;;;;6531:17;6549:1;6531:20;;;;;;;;;;;;;;6555:1;6531:25;6516:40;6512:84;;;6576:5;;;6512:84;-1:-1:-1;5047:3:22;;5011:1595;;12029:59:38;;;-1:-1:-1;;;;;12029:59:38;;:::o;3549:919:14:-;3770:34;3820:40;3837:10;3849;3820:16;:40::i;:::-;3870:8;3886:7;:18;;;3870:35;;3915:8;3931:3;-1:-1:-1;;;;;3931:7:14;;:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3974:24;;3915:26;;-1:-1:-1;3974:24:14;-1:-1:-1;;;;;4028:25:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4028:25:14;;4008:45;;4082:3;-1:-1:-1;;;;;4082:7:14;;:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;4068:23:14;:10;-1:-1:-1;;;;;4068:23:14;;;:50;;;;;4109:3;-1:-1:-1;;;;;4109:7:14;;:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;4095:23:14;:10;-1:-1:-1;;;;;4095:23:14;;;4068:50;4064:105;;;4134:24;;;;;4064:105;4184:9;4179:283;4203:10;4199:1;:14;4179:283;;;4234:17;4254:79;4269:7;4278:10;4290;4302:17;4320:1;4302:20;;;;;;;;;;;;;;4324:3;4329;4254:14;:79::i;:::-;4234:99;-1:-1:-1;4352:14:14;4348:58;;4386:5;;;4348:58;4442:9;4419:17;4437:1;4419:20;;;;;;;;;;;;;;;;;:32;-1:-1:-1;4215:3:14;;4179:283;;3549:919;;;;;;;:::o;4133:670:20:-;4497:258;;;4355:34;4497:258;;;;;;4461:335;;4497:258;4555:35;4566:10;4578:11;4555:35;;;;:::i;:::-;;;;;;;;;;;;;4497:258;;;;4635:12;4649:11;4624:37;;;;;;;;;:::i;:::-;;;;;;;;;;;;;4497:258;;;;4701:39;4497:258;;;4769:17;4461:22;:335::i;:::-;4454:342;4133:670;-1:-1:-1;;;;;4133:670:20:o;1936:1742:6:-;2153:13;2168:12;2182:34;2232:40;2249:10;2261;2232:16;:40::i;:::-;2303:24;;;-1:-1:-1;;;;;2357:25:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2357:25:6;-1:-1:-1;2409:13:6;;2400:55;;-1:-1:-1;;;2400:55:6;;2337:45;;-1:-1:-1;;;;;;2400:31:6;;;;:55;;2432:10;;2444;;2400:55;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2393:62;-1:-1:-1;2465:17:6;-1:-1:-1;;;;;2562:18:6;;;2558:420;;-1:-1:-1;2643:4:6;;-1:-1:-1;2608:10:6;2558:420;;;2694:13;;2685:55;;-1:-1:-1;;;2685:55:6;;-1:-1:-1;;;;;2685:31:6;;;;;;:55;;2717:10;;2729;;2685:55;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2678:62;-1:-1:-1;;;;;;2798:27:6;;2794:108;;2845:42;;;;2794:108;-1:-1:-1;2962:5:6;;-1:-1:-1;2927:10:6;2558:420;3038:4;-1:-1:-1;;;;;3032:27:6;;:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3027:103;;3077:42;;;;3027:103;3145:9;3140:532;3164:10;3160:1;:14;3140:532;;;3195:17;3215:268;3280:10;3292:4;3298:9;3309:4;:11;;;3269:52;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;3370:10;3382:4;3388:9;3399:4;:11;;;3359:52;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;3449:17;3467:1;3449:20;;;;;;;;;;;;;;3215:36;:268::i;:::-;3195:288;;3520:9;3497:17;3515:1;3497:20;;;;;;;;;;;;;:32;;;;;3597:17;3615:1;3597:20;;;;;;;;;;;;;;3621:1;3597:25;3593:69;;;3642:5;;;3593:69;-1:-1:-1;3176:3:6;;3140:532;;;;1936:1742;;;;;;;;;;:::o;1410:1411:16:-;1784:24;;1661:34;;1784:24;-1:-1:-1;;;;;1838:25:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1838:25:16;-1:-1:-1;1818:45:16;-1:-1:-1;;;;;;1931:25:16;;1927:80;;1972:24;;;1927:80;2022:9;2017:798;2041:10;2037:1;:14;2017:798;;;2073:15;2090:23;2133:11;-1:-1:-1;;;;;2133:22:16;851:5;2247:37;;;2310:10;2346:17;2389:10;2425:17;2443:1;2425:20;;;;;;;;;;;;;;2199:268;;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;2199:268:16;;;;;;;;;;;;;;-1:-1:-1;;;;;2199:268:16;-1:-1:-1;;;;;;2199:268:16;;;;;;;;;;2133:335;;;;2199:268;2133:335;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2072:396;;;;2482:17;2521:10;2517:94;;;2574:10;2563:33;;;;;;;;;;;;:::i;:::-;2551:45;;2517:94;2704:14;2700:58;;2738:5;;;;;2700:58;2795:9;2772:17;2790:1;2772:20;;;;;;;;;;;;;;;;;:32;-1:-1:-1;;;2053:3:16;;2017:798;;;;1410:1411;;;;;;;;:::o;1382:1092:13:-;1589:34;1639:40;1656:10;1668;1639:16;:40::i;:::-;1762:24;;;-1:-1:-1;;;;;1816:25:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1816:25:13;;1796:45;;1857:9;1852:616;1876:10;1872:1;:14;1852:616;;;1936:6;-1:-1:-1;;;;;1927:30:13;;940:5;2023:10;2035;2047:17;2065:1;2047:20;;;;;;;;;;;;;;1927:141;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1927:141:13;;;;;;;;-1:-1:-1;;1927:141:13;;;;;;;;;;;;:::i;:::-;;;1907:551;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2438:5;;;1907:551;2163:6;2140:17;2158:1;2140:20;;;;;;;;;;;;;:29;;;;;2245:17;2263:1;2245:20;;;;;;;;;;;;;;2269:1;2245:25;2241:77;;;2294:5;;;2241:77;2085:247;1888:3;;1852:616;;;;1382:1092;;;;;;;:::o;1214:988:23:-;1469:24;;1398:34;;1469:24;-1:-1:-1;;;;;1523:25:23;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1523:25:23;;1503:45;;1563:9;1558:638;1582:10;1578:1;:14;1558:638;;;1652:6;-1:-1:-1;;;;;1633:40:23;;846:5;1741:17;1759:1;1741:20;;;;;;;;;;;;;;1763:4;1633:135;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1633:135:23;;;;;;;;;;;;:::i;:::-;;;1613:573;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2166:5;;;1613:573;1873:7;1895:1;1881:4;:11;:15;1873:24;;;;;;;;;;;;;;1850:17;1868:1;1850:20;;;;;;;;;;;;;:47;;;;;1973:17;1991:1;1973:20;;;;;;;;;;;;;;1997:1;1973:25;1969:77;;;2022:5;;;1969:77;1785:275;1594:3;;1558:638;;;;1214:988;;;;;;:::o;12617:147:38:-;12713:7;;:44;;-1:-1:-1;;;12713:44:38;;-1:-1:-1;;;;;12713:7:38;;;;:28;;:44;;12742:14;;;;12713:44;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12617:147;;:::o;2429:755:11:-;2642:16;2674:40;2691:10;2703;2674:16;:40::i;:::-;2743:8;:18;;;-1:-1:-1;;;;;2729:32:11;:10;-1:-1:-1;;;;;2729:32:11;;;:78;;;-1:-1:-1;2787:19:11;;-1:-1:-1;;;;;2765:42:11;;;;;;;2729:78;2725:328;;;2904:24;;2942:34;2904:24;-1:-1:-1;;;;;2979:25:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2979:25:11;-1:-1:-1;2942:62:11;-1:-1:-1;3018:24:11;;-1:-1:-1;;3018:24:11;1731:1130:5;2019:24;;1948:34;;2019:24;-1:-1:-1;;;;;2073:25:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2073:25:5;;2053:45;;2113:9;2108:747;2132:10;2128:1;:14;2108:747;;;2164:15;2181:23;2224:9;:21;;;-1:-1:-1;;;;;2224:32:5;1243:6;2346:9;:35;;;2407:12;2445:10;2481:17;2499:1;2481:20;;;;;;;;;;;;;;2298:225;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;2298:225:5;;;;;;;;;;;;;;-1:-1:-1;;;;;2298:225:5;-1:-1:-1;;;;;;2298:225:5;;;;;;;;;;2224:300;;;;2298:225;2224:300;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2163:361;;;;2538:17;2577:10;2573:94;;;2630:10;2619:33;;;;;;;;;;;;:::i;:::-;2607:45;;2573:94;2703:9;2680:17;2698:1;2680:20;;;;;;;;;;;;;:32;;;;;2780:17;2798:1;2780:20;;;;;;;;;;;;;;2804:1;2780:25;2776:69;;;2825:5;;;;;2776:69;-1:-1:-1;;;2144:3:5;;2108:747;;2503:120:25;2604:12;2503:120;:::o;3526:1138:9:-;3803:24;;3708:22;;;;3803:24;-1:-1:-1;;;;;3857:25:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3857:25:9;;3837:45;;3900:31;3918:6;3926:4;3900:17;:31::i;:::-;3892:39;;3945:5;:12;3961:1;3945:17;3941:81;;;3978:33;;;3941:81;4036:9;4031:627;4055:10;4051:1;:14;4031:627;;;4122:6;-1:-1:-1;;;;;4106:36:9;;1507:5;4210:17;4228:1;4210:20;;;;;;;;;;;;;;4232:5;4239:4;4106:138;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;4106:138:9;;;;;;;;;;;;:::i;:::-;;;4086:562;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4349:7;4357:1;4349:10;;;;;;;;;;;;;;4326:17;4344:1;4326:20;;;;;;;;;;;;;:33;;;;;4435:17;4453:1;4435:20;;;;;;;;;;;;;;4459:1;4435:25;4431:77;;;4484:5;;;4431:77;4261:261;4067:3;;4031:627;;4509:2595:10;4840:16;;;;;4967;;;4981:1;4967:16;;;;;;;;;4706:17;;;;4981:1;4967:16;;;;4840;4967;;;;;-1:-1:-1;4967:16:10;4931:52;;5015:9;4993:16;5010:1;4993:19;;;;;;;;;;;;;;;;;:31;5034:28;5079:1;5065:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5065:16:10;;5034:47;;5110:4;:9;;;-1:-1:-1;;;;;5096:23:10;:10;-1:-1:-1;;;;;5096:23:10;;5092:2006;;;5183:289;;-1:-1:-1;;;5183:289:10;;-1:-1:-1;;;;;5183:29:10;;;;;931:5;;5183:289;;5301:10;;5337:34;;5397:16;;5439:11;;5183:289;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;5183:289:10;;;;;;;;;;;;:::i;:::-;;;5163:517;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5578:102;5163:517;;;5556:6;-1:-1:-1;5549:13:10;;-1:-1:-1;;;5549:13:10;5163:517;5092:2006;;;5714:4;:9;;;-1:-1:-1;;;;;5700:23:10;:10;-1:-1:-1;;;;;5700:23:10;;5696:1402;;;5787:289;;-1:-1:-1;;;5787:289:10;;-1:-1:-1;;;;;5787:29:10;;;;;931:5;;5787:289;;5905:10;;5941:34;;6001:16;;6043:11;;5787:289;;;:::i;5696:1402::-;6414:466;;-1:-1:-1;;;6414:466:10;;-1:-1:-1;;;;;6414:31:10;;;;;931:5;;6414:466;;6534:10;;6570:34;;6630:16;;6672:11;;6709:10;;6570:34;;6630:16;;6672:11;;6414:466;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;6414:466:10;;;;;;;;;;;;:::i;:::-;;;6394:694;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6986:102;6394:694;;2397:100:25;2451:7;2481:9;2474:16;;2397:100;:::o;3707:2106:24:-;3909:27;3950:31;3995:34;4054:35;4104:45;4123:6;-1:-1:-1;;;;;4123:14:24;;:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4141:4;4147:1;4104:18;:45::i;:::-;4054:95;;4194:17;:24;-1:-1:-1;;;;;4180:39:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4180:39:24;;4160:59;;4256:17;:24;-1:-1:-1;;;;;4244:37:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4229:52;;4322:17;:24;-1:-1:-1;;;;;4308:39:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4308:39:24;;4291:56;;4363:9;4358:1449;4382:17;:24;4378:1;:28;4358:1449;;;4483:20;4526:9;4521:837;4545:9;:16;4541:1;:20;4521:837;;;4586:24;4613:34;4628:4;4634:9;4644:1;4634:12;;;;;;;;;;;;;;4613:14;:34::i;:::-;4586:61;;4669:6;-1:-1:-1;;;;;4669:22:24;;3226:5;4752:11;4765:17;4783:1;4765:20;;;;;;;;;;;;;;4669:117;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;4669:117:24;;;;;;;;;;;;:::i;:::-;;;4665:679;;;;;5125:9;5109:12;:25;5105:212;;5177:9;5162:24;;5230:11;5212:12;5225:1;5212:15;;;;;;;;;;;;;:29;;;;5287:7;5267:14;5282:1;5267:17;;;;;;;;;;;;;:27;;;;;5105:212;4807:528;;;;4665:679;-1:-1:-1;4563:3:24;;4521:837;;;-1:-1:-1;5434:17:24;5430:318;;5651:20;;;;;;;;;;;;:12;5664:1;5651:15;;;;;;;;;;;;;:20;;;;5709:1;5689:14;5704:1;5689:17;;;;;;;;;;;;;:21;;;;;5728:5;;;5430:318;5784:12;5761:17;5779:1;5761:20;;;;;;;;;;;;;;;;;:35;-1:-1:-1;4408:3:24;;4358:1449;;;;3707:2106;;;;;;;;:::o;4265:2355:1:-;4597:24;;4477:34;;4554:11;;4597:24;-1:-1:-1;;;;;4651:25:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4651:25:1;-1:-1:-1;4691:24:1;;-1:-1:-1;;;4691:24:1;;4631:45;;-1:-1:-1;;;;;;4691:12:1;;;;;:24;;4704:10;;4691:24;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4690:25;:54;;;-1:-1:-1;4720:24:1;;-1:-1:-1;;;4720:24:1;;-1:-1:-1;;;;;4720:12:1;;;;;:24;;4733:10;;4720:24;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4719:25;4690:54;4686:109;;;4760:24;;;;4686:109;4805:30;;:::i;:::-;4875:27;;-1:-1:-1;;;4875:27:1;;-1:-1:-1;;;;;4875:15:1;;;;;:27;;4891:10;;4875:27;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4845:57;;4942:27;;-1:-1:-1;;;4942:27:1;;-1:-1:-1;;;;;4942:15:1;;;;;:27;;4958:10;;4942:27;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4912;;;:57;5008:38;;-1:-1:-1;;;5008:38:1;;-1:-1:-1;;;;;5008:26:1;;;;;:38;;5035:10;;5008:38;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4979:26;;;;:67;;;;5085:38;-1:-1:-1;;;5085:38:1;;-1:-1:-1;;;;;5085:26:1;;;;;:38;;5112:10;;5085:38;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;5056:9;:26;;:67;;;;;5153:4;-1:-1:-1;;;;;5153:15:1;;:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;5133;;;:37;5186:9;5181:1433;5205:10;5201:1;:14;5181:1433;;;5407:49;5413:9;:27;;;1127:1;1010:8;1120;;;;;;1132:5;1119:18;5407:5;:49::i;:::-;5384:17;5402:1;5384:20;;;;;;;;;;;;;;:72;5380:116;;;5476:5;;5380:116;5529:4;-1:-1:-1;;;;;5529:19:1;;840:5;5640:9;:27;;;5693:9;:26;;;5745:9;:27;;;5798:9;:26;;;5850:17;5868:1;5850:20;;;;;;;;;;;;;;5896:9;:17;;;5529:406;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5529:406:1;;;;;;;;-1:-1:-1;;5529:406:1;;;;;;;;;;;;:::i;:::-;;;5509:1095;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6584:5;;;5509:1095;6178:27;;6172:48;;1071:1;1010:8;1064;;6172:5;:48::i;:::-;6163:6;:57;6159:109;;;6244:5;;;6159:109;6309:6;6286:17;6304:1;6286:20;;;;;;;;;;;;;:29;;;;;6391:17;6409:1;6391:20;;;;;;;;;;;;;;6415:1;6391:25;6387:77;;;6440:5;;;6387:77;5952:526;5217:3;;5181:1433;;6285:2513:24;6486:27;6527:31;6572:34;6631:35;6681:45;6700:6;-1:-1:-1;;;;;6700:14:24;;:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6681:45;6631:95;;6736:36;6775:23;6793:4;6775:17;:23::i;:::-;6736:62;;6843:17;:24;-1:-1:-1;;;;;6829:39:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;6829:39:24;;6809:59;;6905:17;:24;-1:-1:-1;;;;;6893:37:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6878:52;;6971:17;:24;-1:-1:-1;;;;;6957:39:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;6957:39:24;;6940:56;;7012:9;7007:1785;7031:17;:24;7027:1;:28;7007:1785;;;7132:21;7176:9;7171:1171;7195:9;:16;7191:1;:20;7171:1171;;;7301:24;7328:118;7364:12;7398:30;7415:9;7425:1;7415:12;;;;;;;;;;;;;;7398:16;:30::i;:::-;7328:14;:118::i;:::-;7301:145;;7488:6;-1:-1:-1;;;;;7488:23:24;;3226:5;7580:11;7593:17;7611:1;7593:20;;;;;;;;;;;;;;7488:126;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;7488:126:24;;;;;;;;;;;;:::i;:::-;;;7464:864;;;;;7962:18;;;:49;;;8001:10;7984:13;:27;;7962:49;7958:343;;;8055:10;8039:26;;8191:34;8206:4;8212:9;8222:1;8212:12;;;;;;;8191:34;8173:12;8186:1;8173:15;;;;;;;;;;;;;:52;;;;8271:7;8251:14;8266:1;8251:17;;;;;;;;;;;;;:27;;;;;7958:343;7639:680;;;;7464:864;-1:-1:-1;7213:3:24;;7171:1171;;;-1:-1:-1;8417:18:24;8413:319;;8635:20;;;;;;;;;;;;:12;8648:1;8635:15;;;;;;;;;;;;;:20;;;;8693:1;8673:14;8688:1;8673:17;;;;;;;;;;;;;:21;;;;;8712:5;;;8413:319;8768:13;8745:17;8763:1;8745:20;;;;;;;;;;;;;;;;;:36;-1:-1:-1;7057:3:24;;7007:1785;;;;6285:2513;;;;;;;;;:::o;2751:583:19:-;3046:240;;;2953:34;3046:240;;;;;;3010:317;;3046:240;3104:28;3115:10;3127:4;3104:28;;;;:::i;:::-;;;;;;;;;;;;;3046:240;;;;3177:10;3189:4;3166:28;;;;;;;;;:::i;:::-;;;;;;;;;;;;;3046:240;;;;3234:37;3046:240;;;3300:17;3010:22;:317::i;5648:955:17:-;5875:47;5971:119;6023:6;6043:15;6072:8;5971:38;:119::i;:::-;5938:152;;6231:9;6226:371;6250:6;:13;6246:1;:17;6226:371;;;6288:30;6319:1;6288:33;;;;;;;;;;;;;;6325:1;6288:38;6284:303;;6382:190;6435:30;6466:1;6435:33;;;;;;;;;;;;;;6490:6;6497:1;6490:9;;;;;;;;;;;;;;:21;;;-1:-1:-1;;;;;6382:190:17;6533:6;6540:1;6533:9;;;;;;;;;;;;;;:21;;;-1:-1:-1;;;;;6382:190:17;:31;:190::i;:::-;6346:30;6377:1;6346:33;;;;;;;;;;;;;:226;;;;;6284:303;6265:3;;6226:371;;2219:474:8;2300:32;2380:9;-1:-1:-1;;;;;2362:35:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;2348:49;;2412:9;2407:280;2427:21;;;2407:280;;2494:4;2469:11;2481:1;2469:14;;;;;;;;;;;;;;;;;;;:29;;;:22;;:29;2516:9;;2526:1;2516:12;;;;;;;;;;;;;;;;;;:::i;:::-;:24;2512:71;;-1:-1:-1;2512:71:8;;2560:8;;2512:71;2652:4;2663:9;;2673:1;2663:12;;;;;;;;;;;;;;;;;;:::i;:::-;2644:32;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2597:11;2609:1;2597:14;;;;;;;;;;;;;;:22;;2621:11;2633:1;2621:14;;;;;;;;;;;;;;;;;;2596:80;;;;;;;;;2407:280;2450:3;;2407:280;;;;2219:474;;;;:::o;946:381:25:-;1049:25;1115:6;:13;-1:-1:-1;;;;;1101:28:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1101:28:25;;1090:39;;1144:9;1139:182;1164:6;:13;1159:1;:18;1139:182;;1225:19;-1:-1:-1;;;;;1212:32:25;:6;1219:1;1212:9;;;;;;;;;;;;;;-1:-1:-1;;;;;1212:32:25;;:98;;1284:26;:6;1291:1;1284:9;;;;;;;;;;;;;;-1:-1:-1;;;;;1284:24:25;;:26::i;:::-;1212:98;;;1263:2;1212:98;1198:112;;:8;1207:1;1198:11;;;;;;;;;;;;;;;;;:112;1179:3;;1139:182;;;;946:381;;;:::o;3416:313:3:-;3636:21;3659;3682:34;3416:313;;;;;;;;:::o;4474:920:14:-;4694:34;4744:40;4761:10;4773;4744:16;:40::i;:::-;4794:8;4810:7;:18;;;4794:35;;4839:8;4855:3;-1:-1:-1;;;;;4855:7:14;;:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4897:24;;4839:26;;-1:-1:-1;4897:24:14;-1:-1:-1;;;;;4951:25:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4951:25:14;;4931:45;;5004:3;-1:-1:-1;;;;;5004:7:14;;:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;4990:23:14;:10;-1:-1:-1;;;;;4990:23:14;;;:50;;;;;5031:3;-1:-1:-1;;;;;5031:7:14;;:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;5017:23:14;:10;-1:-1:-1;;;;;5017:23:14;;;4990:50;4986:105;;;5056:24;;;;;4986:105;5106:9;5101:286;5125:10;5121:1;:14;5101:286;;;5156:18;5177:78;5191:7;5200:10;5212;5224:17;5242:1;5224:20;;;;;;;;;;;;;;5246:3;5251;5177:13;:78::i;:::-;5156:99;-1:-1:-1;5274:15:14;5270:59;;5309:5;;;5270:59;5366:10;5343:17;5361:1;5343:20;;;;;;;;;;;;;;;;;:33;-1:-1:-1;5137:3:14;;5101:286;;1621:2080:20;1844:34;2006:30;2157:11;:23;;;-1:-1:-1;;;;;2148:44:20;;2201:10;2193:19;;2148:65;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2048:23;;2039:65;;-1:-1:-1;;;2039:65:20;;-1:-1:-1;;;;;2039:44:20;;;;;;:65;;2084:19;;;;;2039:65;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:174;2006:207;;2230:16;2259:11;:23;;;-1:-1:-1;;;;;2250:47:20;;2306:10;2298:19;;2250:68;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2223:95;;;;;2385:8;2382:2;:11;2377:2;:17;2353:22;:42;;;;;2427:24;;2353:42;;;;-1:-1:-1;2427:24:20;-1:-1:-1;;;;;2481:25:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2481:25:20;;2461:45;;2521:9;2516:1179;2540:10;2536:1;:14;2516:1179;;;2572:15;2589:23;2632:11;:23;;;-1:-1:-1;;;;;2632:34:20;1179:5;2758:11;:37;;;2821:12;2859:10;2895:17;2913:1;2895:20;;;;;;;;;;;;;;2710:227;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;2710:227:20;;;;;;;;;;;;;;-1:-1:-1;;;;;2710:227:20;-1:-1:-1;;;;;;2710:227:20;;;;;;;;;;2632:306;;;;2710:227;2632:306;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2571:367;;;;2952:17;2991:10;2987:94;;;3044:10;3033:33;;;;;;;;;;;;:::i;:::-;3021:45;;2987:94;3191:22;3178:9;:35;3174:378;;3334:1;3317:127;3341:10;3337:1;:14;3317:127;;;3403:22;3380:17;3398:1;3380:20;;;;;;;;;;;;;;;;;:45;3353:3;;3317:127;;;;3461:5;;;;;3174:378;3528:9;3505:17;3523:1;3505:20;;;;;;;;;;;;;:32;;;;;3620:17;3638:1;3620:20;;;;;;;;;;;;;;3644:1;3620:25;3616:69;;;3665:5;;;;;3616:69;-1:-1:-1;;;2552:3:20;;2516:1179;;888:1649:21;1070:23;;:::i;:::-;1107:24;;:::i;:::-;1145:17;;;1232:596;1257:13;:20;1252:1;:25;1232:596;;1298:71;1354:2;1328:13;1342:1;1328:16;;;;;;;;;;;;;;:23;:28;1358:10;1298:13;1312:1;1298:16;;;;;;;;;;;;;;:29;;:71;;;;;:::i;:::-;1384:15;1401:23;1436:4;-1:-1:-1;;;;;1428:18:21;1447:13;1461:1;1447:16;;;;;;;;;;;;;;1428:36;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1383:81;;;;1482:10;1478:340;;;1512:14;1529:46;1572:2;1552:10;:17;:22;1529:10;:22;;:46;;;;:::i;:::-;1512:63;;1606:23;1597:6;:32;1593:211;;;1707:24;;;1753:19;;;:32;;;1679:6;-1:-1:-1;1679:6:21;1593:211;1478:340;;-1:-1:-1;;1279:3:21;;1232:596;;;-1:-1:-1;1841:28:21;1837:98;;1885:39;;;1837:98;1949:9;1944:587;1969:14;:21;1964:1;:26;1944:587;;2011:86;2069:2;2042:14;2057:1;2042:17;;;;;;;;;;;;;;:24;:29;2073:23;2011:14;2026:1;2011:17;;;;;;;:86;2112:15;2129:23;2164:4;-1:-1:-1;;;;;2156:18:21;2175:14;2190:1;2175:17;;;;;;;;;;;;;;2156:37;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2111:82;;;;2211:10;2207:314;;;2241:14;2258:46;2301:2;2281:10;:17;:22;2258:10;:22;;:46;;;;:::i;:::-;2241:63;;2335:9;2326:6;:18;2322:185;;;2408:25;;;2455:20;;;:33;;;2380:6;-1:-1:-1;2380:6:21;2322:185;2207:314;;-1:-1:-1;;1992:3:21;;1944:587;;888:1649;;;;;;;;:::o;3287:1650:5:-;3557:34;;;;3503;;-1:-1:-1;;;;;;3557:47:5;3553:510;;3735:268;;;;;;;;;3695:357;;3735:268;3797:33;3808:10;3820:9;3797:33;;;;:::i;:::-;;;;;;;;;;;;;3735:268;;;;3879:12;3893:9;3868:35;;;;;;;;;:::i;:::-;;;;;;;;;;;;;3735:268;;;;3947:37;3735:268;;;4021:17;3695:22;:357::i;:::-;3688:364;;;;3553:510;4093:24;;;-1:-1:-1;;;;;4147:25:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4147:25:5;;4127:45;;4187:9;4182:749;4206:10;4202:1;:14;4182:749;;;4238:15;4255:23;4298:9;:21;;;-1:-1:-1;;;;;4298:32:5;1243:6;4420:9;:34;;;4480:12;4518:10;4554:17;4572:1;4554:20;;;;;;;;;;;;;;4372:224;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;4372:224:5;;;;;;;;;;;;;;-1:-1:-1;;;;;4372:224:5;-1:-1:-1;;;;;;4372:224:5;;;;;;;;;;4298:299;;;;4372:224;4298:299;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4237:360;;;;4611:18;4651:10;4647:95;;;4705:10;4694:33;;;;;;;;;;;;:::i;:::-;4681:46;;4647:95;4778:10;4755:17;4773:1;4755:20;;;;;;;;;;;;;:33;;;;;4856:17;4874:1;4856:20;;;;;;;;;;;;;;4880:1;4856:25;4852:69;;;4901:5;;;;;4852:69;-1:-1:-1;;;4218:3:5;;4182:749;;1764:2076:1;2097:24;;1977:34;;2054:11;;2097:24;-1:-1:-1;;;;;2151:25:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2151:25:1;-1:-1:-1;2191:24:1;;-1:-1:-1;;;2191:24:1;;2131:45;;-1:-1:-1;;;;;;2191:12:1;;;;;:24;;2204:10;;2191:24;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2190:25;:54;;;-1:-1:-1;2220:24:1;;-1:-1:-1;;;2220:24:1;;-1:-1:-1;;;;;2220:12:1;;;;;:24;;2233:10;;2220:24;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2219:25;2190:54;2186:109;;;2260:24;;;;2186:109;2305:30;;:::i;:::-;2375:27;;-1:-1:-1;;;2375:27:1;;-1:-1:-1;;;;;2375:15:1;;;;;:27;;2391:10;;2375:27;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2345:57;;2442:27;;-1:-1:-1;;;2442:27:1;;-1:-1:-1;;;;;2442:15:1;;;;;:27;;2458:10;;2442:27;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2412;;;:57;2508:38;;-1:-1:-1;;;2508:38:1;;-1:-1:-1;;;;;2508:26:1;;;;;:38;;2535:10;;2508:38;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2479:26;;;;:67;;;;2585:38;-1:-1:-1;;;2585:38:1;;-1:-1:-1;;;;;2585:26:1;;;;;:38;;2612:10;;2585:38;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2556:9;:26;;:67;;;;;2653:4;-1:-1:-1;;;;;2653:15:1;;:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2633;;;:37;2686:9;2681:1153;2705:10;2701:1;:14;2681:1153;;;2913:27;;2907:48;;1071:1;1010:8;1064;;2907:48;2884:17;2902:1;2884:20;;;;;;;;;;;;;;:71;2880:115;;;2975:5;;2880:115;3028:4;-1:-1:-1;;;;;3028:19:1;;840:5;3139:9;:27;;;3192:9;:26;;;3244:9;:27;;;3297:9;:26;;;3349:17;3367:1;3349:20;;;;;;;;;;;;;;3395:9;:17;;;3028:406;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3028:406:1;;;;;;;;-1:-1:-1;;3028:406:1;;;;;;;;;;;;:::i;:::-;;;3008:816;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3529:6;3506:17;3524:1;3506:20;;;;;;;;;;;;;:29;;;;;3611:17;3629:1;3611:20;;;;;;;;;;;;;;3635:1;3611:25;3607:77;;;3660:5;;;3607:77;3451:247;2717:3;;2681:1153;;12820:327:38;13028:27;13123:5;:17;;;-1:-1:-1;;;;;13078:62:38;13107:5;:10;;;13096:22;;;;;;;;:::i;:::-;;;;;;;;;;;;;13086:33;;;;;;13078:42;;:62;;;;;;13071:69;;12820:327;;;;;;:::o;3464:1039:10:-;3689:17;3708;3727:34;3777:40;3794:10;3806;3777:16;:40::i;:::-;3840:47;3858:4;3864:10;3876;3840:17;:47::i;:::-;3828:59;-1:-1:-1;3901:16:10;3897:90;;3933:43;;3897:90;4008:61;;-1:-1:-1;;;4008:61:10;;:4;;:20;;:61;;4029:4;;4035:9;;4046:10;;4058;;4008:61;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;4008:61:10;;;;;;;;;;;;:::i;:::-;3996:4;:9;;:73;;;;4086:4;:9;;;4079:16;;4126:317;4162:240;;;;;;;;4231:10;4243:4;4220:28;;;;;;;;;:::i;:::-;;;;;;;;;;;;;4162:240;;;;4293:10;4305:4;4282:28;;;;;;;;;:::i;:::-;;;;;;;;;;;;;4162:240;;;;4350:37;4162:240;;;4416:17;4126:22;:317::i;:::-;4106:337;;3464:1039;;;;;;;;:::o;2424:1290:15:-;2652:7;2714:15;2775:8;-1:-1:-1;;;;;2756:34:15;;2791:19;2812;2756:76;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2714:128;-1:-1:-1;;;;;;2905:27:15;;2901:66;;2955:1;2948:8;;;;;2901:66;2976:19;-1:-1:-1;;;;;2998:33:15;;;:144;;3082:60;;-1:-1:-1;;;3082:60:15;;-1:-1:-1;;;;;3082:45:15;;;;;:60;;3136:4;;3082:60;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2998:144;;;3054:4;-1:-1:-1;;;;;3046:21:15;;2998:144;2976:166;;3298:16;3284:11;:30;3280:69;;;3337:1;3330:8;;;;;;3280:69;3374:133;;-1:-1:-1;;;3374:133:15;;-1:-1:-1;;;;;3374:14:15;;;;;940:5;;3374:133;;3448:19;;3469;;3490:16;;3374:133;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3374:133:15;;;;;;;;-1:-1:-1;;3374:133:15;;;;;;;;;;;;:::i;:::-;;;3358:350;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3696:1;3689:8;;;;;;;3358:350;3574:6;-1:-1:-1;3567:13:15;;-1:-1:-1;;3567:13:15;4281:1535:2;4497:34;4547:40;4564:10;4576;4547:16;:40::i;:::-;4639:14;;;;4693:15;;;4706:1;4693:15;;;4664:26;4693:15;;;;;;;;;;;;;;;;;;-1:-1:-1;4693:15:2;4664:44;;4741:10;4718;4729:1;4718:13;;;;;;;;;;;;;:34;-1:-1:-1;;;;;4718:34:2;;;-1:-1:-1;;;;;4718:34:2;;;;;4785:10;4762;4773:1;4762:13;;;;;;;;-1:-1:-1;;;;;4762:34:2;;;:13;;;;;;;;;;;:34;4828:24;;;-1:-1:-1;;;;;4882:25:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4882:25:2;;4862:45;;4917:48;;:::i;:::-;4980:18;:16;:18::i;:::-;4917:81;;5014:9;5009:801;5033:10;5029:1;:14;5009:801;;;5064:49;5132:48;5149:8;5159:17;5177:1;5159:20;;;;;;;5132:48;5317:91;;-1:-1:-1;;;5317:91:2;;5064:116;;-1:-1:-1;;;;;;5317:20:2;;;;;:91;;5338:35;;5064:116;;5386:10;;5398:9;;5317:91;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;5317:91:2;;;;;;;;;;;;:::i;:::-;;;5195:605;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5473:21;5497:7;5505:1;5497:10;;;;;;;;;;;;;;5473:34;;5547:1;5529:14;:19;5525:71;;5572:5;;;;;5525:71;5644:14;5613:17;5631:1;5613:20;;;;;;;;;;;;;:46;;;;;5421:253;;-1:-1:-1;5045:3:2;;5009:801;;12162:47:38;;;-1:-1:-1;;;;;12162:47:38;;:::o;1540:1205:12:-;1889:24;;1766:34;;1889:24;-1:-1:-1;;;;;1943:25:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1943:25:12;;1923:45;;1984:9;1979:760;2003:10;1999:1;:14;1979:760;;;2073:15;-1:-1:-1;;;;;2054:48:12;;1065:5;2208:10;2260;2297:17;2315:1;2297:20;;;;;;;;;;;;;;2054:285;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2054:285:12;;;;;;;;-1:-1:-1;;2054:285:12;;;;;;;;;;;;:::i;:::-;;;2034:695;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2434:6;2411:17;2429:1;2411:20;;;;;;;;;;;;;:29;;;;;2516:17;2534:1;2516:20;;;;;;;;;;;;;;2540:1;2516:25;2512:77;;;2565:5;;;2512:77;2356:247;2015:3;;1979:760;;2025:1175:7;2257:13;2272:12;2286:34;2336:40;2353:10;2365;2336:16;:40::i;:::-;2408:24;;;-1:-1:-1;;;;;2462:25:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2462:25:7;;2442:45;;2517:60;2536:8;2546:6;2554:10;2566;2517:18;:60::i;:::-;2498:79;-1:-1:-1;2498:79:7;-1:-1:-1;;;;;;2591:18:7;;2587:91;;2625:42;;;2587:91;2693:9;2688:506;2712:10;2708:1;:14;2688:506;;;2743:17;2763:242;2830:10;2842:4;2848:8;2819:38;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;2906:10;2918:4;2924:8;2895:38;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;2971:17;2989:1;2971:20;;;;;;;;;;;;;;2763:38;:242::i;:::-;2743:262;;3042:9;3019:17;3037:1;3019:20;;;;;;;;;;;;;:32;;;;;3119:17;3137:1;3119:20;;;;;;;;;;;;;;3143:1;3119:25;3115:69;;;3164:5;;;3115:69;-1:-1:-1;2724:3:7;;2688:506;;;;2025:1175;;;;;;;;;;;:::o;1246:1136:4:-;1539:24;;1468:34;;1539:24;-1:-1:-1;;;;;1593:25:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1593:25:4;;1573:45;;1709:20;1732:6;-1:-1:-1;;;;;1732:25:4;;:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1709:50;;1769:22;1802:6;-1:-1:-1;;;;;1802:15:4;;:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1794:26;;1769:51;;1866:6;-1:-1:-1;;;;;1835:38:4;1843:10;-1:-1:-1;;;;;1835:38:4;;1831:545;;;1914:9;1909:179;1933:10;1929:1;:14;1909:179;;;2061:12;2043:14;2037:2;:20;1235:4;1992:17;2010:1;1992:20;;;;;;;;;;;;;;:42;:65;1991:82;;;;;;1968:17;1986:1;1968:20;;;;;;;;;;;;;;;;;:105;1945:3;;1909:179;;1831:545;2140:6;-1:-1:-1;;;;;2109:38:4;2117:10;-1:-1:-1;;;;;2109:38:4;;2105:271;;;2190:9;2185:181;2209:10;2205:1;:14;2185:181;;;2336:14;2330:2;:20;1235:4;2308:42;2291:12;2268:17;2286:1;2268:20;;;;;;;;;;;;;;:35;2267:84;;;;;;2244:17;2262:1;2244:20;;;;;;;;;;;;;;;;;:107;2221:3;;2185:181;;1432:986:15;1643:15;1660:34;1710:40;1727:10;1739;1710:16;:40::i;:::-;1781:24;;;-1:-1:-1;;;;;1835:25:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1835:25:15;;1815:45;;1876:9;1871:431;1895:10;1891:1;:14;1871:431;;;1926:17;1946:167;1997:8;2023:10;2051;2079:17;2097:1;2079:20;;;;;;;;;;;;;;1946:33;:167::i;:::-;1926:187;;2150:9;2127:17;2145:1;2127:20;;;;;;;;;;;;;:32;;;;;2227:17;2245:1;2227:20;;;;;;;;;;;;;;2251:1;2227:25;2223:69;;;2272:5;;;2223:69;-1:-1:-1;1907:3:15;;1871:431;;;-1:-1:-1;2343:58:15;;-1:-1:-1;;;2343:58:15;;-1:-1:-1;;;;;2343:34:15;;;;;:58;;2378:10;;2390;;2343:58;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2312:99;;1432:986;;;;;;;;:::o;2894:593:13:-;3193:246;;;3100:34;3193:246;;;;;;3157:323;;3193:246;3251:30;3262:10;3274:6;3251:30;;;;:::i;:::-;;;;;;;;;;;;;3193:246;;;;3326:10;3338:6;3315:30;;;;;;;;;:::i;:::-;;;;;;;;;;;;;3193:246;;;;3385:39;3193:246;;;3453:17;3157:22;:323::i;1333:415:25:-;1449:25;1515:6;:13;-1:-1:-1;;;;;1501:28:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1501:28:25;;1490:39;;1544:9;1539:203;1564:6;:13;1559:1;:18;1539:203;;1625:19;-1:-1:-1;;;;;1612:32:25;:6;1619:1;1612:9;;;;;;;;;;;;;;-1:-1:-1;;;;;1612:32:25;;:119;;1697:34;1723:7;1697:6;1704:1;1697:9;;;;;;;;;;;;;;-1:-1:-1;;;;;1697:25:25;;;:34;;;;:::i;:::-;1612:119;;;1663:7;-1:-1:-1;;;;;1663:15:25;;1612:119;1598:8;1607:1;1598:11;;;;;;;;;;;;;;;;;:133;1579:3;;1539:203;;3202:653:12;3533:274;;;3427:34;3533:274;;;;;;3497:351;;3533:274;3591:39;3602:10;3614:15;3591:39;;;;:::i;:::-;;;;;;;;;;;;;3533:274;;;;3675:10;3687:15;3664:39;;;;;;;;;:::i;:::-;;;;;;;;;;;;;3533:274;;;;3743:49;3533:274;;;3821:17;3497:22;:351::i;1572:2343:22:-;1779:34;1829:40;1846:10;1858;1829:16;:40::i;:::-;1900:24;;;-1:-1:-1;;;;;1954:25:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1954:25:22;-1:-1:-1;1934:45:22;-1:-1:-1;1990:41:22;-1:-1:-1;;;;;2034:24:22;;;:106;;2101:39;2121:6;2129:10;2101:19;:39::i;:::-;2034:106;;;2096:1;2034:106;1990:150;-1:-1:-1;2150:41:22;-1:-1:-1;;;;;2194:24:22;;;:106;;2261:39;2281:6;2289:10;2261:19;:39::i;:::-;2194:106;;;2256:1;2194:106;2150:150;;2315:9;2310:1599;2334:10;2330:1;:14;2310:1599;;;2383:4;-1:-1:-1;;;;;2405:24:22;;2401:1357;;2486:215;2549:18;2590:51;;;2663:17;2681:1;2663:20;;;;;;;2486:215;2450:17;2468:1;2450:20;;;;;;;;;;;;;2449:252;;;;;;;;;2401:1357;;;-1:-1:-1;;;;;2726:24:22;;2722:1036;;2807:215;2870:18;2911:51;;;2984:17;3002:1;2984:20;;;;;;;2722:1036;3061:17;3122:215;3185:18;3226:51;;;3299:17;3317:1;3299:20;;;;;;;3122:215;3096:241;-1:-1:-1;3096:241:22;-1:-1:-1;3359:14:22;;3355:389;;3434:220;3501:18;-1:-1:-1;;;3623:9:22;3434:33;:220::i;:::-;3398:17;3416:1;3398:20;;;;;;;;;;;;;3397:257;;;;;;;;;3355:389;;;3724:1;3701:17;3719:1;3701:20;;;;;;;;;;;;;:24;;;;;3355:389;2722:1036;;3820:10;3819:11;:40;;;;3834:17;3852:1;3834:20;;;;;;;;;;;;;;3858:1;3834:25;3819:40;3815:84;;;3879:5;;;3815:84;-1:-1:-1;2346:3:22;;2310:1599;;2553:972:23;2807:24;;2736:34;;2807:24;-1:-1:-1;;;;;2861:25:23;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2861:25:23;;2841:45;;2901:9;2896:623;2920:10;2916:1;:14;2896:623;;;2990:6;-1:-1:-1;;;;;2971:39:23;;846:5;3078:17;3096:1;3078:20;;;;;;;;;;;;;;3100:4;2971:134;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;2971:134:23;;;;;;;;;;;;:::i;:::-;;;2951:558;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3210:7;3218:1;3210:10;;;;;;;;;;;;;;3187:17;3205:1;3187:20;;;;;;;;;;;;;:33;;;;;3296:17;3314:1;3296:20;;;;;;;;;;;;;;3320:1;3296:25;3292:77;;;3345:5;;;3292:77;3122:261;2932:3;;2896:623;;1770:1175:10;1996:17;2015;2034:34;2084:40;2101:10;2113;2084:16;:40::i;:::-;2146:47;2164:4;2170:10;2182;2146:17;:47::i;:::-;2134:59;-1:-1:-1;2207:16:10;2203:90;;2239:43;;2203:90;2314:61;;-1:-1:-1;;;2314:61:10;;:4;;:20;;:61;;2335:4;;2341:9;;2352:10;;2364;;2314:61;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;2314:61:10;;;;;;;;;;;;:::i;:::-;2302:9;;;:73;;;2433:24;;2302:73;;-1:-1:-1;2433:24:10;-1:-1:-1;;;;;2487:25:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2487:25:10;;2467:45;;2527:9;2522:417;2546:10;2542:1;:14;2522:417;;;2577:13;2593:4;-1:-1:-1;;;;;2593:31:10;;2642:4;2664:10;2692;2720:17;2738:1;2720:20;;;;;;;;;;;;;;2593:161;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2577:177;;2791:5;2768:17;2786:1;2768:20;;;;;;;;;;;;;:28;;;;;2864:17;2882:1;2864:20;;;;;;;;;;;;;;2888:1;2864:25;2860:69;;;2909:5;;;2860:69;-1:-1:-1;2558:3:10;;2522:417;;;;1770:1175;;;;;;;;;:::o;3591:92:38:-;3641:42;3591:92;:::o;3797:1026:7:-;4028:13;4043:12;4057:34;4107:40;4124:10;4136;4107:16;:40::i;:::-;4176:60;4195:8;4205:6;4213:10;4225;4176:18;:60::i;:::-;4157:79;-1:-1:-1;4157:79:7;-1:-1:-1;;;;;;4250:18:7;;4246:91;;4284:42;;4246:91;4367:24;;;-1:-1:-1;;;;;4421:25:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4421:25:7;-1:-1:-1;4513:262:7;;;;;;;;;4401:45;;-1:-1:-1;4477:339:7;;4513:262;4571:39;4582:10;4594:4;4600:9;;4571:39;;;;:::i;:::-;;;;;;;;;;;;;4513:262;;;;4655:10;4667:4;4673:8;4644:38;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;4513:262;;;;4722:38;4513:262;;;4789:17;4477:22;:339::i;:::-;4457:359;;3797:1026;;;;;;;;;;:::o;4221:1750:6:-;4437:13;4452:12;4466:34;4516:40;4533:10;4545;4516:16;:40::i;:::-;4587:24;;;-1:-1:-1;;;;;4641:25:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4641:25:6;-1:-1:-1;4784:13:6;;4775:55;;-1:-1:-1;;;4775:55:6;;4621:45;;-1:-1:-1;;;;;;4775:31:6;;;;:55;;4807:10;;4819;;4775:55;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4768:62;-1:-1:-1;4840:17:6;-1:-1:-1;;;;;4937:18:6;;;4933:485;;-1:-1:-1;5018:4:6;;-1:-1:-1;4983:10:6;4933:485;;;5134:13;;5125:55;;-1:-1:-1;;;5125:55:6;;-1:-1:-1;;;;;5125:31:6;;;;;;:55;;5157:10;;5169;;5125:55;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;5118:62;-1:-1:-1;;;;;;5238:27:6;;5234:108;;5285:42;;;;5234:108;-1:-1:-1;5402:5:6;;-1:-1:-1;5367:10:6;4933:485;5478:4;-1:-1:-1;;;;;5472:27:6;;:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;5467:103;;5517:42;;;;5467:103;5600:364;5636:287;;;;;;;;5705:10;5717:4;5723:9;5734:4;:11;;;5694:52;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;5636:287;;;;5791:10;5803:4;5809:9;5820:4;:11;;;5780:52;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;5636:287;;;;5872:36;5636:287;;;5937:17;5600:22;:364::i;:::-;5580:384;;4221:1750;;;;;;;;;;:::o;1754:435:25:-;1889:27;1959:6;:13;-1:-1:-1;;;;;1945:28:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1945:28:25;;1932:41;;1988:9;1983:200;2008:6;:13;2003:1;:18;1983:200;;2071:19;-1:-1:-1;;;;;2058:32:25;:6;2065:1;2058:9;;;;;;;;;;;;;;-1:-1:-1;;;;;2058:32:25;;:114;;2129:43;2155:7;2164;2129:6;2136:1;2129:9;;;;;;;;;;;;;;-1:-1:-1;;;;;2129:25:25;;;:43;;;;;:::i;:::-;2058:114;;;2109:1;2058:114;2042:10;2053:1;2042:13;;;;;;;;;;;;;;;;;:130;2023:3;;1983:200;;1440:887:19;1766:24;;1643:34;;1766:24;-1:-1:-1;;;;;1820:25:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1820:25:19;;1800:45;;1861:9;1856:465;1880:10;1876:1;:14;1856:465;;;1938:4;-1:-1:-1;;;;;1931:27:19;;994:5;2024:10;2036;2048:17;2066:1;2048:20;;;;;;;;;;;;;;1931:138;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1931:138:19;;;;;;;;-1:-1:-1;;1931:138:19;;;;;;;;;;;;:::i;:::-;;;1911:400;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2164:6;2141:17;2159:1;2141:20;;;;;;;;;;;;;:29;;;;;2086:99;1892:3;;1856:465;;7885:1337:10;8100:24;8191:4;:9;;;:16;8211:1;8191:21;8187:60;;;-1:-1:-1;8235:1:10;8228:8;;8187:60;8292:4;:17;;;-1:-1:-1;;;;;8273:61:10;;931:5;8425:4;:9;;;-1:-1:-1;;;;;8411:23:10;:10;-1:-1:-1;;;;;8411:23:10;;:56;;8457:10;8411:56;;;1035:42;8411:56;8503:4;:9;;;-1:-1:-1;;;;;8489:23:10;:10;-1:-1:-1;;;;;8489:23:10;;:56;;8535:10;8489:56;;;1035:42;8489:56;8567:16;8605:1;8635:4;:9;;;8273:389;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;8273:389:10;;;;;;;;-1:-1:-1;;8273:389:10;;;;;;;;;;;;:::i;:::-;;;8257:959;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9204:1;9197:8;;;;;8257:959;8720:26;8749:29;8767:10;8749:17;:29::i;:::-;8720:58;;;;8792:26;8821:29;8839:10;8821:17;:29::i;:::-;8792:58;;;;9043:8;9006:18;9000:2;:24;8963:18;8957:2;:24;8922:16;8899:4;:39;:82;:125;;;;;;:152;;;;;;8864:187;;9065:23;;;;;4189:904:15;4399:15;4416:34;4466:40;4483:10;4495;4466:16;:40::i;:::-;4537:24;;;-1:-1:-1;;;;;4591:25:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4591:25:15;;4571:45;;4647:329;4683:252;;;;;;;;4752:8;4762:10;4741:32;;;;;;;;;:::i;:::-;;;;;;;;;;;;;4683:252;;;;4818:8;4828:10;4807:32;;;;;;;;;:::i;:::-;;;;;;;;;;;;;4683:252;;;;4879:41;4683:252;;;4949:17;4647:22;:329::i;:::-;5018:58;;-1:-1:-1;;;5018:58:15;;4627:349;;-1:-1:-1;;;;;;5018:34:15;;;;;:58;;5053:10;;5065;;5018:58;;;:::i;2543:1848:21:-;2723:23;;:::i;:::-;2760:24;;:::i;:::-;-1:-1:-1;;2862:2:21;2798:18;2930:673;2955:14;:21;2950:1;:26;2930:673;;2997:72;3055:2;3028:14;3043:1;3028:17;;;;;;;;;;;;;;:24;:29;3059:9;2997:14;3012:1;2997:17;;;;;;;:72;3084:15;3101:23;3136:4;-1:-1:-1;;;;;3128:18:21;3147:14;3162:1;3147:17;;;;;;;;;;;;;;3128:37;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3083:82;;;;3183:10;3179:414;;;3213:14;3230:46;3273:2;3253:10;:17;:22;3230:10;:22;;:46;;;;:::i;:::-;3213:63;;3328:1;3319:6;:10;:66;;;;;3362:23;3353:6;:32;3319:66;3294:285;;;3480:25;;;3527:20;;;:33;;;3452:6;-1:-1:-1;3452:6:21;3294:285;3179:414;;-1:-1:-1;;2978:3:21;;2930:673;;;;-1:-1:-1;;3616:23:21;:38;3612:109;;;3670:40;;;3612:109;3735:9;3730:655;3755:13;:20;3750:1;:25;3730:655;;3796:84;3852:2;3826:13;3840:1;3826:16;;;;;;;;;;;;;;:23;:28;3856:23;3796:13;3810:1;3796:16;;;;;;;:84;3895:15;3912:23;3947:4;-1:-1:-1;;;;;3939:18:21;3958:13;3972:1;3958:16;;;;;;;;;;;;;;3939:36;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3894:81;;;;3993:10;3989:386;;;4023:14;4040:46;4083:2;4063:10;:17;:22;4040:10;:22;;:46;;;;:::i;:::-;4023:63;;4138:1;4129:6;:10;:53;;;;;4172:10;4163:6;:19;4129:53;4104:257;;;4264:24;;;4310:19;;;:32;;;4236:6;-1:-1:-1;4236:6:21;4104:257;3989:386;;-1:-1:-1;;3777:3:21;;3730:655;;4670:1220:9;4804:22;4842:24;4902:6;-1:-1:-1;;;;;4886:31:9;;:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4842:78;;4966:1;4952:4;:11;:15;-1:-1:-1;;;;;4938:30:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4938:30:9;;4930:38;;4983:9;4978:906;5002:5;:12;4998:1;:16;4978:906;;;5069:25;5128:7;-1:-1:-1;;;;;5128:16:9;;1507:5;5212:4;5217:1;5212:7;;;;;;;;;;;;;;5221:4;5226:1;5230;5226:5;5221:11;;;;;;;;;;;;;;5128:105;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;5128:105:9;;;;;;;;;;;;:::i;:::-;;;5108:766;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5857:1:9;;5843:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5843:16:9;;5836:23;;;;;;;;5108:766;5320:15;;5316:90;;5385:1;;5371:16;;5316:90;5424:17;5468:9;5463:319;5487:8;:15;5483:1;:19;5463:319;;;5531:19;5567:8;5576:1;5567:11;;;;;;;;;;;;;;-1:-1:-1;;;;;5553:38:9;;:40;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;5531:62;;5633:9;5619:11;:23;5615:149;;;5682:11;5670:23;;5730:8;5739:1;5730:11;;;;;;;;;;;;;;5719:5;5725:1;5719:8;;;;;;;;;;;;;:22;-1:-1:-1;;;;;5719:22:9;;;-1:-1:-1;;;;;5719:22:9;;;;;5615:149;-1:-1:-1;5504:3:9;;5463:319;;;;5250:546;;-1:-1:-1;5016:3:9;;4978:906;;;;4670:1220;;;;;;:::o;3735:1265:3:-;3950:21;3973;4026:4;:13;;;-1:-1:-1;;;;;4026:24:3;;4051:4;:13;;;-1:-1:-1;;;;;4051:28:3;;:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4026:56;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4010:72;;4096:4;:10;;;:17;4117:1;4096:22;4092:81;;;4134:28;;4092:81;4182:23;4290:9;4285:709;4309:4;:10;;;:17;4305:1;:21;4285:709;;;4374:1;4351:4;:10;;;4362:1;4351:13;;;;;;;;;;;;;;:20;:24;4347:71;;;4395:8;;4347:71;4467:13;-1:-1:-1;;;;;4452:61:3;;873:5;4586:4;:10;;;4597:1;4586:13;;;;;;;;;;;;;;4601:17;4644:1;4619:17;:24;:26;4601:45;;;;;;;;;;;;;;4452:195;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4452:195:3;;;;;;;;-1:-1:-1;;4452:195:3;;;;;;;;;;;;:::i;:::-;;;4432:552;;4961:8;;4432:552;4732:15;4723:6;:24;4719:137;;;4789:6;4771:24;;4824:4;:10;;;4835:1;4824:13;;;;;;;;;;;;;;4817:20;;4719:137;4664:206;4432:552;4328:3;;4285:709;;;;3735:1265;;;;;;;;;:::o;1509:191:18:-;1641:10;-1:-1:-1;;;;;1627:24:18;:10;-1:-1:-1;;;;;1627:24:18;;;1619:74;;;;-1:-1:-1;;;1619:74:18;;;;;;;:::i;:::-;;;;;;;;;1509:191;;:::o;6355:377:2:-;6429:38;;:::i;:::-;-1:-1:-1;6502:223:2;;;;;;;;6568:4;6502:223;;;-1:-1:-1;6502:223:2;;;;;;;;;;;;;;;;;6355:377;:::o;5822:527::-;6059:39;;;6096:1;6059:39;;;;;;;;;5944;;;;6059;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;5995:103;;6123:192;;;;;;;;6176:8;:15;;;6123:192;;;;6219:1;6123:192;;;;6249:1;6123:192;;;;6272:6;6123:192;;;;;;;;;;;;;;;;;;;6108:9;6118:1;6108:12;;;;;;;;;;;;;;;;;:207;6333:9;5822:527;-1:-1:-1;;;5822:527:2:o;8086:303:22:-;8301:70;;-1:-1:-1;;;8301:70:22;;8199:31;;-1:-1:-1;;;;;8301:56:22;;;;;:70;;8358:12;;8301:70;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;7070:721::-;7267:20;;-1:-1:-1;;;;;7324:36:22;;7320:100;;7376:33;;7320:100;7429:23;7501:22;-1:-1:-1;;;;;7501:33:22;1144:5;7618:16;7656:11;7574:111;;;;;;;;:::i;:::-;;;;-1:-1:-1;;7574:111:22;;;;;;;;;;;;;;-1:-1:-1;;;;;7574:111:22;-1:-1:-1;;;;;;7574:111:22;;;;;;;;;;7501:185;;;;7574:111;7501:185;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;7462:224:22;;-1:-1:-1;7462:224:22;-1:-1:-1;7696:89:22;;;;7752:10;7741:33;;;;;;;;;;;;:::i;:::-;7726:48;;7696:89;7070:721;;;;;;;:::o;5400:2077:14:-;5585:7;5609:22;5635:24;5661:22;5687:3;-1:-1:-1;;;;;5687:8:14;;5696:7;:21;;;5687:31;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;5608:110;;;;;;;;5728:24;5763:3;5728:39;;5796:7;:23;;;-1:-1:-1;;;;;5782:37:14;:10;-1:-1:-1;;;;;5782:37:14;;5778:1674;;;5993:29;6025:30;:16;6050:4;6025:24;:30::i;:::-;5993:62;-1:-1:-1;6070:25:14;6098:58;3269:8;6098:45;:14;5993:62;6098:22;:45::i;:::-;:53;;:58::i;:::-;6070:86;;6234:16;6213:17;:37;6209:84;;6277:1;6270:8;;;;;;;;;;6209:84;6307:16;6326:53;3138:8;6326:40;6356:3;-1:-1:-1;;;;;6356:7:14;;:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;6326:21;;:29;:40::i;:::-;:48;;:53::i;:::-;6307:72;-1:-1:-1;6393:29:14;6425:39;:21;6307:72;6425:29;:39::i;:::-;6393:71;-1:-1:-1;6479:28:14;;-1:-1:-1;;;;;;;;6479:28:14;5778:1674;6542:7;:23;;;-1:-1:-1;;;;;6528:37:14;:10;-1:-1:-1;;;;;6528:37:14;;6524:928;;;6777:16;6811:38;;;6807:85;;;6876:1;6869:8;;;;;;;;;6807:85;6905:25;6933:58;3269:8;6933:45;:14;6956:21;6933:22;:45::i;:58::-;6905:86;;7091:14;7070:17;:35;7066:82;;7132:1;7125:8;;;;;;;;;;7066:82;7162:23;7188;7200:3;-1:-1:-1;;;;;7200:8:14;;:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3138:8;;7188:11;:23::i;:::-;7162:49;-1:-1:-1;7265:43:14;7312:72;7162:49;7312:47;:21;7342:16;7312:29;:47::i;6524:928::-;7469:1;7462:8;;;;;;5400:2077;;;;;;;;;:::o;4809:919:20:-;5012:17;5046:20;5068:30;;:::i;:::-;5125:14;5114:49;;;;;;;;;;;;:::i;:::-;5045:118;;;;5174:20;5221:14;5210:36;;;;;;;;;;;;:::i;:::-;5173:73;-1:-1:-1;5257:12:20;5271:23;5318:4;-1:-1:-1;;;5429:11:20;5458:13;5173:73;5520:31;5540:10;5520:19;:31::i;:::-;5335:230;;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;5335:230:20;;;;;;;;;;;;;;-1:-1:-1;;;;;5335:230:20;-1:-1:-1;;;;;;5335:230:20;;;;;;;;;;5310:256;;;;5335:230;5310:256;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5256:310;;;;5581:7;5576:47;;5611:1;5604:8;;;;;;;;;5576:47;5694:10;5683:35;;;;;;;;;;;;:::i;:::-;5719:1;5683:38;;;;;;;;;;;;;;5676:45;;;;;;;4809:919;;;;;:::o;1691:3088:0:-;1865:34;1949:17;:24;-1:-1:-1;;;;;1935:39:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1935:39:0;;1915:59;;1988:17;:24;2016:1;1988:29;1984:84;;;2033:24;;1984:84;2078:18;2099:135;2138:4;:19;;;2171:4;:19;;;2204:17;2222:1;2204:20;;;;;;;;;;;;;;2099:4;:25;;;:135;;:::i;:::-;2078:156;-1:-1:-1;2248:15:0;2244:70;;2279:24;;;2244:70;2324:17;2344:125;2383:4;:19;;;2416:4;:19;;;2449:10;2344:4;:25;;;:125;;:::i;:::-;2324:145;-1:-1:-1;2483:14:0;2479:69;;2513:24;;;;2479:69;2563:9;2558:2215;2582:17;:24;2578:1;:28;2558:2215;;;2627:11;2661:12;2656:1596;1683:1;2679:4;:37;2656:1596;;;2852:148;2899:17;2917:1;2899:20;;;;;;;;;;;;;;2941:9;2972:10;2852:25;:148::i;:::-;2839:161;-1:-1:-1;3022:15:0;3018:67;;3061:5;;3018:67;3115:202;3163:59;1378:3;3289:10;3115:25;:202::i;:::-;3102:215;-1:-1:-1;3339:15:0;3335:67;;3378:5;;3335:67;3419:18;3440:157;3487:4;:19;;;3528:4;:19;;;3569:10;3440:4;:25;;;:157;;:::i;:::-;3419:178;-1:-1:-1;3619:15:0;3615:67;;3658:5;;;3615:67;3815:10;3803:22;;3917:17;3935:1;3917:20;;;;;;;;;;;;;;3904:9;:33;3900:338;;4077:17;4095:1;4077:20;;;;;;;;;;;;;;1378:3;4004:17;4022:1;4004:20;;;;;;;;;;;;;;3992:9;:32;3991:59;:106;;;;;;3961:136;;1536:8;4123:3;:41;4119:101;;4192:5;;;4119:101;-1:-1:-1;2718:6:0;;2656:1596;;;-1:-1:-1;4269:8:0;;;:52;;;1536:8;4281:3;:40;4269:52;4265:96;;;4341:5;;;4265:96;4630:132;4673:17;4691:1;4673:20;;;;;;;;;;;;;;4711:9;4738:10;4630:25;:132::i;:::-;4607:17;4625:1;4607:20;;;;;;;;;;;;;;;;;:155;-1:-1:-1;2608:3:0;;2558:2215;;;;1691:3088;;;;;;:::o;5977:1450:6:-;6183:7;6207:18;6227:12;6241:17;6260:14;6302;6278:98;;;;;;;;;;;;:::i;:::-;6206:170;;;;;;;;6497:9;-1:-1:-1;;;;;6483:23:6;:10;-1:-1:-1;;;;;6483:23:6;;6479:942;;;6611:104;;-1:-1:-1;;;6611:104:6;;-1:-1:-1;;;;;6611:30:6;;;;;1291:5;;6611:104;;6704:10;;6611:104;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;6611:104:6;;;;;;;;-1:-1:-1;;6611:104:6;;;;;;;;;;;;:::i;:::-;;;6591:353;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6928:1;6921:8;;;;;;;;;6591:353;6794:6;-1:-1:-1;6787:13:6;;-1:-1:-1;;;;6787:13:6;6479:942;7063:119;;-1:-1:-1;;;7063:119:6;;-1:-1:-1;;;;;7063:39:6;;;;;1291:5;;7063:119;;7165:4;;7171:10;;7063:119;;;:::i;8804:2754:24:-;8990:35;9095:1;9081:10;9062:9;:16;:29;:34;;9041:117;;;;-1:-1:-1;;;9041:117:24;;;;;;;:::i;:::-;9168:30;;:::i;:::-;-1:-1:-1;9168:233:24;;;;;;;;9295:8;9168:233;;9325:8;9168:233;;;;9355:7;9168:233;;;;9384:6;9168:233;;;;;;;;9460:42;;9481:20;9460:42;;;;;;;;;9168:233;;;;9460:42;;;;;;;;;;;;;-1:-1:-1;9460:42:24;9411:91;;9512:21;9561:25;9589:9;9599:10;9589:21;;;;;;;;;;;;;;9561:49;;9624:26;9653:9;9663:10;9676:1;9663:14;9653:25;;;;;;;;;;;;;;9624:54;;9697:9;9692:296;9716:20;9712:1;:24;9692:296;;;9761:19;9799:7;-1:-1:-1;;;;;9799:15:24;;9815:10;9827:11;9840:13;9854:1;9840:16;;;;;;;;;;;9799:58;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;9761:96;;9879:18;9892:4;9879:12;:18::i;:::-;9875:99;;;9951:4;9921:10;9932:15;;;;;;9921:27;;;;;;;;;;;;;:34;-1:-1:-1;;;;;9921:34:24;;;-1:-1:-1;;;;;9921:34:24;;;;;9875:99;-1:-1:-1;9738:3:24;;9692:296;;;-1:-1:-1;;;10011:18:24;10007:109;;10089:16;;;;;10007:109;10147:9;:16;10129:10;10142:1;10129:14;:34;10125:349;;;10242:13;-1:-1:-1;;;;;10219:37:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10207:49;;10275:9;10270:164;10294:13;10290:1;:17;10270:164;;;10347:23;;;10368:1;10347:23;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;10347:23:24;10332:9;10342:1;10332:12;;;;;;;;;;;;;:38;;;;10406:10;10417:1;10406:13;;;;;;;;;;;;;;10388:9;10398:1;10388:12;;;;;;;;;;;;;;10401:1;10388:15;;;;;;;;-1:-1:-1;;;;;10388:31:24;;;:15;;;;;;;;;;;:31;10309:3;;10270:164;;;;10447:16;;;;;10125:349;10525:45;10585:54;10604:7;10613:9;10624:10;10637:1;10624:14;10585:18;:54::i;:::-;10525:114;;10653:19;:26;10683:1;10653:31;10649:122;;;10744:16;;;;;;10649:122;10898:19;:26;10882:13;:42;-1:-1:-1;;;;;10846:88:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10834:100;;10949:9;10944:582;10968:13;10964:1;:17;10944:582;;;11007:9;11002:514;11026:19;:26;11022:1;:30;11002:514;;;11093:26;;11089:30;;;:34;;;11093:19;;11122:1;;11257:22;;;;;;;;;;;;:29;11253:1;:33;-1:-1:-1;;;;;11232:55:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;11232:55:24;;11197:9;11207:1;11197:12;;;;;;;;;;;;;:90;;;;11323:10;11334:1;11323:13;;;;;;;;;;;;;;11305:9;11315:1;11305:12;;;;;;;;;;;;;;11318:1;11305:15;;;;;;;;;;;;;:31;-1:-1:-1;;;;;11305:31:24;;;-1:-1:-1;;;;;11305:31:24;;;;;11359:9;11354:148;11378:19;11398:1;11378:22;;;;;;;;;;;;;;:29;11374:1;:33;11354:148;;;11458:19;11478:1;11458:22;;;;;;;;;;;;;;11481:1;11458:25;;;;;;;;;;;;;;11436:9;11446:1;11436:12;;;;;;;;;;;;;;11453:1;11449;:5;11436:19;;;;;;;;-1:-1:-1;;;;;11436:47:24;;;:19;;;;;;;;;;;:47;11409:3;;11354:148;;;-1:-1:-1;;11054:3:24;;11002:514;;;-1:-1:-1;10983:3:24;;10944:582;;;;11535:16;;;;8804:2754;;;;;:::o;12884:1082::-;13045:24;13126:1;13106:9;:16;:21;;:64;;;;;13151:8;:15;13169:1;13151:19;13131:9;:16;:39;13106:64;13085:148;;;;-1:-1:-1;;;13085:148:24;;;;;;;:::i;:::-;13422:8;:15;13440:1;13422:19;13398:9;:16;13417:2;13398:21;:43;-1:-1:-1;;;;;13388:54:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;13388:54:24;-1:-1:-1;13374:68:24;-1:-1:-1;13504:2:24;13487:20;;13452:9;13518:442;13542:9;:16;13538:1;:20;13518:442;;;13583:5;;13579:211;;13608:14;13625:8;13638:1;13634;:5;13625:15;;;;;;;;;;;;;;-1:-1:-1;;;;;13625:19:24;;:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;13709:3;13705:17;13695:28;;-1:-1:-1;13756:1:24;13749:9;;;;13673:103;13803:20;13826:9;13836:1;13826:12;;;;;;;;;;;;;;;;;;13893:2;13889:14;13879:25;;-1:-1:-1;13933:2:24;13926:10;;;;13560:3;;13518:442;;6989:337:1;7072:9;7107:5;;;7126:6;;;;;:21;;;7146:1;7141;7136:2;:6;;;;;;:11;;7126:21;7122:60;;;7170:1;7163:8;;;;;7122:60;7207:8;7201:15;;7230:7;;;7226:46;;;7260:1;7253:8;;;;;;7226:46;1010:8;7291:9;;;;-1:-1:-1;;;;6989:337:1:o;11564:342:24:-;11672:32;11752:9;:16;-1:-1:-1;;;;;11731:38:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;11731:38:24;;11720:49;;11784:9;11779:121;11803:9;:16;11799:1;:20;11779:121;;;11854:9;11887:1;11883;11864:9;:16;:20;:24;11854:35;;;;;;;;;;;;;;11840:8;11849:1;11840:11;;;;;;;;-1:-1:-1;;;;;11840:49:24;;;:11;;;;;;;;;;;:49;11821:3;;11779:121;;11912:336;12018:32;12098:8;:15;-1:-1:-1;;;;;12077:37:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;12077:37:24;;12066:48;;12129:9;12124:118;12148:8;:15;12144:1;:19;12124:118;;;12198:8;12229:1;12225;12207:8;:15;:19;:23;12198:33;;;;;;;;;;;;;;12184:8;12193:1;12184:11;;;;;;;;-1:-1:-1;;;;;12184:47:24;;;:11;;;;;;;;;;;:47;12165:3;;12124:118;;3340:740:19;3541:17;3575:18;3595:12;3622:14;3611:46;;;;;;;;;;;;:::i;:::-;3574:83;;;;3668:18;3701:14;3690:37;;;;;;;;;;;;:::i;:::-;3667:60;-1:-1:-1;3754:4:19;:25;3797:4;3803:10;3667:60;3827:31;3847:10;3827:19;:31::i;:::-;3754:105;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;3754:105:19;;;;;;;;;;;;:::i;:::-;;;3738:336;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4062:1;4055:8;;;;;;;;3738:336;3936:7;3944:1;3936:10;;;;;;;;;;;;;;3929:17;;;;;;;;3834:545:43;3997:21;4237:104;4329:11;4237:70;4284:22;4329:11;4304:1;4284:19;:22::i;:::-;4237:25;:9;4255:6;4237:17;:25::i;:::-;:46;;:70::i;3834:391:41:-;3927:19;3978:2;3962:18;;3991:15;4008:23;4043:5;-1:-1:-1;;;;;4035:25:41;4061:18;;;;;;;;;;;;;-1:-1:-1;;;4061:18:41;;;4035:45;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3990:90;;;;4094:10;:37;;;;;4129:2;4108:10;:17;:23;;4094:37;4090:129;;;4169:38;4193:10;4205:1;4169:23;:38::i;:::-;4147:61;;4090:129;3834:391;;;;;:::o;7483:2082:14:-;7667:7;7691:22;7717:24;7743:22;7769:3;-1:-1:-1;;;;;7769:8:14;;7778:7;:21;;;7769:31;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;7690:110;;;;;;;;7829:7;:23;;;-1:-1:-1;;;;;7815:37:14;:10;-1:-1:-1;;;;;7815:37:14;;7811:1729;;;7966:29;7998:16;7966:48;;8028:23;8054:22;8066:3;-1:-1:-1;;;;;8066:7:14;;:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3138:8;;8054:11;:22::i;:::-;8028:48;-1:-1:-1;8129:29:14;8161:59;8028:48;8161:34;:21;3138:8;8161:29;:34::i;:59::-;8129:91;-1:-1:-1;8234:25:14;8262:58;3269:8;8262:45;:14;8129:91;8262:22;:45::i;:58::-;8234:86;;8398:16;8377:17;:37;8373:84;;8441:1;8434:8;;;;;;;;;;;8373:84;8471:43;8517:48;8563:1;8518:35;:21;8548:4;8518:29;:35::i;7811:1729::-;8725:7;:23;;;-1:-1:-1;;;;;8711:37:14;:10;-1:-1:-1;;;;;8711:37:14;;8707:833;;;8862:29;8894:30;:16;8919:4;8894:24;:30::i;:::-;8862:62;;8938:26;8967:23;8979:3;-1:-1:-1;;;;;8979:8:14;;:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8967:23;8938:52;-1:-1:-1;9044:29:14;9077:62;3138:8;9077:49;:21;8938:52;9077:29;:49::i;:62::-;9044:95;;9181:14;9157:21;:38;9153:85;;;9222:1;9215:8;;;;;;;;;;9153:85;9251:25;9279:58;3269:8;9279:45;:14;9302:21;9279:22;:45::i;:58::-;9251:86;;9429:14;9408:17;:35;9404:82;;9470:1;9463:8;;;;;;;;;;;9404:82;-1:-1:-1;9508:21:14;-1:-1:-1;9501:28:14;;-1:-1:-1;;;;;9501:28:14;8707:833;-1:-1:-1;9557:1:14;;7483:2082;-1:-1:-1;;;;;;;;;7483:2082:14:o;16578:187:42:-;16720:38;16733:1;16736:5;16751;16720:12;:38::i;:::-;16578:187;;;:::o;16122:220::-;16243:14;16290:21;16302:1;16305:5;16290:11;:21::i;4943:907:5:-;5144:17;5178:20;5200:26;;:::i;:::-;5253:14;5242:47;;;;;;;;;;;;:::i;:::-;5177:112;;;;5300:20;5347:14;5336:36;;;;;;;;;;;;:::i;:::-;5299:73;-1:-1:-1;5383:12:5;5397:23;5444:4;-1:-1:-1;;;5553:9:5;5580:13;5299:73;5642:31;5662:10;5642:19;:31::i;9228:916:10:-;9402:17;9490:27;9538:4;:16;;;9490:65;;9566:27;9600:9;-1:-1:-1;;;;;9600:28:10;;9656:4;:9;;;-1:-1:-1;;;;;9642:23:10;:10;-1:-1:-1;;;;;9642:23:10;;:56;;9688:10;9642:56;;;1035:42;9642:56;9726:4;:9;;;-1:-1:-1;;;;;9712:23:10;:10;-1:-1:-1;;;;;9712:23:10;;:56;;9758:10;9712:56;;;1035:42;9712:56;9800:12;;;9810:1;9800:12;;;;;;;;;-1:-1:-1;;;;;;9600:236:10;;;;;;;;;;;;9782:4;;9600:236;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;9600:236:10;;;;;;;;;;;;:::i;:::-;9565:271;;;;9873:10;:17;9851:4;:18;;;:39;9847:80;;-1:-1:-1;9913:3:10;;-1:-1:-1;9906:10:10;;-1:-1:-1;9906:10:10;9847:80;9949:10;9960:4;:18;;;9949:30;;;;;;;;;;;;;;9937:42;;10062:3;10049:9;:16;;10041:25;;10070:4;10041:33;10037:74;;;-1:-1:-1;10097:3:10;;-1:-1:-1;10090:10:10;;-1:-1:-1;10090:10:10;7110:769;7311:7;7335:18;7355:28;;:::i;:::-;7410:14;7399:55;;;;;;;;;;;;:::i;:::-;7334:120;;;;7465:18;7512:14;7501:55;;;;;;;;;;;;:::i;:::-;-1:-1:-1;7582:90:10;;-1:-1:-1;;;7582:90:10;;7464:92;;-1:-1:-1;7582:4:10;;:31;;:90;;7631:4;;7464:92;;7649:10;;7661;;7582:90;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;7582:90:10;;;;;;;;-1:-1:-1;;7582:90:10;;;;;;;;;;;;:::i;:::-;;;7566:307;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7739:6;-1:-1:-1;7732:13:10;;-1:-1:-1;;;7732:13:10;6047:836:7;6234:15;6251:13;6373:25;6417:8;-1:-1:-1;;;;;6401:37:7;;6439:10;6451;6401:61;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;6401:61:7;;;;;;;;;;;;:::i;:::-;6373:89;;6483:4;6472:15;;6501:8;:15;6520:1;6501:20;6497:251;;;6646:61;;-1:-1:-1;;;6646:61:7;;-1:-1:-1;;;;;6646:37:7;;;;;:61;;6684:10;;6696;;6646:61;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;6646:61:7;;;;;;;;;;;;:::i;:::-;6635:72;;6732:5;6721:16;;6497:251;6772:8;:15;6762:6;:25;6758:82;;6819:1;6823:5;6803:26;;;;;;;6758:82;6860:8;6869:6;6860:16;;;;;;;;;;;;;;6850:26;;6047:836;;;;;;;;:::o;4829:1212::-;5037:7;5061:18;5081:12;5095:13;5136:14;5112:86;;;;;;;;;;;;:::i;:::-;5060:138;;;;;;5372:8;5368:667;;;5416:122;;-1:-1:-1;;;5416:122:7;;-1:-1:-1;;;;;5416:31:7;;;;;1408:5;;5416:122;;5523:1;;5527:10;;5416:122;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5416:122:7;;;;;;;;-1:-1:-1;;5416:122:7;;;;;;;;;;;;:::i;:::-;;;5396:299;;5679:1;5672:8;;;;;;;5396:299;-1:-1:-1;5626:6:7;-1:-1:-1;5619:13:7;;-1:-1:-1;;;5619:13:7;5368:667;5745:123;;-1:-1:-1;;;5745:123:7;;-1:-1:-1;;;;;5745:32:7;;;;;1408:5;;5745:123;;5853:1;;5857:10;;5745:123;;;:::i;3493:771:13:-;3696:17;3730:18;3750:14;3791;3780:46;;;;;;;;;;;;:::i;:::-;3729:97;;;;3837:18;3882:14;3871:37;;;;;;;;;;;;:::i;:::-;3836:72;-1:-1:-1;3934:4:13;:27;3979:6;3987:10;3836:72;4011:31;4031:10;4011:19;:31::i;5349:467:41:-;5458:15;5490;5507:23;5542:5;-1:-1:-1;;;;;5534:25:41;5613:24;;;5655:5;5573:101;;;;;;;;:::i;:::-;;;;-1:-1:-1;;5573:101:41;;;;;;;;;;;;;;-1:-1:-1;;;;;5573:101:41;-1:-1:-1;;;;;;5573:101:41;;;;;;;;;;5534:150;;;;5573:101;5534:150;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5489:195;;;;5698:10;:37;;;;;5733:2;5712:10;:17;:23;;5698:37;5694:116;;;5761:38;5785:10;5797:1;5761:23;:38::i;3861:849:12:-;4074:17;4108:18;4128:23;4178:14;4167:46;;;;;;;;;;;;:::i;:::-;4107:106;;;;4224:18;4269:14;4258:37;;;;;;;;;;;;:::i;:::-;4223:72;-1:-1:-1;4321:4:12;:37;1065:5;4416:15;4433:10;4223:72;4457:31;4477:10;4457:19;:31::i;:::-;4321:168;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;4321:168:12;;;;;;;;;;;;:::i;4571:515:41:-;4697:18;4732:15;4749:23;4784:5;-1:-1:-1;;;;;4776:25:41;4855:24;;;4897:5;4920:7;4815:126;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;4815:126:41;;;;;;;;;;;;;;-1:-1:-1;;;;;4815:126:41;-1:-1:-1;;;;;;4815:126:41;;;;;;;;;;4776:175;;;;4815:126;4776:175;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4731:220;;;;4965:10;:37;;;;;5000:2;4979:10;:17;:23;;4965:37;4961:119;;;5031:38;5055:10;5067:1;5031:23;:38::i;13204:223:38:-;13317:14;13354:66;13407:12;13354:52;:66::i;5099:620:15:-;5304:17;5338:16;5356:27;5398:14;5387:46;;;;;;;;;;;;:::i;:::-;5337:96;;;;5444:17;5463:27;5505:14;5494:46;;;;;;;;;;;;:::i;:::-;5443:97;;;;5557:155;5604:8;5626:19;5659;5692:10;5557:33;:155::i;:::-;5550:162;5099:620;-1:-1:-1;;;;;;;;5099:620:15:o;764:457:44:-;850:7;877:6;873:45;;-1:-1:-1;906:1:44;899:8;;873:45;939:5;;;943:1;939;:5;:1;958:5;;;;;:10;954:243;;984:202;1009:176;1069:64;1151:1;1170;1009:42;:176::i;:::-;984:24;:202::i;2004:392::-;2090:7;2125:5;;;2144;;;2140:232;;;2165:196;2190:170;2250:58;2326:1;2345;2190:42;:170::i;1227:392::-;1313:7;1340:6;1336:232;;1362:195;1387:169;1447:57;1522:1;1541;1387:42;:169::i;1362:195::-;1577:9;1593:1;1589;:5;;;;;;;1227:392;-1:-1:-1;;;;1227:392:44:o;1625:373::-;1711:7;1742:1;1738;:5;1734:236;;;1759:200;1784:174;1844:62;1924:1;1943;1784:42;:174::i;1759:200::-;-1:-1:-1;1986:5:44;;;1625:373::o;1160:172:18:-;1289:16;;;1303:1;1289:16;;;;;;;;;1247:20;;1289:16;;;;;;;;;;;-1:-1:-1;1289:16:18;1283:22;;1324:1;1315:3;1319:1;1315:6;;;;;;;;;;;;;:10;;;;;1160:172;;;:::o;4785:416:0:-;4953:21;4994:14;;;:29;;-1:-1:-1;5012:11:0;;4994:29;:49;;;-1:-1:-1;5027:16:0;;4994:49;4990:63;;;-1:-1:-1;5052:1:0;5045:8;;4990:63;5075:18;;;5087:6;5075:9;:18;:9;5107:13;;;;;:23;5103:37;;5139:1;5132:8;;;;;5103:37;5183:11;5177:1;5163:11;:15;5158:1;:21;5157:37;;;;;;;4785:416;-1:-1:-1;;;;;4785:416:0:o;12254:624:24:-;12343:12;12496:17;;12544:13;12540:64;;12584:5;12577:12;;;;;12540:64;12254:624;12674:4;-1:-1:-1;;;;;12674:11:24;;:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;12674:23:24;;12706:4;12674:38;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;12670:86;;-1:-1:-1;12740:5:24;12733:12;;12670:86;12769:4;-1:-1:-1;;;;;12769:11:24;;:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;12769:23:24;;12801:4;12769:38;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;12765:86;;-1:-1:-1;12835:5:24;12828:12;;12765:86;-1:-1:-1;12867:4:24;12254:624;;;:::o;15225:654:42:-;15382:5;15390:2;15382:10;15371:1;:8;:21;15367:306;;;15408:254;15433:228;15498:95;15611:1;:8;15637:5;15645:2;15637:10;15433:47;:228::i;15408:254::-;15842:13;;15753:2;15842:13;15835:28;15821:52::o;14301:688::-;14422:14;14467:5;14475:2;14467:10;14456:1;:8;:21;14452:306;;;14493:254;14518:228;14583:95;14696:1;:8;14722:5;14730:2;14722:10;14518:47;:228::i;14493:254::-;-1:-1:-1;14936:13:42;14838:2;14936:13;14930:20;;14301:688::o;2293:341:38:-;2394:14;-1:-1:-1;;;;;2428:21:38;;892:42;2428:21;2424:61;;;-1:-1:-1;2472:2:38;2465:9;;2424:61;2494:12;2536:5;2519:23;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;2519:23:38;;;;;;2509:34;;2519:23;2509:34;;;;2566:45;;1163:1;2560:67;;;-1:-1:-1;;;2293:341:38:o;1401:322:48:-;1554:12;818:10;1625:28;;1667:9;1690:1;1705;1589:127;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;1589:127:48;;;;;;;;;;;;;;-1:-1:-1;;;;;1589:127:48;-1:-1:-1;;;;;;1589:127:48;;;;;;;;;;;-1:-1:-1;1401:322:48;;;;;:::o;1531:170:47:-;1674:9;1668:16;1661:4;1650:9;1646:20;1639:46;1334:378:45;1522:12;1274:10;1593:37;;1644:9;1667:6;1687:8;1557:148;;;;;;;;;;:::i;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;5:130::-;72:20;;97:33;72:20;97:33;:::i;458:352::-;;;588:3;581:4;573:6;569:17;565:27;555:2;;-1:-1;;596:12;555:2;-1:-1;626:20;;-1:-1;;;;;655:30;;652:2;;;-1:-1;;688:12;652:2;732:4;724:6;720:17;708:29;;783:3;732:4;;767:6;763:17;724:6;749:32;;746:41;743:2;;;800:1;;790:12;743:2;548:262;;;;;:::o;836:707::-;;953:3;946:4;938:6;934:17;930:27;920:2;;-1:-1;;961:12;920:2;1008:6;995:20;1030:80;1045:64;1102:6;1045:64;:::i;:::-;1030:80;:::i;:::-;1138:21;;;1021:89;-1:-1;1182:4;1195:14;;;;1170:17;;;1284;;;1275:27;;;;1272:36;-1:-1;1269:2;;;1321:1;;1311:12;1269:2;1346:1;1331:206;1356:6;1353:1;1350:13;1331:206;;;85:6;72:20;97:33;124:5;97:33;:::i;:::-;1424:50;;1488:14;;;;1516;;;;1378:1;1371:9;1331:206;;;1335:14;;;;;913:630;;;;:::o;2319:753::-;;2461:3;2454:4;2446:6;2442:17;2438:27;2428:2;;-1:-1;;2469:12;2428:2;2516:6;2503:20;2538:105;2553:89;2635:6;2553:89;:::i;2538:105::-;2671:21;;;2529:114;-1:-1;2715:4;2728:14;;;;2703:17;;;2823:1;2808:258;2833:6;2830:1;2827:13;2808:258;;;2940:62;2998:3;2715:4;2916:3;2903:17;2707:6;2891:30;;2940:62;:::i;:::-;2928:75;;3017:14;;;;3045;;;;2855:1;2848:9;2808:258;;4231:705;;4357:3;4350:4;4342:6;4338:17;4334:27;4324:2;;-1:-1;;4365:12;4324:2;4412:6;4399:20;4434:89;4449:73;4515:6;4449:73;:::i;4434:89::-;4551:21;;;4425:98;-1:-1;4595:4;4608:14;;;;4583:17;;;4703:1;4688:242;4713:6;4710:1;4707:13;4688:242;;;4820:46;4862:3;4595:4;4796:3;4783:17;4587:6;4771:30;;4820:46;:::i;:::-;4808:59;;4881:14;;;;4909;;;;4735:1;4728:9;4688:242;;4978:779;;5119:3;5112:4;5104:6;5100:17;5096:27;5086:2;;-1:-1;;5127:12;5086:2;5174:6;5161:20;5196:104;5211:88;5292:6;5211:88;:::i;5196:104::-;5328:21;;;5187:113;-1:-1;5372:4;5385:14;;;;5360:17;;;5474;;;5465:27;;;;5462:36;-1:-1;5459:2;;;5511:1;;5501:12;5459:2;5536:1;5521:230;5546:6;5543:1;5540:13;5521:230;;;13201:6;13188:20;13213:57;13264:5;13213:57;:::i;:::-;5614:74;;5702:14;;;;5730;;;;5568:1;5561:9;5521:230;;7387:788;;7531:3;7524:4;7516:6;7512:17;7508:27;7498:2;;-1:-1;;7539:12;7498:2;7586:6;7573:20;7608:107;7623:91;7707:6;7623:91;:::i;7608:107::-;7743:21;;;7599:116;-1:-1;7787:4;7800:14;;;;7775:17;;;7901:4;7889:17;;;7880:27;;;;7877:36;-1:-1;7874:2;;;7926:1;;7916:12;7874:2;7951:1;7936:233;7961:6;7958:1;7955:13;7936:233;;;8041:64;8101:3;8089:10;8041:64;:::i;:::-;8029:77;;8120:14;;;;8148;;;;7983:1;7976:9;7936:233;;;7940:14;;;;;;7491:684;;;;:::o;8949:707::-;;9066:3;9059:4;9051:6;9047:17;9043:27;9033:2;;-1:-1;;9074:12;9033:2;9121:6;9108:20;9143:80;9158:64;9215:6;9158:64;:::i;9143:80::-;9251:21;;;9134:89;-1:-1;9295:4;9308:14;;;;9283:17;;;9397;;;9388:27;;;;9385:36;-1:-1;9382:2;;;9434:1;;9424:12;9382:2;9459:1;9444:206;9469:6;9466:1;9463:13;9444:206;;;26446:20;;9537:50;;9601:14;;;;9629;;;;9491:1;9484:9;9444:206;;9682:722;;9810:3;9803:4;9795:6;9791:17;9787:27;9777:2;;-1:-1;;9818:12;9777:2;9858:6;9852:13;9880:80;9895:64;9952:6;9895:64;:::i;9880:80::-;9988:21;;;9871:89;-1:-1;10032:4;10045:14;;;;10020:17;;;10134;;;10125:27;;;;10122:36;-1:-1;10119:2;;;10171:1;;10161:12;10119:2;10196:1;10181:217;10206:6;10203:1;10200:13;10181:217;;;26594:13;;10274:61;;10349:14;;;;10377;;;;10228:1;10221:9;10181:217;;10429:719;;10556:3;10549:4;10541:6;10537:17;10533:27;10523:2;;-1:-1;;10564:12;10523:2;10604:6;10598:13;10626:79;10641:63;10697:6;10641:63;:::i;10626:79::-;10733:21;;;10617:88;-1:-1;10777:4;10790:14;;;;10765:17;;;10879;;;10870:27;;;;10867:36;-1:-1;10864:2;;;10916:1;;10906:12;10864:2;10941:1;;10926:216;10951:6;10948:1;10945:13;10926:216;;;26740:6;26734:13;126016:10;134159:5;126005:22;134135:5;134132:34;134122:2;;10941:1;;134170:12;134122:2;11019:60;;11093:14;;;;11121;;;;10973:1;10966:9;10926:216;;11844:440;;11945:3;11938:4;11930:6;11926:17;11922:27;11912:2;;-1:-1;;11953:12;11912:2;12000:6;11987:20;12022:64;12037:48;12078:6;12037:48;:::i;12022:64::-;12013:73;;12106:6;12099:5;12092:21;12210:3;12142:4;12201:6;12134;12192:16;;12189:25;12186:2;;;12227:1;;12217:12;12186:2;129939:6;12142:4;12134:6;12130:17;12142:4;12168:5;12164:16;129916:30;129995:1;129977:16;;;12142:4;129977:16;129970:27;12168:5;11905:379;-1:-1;;11905:379::o;12293:442::-;;12405:3;12398:4;12390:6;12386:17;12382:27;12372:2;;-1:-1;;12413:12;12372:2;12453:6;12447:13;12475:64;12490:48;12531:6;12490:48;:::i;12475:64::-;12466:73;;12559:6;12552:5;12545:21;12663:3;12595:4;12654:6;12587;12645:16;;12642:25;12639:2;;;12680:1;;12670:12;12639:2;12690:39;12722:6;12595:4;12621:5;12617:16;12595:4;12587:6;12583:17;12690:39;:::i;14215:174::-;14313:13;;133185:1;133175:12;;133165:2;;133201:1;;133191:12;16249:659;;16365:4;16353:9;16348:3;16344:19;16340:30;16337:2;;;-1:-1;;16373:12;16337:2;16401:20;16365:4;16401:20;:::i;:::-;16392:29;;85:6;72:20;97:33;124:5;97:33;:::i;:::-;16485:75;;16642:2;16695:22;;11635:20;11660:32;11635:20;11660:32;:::i;:::-;16642:2;16657:16;;16650:74;16805:2;16858:22;;11635:20;11660:32;11635:20;11660:32;:::i;:::-;16805:2;16820:16;;16813:74;16824:5;16331:577;-1:-1;;16331:577::o;16951:703::-;;17078:4;17066:9;17061:3;17057:19;17053:30;17050:2;;;-1:-1;;17086:12;17050:2;17114:20;17078:4;17114:20;:::i;:::-;17105:29;;226:6;220:13;238:33;265:5;238:33;:::i;:::-;17198:86;;17366:2;17430:22;;11781:13;11799:32;11781:13;11799:32;:::i;:::-;17366:2;17381:16;;17374:85;17540:2;17604:22;;11781:13;11799:32;11781:13;11799:32;:::i;17702:481::-;;17824:4;17812:9;17807:3;17803:19;17799:30;17796:2;;;-1:-1;;17832:12;17796:2;17860:20;17824:4;17860:20;:::i;:::-;17851:29;;85:6;72:20;97:33;124:5;97:33;:::i;:::-;17941:75;;18079:2;18133:22;;72:20;97:33;72:20;97:33;:::i;:::-;18079:2;18094:16;;18087:75;18098:5;17790:393;-1:-1;;17790:393::o;18233:1028::-;;18356:4;18344:9;18339:3;18335:19;18331:30;18328:2;;;-1:-1;;18364:12;18328:2;18392:20;18356:4;18392:20;:::i;:::-;18383:29;;26459:6;26446:20;18485:16;18478:75;18621:2;18679:9;18675:22;72:20;97:33;124:5;97:33;:::i;:::-;18621:2;18636:16;;18629:75;18773:2;18827:22;;72:20;97:33;72:20;97:33;:::i;:::-;18773:2;18788:16;;18781:75;18917:2;18971:22;;72:20;97:33;72:20;97:33;:::i;:::-;18917:2;18932:16;;18925:75;19089:3;19074:19;;19061:33;-1:-1;;;;;19103:30;;19100:2;;;-1:-1;;19136:12;19100:2;19181:58;19235:3;19226:6;19215:9;19211:22;19181:58;:::i;:::-;19089:3;19167:5;19163:16;19156:84;;18322:939;;;;:::o;20959:2032::-;;21076:6;;21064:9;21059:3;21055:19;21051:32;21048:2;;;-1:-1;;21086:12;21048:2;21114:22;21076:6;21114:22;:::i;:::-;21105:31;;;21224:73;21293:3;21269:22;21224:73;:::i;:::-;21206:16;21199:99;21398:73;21467:3;21365:2;21447:9;21443:22;21398:73;:::i;:::-;21365:2;21384:5;21380:16;21373:99;21573:49;21618:3;21540:2;21598:9;21594:22;21573:49;:::i;:::-;21540:2;21559:5;21555:16;21548:75;21724:49;21769:3;21691:2;21749:9;21745:22;21724:49;:::i;:::-;21691:2;21710:5;21706:16;21699:75;21884:49;21929:3;21850;21909:9;21905:22;21884:49;:::i;:::-;21850:3;21870:5;21866:16;21859:75;22030:49;22075:3;21996;22055:9;22051:22;22030:49;:::i;:::-;21996:3;22016:5;22012:16;22005:75;22176:49;22221:3;22142;22201:9;22197:22;22176:49;:::i;:::-;22142:3;22162:5;22158:16;22151:75;22323:49;22368:3;22289;22348:9;22344:22;22323:49;:::i;:::-;22289:3;22309:5;22305:16;22298:75;22442:3;22478:49;22523:3;22442;22503:9;22499:22;22478:49;:::i;:::-;22458:18;;;22451:77;22589:3;22646:22;;;11358:20;22605:18;;;22598:77;22738:3;22774:48;22818:3;22794:22;;;22774:48;:::i;:::-;22738:3;22758:5;22754:18;22747:76;;22884:3;;22945:9;22941:22;26446:20;22884:3;22904:5;22900:18;22893:77;;21042:1949;;;;:::o;23722:773::-;;23838:4;23826:9;23821:3;23817:19;23813:30;23810:2;;;-1:-1;;23846:12;23810:2;23874:20;23838:4;23874:20;:::i;:::-;23865:29;;14494:6;14481:20;133304:1;133297:5;133294:12;133284:2;;-1:-1;;133310:12;133284:2;23960:93;;24111:2;24163:22;;26996:20;27021:31;26996:20;27021:31;:::i;:::-;24144:47;24111:2;24130:5;24126:16;24119:73;;24250:2;24308:9;24304:22;11358:20;24250:2;24269:5;24265:16;24258:75;24391:2;24449:9;24445:22;11358:20;24391:2;24410:5;24406:16;24399:75;23804:691;;;;:::o;25962:130::-;26029:20;;-1:-1;;;;;125586:46;;133639:35;;133629:2;;133688:1;;133678:12;26099:134;26177:13;;26195:33;26177:13;26195:33;:::i;26796:128::-;26862:20;;-1:-1;;;;;126100:30;;134254:34;;134244:2;;134302:1;;134292:12;27201:241;;27305:2;27293:9;27284:7;27280:23;27276:32;27273:2;;;-1:-1;;27311:12;27273:2;85:6;72:20;97:33;124:5;97:33;:::i;27449:263::-;;27564:2;27552:9;27543:7;27539:23;27535:32;27532:2;;;-1:-1;;27570:12;27532:2;226:6;220:13;238:33;265:5;238:33;:::i;28005:431::-;;;28153:2;28141:9;28132:7;28128:23;28124:32;28121:2;;;-1:-1;;28159:12;28121:2;375:6;369:13;387:41;422:5;387:41;:::i;:::-;28330:2;28388:22;;369:13;28211:82;;-1:-1;387:41;369:13;387:41;:::i;:::-;28338:82;;;;28115:321;;;;;:::o;28443:736::-;;;;;28641:3;28629:9;28620:7;28616:23;28612:33;28609:2;;;-1:-1;;28648:12;28609:2;375:6;369:13;387:41;422:5;387:41;:::i;:::-;28819:2;28877:22;;369:13;28700:82;;-1:-1;387:41;369:13;387:41;:::i;:::-;28946:2;29004:22;;369:13;28827:82;;-1:-1;387:41;369:13;387:41;:::i;:::-;29073:2;29131:22;;369:13;28954:82;;-1:-1;387:41;369:13;387:41;:::i;:::-;28603:576;;;;-1:-1;28603:576;;-1:-1;;28603:576::o;29186:561::-;;;;29348:2;29336:9;29327:7;29323:23;29319:32;29316:2;;;-1:-1;;29354:12;29316:2;375:6;369:13;387:41;422:5;387:41;:::i;:::-;29525:2;29583:22;;369:13;29406:82;;-1:-1;387:41;369:13;387:41;:::i;:::-;29652:2;29699:22;;11231:13;29533:82;;-1:-1;123485:13;;123478:21;131604:32;;131594:2;;-1:-1;;131640:12;131594:2;29660:71;;;;29310:437;;;;;:::o;29754:562::-;;;29928:2;29916:9;29907:7;29903:23;29899:32;29896:2;;;-1:-1;;29934:12;29896:2;375:6;369:13;387:41;422:5;387:41;:::i;:::-;30126:2;30111:18;;30105:25;29986:82;;-1:-1;;;;;;30139:30;;;30136:2;;;-1:-1;;30172:12;30136:2;30268:22;;;;19445:4;19424:19;;;19420:30;19417:2;;;-1:-1;;19453:12;19417:2;19481:20;19445:4;19481:20;:::i;:::-;26600:6;26594:13;19574:16;19567:86;30126:2;19790:9;19786:22;220:13;238:33;265:5;238:33;:::i;:::-;30126:2;19736:16;;19729:86;29928:2;19949:22;;220:13;238:33;220:13;238:33;:::i;:::-;29928:2;19899:16;;19892:86;20039:2;20104:22;;220:13;238:33;220:13;238:33;:::i;:::-;20039:2;20054:16;;20047:86;20215:3;20200:19;;20194:26;20229:30;;;20226:2;;;-1:-1;;20262:12;20226:2;20307:69;20372:3;20363:6;20352:9;20348:22;20307:69;:::i;:::-;20215:3;20293:5;20289:16;20282:95;;30192:108;;;;;;29890:426;;;;;:::o;30323:879::-;;;;;;30520:3;30508:9;30499:7;30495:23;30491:33;30488:2;;;-1:-1;;30527:12;30488:2;85:6;72:20;97:33;124:5;97:33;:::i;:::-;30579:63;-1:-1;30679:2;30718:22;;72:20;97:33;72:20;97:33;:::i;:::-;30687:63;-1:-1;30787:2;30826:22;;72:20;97:33;72:20;97:33;:::i;:::-;30795:63;-1:-1;30895:2;30934:22;;72:20;97:33;72:20;97:33;:::i;:::-;30903:63;-1:-1;31031:3;31016:19;;31003:33;-1:-1;;;;;31045:30;;31042:2;;;-1:-1;;31078:12;31042:2;31108:78;31178:7;31169:6;31158:9;31154:22;31108:78;:::i;:::-;31098:88;;;30482:720;;;;;;;;:::o;31209:753::-;;;;;31389:3;31377:9;31368:7;31364:23;31360:33;31357:2;;;-1:-1;;31396:12;31357:2;85:6;72:20;97:33;124:5;97:33;:::i;:::-;31448:63;-1:-1;31548:2;31587:22;;72:20;97:33;72:20;97:33;:::i;:::-;31556:63;-1:-1;31656:2;31695:22;;72:20;97:33;72:20;97:33;:::i;:::-;31664:63;-1:-1;31792:2;31777:18;;31764:32;-1:-1;;;;;31805:30;;31802:2;;;-1:-1;;31838:12;31802:2;31868:78;31938:7;31929:6;31918:9;31914:22;31868:78;:::i;:::-;31858:88;;;31351:611;;;;;;;:::o;31969:617::-;;;;;32124:3;32112:9;32103:7;32099:23;32095:33;32092:2;;;-1:-1;;32131:12;32092:2;85:6;72:20;97:33;124:5;97:33;:::i;:::-;32183:63;-1:-1;32283:2;32322:22;;72:20;97:33;72:20;97:33;:::i;:::-;32291:63;-1:-1;32391:2;32430:22;;72:20;97:33;72:20;97:33;:::i;:::-;32086:500;;;;-1:-1;32399:63;;32499:2;32538:22;26446:20;;-1:-1;;32086:500::o;32593:763::-;;;;32781:2;32769:9;32760:7;32756:23;32752:32;32749:2;;;-1:-1;;32787:12;32749:2;85:6;72:20;97:33;124:5;97:33;:::i;:::-;32839:63;-1:-1;32967:2;32952:18;;32939:32;-1:-1;;;;;32980:30;;;32977:2;;;-1:-1;;33013:12;32977:2;33043:78;33113:7;33104:6;33093:9;33089:22;33043:78;:::i;:::-;33033:88;;33186:2;33175:9;33171:18;33158:32;33144:46;;32991:18;33202:6;33199:30;33196:2;;;-1:-1;;33232:12;33196:2;;33262:78;33332:7;33323:6;33312:9;33308:22;33262:78;:::i;:::-;33252:88;;;32743:613;;;;;:::o;33363:879::-;;;;;;33560:3;33548:9;33539:7;33535:23;33531:33;33528:2;;;-1:-1;;33567:12;33528:2;85:6;72:20;97:33;124:5;97:33;:::i;:::-;33619:63;-1:-1;33719:2;33758:22;;26446:20;;-1:-1;33827:2;33866:22;;72:20;97:33;72:20;97:33;:::i;34249:397::-;;;34388:2;34376:9;34367:7;34363:23;34359:32;34356:2;;;-1:-1;;34394:12;34356:2;34452:17;34439:31;-1:-1;;;;;34482:6;34479:30;34476:2;;;-1:-1;;34512:12;34476:2;34550:80;34622:7;34613:6;34602:9;34598:22;34550:80;:::i;:::-;34532:98;;;;-1:-1;34350:296;-1:-1;;;;34350:296::o;34653:392::-;;34793:2;;34781:9;34772:7;34768:23;34764:32;34761:2;;;-1:-1;;34799:12;34761:2;34850:17;34844:24;-1:-1;;;;;34880:6;34877:30;34874:2;;;-1:-1;;34910:12;34874:2;34997:22;;1690:4;1678:17;;1674:27;-1:-1;1664:2;;-1:-1;;1705:12;1664:2;1745:6;1739:13;1767:80;1782:64;1839:6;1782:64;:::i;1767:80::-;1875:21;;;1932:14;;;;1907:17;;;2021;;;2012:27;;;;2009:36;-1:-1;2006:2;;;-1:-1;;2048:12;2006:2;-1:-1;2074:10;;2068:217;2093:6;2090:1;2087:13;2068:217;;;226:6;220:13;238:33;265:5;238:33;:::i;:::-;2161:61;;2115:1;2108:9;;;;;2236:14;;;;2264;;2068:217;;;-1:-1;34930:99;34755:290;-1:-1;;;;;;;34755:290::o;35052:833::-;;;;35271:2;35259:9;35250:7;35246:23;35242:32;35239:2;;;-1:-1;;35277:12;35239:2;35328:17;35322:24;-1:-1;;;;;35366:18;35358:6;35355:30;35352:2;;;-1:-1;;35388:12;35352:2;35490:6;35479:9;35475:22;;;3226:3;3219:4;3211:6;3207:17;3203:27;3193:2;;-1:-1;;3234:12;3193:2;3274:6;3268:13;3296:80;3311:64;3368:6;3311:64;:::i;3296:80::-;3382:16;3418:6;3411:5;3404:21;3448:4;;3465:3;3461:14;3454:21;;3448:4;3440:6;3436:17;3570:3;3448:4;;3554:6;3550:17;3440:6;3541:27;;3538:36;3535:2;;;-1:-1;;3577:12;3535:2;-1:-1;3603:10;;3597:217;3622:6;3619:1;3616:13;3597:217;;;11506:13;;3690:61;;3644:1;3637:9;;;;;3765:14;;;;3793;;3597:217;;;-1:-1;35550:18;;35544:25;35408:99;;-1:-1;35544:25;-1:-1;;;35578:30;;;35575:2;;;-1:-1;;35611:12;35575:2;;35641:89;35722:7;35713:6;35702:9;35698:22;35641:89;:::i;:::-;35631:99;;;35785:84;35861:7;35767:2;35841:9;35837:22;35785:84;:::i;:::-;35775:94;;35233:652;;;;;:::o;36318:799::-;;;;36524:2;36512:9;36503:7;36499:23;36495:32;36492:2;;;-1:-1;;36530:12;36492:2;36588:17;36575:31;-1:-1;;;;;36626:18;36618:6;36615:30;36612:2;;;-1:-1;;36648:12;36612:2;36678:87;36757:7;36748:6;36737:9;36733:22;36678:87;:::i;:::-;36668:97;;36830:2;36819:9;36815:18;36802:32;36788:46;;36626:18;36846:6;36843:30;36840:2;;;-1:-1;;36876:12;36840:2;;36906:87;36985:7;36976:6;36965:9;36961:22;36906:87;:::i;:::-;36896:97;;;37030:2;37073:9;37069:22;26446:20;37038:63;;36486:631;;;;;:::o;37124:425::-;;37277:2;37265:9;37256:7;37252:23;37248:32;37245:2;;;-1:-1;;37283:12;37245:2;37341:17;37328:31;-1:-1;;;;;37371:6;37368:30;37365:2;;;-1:-1;;37401:12;37365:2;37431:102;37525:7;37516:6;37505:9;37501:22;37431:102;:::i;37556:550::-;;;37726:2;37714:9;37705:7;37701:23;37697:32;37694:2;;;-1:-1;;37732:12;37694:2;37790:17;37777:31;-1:-1;;;;;37820:6;37817:30;37814:2;;;-1:-1;;37850:12;37814:2;37880:102;37974:7;37965:6;37954:9;37950:22;37880:102;:::i;:::-;37870:112;;;38019:2;38062:9;38058:22;72:20;97:33;124:5;97:33;:::i;38113:675::-;;;;38300:2;38288:9;38279:7;38275:23;38271:32;38268:2;;;-1:-1;;38306:12;38268:2;38364:17;38351:31;-1:-1;;;;;38394:6;38391:30;38388:2;;;-1:-1;;38424:12;38388:2;38454:102;38548:7;38539:6;38528:9;38524:22;38454:102;:::i;:::-;38444:112;;;38593:2;38636:9;38632:22;72:20;97:33;124:5;97:33;:::i;:::-;38601:63;-1:-1;38701:2;38740:22;;72:20;97:33;72:20;97:33;:::i;38795:390::-;;38934:2;;38922:9;38913:7;38909:23;38905:32;38902:2;;;-1:-1;;38940:12;38902:2;38991:17;38985:24;-1:-1;;;;;39021:6;39018:30;39015:2;;;-1:-1;;39051:12;39015:2;39137:22;;5902:4;5890:17;;5886:27;-1:-1;5876:2;;-1:-1;;5917:12;5876:2;5957:6;5951:13;5979:79;5994:63;6050:6;5994:63;:::i;5979:79::-;6086:21;;;6143:14;;;;6118:17;;;6232;;;6223:27;;;;6220:36;-1:-1;6217:2;;;-1:-1;;6259:12;6217:2;-1:-1;6285:10;;6279:216;6304:6;6301:1;6298:13;6279:216;;;14920:13;;6372:60;;6326:1;6319:9;;;;;6446:14;;;;6474;;6279:216;;39192:909;;;;39453:2;39441:9;39432:7;39428:23;39424:32;39421:2;;;-1:-1;;39459:12;39421:2;39517:17;39504:31;-1:-1;;;;;39555:18;39547:6;39544:30;39541:2;;;-1:-1;;39577:12;39541:2;39696:6;39685:9;39681:22;;;6692:3;6685:4;6677:6;6673:17;6669:27;6659:2;;-1:-1;;6700:12;6659:2;6747:6;6734:20;6769:108;6784:92;6869:6;6784:92;:::i;6769:108::-;6883:16;6919:6;6912:5;6905:21;6949:4;;6966:3;6962:14;6955:21;;6949:4;6941:6;6937:17;7063:6;7073:3;6949:4;7063:6;7055;7051:19;6941:6;7042:29;;7039:38;7036:2;;;-1:-1;;7080:12;7036:2;-1:-1;7106:10;;7100:236;7125:6;7122:1;7119:13;7100:236;;;7205:65;7266:3;7254:10;7205:65;:::i;:::-;7193:78;;7147:1;7140:9;;;;;7285:14;;;;7313:16;;;;7100:236;;;-1:-1;39597:116;;-1:-1;39763:18;;39750:32;;-1:-1;;;;39791:30;;;39788:2;;;-1:-1;;39824:12;39788:2;;39854:105;39951:7;39942:6;39931:9;39927:22;39854:105;:::i;:::-;39844:115;;;40014:71;40077:7;39996:2;40057:9;40053:22;40014:71;:::i;40108:392::-;;40248:2;40236:9;40227:7;40223:23;40219:32;40216:2;;;-1:-1;;40254:12;40216:2;40305:17;40299:24;-1:-1;;;;;40335:6;40332:30;40329:2;;;-1:-1;;40365:12;40329:2;40395:89;40476:7;40467:6;40456:9;40452:22;40395:89;:::i;40507:257::-;;40619:2;40607:9;40598:7;40594:23;40590:32;40587:2;;;-1:-1;;40625:12;40587:2;11237:6;11231:13;131629:5;123485:13;123478:21;131607:5;131604:32;131594:2;;-1:-1;;131640:12;40771:263;;40886:2;40874:9;40865:7;40861:23;40857:32;40854:2;;;-1:-1;;40892:12;40854:2;-1:-1;11506:13;;40848:186;-1:-1;40848:186::o;41041:360::-;;41165:2;41153:9;41144:7;41140:23;41136:32;41133:2;;;-1:-1;;41171:12;41133:2;41222:17;41216:24;-1:-1;;;;;41252:6;41249:30;41246:2;;;-1:-1;;41282:12;41246:2;41312:73;41377:7;41368:6;41357:9;41353:22;41312:73;:::i;43252:865::-;;;;43491:2;43479:9;43470:7;43466:23;43462:32;43459:2;;;-1:-1;;43497:12;43459:2;14131:6;14118:20;14143:60;14197:5;14143:60;:::i;:::-;43549:90;-1:-1;43704:2;43689:18;;43676:32;-1:-1;;;;;43717:30;;;43714:2;;;-1:-1;;43750:12;43714:2;43780:102;43874:7;43865:6;43854:9;43850:22;43780:102;:::i;44124:261::-;;44238:2;44226:9;44217:7;44213:23;44209:32;44206:2;;;-1:-1;;44244:12;44206:2;14787:6;14781:13;14799:32;14825:5;14799:32;:::i;44392:452::-;;;44550:3;44538:9;44529:7;44525:23;44521:33;44518:2;;;-1:-1;;44557:12;44518:2;14787:6;14781:13;14799:32;14825:5;14799:32;:::i;:::-;44609:73;-1:-1;44737:91;44820:7;44719:2;44796:22;;44737:91;:::i;:::-;44727:101;;44512:332;;;;;:::o;45314:824::-;;;;;45517:9;45508:7;45504:23;45529:3;45504:23;45500:33;45497:2;;;-1:-1;;45536:12;45497:2;15156:4;15135:19;15131:30;15128:2;;;-1:-1;;15164:12;15128:2;;15192:20;15156:4;15192:20;:::i;:::-;15317:22;11358:20;15278:16;15271:75;15408:2;15466:9;15462:22;72:20;97:33;124:5;97:33;:::i;:::-;15408:2;15423:16;;15416:75;15427:5;-1:-1;15156:4;45762:22;;72:20;97:33;72:20;97:33;:::i;:::-;45731:63;-1:-1;45831:2;45870:22;;72:20;97:33;72:20;97:33;:::i;:::-;45839:63;-1:-1;45967:3;45952:19;;45939:33;-1:-1;;;;;45981:30;;45978:2;;;-1:-1;;46014:12;46145:909;;;;;46360:3;46348:9;46339:7;46335:23;46331:33;46328:2;;;-1:-1;;46367:12;46328:2;46425:17;46412:31;-1:-1;;;;;46463:18;46455:6;46452:30;46449:2;;;-1:-1;;46485:12;46449:2;46571:22;;;;15688:4;15667:19;;;15663:30;15660:2;;;-1:-1;;15696:12;15660:2;15724:20;15688:4;15724:20;:::i;:::-;15830:73;15899:3;15875:22;15830:73;:::i;:::-;15812:16;15805:99;15994:2;15983:9;15979:18;15966:32;46463:18;16010:6;16007:30;16004:2;;;-1:-1;;16040:12;16004:2;16085:99;16180:3;16171:6;16160:9;16156:22;16085:99;:::i;:::-;15994:2;16071:5;16067:16;16060:125;;46505:98;;;;46658:53;46703:7;15994:2;46683:9;46679:22;46658:53;:::i;:::-;46648:63;;46766:53;46811:7;15688:4;46791:9;46787:22;46766:53;:::i;:::-;46756:63;;46884:2;46873:9;46869:18;46856:32;46842:46;;46463:18;46900:6;46897:30;46894:2;;;-1:-1;;46930:12;46894:2;;46960:78;47030:7;47021:6;47010:9;47006:22;46960:78;:::i;47061:805::-;;;;;47266:3;47254:9;47245:7;47241:23;47237:33;47234:2;;;-1:-1;;47273:12;47234:2;47335:80;47407:7;47383:22;47335:80;:::i;:::-;47325:90;;47452:2;47494:9;47490:22;14635:20;14660:32;14686:5;14660:32;:::i;:::-;47460:62;-1:-1;47559:3;47598:22;;14635:20;14660:32;14635:20;14660:32;:::i;:::-;47568:62;-1:-1;47695:3;47680:19;;47667:33;-1:-1;;;;;47709:30;;47706:2;;;-1:-1;;47742:12;47873:820;;;;;48086:3;48074:9;48065:7;48061:23;48057:33;48054:2;;;-1:-1;;48093:12;48054:2;48155:86;48233:7;48209:22;48155:86;:::i;:::-;48145:96;;48278:2;48321:9;48317:22;72:20;97:33;124:5;97:33;:::i;48700:907::-;;;;;48914:3;48902:9;48893:7;48889:23;48885:33;48882:2;;;-1:-1;;48921:12;48882:2;48979:17;48966:31;-1:-1;;;;;49017:18;49009:6;49006:30;49003:2;;;-1:-1;;49039:12;49003:2;49069:87;49148:7;49139:6;49128:9;49124:22;49069:87;:::i;:::-;49059:97;;49193:2;49236:9;49232:22;72:20;63:29;;97:33;124:5;97:33;:::i;:::-;49201:63;;-1:-1;49301:2;49340:22;;72:20;;97:33;72:20;97:33;:::i;:::-;49309:63;;-1:-1;49437:2;49422:18;;49409:32;;49450:30;;;49447:2;;;-1:-1;;49483:12;49614:771;;;;;49803:3;49791:9;49782:7;49778:23;49774:33;49771:2;;;-1:-1;;49810:12;49771:2;49868:17;49855:31;-1:-1;;;;;49898:6;49895:30;49892:2;;;-1:-1;;49928:12;49892:2;49958:87;50037:7;50028:6;50017:9;50013:22;49958:87;:::i;:::-;49948:97;;;50082:2;50125:9;50121:22;72:20;97:33;124:5;97:33;:::i;50392:771::-;;;;;50581:3;50569:9;50560:7;50556:23;50552:33;50549:2;;;-1:-1;;50588:12;50549:2;50646:17;50633:31;-1:-1;;;;;50676:6;50673:30;50670:2;;;-1:-1;;50706:12;50670:2;50736:87;50815:7;50806:6;50795:9;50791:22;50736:87;:::i;:::-;50726:97;;;50860:2;50903:9;50899:22;11358:20;50868:63;;50968:2;51011:9;51007:22;72:20;97:33;124:5;97:33;:::i;:::-;50976:63;-1:-1;51076:2;51115:22;;72:20;97:33;72:20;97:33;:::i;51983:640::-;;;;52194:3;52182:9;52173:7;52169:23;52165:33;52162:2;;;-1:-1;;52201:12;52162:2;52263:81;52336:7;52312:22;52263:81;:::i;:::-;52253:91;;52400:80;52472:7;52381:3;52452:9;52448:22;52400:80;:::i;:::-;52390:90;;52517:3;52579:9;52575:22;13556:20;13581:51;13626:5;13581:51;:::i;52630:815::-;;;;;52828:9;52819:7;52815:23;52840:3;52815:23;52811:33;52808:2;;;-1:-1;;52847:12;52808:2;23159:4;23138:19;23134:30;23131:2;;;-1:-1;;23167:12;23131:2;;23195:20;23159:4;23195:20;:::i;:::-;85:6;72:20;97:33;124:5;97:33;:::i;:::-;23278:75;;23423:2;23477:22;;;11358:20;23438:16;;;23431:75;23578:2;23632:22;;72:20;97:33;72:20;97:33;:::i;:::-;23578:2;23593:16;;23586:75;23597:5;-1:-1;23159:4;53068:22;;72:20;97:33;72:20;97:33;:::i;:::-;53037:63;-1:-1;53137:3;53177:22;;72:20;97:33;72:20;97:33;:::i;54268:261::-;;54382:2;54370:9;54361:7;54357:23;54353:32;54350:2;;;-1:-1;;54388:12;54350:2;26323:6;26317:13;125844:8;133913:5;125833:20;133889:5;133886:34;133876:2;;-1:-1;;133924:12;54806:928;;;;;55021:3;55009:9;55000:7;54996:23;54992:33;54989:2;;;-1:-1;;55028:12;54989:2;26600:6;26594:13;55080:74;;55212:2;;55201:9;55197:18;55191:25;-1:-1;;;;;55236:18;55228:6;55225:30;55222:2;;;-1:-1;;55258:12;55222:2;55360:6;55349:9;55345:22;;;8329:3;8322:4;8314:6;8310:17;8306:27;8296:2;;-1:-1;;8337:12;8296:2;8377:6;8371:13;8399:80;8414:64;8471:6;8414:64;:::i;8399:80::-;8507:21;;;8564:14;;;;8539:17;;;8653;;;8644:27;;;;8641:36;-1:-1;8638:2;;;-1:-1;;8680:12;8638:2;-1:-1;8706:10;;8700:217;8725:6;8722:1;8719:13;8700:217;;;8805:48;8849:3;8837:10;8805:48;:::i;:::-;8793:61;;8747:1;8740:9;;;;;8868:14;;;;8896;;8700:217;;;-1:-1;55435:2;55420:18;;55414:25;55278:99;;-1:-1;55414:25;-1:-1;;;55448:30;;;55445:2;;;-1:-1;;55481:12;55445:2;;;55511:88;55591:7;55582:6;55571:9;55567:22;55511:88;:::i;:::-;55636:2;55686:22;;;;26594:13;54983:751;;;;-1:-1;;;;54983:751::o;55741:399::-;;;55873:2;55861:9;55852:7;55848:23;55844:32;55841:2;;;-1:-1;;55879:12;55841:2;-1:-1;;26594:13;;56042:2;56092:22;;;26594:13;;;;;-1:-1;55835:305::o;56147:672::-;;;;;56313:3;56301:9;56292:7;56288:23;56284:33;56281:2;;;-1:-1;;56320:12;56281:2;-1:-1;;26594:13;;56483:2;56533:22;;26594:13;56602:2;56652:22;;26594:13;56721:2;56771:22;;;26594:13;;;;;-1:-1;26594:13;;-1:-1;56275:544;-1:-1;56275:544::o;56826:809::-;;;;;;57009:3;56997:9;56988:7;56984:23;56980:33;56977:2;;;-1:-1;;57016:12;56977:2;-1:-1;;26594:13;;57179:2;57229:22;;26594:13;57298:2;57348:22;;26594:13;57417:2;57467:22;;26594:13;57536:3;57587:22;;;26594:13;;;;;-1:-1;26594:13;;-1:-1;26594:13;;-1:-1;56971:664;-1:-1;56971:664::o;57642:259::-;;57755:2;57743:9;57734:7;57730:23;57726:32;57723:2;;;-1:-1;;57761:12;57723:2;27146:6;27140:13;27158:31;27183:5;27158:31;:::i;57909:173::-;-1:-1;;;;;125706:54;59648:45;;58071:4;58062:14;;57989:93::o;58681:273::-;;73281:16;73275:23;67537:3;67530:37;73454:4;73447:5;73443:16;73437:23;73454:4;73518:3;73514:14;67530:37;73617:4;73610:5;73606:16;73600:23;73617:4;73681:3;73677:14;67530:37;73773:4;73766:5;73762:16;73756:23;73773:4;73837:3;73833:14;67530:37;73931:4;73924:5;73920:16;73914:23;73207:4;73931;73961:3;73957:14;73950:38;74003:71;73207:4;73202:3;73198:14;74055:12;74003:71;:::i;59571:127::-;-1:-1;;;;;125706:54;59648:45;;59642:56::o;60973:690::-;;61166:5;119121:12;121371:6;121366:3;121359:19;121408:4;;121403:3;121399:14;61178:93;;121408:4;61342:5;117945:14;-1:-1;61381:260;61406:6;61403:1;61400:13;61381:260;;;61467:13;;-1:-1;;;;;125706:54;59648:45;;58062:14;;;;120327;;;;666:18;61421:9;61381:260;;;-1:-1;61647:10;;61097:566;-1:-1;;;;;61097:566::o;61702:690::-;;61895:5;119121:12;121371:6;121366:3;121359:19;121408:4;;121403:3;121399:14;61907:93;;121408:4;62071:5;117945:14;-1:-1;62110:260;62135:6;62132:1;62129:13;62110:260;;;62196:13;;67530:37;;58244:14;;;;120327;;;;62157:1;62150:9;62110:260;;68147:323;;68279:5;119121:12;121371:6;121366:3;121359:19;68362:52;68407:6;121408:4;121403:3;121399:14;121408:4;68388:5;68384:16;68362:52;:::i;:::-;130570:7;130554:14;-1:-1;;130550:28;68426:39;;;;121408:4;68426:39;;68227:243;-1:-1;;68227:243::o;74844:678::-;75064:23;;-1:-1;;;;;125706:54;59648:45;;75256:4;75245:16;;;75239:23;-1:-1;;;;;;123651:78;;;75314:14;;;67758:36;;;;75428:4;75417:16;;;75411:23;123651:78;75486:14;;67758:36;74964:558::o;75616:835::-;75839:23;;-1:-1;;;;;125706:54;;;59648:45;;76025:4;76014:16;;;76008:23;123485:13;123478:21;76079:14;;;67312:34;76178:4;76167:16;;;76161:23;125706:54;;;76254:14;;;59648:45;76361:4;76350:16;;;76344:23;123485:13;123478:21;76415:14;;67312:34;75744:707::o;76525:582::-;;76755:16;76749:23;67537:3;67530:37;76926:4;76919:5;76915:16;76909:23;76676:4;76926;76956:3;76952:14;76945:38;76998:71;76676:4;76671:3;76667:14;77050:12;76998:71;:::i;77197:1073::-;;77447:16;77441:23;67537:3;67530:37;77619:4;77612:5;77608:16;77602:23;666:18;;125717:42;;;;123295:5;125706:54;77619:4;77683:3;77679:14;59648:45;125717:42;77781:4;77774:5;77770:16;77764:23;125706:54;77781:4;77845:3;77841:14;59648:45;125717:42;77935:4;77928:5;77924:16;77918:23;125706:54;77935:4;77999:3;77995:14;59648:45;;;78089:4;78082:5;78078:16;78072:23;77366:4;78089;78119:3;78115:14;78108:38;78161:71;77366:4;77361:3;77357:14;78213:12;78161:71;:::i;80553:800::-;80781:16;80775:23;124674:54;124722:5;124674:54;:::i;:::-;71169:66;;80959:4;80948:16;;;80942:23;126213:4;126202:16;81015:14;;;82747:35;81106:4;81095:16;;;81089:23;81166:14;;;67530:37;81257:4;81246:16;;;81240:23;81317:14;;67530:37;80673:680::o;82126:103::-;-1:-1;;;;;125586:46;82187:37;;82181:48::o;82583:100::-;-1:-1;;;;;126100:30;82642:36;;82636:47::o;82794:253::-;130665:2;130661:14;;;;-1:-1;;130661:14;60168:58;;83019:2;83010:12;;82910:137::o;83054:291::-;;129939:6;129934:3;129929;129916:30;129977:16;;129970:27;;;129977:16;83198:147;-1:-1;83198:147::o;83352:271::-;;68987:5;119121:12;69098:52;69143:6;69138:3;69131:4;69124:5;69120:16;69098:52;:::i;:::-;69162:16;;;;;83486:137;-1:-1;;83486:137::o;83630:222::-;-1:-1;;;;;125706:54;;;;59648:45;;83757:2;83742:18;;83728:124::o;84120:349::-;-1:-1;;;;;125706:54;;;;59501:58;;84455:2;84440:18;;67530:37;84283:2;84268:18;;84254:215::o;84476:333::-;-1:-1;;;;;125706:54;;;59648:45;;125706:54;;84795:2;84780:18;;59648:45;84631:2;84616:18;;84602:207::o;84816:556::-;-1:-1;;;;;125706:54;;;59648:45;;125706:54;;;85192:2;85177:18;;59648:45;125706:54;;;85275:2;85260:18;;59648:45;125706:54;;;85358:2;85343:18;;59648:45;85027:3;85012:19;;84998:374::o;85379:704::-;-1:-1;;;;;125706:54;;;59648:45;;125706:54;;;85805:2;85790:18;;59648:45;125706:54;;85888:2;85873:18;;59648:45;85640:3;85925:2;85910:18;;85903:48;;;85379:704;;85965:108;;85625:19;;86059:6;85965:108;:::i;86090:556::-;-1:-1;;;;;125706:54;;;59648:45;;125706:54;;;86466:2;86451:18;;59648:45;125706:54;;86549:2;86534:18;;59648:45;86632:2;86617:18;;67530:37;;;;86301:3;86286:19;;86272:374::o;86653:432::-;-1:-1;;;;;125706:54;;;59648:45;;125706:54;;;;86994:2;86979:18;;59648:45;123485:13;;123478:21;87071:2;87056:18;;67312:34;86830:2;86815:18;;86801:284::o;87092:628::-;-1:-1;;;;;125706:54;;;59648:45;;125706:54;;87480:2;87465:18;;59648:45;123485:13;;123478:21;87557:2;87542:18;;67312:34;87315:3;87594:2;87579:18;;87572:48;;;87092:628;;87634:76;;87300:19;;87696:6;87634:76;:::i;87727:444::-;-1:-1;;;;;125706:54;;;59648:45;;125706:54;;;;88074:2;88059:18;;59648:45;88157:2;88142:18;;67530:37;;;;87910:2;87895:18;;87881:290::o;88178:768::-;-1:-1;;;;;125706:54;;;59648:45;;125706:54;;88608:2;88593:18;;59648:45;88691:2;88676:18;;67530:37;;;88782:2;88767:18;;71753:58;;;125717:42;88819:3;88804:19;;88797:49;;;88178:768;;88860:76;;88428:19;;88922:6;88860:76;:::i;:::-;88852:84;88414:532;-1:-1;;;;;;;88414:532::o;88953:740::-;-1:-1;;;;;125706:54;;59648:45;;89236:2;89354;89339:18;;89332:48;;;88953:740;;89394:108;;89221:18;;89488:6;89394:108;:::i;:::-;89550:9;89544:4;89540:20;89535:2;89524:9;89520:18;89513:48;89575:108;89678:4;89669:6;89575:108;:::i;89700:876::-;-1:-1;;;;;125706:54;;59648:45;;89700:876;124674:54;124722:5;124674:54;:::i;:::-;129441:38;90200:2;90189:9;90185:18;71483:62;90023:3;90237:2;90226:9;90222:18;90215:48;90277:108;90023:3;90012:9;90008:19;90371:6;90277:108;:::i;:::-;90433:9;90427:4;90423:20;90418:2;90407:9;90403:18;90396:48;90458:108;90561:4;90552:6;90458:108;:::i;90583:1644::-;-1:-1;;;;;125706:54;;;59648:45;;90583:1644;;91130:3;;124674:54;124722:5;124674:54;:::i;:::-;129441:38;91307:2;91296:9;91292:18;71483:62;91130:3;91344:2;91333:9;91329:18;91322:48;91384:108;91130:3;91119:9;91115:19;91478:6;91384:108;:::i;:::-;91376:116;;91540:9;91534:4;91530:20;91525:2;91514:9;91510:18;91503:48;91565:108;91668:4;91659:6;91565:108;:::i;:::-;125706:54;;;91752:3;91737:19;;59648:45;91557:116;-1:-1;124674:54;124722:5;124674:54;:::i;:::-;129441:38;91848:3;91837:9;91833:19;71483:62;91902:9;91896:4;91892:20;91886:3;91875:9;91871:19;91864:49;91927:108;92030:4;92021:6;91927:108;:::i;:::-;91919:116;;92084:9;92078:4;92074:20;92068:3;92057:9;92053:19;92046:49;92109:108;92212:4;92203:6;92109:108;:::i;:::-;92101:116;91101:1126;-1:-1;;;;;;;;;;;91101:1126::o;92234:517::-;-1:-1;;;;;125706:54;;59648:45;;92457:2;92575;92560:18;;92553:48;;;92234:517;;92615:126;;92442:18;;92727:6;92615:126;:::i;93098:390::-;93285:2;93299:47;;;93270:18;;;121359:19;;;93098:390;;60594:21;121399:14;;;93098:390;60621:291;60646:6;60643:1;60640:13;60621:291;;;85:6;72:20;97:33;124:5;97:33;:::i;:::-;-1:-1;;;;;125706:54;59648:45;;123188:12;;;;58062:14;;;;666:18;60661:9;60621:291;;;-1:-1;93352:126;93256:232;-1:-1;;;;;;93256:232::o;93495:629::-;;93750:2;93771:17;93764:47;93825:108;93750:2;93739:9;93735:18;93919:6;93825:108;:::i;:::-;93981:9;93975:4;93971:20;93966:2;93955:9;93951:18;93944:48;94006:108;94109:4;94100:6;94006:108;:::i;94131:481::-;;94336:2;94357:17;94350:47;94411:108;94336:2;94325:9;94321:18;94505:6;94411:108;:::i;:::-;94403:116;;67560:5;94598:2;94587:9;94583:18;67530:37;94307:305;;;;;:::o;94619:924::-;;94970:2;94959:9;94955:18;94970:2;94991:17;94984:47;95045:126;62647:5;119121:12;121371:6;121366:3;121359:19;121399:14;94959:9;121399:14;62659:102;;121408:4;;;121399:14;121408:4;62818:6;62814:17;94959:9;62805:27;;121408:4;62912:5;117945:14;-1:-1;62951:357;62976:6;62973:1;62970:13;62951:357;;;63028:20;;94959:9;63032:4;63028:20;;63023:3;63016:33;58392:64;58452:3;63083:6;63077:13;58392:64;:::i;:::-;63287:14;;;;63097:90;-1:-1;120327:14;;;;62998:1;62991:9;62951:357;;;62955:14;;95219:9;95213:4;95209:20;121408:4;95193:9;95189:18;95182:48;95244:108;95347:4;95338:6;95244:108;:::i;:::-;95236:116;;;;;95400:9;95394:4;95390:20;95385:2;95374:9;95370:18;95363:48;95425:108;95528:4;95519:6;95425:108;:::i;95550:486::-;95785:2;95799:47;;;119121:12;;95770:18;;;121359:19;;;95550:486;;95785:2;121399:14;;;;;;65907:17;;;65898:27;;;;117945:14;;;95550:486;66064:417;66089:6;66086:1;66083:13;66064:417;;;66141:20;;;-1:-1;;66141:20;66129:33;;66190:13;;74419:23;;74455:38;;;74508:71;74344:14;;;74419:23;74508:71;:::i;:::-;74656:16;;;74650:23;123485:13;123478:21;74721:14;;;67312:34;;;;66460:14;;;;74500:79;-1:-1;120327:14;;;;66111:1;66104:9;66064:417;;;-1:-1;95852:174;;95756:280;-1:-1;;;;;;;;95756:280::o;96043:370::-;;96220:2;96241:17;96234:47;96295:108;96220:2;96209:9;96205:18;96389:6;96295:108;:::i;96420:210::-;123485:13;;123478:21;67312:34;;96541:2;96526:18;;96512:118::o;96637:580::-;123485:13;;123478:21;67312:34;;-1:-1;;;;;125706:54;;97022:2;97007:18;;59648:45;96864:2;97059;97044:18;;97037:48;;;96637:580;;97099:108;;96849:18;;97193:6;97099:108;:::i;97224:222::-;67530:37;;;97351:2;97336:18;;97322:124::o;97453:676::-;;67560:5;67537:3;67530:37;97704:2;97822;97811:9;97807:18;97800:48;97862:76;97704:2;97693:9;97689:18;97924:6;97862:76;:::i;98136:306::-;;98281:2;98302:17;98295:47;98356:76;98281:2;98270:9;98266:18;98418:6;98356:76;:::i;98449:417::-;;98622:2;98643:17;98636:47;98697:76;98622:2;98611:9;98607:18;98759:6;98697:76;:::i;98873:536::-;-1:-1;;;;;125706:54;;;69265:64;;125706:54;;;;99314:2;99299:18;;69265:64;125844:8;125833:20;;;99395:2;99380:18;;82305:36;99102:2;99087:18;;99073:336::o;99963:519::-;-1:-1;;;;;125706:54;;69265:64;;100187:2;100324;100309:18;;100302:48;;;99963:519;;100364:108;;100172:18;;100458:6;100364:108;:::i;101464:482::-;101666:2;101651:18;;124674:54;124722:5;124674:54;:::i;:::-;70810:69;;;101849:2;101834:18;;67530:37;;;;101932:2;101917:18;;;67530:37;101637:309;:::o;101953:512::-;102170:2;102155:18;;130917:1;130907:12;;130897:2;;130923:9;102472:1144;;102929:3;102918:9;102914:19;129302:36;71381:5;129302:36;:::i;:::-;71335:3;71328:60;103058:2;102929:3;103058:2;103047:9;103043:18;103036:48;103098:168;64536:5;119121:12;64555:116;64664:6;64659:3;64555:116;:::i;:::-;64548:123;;;;;103058:2;64728:6;64724:17;64719:3;64715:27;103058:2;64843:5;117945:14;-1:-1;64882:420;64907:6;64904:1;64901:13;64882:420;;;64969:9;64963:4;64959:20;64954:3;64947:33;65036:124;65155:4;65014:6;65008:13;65036:124;:::i;:::-;65281:14;;;;65028:132;-1:-1;120327:14;;;;64929:1;64922:9;64882:420;;;64886:14;;103314:9;103308:4;103304:20;103299:2;103288:9;103284:18;103277:48;103339:122;;;63615:5;119121:12;63539:82;;63634:86;63713:6;63708:3;63634:86;:::i;:::-;63627:93;;;;103058:2;63805:5;117945:14;-1:-1;63844:288;63869:6;63866:1;63863:13;63844:288;;;63957:77;64030:3;63936:6;63930:13;63957:77;:::i;:::-;63950:84;-1:-1;120327:14;;;;64929:1;63884:9;63844:288;;;63848:14;;;;103331:130;;;;103472:134;103602:2;103591:9;103587:18;103578:6;103472:134;:::i;103623:436::-;125424:2;125413:21;;;71626:36;;125413:21;;;;103962:2;103947:18;;71626:36;104045:2;104030:18;;67530:37;;;;103802:2;103787:18;;103773:286::o;104066:438::-;125424:2;125413:21;;;71626:36;;104273:3;104258:19;;104368:126;104490:2;104475:18;;104466:6;104368:126;:::i;104964:416::-;105164:2;105178:47;;;72048:2;105149:18;;;121359:19;72084:34;121399:14;;;72064:55;-1:-1;;;72139:12;;;72132:28;72179:12;;;105135:245::o;105387:416::-;105587:2;105601:47;;;72430:2;105572:18;;;121359:19;72466:34;121399:14;;;72446:55;-1:-1;;;72521:12;;;72514:29;72562:12;;;105558:245::o;105810:416::-;106010:2;106024:47;;;72813:2;105995:18;;;121359:19;72849:34;121399:14;;;72829:55;-1:-1;;;72904:12;;;72897:29;72945:12;;;105981:245::o;106233:806::-;;106559:125;106666:17;106657:6;106559:125;:::i;:::-;71655:5;125424:2;125413:21;106761:2;106750:9;106746:18;71626:36;71655:5;125424:2;125413:21;106842:3;106831:9;106827:19;71626:36;106544:3;106880;106869:9;106865:19;106858:49;106921:108;106544:3;106533:9;106529:19;107015:6;106921:108;:::i;107046:740::-;;107329:2;107350:17;107343:47;107404:108;107329:2;107318:9;107314:18;107498:6;107404:108;:::i;:::-;107560:9;107554:4;107550:20;107545:2;107534:9;107530:18;107523:48;107585:108;107688:4;107679:6;107585:108;:::i;:::-;107577:116;;;67560:5;107772:2;107761:9;107757:18;67530:37;107300:486;;;;;;:::o;107793:740::-;;108072:3;108094:17;108087:47;108148:126;108072:3;108061:9;108057:19;108260:6;108148:126;:::i;:::-;-1:-1;;;;;125706:54;;;108353:2;108338:18;;59648:45;125706:54;;;;108436:2;108421:18;;59648:45;108519:2;108504:18;67530:37;108140:134;108043:490;-1:-1;;108043:490::o;108540:740::-;;108819:3;108841:17;108834:47;108895:126;108819:3;108808:9;108804:19;109007:6;108895:126;:::i;:::-;109100:2;109085:18;;67530:37;;;;-1:-1;;;;;;125706:54;;;109183:2;109168:18;;59648:45;125706:54;;109266:2;109251:18;;;59648:45;108887:134;108790:490;-1:-1;108790:490::o;109287:703::-;;109598:3;109587:9;109583:19;109575:27;;78594:87;78666:14;78571:16;78565:23;78594:87;:::i;:::-;78766:4;78759:5;78755:16;78749:23;78778:87;78766:4;78854:3;78850:14;78836:12;78778:87;:::i;:::-;;78951:4;78944:5;78940:16;78934:23;78963:63;78951:4;79015:3;79011:14;78997:12;78963:63;:::i;:::-;;79112:4;79105:5;79101:16;79095:23;79124:63;79112:4;79176:3;79172:14;79158:12;79124:63;:::i;:::-;;79281:4;79274:5;79270:16;79264:23;79293:63;79281:4;79345:3;79341:14;79327:12;79293:63;:::i;:::-;;79436:4;79429:5;79425:16;79419:23;79448:63;79436:4;79500:3;79496:14;79482:12;79448:63;:::i;:::-;;79591:4;79584:5;79580:16;79574:23;79603:63;79591:4;79655:3;79651:14;79637:12;79603:63;:::i;:::-;;79747:4;79740:5;79736:16;79730:23;79759:63;79747:4;79811:3;79807:14;79793:12;79759:63;:::i;:::-;;79909:6;;79902:5;79898:18;79892:25;79923:65;79909:6;79975:3;79971:16;79957:12;79923:65;:::i;:::-;-1:-1;;80067:6;80056:18;;;80050:25;80129:16;;;67530:37;80227:6;80216:18;;;80210:25;80241:63;80287:16;;;80210:25;80241:63;:::i;:::-;-1:-1;;80383:6;80372:18;;;80366:25;80445:16;;;67530:37;109751:127;109873:3;109858:19;;109849:6;109751:127;:::i;:::-;109889:91;109975:3;109964:9;109960:19;109951:6;109889:91;:::i;111047:481::-;;67560:5;67537:3;67530:37;111252:2;111370;111359:9;111355:18;111348:48;111410:108;111252:2;111241:9;111237:18;111504:6;111410:108;:::i;111535:740::-;;67560:5;67537:3;67530:37;111818:2;111936;111925:9;111921:18;111914:48;111976:108;111818:2;111807:9;111803:18;112070:6;111976:108;:::i;:::-;112132:9;112126:4;112122:20;112117:2;112106:9;112102:18;112095:48;112157:108;112260:4;112251:6;112157:108;:::i;112282:780::-;67530:37;;;112714:2;112699:18;;67530:37;;;;112797:2;112782:18;;67530:37;;;;112880:2;112865:18;;67530:37;112963:3;112948:19;;67530:37;113047:3;113032:19;;67530:37;112549:3;112534:19;;112520:542::o;113069:506::-;;;113204:11;113191:25;113255:48;;113279:8;113263:14;113259:29;113255:48;113235:18;113231:73;113221:2;;-1:-1;;113308:12;113221:2;113335:33;;113389:18;;;-1:-1;;;;;;113416:30;;113413:2;;;-1:-1;;113449:12;113413:2;113294:4;113477:13;;-1:-1;113263:14;113509:38;;;113499:49;;113496:2;;;113561:1;;113551:12;113582:256;113644:2;113638:9;113670:17;;;-1:-1;;;;;113730:34;;113766:22;;;113727:62;113724:2;;;113802:1;;113792:12;113724:2;113644;113811:22;113622:216;;-1:-1;113622:216::o;113845:304::-;;-1:-1;;;;;113996:6;113993:30;113990:2;;;-1:-1;;114026:12;113990:2;-1:-1;114071:4;114059:17;;;114124:15;;113927:222::o;117377:321::-;;-1:-1;;;;;117512:6;117509:30;117506:2;;;-1:-1;;117542:12;117506:2;-1:-1;130570:7;117596:17;-1:-1;;117592:33;117683:4;117673:15;;117443:255::o;125074:130::-;125137:16;131143:1;131133:12;;131123:2;;131149:9;130012:268;130077:1;130084:101;130098:6;130095:1;130092:13;130084:101;;;130165:11;;;130159:18;130146:11;;;130139:39;130120:2;130113:10;130084:101;;;130200:6;130197:1;130194:13;130191:2;;;130077:1;130256:6;130251:3;130247:16;130240:27;130191:2;;130061:219;;;:::o;130693:112::-;130783:1;130776:5;130773:12;130763:2;;130789:9;131284:117;-1:-1;;;;;125706:54;;131343:35;;131333:2;;131392:1;;131382:12;131790:115;-1:-1;;;;;;123651:78;;131848:34;;131838:2;;131896:1;;131886:12;133336:115;133421:5;125424:2;125413:21;133397:5;133394:34;133384:2;;133442:1;;133432:12;134318:113;126213:4;134401:5;126202:16;134378:5;134375:33;134365:2;;134422:1;;134412:12"
            }
        }
    },
    "sourceTreeHashHex": "0x4e739c333621899ddf5900ec49befe6a14e5de7ed5e99e5e3bf04b3c55c52c34",
    "sources": {
        "./TestERC20BridgeSampler.sol": {
            "id": 38,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"../src/ERC20BridgeSampler.sol\";\nimport \"../src/interfaces/IKyberNetwork.sol\";\nimport \"../src/interfaces/IUniswapV2Router01.sol\";\n\n\nlibrary LibDeterministicQuotes {\n\n    address private constant WETH_ADDRESS = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n    uint256 private constant RATE_DENOMINATOR = 1 ether;\n    uint256 private constant MIN_RATE = RATE_DENOMINATOR / 100;\n    uint256 private constant MAX_RATE = 100 * RATE_DENOMINATOR;\n    uint8 private constant MIN_DECIMALS = 4;\n    uint8 private constant MAX_DECIMALS = 20;\n\n    function getDeterministicSellQuote(\n        bytes32 salt,\n        address sellToken,\n        address buyToken,\n        uint256 sellAmount\n    )\n        internal\n        pure\n        returns (uint256 buyAmount)\n    {\n        uint256 sellBase = uint256(10) ** getDeterministicTokenDecimals(sellToken);\n        uint256 buyBase = uint256(10) ** getDeterministicTokenDecimals(buyToken);\n        uint256 rate = getDeterministicRate(salt, sellToken, buyToken);\n        return sellAmount * rate * buyBase / sellBase / RATE_DENOMINATOR;\n    }\n\n    function getDeterministicBuyQuote(\n        bytes32 salt,\n        address sellToken,\n        address buyToken,\n        uint256 buyAmount\n    )\n        internal\n        pure\n        returns (uint256 sellAmount)\n    {\n        uint256 sellBase = uint256(10) ** getDeterministicTokenDecimals(sellToken);\n        uint256 buyBase = uint256(10) ** getDeterministicTokenDecimals(buyToken);\n        uint256 rate = getDeterministicRate(salt, sellToken, buyToken);\n        return buyAmount * RATE_DENOMINATOR * sellBase / rate / buyBase;\n    }\n\n    function getDeterministicTokenDecimals(address token)\n        internal\n        pure\n        returns (uint8 decimals)\n    {\n        if (token == WETH_ADDRESS) {\n            return 18;\n        }\n        bytes32 seed = keccak256(abi.encodePacked(token));\n        return uint8(uint256(seed) % (MAX_DECIMALS - MIN_DECIMALS)) + MIN_DECIMALS;\n    }\n\n    function getDeterministicRate(bytes32 salt, address sellToken, address buyToken)\n        internal\n        pure\n        returns (uint256 rate)\n    {\n        bytes32 seed = keccak256(abi.encodePacked(salt, sellToken, buyToken));\n        return uint256(seed) % (MAX_RATE - MIN_RATE) + MIN_RATE;\n    }\n}\n\ncontract TestDeploymentConstants {\n\n    // solhint-disable separate-by-one-line-in-contract\n\n    // Mainnet addresses ///////////////////////////////////////////////////////\n    /// @dev Mainnet address of the WETH contract.\n    address constant private WETH_ADDRESS = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n\n    /// @dev Overridable way to get the WETH address.\n    /// @return wethAddress The WETH address.\n    function _getWethAddress()\n        internal\n        view\n        returns (address wethAddress)\n    {\n        return WETH_ADDRESS;\n    }\n\n}\n\ncontract FailTrigger {\n\n    // Give this address a balance to force operations to fail.\n    address payable constant public FAILURE_ADDRESS = 0xe9dB8717BC5DFB20aaf538b4a5a02B7791FF430C;\n\n    // Funds `FAILURE_ADDRESS`.\n    function enableFailTrigger() external payable {\n        FAILURE_ADDRESS.transfer(msg.value);\n    }\n\n    function _revertIfShouldFail() internal view {\n        if (FAILURE_ADDRESS.balance != 0) {\n            revert(\"FAIL_TRIGGERED\");\n        }\n    }\n}\n\n\ncontract TestERC20BridgeSamplerUniswapExchange is\n    IUniswapExchangeQuotes,\n    TestDeploymentConstants,\n    FailTrigger\n{\n    bytes32 constant private BASE_SALT = 0x1d6a6a0506b0b4a554b907a4c29d9f4674e461989d9c1921feb17b26716385ab;\n\n    address public tokenAddress;\n    bytes32 public salt;\n\n    constructor(address _tokenAddress) public {\n        tokenAddress = _tokenAddress;\n        salt = keccak256(abi.encodePacked(BASE_SALT, _tokenAddress));\n    }\n\n    // Deterministic `IUniswapExchangeQuotes.getEthToTokenInputPrice()`.\n    function getEthToTokenInputPrice(\n        uint256 ethSold\n    )\n        override\n        external\n        view\n        returns (uint256 tokensBought)\n    {\n        _revertIfShouldFail();\n        return LibDeterministicQuotes.getDeterministicSellQuote(\n            salt,\n            tokenAddress,\n            _getWethAddress(),\n            ethSold\n        );\n    }\n\n    // Deterministic `IUniswapExchangeQuotes.getEthToTokenOutputPrice()`.\n    function getEthToTokenOutputPrice(\n        uint256 tokensBought\n    )\n        override\n        external\n        view\n        returns (uint256 ethSold)\n    {\n        _revertIfShouldFail();\n        return LibDeterministicQuotes.getDeterministicBuyQuote(\n            salt,\n            _getWethAddress(),\n            tokenAddress,\n            tokensBought\n        );\n    }\n\n    // Deterministic `IUniswapExchangeQuotes.getTokenToEthInputPrice()`.\n    function getTokenToEthInputPrice(\n        uint256 tokensSold\n    )\n        override\n        external\n        view\n        returns (uint256 ethBought)\n    {\n        _revertIfShouldFail();\n        return LibDeterministicQuotes.getDeterministicSellQuote(\n            salt,\n            tokenAddress,\n            _getWethAddress(),\n            tokensSold\n        );\n    }\n\n    // Deterministic `IUniswapExchangeQuotes.getTokenToEthOutputPrice()`.\n    function getTokenToEthOutputPrice(\n        uint256 ethBought\n    )\n        override\n        external\n        view\n        returns (uint256 tokensSold)\n    {\n        _revertIfShouldFail();\n        return LibDeterministicQuotes.getDeterministicBuyQuote(\n            salt,\n            _getWethAddress(),\n            tokenAddress,\n            ethBought\n        );\n    }\n}\n\n\ncontract TestERC20BridgeSamplerUniswapV2Router01 is\n    IUniswapV2Router01,\n    TestDeploymentConstants,\n    FailTrigger\n{\n    bytes32 constant private SALT = 0xadc7fcb33c735913b8635927e66896b356a53a912ab2ceff929e60a04b53b3c1;\n\n    // Deterministic `IUniswapV2Router01.getAmountsOut()`.\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\n        override\n        external\n        view\n        returns (uint256[] memory amounts)\n    {\n        require(path.length >= 2, \"PATH_TOO_SHORT\");\n        _revertIfShouldFail();\n        amounts = new uint256[](path.length);\n        amounts[0] = amountIn;\n        for (uint256 i = 0; i < path.length - 1; ++i) {\n            amounts[i + 1] = LibDeterministicQuotes.getDeterministicSellQuote(\n                SALT,\n                path[i],\n                path[i + 1],\n                amounts[i]\n            );\n        }\n    }\n\n    // Deterministic `IUniswapV2Router01.getAmountsInt()`.\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\n        override\n        external\n        view\n        returns (uint256[] memory amounts)\n    {\n        require(path.length >= 2, \"PATH_TOO_SHORT\");\n        _revertIfShouldFail();\n        amounts = new uint256[](path.length);\n        amounts[path.length - 1] = amountOut;\n        for (uint256 i = path.length - 1; i > 0; --i) {\n            amounts[i - 1] = LibDeterministicQuotes.getDeterministicBuyQuote(\n                SALT,\n                path[i - 1],\n                path[i],\n                amounts[i]\n            );\n        }\n    }\n}\n\n\n// solhint-disable space-after-comma\ncontract TestERC20BridgeSamplerKyberNetwork is\n    TestDeploymentConstants,\n    FailTrigger\n{\n    bytes32 constant private SALT = 0x0ff3ca9d46195c39f9a12afb74207b4970349fb3cfb1e459bbf170298d326bc7;\n    address constant public ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n\n    enum TradeType {BestOfAll, MaskIn, MaskOut, Split}\n    enum ProcessWithRate {NotRequired, Required}\n\n    // IKyberHintHandler\n    function buildTokenToEthHint(\n        address tokenSrc,\n        TradeType /* tokenToEthType */,\n        bytes32[] calldata /* tokenToEthReserveIds */,\n        uint256[] calldata /* tokenToEthSplits */\n    ) external view returns (bytes memory hint)\n    {\n        return abi.encode(tokenSrc);\n    }\n\n    function buildEthToTokenHint(\n        address tokenDest,\n        TradeType /* ethToTokenType */,\n        bytes32[] calldata /* ethToTokenReserveIds */,\n        uint256[] calldata /* ethToTokenSplits */\n    ) external view returns (bytes memory hint)\n    {\n        return abi.encode(tokenDest);\n    }\n\n    // IKyberHintHandler\n    function buildTokenToTokenHint(\n        address tokenSrc,\n        TradeType /* tokenToEthType */,\n        bytes32[] calldata /* tokenToEthReserveIds */,\n        uint256[] calldata /* tokenToEthSplits */,\n        address /* tokenDest  */,\n        TradeType /* EthToTokenType */,\n        bytes32[] calldata /* EthToTokenReserveIds */,\n        uint256[] calldata /* EthToTokenSplits */\n    ) external view returns (bytes memory hint)\n    {\n        return abi.encode(tokenSrc);\n    }\n\n    // IKyberHintHandler\n    function getTradingReserves(\n        address tokenSrc,\n        address tokenDest,\n        bool isTokenToToken,\n        bytes calldata hint\n    )\n        external\n        view\n        returns (\n            bytes32[] memory reserveIds,\n            uint256[] memory splitValuesBps,\n            ProcessWithRate processWithRate\n        )\n    {\n        reserveIds = new bytes32[](1);\n        reserveIds[0] = bytes32(uint256(1));\n        splitValuesBps = new uint256[](0);\n        processWithRate = ProcessWithRate.NotRequired;\n    }\n\n    // Deterministic `IKyberNetworkProxy.getExpectedRateAfterFee()`.\n    function getExpectedRateAfterFee(\n        address fromToken,\n        address toToken,\n        uint256 /* srcQty */,\n        uint256 /* fee */,\n        bytes calldata /* hint */\n    )\n        external\n        view\n        returns\n        (uint256 expectedRate)\n    {\n        _revertIfShouldFail();\n        fromToken = fromToken == ETH_ADDRESS ? _getWethAddress() : fromToken;\n        toToken = toToken == ETH_ADDRESS ? _getWethAddress() : toToken;\n        expectedRate = LibDeterministicQuotes.getDeterministicRate(\n            SALT,\n            fromToken,\n            toToken\n        );\n    }\n\n    // Deterministic `IKyberNetworkProxy.getExpectedRate()`.\n    function getExpectedRate(\n        address fromToken,\n        address toToken,\n        uint256\n    )\n        external\n        view\n        returns (uint256 expectedRate, uint256)\n    {\n        _revertIfShouldFail();\n        fromToken = fromToken == ETH_ADDRESS ? _getWethAddress() : fromToken;\n        toToken = toToken == ETH_ADDRESS ? _getWethAddress() : toToken;\n        expectedRate = LibDeterministicQuotes.getDeterministicRate(\n            SALT,\n            fromToken,\n            toToken\n        );\n    }\n}\n\n\ncontract TestERC20BridgeSamplerUniswapExchangeFactory is\n    IUniswapExchangeFactory\n{\n    mapping (address => IUniswapExchangeQuotes) private _exchangesByToken;\n\n    // Creates Uniswap exchange contracts for tokens.\n    function createTokenExchanges(address[] calldata tokenAddresses)\n        external\n    {\n        for (uint256 i = 0; i < tokenAddresses.length; i++) {\n            address tokenAddress = tokenAddresses[i];\n            _exchangesByToken[tokenAddress] =\n                new TestERC20BridgeSamplerUniswapExchange(tokenAddress);\n        }\n    }\n\n    // `IUniswapExchangeFactory.getExchange()`.\n    function getExchange(address tokenAddress)\n        override\n        external\n        view\n        returns (address)\n    {\n        return address(_exchangesByToken[tokenAddress]);\n    }\n}\n\n\ncontract TestERC20BridgeSampler is\n    ERC20BridgeSampler,\n    FailTrigger\n{\n    TestERC20BridgeSamplerUniswapExchangeFactory public uniswap;\n    TestERC20BridgeSamplerUniswapV2Router01 public uniswapV2Router;\n    TestERC20BridgeSamplerKyberNetwork public kyber;\n\n    uint8 private constant MAX_ORDER_STATUS = uint8(IExchange.OrderStatus.CANCELLED) + 1;\n\n    constructor() public ERC20BridgeSampler() {\n        uniswap = new TestERC20BridgeSamplerUniswapExchangeFactory();\n        uniswapV2Router = new TestERC20BridgeSamplerUniswapV2Router01();\n        kyber = new TestERC20BridgeSamplerKyberNetwork();\n    }\n\n    // Creates Uniswap exchange contracts for tokens.\n    function createTokenExchanges(address[] calldata tokenAddresses)\n        external\n    {\n        uniswap.createTokenExchanges(tokenAddresses);\n    }\n\n    // Overridden to return deterministic states.\n    function getLimitOrderFillableTakerAmount(\n        IExchange.LimitOrder memory order,\n        IExchange.Signature memory,\n        IExchange\n    )\n        override\n        public\n        view\n        returns (uint256 fillableTakerAmount)\n    {\n        return uint256(keccak256(abi.encode(order.salt))) % order.takerAmount;\n    }\n\n    // Overriden to return deterministic decimals.\n    function _getTokenDecimals(address tokenAddress)\n        override\n        internal\n        view\n        returns (uint8 decimals)\n    {\n        return LibDeterministicQuotes.getDeterministicTokenDecimals(tokenAddress);\n    }\n}\n"
        },
        "../src/ERC20BridgeSampler.sol": {
            "id": 8,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./BalancerSampler.sol\";\nimport \"./BalancerV2Sampler.sol\";\nimport \"./BancorSampler.sol\";\nimport \"./CompoundSampler.sol\";\nimport \"./CurveSampler.sol\";\nimport \"./DODOSampler.sol\";\nimport \"./DODOV2Sampler.sol\";\nimport \"./KyberSampler.sol\";\nimport \"./KyberDmmSampler.sol\";\nimport \"./LidoSampler.sol\";\nimport \"./LiquidityProviderSampler.sol\";\nimport \"./MakerPSMSampler.sol\";\nimport \"./MultiBridgeSampler.sol\";\nimport \"./MStableSampler.sol\";\nimport \"./MooniswapSampler.sol\";\nimport \"./NativeOrderSampler.sol\";\nimport \"./ShellSampler.sol\";\nimport \"./SmoothySampler.sol\";\nimport \"./TwoHopSampler.sol\";\nimport \"./UniswapSampler.sol\";\nimport \"./UniswapV2Sampler.sol\";\nimport \"./UniswapV3Sampler.sol\";\nimport \"./UtilitySampler.sol\";\n\n\ncontract ERC20BridgeSampler is\n    BalancerSampler,\n    BalancerV2Sampler,\n    BancorSampler,\n    CompoundSampler,\n    CurveSampler,\n    DODOSampler,\n    DODOV2Sampler,\n    KyberSampler,\n    KyberDmmSampler,\n    LidoSampler,\n    LiquidityProviderSampler,\n    MakerPSMSampler,\n    MStableSampler,\n    MooniswapSampler,\n    MultiBridgeSampler,\n    NativeOrderSampler,\n    ShellSampler,\n    SmoothySampler,\n    TwoHopSampler,\n    UniswapSampler,\n    UniswapV2Sampler,\n    UniswapV3Sampler,\n    UtilitySampler\n{\n\n    struct CallResults {\n        bytes data;\n        bool success;\n    }\n\n    /// @dev Call multiple public functions on this contract in a single transaction.\n    /// @param callDatas ABI-encoded call data for each function call.\n    /// @return callResults ABI-encoded results data for each call.\n    function batchCall(bytes[] calldata callDatas)\n        external\n        returns (CallResults[] memory callResults)\n    {\n        callResults = new CallResults[](callDatas.length);\n        for (uint256 i = 0; i != callDatas.length; ++i) {\n            callResults[i].success = true;\n            if (callDatas[i].length == 0) {\n                continue;\n            }\n            (callResults[i].success, callResults[i].data) = address(this).call(callDatas[i]);\n        }\n    }\n}\n"
        },
        "../src/BalancerSampler.sol": {
            "id": 1,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IBalancer.sol\";\n\n\ncontract BalancerSampler {\n\n    /// @dev Base gas limit for Balancer calls.\n    uint256 constant private BALANCER_CALL_GAS = 300e3; // 300k\n\n    // Balancer math constants\n    // https://github.com/balancer-labs/balancer-core/blob/master/contracts/BConst.sol\n    uint256 constant private BONE = 10 ** 18;\n    uint256 constant private MAX_IN_RATIO = BONE / 2;\n    uint256 constant private MAX_OUT_RATIO = (BONE / 3) + 1 wei;\n\n    struct BalancerState {\n        uint256 takerTokenBalance;\n        uint256 makerTokenBalance;\n        uint256 takerTokenWeight;\n        uint256 makerTokenWeight;\n        uint256 swapFee;\n    }\n\n    /// @dev Sample sell quotes from Balancer.\n    /// @param poolAddress Address of the Balancer pool to query.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromBalancer(\n        address poolAddress,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        IBalancer pool = IBalancer(poolAddress);\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        if (!pool.isBound(takerToken) || !pool.isBound(makerToken)) {\n            return makerTokenAmounts;\n        }\n\n        BalancerState memory poolState;\n        poolState.takerTokenBalance = pool.getBalance(takerToken);\n        poolState.makerTokenBalance = pool.getBalance(makerToken);\n        poolState.takerTokenWeight = pool.getDenormalizedWeight(takerToken);\n        poolState.makerTokenWeight = pool.getDenormalizedWeight(makerToken);\n        poolState.swapFee = pool.getSwapFee();\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            // Handles this revert scenario:\n            // https://github.com/balancer-labs/balancer-core/blob/master/contracts/BPool.sol#L443\n            if (takerTokenAmounts[i] > _bmul(poolState.takerTokenBalance, MAX_IN_RATIO)) {\n                break;\n            }\n            try\n                pool.calcOutGivenIn\n                    {gas: BALANCER_CALL_GAS}\n                    (\n                        poolState.takerTokenBalance,\n                        poolState.takerTokenWeight,\n                        poolState.makerTokenBalance,\n                        poolState.makerTokenWeight,\n                        takerTokenAmounts[i],\n                        poolState.swapFee\n                    )\n                returns (uint256 amount)\n            {\n                makerTokenAmounts[i] = amount;\n                // Break early if there are 0 amounts\n                if (makerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from Balancer.\n    /// @param poolAddress Address of the Balancer pool to query.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromBalancer(\n        address poolAddress,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        IBalancer pool = IBalancer(poolAddress);\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n        if (!pool.isBound(takerToken) || !pool.isBound(makerToken)) {\n            return takerTokenAmounts;\n        }\n\n        BalancerState memory poolState;\n        poolState.takerTokenBalance = pool.getBalance(takerToken);\n        poolState.makerTokenBalance = pool.getBalance(makerToken);\n        poolState.takerTokenWeight = pool.getDenormalizedWeight(takerToken);\n        poolState.makerTokenWeight = pool.getDenormalizedWeight(makerToken);\n        poolState.swapFee = pool.getSwapFee();\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            // Handles this revert scenario:\n            // https://github.com/balancer-labs/balancer-core/blob/master/contracts/BPool.sol#L505\n            if (makerTokenAmounts[i] > _bmul(poolState.makerTokenBalance, MAX_OUT_RATIO)) {\n                break;\n            }\n            try\n                pool.calcInGivenOut\n                    {gas: BALANCER_CALL_GAS}\n                    (\n                        poolState.takerTokenBalance,\n                        poolState.takerTokenWeight,\n                        poolState.makerTokenBalance,\n                        poolState.makerTokenWeight,\n                        makerTokenAmounts[i],\n                        poolState.swapFee\n                    )\n                returns (uint256 amount)\n            {\n                // Handles this revert scenario:\n                // https://github.com/balancer-labs/balancer-core/blob/master/contracts/BPool.sol#L443\n                if (amount > _bmul(poolState.takerTokenBalance, MAX_IN_RATIO)) {\n                    break;\n                }\n\n                takerTokenAmounts[i] = amount;\n                // Break early if there are 0 amounts\n                if (takerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    /// @dev Hacked version of Balancer's `bmul` function, returning 0 instead\n    ///      of reverting.\n    ///      https://github.com/balancer-labs/balancer-core/blob/master/contracts/BNum.sol#L63-L73\n    /// @param a The first operand.\n    /// @param b The second operand.\n    /// @param c The result of the multiplication, or 0 if `bmul` would've reverted.\n    function _bmul(uint256 a, uint256 b)\n        private\n        pure\n        returns (uint256 c)\n    {\n        uint c0 = a * b;\n        if (a != 0 && c0 / a != b) {\n            return 0;\n        }\n        uint c1 = c0 + (BONE / 2);\n        if (c1 < c0) {\n            return 0;\n        }\n        uint c2 = c1 / BONE;\n        return c2;\n    }\n}\n"
        },
        "../src/interfaces/IBalancer.sol": {
            "id": 26,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface IBalancer {\n    function isBound(address t) external view returns (bool);\n    function getDenormalizedWeight(address token) external view returns (uint256);\n    function getBalance(address token) external view returns (uint256);\n    function getSwapFee() external view returns (uint256);\n    function calcOutGivenIn(\n        uint256 tokenBalanceIn,\n        uint256 tokenWeightIn,\n        uint256 tokenBalanceOut,\n        uint256 tokenWeightOut,\n        uint256 tokenAmountIn,\n        uint256 swapFee\n    ) external pure returns (uint256 tokenAmountOut);\n    function calcInGivenOut(\n        uint256 tokenBalanceIn,\n        uint256 tokenWeightIn,\n        uint256 tokenBalanceOut,\n        uint256 tokenWeightOut,\n        uint256 tokenAmountOut,\n        uint256 swapFee\n    ) external pure returns (uint256 tokenAmountIn);\n}\n"
        },
        "../src/BalancerV2Sampler.sol": {
            "id": 2,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./SamplerUtils.sol\";\n\n/// @dev Minimal Balancer V2 Vault interface\n///      for documentation refer to https://github.com/balancer-labs/balancer-core-v2/blob/master/contracts/vault/interfaces/IVault.sol\ninterface IBalancerV2Vault {\n    enum SwapKind { GIVEN_IN, GIVEN_OUT }\n\n    struct BatchSwapStep {\n        bytes32 poolId;\n        uint256 assetInIndex;\n        uint256 assetOutIndex;\n        uint256 amount;\n        bytes userData;\n    }\n\n    struct FundManagement {\n        address sender;\n        bool fromInternalBalance;\n        address payable recipient;\n        bool toInternalBalance;\n    }\n\n    function queryBatchSwap(\n        SwapKind kind,\n        BatchSwapStep[] calldata swaps,\n        IAsset[] calldata assets,\n        FundManagement calldata funds\n    ) external returns (int256[] memory assetDeltas);\n}\ninterface IAsset {\n    // solhint-disable-previous-line no-empty-blocks\n}\n\ncontract BalancerV2Sampler is SamplerUtils {\n\n    struct BalancerV2PoolInfo {\n        bytes32 poolId;\n        address vault;\n    }\n\n    /// @dev Sample sell quotes from Balancer V2.\n    /// @param poolInfo Struct with pool related data\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromBalancerV2(\n        BalancerV2PoolInfo memory poolInfo,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        IBalancerV2Vault vault = IBalancerV2Vault(poolInfo.vault);\n        IAsset[] memory swapAssets = new IAsset[](2);\n        swapAssets[0] = IAsset(takerToken);\n        swapAssets[1] = IAsset(makerToken);\n\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        IBalancerV2Vault.FundManagement memory swapFunds =\n            _createSwapFunds();\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            IBalancerV2Vault.BatchSwapStep[] memory swapSteps =\n                _createSwapSteps(poolInfo, takerTokenAmounts[i]);\n\n            try\n                // For sells we specify the takerToken which is what the vault will receive from the trade\n                vault.queryBatchSwap(IBalancerV2Vault.SwapKind.GIVEN_IN, swapSteps, swapAssets, swapFunds)\n            // amounts represent pool balance deltas from the swap (incoming balance, outgoing balance)\n            returns (int256[] memory amounts) {\n                // Outgoing balance is negative so we need to flip the sign\n                int256 amountOutFromPool = amounts[1] * -1;\n                if (amountOutFromPool <= 0) {\n                    break;\n                }\n                makerTokenAmounts[i] = uint256(amountOutFromPool);\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from Balancer V2.\n    /// @param poolInfo Struct with pool related data\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromBalancerV2(\n        BalancerV2PoolInfo memory poolInfo,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        IBalancerV2Vault vault = IBalancerV2Vault(poolInfo.vault);\n        IAsset[] memory swapAssets = new IAsset[](2);\n        swapAssets[0] = IAsset(takerToken);\n        swapAssets[1] = IAsset(makerToken);\n\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n        IBalancerV2Vault.FundManagement memory swapFunds =\n            _createSwapFunds();\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            IBalancerV2Vault.BatchSwapStep[] memory swapSteps =\n                _createSwapSteps(poolInfo, makerTokenAmounts[i]);\n\n            try\n                // For buys we specify the makerToken which is what taker will receive from the trade\n                vault.queryBatchSwap(IBalancerV2Vault.SwapKind.GIVEN_OUT, swapSteps, swapAssets, swapFunds)\n            returns (int256[] memory amounts) {\n                int256 amountIntoPool = amounts[0];\n                if (amountIntoPool <= 0) {\n                    break;\n                }\n                takerTokenAmounts[i] = uint256(amountIntoPool);\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    function _createSwapSteps(\n        BalancerV2PoolInfo memory poolInfo,\n        uint256 amount\n    ) private pure returns (IBalancerV2Vault.BatchSwapStep[] memory) {\n        IBalancerV2Vault.BatchSwapStep[] memory swapSteps =\n            new IBalancerV2Vault.BatchSwapStep[](1);\n        swapSteps[0] = IBalancerV2Vault.BatchSwapStep({\n            poolId: poolInfo.poolId,\n            assetInIndex: 0,\n            assetOutIndex: 1,\n            amount: amount,\n            userData: \"\"\n        });\n\n        return swapSteps;\n    }\n\n    function _createSwapFunds()\n        private\n        view\n        returns (IBalancerV2Vault.FundManagement memory)\n    {\n        return\n            IBalancerV2Vault.FundManagement({\n                sender: address(this),\n                fromInternalBalance: false,\n                recipient: payable(address(this)),\n                toInternalBalance: false\n            });\n    }\n}\n"
        },
        "../src/SamplerUtils.sol": {
            "id": 18,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\n\n\ncontract SamplerUtils {\n\n    /// @dev Overridable way to get token decimals.\n    /// @param tokenAddress Address of the token.\n    /// @return decimals The decimal places for the token.\n    function _getTokenDecimals(address tokenAddress)\n        virtual\n        internal\n        view\n        returns (uint8 decimals)\n    {\n        return LibERC20TokenV06.compatDecimals(IERC20TokenV06(tokenAddress));\n    }\n\n    function _toSingleValueArray(uint256 v)\n        internal\n        pure\n        returns (uint256[] memory arr)\n    {\n        arr = new uint256[](1);\n        arr[0] = v;\n    }\n\n    /// @dev Assert that the tokens in a trade pair are valid.\n    /// @param makerToken Address of the maker token.\n    /// @param takerToken Address of the taker token.\n    function _assertValidPair(address makerToken, address takerToken)\n        internal\n        pure\n    {\n        require(makerToken != takerToken, \"ERC20BridgeSampler/INVALID_TOKEN_PAIR\");\n    }\n}\n"
        },
        "@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol": {
            "id": 41,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol\";\nimport \"./IERC20TokenV06.sol\";\n\n\nlibrary LibERC20TokenV06 {\n    bytes constant private DECIMALS_CALL_DATA = hex\"313ce567\";\n\n    /// @dev Calls `IERC20TokenV06(token).approve()`.\n    ///      Reverts if the return data is invalid or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param spender The address that receives an allowance.\n    /// @param allowance The allowance to set.\n    function compatApprove(\n        IERC20TokenV06 token,\n        address spender,\n        uint256 allowance\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.approve.selector,\n            spender,\n            allowance\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).approve()` and sets the allowance to the\n    ///      maximum if the current approval is not already >= an amount.\n    ///      Reverts if the return data is invalid or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param spender The address that receives an allowance.\n    /// @param amount The minimum allowance needed.\n    function approveIfBelow(\n        IERC20TokenV06 token,\n        address spender,\n        uint256 amount\n    )\n        internal\n    {\n        if (token.allowance(address(this), spender) < amount) {\n            compatApprove(token, spender, uint256(-1));\n        }\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).transfer()`.\n    ///      Reverts if the return data is invalid or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param to The address that receives the tokens\n    /// @param amount Number of tokens to transfer.\n    function compatTransfer(\n        IERC20TokenV06 token,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.transfer.selector,\n            to,\n            amount\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).transferFrom()`.\n    ///      Reverts if the return data is invalid or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param from The owner of the tokens.\n    /// @param to The address that receives the tokens\n    /// @param amount Number of tokens to transfer.\n    function compatTransferFrom(\n        IERC20TokenV06 token,\n        address from,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.transferFrom.selector,\n            from,\n            to,\n            amount\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Retrieves the number of decimals for a token.\n    ///      Returns `18` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @return tokenDecimals The number of decimals places for the token.\n    function compatDecimals(IERC20TokenV06 token)\n        internal\n        view\n        returns (uint8 tokenDecimals)\n    {\n        tokenDecimals = 18;\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(DECIMALS_CALL_DATA);\n        if (didSucceed && resultData.length >= 32) {\n            tokenDecimals = uint8(LibBytesV06.readUint256(resultData, 0));\n        }\n    }\n\n    /// @dev Retrieves the allowance for a token, owner, and spender.\n    ///      Returns `0` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @param owner The owner of the tokens.\n    /// @param spender The address the spender.\n    /// @return allowance_ The allowance for a token, owner, and spender.\n    function compatAllowance(IERC20TokenV06 token, address owner, address spender)\n        internal\n        view\n        returns (uint256 allowance_)\n    {\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(\n            abi.encodeWithSelector(\n                token.allowance.selector,\n                owner,\n                spender\n            )\n        );\n        if (didSucceed && resultData.length >= 32) {\n            allowance_ = LibBytesV06.readUint256(resultData, 0);\n        }\n    }\n\n    /// @dev Retrieves the balance for a token owner.\n    ///      Returns `0` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @param owner The owner of the tokens.\n    /// @return balance The token balance of an owner.\n    function compatBalanceOf(IERC20TokenV06 token, address owner)\n        internal\n        view\n        returns (uint256 balance)\n    {\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(\n            abi.encodeWithSelector(\n                token.balanceOf.selector,\n                owner\n            )\n        );\n        if (didSucceed && resultData.length >= 32) {\n            balance = LibBytesV06.readUint256(resultData, 0);\n        }\n    }\n\n    /// @dev Executes a call on address `target` with calldata `callData`\n    ///      and asserts that either nothing was returned or a single boolean\n    ///      was returned equal to `true`.\n    /// @param target The call target.\n    /// @param callData The abi-encoded call data.\n    function _callWithOptionalBooleanResult(\n        address target,\n        bytes memory callData\n    )\n        private\n    {\n        (bool didSucceed, bytes memory resultData) = target.call(callData);\n        // Revert if the call reverted.\n        if (!didSucceed) {\n            LibRichErrorsV06.rrevert(resultData);\n        }\n        // If we get back 0 returndata, this may be a non-standard ERC-20 that\n        // does not return a boolean. Check that it at least contains code.\n        if (resultData.length == 0) {\n            uint256 size;\n            assembly { size := extcodesize(target) }\n            require(size > 0, \"invalid token address, contains no code\");\n            return;\n        }\n        // If we get back at least 32 bytes, we know the target address\n        // contains code, and we assume it is a token that returned a boolean\n        // success value, which must be true.\n        if (resultData.length >= 32) {\n            uint256 result = LibBytesV06.readUint256(resultData, 0);\n            if (result == 1) {\n                return;\n            } else {\n                LibRichErrorsV06.rrevert(resultData);\n            }\n        }\n        // If 0 < returndatasize < 32, the target is a contract, but not a\n        // valid token.\n        LibRichErrorsV06.rrevert(resultData);\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol": {
            "id": 47,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibRichErrorsV06 {\n\n    // bytes4(keccak256(\"Error(string)\"))\n    bytes4 internal constant STANDARD_ERROR_SELECTOR = 0x08c379a0;\n\n    // solhint-disable func-name-mixedcase\n    /// @dev ABI encode a standard, string revert error payload.\n    ///      This is the same payload that would be included by a `revert(string)`\n    ///      solidity statement. It has the function signature `Error(string)`.\n    /// @param message The error string.\n    /// @return The ABI encoded error.\n    function StandardError(string memory message)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            STANDARD_ERROR_SELECTOR,\n            bytes(message)\n        );\n    }\n    // solhint-enable func-name-mixedcase\n\n    /// @dev Reverts an encoded rich revert reason `errorData`.\n    /// @param errorData ABI encoded error data.\n    function rrevert(bytes memory errorData)\n        internal\n        pure\n    {\n        assembly {\n            revert(add(errorData, 0x20), mload(errorData))\n        }\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol": {
            "id": 42,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./errors/LibBytesRichErrorsV06.sol\";\nimport \"./errors/LibRichErrorsV06.sol\";\n\n\nlibrary LibBytesV06 {\n\n    using LibBytesV06 for bytes;\n\n    /// @dev Gets the memory address for a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of byte array. This\n    ///         points to the header of the byte array which contains\n    ///         the length.\n    function rawAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := input\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Gets the memory address for the contents of a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of the contents of the byte array.\n    function contentAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := add(input, 32)\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Copies `length` bytes from memory location `source` to `dest`.\n    /// @param dest memory address to copy bytes to.\n    /// @param source memory address to copy bytes from.\n    /// @param length number of bytes to copy.\n    function memCopy(\n        uint256 dest,\n        uint256 source,\n        uint256 length\n    )\n        internal\n        pure\n    {\n        if (length < 32) {\n            // Handle a partial word by reading destination and masking\n            // off the bits we are interested in.\n            // This correctly handles overlap, zero lengths and source == dest\n            assembly {\n                let mask := sub(exp(256, sub(32, length)), 1)\n                let s := and(mload(source), not(mask))\n                let d := and(mload(dest), mask)\n                mstore(dest, or(s, d))\n            }\n        } else {\n            // Skip the O(length) loop when source == dest.\n            if (source == dest) {\n                return;\n            }\n\n            // For large copies we copy whole words at a time. The final\n            // word is aligned to the end of the range (instead of after the\n            // previous) to handle partial words. So a copy will look like this:\n            //\n            //  ####\n            //      ####\n            //          ####\n            //            ####\n            //\n            // We handle overlap in the source and destination range by\n            // changing the copying direction. This prevents us from\n            // overwriting parts of source that we still need to copy.\n            //\n            // This correctly handles source == dest\n            //\n            if (source > dest) {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because it\n                    // is easier to compare with in the loop, and these\n                    // are also the addresses we need for copying the\n                    // last bytes.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the last 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the last bytes in\n                    // source already due to overlap.\n                    let last := mload(sEnd)\n\n                    // Copy whole words front to back\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} lt(source, sEnd) {} {\n                        mstore(dest, mload(source))\n                        source := add(source, 32)\n                        dest := add(dest, 32)\n                    }\n\n                    // Write the last 32 bytes\n                    mstore(dEnd, last)\n                }\n            } else {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because those\n                    // are the starting points when copying a word at the end.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the first 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the first bytes in\n                    // source already due to overlap.\n                    let first := mload(source)\n\n                    // Copy whole words back to front\n                    // We use a signed comparisson here to allow dEnd to become\n                    // negative (happens when source and dest < 32). Valid\n                    // addresses in local memory will never be larger than\n                    // 2**255, so they can be safely re-interpreted as signed.\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} slt(dest, dEnd) {} {\n                        mstore(dEnd, mload(sEnd))\n                        sEnd := sub(sEnd, 32)\n                        dEnd := sub(dEnd, 32)\n                    }\n\n                    // Write the first 32 bytes\n                    mstore(dest, first)\n                }\n            }\n        }\n    }\n\n    /// @dev Returns a slices from a byte array.\n    /// @param b The byte array to take a slice from.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function slice(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure and copy contents\n        result = new bytes(to - from);\n        memCopy(\n            result.contentAddress(),\n            b.contentAddress() + from,\n            result.length\n        );\n        return result;\n    }\n\n    /// @dev Returns a slice from a byte array without preserving the input.\n    ///      When `from == 0`, the original array will match the slice.\n    ///      In other cases its state will be corrupted.\n    /// @param b The byte array to take a slice from. Will be destroyed in the process.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function sliceDestructive(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure around [from, to) in-place.\n        assembly {\n            result := add(b, from)\n            mstore(result, sub(to, from))\n        }\n        return result;\n    }\n\n    /// @dev Pops the last byte off of a byte array by modifying its length.\n    /// @param b Byte array that will be modified.\n    /// @return result The byte that was popped off.\n    function popLastByte(bytes memory b)\n        internal\n        pure\n        returns (bytes1 result)\n    {\n        if (b.length == 0) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanZeroRequired,\n                b.length,\n                0\n            ));\n        }\n\n        // Store last byte.\n        result = b[b.length - 1];\n\n        assembly {\n            // Decrement length of byte array.\n            let newLen := sub(mload(b), 1)\n            mstore(b, newLen)\n        }\n        return result;\n    }\n\n    /// @dev Tests equality of two byte arrays.\n    /// @param lhs First byte array to compare.\n    /// @param rhs Second byte array to compare.\n    /// @return equal True if arrays are the same. False otherwise.\n    function equals(\n        bytes memory lhs,\n        bytes memory rhs\n    )\n        internal\n        pure\n        returns (bool equal)\n    {\n        // Keccak gas cost is 30 + numWords * 6. This is a cheap way to compare.\n        // We early exit on unequal lengths, but keccak would also correctly\n        // handle this.\n        return lhs.length == rhs.length && keccak256(lhs) == keccak256(rhs);\n    }\n\n    /// @dev Reads an address from a position in a byte array.\n    /// @param b Byte array containing an address.\n    /// @param index Index in byte array of address.\n    /// @return result address from byte array.\n    function readAddress(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (address result)\n    {\n        if (b.length < index + 20) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Read address from array memory\n        assembly {\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 20-byte mask to obtain address\n            result := and(mload(add(b, index)), 0xffffffffffffffffffffffffffffffffffffffff)\n        }\n        return result;\n    }\n\n    /// @dev Writes an address into a specific position in a byte array.\n    /// @param b Byte array to insert address into.\n    /// @param index Index in byte array of address.\n    /// @param input Address to put into byte array.\n    function writeAddress(\n        bytes memory b,\n        uint256 index,\n        address input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 20) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Store address into array memory\n        assembly {\n            // The address occupies 20 bytes and mstore stores 32 bytes.\n            // First fetch the 32-byte word where we'll be storing the address, then\n            // apply a mask so we have only the bytes in the word that the address will not occupy.\n            // Then combine these bytes with the address and store the 32 bytes back to memory with mstore.\n\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 12-byte mask to obtain extra bytes occupying word of memory where we'll store the address\n            let neighbors := and(\n                mload(add(b, index)),\n                0xffffffffffffffffffffffff0000000000000000000000000000000000000000\n            )\n\n            // Make sure input address is clean.\n            // (Solidity does not guarantee this)\n            input := and(input, 0xffffffffffffffffffffffffffffffffffffffff)\n\n            // Store the neighbors and address into memory\n            mstore(add(b, index), xor(input, neighbors))\n        }\n    }\n\n    /// @dev Reads a bytes32 value from a position in a byte array.\n    /// @param b Byte array containing a bytes32 value.\n    /// @param index Index in byte array of bytes32 value.\n    /// @return result bytes32 value from byte array.\n    function readBytes32(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        if (b.length < index + 32) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            result := mload(add(b, index))\n        }\n        return result;\n    }\n\n    /// @dev Writes a bytes32 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input bytes32 to put into byte array.\n    function writeBytes32(\n        bytes memory b,\n        uint256 index,\n        bytes32 input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 32) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            mstore(add(b, index), input)\n        }\n    }\n\n    /// @dev Reads a uint256 value from a position in a byte array.\n    /// @param b Byte array containing a uint256 value.\n    /// @param index Index in byte array of uint256 value.\n    /// @return result uint256 value from byte array.\n    function readUint256(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (uint256 result)\n    {\n        result = uint256(readBytes32(b, index));\n        return result;\n    }\n\n    /// @dev Writes a uint256 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input uint256 to put into byte array.\n    function writeUint256(\n        bytes memory b,\n        uint256 index,\n        uint256 input\n    )\n        internal\n        pure\n    {\n        writeBytes32(b, index, bytes32(input));\n    }\n\n    /// @dev Reads an unpadded bytes4 value from a position in a byte array.\n    /// @param b Byte array containing a bytes4 value.\n    /// @param index Index in byte array of bytes4 value.\n    /// @return result bytes4 value from byte array.\n    function readBytes4(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes4 result)\n    {\n        if (b.length < index + 4) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsFourRequired,\n                b.length,\n                index + 4\n            ));\n        }\n\n        // Arrays are prefixed by a 32 byte length field\n        index += 32;\n\n        // Read the bytes4 from array memory\n        assembly {\n            result := mload(add(b, index))\n            // Solidity does not require us to clean the trailing bytes.\n            // We do it anyway\n            result := and(result, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)\n        }\n        return result;\n    }\n\n    /// @dev Writes a new length to a byte array.\n    ///      Decreasing length will lead to removing the corresponding lower order bytes from the byte array.\n    ///      Increasing length may lead to appending adjacent in-memory bytes to the end of the byte array.\n    /// @param b Bytes array to write new length to.\n    /// @param length New length of byte array.\n    function writeLength(bytes memory b, uint256 length)\n        internal\n        pure\n    {\n        assembly {\n            mstore(b, length)\n        }\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/errors/LibBytesRichErrorsV06.sol": {
            "id": 45,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibBytesRichErrorsV06 {\n\n    enum InvalidByteOperationErrorCodes {\n        FromLessThanOrEqualsToRequired,\n        ToLessThanOrEqualsLengthRequired,\n        LengthGreaterThanZeroRequired,\n        LengthGreaterThanOrEqualsFourRequired,\n        LengthGreaterThanOrEqualsTwentyRequired,\n        LengthGreaterThanOrEqualsThirtyTwoRequired,\n        LengthGreaterThanOrEqualsNestedBytesLengthRequired,\n        DestinationLengthGreaterThanOrEqualSourceLengthRequired\n    }\n\n    // bytes4(keccak256(\"InvalidByteOperationError(uint8,uint256,uint256)\"))\n    bytes4 internal constant INVALID_BYTE_OPERATION_ERROR_SELECTOR =\n        0x28006595;\n\n    // solhint-disable func-name-mixedcase\n    function InvalidByteOperationError(\n        InvalidByteOperationErrorCodes errorCode,\n        uint256 offset,\n        uint256 required\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            INVALID_BYTE_OPERATION_ERROR_SELECTOR,\n            errorCode,\n            offset,\n            required\n        );\n    }\n}\n"
        },
        "@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol": {
            "id": 40,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\ninterface IERC20TokenV06 {\n\n    // solhint-disable no-simple-event-func-name\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 value\n    );\n\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n\n    /// @dev send `value` token to `to` from `msg.sender`\n    /// @param to The address of the recipient\n    /// @param value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transfer(address to, uint256 value)\n        external\n        returns (bool);\n\n    /// @dev send `value` token to `to` from `from` on the condition it is approved by `from`\n    /// @param from The address of the sender\n    /// @param to The address of the recipient\n    /// @param value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    )\n        external\n        returns (bool);\n\n    /// @dev `msg.sender` approves `spender` to spend `value` tokens\n    /// @param spender The address of the account able to transfer the tokens\n    /// @param value The amount of wei to be approved for transfer\n    /// @return Always true if the call has enough gas to complete execution\n    function approve(address spender, uint256 value)\n        external\n        returns (bool);\n\n    /// @dev Query total supply of token\n    /// @return Total supply of token\n    function totalSupply()\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the balance of `owner`.\n    /// @param owner The address from which the balance will be retrieved\n    /// @return Balance of owner\n    function balanceOf(address owner)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the allowance for `spender` to spend from `owner`.\n    /// @param owner The address of the account owning tokens\n    /// @param spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the number of decimals this token has.\n    function decimals()\n        external\n        view\n        returns (uint8);\n}\n"
        },
        "../src/BancorSampler.sol": {
            "id": 3,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IBancor.sol\";\n\ncontract CompilerHack {}\n\ncontract BancorSampler is CompilerHack {\n\n    /// @dev Base gas limit for Bancor calls.\n    uint256 constant private BANCOR_CALL_GAS = 300e3; // 300k\n\n    struct BancorSamplerOpts {\n        IBancorRegistry registry;\n        address[][] paths;\n    }\n\n    /// @dev Sample sell quotes from Bancor.\n    /// @param opts BancorSamplerOpts The Bancor registry contract address and paths\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return bancorNetwork the Bancor Network address\n    /// @return path the selected conversion path from bancor\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromBancor(\n        BancorSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (address bancorNetwork, address[] memory path, uint256[] memory makerTokenAmounts)\n    {\n        if (opts.paths.length == 0) {\n            return (bancorNetwork, path, makerTokenAmounts);\n        }\n        (bancorNetwork, path) = _findBestPath(opts, takerToken, makerToken, takerTokenAmounts);\n        makerTokenAmounts = new uint256[](takerTokenAmounts.length);\n\n        for (uint256 i = 0; i < makerTokenAmounts.length; i++) {\n            try\n                IBancorNetwork(bancorNetwork)\n                    .rateByPath\n                        {gas: BANCOR_CALL_GAS}\n                        (path, takerTokenAmounts[i])\n                returns (uint256 amount)\n            {\n                makerTokenAmounts[i] = amount;\n                // Break early if there are 0 amounts\n                if (makerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n        return (bancorNetwork, path, makerTokenAmounts);\n    }\n\n    /// @dev Sample buy quotes from Bancor. Unimplemented\n    /// @param opts BancorSamplerOpts The Bancor registry contract address and paths\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return bancorNetwork the Bancor Network address\n    /// @return path the selected conversion path from bancor\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromBancor(\n        BancorSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (address bancorNetwork, address[] memory path, uint256[] memory takerTokenAmounts)\n    {\n    }\n\n    function _findBestPath(\n        BancorSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        internal\n        view\n        returns (address bancorNetwork, address[] memory path)\n    {\n        bancorNetwork = opts.registry.getAddress(opts.registry.BANCOR_NETWORK());\n        if (opts.paths.length == 0) {\n            return (bancorNetwork, path);\n        }\n        uint256 maxBoughtAmount = 0;\n        // Find the best path by selling the largest taker amount\n        for (uint256 i = 0; i < opts.paths.length; i++) {\n            if (opts.paths[i].length < 2) {\n                continue;\n            }\n\n            try\n                IBancorNetwork(bancorNetwork)\n                    .rateByPath\n                        {gas: BANCOR_CALL_GAS}\n                        (opts.paths[i], takerTokenAmounts[takerTokenAmounts.length-1])\n                returns (uint256 amount)\n            {\n                if (amount > maxBoughtAmount) {\n                    maxBoughtAmount = amount;\n                    path = opts.paths[i];\n                }\n            } catch {\n                // Swallow failures, leaving all results as zero.\n                continue;\n            }\n        }\n    }\n}\n"
        },
        "../src/interfaces/IBancor.sol": {
            "id": 27,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface IBancor {}\n\ninterface IBancorNetwork {\n  function conversionPath(address _sourceToken, address _targetToken) external view returns (address[] memory);\n  function rateByPath(address[] memory _path, uint256 _amount) external view returns (uint256);\n}\n\ninterface IBancorRegistry {\n    function getAddress(bytes32 _contractName) external view returns (address);\n    function BANCOR_NETWORK() external view returns (bytes32);\n}\n"
        },
        "../src/CompoundSampler.sol": {
            "id": 4,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./SamplerUtils.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\n\n// Minimal CToken interface\ninterface ICToken {\n    function mint(uint mintAmount) external returns (uint);\n    function redeem(uint redeemTokens) external returns (uint);\n    function redeemUnderlying(uint redeemAmount) external returns (uint);\n    function exchangeRateStored() external view returns (uint);\n    function decimals() external view returns (uint8);\n}\n\ncontract CompoundSampler is SamplerUtils {\n    uint256 constant private EXCHANGE_RATE_SCALE = 1e10;\n\n    function sampleSellsFromCompound(\n        ICToken cToken,\n        IERC20TokenV06 takerToken,\n        IERC20TokenV06 makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        // Exchange rate is scaled by 1 * 10^(18 - 8 + Underlying Token Decimals\n        uint256 exchangeRate = cToken.exchangeRateStored();\n        uint256 cTokenDecimals = uint256(cToken.decimals());\n\n        if (address(makerToken) == address(cToken)) {\n            // mint\n            for (uint256 i = 0; i < numSamples; i++) {\n                makerTokenAmounts[i] = (takerTokenAmounts[i] * EXCHANGE_RATE_SCALE * 10 ** cTokenDecimals) / exchangeRate;\n            }\n\n        } else if (address(takerToken) == address(cToken)) {\n            // redeem\n            for (uint256 i = 0; i < numSamples; i++) {\n                makerTokenAmounts[i] = (takerTokenAmounts[i] * exchangeRate) / (EXCHANGE_RATE_SCALE * 10 ** cTokenDecimals);\n            }\n        }\n    }\n\n    function sampleBuysFromCompound(\n        ICToken cToken,\n        IERC20TokenV06 takerToken,\n        IERC20TokenV06 makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n        // Exchange rate is scaled by 1 * 10^(18 - 8 + Underlying Token Decimals\n        uint256 exchangeRate = cToken.exchangeRateStored();\n        uint256 cTokenDecimals = uint256(cToken.decimals());\n\n        if (address(makerToken) == address(cToken)) {\n            // mint\n            for (uint256 i = 0; i < numSamples; i++) {\n                takerTokenAmounts[i] = makerTokenAmounts[i] * exchangeRate / (EXCHANGE_RATE_SCALE * 10 ** cTokenDecimals);\n            }\n        } else if (address(takerToken) == address(cToken)) {\n            // redeem\n            for (uint256 i = 0; i < numSamples; i++) {\n                takerTokenAmounts[i] = (makerTokenAmounts[i] * EXCHANGE_RATE_SCALE * 10 ** cTokenDecimals)/exchangeRate;\n            }\n        }\n    }\n}\n"
        },
        "../src/CurveSampler.sol": {
            "id": 5,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/ICurve.sol\";\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\n\n\ncontract CurveSampler is\n    SamplerUtils,\n    ApproximateBuys\n{\n    /// @dev Information for sampling from curve sources.\n    struct CurveInfo {\n        address poolAddress;\n        bytes4 sellQuoteFunctionSelector;\n        bytes4 buyQuoteFunctionSelector;\n    }\n\n    /// @dev Base gas limit for Curve calls. Some Curves have multiple tokens\n    ///      So a reasonable ceil is 150k per token. Biggest Curve has 4 tokens.\n    uint256 constant private CURVE_CALL_GAS = 2000e3; // Was 600k for Curve but SnowSwap is using 1500k+\n\n    /// @dev Sample sell quotes from Curve.\n    /// @param curveInfo Curve information specific to this token pair.\n    /// @param fromTokenIdx Index of the taker token (what to sell).\n    /// @param toTokenIdx Index of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromCurve(\n        CurveInfo memory curveInfo,\n        int128 fromTokenIdx,\n        int128 toTokenIdx,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            (bool didSucceed, bytes memory resultData) =\n                curveInfo.poolAddress.staticcall.gas(CURVE_CALL_GAS)(\n                    abi.encodeWithSelector(\n                        curveInfo.sellQuoteFunctionSelector,\n                        fromTokenIdx,\n                        toTokenIdx,\n                        takerTokenAmounts[i]\n                    ));\n            uint256 buyAmount = 0;\n            if (didSucceed) {\n                buyAmount = abi.decode(resultData, (uint256));\n            }\n            makerTokenAmounts[i] = buyAmount;\n            // Break early if there are 0 amounts\n            if (makerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from Curve.\n    /// @param curveInfo Curve information specific to this token pair.\n    /// @param fromTokenIdx Index of the taker token (what to sell).\n    /// @param toTokenIdx Index of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromCurve(\n        CurveInfo memory curveInfo,\n        int128 fromTokenIdx,\n        int128 toTokenIdx,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        if (curveInfo.buyQuoteFunctionSelector == bytes4(0)) {\n            // Buys not supported on this curve, so approximate it.\n            return _sampleApproximateBuys(\n                ApproximateBuyQuoteOpts({\n                    makerTokenData: abi.encode(toTokenIdx, curveInfo),\n                    takerTokenData: abi.encode(fromTokenIdx, curveInfo),\n                    getSellQuoteCallback: _sampleSellForApproximateBuyFromCurve\n                }),\n                makerTokenAmounts\n            );\n        }\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            (bool didSucceed, bytes memory resultData) =\n                curveInfo.poolAddress.staticcall.gas(CURVE_CALL_GAS)(\n                    abi.encodeWithSelector(\n                        curveInfo.buyQuoteFunctionSelector,\n                        fromTokenIdx,\n                        toTokenIdx,\n                        makerTokenAmounts[i]\n                    ));\n            uint256 sellAmount = 0;\n            if (didSucceed) {\n                sellAmount = abi.decode(resultData, (uint256));\n            }\n            takerTokenAmounts[i] = sellAmount;\n            // Break early if there are 0 amounts\n            if (takerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n    }\n\n    function _sampleSellForApproximateBuyFromCurve(\n        bytes memory takerTokenData,\n        bytes memory makerTokenData,\n        uint256 sellAmount\n    )\n        private\n        view\n        returns (uint256 buyAmount)\n    {\n        (int128 takerTokenIdx, CurveInfo memory curveInfo) =\n            abi.decode(takerTokenData, (int128, CurveInfo));\n        (int128 makerTokenIdx) =\n            abi.decode(makerTokenData, (int128));\n        (bool success, bytes memory resultData) =\n            address(this).staticcall(abi.encodeWithSelector(\n                this.sampleSellsFromCurve.selector,\n                curveInfo,\n                takerTokenIdx,\n                makerTokenIdx,\n                _toSingleValueArray(sellAmount)\n            ));\n        if (!success) {\n            return 0;\n        }\n        // solhint-disable-next-line indent\n        return abi.decode(resultData, (uint256[]))[0];\n    }\n}\n"
        },
        "../src/interfaces/ICurve.sol": {
            "id": 28,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\n// solhint-disable func-name-mixedcase\ninterface ICurve {\n\n    /// @dev Sell `sellAmount` of `fromToken` token and receive `toToken` token.\n    ///      This function exists on later versions of Curve (USDC/DAI/USDT)\n    /// @param i The token index being sold.\n    /// @param j The token index being bought.\n    /// @param sellAmount The amount of token being bought.\n    /// @param minBuyAmount The minimum buy amount of the token being bought.\n    function exchange_underlying(\n        int128 i,\n        int128 j,\n        uint256 sellAmount,\n        uint256 minBuyAmount\n    )\n        external;\n\n    /// @dev Get the amount of `toToken` by selling `sellAmount` of `fromToken`\n    /// @param i The token index being sold.\n    /// @param j The token index being bought.\n    /// @param sellAmount The amount of token being bought.\n    function get_dy_underlying(\n        int128 i,\n        int128 j,\n        uint256 sellAmount\n    )\n        external\n        returns (uint256 dy);\n\n    /// @dev Get the amount of `fromToken` by buying `buyAmount` of `toToken`\n    ///      This function exists on later versions of Curve (USDC/DAI/USDT)\n    /// @param i The token index being sold.\n    /// @param j The token index being bought.\n    /// @param buyAmount The amount of token being bought.\n    function get_dx_underlying(\n        int128 i,\n        int128 j,\n        uint256 buyAmount\n    )\n        external\n        returns (uint256 dx);\n\n    /// @dev Get the underlying token address from the token index\n    /// @param i The token index.\n    function underlying_coins(\n        int128 i\n    )\n        external\n        returns (address tokenAddress);\n}\n"
        },
        "../src/ApproximateBuys.sol": {
            "id": 0,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/LibMathV06.sol\";\n\n\ncontract ApproximateBuys {\n\n    /// @dev Information computing buy quotes for sources that do not have native\n    ///      buy quote support.\n    struct ApproximateBuyQuoteOpts {\n        // Arbitrary maker token data to pass to `getSellQuoteCallback`.\n        bytes makerTokenData;\n        // Arbitrary taker token data to pass to `getSellQuoteCallback`.\n        bytes takerTokenData;\n        // Callback to retrieve a sell quote.\n        function (bytes memory, bytes memory, uint256)\n            internal\n            view\n            returns (uint256) getSellQuoteCallback;\n    }\n\n    uint256 private constant ONE_HUNDED_PERCENT_BPS = 1e4;\n    /// @dev Maximum approximate (positive) error rate when approximating a buy quote.\n    uint256 private constant APPROXIMATE_BUY_TARGET_EPSILON_BPS = 0.0005e4;\n    /// @dev Maximum iterations to perform when approximating a buy quote.\n    uint256 private constant APPROXIMATE_BUY_MAX_ITERATIONS = 5;\n\n    function _sampleApproximateBuys(\n        ApproximateBuyQuoteOpts memory opts,\n        uint256[] memory makerTokenAmounts\n    )\n        internal\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        takerTokenAmounts = new uint256[](makerTokenAmounts.length);\n        if (makerTokenAmounts.length == 0) {\n            return takerTokenAmounts;\n        }\n\n        uint256 sellAmount = opts.getSellQuoteCallback(\n            opts.makerTokenData,\n            opts.takerTokenData,\n            makerTokenAmounts[0]\n        );\n        if (sellAmount == 0) {\n            return takerTokenAmounts;\n        }\n\n        uint256 buyAmount = opts.getSellQuoteCallback(\n            opts.takerTokenData,\n            opts.makerTokenData,\n            sellAmount\n        );\n        if (buyAmount == 0) {\n            return takerTokenAmounts;\n        }\n\n        for (uint256 i = 0; i < makerTokenAmounts.length; i++) {\n            uint256 eps = 0;\n            for (uint256 iter = 0; iter < APPROXIMATE_BUY_MAX_ITERATIONS; iter++) {\n                // adjustedSellAmount = previousSellAmount * (target/actual) * JUMP_MULTIPLIER\n                sellAmount = _safeGetPartialAmountCeil(\n                    makerTokenAmounts[i],\n                    buyAmount,\n                    sellAmount\n                );\n                if (sellAmount == 0) {\n                    break;\n                }\n                sellAmount = _safeGetPartialAmountCeil(\n                    (ONE_HUNDED_PERCENT_BPS + APPROXIMATE_BUY_TARGET_EPSILON_BPS),\n                    ONE_HUNDED_PERCENT_BPS,\n                    sellAmount\n                );\n                if (sellAmount == 0) {\n                    break;\n                }\n                uint256 _buyAmount = opts.getSellQuoteCallback(\n                    opts.takerTokenData,\n                    opts.makerTokenData,\n                    sellAmount\n                );\n                if (_buyAmount == 0) {\n                    break;\n                }\n                // We re-use buyAmount next iteration, only assign if it is\n                // non zero\n                buyAmount = _buyAmount;\n                // If we've reached our goal, exit early\n                if (buyAmount >= makerTokenAmounts[i]) {\n                    eps =\n                        (buyAmount - makerTokenAmounts[i]) * ONE_HUNDED_PERCENT_BPS /\n                        makerTokenAmounts[i];\n                    if (eps <= APPROXIMATE_BUY_TARGET_EPSILON_BPS) {\n                        break;\n                    }\n                }\n            }\n            if (eps == 0 || eps > APPROXIMATE_BUY_TARGET_EPSILON_BPS) {\n                break;\n            }\n            // We do our best to close in on the requested amount, but we can either over buy or under buy and exit\n            // if we hit a max iteration limit\n            // We scale the sell amount to get the approximate target\n            takerTokenAmounts[i] = _safeGetPartialAmountCeil(\n                makerTokenAmounts[i],\n                buyAmount,\n                sellAmount\n            );\n        }\n    }\n\n    function _safeGetPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        view\n        returns (uint256 partialAmount)\n    {\n        if (numerator == 0 || target == 0 || denominator == 0) return 0;\n        uint256 c = numerator * target;\n        if (c / numerator != target) return 0;\n        return (c + (denominator - 1)) / denominator;\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/LibMathV06.sol": {
            "id": 43,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./LibSafeMathV06.sol\";\nimport \"./errors/LibRichErrorsV06.sol\";\nimport \"./errors/LibMathRichErrorsV06.sol\";\n\n\nlibrary LibMathV06 {\n\n    using LibSafeMathV06 for uint256;\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    ///      Reverts if rounding error is >= 0.1%\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded down.\n    function safeGetPartialAmountFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        if (isRoundingErrorFloor(\n                numerator,\n                denominator,\n                target\n        )) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.RoundingError(\n                numerator,\n                denominator,\n                target\n            ));\n        }\n\n        partialAmount = numerator.safeMul(target).safeDiv(denominator);\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    ///      Reverts if rounding error is >= 0.1%\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded up.\n    function safeGetPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        if (isRoundingErrorCeil(\n                numerator,\n                denominator,\n                target\n        )) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.RoundingError(\n                numerator,\n                denominator,\n                target\n            ));\n        }\n\n        // safeDiv computes `floor(a / b)`. We use the identity (a, b integer):\n        //       ceil(a / b) = floor((a + b - 1) / b)\n        // To implement `ceil(a / b)` using safeDiv.\n        partialAmount = numerator.safeMul(target)\n            .safeAdd(denominator.safeSub(1))\n            .safeDiv(denominator);\n\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded down.\n    function getPartialAmountFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        partialAmount = numerator.safeMul(target).safeDiv(denominator);\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded up.\n    function getPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        // safeDiv computes `floor(a / b)`. We use the identity (a, b integer):\n        //       ceil(a / b) = floor((a + b - 1) / b)\n        // To implement `ceil(a / b)` using safeDiv.\n        partialAmount = numerator.safeMul(target)\n            .safeAdd(denominator.safeSub(1))\n            .safeDiv(denominator);\n\n        return partialAmount;\n    }\n\n    /// @dev Checks if rounding error >= 0.1% when rounding down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to multiply with numerator/denominator.\n    /// @return isError Rounding error is present.\n    function isRoundingErrorFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bool isError)\n    {\n        if (denominator == 0) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.DivisionByZeroError());\n        }\n\n        // The absolute rounding error is the difference between the rounded\n        // value and the ideal value. The relative rounding error is the\n        // absolute rounding error divided by the absolute value of the\n        // ideal value. This is undefined when the ideal value is zero.\n        //\n        // The ideal value is `numerator * target / denominator`.\n        // Let's call `numerator * target % denominator` the remainder.\n        // The absolute error is `remainder / denominator`.\n        //\n        // When the ideal value is zero, we require the absolute error to\n        // be zero. Fortunately, this is always the case. The ideal value is\n        // zero iff `numerator == 0` and/or `target == 0`. In this case the\n        // remainder and absolute error are also zero.\n        if (target == 0 || numerator == 0) {\n            return false;\n        }\n\n        // Otherwise, we want the relative rounding error to be strictly\n        // less than 0.1%.\n        // The relative error is `remainder / (numerator * target)`.\n        // We want the relative error less than 1 / 1000:\n        //        remainder / (numerator * denominator)  <  1 / 1000\n        // or equivalently:\n        //        1000 * remainder  <  numerator * target\n        // so we have a rounding error iff:\n        //        1000 * remainder  >=  numerator * target\n        uint256 remainder = mulmod(\n            target,\n            numerator,\n            denominator\n        );\n        isError = remainder.safeMul(1000) >= numerator.safeMul(target);\n        return isError;\n    }\n\n    /// @dev Checks if rounding error >= 0.1% when rounding up.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to multiply with numerator/denominator.\n    /// @return isError Rounding error is present.\n    function isRoundingErrorCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bool isError)\n    {\n        if (denominator == 0) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.DivisionByZeroError());\n        }\n\n        // See the comments in `isRoundingError`.\n        if (target == 0 || numerator == 0) {\n            // When either is zero, the ideal value and rounded value are zero\n            // and there is no rounding error. (Although the relative error\n            // is undefined.)\n            return false;\n        }\n        // Compute remainder as before\n        uint256 remainder = mulmod(\n            target,\n            numerator,\n            denominator\n        );\n        remainder = denominator.safeSub(remainder) % denominator;\n        isError = remainder.safeMul(1000) >= numerator.safeMul(target);\n        return isError;\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol": {
            "id": 44,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./errors/LibRichErrorsV06.sol\";\nimport \"./errors/LibSafeMathRichErrorsV06.sol\";\n\n\nlibrary LibSafeMathV06 {\n\n    function safeMul(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        if (c / a != b) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.MULTIPLICATION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function safeDiv(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b == 0) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.DIVISION_BY_ZERO,\n                a,\n                b\n            ));\n        }\n        uint256 c = a / b;\n        return c;\n    }\n\n    function safeSub(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b > a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.SUBTRACTION_UNDERFLOW,\n                a,\n                b\n            ));\n        }\n        return a - b;\n    }\n\n    function safeAdd(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint256 c = a + b;\n        if (c < a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.ADDITION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function max256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a < b ? a : b;\n    }\n\n    function safeMul128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (a == 0) {\n            return 0;\n        }\n        uint128 c = a * b;\n        if (c / a != b) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.MULTIPLICATION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function safeDiv128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (b == 0) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.DIVISION_BY_ZERO,\n                a,\n                b\n            ));\n        }\n        uint128 c = a / b;\n        return c;\n    }\n\n    function safeSub128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (b > a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.SUBTRACTION_UNDERFLOW,\n                a,\n                b\n            ));\n        }\n        return a - b;\n    }\n\n    function safeAdd128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        uint128 c = a + b;\n        if (c < a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.ADDITION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function max128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        return a < b ? a : b;\n    }\n\n    function safeDowncastToUint128(uint256 a)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (a > type(uint128).max) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256DowncastError(\n                LibSafeMathRichErrorsV06.DowncastErrorCodes.VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT128,\n                a\n            ));\n        }\n        return uint128(a);\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/errors/LibSafeMathRichErrorsV06.sol": {
            "id": 48,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibSafeMathRichErrorsV06 {\n\n    // bytes4(keccak256(\"Uint256BinOpError(uint8,uint256,uint256)\"))\n    bytes4 internal constant UINT256_BINOP_ERROR_SELECTOR =\n        0xe946c1bb;\n\n    // bytes4(keccak256(\"Uint256DowncastError(uint8,uint256)\"))\n    bytes4 internal constant UINT256_DOWNCAST_ERROR_SELECTOR =\n        0xc996af7b;\n\n    enum BinOpErrorCodes {\n        ADDITION_OVERFLOW,\n        MULTIPLICATION_OVERFLOW,\n        SUBTRACTION_UNDERFLOW,\n        DIVISION_BY_ZERO\n    }\n\n    enum DowncastErrorCodes {\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT32,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT64,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT96,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT128\n    }\n\n    // solhint-disable func-name-mixedcase\n    function Uint256BinOpError(\n        BinOpErrorCodes errorCode,\n        uint256 a,\n        uint256 b\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            UINT256_BINOP_ERROR_SELECTOR,\n            errorCode,\n            a,\n            b\n        );\n    }\n\n    function Uint256DowncastError(\n        DowncastErrorCodes errorCode,\n        uint256 a\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            UINT256_DOWNCAST_ERROR_SELECTOR,\n            errorCode,\n            a\n        );\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/errors/LibMathRichErrorsV06.sol": {
            "id": 46,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibMathRichErrorsV06 {\n\n    // bytes4(keccak256(\"DivisionByZeroError()\"))\n    bytes internal constant DIVISION_BY_ZERO_ERROR =\n        hex\"a791837c\";\n\n    // bytes4(keccak256(\"RoundingError(uint256,uint256,uint256)\"))\n    bytes4 internal constant ROUNDING_ERROR_SELECTOR =\n        0x339f3de2;\n\n    // solhint-disable func-name-mixedcase\n    function DivisionByZeroError()\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return DIVISION_BY_ZERO_ERROR;\n    }\n\n    function RoundingError(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            ROUNDING_ERROR_SELECTOR,\n            numerator,\n            denominator,\n            target\n        );\n    }\n}\n"
        },
        "../src/DODOSampler.sol": {
            "id": 6,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\n\n\ninterface IDODOZoo {\n    function getDODO(address baseToken, address quoteToken) external view returns (address);\n}\n\ninterface IDODOHelper {\n    function querySellQuoteToken(address dodo, uint256 amount) external view returns (uint256);\n}\n\ninterface IDODO {\n    function querySellBaseToken(uint256 amount) external view returns (uint256);\n    function _TRADE_ALLOWED_() external view returns (bool);\n}\n\ncontract DODOSampler is\n    SamplerUtils,\n    ApproximateBuys\n{\n\n    /// @dev Gas limit for DODO calls.\n    uint256 constant private DODO_CALL_GAS = 300e3; // 300k\n    struct DODOSamplerOpts {\n        address registry;\n        address helper;\n    }\n\n    /// @dev Sample sell quotes from DODO.\n    /// @param opts DODOSamplerOpts DODO Registry and helper addresses\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return sellBase whether the bridge needs to sell the base token\n    /// @return pool the DODO pool address\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromDODO(\n        DODOSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (bool sellBase, address pool, uint256[] memory makerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        pool = IDODOZoo(opts.registry).getDODO(takerToken, makerToken);\n        address baseToken;\n        // If pool exists we have the correct order of Base/Quote\n        if (pool != address(0)) {\n            baseToken = takerToken;\n            sellBase = true;\n        } else {\n            pool = IDODOZoo(opts.registry).getDODO(makerToken, takerToken);\n            // No pool either direction\n            if (address(pool) == address(0)) {\n                return (sellBase, pool, makerTokenAmounts);\n            }\n            baseToken = makerToken;\n            sellBase = false;\n        }\n\n        // DODO Pool has been disabled\n        if (!IDODO(pool)._TRADE_ALLOWED_()) {\n            return (sellBase, pool, makerTokenAmounts);\n        }\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            uint256 buyAmount = _sampleSellForApproximateBuyFromDODO(\n                abi.encode(takerToken, pool, baseToken, opts.helper), // taker token data\n                abi.encode(makerToken, pool, baseToken, opts.helper), // maker token data\n                takerTokenAmounts[i]\n            );\n            makerTokenAmounts[i] = buyAmount;\n            // Break early if there are 0 amounts\n            if (makerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from DODO.\n    /// @param opts DODOSamplerOpts DODO Registry and helper addresses\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token sell amount for each sample.\n    /// @return sellBase whether the bridge needs to sell the base token\n    /// @return pool the DODO pool address\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromDODO(\n        DODOSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (bool sellBase, address pool, uint256[] memory takerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n\n        // Pool is BASE/QUOTE\n        // Look up the pool from the taker/maker combination\n        pool = IDODOZoo(opts.registry).getDODO(takerToken, makerToken);\n        address baseToken;\n        // If pool exists we have the correct order of Base/Quote\n        if (pool != address(0)) {\n            baseToken = takerToken;\n            sellBase = true;\n        } else {\n            // Look up the pool from the maker/taker combination\n            pool = IDODOZoo(opts.registry).getDODO(makerToken, takerToken);\n            // No pool either direction\n            if (address(pool) == address(0)) {\n                return (sellBase, pool, takerTokenAmounts);\n            }\n            baseToken = makerToken;\n            sellBase = false;\n        }\n\n        // DODO Pool has been disabled\n        if (!IDODO(pool)._TRADE_ALLOWED_()) {\n            return (sellBase, pool, takerTokenAmounts);\n        }\n\n        takerTokenAmounts = _sampleApproximateBuys(\n            ApproximateBuyQuoteOpts({\n                makerTokenData: abi.encode(makerToken, pool, baseToken, opts.helper),\n                takerTokenData: abi.encode(takerToken, pool, baseToken, opts.helper),\n                getSellQuoteCallback: _sampleSellForApproximateBuyFromDODO\n            }),\n            makerTokenAmounts\n        );\n    }\n\n    function _sampleSellForApproximateBuyFromDODO(\n        bytes memory takerTokenData,\n        bytes memory /* makerTokenData */,\n        uint256 sellAmount\n    )\n        private\n        view\n        returns (uint256)\n    {\n        (address takerToken, address pool, address baseToken, address helper) = abi.decode(\n            takerTokenData,\n            (address, address, address, address)\n        );\n\n        // We will get called to sell both the taker token and also to sell the maker token\n        if (takerToken == baseToken) {\n            // If base token then use the original query on the pool\n            try\n                IDODO(pool).querySellBaseToken\n                    {gas: DODO_CALL_GAS}\n                    (sellAmount)\n                returns (uint256 amount)\n            {\n                return amount;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                return 0;\n            }\n        } else {\n            // If quote token then use helper, this is less accurate\n            try\n                IDODOHelper(helper).querySellQuoteToken\n                    {gas: DODO_CALL_GAS}\n                    (pool, sellAmount)\n                returns (uint256 amount)\n            {\n                return amount;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                return 0;\n            }\n        }\n    }\n\n}\n"
        },
        "../src/DODOV2Sampler.sol": {
            "id": 7,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\n\ninterface IDODOV2Registry {\n    function getDODOPool(address baseToken, address quoteToken)\n        external\n        view\n        returns (address[] memory machines);\n}\n\ninterface IDODOV2Pool {\n    function querySellBase(address trader, uint256 payBaseAmount)\n        external\n        view\n        returns (uint256 receiveQuoteAmount, uint256 mtFee);\n\n    function querySellQuote(address trader, uint256 payQuoteAmount)\n        external\n        view\n        returns (uint256 receiveBaseAmount, uint256 mtFee);\n}\n\ncontract DODOV2Sampler is\n    SamplerUtils,\n    ApproximateBuys\n{\n\n    /// @dev Gas limit for DODO V2 calls.\n    uint256 constant private DODO_V2_CALL_GAS = 300e3; // 300k\n\n    /// @dev Sample sell quotes from DODO V2.\n    /// @param registry Address of the registry to look up.\n    /// @param offset offset index for the pool in the registry.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return sellBase whether the bridge needs to sell the base token\n    /// @return pool the DODO pool address\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromDODOV2(\n        address registry,\n        uint256 offset,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (bool sellBase, address pool, uint256[] memory makerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        (pool, sellBase) = _getNextDODOV2Pool(registry, offset, takerToken, makerToken);\n        if (pool == address(0)) {\n            return (sellBase, pool, makerTokenAmounts);\n        }\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            uint256 buyAmount = _sampleSellForApproximateBuyFromDODOV2(\n                abi.encode(takerToken, pool, sellBase), // taker token data\n                abi.encode(makerToken, pool, sellBase), // maker token data\n                takerTokenAmounts[i]\n            );\n            makerTokenAmounts[i] = buyAmount;\n            // Break early if there are 0 amounts\n            if (makerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from DODO.\n    /// @param registry Address of the registry to look up.\n    /// @param offset offset index for the pool in the registry.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token sell amount for each sample.\n    /// @return sellBase whether the bridge needs to sell the base token\n    /// @return pool the DODO pool address\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromDODOV2(\n        address registry,\n        uint256 offset,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (bool sellBase, address pool, uint256[] memory takerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        (pool, sellBase) = _getNextDODOV2Pool(registry, offset, takerToken, makerToken);\n        if (pool == address(0)) {\n            return (sellBase, pool, takerTokenAmounts);\n        }\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n\n        takerTokenAmounts = _sampleApproximateBuys(\n            ApproximateBuyQuoteOpts({\n                makerTokenData: abi.encode(makerToken, pool, !sellBase),\n                takerTokenData: abi.encode(takerToken, pool, sellBase),\n                getSellQuoteCallback: _sampleSellForApproximateBuyFromDODOV2\n            }),\n            makerTokenAmounts\n        );\n    }\n\n    function _sampleSellForApproximateBuyFromDODOV2(\n        bytes memory takerTokenData,\n        bytes memory /* makerTokenData */,\n        uint256 sellAmount\n    )\n        private\n        view\n        returns (uint256)\n    {\n        (address takerToken, address pool, bool sellBase) = abi.decode(\n            takerTokenData,\n            (address, address, bool)\n        );\n\n        // We will get called to sell both the taker token and also to sell the maker token\n        // since we use approximate buy for sell and buy functions\n        if (sellBase) {\n            try\n                IDODOV2Pool(pool).querySellBase\n                    { gas: DODO_V2_CALL_GAS }\n                    (address(0), sellAmount)\n                returns (uint256 amount, uint256)\n            {\n                return amount;\n            } catch {\n                return 0;\n            }\n        } else {\n            try\n                IDODOV2Pool(pool).querySellQuote\n                    { gas: DODO_V2_CALL_GAS }\n                    (address(0), sellAmount)\n                returns (uint256 amount, uint256)\n            {\n                return amount;\n            } catch {\n                return 0;\n            }\n        }\n    }\n\n    function _getNextDODOV2Pool(\n        address registry,\n        uint256 offset,\n        address takerToken,\n        address makerToken\n    )\n        internal\n        view\n        returns (address machine, bool sellBase)\n    {\n        // Query in base -> quote direction, if a pool is found then we are selling the base\n        address[] memory machines = IDODOV2Registry(registry).getDODOPool(takerToken, makerToken);\n        sellBase = true;\n        if (machines.length == 0) {\n            // Query in quote -> base direction, if a pool is found then we are selling the quote\n            machines = IDODOV2Registry(registry).getDODOPool(makerToken, takerToken);\n            sellBase = false;\n        }\n\n        if (offset >= machines.length) {\n            return (address(0), false);\n        }\n\n        machine = machines[offset];\n    }\n\n}\n"
        },
        "../src/KyberSampler.sol": {
            "id": 10,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IKyberNetwork.sol\";\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\n\n\ncontract KyberSampler is\n    SamplerUtils,\n    ApproximateBuys\n{\n    /// @dev Gas limit for Kyber calls.\n    uint256 constant private KYBER_CALL_GAS = 500e3; // 500k\n    /// @dev Kyber ETH pseudo-address.\n    address constant internal KYBER_ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n\n    struct KyberSamplerOpts {\n        uint256 reserveOffset;\n        address hintHandler;\n        address networkProxy;\n        address weth;\n        bytes hint;\n    }\n\n    /// @dev Sample sell quotes from Kyber.\n    /// @param opts KyberSamplerOpts The nth reserve\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return reserveId The id of the reserve found at reserveOffset\n    /// @return hint The hint for the selected reserve\n    /// @return makerTokenAmounts Maker amounts bought at each taker token amount.\n    function sampleSellsFromKyberNetwork(\n        KyberSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (bytes32 reserveId, bytes memory hint, uint256[] memory makerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        reserveId = _getNextReserveId(opts, takerToken, makerToken);\n        if (reserveId == 0x0) {\n            return (reserveId, hint, makerTokenAmounts);\n        }\n        opts.hint = this.encodeKyberHint(opts, reserveId, takerToken, makerToken);\n        hint = opts.hint;\n\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            uint256 value = this.sampleSellFromKyberNetwork(\n                opts,\n                takerToken,\n                makerToken,\n                takerTokenAmounts[i]\n            );\n            makerTokenAmounts[i] = value;\n            // Break early if there are 0 amounts\n            if (makerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from Kyber.\n    /// @param opts KyberSamplerOpts The nth reserve\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return reserveId The id of the reserve found at reserveOffset\n    /// @return hint The hint for the selected reserve\n    /// @return takerTokenAmounts Taker amounts sold at each maker token amount.\n    function sampleBuysFromKyberNetwork(\n        KyberSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (bytes32 reserveId, bytes memory hint, uint256[] memory takerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n\n        reserveId = _getNextReserveId(opts, takerToken, makerToken);\n        if (reserveId == 0x0) {\n            return (reserveId, hint, takerTokenAmounts);\n        }\n        opts.hint = this.encodeKyberHint(opts, reserveId, takerToken, makerToken);\n        hint = opts.hint;\n\n        takerTokenAmounts = _sampleApproximateBuys(\n            ApproximateBuyQuoteOpts({\n                makerTokenData: abi.encode(makerToken, opts),\n                takerTokenData: abi.encode(takerToken, opts),\n                getSellQuoteCallback: _sampleSellForApproximateBuyFromKyber\n            }),\n            makerTokenAmounts\n        );\n        return (reserveId, hint, takerTokenAmounts);\n    }\n\n    function encodeKyberHint(\n        KyberSamplerOpts memory opts,\n        bytes32 reserveId,\n        address takerToken,\n        address makerToken\n    )\n        public\n        view\n        returns (bytes memory hint)\n    {\n        // Build a hint selecting the single reserve\n        IKyberHintHandler kyberHint = IKyberHintHandler(opts.hintHandler);\n\n        // All other reserves should be ignored with this hint\n        bytes32[] memory selectedReserves = new bytes32[](1);\n        selectedReserves[0] = reserveId;\n        uint256[] memory emptySplits = new uint256[](0);\n\n        if (takerToken == opts.weth) {\n            // ETH to Token\n            try\n                kyberHint.buildEthToTokenHint\n                    {gas: KYBER_CALL_GAS}\n                    (\n                        makerToken,\n                        IKyberHintHandler.TradeType.MaskIn,\n                        selectedReserves,\n                        emptySplits\n                    )\n                returns (bytes memory result)\n            {\n                return result;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n            }\n        } else if (makerToken == opts.weth) {\n            // Token to ETH\n            try\n                kyberHint.buildTokenToEthHint\n                    {gas: KYBER_CALL_GAS}\n                    (\n                        takerToken,\n                        IKyberHintHandler.TradeType.MaskIn,\n                        selectedReserves,\n                        emptySplits\n                    )\n                returns (bytes memory result)\n            {\n                return result;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n            }\n\n        } else {\n            // Token to Token\n            // We use the same reserve both ways\n            try\n                kyberHint.buildTokenToTokenHint\n                    {gas: KYBER_CALL_GAS}\n                    (\n                        takerToken,\n                        IKyberHintHandler.TradeType.MaskIn,\n                        selectedReserves,\n                        emptySplits,\n                        makerToken,\n                        IKyberHintHandler.TradeType.MaskIn,\n                        selectedReserves,\n                        emptySplits\n                    )\n                returns (bytes memory result)\n            {\n                return result;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n            }\n        }\n    }\n\n    function _sampleSellForApproximateBuyFromKyber(\n        bytes memory takerTokenData,\n        bytes memory makerTokenData,\n        uint256 sellAmount\n    )\n        private\n        view\n        returns (uint256)\n    {\n        (address makerToken, KyberSamplerOpts memory opts) =\n            abi.decode(makerTokenData, (address, KyberSamplerOpts));\n        (address takerToken, ) =\n            abi.decode(takerTokenData, (address, KyberSamplerOpts));\n        try\n            this.sampleSellFromKyberNetwork\n                (opts, takerToken, makerToken, sellAmount)\n            returns (uint256 amount)\n        {\n            return amount;\n        } catch (bytes memory) {\n            // Swallow failures, leaving all results as zero.\n            return 0;\n        }\n    }\n\n    function sampleSellFromKyberNetwork(\n        KyberSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256 takerTokenAmount\n    )\n        public\n        view\n        returns (uint256 makerTokenAmount)\n    {\n        // If there is no hint do not continue\n        if (opts.hint.length == 0) {\n            return 0;\n        }\n\n        try\n            IKyberNetworkProxy(opts.networkProxy).getExpectedRateAfterFee\n                {gas: KYBER_CALL_GAS}\n                (\n                    takerToken == opts.weth ? KYBER_ETH_ADDRESS : takerToken,\n                    makerToken == opts.weth ? KYBER_ETH_ADDRESS : makerToken,\n                    takerTokenAmount,\n                    0, // fee\n                    opts.hint\n                )\n            returns (uint256 rate)\n        {\n            uint256 makerTokenDecimals = _getTokenDecimals(makerToken);\n            uint256 takerTokenDecimals = _getTokenDecimals(takerToken);\n            makerTokenAmount =\n                rate *\n                takerTokenAmount *\n                10 ** makerTokenDecimals /\n                10 ** takerTokenDecimals /\n                10 ** 18;\n            return makerTokenAmount;\n        } catch (bytes memory) {\n            // Swallow failures, leaving all results as zero.\n            return 0;\n        }\n    }\n\n    function _getNextReserveId(\n        KyberSamplerOpts memory opts,\n        address takerToken,\n        address makerToken\n    )\n        internal\n        view\n        returns (bytes32 reserveId)\n    {\n        // Fetch the registered reserves for this pair\n        IKyberHintHandler kyberHint = IKyberHintHandler(opts.hintHandler);\n        (bytes32[] memory reserveIds, ,) = kyberHint.getTradingReserves(\n            takerToken == opts.weth ? KYBER_ETH_ADDRESS : takerToken,\n            makerToken == opts.weth ? KYBER_ETH_ADDRESS : makerToken,\n            true,\n            new bytes(0) // empty hint\n        );\n\n        if (opts.reserveOffset >= reserveIds.length) {\n            return 0x0;\n        }\n\n        reserveId = reserveIds[opts.reserveOffset];\n        // Ignore Kyber Bridged Reserves (0xbb)\n        if (uint256(reserveId >> 248) == 0xbb) {\n            return 0x0;\n        }\n\n        return reserveId;\n    }\n}\n"
        },
        "../src/interfaces/IKyberNetwork.sol": {
            "id": 29,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n// Keepin everything together\ninterface IKyberNetwork {\n\n\n}\n\n\ninterface IKyberNetworkProxy {\n\n    function getExpectedRateAfterFee(\n        address src,\n        address dest,\n        uint256 srcQty,\n        uint256 platformFeeBps,\n        bytes calldata hint\n    )\n        external\n        view\n        returns (uint256 expectedRate);\n}\n\ninterface IKyberHintHandler {\n\n    enum TradeType {BestOfAll, MaskIn, MaskOut, Split}\n\n    enum ProcessWithRate {NotRequired, Required}\n\n    function getTradingReserves(\n        address tokenSrc,\n        address tokenDest,\n        bool isTokenToToken,\n        bytes calldata hint\n    )\n        external\n        view\n        returns (\n            bytes32[] memory reserveIds,\n            uint256[] memory splitValuesBps,\n            ProcessWithRate processWithRate\n        );\n\n    function buildTokenToEthHint(\n        address tokenSrc,\n        TradeType tokenToEthType,\n        bytes32[] calldata tokenToEthReserveIds,\n        uint256[] calldata tokenToEthSplits\n    )\n        external\n        view\n        returns (bytes memory hint);\n\n    function buildEthToTokenHint(\n        address tokenDest,\n        TradeType ethToTokenType,\n        bytes32[] calldata ethToTokenReserveIds,\n        uint256[] calldata ethToTokenSplits\n    )\n        external\n        view\n        returns (bytes memory hint);\n\n    function buildTokenToTokenHint(\n        address tokenSrc,\n        TradeType tokenToEthType,\n        bytes32[] calldata tokenToEthReserveIds,\n        uint256[] calldata tokenToEthSplits,\n        address tokenDest,\n        TradeType ethToTokenType,\n        bytes32[] calldata ethToTokenReserveIds,\n        uint256[] calldata ethToTokenSplits\n    )\n        external\n        view\n        returns (bytes memory hint);\n}\n"
        },
        "../src/KyberDmmSampler.sol": {
            "id": 9,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\ninterface IKyberDmmPool {\n\n    function totalSupply()\n        external\n        view\n        returns (uint256);\n}\n\ninterface IKyberDmmFactory {\n\n    function getPools(address token0, address token1)\n        external\n        view\n        returns (address[] memory _tokenPools);\n}\n\ninterface IKyberDmmRouter {\n\n    function factory() external view returns (address);\n\n    function getAmountsOut(uint256 amountIn, address[] calldata pools, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts);\n\n    function getAmountsIn(uint256 amountOut, address[] calldata pools, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts);\n}\n\n\n\ncontract KyberDmmSampler\n{\n    /// @dev Gas limit for KyberDmm calls.\n    uint256 constant private KYBER_DMM_CALL_GAS = 150e3; // 150k\n\n    /// @dev Sample sell quotes from KyberDmm.\n    /// @param router Router to look up tokens and amounts\n    /// @param path Token route. Should be takerToken -> makerToken\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return pools The pool addresses involved in the multi path trade\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromKyberDmm(\n        address router,\n        address[] memory path,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (address[] memory pools, uint256[] memory makerTokenAmounts)\n    {\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        pools = _getKyberDmmPools(router, path);\n        if (pools.length == 0) {\n            return (pools, makerTokenAmounts);\n        }\n        for (uint256 i = 0; i < numSamples; i++) {\n            try\n                IKyberDmmRouter(router).getAmountsOut\n                    {gas: KYBER_DMM_CALL_GAS}\n                    (takerTokenAmounts[i], pools, path)\n                returns (uint256[] memory amounts)\n            {\n                makerTokenAmounts[i] = amounts[path.length - 1];\n                // Break early if there are 0 amounts\n                if (makerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from KyberDmm.\n    /// @param router Router to look up tokens and amounts\n    /// @param path Token route. Should be takerToken -> makerToken.\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return pools The pool addresses involved in the multi path trade\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromKyberDmm(\n        address router,\n        address[] memory path,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (address[] memory pools, uint256[] memory takerTokenAmounts)\n    {\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n        pools = _getKyberDmmPools(router, path);\n        if (pools.length == 0) {\n            return (pools, takerTokenAmounts);\n        }\n        for (uint256 i = 0; i < numSamples; i++) {\n            try\n                IKyberDmmRouter(router).getAmountsIn\n                    {gas: KYBER_DMM_CALL_GAS}\n                    (makerTokenAmounts[i], pools, path)\n                returns (uint256[] memory amounts)\n            {\n                takerTokenAmounts[i] = amounts[0];\n                // Break early if there are 0 amounts\n                if (takerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    function _getKyberDmmPools(\n        address router,\n        address[] memory path\n    )\n        private\n        view\n        returns (address[] memory pools)\n    {\n        IKyberDmmFactory factory = IKyberDmmFactory(IKyberDmmRouter(router).factory());\n        pools = new address[](path.length - 1);\n        for (uint256 i = 0; i < pools.length; i++) {\n            // find the best pool\n            address[] memory allPools;\n            try\n                factory.getPools\n                    {gas: KYBER_DMM_CALL_GAS}\n                    (path[i], path[i + 1])\n                returns (address[] memory allPools)\n            {\n                if (allPools.length == 0) {\n                    return new address[](0);\n                }\n\n                uint256 maxSupply = 0;\n                for (uint256 j = 0; j < allPools.length; j++) {\n                    uint256 totalSupply = IKyberDmmPool(allPools[j]).totalSupply();\n                    if (totalSupply > maxSupply) {\n                        maxSupply = totalSupply;\n                        pools[i] = allPools[j];\n                    }\n                }\n            } catch (bytes memory) {\n                return new address[](0);\n            }\n        }\n    }\n}\n"
        },
        "../src/LidoSampler.sol": {
            "id": 11,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./SamplerUtils.sol\";\n\ncontract LidoSampler is SamplerUtils {\n    struct LidoInfo {\n        address stEthToken;\n        address wethToken;\n    }\n\n    /// @dev Sample sell quotes from Lido\n    /// @param lidoInfo Info regarding a specific Lido deployment\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromLido(\n        LidoInfo memory lidoInfo,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        pure\n        returns (uint256[] memory)\n    {\n        _assertValidPair(makerToken, takerToken);\n\n        if (takerToken != lidoInfo.wethToken || makerToken != address(lidoInfo.stEthToken)) {\n            // Return 0 values if not selling WETH for stETH\n            uint256 numSamples = takerTokenAmounts.length;\n            uint256[] memory makerTokenAmounts = new uint256[](numSamples);\n            return makerTokenAmounts;\n        }\n\n        // Minting stETH is always 1:1 therefore we can just return the same amounts back\n        return takerTokenAmounts;\n    }\n\n    /// @dev Sample buy quotes from Lido.\n    /// @param lidoInfo Info regarding a specific Lido deployment\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromLido(\n        LidoInfo memory lidoInfo,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        pure\n        returns (uint256[] memory)\n    {\n        _assertValidPair(makerToken, takerToken);\n\n        if (takerToken != lidoInfo.wethToken || makerToken != address(lidoInfo.stEthToken)) {\n            // Return 0 values if not buying stETH for WETH\n            uint256 numSamples = makerTokenAmounts.length;\n            uint256[] memory takerTokenAmounts = new uint256[](numSamples);\n            return takerTokenAmounts;\n        }\n\n        // Minting stETH is always 1:1 therefore we can just return the same amounts back\n        return makerTokenAmounts;\n    }\n\n}\n"
        },
        "../src/LiquidityProviderSampler.sol": {
            "id": 12,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol\";\nimport \"@0x/contracts-zero-ex/contracts/src/vendor/ILiquidityProvider.sol\";\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\n\n\ncontract LiquidityProviderSampler is\n    SamplerUtils,\n    ApproximateBuys\n{\n    /// @dev Default gas limit for liquidity provider calls.\n    uint256 constant private DEFAULT_CALL_GAS = 400e3; // 400k\n\n    /// @dev Sample sell quotes from an arbitrary on-chain liquidity provider.\n    /// @param providerAddress Address of the liquidity provider.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromLiquidityProvider(\n        address providerAddress,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        // Initialize array of maker token amounts.\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            try\n                ILiquidityProvider(providerAddress).getSellQuote\n                    {gas: DEFAULT_CALL_GAS}\n                    (\n                        IERC20TokenV06(takerToken),\n                        IERC20TokenV06(makerToken),\n                        takerTokenAmounts[i]\n                    )\n                returns (uint256 amount)\n            {\n                makerTokenAmounts[i] = amount;\n                // Break early if there are 0 amounts\n                if (makerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from an arbitrary on-chain liquidity provider.\n    /// @param providerAddress Address of the liquidity provider.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromLiquidityProvider(\n        address providerAddress,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        takerTokenAmounts = _sampleApproximateBuys(\n            ApproximateBuyQuoteOpts({\n                makerTokenData: abi.encode(makerToken, providerAddress),\n                takerTokenData: abi.encode(takerToken, providerAddress),\n                getSellQuoteCallback: _sampleSellForApproximateBuyFromLiquidityProvider\n            }),\n            makerTokenAmounts\n        );\n    }\n\n    function _sampleSellForApproximateBuyFromLiquidityProvider(\n        bytes memory takerTokenData,\n        bytes memory makerTokenData,\n        uint256 sellAmount\n    )\n        private\n        view\n        returns (uint256 buyAmount)\n    {\n        (address takerToken, address providerAddress) =\n            abi.decode(takerTokenData, (address, address));\n        (address makerToken) =\n            abi.decode(makerTokenData, (address));\n        try\n            this.sampleSellsFromLiquidityProvider\n                {gas: DEFAULT_CALL_GAS}\n                (providerAddress, takerToken, makerToken, _toSingleValueArray(sellAmount))\n            returns (uint256[] memory amounts)\n        {\n            return amounts[0];\n        } catch (bytes memory) {\n            // Swallow failures, leaving all results as zero.\n            return 0;\n        }\n    }\n}\n"
        },
        "@0x/contracts-zero-ex/contracts/src/vendor/ILiquidityProvider.sol": {
            "id": 49,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\n\n\ninterface ILiquidityProvider {\n\n    /// @dev An optional event an LP can emit for each fill against a source.\n    /// @param inputToken The input token.\n    /// @param outputToken The output token.\n    /// @param inputTokenAmount How much input token was sold.\n    /// @param outputTokenAmount How much output token was bought.\n    /// @param sourceId A bytes32 encoded ascii source ID. E.g., `bytes32('Curve')`/\n    /// @param sourceAddress An optional address associated with the source (e.g, a curve pool).\n    /// @param sourceId A bytes32 encoded ascii source ID. E.g., `bytes32('Curve')`/\n    /// @param sourceAddress An optional address associated with the source (e.g, a curve pool).\n    /// @param sender The caller of the LP.\n    /// @param recipient The recipient of the output tokens.\n    event LiquidityProviderFill(\n        IERC20TokenV06 inputToken,\n        IERC20TokenV06 outputToken,\n        uint256 inputTokenAmount,\n        uint256 outputTokenAmount,\n        bytes32 sourceId,\n        address sourceAddress,\n        address sender,\n        address recipient\n    );\n\n    /// @dev Trades `inputToken` for `outputToken`. The amount of `inputToken`\n    ///      to sell must be transferred to the contract prior to calling this\n    ///      function to trigger the trade.\n    /// @param inputToken The token being sold.\n    /// @param outputToken The token being bought.\n    /// @param recipient The recipient of the bought tokens.\n    /// @param minBuyAmount The minimum acceptable amount of `outputToken` to buy.\n    /// @param auxiliaryData Arbitrary auxiliary data supplied to the contract.\n    /// @return boughtAmount The amount of `outputToken` bought.\n    function sellTokenForToken(\n        IERC20TokenV06 inputToken,\n        IERC20TokenV06 outputToken,\n        address recipient,\n        uint256 minBuyAmount,\n        bytes calldata auxiliaryData\n    )\n        external\n        returns (uint256 boughtAmount);\n\n    /// @dev Trades ETH for token. ETH must either be attached to this function\n    ///      call or sent to the contract prior to calling this function to\n    ///      trigger the trade.\n    /// @param outputToken The token being bought.\n    /// @param recipient The recipient of the bought tokens.\n    /// @param minBuyAmount The minimum acceptable amount of `outputToken` to buy.\n    /// @param auxiliaryData Arbitrary auxiliary data supplied to the contract.\n    /// @return boughtAmount The amount of `outputToken` bought.\n    function sellEthForToken(\n        IERC20TokenV06 outputToken,\n        address recipient,\n        uint256 minBuyAmount,\n        bytes calldata auxiliaryData\n    )\n        external\n        payable\n        returns (uint256 boughtAmount);\n\n    /// @dev Trades token for ETH. The token must be sent to the contract prior\n    ///      to calling this function to trigger the trade.\n    /// @param inputToken The token being sold.\n    /// @param recipient The recipient of the bought tokens.\n    /// @param minBuyAmount The minimum acceptable amount of ETH to buy.\n    /// @param auxiliaryData Arbitrary auxiliary data supplied to the contract.\n    /// @return boughtAmount The amount of ETH bought.\n    function sellTokenForEth(\n        IERC20TokenV06 inputToken,\n        address payable recipient,\n        uint256 minBuyAmount,\n        bytes calldata auxiliaryData\n    )\n        external\n        returns (uint256 boughtAmount);\n\n    /// @dev Quotes the amount of `outputToken` that would be obtained by\n    ///      selling `sellAmount` of `inputToken`.\n    /// @param inputToken Address of the taker token (what to sell). Use\n    ///        the wETH address if selling ETH.\n    /// @param outputToken Address of the maker token (what to buy). Use\n    ///        the wETH address if buying ETH.\n    /// @param sellAmount Amount of `inputToken` to sell.\n    /// @return outputTokenAmount Amount of `outputToken` that would be obtained.\n    function getSellQuote(\n        IERC20TokenV06 inputToken,\n        IERC20TokenV06 outputToken,\n        uint256 sellAmount\n    )\n        external\n        view\n        returns (uint256 outputTokenAmount);\n}\n"
        },
        "../src/MakerPSMSampler.sol": {
            "id": 14,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./SamplerUtils.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibMathV06.sol\";\n\ninterface IPSM {\n    // @dev Get the fee for selling USDC to DAI in PSM\n    // @return tin toll in [wad]\n    function tin() external view returns (uint256);\n    // @dev Get the fee for selling DAI to USDC in PSM\n    // @return tout toll out [wad]\n    function tout() external view returns (uint256);\n\n    // @dev Get the address of the PSM state Vat\n    // @return address of the Vat\n    function vat() external view returns (address);\n\n    // @dev Get the address of the underlying vault powering PSM\n    // @return address of gemJoin contract\n    function gemJoin() external view returns (address);\n\n    // @dev Get the address of DAI\n    // @return address of DAI contract\n    function dai() external view returns (address);\n\n    // @dev Sell USDC for DAI\n    // @param usr The address of the account trading USDC for DAI.\n    // @param gemAmt The amount of USDC to sell in USDC base units\n    function sellGem(\n        address usr,\n        uint256 gemAmt\n    ) external;\n    // @dev Buy USDC for DAI\n    // @param usr The address of the account trading DAI for USDC\n    // @param gemAmt The amount of USDC to buy in USDC base units\n    function buyGem(\n        address usr,\n        uint256 gemAmt\n    ) external;\n}\n\ninterface IVAT {\n    // @dev Get a collateral type by identifier\n    // @param ilkIdentifier bytes32 identifier. Example: ethers.utils.formatBytes32String(\"PSM-USDC-A\")\n    // @return ilk\n    // @return ilk.Art Total Normalised Debt in wad\n    // @return ilk.rate Accumulated Rates in ray\n    // @return ilk.spot Price with Safety Margin in ray\n    // @return ilk.line Debt Ceiling in rad\n    // @return ilk.dust Urn Debt Floor in rad\n    function ilks(\n        bytes32 ilkIdentifier\n    ) external view returns (\n        uint256 Art,\n        uint256 rate,\n        uint256 spot,\n        uint256 line,\n        uint256 dust\n    );\n}\n\ncontract MakerPSMSampler is\n    SamplerUtils\n{\n    using LibSafeMathV06 for uint256;\n\n    /// @dev Information about which PSM module to use\n    struct MakerPsmInfo {\n        address psmAddress;\n        bytes32 ilkIdentifier;\n        address gemTokenAddress;\n    }\n\n    /// @dev Gas limit for MakerPsm calls.\n    uint256 constant private MAKER_PSM_CALL_GAS = 300e3; // 300k\n\n\n    // Maker units\n    // wad: fixed point decimal with 18 decimals (for basic quantities, e.g. balances)\n    uint256 constant private WAD = 10 ** 18;\n    // ray: fixed point decimal with 27 decimals (for precise quantites, e.g. ratios)\n    uint256 constant private RAY = 10 ** 27;\n    // rad: fixed point decimal with 45 decimals (result of integer multiplication with a wad and a ray)\n    uint256 constant private RAD = 10 ** 45;\n    // See https://github.com/makerdao/dss/blob/master/DEVELOPING.m\n\n    /// @dev Sample sell quotes from Maker PSM\n    function sampleSellsFromMakerPsm(\n        MakerPsmInfo memory psmInfo,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        IPSM psm = IPSM(psmInfo.psmAddress);\n        IVAT vat = IVAT(psm.vat());\n\n\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        if (makerToken != psm.dai() && takerToken != psm.dai()) {\n            return makerTokenAmounts;\n        }\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            uint256 buyAmount = _samplePSMSell(psmInfo, makerToken, takerToken, takerTokenAmounts[i], psm, vat);\n\n            if (buyAmount == 0) {\n                break;\n            }\n            makerTokenAmounts[i] = buyAmount;\n        }\n    }\n\n    function sampleBuysFromMakerPsm(\n        MakerPsmInfo memory psmInfo,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        IPSM psm = IPSM(psmInfo.psmAddress);\n        IVAT vat = IVAT(psm.vat());\n\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n        if (makerToken != psm.dai() && takerToken != psm.dai()) {\n            return takerTokenAmounts;\n        }\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            uint256 sellAmount = _samplePSMBuy(psmInfo, makerToken, takerToken, makerTokenAmounts[i], psm, vat);\n\n            if (sellAmount == 0) {\n                break;\n            }\n\n            takerTokenAmounts[i] = sellAmount;\n        }\n\n    }\n\n    function _samplePSMSell(MakerPsmInfo memory psmInfo, address makerToken, address takerToken, uint256 takerTokenAmount, IPSM psm, IVAT vat)\n        private\n        view\n        returns (uint256)\n    {\n        (uint256 totalDebtInWad,,, uint256 debtCeilingInRad, uint256 debtFloorInRad) = vat.ilks(psmInfo.ilkIdentifier);\n        uint256 gemTokenBaseUnit = uint256(1e6);\n\n        if (takerToken == psmInfo.gemTokenAddress) {\n            // Simulate sellGem\n            // Selling USDC to the PSM, increasing the total debt\n            // Convert USDC 6 decimals to 18 decimals [wad]\n            uint256 takerTokenAmountInWad = takerTokenAmount.safeMul(1e12);\n\n            uint256 newTotalDebtInRad = totalDebtInWad.safeAdd(takerTokenAmountInWad).safeMul(RAY);\n\n            // PSM is too full to fit\n            if (newTotalDebtInRad >= debtCeilingInRad) {\n                return 0;\n            }\n\n            uint256 feeInWad = takerTokenAmountInWad.safeMul(psm.tin()).safeDiv(WAD);\n            uint256 makerTokenAmountInWad = takerTokenAmountInWad.safeSub(feeInWad);\n\n            return makerTokenAmountInWad;\n        } else if (makerToken == psmInfo.gemTokenAddress) {\n            // Simulate buyGem\n            // Buying USDC from the PSM, decreasing the total debt\n            // Selling DAI for USDC, already in 18 decimals [wad]\n            uint256 takerTokenAmountInWad = takerTokenAmount;\n            if (takerTokenAmountInWad > totalDebtInWad) {\n                return 0;\n            }\n            uint256 newTotalDebtInRad = totalDebtInWad.safeSub(takerTokenAmountInWad).safeMul(RAY);\n\n            // PSM is empty, not enough USDC to buy from it\n            if (newTotalDebtInRad <= debtFloorInRad) {\n                return 0;\n            }\n\n            uint256 feeDivisorInWad = WAD.safeAdd(psm.tout()); // eg. 1.001 * 10 ** 18 with 0.1% tout;\n            uint256 makerTokenAmountInGemTokenBaseUnits =  takerTokenAmountInWad.safeMul(gemTokenBaseUnit).safeDiv(feeDivisorInWad);\n\n            return makerTokenAmountInGemTokenBaseUnits;\n        }\n\n        return 0;\n    }\n\n    function _samplePSMBuy(MakerPsmInfo memory psmInfo, address makerToken, address takerToken, uint256 makerTokenAmount, IPSM psm, IVAT vat)\n        private\n        view\n        returns (uint256)\n    {\n        (uint256 totalDebtInWad,,, uint256 debtCeilingInRad, uint256 debtFloorInRad) = vat.ilks(psmInfo.ilkIdentifier);\n\n        if (takerToken == psmInfo.gemTokenAddress) {\n            // Simulate sellGem\n            // Selling USDC to the PSM, increasing the total debt\n            uint256 makerTokenAmountInWad = makerTokenAmount;\n            uint256 feeDivisorInWad = WAD.safeSub(psm.tin()); // eg. 0.999 * 10 ** 18 with 0.1% tin;\n            uint256 takerTokenAmountInWad = makerTokenAmountInWad.safeMul(WAD).safeDiv(feeDivisorInWad);\n            uint256 newTotalDebtInRad = totalDebtInWad.safeAdd(takerTokenAmountInWad).safeMul(RAY);\n\n            // PSM is too full to fit\n            if (newTotalDebtInRad >= debtCeilingInRad) {\n                return 0;\n            }\n\n            uint256 takerTokenAmountInGemInGemBaseUnits = (takerTokenAmountInWad.safeDiv(1e12)).safeAdd(1); // Add 1 to deal with cut off decimals converting to lower decimals\n\n            return takerTokenAmountInGemInGemBaseUnits;\n        } else if (makerToken == psmInfo.gemTokenAddress) {\n            // Simulate buyGem\n            // Buying USDC from the PSM, decreasing the total debt\n            uint256 makerTokenAmountInWad = makerTokenAmount.safeMul(1e12);\n            uint256 feeMultiplierInWad = WAD.safeAdd(psm.tout()); // eg. 1.001 * 10 ** 18 with 0.1% tout;\n            uint256 takerTokenAmountInWad =  makerTokenAmountInWad.safeMul(feeMultiplierInWad).safeDiv(WAD);\n            if (takerTokenAmountInWad > totalDebtInWad) {\n                return 0;\n            }\n            uint256 newTotalDebtInRad = totalDebtInWad.safeSub(takerTokenAmountInWad).safeMul(RAY);\n\n            // PSM is empty, not enough USDC to buy\n            if (newTotalDebtInRad <= debtFloorInRad) {\n                return 0;\n            }\n\n\n            return takerTokenAmountInWad;\n        }\n\n        return 0;\n    }\n\n}\n"
        },
        "../src/MultiBridgeSampler.sol": {
            "id": 16,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IMultiBridge.sol\";\n\n\ncontract MultiBridgeSampler {\n\n    /// @dev Default gas limit for multibridge calls.\n    uint256 constant private DEFAULT_CALL_GAS = 400e3; // 400k\n\n    /// @dev Sample sell quotes from MultiBridge.\n    /// @param multibridge Address of the MultiBridge contract.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param intermediateToken The address of the intermediate token to\n    ///        use in an indirect route.\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromMultiBridge(\n        address multibridge,\n        address takerToken,\n        address intermediateToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        // Initialize array of maker token amounts.\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        // If no address provided, return all zeros.\n        if (multibridge == address(0)) {\n            return makerTokenAmounts;\n        }\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            (bool didSucceed, bytes memory resultData) =\n                multibridge.staticcall.gas(DEFAULT_CALL_GAS)(\n                    abi.encodeWithSelector(\n                        IMultiBridge(0).getSellQuote.selector,\n                        takerToken,\n                        intermediateToken,\n                        makerToken,\n                        takerTokenAmounts[i]\n                    ));\n            uint256 buyAmount = 0;\n            if (didSucceed) {\n                buyAmount = abi.decode(resultData, (uint256));\n            }\n            // Exit early if the amount is too high for the source to serve\n            if (buyAmount == 0) {\n                break;\n            }\n\n            makerTokenAmounts[i] = buyAmount;\n        }\n    }\n}\n"
        },
        "../src/interfaces/IMultiBridge.sol": {
            "id": 32,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface IMultiBridge {\n\n    /// @dev Transfers `amount` of the ERC20 `tokenAddress` from `from` to `to`.\n    /// @param tokenAddress The address of the ERC20 token to transfer.\n    /// @param from Address to transfer asset from.\n    /// @param to Address to transfer asset to.\n    /// @param amount Amount of asset to transfer.\n    /// @param bridgeData Arbitrary asset data needed by the bridge contract.\n    /// @return success The magic bytes `0xdc1600f3` if successful.\n    function bridgeTransferFrom(\n        address tokenAddress,\n        address from,\n        address to,\n        uint256 amount,\n        bytes calldata bridgeData\n    )\n        external\n        returns (bytes4 success);\n\n    /// @dev Quotes the amount of `makerToken` that would be obtained by\n    ///      selling `sellAmount` of `takerToken`.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param intermediateToken The address of the intermediate token to\n    ///        use in an indirect route.\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param sellAmount Amount of `takerToken` to sell.\n    /// @return makerTokenAmount Amount of `makerToken` that would be obtained.\n    function getSellQuote(\n        address takerToken,\n        address intermediateToken,\n        address makerToken,\n        uint256 sellAmount\n    )\n        external\n        view\n        returns (uint256 makerTokenAmount);\n}\n"
        },
        "../src/MStableSampler.sol": {
            "id": 13,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IMStable.sol\";\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\n\n\ncontract MStableSampler is\n    SamplerUtils,\n    ApproximateBuys\n{\n    /// @dev Default gas limit for mStable calls.\n    uint256 constant private DEFAULT_CALL_GAS = 800e3; // 800k\n\n    /// @dev Sample sell quotes from the mStable contract\n    /// @param router Address of the mStable contract\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromMStable(\n        address router,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        // Initialize array of maker token amounts.\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            try\n                IMStable(router).getSwapOutput\n                    {gas: DEFAULT_CALL_GAS}\n                    (takerToken, makerToken, takerTokenAmounts[i])\n                returns (uint256 amount)\n            {\n                makerTokenAmounts[i] = amount;\n                // Break early if there are 0 amounts\n                if (makerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from MStable contract\n    /// @param router Address of the mStable contract\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromMStable(\n        address router,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        return _sampleApproximateBuys(\n            ApproximateBuyQuoteOpts({\n                makerTokenData: abi.encode(makerToken, router),\n                takerTokenData: abi.encode(takerToken, router),\n                getSellQuoteCallback: _sampleSellForApproximateBuyFromMStable\n            }),\n            makerTokenAmounts\n        );\n    }\n\n    function _sampleSellForApproximateBuyFromMStable(\n        bytes memory takerTokenData,\n        bytes memory makerTokenData,\n        uint256 sellAmount\n    )\n        private\n        view\n        returns (uint256 buyAmount)\n    {\n        (address takerToken, address router) =\n            abi.decode(takerTokenData, (address, address));\n        (address makerToken) =\n            abi.decode(makerTokenData, (address));\n        try\n            this.sampleSellsFromMStable\n                (router, takerToken, makerToken, _toSingleValueArray(sellAmount))\n            returns (uint256[] memory amounts)\n        {\n            return amounts[0];\n        } catch (bytes memory) {\n            // Swallow failures, leaving all results as zero.\n            return 0;\n        }\n    }\n}\n"
        },
        "../src/interfaces/IMStable.sol": {
            "id": 30,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface IMStable {\n\n    function getSwapOutput(\n        address _input,\n        address _output,\n        uint256 _quantity\n    )\n        external\n        view\n        returns (uint256 swapOutput);\n}\n"
        },
        "../src/MooniswapSampler.sol": {
            "id": 15,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IMooniswap.sol\";\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\n\n\ncontract MooniswapSampler is\n    SamplerUtils,\n    ApproximateBuys\n{\n    /// @dev Gas limit for Mooniswap calls.\n    uint256 constant private MOONISWAP_CALL_GAS = 150e3; // 150k\n\n    /// @dev Sample sell quotes from Mooniswap.\n    /// @param registry Address of the Mooniswap Registry.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return pool The contract address for the pool\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromMooniswap(\n        address registry,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (IMooniswap pool, uint256[] memory makerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            uint256 buyAmount = sampleSingleSellFromMooniswapPool(\n                registry,\n                takerToken,\n                makerToken,\n                takerTokenAmounts[i]\n            );\n            makerTokenAmounts[i] = buyAmount;\n            // Break early if there are 0 amounts\n            if (makerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n\n        pool = IMooniswap(\n            IMooniswapRegistry(registry).pools(takerToken, makerToken)\n        );\n    }\n\n    function sampleSingleSellFromMooniswapPool(\n        address registry,\n        address mooniswapTakerToken,\n        address mooniswapMakerToken,\n        uint256 takerTokenAmount\n    )\n        public\n        view\n        returns (uint256)\n    {\n        // Find the pool for the pair.\n        IMooniswap pool = IMooniswap(\n            IMooniswapRegistry(registry).pools(mooniswapTakerToken, mooniswapMakerToken)\n        );\n        // If there is no pool then return early\n        if (address(pool) == address(0)) {\n            return 0;\n        }\n        uint256 poolBalance = mooniswapTakerToken == address(0)\n            ? address(pool).balance\n            : IERC20TokenV06(mooniswapTakerToken).balanceOf(address(pool));\n        // If the pool balance is smaller than the sell amount\n        // don't sample to avoid multiplication overflow in buys\n        if (poolBalance < takerTokenAmount) {\n            return 0;\n        }\n        try\n            pool.getReturn\n                {gas: MOONISWAP_CALL_GAS}\n                (mooniswapTakerToken, mooniswapMakerToken, takerTokenAmount)\n            returns (uint256 amount)\n        {\n            return amount;\n        } catch (bytes memory) {\n            // Swallow failures, leaving all results as zero.\n            return 0;\n        }\n    }\n\n    /// @dev Sample buy quotes from Mooniswap.\n    /// @param registry Address of the Mooniswap Registry.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token sell amount for each sample.\n    /// @return pool The contract address for the pool\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromMooniswap(\n        address registry,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (IMooniswap pool, uint256[] memory takerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n\n        takerTokenAmounts = _sampleApproximateBuys(\n            ApproximateBuyQuoteOpts({\n                makerTokenData: abi.encode(registry, makerToken),\n                takerTokenData: abi.encode(registry, takerToken),\n                getSellQuoteCallback: _sampleSellForApproximateBuyFromMooniswap\n            }),\n            makerTokenAmounts\n        );\n\n        pool = IMooniswap(\n            IMooniswapRegistry(registry).pools(takerToken, makerToken)\n        );\n    }\n\n    function _sampleSellForApproximateBuyFromMooniswap(\n        bytes memory takerTokenData,\n        bytes memory makerTokenData,\n        uint256 sellAmount\n    )\n        private\n        view\n        returns (uint256 buyAmount)\n    {\n        (address registry, address mooniswapTakerToken) = abi.decode(takerTokenData, (address, address));\n        (address _registry, address mooniswapMakerToken) = abi.decode(makerTokenData, (address, address));\n        return sampleSingleSellFromMooniswapPool(\n            registry,\n            mooniswapTakerToken,\n            mooniswapMakerToken,\n            sellAmount\n        );\n    }\n}\n"
        },
        "../src/interfaces/IMooniswap.sol": {
            "id": 31,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface IMooniswapRegistry {\n\n    function pools(address token1, address token2) external view returns(address);\n}\n\ninterface IMooniswap {\n\n    function getReturn(\n        address fromToken,\n        address destToken,\n        uint256 amount\n    )\n        external\n        view\n        returns(uint256 returnAmount);\n}\n"
        },
        "../src/NativeOrderSampler.sol": {
            "id": 17,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibMathV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol\";\n\n\ninterface IExchange {\n\n    enum OrderStatus {\n        INVALID,\n        FILLABLE,\n        FILLED,\n        CANCELLED,\n        EXPIRED\n    }\n\n    /// @dev A standard OTC or OO limit order.\n    struct LimitOrder {\n        IERC20TokenV06 makerToken;\n        IERC20TokenV06 takerToken;\n        uint128 makerAmount;\n        uint128 takerAmount;\n        uint128 takerTokenFeeAmount;\n        address maker;\n        address taker;\n        address sender;\n        address feeRecipient;\n        bytes32 pool;\n        uint64 expiry;\n        uint256 salt;\n    }\n\n    /// @dev An RFQ limit order.\n    struct RfqOrder {\n        IERC20TokenV06 makerToken;\n        IERC20TokenV06 takerToken;\n        uint128 makerAmount;\n        uint128 takerAmount;\n        address maker;\n        address taker;\n        address txOrigin;\n        bytes32 pool;\n        uint64 expiry;\n        uint256 salt;\n    }\n\n    /// @dev Info on a limit or RFQ order.\n    struct OrderInfo {\n        bytes32 orderHash;\n        OrderStatus status;\n        uint128 takerTokenFilledAmount;\n    }\n\n    /// @dev Allowed signature types.\n    enum SignatureType {\n        ILLEGAL,\n        INVALID,\n        EIP712,\n        ETHSIGN\n    }\n\n    /// @dev Encoded EC signature.\n    struct Signature {\n        // How to validate the signature.\n        SignatureType signatureType;\n        // EC Signature data.\n        uint8 v;\n        // EC Signature data.\n        bytes32 r;\n        // EC Signature data.\n        bytes32 s;\n    }\n\n    /// @dev Get the order info for a limit order.\n    /// @param order The limit order.\n    /// @return orderInfo Info about the order.\n    function getLimitOrderInfo(LimitOrder memory order)\n        external\n        view\n        returns (OrderInfo memory orderInfo);\n\n    /// @dev Get order info, fillable amount, and signature validity for a limit order.\n    ///      Fillable amount is determined using balances and allowances of the maker.\n    /// @param order The limit order.\n    /// @param signature The order signature.\n    /// @return orderInfo Info about the order.\n    /// @return actualFillableTakerTokenAmount How much of the order is fillable\n    ///         based on maker funds, in taker tokens.\n    /// @return isSignatureValid Whether the signature is valid.\n    function getLimitOrderRelevantState(\n        LimitOrder memory order,\n        Signature calldata signature\n    )\n        external\n        view\n        returns (\n            OrderInfo memory orderInfo,\n            uint128 actualFillableTakerTokenAmount,\n            bool isSignatureValid\n        );\n}\n\ncontract NativeOrderSampler {\n    using LibSafeMathV06 for uint256;\n    using LibBytesV06 for bytes;\n\n    /// @dev Gas limit for calls to `getOrderFillableTakerAmount()`.\n    uint256 constant internal DEFAULT_CALL_GAS = 200e3; // 200k\n\n    /// @dev Queries the fillable taker asset amounts of native orders.\n    ///      Effectively ignores orders that have empty signatures or\n    ///      maker/taker asset amounts (returning 0).\n    /// @param orders Native limit orders to query.\n    /// @param orderSignatures Signatures for each respective order in `orders`.\n    /// @param exchange The V4 exchange.\n    /// @return orderFillableTakerAssetAmounts How much taker asset can be filled\n    ///         by each order in `orders`.\n    function getLimitOrderFillableTakerAssetAmounts(\n        IExchange.LimitOrder[] memory orders,\n        IExchange.Signature[] memory orderSignatures,\n        IExchange exchange\n    )\n        public\n        view\n        returns (uint256[] memory orderFillableTakerAssetAmounts)\n    {\n        orderFillableTakerAssetAmounts = new uint256[](orders.length);\n        for (uint256 i = 0; i != orders.length; i++) {\n            try\n                this.getLimitOrderFillableTakerAmount\n                    {gas: DEFAULT_CALL_GAS}\n                    (\n                       orders[i],\n                       orderSignatures[i],\n                       exchange\n                    )\n                returns (uint256 amount)\n            {\n                orderFillableTakerAssetAmounts[i] = amount;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                orderFillableTakerAssetAmounts[i] = 0;\n            }\n        }\n    }\n\n    /// @dev Queries the fillable taker asset amounts of native orders.\n    ///      Effectively ignores orders that have empty signatures or\n    /// @param orders Native orders to query.\n    /// @param orderSignatures Signatures for each respective order in `orders`.\n    /// @param exchange The V4 exchange.\n    /// @return orderFillableMakerAssetAmounts How much maker asset can be filled\n    ///         by each order in `orders`.\n    function getLimitOrderFillableMakerAssetAmounts(\n        IExchange.LimitOrder[] memory orders,\n        IExchange.Signature[] memory orderSignatures,\n        IExchange exchange\n    )\n        public\n        view\n        returns (uint256[] memory orderFillableMakerAssetAmounts)\n    {\n        orderFillableMakerAssetAmounts = getLimitOrderFillableTakerAssetAmounts(\n            orders,\n            orderSignatures,\n            exchange\n        );\n        // `orderFillableMakerAssetAmounts` now holds taker asset amounts, so\n        // convert them to maker asset amounts.\n        for (uint256 i = 0; i < orders.length; ++i) {\n            if (orderFillableMakerAssetAmounts[i] != 0) {\n                orderFillableMakerAssetAmounts[i] = LibMathV06.getPartialAmountCeil(\n                    orderFillableMakerAssetAmounts[i],\n                    orders[i].takerAmount,\n                    orders[i].makerAmount\n                );\n            }\n        }\n    }\n\n    /// @dev Get the fillable taker amount of an order, taking into account\n    ///      order state, maker fees, and maker balances.\n    function getLimitOrderFillableTakerAmount(\n        IExchange.LimitOrder memory order,\n        IExchange.Signature memory signature,\n        IExchange exchange\n    )\n        virtual\n        public\n        view\n        returns (uint256 fillableTakerAmount)\n    {\n        if (signature.signatureType == IExchange.SignatureType.ILLEGAL ||\n            signature.signatureType == IExchange.SignatureType.INVALID ||\n            order.makerAmount == 0 ||\n            order.takerAmount == 0)\n        {\n            return 0;\n        }\n\n        (\n            IExchange.OrderInfo memory orderInfo,\n            uint128 remainingFillableTakerAmount,\n            bool isSignatureValid\n        ) = exchange.getLimitOrderRelevantState(order, signature);\n\n        if (\n              orderInfo.status != IExchange.OrderStatus.FILLABLE ||\n              !isSignatureValid ||\n              order.makerToken == IERC20TokenV06(0)\n            ) {\n            return 0;\n        }\n\n        fillableTakerAmount = uint256(remainingFillableTakerAmount);\n    }\n}\n"
        },
        "../src/ShellSampler.sol": {
            "id": 19,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./ApproximateBuys.sol\";\nimport \"./interfaces/IShell.sol\";\nimport \"./SamplerUtils.sol\";\n\n\ncontract ShellSampler is\n    SamplerUtils,\n    ApproximateBuys\n{\n\n    struct ShellInfo {\n        address poolAddress;\n    }\n\n    /// @dev Default gas limit for Shell calls.\n    uint256 constant private DEFAULT_CALL_GAS = 300e3; // 300k\n\n    /// @dev Sample sell quotes from the Shell pool contract\n    /// @param pool Address of the Shell pool contract\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromShell(\n        address pool,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        // Initialize array of maker token amounts.\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            try\n                IShell(pool).viewOriginSwap\n                    {gas: DEFAULT_CALL_GAS}\n                    (takerToken, makerToken, takerTokenAmounts[i])\n                returns (uint256 amount)\n            {\n                makerTokenAmounts[i] = amount;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from Shell pool contract\n    /// @param pool Address of the Shell pool contract\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromShell(\n        address pool,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        return _sampleApproximateBuys(\n            ApproximateBuyQuoteOpts({\n                makerTokenData: abi.encode(makerToken, pool),\n                takerTokenData: abi.encode(takerToken, pool),\n                getSellQuoteCallback: _sampleSellForApproximateBuyFromShell\n            }),\n            makerTokenAmounts\n        );\n    }\n\n    function _sampleSellForApproximateBuyFromShell(\n        bytes memory takerTokenData,\n        bytes memory makerTokenData,\n        uint256 sellAmount\n    )\n        private\n        view\n        returns (uint256 buyAmount)\n    {\n        (address takerToken, address pool) = abi.decode(takerTokenData, (address, address));\n        (address makerToken) = abi.decode(makerTokenData, (address));\n\n        try\n            this.sampleSellsFromShell\n                (pool, takerToken, makerToken, _toSingleValueArray(sellAmount))\n            returns (uint256[] memory amounts)\n        {\n            return amounts[0];\n        } catch (bytes memory) {\n            // Swallow failures, leaving all results as zero.\n            return 0;\n        }\n    }\n}\n"
        },
        "../src/interfaces/IShell.sol": {
            "id": 33,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface IShell {\n\n    function viewOriginSwap (\n        address from,\n        address to,\n        uint256 fromAmount\n    )\n        external\n        view\n        returns (uint256 toAmount);\n\n    function viewTargetSwap (\n        address from,\n        address to,\n        uint256 toAmount\n    )\n        external\n        view\n        returns (uint256 fromAmount);\n}\n\n"
        },
        "../src/SmoothySampler.sol": {
            "id": 20,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\n// import \"./interfaces/ISmoothy.sol\";\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\nimport \"./interfaces/ISmoothy.sol\";\n\ncontract SmoothySampler is\n    SamplerUtils,\n    ApproximateBuys\n{\n    /// @dev Information for sampling from smoothy sources.\n    struct SmoothyInfo {\n        address poolAddress;\n        bytes4 sellQuoteFunctionSelector;\n        bytes4 buyQuoteFunctionSelector;\n    }\n\n    /// @dev Base gas limit for Smoothy calls.\n    uint256 constant private SMOOTHY_CALL_GAS = 600e3;\n\n    /// @dev Sample sell quotes from Smoothy.\n    /// @param smoothyInfo Smoothy information specific to this token pair.\n    /// @param fromTokenIdx Index of the taker token (what to sell).\n    /// @param toTokenIdx Index of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromSmoothy(\n        SmoothyInfo memory smoothyInfo,\n        int128 fromTokenIdx,\n        int128 toTokenIdx,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        // Basically a Curve fork\n\n        // Smoothy only keep a percentage of its tokens available in reserve\n        uint256 poolReserveMakerAmount = ISmoothy(smoothyInfo.poolAddress).getBalance(uint256(toTokenIdx)) -\n                                         ISmoothy(smoothyInfo.poolAddress)._yBalances(uint256(toTokenIdx));\n        (, , , uint256 decimals) = ISmoothy(smoothyInfo.poolAddress).getTokenStats(uint256(toTokenIdx));\n        poolReserveMakerAmount = poolReserveMakerAmount/(10**(18-decimals));\n\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            (bool didSucceed, bytes memory resultData) =\n                smoothyInfo.poolAddress.staticcall.gas(SMOOTHY_CALL_GAS)(\n                    abi.encodeWithSelector(\n                        smoothyInfo.sellQuoteFunctionSelector,\n                        fromTokenIdx,\n                        toTokenIdx,\n                        takerTokenAmounts[i]\n                    ));\n            uint256 buyAmount = 0;\n            if (didSucceed) {\n                buyAmount = abi.decode(resultData, (uint256));\n            }\n\n            // Make sure the quoted buyAmount is available in the pool reserve\n            if (buyAmount >= poolReserveMakerAmount) {\n                // Assign pool reserve amount for all higher samples to break early\n                for (uint256 j = i; j < numSamples; j++) {\n                    makerTokenAmounts[j] = poolReserveMakerAmount;\n                }\n                break;\n            } else {\n                makerTokenAmounts[i] = buyAmount;\n            }\n\n            // Break early if there are 0 amounts\n            if (makerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from Smoothy.\n    /// @param smoothyInfo Smoothy information specific to this token pair.\n    /// @param fromTokenIdx Index of the taker token (what to sell).\n    /// @param toTokenIdx Index of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromSmoothy(\n        SmoothyInfo memory smoothyInfo,\n        int128 fromTokenIdx,\n        int128 toTokenIdx,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        // Buys not supported so approximate it.\n        return _sampleApproximateBuys(\n            ApproximateBuyQuoteOpts({\n                makerTokenData: abi.encode(toTokenIdx, smoothyInfo),\n                takerTokenData: abi.encode(fromTokenIdx, smoothyInfo),\n                getSellQuoteCallback: _sampleSellForApproximateBuyFromSmoothy\n            }),\n            makerTokenAmounts\n        );\n    }\n\n    function _sampleSellForApproximateBuyFromSmoothy(\n        bytes memory takerTokenData,\n        bytes memory makerTokenData,\n        uint256 sellAmount\n    )\n        private\n        view\n        returns (uint256 buyAmount)\n    {\n        (int128 takerTokenIdx, SmoothyInfo memory smoothyInfo) =\n            abi.decode(takerTokenData, (int128, SmoothyInfo));\n        (int128 makerTokenIdx) =\n            abi.decode(makerTokenData, (int128));\n        (bool success, bytes memory resultData) =\n            address(this).staticcall(abi.encodeWithSelector(\n                this.sampleSellsFromSmoothy.selector,\n                smoothyInfo,\n                takerTokenIdx,\n                makerTokenIdx,\n                _toSingleValueArray(sellAmount)\n            ));\n        if (!success) {\n            return 0;\n        }\n        // solhint-disable-next-line indent\n        return abi.decode(resultData, (uint256[]))[0];\n    }\n}\n"
        },
        "../src/interfaces/ISmoothy.sol": {
            "id": 34,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface ISmoothy {\n\n    function getBalance (\n        uint256 tid\n    )\n        external\n        view\n        returns (uint256 balance);\n\n    function _yBalances (\n        uint256 tid\n    )\n        external\n        view\n        returns (uint256 balance);\n\n    function getTokenStats (\n        uint256 tid\n    )\n        external\n        view\n        returns (uint256 softWeight, uint256 hardWeight, uint256 balance, uint256 decimals);\n}\n"
        },
        "../src/TwoHopSampler.sol": {
            "id": 21,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol\";\n\n\ncontract TwoHopSampler {\n    using LibBytesV06 for bytes;\n\n    struct HopInfo {\n        uint256 sourceIndex;\n        bytes returnData;\n    }\n\n    function sampleTwoHopSell(\n        bytes[] memory firstHopCalls,\n        bytes[] memory secondHopCalls,\n        uint256 sellAmount\n    )\n        public\n        returns (\n            HopInfo memory firstHop,\n            HopInfo memory secondHop,\n            uint256 buyAmount\n        )\n    {\n        uint256 intermediateAssetAmount = 0;\n        for (uint256 i = 0; i != firstHopCalls.length; ++i) {\n            firstHopCalls[i].writeUint256(firstHopCalls[i].length - 32, sellAmount);\n            (bool didSucceed, bytes memory returnData) = address(this).call(firstHopCalls[i]);\n            if (didSucceed) {\n                uint256 amount = returnData.readUint256(returnData.length - 32);\n                if (amount > intermediateAssetAmount) {\n                    intermediateAssetAmount = amount;\n                    firstHop.sourceIndex = i;\n                    firstHop.returnData = returnData;\n                }\n            }\n        }\n        if (intermediateAssetAmount == 0) {\n            return (firstHop, secondHop, buyAmount);\n        }\n        for (uint256 j = 0; j != secondHopCalls.length; ++j) {\n            secondHopCalls[j].writeUint256(secondHopCalls[j].length - 32, intermediateAssetAmount);\n            (bool didSucceed, bytes memory returnData) = address(this).call(secondHopCalls[j]);\n            if (didSucceed) {\n                uint256 amount = returnData.readUint256(returnData.length - 32);\n                if (amount > buyAmount) {\n                    buyAmount = amount;\n                    secondHop.sourceIndex = j;\n                    secondHop.returnData = returnData;\n                }\n            }\n        }\n    }\n\n    function sampleTwoHopBuy(\n        bytes[] memory firstHopCalls,\n        bytes[] memory secondHopCalls,\n        uint256 buyAmount\n    )\n        public\n        returns (\n            HopInfo memory firstHop,\n            HopInfo memory secondHop,\n            uint256 sellAmount\n        )\n    {\n        sellAmount = uint256(-1);\n        uint256 intermediateAssetAmount = uint256(-1);\n        for (uint256 j = 0; j != secondHopCalls.length; ++j) {\n            secondHopCalls[j].writeUint256(secondHopCalls[j].length - 32, buyAmount);\n            (bool didSucceed, bytes memory returnData) = address(this).call(secondHopCalls[j]);\n            if (didSucceed) {\n                uint256 amount = returnData.readUint256(returnData.length - 32);\n                if (\n                    amount > 0 &&\n                    amount < intermediateAssetAmount\n                ) {\n                    intermediateAssetAmount = amount;\n                    secondHop.sourceIndex = j;\n                    secondHop.returnData = returnData;\n                }\n            }\n        }\n        if (intermediateAssetAmount == uint256(-1)) {\n            return (firstHop, secondHop, sellAmount);\n        }\n        for (uint256 i = 0; i != firstHopCalls.length; ++i) {\n            firstHopCalls[i].writeUint256(firstHopCalls[i].length - 32, intermediateAssetAmount);\n            (bool didSucceed, bytes memory returnData) = address(this).call(firstHopCalls[i]);\n            if (didSucceed) {\n                uint256 amount = returnData.readUint256(returnData.length - 32);\n                if (\n                    amount > 0 &&\n                    amount < sellAmount\n                ) {\n                    sellAmount = amount;\n                    firstHop.sourceIndex = i;\n                    firstHop.returnData = returnData;\n                }\n            }\n        }\n    }\n}\n"
        },
        "../src/UniswapSampler.sol": {
            "id": 22,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IUniswapExchangeQuotes.sol\";\nimport \"./SamplerUtils.sol\";\n\n\ninterface IUniswapExchangeFactory {\n\n    /// @dev Get the exchange for a token.\n    /// @param tokenAddress The address of the token contract.\n    function getExchange(address tokenAddress)\n        external\n        view\n        returns (address);\n}\n\n\ncontract UniswapSampler is\n    SamplerUtils\n{\n    /// @dev Gas limit for Uniswap calls.\n    uint256 constant private UNISWAP_CALL_GAS = 150e3; // 150k\n\n    /// @dev Sample sell quotes from Uniswap.\n    /// @param router Address of the Uniswap Router\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromUniswap(\n        address router,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        IUniswapExchangeQuotes takerTokenExchange = takerToken == address(0) ?\n            IUniswapExchangeQuotes(0) : _getUniswapExchange(router, takerToken);\n        IUniswapExchangeQuotes makerTokenExchange = makerToken == address(0) ?\n            IUniswapExchangeQuotes(0) : _getUniswapExchange(router, makerToken);\n        for (uint256 i = 0; i < numSamples; i++) {\n            bool didSucceed = true;\n            if (makerToken == address(0)) {\n                (makerTokenAmounts[i], didSucceed) = _callUniswapExchangePriceFunction(\n                    address(takerTokenExchange),\n                    takerTokenExchange.getTokenToEthInputPrice.selector,\n                    takerTokenAmounts[i]\n                );\n            } else if (takerToken == address(0)) {\n                (makerTokenAmounts[i], didSucceed) = _callUniswapExchangePriceFunction(\n                    address(makerTokenExchange),\n                    makerTokenExchange.getEthToTokenInputPrice.selector,\n                    takerTokenAmounts[i]\n                );\n            } else {\n                uint256 ethBought;\n                (ethBought, didSucceed) = _callUniswapExchangePriceFunction(\n                    address(takerTokenExchange),\n                    takerTokenExchange.getTokenToEthInputPrice.selector,\n                    takerTokenAmounts[i]\n                );\n                if (ethBought != 0) {\n                    (makerTokenAmounts[i], didSucceed) = _callUniswapExchangePriceFunction(\n                        address(makerTokenExchange),\n                        makerTokenExchange.getEthToTokenInputPrice.selector,\n                        ethBought\n                    );\n                } else {\n                    makerTokenAmounts[i] = 0;\n                }\n            }\n            // Break early if amounts are 0\n            if (!didSucceed || makerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from Uniswap.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token sell amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromUniswap(\n        address router,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n\n        IUniswapExchangeQuotes takerTokenExchange = takerToken == address(0) ?\n            IUniswapExchangeQuotes(0) : _getUniswapExchange(router, takerToken);\n        IUniswapExchangeQuotes makerTokenExchange = makerToken == address(0) ?\n            IUniswapExchangeQuotes(0) : _getUniswapExchange(router, makerToken);\n        for (uint256 i = 0; i < numSamples; i++) {\n            bool didSucceed = true;\n            if (makerToken == address(0)) {\n                (takerTokenAmounts[i], didSucceed) = _callUniswapExchangePriceFunction(\n                    address(takerTokenExchange),\n                    takerTokenExchange.getTokenToEthOutputPrice.selector,\n                    makerTokenAmounts[i]\n                );\n            } else if (takerToken == address(0)) {\n                (takerTokenAmounts[i], didSucceed) = _callUniswapExchangePriceFunction(\n                    address(makerTokenExchange),\n                    makerTokenExchange.getEthToTokenOutputPrice.selector,\n                    makerTokenAmounts[i]\n                );\n            } else {\n                uint256 ethSold;\n                (ethSold, didSucceed) = _callUniswapExchangePriceFunction(\n                    address(makerTokenExchange),\n                    makerTokenExchange.getEthToTokenOutputPrice.selector,\n                    makerTokenAmounts[i]\n                );\n                if (ethSold != 0) {\n                    (takerTokenAmounts[i], didSucceed) = _callUniswapExchangePriceFunction(\n                        address(takerTokenExchange),\n                        takerTokenExchange.getTokenToEthOutputPrice.selector,\n                        ethSold\n                    );\n                } else {\n                    takerTokenAmounts[i] = 0;\n                }\n            }\n            // Break early if amounts are 0\n            if (!didSucceed || takerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n    }\n\n    /// @dev Gracefully calls a Uniswap pricing function.\n    /// @param uniswapExchangeAddress Address of an `IUniswapExchangeQuotes` exchange.\n    /// @param functionSelector Selector of the target function.\n    /// @param inputAmount Quantity parameter particular to the pricing function.\n    /// @return outputAmount The returned amount from the function call. Will be\n    ///         zero if the call fails or if `uniswapExchangeAddress` is zero.\n    function _callUniswapExchangePriceFunction(\n        address uniswapExchangeAddress,\n        bytes4 functionSelector,\n        uint256 inputAmount\n    )\n        private\n        view\n        returns (uint256 outputAmount, bool didSucceed)\n    {\n        if (uniswapExchangeAddress == address(0)) {\n            return (outputAmount, didSucceed);\n        }\n        bytes memory resultData;\n        (didSucceed, resultData) =\n            uniswapExchangeAddress.staticcall.gas(UNISWAP_CALL_GAS)(\n                abi.encodeWithSelector(\n                    functionSelector,\n                    inputAmount\n                ));\n        if (didSucceed) {\n            outputAmount = abi.decode(resultData, (uint256));\n        }\n    }\n\n    /// @dev Retrive an existing Uniswap exchange contract.\n    ///      Throws if the exchange does not exist.\n    /// @param router Address of the Uniswap router.\n    /// @param tokenAddress Address of the token contract.\n    /// @return exchange `IUniswapExchangeQuotes` for the token.\n    function _getUniswapExchange(address router, address tokenAddress)\n        private\n        view\n        returns (IUniswapExchangeQuotes exchange)\n    {\n        exchange = IUniswapExchangeQuotes(\n            address(IUniswapExchangeFactory(router)\n            .getExchange(tokenAddress))\n        );\n    }\n}\n"
        },
        "../src/interfaces/IUniswapExchangeQuotes.sol": {
            "id": 35,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface IUniswapExchangeQuotes {\n\n    function getEthToTokenInputPrice(\n        uint256 ethSold\n    )\n        external\n        view\n        returns (uint256 tokensBought);\n\n    function getEthToTokenOutputPrice(\n        uint256 tokensBought\n    )\n        external\n        view\n        returns (uint256 ethSold);\n\n    function getTokenToEthInputPrice(\n        uint256 tokensSold\n    )\n        external\n        view\n        returns (uint256 ethBought);\n\n    function getTokenToEthOutputPrice(\n        uint256 ethBought\n    )\n        external\n        view\n        returns (uint256 tokensSold);\n}\n"
        },
        "../src/UniswapV2Sampler.sol": {
            "id": 23,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IUniswapV2Router01.sol\";\n\n\ncontract UniswapV2Sampler\n{\n    /// @dev Gas limit for UniswapV2 calls.\n    uint256 constant private UNISWAPV2_CALL_GAS = 150e3; // 150k\n\n    /// @dev Sample sell quotes from UniswapV2.\n    /// @param router Router to look up tokens and amounts\n    /// @param path Token route. Should be takerToken -> makerToken\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromUniswapV2(\n        address router,\n        address[] memory path,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            try\n                IUniswapV2Router01(router).getAmountsOut\n                    {gas: UNISWAPV2_CALL_GAS}\n                    (takerTokenAmounts[i], path)\n                returns (uint256[] memory amounts)\n            {\n                makerTokenAmounts[i] = amounts[path.length - 1];\n                // Break early if there are 0 amounts\n                if (makerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from UniswapV2.\n    /// @param router Router to look up tokens and amounts\n    /// @param path Token route. Should be takerToken -> makerToken.\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromUniswapV2(\n        address router,\n        address[] memory path,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            try\n                IUniswapV2Router01(router).getAmountsIn\n                    {gas: UNISWAPV2_CALL_GAS}\n                    (makerTokenAmounts[i], path)\n                returns (uint256[] memory amounts)\n            {\n                takerTokenAmounts[i] = amounts[0];\n                // Break early if there are 0 amounts\n                if (takerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n}\n"
        },
        "../src/interfaces/IUniswapV2Router01.sol": {
            "id": 36,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface IUniswapV2Router01 {\n\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts);\n\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts);\n}\n"
        },
        "../src/UniswapV3Sampler.sol": {
            "id": 24,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\n\ninterface IUniswapV3QuoterV2 {\n    function factory()\n        external\n        view\n        returns (IUniswapV3Factory factory);\n\n    // @notice Returns the amount out received for a given exact input swap without executing the swap\n    // @param path The path of the swap, i.e. each token pair and the pool fee\n    // @param amountIn The amount of the first token to swap\n    // @return amountOut The amount of the last token that would be received\n    // @return sqrtPriceX96AfterList List of the sqrt price after the swap for each pool in the path\n    // @return initializedTicksCrossedList List of the initialized ticks that the swap crossed for each pool in the path\n    // @return gasEstimate The estimate of the gas that the swap consumes\n    function quoteExactInput(bytes memory path, uint256 amountIn)\n        external\n        returns (\n            uint256 amountOut,\n            uint160[] memory sqrtPriceX96AfterList,\n            uint32[] memory initializedTicksCrossedList,\n            uint256 gasEstimate\n        );\n\n    // @notice Returns the amount in required for a given exact output swap without executing the swap\n    // @param path The path of the swap, i.e. each token pair and the pool fee. Path must be provided in reverse order\n    // @param amountOut The amount of the last token to receive\n    // @return amountIn The amount of first token required to be paid\n    // @return sqrtPriceX96AfterList List of the sqrt price after the swap for each pool in the path\n    // @return initializedTicksCrossedList List of the initialized ticks that the swap crossed for each pool in the path\n    // @return gasEstimate The estimate of the gas that the swap consumes\n    function quoteExactOutput(bytes memory path, uint256 amountOut)\n        external\n        returns (\n            uint256 amountIn,\n            uint160[] memory sqrtPriceX96AfterList,\n            uint32[] memory initializedTicksCrossedList,\n            uint256 gasEstimate\n        );\n}\n\ninterface IUniswapV3Factory {\n    function getPool(IERC20TokenV06 a, IERC20TokenV06 b, uint24 fee)\n        external\n        view\n        returns (IUniswapV3Pool pool);\n}\n\ninterface IUniswapV3Pool {\n    function token0() external view returns (IERC20TokenV06);\n    function token1() external view returns (IERC20TokenV06);\n    function fee() external view returns (uint24);\n}\n\ncontract UniswapV3Sampler\n{\n    /// @dev Gas limit for UniswapV3 calls. This is 100% a guess.\n    uint256 constant private QUOTE_GAS = 700e3;\n\n    /// @dev Sample sell quotes from UniswapV3.\n    /// @param quoter UniswapV3 Quoter contract.\n    /// @param path Token route. Should be takerToken -> makerToken\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return uniswapPaths The encoded uniswap path for each sample.\n    /// @return uniswapGasUsed Estimated amount of gas used\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromUniswapV3(\n        IUniswapV3QuoterV2 quoter,\n        IERC20TokenV06[] memory path,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        returns (\n            bytes[] memory uniswapPaths,\n            uint256[] memory uniswapGasUsed,\n            uint256[] memory makerTokenAmounts\n        )\n    {\n        IUniswapV3Pool[][] memory poolPaths =\n            _getValidPoolPaths(quoter.factory(), path, 0);\n\n        makerTokenAmounts = new uint256[](takerTokenAmounts.length);\n        uniswapPaths = new bytes[](takerTokenAmounts.length);\n        uniswapGasUsed = new uint256[](takerTokenAmounts.length);\n\n        for (uint256 i = 0; i < takerTokenAmounts.length; ++i) {\n            // Pick the best result from all the paths.\n            uint256 topBuyAmount = 0;\n            for (uint256 j = 0; j < poolPaths.length; ++j) {\n                bytes memory uniswapPath = _toUniswapPath(path, poolPaths[j]);\n                try quoter.quoteExactInput\n                    { gas: QUOTE_GAS }\n                    (uniswapPath, takerTokenAmounts[i])\n                    returns (\n                        uint256 buyAmount,\n                        uint160[] memory, /* sqrtPriceX96AfterList */\n                        uint32[] memory, /* initializedTicksCrossedList */\n                        uint256 gasUsed\n                    )\n                {\n                    if (topBuyAmount <= buyAmount) {\n                        topBuyAmount = buyAmount;\n                        uniswapPaths[i] = uniswapPath;\n                        uniswapGasUsed[i] = gasUsed;\n                    }\n                } catch {}\n            }\n            // Break early if we can't complete the sells.\n            if (topBuyAmount == 0) {\n                // HACK(kimpers): To avoid too many local variables, paths and gas used is set directly in the loop\n                // then reset if no valid valid quote was found\n                uniswapPaths[i] = \"\";\n                uniswapGasUsed[i] = 0;\n                break;\n            }\n            makerTokenAmounts[i] = topBuyAmount;\n        }\n    }\n\n    /// @dev Sample buy quotes from UniswapV3.\n    /// @param quoter UniswapV3 Quoter contract.\n    /// @param path Token route. Should be takerToken -> makerToken.\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return uniswapPaths The encoded uniswap path for each sample.\n    /// @return uniswapGasUsed Estimated amount of gas used\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromUniswapV3(\n        IUniswapV3QuoterV2 quoter,\n        IERC20TokenV06[] memory path,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        returns (\n            bytes[] memory uniswapPaths,\n            uint256[] memory uniswapGasUsed,\n            uint256[] memory takerTokenAmounts\n        )\n    {\n        IUniswapV3Pool[][] memory poolPaths =\n            _getValidPoolPaths(quoter.factory(), path, 0);\n        IERC20TokenV06[] memory reversedPath = _reverseTokenPath(path);\n\n        takerTokenAmounts = new uint256[](makerTokenAmounts.length);\n        uniswapPaths = new bytes[](makerTokenAmounts.length);\n        uniswapGasUsed = new uint256[](makerTokenAmounts.length);\n\n        for (uint256 i = 0; i < makerTokenAmounts.length; ++i) {\n            // Pick the best result from all the paths.\n            uint256 topSellAmount = 0;\n            for (uint256 j = 0; j < poolPaths.length; ++j) {\n                // quoter requires path to be reversed for buys.\n                bytes memory uniswapPath = _toUniswapPath(\n                    reversedPath,\n                    _reversePoolPath(poolPaths[j])\n                );\n                try\n                    quoter.quoteExactOutput\n                        { gas: QUOTE_GAS }\n                        (uniswapPath, makerTokenAmounts[i])\n                        returns (\n                            uint256 sellAmount,\n                            uint160[] memory, /* sqrtPriceX96AfterList */\n                            uint32[] memory, /* initializedTicksCrossedList */\n                            uint256 gasUsed\n                        )\n                {\n                    if (topSellAmount == 0 || topSellAmount >= sellAmount) {\n                        topSellAmount = sellAmount;\n                        // But the output path should still be encoded for sells.\n                        uniswapPaths[i] = _toUniswapPath(path, poolPaths[j]);\n                        uniswapGasUsed[i] = gasUsed;\n                    }\n                } catch {}\n            }\n            // Break early if we can't complete the buys.\n            if (topSellAmount == 0) {\n                // HACK(kimpers): To avoid too many local variables, paths and gas used is set directly in the loop\n                // then reset if no valid valid quote was found\n                uniswapPaths[i] = \"\";\n                uniswapGasUsed[i] = 0;\n                break;\n            }\n            takerTokenAmounts[i] = topSellAmount;\n        }\n    }\n\n    function _getValidPoolPaths(\n        IUniswapV3Factory factory,\n        IERC20TokenV06[] memory tokenPath,\n        uint256 startIndex\n    )\n        private\n        view\n        returns (IUniswapV3Pool[][] memory poolPaths)\n    {\n        require(\n            tokenPath.length - startIndex >= 2,\n            \"UniswapV3Sampler/tokenPath too short\"\n        );\n        uint24[4] memory validPoolFees = [\n            // The launch pool fees. Could get hairier if they add more.\n            uint24(0.0001e6),\n            uint24(0.0005e6),\n            uint24(0.003e6),\n            uint24(0.01e6)\n        ];\n        IUniswapV3Pool[] memory validPools =\n            new IUniswapV3Pool[](validPoolFees.length);\n        uint256 numValidPools = 0;\n        {\n            IERC20TokenV06 inputToken = tokenPath[startIndex];\n            IERC20TokenV06 outputToken = tokenPath[startIndex + 1];\n            for (uint256 i = 0; i < validPoolFees.length; ++i) {\n                IUniswapV3Pool pool =\n                factory.getPool(inputToken, outputToken, validPoolFees[i]);\n                if (_isValidPool(pool)) {\n                    validPools[numValidPools++] = pool;\n                }\n            }\n        }\n        if (numValidPools == 0) {\n            // No valid pools for this hop.\n            return poolPaths;\n        }\n        if (startIndex + 2 == tokenPath.length) {\n            // End of path.\n            poolPaths = new IUniswapV3Pool[][](numValidPools);\n            for (uint256 i = 0; i < numValidPools; ++i) {\n                poolPaths[i] = new IUniswapV3Pool[](1);\n                poolPaths[i][0] = validPools[i];\n            }\n            return poolPaths;\n        }\n        // Get paths for subsequent hops.\n        IUniswapV3Pool[][] memory subsequentPoolPaths =\n            _getValidPoolPaths(factory, tokenPath, startIndex + 1);\n        if (subsequentPoolPaths.length == 0) {\n            // Could not complete the path.\n            return poolPaths;\n        }\n        // Combine our pools with the next hop paths.\n        poolPaths = new IUniswapV3Pool[][](\n            numValidPools * subsequentPoolPaths.length\n        );\n        for (uint256 i = 0; i < numValidPools; ++i) {\n            for (uint256 j = 0; j < subsequentPoolPaths.length; ++j) {\n                uint256 o = i * subsequentPoolPaths.length + j;\n                // Prepend pool to the subsequent path.\n                poolPaths[o] =\n                    new IUniswapV3Pool[](1 + subsequentPoolPaths[j].length);\n                poolPaths[o][0] = validPools[i];\n                for (uint256 k = 0; k < subsequentPoolPaths[j].length; ++k) {\n                    poolPaths[o][1 + k] = subsequentPoolPaths[j][k];\n                }\n            }\n        }\n        return poolPaths;\n    }\n\n    function _reverseTokenPath(IERC20TokenV06[] memory tokenPath)\n        private\n        pure\n        returns (IERC20TokenV06[] memory reversed)\n    {\n        reversed = new IERC20TokenV06[](tokenPath.length);\n        for (uint256 i = 0; i < tokenPath.length; ++i) {\n            reversed[i] = tokenPath[tokenPath.length - i - 1];\n        }\n    }\n\n    function _reversePoolPath(IUniswapV3Pool[] memory poolPath)\n        private\n        pure\n        returns (IUniswapV3Pool[] memory reversed)\n    {\n        reversed = new IUniswapV3Pool[](poolPath.length);\n        for (uint256 i = 0; i < poolPath.length; ++i) {\n            reversed[i] = poolPath[poolPath.length - i - 1];\n        }\n    }\n\n    function _isValidPool(IUniswapV3Pool pool)\n        private\n        view\n        returns (bool isValid)\n    {\n        // Check if it has been deployed.\n        {\n            uint256 codeSize;\n            assembly {\n                codeSize := extcodesize(pool)\n            }\n            if (codeSize == 0) {\n                return false;\n            }\n        }\n        // Must have a balance of both tokens.\n        if (pool.token0().balanceOf(address(pool)) == 0) {\n            return false;\n        }\n        if (pool.token1().balanceOf(address(pool)) == 0) {\n            return false;\n        }\n        return true;\n    }\n\n    function _toUniswapPath(\n        IERC20TokenV06[] memory tokenPath,\n        IUniswapV3Pool[] memory poolPath\n    )\n        private\n        view\n        returns (bytes memory uniswapPath)\n    {\n        require(\n            tokenPath.length >= 2 && tokenPath.length == poolPath.length + 1,\n            \"UniswapV3Sampler/invalid path lengths\"\n        );\n        // Uniswap paths are tightly packed as:\n        // [token0, token0token1PairFee, token1, token1Token2PairFee, token2, ...]\n        uniswapPath = new bytes(tokenPath.length * 20 + poolPath.length * 3);\n        uint256 o;\n        assembly { o := add(uniswapPath, 32) }\n        for (uint256 i = 0; i < tokenPath.length; ++i) {\n            if (i > 0) {\n                uint24 poolFee = poolPath[i - 1].fee();\n                assembly {\n                    mstore(o, shl(232, poolFee))\n                    o := add(o, 3)\n                }\n            }\n            IERC20TokenV06 token = tokenPath[i];\n            assembly {\n                mstore(o, shl(96, token))\n                o := add(o, 20)\n            }\n        }\n    }\n}\n"
        },
        "../src/UtilitySampler.sol": {
            "id": 25,
            "content": "\n// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\n\ncontract UtilitySampler {\n\n    using LibERC20TokenV06 for IERC20TokenV06;\n\n    IERC20TokenV06 private immutable UTILITY_ETH_ADDRESS = IERC20TokenV06(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\n\n    function getTokenDecimals(IERC20TokenV06[] memory tokens)\n        public\n        view\n        returns (uint256[] memory decimals)\n    {\n        decimals = new uint256[](tokens.length);\n        for (uint256 i = 0; i != tokens.length; i++) {\n            decimals[i] = tokens[i] == UTILITY_ETH_ADDRESS\n                ? 18\n                : tokens[i].compatDecimals();\n        }\n    }\n\n    function getBalanceOf(IERC20TokenV06[] memory tokens, address account)\n        public\n        view\n        returns (uint256[] memory balances)\n    {\n        balances = new uint256[](tokens.length);\n        for (uint256 i = 0; i != tokens.length; i++) {\n            balances[i] = tokens[i] == UTILITY_ETH_ADDRESS\n                ? account.balance\n                : tokens[i].compatBalanceOf(account);\n        }\n    }\n\n    function getAllowanceOf(IERC20TokenV06[] memory tokens, address account, address spender)\n        public\n        view\n        returns (uint256[] memory allowances)\n    {\n        allowances = new uint256[](tokens.length);\n        for (uint256 i = 0; i != tokens.length; i++) {\n            allowances[i] = tokens[i] == UTILITY_ETH_ADDRESS\n                ? 0\n                : tokens[i].compatAllowance(account, spender);\n        }\n    }\n\n    function isContract(address account)\n        public\n        view\n        returns (bool)\n    {\n        uint256 size;\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    function getGasLeft()\n        public\n        returns (uint256)\n    {\n        return gasleft();\n    }\n\n    function getBlockNumber()\n        public\n        view\n        returns (uint256)\n    {\n        return block.number;\n    }\n}"
        }
    },
    "sourceCodes": {
        "./TestERC20BridgeSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"../src/ERC20BridgeSampler.sol\";\nimport \"../src/interfaces/IKyberNetwork.sol\";\nimport \"../src/interfaces/IUniswapV2Router01.sol\";\n\n\nlibrary LibDeterministicQuotes {\n\n    address private constant WETH_ADDRESS = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n    uint256 private constant RATE_DENOMINATOR = 1 ether;\n    uint256 private constant MIN_RATE = RATE_DENOMINATOR / 100;\n    uint256 private constant MAX_RATE = 100 * RATE_DENOMINATOR;\n    uint8 private constant MIN_DECIMALS = 4;\n    uint8 private constant MAX_DECIMALS = 20;\n\n    function getDeterministicSellQuote(\n        bytes32 salt,\n        address sellToken,\n        address buyToken,\n        uint256 sellAmount\n    )\n        internal\n        pure\n        returns (uint256 buyAmount)\n    {\n        uint256 sellBase = uint256(10) ** getDeterministicTokenDecimals(sellToken);\n        uint256 buyBase = uint256(10) ** getDeterministicTokenDecimals(buyToken);\n        uint256 rate = getDeterministicRate(salt, sellToken, buyToken);\n        return sellAmount * rate * buyBase / sellBase / RATE_DENOMINATOR;\n    }\n\n    function getDeterministicBuyQuote(\n        bytes32 salt,\n        address sellToken,\n        address buyToken,\n        uint256 buyAmount\n    )\n        internal\n        pure\n        returns (uint256 sellAmount)\n    {\n        uint256 sellBase = uint256(10) ** getDeterministicTokenDecimals(sellToken);\n        uint256 buyBase = uint256(10) ** getDeterministicTokenDecimals(buyToken);\n        uint256 rate = getDeterministicRate(salt, sellToken, buyToken);\n        return buyAmount * RATE_DENOMINATOR * sellBase / rate / buyBase;\n    }\n\n    function getDeterministicTokenDecimals(address token)\n        internal\n        pure\n        returns (uint8 decimals)\n    {\n        if (token == WETH_ADDRESS) {\n            return 18;\n        }\n        bytes32 seed = keccak256(abi.encodePacked(token));\n        return uint8(uint256(seed) % (MAX_DECIMALS - MIN_DECIMALS)) + MIN_DECIMALS;\n    }\n\n    function getDeterministicRate(bytes32 salt, address sellToken, address buyToken)\n        internal\n        pure\n        returns (uint256 rate)\n    {\n        bytes32 seed = keccak256(abi.encodePacked(salt, sellToken, buyToken));\n        return uint256(seed) % (MAX_RATE - MIN_RATE) + MIN_RATE;\n    }\n}\n\ncontract TestDeploymentConstants {\n\n    // solhint-disable separate-by-one-line-in-contract\n\n    // Mainnet addresses ///////////////////////////////////////////////////////\n    /// @dev Mainnet address of the WETH contract.\n    address constant private WETH_ADDRESS = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n\n    /// @dev Overridable way to get the WETH address.\n    /// @return wethAddress The WETH address.\n    function _getWethAddress()\n        internal\n        view\n        returns (address wethAddress)\n    {\n        return WETH_ADDRESS;\n    }\n\n}\n\ncontract FailTrigger {\n\n    // Give this address a balance to force operations to fail.\n    address payable constant public FAILURE_ADDRESS = 0xe9dB8717BC5DFB20aaf538b4a5a02B7791FF430C;\n\n    // Funds `FAILURE_ADDRESS`.\n    function enableFailTrigger() external payable {\n        FAILURE_ADDRESS.transfer(msg.value);\n    }\n\n    function _revertIfShouldFail() internal view {\n        if (FAILURE_ADDRESS.balance != 0) {\n            revert(\"FAIL_TRIGGERED\");\n        }\n    }\n}\n\n\ncontract TestERC20BridgeSamplerUniswapExchange is\n    IUniswapExchangeQuotes,\n    TestDeploymentConstants,\n    FailTrigger\n{\n    bytes32 constant private BASE_SALT = 0x1d6a6a0506b0b4a554b907a4c29d9f4674e461989d9c1921feb17b26716385ab;\n\n    address public tokenAddress;\n    bytes32 public salt;\n\n    constructor(address _tokenAddress) public {\n        tokenAddress = _tokenAddress;\n        salt = keccak256(abi.encodePacked(BASE_SALT, _tokenAddress));\n    }\n\n    // Deterministic `IUniswapExchangeQuotes.getEthToTokenInputPrice()`.\n    function getEthToTokenInputPrice(\n        uint256 ethSold\n    )\n        override\n        external\n        view\n        returns (uint256 tokensBought)\n    {\n        _revertIfShouldFail();\n        return LibDeterministicQuotes.getDeterministicSellQuote(\n            salt,\n            tokenAddress,\n            _getWethAddress(),\n            ethSold\n        );\n    }\n\n    // Deterministic `IUniswapExchangeQuotes.getEthToTokenOutputPrice()`.\n    function getEthToTokenOutputPrice(\n        uint256 tokensBought\n    )\n        override\n        external\n        view\n        returns (uint256 ethSold)\n    {\n        _revertIfShouldFail();\n        return LibDeterministicQuotes.getDeterministicBuyQuote(\n            salt,\n            _getWethAddress(),\n            tokenAddress,\n            tokensBought\n        );\n    }\n\n    // Deterministic `IUniswapExchangeQuotes.getTokenToEthInputPrice()`.\n    function getTokenToEthInputPrice(\n        uint256 tokensSold\n    )\n        override\n        external\n        view\n        returns (uint256 ethBought)\n    {\n        _revertIfShouldFail();\n        return LibDeterministicQuotes.getDeterministicSellQuote(\n            salt,\n            tokenAddress,\n            _getWethAddress(),\n            tokensSold\n        );\n    }\n\n    // Deterministic `IUniswapExchangeQuotes.getTokenToEthOutputPrice()`.\n    function getTokenToEthOutputPrice(\n        uint256 ethBought\n    )\n        override\n        external\n        view\n        returns (uint256 tokensSold)\n    {\n        _revertIfShouldFail();\n        return LibDeterministicQuotes.getDeterministicBuyQuote(\n            salt,\n            _getWethAddress(),\n            tokenAddress,\n            ethBought\n        );\n    }\n}\n\n\ncontract TestERC20BridgeSamplerUniswapV2Router01 is\n    IUniswapV2Router01,\n    TestDeploymentConstants,\n    FailTrigger\n{\n    bytes32 constant private SALT = 0xadc7fcb33c735913b8635927e66896b356a53a912ab2ceff929e60a04b53b3c1;\n\n    // Deterministic `IUniswapV2Router01.getAmountsOut()`.\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\n        override\n        external\n        view\n        returns (uint256[] memory amounts)\n    {\n        require(path.length >= 2, \"PATH_TOO_SHORT\");\n        _revertIfShouldFail();\n        amounts = new uint256[](path.length);\n        amounts[0] = amountIn;\n        for (uint256 i = 0; i < path.length - 1; ++i) {\n            amounts[i + 1] = LibDeterministicQuotes.getDeterministicSellQuote(\n                SALT,\n                path[i],\n                path[i + 1],\n                amounts[i]\n            );\n        }\n    }\n\n    // Deterministic `IUniswapV2Router01.getAmountsInt()`.\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\n        override\n        external\n        view\n        returns (uint256[] memory amounts)\n    {\n        require(path.length >= 2, \"PATH_TOO_SHORT\");\n        _revertIfShouldFail();\n        amounts = new uint256[](path.length);\n        amounts[path.length - 1] = amountOut;\n        for (uint256 i = path.length - 1; i > 0; --i) {\n            amounts[i - 1] = LibDeterministicQuotes.getDeterministicBuyQuote(\n                SALT,\n                path[i - 1],\n                path[i],\n                amounts[i]\n            );\n        }\n    }\n}\n\n\n// solhint-disable space-after-comma\ncontract TestERC20BridgeSamplerKyberNetwork is\n    TestDeploymentConstants,\n    FailTrigger\n{\n    bytes32 constant private SALT = 0x0ff3ca9d46195c39f9a12afb74207b4970349fb3cfb1e459bbf170298d326bc7;\n    address constant public ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n\n    enum TradeType {BestOfAll, MaskIn, MaskOut, Split}\n    enum ProcessWithRate {NotRequired, Required}\n\n    // IKyberHintHandler\n    function buildTokenToEthHint(\n        address tokenSrc,\n        TradeType /* tokenToEthType */,\n        bytes32[] calldata /* tokenToEthReserveIds */,\n        uint256[] calldata /* tokenToEthSplits */\n    ) external view returns (bytes memory hint)\n    {\n        return abi.encode(tokenSrc);\n    }\n\n    function buildEthToTokenHint(\n        address tokenDest,\n        TradeType /* ethToTokenType */,\n        bytes32[] calldata /* ethToTokenReserveIds */,\n        uint256[] calldata /* ethToTokenSplits */\n    ) external view returns (bytes memory hint)\n    {\n        return abi.encode(tokenDest);\n    }\n\n    // IKyberHintHandler\n    function buildTokenToTokenHint(\n        address tokenSrc,\n        TradeType /* tokenToEthType */,\n        bytes32[] calldata /* tokenToEthReserveIds */,\n        uint256[] calldata /* tokenToEthSplits */,\n        address /* tokenDest  */,\n        TradeType /* EthToTokenType */,\n        bytes32[] calldata /* EthToTokenReserveIds */,\n        uint256[] calldata /* EthToTokenSplits */\n    ) external view returns (bytes memory hint)\n    {\n        return abi.encode(tokenSrc);\n    }\n\n    // IKyberHintHandler\n    function getTradingReserves(\n        address tokenSrc,\n        address tokenDest,\n        bool isTokenToToken,\n        bytes calldata hint\n    )\n        external\n        view\n        returns (\n            bytes32[] memory reserveIds,\n            uint256[] memory splitValuesBps,\n            ProcessWithRate processWithRate\n        )\n    {\n        reserveIds = new bytes32[](1);\n        reserveIds[0] = bytes32(uint256(1));\n        splitValuesBps = new uint256[](0);\n        processWithRate = ProcessWithRate.NotRequired;\n    }\n\n    // Deterministic `IKyberNetworkProxy.getExpectedRateAfterFee()`.\n    function getExpectedRateAfterFee(\n        address fromToken,\n        address toToken,\n        uint256 /* srcQty */,\n        uint256 /* fee */,\n        bytes calldata /* hint */\n    )\n        external\n        view\n        returns\n        (uint256 expectedRate)\n    {\n        _revertIfShouldFail();\n        fromToken = fromToken == ETH_ADDRESS ? _getWethAddress() : fromToken;\n        toToken = toToken == ETH_ADDRESS ? _getWethAddress() : toToken;\n        expectedRate = LibDeterministicQuotes.getDeterministicRate(\n            SALT,\n            fromToken,\n            toToken\n        );\n    }\n\n    // Deterministic `IKyberNetworkProxy.getExpectedRate()`.\n    function getExpectedRate(\n        address fromToken,\n        address toToken,\n        uint256\n    )\n        external\n        view\n        returns (uint256 expectedRate, uint256)\n    {\n        _revertIfShouldFail();\n        fromToken = fromToken == ETH_ADDRESS ? _getWethAddress() : fromToken;\n        toToken = toToken == ETH_ADDRESS ? _getWethAddress() : toToken;\n        expectedRate = LibDeterministicQuotes.getDeterministicRate(\n            SALT,\n            fromToken,\n            toToken\n        );\n    }\n}\n\n\ncontract TestERC20BridgeSamplerUniswapExchangeFactory is\n    IUniswapExchangeFactory\n{\n    mapping (address => IUniswapExchangeQuotes) private _exchangesByToken;\n\n    // Creates Uniswap exchange contracts for tokens.\n    function createTokenExchanges(address[] calldata tokenAddresses)\n        external\n    {\n        for (uint256 i = 0; i < tokenAddresses.length; i++) {\n            address tokenAddress = tokenAddresses[i];\n            _exchangesByToken[tokenAddress] =\n                new TestERC20BridgeSamplerUniswapExchange(tokenAddress);\n        }\n    }\n\n    // `IUniswapExchangeFactory.getExchange()`.\n    function getExchange(address tokenAddress)\n        override\n        external\n        view\n        returns (address)\n    {\n        return address(_exchangesByToken[tokenAddress]);\n    }\n}\n\n\ncontract TestERC20BridgeSampler is\n    ERC20BridgeSampler,\n    FailTrigger\n{\n    TestERC20BridgeSamplerUniswapExchangeFactory public uniswap;\n    TestERC20BridgeSamplerUniswapV2Router01 public uniswapV2Router;\n    TestERC20BridgeSamplerKyberNetwork public kyber;\n\n    uint8 private constant MAX_ORDER_STATUS = uint8(IExchange.OrderStatus.CANCELLED) + 1;\n\n    constructor() public ERC20BridgeSampler() {\n        uniswap = new TestERC20BridgeSamplerUniswapExchangeFactory();\n        uniswapV2Router = new TestERC20BridgeSamplerUniswapV2Router01();\n        kyber = new TestERC20BridgeSamplerKyberNetwork();\n    }\n\n    // Creates Uniswap exchange contracts for tokens.\n    function createTokenExchanges(address[] calldata tokenAddresses)\n        external\n    {\n        uniswap.createTokenExchanges(tokenAddresses);\n    }\n\n    // Overridden to return deterministic states.\n    function getLimitOrderFillableTakerAmount(\n        IExchange.LimitOrder memory order,\n        IExchange.Signature memory,\n        IExchange\n    )\n        override\n        public\n        view\n        returns (uint256 fillableTakerAmount)\n    {\n        return uint256(keccak256(abi.encode(order.salt))) % order.takerAmount;\n    }\n\n    // Overriden to return deterministic decimals.\n    function _getTokenDecimals(address tokenAddress)\n        override\n        internal\n        view\n        returns (uint8 decimals)\n    {\n        return LibDeterministicQuotes.getDeterministicTokenDecimals(tokenAddress);\n    }\n}\n",
        "../src/ERC20BridgeSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./BalancerSampler.sol\";\nimport \"./BalancerV2Sampler.sol\";\nimport \"./BancorSampler.sol\";\nimport \"./CompoundSampler.sol\";\nimport \"./CurveSampler.sol\";\nimport \"./DODOSampler.sol\";\nimport \"./DODOV2Sampler.sol\";\nimport \"./KyberSampler.sol\";\nimport \"./KyberDmmSampler.sol\";\nimport \"./LidoSampler.sol\";\nimport \"./LiquidityProviderSampler.sol\";\nimport \"./MakerPSMSampler.sol\";\nimport \"./MultiBridgeSampler.sol\";\nimport \"./MStableSampler.sol\";\nimport \"./MooniswapSampler.sol\";\nimport \"./NativeOrderSampler.sol\";\nimport \"./ShellSampler.sol\";\nimport \"./SmoothySampler.sol\";\nimport \"./TwoHopSampler.sol\";\nimport \"./UniswapSampler.sol\";\nimport \"./UniswapV2Sampler.sol\";\nimport \"./UniswapV3Sampler.sol\";\nimport \"./UtilitySampler.sol\";\n\n\ncontract ERC20BridgeSampler is\n    BalancerSampler,\n    BalancerV2Sampler,\n    BancorSampler,\n    CompoundSampler,\n    CurveSampler,\n    DODOSampler,\n    DODOV2Sampler,\n    KyberSampler,\n    KyberDmmSampler,\n    LidoSampler,\n    LiquidityProviderSampler,\n    MakerPSMSampler,\n    MStableSampler,\n    MooniswapSampler,\n    MultiBridgeSampler,\n    NativeOrderSampler,\n    ShellSampler,\n    SmoothySampler,\n    TwoHopSampler,\n    UniswapSampler,\n    UniswapV2Sampler,\n    UniswapV3Sampler,\n    UtilitySampler\n{\n\n    struct CallResults {\n        bytes data;\n        bool success;\n    }\n\n    /// @dev Call multiple public functions on this contract in a single transaction.\n    /// @param callDatas ABI-encoded call data for each function call.\n    /// @return callResults ABI-encoded results data for each call.\n    function batchCall(bytes[] calldata callDatas)\n        external\n        returns (CallResults[] memory callResults)\n    {\n        callResults = new CallResults[](callDatas.length);\n        for (uint256 i = 0; i != callDatas.length; ++i) {\n            callResults[i].success = true;\n            if (callDatas[i].length == 0) {\n                continue;\n            }\n            (callResults[i].success, callResults[i].data) = address(this).call(callDatas[i]);\n        }\n    }\n}\n",
        "../src/BalancerSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IBalancer.sol\";\n\n\ncontract BalancerSampler {\n\n    /// @dev Base gas limit for Balancer calls.\n    uint256 constant private BALANCER_CALL_GAS = 300e3; // 300k\n\n    // Balancer math constants\n    // https://github.com/balancer-labs/balancer-core/blob/master/contracts/BConst.sol\n    uint256 constant private BONE = 10 ** 18;\n    uint256 constant private MAX_IN_RATIO = BONE / 2;\n    uint256 constant private MAX_OUT_RATIO = (BONE / 3) + 1 wei;\n\n    struct BalancerState {\n        uint256 takerTokenBalance;\n        uint256 makerTokenBalance;\n        uint256 takerTokenWeight;\n        uint256 makerTokenWeight;\n        uint256 swapFee;\n    }\n\n    /// @dev Sample sell quotes from Balancer.\n    /// @param poolAddress Address of the Balancer pool to query.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromBalancer(\n        address poolAddress,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        IBalancer pool = IBalancer(poolAddress);\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        if (!pool.isBound(takerToken) || !pool.isBound(makerToken)) {\n            return makerTokenAmounts;\n        }\n\n        BalancerState memory poolState;\n        poolState.takerTokenBalance = pool.getBalance(takerToken);\n        poolState.makerTokenBalance = pool.getBalance(makerToken);\n        poolState.takerTokenWeight = pool.getDenormalizedWeight(takerToken);\n        poolState.makerTokenWeight = pool.getDenormalizedWeight(makerToken);\n        poolState.swapFee = pool.getSwapFee();\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            // Handles this revert scenario:\n            // https://github.com/balancer-labs/balancer-core/blob/master/contracts/BPool.sol#L443\n            if (takerTokenAmounts[i] > _bmul(poolState.takerTokenBalance, MAX_IN_RATIO)) {\n                break;\n            }\n            try\n                pool.calcOutGivenIn\n                    {gas: BALANCER_CALL_GAS}\n                    (\n                        poolState.takerTokenBalance,\n                        poolState.takerTokenWeight,\n                        poolState.makerTokenBalance,\n                        poolState.makerTokenWeight,\n                        takerTokenAmounts[i],\n                        poolState.swapFee\n                    )\n                returns (uint256 amount)\n            {\n                makerTokenAmounts[i] = amount;\n                // Break early if there are 0 amounts\n                if (makerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from Balancer.\n    /// @param poolAddress Address of the Balancer pool to query.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromBalancer(\n        address poolAddress,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        IBalancer pool = IBalancer(poolAddress);\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n        if (!pool.isBound(takerToken) || !pool.isBound(makerToken)) {\n            return takerTokenAmounts;\n        }\n\n        BalancerState memory poolState;\n        poolState.takerTokenBalance = pool.getBalance(takerToken);\n        poolState.makerTokenBalance = pool.getBalance(makerToken);\n        poolState.takerTokenWeight = pool.getDenormalizedWeight(takerToken);\n        poolState.makerTokenWeight = pool.getDenormalizedWeight(makerToken);\n        poolState.swapFee = pool.getSwapFee();\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            // Handles this revert scenario:\n            // https://github.com/balancer-labs/balancer-core/blob/master/contracts/BPool.sol#L505\n            if (makerTokenAmounts[i] > _bmul(poolState.makerTokenBalance, MAX_OUT_RATIO)) {\n                break;\n            }\n            try\n                pool.calcInGivenOut\n                    {gas: BALANCER_CALL_GAS}\n                    (\n                        poolState.takerTokenBalance,\n                        poolState.takerTokenWeight,\n                        poolState.makerTokenBalance,\n                        poolState.makerTokenWeight,\n                        makerTokenAmounts[i],\n                        poolState.swapFee\n                    )\n                returns (uint256 amount)\n            {\n                // Handles this revert scenario:\n                // https://github.com/balancer-labs/balancer-core/blob/master/contracts/BPool.sol#L443\n                if (amount > _bmul(poolState.takerTokenBalance, MAX_IN_RATIO)) {\n                    break;\n                }\n\n                takerTokenAmounts[i] = amount;\n                // Break early if there are 0 amounts\n                if (takerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    /// @dev Hacked version of Balancer's `bmul` function, returning 0 instead\n    ///      of reverting.\n    ///      https://github.com/balancer-labs/balancer-core/blob/master/contracts/BNum.sol#L63-L73\n    /// @param a The first operand.\n    /// @param b The second operand.\n    /// @param c The result of the multiplication, or 0 if `bmul` would've reverted.\n    function _bmul(uint256 a, uint256 b)\n        private\n        pure\n        returns (uint256 c)\n    {\n        uint c0 = a * b;\n        if (a != 0 && c0 / a != b) {\n            return 0;\n        }\n        uint c1 = c0 + (BONE / 2);\n        if (c1 < c0) {\n            return 0;\n        }\n        uint c2 = c1 / BONE;\n        return c2;\n    }\n}\n",
        "../src/interfaces/IBalancer.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface IBalancer {\n    function isBound(address t) external view returns (bool);\n    function getDenormalizedWeight(address token) external view returns (uint256);\n    function getBalance(address token) external view returns (uint256);\n    function getSwapFee() external view returns (uint256);\n    function calcOutGivenIn(\n        uint256 tokenBalanceIn,\n        uint256 tokenWeightIn,\n        uint256 tokenBalanceOut,\n        uint256 tokenWeightOut,\n        uint256 tokenAmountIn,\n        uint256 swapFee\n    ) external pure returns (uint256 tokenAmountOut);\n    function calcInGivenOut(\n        uint256 tokenBalanceIn,\n        uint256 tokenWeightIn,\n        uint256 tokenBalanceOut,\n        uint256 tokenWeightOut,\n        uint256 tokenAmountOut,\n        uint256 swapFee\n    ) external pure returns (uint256 tokenAmountIn);\n}\n",
        "../src/BalancerV2Sampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./SamplerUtils.sol\";\n\n/// @dev Minimal Balancer V2 Vault interface\n///      for documentation refer to https://github.com/balancer-labs/balancer-core-v2/blob/master/contracts/vault/interfaces/IVault.sol\ninterface IBalancerV2Vault {\n    enum SwapKind { GIVEN_IN, GIVEN_OUT }\n\n    struct BatchSwapStep {\n        bytes32 poolId;\n        uint256 assetInIndex;\n        uint256 assetOutIndex;\n        uint256 amount;\n        bytes userData;\n    }\n\n    struct FundManagement {\n        address sender;\n        bool fromInternalBalance;\n        address payable recipient;\n        bool toInternalBalance;\n    }\n\n    function queryBatchSwap(\n        SwapKind kind,\n        BatchSwapStep[] calldata swaps,\n        IAsset[] calldata assets,\n        FundManagement calldata funds\n    ) external returns (int256[] memory assetDeltas);\n}\ninterface IAsset {\n    // solhint-disable-previous-line no-empty-blocks\n}\n\ncontract BalancerV2Sampler is SamplerUtils {\n\n    struct BalancerV2PoolInfo {\n        bytes32 poolId;\n        address vault;\n    }\n\n    /// @dev Sample sell quotes from Balancer V2.\n    /// @param poolInfo Struct with pool related data\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromBalancerV2(\n        BalancerV2PoolInfo memory poolInfo,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        IBalancerV2Vault vault = IBalancerV2Vault(poolInfo.vault);\n        IAsset[] memory swapAssets = new IAsset[](2);\n        swapAssets[0] = IAsset(takerToken);\n        swapAssets[1] = IAsset(makerToken);\n\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        IBalancerV2Vault.FundManagement memory swapFunds =\n            _createSwapFunds();\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            IBalancerV2Vault.BatchSwapStep[] memory swapSteps =\n                _createSwapSteps(poolInfo, takerTokenAmounts[i]);\n\n            try\n                // For sells we specify the takerToken which is what the vault will receive from the trade\n                vault.queryBatchSwap(IBalancerV2Vault.SwapKind.GIVEN_IN, swapSteps, swapAssets, swapFunds)\n            // amounts represent pool balance deltas from the swap (incoming balance, outgoing balance)\n            returns (int256[] memory amounts) {\n                // Outgoing balance is negative so we need to flip the sign\n                int256 amountOutFromPool = amounts[1] * -1;\n                if (amountOutFromPool <= 0) {\n                    break;\n                }\n                makerTokenAmounts[i] = uint256(amountOutFromPool);\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from Balancer V2.\n    /// @param poolInfo Struct with pool related data\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromBalancerV2(\n        BalancerV2PoolInfo memory poolInfo,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        IBalancerV2Vault vault = IBalancerV2Vault(poolInfo.vault);\n        IAsset[] memory swapAssets = new IAsset[](2);\n        swapAssets[0] = IAsset(takerToken);\n        swapAssets[1] = IAsset(makerToken);\n\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n        IBalancerV2Vault.FundManagement memory swapFunds =\n            _createSwapFunds();\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            IBalancerV2Vault.BatchSwapStep[] memory swapSteps =\n                _createSwapSteps(poolInfo, makerTokenAmounts[i]);\n\n            try\n                // For buys we specify the makerToken which is what taker will receive from the trade\n                vault.queryBatchSwap(IBalancerV2Vault.SwapKind.GIVEN_OUT, swapSteps, swapAssets, swapFunds)\n            returns (int256[] memory amounts) {\n                int256 amountIntoPool = amounts[0];\n                if (amountIntoPool <= 0) {\n                    break;\n                }\n                takerTokenAmounts[i] = uint256(amountIntoPool);\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    function _createSwapSteps(\n        BalancerV2PoolInfo memory poolInfo,\n        uint256 amount\n    ) private pure returns (IBalancerV2Vault.BatchSwapStep[] memory) {\n        IBalancerV2Vault.BatchSwapStep[] memory swapSteps =\n            new IBalancerV2Vault.BatchSwapStep[](1);\n        swapSteps[0] = IBalancerV2Vault.BatchSwapStep({\n            poolId: poolInfo.poolId,\n            assetInIndex: 0,\n            assetOutIndex: 1,\n            amount: amount,\n            userData: \"\"\n        });\n\n        return swapSteps;\n    }\n\n    function _createSwapFunds()\n        private\n        view\n        returns (IBalancerV2Vault.FundManagement memory)\n    {\n        return\n            IBalancerV2Vault.FundManagement({\n                sender: address(this),\n                fromInternalBalance: false,\n                recipient: payable(address(this)),\n                toInternalBalance: false\n            });\n    }\n}\n",
        "../src/SamplerUtils.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\n\n\ncontract SamplerUtils {\n\n    /// @dev Overridable way to get token decimals.\n    /// @param tokenAddress Address of the token.\n    /// @return decimals The decimal places for the token.\n    function _getTokenDecimals(address tokenAddress)\n        virtual\n        internal\n        view\n        returns (uint8 decimals)\n    {\n        return LibERC20TokenV06.compatDecimals(IERC20TokenV06(tokenAddress));\n    }\n\n    function _toSingleValueArray(uint256 v)\n        internal\n        pure\n        returns (uint256[] memory arr)\n    {\n        arr = new uint256[](1);\n        arr[0] = v;\n    }\n\n    /// @dev Assert that the tokens in a trade pair are valid.\n    /// @param makerToken Address of the maker token.\n    /// @param takerToken Address of the taker token.\n    function _assertValidPair(address makerToken, address takerToken)\n        internal\n        pure\n    {\n        require(makerToken != takerToken, \"ERC20BridgeSampler/INVALID_TOKEN_PAIR\");\n    }\n}\n",
        "@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol\";\nimport \"./IERC20TokenV06.sol\";\n\n\nlibrary LibERC20TokenV06 {\n    bytes constant private DECIMALS_CALL_DATA = hex\"313ce567\";\n\n    /// @dev Calls `IERC20TokenV06(token).approve()`.\n    ///      Reverts if the return data is invalid or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param spender The address that receives an allowance.\n    /// @param allowance The allowance to set.\n    function compatApprove(\n        IERC20TokenV06 token,\n        address spender,\n        uint256 allowance\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.approve.selector,\n            spender,\n            allowance\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).approve()` and sets the allowance to the\n    ///      maximum if the current approval is not already >= an amount.\n    ///      Reverts if the return data is invalid or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param spender The address that receives an allowance.\n    /// @param amount The minimum allowance needed.\n    function approveIfBelow(\n        IERC20TokenV06 token,\n        address spender,\n        uint256 amount\n    )\n        internal\n    {\n        if (token.allowance(address(this), spender) < amount) {\n            compatApprove(token, spender, uint256(-1));\n        }\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).transfer()`.\n    ///      Reverts if the return data is invalid or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param to The address that receives the tokens\n    /// @param amount Number of tokens to transfer.\n    function compatTransfer(\n        IERC20TokenV06 token,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.transfer.selector,\n            to,\n            amount\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).transferFrom()`.\n    ///      Reverts if the return data is invalid or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param from The owner of the tokens.\n    /// @param to The address that receives the tokens\n    /// @param amount Number of tokens to transfer.\n    function compatTransferFrom(\n        IERC20TokenV06 token,\n        address from,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.transferFrom.selector,\n            from,\n            to,\n            amount\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Retrieves the number of decimals for a token.\n    ///      Returns `18` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @return tokenDecimals The number of decimals places for the token.\n    function compatDecimals(IERC20TokenV06 token)\n        internal\n        view\n        returns (uint8 tokenDecimals)\n    {\n        tokenDecimals = 18;\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(DECIMALS_CALL_DATA);\n        if (didSucceed && resultData.length >= 32) {\n            tokenDecimals = uint8(LibBytesV06.readUint256(resultData, 0));\n        }\n    }\n\n    /// @dev Retrieves the allowance for a token, owner, and spender.\n    ///      Returns `0` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @param owner The owner of the tokens.\n    /// @param spender The address the spender.\n    /// @return allowance_ The allowance for a token, owner, and spender.\n    function compatAllowance(IERC20TokenV06 token, address owner, address spender)\n        internal\n        view\n        returns (uint256 allowance_)\n    {\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(\n            abi.encodeWithSelector(\n                token.allowance.selector,\n                owner,\n                spender\n            )\n        );\n        if (didSucceed && resultData.length >= 32) {\n            allowance_ = LibBytesV06.readUint256(resultData, 0);\n        }\n    }\n\n    /// @dev Retrieves the balance for a token owner.\n    ///      Returns `0` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @param owner The owner of the tokens.\n    /// @return balance The token balance of an owner.\n    function compatBalanceOf(IERC20TokenV06 token, address owner)\n        internal\n        view\n        returns (uint256 balance)\n    {\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(\n            abi.encodeWithSelector(\n                token.balanceOf.selector,\n                owner\n            )\n        );\n        if (didSucceed && resultData.length >= 32) {\n            balance = LibBytesV06.readUint256(resultData, 0);\n        }\n    }\n\n    /// @dev Executes a call on address `target` with calldata `callData`\n    ///      and asserts that either nothing was returned or a single boolean\n    ///      was returned equal to `true`.\n    /// @param target The call target.\n    /// @param callData The abi-encoded call data.\n    function _callWithOptionalBooleanResult(\n        address target,\n        bytes memory callData\n    )\n        private\n    {\n        (bool didSucceed, bytes memory resultData) = target.call(callData);\n        // Revert if the call reverted.\n        if (!didSucceed) {\n            LibRichErrorsV06.rrevert(resultData);\n        }\n        // If we get back 0 returndata, this may be a non-standard ERC-20 that\n        // does not return a boolean. Check that it at least contains code.\n        if (resultData.length == 0) {\n            uint256 size;\n            assembly { size := extcodesize(target) }\n            require(size > 0, \"invalid token address, contains no code\");\n            return;\n        }\n        // If we get back at least 32 bytes, we know the target address\n        // contains code, and we assume it is a token that returned a boolean\n        // success value, which must be true.\n        if (resultData.length >= 32) {\n            uint256 result = LibBytesV06.readUint256(resultData, 0);\n            if (result == 1) {\n                return;\n            } else {\n                LibRichErrorsV06.rrevert(resultData);\n            }\n        }\n        // If 0 < returndatasize < 32, the target is a contract, but not a\n        // valid token.\n        LibRichErrorsV06.rrevert(resultData);\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibRichErrorsV06 {\n\n    // bytes4(keccak256(\"Error(string)\"))\n    bytes4 internal constant STANDARD_ERROR_SELECTOR = 0x08c379a0;\n\n    // solhint-disable func-name-mixedcase\n    /// @dev ABI encode a standard, string revert error payload.\n    ///      This is the same payload that would be included by a `revert(string)`\n    ///      solidity statement. It has the function signature `Error(string)`.\n    /// @param message The error string.\n    /// @return The ABI encoded error.\n    function StandardError(string memory message)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            STANDARD_ERROR_SELECTOR,\n            bytes(message)\n        );\n    }\n    // solhint-enable func-name-mixedcase\n\n    /// @dev Reverts an encoded rich revert reason `errorData`.\n    /// @param errorData ABI encoded error data.\n    function rrevert(bytes memory errorData)\n        internal\n        pure\n    {\n        assembly {\n            revert(add(errorData, 0x20), mload(errorData))\n        }\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./errors/LibBytesRichErrorsV06.sol\";\nimport \"./errors/LibRichErrorsV06.sol\";\n\n\nlibrary LibBytesV06 {\n\n    using LibBytesV06 for bytes;\n\n    /// @dev Gets the memory address for a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of byte array. This\n    ///         points to the header of the byte array which contains\n    ///         the length.\n    function rawAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := input\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Gets the memory address for the contents of a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of the contents of the byte array.\n    function contentAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := add(input, 32)\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Copies `length` bytes from memory location `source` to `dest`.\n    /// @param dest memory address to copy bytes to.\n    /// @param source memory address to copy bytes from.\n    /// @param length number of bytes to copy.\n    function memCopy(\n        uint256 dest,\n        uint256 source,\n        uint256 length\n    )\n        internal\n        pure\n    {\n        if (length < 32) {\n            // Handle a partial word by reading destination and masking\n            // off the bits we are interested in.\n            // This correctly handles overlap, zero lengths and source == dest\n            assembly {\n                let mask := sub(exp(256, sub(32, length)), 1)\n                let s := and(mload(source), not(mask))\n                let d := and(mload(dest), mask)\n                mstore(dest, or(s, d))\n            }\n        } else {\n            // Skip the O(length) loop when source == dest.\n            if (source == dest) {\n                return;\n            }\n\n            // For large copies we copy whole words at a time. The final\n            // word is aligned to the end of the range (instead of after the\n            // previous) to handle partial words. So a copy will look like this:\n            //\n            //  ####\n            //      ####\n            //          ####\n            //            ####\n            //\n            // We handle overlap in the source and destination range by\n            // changing the copying direction. This prevents us from\n            // overwriting parts of source that we still need to copy.\n            //\n            // This correctly handles source == dest\n            //\n            if (source > dest) {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because it\n                    // is easier to compare with in the loop, and these\n                    // are also the addresses we need for copying the\n                    // last bytes.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the last 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the last bytes in\n                    // source already due to overlap.\n                    let last := mload(sEnd)\n\n                    // Copy whole words front to back\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} lt(source, sEnd) {} {\n                        mstore(dest, mload(source))\n                        source := add(source, 32)\n                        dest := add(dest, 32)\n                    }\n\n                    // Write the last 32 bytes\n                    mstore(dEnd, last)\n                }\n            } else {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because those\n                    // are the starting points when copying a word at the end.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the first 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the first bytes in\n                    // source already due to overlap.\n                    let first := mload(source)\n\n                    // Copy whole words back to front\n                    // We use a signed comparisson here to allow dEnd to become\n                    // negative (happens when source and dest < 32). Valid\n                    // addresses in local memory will never be larger than\n                    // 2**255, so they can be safely re-interpreted as signed.\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} slt(dest, dEnd) {} {\n                        mstore(dEnd, mload(sEnd))\n                        sEnd := sub(sEnd, 32)\n                        dEnd := sub(dEnd, 32)\n                    }\n\n                    // Write the first 32 bytes\n                    mstore(dest, first)\n                }\n            }\n        }\n    }\n\n    /// @dev Returns a slices from a byte array.\n    /// @param b The byte array to take a slice from.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function slice(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure and copy contents\n        result = new bytes(to - from);\n        memCopy(\n            result.contentAddress(),\n            b.contentAddress() + from,\n            result.length\n        );\n        return result;\n    }\n\n    /// @dev Returns a slice from a byte array without preserving the input.\n    ///      When `from == 0`, the original array will match the slice.\n    ///      In other cases its state will be corrupted.\n    /// @param b The byte array to take a slice from. Will be destroyed in the process.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function sliceDestructive(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure around [from, to) in-place.\n        assembly {\n            result := add(b, from)\n            mstore(result, sub(to, from))\n        }\n        return result;\n    }\n\n    /// @dev Pops the last byte off of a byte array by modifying its length.\n    /// @param b Byte array that will be modified.\n    /// @return result The byte that was popped off.\n    function popLastByte(bytes memory b)\n        internal\n        pure\n        returns (bytes1 result)\n    {\n        if (b.length == 0) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanZeroRequired,\n                b.length,\n                0\n            ));\n        }\n\n        // Store last byte.\n        result = b[b.length - 1];\n\n        assembly {\n            // Decrement length of byte array.\n            let newLen := sub(mload(b), 1)\n            mstore(b, newLen)\n        }\n        return result;\n    }\n\n    /// @dev Tests equality of two byte arrays.\n    /// @param lhs First byte array to compare.\n    /// @param rhs Second byte array to compare.\n    /// @return equal True if arrays are the same. False otherwise.\n    function equals(\n        bytes memory lhs,\n        bytes memory rhs\n    )\n        internal\n        pure\n        returns (bool equal)\n    {\n        // Keccak gas cost is 30 + numWords * 6. This is a cheap way to compare.\n        // We early exit on unequal lengths, but keccak would also correctly\n        // handle this.\n        return lhs.length == rhs.length && keccak256(lhs) == keccak256(rhs);\n    }\n\n    /// @dev Reads an address from a position in a byte array.\n    /// @param b Byte array containing an address.\n    /// @param index Index in byte array of address.\n    /// @return result address from byte array.\n    function readAddress(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (address result)\n    {\n        if (b.length < index + 20) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Read address from array memory\n        assembly {\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 20-byte mask to obtain address\n            result := and(mload(add(b, index)), 0xffffffffffffffffffffffffffffffffffffffff)\n        }\n        return result;\n    }\n\n    /// @dev Writes an address into a specific position in a byte array.\n    /// @param b Byte array to insert address into.\n    /// @param index Index in byte array of address.\n    /// @param input Address to put into byte array.\n    function writeAddress(\n        bytes memory b,\n        uint256 index,\n        address input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 20) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Store address into array memory\n        assembly {\n            // The address occupies 20 bytes and mstore stores 32 bytes.\n            // First fetch the 32-byte word where we'll be storing the address, then\n            // apply a mask so we have only the bytes in the word that the address will not occupy.\n            // Then combine these bytes with the address and store the 32 bytes back to memory with mstore.\n\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 12-byte mask to obtain extra bytes occupying word of memory where we'll store the address\n            let neighbors := and(\n                mload(add(b, index)),\n                0xffffffffffffffffffffffff0000000000000000000000000000000000000000\n            )\n\n            // Make sure input address is clean.\n            // (Solidity does not guarantee this)\n            input := and(input, 0xffffffffffffffffffffffffffffffffffffffff)\n\n            // Store the neighbors and address into memory\n            mstore(add(b, index), xor(input, neighbors))\n        }\n    }\n\n    /// @dev Reads a bytes32 value from a position in a byte array.\n    /// @param b Byte array containing a bytes32 value.\n    /// @param index Index in byte array of bytes32 value.\n    /// @return result bytes32 value from byte array.\n    function readBytes32(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        if (b.length < index + 32) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            result := mload(add(b, index))\n        }\n        return result;\n    }\n\n    /// @dev Writes a bytes32 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input bytes32 to put into byte array.\n    function writeBytes32(\n        bytes memory b,\n        uint256 index,\n        bytes32 input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 32) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            mstore(add(b, index), input)\n        }\n    }\n\n    /// @dev Reads a uint256 value from a position in a byte array.\n    /// @param b Byte array containing a uint256 value.\n    /// @param index Index in byte array of uint256 value.\n    /// @return result uint256 value from byte array.\n    function readUint256(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (uint256 result)\n    {\n        result = uint256(readBytes32(b, index));\n        return result;\n    }\n\n    /// @dev Writes a uint256 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input uint256 to put into byte array.\n    function writeUint256(\n        bytes memory b,\n        uint256 index,\n        uint256 input\n    )\n        internal\n        pure\n    {\n        writeBytes32(b, index, bytes32(input));\n    }\n\n    /// @dev Reads an unpadded bytes4 value from a position in a byte array.\n    /// @param b Byte array containing a bytes4 value.\n    /// @param index Index in byte array of bytes4 value.\n    /// @return result bytes4 value from byte array.\n    function readBytes4(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes4 result)\n    {\n        if (b.length < index + 4) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsFourRequired,\n                b.length,\n                index + 4\n            ));\n        }\n\n        // Arrays are prefixed by a 32 byte length field\n        index += 32;\n\n        // Read the bytes4 from array memory\n        assembly {\n            result := mload(add(b, index))\n            // Solidity does not require us to clean the trailing bytes.\n            // We do it anyway\n            result := and(result, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)\n        }\n        return result;\n    }\n\n    /// @dev Writes a new length to a byte array.\n    ///      Decreasing length will lead to removing the corresponding lower order bytes from the byte array.\n    ///      Increasing length may lead to appending adjacent in-memory bytes to the end of the byte array.\n    /// @param b Bytes array to write new length to.\n    /// @param length New length of byte array.\n    function writeLength(bytes memory b, uint256 length)\n        internal\n        pure\n    {\n        assembly {\n            mstore(b, length)\n        }\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/errors/LibBytesRichErrorsV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibBytesRichErrorsV06 {\n\n    enum InvalidByteOperationErrorCodes {\n        FromLessThanOrEqualsToRequired,\n        ToLessThanOrEqualsLengthRequired,\n        LengthGreaterThanZeroRequired,\n        LengthGreaterThanOrEqualsFourRequired,\n        LengthGreaterThanOrEqualsTwentyRequired,\n        LengthGreaterThanOrEqualsThirtyTwoRequired,\n        LengthGreaterThanOrEqualsNestedBytesLengthRequired,\n        DestinationLengthGreaterThanOrEqualSourceLengthRequired\n    }\n\n    // bytes4(keccak256(\"InvalidByteOperationError(uint8,uint256,uint256)\"))\n    bytes4 internal constant INVALID_BYTE_OPERATION_ERROR_SELECTOR =\n        0x28006595;\n\n    // solhint-disable func-name-mixedcase\n    function InvalidByteOperationError(\n        InvalidByteOperationErrorCodes errorCode,\n        uint256 offset,\n        uint256 required\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            INVALID_BYTE_OPERATION_ERROR_SELECTOR,\n            errorCode,\n            offset,\n            required\n        );\n    }\n}\n",
        "@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\ninterface IERC20TokenV06 {\n\n    // solhint-disable no-simple-event-func-name\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 value\n    );\n\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n\n    /// @dev send `value` token to `to` from `msg.sender`\n    /// @param to The address of the recipient\n    /// @param value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transfer(address to, uint256 value)\n        external\n        returns (bool);\n\n    /// @dev send `value` token to `to` from `from` on the condition it is approved by `from`\n    /// @param from The address of the sender\n    /// @param to The address of the recipient\n    /// @param value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    )\n        external\n        returns (bool);\n\n    /// @dev `msg.sender` approves `spender` to spend `value` tokens\n    /// @param spender The address of the account able to transfer the tokens\n    /// @param value The amount of wei to be approved for transfer\n    /// @return Always true if the call has enough gas to complete execution\n    function approve(address spender, uint256 value)\n        external\n        returns (bool);\n\n    /// @dev Query total supply of token\n    /// @return Total supply of token\n    function totalSupply()\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the balance of `owner`.\n    /// @param owner The address from which the balance will be retrieved\n    /// @return Balance of owner\n    function balanceOf(address owner)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the allowance for `spender` to spend from `owner`.\n    /// @param owner The address of the account owning tokens\n    /// @param spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the number of decimals this token has.\n    function decimals()\n        external\n        view\n        returns (uint8);\n}\n",
        "../src/BancorSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IBancor.sol\";\n\ncontract CompilerHack {}\n\ncontract BancorSampler is CompilerHack {\n\n    /// @dev Base gas limit for Bancor calls.\n    uint256 constant private BANCOR_CALL_GAS = 300e3; // 300k\n\n    struct BancorSamplerOpts {\n        IBancorRegistry registry;\n        address[][] paths;\n    }\n\n    /// @dev Sample sell quotes from Bancor.\n    /// @param opts BancorSamplerOpts The Bancor registry contract address and paths\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return bancorNetwork the Bancor Network address\n    /// @return path the selected conversion path from bancor\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromBancor(\n        BancorSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (address bancorNetwork, address[] memory path, uint256[] memory makerTokenAmounts)\n    {\n        if (opts.paths.length == 0) {\n            return (bancorNetwork, path, makerTokenAmounts);\n        }\n        (bancorNetwork, path) = _findBestPath(opts, takerToken, makerToken, takerTokenAmounts);\n        makerTokenAmounts = new uint256[](takerTokenAmounts.length);\n\n        for (uint256 i = 0; i < makerTokenAmounts.length; i++) {\n            try\n                IBancorNetwork(bancorNetwork)\n                    .rateByPath\n                        {gas: BANCOR_CALL_GAS}\n                        (path, takerTokenAmounts[i])\n                returns (uint256 amount)\n            {\n                makerTokenAmounts[i] = amount;\n                // Break early if there are 0 amounts\n                if (makerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n        return (bancorNetwork, path, makerTokenAmounts);\n    }\n\n    /// @dev Sample buy quotes from Bancor. Unimplemented\n    /// @param opts BancorSamplerOpts The Bancor registry contract address and paths\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return bancorNetwork the Bancor Network address\n    /// @return path the selected conversion path from bancor\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromBancor(\n        BancorSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (address bancorNetwork, address[] memory path, uint256[] memory takerTokenAmounts)\n    {\n    }\n\n    function _findBestPath(\n        BancorSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        internal\n        view\n        returns (address bancorNetwork, address[] memory path)\n    {\n        bancorNetwork = opts.registry.getAddress(opts.registry.BANCOR_NETWORK());\n        if (opts.paths.length == 0) {\n            return (bancorNetwork, path);\n        }\n        uint256 maxBoughtAmount = 0;\n        // Find the best path by selling the largest taker amount\n        for (uint256 i = 0; i < opts.paths.length; i++) {\n            if (opts.paths[i].length < 2) {\n                continue;\n            }\n\n            try\n                IBancorNetwork(bancorNetwork)\n                    .rateByPath\n                        {gas: BANCOR_CALL_GAS}\n                        (opts.paths[i], takerTokenAmounts[takerTokenAmounts.length-1])\n                returns (uint256 amount)\n            {\n                if (amount > maxBoughtAmount) {\n                    maxBoughtAmount = amount;\n                    path = opts.paths[i];\n                }\n            } catch {\n                // Swallow failures, leaving all results as zero.\n                continue;\n            }\n        }\n    }\n}\n",
        "../src/interfaces/IBancor.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface IBancor {}\n\ninterface IBancorNetwork {\n  function conversionPath(address _sourceToken, address _targetToken) external view returns (address[] memory);\n  function rateByPath(address[] memory _path, uint256 _amount) external view returns (uint256);\n}\n\ninterface IBancorRegistry {\n    function getAddress(bytes32 _contractName) external view returns (address);\n    function BANCOR_NETWORK() external view returns (bytes32);\n}\n",
        "../src/CompoundSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./SamplerUtils.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\n\n// Minimal CToken interface\ninterface ICToken {\n    function mint(uint mintAmount) external returns (uint);\n    function redeem(uint redeemTokens) external returns (uint);\n    function redeemUnderlying(uint redeemAmount) external returns (uint);\n    function exchangeRateStored() external view returns (uint);\n    function decimals() external view returns (uint8);\n}\n\ncontract CompoundSampler is SamplerUtils {\n    uint256 constant private EXCHANGE_RATE_SCALE = 1e10;\n\n    function sampleSellsFromCompound(\n        ICToken cToken,\n        IERC20TokenV06 takerToken,\n        IERC20TokenV06 makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        // Exchange rate is scaled by 1 * 10^(18 - 8 + Underlying Token Decimals\n        uint256 exchangeRate = cToken.exchangeRateStored();\n        uint256 cTokenDecimals = uint256(cToken.decimals());\n\n        if (address(makerToken) == address(cToken)) {\n            // mint\n            for (uint256 i = 0; i < numSamples; i++) {\n                makerTokenAmounts[i] = (takerTokenAmounts[i] * EXCHANGE_RATE_SCALE * 10 ** cTokenDecimals) / exchangeRate;\n            }\n\n        } else if (address(takerToken) == address(cToken)) {\n            // redeem\n            for (uint256 i = 0; i < numSamples; i++) {\n                makerTokenAmounts[i] = (takerTokenAmounts[i] * exchangeRate) / (EXCHANGE_RATE_SCALE * 10 ** cTokenDecimals);\n            }\n        }\n    }\n\n    function sampleBuysFromCompound(\n        ICToken cToken,\n        IERC20TokenV06 takerToken,\n        IERC20TokenV06 makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n        // Exchange rate is scaled by 1 * 10^(18 - 8 + Underlying Token Decimals\n        uint256 exchangeRate = cToken.exchangeRateStored();\n        uint256 cTokenDecimals = uint256(cToken.decimals());\n\n        if (address(makerToken) == address(cToken)) {\n            // mint\n            for (uint256 i = 0; i < numSamples; i++) {\n                takerTokenAmounts[i] = makerTokenAmounts[i] * exchangeRate / (EXCHANGE_RATE_SCALE * 10 ** cTokenDecimals);\n            }\n        } else if (address(takerToken) == address(cToken)) {\n            // redeem\n            for (uint256 i = 0; i < numSamples; i++) {\n                takerTokenAmounts[i] = (makerTokenAmounts[i] * EXCHANGE_RATE_SCALE * 10 ** cTokenDecimals)/exchangeRate;\n            }\n        }\n    }\n}\n",
        "../src/CurveSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/ICurve.sol\";\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\n\n\ncontract CurveSampler is\n    SamplerUtils,\n    ApproximateBuys\n{\n    /// @dev Information for sampling from curve sources.\n    struct CurveInfo {\n        address poolAddress;\n        bytes4 sellQuoteFunctionSelector;\n        bytes4 buyQuoteFunctionSelector;\n    }\n\n    /// @dev Base gas limit for Curve calls. Some Curves have multiple tokens\n    ///      So a reasonable ceil is 150k per token. Biggest Curve has 4 tokens.\n    uint256 constant private CURVE_CALL_GAS = 2000e3; // Was 600k for Curve but SnowSwap is using 1500k+\n\n    /// @dev Sample sell quotes from Curve.\n    /// @param curveInfo Curve information specific to this token pair.\n    /// @param fromTokenIdx Index of the taker token (what to sell).\n    /// @param toTokenIdx Index of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromCurve(\n        CurveInfo memory curveInfo,\n        int128 fromTokenIdx,\n        int128 toTokenIdx,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            (bool didSucceed, bytes memory resultData) =\n                curveInfo.poolAddress.staticcall.gas(CURVE_CALL_GAS)(\n                    abi.encodeWithSelector(\n                        curveInfo.sellQuoteFunctionSelector,\n                        fromTokenIdx,\n                        toTokenIdx,\n                        takerTokenAmounts[i]\n                    ));\n            uint256 buyAmount = 0;\n            if (didSucceed) {\n                buyAmount = abi.decode(resultData, (uint256));\n            }\n            makerTokenAmounts[i] = buyAmount;\n            // Break early if there are 0 amounts\n            if (makerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from Curve.\n    /// @param curveInfo Curve information specific to this token pair.\n    /// @param fromTokenIdx Index of the taker token (what to sell).\n    /// @param toTokenIdx Index of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromCurve(\n        CurveInfo memory curveInfo,\n        int128 fromTokenIdx,\n        int128 toTokenIdx,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        if (curveInfo.buyQuoteFunctionSelector == bytes4(0)) {\n            // Buys not supported on this curve, so approximate it.\n            return _sampleApproximateBuys(\n                ApproximateBuyQuoteOpts({\n                    makerTokenData: abi.encode(toTokenIdx, curveInfo),\n                    takerTokenData: abi.encode(fromTokenIdx, curveInfo),\n                    getSellQuoteCallback: _sampleSellForApproximateBuyFromCurve\n                }),\n                makerTokenAmounts\n            );\n        }\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            (bool didSucceed, bytes memory resultData) =\n                curveInfo.poolAddress.staticcall.gas(CURVE_CALL_GAS)(\n                    abi.encodeWithSelector(\n                        curveInfo.buyQuoteFunctionSelector,\n                        fromTokenIdx,\n                        toTokenIdx,\n                        makerTokenAmounts[i]\n                    ));\n            uint256 sellAmount = 0;\n            if (didSucceed) {\n                sellAmount = abi.decode(resultData, (uint256));\n            }\n            takerTokenAmounts[i] = sellAmount;\n            // Break early if there are 0 amounts\n            if (takerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n    }\n\n    function _sampleSellForApproximateBuyFromCurve(\n        bytes memory takerTokenData,\n        bytes memory makerTokenData,\n        uint256 sellAmount\n    )\n        private\n        view\n        returns (uint256 buyAmount)\n    {\n        (int128 takerTokenIdx, CurveInfo memory curveInfo) =\n            abi.decode(takerTokenData, (int128, CurveInfo));\n        (int128 makerTokenIdx) =\n            abi.decode(makerTokenData, (int128));\n        (bool success, bytes memory resultData) =\n            address(this).staticcall(abi.encodeWithSelector(\n                this.sampleSellsFromCurve.selector,\n                curveInfo,\n                takerTokenIdx,\n                makerTokenIdx,\n                _toSingleValueArray(sellAmount)\n            ));\n        if (!success) {\n            return 0;\n        }\n        // solhint-disable-next-line indent\n        return abi.decode(resultData, (uint256[]))[0];\n    }\n}\n",
        "../src/interfaces/ICurve.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\n// solhint-disable func-name-mixedcase\ninterface ICurve {\n\n    /// @dev Sell `sellAmount` of `fromToken` token and receive `toToken` token.\n    ///      This function exists on later versions of Curve (USDC/DAI/USDT)\n    /// @param i The token index being sold.\n    /// @param j The token index being bought.\n    /// @param sellAmount The amount of token being bought.\n    /// @param minBuyAmount The minimum buy amount of the token being bought.\n    function exchange_underlying(\n        int128 i,\n        int128 j,\n        uint256 sellAmount,\n        uint256 minBuyAmount\n    )\n        external;\n\n    /// @dev Get the amount of `toToken` by selling `sellAmount` of `fromToken`\n    /// @param i The token index being sold.\n    /// @param j The token index being bought.\n    /// @param sellAmount The amount of token being bought.\n    function get_dy_underlying(\n        int128 i,\n        int128 j,\n        uint256 sellAmount\n    )\n        external\n        returns (uint256 dy);\n\n    /// @dev Get the amount of `fromToken` by buying `buyAmount` of `toToken`\n    ///      This function exists on later versions of Curve (USDC/DAI/USDT)\n    /// @param i The token index being sold.\n    /// @param j The token index being bought.\n    /// @param buyAmount The amount of token being bought.\n    function get_dx_underlying(\n        int128 i,\n        int128 j,\n        uint256 buyAmount\n    )\n        external\n        returns (uint256 dx);\n\n    /// @dev Get the underlying token address from the token index\n    /// @param i The token index.\n    function underlying_coins(\n        int128 i\n    )\n        external\n        returns (address tokenAddress);\n}\n",
        "../src/ApproximateBuys.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/LibMathV06.sol\";\n\n\ncontract ApproximateBuys {\n\n    /// @dev Information computing buy quotes for sources that do not have native\n    ///      buy quote support.\n    struct ApproximateBuyQuoteOpts {\n        // Arbitrary maker token data to pass to `getSellQuoteCallback`.\n        bytes makerTokenData;\n        // Arbitrary taker token data to pass to `getSellQuoteCallback`.\n        bytes takerTokenData;\n        // Callback to retrieve a sell quote.\n        function (bytes memory, bytes memory, uint256)\n            internal\n            view\n            returns (uint256) getSellQuoteCallback;\n    }\n\n    uint256 private constant ONE_HUNDED_PERCENT_BPS = 1e4;\n    /// @dev Maximum approximate (positive) error rate when approximating a buy quote.\n    uint256 private constant APPROXIMATE_BUY_TARGET_EPSILON_BPS = 0.0005e4;\n    /// @dev Maximum iterations to perform when approximating a buy quote.\n    uint256 private constant APPROXIMATE_BUY_MAX_ITERATIONS = 5;\n\n    function _sampleApproximateBuys(\n        ApproximateBuyQuoteOpts memory opts,\n        uint256[] memory makerTokenAmounts\n    )\n        internal\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        takerTokenAmounts = new uint256[](makerTokenAmounts.length);\n        if (makerTokenAmounts.length == 0) {\n            return takerTokenAmounts;\n        }\n\n        uint256 sellAmount = opts.getSellQuoteCallback(\n            opts.makerTokenData,\n            opts.takerTokenData,\n            makerTokenAmounts[0]\n        );\n        if (sellAmount == 0) {\n            return takerTokenAmounts;\n        }\n\n        uint256 buyAmount = opts.getSellQuoteCallback(\n            opts.takerTokenData,\n            opts.makerTokenData,\n            sellAmount\n        );\n        if (buyAmount == 0) {\n            return takerTokenAmounts;\n        }\n\n        for (uint256 i = 0; i < makerTokenAmounts.length; i++) {\n            uint256 eps = 0;\n            for (uint256 iter = 0; iter < APPROXIMATE_BUY_MAX_ITERATIONS; iter++) {\n                // adjustedSellAmount = previousSellAmount * (target/actual) * JUMP_MULTIPLIER\n                sellAmount = _safeGetPartialAmountCeil(\n                    makerTokenAmounts[i],\n                    buyAmount,\n                    sellAmount\n                );\n                if (sellAmount == 0) {\n                    break;\n                }\n                sellAmount = _safeGetPartialAmountCeil(\n                    (ONE_HUNDED_PERCENT_BPS + APPROXIMATE_BUY_TARGET_EPSILON_BPS),\n                    ONE_HUNDED_PERCENT_BPS,\n                    sellAmount\n                );\n                if (sellAmount == 0) {\n                    break;\n                }\n                uint256 _buyAmount = opts.getSellQuoteCallback(\n                    opts.takerTokenData,\n                    opts.makerTokenData,\n                    sellAmount\n                );\n                if (_buyAmount == 0) {\n                    break;\n                }\n                // We re-use buyAmount next iteration, only assign if it is\n                // non zero\n                buyAmount = _buyAmount;\n                // If we've reached our goal, exit early\n                if (buyAmount >= makerTokenAmounts[i]) {\n                    eps =\n                        (buyAmount - makerTokenAmounts[i]) * ONE_HUNDED_PERCENT_BPS /\n                        makerTokenAmounts[i];\n                    if (eps <= APPROXIMATE_BUY_TARGET_EPSILON_BPS) {\n                        break;\n                    }\n                }\n            }\n            if (eps == 0 || eps > APPROXIMATE_BUY_TARGET_EPSILON_BPS) {\n                break;\n            }\n            // We do our best to close in on the requested amount, but we can either over buy or under buy and exit\n            // if we hit a max iteration limit\n            // We scale the sell amount to get the approximate target\n            takerTokenAmounts[i] = _safeGetPartialAmountCeil(\n                makerTokenAmounts[i],\n                buyAmount,\n                sellAmount\n            );\n        }\n    }\n\n    function _safeGetPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        view\n        returns (uint256 partialAmount)\n    {\n        if (numerator == 0 || target == 0 || denominator == 0) return 0;\n        uint256 c = numerator * target;\n        if (c / numerator != target) return 0;\n        return (c + (denominator - 1)) / denominator;\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/LibMathV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./LibSafeMathV06.sol\";\nimport \"./errors/LibRichErrorsV06.sol\";\nimport \"./errors/LibMathRichErrorsV06.sol\";\n\n\nlibrary LibMathV06 {\n\n    using LibSafeMathV06 for uint256;\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    ///      Reverts if rounding error is >= 0.1%\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded down.\n    function safeGetPartialAmountFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        if (isRoundingErrorFloor(\n                numerator,\n                denominator,\n                target\n        )) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.RoundingError(\n                numerator,\n                denominator,\n                target\n            ));\n        }\n\n        partialAmount = numerator.safeMul(target).safeDiv(denominator);\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    ///      Reverts if rounding error is >= 0.1%\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded up.\n    function safeGetPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        if (isRoundingErrorCeil(\n                numerator,\n                denominator,\n                target\n        )) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.RoundingError(\n                numerator,\n                denominator,\n                target\n            ));\n        }\n\n        // safeDiv computes `floor(a / b)`. We use the identity (a, b integer):\n        //       ceil(a / b) = floor((a + b - 1) / b)\n        // To implement `ceil(a / b)` using safeDiv.\n        partialAmount = numerator.safeMul(target)\n            .safeAdd(denominator.safeSub(1))\n            .safeDiv(denominator);\n\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded down.\n    function getPartialAmountFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        partialAmount = numerator.safeMul(target).safeDiv(denominator);\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded up.\n    function getPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        // safeDiv computes `floor(a / b)`. We use the identity (a, b integer):\n        //       ceil(a / b) = floor((a + b - 1) / b)\n        // To implement `ceil(a / b)` using safeDiv.\n        partialAmount = numerator.safeMul(target)\n            .safeAdd(denominator.safeSub(1))\n            .safeDiv(denominator);\n\n        return partialAmount;\n    }\n\n    /// @dev Checks if rounding error >= 0.1% when rounding down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to multiply with numerator/denominator.\n    /// @return isError Rounding error is present.\n    function isRoundingErrorFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bool isError)\n    {\n        if (denominator == 0) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.DivisionByZeroError());\n        }\n\n        // The absolute rounding error is the difference between the rounded\n        // value and the ideal value. The relative rounding error is the\n        // absolute rounding error divided by the absolute value of the\n        // ideal value. This is undefined when the ideal value is zero.\n        //\n        // The ideal value is `numerator * target / denominator`.\n        // Let's call `numerator * target % denominator` the remainder.\n        // The absolute error is `remainder / denominator`.\n        //\n        // When the ideal value is zero, we require the absolute error to\n        // be zero. Fortunately, this is always the case. The ideal value is\n        // zero iff `numerator == 0` and/or `target == 0`. In this case the\n        // remainder and absolute error are also zero.\n        if (target == 0 || numerator == 0) {\n            return false;\n        }\n\n        // Otherwise, we want the relative rounding error to be strictly\n        // less than 0.1%.\n        // The relative error is `remainder / (numerator * target)`.\n        // We want the relative error less than 1 / 1000:\n        //        remainder / (numerator * denominator)  <  1 / 1000\n        // or equivalently:\n        //        1000 * remainder  <  numerator * target\n        // so we have a rounding error iff:\n        //        1000 * remainder  >=  numerator * target\n        uint256 remainder = mulmod(\n            target,\n            numerator,\n            denominator\n        );\n        isError = remainder.safeMul(1000) >= numerator.safeMul(target);\n        return isError;\n    }\n\n    /// @dev Checks if rounding error >= 0.1% when rounding up.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to multiply with numerator/denominator.\n    /// @return isError Rounding error is present.\n    function isRoundingErrorCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bool isError)\n    {\n        if (denominator == 0) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.DivisionByZeroError());\n        }\n\n        // See the comments in `isRoundingError`.\n        if (target == 0 || numerator == 0) {\n            // When either is zero, the ideal value and rounded value are zero\n            // and there is no rounding error. (Although the relative error\n            // is undefined.)\n            return false;\n        }\n        // Compute remainder as before\n        uint256 remainder = mulmod(\n            target,\n            numerator,\n            denominator\n        );\n        remainder = denominator.safeSub(remainder) % denominator;\n        isError = remainder.safeMul(1000) >= numerator.safeMul(target);\n        return isError;\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./errors/LibRichErrorsV06.sol\";\nimport \"./errors/LibSafeMathRichErrorsV06.sol\";\n\n\nlibrary LibSafeMathV06 {\n\n    function safeMul(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        if (c / a != b) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.MULTIPLICATION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function safeDiv(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b == 0) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.DIVISION_BY_ZERO,\n                a,\n                b\n            ));\n        }\n        uint256 c = a / b;\n        return c;\n    }\n\n    function safeSub(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b > a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.SUBTRACTION_UNDERFLOW,\n                a,\n                b\n            ));\n        }\n        return a - b;\n    }\n\n    function safeAdd(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint256 c = a + b;\n        if (c < a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.ADDITION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function max256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a < b ? a : b;\n    }\n\n    function safeMul128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (a == 0) {\n            return 0;\n        }\n        uint128 c = a * b;\n        if (c / a != b) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.MULTIPLICATION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function safeDiv128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (b == 0) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.DIVISION_BY_ZERO,\n                a,\n                b\n            ));\n        }\n        uint128 c = a / b;\n        return c;\n    }\n\n    function safeSub128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (b > a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.SUBTRACTION_UNDERFLOW,\n                a,\n                b\n            ));\n        }\n        return a - b;\n    }\n\n    function safeAdd128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        uint128 c = a + b;\n        if (c < a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.ADDITION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function max128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        return a < b ? a : b;\n    }\n\n    function safeDowncastToUint128(uint256 a)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (a > type(uint128).max) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256DowncastError(\n                LibSafeMathRichErrorsV06.DowncastErrorCodes.VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT128,\n                a\n            ));\n        }\n        return uint128(a);\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/errors/LibSafeMathRichErrorsV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibSafeMathRichErrorsV06 {\n\n    // bytes4(keccak256(\"Uint256BinOpError(uint8,uint256,uint256)\"))\n    bytes4 internal constant UINT256_BINOP_ERROR_SELECTOR =\n        0xe946c1bb;\n\n    // bytes4(keccak256(\"Uint256DowncastError(uint8,uint256)\"))\n    bytes4 internal constant UINT256_DOWNCAST_ERROR_SELECTOR =\n        0xc996af7b;\n\n    enum BinOpErrorCodes {\n        ADDITION_OVERFLOW,\n        MULTIPLICATION_OVERFLOW,\n        SUBTRACTION_UNDERFLOW,\n        DIVISION_BY_ZERO\n    }\n\n    enum DowncastErrorCodes {\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT32,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT64,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT96,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT128\n    }\n\n    // solhint-disable func-name-mixedcase\n    function Uint256BinOpError(\n        BinOpErrorCodes errorCode,\n        uint256 a,\n        uint256 b\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            UINT256_BINOP_ERROR_SELECTOR,\n            errorCode,\n            a,\n            b\n        );\n    }\n\n    function Uint256DowncastError(\n        DowncastErrorCodes errorCode,\n        uint256 a\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            UINT256_DOWNCAST_ERROR_SELECTOR,\n            errorCode,\n            a\n        );\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/errors/LibMathRichErrorsV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibMathRichErrorsV06 {\n\n    // bytes4(keccak256(\"DivisionByZeroError()\"))\n    bytes internal constant DIVISION_BY_ZERO_ERROR =\n        hex\"a791837c\";\n\n    // bytes4(keccak256(\"RoundingError(uint256,uint256,uint256)\"))\n    bytes4 internal constant ROUNDING_ERROR_SELECTOR =\n        0x339f3de2;\n\n    // solhint-disable func-name-mixedcase\n    function DivisionByZeroError()\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return DIVISION_BY_ZERO_ERROR;\n    }\n\n    function RoundingError(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            ROUNDING_ERROR_SELECTOR,\n            numerator,\n            denominator,\n            target\n        );\n    }\n}\n",
        "../src/DODOSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\n\n\ninterface IDODOZoo {\n    function getDODO(address baseToken, address quoteToken) external view returns (address);\n}\n\ninterface IDODOHelper {\n    function querySellQuoteToken(address dodo, uint256 amount) external view returns (uint256);\n}\n\ninterface IDODO {\n    function querySellBaseToken(uint256 amount) external view returns (uint256);\n    function _TRADE_ALLOWED_() external view returns (bool);\n}\n\ncontract DODOSampler is\n    SamplerUtils,\n    ApproximateBuys\n{\n\n    /// @dev Gas limit for DODO calls.\n    uint256 constant private DODO_CALL_GAS = 300e3; // 300k\n    struct DODOSamplerOpts {\n        address registry;\n        address helper;\n    }\n\n    /// @dev Sample sell quotes from DODO.\n    /// @param opts DODOSamplerOpts DODO Registry and helper addresses\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return sellBase whether the bridge needs to sell the base token\n    /// @return pool the DODO pool address\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromDODO(\n        DODOSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (bool sellBase, address pool, uint256[] memory makerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        pool = IDODOZoo(opts.registry).getDODO(takerToken, makerToken);\n        address baseToken;\n        // If pool exists we have the correct order of Base/Quote\n        if (pool != address(0)) {\n            baseToken = takerToken;\n            sellBase = true;\n        } else {\n            pool = IDODOZoo(opts.registry).getDODO(makerToken, takerToken);\n            // No pool either direction\n            if (address(pool) == address(0)) {\n                return (sellBase, pool, makerTokenAmounts);\n            }\n            baseToken = makerToken;\n            sellBase = false;\n        }\n\n        // DODO Pool has been disabled\n        if (!IDODO(pool)._TRADE_ALLOWED_()) {\n            return (sellBase, pool, makerTokenAmounts);\n        }\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            uint256 buyAmount = _sampleSellForApproximateBuyFromDODO(\n                abi.encode(takerToken, pool, baseToken, opts.helper), // taker token data\n                abi.encode(makerToken, pool, baseToken, opts.helper), // maker token data\n                takerTokenAmounts[i]\n            );\n            makerTokenAmounts[i] = buyAmount;\n            // Break early if there are 0 amounts\n            if (makerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from DODO.\n    /// @param opts DODOSamplerOpts DODO Registry and helper addresses\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token sell amount for each sample.\n    /// @return sellBase whether the bridge needs to sell the base token\n    /// @return pool the DODO pool address\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromDODO(\n        DODOSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (bool sellBase, address pool, uint256[] memory takerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n\n        // Pool is BASE/QUOTE\n        // Look up the pool from the taker/maker combination\n        pool = IDODOZoo(opts.registry).getDODO(takerToken, makerToken);\n        address baseToken;\n        // If pool exists we have the correct order of Base/Quote\n        if (pool != address(0)) {\n            baseToken = takerToken;\n            sellBase = true;\n        } else {\n            // Look up the pool from the maker/taker combination\n            pool = IDODOZoo(opts.registry).getDODO(makerToken, takerToken);\n            // No pool either direction\n            if (address(pool) == address(0)) {\n                return (sellBase, pool, takerTokenAmounts);\n            }\n            baseToken = makerToken;\n            sellBase = false;\n        }\n\n        // DODO Pool has been disabled\n        if (!IDODO(pool)._TRADE_ALLOWED_()) {\n            return (sellBase, pool, takerTokenAmounts);\n        }\n\n        takerTokenAmounts = _sampleApproximateBuys(\n            ApproximateBuyQuoteOpts({\n                makerTokenData: abi.encode(makerToken, pool, baseToken, opts.helper),\n                takerTokenData: abi.encode(takerToken, pool, baseToken, opts.helper),\n                getSellQuoteCallback: _sampleSellForApproximateBuyFromDODO\n            }),\n            makerTokenAmounts\n        );\n    }\n\n    function _sampleSellForApproximateBuyFromDODO(\n        bytes memory takerTokenData,\n        bytes memory /* makerTokenData */,\n        uint256 sellAmount\n    )\n        private\n        view\n        returns (uint256)\n    {\n        (address takerToken, address pool, address baseToken, address helper) = abi.decode(\n            takerTokenData,\n            (address, address, address, address)\n        );\n\n        // We will get called to sell both the taker token and also to sell the maker token\n        if (takerToken == baseToken) {\n            // If base token then use the original query on the pool\n            try\n                IDODO(pool).querySellBaseToken\n                    {gas: DODO_CALL_GAS}\n                    (sellAmount)\n                returns (uint256 amount)\n            {\n                return amount;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                return 0;\n            }\n        } else {\n            // If quote token then use helper, this is less accurate\n            try\n                IDODOHelper(helper).querySellQuoteToken\n                    {gas: DODO_CALL_GAS}\n                    (pool, sellAmount)\n                returns (uint256 amount)\n            {\n                return amount;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                return 0;\n            }\n        }\n    }\n\n}\n",
        "../src/DODOV2Sampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\n\ninterface IDODOV2Registry {\n    function getDODOPool(address baseToken, address quoteToken)\n        external\n        view\n        returns (address[] memory machines);\n}\n\ninterface IDODOV2Pool {\n    function querySellBase(address trader, uint256 payBaseAmount)\n        external\n        view\n        returns (uint256 receiveQuoteAmount, uint256 mtFee);\n\n    function querySellQuote(address trader, uint256 payQuoteAmount)\n        external\n        view\n        returns (uint256 receiveBaseAmount, uint256 mtFee);\n}\n\ncontract DODOV2Sampler is\n    SamplerUtils,\n    ApproximateBuys\n{\n\n    /// @dev Gas limit for DODO V2 calls.\n    uint256 constant private DODO_V2_CALL_GAS = 300e3; // 300k\n\n    /// @dev Sample sell quotes from DODO V2.\n    /// @param registry Address of the registry to look up.\n    /// @param offset offset index for the pool in the registry.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return sellBase whether the bridge needs to sell the base token\n    /// @return pool the DODO pool address\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromDODOV2(\n        address registry,\n        uint256 offset,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (bool sellBase, address pool, uint256[] memory makerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        (pool, sellBase) = _getNextDODOV2Pool(registry, offset, takerToken, makerToken);\n        if (pool == address(0)) {\n            return (sellBase, pool, makerTokenAmounts);\n        }\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            uint256 buyAmount = _sampleSellForApproximateBuyFromDODOV2(\n                abi.encode(takerToken, pool, sellBase), // taker token data\n                abi.encode(makerToken, pool, sellBase), // maker token data\n                takerTokenAmounts[i]\n            );\n            makerTokenAmounts[i] = buyAmount;\n            // Break early if there are 0 amounts\n            if (makerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from DODO.\n    /// @param registry Address of the registry to look up.\n    /// @param offset offset index for the pool in the registry.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token sell amount for each sample.\n    /// @return sellBase whether the bridge needs to sell the base token\n    /// @return pool the DODO pool address\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromDODOV2(\n        address registry,\n        uint256 offset,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (bool sellBase, address pool, uint256[] memory takerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        (pool, sellBase) = _getNextDODOV2Pool(registry, offset, takerToken, makerToken);\n        if (pool == address(0)) {\n            return (sellBase, pool, takerTokenAmounts);\n        }\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n\n        takerTokenAmounts = _sampleApproximateBuys(\n            ApproximateBuyQuoteOpts({\n                makerTokenData: abi.encode(makerToken, pool, !sellBase),\n                takerTokenData: abi.encode(takerToken, pool, sellBase),\n                getSellQuoteCallback: _sampleSellForApproximateBuyFromDODOV2\n            }),\n            makerTokenAmounts\n        );\n    }\n\n    function _sampleSellForApproximateBuyFromDODOV2(\n        bytes memory takerTokenData,\n        bytes memory /* makerTokenData */,\n        uint256 sellAmount\n    )\n        private\n        view\n        returns (uint256)\n    {\n        (address takerToken, address pool, bool sellBase) = abi.decode(\n            takerTokenData,\n            (address, address, bool)\n        );\n\n        // We will get called to sell both the taker token and also to sell the maker token\n        // since we use approximate buy for sell and buy functions\n        if (sellBase) {\n            try\n                IDODOV2Pool(pool).querySellBase\n                    { gas: DODO_V2_CALL_GAS }\n                    (address(0), sellAmount)\n                returns (uint256 amount, uint256)\n            {\n                return amount;\n            } catch {\n                return 0;\n            }\n        } else {\n            try\n                IDODOV2Pool(pool).querySellQuote\n                    { gas: DODO_V2_CALL_GAS }\n                    (address(0), sellAmount)\n                returns (uint256 amount, uint256)\n            {\n                return amount;\n            } catch {\n                return 0;\n            }\n        }\n    }\n\n    function _getNextDODOV2Pool(\n        address registry,\n        uint256 offset,\n        address takerToken,\n        address makerToken\n    )\n        internal\n        view\n        returns (address machine, bool sellBase)\n    {\n        // Query in base -> quote direction, if a pool is found then we are selling the base\n        address[] memory machines = IDODOV2Registry(registry).getDODOPool(takerToken, makerToken);\n        sellBase = true;\n        if (machines.length == 0) {\n            // Query in quote -> base direction, if a pool is found then we are selling the quote\n            machines = IDODOV2Registry(registry).getDODOPool(makerToken, takerToken);\n            sellBase = false;\n        }\n\n        if (offset >= machines.length) {\n            return (address(0), false);\n        }\n\n        machine = machines[offset];\n    }\n\n}\n",
        "../src/KyberSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IKyberNetwork.sol\";\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\n\n\ncontract KyberSampler is\n    SamplerUtils,\n    ApproximateBuys\n{\n    /// @dev Gas limit for Kyber calls.\n    uint256 constant private KYBER_CALL_GAS = 500e3; // 500k\n    /// @dev Kyber ETH pseudo-address.\n    address constant internal KYBER_ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n\n    struct KyberSamplerOpts {\n        uint256 reserveOffset;\n        address hintHandler;\n        address networkProxy;\n        address weth;\n        bytes hint;\n    }\n\n    /// @dev Sample sell quotes from Kyber.\n    /// @param opts KyberSamplerOpts The nth reserve\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return reserveId The id of the reserve found at reserveOffset\n    /// @return hint The hint for the selected reserve\n    /// @return makerTokenAmounts Maker amounts bought at each taker token amount.\n    function sampleSellsFromKyberNetwork(\n        KyberSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (bytes32 reserveId, bytes memory hint, uint256[] memory makerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        reserveId = _getNextReserveId(opts, takerToken, makerToken);\n        if (reserveId == 0x0) {\n            return (reserveId, hint, makerTokenAmounts);\n        }\n        opts.hint = this.encodeKyberHint(opts, reserveId, takerToken, makerToken);\n        hint = opts.hint;\n\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            uint256 value = this.sampleSellFromKyberNetwork(\n                opts,\n                takerToken,\n                makerToken,\n                takerTokenAmounts[i]\n            );\n            makerTokenAmounts[i] = value;\n            // Break early if there are 0 amounts\n            if (makerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from Kyber.\n    /// @param opts KyberSamplerOpts The nth reserve\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return reserveId The id of the reserve found at reserveOffset\n    /// @return hint The hint for the selected reserve\n    /// @return takerTokenAmounts Taker amounts sold at each maker token amount.\n    function sampleBuysFromKyberNetwork(\n        KyberSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (bytes32 reserveId, bytes memory hint, uint256[] memory takerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n\n        reserveId = _getNextReserveId(opts, takerToken, makerToken);\n        if (reserveId == 0x0) {\n            return (reserveId, hint, takerTokenAmounts);\n        }\n        opts.hint = this.encodeKyberHint(opts, reserveId, takerToken, makerToken);\n        hint = opts.hint;\n\n        takerTokenAmounts = _sampleApproximateBuys(\n            ApproximateBuyQuoteOpts({\n                makerTokenData: abi.encode(makerToken, opts),\n                takerTokenData: abi.encode(takerToken, opts),\n                getSellQuoteCallback: _sampleSellForApproximateBuyFromKyber\n            }),\n            makerTokenAmounts\n        );\n        return (reserveId, hint, takerTokenAmounts);\n    }\n\n    function encodeKyberHint(\n        KyberSamplerOpts memory opts,\n        bytes32 reserveId,\n        address takerToken,\n        address makerToken\n    )\n        public\n        view\n        returns (bytes memory hint)\n    {\n        // Build a hint selecting the single reserve\n        IKyberHintHandler kyberHint = IKyberHintHandler(opts.hintHandler);\n\n        // All other reserves should be ignored with this hint\n        bytes32[] memory selectedReserves = new bytes32[](1);\n        selectedReserves[0] = reserveId;\n        uint256[] memory emptySplits = new uint256[](0);\n\n        if (takerToken == opts.weth) {\n            // ETH to Token\n            try\n                kyberHint.buildEthToTokenHint\n                    {gas: KYBER_CALL_GAS}\n                    (\n                        makerToken,\n                        IKyberHintHandler.TradeType.MaskIn,\n                        selectedReserves,\n                        emptySplits\n                    )\n                returns (bytes memory result)\n            {\n                return result;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n            }\n        } else if (makerToken == opts.weth) {\n            // Token to ETH\n            try\n                kyberHint.buildTokenToEthHint\n                    {gas: KYBER_CALL_GAS}\n                    (\n                        takerToken,\n                        IKyberHintHandler.TradeType.MaskIn,\n                        selectedReserves,\n                        emptySplits\n                    )\n                returns (bytes memory result)\n            {\n                return result;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n            }\n\n        } else {\n            // Token to Token\n            // We use the same reserve both ways\n            try\n                kyberHint.buildTokenToTokenHint\n                    {gas: KYBER_CALL_GAS}\n                    (\n                        takerToken,\n                        IKyberHintHandler.TradeType.MaskIn,\n                        selectedReserves,\n                        emptySplits,\n                        makerToken,\n                        IKyberHintHandler.TradeType.MaskIn,\n                        selectedReserves,\n                        emptySplits\n                    )\n                returns (bytes memory result)\n            {\n                return result;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n            }\n        }\n    }\n\n    function _sampleSellForApproximateBuyFromKyber(\n        bytes memory takerTokenData,\n        bytes memory makerTokenData,\n        uint256 sellAmount\n    )\n        private\n        view\n        returns (uint256)\n    {\n        (address makerToken, KyberSamplerOpts memory opts) =\n            abi.decode(makerTokenData, (address, KyberSamplerOpts));\n        (address takerToken, ) =\n            abi.decode(takerTokenData, (address, KyberSamplerOpts));\n        try\n            this.sampleSellFromKyberNetwork\n                (opts, takerToken, makerToken, sellAmount)\n            returns (uint256 amount)\n        {\n            return amount;\n        } catch (bytes memory) {\n            // Swallow failures, leaving all results as zero.\n            return 0;\n        }\n    }\n\n    function sampleSellFromKyberNetwork(\n        KyberSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256 takerTokenAmount\n    )\n        public\n        view\n        returns (uint256 makerTokenAmount)\n    {\n        // If there is no hint do not continue\n        if (opts.hint.length == 0) {\n            return 0;\n        }\n\n        try\n            IKyberNetworkProxy(opts.networkProxy).getExpectedRateAfterFee\n                {gas: KYBER_CALL_GAS}\n                (\n                    takerToken == opts.weth ? KYBER_ETH_ADDRESS : takerToken,\n                    makerToken == opts.weth ? KYBER_ETH_ADDRESS : makerToken,\n                    takerTokenAmount,\n                    0, // fee\n                    opts.hint\n                )\n            returns (uint256 rate)\n        {\n            uint256 makerTokenDecimals = _getTokenDecimals(makerToken);\n            uint256 takerTokenDecimals = _getTokenDecimals(takerToken);\n            makerTokenAmount =\n                rate *\n                takerTokenAmount *\n                10 ** makerTokenDecimals /\n                10 ** takerTokenDecimals /\n                10 ** 18;\n            return makerTokenAmount;\n        } catch (bytes memory) {\n            // Swallow failures, leaving all results as zero.\n            return 0;\n        }\n    }\n\n    function _getNextReserveId(\n        KyberSamplerOpts memory opts,\n        address takerToken,\n        address makerToken\n    )\n        internal\n        view\n        returns (bytes32 reserveId)\n    {\n        // Fetch the registered reserves for this pair\n        IKyberHintHandler kyberHint = IKyberHintHandler(opts.hintHandler);\n        (bytes32[] memory reserveIds, ,) = kyberHint.getTradingReserves(\n            takerToken == opts.weth ? KYBER_ETH_ADDRESS : takerToken,\n            makerToken == opts.weth ? KYBER_ETH_ADDRESS : makerToken,\n            true,\n            new bytes(0) // empty hint\n        );\n\n        if (opts.reserveOffset >= reserveIds.length) {\n            return 0x0;\n        }\n\n        reserveId = reserveIds[opts.reserveOffset];\n        // Ignore Kyber Bridged Reserves (0xbb)\n        if (uint256(reserveId >> 248) == 0xbb) {\n            return 0x0;\n        }\n\n        return reserveId;\n    }\n}\n",
        "../src/interfaces/IKyberNetwork.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n// Keepin everything together\ninterface IKyberNetwork {\n\n\n}\n\n\ninterface IKyberNetworkProxy {\n\n    function getExpectedRateAfterFee(\n        address src,\n        address dest,\n        uint256 srcQty,\n        uint256 platformFeeBps,\n        bytes calldata hint\n    )\n        external\n        view\n        returns (uint256 expectedRate);\n}\n\ninterface IKyberHintHandler {\n\n    enum TradeType {BestOfAll, MaskIn, MaskOut, Split}\n\n    enum ProcessWithRate {NotRequired, Required}\n\n    function getTradingReserves(\n        address tokenSrc,\n        address tokenDest,\n        bool isTokenToToken,\n        bytes calldata hint\n    )\n        external\n        view\n        returns (\n            bytes32[] memory reserveIds,\n            uint256[] memory splitValuesBps,\n            ProcessWithRate processWithRate\n        );\n\n    function buildTokenToEthHint(\n        address tokenSrc,\n        TradeType tokenToEthType,\n        bytes32[] calldata tokenToEthReserveIds,\n        uint256[] calldata tokenToEthSplits\n    )\n        external\n        view\n        returns (bytes memory hint);\n\n    function buildEthToTokenHint(\n        address tokenDest,\n        TradeType ethToTokenType,\n        bytes32[] calldata ethToTokenReserveIds,\n        uint256[] calldata ethToTokenSplits\n    )\n        external\n        view\n        returns (bytes memory hint);\n\n    function buildTokenToTokenHint(\n        address tokenSrc,\n        TradeType tokenToEthType,\n        bytes32[] calldata tokenToEthReserveIds,\n        uint256[] calldata tokenToEthSplits,\n        address tokenDest,\n        TradeType ethToTokenType,\n        bytes32[] calldata ethToTokenReserveIds,\n        uint256[] calldata ethToTokenSplits\n    )\n        external\n        view\n        returns (bytes memory hint);\n}\n",
        "../src/KyberDmmSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\ninterface IKyberDmmPool {\n\n    function totalSupply()\n        external\n        view\n        returns (uint256);\n}\n\ninterface IKyberDmmFactory {\n\n    function getPools(address token0, address token1)\n        external\n        view\n        returns (address[] memory _tokenPools);\n}\n\ninterface IKyberDmmRouter {\n\n    function factory() external view returns (address);\n\n    function getAmountsOut(uint256 amountIn, address[] calldata pools, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts);\n\n    function getAmountsIn(uint256 amountOut, address[] calldata pools, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts);\n}\n\n\n\ncontract KyberDmmSampler\n{\n    /// @dev Gas limit for KyberDmm calls.\n    uint256 constant private KYBER_DMM_CALL_GAS = 150e3; // 150k\n\n    /// @dev Sample sell quotes from KyberDmm.\n    /// @param router Router to look up tokens and amounts\n    /// @param path Token route. Should be takerToken -> makerToken\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return pools The pool addresses involved in the multi path trade\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromKyberDmm(\n        address router,\n        address[] memory path,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (address[] memory pools, uint256[] memory makerTokenAmounts)\n    {\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        pools = _getKyberDmmPools(router, path);\n        if (pools.length == 0) {\n            return (pools, makerTokenAmounts);\n        }\n        for (uint256 i = 0; i < numSamples; i++) {\n            try\n                IKyberDmmRouter(router).getAmountsOut\n                    {gas: KYBER_DMM_CALL_GAS}\n                    (takerTokenAmounts[i], pools, path)\n                returns (uint256[] memory amounts)\n            {\n                makerTokenAmounts[i] = amounts[path.length - 1];\n                // Break early if there are 0 amounts\n                if (makerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from KyberDmm.\n    /// @param router Router to look up tokens and amounts\n    /// @param path Token route. Should be takerToken -> makerToken.\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return pools The pool addresses involved in the multi path trade\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromKyberDmm(\n        address router,\n        address[] memory path,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (address[] memory pools, uint256[] memory takerTokenAmounts)\n    {\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n        pools = _getKyberDmmPools(router, path);\n        if (pools.length == 0) {\n            return (pools, takerTokenAmounts);\n        }\n        for (uint256 i = 0; i < numSamples; i++) {\n            try\n                IKyberDmmRouter(router).getAmountsIn\n                    {gas: KYBER_DMM_CALL_GAS}\n                    (makerTokenAmounts[i], pools, path)\n                returns (uint256[] memory amounts)\n            {\n                takerTokenAmounts[i] = amounts[0];\n                // Break early if there are 0 amounts\n                if (takerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    function _getKyberDmmPools(\n        address router,\n        address[] memory path\n    )\n        private\n        view\n        returns (address[] memory pools)\n    {\n        IKyberDmmFactory factory = IKyberDmmFactory(IKyberDmmRouter(router).factory());\n        pools = new address[](path.length - 1);\n        for (uint256 i = 0; i < pools.length; i++) {\n            // find the best pool\n            address[] memory allPools;\n            try\n                factory.getPools\n                    {gas: KYBER_DMM_CALL_GAS}\n                    (path[i], path[i + 1])\n                returns (address[] memory allPools)\n            {\n                if (allPools.length == 0) {\n                    return new address[](0);\n                }\n\n                uint256 maxSupply = 0;\n                for (uint256 j = 0; j < allPools.length; j++) {\n                    uint256 totalSupply = IKyberDmmPool(allPools[j]).totalSupply();\n                    if (totalSupply > maxSupply) {\n                        maxSupply = totalSupply;\n                        pools[i] = allPools[j];\n                    }\n                }\n            } catch (bytes memory) {\n                return new address[](0);\n            }\n        }\n    }\n}\n",
        "../src/LidoSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./SamplerUtils.sol\";\n\ncontract LidoSampler is SamplerUtils {\n    struct LidoInfo {\n        address stEthToken;\n        address wethToken;\n    }\n\n    /// @dev Sample sell quotes from Lido\n    /// @param lidoInfo Info regarding a specific Lido deployment\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromLido(\n        LidoInfo memory lidoInfo,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        pure\n        returns (uint256[] memory)\n    {\n        _assertValidPair(makerToken, takerToken);\n\n        if (takerToken != lidoInfo.wethToken || makerToken != address(lidoInfo.stEthToken)) {\n            // Return 0 values if not selling WETH for stETH\n            uint256 numSamples = takerTokenAmounts.length;\n            uint256[] memory makerTokenAmounts = new uint256[](numSamples);\n            return makerTokenAmounts;\n        }\n\n        // Minting stETH is always 1:1 therefore we can just return the same amounts back\n        return takerTokenAmounts;\n    }\n\n    /// @dev Sample buy quotes from Lido.\n    /// @param lidoInfo Info regarding a specific Lido deployment\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromLido(\n        LidoInfo memory lidoInfo,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        pure\n        returns (uint256[] memory)\n    {\n        _assertValidPair(makerToken, takerToken);\n\n        if (takerToken != lidoInfo.wethToken || makerToken != address(lidoInfo.stEthToken)) {\n            // Return 0 values if not buying stETH for WETH\n            uint256 numSamples = makerTokenAmounts.length;\n            uint256[] memory takerTokenAmounts = new uint256[](numSamples);\n            return takerTokenAmounts;\n        }\n\n        // Minting stETH is always 1:1 therefore we can just return the same amounts back\n        return makerTokenAmounts;\n    }\n\n}\n",
        "../src/LiquidityProviderSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol\";\nimport \"@0x/contracts-zero-ex/contracts/src/vendor/ILiquidityProvider.sol\";\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\n\n\ncontract LiquidityProviderSampler is\n    SamplerUtils,\n    ApproximateBuys\n{\n    /// @dev Default gas limit for liquidity provider calls.\n    uint256 constant private DEFAULT_CALL_GAS = 400e3; // 400k\n\n    /// @dev Sample sell quotes from an arbitrary on-chain liquidity provider.\n    /// @param providerAddress Address of the liquidity provider.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromLiquidityProvider(\n        address providerAddress,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        // Initialize array of maker token amounts.\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            try\n                ILiquidityProvider(providerAddress).getSellQuote\n                    {gas: DEFAULT_CALL_GAS}\n                    (\n                        IERC20TokenV06(takerToken),\n                        IERC20TokenV06(makerToken),\n                        takerTokenAmounts[i]\n                    )\n                returns (uint256 amount)\n            {\n                makerTokenAmounts[i] = amount;\n                // Break early if there are 0 amounts\n                if (makerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from an arbitrary on-chain liquidity provider.\n    /// @param providerAddress Address of the liquidity provider.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromLiquidityProvider(\n        address providerAddress,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        takerTokenAmounts = _sampleApproximateBuys(\n            ApproximateBuyQuoteOpts({\n                makerTokenData: abi.encode(makerToken, providerAddress),\n                takerTokenData: abi.encode(takerToken, providerAddress),\n                getSellQuoteCallback: _sampleSellForApproximateBuyFromLiquidityProvider\n            }),\n            makerTokenAmounts\n        );\n    }\n\n    function _sampleSellForApproximateBuyFromLiquidityProvider(\n        bytes memory takerTokenData,\n        bytes memory makerTokenData,\n        uint256 sellAmount\n    )\n        private\n        view\n        returns (uint256 buyAmount)\n    {\n        (address takerToken, address providerAddress) =\n            abi.decode(takerTokenData, (address, address));\n        (address makerToken) =\n            abi.decode(makerTokenData, (address));\n        try\n            this.sampleSellsFromLiquidityProvider\n                {gas: DEFAULT_CALL_GAS}\n                (providerAddress, takerToken, makerToken, _toSingleValueArray(sellAmount))\n            returns (uint256[] memory amounts)\n        {\n            return amounts[0];\n        } catch (bytes memory) {\n            // Swallow failures, leaving all results as zero.\n            return 0;\n        }\n    }\n}\n",
        "@0x/contracts-zero-ex/contracts/src/vendor/ILiquidityProvider.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\n\n\ninterface ILiquidityProvider {\n\n    /// @dev An optional event an LP can emit for each fill against a source.\n    /// @param inputToken The input token.\n    /// @param outputToken The output token.\n    /// @param inputTokenAmount How much input token was sold.\n    /// @param outputTokenAmount How much output token was bought.\n    /// @param sourceId A bytes32 encoded ascii source ID. E.g., `bytes32('Curve')`/\n    /// @param sourceAddress An optional address associated with the source (e.g, a curve pool).\n    /// @param sourceId A bytes32 encoded ascii source ID. E.g., `bytes32('Curve')`/\n    /// @param sourceAddress An optional address associated with the source (e.g, a curve pool).\n    /// @param sender The caller of the LP.\n    /// @param recipient The recipient of the output tokens.\n    event LiquidityProviderFill(\n        IERC20TokenV06 inputToken,\n        IERC20TokenV06 outputToken,\n        uint256 inputTokenAmount,\n        uint256 outputTokenAmount,\n        bytes32 sourceId,\n        address sourceAddress,\n        address sender,\n        address recipient\n    );\n\n    /// @dev Trades `inputToken` for `outputToken`. The amount of `inputToken`\n    ///      to sell must be transferred to the contract prior to calling this\n    ///      function to trigger the trade.\n    /// @param inputToken The token being sold.\n    /// @param outputToken The token being bought.\n    /// @param recipient The recipient of the bought tokens.\n    /// @param minBuyAmount The minimum acceptable amount of `outputToken` to buy.\n    /// @param auxiliaryData Arbitrary auxiliary data supplied to the contract.\n    /// @return boughtAmount The amount of `outputToken` bought.\n    function sellTokenForToken(\n        IERC20TokenV06 inputToken,\n        IERC20TokenV06 outputToken,\n        address recipient,\n        uint256 minBuyAmount,\n        bytes calldata auxiliaryData\n    )\n        external\n        returns (uint256 boughtAmount);\n\n    /// @dev Trades ETH for token. ETH must either be attached to this function\n    ///      call or sent to the contract prior to calling this function to\n    ///      trigger the trade.\n    /// @param outputToken The token being bought.\n    /// @param recipient The recipient of the bought tokens.\n    /// @param minBuyAmount The minimum acceptable amount of `outputToken` to buy.\n    /// @param auxiliaryData Arbitrary auxiliary data supplied to the contract.\n    /// @return boughtAmount The amount of `outputToken` bought.\n    function sellEthForToken(\n        IERC20TokenV06 outputToken,\n        address recipient,\n        uint256 minBuyAmount,\n        bytes calldata auxiliaryData\n    )\n        external\n        payable\n        returns (uint256 boughtAmount);\n\n    /// @dev Trades token for ETH. The token must be sent to the contract prior\n    ///      to calling this function to trigger the trade.\n    /// @param inputToken The token being sold.\n    /// @param recipient The recipient of the bought tokens.\n    /// @param minBuyAmount The minimum acceptable amount of ETH to buy.\n    /// @param auxiliaryData Arbitrary auxiliary data supplied to the contract.\n    /// @return boughtAmount The amount of ETH bought.\n    function sellTokenForEth(\n        IERC20TokenV06 inputToken,\n        address payable recipient,\n        uint256 minBuyAmount,\n        bytes calldata auxiliaryData\n    )\n        external\n        returns (uint256 boughtAmount);\n\n    /// @dev Quotes the amount of `outputToken` that would be obtained by\n    ///      selling `sellAmount` of `inputToken`.\n    /// @param inputToken Address of the taker token (what to sell). Use\n    ///        the wETH address if selling ETH.\n    /// @param outputToken Address of the maker token (what to buy). Use\n    ///        the wETH address if buying ETH.\n    /// @param sellAmount Amount of `inputToken` to sell.\n    /// @return outputTokenAmount Amount of `outputToken` that would be obtained.\n    function getSellQuote(\n        IERC20TokenV06 inputToken,\n        IERC20TokenV06 outputToken,\n        uint256 sellAmount\n    )\n        external\n        view\n        returns (uint256 outputTokenAmount);\n}\n",
        "../src/MakerPSMSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./SamplerUtils.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibMathV06.sol\";\n\ninterface IPSM {\n    // @dev Get the fee for selling USDC to DAI in PSM\n    // @return tin toll in [wad]\n    function tin() external view returns (uint256);\n    // @dev Get the fee for selling DAI to USDC in PSM\n    // @return tout toll out [wad]\n    function tout() external view returns (uint256);\n\n    // @dev Get the address of the PSM state Vat\n    // @return address of the Vat\n    function vat() external view returns (address);\n\n    // @dev Get the address of the underlying vault powering PSM\n    // @return address of gemJoin contract\n    function gemJoin() external view returns (address);\n\n    // @dev Get the address of DAI\n    // @return address of DAI contract\n    function dai() external view returns (address);\n\n    // @dev Sell USDC for DAI\n    // @param usr The address of the account trading USDC for DAI.\n    // @param gemAmt The amount of USDC to sell in USDC base units\n    function sellGem(\n        address usr,\n        uint256 gemAmt\n    ) external;\n    // @dev Buy USDC for DAI\n    // @param usr The address of the account trading DAI for USDC\n    // @param gemAmt The amount of USDC to buy in USDC base units\n    function buyGem(\n        address usr,\n        uint256 gemAmt\n    ) external;\n}\n\ninterface IVAT {\n    // @dev Get a collateral type by identifier\n    // @param ilkIdentifier bytes32 identifier. Example: ethers.utils.formatBytes32String(\"PSM-USDC-A\")\n    // @return ilk\n    // @return ilk.Art Total Normalised Debt in wad\n    // @return ilk.rate Accumulated Rates in ray\n    // @return ilk.spot Price with Safety Margin in ray\n    // @return ilk.line Debt Ceiling in rad\n    // @return ilk.dust Urn Debt Floor in rad\n    function ilks(\n        bytes32 ilkIdentifier\n    ) external view returns (\n        uint256 Art,\n        uint256 rate,\n        uint256 spot,\n        uint256 line,\n        uint256 dust\n    );\n}\n\ncontract MakerPSMSampler is\n    SamplerUtils\n{\n    using LibSafeMathV06 for uint256;\n\n    /// @dev Information about which PSM module to use\n    struct MakerPsmInfo {\n        address psmAddress;\n        bytes32 ilkIdentifier;\n        address gemTokenAddress;\n    }\n\n    /// @dev Gas limit for MakerPsm calls.\n    uint256 constant private MAKER_PSM_CALL_GAS = 300e3; // 300k\n\n\n    // Maker units\n    // wad: fixed point decimal with 18 decimals (for basic quantities, e.g. balances)\n    uint256 constant private WAD = 10 ** 18;\n    // ray: fixed point decimal with 27 decimals (for precise quantites, e.g. ratios)\n    uint256 constant private RAY = 10 ** 27;\n    // rad: fixed point decimal with 45 decimals (result of integer multiplication with a wad and a ray)\n    uint256 constant private RAD = 10 ** 45;\n    // See https://github.com/makerdao/dss/blob/master/DEVELOPING.m\n\n    /// @dev Sample sell quotes from Maker PSM\n    function sampleSellsFromMakerPsm(\n        MakerPsmInfo memory psmInfo,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        IPSM psm = IPSM(psmInfo.psmAddress);\n        IVAT vat = IVAT(psm.vat());\n\n\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        if (makerToken != psm.dai() && takerToken != psm.dai()) {\n            return makerTokenAmounts;\n        }\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            uint256 buyAmount = _samplePSMSell(psmInfo, makerToken, takerToken, takerTokenAmounts[i], psm, vat);\n\n            if (buyAmount == 0) {\n                break;\n            }\n            makerTokenAmounts[i] = buyAmount;\n        }\n    }\n\n    function sampleBuysFromMakerPsm(\n        MakerPsmInfo memory psmInfo,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        IPSM psm = IPSM(psmInfo.psmAddress);\n        IVAT vat = IVAT(psm.vat());\n\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n        if (makerToken != psm.dai() && takerToken != psm.dai()) {\n            return takerTokenAmounts;\n        }\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            uint256 sellAmount = _samplePSMBuy(psmInfo, makerToken, takerToken, makerTokenAmounts[i], psm, vat);\n\n            if (sellAmount == 0) {\n                break;\n            }\n\n            takerTokenAmounts[i] = sellAmount;\n        }\n\n    }\n\n    function _samplePSMSell(MakerPsmInfo memory psmInfo, address makerToken, address takerToken, uint256 takerTokenAmount, IPSM psm, IVAT vat)\n        private\n        view\n        returns (uint256)\n    {\n        (uint256 totalDebtInWad,,, uint256 debtCeilingInRad, uint256 debtFloorInRad) = vat.ilks(psmInfo.ilkIdentifier);\n        uint256 gemTokenBaseUnit = uint256(1e6);\n\n        if (takerToken == psmInfo.gemTokenAddress) {\n            // Simulate sellGem\n            // Selling USDC to the PSM, increasing the total debt\n            // Convert USDC 6 decimals to 18 decimals [wad]\n            uint256 takerTokenAmountInWad = takerTokenAmount.safeMul(1e12);\n\n            uint256 newTotalDebtInRad = totalDebtInWad.safeAdd(takerTokenAmountInWad).safeMul(RAY);\n\n            // PSM is too full to fit\n            if (newTotalDebtInRad >= debtCeilingInRad) {\n                return 0;\n            }\n\n            uint256 feeInWad = takerTokenAmountInWad.safeMul(psm.tin()).safeDiv(WAD);\n            uint256 makerTokenAmountInWad = takerTokenAmountInWad.safeSub(feeInWad);\n\n            return makerTokenAmountInWad;\n        } else if (makerToken == psmInfo.gemTokenAddress) {\n            // Simulate buyGem\n            // Buying USDC from the PSM, decreasing the total debt\n            // Selling DAI for USDC, already in 18 decimals [wad]\n            uint256 takerTokenAmountInWad = takerTokenAmount;\n            if (takerTokenAmountInWad > totalDebtInWad) {\n                return 0;\n            }\n            uint256 newTotalDebtInRad = totalDebtInWad.safeSub(takerTokenAmountInWad).safeMul(RAY);\n\n            // PSM is empty, not enough USDC to buy from it\n            if (newTotalDebtInRad <= debtFloorInRad) {\n                return 0;\n            }\n\n            uint256 feeDivisorInWad = WAD.safeAdd(psm.tout()); // eg. 1.001 * 10 ** 18 with 0.1% tout;\n            uint256 makerTokenAmountInGemTokenBaseUnits =  takerTokenAmountInWad.safeMul(gemTokenBaseUnit).safeDiv(feeDivisorInWad);\n\n            return makerTokenAmountInGemTokenBaseUnits;\n        }\n\n        return 0;\n    }\n\n    function _samplePSMBuy(MakerPsmInfo memory psmInfo, address makerToken, address takerToken, uint256 makerTokenAmount, IPSM psm, IVAT vat)\n        private\n        view\n        returns (uint256)\n    {\n        (uint256 totalDebtInWad,,, uint256 debtCeilingInRad, uint256 debtFloorInRad) = vat.ilks(psmInfo.ilkIdentifier);\n\n        if (takerToken == psmInfo.gemTokenAddress) {\n            // Simulate sellGem\n            // Selling USDC to the PSM, increasing the total debt\n            uint256 makerTokenAmountInWad = makerTokenAmount;\n            uint256 feeDivisorInWad = WAD.safeSub(psm.tin()); // eg. 0.999 * 10 ** 18 with 0.1% tin;\n            uint256 takerTokenAmountInWad = makerTokenAmountInWad.safeMul(WAD).safeDiv(feeDivisorInWad);\n            uint256 newTotalDebtInRad = totalDebtInWad.safeAdd(takerTokenAmountInWad).safeMul(RAY);\n\n            // PSM is too full to fit\n            if (newTotalDebtInRad >= debtCeilingInRad) {\n                return 0;\n            }\n\n            uint256 takerTokenAmountInGemInGemBaseUnits = (takerTokenAmountInWad.safeDiv(1e12)).safeAdd(1); // Add 1 to deal with cut off decimals converting to lower decimals\n\n            return takerTokenAmountInGemInGemBaseUnits;\n        } else if (makerToken == psmInfo.gemTokenAddress) {\n            // Simulate buyGem\n            // Buying USDC from the PSM, decreasing the total debt\n            uint256 makerTokenAmountInWad = makerTokenAmount.safeMul(1e12);\n            uint256 feeMultiplierInWad = WAD.safeAdd(psm.tout()); // eg. 1.001 * 10 ** 18 with 0.1% tout;\n            uint256 takerTokenAmountInWad =  makerTokenAmountInWad.safeMul(feeMultiplierInWad).safeDiv(WAD);\n            if (takerTokenAmountInWad > totalDebtInWad) {\n                return 0;\n            }\n            uint256 newTotalDebtInRad = totalDebtInWad.safeSub(takerTokenAmountInWad).safeMul(RAY);\n\n            // PSM is empty, not enough USDC to buy\n            if (newTotalDebtInRad <= debtFloorInRad) {\n                return 0;\n            }\n\n\n            return takerTokenAmountInWad;\n        }\n\n        return 0;\n    }\n\n}\n",
        "../src/MultiBridgeSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IMultiBridge.sol\";\n\n\ncontract MultiBridgeSampler {\n\n    /// @dev Default gas limit for multibridge calls.\n    uint256 constant private DEFAULT_CALL_GAS = 400e3; // 400k\n\n    /// @dev Sample sell quotes from MultiBridge.\n    /// @param multibridge Address of the MultiBridge contract.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param intermediateToken The address of the intermediate token to\n    ///        use in an indirect route.\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromMultiBridge(\n        address multibridge,\n        address takerToken,\n        address intermediateToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        // Initialize array of maker token amounts.\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        // If no address provided, return all zeros.\n        if (multibridge == address(0)) {\n            return makerTokenAmounts;\n        }\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            (bool didSucceed, bytes memory resultData) =\n                multibridge.staticcall.gas(DEFAULT_CALL_GAS)(\n                    abi.encodeWithSelector(\n                        IMultiBridge(0).getSellQuote.selector,\n                        takerToken,\n                        intermediateToken,\n                        makerToken,\n                        takerTokenAmounts[i]\n                    ));\n            uint256 buyAmount = 0;\n            if (didSucceed) {\n                buyAmount = abi.decode(resultData, (uint256));\n            }\n            // Exit early if the amount is too high for the source to serve\n            if (buyAmount == 0) {\n                break;\n            }\n\n            makerTokenAmounts[i] = buyAmount;\n        }\n    }\n}\n",
        "../src/interfaces/IMultiBridge.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface IMultiBridge {\n\n    /// @dev Transfers `amount` of the ERC20 `tokenAddress` from `from` to `to`.\n    /// @param tokenAddress The address of the ERC20 token to transfer.\n    /// @param from Address to transfer asset from.\n    /// @param to Address to transfer asset to.\n    /// @param amount Amount of asset to transfer.\n    /// @param bridgeData Arbitrary asset data needed by the bridge contract.\n    /// @return success The magic bytes `0xdc1600f3` if successful.\n    function bridgeTransferFrom(\n        address tokenAddress,\n        address from,\n        address to,\n        uint256 amount,\n        bytes calldata bridgeData\n    )\n        external\n        returns (bytes4 success);\n\n    /// @dev Quotes the amount of `makerToken` that would be obtained by\n    ///      selling `sellAmount` of `takerToken`.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param intermediateToken The address of the intermediate token to\n    ///        use in an indirect route.\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param sellAmount Amount of `takerToken` to sell.\n    /// @return makerTokenAmount Amount of `makerToken` that would be obtained.\n    function getSellQuote(\n        address takerToken,\n        address intermediateToken,\n        address makerToken,\n        uint256 sellAmount\n    )\n        external\n        view\n        returns (uint256 makerTokenAmount);\n}\n",
        "../src/MStableSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IMStable.sol\";\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\n\n\ncontract MStableSampler is\n    SamplerUtils,\n    ApproximateBuys\n{\n    /// @dev Default gas limit for mStable calls.\n    uint256 constant private DEFAULT_CALL_GAS = 800e3; // 800k\n\n    /// @dev Sample sell quotes from the mStable contract\n    /// @param router Address of the mStable contract\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromMStable(\n        address router,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        // Initialize array of maker token amounts.\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            try\n                IMStable(router).getSwapOutput\n                    {gas: DEFAULT_CALL_GAS}\n                    (takerToken, makerToken, takerTokenAmounts[i])\n                returns (uint256 amount)\n            {\n                makerTokenAmounts[i] = amount;\n                // Break early if there are 0 amounts\n                if (makerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from MStable contract\n    /// @param router Address of the mStable contract\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromMStable(\n        address router,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        return _sampleApproximateBuys(\n            ApproximateBuyQuoteOpts({\n                makerTokenData: abi.encode(makerToken, router),\n                takerTokenData: abi.encode(takerToken, router),\n                getSellQuoteCallback: _sampleSellForApproximateBuyFromMStable\n            }),\n            makerTokenAmounts\n        );\n    }\n\n    function _sampleSellForApproximateBuyFromMStable(\n        bytes memory takerTokenData,\n        bytes memory makerTokenData,\n        uint256 sellAmount\n    )\n        private\n        view\n        returns (uint256 buyAmount)\n    {\n        (address takerToken, address router) =\n            abi.decode(takerTokenData, (address, address));\n        (address makerToken) =\n            abi.decode(makerTokenData, (address));\n        try\n            this.sampleSellsFromMStable\n                (router, takerToken, makerToken, _toSingleValueArray(sellAmount))\n            returns (uint256[] memory amounts)\n        {\n            return amounts[0];\n        } catch (bytes memory) {\n            // Swallow failures, leaving all results as zero.\n            return 0;\n        }\n    }\n}\n",
        "../src/interfaces/IMStable.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface IMStable {\n\n    function getSwapOutput(\n        address _input,\n        address _output,\n        uint256 _quantity\n    )\n        external\n        view\n        returns (uint256 swapOutput);\n}\n",
        "../src/MooniswapSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IMooniswap.sol\";\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\n\n\ncontract MooniswapSampler is\n    SamplerUtils,\n    ApproximateBuys\n{\n    /// @dev Gas limit for Mooniswap calls.\n    uint256 constant private MOONISWAP_CALL_GAS = 150e3; // 150k\n\n    /// @dev Sample sell quotes from Mooniswap.\n    /// @param registry Address of the Mooniswap Registry.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return pool The contract address for the pool\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromMooniswap(\n        address registry,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (IMooniswap pool, uint256[] memory makerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            uint256 buyAmount = sampleSingleSellFromMooniswapPool(\n                registry,\n                takerToken,\n                makerToken,\n                takerTokenAmounts[i]\n            );\n            makerTokenAmounts[i] = buyAmount;\n            // Break early if there are 0 amounts\n            if (makerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n\n        pool = IMooniswap(\n            IMooniswapRegistry(registry).pools(takerToken, makerToken)\n        );\n    }\n\n    function sampleSingleSellFromMooniswapPool(\n        address registry,\n        address mooniswapTakerToken,\n        address mooniswapMakerToken,\n        uint256 takerTokenAmount\n    )\n        public\n        view\n        returns (uint256)\n    {\n        // Find the pool for the pair.\n        IMooniswap pool = IMooniswap(\n            IMooniswapRegistry(registry).pools(mooniswapTakerToken, mooniswapMakerToken)\n        );\n        // If there is no pool then return early\n        if (address(pool) == address(0)) {\n            return 0;\n        }\n        uint256 poolBalance = mooniswapTakerToken == address(0)\n            ? address(pool).balance\n            : IERC20TokenV06(mooniswapTakerToken).balanceOf(address(pool));\n        // If the pool balance is smaller than the sell amount\n        // don't sample to avoid multiplication overflow in buys\n        if (poolBalance < takerTokenAmount) {\n            return 0;\n        }\n        try\n            pool.getReturn\n                {gas: MOONISWAP_CALL_GAS}\n                (mooniswapTakerToken, mooniswapMakerToken, takerTokenAmount)\n            returns (uint256 amount)\n        {\n            return amount;\n        } catch (bytes memory) {\n            // Swallow failures, leaving all results as zero.\n            return 0;\n        }\n    }\n\n    /// @dev Sample buy quotes from Mooniswap.\n    /// @param registry Address of the Mooniswap Registry.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token sell amount for each sample.\n    /// @return pool The contract address for the pool\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromMooniswap(\n        address registry,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (IMooniswap pool, uint256[] memory takerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n\n        takerTokenAmounts = _sampleApproximateBuys(\n            ApproximateBuyQuoteOpts({\n                makerTokenData: abi.encode(registry, makerToken),\n                takerTokenData: abi.encode(registry, takerToken),\n                getSellQuoteCallback: _sampleSellForApproximateBuyFromMooniswap\n            }),\n            makerTokenAmounts\n        );\n\n        pool = IMooniswap(\n            IMooniswapRegistry(registry).pools(takerToken, makerToken)\n        );\n    }\n\n    function _sampleSellForApproximateBuyFromMooniswap(\n        bytes memory takerTokenData,\n        bytes memory makerTokenData,\n        uint256 sellAmount\n    )\n        private\n        view\n        returns (uint256 buyAmount)\n    {\n        (address registry, address mooniswapTakerToken) = abi.decode(takerTokenData, (address, address));\n        (address _registry, address mooniswapMakerToken) = abi.decode(makerTokenData, (address, address));\n        return sampleSingleSellFromMooniswapPool(\n            registry,\n            mooniswapTakerToken,\n            mooniswapMakerToken,\n            sellAmount\n        );\n    }\n}\n",
        "../src/interfaces/IMooniswap.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface IMooniswapRegistry {\n\n    function pools(address token1, address token2) external view returns(address);\n}\n\ninterface IMooniswap {\n\n    function getReturn(\n        address fromToken,\n        address destToken,\n        uint256 amount\n    )\n        external\n        view\n        returns(uint256 returnAmount);\n}\n",
        "../src/NativeOrderSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibMathV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol\";\n\n\ninterface IExchange {\n\n    enum OrderStatus {\n        INVALID,\n        FILLABLE,\n        FILLED,\n        CANCELLED,\n        EXPIRED\n    }\n\n    /// @dev A standard OTC or OO limit order.\n    struct LimitOrder {\n        IERC20TokenV06 makerToken;\n        IERC20TokenV06 takerToken;\n        uint128 makerAmount;\n        uint128 takerAmount;\n        uint128 takerTokenFeeAmount;\n        address maker;\n        address taker;\n        address sender;\n        address feeRecipient;\n        bytes32 pool;\n        uint64 expiry;\n        uint256 salt;\n    }\n\n    /// @dev An RFQ limit order.\n    struct RfqOrder {\n        IERC20TokenV06 makerToken;\n        IERC20TokenV06 takerToken;\n        uint128 makerAmount;\n        uint128 takerAmount;\n        address maker;\n        address taker;\n        address txOrigin;\n        bytes32 pool;\n        uint64 expiry;\n        uint256 salt;\n    }\n\n    /// @dev Info on a limit or RFQ order.\n    struct OrderInfo {\n        bytes32 orderHash;\n        OrderStatus status;\n        uint128 takerTokenFilledAmount;\n    }\n\n    /// @dev Allowed signature types.\n    enum SignatureType {\n        ILLEGAL,\n        INVALID,\n        EIP712,\n        ETHSIGN\n    }\n\n    /// @dev Encoded EC signature.\n    struct Signature {\n        // How to validate the signature.\n        SignatureType signatureType;\n        // EC Signature data.\n        uint8 v;\n        // EC Signature data.\n        bytes32 r;\n        // EC Signature data.\n        bytes32 s;\n    }\n\n    /// @dev Get the order info for a limit order.\n    /// @param order The limit order.\n    /// @return orderInfo Info about the order.\n    function getLimitOrderInfo(LimitOrder memory order)\n        external\n        view\n        returns (OrderInfo memory orderInfo);\n\n    /// @dev Get order info, fillable amount, and signature validity for a limit order.\n    ///      Fillable amount is determined using balances and allowances of the maker.\n    /// @param order The limit order.\n    /// @param signature The order signature.\n    /// @return orderInfo Info about the order.\n    /// @return actualFillableTakerTokenAmount How much of the order is fillable\n    ///         based on maker funds, in taker tokens.\n    /// @return isSignatureValid Whether the signature is valid.\n    function getLimitOrderRelevantState(\n        LimitOrder memory order,\n        Signature calldata signature\n    )\n        external\n        view\n        returns (\n            OrderInfo memory orderInfo,\n            uint128 actualFillableTakerTokenAmount,\n            bool isSignatureValid\n        );\n}\n\ncontract NativeOrderSampler {\n    using LibSafeMathV06 for uint256;\n    using LibBytesV06 for bytes;\n\n    /// @dev Gas limit for calls to `getOrderFillableTakerAmount()`.\n    uint256 constant internal DEFAULT_CALL_GAS = 200e3; // 200k\n\n    /// @dev Queries the fillable taker asset amounts of native orders.\n    ///      Effectively ignores orders that have empty signatures or\n    ///      maker/taker asset amounts (returning 0).\n    /// @param orders Native limit orders to query.\n    /// @param orderSignatures Signatures for each respective order in `orders`.\n    /// @param exchange The V4 exchange.\n    /// @return orderFillableTakerAssetAmounts How much taker asset can be filled\n    ///         by each order in `orders`.\n    function getLimitOrderFillableTakerAssetAmounts(\n        IExchange.LimitOrder[] memory orders,\n        IExchange.Signature[] memory orderSignatures,\n        IExchange exchange\n    )\n        public\n        view\n        returns (uint256[] memory orderFillableTakerAssetAmounts)\n    {\n        orderFillableTakerAssetAmounts = new uint256[](orders.length);\n        for (uint256 i = 0; i != orders.length; i++) {\n            try\n                this.getLimitOrderFillableTakerAmount\n                    {gas: DEFAULT_CALL_GAS}\n                    (\n                       orders[i],\n                       orderSignatures[i],\n                       exchange\n                    )\n                returns (uint256 amount)\n            {\n                orderFillableTakerAssetAmounts[i] = amount;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                orderFillableTakerAssetAmounts[i] = 0;\n            }\n        }\n    }\n\n    /// @dev Queries the fillable taker asset amounts of native orders.\n    ///      Effectively ignores orders that have empty signatures or\n    /// @param orders Native orders to query.\n    /// @param orderSignatures Signatures for each respective order in `orders`.\n    /// @param exchange The V4 exchange.\n    /// @return orderFillableMakerAssetAmounts How much maker asset can be filled\n    ///         by each order in `orders`.\n    function getLimitOrderFillableMakerAssetAmounts(\n        IExchange.LimitOrder[] memory orders,\n        IExchange.Signature[] memory orderSignatures,\n        IExchange exchange\n    )\n        public\n        view\n        returns (uint256[] memory orderFillableMakerAssetAmounts)\n    {\n        orderFillableMakerAssetAmounts = getLimitOrderFillableTakerAssetAmounts(\n            orders,\n            orderSignatures,\n            exchange\n        );\n        // `orderFillableMakerAssetAmounts` now holds taker asset amounts, so\n        // convert them to maker asset amounts.\n        for (uint256 i = 0; i < orders.length; ++i) {\n            if (orderFillableMakerAssetAmounts[i] != 0) {\n                orderFillableMakerAssetAmounts[i] = LibMathV06.getPartialAmountCeil(\n                    orderFillableMakerAssetAmounts[i],\n                    orders[i].takerAmount,\n                    orders[i].makerAmount\n                );\n            }\n        }\n    }\n\n    /// @dev Get the fillable taker amount of an order, taking into account\n    ///      order state, maker fees, and maker balances.\n    function getLimitOrderFillableTakerAmount(\n        IExchange.LimitOrder memory order,\n        IExchange.Signature memory signature,\n        IExchange exchange\n    )\n        virtual\n        public\n        view\n        returns (uint256 fillableTakerAmount)\n    {\n        if (signature.signatureType == IExchange.SignatureType.ILLEGAL ||\n            signature.signatureType == IExchange.SignatureType.INVALID ||\n            order.makerAmount == 0 ||\n            order.takerAmount == 0)\n        {\n            return 0;\n        }\n\n        (\n            IExchange.OrderInfo memory orderInfo,\n            uint128 remainingFillableTakerAmount,\n            bool isSignatureValid\n        ) = exchange.getLimitOrderRelevantState(order, signature);\n\n        if (\n              orderInfo.status != IExchange.OrderStatus.FILLABLE ||\n              !isSignatureValid ||\n              order.makerToken == IERC20TokenV06(0)\n            ) {\n            return 0;\n        }\n\n        fillableTakerAmount = uint256(remainingFillableTakerAmount);\n    }\n}\n",
        "../src/ShellSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./ApproximateBuys.sol\";\nimport \"./interfaces/IShell.sol\";\nimport \"./SamplerUtils.sol\";\n\n\ncontract ShellSampler is\n    SamplerUtils,\n    ApproximateBuys\n{\n\n    struct ShellInfo {\n        address poolAddress;\n    }\n\n    /// @dev Default gas limit for Shell calls.\n    uint256 constant private DEFAULT_CALL_GAS = 300e3; // 300k\n\n    /// @dev Sample sell quotes from the Shell pool contract\n    /// @param pool Address of the Shell pool contract\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromShell(\n        address pool,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        // Initialize array of maker token amounts.\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            try\n                IShell(pool).viewOriginSwap\n                    {gas: DEFAULT_CALL_GAS}\n                    (takerToken, makerToken, takerTokenAmounts[i])\n                returns (uint256 amount)\n            {\n                makerTokenAmounts[i] = amount;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from Shell pool contract\n    /// @param pool Address of the Shell pool contract\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromShell(\n        address pool,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        return _sampleApproximateBuys(\n            ApproximateBuyQuoteOpts({\n                makerTokenData: abi.encode(makerToken, pool),\n                takerTokenData: abi.encode(takerToken, pool),\n                getSellQuoteCallback: _sampleSellForApproximateBuyFromShell\n            }),\n            makerTokenAmounts\n        );\n    }\n\n    function _sampleSellForApproximateBuyFromShell(\n        bytes memory takerTokenData,\n        bytes memory makerTokenData,\n        uint256 sellAmount\n    )\n        private\n        view\n        returns (uint256 buyAmount)\n    {\n        (address takerToken, address pool) = abi.decode(takerTokenData, (address, address));\n        (address makerToken) = abi.decode(makerTokenData, (address));\n\n        try\n            this.sampleSellsFromShell\n                (pool, takerToken, makerToken, _toSingleValueArray(sellAmount))\n            returns (uint256[] memory amounts)\n        {\n            return amounts[0];\n        } catch (bytes memory) {\n            // Swallow failures, leaving all results as zero.\n            return 0;\n        }\n    }\n}\n",
        "../src/interfaces/IShell.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface IShell {\n\n    function viewOriginSwap (\n        address from,\n        address to,\n        uint256 fromAmount\n    )\n        external\n        view\n        returns (uint256 toAmount);\n\n    function viewTargetSwap (\n        address from,\n        address to,\n        uint256 toAmount\n    )\n        external\n        view\n        returns (uint256 fromAmount);\n}\n\n",
        "../src/SmoothySampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\n// import \"./interfaces/ISmoothy.sol\";\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\nimport \"./interfaces/ISmoothy.sol\";\n\ncontract SmoothySampler is\n    SamplerUtils,\n    ApproximateBuys\n{\n    /// @dev Information for sampling from smoothy sources.\n    struct SmoothyInfo {\n        address poolAddress;\n        bytes4 sellQuoteFunctionSelector;\n        bytes4 buyQuoteFunctionSelector;\n    }\n\n    /// @dev Base gas limit for Smoothy calls.\n    uint256 constant private SMOOTHY_CALL_GAS = 600e3;\n\n    /// @dev Sample sell quotes from Smoothy.\n    /// @param smoothyInfo Smoothy information specific to this token pair.\n    /// @param fromTokenIdx Index of the taker token (what to sell).\n    /// @param toTokenIdx Index of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromSmoothy(\n        SmoothyInfo memory smoothyInfo,\n        int128 fromTokenIdx,\n        int128 toTokenIdx,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        // Basically a Curve fork\n\n        // Smoothy only keep a percentage of its tokens available in reserve\n        uint256 poolReserveMakerAmount = ISmoothy(smoothyInfo.poolAddress).getBalance(uint256(toTokenIdx)) -\n                                         ISmoothy(smoothyInfo.poolAddress)._yBalances(uint256(toTokenIdx));\n        (, , , uint256 decimals) = ISmoothy(smoothyInfo.poolAddress).getTokenStats(uint256(toTokenIdx));\n        poolReserveMakerAmount = poolReserveMakerAmount/(10**(18-decimals));\n\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            (bool didSucceed, bytes memory resultData) =\n                smoothyInfo.poolAddress.staticcall.gas(SMOOTHY_CALL_GAS)(\n                    abi.encodeWithSelector(\n                        smoothyInfo.sellQuoteFunctionSelector,\n                        fromTokenIdx,\n                        toTokenIdx,\n                        takerTokenAmounts[i]\n                    ));\n            uint256 buyAmount = 0;\n            if (didSucceed) {\n                buyAmount = abi.decode(resultData, (uint256));\n            }\n\n            // Make sure the quoted buyAmount is available in the pool reserve\n            if (buyAmount >= poolReserveMakerAmount) {\n                // Assign pool reserve amount for all higher samples to break early\n                for (uint256 j = i; j < numSamples; j++) {\n                    makerTokenAmounts[j] = poolReserveMakerAmount;\n                }\n                break;\n            } else {\n                makerTokenAmounts[i] = buyAmount;\n            }\n\n            // Break early if there are 0 amounts\n            if (makerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from Smoothy.\n    /// @param smoothyInfo Smoothy information specific to this token pair.\n    /// @param fromTokenIdx Index of the taker token (what to sell).\n    /// @param toTokenIdx Index of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromSmoothy(\n        SmoothyInfo memory smoothyInfo,\n        int128 fromTokenIdx,\n        int128 toTokenIdx,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        // Buys not supported so approximate it.\n        return _sampleApproximateBuys(\n            ApproximateBuyQuoteOpts({\n                makerTokenData: abi.encode(toTokenIdx, smoothyInfo),\n                takerTokenData: abi.encode(fromTokenIdx, smoothyInfo),\n                getSellQuoteCallback: _sampleSellForApproximateBuyFromSmoothy\n            }),\n            makerTokenAmounts\n        );\n    }\n\n    function _sampleSellForApproximateBuyFromSmoothy(\n        bytes memory takerTokenData,\n        bytes memory makerTokenData,\n        uint256 sellAmount\n    )\n        private\n        view\n        returns (uint256 buyAmount)\n    {\n        (int128 takerTokenIdx, SmoothyInfo memory smoothyInfo) =\n            abi.decode(takerTokenData, (int128, SmoothyInfo));\n        (int128 makerTokenIdx) =\n            abi.decode(makerTokenData, (int128));\n        (bool success, bytes memory resultData) =\n            address(this).staticcall(abi.encodeWithSelector(\n                this.sampleSellsFromSmoothy.selector,\n                smoothyInfo,\n                takerTokenIdx,\n                makerTokenIdx,\n                _toSingleValueArray(sellAmount)\n            ));\n        if (!success) {\n            return 0;\n        }\n        // solhint-disable-next-line indent\n        return abi.decode(resultData, (uint256[]))[0];\n    }\n}\n",
        "../src/interfaces/ISmoothy.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface ISmoothy {\n\n    function getBalance (\n        uint256 tid\n    )\n        external\n        view\n        returns (uint256 balance);\n\n    function _yBalances (\n        uint256 tid\n    )\n        external\n        view\n        returns (uint256 balance);\n\n    function getTokenStats (\n        uint256 tid\n    )\n        external\n        view\n        returns (uint256 softWeight, uint256 hardWeight, uint256 balance, uint256 decimals);\n}\n",
        "../src/TwoHopSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol\";\n\n\ncontract TwoHopSampler {\n    using LibBytesV06 for bytes;\n\n    struct HopInfo {\n        uint256 sourceIndex;\n        bytes returnData;\n    }\n\n    function sampleTwoHopSell(\n        bytes[] memory firstHopCalls,\n        bytes[] memory secondHopCalls,\n        uint256 sellAmount\n    )\n        public\n        returns (\n            HopInfo memory firstHop,\n            HopInfo memory secondHop,\n            uint256 buyAmount\n        )\n    {\n        uint256 intermediateAssetAmount = 0;\n        for (uint256 i = 0; i != firstHopCalls.length; ++i) {\n            firstHopCalls[i].writeUint256(firstHopCalls[i].length - 32, sellAmount);\n            (bool didSucceed, bytes memory returnData) = address(this).call(firstHopCalls[i]);\n            if (didSucceed) {\n                uint256 amount = returnData.readUint256(returnData.length - 32);\n                if (amount > intermediateAssetAmount) {\n                    intermediateAssetAmount = amount;\n                    firstHop.sourceIndex = i;\n                    firstHop.returnData = returnData;\n                }\n            }\n        }\n        if (intermediateAssetAmount == 0) {\n            return (firstHop, secondHop, buyAmount);\n        }\n        for (uint256 j = 0; j != secondHopCalls.length; ++j) {\n            secondHopCalls[j].writeUint256(secondHopCalls[j].length - 32, intermediateAssetAmount);\n            (bool didSucceed, bytes memory returnData) = address(this).call(secondHopCalls[j]);\n            if (didSucceed) {\n                uint256 amount = returnData.readUint256(returnData.length - 32);\n                if (amount > buyAmount) {\n                    buyAmount = amount;\n                    secondHop.sourceIndex = j;\n                    secondHop.returnData = returnData;\n                }\n            }\n        }\n    }\n\n    function sampleTwoHopBuy(\n        bytes[] memory firstHopCalls,\n        bytes[] memory secondHopCalls,\n        uint256 buyAmount\n    )\n        public\n        returns (\n            HopInfo memory firstHop,\n            HopInfo memory secondHop,\n            uint256 sellAmount\n        )\n    {\n        sellAmount = uint256(-1);\n        uint256 intermediateAssetAmount = uint256(-1);\n        for (uint256 j = 0; j != secondHopCalls.length; ++j) {\n            secondHopCalls[j].writeUint256(secondHopCalls[j].length - 32, buyAmount);\n            (bool didSucceed, bytes memory returnData) = address(this).call(secondHopCalls[j]);\n            if (didSucceed) {\n                uint256 amount = returnData.readUint256(returnData.length - 32);\n                if (\n                    amount > 0 &&\n                    amount < intermediateAssetAmount\n                ) {\n                    intermediateAssetAmount = amount;\n                    secondHop.sourceIndex = j;\n                    secondHop.returnData = returnData;\n                }\n            }\n        }\n        if (intermediateAssetAmount == uint256(-1)) {\n            return (firstHop, secondHop, sellAmount);\n        }\n        for (uint256 i = 0; i != firstHopCalls.length; ++i) {\n            firstHopCalls[i].writeUint256(firstHopCalls[i].length - 32, intermediateAssetAmount);\n            (bool didSucceed, bytes memory returnData) = address(this).call(firstHopCalls[i]);\n            if (didSucceed) {\n                uint256 amount = returnData.readUint256(returnData.length - 32);\n                if (\n                    amount > 0 &&\n                    amount < sellAmount\n                ) {\n                    sellAmount = amount;\n                    firstHop.sourceIndex = i;\n                    firstHop.returnData = returnData;\n                }\n            }\n        }\n    }\n}\n",
        "../src/UniswapSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IUniswapExchangeQuotes.sol\";\nimport \"./SamplerUtils.sol\";\n\n\ninterface IUniswapExchangeFactory {\n\n    /// @dev Get the exchange for a token.\n    /// @param tokenAddress The address of the token contract.\n    function getExchange(address tokenAddress)\n        external\n        view\n        returns (address);\n}\n\n\ncontract UniswapSampler is\n    SamplerUtils\n{\n    /// @dev Gas limit for Uniswap calls.\n    uint256 constant private UNISWAP_CALL_GAS = 150e3; // 150k\n\n    /// @dev Sample sell quotes from Uniswap.\n    /// @param router Address of the Uniswap Router\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromUniswap(\n        address router,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        IUniswapExchangeQuotes takerTokenExchange = takerToken == address(0) ?\n            IUniswapExchangeQuotes(0) : _getUniswapExchange(router, takerToken);\n        IUniswapExchangeQuotes makerTokenExchange = makerToken == address(0) ?\n            IUniswapExchangeQuotes(0) : _getUniswapExchange(router, makerToken);\n        for (uint256 i = 0; i < numSamples; i++) {\n            bool didSucceed = true;\n            if (makerToken == address(0)) {\n                (makerTokenAmounts[i], didSucceed) = _callUniswapExchangePriceFunction(\n                    address(takerTokenExchange),\n                    takerTokenExchange.getTokenToEthInputPrice.selector,\n                    takerTokenAmounts[i]\n                );\n            } else if (takerToken == address(0)) {\n                (makerTokenAmounts[i], didSucceed) = _callUniswapExchangePriceFunction(\n                    address(makerTokenExchange),\n                    makerTokenExchange.getEthToTokenInputPrice.selector,\n                    takerTokenAmounts[i]\n                );\n            } else {\n                uint256 ethBought;\n                (ethBought, didSucceed) = _callUniswapExchangePriceFunction(\n                    address(takerTokenExchange),\n                    takerTokenExchange.getTokenToEthInputPrice.selector,\n                    takerTokenAmounts[i]\n                );\n                if (ethBought != 0) {\n                    (makerTokenAmounts[i], didSucceed) = _callUniswapExchangePriceFunction(\n                        address(makerTokenExchange),\n                        makerTokenExchange.getEthToTokenInputPrice.selector,\n                        ethBought\n                    );\n                } else {\n                    makerTokenAmounts[i] = 0;\n                }\n            }\n            // Break early if amounts are 0\n            if (!didSucceed || makerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from Uniswap.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token sell amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromUniswap(\n        address router,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n\n        IUniswapExchangeQuotes takerTokenExchange = takerToken == address(0) ?\n            IUniswapExchangeQuotes(0) : _getUniswapExchange(router, takerToken);\n        IUniswapExchangeQuotes makerTokenExchange = makerToken == address(0) ?\n            IUniswapExchangeQuotes(0) : _getUniswapExchange(router, makerToken);\n        for (uint256 i = 0; i < numSamples; i++) {\n            bool didSucceed = true;\n            if (makerToken == address(0)) {\n                (takerTokenAmounts[i], didSucceed) = _callUniswapExchangePriceFunction(\n                    address(takerTokenExchange),\n                    takerTokenExchange.getTokenToEthOutputPrice.selector,\n                    makerTokenAmounts[i]\n                );\n            } else if (takerToken == address(0)) {\n                (takerTokenAmounts[i], didSucceed) = _callUniswapExchangePriceFunction(\n                    address(makerTokenExchange),\n                    makerTokenExchange.getEthToTokenOutputPrice.selector,\n                    makerTokenAmounts[i]\n                );\n            } else {\n                uint256 ethSold;\n                (ethSold, didSucceed) = _callUniswapExchangePriceFunction(\n                    address(makerTokenExchange),\n                    makerTokenExchange.getEthToTokenOutputPrice.selector,\n                    makerTokenAmounts[i]\n                );\n                if (ethSold != 0) {\n                    (takerTokenAmounts[i], didSucceed) = _callUniswapExchangePriceFunction(\n                        address(takerTokenExchange),\n                        takerTokenExchange.getTokenToEthOutputPrice.selector,\n                        ethSold\n                    );\n                } else {\n                    takerTokenAmounts[i] = 0;\n                }\n            }\n            // Break early if amounts are 0\n            if (!didSucceed || takerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n    }\n\n    /// @dev Gracefully calls a Uniswap pricing function.\n    /// @param uniswapExchangeAddress Address of an `IUniswapExchangeQuotes` exchange.\n    /// @param functionSelector Selector of the target function.\n    /// @param inputAmount Quantity parameter particular to the pricing function.\n    /// @return outputAmount The returned amount from the function call. Will be\n    ///         zero if the call fails or if `uniswapExchangeAddress` is zero.\n    function _callUniswapExchangePriceFunction(\n        address uniswapExchangeAddress,\n        bytes4 functionSelector,\n        uint256 inputAmount\n    )\n        private\n        view\n        returns (uint256 outputAmount, bool didSucceed)\n    {\n        if (uniswapExchangeAddress == address(0)) {\n            return (outputAmount, didSucceed);\n        }\n        bytes memory resultData;\n        (didSucceed, resultData) =\n            uniswapExchangeAddress.staticcall.gas(UNISWAP_CALL_GAS)(\n                abi.encodeWithSelector(\n                    functionSelector,\n                    inputAmount\n                ));\n        if (didSucceed) {\n            outputAmount = abi.decode(resultData, (uint256));\n        }\n    }\n\n    /// @dev Retrive an existing Uniswap exchange contract.\n    ///      Throws if the exchange does not exist.\n    /// @param router Address of the Uniswap router.\n    /// @param tokenAddress Address of the token contract.\n    /// @return exchange `IUniswapExchangeQuotes` for the token.\n    function _getUniswapExchange(address router, address tokenAddress)\n        private\n        view\n        returns (IUniswapExchangeQuotes exchange)\n    {\n        exchange = IUniswapExchangeQuotes(\n            address(IUniswapExchangeFactory(router)\n            .getExchange(tokenAddress))\n        );\n    }\n}\n",
        "../src/interfaces/IUniswapExchangeQuotes.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface IUniswapExchangeQuotes {\n\n    function getEthToTokenInputPrice(\n        uint256 ethSold\n    )\n        external\n        view\n        returns (uint256 tokensBought);\n\n    function getEthToTokenOutputPrice(\n        uint256 tokensBought\n    )\n        external\n        view\n        returns (uint256 ethSold);\n\n    function getTokenToEthInputPrice(\n        uint256 tokensSold\n    )\n        external\n        view\n        returns (uint256 ethBought);\n\n    function getTokenToEthOutputPrice(\n        uint256 ethBought\n    )\n        external\n        view\n        returns (uint256 tokensSold);\n}\n",
        "../src/UniswapV2Sampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IUniswapV2Router01.sol\";\n\n\ncontract UniswapV2Sampler\n{\n    /// @dev Gas limit for UniswapV2 calls.\n    uint256 constant private UNISWAPV2_CALL_GAS = 150e3; // 150k\n\n    /// @dev Sample sell quotes from UniswapV2.\n    /// @param router Router to look up tokens and amounts\n    /// @param path Token route. Should be takerToken -> makerToken\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromUniswapV2(\n        address router,\n        address[] memory path,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            try\n                IUniswapV2Router01(router).getAmountsOut\n                    {gas: UNISWAPV2_CALL_GAS}\n                    (takerTokenAmounts[i], path)\n                returns (uint256[] memory amounts)\n            {\n                makerTokenAmounts[i] = amounts[path.length - 1];\n                // Break early if there are 0 amounts\n                if (makerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from UniswapV2.\n    /// @param router Router to look up tokens and amounts\n    /// @param path Token route. Should be takerToken -> makerToken.\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromUniswapV2(\n        address router,\n        address[] memory path,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            try\n                IUniswapV2Router01(router).getAmountsIn\n                    {gas: UNISWAPV2_CALL_GAS}\n                    (makerTokenAmounts[i], path)\n                returns (uint256[] memory amounts)\n            {\n                takerTokenAmounts[i] = amounts[0];\n                // Break early if there are 0 amounts\n                if (takerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n}\n",
        "../src/interfaces/IUniswapV2Router01.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface IUniswapV2Router01 {\n\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts);\n\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts);\n}\n",
        "../src/UniswapV3Sampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\n\ninterface IUniswapV3QuoterV2 {\n    function factory()\n        external\n        view\n        returns (IUniswapV3Factory factory);\n\n    // @notice Returns the amount out received for a given exact input swap without executing the swap\n    // @param path The path of the swap, i.e. each token pair and the pool fee\n    // @param amountIn The amount of the first token to swap\n    // @return amountOut The amount of the last token that would be received\n    // @return sqrtPriceX96AfterList List of the sqrt price after the swap for each pool in the path\n    // @return initializedTicksCrossedList List of the initialized ticks that the swap crossed for each pool in the path\n    // @return gasEstimate The estimate of the gas that the swap consumes\n    function quoteExactInput(bytes memory path, uint256 amountIn)\n        external\n        returns (\n            uint256 amountOut,\n            uint160[] memory sqrtPriceX96AfterList,\n            uint32[] memory initializedTicksCrossedList,\n            uint256 gasEstimate\n        );\n\n    // @notice Returns the amount in required for a given exact output swap without executing the swap\n    // @param path The path of the swap, i.e. each token pair and the pool fee. Path must be provided in reverse order\n    // @param amountOut The amount of the last token to receive\n    // @return amountIn The amount of first token required to be paid\n    // @return sqrtPriceX96AfterList List of the sqrt price after the swap for each pool in the path\n    // @return initializedTicksCrossedList List of the initialized ticks that the swap crossed for each pool in the path\n    // @return gasEstimate The estimate of the gas that the swap consumes\n    function quoteExactOutput(bytes memory path, uint256 amountOut)\n        external\n        returns (\n            uint256 amountIn,\n            uint160[] memory sqrtPriceX96AfterList,\n            uint32[] memory initializedTicksCrossedList,\n            uint256 gasEstimate\n        );\n}\n\ninterface IUniswapV3Factory {\n    function getPool(IERC20TokenV06 a, IERC20TokenV06 b, uint24 fee)\n        external\n        view\n        returns (IUniswapV3Pool pool);\n}\n\ninterface IUniswapV3Pool {\n    function token0() external view returns (IERC20TokenV06);\n    function token1() external view returns (IERC20TokenV06);\n    function fee() external view returns (uint24);\n}\n\ncontract UniswapV3Sampler\n{\n    /// @dev Gas limit for UniswapV3 calls. This is 100% a guess.\n    uint256 constant private QUOTE_GAS = 700e3;\n\n    /// @dev Sample sell quotes from UniswapV3.\n    /// @param quoter UniswapV3 Quoter contract.\n    /// @param path Token route. Should be takerToken -> makerToken\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return uniswapPaths The encoded uniswap path for each sample.\n    /// @return uniswapGasUsed Estimated amount of gas used\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromUniswapV3(\n        IUniswapV3QuoterV2 quoter,\n        IERC20TokenV06[] memory path,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        returns (\n            bytes[] memory uniswapPaths,\n            uint256[] memory uniswapGasUsed,\n            uint256[] memory makerTokenAmounts\n        )\n    {\n        IUniswapV3Pool[][] memory poolPaths =\n            _getValidPoolPaths(quoter.factory(), path, 0);\n\n        makerTokenAmounts = new uint256[](takerTokenAmounts.length);\n        uniswapPaths = new bytes[](takerTokenAmounts.length);\n        uniswapGasUsed = new uint256[](takerTokenAmounts.length);\n\n        for (uint256 i = 0; i < takerTokenAmounts.length; ++i) {\n            // Pick the best result from all the paths.\n            uint256 topBuyAmount = 0;\n            for (uint256 j = 0; j < poolPaths.length; ++j) {\n                bytes memory uniswapPath = _toUniswapPath(path, poolPaths[j]);\n                try quoter.quoteExactInput\n                    { gas: QUOTE_GAS }\n                    (uniswapPath, takerTokenAmounts[i])\n                    returns (\n                        uint256 buyAmount,\n                        uint160[] memory, /* sqrtPriceX96AfterList */\n                        uint32[] memory, /* initializedTicksCrossedList */\n                        uint256 gasUsed\n                    )\n                {\n                    if (topBuyAmount <= buyAmount) {\n                        topBuyAmount = buyAmount;\n                        uniswapPaths[i] = uniswapPath;\n                        uniswapGasUsed[i] = gasUsed;\n                    }\n                } catch {}\n            }\n            // Break early if we can't complete the sells.\n            if (topBuyAmount == 0) {\n                // HACK(kimpers): To avoid too many local variables, paths and gas used is set directly in the loop\n                // then reset if no valid valid quote was found\n                uniswapPaths[i] = \"\";\n                uniswapGasUsed[i] = 0;\n                break;\n            }\n            makerTokenAmounts[i] = topBuyAmount;\n        }\n    }\n\n    /// @dev Sample buy quotes from UniswapV3.\n    /// @param quoter UniswapV3 Quoter contract.\n    /// @param path Token route. Should be takerToken -> makerToken.\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return uniswapPaths The encoded uniswap path for each sample.\n    /// @return uniswapGasUsed Estimated amount of gas used\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromUniswapV3(\n        IUniswapV3QuoterV2 quoter,\n        IERC20TokenV06[] memory path,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        returns (\n            bytes[] memory uniswapPaths,\n            uint256[] memory uniswapGasUsed,\n            uint256[] memory takerTokenAmounts\n        )\n    {\n        IUniswapV3Pool[][] memory poolPaths =\n            _getValidPoolPaths(quoter.factory(), path, 0);\n        IERC20TokenV06[] memory reversedPath = _reverseTokenPath(path);\n\n        takerTokenAmounts = new uint256[](makerTokenAmounts.length);\n        uniswapPaths = new bytes[](makerTokenAmounts.length);\n        uniswapGasUsed = new uint256[](makerTokenAmounts.length);\n\n        for (uint256 i = 0; i < makerTokenAmounts.length; ++i) {\n            // Pick the best result from all the paths.\n            uint256 topSellAmount = 0;\n            for (uint256 j = 0; j < poolPaths.length; ++j) {\n                // quoter requires path to be reversed for buys.\n                bytes memory uniswapPath = _toUniswapPath(\n                    reversedPath,\n                    _reversePoolPath(poolPaths[j])\n                );\n                try\n                    quoter.quoteExactOutput\n                        { gas: QUOTE_GAS }\n                        (uniswapPath, makerTokenAmounts[i])\n                        returns (\n                            uint256 sellAmount,\n                            uint160[] memory, /* sqrtPriceX96AfterList */\n                            uint32[] memory, /* initializedTicksCrossedList */\n                            uint256 gasUsed\n                        )\n                {\n                    if (topSellAmount == 0 || topSellAmount >= sellAmount) {\n                        topSellAmount = sellAmount;\n                        // But the output path should still be encoded for sells.\n                        uniswapPaths[i] = _toUniswapPath(path, poolPaths[j]);\n                        uniswapGasUsed[i] = gasUsed;\n                    }\n                } catch {}\n            }\n            // Break early if we can't complete the buys.\n            if (topSellAmount == 0) {\n                // HACK(kimpers): To avoid too many local variables, paths and gas used is set directly in the loop\n                // then reset if no valid valid quote was found\n                uniswapPaths[i] = \"\";\n                uniswapGasUsed[i] = 0;\n                break;\n            }\n            takerTokenAmounts[i] = topSellAmount;\n        }\n    }\n\n    function _getValidPoolPaths(\n        IUniswapV3Factory factory,\n        IERC20TokenV06[] memory tokenPath,\n        uint256 startIndex\n    )\n        private\n        view\n        returns (IUniswapV3Pool[][] memory poolPaths)\n    {\n        require(\n            tokenPath.length - startIndex >= 2,\n            \"UniswapV3Sampler/tokenPath too short\"\n        );\n        uint24[4] memory validPoolFees = [\n            // The launch pool fees. Could get hairier if they add more.\n            uint24(0.0001e6),\n            uint24(0.0005e6),\n            uint24(0.003e6),\n            uint24(0.01e6)\n        ];\n        IUniswapV3Pool[] memory validPools =\n            new IUniswapV3Pool[](validPoolFees.length);\n        uint256 numValidPools = 0;\n        {\n            IERC20TokenV06 inputToken = tokenPath[startIndex];\n            IERC20TokenV06 outputToken = tokenPath[startIndex + 1];\n            for (uint256 i = 0; i < validPoolFees.length; ++i) {\n                IUniswapV3Pool pool =\n                factory.getPool(inputToken, outputToken, validPoolFees[i]);\n                if (_isValidPool(pool)) {\n                    validPools[numValidPools++] = pool;\n                }\n            }\n        }\n        if (numValidPools == 0) {\n            // No valid pools for this hop.\n            return poolPaths;\n        }\n        if (startIndex + 2 == tokenPath.length) {\n            // End of path.\n            poolPaths = new IUniswapV3Pool[][](numValidPools);\n            for (uint256 i = 0; i < numValidPools; ++i) {\n                poolPaths[i] = new IUniswapV3Pool[](1);\n                poolPaths[i][0] = validPools[i];\n            }\n            return poolPaths;\n        }\n        // Get paths for subsequent hops.\n        IUniswapV3Pool[][] memory subsequentPoolPaths =\n            _getValidPoolPaths(factory, tokenPath, startIndex + 1);\n        if (subsequentPoolPaths.length == 0) {\n            // Could not complete the path.\n            return poolPaths;\n        }\n        // Combine our pools with the next hop paths.\n        poolPaths = new IUniswapV3Pool[][](\n            numValidPools * subsequentPoolPaths.length\n        );\n        for (uint256 i = 0; i < numValidPools; ++i) {\n            for (uint256 j = 0; j < subsequentPoolPaths.length; ++j) {\n                uint256 o = i * subsequentPoolPaths.length + j;\n                // Prepend pool to the subsequent path.\n                poolPaths[o] =\n                    new IUniswapV3Pool[](1 + subsequentPoolPaths[j].length);\n                poolPaths[o][0] = validPools[i];\n                for (uint256 k = 0; k < subsequentPoolPaths[j].length; ++k) {\n                    poolPaths[o][1 + k] = subsequentPoolPaths[j][k];\n                }\n            }\n        }\n        return poolPaths;\n    }\n\n    function _reverseTokenPath(IERC20TokenV06[] memory tokenPath)\n        private\n        pure\n        returns (IERC20TokenV06[] memory reversed)\n    {\n        reversed = new IERC20TokenV06[](tokenPath.length);\n        for (uint256 i = 0; i < tokenPath.length; ++i) {\n            reversed[i] = tokenPath[tokenPath.length - i - 1];\n        }\n    }\n\n    function _reversePoolPath(IUniswapV3Pool[] memory poolPath)\n        private\n        pure\n        returns (IUniswapV3Pool[] memory reversed)\n    {\n        reversed = new IUniswapV3Pool[](poolPath.length);\n        for (uint256 i = 0; i < poolPath.length; ++i) {\n            reversed[i] = poolPath[poolPath.length - i - 1];\n        }\n    }\n\n    function _isValidPool(IUniswapV3Pool pool)\n        private\n        view\n        returns (bool isValid)\n    {\n        // Check if it has been deployed.\n        {\n            uint256 codeSize;\n            assembly {\n                codeSize := extcodesize(pool)\n            }\n            if (codeSize == 0) {\n                return false;\n            }\n        }\n        // Must have a balance of both tokens.\n        if (pool.token0().balanceOf(address(pool)) == 0) {\n            return false;\n        }\n        if (pool.token1().balanceOf(address(pool)) == 0) {\n            return false;\n        }\n        return true;\n    }\n\n    function _toUniswapPath(\n        IERC20TokenV06[] memory tokenPath,\n        IUniswapV3Pool[] memory poolPath\n    )\n        private\n        view\n        returns (bytes memory uniswapPath)\n    {\n        require(\n            tokenPath.length >= 2 && tokenPath.length == poolPath.length + 1,\n            \"UniswapV3Sampler/invalid path lengths\"\n        );\n        // Uniswap paths are tightly packed as:\n        // [token0, token0token1PairFee, token1, token1Token2PairFee, token2, ...]\n        uniswapPath = new bytes(tokenPath.length * 20 + poolPath.length * 3);\n        uint256 o;\n        assembly { o := add(uniswapPath, 32) }\n        for (uint256 i = 0; i < tokenPath.length; ++i) {\n            if (i > 0) {\n                uint24 poolFee = poolPath[i - 1].fee();\n                assembly {\n                    mstore(o, shl(232, poolFee))\n                    o := add(o, 3)\n                }\n            }\n            IERC20TokenV06 token = tokenPath[i];\n            assembly {\n                mstore(o, shl(96, token))\n                o := add(o, 20)\n            }\n        }\n    }\n}\n",
        "../src/UtilitySampler.sol": "\n// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\n\ncontract UtilitySampler {\n\n    using LibERC20TokenV06 for IERC20TokenV06;\n\n    IERC20TokenV06 private immutable UTILITY_ETH_ADDRESS = IERC20TokenV06(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\n\n    function getTokenDecimals(IERC20TokenV06[] memory tokens)\n        public\n        view\n        returns (uint256[] memory decimals)\n    {\n        decimals = new uint256[](tokens.length);\n        for (uint256 i = 0; i != tokens.length; i++) {\n            decimals[i] = tokens[i] == UTILITY_ETH_ADDRESS\n                ? 18\n                : tokens[i].compatDecimals();\n        }\n    }\n\n    function getBalanceOf(IERC20TokenV06[] memory tokens, address account)\n        public\n        view\n        returns (uint256[] memory balances)\n    {\n        balances = new uint256[](tokens.length);\n        for (uint256 i = 0; i != tokens.length; i++) {\n            balances[i] = tokens[i] == UTILITY_ETH_ADDRESS\n                ? account.balance\n                : tokens[i].compatBalanceOf(account);\n        }\n    }\n\n    function getAllowanceOf(IERC20TokenV06[] memory tokens, address account, address spender)\n        public\n        view\n        returns (uint256[] memory allowances)\n    {\n        allowances = new uint256[](tokens.length);\n        for (uint256 i = 0; i != tokens.length; i++) {\n            allowances[i] = tokens[i] == UTILITY_ETH_ADDRESS\n                ? 0\n                : tokens[i].compatAllowance(account, spender);\n        }\n    }\n\n    function isContract(address account)\n        public\n        view\n        returns (bool)\n    {\n        uint256 size;\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    function getGasLeft()\n        public\n        returns (uint256)\n    {\n        return gasleft();\n    }\n\n    function getBlockNumber()\n        public\n        view\n        returns (uint256)\n    {\n        return block.number;\n    }\n}"
    },
    "compiler": {
        "name": "solc",
        "version": "0.6.12+commit.27d51765",
        "settings": {
            "remappings": [
                "@0x/contracts-utils=/home/cluracan/code/0x/protocol/packages/asset-swapper/node_modules/@0x/contracts-utils",
                "@0x/contracts-erc20=/home/cluracan/code/0x/protocol/packages/asset-swapper/node_modules/@0x/contracts-erc20",
                "@0x/contracts-zero-ex=/home/cluracan/code/0x/protocol/packages/asset-swapper/node_modules/@0x/contracts-zero-ex"
            ],
            "optimizer": {
                "enabled": true,
                "runs": 200,
                "details": {
                    "yul": true,
                    "deduplicate": true
                }
            },
            "outputSelection": {
                "*": {
                    "*": [
                        "abi",
                        "devdoc",
                        "evm.bytecode.object",
                        "evm.bytecode.sourceMap",
                        "evm.deployedBytecode.object",
                        "evm.deployedBytecode.sourceMap"
                    ]
                }
            },
            "evmVersion": "istanbul"
        }
    },
    "chains": {}
}
